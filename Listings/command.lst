     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  stackSize equ 200*8    ;200 QWORD stacks always
     7                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     8                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber             db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector         dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster     db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSectorsPerClusterShift db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset              dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs           db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries   dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset      dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dClusterCount           dd ?  ;Total number of clusters in data area
    27 00000013 ????????            <1>     .dFATlength              dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor        db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag             db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr             dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?  ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?  ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?  ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?  ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?  ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?  ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?  ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?  ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?  ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?  ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> struc psp
   344 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   345 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   346 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   347 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   348 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   349 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   350 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   351                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   352                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   353                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   354                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   355                              <1> ; always used and jftSize.
   356                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   357 0000002A <res 14h>           <1>     .jobFileTbl resb dfltJFTsize ;Main File handle array, JFT
   358 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   359 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   360 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   361 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   362 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   363 0000005B ??                  <1>                 db ?  ;Reserved byte
   364                              <1> ;The below are in the same place as in DOS.
   365                              <1>     .cmdLineArgPtr: ;Symbol for future use
   366 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   367 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   368                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   369 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   370 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   371                              <1> endstruc
   372                              <1> 
   373                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   374                              <1> 
   375                              <1> struc clkStruc
   376 00000000 ????                <1>     .dateWord   dw ?
   377 00000002 ??                  <1>     .minutes    db ?
   378 00000003 ??                  <1>     .hours      db ?
   379 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   380 00000005 ??                  <1>     .seconds    db ?
   381                              <1> endstruc
   382                              <1> 
   383                              <1> 
   384                              <1> struc extCtryStruc
   385 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   386 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   387 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   388 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   389 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   390                              <1>                         ;0 = month day year hh:mm:ss
   391                              <1>                         ;1 = day month year hh:mm:ss
   392                              <1>                         ;2 = year month day hh:mm:ss
   393 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   394 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   395 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   396 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   397 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   398 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   399                              <1>                         ;0 = Symbol leads, without space
   400                              <1>                         ;1 = Symbol follows, without space
   401                              <1>                         ;2 = Symbol leads, one space
   402                              <1>                         ;3 = Symbol follows, one space
   403                              <1>                         ;4 = Symbol replace decimal separator
   404 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   405 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   406 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   407 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   408 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   409                              <1> endstruc
   410                              <1> 
   411                              <1> struc countryStruc
   412 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   413                              <1>                         ;0 = month day year hh:mm:ss
   414                              <1>                         ;1 = day month year hh:mm:ss
   415                              <1>                         ;2 = year month day hh:mm:ss
   416 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   417 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   418 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   419 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   420 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   421 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   422                              <1>                         ;0 = Symbol leads, without space
   423                              <1>                         ;1 = Symbol follows, without space
   424                              <1>                         ;2 = Symbol leads, one space
   425                              <1>                         ;3 = Symbol follows, one space
   426                              <1>                         ;4 = Symbol replace decimal separator
   427 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   428 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   429 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   430 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   431 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   432                              <1> endstruc
   433                              <1> 
   434                              <1> ;Critical Error AH bitfield equates
   435                              <1> critRead    equ 0h
   436                              <1> critWrite   equ 1h
   437                              <1> critDOS     equ 0h
   438                              <1> critFAT     equ 2h
   439                              <1> critDir     equ 4h
   440                              <1> critData    equ 6h
   441                              <1> critFailOK  equ 8h
   442                              <1> critRetryOK equ 10h
   443                              <1> critIgnorOK equ 20h
   444                              <1> critCharDev equ 80h
   445                              <1> 
   446                              <1> critIgnore  equ 0
   447                              <1> critRetry   equ 1
   448                              <1> critAbort   equ 2
   449                              <1> critFail    equ 3
   450                              <1> 
   451                              <1> ;MISC ASCII control chars
   452                              <1> NUL equ 00h ;^@         | ASCII Null
   453                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   454                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   455                              <1> BEL equ 07h ;^G         | ASCII Bell
   456                              <1> BSP equ 08h ;^H         | ASCII Backspace
   457                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   458                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   459                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   460                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   461                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   462                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   463                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   464                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   465                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   466                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   467                              <1> SPC equ 20h ;Printable  | ASCII Space
   468                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   469                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   470                              <1> 
   471                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   472                              <1> ;Extended Ascii Codes
   473                              <1> eF1     equ 3Bh ;F1 second byte
   474                              <1> eF2     equ 3Ch ;F2 second byte
   475                              <1> eF3     equ 3Dh ;F3 second byte
   476                              <1> eF4     equ 3Eh ;F4 second byte
   477                              <1> eF5     equ 3Fh ;F5 second byte
   478                              <1> eF6     equ 40h ;F6 second byte
   479                              <1> eF7     equ 41h ;F7 second byte
   480                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   481                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   482                              <1> eIns    equ 52h ;Insert second byte
   483                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   484                              <1> 
   485                              <1> ;Default Configuration for the system
   486                              <1> 
   487                              <1> buffersDefault  equ 30
   488                              <1> filesDefault    equ 20
   489                              <1> fcbsDefault     equ 4
   490                              <1> safeFcbsDeflt   equ 0
   491                              <1> lastDriveDeflt  equ 5   
   492                              <1> 
   493                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   494                              <1> ; then the char has this property.
   495                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   496                              <1> termChar    equ 2   ;Terminator char type
   497                              <1> sepChar     equ 4   ;Separator char type
   498                              <1> badFCBChar  equ 8   ;FCB filename char
     9                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   db ?  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   dq ?
     8 00000009 ??????              <1>     .fileext    db 3 dup (?)
     9 0000000C ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize dw ?  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   dw ?  ;Standard date format
    14 00000016 ????                <1>     .fileTime   dw ?  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  db ?  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   db 5 dup (?)  
    28 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   db ?  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   dq ?
    31 00000010 ??????              <1>     .fileext    db 3 dup (?)
    32 00000013 ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize dw ?  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   dw ?  ;Standard date format
    37 0000001D ????                <1>     .fileTime   dw ?  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  db ?  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   db ?
    52 00000001 ????????????????    <1>     .filename   dq ?
    53 00000009 ??????              <1>     .fileext    db 3 dup (?)
    54 0000000C ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    dq ?
    57 00000019 ??????              <1>     .newExt     db 3 dup (?)
    58 0000001C ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       db 5 dup (?)  
    66 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   db ?
    68 00000008 ????????????????    <1>     .filename   dq ?
    69 00000010 ??????              <1>     .fileext    db 3 dup (?)
    70 00000013 ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    dq ?
    73 00000020 ??????              <1>     .newExt     db 3 dup (?)
    74 00000023 ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord db ?  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust dw ?  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    dw ?  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   db ?  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  dw ?  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   dw ?  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   dw ?  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    dw ?  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   dw ?  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   dw ?  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
    10                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI24     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ 1 + fileNameZL  ;1 for the count prefix
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> ;In batch, for pointers, 0 means NULL.
    25                              <1> ;FOR/CALL not priorities for implementation right now.
    26                              <1> struc batBlockHdr
    27 00000000 ??                  <1>     .zero       db ?    ;Always null
    28 00000001 ??                  <1>     .bEchoFlg   db ?    ;Echo flag on entry to batch. 1 if echo on!
    29 00000002 ????????????????    <1>     .pCallBlk   dq ?    ;Pointer to the previous batch block when CALLed
    30 0000000A ????????????????    <1>     .pForBlk    dq ?    ;Pointer to the active FOR block
    31 00000012 ??                  <1>     .bBatFlg    db ?    ;Indicates type of command currently active
    32 00000013 ????????            <1>     .dBatOffLo  dd ?    ;LSEEK Low dword of the batch offset
    33 00000017 ????????            <1>     .dBatOffHi  dd ?    ;LSEEK High dword of the batch offset (0 unless net FS)
    34 0000001B <res 14h>           <1>     .wArgs      dw 10 dup (?) ;Offsets of parameters %0-%9. -1 means no param
    35                              <1>     .cmdLine:   ;0 terminated path (%0) followed by cmd line params.
    36                              <1>     ;We include terminating CR. Add null at the end to mean end of params.
    37                              <1> endstruc
    38                              <1> bbNoParam   equ -1
    39                              <1> bbNull      equ 0
    40                              <1> bbEchoOn    equ 1
    41                              <1> bbEchoOff   equ 0
    42                              <1> bbMaxAlloc  equ batBlockHdr_size + cmdBufferL + 1 ;Add 1 for good measure :)
    43                              <1> batNoEchoChar   equ "@" ;If a line starts with this, no echo!
    44                              <1> 
    45                              <1> 
    46                              <1> 
    47                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    48 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    49 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    50 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    51 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    52 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    53                              <1> endstruc
    54                              <1> 
    55                              <1> struc execProg  ;For use with EXEC-ing a child task
    56 00000000 ????????????????    <1>     .pEnv       dq ?  ;Ptr to environment block (or 0 => copy parent env)
    57 00000008 ????????????????    <1>     .pCmdLine   dq ?  ;Ptr to the command line to be placed at PSP + 80h
    58 00000010 ????????????????    <1>     .pfcb1      dq ?  ;Ptr to the first FCB (parsed argument 1)
    59 00000018 ????????????????    <1>     .pfcb2      dq ?  ;Ptr to the second FCB  (parsed argument 2)
    60                              <1> endstruc
    61                              <1> 
    62                              <1> ;Directory attribute equates
    63                              <1>     dirReadOnly     equ 01h
    64                              <1>     dirHidden       equ 02h
    65                              <1>     dirSystem       equ 04h
    66                              <1>     dirVolumeID     equ 08h
    67                              <1>     dirDirectory    equ 10h
    68                              <1>     dirArchive      equ 20h
    69                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    70                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    71                              <1>     ;If any of the three bits are set, then ALL three bits are set
    72                              <1>     ; in addition to whatever the user passed to search for.
    73                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    74                              <1>     dirIncFiles     equ dirHidden | dirSystem
    12                                  Segment cmd align=1 valign=1
    13                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9364C0000          <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 1400                <1> numHdls     dw 20   ;Get number of handles permitted
     8 00000019 5C                  <1> pathSep     db "\"  ;Default path sep
     9 0000001A 2F                  <1> switchChar  db "/"  ;Default switch char
    10                              <1> ;Static strings, not used in command line parsing
    11 0000001B 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    11 00000024 000000000000000000- <1>
    11 0000002D 000000000000000000- <1>
    11 00000036 000000000000000000- <1>
    11 0000003F 0000                <1>
    12 00000041 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    12 0000004A 000000000000000000- <1>
    12 00000053 000000000000000000- <1>
    12 0000005C 000000000000000000- <1>
    12 00000065 000000000000000000- <1>
    12 0000006E 000000000000000000- <1>
    12 00000077 000000000000000000- <1>
    12 00000080 00000000            <1>
    13 00000084 00                  <1> statFlg1    db 0    ;Flags 1 for the command interpreter
    14                              <1> permaShell  equ 1   ;Up if we are a permanent command interpreter
    15                              <1> inCtrlC     equ 2   ;Up if we are processing int 23h
    16                              <1> inSingle    equ 4   ;Up if processing a single command (\C mode)
    17                              <1> inBatch     equ 8   ;Up if processing a batch file
    18                              <1> batchEOF    equ 10h ;Set to indicate we have reached the end of the batch file
    19                              <1> inCritical  equ 20h   ;Up if processing a command
    20                              <1> inLdrDT     equ 40h ;Up if in the Date / Time part of Loader
    21                              <1> inLdr       equ 80h ;Up if in loader
    22 00000085 01                  <1> echoFlg     db 1    ;Global Echo flag, starts up! 1 means on
    23 00000086 FFFF                <1> errHdls     dw -1   ;Set to the STDIO handles. Non -1 => Handles swapped
    24                              <1> 
    25                              <1> cmdLineStatePtr:
    26 00000088 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    27 00000089 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    28 0000008B FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    29                              <1> ;These variables are valid for a SINGLE command in a command line
    30                              <1> ;Next two bytes, if set to -1, flags error
    31 0000008D 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    32 0000008E 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    33                              <1> ;                    If 2, we are redirecting output to a file, by appending
    34 0000008F FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    35 00000091 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    36                              <1> 
    37                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    38 00000093 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    39 00000094 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    40 00000095 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    41                              <1> 
    42 00000096 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    43 00000097 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    44 00000098 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    45                              <1> 
    46 00000099 00                  <1> switchFnd   db 0    ;Set if a switch char is found
    47                              <1> cmdStateL equ $ - cmdStatePtr
    48                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    49                              <1> 
    50                              <1> ;Batch state variables. Batch changes current dir to dir of batch file!
    51 0000009A 0000000000000000    <1> bbPtr       dq 0    ;Ptr to the batch block
    52 000000A2 000000000000000000- <1> batFile     db fileSpecZL dup (0)   ;Path to bat to execute. Qual with path!
    52 000000AB 000000000000000000- <1>
    52 000000B4 000000000000000000- <1>
    52 000000BD 000000000000000000- <1>
    52 000000C6 000000000000000000- <1>
    52 000000CF 000000000000000000- <1>
    52 000000D8 000000000000000000- <1>
    52 000000E1 000000000000000000- <1>
    52 000000EA 00000000000000      <1>
    53 000000F1 0201200D            <1> batYNstr    db 2,1," ",CR           ;String for buffered Y/N input
    54                              <1> ;batCallPtr  dq 0    ;Ptr to the call state block
    55                              <1> 
    56                              <1> ;Structs and strings
    57                              <1> 
    58 000000F5 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    58 000000FE 00000000000000      <1>
    59 00000105 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    59 0000010E 000000000000000000- <1>
    59 00000117 000000000000000000- <1>
    59 00000120 000000000000000000- <1>
    59 00000129 00000000000000      <1>
    60                              <1> 
    61 00000130 000000000000000000- <1> launchBlock db execProg_size dup (0)
    61 00000139 000000000000000000- <1>
    61 00000142 000000000000000000- <1>
    61 0000014B 0000000000          <1>
    62                              <1> 
    63                              <1> ;Use the below figure for the buffer "length" (byte 0) as this will allow 
    64                              <1> ; for us to type 127 characters plus a mandatory terminating 128th <CR>. 
    65                              <1> ; This will always be ok for copying to the PSP as on the PSP we have space for
    66                              <1> ; 127 chars. If we type 128 chars with terminating <CR>, the command name must be 
    67                              <1> ; at least 1 character long. The tail is formed of the remaining chars, so there
    68                              <1> ; will be at least 127 chars left. Thus we always have enough space.
    69                              <1> inBufferL   equ 128 
    70 00000150 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Original input from user! 128 chars max! 
    70 00000159 000000000000000000- <1>
    70 00000162 000000000000000000- <1>
    70 0000016B 000000000000000000- <1>
    70 00000174 000000000000000000- <1>
    70 0000017D 000000000000000000- <1>
    70 00000186 000000000000000000- <1>
    70 0000018F 000000000000000000- <1>
    70 00000198 000000000000000000- <1>
    70 000001A1 000000000000000000- <1>
    70 000001AA 000000000000000000- <1>
    70 000001B3 000000000000000000- <1>
    70 000001BC 000000000000000000- <1>
    70 000001C5 000000000000000000- <1>
    70 000001CE 00000000            <1>
    71 000001D2 000000000000000000- <1> cpyBuffer   db cmdBufferL dup (0)   ;Copied input for processing
    71 000001DB 000000000000000000- <1>
    71 000001E4 000000000000000000- <1>
    71 000001ED 000000000000000000- <1>
    71 000001F6 000000000000000000- <1>
    71 000001FF 000000000000000000- <1>
    71 00000208 000000000000000000- <1>
    71 00000211 000000000000000000- <1>
    71 0000021A 000000000000000000- <1>
    71 00000223 000000000000000000- <1>
    71 0000022C 000000000000000000- <1>
    71 00000235 000000000000000000- <1>
    71 0000023E 000000000000000000- <1>
    71 00000247 000000000000000000- <1>
    71 00000250 00000000            <1>
    72 00000254 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)   ;Buffer with the command pipeline
    72 0000025D 000000000000000000- <1>
    72 00000266 000000000000000000- <1>
    72 0000026F 000000000000000000- <1>
    72 00000278 000000000000000000- <1>
    72 00000281 000000000000000000- <1>
    72 0000028A 000000000000000000- <1>
    72 00000293 000000000000000000- <1>
    72 0000029C 000000000000000000- <1>
    72 000002A5 000000000000000000- <1>
    72 000002AE 000000000000000000- <1>
    72 000002B7 000000000000000000- <1>
    72 000002C0 000000000000000000- <1>
    72 000002C9 000000000000000000- <1>
    72 000002D2 00000000            <1>
    73 000002D6 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)   ;Space for full path to a ext cmd
    73 000002DF 000000000000000000- <1>
    73 000002E8 000000000000000000- <1>
    73 000002F1 000000000000000000- <1>
    73 000002FA 000000000000000000- <1>
    73 00000303 000000000000000000- <1>
    73 0000030C 000000000000000000- <1>
    73 00000315 000000000000000000- <1>
    73 0000031E 00000000000000      <1>
    74 00000325 000000000000000000- <1> cmdName     db cmdNameL dup (0)     ;Cmd name prefixed by length 
    74 0000032E 0000000000          <1>
    75                              <1> 
    76 00000333 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    76 0000033C 000000000000000000- <1>
    76 00000345 000000000000000000- <1>
    76 0000034E 000000000000000000- <1>
    76 00000357 000000000000000000- <1>
    76 00000360 000000000000000000- <1>
    76 00000369 000000000000000000- <1>
    76 00000372 000000000000000000- <1>
    76 0000037B 00000000000000      <1>
    77 00000382 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    77 0000038B 000000000000000000- <1>
    77 00000394 000000000000000000- <1>
    77 0000039D 000000000000000000- <1>
    77 000003A6 000000000000000000- <1>
    77 000003AF 000000000000000000- <1>
    77 000003B8 000000000000000000- <1>
    77 000003C1 000000000000000000- <1>
    77 000003CA 00000000000000      <1>
    78                              <1> 
    79                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    80 000003D1 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    80 000003DA 000000000000000000- <1>
    80 000003E3 000000000000000000- <1>
    80 000003EC 000000000000000000- <1>
    80 000003F5 000000000000000000- <1>
    80 000003FE 000000000000000000- <1>
    80 00000407 000000000000000000- <1>
    80 00000410 000000000000000000- <1>
    80 00000419 00000000000000      <1>
    81 00000420 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    81 00000429 000000000000000000- <1>
    81 00000432 000000000000000000- <1>
    81 0000043B 000000000000000000- <1>
    81 00000444 000000000000000000- <1>
    81 0000044D 000000000000000000- <1>
    81 00000456 000000000000000000- <1>
    81 0000045F 000000000000000000- <1>
    81 00000468 00000000000000      <1>
    82                              <1> 
    83 0000046F 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    84 00000477 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    85                              <1> 
    86                              <1> ;Main scratch buffer for forming paths! Needs to be large enough to splice
    87                              <1> ; a really long invalid DOS path for PATH to work properly.
    88 0000047F 000000000000000000- <1> searchSpec  db 2*cmdBufferL dup (0)   
    88 00000488 000000000000000000- <1>
    88 00000491 000000000000000000- <1>
    88 0000049A 000000000000000000- <1>
    88 000004A3 000000000000000000- <1>
    88 000004AC 000000000000000000- <1>
    88 000004B5 000000000000000000- <1>
    88 000004BE 000000000000000000- <1>
    88 000004C7 000000000000000000- <1>
    88 000004D0 000000000000000000- <1>
    88 000004D9 000000000000000000- <1>
    88 000004E2 000000000000000000- <1>
    88 000004EB 000000000000000000- <1>
    88 000004F4 000000000000000000- <1>
    88 000004FD 000000000000000000- <1>
    88 00000506 000000000000000000- <1>
    88 0000050F 000000000000000000- <1>
    88 00000518 000000000000000000- <1>
    88 00000521 000000000000000000- <1>
    88 0000052A 000000000000000000- <1>
    88 00000533 000000000000000000- <1>
    88 0000053C 000000000000000000- <1>
    88 00000545 000000000000000000- <1>
    88 0000054E 000000000000000000- <1>
    88 00000557 000000000000000000- <1>
    88 00000560 000000000000000000- <1>
    88 00000569 000000000000000000- <1>
    88 00000572 000000000000000000- <1>
    88 0000057B 0000000000000000    <1>
    89                              <1> 
    90                              <1> ;Internal Function vars
    91                              <1> ;Dir Vars
    92 00000583 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    93                              <1> ;                                   Bit[1] set => /P or /p specified
    94                              <1> ;                                   Bit[2] set => A file/path specified
    95 00000584 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    96 00000585 00000000            <1> dirFileCtr  dd 0    ;Used in /W mode, rollover after 5
    97 00000589 00                  <1> dirDrv      db 0    ;0 based drive number to use
    98 0000058A 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
    98 00000593 000000000000000000- <1>
    98 0000059C 000000000000000000- <1>
    98 000005A5 000000000000000000- <1>
    98 000005AE 000000000000000000- <1>
    98 000005B7 000000000000000000- <1>
    98 000005C0 000000000000000000- <1>
    98 000005C9 000000000000000000- <1>
    98 000005D2 000000000000000000- <1>
    98 000005DB 000000000000000000- <1>
    98 000005E4 000000000000000000- <1>
    98 000005ED 000000000000000000- <1>
    98 000005F6 000000000000000000- <1>
    98 000005FF 000000000000000000- <1>
    98 00000608 00000000            <1>
    99 0000060C 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
    99 00000615 3F3F3F3F3F3F3F      <1>
   100                              <1> dirWideType equ 1
   101                              <1> dirPageType equ 2
   102                              <1> dirFileType equ 4
   103                              <1> ;Volume Vars
   104                              <1> volFcb:
   105                              <1>     istruc exFcb
   106 0000061C FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
   107 0000061D 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
   108 00000623 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
   109 00000624 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
   110 0000062C 3F3F3F              <1>     at exFcb.fileext,   db "???"
   111 0000062F 00000000            <1>     at exFcb.curBlock,  dd 0
   112 00000633 00<rep 15h>         <1>     iend 
   113                              <1> 
   114                              <1> ;Time/Date vars
   115 00000648 00                  <1> td1 db 0    ;Minutes/Year
   116 00000649 00                  <1> td2 db 0    ;Hours/Zero
   117 0000064A 00                  <1> td3 db 0    ;Hundredths/Day
   118 0000064B 00                  <1> td4 db 0    ;Seconds/Month
   119                              <1> 
   120                              <1> ;Rename/Copy/Delete Buffers
   121                              <1> delPath:
   122                              <1> comspecDir:    ;Used to store the directory passed during startup
   123 0000064C 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   123 00000655 000000000000000000- <1>
   123 0000065E 000000000000000000- <1>
   123 00000667 000000000000000000- <1>
   123 00000670 000000000000000000- <1>
   123 00000679 000000000000000000- <1>
   123 00000682 000000000000000000- <1>
   123 0000068B 000000000000000000- <1>
   123 00000694 000000000000000000- <1>
   123 0000069D 000000000000000000- <1>
   123 000006A6 000000000000000000- <1>
   123 000006AF 000000000000000000- <1>
   123 000006B8 000000000000000000- <1>
   123 000006C1 000000000000000000- <1>
   123 000006CA 00000000            <1>
   124 000006CE 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   124 000006D7 000000000000000000- <1>
   124 000006E0 000000000000000000- <1>
   124 000006E9 000000000000000000- <1>
   124 000006F2 000000000000000000- <1>
   124 000006FB 000000000000000000- <1>
   124 00000704 000000000000000000- <1>
   124 0000070D 000000000000000000- <1>
   124 00000716 000000000000000000- <1>
   124 0000071F 000000000000000000- <1>
   124 00000728 000000000000000000- <1>
   124 00000731 000000000000000000- <1>
   124 0000073A 000000000000000000- <1>
   124 00000743 000000000000000000- <1>
   124 0000074C 00000000            <1>
   125 00000750 0000000000000000    <1> srcPtr      dq 0    ;Where to copy pattern to in src path
   126 00000758 0000000000000000    <1> destPtr     dq 0    ;Where to copy pattern to in dest path
   127 00000760 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   127 00000769 2020                <1>
   128                              <1> ;Copy vars
   129 0000076B 00                  <1> verifyFlg   db 0    ;Set if verify on before copy
   130 0000076C FFFF                <1> sourceHdl   dw -1
   131 0000076E FFFF                <1> destHdl     dw -1
   132 00000770 0000                <1> srcHdlInfo  dw 0    ;Save the hdl device info (bit 7 Set -> Char dev)
   133 00000772 0000000000000000    <1> cpBufPtr    dq 0    ;Ptr to the xfr arena
   134 0000077A 0000                <1> wCpBufSz    dw 0    ;Copy Buffer size, max 4096 bytes
   135 0000077C 00000000            <1> dCpCnt      dd 0    ;Number of files we have copied
   136 00000780 00                  <1> bCpFlg      db 0    ;Copy state flag
   137                              <1> 
   138                              <1> ascSrc      equ 1   ;Set if ascii copy for this source file.
   139                              <1> binSrc      equ 2   ;Set if last encountered src file flag was binary
   140                              <1> ascDes      equ 4   ;Set if add ^Z at end of file. Clear if not!
   141                              <1> wcSrc       equ 8   ;Set if wc's in source pattern. Display source file names.
   142                              <1> oneDest     equ 10h ;Single destination, not dir 
   143                              <1> mod1Cpy     equ 20h ;Set if copying files to new dir with same names
   144                              <1> mod2Cpy     equ 40h ;Set if copying files with new names
   145                              <1> mod3Cpy     equ 80h ;Set if dflt cat ASCII files to a single destination
   146                              <1> 
   147                              <1> ;Environment manipulation vars
   148 00000781 0000                <1> envVarSz        dw 0    ;Env var size
   149 00000783 0000                <1> envVarNamSz     dw 0    ;Env var "name="" length
    14                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 00000785 03444952            <1>     db 3, "DIR"
     8 00000789 741E                <1>     dw dir - startLbl
     9                              <1> 
    10 0000078B 024344              <1>     db 2, "CD"
    11 0000078E 6423                <1>     dw chdir - startLbl
    12                              <1> 
    13 00000790 054348444952        <1>     db 5, "CHDIR"
    14 00000796 6423                <1>     dw chdir - startLbl
    15                              <1> 
    16 00000798 024D44              <1>     db 2, "MD"
    17 0000079B DF23                <1>     dw mkdir - startLbl
    18                              <1> 
    19 0000079D 054D4B444952        <1>     db 5, "MKDIR"
    20 000007A3 DF23                <1>     dw mkdir - startLbl
    21                              <1> 
    22 000007A5 025244              <1>     db 2, "RD"
    23 000007A8 2824                <1>     dw rmdir - startLbl
    24                              <1> 
    25 000007AA 05524D444952        <1>     db 5, "RMDIR"
    26 000007B0 2824                <1>     dw rmdir - startLbl
    27                              <1> 
    28 000007B2 0344454C            <1>     db 3, "DEL"
    29 000007B6 EB2B                <1>     dw erase - startLbl
    30                              <1> 
    31 000007B8 054552415345        <1>     db 5, "ERASE"
    32 000007BE EB2B                <1>     dw erase - startLbl
    33                              <1> 
    34 000007C0 0444415445          <1>     db 4, "DATE"
    35 000007C5 2E2D                <1>     dw date - startLbl
    36                              <1> 
    37 000007C7 0454494D45          <1>     db 4, "TIME"
    38 000007CC DC2E                <1>     dw time - startLbl
    39                              <1> 
    40 000007CE 04434F5059          <1>     db 4, "COPY"
    41 000007D3 7224                <1>     dw copy - startLbl
    42                              <1> 
    43 000007D5 0443545459          <1>     db 4, "CTTY"
    44 000007DA 0530                <1>     dw ctty - startLbl
    45                              <1> 
    46 000007DC 03434C53            <1>     db 3, "CLS"
    47 000007E0 AC30                <1>     dw cls - startLbl
    48                              <1> 
    49 000007E2 05425245414B        <1>     db 5, "BREAK"
    50 000007E8 1E31                <1>     dw break - startLbl
    51                              <1> 
    52 000007EA 06564552494659      <1>     db 6, "VERIFY"
    53 000007F1 9F31                <1>     dw verify - startLbl
    54                              <1> 
    55 000007F3 0652454E414D45      <1>     db 6, "RENAME"
    56 000007FA 1C32                <1>     dw rename - startLbl
    57                              <1> 
    58 000007FC 0352454E            <1>     db 3, "REN"
    59 00000800 1C32                <1>     dw rename - startLbl
    60                              <1>     
    61 00000802 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 0000080B 6536                <1>     dw truename - startLbl
    63                              <1> 
    64 0000080D 03564552            <1>     db 3, "VER"
    65 00000811 4B38                <1>     dw version - startLbl
    66                              <1> 
    67 00000813 03564F4C            <1>     db 3, "VOL"
    68 00000817 8C37                <1>     dw volume - startLbl
    69                              <1> 
    70 00000819 034D454D            <1>     db 3, "MEM"
    71 0000081D 8F38                <1>     dw memory - startLbl
    72                              <1> 
    73 0000081F 0445584954          <1>     db 4, "EXIT"
    74 00000824 8C3A                <1>     dw exit - startLbl
    75                              <1> 
    76 00000826 0454595045          <1>     db 4, "TYPE"
    77 0000082B D939                <1>     dw type - startLbl
    78                              <1> 
    79 0000082D 054C4142454C        <1>     db 5, "LABEL"
    80 00000833 B636                <1>     dw label - startLbl
    81                              <1> 
    82 00000835 0450415448          <1>     db 4, "PATH"
    83 0000083A CB3D                <1>     dw pathEdit - startLbl
    84                              <1> 
    85 0000083C 03534554            <1>     db 3, "SET"
    86 00000840 AC3C                <1>     dw set - startLbl
    87                              <1> 
    88 00000842 0650524F4D5054      <1>     db 6, "PROMPT"
    89 00000849 AA3E                <1>     dw prompt - startLbl
    90                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    91 0000084B 054D4B4C424C        <1>     db 5, "MKLBL"
    92 00000851 E036                <1>     dw mklbl - startLbl
    93                              <1> 
    94 00000853 05524D4C424C        <1>     db 5, "RMLBL"
    95 00000859 1B37                <1>     dw rmlbl - startLbl
    96                              <1> 
    97 0000085B 05524E4C424C        <1>     db 5, "RNLBL"
    98 00000861 5637                <1>     dw rnlbl - startLbl
    99                              <1> 
   100 00000863 05544F554348        <1>     db 5, "TOUCH"
   101 00000869 5834                <1>     dw touch - startLbl
   102                              <1> 
   103 0000086B 044A4F494E          <1>     db 4, "JOIN"
   104 00000870 BB34                <1>     dw join - startLbl
   105                              <1> 
   106 00000872 055355425354        <1>     db 5, "SUBST"
   107 00000878 7E35                <1>     dw subst - startLbl
   108                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   109                              <1> 
   110                              <1> ;BATCH ORIENTED COMMANDS HERE
   111 0000087A 044543484F          <1>     db 4, "ECHO"
   112 0000087F 1A3F                <1>     dw echo - startLbl
   113                              <1> 
   114 00000881 055041555345        <1>     db 5, "PAUSE"
   115 00000887 D73F                <1>     dw pauza - startLbl
   116                              <1> 
   117 00000889 0352454D            <1>     db 3, "REM"
   118 0000088D 2040                <1>     dw remark - startLbl
   119 0000088F FF                  <1>     db -1   ;End of table
    15                                  %include "./Data/cmdStr.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 00000890 0D0A24              <1> crlf    db  CR,LF,"$"
     3 00000893 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 00000898 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 000008A1 696C65206D69737369- <1>
     4 000008AA 6E670D0A24          <1>
     5 000008AF 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 000008B8 6469736B2077697468- <1>
     5 000008C1 206261746368206669- <1>
     5 000008CA 6C65                <1>
     6 000008CC 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 000008D5 737320616E79206B65- <1>
     6 000008DE 79207768656E207265- <1>
     6 000008E7 6164790D0A24        <1>
     7 000008ED 0D0A5465726D696E61- <1> batFail db  CR,LF,"Terminate batch job (Y/N)? $"
     7 000008F6 746520626174636820- <1>
     7 000008FF 6A6F622028592F4E29- <1>
     7 00000908 3F2024              <1>
     8 0000090B 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     8 00000914 6E64206F722066696C- <1>
     8 0000091D 65206E616D650D0A24  <1>
     9 00000926 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     9 0000092F 2066696C65206E616D- <1>
     9 00000938 65206F7220          <1>
    10 0000093D 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    10 00000946 666F756E640D0A24    <1>
    11 0000094E 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full.
    11 00000957 656E74206469736B20- <1>
    11 00000960 73706163650D0A24    <1>
    12 00000968 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    12 00000971 7669726F6E6D656E74- <1>
    12 0000097A 2073706163650D0A24  <1>
    13 00000983 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    13 0000098C 74696F6E206572726F- <1>
    13 00000995 720D0A24            <1>
    14 00000999 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    14 000009A2 6F7420626520636F70- <1>
    14 000009AB 696564206F6E746F20- <1>
    14 000009B4 697473656C660D0A24  <1>
    15 000009BD 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    15 000009C6 662064657374696E61- <1>
    15 000009CF 74696F6E206C6F7374- <1>
    15 000009D8 206265666F72652063- <1>
    15 000009E1 6F70790D0A24        <1>
    16                              <1> ;Copy end message. First write # files copied then this message 
    17 000009E7 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    17 000009F0 636F706965640D0A24  <1>
    18 000009F9 4E6F7420656E6F7567- <1> cpNoMem db  "Not enough memory for COPY",CR,LF,"$"      ;Never should happen
    18 00000A02 68206D656D6F727920- <1>
    18 00000A0B 666F7220434F50590D- <1>
    18 00000A14 0A24                <1>
    19                              <1> ;Dir end1 msg. First write # files in dir then this
    20 00000A16 2046696C6528732920- <1> dirOk   db  " File(s) $"
    20 00000A1F 24                  <1>
    21                              <1> ;Dir end2 msg. First write # bytes free then this message
    22 00000A20 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    22 00000A29 65650D0A24          <1>
    23 00000A2E 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    24                              <1> 
    25 00000A37 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    25 00000A40 726976652073706563- <1>
    25 00000A49 696669636174696F6E- <1>
    25 00000A52 0D0A24              <1>
    26 00000A55 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    26 00000A5E 6B6579207768656E20- <1>
    26 00000A67 7265616479202E202E- <1>
    26 00000A70 202E2024            <1>
    27 00000A74 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    27 00000A7D 6172616D657465720D- <1>
    27 00000A86 0A24                <1>
    28                              <1> 
    29 00000A88 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    29 00000A91 576564546875467269- <1>
    29 00000A9A 536174              <1>
    30 00000A9D 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    30 00000AA6 206461746524        <1>
    31 00000AAC 43757272656E742064- <1> curDate db  "Current date is $"
    31 00000AB5 6174652069732024    <1>
    32 00000ABD 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    32 00000AC6 657720646174652024  <1>
    33 00000ACF 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    33 00000AD8 293A2024            <1>
    34 00000ADC 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    34 00000AE5 293A2024            <1>
    35 00000AE9 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    35 00000AF2 293A2024            <1>
    36 00000AF6 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    36 00000AFF 2074696D6524        <1>
    37 00000B05 43757272656E742074- <1> curTime db  "Current time is $"
    37 00000B0E 696D652069732024    <1>
    38 00000B16 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    38 00000B1F 65772074696D653A20- <1>
    38 00000B28 24                  <1>
    39                              <1> 
    40 00000B29 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    40 00000B32 7572652028592F4E29- <1>
    40 00000B3B 3F2024              <1>
    41                              <1> 
    42 00000B3E 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    42 00000B47 56657273696F6E2024  <1>
    43                              <1> 
    44 00000B50 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    44 00000B59 6E2064726976652024  <1>
    45 00000B62 2069732024          <1> volOk   db " is $"
    46 00000B67 20686173206E6F206C- <1> volNo   db " has no label$"
    46 00000B70 6162656C24          <1>
    47                              <1> 
    48 00000B75 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    48 00000B7E 69726563746F72790D- <1>
    48 00000B87 0A24                <1>
    49 00000B89 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    49 00000B92 206372656174652064- <1>
    49 00000B9B 69726563746F72790D- <1>
    49 00000BA4 0A24                <1>
    50 00000BA6 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    50 00000BAF 6174682C206E6F7420- <1>
    50 00000BB8 6469726563746F7279- <1>
    50 00000BC1 2C0D0A              <1>
    51 00000BC4 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    51 00000BCD 6F7279206E6F742065- <1>
    51 00000BD6 6D7074790D0A24      <1>
    52 00000BDD 204469726563746F72- <1> dirMain db " Directory of  $"
    52 00000BE6 79206F66202024      <1>
    53 00000BED 4E6F20506174682024  <1> noPath  db "No Path $"
    54 00000BF6 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    54 00000BFF 6E6965640D0A24      <1>
    55 00000C06 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    55 00000C0F 72697665206973206E- <1>
    55 00000C18 6F206C6F6E67657220- <1>
    55 00000C21 76616C696424        <1>
    56                              <1> ;badDrvSrch  db "Invalid drive in search path",CR,LF,"$"        ;MAY REMOVE
    57 00000C27 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    57 00000C30 65766963650D0A24    <1>
    58 00000C38 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    58 00000C41 20666F756E640D0A24  <1>
    59 00000C4A 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    59 00000C53 726F720D0A24        <1>
    60 00000C59 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    60 00000C62 6F74206265206E6573- <1>
    60 00000C6B 7465640D0A24        <1>
    61 00000C71 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    61 00000C7A 6174652066696C6520- <1>
    61 00000C83 6572726F7220647572- <1>
    61 00000C8C 696E6720706970650D- <1>
    61 00000C95 0A24                <1>
    62 00000C97 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    62 00000CA0 2062696E6172792072- <1>
    62 00000CA9 656164732066726F6D- <1>
    62 00000CB2 206120646576696365- <1>
    62 00000CBB 0D0A24              <1>
    63 00000CBE 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    64 00000CC4 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    65 00000CC9 425245414B20697320- <1> breakIs db "BREAK is $"
    65 00000CD2 24                  <1>
    66 00000CD3 564552494659206973- <1> verifyIs    db "VERIFY is $"
    66 00000CDC 2024                <1>
    67 00000CDE 4543484F2069732024  <1> echoIs  db "ECHO is $"  
    68 00000CE7 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    68 00000CF0 617468206F72206669- <1>
    68 00000CF9 6C65206E616D650D0A- <1>
    68 00000D02 24                  <1>
    69 00000D03 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    69 00000D0C 756D626572206F6620- <1>
    69 00000D15 706172616D65746572- <1>
    69 00000D1E 730D0A24            <1>
    70 00000D22 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    70 00000D2B 74696E6720746F2064- <1>
    70 00000D34 6576696365          <1>
    71 00000D39 08200800            <1> backSpace   db BSP," ",BSP,NUL
    72 00000D3D 50726F6772616D2074- <1> noMemMsg  db "Program too big to fit in memory",CR,LF,"$"
    72 00000D46 6F6F2062696720746F- <1>
    72 00000D4F 2066697420696E206D- <1>
    72 00000D58 656D6F72790D0A24    <1>
    73                              <1> 
    74                              <1> 
    75 00000D60 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    75 00000D69 20202020202020546F- <1>
    75 00000D72 74616C207379737465- <1>
    75 00000D7B 6D206D656D6F72793A- <1>
    75 00000D84 2024                <1>
    76 00000D86 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    76 00000D8F 20202020202020204D- <1>
    76 00000D98 656D6F727920757365- <1>
    76 00000DA1 6420627920444F533A- <1>
    76 00000DAA 2024                <1>
    77 00000DAC 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    77 00000DB5 656D6F727920757365- <1>
    77 00000DBE 64206279206170706C- <1>
    77 00000DC7 69636174696F6E733A- <1>
    77 00000DD0 2024                <1>
    78 00000DD2 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    78 00000DDB 656D6F727920726573- <1>
    78 00000DE4 657276656420627920- <1>
    78 00000DED 68617264776172653A- <1>
    78 00000DF6 2024                <1>
    79 00000DF8 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    79 00000E01 202020202020202020- <1>
    79 00000E0A 2020202020204D656D- <1>
    79 00000E13 6F727920667265653A- <1>
    79 00000E1C 2024                <1>
    80 00000E1E 20627974657324      <1> memByte db " bytes$"
    81 00000E25 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    81 00000E2E 6F7420417373657274- <1>
    81 00000E37 61696E20444F532045- <1>
    81 00000E40 6E74727920506F696E- <1>
    81 00000E49 7424                <1>
    82 00000E4B 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    82 00000E54 416C6C6F636174696F- <1>
    82 00000E5D 6E204572726F7224    <1>
    83 00000E65 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    83 00000E6E 4572726F7224        <1>
    84 00000E74 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    84 00000E7D 68616C74656424      <1>
    85                              <1> 
    86 00000E84 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    86 00000E8D 206372656174652070- <1>
    86 00000E96 6970650D0A          <1>
    87                              <1> pipeErrMsgL equ $ - pipeErrMsg
    88 00000E9B 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    88 00000EA4 6F6E206572726F720D- <1>
    88 00000EAD 0A                  <1>
    89                              <1> redirErrMsgL   equ $ - redirErrMsg
    90                              <1> 
    91 00000EAE 1B5B324A            <1> ansiCls  db ESC,"[2J" ;ANSI CLS sequence, 4 chars long
    92 00000EB2 2020202024          <1> fourSpc  db "    $"
    93 00000EB7 20202024            <1> threeSpc db "   $"
    94 00000EBB 202024              <1> twoSpc   db "  $"
    95                              <1> 
    96 00000EBE 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    96 00000EC7 696679204F4E206F72- <1>
    96 00000ED0 204F46460D0A24      <1>
    97                              <1> 
    98 00000ED7 50524F4D50543D0D    <1> promptEVar  db "PROMPT=",CR     ;Must be CR terminated!
    99 00000EDF 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
   100                              <1> ;If anything goes wrong with piping or redirecting just close first two 
   101                              <1> ; handles and reopen this device. Defaults to CON
   102 00000EE8 434F4E000000000000  <1> devName db "CON", 6 dup (0) ;8 chars + space for null terminator
   103 00000EF1 5F3A5C4155544F4558- <1> autoSpec    db "_:\AUTOEXEC.BAT",0
   103 00000EFA 45432E42415400      <1>
   104                              <1> autoSpecL equ $ - autoSpec
   105 00000F01 504154483D00        <1> pathEVar    db "PATH=",0
   106 00000F07 434F4D535045433D00  <1> comspecEVar db "COMSPEC=",0
   107 00000F10 434F4D4D414E442E43- <1> cspec   db "COMMAND.COM", 0
   107 00000F19 4F4D00              <1>
   108                              <1> 
   109                              <1> ;Int 24h strings
   110                              <1> errMsgPtrTbl:
   111 00000F1C 2400                <1>     dw errorMsgTbl.0 - errMsgPtrTbl
   112 00000F1E 3400                <1>     dw errorMsgTbl.1 - errMsgPtrTbl
   113 00000F20 4200                <1>     dw errorMsgTbl.2 - errMsgPtrTbl
   114 00000F22 4D00                <1>     dw errorMsgTbl.3 - errMsgPtrTbl
   115 00000F24 5E00                <1>     dw errorMsgTbl.4 - errMsgPtrTbl
   116 00000F26 6400                <1>     dw errorMsgTbl.5 - errMsgPtrTbl
   117 00000F28 7100                <1>     dw errorMsgTbl.6 - errMsgPtrTbl
   118 00000F2A 7700                <1>     dw errorMsgTbl.7 - errMsgPtrTbl
   119 00000F2C 8600                <1>     dw errorMsgTbl.8 - errMsgPtrTbl
   120 00000F2E 9800                <1>     dw errorMsgTbl.9 - errMsgPtrTbl
   121 00000F30 A600                <1>     dw errorMsgTbl.A - errMsgPtrTbl
   122 00000F32 B300                <1>     dw errorMsgTbl.B - errMsgPtrTbl
   123 00000F34 BF00                <1>     dw errorMsgTbl.C - errMsgPtrTbl
   124 00000F36 D000                <1>     dw errorMsgTbl.D - errMsgPtrTbl
   125 00000F38 E300                <1>     dw errorMsgTbl.E - errMsgPtrTbl
   126 00000F3A F300                <1>     dw errorMsgTbl.F - errMsgPtrTbl
   127 00000F3C 1401                <1>     dw errorMsgTbl.10 - errMsgPtrTbl
   128 00000F3E 2501                <1>     dw errorMsgTbl.11 - errMsgPtrTbl
   129                              <1> errorMsgTbl:
   130 00000F40 57726974652050726F- <1> .0: db "Write Proctect $"       ;Driver Error 0 / DOS Error 013h
   130 00000F49 63746563742024      <1>
   131 00000F50 556E6B6E6F776E2055- <1> .1: db "Unknown Unit $"         ;Driver Error 1 / DOS Error 014h
   131 00000F59 6E69742024          <1>
   132 00000F5E 4E6F74205265616479- <1> .2: db "Not Ready $"            ;Driver Error 2 / DOS Error 015h
   132 00000F67 2024                <1>
   133 00000F69 556E6B6E6F776E2043- <1> .3: db "Unknown Command $"      ;Driver Error 3 / DOS Error 016h
   133 00000F72 6F6D6D616E642024    <1>
   134 00000F7A 446174612024        <1> .4: db "Data $"                 ;Driver Error 4 / DOS Error 017h
   135 00000F80 426164205265717565- <1> .5: db "Bad Request $"          ;Driver Error 5 / DOS Error 018h
   135 00000F89 73742024            <1>
   136 00000F8D 5365656B2024        <1> .6: db "Seek $"                 ;Driver Error 6 / DOS Error 019h
   137 00000F93 556E6B6E6F776E204D- <1> .7: db "Unknown Media $"        ;Driver Error 7 / DOS Error 01Ah
   137 00000F9C 656469612024        <1>
   138 00000FA2 536563746F72204E6F- <1> .8: db "Sector Not Found $"     ;Driver Error 8 / DOS Error 01Bh
   138 00000FAB 7420466F756E642024  <1>
   139 00000FB4 4F7574204F66205061- <1> .9: db "Out Of Paper $"         ;Driver Error 9 / DOS Error 01Ch
   139 00000FBD 7065722024          <1>
   140 00000FC2 577269746520466175- <1> .A: db "Write Fault $"          ;Driver Error A / DOS Error 01Dh
   140 00000FCB 6C742024            <1>
   141 00000FCF 52656164204661756C- <1> .B: db "Read Fault $"           ;Driver Error B / DOS Error 01Eh
   141 00000FD8 742024              <1>
   142 00000FDB 47656E6572616C2046- <1> .C: db "General Failure $"      ;Driver Error C / DOS Error 01Fh
   142 00000FE4 61696C7572652024    <1>
   143 00000FEC 53686172696E672076- <1> .D: db "Sharing violation $"    ;SHARE Error / DOS Error 020h
   143 00000FF5 696F6C6174696F6E20- <1>
   143 00000FFE 24                  <1>
   144 00000FFF 4C6F636B2076696F6C- <1> .E: db "Lock violation $"       ;SHARE Error / DOS Error 021h
   144 00001008 6174696F6E2024      <1>
   145 0000100F 506C6561736520496E- <1> .F: db "Please Insert disk "    ;Driver Error F / DOS Error 022h
   145 00001018 73657274206469736B- <1>
   145 00001021 20                  <1>
   146 00001022 202020202020202020- <1> .FVol:  db 11 dup (" ")         ; Volume name for disk. Setup before print
   146 0000102B 2020                <1>
   147 0000102D 0D0A24              <1>         db CR,LF,"$"
   148                              <1> ;Next two strings dont print any more information, such as reading/writing etc
   149 00001030 46434220756E617661- <1> .10:    db "FCB unavailable $"      ;FCB Error / DOS Error 023h - RESERVED
   149 00001039 696C61626C652024    <1>
   150 00001041 53686172696E672062- <1> .11:    db "Sharing buffer error $" ;SHARE Error / Error 024h
   150 0000104A 756666657220657272- <1>
   150 00001053 6F722024            <1>
   151                              <1> 
   152                              <1> ;Anything above this is a generic network error.
   153 00001057 47656E6572616C204E- <1> genNetErr   db "General Network Error $"    ;All NET errors codes [32h, 58h]
   153 00001060 6574776F726B204572- <1>
   153 00001069 726F722024          <1>
   154                              <1> 
   155                              <1> ;Rest of the Int 24h error messages go here
   156 0000106E 64726976652024      <1> drvMsg      db "drive $"
   157 00001075 6572726F7220726561- <1> readMsg     db "error reading $"
   157 0000107E 64696E672024        <1>
   158 00001084 6572726F7220777269- <1> writeMsg    db "error writing $"
   158 0000108D 74696E672024        <1>
   159 00001093 41626F727424        <1> abortMsg    db "Abort$" 
   160 00001099 49676E6F726524      <1> ignoreMsg   db "Ignore$"
   161 000010A0 526574727924        <1> retryMsg    db "Retry$"
   162 000010A6 4661696C24          <1> failMsg     db "Fail$"
   163 000010AB 2C2024              <1> betweenMsg  db ", $"
   164 000010AE 3F2024              <1> endMsg      db "? $"
   165 000010B1 49524146            <1> i24Resp     db "IRAF"   ;Abort Retry Ignore Fail
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1> ;Jumped to with edx=0 means no autoexec. edx=-1 means autoexec.
     3                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     4                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     5                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     6 000010B5 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     7 000010B8 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     8 000010BC C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     9 000010BF B44A                <1>     mov ah, 4Ah ;Realloc
    10 000010C1 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    11 000010C4 CD21                <1>     int 21h
    12 000010C6 85D2                <1>     test edx, edx   ;If zero, no autoexec or single command
    13 000010C8 7432                <1>     jz commandMain
    14 000010CA E8E4090000          <1>     call getSetMainState    ;Ensure the buffers are ready to be used 
    15                              <1> ;If inSingle is set, cmd already in buffer and ready for processing  
    16 000010CF F605AEEFFFFF04      <1>     test byte [statFlg1], inSingle
    17 000010D6 0F8584000000        <1>     jnz commandMain.goSingle 
    18                              <1>     ;Only enter here if we are autoexec :)
    19 000010DC C6056EF0FFFF0F      <1>     mov byte [inBuffer + 1], autoSpecL - 1  ;Drop one from the count for CR
    20 000010E3 488D3507FEFFFF      <1>     lea rsi, autoSpec
    21 000010EA 488D3D61F0FFFF      <1>     lea rdi, inBuffer + 2
    22 000010F1 E876330000          <1>     call strcpy
    23 000010F6 C647FF0D            <1>     mov byte [rdi - 1], CR  ;Store a CR over the terminating null
    24 000010FA EB56                <1>     jmp short commandMain.batProceed
    25                              <1> commandMain:
    26 000010FC 488B2502EFFFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    27 00001103 E8AB090000          <1>     call getSetMainState
    28                              <1> .inputMain:         ;Only reset once per line!
    29 00001108 F60575EFFFFF04      <1>     test byte [statFlg1], inSingle   ;If we here in single mode, time to exit
    30 0000110F 0F8577290000        <1>     jnz exit
    31 00001115 E850310000          <1>     call printCRLF  ;Command complete, indicate with new line!
    32 0000111A B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    33 0000111F CD21                <1>     int 21h
    34 00001121 B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    35 00001126 BA01000000          <1>     mov edx, 1      ;Start new print job
    36 0000112B CD21                <1>     int 21h
    37                              <1> .inputGetAgain:
    38 0000112D E8AA330000          <1>     call clearCommandLineState      ;Cleans all handles 5->MAX
    39                              <1> .inputGetCmdlineAgain:
    40 00001132 E89A300000          <1>     call printPrompt    ;Ok we are gonna get more input, output prompt
    41 00001137 F60546EFFFFF08      <1>     test byte [statFlg1], inBatch   ;If batch on, get the next line to execute
    42 0000113E 0F853A0B0000        <1>     jnz batNextLine
    43 00001144 488D1505F0FFFF      <1>     lea rdx, inBuffer
    44 0000114B B8000A0000          <1>     mov eax, 0A00h      ;Do Buffered input
    45 00001150 CD21                <1>     int 21h
    46                              <1> .batProceed:            ;Jump here to copy the batch input line 
    47 00001152 E813310000          <1>     call printCRLF  ;Note we have accepted input
    48                              <1> ;First check we had something typed in of length greater than 0
    49 00001157 803DF3EFFFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    50 0000115E 74D2                <1>     je .inputGetCmdlineAgain  ;If not, keep looping input
    51                              <1>     ;Copy over the input text
    52                              <1> .goSingle:
    53 00001160 488D35E9EFFFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    54 00001167 488D3D64F0FFFF      <1>     lea rdi, cpyBuffer
    55 0000116E B982000000          <1>     mov ecx, cmdBufferL     ;Copy the buffer over to manipulate
    56 00001173 F3A4                <1>     rep movsb
    57 00001175 E870000000          <1>     call makeCmdBuffer      ;Preprocess the redir, make cmd buffer
    58                              <1>     ;Now check we aren't starting with a pipe or <CR> and treat differently
    59 0000117A 488D35D5F0FFFF      <1>     lea rsi, cmdBuffer + 2
    60 00001181 E824330000          <1>     call skipDelimiters
    61 00001186 803E0D              <1>     cmp byte [rsi], CR      ;If the first non-delim is a CR, reject input!
    62 00001189 74A2                <1>     je .inputGetAgain       ;Wipe redir flags and reobtain input!
    63 0000118B 803E7C              <1>     cmp byte [rsi], "|"     ;If the first non-delim is a pipe, syntax error!
    64 0000118E 0F84D4030000        <1>     je hardSynErr
    65                              <1> .pipeLoop:
    66 00001194 4C8B0574EEFFFF      <1>     mov r8, qword [pspPtr]  ;Point back to home segment
    67 0000119B E8A4000000          <1>     call makeCmdString      ;Makes the CR delimited command in psp
    68                              <1>     ;ZF here indicates if we are at the end of the command or nots
    69 000011A0 E85B070000          <1>     call setupRedirandPipes ;Setup/advance pipes and redir as appropriate
    70 000011A5 E8F3000000          <1>     call analyseCmdline     ;Setup cmdName and fcb for cmdBuffer portion
    71 000011AA E845020000          <1>     call doCommandLine      ;This preps and executes the command portion.
    72                              <1> .okRet:                     ;Normal return point for processing
    73 000011AF E851050000          <1>     call advanceRedir       ;Now advance and end redir if needed
    74 000011B4 F605CDEEFFFFFF      <1>     test byte [pipeFlag], -1    ;If no pipes, reset state, accept new input
    75 000011BB 0F8447FFFFFF        <1>     jz .inputMain
    76                              <1>     ;Now we pull the commandline forwards. 
    77 000011C1 E87E000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    78 000011C6 488D3D89F0FFFF      <1>     lea rdi, cmdBuffer + 2
    79 000011CD 4889F1              <1>     mov rcx, rsi
    80 000011D0 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    81 000011D3 280D7CF0FFFF        <1>     sub byte [cmdBuffer + 1], cl    ;And erase from the count
    82 000011D9 8A0D76F0FFFF        <1>     mov cl, byte [cmdBuffer + 1]
    83 000011DF FFC1                <1>     inc ecx     ;One more for the terminating char
    84 000011E1 F3A4                <1>     rep movsb   ;Move the chars over    
    85 000011E3 E8E3320000          <1>     call clearCommandState  ;Else, clear the command state and start again
    86 000011E8 EBAA                <1>     jmp short .pipeLoop     ;Doesn't close handles above 5 until end of pipe!
    87                              <1> 
    88                              <1> makeCmdBuffer:
    89                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    90                              <1> ; copy buffer. Called only once in a cycle.
    91                              <1> ;Throughout: CL has char count, CH has quote count
    92 000011EA 488D35E3EFFFFF      <1>     lea rsi, [cpyBuffer + 2]    ;Goto copy buffer + 2
    93 000011F1 31C9                <1>     xor ecx, ecx
    94 000011F3 4889F7              <1>     mov rdi, rsi    ;Save the pointer
    95                              <1> .countQuotes:
    96 000011F6 AC                  <1>     lodsb
    97 000011F7 3C22                <1>     cmp al, '"'
    98 000011F9 7507                <1>     jne .notQuoteToCount
    99 000011FB FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   100 000011FD E9F4FFFFFF          <1>     jmp .countQuotes
   101                              <1> .notQuoteToCount:
   102 00001202 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   103 00001204 75F0                <1>     jne .countQuotes
   104 00001206 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   105 00001209 488D3D46F0FFFF      <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
   106                              <1> .getChar:
   107 00001210 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   108 00001211 3C22                <1>     cmp al, '"'     ;Is char a quote?
   109 00001213 750E                <1>     jne .notQuote
   110 00001215 FECD                <1>     dec ch          ;We have a quote, now decrement
   111 00001217 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   112                              <1> .searchForClosingQuote:
   113                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   114 00001219 AA                  <1>     stosb   ;Store char and inc rdi
   115 0000121A FEC1                <1>     inc cl
   116 0000121C AC                  <1>     lodsb   ;Get next char
   117 0000121D 3C22                <1>     cmp al, '"'
   118 0000121F 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   119 00001221 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   120                              <1> .notQuote:
   121 00001223 E877060000          <1>     call peelRedir      ;Intervene redir if needed
   122 00001228 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   123 0000122A 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   124 0000122C EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   125                              <1> .pipeHandle:
   126                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   127 0000122E 0F8434030000        <1>     jz hardSynErr ;We had double pipe symbol, syntax error and reset!
   128                              <1> .notRedir:
   129 00001234 AA                  <1>     stosb       ;Store char and advance rdi
   130 00001235 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   131 00001237 7404                <1>     je .exit
   132 00001239 FEC1                <1>     inc cl      ;Increment char count
   133 0000123B EBD3                <1>     jmp short .getChar    ;If not, get next char
   134                              <1> .exit:
   135 0000123D 880D12F0FFFF        <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   136                              <1>     return
    13                              <2> %%_ret:
    14 00001243 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   137                              <1> 
   138                              <1> makeCmdString:
   139                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   140                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   141                              <1> ; Copies into the psp.
   142                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   143 00001244 488D350BF0FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   144 0000124B 31C9                <1>     xor ecx, ecx
   145 0000124D 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   146                              <1> .countQuotes:
   147 00001250 AC                  <1>     lodsb
   148 00001251 3C22                <1>     cmp al, '"'
   149 00001253 7507                <1>     jne .notQuoteToCount
   150 00001255 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   151 00001257 E9F4FFFFFF          <1>     jmp .countQuotes
   152                              <1> .notQuoteToCount:
   153 0000125C 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   154 0000125E 75F0                <1>     jne .countQuotes
   155 00001260 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   156 00001263 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   157                              <1> .getChar:
   158 0000126A AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   159 0000126B 3C22                <1>     cmp al, '"'     ;Is char a quote?
   160 0000126D 750E                <1>     jne .notQuote
   161 0000126F FECD                <1>     dec ch          ;We have a quote, now decrement
   162 00001271 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   163                              <1> .searchForClosingQuote:
   164                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   165 00001273 AA                  <1>     stosb   ;Store char and inc rdi
   166 00001274 FEC1                <1>     inc cl
   167 00001276 AC                  <1>     lodsb   ;Get next char
   168 00001277 3C22                <1>     cmp al, '"'
   169 00001279 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   170 0000127B FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   171                              <1> .notQuote:
   172 0000127D 3C7C                <1>     cmp al, "|"
   173 0000127F 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   174 00001281 B00D                <1>     mov al, CR          ;Store the pipe char
   175 00001283 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   176                              <1> .notPipe:
   177 00001286 AA                  <1>     stosb       ;Store char and advance rdi
   178 00001287 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   179 00001289 7404                <1>     je .exit
   180 0000128B FEC1                <1>     inc cl      ;Increment char count
   181 0000128D EBDB                <1>     jmp short .getChar    ;If not, get next char
   182                              <1> .exit:
   183 0000128F 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   184 00001292 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   185 00001299 803E0D              <1>     cmp byte [rsi], CR  
   186                              <1>     return
    13                              <2> %%_ret:
    14 0000129C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   187                              <1> 
   188                              <1> analyseCmdline:
   189                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   190                              <1> ; processes the command name into the FCB.  
   191 0000129D C60581F0FFFF00      <1>     mov byte [cmdName], 0   ;Init this field to indicate no cmd
   192                              <1> ;Start by searching for any switch chars! Set byte if switch chars fnd!!
   193 000012A4 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   194 000012AB 4889FE              <1>     mov rsi, rdi                    ;Prep rsi here too
   195 000012AE 0FB64FFF            <1>     movzx ecx, byte [rdi - 1]       ;Get the count byte
   196 000012B2 8A0562EDFFFF        <1>     mov al, byte [switchChar]
   197 000012B8 F2AE                <1>     repne scasb                     ;Scan for the switch char
   198 000012BA 7506                <1>     jne .noSwitchFnd
   199 000012BC F615D7EDFFFF        <1>     not byte [switchFnd]            ;Set switch char fnd on!
   200                              <1> .noSwitchFnd:
   201 000012C2 E8E3310000          <1>     call skipDelimiters     ;Skip any preceeding separators from rsi
   202 000012C7 803E0D              <1>     cmp byte [rsi], CR      ;We have no command? Return!
   203                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000012CA 74(9C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 000012CC 4889F3              <1>     mov rbx, rsi            ;Save the start of the text in rbx
   205                              <1> .plp:
   206 000012CF 488D3D1FEEFFFF      <1>     lea rdi, cmdFcb         ;Loop on the commandFCB
   207 000012D6 B801290000          <1>     mov eax, 2901h
   208 000012DB CD21                <1>     int 21h
   209 000012DD 3CFF                <1>     cmp al, -1  ;If DOS returns -1, we have a bad drive specified, fail!
   210 000012DF 0F8402010000        <1>     je .exitBadDrv
   211                              <1> .trailingDotLp:
   212                              <1> ;Reverse along trailing dots!
   213 000012E5 807EFF2E            <1>     cmp byte [rsi - 1], "." ;Is this a dot?
   214 000012E9 7505                <1>     jne .noTrailingDots
   215 000012EB 48FFCE              <1>     dec rsi
   216 000012EE EBF5                <1>     jmp short .trailingDotLp
   217                              <1> .noTrailingDots:
   218 000012F0 8A0523EDFFFF        <1>     mov al, byte [pathSep]  
   219 000012F6 3806                <1>     cmp byte [rsi], al      ;Is the terminator a pathsep?
   220 000012F8 7525                <1>     jne .notPs
   221 000012FA 48FFC6              <1>     inc rsi ;Go to the char after the pathsep
   222 000012FD AC                  <1>     lodsb   ;Get this char
   223 000012FE 48FFCE              <1>     dec rsi ;And move rsi back to where we were
   224 00001301 3C20                <1>     cmp al, 20h     ;Is this char below 32?
   225 00001303 7217                <1>     jb .delimfnd    ;Also a delimiter
   226 00001305 3C5C                <1>     cmp al, "\"     ;If this is a second pathsep, we are done
   227 00001307 7413                <1>     je .delimfnd
   228 00001309 3C2F                <1>     cmp al, "/"     ;Or an alt pathsep?
   229 0000130B 740F                <1>     je .delimfnd
   230 0000130D 3C2E                <1>     cmp al, byte "."
   231 0000130F 740B                <1>     je .delimfnd
   232 00001311 3C22                <1>     cmp al, byte '"'
   233 00001313 7407                <1>     je .delimfnd
   234 00001315 E89E310000          <1>     call isALdelimiter  ;Is this a delim char?
   235 0000131A 75B3                <1>     jne .plp            ;If not, we loop again
   236                              <1> .delimfnd:
   237 0000131C 48FFCE              <1>     dec rsi             ;Point rsi to end of the command
   238                              <1> .notPs:
   239                              <1> ;Now we have reached the end of the command, rsi points to the first char
   240                              <1> ; after the command, whether a delimiter or not.
   241 0000131F 4889F1              <1>     mov rcx, rsi
   242 00001322 4829D9              <1>     sub rcx, rbx    ;Get the number of chars in the command ONLY
   243 00001325 4887DE              <1>     xchg rbx, rsi   ;Swap the start and end of the commands!!!
   244 00001328 488D3DA7EFFFFF      <1>     lea rdi, cmdPathSpec
   245 0000132F F3A4                <1>     rep movsb
   246 00001331 30C0                <1>     xor al, al
   247 00001333 AA                  <1>     stosb   ;Store a terminating null
   248 00001334 4887DE              <1>     xchg rbx, rsi
   249                              <1> ;Now we build FCBs for the arguments!
   250 00001337 498D9881000000      <1>     lea rbx, qword [r8 + cmdLine]   ;Now we measure from the start of the buf!
   251 0000133E E893000000          <1>     call .skipAndCheckCR
   252 00001343 745B                <1>     je .setupCmdVars
   253 00001345 C60547EDFFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   254 0000134C 4889F0              <1>     mov rax, rsi
   255 0000134F 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   256 00001352 88053CEDFFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   257 00001358 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   258 0000135C B801290000          <1>     mov eax, 2901h
   259 00001361 CD21                <1>     int 21h
   260 00001363 88052CEDFFFF        <1>     mov byte [arg1FCBret], al
   261                              <1> .skipArg:
   262 00001369 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   263 0000136A 3C0D                <1>     cmp al, CR
   264 0000136C 7432                <1>     je .setupCmdVars
   265 0000136E E845310000          <1>     call isALdelimiter
   266 00001373 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   267 00001375 E85C000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   268 0000137A 7424                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   269 0000137C C60513EDFFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   270 00001383 4889F0              <1>     mov rax, rsi            
   271 00001386 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   272 00001389 880508EDFFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   273 0000138F 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   274 00001393 B801290000          <1>     mov eax, 2901h
   275 00001398 CD21                <1>     int 21h
   276 0000139A 8805F8ECFFFF        <1>     mov byte [arg2FCBret], al
   277                              <1> .setupCmdVars:
   278                              <1> ;Before returning, we copy the command name to cmdName 
   279 000013A0 488D3D2FEFFFFF      <1>     lea rdi, cmdPathSpec
   280 000013A7 E8B5310000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   281 000013AC E8D4300000          <1>     call strlen ;Get the length of the null terminated final path componant
   282 000013B1 81F90D000000        <1>     cmp ecx, fileNameZL ;11 chars + ext sep + null terminator
   283 000013B7 7726                <1>     ja .exitBad     ;Return error
   284 000013B9 4889FE              <1>     mov rsi, rdi
   285 000013BC 488D3D62EFFFFF      <1>     lea rdi, cmdName
   286 000013C3 FFC9                <1>     dec ecx ;Minus the terminating null
   287 000013C5 880F                <1>     mov byte [rdi], cl ;Store the length here
   288 000013C7 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   289                              <1> .cpCmdName:
   290 000013CA AC                  <1>     lodsb
   291 000013CB E8BF300000          <1>     call ucChar ;Uppercase the char
   292 000013D0 AA                  <1>     stosb
   293 000013D1 FFC9                <1>     dec ecx
   294 000013D3 75F5                <1>     jnz .cpCmdName
   295                              <1>     return
    13                              <2> %%_ret:
    14 000013D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   296                              <1> .skipAndCheckCR:
   297                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   298 000013D6 E8CF300000          <1>     call skipDelimiters ;Go to the next char in the input line
   299 000013DB 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   300                              <1>     return
    13                              <2> %%_ret:
    14 000013DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   301                              <1> .exitBad:
   302 000013DF C6053FEFFFFFFF      <1>     mov byte [cmdName], -1  ;Store -1 to indicate error
   303                              <1>     return
    13                              <2> %%_ret:
    14 000013E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   304                              <1> .exitBadDrv:
   305 000013E7 C60537EFFFFFFE      <1>     mov byte [cmdName], -2  ;Indicate a bad drive specified
   306 000013EE E83F0A0000          <1>     call badDriveError
   307                              <1>     return
    13                              <2> %%_ret:
    14 000013F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   308                              <1> 
   309                              <1> doCommandLine:
   310                              <1>     ;The following check accounts for the end of a piped command
   311 000013F4 803D2AEFFFFF00      <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, syntax error!
   312 000013FB 0F8467010000        <1>     je hardSynErr   ;This now should never be hit, earmark for removal!
   313 00001401 803D1DEFFFFFFF      <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   314 00001408 0F845D0A0000        <1>     je badCmdError
   315 0000140E 803D10EFFFFFFE      <1>     cmp byte [cmdName], -2  ;Bad drive specified, nop
   316                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001415 74(F3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   317 00001417 488D35B8EEFFFF      <1>     lea rsi, cmdPathSpec
   318 0000141E 0FB71DB1EEFFFF      <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   319 00001425 80FF3A              <1>     cmp bh, ":"
   320 00001428 7520                <1>     jne .noDriveSpecified
   321 0000142A 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   322 0000142C E85E300000          <1>     call ucChar     ;Uppercase al
   323 00001431 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   324                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   325 00001433 803DEBEEFFFF02      <1>     cmp byte [cmdName], 2
   326 0000143A 750E                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   327 0000143C 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   328 0000143E E818300000          <1>     call setDrive
   329                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001443 74(F3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   330 00001445 E9E8090000          <1>     jmp badDriveError
   331                              <1> .noDriveSpecified:
   332                              <1> ;rbx is writable UP TO THE FIRST PIPE OR CR (non-inclusive)
   333 0000144A 488D1D03EEFFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer
   334 00001451 488D35CDEEFFFF      <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   335 00001458 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   336 0000145D BAFFFF0000          <1>     mov edx, 0FFFFh
   337 00001462 B5FF                <1>     mov ch, -1
   338 00001464 CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   339 00001466 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   340 0000146B BAFFFF0000          <1>     mov edx, 0FFFFh
   341 00001470 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   342 00001472 CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   343                              <1>             ;        al = 0  if the command should be executed as usual
   344 00001474 84C0                <1>     test al, al
   345 00001476 7444                <1>     jz .executeInternal
   346                              <1>     ;Here we execute externally and return to the prompt
   347                              <1>     ; as if it was an internal execution. rbx is not to be relied on here!
   348 00001478 498D9880000000      <1>     lea rbx, qword [r8 + cmdTail]
   349 0000147F 488D359FEEFFFF      <1>     lea rsi, cmdName        
   350 00001486 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   351 0000148B BAFFFF0000          <1>     mov edx, 0FFFFh
   352 00001490 B5FF                <1>     mov ch, -1
   353 00001492 CD2F                <1>     int 2Fh
   354 00001494 803D8AEEFFFF00      <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   355                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000149B 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000149D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   356                              <1>     ;We need to copy over to cmdPathSpec in the event this command
   357                              <1>     ; is an external command that is in the CD or in the PATH.
   358                              <1>     ;Should not be used for this purpose but it is here...
   359 0000149E E8C6050000          <1>     call pullCommandline    ;Pull the tail down with the original name
   360 000014A3 488D357BEEFFFF      <1>     lea rsi, cmdName        ;Now make the new cmd the new cmdspec!
   361 000014AA AC                  <1>     lodsb                   ;Get the name length
   362 000014AB 0FB6C8              <1>     movzx ecx, al
   363 000014AE 488D3D21EEFFFF      <1>     lea rdi, cmdPathSpec    ;Overwrite the original specified command
   364 000014B5 F3A4                <1>     rep movsb   
   365 000014B7 31C0                <1>     xor eax, eax
   366 000014B9 AA                  <1>     stosb   ;Store null terminator
   367 000014BA EB1F                <1>     jmp short .executeInternal2 ;Skip the equivalent for non-ae cases
   368                              <1> .executeInternal:
   369 000014BC E8A8050000          <1>     call pullCommandline    ;Now pull the tail down
   370 000014C1 488D3D0EEEFFFF      <1>     lea rdi, cmdPathSpec
   371 000014C8 E8B82F0000          <1>     call strlen ;Get the length of the input command
   372 000014CD FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   373 000014CF 380D50EEFFFF        <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   374 000014D5 0F85C2250000        <1>     jne launchChild     ;If not, a path was specified, exit!
   375                              <1> .executeInternal2:
   376                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   377 000014DB 488D1DA3F2FFFF      <1>     lea rbx, functionTable
   378                              <1> .nextEntry:
   379 000014E2 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   380 000014E5 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   381 000014E8 0F84AF250000        <1>     je launchChild      ;If so, check externally now
   382 000014EE 380D31EEFFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   383 000014F4 7531                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   384                              <1>     ;Here they have the same length so lets see if the name is the same
   385 000014F6 56                  <1>     push rsi
   386                              <1>     ;ecx has the length to compare
   387 000014F7 51                  <1>     push rcx
   388 000014F8 488D7301            <1>     lea rsi, qword [rbx + 1]
   389 000014FC 488D3D23EEFFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   390 00001503 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   391 00001505 59                  <1>     pop rcx
   392 00001506 5E                  <1>     pop rsi
   393 00001507 751E                <1>     jne .gotoNextEntry
   394                              <1>     ;Here it was found both strings are equal
   395 00001509 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   396 0000150E 480FB71F            <1>     movzx rbx, word [rdi]
   397 00001512 488D3DE7EAFFFF      <1>     lea rdi, startLbl
   398 00001519 4801FB              <1>     add rbx, rdi
   399 0000151C C605EAEAFFFF00      <1>     mov byte [returnCode], 0 ;Reset the retcode before executing function!
   400 00001523 FFD3                <1>     call rbx        ;Call the internal function!
   401 00001525 EB0C                <1>     jmp short appRet    ;Now once we are done, goto appRet!
   402                              <1> .gotoNextEntry:
   403 00001527 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   404 0000152E 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   405 00001531 EBAF                <1>     jmp short .nextEntry
   406                              <1> 
   407                              <1> appRet:  ;Return point from a task, jumped to from internal functions
   408                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled.
   409                              <1> ;Can depend on RSP here because I fixed DOS.
   410 00001533 488B25CBEAFFFF      <1>     mov rsp, qword [stackTop]   ;Reset stack ptr
   411 0000153A E823320000          <1>     call resetIDTentries
   412 0000153F B8004D0000          <1>     mov eax, 4D00h              ;Get retcode, will be 0 for internal commands
   413 00001544 CD21                <1>     int 21h
   414 00001546 668905C0EAFFFF      <1>     mov word [returnCode], ax
   415 0000154D 84E4                <1>     test ah, ah     ;Regular exit
   416 0000154F 0F845AFCFFFF        <1>     jz commandMain.okRet
   417 00001555 80FC03              <1>     cmp ah, 3       ;TSR exit
   418 00001558 0F8451FCFFFF        <1>     je commandMain.okRet
   419                              <1>     ;Here we ask if we want to stop any batch processing, ret to 2Eh etc.
   420                              <1>     ;For now, just clean redirs and fully reset!
   421 0000155E E83F000000          <1>     call cleanupRedirs
   422 00001563 E994FBFFFF          <1>     jmp commandMain
   423                              <1>     ;cmp ah, 1       ;Was this Ctrl^C?
   424                              <1>     ;je commandMain
   425                              <1>     ;jmp commandMain  ;If we aborted, fully reset!
   426                              <1> 
   427                              <1> hardSynErr:
   428                              <1> ;Hard syntax error in cmd line. Delete pipe files and reset completely!
   429 00001568 E8A1080000          <1>     call badSyntaxError         ;Output bad syntax if empty command found
   430 0000156D E926000000          <1>     jmp redirPipeFailureCommon.noPrint  ;This closes pipes and resets stack
   431                              <1> redirFailure:
   432 00001572 488D1522F9FFFF      <1>     lea rdx, redirErrMsg
   433 00001579 B913000000          <1>     mov ecx, redirErrMsgL
   434 0000157E EB0C                <1>     jmp short redirPipeFailureCommon
   435                              <1> pipeFailure:
   436 00001580 488D15FDF8FFFF      <1>     lea rdx, pipeErrMsg
   437 00001587 B917000000          <1>     mov ecx, pipeErrMsgL
   438                              <1> redirPipeFailureCommon:
   439                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   440                              <1> ;This routine tries to close whatever handles are not -1 and delete
   441                              <1> ; pipe files if the pipe count is not 0.
   442                              <1> ;It resets all variables and jumps to reset the stack!
   443 0000158C B800400000          <1>     mov eax, 4000h  ;Write handle
   444 00001591 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   445 00001596 CD21                <1>     int 21h
   446                              <1> .noPrint:
   447 00001598 E805000000          <1>     call cleanupRedirs  ;Cleans the redirections 
   448 0000159D E95AFBFFFF          <1>     jmp commandMain ;Retake input from the command line
   449                              <1> 
   450                              <1> cleanupRedirs:
   451                              <1> ;Cleans all active redirections, returning to the saved state.
   452                              <1> ;Deletes any pipe files, leaves any redir out files.
   453                              <1> ;Resets the internal vars
   454 000015A2 0FB705E6EAFFFF      <1>     movzx eax, word [redirSTDIN]
   455 000015A9 0FB715D9EAFFFF      <1>     movzx edx, word [pipeSTDIN]
   456 000015B0 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   457 000015B2 E8CC000000          <1>     call .closeAndReplace
   458 000015B7 0FB705D3EAFFFF      <1>     movzx eax, word [redirSTDOUT]
   459 000015BE 0FB715C6EAFFFF      <1>     movzx edx, word [pipeSTDOUT]
   460 000015C5 FFC3                <1>     inc ebx         ;Select STDOUT for closing
   461 000015C7 E8B7000000          <1>     call .closeAndReplace
   462 000015CC 66C705B8EAFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   463 000015D5 0FB71DB3EAFFFF      <1>     movzx ebx, word [redirSTDIN]
   464 000015DC E892000000          <1>     call .closeHandle
   465                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   466 000015E1 66C705A5EAFFFFFFFF  <1>     mov word [redirSTDIN], -1
   467 000015EA 0FB71DA0EAFFFF      <1>     movzx ebx, word [redirSTDOUT]
   468 000015F1 E87D000000          <1>     call .closeHandle
   469 000015F6 66C70592EAFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   470 000015FF 0FB71D83EAFFFF      <1>     movzx ebx, word [pipeSTDIN]
   471 00001606 E868000000          <1>     call .closeHandle
   472 0000160B 66C70575EAFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   473 00001614 0FB71D70EAFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   474 0000161B E853000000          <1>     call .closeHandle
   475 00001620 66C70562EAFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   476 00001629 C60558EAFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   477 00001630 488D159AEDFFFF      <1>     lea rdx, qword [pipe1Filespec]
   478 00001637 803A00              <1>     cmp byte [rdx], 0
   479 0000163A 7407                <1>     jz .checkOld
   480 0000163C B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   481 00001641 CD21                <1>     int 21h
   482                              <1> .checkOld:
   483 00001643 488D15D6EDFFFF      <1>     lea rdx, qword [pipe2Filespec]
   484 0000164A 803A00              <1>     cmp byte [rdx],0
   485 0000164D 7407                <1>     jz .pipeNamesComplete
   486 0000164F B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   487 00001654 CD21                <1>     int 21h
   488                              <1> .pipeNamesComplete:
   489 00001656 31C0                <1>     xor eax, eax
   490                              <1>     ;Invalidate the pointers and the paths too
   491 00001658 48890510EEFFFF      <1>     mov qword [newPipe], rax
   492 0000165F 48890511EEFFFF      <1>     mov qword [oldPipe], rax
   493 00001666 890565EDFFFF        <1>     mov dword [pipe1Filespec], eax
   494 0000166C 8905AEEDFFFF        <1>     mov dword [pipe2Filespec], eax
   495                              <1>     return
    13                              <2> %%_ret:
    14 00001672 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   496                              <1> 
   497                              <1> .closeHandle:
   498 00001673 81FBFFFFFFFF        <1>     cmp ebx, -1
   499                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001679 74(72)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   500 0000167B B8003E0000          <1>     mov eax, 3E00h
   501 00001680 CD21                <1>     int 21h
   502                              <1>     return
    13                              <2> %%_ret:
    14 00001682 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   503                              <1> .closeAndReplace:
   504                              <1> ;Input: ax = one possible handle, dx = second possible handle
   505                              <1> ;       bx = handle to close and copy ax/dx into
   506                              <1> ;Output: Handle intervened on. bx preserved
   507 00001683 C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   508 00001686 09D0                <1>     or eax, edx     ;Form packed
   509 00001688 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   510                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000168D 74(82)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   511 0000168F E8DFFFFFFF          <1>     call .closeHandle
   512 00001694 663DFFFF            <1>     cmp ax, -1      
   513 00001698 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   514 0000169C 53                  <1>     push rbx
   515 0000169D 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   516 000016A0 B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   517 000016A5 CD21                <1>     int 21h
   518 000016A7 5B                  <1>     pop rbx
   519                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000016A8 73(82)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   520                              <1>     ;Else we now try to force default device to open!
   521 000016AA E8C4FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   522 000016AF B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   523 000016B4 488D152DF8FFFF      <1>     lea rdx, devName
   524 000016BB CD21                <1>     int 21h
   525                              <1>     return
    13                              <2> %%_ret:
    14 000016BD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   526                              <1> 
   527                              <1> cleanRedirOut:
   528                              <1> ;Used to oust any stdout redir if necessary. This is different to the above in 
   529                              <1> ; that it deletes the redir out file. Therefore, this is only called in 
   530                              <1> ; particular cases like launching bat files which needs special handling in 
   531                              <1> ; that all redirs need to be completely removed.
   532 000016BE 66813DCAE9FFFFFFFF  <1>     cmp word [redirSTDOUT], -1  ;Do we have > xyzzy.fil?
   533                              <1>     rete  ;Return if no stdout redir! We are ok!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000016C7 74(BD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   534 000016C9 0FB71DC1E9FFFF      <1>     movzx ebx, word [redirSTDOUT]
   535 000016D0 B901000000          <1>     mov ecx, 1      ;STDOUT
   536 000016D5 B800460000          <1>     mov eax, 4600h  ;DUP this into STDOUT closing redirout
   537 000016DA CD21                <1>     int 21h
   538 000016DC 0FB71DAEE9FFFF      <1>     movzx ebx, word [redirSTDOUT]   ;Kill the duplicate now
   539 000016E3 B8003E0000          <1>     mov eax, 3E00h  
   540 000016E8 CD21                <1>     int 21h
   541 000016EA 66C7059EE9FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Set default value back
   542 000016F3 488D1588ECFFFF      <1>     lea rdx, rdrOutFilespec
   543 000016FA B800410000          <1>     mov eax, 4100h      ;Del stdout file
   544 000016FF CD21                <1>     int 21h
   545 00001701 C60200              <1>     mov byte [rdx], 0   ;Ensure this is a clear path (not necessary)
   546                              <1>     ;Ignore any errors in this procedures. Errors mean either sharing problems
   547                              <1>     ; or the file doesnt exist, which in either case, is fine to leave it be!
   548                              <1>     return
    13                              <2> %%_ret:
    14 00001704 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   549                              <1> 
   550                              <1> advanceRedir:
   551                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   552                              <1> ;Close stdin redir then stdout redir. 
   553 00001705 F60581E9FFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   554 0000170C 0F8585000000        <1>     jnz .redirIn
   555 00001712 F6056FE9FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   556 00001719 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   557 0000171F 0FBF0563E9FFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   558 00001726 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   559 0000172B 0F84EB000000        <1>     je .pipeOut              
   560                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   561 00001731 0FB71D51E9FFFF      <1>     movzx ebx, word [pipeSTDIN] 
   562 00001738 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   563 0000173A B800460000          <1>     mov eax, 4600h
   564 0000173F CD21                <1>     int 21h
   565 00001741 0F8239FEFFFF        <1>     jc pipeFailure
   566 00001747 B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   567 0000174C CD21                <1>     int 21h
   568 0000174E 0F822CFEFFFF        <1>     jc pipeFailure
   569 00001754 488B151CEDFFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   570 0000175B B800410000          <1>     mov eax, 4100h  ;Delete the file!
   571 00001760 CD21                <1>     int 21h
   572 00001762 0F8218FEFFFF        <1>     jc pipeFailure
   573 00001768 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   574 0000176B 66C70515E9FFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   575                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   576                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   577                              <1>     ;Else exit!
   578 00001774 0FBF0510E9FFFF      <1>     movsx eax, word [pipeSTDOUT]
   579 0000177B 3DFFFFFFFF          <1>     cmp eax, -1
   580 00001780 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   581 00001786 C605FBE8FFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   582 0000178D F605FAE8FFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   583 00001794 753D                <1>     jnz .redirOut               ;Go for it if so!
   584                              <1>     return
    13                              <2> %%_ret:
    14 00001796 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   585                              <1> .redirIn:
   586                              <1> ;Here we clean redirIn
   587 00001797 0FB71DF1E8FFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   588 0000179E 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   589 000017A0 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   590 000017A5 CD21                <1>     int 21h
   591 000017A7 0F82C5FDFFFF        <1>     jc redirFailure
   592 000017AD B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   593 000017B2 CD21                <1>     int 21h
   594 000017B4 0F82B8FDFFFF        <1>     jc redirFailure
   595 000017BA 66C705CCE8FFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   596 000017C3 C605C3E8FFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   597 000017CA F605B7E8FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   598 000017D1 7549                <1>     jnz .pipeOut
   599                              <1> .redirOut:
   600 000017D3 F605B4E8FFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   601                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000017DA 74(96)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   602                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   603 000017DC F605A5E8FFFFFF      <1>     test byte [pipeFlag], -1
   604 000017E3 7537                <1>     jnz short .pipeOut
   605 000017E5 0FB71DA5E8FFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   606 000017EC B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   607 000017F1 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   608 000017F6 CD21                <1>     int 21h
   609 000017F8 0F8274FDFFFF        <1>     jc redirFailure
   610 000017FE B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   611 00001803 CD21                <1>     int 21h
   612 00001805 0F8267FDFFFF        <1>     jc redirFailure
   613 0000180B 66C7057DE8FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   614 00001814 C60573E8FFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   615                              <1>     return
    13                              <2> %%_ret:
    14 0000181B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   616                              <1> .pipeOut:
   617                              <1> ;Duplicate STDIN to save across pipe
   618 0000181C 0FBF0568E8FFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   619 00001823 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   620                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001828 74(1B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   621 0000182A B800450000          <1>     mov eax, 4500h
   622 0000182F 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   623 00001831 CD21                <1>     int 21h
   624 00001833 0F8247FDFFFF        <1>     jc pipeFailure
   625 00001839 66890549E8FFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   626                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   627 00001840 B800460000          <1>     mov eax, 4600h
   628 00001845 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   629 00001847 FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   630 00001849 CD21                <1>     int 21h
   631 0000184B 0F822FFDFFFF        <1>     jc pipeFailure
   632                              <1> ;Now return the original stdout to stdout
   633 00001851 89D9                <1>     mov ecx, ebx
   634 00001853 0FB71D31E8FFFF      <1>     movzx ebx, word [pipeSTDOUT]
   635 0000185A B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   636 0000185F CD21                <1>     int 21h
   637 00001861 0F8219FDFFFF        <1>     jc pipeFailure
   638                              <1> ;Now close the DUP'ed STDOUT
   639 00001867 B8003E0000          <1>     mov eax, 3E00h
   640 0000186C CD21                <1>     int 21h
   641 0000186E 0F820CFDFFFF        <1>     jc pipeFailure
   642                              <1> ;Finally unwind STDIN to the beginning of the file
   643 00001874 B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   644 00001879 31DB                <1>     xor ebx, ebx    ;STDIN handle
   645 0000187B 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   646 0000187D 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   647 0000187F CD21                <1>     int 21h
   648 00001881 0F82F9FCFFFF        <1>     jc pipeFailure  ;This should never happen
   649 00001887 488B15E1EBFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   650 0000188E 488915E2EBFFFF      <1>     mov qword [oldPipe], rdx
   651 00001895 66C705EDE7FFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   652                              <1>     return
    13                              <2> %%_ret:
    14 0000189E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   653                              <1> 
   654                              <1> 
   655                              <1> peelRedir:
   656                              <1> ;Checks and sets up redir as appropriate
   657                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   658                              <1> ;       rsi points to the first char after the char in al in cpyBuffer
   659                              <1> ;Output: ZF=NZ => No redir
   660                              <1> ;        ZF=ZY => Redir
   661                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   662                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   663 0000189F 51                  <1>     push rcx
   664 000018A0 57                  <1>     push rdi
   665 000018A1 3C3C                <1>     cmp al, "<"
   666 000018A3 740C                <1>     je .inputRedir
   667 000018A5 3C3E                <1>     cmp al, ">"
   668 000018A7 7427                <1>     je .outputRedir
   669 000018A9 3C7C                <1>     cmp al, "|"
   670 000018AB 7441                <1>     je .pipeSetup
   671 000018AD F8                  <1>     clc
   672                              <1> .redirExit:
   673 000018AE 5F                  <1>     pop rdi
   674 000018AF 59                  <1>     pop rcx
   675                              <1>     return
    13                              <2> %%_ret:
    14 000018B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   676                              <1> .inputRedir:
   677 000018B1 C605D5E7FFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   678 000018B8 488D3D74EAFFFF      <1>     lea rdi, rdrInFilespec
   679                              <1> .redirCommon:
   680 000018BF E8E62B0000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   681 000018C4 E8122D0000          <1>     call cpDelimPathToBufz
   682 000018C9 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   683 000018CC 30C0                <1>     xor al, al  ;Clear the ZF flag
   684 000018CE EBDE                <1>     jmp short .redirExit
   685                              <1> .outputRedir:
   686 000018D0 C605B7E7FFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   687 000018D7 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   688 000018DA 7509                <1>     jne .notDouble
   689 000018DC FE05ACE7FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   690 000018E2 48FFC6              <1>     inc rsi ;Go past it too
   691                              <1> .notDouble:
   692 000018E5 488D3D96EAFFFF      <1>     lea rdi, rdrOutFilespec
   693 000018EC EBD1                <1>     jmp short .redirCommon
   694                              <1> .pipeSetup:
   695 000018EE 56                  <1>     push rsi    ;Save rsi pointing to char past |
   696 000018EF E8B62B0000          <1>     call skipDelimiters ;Check if this is effectively a double || or |<CR>
   697 000018F4 803E7C              <1>     cmp byte [rsi], "|" 
   698 000018F7 7403                <1>     je .badFnd
   699 000018F9 803E0D              <1>     cmp byte [rsi], CR
   700                              <1> .badFnd:
   701 000018FC 5E                  <1>     pop rsi
   702 000018FD F9                  <1>     stc
   703 000018FE EBAE                <1>     jmp short .redirExit
   704                              <1> 
   705                              <1> setupRedirandPipes:
   706                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   707                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   708 00001900 0F8484000000        <1>     jz .redirIn
   709 00001906 488D15C4EAFFFF      <1>     lea rdx, pipe1Filespec
   710 0000190D 803A00              <1>     cmp byte [rdx], 0
   711 00001910 7410                <1>     jz .pathFound
   712 00001912 488D1507EBFFFF      <1>     lea rdx, pipe2Filespec
   713 00001919 803A00              <1>     cmp byte [rdx], 0
   714 0000191C 0F855EFCFFFF        <1>     jnz pipeFailure
   715                              <1> .pathFound:
   716 00001922 48891546EBFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   717 00001929 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   718 0000192E BB01000000          <1>     mov ebx, 1
   719 00001933 CD21                <1>     int 21h
   720 00001935 0F8245FCFFFF        <1>     jc pipeFailure
   721 0000193B 66890549E7FFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   722 00001942 E8202B0000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   723 00001947 0441                <1>     add al, "A"
   724 00001949 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   725 0000194E 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   726 00001950 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   727 00001952 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   728 00001954 B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   729 00001959 CD21                <1>     int 21h
   730 0000195B 0F821FFCFFFF        <1>     jc pipeFailure
   731                              <1>     ;AX has the handle for this file now, this will become STDOUT
   732                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   733 00001961 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   734 00001964 B901000000          <1>     mov ecx, 1
   735 00001969 B800460000          <1>     mov eax, 4600h
   736 0000196E CD21                <1>     int 21h
   737 00001970 0F820AFCFFFF        <1>     jc pipeFailure
   738 00001976 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   739 0000197B CD21                <1>     int 21h
   740 0000197D 0F82FDFBFFFF        <1>     jc pipeFailure
   741 00001983 C605FEE6FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   742                              <1> .redirIn:
   743                              <1> ;Now check if any other redir needs to be setup
   744                              <1> ;Checks and sets up redir as appropriate.
   745                              <1>     ;Setup the redir here for STDIN
   746 0000198A F605FCE6FFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   747 00001991 7449                <1>     jz .redirOut
   748 00001993 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   749 00001995 B800450000          <1>     mov eax, 4500h
   750 0000199A CD21                <1>     int 21h
   751 0000199C 0F82D0FBFFFF        <1>     jc redirFailure
   752 000019A2 668905E6E6FFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   753 000019A9 488D1583E9FFFF      <1>     lea rdx, rdrInFilespec
   754 000019B0 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   755 000019B5 CD21                <1>     int 21h
   756 000019B7 0F82B5FBFFFF        <1>     jc redirFailure
   757 000019BD 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   758 000019BF 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   759 000019C2 B800460000          <1>     mov eax, 4600h
   760 000019C7 CD21                <1>     int 21h
   761 000019C9 0F82A3FBFFFF        <1>     jc redirFailure
   762 000019CF B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   763 000019D4 CD21                <1>     int 21h
   764 000019D6 0F8296FBFFFF        <1>     jc redirFailure
   765                              <1> .redirOut:
   766 000019DC F605ABE6FFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   767                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000019E3 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000019E5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   768 000019E6 803D9EE6FFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   769                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000019ED 75(E5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   770                              <1>     ;Else setup the redir here for STDOUT
   771 000019EF BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   772 000019F4 B800450000          <1>     mov eax, 4500h
   773 000019F9 CD21                <1>     int 21h
   774 000019FB 0F8271FBFFFF        <1>     jc redirFailure
   775 00001A01 66890589E6FFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   776 00001A08 488D1573E9FFFF      <1>     lea rdx, rdrOutFilespec
   777 00001A0F B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   778 00001A14 CD21                <1>     int 21h
   779 00001A16 730F                <1>     jnc .fileExists
   780 00001A18 B8003C0000          <1>     mov eax, 3C00h
   781 00001A1D 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   782 00001A1F CD21                <1>     int 21h
   783 00001A21 0F824BFBFFFF        <1>     jc redirFailure
   784                              <1> .fileExists:
   785 00001A27 B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   786 00001A2C 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   787 00001A2F B800460000          <1>     mov eax, 4600h  ;DUP2
   788 00001A34 CD21                <1>     int 21h
   789 00001A36 0F8236FBFFFF        <1>     jc redirFailure
   790 00001A3C B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   791 00001A41 CD21                <1>     int 21h
   792 00001A43 0F8229FBFFFF        <1>     jc redirFailure
   793 00001A49 803D3EE6FFFF01      <1>     cmp byte [redirOut], 1
   794                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001A50 74(E5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   795                              <1>     ;Here we move the file pointer to the end of the file
   796 00001A52 31D2                <1>     xor edx, edx    ;Low order 32 bits
   797 00001A54 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   798 00001A56 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   799 00001A5B B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   800 00001A60 CD21                <1>     int 21h
   801 00001A62 0F820AFBFFFF        <1>     jc redirFailure
   802                              <1>     return
    13                              <2> %%_ret:
    14 00001A68 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   803                              <1> 
   804                              <1> 
   805                              <1> pullCommandline:
   806                              <1> ;This command pulls the command tail down, removing the whole launch command
   807 00001A69 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   808                              <1> ;Skip leading separators
   809                              <1> .pctSkipLeading:
   810 00001A70 AC                  <1>     lodsb   ;Get first char
   811 00001A71 E8422A0000          <1>     call isALdelimiter
   812 00001A76 74F8                <1>     je .pctSkipLeading
   813 00001A78 48FFCE              <1>     dec rsi
   814                              <1>     ;rsi points to the start of the command
   815 00001A7B 488D3D54E8FFFF      <1>     lea rdi, cmdPathSpec
   816 00001A82 E8FE290000          <1>     call strlen ;Get the length of the command
   817 00001A87 FFC9                <1>     dec ecx ;Minus the terminating null
   818 00001A89 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   819 00001A8C 280D02E6FFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   820 00001A92 280DFFE5FFFF        <1>     sub byte [arg2Off], cl
   821 00001A98 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   822 00001A9A 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   823                              <1> .pctPullChars:
   824 00001AA1 AC                  <1>     lodsb
   825 00001AA2 AA                  <1>     stosb
   826 00001AA3 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   827 00001AA5 7404                <1>     je .pctExit
   828 00001AA7 FFC1                <1>     inc ecx     ;Increment count
   829 00001AA9 EBF6                <1>     jmp short .pctPullChars 
   830                              <1> .pctExit:
   831 00001AAB 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   832                              <1>     return
    13                              <2> %%_ret:
    14 00001AB2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   833                              <1> 
   834                              <1> getSetMainState:
   835                              <1> ;Resets the buffers lengths, sets stringops and gets the pspptr in r8
   836 00001AB3 FC                  <1>     cld ;Ensure stringops are done the right way
   837 00001AB4 C60595E6FFFF80      <1>     mov byte [inBuffer], inBufferL      ;Reset the buffer length
   838 00001ABB C60510E7FFFF80      <1>     mov byte [cpyBuffer], inBufferL     ;Reset the buffer length
   839 00001AC2 C6058BE7FFFF80      <1>     mov byte [cmdBuffer], inBufferL     ;Reset the buffer length
   840 00001AC9 4C8B053FE5FFFF      <1>     mov r8, qword [pspPtr]              ;Reset the pspPtr
   841                              <1>     return
    13                              <2> %%_ret:
    14 00001AD0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   842                              <1> 
   843                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   844                              <1> ;Input: rsi points to the count byte of a command line
   845 00001AD1 4150                <1>     push r8
   846 00001AD3 4151                <1>     push r9
   847 00001AD5 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   848 00001AD7 CD21                <1>     int 21h
   849 00001AD9 52                  <1>     push rdx    ;Save on the stack
   850 00001ADA 488D1D1FE4FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   851 00001AE1 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   852 00001AE3 CD21                <1>     int 21h
   853 00001AE5 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   854 00001AE8 4989D9              <1>     mov r9, rbx
   855 00001AEB 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   856 00001AF2 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   857 00001AF7 F348A5              <1>     rep movsq   ;Copy command line over
   858                              <1>     ;call doCommandLine
   859 00001AFA 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   860 00001AFB B450                <1>     mov ah, 50h ;Set Current PSP
   861 00001AFD CD21                <1>     int 21h
   862 00001AFF 4159                <1>     pop r9
   863 00001B01 4158                <1>     pop r8
   864 00001B03 48CF                <1>     iretq
    17                                  %include "./Source/cmdBat.asm"
     1                              <1> ;Main Batch processing routines go here!
     2                              <1> 
     3                              <1> batLaunch:
     4                              <1> ;Preps and launches a batch file! Called with rdx pointing to the filespec :)
     5 00001B05 BB200B0000          <1>     mov ebx, bbMaxAlloc << 4    ;Convert to paragraphs
     6 00001B0A B800480000          <1>     mov eax, 4800h
     7 00001B0F CD21                <1>     int 21h
     8 00001B11 730A                <1>     jnc .bbAlloced
     9 00001B13 E8ED020000          <1>     call badNoMemError  ;Print not enough mem error
    10 00001B18 E97BFAFFFF          <1>     jmp  redirPipeFailureCommon.noPrint ;Clean up all redir and ret to cmdline
    11                              <1> .bbAlloced:
    12 00001B1D 48890576E5FFFF      <1>     mov qword [bbPtr], rax  ;Save the ptr here!
    13 00001B24 4889C3              <1>     mov rbx, rax
    14 00001B27 4889DF              <1>     mov rdi, rbx
    15 00001B2A 31C0                <1>     xor eax, eax
    16 00001B2C B9B2000000          <1>     mov ecx, bbMaxAlloc     
    17 00001B31 F3AA                <1>     rep stosb               ;Clean the arena
    18 00001B33 4889DF              <1>     mov rdi, rbx            ;Point back to the head
    19 00001B36 8A0549E5FFFF        <1>     mov al, byte [echoFlg]
    20 00001B3C 884301              <1>     mov byte [rbx + batBlockHdr.bEchoFlg], al
    21 00001B3F B8FFFFFFFF          <1>     mov eax, -1
    22 00001B44 B905000000          <1>     mov ecx, 5
    23 00001B49 488D7B1B            <1>     lea rdi, qword [rbx + batBlockHdr.wArgs]    ;Init the wArgs to no params!
    24 00001B4D F3AB                <1>     rep stosd   ;Store in dwords for speed. Leave rdi pointing at .cmdLine
    25 00001B4F 66C7431B0000        <1>     mov word [rbx + batBlockHdr.wArgs], 0   ;Arg %0 starts at offset 0!
    26 00001B55 488D357AE7FFFF      <1>     lea rsi, cmdPathSpec
    27 00001B5C E80B290000          <1>     call strcpy     ;Leave rdi past the terminating null
    28 00001B61 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get char cnt for copy
    29 00001B69 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get copy source
    30 00001B70 57                  <1>     push rdi    ;Save the ptr to the start of cmd tail in batblock
    31 00001B71 F3A4                <1>     rep movsb   ;Copy the command tail over
    32                              <1>     ;Since this copy is shorter than the space we have, we already have a free
    33                              <1>     ; terminating null. All good!
    34 00001B73 5E                  <1>     pop rsi 
    35                              <1>     ;Now analyse the command line to get the word offsets. Get at most 10
    36 00001B74 B901000000          <1>     mov ecx, 1  ;Start with argument 1
    37                              <1> .bbFndLp:
    38 00001B79 E82C290000          <1>     call skipDelimiters ;Skip leading delimiters, leave rsi at char1
    39 00001B7E E8E7000000          <1>     call .bbCheckEndOfCmdLine   ;Is this the end of the command?
    40 00001B83 7428                <1>     je .bbArgsDone      ;Yes
    41                              <1>     ;Add the entry to the table!
    42 00001B85 4889F0              <1>     mov rax, rsi
    43 00001B88 488D532F            <1>     lea rdx, qword [rbx + batBlockHdr.cmdLine]  ;Get addr of start of cmdline
    44 00001B8C 4829D0              <1>     sub rax, rdx    ;Now get the difference in ax
    45 00001B8F 6689440B1B          <1>     mov word [rbx + batBlockHdr.wArgs + rcx], ax    ;Store this offset here
    46                              <1>     
    47 00001B94 FFC1                <1>     inc ecx
    48 00001B96 81F90A000000        <1>     cmp ecx, 10         ;Did we just process %9?
    49 00001B9C 740F                <1>     je .bbArgsDone
    50                              <1> .bbFndLp2:
    51 00001B9E AC                  <1>     lodsb   ;Getch
    52 00001B9F E814290000          <1>     call isALdelimiter  ;If this is a delimiter, we are at the end of the command
    53 00001BA4 74D3                <1>     je .bbFndLp
    54 00001BA6 E8BF000000          <1>     call .bbCheckEndOfCmdLine
    55 00001BAB 75F1                <1>     jne .bbFndLp2   ;If not end of cmdline, see if next char delim
    56                              <1> .bbArgsDone:
    57                              <1> ;Now copy the batch name, need to figure the full path to it.
    58 00001BAD 488D3522E7FFFF      <1>     lea rsi, cmdPathSpec
    59 00001BB4 488D3DE7E4FFFF      <1>     lea rdi, batFile
    60 00001BBB 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
    61 00001BBE 80FC3A              <1>     cmp ah, ":"
    62 00001BC1 746D                <1>     je .bbdrvGiven
    63 00001BC3 3A0550E4FFFF        <1>     cmp al, byte [pathSep]  ;Is the first char a pathsep?
    64 00001BC9 7458                <1>     je .bbCDrvAbs
    65                              <1> ;Current drive relative
    66 00001BCB E897280000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
    67 00001BD0 0441                <1>     add al, "A"
    68 00001BD2 B43A                <1>     mov ah, ":"
    69 00001BD4 66AB                <1>     stosw   ;Store these two chars, adv rdi
    70                              <1> .bbRelPath:
    71 00001BD6 8A053DE4FFFF        <1>     mov al, byte [pathSep]  
    72 00001BDC AA                  <1>     stosb   ;Store the pathsep
    73 00001BDD 8A05BFE4FFFF        <1>     mov al, byte [batFile]  ;Now get the drive letter into al
    74 00001BE3 E8A7280000          <1>     call ucChar             ;UC it
    75 00001BE8 8805B4E4FFFF        <1>     mov byte [batFile], al  ;and overwrite it :)
    76 00001BEE 2C40                <1>     sub al, "@"             ;Convert into a 1 based drive number
    77 00001BF0 88C2                <1>     mov dl, al
    78 00001BF2 56                  <1>     push rsi        ;Save remaining char source
    79 00001BF3 4889FE              <1>     mov rsi, rdi    ;rdi is where we want to store the file name
    80 00001BF6 B800470000          <1>     mov eax, 4700h  ;Get Current Directory
    81 00001BFB CD21                <1>     int 21h
    82 00001BFD 5E                  <1>     pop rsi
    83 00001BFE 7311                <1>     jnc .bbRelPathOk
    84 00001C00 488D1591ECFFFF      <1>     lea rdx, badBat
    85 00001C07 E865260000          <1>     call printString
    86 00001C0C E963000000          <1>     jmp batFinish   ;Now clean up the batch stuff we've setup
    87                              <1> .bbRelPathOk:
    88                              <1> ;Now move rdi to the terminating null   
    89 00001C11 31C0                <1>     xor eax, eax
    90 00001C13 31C9                <1>     xor ecx, ecx
    91 00001C15 F2AE                <1>     repne scasb ;Find the terminating null
    92 00001C17 48FFCF              <1>     dec rdi ;Now point to the terminating null
    93 00001C1A 8A05F9E3FFFF        <1>     mov al, byte [pathSep]
    94 00001C20 AA                  <1>     stosb   ;Store this pathsep over the original null
    95                              <1>     ;Now we are ready to copy the command line passed to us by the user
    96                              <1>     ; to rdi. rsi points to where to source the rest of the chars
    97 00001C21 EB1B                <1>     jmp short .bbCpName
    98                              <1> .bbCDrvAbs:
    99                              <1> ;Current drive absolute. Get current drive into buffer
   100 00001C23 E83F280000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
   101 00001C28 0441                <1>     add al, "A"
   102 00001C2A B43A                <1>     mov ah, ":"
   103 00001C2C 66AB                <1>     stosw   ;Store these two chars
   104                              <1>     ;Now we are ready to copy the command line passed to us by the user
   105                              <1>     ; to rdi. rsi points to where to source the rest of the chars
   106 00001C2E EB0E                <1>     jmp short .bbCpName
   107                              <1> .bbdrvGiven:
   108                              <1> ;Drive given X:
   109 00001C30 66A5                <1>     movsw   ;Move over the X:, point rsi to the first new char
   110 00001C32 AC                  <1>     lodsb
   111 00001C33 48FFCE              <1>     dec rsi ;Get the char and point back to it
   112 00001C36 3A05DDE3FFFF        <1>     cmp al, byte [pathSep]  ;Is char three a pathsep?
   113 00001C3C 7598                <1>     jne .bbRelPath
   114                              <1> .bbCpName:
   115 00001C3E E829280000          <1>     call strcpy ;Copy the remaining portion
   116 00001C43 488D3558E4FFFF      <1>     lea rsi, batFile
   117 00001C4A 4889F7              <1>     mov rdi, rsi
   118 00001C4D B811120000          <1>     mov eax, 1211h  ;Normalise the path :)
   119 00001C52 CD2F                <1>     int 2fh
   120                              <1> ;Now deactivate any redirs. Do redir out as cleanupRedirs somewhat ignores it.
   121                              <1> ;Do the handle close as deleting the file without closing the handle is asking 
   122                              <1> ; for SHARING trouble...
   123 00001C54 E865FAFFFF          <1>     call cleanRedirOut      ;Liquidates redirout if needed
   124 00001C59 E844F9FFFF          <1>     call cleanupRedirs      ;Now liquidate remaining redirs and pipes
   125 00001C5E 800D1FE4FFFF08      <1>     or byte [statFlg1], inBatch ;Fire up the batch processor!
   126 00001C65 E992F4FFFF          <1>     jmp commandMain         ;Now we start reading the batch file!
   127                              <1> 
   128                              <1> .bbCheckEndOfCmdLine:
   129                              <1> ;Input: rsi -> Char to check 
   130                              <1> ;Output: ZF=ZE if we hit a CR or a <NUL>
   131 00001C6A 803E00              <1>     cmp byte [rsi], 0
   132                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001C6D 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001C6F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   133 00001C70 803E0D              <1>     cmp byte [rsi], CR
   134                              <1>     return
    13                              <2> %%_ret:
    14 00001C73 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> batFinish:
   137                              <1> ;This is the procedure called after we've processed the last batch line
   138 00001C74 E831010000          <1>     call batCleanup     ;Cleanup the batch and batch state vars etc etc
   139 00001C79 E97EF4FFFF          <1>     jmp commandMain     ;And start again :)
   140                              <1> batNextLine:
   141                              <1> ;Read the next line from the file and sets if we are done with copying
   142 00001C7E F605FFE3FFFF10      <1>     test byte [statFlg1], batchEOF ;Did we hit EOF?
   143 00001C85 75ED                <1>     jnz batFinish
   144 00001C87 488D1514E4FFFF      <1>     lea rdx, batFile
   145                              <1> .batOpen:
   146 00001C8E B8003D0000          <1>     mov eax, 3D00h  ;Open for read only
   147 00001C93 CD21                <1>     int 21h
   148 00001C95 7315                <1>     jnc .batOpened
   149 00001C97 488D1511ECFFFF      <1>     lea rdx, needBat
   150 00001C9E E8CE250000          <1>     call printString
   151 00001CA3 B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Allows for triggering ^C
   152 00001CA8 CD21                <1>     int 21h
   153 00001CAA EBE2                <1>     jmp short .batOpen
   154                              <1> .batOpened:
   155 00001CAC 89C3                <1>     mov ebx, eax            ;Move the handle into ebx
   156 00001CAE 488B35E5E3FFFF      <1>     mov rsi, qword [bbPtr]  ;Get the batch block ptr
   157 00001CB5 8B5613              <1>     mov edx, dword [rsi + batBlockHdr.dBatOffLo]
   158 00001CB8 8B4E17              <1>     mov ecx, dword [rsi + batBlockHdr.dBatOffHi]
   159 00001CBB B800420000          <1>     mov eax, 4200h          ;LSEEK to where we left off previously
   160 00001CC0 CD21                <1>     int 21h
   161 00001CC2 C60588E4FFFF00      <1>     mov byte [inBuffer + 1], 0  ;Reset the buffer count
   162 00001CC9 488D1582E4FFFF      <1>     lea rdx, inBuffer + 2   ;Start read pos
   163 00001CD0 31FF                <1>     xor edi, edi            ;Use edi as the char counter
   164                              <1> .readlp:
   165 00001CD2 E8BA000000          <1>     call .readChar          ;Read the char
   166 00001CD7 85C0                <1>     test eax, eax
   167 00001CD9 7425                <1>     jz .endOfBat
   168 00001CDB FFC7                <1>     inc edi                 ;We read a char, woohoo!
   169 00001CDD 803A1A              <1>     cmp byte [rdx], EOF     ;Did we read a ^Z char?
   170 00001CE0 741E                <1>     je .endOfBat
   171 00001CE2 803A0D              <1>     cmp byte [rdx], CR      ;End of line?
   172 00001CE5 7433                <1>     je .endOfLineCr
   173 00001CE7 803A0A              <1>     cmp byte [rdx], LF      ;End of line UNIX?
   174 00001CEA 743E                <1>     je .endOfLineLf
   175 00001CEC FE055FE4FFFF        <1>     inc byte [inBuffer + 1] ;Inc our char count
   176 00001CF2 48FFC2              <1>     inc rdx                 ;Store the next char in the next position
   177 00001CF5 803D55E4FFFF80      <1>     cmp byte [inBuffer + 1], 128    ;Are we 128 chars w/o CR?
   178 00001CFC 75D4                <1>     jne .readlp             ;Get next char if not
   179 00001CFE EB2D                <1>     jmp short .endOfLine    ;The user typed too many chars on a line, EOL
   180                              <1> .endOfBat:
   181 00001D00 800D7DE3FFFF10      <1>     or byte [statFlg1], batchEOF    ;Set if we encounter a ^Z terminator
   182 00001D07 803D43E4FFFF00      <1>     cmp byte [inBuffer + 1], 0      ;If we formally read 0 chars, exit!
   183 00001D0E 751D                <1>     jne .endOfLine
   184 00001D10 E874000000          <1>     call .closeBat                  ;Close the hdl! This is why this is here!
   185 00001D15 E95AFFFFFF          <1>     jmp batFinish
   186                              <1> .endOfLineCr:   ;Now get the next char, to possibly eliminate a trailing LF
   187 00001D1A E872000000          <1>     call .readChar  ;Get the LF over the CR
   188 00001D1F 85C0                <1>     test eax, eax   ;Did we read nothing?
   189 00001D21 74DD                <1>     jz .endOfBat    ;That CR was last char, check if empty buffer, else exec
   190 00001D23 803A0A              <1>     cmp byte [rdx], LF  ;Did we read a LF?
   191 00001D26 7502                <1>     jne .endOfLineLf    ;Reread this char if not LF
   192 00001D28 FFC7                <1>     inc edi             ;Else add to the count
   193                              <1> .endOfLineLf:
   194 00001D2A C6020D              <1>     mov byte [rdx], CR  ;Now place the CR over the last char
   195                              <1> .endOfLine:
   196                              <1> ;Close the file, update the batch block file pointer, then proceed.
   197                              <1> ;rsi -> Batch block.
   198 00001D2D E857000000          <1>     call .closeBat
   199                              <1>     ;Imagine someone gives us a 2+Gb Batch file... some server magik lmao
   200 00001D32 017E13              <1>     add dword [rsi + batBlockHdr.dBatOffLo], edi    ;Add lo dword to chars 
   201 00001D35 81561700000000      <1>     adc dword [rsi + batBlockHdr.dBatOffHi], 0      ;Add CF if needed!
   202                              <1> ;Now we echo the line to the console unless the first char is @ or 
   203                              <1> ; the echo flag is off
   204 00001D3C 488D150FE4FFFF      <1>     lea rdx, inBuffer + 2
   205 00001D43 803A40              <1>     cmp byte [rdx], batNoEchoChar
   206 00001D46 7421                <1>     je .noEchoPull       
   207 00001D48 F60536E3FFFFFF      <1>     test byte [echoFlg], -1         
   208 00001D4F 7413                <1>     jz .noEcho
   209 00001D51 0FB60DF9E3FFFF      <1>     movzx ecx, byte [inBuffer + 1]    ;Get the number of chars to print
   210 00001D58 BB01000000          <1>     mov ebx, 1  ;STDOUT
   211 00001D5D B800400000          <1>     mov eax, 4000h  ;Write woo!
   212 00001D62 CD21                <1>     int 21h
   213                              <1> .noEcho:
   214 00001D64 E9E9F3FFFF          <1>     jmp commandMain.batProceed
   215                              <1> .noEchoPull:
   216 00001D69 FE0DE2E3FFFF        <1>     dec byte [inBuffer + 1]     ;Eliminate the @ char
   217 00001D6F 0F8409FFFFFF        <1>     jz batNextLine    ;If this was just a @<CR><LF>, get next line
   218 00001D75 4889D7              <1>     mov rdi, rdx
   219 00001D78 488D7201            <1>     lea rsi, qword [rdx + 1]    ;Start from the char afterwards
   220 00001D7C 0FB60DCEE3FFFF      <1>     movzx ecx, byte [inBuffer + 1]  ;Get the remaining count to copy
   221 00001D83 FFC1                <1>     inc ecx                         ;Want to copy over the terminating CR too
   222 00001D85 F3A4                <1>     rep movsb 
   223 00001D87 EBDB                <1>     jmp short .noEcho   ;Now proceed normally
   224                              <1>     
   225                              <1> .closeBat:
   226                              <1> ;Close the handle in rbx
   227 00001D89 B8003E0000          <1>     mov eax, 3E00h  ;Close the file pointer in ebx
   228 00001D8E CD21                <1>     int 21h         ;We ignore errors here... dont hurt me SHARE pls
   229                              <1>     return
    13                              <2> %%_ret:
    14 00001D90 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   230                              <1> .readChar:
   231                              <1> ;Reads a char. If no chars read, sets the EOF flag!
   232 00001D91 B901000000          <1>     mov ecx, 1
   233 00001D96 B8003F0000          <1>     mov eax, 3F00h
   234 00001D9B CD21                <1>     int 21h  
   235 00001D9D 85C0                <1>     test eax, eax
   236                              <1>     retnz   ;If a char read, return
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001D9F 75(90)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   237 00001DA1 800DDCE2FFFF10      <1>     or byte [statFlg1], batchEOF    ;Set the end of file reached flag!
   238                              <1>     return
    13                              <2> %%_ret:
    14 00001DA8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   239                              <1> 
   240                              <1> 
   241                              <1> batExpandVar:
   242                              <1> ;Input: rsi -> Char after the % sign that triggered this call.
   243                              <1> ;       rdi -> Position to place the substitution string
   244                              <1> ;Output: CF=NC: Substitution string is placed in buffer
   245                              <1> ;        CF=CY: No substitution string found
   246                              <1>     return
    13                              <2> %%_ret:
    14 00001DA9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   247                              <1>     ;cmp byte [rsi], "%"
   248                              <1> 
   249                              <1> batCleanup:
   250                              <1> ;This function is called after the last line has been processed by the 
   251                              <1> ; batch interpreter! Cleans up all the batch resources. Also called if 
   252                              <1> ; CTRLC called during a batch job and the user wants to kill the batch.
   253 00001DAA 488B1DE9E2FFFF      <1>     mov rbx, qword [bbPtr]
   254 00001DB1 8A4301              <1>     mov al, byte [rbx + batBlockHdr.bEchoFlg]   ;Reset the echo flag
   255 00001DB4 8805CBE2FFFF        <1>     mov byte [echoFlg], al
   256                              <1> ;-----------------------------------------------------------------------
   257                              <1> ;===Now free the FOR and CALL blocks... oops havent implemented yet!!===
   258                              <1> ; FOR blocks are generally cleaned up by the FOR command. CALL too. 
   259                              <1> ; But since this is the routine called by the error handler too, it 
   260                              <1> ; needs to check for these things. Not a big deal as normally we'll 
   261                              <1> ; just have a null pointer.
   262                              <1> ;-----------------------------------------------------------------------
   263                              <1> ;Finally free this batch header
   264 00001DBA 4150                <1>     push r8
   265 00001DBC 4989D8              <1>     mov r8, rbx
   266 00001DBF B800490000          <1>     mov eax, 4900h
   267 00001DC4 CD21                <1>     int 21h
   268 00001DC6 4158                <1>     pop r8
   269 00001DC8 E8D5F7FFFF          <1>     call cleanupRedirs  ;Clean up all redirections, close files etc
   270 00001DCD 48C705C2E2FFFF0000- <1>     mov qword [bbPtr], 0    
   270 00001DD6 0000                <1>
   271 00001DD8 8025A5E2FFFFE7      <1>     and byte [statFlg1], ~(inBatch|batchEOF)   ;Oh bye bye batch mode!
   272                              <1>     return
    13                              <2> %%_ret:
    14 00001DDF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badDiskFull:
     7                              <1> ;This is a different error return, as this closes handles and prints
     8                              <1> ; disk full error and resets the command line!
     9 00001DE0 488D1567EBFFFF      <1>     lea rdx, noSpace
    10 00001DE7 488D0D83EEFFFF      <1>     lea rcx, pipeErr
    11 00001DEE F60593E2FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the flag set
    12 00001DF5 746F                <1>     jz short badCmn ;If its just disk full, dont go through pipe clean
    13 00001DF7 480F45D1            <1>     cmovnz rdx, rcx ;Swap error messages if pipe flag is on
    14 00001DFB E866000000          <1>     call badCmn     ;Print the string
    15 00001E00 E993F7FFFF          <1>     jmp redirPipeFailureCommon.noPrint  ;Now close pipes and fully reset!
    16                              <1> badNoMemError:
    17 00001E05 488D1531EFFFFF      <1>     lea rdx, noMemMsg
    18 00001E0C EB58                <1>     jmp short badCmn
    19                              <1> badSyntaxError:
    20 00001E0E 488D1535EEFFFF      <1>     lea rdx, syntaxErr
    21 00001E15 EB4F                <1>     jmp short badCmn
    22                              <1> badEnvSpaceError:
    23 00001E17 488D154AEBFFFF      <1>     lea rdx, noEnvSpace
    24 00001E1E EB46                <1>     jmp short badCmn
    25                              <1> badAccError:
    26 00001E20 488D15CFEDFFFF      <1>     lea rdx, accDenMsg
    27 00001E27 EB3D                <1>     jmp short badCmn
    28                              <1> badParamError:
    29 00001E29 488D1544ECFFFF      <1>     lea rdx, badParm
    30 00001E30 EB34                <1>     jmp short badCmn
    31                              <1> badDriveError:
    32 00001E32 488D15FEEBFFFF      <1>     lea rdx, badDrv
    33 00001E39 EB2B                <1>     jmp short badCmn
    34                              <1> badArgError:
    35 00001E3B 488D15C1EEFFFF      <1>     lea rdx, badArgs
    36 00001E42 EB22                <1>     jmp short badCmn
    37                              <1> badFileError:
    38 00001E44 488D159CEEFFFF      <1>     lea rdx, badSpec
    39 00001E4B EB19                <1>     jmp short badCmn
    40                              <1> badDupFnf:
    41                              <1> ;Hybrid error message
    42 00001E4D 488D15D2EAFFFF      <1>     lea rdx, dupName
    43 00001E54 EB10                <1>     jmp short badCmn
    44                              <1> badFnf:
    45 00001E56 488D15E0EAFFFF      <1>     lea rdx, fnfMsg
    46 00001E5D EB07                <1>     jmp short badCmn
    47                              <1> badDirError:
    48 00001E5F 488D150FEDFFFF      <1>     lea rdx, badDir
    49                              <1> badCmn:
    50 00001E66 E906240000          <1>     jmp printString     ;This will be made nuanced later, to agree with DOS
    51                              <1> badCmdError:
    52 00001E6B 488D1599EAFFFF      <1>     lea rdx, badCmd
    53 00001E72 EBF2                <1>     jmp short badCmn
    54                              <1> dir:
    55                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    56 00001E74 C60508E7FFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    57 00001E7B C60502E7FFFF00      <1>     mov byte [dirLineCtr], 0
    58 00001E82 C705F9E6FFFF000000- <1>     mov dword [dirFileCtr], 0
    58 00001E8B 00                  <1>
    59 00001E8C C605F7E6FFFF00      <1>     mov byte [dirSrchDir], 0
    60 00001E93 66C705E3E5FFFF0000  <1>     mov word [searchSpec], 0
    61 00001E9C 488D3D69E7FFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    62 00001EA3 C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    63 00001EA6 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    63 00001EAF 3F                  <1>
    64 00001EB0 48894701            <1>     mov qword [rdi + fcb.filename], rax
    65 00001EB4 C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    66                              <1>     ;Start by scanning for the switches
    67 00001EBB 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    68 00001EC2 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    69                              <1> .scanNew:
    70 00001EC5 E8E0250000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    71 00001ECA AC                  <1>     lodsb   ;Get this char
    72 00001ECB 3C0D                <1>     cmp al, CR
    73 00001ECD 744D                <1>     je .scanDone
    74 00001ECF 3A0545E1FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    75 00001ED5 7524                <1>     jne .notSwitch
    76 00001ED7 AC                  <1>     lodsb   ;Get the next char
    77 00001ED8 E8B2250000          <1>     call ucChar
    78 00001EDD 3C57                <1>     cmp al, "W"
    79 00001EDF 7509                <1>     jne .notWide
    80 00001EE1 800D9BE6FFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    81 00001EE8 EBDB                <1>     jmp short .scanNew
    82                              <1> .notWide:
    83 00001EEA 3C50                <1>     cmp al, "P"
    84 00001EEC 0F8537FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    85 00001EF2 800D8AE6FFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    86 00001EF9 EBCA                <1>     jmp short .scanNew
    87                              <1> .notSwitch:
    88 00001EFB F60581E6FFFF04      <1>     test byte [dirFlags], dirFileType
    89 00001F02 0F8521FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    90                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    91 00001F08 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    92 00001F0B E826270000          <1>     call copyArgumentToSearchSpec   
    93 00001F10 48FFCE              <1>     dec rsi ;Point back to the terminator char
    94 00001F13 800D69E6FFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    95 00001F1A EBA9                <1>     jmp short .scanNew
    96                              <1> .scanDone:
    97 00001F1C F60560E6FFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    98 00001F23 7438                <1>     jz .currentDrv
    99                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   100 00001F25 488D3553E5FFFF      <1>     lea rsi, searchSpec
   101 00001F2C 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   102 00001F30 752B                <1>     jne .currentDrv
   103                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   104 00001F32 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   105 00001F37 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   106 00001F3B B801290000          <1>     mov eax, 2901h   ;Parse filename
   107 00001F40 CD21                <1>     int 21h
   108 00001F42 3CFF                <1>     cmp al, -1
   109 00001F44 0F84E8FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   110                              <1>     ;Else the drive in the fcb is valid
   111 00001F4A 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   112 00001F4F 84C0                <1>     test al, al
   113 00001F51 740A                <1>     jz .currentDrv
   114 00001F53 FEC8                <1>     dec al  ;Convert to 0 based drive number
   115 00001F55 88052EE6FFFF        <1>     mov byte [dirDrv], al
   116 00001F5B EB0B                <1>     jmp short .dirPrintVol
   117                              <1> .currentDrv:
   118 00001F5D E805250000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   119 00001F62 880521E6FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   120                              <1> .dirPrintVol:
   121 00001F68 488D3510E5FFFF      <1>     lea rsi, searchSpec
   122                              <1> ;Now construct the path on dirSrchDir.
   123 00001F6F 488D3D14E6FFFF      <1>     lea rdi, dirSrchDir
   124 00001F76 0FB6050CE6FFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   125 00001F7D 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   126 00001F7F 0441                <1>     add al, "A" ;Turn into a letter
   127 00001F81 B43A                <1>     mov ah, ":"
   128 00001F83 66AB                <1>     stosw   ;Store X: into the search path
   129 00001F85 B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   130 00001F8A CD2F                <1>     int 2fh
   131 00001F8C 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   132 00001F8E 0F849EFEFFFF        <1>     je badDriveError
   133                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   134 00001F94 8A057FE0FFFF        <1>     mov al, byte [pathSep]
   135 00001F9A 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   136 00001F9C 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   137 00001F9E AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   138 00001F9F FEC2                <1>     inc dl  ;Increment by 1
   139 00001FA1 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   140 00001FA4 B800470000          <1>     mov eax, 4700h  ;Print current working directory
   141 00001FA9 CD21                <1>     int 21h
   142 00001FAB 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   143                              <1>     ;rsi points to the first char in the provided path.
   144                              <1>     ;rdi points to the first char of the cwd.
   145 00001FAE 31C0                <1>     xor eax, eax
   146                              <1> .goToEndOfCwd:
   147                              <1> ;Move to the end of the string, could use repne?
   148 00001FB0 3807                <1>     cmp byte [rdi], al
   149 00001FB2 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   150 00001FB4 48FFC7              <1>     inc rdi
   151 00001FB7 EBF7                <1>     jmp short .goToEndOfCwd
   152                              <1> .prepCopy:
   153 00001FB9 8A055AE0FFFF        <1>     mov al, byte [pathSep]
   154 00001FBF 3806                <1>     cmp byte [rsi], al
   155 00001FC1 7412                <1>     je .copyPathLoop
   156 00001FC3 B43A                <1>     mov ah, ":"
   157 00001FC5 86C4                <1>     xchg al, ah
   158 00001FC7 663947FE            <1>     cmp word [rdi - 2], ax
   159 00001FCB 7408                <1>     je .copyPathLoop
   160 00001FCD 88E0                <1>     mov al, ah
   161 00001FCF 3847FF              <1>     cmp byte [rdi - 1], al
   162 00001FD2 7401                <1>     je .copyPathLoop
   163 00001FD4 AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   164                              <1> .copyPathLoop:
   165 00001FD5 AC                  <1>     lodsb
   166 00001FD6 3A053DE0FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   167 00001FDC 7509                <1>     jne .checkDot  ;If not, store it
   168                              <1> .lpPathseps:
   169 00001FDE 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   170 00001FE0 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   171 00001FE2 48FFC6              <1>     inc rsi
   172 00001FE5 EBF7                <1>     jmp short .lpPathseps
   173                              <1> .checkDot:
   174 00001FE7 3C2E                <1>     cmp al, "."
   175 00001FE9 7407                <1>     je .dots
   176                              <1> .store:
   177 00001FEB AA                  <1>     stosb
   178 00001FEC 84C0                <1>     test al, al ;Was the char we just copied a null?
   179 00001FEE 7472                <1>     jz .exitPathCopy
   180 00001FF0 EBE3                <1>     jmp short .copyPathLoop
   181                              <1> .dots:
   182                              <1>     ;Here handle dot and dot dot
   183                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   184                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   185                              <1>     ; by 1. If it is null, go to top of loop.
   186                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   187 00001FF2 8A2521E0FFFF        <1>     mov ah, byte [pathSep]
   188 00001FF8 3867FF              <1>     cmp byte [rdi - 1], ah  
   189 00001FFB 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   190 00001FFD 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   191 00001FFF 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   192 00002002 7413                <1>     je .twoDot
   193                              <1>     ;This is only a "current dir" when next char is pathsep or null
   194 00002004 3A250FE0FFFF        <1>     cmp ah, byte [pathSep]
   195 0000200A 7406                <1>     je .skipThisPathsep
   196 0000200C 84E4                <1>     test ah, ah
   197 0000200E 74C5                <1>     jz .copyPathLoop
   198 00002010 EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   199                              <1> .skipThisPathsep:
   200                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   201 00002012 48FFC6              <1>     inc rsi ;Point to the pathsep
   202 00002015 EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   203                              <1> .twoDot:
   204                              <1>     ;Woohoo, this works!
   205 00002017 48FFC6              <1>     inc rsi ;Move past the second dot
   206 0000201A 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   207 0000201C 3A25F7DFFFFF        <1>     cmp ah, byte [pathSep]
   208 00002022 7408                <1>     je .tdOk
   209 00002024 84E4                <1>     test ah, ah
   210 00002026 0F85FDFDFFFF        <1>     jne badParamError
   211                              <1> .tdOk:
   212 0000202C 8A05E7DFFFFF        <1>     mov al, byte byte [pathSep]
   213 00002032 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   214 00002036 0F84EDFDFFFF        <1>     je badParamError
   215 0000203C 4881EF02000000      <1>     sub rdi, 2
   216 00002043 31C9                <1>     xor ecx, ecx
   217 00002045 FFC9                <1>     dec ecx
   218 00002047 FD                  <1>     std
   219 00002048 F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   220 0000204A FC                  <1>     cld
   221 0000204B 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   222 00002052 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   223 00002054 0F847BFFFFFF        <1>     jz .copyPathLoop
   224 0000205A 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   225 0000205D E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   226                              <1> .exitPathCopy:
   227                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   228 00002062 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   229 00002069 8A05AADFFFFF        <1>     mov al, byte [pathSep]
   230 0000206F B43A                <1>     mov ah, ":"
   231 00002071 86C4                <1>     xchg al, ah
   232 00002073 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   233 00002077 7409                <1>     je .skipOverwrite
   234 00002079 88E0                <1>     mov al, ah
   235 0000207B 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   236 0000207D 7503                <1>     jne .skipOverwrite
   237 0000207F C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   238                              <1> .skipOverwrite:
   239 00002082 488D3501E5FFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   240 00002089 4889F7              <1>     mov rdi, rsi
   241 0000208C B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   242 00002091 CD2F                <1>     int 2fh
   243 00002093 E8AB250000          <1>     call scanForWildcards
   244 00002098 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   245 0000209A 4889F2              <1>     mov rdx, rsi
   246 0000209D 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   247 000020A1 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   248                              <1> .notNull:
   249 000020A3 E89F260000          <1>     call setDTA ;Set the DTA
   250 000020A8 B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   251 000020AD B8004E0000          <1>     mov eax, 4E00h ;Find first
   252 000020B2 CD21                <1>     int 21h
   253 000020B4 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   254                              <1> ;Now we have searched for the file, is a directory?
   255 000020B6 F6055DE0FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   256 000020BD 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   257                              <1>     ;Here we are searching IN a directory. Default search pattern!
   258 000020BF 31C0                <1>     xor eax, eax
   259 000020C1 31C9                <1>     xor ecx, ecx
   260 000020C3 FFC9                <1>     dec ecx
   261 000020C5 F2AE                <1>     repne scasb
   262 000020C7 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   263 000020CA EB40                <1>     jmp short .wcDefaultSearch
   264                              <1> .wcSearchPattern:
   265                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   266                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   267 000020CC 31C0                <1>     xor eax, eax
   268 000020CE 31C9                <1>     xor ecx, ecx
   269 000020D0 FFC9                <1>     dec ecx
   270 000020D2 F2AE                <1>     repne scasb ;Scan forwards
   271                              <1>     ;Here rdi points past the null at the end
   272 000020D4 8A053FDFFFFF        <1>     mov al, byte [pathSep]
   273 000020DA 31C9                <1>     xor ecx, ecx
   274 000020DC FFC9                <1>     dec ecx
   275 000020DE FD                  <1>     std ;Search backwards
   276 000020DF F2AE                <1>     repne scasb
   277 000020E1 FC                  <1>     cld ;Search forwards again
   278 000020E2 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   279 000020E5 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   280 000020E9 7503                <1>     jne .wcsp1
   281 000020EB 48FFC7              <1>     inc rdi ;Go one char forwards
   282                              <1> .wcsp1:
   283                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   284 000020EE 57                  <1>     push rdi
   285 000020EF 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   286 000020F1 7503                <1>     jne .wcsp2
   287 000020F3 48FFC7              <1>     inc rdi
   288                              <1> .wcsp2:
   289 000020F6 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   290 000020F9 488D3D0CE5FFFF      <1>     lea rdi, dirSrchFCB
   291 00002100 B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   292 00002105 CD21                <1>     int 21h
   293 00002107 5F                  <1>     pop rdi
   294 00002108 31C0                <1>     xor eax, eax
   295 0000210A 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   296                              <1> .wcDefaultSearch:
   297 0000210C 0FB60576E4FFFF      <1>     movzx eax, byte [dirDrv] 
   298 00002113 E8C2160000          <1>     call volume.dirEP
   299 00002118 488D15BEEAFFFF      <1>     lea rdx, dirMain    ;Print message intro
   300 0000211F B409                <1>     mov ah, 09h
   301 00002121 CD21                <1>     int 21h
   302 00002123 C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   303 00002126 488D155DE4FFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   304 0000212D B409                <1>     mov ah, 09h
   305 0000212F CD21                <1>     int 21h
   306 00002131 C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   307 00002134 488D1558E7FFFF      <1>     lea rdx, crlf2
   308 0000213B B409                <1>     mov ah, 09h
   309 0000213D CD21                <1>     int 21h
   310                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   311                              <1> ;rdi points to the terminating null
   312 0000213F 8A05D4DEFFFF        <1>     mov al, byte [pathSep]
   313 00002145 3847FF              <1>     cmp byte [rdi - 1], al
   314 00002148 7403                <1>     je .root
   315 0000214A 48FFC7              <1>     inc rdi
   316                              <1> .root:
   317 0000214D 48FFCF              <1>     dec rdi ;Point back to the pathsep
   318 00002150 AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   319 00002151 488D35B5E4FFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   320 00002158 E828240000          <1>     call FCBToAsciiz    ;Terminates for free
   321 0000215D E801000000          <1>     call .searchForFile
   322                              <1>     return
    13                              <2> %%_ret:
    14 00002162 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   323                              <1> 
   324                              <1> .searchForFile:
   325 00002163 E8DF250000          <1>     call setDTA
   326 00002168 B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   327 0000216D 488D1516E4FFFF      <1>     lea rdx, dirSrchDir
   328 00002174 B8004E0000          <1>     mov eax, 4E00h ;Find first
   329 00002179 CD21                <1>     int 21h
   330 0000217B 720B                <1>     jc .dirNoMoreFiles
   331                              <1> .findNext:
   332 0000217D E890000000          <1>     call .dirPrintFileData  ;Print the file information
   333 00002182 B44F                <1>     mov ah, 4Fh
   334 00002184 CD21                <1>     int 21h
   335 00002186 73F5                <1>     jnc .findNext 
   336                              <1> .dirNoMoreFiles:
   337 00002188 F605F4E3FFFF01      <1>     test byte [dirFlags], dirWideType
   338 0000218F 740B                <1>     jz .dirNoEndNewLine
   339 00002191 488D15F8E6FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   340 00002198 B409                <1>     mov ah, 09h
   341 0000219A CD21                <1>     int 21h
   342                              <1> .dirNoEndNewLine:
   343                              <1>     ;Now we print the number of files and the number of bytes on the disk
   344 0000219C F705DFE3FFFFFFFFFF- <1>     test dword [dirFileCtr], -1
   344 000021A5 FF                  <1>
   345 000021A6 750D                <1>     jnz .filesFound
   346                              <1>     ;Else print File not found and exit!
   347 000021A8 488D158EE7FFFF      <1>     lea rdx, fnfMsg
   348 000021AF E8BD200000          <1>     call printString
   349                              <1>     return
    13                              <2> %%_ret:
    14 000021B4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   350                              <1> .filesFound:
   351 000021B5 488D15F6ECFFFF      <1>     lea rdx, fourSpc
   352 000021BC B409                <1>     mov ah, 09h
   353 000021BE CD21                <1>     int 21h
   354 000021C0 B409                <1>     mov ah, 09h ;Print four Spaces twice
   355 000021C2 CD21                <1>     int 21h
   356 000021C4 8B05BBE3FFFF        <1>     mov eax, dword [dirFileCtr]   ;Get number of files
   357 000021CA E888240000          <1>     call printDecimalWord
   358 000021CF 488D1540E8FFFF      <1>     lea rdx, dirOk
   359 000021D6 B409                <1>     mov ah, 09h
   360 000021D8 CD21                <1>     int 21h
   361 000021DA 488D15D6ECFFFF      <1>     lea rdx, threeSpc
   362 000021E1 B409                <1>     mov ah, 09h
   363 000021E3 CD21                <1>     int 21h
   364 000021E5 B800360000          <1>     mov eax, 3600h ;Get disk info
   365 000021EA 8A1599E3FFFF        <1>     mov dl, byte [dirDrv]
   366 000021F0 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   367 000021F2 CD21                <1>     int 21h ;Get disk free space info
   368 000021F4 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   369 000021F7 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   370 000021FA 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   371 000021FC F7E1                <1>     mul ecx ;Get bytes per cluster
   372 000021FE 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   373                              <1>     ;rax now has the number of free bytes on the disk
   374 00002201 E851240000          <1>     call printDecimalWord
   375 00002206 488D1513E8FFFF      <1>     lea rdx, bytesOk
   376 0000220D B409                <1>     mov ah, 09h
   377 0000220F CD21                <1>     int 21h
   378                              <1>     return
    13                              <2> %%_ret:
    14 00002211 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   379                              <1> 
   380                              <1> .dirPrintFileData:
   381                              <1> ;Use cmdFcb to build the file name with space
   382                              <1> ;Start by print the name (same for both cases)
   383                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   384 00002212 F60501DFFFFF46      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles | dirCharDev
   385                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002219 75(11)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   386 0000221B 488D3501DFFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   387 00002222 488D3DCCDEFFFF      <1>     lea rdi, cmdFcb
   388 00002229 E8E9220000          <1>     call asciiFilenameToFCB
   389 0000222E 488D15C0DEFFFF      <1>     lea rdx, cmdFcb
   390 00002235 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   391 0000223A BB01000000          <1>     mov ebx, 1  ;STDOUT
   392 0000223F B440                <1>     mov ah, 40h ;Write handle
   393 00002241 CD21                <1>     int 21h
   394 00002243 52                  <1>     push rdx
   395 00002244 B220                <1>     mov dl, " "
   396 00002246 B402                <1>     mov ah, 02h ;Print char
   397 00002248 CD21                <1>     int 21h
   398 0000224A 5A                  <1>     pop rdx
   399 0000224B 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   400 00002252 B903000000          <1>     mov ecx, 3  ;Print three chars
   401 00002257 BB01000000          <1>     mov ebx, 1  ;STDOUT
   402 0000225C B440                <1>     mov ah, 40h ;Write handle
   403 0000225E CD21                <1>     int 21h
   404 00002260 F6051CE3FFFF01      <1>     test byte [dirFlags], dirWideType
   405 00002267 0F85AA000000        <1>     jnz .widePrint
   406                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   407                              <1>     ;Now check if a DIR
   408 0000226D F605A6DEFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   409 00002274 7418                <1>     jz .dirPrintNotDir
   410 00002276 488D15B1E7FFFF      <1>     lea rdx, dirLbl
   411 0000227D B409                <1>     mov ah, 09h
   412 0000227F CD21                <1>     int 21h
   413 00002281 488D152FECFFFF      <1>     lea rdx, threeSpc
   414 00002288 B409                <1>     mov ah, 09h
   415 0000228A CD21                <1>     int 21h
   416 0000228C EB4F                <1>     jmp short .dirPrintFileDT
   417                              <1> .dirPrintNotDir:
   418                              <1> ;Here we print the file size
   419 0000228E B220                <1>     mov dl, " "
   420 00002290 B402                <1>     mov ah, 02h
   421 00002292 CD21                <1>     int 21h
   422 00002294 8B0585DEFFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   423 0000229A E829240000          <1>     call getDecimalWord
   424 0000229F 4889CB              <1>     mov rbx, rcx
   425 000022A2 51                  <1>     push rcx
   426 000022A3 480FCB              <1>     bswap rbx
   427 000022A6 B908000000          <1>     mov ecx, 8
   428                              <1> .dirPrintFileSizePrep:
   429 000022AB 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   430 000022AD 7514                <1>     jne .dirPrintFileSize
   431 000022AF B402                <1>     mov ah, 02h
   432 000022B1 B220                <1>     mov dl, " "
   433 000022B3 CD21                <1>     int 21h
   434 000022B5 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   435 000022B9 FFC9                <1>     dec ecx
   436 000022BB 81F901000000        <1>     cmp ecx, 1
   437 000022C1 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   438                              <1> .dirPrintFileSize:
   439 000022C3 5B                  <1>     pop rbx
   440                              <1> .dirPrintFileSizeLoop:
   441 000022C4 88DA                <1>     mov dl, bl
   442 000022C6 B402                <1>     mov ah, 02h
   443 000022C8 CD21                <1>     int 21h
   444 000022CA 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   445 000022CE FFC9                <1>     dec ecx
   446 000022D0 75F2                <1>     jnz .dirPrintFileSizeLoop
   447 000022D2 488D15E2EBFFFF      <1>     lea rdx, twoSpc
   448 000022D9 B409                <1>     mov ah, 09h
   449 000022DB CD21                <1>     int 21h
   450                              <1> .dirPrintFileDT:
   451 000022DD B220                <1>     mov dl, " "
   452 000022DF B402                <1>     mov ah, 02h
   453 000022E1 CD21                <1>     int 21h
   454 000022E3 0FB70533DEFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   455 000022EA 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   456 000022EC E8301D0000          <1>     call printDate
   457 000022F1 488D15C3EBFFFF      <1>     lea rdx, twoSpc
   458 000022F8 B409                <1>     mov ah, 09h
   459 000022FA CD21                <1>     int 21h
   460 000022FC 0FB70518DEFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   461 00002303 E83B1E0000          <1>     call printTime
   462 00002308 488D1581E5FFFF      <1>     lea rdx, crlf
   463 0000230F B409                <1>     mov ah, 09h
   464 00002311 CD21                <1>     int 21h
   465 00002313 B017                <1>     mov al, 23  ;23 lines... for the next bit
   466 00002315 EB0D                <1>     jmp short .dirPrintNameExit
   467                              <1> .widePrint:
   468                              <1> ;If /W, print name space ext space space space space
   469 00002317 488D1594EBFFFF      <1>     lea rdx, fourSpc
   470 0000231E B409                <1>     mov ah, 09h ;Print string
   471 00002320 CD21                <1>     int 21h
   472 00002322 B073                <1>     mov al, 5*23    ;5 entries per line...
   473                              <1> .dirPrintNameExit:
   474 00002324 FF055BE2FFFF        <1>     inc dword [dirFileCtr]   ;Increment file counter
   475 0000232A FE0554E2FFFF        <1>     inc byte [dirLineCtr]
   476 00002330 38054EE2FFFF        <1>     cmp byte [dirLineCtr], al
   477                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002336 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002338 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   478 00002339 F60543E2FFFF02      <1>     test byte [dirFlags], dirPageType
   479 00002340 741A                <1>     jz .dirPrnNoPag
   480 00002342 488D150CE7FFFF      <1>     lea rdx, pauseMes
   481 00002349 B409                <1>     mov ah, 09h
   482 0000234B CD21                <1>     int 21h
   483 0000234D B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   484 0000234F CD21                <1>     int 21h
   485 00002351 488D1538E5FFFF      <1>     lea rdx, crlf   ;Force new line
   486 00002358 B409                <1>     mov ah, 09h
   487 0000235A CD21                <1>     int 21h
   488                              <1> .dirPrnNoPag:
   489 0000235C C60521E2FFFF00      <1>     mov byte [dirLineCtr], 0
   490                              <1>     return
    13                              <2> %%_ret:
    14 00002363 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   491                              <1> 
   492                              <1> chdir:
   493 00002364 F60528DDFFFFFF      <1>     test byte [arg1Flg], -1
   494 0000236B 754D                <1>     jnz .changeDir
   495                              <1>     ;Print CWD
   496                              <1> .printCWD:
   497 0000236D E8741F0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   498 00002372 E8F31E0000          <1>     call printCRLF
   499                              <1>     return
    13                              <2> %%_ret:
    14 00002377 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> .printDiskCWD:
   501                              <1> ;Print CWD for a specified drive
   502 00002378 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   503 0000237C 88D0                <1>     mov al, dl
   504 0000237E 0440                <1>     add al, "@" ;Get the UC letter
   505 00002380 B43A                <1>     mov ah, ":"
   506 00002382 488D3DF6E0FFFF      <1>     lea rdi, searchSpec
   507 00002389 66AB                <1>     stosw   ;Store X:, rdi+=2
   508 0000238B 8A0588DCFFFF        <1>     mov al, byte [pathSep]
   509 00002391 AA                  <1>     stosb   ;Store pathSep, inc rdi
   510 00002392 B447                <1>     mov ah, 47h ;Get Current Working Directory
   511 00002394 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   512 00002397 CD21                <1>     int 21h
   513 00002399 E8E7200000          <1>     call strlen
   514 0000239E 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   515 000023A4 B440                <1>     mov ah, 40h ;Write to handle
   516 000023A6 BB01000000          <1>     mov ebx, 1  ;STDOUT
   517 000023AB 488D15CDE0FFFF      <1>     lea rdx, searchSpec
   518 000023B2 CD21                <1>     int 21h
   519 000023B4 E8B11E0000          <1>     call printCRLF
   520                              <1>     return
    13                              <2> %%_ret:
    14 000023B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   521                              <1> .changeDir:
   522 000023BA 8A05D5DCFFFF        <1>     mov al, byte [arg1FCBret]
   523 000023C0 3CFF                <1>     cmp al, -1 
   524 000023C2 0F846AFAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   525 000023C8 E851220000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   526 000023CD 488D15ABE0FFFF      <1>     lea rdx, searchSpec
   527 000023D4 B43B                <1>     mov ah, 3Bh ;CHDIR
   528 000023D6 CD21                <1>     int 21h
   529 000023D8 0F8281FAFFFF        <1>     jc badDirError
   530                              <1>     return
    13                              <2> %%_ret:
    14 000023DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   531                              <1> 
   532                              <1> mkdir:
   533 000023DF F605ADDCFFFFFF      <1>     test byte [arg1Flg], -1
   534 000023E6 0F844FFAFFFF        <1>     jz badArgError
   535 000023EC F605A3DCFFFFFF      <1>     test byte [arg2Flg], -1
   536 000023F3 0F8542FAFFFF        <1>     jnz badArgError
   537                              <1>     ;We have exactly one argument
   538 000023F9 8A0596DCFFFF        <1>     mov al, byte [arg1FCBret]
   539 000023FF 3CFF                <1>     cmp al, -1 
   540 00002401 0F842BFAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   541 00002407 E812220000          <1>     call buildCommandPath
   542 0000240C 488D156CE0FFFF      <1>     lea rdx, searchSpec
   543 00002413 B800390000          <1>     mov eax, 3900h  ;MKDIR
   544 00002418 CD21                <1>     int 21h
   545                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000241A 73(DE)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   546                              <1> .badMake:   ;Else, bad make
   547 0000241C 488D1566E7FFFF      <1>     lea rdx, badMD
   548 00002423 E9491E0000          <1>     jmp printString
   549                              <1> 
   550                              <1> rmdir:
   551 00002428 F60564DCFFFFFF      <1>     test byte [arg1Flg], -1
   552 0000242F 0F8406FAFFFF        <1>     jz badArgError
   553 00002435 F6055ADCFFFFFF      <1>     test byte [arg2Flg], -1
   554 0000243C 0F85F9F9FFFF        <1>     jnz badArgError
   555                              <1>     ;We have exactly one argument
   556 00002442 8A054DDCFFFF        <1>     mov al, byte [arg1FCBret]
   557 00002448 3CFF                <1>     cmp al, -1 
   558 0000244A 0F84E2F9FFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   559 00002450 E8C9210000          <1>     call buildCommandPath
   560 00002455 488D1523E0FFFF      <1>     lea rdx, searchSpec
   561 0000245C B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   562 00002461 CD21                <1>     int 21h
   563                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002463 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002465 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   564                              <1> .badRemove:   ;Else, bad make
   565 00002466 488D1539E7FFFF      <1>     lea rdx, badRD
   566 0000246D E9FF1D0000          <1>     jmp printString
   567                              <1> 
   568                              <1> copy:
   569 00002472 66C705F1E2FFFFFFFF  <1>     mov word [sourceHdl], -1
   570 0000247B 66C705EAE2FFFFFFFF  <1>     mov word [destHdl], -1
   571 00002484 66C705E3E2FFFFFFFF  <1>     mov word [srcHdlInfo], -1
   572 0000248D C605ECE2FFFF00      <1>     mov byte [bCpFlg], 0    ;State flag!
   573 00002494 48C705D3E2FFFF0000- <1>     mov qword [cpBufPtr], 0 ;Init to null ptr!
   573 0000249D 0000                <1>
   574 0000249F 66C705D2E2FFFF0000  <1>     mov word [wCpBufSz], 0  ;Clear buffer count        
   575 000024A8 C705CAE2FFFF000000- <1>     mov dword [dCpCnt], 0   ;Clear file count
   575 000024B1 00                  <1>
   576 000024B2 C60593E1FFFF00      <1>     mov byte [srcSpec], 0   ;Clear first bytes of the buffers
   577 000024B9 C6050EE2FFFF00      <1>     mov byte [destSpec], 0
   578 000024C0 48C70585E2FFFF0000- <1>     mov qword [srcPtr], 0
   578 000024C9 0000                <1>
   579 000024CB 48C70582E2FFFF0000- <1>     mov qword [destPtr], 0
   579 000024D4 0000                <1>
   580 000024D6 E86C220000          <1>     call setDTA
   581 000024DB B800540000          <1>     mov eax, 5400h  ;Get verify flag
   582 000024E0 CD21                <1>     int 21h
   583 000024E2 880583E2FFFF        <1>     mov byte [verifyFlg], al    ;Save verify flag!
   584                              <1> ;Start with getting a disk buffer, of the size of the internal disk buffers. 
   585                              <1> ;If we cant allocate full diskbuffer, get as much as we can
   586                              <1> ;Diskbuffer as thats the best optimisation for IO buffers
   587 000024E8 B800520000          <1>     mov eax, 5200h
   588 000024ED CD21                <1>     int 21h ;Get in rbx ptr to sysvars
   589 000024EF 0FB74B20            <1>     movzx ecx, word [rbx + 20h] ;Get the internal buffer size in ecx!
   590 000024F3 89CB                <1>     mov ebx, ecx
   591 000024F5 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs, save bytes in ecx
   592 000024F8 B800480000          <1>     mov eax, 4800h
   593 000024FD CD21                <1>     int 21h
   594 000024FF 731E                <1>     jnc .bufOk
   595 00002501 85DB                <1>     test ebx, ebx       ;Cannot allocate? Yikes...
   596 00002503 750C                <1>     jnz .okSize
   597                              <1> .badAlloc:
   598                              <1> ;Not enough memory error!
   599 00002505 488D15EDE4FFFF      <1>     lea rdx, cpNoMem
   600 0000250C E955F9FFFF          <1>     jmp badCmn  ;Print the string and return!
   601                              <1> .okSize:
   602 00002511 89D9                <1>     mov ecx, ebx    
   603 00002513 C1E104              <1>     shl ecx, 4  ;Convert into bytes from paragraphs
   604 00002516 B800480000          <1>     mov eax, 4800h
   605 0000251B CD21                <1>     int 21h
   606 0000251D 72E6                <1>     jc .badAlloc
   607                              <1> .bufOk:
   608 0000251F 4889054CE2FFFF      <1>     mov qword [cpBufPtr], rax   ;Save ptr to xfr area
   609 00002526 66890D4DE2FFFF      <1>     mov word [wCpBufSz], cx     ;Save buffer size
   610                              <1> ;Go to the end of the cmd line and search backwards for the destination first
   611 0000252D 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   612 00002534 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]
   613 0000253C FFC9                <1>     dec ecx ;Turn into offset
   614 0000253E 4801CE              <1>     add rsi, rcx
   615 00002541 31D2                <1>     xor edx, edx    ;Use edx as a counter for number of destination switches
   616 00002543 FD                  <1>     std ;Go in reverse
   617                              <1> .sd:    ;At this point, any switch chars affect destination!
   618 00002544 E8611F0000          <1>     call skipDelimiters ;skipDelimiters in reverse!
   619 00002549 8A05CBDAFFFF        <1>     mov al, byte [switchChar]
   620 0000254F 384601              <1>     cmp byte [rsi + 1], al  ;Did we hit a switch?
   621 00002552 7509                <1>     jne .noSwitch
   622                              <1>     ;Here we hit a switchchar! Process it! rsi points to char before switchchar
   623 00002554 0FB64602            <1>     movzx eax, byte [rsi + 2]   ;Get the char
   624 00002558 50                  <1>     push rax        ;Push the switchchar
   625 00002559 FFC2                <1>     inc edx         ;Inc the counter
   626 0000255B EBE7                <1>     jmp short .sd   ;Now go back to skipping delimiters again!
   627                              <1> .noSwitch:
   628                              <1> ;Ok so we hit a path. Now set the flags based on the stack!
   629 0000255D 85D2                <1>     test edx, edx
   630 0000255F 7412                <1>     jz .noDestSwitch
   631                              <1> .ns1:
   632 00002561 58                  <1>     pop rax ;Pop the switch char
   633 00002562 B304                <1>     mov bl, ascDes
   634 00002564 E809040000          <1>     call .doSwitchRev
   635 00002569 0F8574040000        <1>     jnz .badExit    ;Invalid switch, abort procedure!    
   636 0000256F FFCA                <1>     dec edx
   637 00002571 75EE                <1>     jnz .ns1
   638                              <1> .noDestSwitch:
   639                              <1> ;Now search for the starting delimiter or start of line
   640 00002573 48FFC6              <1>     inc rsi ;Go to the last char in the path
   641                              <1> .noSwitchLp:
   642 00002576 AC                  <1>     lodsb   ;Get char at rsi, go back a char
   643 00002577 E83C1F0000          <1>     call isALdelimiter
   644 0000257C 7412                <1>     je .destFnd
   645 0000257E 8A0596DAFFFF        <1>     mov al, byte [switchChar]
   646 00002584 3846FF              <1>     cmp byte [rsi - 1], al  ;Peek if an embedded switch?
   647 00002587 7404                <1>     je .se  ;Jump if so!
   648 00002589 FFC9                <1>     dec ecx ;One less char left to search
   649 0000258B EBE9                <1>     jmp short .noSwitchLp
   650                              <1> .se:
   651 0000258D 48FFCE              <1>     dec rsi     ;Dec to make the below work!
   652                              <1> .destFnd:
   653 00002590 4881C602000000      <1>     add rsi, 2  ;Go back to the first char past the delimiter
   654 00002597 FC                  <1>     cld 
   655 00002598 4889F5              <1>     mov rbp, rsi    ;Save this ptr in rbp temporarily
   656 0000259B 488D3D2CE1FFFF      <1>     lea rdi, destSpec
   657 000025A2 57                  <1>     push rdi
   658 000025A3 E833200000          <1>     call cpDelimPathToBufz ;Copy this over!   
   659 000025A8 5F                  <1>     pop rdi
   660 000025A9 E8B31F0000          <1>     call findLastPathComponant  ;Get last path componant in rdi
   661 000025AE 48893DA3E1FFFF      <1>     mov qword [destPtr], rdi
   662 000025B5 807F013A            <1>     cmp byte [rdi + 1], ":" ;Is this a colon?
   663 000025B9 7517                <1>     jne .destEnd    ;Dont worry
   664 000025BB 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   665 000025BD E8CD1E0000          <1>     call ucChar             ;Make sure we UC the drive letter
   666 000025C2 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   667 000025C4 4881C702000000      <1>     add rdi, 2              ;Point to this null
   668 000025CB 48893D86E1FFFF      <1>     mov qword [destPtr], rdi    ;Store chars over the null
   669                              <1> .destEnd:
   670                              <1> ;Now start with source processing!! Clear the binSrc bit in bCpFlg
   671 000025D2 8025A7E1FFFFFD      <1>     and byte [bCpFlg], ~binSrc  ;Mightve been accidentally set by dest flags
   672 000025D9 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   673                              <1> .srcLp:
   674 000025E0 E8C51E0000          <1>     call skipDelimiters 
   675 000025E5 8A052FDAFFFF        <1>     mov al, byte [switchChar]
   676 000025EB 3806                <1>     cmp byte [rsi], al
   677 000025ED 7516                <1>     jne .noSrcSw    ;Not switch! Must be filename start!
   678                              <1>     ;rsi points to switch after switchchar
   679 000025EF B301                <1>     mov bl, ascSrc
   680 000025F1 E876030000          <1>     call .doSwitch
   681 000025F6 0F85E7030000        <1>     jnz .badExit
   682 000025FC 4881C602000000      <1>     add rsi, 2
   683 00002603 EBDB                <1>     jmp short .srcLp    ;Now keep searching for start of filename
   684                              <1> .noSrcSw:
   685 00002605 4839F5              <1>     cmp rbp, rsi
   686 00002608 7527                <1>     jne .noSameSrcDest
   687                              <1>     ;Here if the destination we specified earlier is the same as the source
   688                              <1>     ;This means, the actual destination is the current default drive
   689                              <1>     ; on the current directory. Pass to DOS X:FILENAME.EXT<NUL> string.
   690 0000260A E8581E0000          <1>     call getCurrentDrive    ;Get current drive
   691 0000260F 0441                <1>     add al, "A"             ;Turn into a drive letter
   692 00002611 B43A                <1>     mov ah, ":"
   693 00002613 0FB7C0              <1>     movzx eax, ax
   694 00002616 8905B2E0FFFF        <1>     mov dword [destSpec], eax   ;Add a default null terminator
   695 0000261C 488D3DADE0FFFF      <1>     lea rdi, destSpec+2         ;Point to the null after the colon
   696 00002623 48893D2EE1FFFF      <1>     mov qword [destPtr], rdi    ;Copy the filenames here
   697 0000262A 800D4FE1FFFF20      <1>     or byte [bCpFlg], mod1Cpy   ;Copy to curdir in cur drive
   698                              <1> .noSameSrcDest:
   699 00002631 488D3D14E0FFFF      <1>     lea rdi, srcSpec            ;rsi now goes into the source spec!
   700 00002638 57                  <1>     push rdi
   701 00002639 E89D1F0000          <1>     call cpDelimPathToBufz      ;Copy this over! rsi points past delimiter
   702 0000263E 5F                  <1>     pop rdi
   703                              <1>     ;Now go forwards and pick up any more switches.
   704                              <1>     ;Also any "+" signs here!!
   705 0000263F 48FFCE              <1>     dec rsi ;Point back to the first delimiter
   706                              <1> .swSrcSwPost:
   707 00002642 E8631E0000          <1>     call skipDelimiters ;Skips trailing delimiters
   708 00002647 8A05CDD9FFFF        <1>     mov al, byte [switchChar]
   709 0000264D 3806                <1>     cmp byte [rsi], al
   710 0000264F 7516                <1>     jne .swSrcSwPostExit
   711                              <1>     ;rsi points to switch after switchchar
   712 00002651 B301                <1>     mov bl, ascSrc
   713 00002653 E814030000          <1>     call .doSwitch  ;Puts us at the char past the switch itself
   714 00002658 0F8585030000        <1>     jnz .badExit
   715 0000265E 4881C602000000      <1>     add rsi, 2      ;Go past the switch
   716 00002665 EBDB                <1>     jmp short .swSrcSwPost
   717                              <1> .swSrcSwPostExit:
   718 00002667 4889FE              <1>     mov rsi, rdi
   719 0000266A E8D41F0000          <1>     call scanForWildcards   ;Find if we have a WC in this source!
   720 0000266F 7507                <1>     jnz .oneCp
   721 00002671 800D08E1FFFF08      <1>     or byte [bCpFlg], wcSrc ;We are copying many files. Disp names
   722                              <1> .oneCp:
   723 00002678 E8E41E0000          <1>     call findLastPathComponant  ;Get last componant of src in rdi
   724 0000267D 48893DCCE0FFFF      <1>     mov qword [srcPtr], rdi     ;Now save the last componant
   725 00002684 807F013A            <1>     cmp byte [rdi + 1], ":"     ;Is this a colon?
   726 00002688 7517                <1>     jne .srcEnd             ;Dont worry
   727 0000268A 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   728 0000268C E8FE1D0000          <1>     call ucChar             ;Make sure we UC the drive letter
   729 00002691 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   730 00002693 4881C702000000      <1>     add rdi, 2              ;Point after the colon
   731 0000269A 48893DAFE0FFFF      <1>     mov qword [srcPtr], rdi ;Store chars past the colon
   732                              <1> .srcEnd:
   733                              <1> ;Now uppercase both paths
   734 000026A1 488D35A4DFFFFF      <1>     lea rsi, srcSpec
   735 000026A8 E8EE1D0000          <1>     call normalisePath
   736 000026AD 488D3D1AE0FFFF      <1>     lea rdi, destSpec
   737 000026B4 E8E21D0000          <1>     call normalisePath
   738                              <1> ;Now establish if the source is a directory or not!
   739 000026B9 F605C0E0FFFF08      <1>     test byte [bCpFlg], wcSrc
   740 000026C0 7577                <1>     jnz .checkDestDir   ;Skip check if source has wildcards
   741 000026C2 488D1583DFFFFF      <1>     lea rdx, srcSpec
   742 000026C9 4889D6              <1>     mov rsi, rdx
   743 000026CC 66AD                <1>     lodsw   ;Get the first two chars, is it "X:" style
   744 000026CE 80FC3A              <1>     cmp ah, ":"
   745 000026D1 7522                <1>     jne .isSrcDir   ;If not, check explicitly
   746 000026D3 AC                  <1>     lodsb           ;Get char past :
   747 000026D4 84C0                <1>     test al, al     ;Is byte three nul?
   748 000026D6 740D                <1>     jz .srcStorWc   ;If so, we have "X:<NUL>"
   749 000026D8 3A053BD9FFFF        <1>     cmp al, byte [pathSep]  ;If char past : isnt pathsep, check manually
   750 000026DE 7515                <1>     jne .isSrcDir
   751 000026E0 AC                  <1>     lodsb           ;Get char past char past "X:\"
   752 000026E1 84C0                <1>     test al, al     
   753 000026E3 7510                <1>     jnz .isSrcDir   ;Fall thru is "X:\<NUL>"
   754                              <1> .srcStorWc:
   755                              <1> ;rsi points past the char to store the WC at
   756 000026E5 C746FF2A2E2A00      <1>     mov dword [rsi - 1], "*.*"  ;Store with terminating null!
   757 000026EC 800D8DE0FFFF08      <1>     or byte [bCpFlg], wcSrc     ;We're adding the wildcard to the source!
   758 000026F3 EB44                <1>     jmp short .checkDestDir
   759                              <1> .isSrcDir:
   760 000026F5 B910000000          <1>     mov ecx, dirDirectory
   761 000026FA B8004E0000          <1>     mov eax, 4E00h
   762 000026FF CD21                <1>     int 21h
   763 00002701 7236                <1>     jc .checkDestDir    ;Wasn't a dir!
   764                              <1>     ;Was the file we found actually a directory?
   765 00002703 803D10DAFFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   766 0000270A 752D                <1>     jne .checkDestDir   ;Wasn't a dir
   767 0000270C 4889D7              <1>     mov rdi, rdx
   768 0000270F E8711D0000          <1>     call strlen
   769 00002714 FFC9                <1>     dec ecx
   770 00002716 4801CF              <1>     add rdi, rcx    ;Move rdi to the terminating null
   771 00002719 8A05FAD8FFFF        <1>     mov al, byte [pathSep]
   772 0000271F 3847FF              <1>     cmp byte [rdi - 1], al  ;Do we have a trailing pathsep?
   773 00002722 7401                <1>     je .srctpsp
   774 00002724 AA                  <1>     stosb   ;Store the pathsep over the null, inc rdi
   775                              <1> .srctpsp:
   776 00002725 48893D24E0FFFF      <1>     mov qword [srcPtr], rdi ;Update the srcPtr
   777 0000272C B82A2E2A00          <1>     mov eax, "*.*"
   778 00002731 AB                  <1>     stosd   ;Store the WC with terminating nul!
   779 00002732 800D47E0FFFF08      <1>     or byte [bCpFlg], wcSrc ;We're adding the wildcard to the source!
   780                              <1> .checkDestDir:
   781                              <1> ;Now establish if destination is a directory or not!
   782 00002739 F60540E0FFFF20      <1>     test byte [bCpFlg], mod1Cpy ;If we already know its mod1, skip
   783 00002740 0F855E010000        <1>     jnz .mod1
   784 00002746 488D3581DFFFFF      <1>     lea rsi, destSpec
   785 0000274D 66AD                <1>     lodsw   ;Get the first word, i.e. candidate "X:"
   786 0000274F 80FC3A              <1>     cmp ah, ":"
   787 00002752 751A                <1>     jne .isDestDir
   788 00002754 66AD                <1>     lodsw   ;Get second word, i.e. candidate "\<NUL>" or "<NUL>"
   789 00002756 84C0                <1>     test al, al ;Is byte three nul?
   790 00002758 0F8446010000        <1>     jz .mod1    ;If so, it was a X:<NUL>
   791 0000275E 84E4                <1>     test ah, ah ;Is byte four nul?
   792 00002760 750C                <1>     jnz .isDestDir  ;If not, check if destination is a directory
   793 00002762 3A05B1D8FFFF        <1>     cmp al, byte [pathSep]  ;Else, check if byte 3 was a pathsep!
   794 00002768 0F8436010000        <1>     je .mod1    ;If it is, then it was a X:\<NUL>
   795                              <1> .isDestDir:
   796                              <1> ;Only here if we suspect the destination pathspec is a path, not file!
   797 0000276E 488D1559DFFFFF      <1>     lea rdx, destSpec
   798 00002775 B910000000          <1>     mov ecx, dirDirectory
   799 0000277A B8004E0000          <1>     mov eax, 4E00h
   800 0000277F CD21                <1>     int 21h
   801 00002781 7237                <1>     jc .mod2
   802                              <1>     ;Was the file we found actually a directory?
   803 00002783 803D90D9FFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   804 0000278A 752E                <1>     jne .mod2
   805                              <1>     ;Here we just check if we have a terminating slash on the destination path.
   806                              <1>     ;If not, we need to place one there!
   807 0000278C 4889D7              <1>     mov rdi, rdx    ;Move destSpec
   808 0000278F E8F11C0000          <1>     call strlen
   809 00002794 FFC9                <1>     dec ecx         ;Lose the null terminator, zero upper bits
   810 00002796 4801CF              <1>     add rdi, rcx    ;Go to null terminator
   811 00002799 0FB60579D8FFFF      <1>     movzx eax, byte [pathSep]
   812 000027A0 3847FF              <1>     cmp byte [rdi - 1], al  ;Is the char before the null a pathsep?
   813 000027A3 0F84FB000000        <1>     je .mod1        ;If so, skip adding another one!
   814 000027A9 66AB                <1>     stosw           ;Else, store the pathsep and null!
   815 000027AB 48FFCF              <1>     dec rdi         ;Point back to null
   816 000027AE 48893DA3DFFFFF      <1>     mov qword [destPtr], rdi    ;Save this pointer
   817 000027B5 E9EA000000          <1>     jmp .mod1
   818                              <1> .mod2:
   819                              <1> ;Here we are copying files(s) to file(s)! Filenames are copied according 
   820                              <1> ; to rename wildcard semantics. Always run through this as the destination
   821                              <1> ; name may have wildcards in it! But we don't add any.
   822 000027BA 800DBFDFFFFF40      <1>     or byte [bCpFlg], mod2Cpy   ;Set to remind us what we are doing!
   823 000027C1 488D3506DFFFFF      <1>     lea rsi, destSpec
   824 000027C8 E8761E0000          <1>     call scanForWildcards   ;ZF=ZE if WC cound
   825 000027CD 7407                <1>     jz .m2Wc
   826 000027CF 800DAADFFFFF10      <1>     or byte [bCpFlg], oneDest   ;The destination is a single file!
   827                              <1> .m2Wc:
   828                              <1> ;Search for the source file
   829 000027D6 488D156FDEFFFF      <1>     lea rdx, srcSpec
   830 000027DD 31C9                <1>     xor ecx, ecx    ;Normal and RO files pls
   831 000027DF B8004E0000          <1>     mov eax, 4E00h
   832 000027E4 CD21                <1>     int 21h
   833 000027E6 0F82ED010000        <1>     jc .badSrcFile
   834 000027EC 488B3565DFFFFF      <1>     mov rsi, qword [destPtr]
   835 000027F3 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Create the permanent destination pattern
   836 000027F7 B801290000          <1>     mov eax, 2901h
   837 000027FC CD21                <1>     int 21h
   838                              <1> .md2Lp:
   839 000027FE 488D351ED9FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   840 00002805 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Create the source pattern
   841 00002809 B801290000          <1>     mov eax, 2901h
   842 0000280E CD21                <1>     int 21h  
   843                              <1> ;Now depending on source and dest patterns, build a filename in renName
   844 00002810 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
   845 00002814 488D3D45DFFFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
   846 0000281B 57                  <1>     push rdi
   847 0000281C 48A5                <1>     movsq
   848 0000281E 66A5                <1>     movsw
   849 00002820 A4                  <1>     movsb
   850 00002821 5F                  <1>     pop rdi
   851 00002822 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
   852 00002826 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
   853                              <1> .md2NameMake:
   854 0000282B AC                  <1>     lodsb   ;Get the char from the source string
   855 0000282C 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
   856 0000282F 7502                <1>     jne .noStore    ;Dont store the char there
   857 00002831 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
   858                              <1> .noStore:
   859 00002833 48FFC7              <1>     inc rdi ;Goto next char position
   860 00002836 FFC9                <1>     dec ecx
   861 00002838 75F1                <1>     jnz .md2NameMake
   862 0000283A 488D35E2D8FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   863 00002841 488B3D08DFFFFF      <1>     mov rdi, qword [srcPtr]
   864 00002848 E81F1C0000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
   865 0000284D 488D350CDFFFFF      <1>     lea rsi, renName
   866 00002854 488B3DFDDEFFFF      <1>     mov rdi, qword [destPtr]
   867 0000285B E8251D0000          <1>     call FCBToAsciiz
   868 00002860 E8DB000000          <1>     call .prntFilespec  ;Prints the source filename
   869 00002865 E8AE010000          <1>     call copyMain       ;And copy it!
   870 0000286A 731D                <1>     jnc .md2Ok
   871                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   872                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   873 0000286C 3CFD                <1>     cmp al, -3
   874 0000286E 0F8442010000        <1>     je .badBinCdevErr
   875 00002874 3CFE                <1>     cmp al, -2
   876 00002876 0F8443010000        <1>     je .rootDirFull
   877 0000287C 3CFF                <1>     cmp al, -1      ;Source and destination same?
   878 0000287E 0F8444010000        <1>     je .badSameFile 
   879 00002884 E95A010000          <1>     jmp .badExit    ;Else generic error message
   880                              <1> .md2Ok:
   881 00002889 F605F0DEFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   882 00002890 0F8485000000        <1>     jz .copyDone        ;Copy complete!
   883 00002896 B8004F0000          <1>     mov eax, 4F00h      ;Else, find Next File
   884 0000289B CD21                <1>     int 21h
   885 0000289D 727C                <1>     jc .copyDone        ;If no more files, we are done!
   886 0000289F E95AFFFFFF          <1>     jmp .md2Lp    ;Else, now build a new source and destination!
   887                              <1> .mod1:
   888                              <1> ;Here we are copying file(s) into a directory. Filenames are copied verbatum.
   889 000028A4 800DD5DEFFFF20      <1>     or byte [bCpFlg], mod1Cpy   ;Ensure this bit is set!
   890 000028AB 488D159ADDFFFF      <1>     lea rdx, srcSpec
   891 000028B2 31C9                <1>     xor ecx, ecx    ;Normal and read only files pls!!
   892 000028B4 B8004E0000          <1>     mov eax, 4E00h
   893 000028B9 CD21                <1>     int 21h
   894 000028BB 0F8218010000        <1>     jc .badSrcFile  ;File not found error!!
   895                              <1> .mod1Lp:
   896 000028C1 488D355BD8FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   897 000028C8 488B3D81DEFFFF      <1>     mov rdi, qword [srcPtr]
   898 000028CF E8A71B0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   899 000028D4 488B3D7DDEFFFF      <1>     mov rdi, qword [destPtr]
   900 000028DB E89B1B0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   901 000028E0 E85B000000          <1>     call .prntFilespec
   902 000028E5 E82E010000          <1>     call copyMain   ;And copy it!
   903 000028EA 731D                <1>     jnc .mod1Ok
   904                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   905                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   906 000028EC 3CFD                <1>     cmp al, -3
   907 000028EE 0F84C2000000        <1>     je .badBinCdevErr
   908 000028F4 3CFE                <1>     cmp al, -2
   909 000028F6 0F84C3000000        <1>     je .rootDirFull
   910 000028FC 3CFF                <1>     cmp al, -1      ;Source and destination same?
   911 000028FE 0F84C4000000        <1>     je .badSameFile 
   912 00002904 E9DA000000          <1>     jmp .badExit    ;Else generic error message
   913                              <1> .mod1Ok:
   914 00002909 F60570DEFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   915 00002910 7409                <1>     jz .copyDone
   916 00002912 B8004F0000          <1>     mov eax, 4F00h      ;Find Next File
   917 00002917 CD21                <1>     int 21h
   918 00002919 73A6                <1>     jnc .mod1Lp         ;If no more files, we are done! Fall thru!
   919                              <1> 
   920                              <1> .copyDone:
   921 0000291B E8CD000000          <1>     call .copyCleanup   ;Clean up resources!
   922 00002920 B800020000          <1>     mov eax, 0200h      ;Beep a TAB out :)
   923 00002925 B209                <1>     mov dl, TAB
   924 00002927 CD21                <1>     int 21h
   925 00002929 8B054DDEFFFF        <1>     mov eax, dword [dCpCnt] ;Get number of files copied
   926 0000292F E8231D0000          <1>     call printDecimalWord   ;n File(s) copied
   927 00002934 488D15ACE0FFFF      <1>     lea rdx, copyOk
   928 0000293B B409                <1>     mov ah, 09h
   929 0000293D CD21                <1>     int 21h    
   930                              <1>     return
    13                              <2> %%_ret:
    14 0000293F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   931                              <1> 
   932                              <1> .prntFilespec:
   933                              <1> ;Prints the filespec to STDOUT. If the path is 
   934 00002940 F60539DEFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no wildcard, then don't print name
   935                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002947 74(3F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   936 00002949 488D15FCDCFFFF      <1>     lea rdx, srcSpec
   937 00002950 4889D7              <1>     mov rdi, rdx
   938 00002953 E82D1B0000          <1>     call strlen
   939 00002958 FFC9                <1>     dec ecx     ;Drop terminating null
   940 0000295A BB01000000          <1>     mov ebx, 1  ;STDOUT
   941 0000295F B800400000          <1>     mov eax, 4000h  ;Write
   942 00002964 CD21                <1>     int 21h
   943 00002966 E8FF180000          <1>     call printCRLF
   944                              <1>     return
    13                              <2> %%_ret:
    14 0000296B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   945                              <1> .doSwitch:
   946                              <1> ;Since switches can come before or after a name, handle them here!
   947                              <1> ;If invalid switch char, returns ZF=NZ.
   948                              <1> ;Input: bl = ASCII bit to set (either 1 or 2) 
   949                              <1> ;       rsi -> Switchchar
   950 0000296C 56                  <1>     push rsi
   951 0000296D 48FFC6              <1>     inc rsi ;Point to char past switchchar
   952 00002970 AC                  <1>     lodsb   ;Get this char, goto next char
   953 00002971 5E                  <1>     pop rsi
   954                              <1> .doSwitchRev:
   955 00002972 E8181B0000          <1>     call ucChar
   956 00002977 3C41                <1>     cmp al, "A"
   957 00002979 7510                <1>     jne .cB
   958 0000297B 081DFFDDFFFF        <1>     or byte [bCpFlg], bl    ;Set the ASCII bit
   959 00002981 8025F8DDFFFFFD      <1>     and byte [bCpFlg], ~binSrc  ;ASCII flag clears this
   960                              <1> .cExit:
   961 00002988 31DB                <1>     xor ebx, ebx    ;Clear ZF 
   962                              <1>     return
    13                              <2> %%_ret:
    14 0000298A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   963                              <1> .cB:
   964 0000298B 3C42                <1>     cmp al, "B"
   965 0000298D 7511                <1>     jne .cV
   966 0000298F F6D3                <1>     not bl  ;Reverse bits
   967 00002991 201DE9DDFFFF        <1>     and byte [bCpFlg], bl   ;Clear the ASCII bit.
   968 00002997 800DE2DDFFFF02      <1>     or byte [bCpFlg], binSrc    ;This was explicitly set
   969 0000299E EBE8                <1>     jmp short .cExit
   970                              <1> .cV:
   971 000029A0 3C56                <1>     cmp al, "V"
   972                              <1>     retne   ;Exit w/o clearing ZF
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000029A2 75(8A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   973 000029A4 F605C0DDFFFFFF      <1>     test byte [verifyFlg], -1   ;If verify flag set, do nothing
   974 000029AB 75DB                <1>     jnz .cExit                  ;If not zero, flag already set!
   975                              <1>     ;Else, set it. We return it at the end!
   976 000029AD B8012E0000          <1>     mov eax, 2E01h  ;Set Verify Flag
   977 000029B2 CD21                <1>     int 21h
   978 000029B4 EBD2                <1>     jmp short .cExit
   979                              <1> 
   980                              <1> ;COPY Bad Exits!!
   981                              <1> .badBinCdevErr:
   982 000029B6 488D15DAE2FFFF      <1>     lea rdx, binDevErr
   983 000029BD EB10                <1>     jmp short .badExitCmn
   984                              <1> .rootDirFull:
   985 000029BF 488D15BDDFFFFF      <1>     lea rdx, fulRootDir
   986 000029C6 EB07                <1>     jmp short .badExitCmn
   987                              <1> .badSameFile:
   988 000029C8 488D15CADFFFFF      <1>     lea rdx, noSelfCopy
   989                              <1> .badExitCmn:
   990 000029CF E892F4FFFF          <1>     call badCmn     ;Print error message
   991 000029D4 E942FFFFFF          <1>     jmp .copyDone   ;Clean resources
   992                              <1> .badSrcFile:
   993 000029D9 E878F4FFFF          <1>     call badFnf  ;File not found!!
   994 000029DE E938FFFFFF          <1>     jmp .copyDone
   995                              <1> .badExit:
   996 000029E3 E841F4FFFF          <1>     call badParamError
   997 000029E8 E92EFFFFFF          <1>     jmp .copyDone
   998                              <1> 
   999                              <1> .copyCleanup:
  1000                              <1> ;Clean all resources!! Reset verify and free copy buffer. 
  1001                              <1> ;Handles are never open in this process!
  1002 000029ED B8002E0000          <1>     mov eax, 2E00h
  1003 000029F2 8A0573DDFFFF        <1>     mov al, byte [verifyFlg]
  1004 000029F8 CD21                <1>     int 21h
  1005 000029FA 4150                <1>     push r8
  1006 000029FC 4C8B056FDDFFFF      <1>     mov r8, qword [cpBufPtr]
  1007 00002A03 4D85C0              <1>     test r8, r8 ;Check zero, clear CF
  1008 00002A06 7407                <1>     jz .skipFree
  1009 00002A08 B800490000          <1>     mov eax, 4900h
  1010 00002A0D CD21                <1>     int 21h
  1011                              <1> .skipFree:
  1012 00002A0F 4158                <1>     pop r8
  1013 00002A11 0F82151D0000        <1>     jc freezePC ;If free fails, man....
  1014                              <1>     return
    13                              <2> %%_ret:
    14 00002A17 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1015                              <1> 
  1016                              <1> copyMain:
  1017                              <1> ;This is the main copying procedure! 
  1018                              <1> ;Start by checking the two files are not the same. If so, complain!
  1019                              <1> ;If returns CF=CY, error code in al. 
  1020                              <1> ;   If al = -1, same filename error!
  1021                              <1> ;   If al = -2, Root Dir full (couldn't create file)
  1022                              <1> ;   If al = -3, attempted binary read from a device
  1023                              <1> ;If returns CF=NC, file copied successfully.
  1024                              <1> ;Check the two files are not the same using truename in searchspec
  1025 00002A18 488D352DDCFFFF      <1>     lea rsi, srcSpec
  1026 00002A1F 488D3D59DAFFFF      <1>     lea rdi, searchSpec
  1027 00002A26 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1028 00002A2B CD21                <1>     int 21h 
  1029 00002A2D 57                  <1>     push rdi    ;Save this searchSpec
  1030 00002A2E 488D3599DCFFFF      <1>     lea rsi, destSpec
  1031 00002A35 488D3DC5DAFFFF      <1>     lea rdi, searchSpec + cmdBufferL ;Use the latter half to store this bit
  1032 00002A3C B800600000          <1>     mov eax, 6000h
  1033 00002A41 CD21                <1>     int 21h
  1034 00002A43 5E                  <1>     pop rsi     ;Get this ptr back
  1035 00002A44 B81E120000          <1>     mov eax, 121Eh  ;Cmpr ASCII strings
  1036 00002A49 CD2F                <1>     int 2Fh
  1037 00002A4B 750F                <1>     jnz .notSameFile
  1038 00002A4D B0FF                <1>     mov al, -1  ;Same filename error!
  1039                              <1> .badExit:
  1040 00002A4F 50                  <1>     push rax
  1041 00002A50 E8B0000000          <1>     call .exitCleanup
  1042 00002A55 58                  <1>     pop rax
  1043 00002A56 F9                  <1>     stc
  1044                              <1>     return
    13                              <2> %%_ret:
    14 00002A57 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1045                              <1> .badExitNoSpace:
  1046 00002A58 B0FE                <1>     mov al, -2  ;Access denied from Create happens if Root Dir full!
  1047 00002A5A EBF3                <1>     jmp short .badExit
  1048                              <1> .notSameFile:
  1049                              <1> ;Open source with read permission
  1050                              <1> ;Open destination with write permission
  1051 00002A5C 488D15E9DBFFFF      <1>     lea rdx, srcSpec
  1052 00002A63 B8003D0000          <1>     mov eax, 3D00h  ;Read open
  1053 00002A68 CD21                <1>     int 21h
  1054 00002A6A 72E3                <1>     jc .badExit
  1055 00002A6C 668905F9DCFFFF      <1>     mov word [sourceHdl], ax
  1056 00002A73 0FB7D8              <1>     movzx ebx, ax   ;For bx
  1057                              <1> 
  1058 00002A76 B800440000          <1>     mov eax, 4400h  ;Get device info for file in bx in dx
  1059 00002A7B CD21                <1>     int 21h
  1060 00002A7D 668915ECDCFFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
  1061 00002A84 F6C280              <1>     test dl, 80h    ;Is this a chardev?
  1062 00002A87 7412                <1>     jz .prepCopy
  1063                              <1> ;Check the binary flag was not set on this source filespec
  1064 00002A89 B0FD                <1>     mov al, -3  ;Prep the error code
  1065 00002A8B F605EEDCFFFF02      <1>     test byte [bCpFlg], binSrc
  1066 00002A92 75BB                <1>     jnz .badExit    ;Return with the error code in al
  1067 00002A94 800DE5DCFFFF01      <1>     or byte [bCpFlg], ascSrc    ;Set the ascii read bit for later!
  1068                              <1> .prepCopy:
  1069 00002A9B 31F6                <1>     xor esi, esi                ;Flag if ASCII copy done after write!
  1070 00002A9D 488B15CEDCFFFF      <1>     mov rdx, qword [cpBufPtr]   ;Get the buffer pointer
  1071                              <1> .copyLoop:
  1072                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1073                              <1> ; CONSIDER MODIFYING THIS ROUTINE SO THAT ASCII READS ONLY WRITE AFTER       !
  1074                              <1> ; FINDING A ^Z, OR FILLING THE BUFFER. CURRENTLY, WRITES HAPPEN ON EACH LINE.!
  1075                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1076 00002AA4 0FB70DCFDCFFFF      <1>     movzx ecx, word [wCpBufSz]
  1077 00002AAB 0FB71DBADCFFFF      <1>     movzx ebx, word [sourceHdl]
  1078 00002AB2 B8003F0000          <1>     mov eax, 3F00h ;Read
  1079 00002AB7 CD21                <1>     int 21h
  1080 00002AB9 7294                <1>     jc .badExit
  1081 00002ABB 89C1                <1>     mov ecx, eax    ;Save the binary # of bytes read
  1082 00002ABD F605BCDCFFFF01      <1>     test byte [bCpFlg], ascSrc  ;Are we copying in ascii mode
  1083 00002AC4 7413                <1>     jz .notAscii
  1084                              <1> ;Now scan the buffer for a EOF. If we find, we stop the copy at that char
  1085 00002AC6 50                  <1>     push rax        ;Save the original char count
  1086 00002AC7 4889D7              <1>     mov rdi, rdx    ;rdx keeps the buffer ptr
  1087 00002ACA B01A                <1>     mov al, EOF
  1088 00002ACC F2AE                <1>     repne scasb     ;Loop thru now!
  1089 00002ACE 89C8                <1>     mov eax, ecx    ;Move the offset into the buffer in eax
  1090 00002AD0 59                  <1>     pop rcx         ;Get the original read count into ecx
  1091 00002AD1 7506                <1>     jne .notAscii   ;If EOF not found, ecx has the full buffer size to write
  1092                              <1> ;Here if EOF found.
  1093 00002AD3 FFC0                <1>     inc eax         ;Drop one for the EOF char itself
  1094 00002AD5 29C1                <1>     sub ecx, eax    ;Get difference for # of chars to write
  1095 00002AD7 FFCE                <1>     dec esi         ;Set to -1 to indicate we are done with ASCII copy!
  1096                              <1> .notAscii:
  1097 00002AD9 85C9                <1>     test ecx, ecx   ;If no bytes were read, exit!
  1098 00002ADB 7428                <1>     jz .exitCleanup
  1099 00002ADD 51                  <1>     push rcx    ;Save the number of bytes to write
  1100 00002ADE 52                  <1>     push rdx    ;Save the buffer ptr
  1101 00002ADF E88D000000          <1>     call .getWriteHandle    ;Gets hdl in bx. Inc file ctr on create/open
  1102 00002AE4 5A                  <1>     pop rdx
  1103 00002AE5 59                  <1>     pop rcx
  1104 00002AE6 0F826CFFFFFF        <1>     jc .badExitNoSpace
  1105 00002AEC B800400000          <1>     mov eax, 4000h ;Write to handle in bx, to buffer in rdx
  1106 00002AF1 CD21                <1>     int 21h
  1107 00002AF3 0F8256FFFFFF        <1>     jc .badExit
  1108 00002AF9 39C1                <1>     cmp ecx, eax            ;ecx=bytes to write, eax=bytes written
  1109 00002AFB 0F8557FFFFFF        <1>     jne .badExitNoSpace     ;Disk must be full!!
  1110 00002B01 85F6                <1>     test esi, esi           ;Always clear in Binary mode
  1111 00002B03 749F                <1>     jz .copyLoop            ;Set possible in ASCII mode
  1112                              <1> .exitCleanup:
  1113                              <1> ;Add a terminating EOF if we have been asked to. Else, skip!
  1114 00002B05 F60574DCFFFF04      <1>     test byte [bCpFlg], ascDes
  1115 00002B0C 7425                <1>     jz .ecNoEOF
  1116 00002B0E 0FBF1D59DCFFFF      <1>     movsx ebx, word [destHdl]
  1117 00002B15 81FBFFFFFFFF        <1>     cmp ebx, -1 ;If this hdl is closed, skip this!
  1118 00002B1B 7416                <1>     je .ecNoEOF
  1119 00002B1D 488B154EDCFFFF      <1>     mov rdx, qword [cpBufPtr]
  1120 00002B24 C6021A              <1>     mov byte [rdx], EOF
  1121 00002B27 B901000000          <1>     mov ecx, 1
  1122 00002B2C B800400000          <1>     mov eax, 4000h  ;Write and ignore any errors that come from this!
  1123 00002B31 CD21                <1>     int 21h
  1124                              <1> .ecNoEOF:
  1125                              <1> ;Now close copy handles!
  1126 00002B33 668B1D32DCFFFF      <1>     mov bx, word [sourceHdl]
  1127 00002B3A 6681FBFFFF          <1>     cmp bx, -1
  1128 00002B3F 7410                <1>     je .beSkipSource
  1129 00002B41 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
  1130 00002B46 CD21                <1>     int 21h
  1131 00002B48 66C7051BDCFFFFFFFF  <1>     mov word [sourceHdl], -1    ;Reset the var
  1132                              <1> .beSkipSource:
  1133 00002B51 668B1D16DCFFFF      <1>     mov bx, word [destHdl]
  1134 00002B58 6681FBFFFF          <1>     cmp bx, -1
  1135                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002B5D 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002B5F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1136 00002B60 B8003E0000          <1>     mov eax, 3E00h  ;Close this one too!
  1137 00002B65 CD21                <1>     int 21h
  1138 00002B67 66C705FEDBFFFFFFFF  <1>     mov word [destHdl], -1  ;Reset the var
  1139                              <1>     return
    13                              <2> %%_ret:
    14 00002B70 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1140                              <1> 
  1141                              <1> .getWriteHandle:
  1142                              <1> ;Returns in bx the handle to the destination file. If the file has not 
  1143                              <1> ; yet been opened, creates/opens the destination file as appropriate.
  1144                              <1> ;Input: Nothing
  1145                              <1> ;Output: CF=NC: bx = Handle to the file
  1146                              <1> ;        CF=CY: File failed to open/create. 
  1147 00002B71 0FB71DF6DBFFFF      <1>     movzx ebx, word [destHdl]
  1148 00002B78 6681FBFFFF          <1>     cmp bx, -1
  1149 00002B7D 7402                <1>     je .gwHProceed
  1150 00002B7F F8                  <1>     clc     ;Clear the CF
  1151                              <1>     return
    13                              <2> %%_ret:
    14 00002B80 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1152                              <1> .gwHProceed:
  1153                              <1> ;Here if the destination has not been opened yet!
  1154 00002B81 488D1546DBFFFF      <1>     lea rdx, destSpec   ;Prepare rdx to the destination
  1155                              <1> ;Now we create/reopen the file here!
  1156 00002B88 F605F1DBFFFF10      <1>     test byte [bCpFlg], oneDest ;If single destination, concatenate
  1157 00002B8F 743E                <1>     jz .createFile
  1158                              <1> ;Now we first try to open this file. If this is file 0, we create.
  1159                              <1> ;If this is more than file 0, we open
  1160 00002B91 813DE1DBFFFF000000- <1>     cmp dword [dCpCnt], 0
  1160 00002B9A 00                  <1>
  1161 00002B9B 7432                <1>     je .createFile
  1162                              <1>     ;Now we open the file instead and append to the end
  1163 00002B9D B8023D0000          <1>     mov eax, 3D02h  ;Open the file in exclusive read/write mode
  1164 00002BA2 CD21                <1>     int 21h
  1165                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002BA4 72(80)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1166 00002BA6 FF05D0DBFFFF        <1>     inc dword [dCpCnt]  ;We've opened the file for writing!
  1167 00002BAC 668905BBDBFFFF      <1>     mov word [destHdl], ax
  1168 00002BB3 0FB7D8              <1>     movzx ebx, ax
  1169 00002BB6 31C9                <1>     xor ecx, ecx
  1170 00002BB8 31D2                <1>     xor edx, edx
  1171 00002BBA F605BFDBFFFF04      <1>     test byte [bCpFlg], ascDes  ;Did we write a terminating ^Z before?
  1172 00002BC1 7404                <1>     jz .gwHNoAscii
  1173 00002BC3 FFCA                <1>     dec edx                     ;Overwrite the ^Z
  1174 00002BC5 FFC9                <1>     dec ecx                     ;PASS A SIGNED -1 !!!!
  1175                              <1> .gwHNoAscii:
  1176 00002BC7 B802420000          <1>     mov eax, 4202h  ;LSEEK from the end
  1177 00002BCC CD21                <1>     int 21h
  1178                              <1>     return
    13                              <2> %%_ret:
    14 00002BCE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1179                              <1> .createFile:
  1180 00002BCF B8003C0000          <1>     mov eax, 3C00h  ;Create the file
  1181 00002BD4 31C9                <1>     xor ecx, ecx    ;No file attributes
  1182 00002BD6 CD21                <1>     int 21h
  1183                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002BD8 72(CE)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1184 00002BDA FF059CDBFFFF        <1>     inc dword [dCpCnt]  ;File created for writing!
  1185 00002BE0 66890587DBFFFF      <1>     mov word [destHdl], ax
  1186 00002BE7 0FB7D8              <1>     movzx ebx, ax
  1187                              <1>     return
    13                              <2> %%_ret:
    14 00002BEA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1188                              <1> 
  1189                              <1> erase:
  1190 00002BEB F605A1D4FFFFFF      <1>     test byte [arg1Flg], -1
  1191 00002BF2 0F8443F2FFFF        <1>     jz badArgError
  1192 00002BF8 E84A1B0000          <1>     call setDTA     ;Start by resetting the DTA
  1193 00002BFD E81C1A0000          <1>     call buildCommandPath   ;Get the relative path to the file
  1194                              <1> .dirLp:
  1195 00002C02 488D3D76D8FFFF      <1>     lea rdi, searchSpec
  1196 00002C09 E853190000          <1>     call findLastPathComponant
  1197 00002C0E 4889FE              <1>     mov rsi, rdi    ;Save this as the source
  1198 00002C11 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1199 00002C15 B03F                <1>     mov al, "?"
  1200                              <1>     ;Store question marks in the name field
  1201 00002C17 57                  <1>     push rdi
  1202 00002C18 48FFC7              <1>     inc rdi ;Goto the first char
  1203 00002C1B B90B000000          <1>     mov ecx, 11
  1204 00002C20 F3AA                <1>     rep stosb
  1205 00002C22 5F                  <1>     pop rdi
  1206 00002C23 4889F2              <1>     mov rdx, rsi    ;Save the ptr
  1207 00002C26 B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
  1208 00002C2B CD21                <1>     int 21h
  1209 00002C2D 3C01                <1>     cmp al, 1
  1210 00002C2F 0F85A1000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
  1211                              <1>     ;Else, we now copy back the search pattern over the last componant!
  1212                              <1>     ;No dirs to handle in here
  1213 00002C35 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
  1214 00002C39 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
  1215 00002C3C E844190000          <1>     call FCBToAsciiz    ;Null terminates for free
  1216                              <1>     ;Count the number of ?'s, if 11, we print the message
  1217 00002C41 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
  1218 00002C45 31C9                <1>     xor ecx, ecx
  1219                              <1> .wcScan:
  1220 00002C47 AC                  <1>     lodsb
  1221 00002C48 3C3F                <1>     cmp al, "?"
  1222 00002C4A 7534                <1>     jne .endCount
  1223 00002C4C FFC1                <1>     inc ecx
  1224 00002C4E 81F90B000000        <1>     cmp ecx, 11
  1225 00002C54 75F1                <1>     jne .wcScan
  1226                              <1> .ynmsg:
  1227 00002C56 488D15CCDEFFFF      <1>     lea rdx, ynMes
  1228 00002C5D E80F160000          <1>     call printString
  1229 00002C62 B401                <1>     mov ah, 01h ;STDIN without Console Echo
  1230 00002C64 CD21                <1>     int 21h ;Get char in al
  1231 00002C66 E824180000          <1>     call ucChar ;Uppercase the char
  1232 00002C6B 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
  1233 00002C6D 740C                <1>     je .endCount1
  1234 00002C6F 3C4E                <1>     cmp al, "N"
  1235                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002C71 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002C73 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1236 00002C74 E8F1150000          <1>     call printCRLF      ;Else, tell me what you want!!!
  1237 00002C79 EBDB                <1>     jmp short .ynmsg    
  1238                              <1> .endCount1:
  1239 00002C7B E8EA150000          <1>     call printCRLF
  1240                              <1> .endCount:
  1241                              <1>     ;Now we copy our search template pathstring to delPath
  1242 00002C80 488D3DC5D9FFFF      <1>     lea rdi, delPath
  1243 00002C87 488D35F1D7FFFF      <1>     lea rsi, searchSpec ;Source the chars from here
  1244 00002C8E E8E8170000          <1>     call strcpy2         ;Copy the string over to delPath
  1245                              <1> .findFile:
  1246                              <1>     ;Now we find first/find next our way through the files
  1247 00002C93 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
  1248 00002C96 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
  1249 00002C98 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1250 00002C9D CD21                <1>     int 21h
  1251 00002C9F 0F82B1F1FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1252                              <1>     ;Now the file was found, we copy the name over, delete and keep going
  1253 00002CA5 E8B7180000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
  1254 00002CAA 488D3572D4FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1255                              <1> .delNextFile:
  1256                              <1> ;rsi and rdi dont move here
  1257 00002CB1 E8C5170000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
  1258 00002CB6 488D158FD9FFFF      <1>     lea rdx, delPath
  1259 00002CBD B800410000          <1>     mov eax, 4100h  ;Delete File 
  1260 00002CC2 CD21                <1>     int 21h         ;If this fails to delete it, fail silently
  1261 00002CC4 488D15B4D7FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
  1262 00002CCB B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
  1263 00002CD0 CD21                <1>     int 21h
  1264 00002CD2 73DD                <1>     jnc .delNextFile    
  1265 00002CD4 F8                  <1>     clc ;Clear carry to indicate success
  1266                              <1>     return
    13                              <2> %%_ret:
    14 00002CD5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1267                              <1> .noWildcard:
  1268                              <1>     ;Here we just check that the file was not a directory. If it was, we add
  1269                              <1>     ; a \*.*<NUL> over the null terminator
  1270 00002CD6 488D15A2D7FFFF      <1>     lea rdx, searchSpec
  1271 00002CDD B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
  1272 00002CE2 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1273 00002CE7 CD21                <1>     int 21h
  1274 00002CE9 0F8267F1FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1275 00002CEF F60524D4FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
  1276 00002CF6 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
  1277                              <1>     ;Else, we are dealing with a dir
  1278 00002CF8 4889D7              <1>     mov rdi, rdx
  1279 00002CFB 31C9                <1>     xor ecx, ecx
  1280 00002CFD FFC9                <1>     dec ecx
  1281 00002CFF F2AE                <1>     repne scasb ;Go to the end of the line!
  1282 00002D01 48FFCF              <1>     dec rdi
  1283 00002D04 0FB6050ED3FFFF      <1>     movzx eax, byte [pathSep]
  1284 00002D0B AA                  <1>     stosb
  1285 00002D0C B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
  1286 00002D11 AB                  <1>     stosd
  1287 00002D12 E9EBFEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
  1288                              <1> .delMain:   ;Call with rdx -> buffer!
  1289 00002D17 B800410000          <1>     mov eax, 4100h  ;Delete File 
  1290 00002D1C CD21                <1>     int 21h
  1291                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D1E 73(D5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1292 00002D20 3C05                <1>     cmp al, errAccDen
  1293 00002D22 0F84F8F0FFFF        <1>     je badAccError ;If the file is RO, fail!
  1294 00002D28 E917F1FFFF          <1>     jmp badFileError
  1295                              <1>     return
    13                              <2> %%_ret:
    14 00002D2D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1296                              <1> 
  1297                              <1> date:
  1298 00002D2E 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1299 00002D35 E870170000          <1>     call skipDelimiters
  1300 00002D3A 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1301 00002D3D 7562                <1>     jne .goDate  ;Else rsi is pointing to something possibly a date. Try it!
  1302                              <1>     ;Else, we do interactive mode!
  1303 00002D3F 488D1566DDFFFF      <1>     lea rdx, curDate
  1304 00002D46 B409                <1>     mov ah, 09h
  1305 00002D48 CD21                <1>     int 21h
  1306 00002D4A E851160000          <1>     call printFmtDate
  1307                              <1> .noCur:
  1308 00002D4F 488D1567DDFFFF      <1>     lea rdx, newDate
  1309 00002D56 B409                <1>     mov ah, 09h
  1310 00002D58 CD21                <1>     int 21h
  1311 00002D5A 488D157BDDFFFF      <1>     lea rdx, ukDate
  1312 00002D61 488D0567DDFFFF      <1>     lea rax, usDate
  1313 00002D68 488D1D7ADDFFFF      <1>     lea rbx, jpDate
  1314 00002D6F 803DA5D2FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1315 00002D76 480F47D3            <1>     cmova rdx, rbx
  1316 00002D7A 480F42D0            <1>     cmovb rdx, rax
  1317 00002D7E B409                <1>     mov ah, 09h
  1318 00002D80 CD21                <1>     int 21h
  1319                              <1> 
  1320 00002D82 488D1549D4FFFF      <1>     lea rdx, cpyBuffer
  1321 00002D89 C60280              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
  1322 00002D8C B40A                <1>     mov ah, 0Ah
  1323 00002D8E CD21                <1>     int 21h
  1324 00002D90 52                  <1>     push rdx
  1325 00002D91 E8D4140000          <1>     call printCRLF
  1326 00002D96 5A                  <1>     pop rdx
  1327 00002D97 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1328                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D9B 74(2D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1329                              <1>     ;No spaces anywhere, separator chars allowed are / . - only
  1330 00002D9D 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1331                              <1> .goDate:
  1332 00002DA1 31C0                <1>     xor eax, eax    
  1333 00002DA3 803D71D2FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1334 00002DAA 727B                <1>     jb .us
  1335 00002DAC 0F87B7000000        <1>     ja .jpn
  1336                              <1>     ;Here for UK style dates
  1337 00002DB2 E838190000          <1>     call getByte
  1338 00002DB7 725D                <1>     jc .badDate
  1339 00002DB9 88058BD8FFFF        <1>     mov byte [td3], al  ;Store the day
  1340 00002DBF E80C010000          <1>     call .validSep
  1341 00002DC4 7550                <1>     jne .badDate
  1342 00002DC6 E824190000          <1>     call getByte
  1343 00002DCB 7249                <1>     jc .badDate
  1344 00002DCD 880578D8FFFF        <1>     mov byte [td4], al  ;Store month
  1345 00002DD3 E8F8000000          <1>     call .validSep
  1346 00002DD8 753C                <1>     jne .badDate
  1347 00002DDA E81C190000          <1>     call getNum
  1348 00002DDF E8CF000000          <1>     call .doYear    ;Adjusts the year if necessary
  1349 00002DE4 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1350 00002DE9 732B                <1>     jae .badDate
  1351 00002DEB 66890556D8FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1352                              <1> .writeDate:
  1353 00002DF2 E8B3160000          <1>     call skipDelimiters
  1354 00002DF7 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1355 00002DFA 751A                <1>     jne .badDate
  1356 00002DFC 0FB70D45D8FFFF      <1>     movzx ecx, word [td1]   ;Get the year
  1357 00002E03 668B1540D8FFFF      <1>     mov dx, word [td3]      ;Read time and date together!
  1358 00002E0A B8002B0000          <1>     mov eax, 2B00h
  1359 00002E0F CD21                <1>     int 21h
  1360 00002E11 84C0                <1>     test al, al
  1361                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002E13 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002E15 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1362                              <1> .badDate:
  1363 00002E16 488D1580DCFFFF      <1>     lea rdx, badDate
  1364 00002E1D E84F140000          <1>     call printString
  1365 00002E22 E928FFFFFF          <1>     jmp date.noCur
  1366                              <1> .us:
  1367 00002E27 E8C3180000          <1>     call getByte
  1368 00002E2C 72E8                <1>     jc .badDate
  1369 00002E2E 880517D8FFFF        <1>     mov byte [td4], al  ;Store the month
  1370 00002E34 E897000000          <1>     call .validSep
  1371 00002E39 75DB                <1>     jne .badDate
  1372 00002E3B E8AF180000          <1>     call getByte
  1373 00002E40 72D4                <1>     jc .badDate
  1374 00002E42 880502D8FFFF        <1>     mov byte [td3], al  ;Store day
  1375 00002E48 E883000000          <1>     call .validSep
  1376 00002E4D 75C7                <1>     jne .badDate
  1377 00002E4F E8A7180000          <1>     call getNum
  1378 00002E54 E85A000000          <1>     call .doYear    ;Adjusts the year if necessary
  1379 00002E59 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1380 00002E5E 73B6                <1>     jae .badDate
  1381 00002E60 668905E1D7FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1382                              <1> .writeHop:
  1383 00002E67 EB89                <1>     jmp short .writeDate
  1384                              <1> .jpn:
  1385 00002E69 E88D180000          <1>     call getNum
  1386 00002E6E E840000000          <1>     call .doYear    ;Adjusts the year if necessary
  1387 00002E73 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1388 00002E78 739C                <1>     jae .badDate
  1389 00002E7A 668905C7D7FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1390 00002E81 E84A000000          <1>     call .validSep
  1391 00002E86 758E                <1>     jne .badDate
  1392 00002E88 E862180000          <1>     call getByte
  1393 00002E8D 7287                <1>     jc .badDate
  1394 00002E8F 8805B5D7FFFF        <1>     mov byte [td3], al  ;Store the day
  1395 00002E95 E836000000          <1>     call .validSep
  1396 00002E9A 0F8576FFFFFF        <1>     jne .badDate
  1397 00002EA0 E84A180000          <1>     call getByte
  1398 00002EA5 0F826BFFFFFF        <1>     jc .badDate
  1399 00002EAB 88059AD7FFFF        <1>     mov byte [td4], al  ;Store month
  1400 00002EB1 EBB4                <1>     jmp short .writeHop
  1401                              <1> .doYear:
  1402 00002EB3 3D77000000          <1>     cmp eax, 119    ;If this is larger than 119, return assuming valid
  1403                              <1>     reta
    73                              <2> cret a
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002EB8 7601                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002EBA C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1404                              <1> ;If the user specifies 80-99 it means 1980-1999
  1405                              <1> ;If the user specifies 00-79 it means 2000-2079
  1406 00002EBB BBD0070000          <1>     mov ebx, 2000
  1407 00002EC0 B96C070000          <1>     mov ecx, 1900
  1408 00002EC5 3D50000000          <1>     cmp eax, 80     
  1409 00002ECA 0F42CB              <1>     cmovb ecx, ebx
  1410 00002ECD 01C8                <1>     add eax, ecx
  1411                              <1>     return
    13                              <2> %%_ret:
    14 00002ECF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1412                              <1> .validSep:
  1413 00002ED0 AC                  <1>     lodsb           ;Get the char and return
  1414 00002ED1 3C2E                <1>     cmp al, "."
  1415                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002ED3 74(CF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1416 00002ED5 3C2F                <1>     cmp al, "/"
  1417                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002ED7 74(CF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1418 00002ED9 3C2D                <1>     cmp al, "-"
  1419                              <1>     return
    13                              <2> %%_ret:
    14 00002EDB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1420                              <1> 
  1421                              <1> time:
  1422 00002EDC 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1423 00002EE3 E8C2150000          <1>     call skipDelimiters
  1424 00002EE8 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1425 00002EEB 7540                <1>     jne .goTime  ;Else rsi is pointing to something possibly a time. Try it!
  1426 00002EED 488D1511DCFFFF      <1>     lea rdx, curTime
  1427 00002EF4 B409                <1>     mov ah, 09h
  1428 00002EF6 CD21                <1>     int 21h
  1429 00002EF8 E83A140000          <1>     call printFmtTime
  1430                              <1> .noCur:
  1431 00002EFD 488D1512DCFFFF      <1>     lea rdx, newTime
  1432 00002F04 B409                <1>     mov ah, 09h
  1433 00002F06 CD21                <1>     int 21h
  1434                              <1> 
  1435 00002F08 488D1541D2FFFF      <1>     lea rdx, inBuffer
  1436 00002F0F C60280              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
  1437 00002F12 B40A                <1>     mov ah, 0Ah
  1438 00002F14 CD21                <1>     int 21h
  1439 00002F16 52                  <1>     push rdx
  1440 00002F17 488D1572D9FFFF      <1>     lea rdx, crlf
  1441 00002F1E B409                <1>     mov ah, 09h
  1442 00002F20 CD21                <1>     int 21h
  1443 00002F22 5A                  <1>     pop rdx
  1444 00002F23 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1445                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002F27 74(DB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1446 00002F29 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1447                              <1> .goTime:
  1448 00002F2D C70511D7FFFF000000- <1>     mov dword [td1], 0          ;Set all fields to 0
  1448 00002F36 00                  <1>
  1449 00002F37 31C0                <1>     xor eax, eax   
  1450 00002F39 E8B1170000          <1>     call getByte
  1451 00002F3E 0F8294000000        <1>     jc .badTime         ;Get the number in eax
  1452 00002F44 8805FFD6FFFF        <1>     mov byte [td2], al  ;Save hours
  1453 00002F4A E89A000000          <1>     call .validsep
  1454 00002F4F 0F8583000000        <1>     jne .badTime
  1455 00002F55 E895170000          <1>     call getByte
  1456 00002F5A 727C                <1>     jc .badTime
  1457 00002F5C 8805E6D6FFFF        <1>     mov byte [td1], al  ;Save minutes
  1458 00002F62 E882000000          <1>     call .validsep
  1459 00002F67 740F                <1>     je .goSec
  1460 00002F69 48FFCE              <1>     dec rsi ;Go back a char
  1461 00002F6C E839150000          <1>     call skipDelimiters ;Skip any delimiters
  1462 00002F71 803E0D              <1>     cmp byte [rsi], CR
  1463 00002F74 743E                <1>     je .setTime
  1464 00002F76 EB60                <1>     jmp short .badTime
  1465                              <1> .goSec:
  1466 00002F78 E878000000          <1>     call .checkNum
  1467 00002F7D 7259                <1>     jc .badTime
  1468 00002F7F E86B170000          <1>     call getByte
  1469 00002F84 7252                <1>     jc .badTime
  1470 00002F86 8805BFD6FFFF        <1>     mov byte [td4], al  ;Save seconds
  1471 00002F8C AC                  <1>     lodsb       ;Move rsi forwards
  1472 00002F8D 3C2E                <1>     cmp al, "." ;Now we dont allow for colon now, only dot!
  1473 00002F8F 740F                <1>     je .goMsec
  1474 00002F91 48FFCE              <1>     dec rsi ;Go back a char
  1475 00002F94 E811150000          <1>     call skipDelimiters ;Skip any delimiters
  1476 00002F99 803E0D              <1>     cmp byte [rsi], CR
  1477 00002F9C 7416                <1>     je .setTime
  1478 00002F9E EB38                <1>     jmp short .badTime
  1479                              <1> .goMsec:
  1480 00002FA0 E850000000          <1>     call .checkNum
  1481 00002FA5 7231                <1>     jc .badTime
  1482 00002FA7 E843170000          <1>     call getByte
  1483 00002FAC 722A                <1>     jc .badTime
  1484 00002FAE 880596D6FFFF        <1>     mov byte [td3], al  ;Save miliseconds
  1485                              <1> .setTime:
  1486 00002FB4 E8F1140000          <1>     call skipDelimiters
  1487 00002FB9 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1488 00002FBC 751A                <1>     jne .badTime
  1489 00002FBE 0FB70D83D6FFFF      <1>     movzx ecx, word [td1]   ;Get hour/minutes
  1490 00002FC5 0FB7157ED6FFFF      <1>     movzx edx, word [td3]   ;Get seconds/miliseconds
  1491 00002FCC B8002D0000          <1>     mov eax, 2D00h      ;Set time
  1492 00002FD1 CD21                <1>     int 21h
  1493 00002FD3 A8FF                <1>     test al, -1
  1494                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002FD5 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002FD7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1495                              <1> .badTime:
  1496 00002FD8 488D1517DBFFFF      <1>     lea rdx, badTime
  1497 00002FDF E88D120000          <1>     call printString
  1498 00002FE4 E914FFFFFF          <1>     jmp time.noCur
  1499                              <1> .validsep:
  1500 00002FE9 AC                  <1>     lodsb
  1501 00002FEA 3A0538D0FFFF        <1>     cmp al, byte [ctryData + countryStruc.timeSep]  ;Usually a colon
  1502                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002FF0 74(D7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1503 00002FF2 3C2E                <1>     cmp al, "."
  1504                              <1>     return
    13                              <2> %%_ret:
    14 00002FF4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1505                              <1> .checkNum:
  1506 00002FF5 AC                  <1>     lodsb   ;Now ensure the first char past the delim is a number
  1507 00002FF6 48FFCE              <1>     dec rsi
  1508 00002FF9 3C30                <1>     cmp al, "0"
  1509 00002FFB 7206                <1>     jb .cnbad
  1510 00002FFD 3C39                <1>     cmp al, "9"
  1511 00002FFF 7702                <1>     ja .cnbad
  1512 00003001 F8                  <1>     clc
  1513                              <1>     return
    13                              <2> %%_ret:
    14 00003002 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1514                              <1> .cnbad:
  1515 00003003 F9                  <1>     stc
  1516                              <1>     return
    13                              <2> %%_ret:
    14 00003004 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1517                              <1> ctty:
  1518 00003005 F60587D0FFFFFF      <1>     test byte [arg1Flg], -1
  1519 0000300C 0F8429EEFFFF        <1>     jz badArgError
  1520 00003012 F6057DD0FFFFFF      <1>     test byte [arg2Flg], -1
  1521 00003019 0F851CEEFFFF        <1>     jnz badArgError
  1522 0000301F 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1523 00003026 0FB60567D0FFFF      <1>     movzx eax, byte [arg1Off]
  1524 0000302D 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
  1525 00003030 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1526 00003034 750F                <1>     jne .noDrive
  1527 00003036 0FB60558D0FFFF      <1>     movzx eax, byte [arg1FCBret]
  1528 0000303D 3CFF                <1>     cmp al, -1
  1529 0000303F 0F84EDEDFFFF        <1>     je badDriveError
  1530                              <1> .noDrive:
  1531                              <1>     ;Now we open the provided file
  1532 00003045 E8EC150000          <1>     call copyArgumentToSearchSpec
  1533 0000304A 488D152ED4FFFF      <1>     lea rdx, searchSpec
  1534                              <1> .loadSwap:
  1535 00003051 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
  1536 00003056 CD21                <1>     int 21h
  1537 00003058 0F82E6EDFFFF        <1>     jc badFileError
  1538 0000305E 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
  1539 00003061 B800440000          <1>     mov eax, 4400h  ;Get device word
  1540 00003066 CD21                <1>     int 21h
  1541 00003068 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
  1542 0000306B 742F                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
  1543                              <1>     ;Now we set this handle to be STDIO
  1544 0000306D 80CA03              <1>     or dl, 3    ;Set STDIO bits
  1545 00003070 30F6                <1>     xor dh, dh
  1546 00003072 B801440000          <1>     mov eax, 4401h  ;Now we set the device word
  1547 00003077 CD21                <1>     int 21h
  1548                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
  1549 00003079 31C9                <1>     xor ecx, ecx    ;STDIN
  1550 0000307B B800460000          <1>     mov eax, 4600h
  1551 00003080 CD21                <1>     int 21h
  1552 00003082 FFC1                <1>     inc ecx         ;STDOUT
  1553 00003084 B800460000          <1>     mov eax, 4600h
  1554 00003089 CD21                <1>     int 21h
  1555 0000308B FFC1                <1>     inc ecx         ;STDERR
  1556 0000308D B800460000          <1>     mov eax, 4600h
  1557 00003092 CD21                <1>     int 21h
  1558 00003094 B8003E0000          <1>     mov eax, 3E00h ;Now we close the original handle
  1559 00003099 CD21                <1>     int 21h
  1560                              <1>     return
    13                              <2> %%_ret:
    14 0000309B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1561                              <1> .badCharDev:
  1562 0000309C 488D1584DBFFFF      <1>     lea rdx, badDev
  1563 000030A3 B409                <1>     mov ah, 09h
  1564 000030A5 CD21                <1>     int 21h
  1565 000030A7 B43E                <1>     mov ah, 3Eh ;Close opened handle
  1566 000030A9 CD21                <1>     int 21h
  1567                              <1>     return
    13                              <2> %%_ret:
    14 000030AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1568                              <1> 
  1569                              <1> cls:  
  1570 000030AC B800440000          <1>     mov eax, 4400h  ;Get device info
  1571 000030B1 BB01000000          <1>     mov ebx, 1      ;for handle 1
  1572 000030B6 CD21                <1>     int 21h         ;in dx
  1573 000030B8 F7C280000000        <1>     test edx, devCharDev
  1574 000030BE 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
  1575 000030C0 F7C210000000        <1>     test edx, charDevFastOut
  1576 000030C6 743E                <1>     jz .doAnsi
  1577                              <1>     ;Test if Int 29h uses Int 30h
  1578                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
  1579                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
  1580 000030C8 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
  1581 000030CD CD21                <1>     int 21h
  1582                              <1> .biosCheck:
  1583 000030CF 66813BCD30          <1>     cmp word [rbx], 30CDh
  1584 000030D4 740C                <1>     je .biosConfirmed
  1585 000030D6 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
  1586 000030DB 7429                <1>     je .doAnsi
  1587 000030DD 48FFC3              <1>     inc rbx
  1588 000030E0 EBED                <1>     jmp short .biosCheck
  1589                              <1> .biosConfirmed:
  1590                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
  1591 000030E2 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
  1592 000030E4 31DB                <1>     xor ebx, ebx
  1593 000030E6 CD30                <1>     int 30h
  1594 000030E8 B40F                <1>     mov ah, 0Fh ;Get screen mode
  1595 000030EA CD30                <1>     int 30h
  1596 000030EC 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
  1597 000030EF FECA                <1>     dec dl
  1598 000030F1 B619                <1>     mov dh, 25  ;Number of rows is standard
  1599 000030F3 31C0                <1>     xor eax, eax
  1600 000030F5 89C1                <1>     mov ecx, eax
  1601 000030F7 B707                <1>     mov bh, 7   ;Screen attributes
  1602 000030F9 B406                <1>     mov ah, 6   ;Scroll
  1603 000030FB CD30                <1>     int 30h
  1604 000030FD 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
  1605 000030FF B700                <1>     mov bh, 0   ;Page 0
  1606 00003101 B402                <1>     mov ah, 2
  1607 00003103 CD30                <1>     int 30h
  1608                              <1>     return
    13                              <2> %%_ret:
    14 00003105 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1609                              <1> .doAnsi:
  1610                              <1> ;4 chars in the ansi routine
  1611                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
  1612                              <1> ; understand ANSI codes
  1613 00003106 488D35A1DDFFFF      <1>     lea rsi, ansiCls
  1614 0000310D B904000000          <1>     mov ecx, 4
  1615 00003112 B406                <1>     mov ah, 06h ;Raw char output
  1616                              <1> .ansiLp:
  1617 00003114 AC                  <1>     lodsb   ;Get the char in 
  1618 00003115 88C2                <1>     mov dl, al
  1619 00003117 CD21                <1>     int 21h
  1620 00003119 FFC9                <1>     dec ecx
  1621 0000311B 75F7                <1>     jnz .ansiLp
  1622                              <1>     return
    13                              <2> %%_ret:
    14 0000311D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1623                              <1> 
  1624                              <1> break:
  1625 0000311E F6056ECFFFFFFF      <1>     test byte [arg1Flg], -1
  1626 00003125 752D                <1>     jnz .argumentProvided
  1627                              <1>     ;Here we just get the status of break
  1628 00003127 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
  1629 0000312C CD21                <1>     int 21h
  1630 0000312E 88D3                <1>     mov bl, dl
  1631 00003130 488D1592DBFFFF      <1>     lea rdx, breakIs
  1632 00003137 B409                <1>     mov ah, 09h
  1633 00003139 CD21                <1>     int 21h
  1634 0000313B 488D1582DBFFFF      <1>     lea rdx, onMes
  1635 00003142 488D0D75DBFFFF      <1>     lea rcx, offMes
  1636 00003149 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1637 0000314B 480F44D1            <1>     cmovz rdx, rcx
  1638 0000314F B409                <1>     mov ah, 09h
  1639 00003151 CD21                <1>     int 21h
  1640                              <1>     return
    13                              <2> %%_ret:
    14 00003153 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1641                              <1> .argumentProvided:
  1642 00003154 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1643 00003158 AD                  <1>     lodsd   ;Read the word
  1644 00003159 89C3                <1>     mov ebx, eax
  1645 0000315B 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1646 00003160 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1647 00003163 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1648 00003168 7416                <1>     je .maybeOn
  1649 0000316A 663D4F46            <1>     cmp ax, "OF"
  1650 0000316E 7523                <1>     jne .badOnOff
  1651 00003170 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1652 00003175 6681FB4620          <1>     cmp bx, "F "
  1653 0000317A 7517                <1>     jne .badOnOff
  1654                              <1>     ;Set off
  1655 0000317C 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1656 0000317E EB0B                <1>     jmp short .setBreak
  1657                              <1> .maybeOn:
  1658 00003180 663D4F4E            <1>     cmp ax, "ON"
  1659 00003184 750D                <1>     jne .badOnOff
  1660                              <1>     ;Set on
  1661 00003186 BA01000000          <1>     mov edx, 1
  1662                              <1> .setBreak:
  1663 0000318B B801330000          <1>     mov eax, 3301h  ;Set break
  1664 00003190 CD21                <1>     int 21h
  1665                              <1>     return
    13                              <2> %%_ret:
    14 00003192 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1666                              <1> .badOnOff:
  1667 00003193 488D1524DDFFFF      <1>     lea rdx, badOnOff
  1668 0000319A B409                <1>     mov ah, 09h
  1669 0000319C CD21                <1>     int 21h
  1670                              <1>     return
    13                              <2> %%_ret:
    14 0000319E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1671                              <1> 
  1672                              <1> verify:
  1673 0000319F F605EDCEFFFFFF      <1>     test byte [arg1Flg], -1
  1674 000031A6 752D                <1>     jnz .argumentProvided
  1675                              <1>     ;Here we just get the status of break
  1676 000031A8 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1677 000031AD CD21                <1>     int 21h
  1678 000031AF 88C3                <1>     mov bl, al
  1679 000031B1 488D151BDBFFFF      <1>     lea rdx, verifyIs
  1680 000031B8 B409                <1>     mov ah, 09h
  1681 000031BA CD21                <1>     int 21h
  1682 000031BC 488D1501DBFFFF      <1>     lea rdx, onMes
  1683 000031C3 488D0DF4DAFFFF      <1>     lea rcx, offMes
  1684 000031CA 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1685 000031CC 480F44D1            <1>     cmovz rdx, rcx
  1686 000031D0 B409                <1>     mov ah, 09h
  1687 000031D2 CD21                <1>     int 21h
  1688                              <1>     return
    13                              <2> %%_ret:
    14 000031D4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1689                              <1> .argumentProvided:
  1690 000031D5 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1691 000031D9 AD                  <1>     lodsd   ;Read the word
  1692 000031DA 89C3                <1>     mov ebx, eax
  1693 000031DC 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1694 000031E1 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1695 000031E4 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1696 000031E9 7416                <1>     je .maybeOn
  1697 000031EB 663D4F46            <1>     cmp ax, "OF"
  1698 000031EF 751F                <1>     jne .badOnOff
  1699 000031F1 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1700 000031F6 6681FB4620          <1>     cmp bx, "F "
  1701 000031FB 7513                <1>     jne .badOnOff
  1702                              <1>     ;Set off
  1703 000031FD 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1704 000031FF EB0A                <1>     jmp short .setVerify
  1705                              <1> .maybeOn:
  1706 00003201 663D4F4E            <1>     cmp ax, "ON"
  1707 00003205 7509                <1>     jne .badOnOff
  1708                              <1>     ;Set on
  1709 00003207 31C0                <1>     xor eax, eax
  1710 00003209 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1711                              <1> .setVerify:
  1712 0000320B B42E                <1>     mov ah, 2Eh  ;Set Verify
  1713 0000320D CD21                <1>     int 21h
  1714                              <1>     return
    13                              <2> %%_ret:
    14 0000320F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1715                              <1> .badOnOff:
  1716 00003210 488D15A7DCFFFF      <1>     lea rdx, badOnOff
  1717 00003217 B409                <1>     mov ah, 09h
  1718 00003219 CD21                <1>     int 21h
  1719                              <1>     return
    13                              <2> %%_ret:
    14 0000321B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1720                              <1> 
  1721                              <1> rename:
  1722 0000321C F60570CEFFFFFF      <1>     test byte [arg1Flg], -1
  1723 00003223 0F8412ECFFFF        <1>     jz badArgError
  1724 00003229 F60566CEFFFFFF      <1>     test byte [arg2Flg], -1
  1725 00003230 0F8405ECFFFF        <1>     jz badArgError    
  1726                              <1>     ;Initialise the variables!
  1727 00003236 488D350FD4FFFF      <1>     lea rsi, srcSpec
  1728 0000323D 4889350CD5FFFF      <1>     mov qword [srcPtr], rsi
  1729 00003244 488D3583D4FFFF      <1>     lea rsi, destSpec
  1730 0000324B 48893506D5FFFF      <1>     mov qword [destPtr], rsi
  1731                              <1>     ;Check the second path is just a filename!
  1732 00003252 0FB6053ECEFFFF      <1>     movzx eax, byte [arg2Off]
  1733 00003259 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1734 00003260 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1735 00003263 488D3D15D2FFFF      <1>     lea rdi, searchSpec
  1736 0000326A 57                  <1>     push rdi
  1737 0000326B E86B130000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1738 00003270 5F                  <1>     pop rdi
  1739 00003271 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1740 00003275 0F84C0EBFFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1741                              <1> ;Check if a drive specifier has been given
  1742 0000327B 0FB60512CEFFFF      <1>     movzx eax, byte [arg1Off]
  1743 00003282 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1744 00003289 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1745 0000328C 66AD                <1>     lodsw   ;Get the first two chars
  1746 0000328E 80FC3A              <1>     cmp ah, ":" ;If not, current drive
  1747 00003291 752A                <1>     jne .curDrvSrc
  1748                              <1> ;Else, copy over the drive letter from the source path, if one exists!
  1749 00003293 488B35B6D4FFFF      <1>     mov rsi, qword [srcPtr]
  1750 0000329A 668906              <1>     mov word [rsi], ax
  1751 0000329D 488105A8D4FFFF0200- <1>     add qword [srcPtr], 2   
  1751 000032A6 0000                <1>
  1752 000032A8 488B35A9D4FFFF      <1>     mov rsi, qword [destPtr]
  1753 000032AF 668906              <1>     mov word [rsi], ax
  1754 000032B2 4881059BD4FFFF0200- <1>     add qword [destPtr], 2  ;Advance the pointer, to copy to after this ptr
  1754 000032BB 0000                <1>
  1755                              <1> .curDrvSrc:
  1756 000032BD 4889FE              <1>     mov rsi, rdi
  1757                              <1> .destScan:
  1758 000032C0 AC                  <1>     lodsb   ;Get the char
  1759 000032C1 3A0552CDFFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1760 000032C7 0F846EEBFFFF        <1>     je badArgError
  1761 000032CD 84C0                <1>     test al, al
  1762 000032CF 75EF                <1>     jnz .destScan
  1763                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1764 000032D1 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1765 000032D5 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1765 000032DE 3F                  <1>
  1766 000032DF B903000000          <1>     mov ecx, 3  ;24 bytes
  1767 000032E4 F348AB              <1>     rep stosq
  1768 000032E7 AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1769 000032E8 488D3590D1FFFF      <1>     lea rsi, searchSpec
  1770 000032EF 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1771 000032F3 B80D290000          <1>     mov eax, 290Dh
  1772 000032F8 CD21                <1>     int 21h     
  1773 000032FA 50                  <1>     push rax    ;Save the WC signature
  1774 000032FB E81E130000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1775 00003300 488D3D78D1FFFF      <1>     lea rdi, searchSpec
  1776 00003307 E855120000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1777 0000330C 4889FE              <1>     mov rsi, rdi
  1778 0000330F 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1779 00003312 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1780 00003316 B80D290000          <1>     mov eax, 290Dh
  1781 0000331B CD21                <1>     int 21h
  1782 0000331D 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1783 0000331E 88CC                <1>     mov ah, cl
  1784 00003320 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1785 00003323 0F84EB000000        <1>     jz .noWC
  1786 00003329 3CFF                <1>     cmp al, -1  ;Is the source drive bad?
  1787 0000332B 0F840AEBFFFF        <1>     je badArgError
  1788 00003331 488D3547D1FFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1789                              <1>     ;Now we check if we have a path to actually handle
  1790 00003338 4839F3              <1>     cmp rbx, rsi
  1791 0000333B 7444                <1>     je .noPath
  1792 0000333D C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1793 00003341 488D3537D1FFFF      <1>     lea rsi, searchSpec
  1794 00003348 488B3DFDD2FFFF      <1>     mov rdi, qword [srcSpec]
  1795 0000334F 56                  <1>     push rsi
  1796 00003350 E817110000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1797 00003355 5E                  <1>     pop rsi
  1798 00003356 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1799 00003359 8A05BACCFFFF        <1>     mov al, byte [pathSep]
  1800 0000335F AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1801 00003360 48893DE9D3FFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1802 00003367 488B3DEAD3FFFF      <1>     mov rdi, qword [destPtr]    ;Get the ptr (if it was advanced)
  1803 0000336E E8F9100000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1804 00003373 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1805 00003376 AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1806 00003377 48893DDAD3FFFF      <1>     mov qword [destPtr], rdi
  1807 0000337E 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1808                              <1> .noPath:
  1809                              <1>     ;Now we have where to copy the files to, we can start our work!
  1810 00003381 E8C1130000          <1>     call setDTA
  1811 00003386 488D15F2D0FFFF      <1>     lea rdx, searchSpec
  1812 0000338D 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1813 0000338F B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1814 00003394 CD21                <1>     int 21h
  1815 00003396 0F82B1EAFFFF        <1>     jc badDupFnf    ;If no file was found!
  1816                              <1> .wcLoop:
  1817                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1818 0000339C 488D3580CDFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1819 000033A3 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1820 000033A7 B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1821 000033AC CD21                <1>     int 21h 
  1822                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1823 000033AE 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1824 000033B2 488D3DA7D3FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1825 000033B9 57                  <1>     push rdi
  1826 000033BA 48A5                <1>     movsq
  1827 000033BC 66A5                <1>     movsw
  1828 000033BE A4                  <1>     movsb
  1829 000033BF 5F                  <1>     pop rdi
  1830 000033C0 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1831 000033C4 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1832                              <1> .wcNameMake:
  1833 000033C9 AC                  <1>     lodsb   ;Get the char from the source string
  1834 000033CA 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1835 000033CD 7502                <1>     jne .noStore    ;Dont store the char there
  1836 000033CF 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1837                              <1> .noStore:
  1838 000033D1 48FFC7              <1>     inc rdi ;Goto next char position
  1839 000033D4 FFC9                <1>     dec ecx
  1840 000033D6 75F1                <1>     jnz .wcNameMake
  1841                              <1> ;renName now has the FCB name for the file we wish to make!
  1842                              <1> ;Now make the two paths!
  1843 000033D8 488D3544CDFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1844 000033DF 488B3D6AD3FFFF      <1>     mov rdi, qword [srcPtr]
  1845 000033E6 E881100000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1846 000033EB 488D356ED3FFFF      <1>     lea rsi, renName
  1847 000033F2 488B3D5FD3FFFF      <1>     mov rdi, qword [destPtr]
  1848 000033F9 E887110000          <1>     call FCBToAsciiz
  1849 000033FE 488D1547D2FFFF      <1>     lea rdx, srcSpec
  1850 00003405 E83F000000          <1>     call .ren   ;Fail silently on wildcard rename
  1851 0000340A B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1852 0000340F CD21                <1>     int 21h
  1853 00003411 7389                <1>     jnc .wcLoop     ;And process it too!
  1854                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 00003413 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1855                              <1> .noWC:
  1856 00003414 E805120000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1857 00003419 0FB60577CCFFFF      <1>     movzx eax, byte [arg2Off]
  1858 00003420 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1859 00003427 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1860 0000342A 488B3D27D3FFFF      <1>     mov rdi, qword [destPtr]    
  1861 00003431 E8A5110000          <1>     call cpDelimPathToBufz
  1862 00003436 488D1542D0FFFF      <1>     lea rdx, searchSpec
  1863 0000343D E807000000          <1>     call .ren
  1864                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003442 73(13)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1865 00003444 E904EAFFFF          <1>     jmp badDupFnf   ;Always just return this
  1866                              <1> .ren:
  1867 00003449 488D3D7ED2FFFF      <1>     lea rdi, destSpec
  1868 00003450 B800560000          <1>     mov eax, 5600h
  1869 00003455 CD21                <1>     int 21h
  1870                              <1>     return
    13                              <2> %%_ret:
    14 00003457 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1871                              <1> 
  1872                              <1> touch:
  1873                              <1> ;Temporarily used to create files
  1874 00003458 F60534CCFFFFFF      <1>     test byte [arg1Flg], -1
  1875 0000345F 0F84D6E9FFFF        <1>     jz badArgError
  1876 00003465 E8B4110000          <1>     call buildCommandPath
  1877 0000346A 488D150ED0FFFF      <1>     lea rdx, searchSpec
  1878 00003471 B8005B0000          <1>     mov eax, 5B00h  ;Create unique file 
  1879 00003476 31C9                <1>     xor ecx, ecx
  1880 00003478 CD21                <1>     int 21h
  1881 0000347A 721D                <1>     jc .touch1
  1882                              <1> .touchClose:
  1883 0000347C 0FB7D8              <1>     movzx ebx, ax   ;Save the handle here
  1884 0000347F B80D120000          <1>     mov eax, 120Dh  ;Get date/time words from the DOS
  1885 00003484 CD2F                <1>     int 2fh
  1886 00003486 89C1                <1>     mov ecx, eax    ;Move the time here
  1887 00003488 87D1                <1>     xchg edx, ecx   ;Get them in the right place
  1888 0000348A B801570000          <1>     mov eax, 5701h  ;Set the date/time for bx
  1889 0000348F CD21                <1>     int 21h
  1890 00003491 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1891 00003496 CD21                <1>     int 21h
  1892                              <1>     return
    13                              <2> %%_ret:
    14 00003498 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1893                              <1> .touch1:
  1894 00003499 3C50                <1>     cmp al, errFilExist ;Does the file exist?
  1895 0000349B 7509                <1>     jne .touchError ;If not, this is a proper error!
  1896 0000349D B8003D0000          <1>     mov eax, 3D00h  ;R/O open instead to update the access time!!
  1897 000034A2 CD21                <1>     int 21h
  1898 000034A4 73D6                <1>     jnc .touchClose ;If this worked, close the handle immediately
  1899                              <1> .touchError:
  1900 000034A6 3C03                <1>     cmp al, errPnf
  1901 000034A8 0F848DE9FFFF        <1>     je badArgError
  1902 000034AE 3C02                <1>     cmp al, errFnf
  1903 000034B0 0F84A0E9FFFF        <1>     je badFnf
  1904 000034B6 E965E9FFFF          <1>     jmp badAccError
  1905                              <1>     
  1906                              <1> 
  1907                              <1> join:
  1908                              <1> ;Mock join command, to test join. Make an external command.
  1909                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1910 000034BB F605AF000000FF      <1>     test byte [.joinOn], -1
  1911 000034C2 743D                <1>     jz .okJoin
  1912                              <1> .joindisable:
  1913 000034C4 B800520000          <1>     mov eax, 5200h  
  1914 000034C9 CD21                <1>     int 21h
  1915                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1916 000034CB B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1917 000034D0 CD2A                <1>     int 2Ah
  1918 000034D2 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1919 000034D6 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1920 000034DA 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1921 000034E0 C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1922 000034E3 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1923 000034E7 FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1924 000034EA B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1925 000034EF CD2A                <1>     int 2Ah
  1926 000034F1 C6057900000000      <1>     mov byte [.joinOn], 0
  1927 000034F8 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1928 000034FF EB45                <1>     jmp short .joinExit
  1929                              <1> .okJoin:
  1930 00003501 C60569000000FF      <1>     mov byte [.joinOn], -1
  1931 00003508 B800520000          <1>     mov eax, 5200h  
  1932 0000350D CD21                <1>     int 21h
  1933 0000350F 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1934 00003513 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1935                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1936 00003517 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1937 0000351C CD2A                <1>     int 2Ah
  1938 0000351E 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1939 00003524 4889DF              <1>     mov rdi, rbx
  1940 00003527 488D3544000000      <1>     lea rsi, .joinPath
  1941 0000352E B90C000000          <1>     mov ecx, .joinPathL
  1942 00003533 F3A4                <1>     rep movsb   ;Copy chars over
  1943 00003535 FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1944 00003538 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1945 0000353D CD2A                <1>     int 2Ah
  1946 0000353F 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1947                              <1> .joinExit:
  1948 00003546 B800090000          <1>     mov eax, 0900h
  1949 0000354B CD21                <1>     int 21h
  1950                              <1>     return
    13                              <2> %%_ret:
    14 0000354D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1951 0000354E 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1951 00003557 61626C65640D0A24    <1>
  1952 0000355F 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1952 00003568 7361626C65640D0A24  <1>
  1953 00003571 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1954 00003572 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1954 0000357B 535400              <1>
  1955                              <1> .joinPathL  equ $ - .joinPath 
  1956                              <1> 
  1957                              <1> subst:
  1958                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1959                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1960 0000357E F605D3000000FF      <1>     test byte [.substOn], -1
  1961 00003585 7443                <1>     jz .okSubst
  1962                              <1> .substdisable:
  1963 00003587 B800520000          <1>     mov eax, 5200h  
  1964 0000358C CD21                <1>     int 21h
  1965                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1966 0000358E B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1967 00003593 CD2A                <1>     int 2Ah
  1968 00003595 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1969 00003599 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1970 000035A0 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1971 000035A6 C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1972 000035A9 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1973 000035AD 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1974 000035B3 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1975 000035B8 CD2A                <1>     int 2Ah
  1976 000035BA C6059700000000      <1>     mov byte [.substOn], 0
  1977 000035C1 488D157D000000      <1>     lea rdx, .substDisableMsg
  1978 000035C8 EB61                <1>     jmp short .substExit
  1979                              <1> .okSubst:
  1980 000035CA C60587000000FF      <1>     mov byte [.substOn], -1
  1981 000035D1 B800520000          <1>     mov eax, 5200h  
  1982 000035D6 CD21                <1>     int 21h
  1983 000035D8 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1984 000035DD CD2A                <1>     int 2Ah
  1985 000035DF 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1986 000035E3 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1987 000035EA 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1988 000035EE 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1989 000035F5 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1990 000035F9 C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1991                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1992 00003600 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1993 00003606 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1994 0000360C 4889DF              <1>     mov rdi, rbx
  1995 0000360F 488D3543000000      <1>     lea rsi, .substPath
  1996 00003616 B90C000000          <1>     mov ecx, .substPathL
  1997 0000361B F3A4                <1>     rep movsb   ;Copy chars over
  1998 0000361D B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1999 00003622 CD2A                <1>     int 2Ah
  2000 00003624 488D1508000000      <1>     lea rdx, .substEnableMsg
  2001                              <1> .substExit:
  2002 0000362B B800090000          <1>     mov eax, 0900h
  2003 00003630 CD21                <1>     int 21h
  2004                              <1>     return
    13                              <2> %%_ret:
    14 00003632 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2005 00003633 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  2005 0000363C 6E61626C65640D0A24  <1>
  2006 00003645 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  2006 0000364E 697361626C65640D0A- <1>
  2006 00003657 24                  <1>
  2007 00003658 00                  <1> .substOn: db 0    ;Var to indicate we are on
  2008 00003659 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  2008 00003662 535400              <1>
  2009                              <1> .substPathL  equ $ - .substPath 
  2010                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  2011                              <1> truename:
  2012 00003665 F60527CAFFFFFF      <1>     test byte [arg1Flg], -1
  2013 0000366C 0F84C9E7FFFF        <1>     jz badArgError
  2014 00003672 E8A70F0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  2015 00003677 488D3501CEFFFF      <1>     lea rsi, searchSpec     ;Store the path here
  2016 0000367E 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  2017 00003681 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  2018 00003686 CD21                <1>     int 21h
  2019 00003688 730D                <1>     jnc .writePath
  2020 0000368A 3C02                <1>     cmp al, errFnf
  2021 0000368C 0F84B2E7FFFF        <1>     je badFileError
  2022 00003692 E992E7FFFF          <1>     jmp badParamError
  2023                              <1> .writePath:
  2024 00003697 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  2025 0000369A B9FFFFFFFF          <1>     mov ecx, -1
  2026 0000369F 30C0                <1>     xor al, al
  2027 000036A1 F2AE                <1>     repne scasb     ;Get the new len
  2028 000036A3 F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  2029 000036A5 FFC9                <1>     dec ecx
  2030 000036A7 BB01000000          <1>     mov ebx, 01
  2031 000036AC B440                <1>     mov ah, 40h
  2032 000036AE CD21                <1>     int 21h
  2033 000036B0 E8B50B0000          <1>     call printCRLF
  2034                              <1>     return
    13                              <2> %%_ret:
    14 000036B5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2035                              <1> 
  2036                              <1> label:
  2037                              <1> ;Displays/Changes/Deletes the file label
  2038 000036B6 488D1508000000      <1>     lea rdx, .l1
  2039 000036BD B800090000          <1>     mov eax, 0900h
  2040 000036C2 CD21                <1>     int 21h
  2041                              <1>     return
    13                              <2> %%_ret:
    14 000036C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2042 000036C5 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  2042 000036CE 6E20756E696D706C65- <1>
  2042 000036D7 6D656E7465640D0A24  <1>
  2043                              <1> 
  2044                              <1> mklbl:
  2045                              <1>     ;lea rdx, .l1
  2046                              <1>     ;mov cx, 08h ;Make a label
  2047                              <1>     ;mov eax, 3C00h
  2048                              <1>     ;int 21h
  2049                              <1> 
  2050                              <1>     ;mov ebx, eax
  2051                              <1>     ;mov eax, 3E00h  ;Close the handle
  2052                              <1>     ;int 21h
  2053                              <1>     ;return
  2054                              <1> 
  2055                              <1> ;.l1: db "TESTLABEL",0
  2056 000036E0 488D1508000000      <1>     lea rdx, .l1
  2057 000036E7 B800160000          <1>     mov eax, 1600h  ;Create FCB
  2058 000036EC CD21                <1>     int 21h
  2059                              <1>     return
    13                              <2> %%_ret:
    14 000036EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2060                              <1> .l1:
  2061                              <1>     istruc exFcb
  2062 000036EF FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  2063 000036F0 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  2064 000036F6 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  2065 000036F7 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  2066 000036FF 4C2020              <1>     at exFcb.fileext,   db "L  "
  2067 00003702 00000000            <1>     at exFcb.curBlock,  dd 0
  2068 00003706 00<rep 15h>         <1>     iend 
  2069                              <1> rmlbl:
  2070 0000371B 488D1508000000      <1>     lea rdx, .l1
  2071 00003722 B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  2072 00003727 CD21                <1>     int 21h
  2073                              <1>     return
    13                              <2> %%_ret:
    14 00003729 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2074                              <1> .l1:    ;FCB to volume label
  2075                              <1>     istruc exFcb
  2076 0000372A FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  2077 0000372B 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  2078 00003731 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  2079 00003732 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  2080 0000373A 3F3F3F              <1>     at exFcb.fileext,   db "???"
  2081 0000373D 00000000            <1>     at exFcb.curBlock,  dd 0
  2082 00003741 00<rep 15h>         <1>     iend 
  2083                              <1> 
  2084                              <1> rnlbl:
  2085 00003756 488D1508000000      <1>     lea rdx, .l1
  2086 0000375D B800170000          <1>     mov eax, 1700h
  2087 00003762 CD21                <1>     int 21h
  2088                              <1>     return
    13                              <2> %%_ret:
    14 00003764 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2089                              <1> .l1:
  2090                              <1>     istruc exRenFcb
  2091 00003765 FF                  <1>     at exRenFcb.extSig,     db -1
  2092 00003766 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  2093 0000376C 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  2094 0000376D 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  2095 00003775 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  2096 00003778 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  2096 00003781 4C414245            <1>
  2097 00003785 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  2098 00003788 00<rep 4h>          <1>     iend
  2099                              <1> volume:
  2100                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  2101 0000378C F60503C9FFFFFF      <1>     test byte [arg2Flg], -1
  2102 00003793 0F85A2E6FFFF        <1>     jnz badArgError
  2103 00003799 F605F3C8FFFFFF      <1>     test byte [arg1Flg], -1
  2104 000037A0 7507                <1>     jnz .notCurrentDrive
  2105 000037A2 E8C00C0000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  2106 000037A7 EB31                <1>     jmp short .dirEP
  2107                              <1> .notCurrentDrive:
  2108 000037A9 E8700E0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  2109 000037AE 488D35CACCFFFF      <1>     lea rsi, searchSpec
  2110 000037B5 E8F00C0000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  2111 000037BA 66AD                <1>     lodsw                   ;Get this word
  2112 000037BC 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  2113 000037BF 0F8576E6FFFF        <1>     jne badArgError
  2114 000037C5 8A05CAC8FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  2115 000037CB A8FF                <1>     test al, -1
  2116 000037CD 0F855FE6FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  2117 000037D3 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  2118 000037D8 FFC8                <1>     dec eax ;Convert to 0 based number
  2119                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  2120 000037DA E8680F0000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  2121 000037DF 488D1536CEFFFF      <1>     lea rdx, volFcb
  2122 000037E6 FFC0                <1>     inc eax ;Get 1 based drive number
  2123 000037E8 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  2124 000037EA 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  2125 000037ED B800110000          <1>     mov eax, 1100h ;Find first FCB
  2126 000037F2 CD21                <1>     int 21h
  2127 000037F4 50                  <1>     push rax
  2128                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  2129 000037F5 488D1594D0FFFF      <1>     lea rdx, crlf
  2130 000037FC B409                <1>     mov ah, 09h
  2131 000037FE CD21                <1>     int 21h
  2132 00003800 488D1549D3FFFF      <1>     lea rdx, volMes
  2133 00003807 B409                <1>     mov ah, 09h
  2134 00003809 CD21                <1>     int 21h
  2135 0000380B 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  2136 0000380D 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  2137 00003810 B402                <1>     mov ah, 02h
  2138 00003812 CD21                <1>     int 21h
  2139 00003814 58                  <1>     pop rax
  2140 00003815 84C0                <1>     test al, al ;If this is zero, the call succeeded
  2141 00003817 7409                <1>     jz .volIDOk
  2142 00003819 488D1547D3FFFF      <1>     lea rdx, volNo
  2143 00003820 EB19                <1>     jmp short .volEndPrint
  2144                              <1> .volIDOk:
  2145 00003822 488D1539D3FFFF      <1>     lea rdx, volOk
  2146 00003829 B409                <1>     mov ah, 09h
  2147 0000382B CD21                <1>     int 21h
  2148 0000382D C605E4C8FFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  2149 00003834 488D15D2C8FFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  2150                              <1> .volEndPrint:
  2151 0000383B B409                <1>     mov ah, 09h
  2152 0000383D CD21                <1>     int 21h
  2153 0000383F 488D154AD0FFFF      <1>     lea rdx, crlf
  2154 00003846 B409                <1>     mov ah, 09h
  2155 00003848 CD21                <1>     int 21h
  2156                              <1>     return
    13                              <2> %%_ret:
    14 0000384A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2157                              <1> 
  2158                              <1> version:
  2159 0000384B 488D153ED0FFFF      <1>     lea rdx, crlf
  2160 00003852 B409                <1>     mov ah, 09h
  2161 00003854 CD21                <1>     int 21h
  2162 00003856 488D15E1D2FFFF      <1>     lea rdx, dosVer
  2163 0000385D B409                <1>     mov ah, 09h
  2164 0000385F CD21                <1>     int 21h
  2165 00003861 E80C000000          <1>     call .printVersionNumber
  2166 00003866 488D1523D0FFFF      <1>     lea rdx, crlf
  2167 0000386D B409                <1>     mov ah, 09h
  2168 0000386F CD21                <1>     int 21h
  2169                              <1>     return
    13                              <2> %%_ret:
    14 00003871 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2170                              <1> .printVersionNumber:
  2171 00003872 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  2172 00003874 CD21                <1>     int 21h
  2173 00003876 50                  <1>     push rax
  2174 00003877 0FB6C0              <1>     movzx eax, al
  2175 0000387A E8D80D0000          <1>     call printDecimalWord
  2176 0000387F B22E                <1>     mov dl, "."
  2177 00003881 B402                <1>     mov ah, 02h
  2178 00003883 CD21                <1>     int 21h
  2179 00003885 58                  <1>     pop rax
  2180 00003886 0FB6C4              <1>     movzx eax, ah
  2181 00003889 E8C90D0000          <1>     call printDecimalWord
  2182                              <1>     return
    13                              <2> %%_ret:
    14 0000388E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2183                              <1> 
  2184                              <1> 
  2185                              <1> memory:
  2186 0000388F B800520000          <1>     mov eax, 5200h  ;Get Sysvars :)
  2187 00003894 CD21                <1>     int 21h
  2188 00003896 4885DB              <1>     test rbx, rbx
  2189 00003899 7510                <1>     jnz .sysvarsOK
  2190 0000389B 488D1583D5FFFF      <1>     lea rdx, memBad0
  2191 000038A2 B409                <1>     mov ah, 09h
  2192 000038A4 CD21                <1>     int 21h
  2193 000038A6 E98C0E0000          <1>     jmp freezePC.altEP
  2194                              <1> .sysvarsOK:
  2195                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  2196                              <1>     ; and rcx to store Application memory
  2197 000038AB 31F6                <1>     xor esi, esi
  2198 000038AD 31FF                <1>     xor edi, edi
  2199 000038AF 31ED                <1>     xor ebp, ebp
  2200 000038B1 31C9                <1>     xor ecx, ecx
  2201 000038B3 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  2202 000038B7 488B1B              <1>     mov rbx, qword [rbx]
  2203                              <1> .memLp:
  2204 000038BA 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  2205 000038BD 7409                <1>     je .validMCB
  2206 000038BF 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2207 000038C2 0F8501010000        <1>     jne .badMCBFound
  2208                              <1> .validMCB:
  2209 000038C8 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  2210 000038CB 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  2211 000038CF 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  2212 000038D7 7505                <1>     jne .notDOS
  2213 000038D9 4801C6              <1>     add rsi, rax    ;Add to DOS count
  2214 000038DC EB21                <1>     jmp short .gotoNext
  2215                              <1> .notDOS:
  2216 000038DE 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  2217 000038E6 7505                <1>     jne .notFree
  2218 000038E8 4801C7              <1>     add rdi, rax    ;Add to Free space count
  2219 000038EB EB12                <1>     jmp short .gotoNext
  2220                              <1> .notFree:
  2221 000038ED 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  2222 000038F5 7505                <1>     jne .notHole
  2223 000038F7 4801C5              <1>     add rbp, rax    ;Add to Hole count
  2224 000038FA EB03                <1>     jmp short .gotoNext
  2225                              <1> .notHole:
  2226 000038FC 4801C1              <1>     add rcx, rax    ;Add to Application count
  2227                              <1> .gotoNext:
  2228 000038FF 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2229 00003902 7407                <1>     je .endOfWalk
  2230 00003904 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  2231 00003909 EBAF                <1>     jmp short .memLp
  2232                              <1> .endOfWalk:
  2233                              <1>     
  2234 0000390B 488D1574D4FFFF      <1>     lea rdx, memDOS
  2235 00003912 B409                <1>     mov ah, 09h
  2236 00003914 CD21                <1>     int 21h
  2237 00003916 4889F0              <1>     mov rax, rsi
  2238 00003919 E89D000000          <1>     call .mcbPrintAmount
  2239 0000391E 488D15F9D4FFFF      <1>     lea rdx, memByte
  2240 00003925 B409                <1>     mov ah, 09h
  2241 00003927 CD21                <1>     int 21h
  2242                              <1> 
  2243 00003929 4885ED              <1>     test rbp, rbp
  2244 0000392C 741E                <1>     jz .skipHole
  2245 0000392E 488D159DD4FFFF      <1>     lea rdx, memHole
  2246 00003935 B409                <1>     mov ah, 09h
  2247 00003937 CD21                <1>     int 21h
  2248 00003939 4889E8              <1>     mov rax, rbp
  2249 0000393C E87A000000          <1>     call .mcbPrintAmount
  2250 00003941 488D15D6D4FFFF      <1>     lea rdx, memByte
  2251 00003948 B409                <1>     mov ah, 09h
  2252 0000394A CD21                <1>     int 21h
  2253                              <1> .skipHole:
  2254                              <1> 
  2255 0000394C 488D1559D4FFFF      <1>     lea rdx, memApp
  2256 00003953 B409                <1>     mov ah, 09h
  2257 00003955 CD21                <1>     int 21h
  2258 00003957 4889C8              <1>     mov rax, rcx
  2259 0000395A E85C000000          <1>     call .mcbPrintAmount
  2260 0000395F 488D15B8D4FFFF      <1>     lea rdx, memByte
  2261 00003966 B409                <1>     mov ah, 09h
  2262 00003968 CD21                <1>     int 21h
  2263                              <1> 
  2264 0000396A 488D1587D4FFFF      <1>     lea rdx, memFree
  2265 00003971 B409                <1>     mov ah, 09h
  2266 00003973 CD21                <1>     int 21h
  2267 00003975 4889F8              <1>     mov rax, rdi
  2268 00003978 E83E000000          <1>     call .mcbPrintAmount
  2269 0000397D 488D159AD4FFFF      <1>     lea rdx, memByte
  2270 00003984 B409                <1>     mov ah, 09h
  2271 00003986 CD21                <1>     int 21h
  2272                              <1> 
  2273 00003988 488D15D1D3FFFF      <1>     lea rdx, memSys
  2274 0000398F B409                <1>     mov ah, 09h
  2275 00003991 CD21                <1>     int 21h
  2276 00003993 4889F0              <1>     mov rax, rsi
  2277 00003996 4801F8              <1>     add rax, rdi
  2278 00003999 4801C8              <1>     add rax, rcx
  2279 0000399C 4801E8              <1>     add rax, rbp
  2280 0000399F E817000000          <1>     call .mcbPrintAmount
  2281 000039A4 488D1573D4FFFF      <1>     lea rdx, memByte
  2282 000039AB B409                <1>     mov ah, 09h
  2283 000039AD CD21                <1>     int 21h
  2284                              <1> 
  2285 000039AF 488D15DACEFFFF      <1>     lea rdx, crlf
  2286 000039B6 B409                <1>     mov ah, 09h
  2287 000039B8 CD21                <1>     int 21h
  2288                              <1>     return
    13                              <2> %%_ret:
    14 000039BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2289                              <1> 
  2290                              <1> .mcbPrintAmount:
  2291 000039BB 51                  <1>     push rcx
  2292 000039BC 56                  <1>     push rsi
  2293 000039BD 57                  <1>     push rdi
  2294 000039BE 55                  <1>     push rbp
  2295 000039BF E8930C0000          <1>     call printDecimalWord
  2296 000039C4 5D                  <1>     pop rbp
  2297 000039C5 5F                  <1>     pop rdi
  2298 000039C6 5E                  <1>     pop rsi
  2299 000039C7 59                  <1>     pop rcx
  2300                              <1>     return
    13                              <2> %%_ret:
    14 000039C8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2301                              <1> .badMCBFound:
  2302 000039C9 488D1595D4FFFF      <1>     lea rdx, memBad2
  2303 000039D0 B409                <1>     mov ah, 09h
  2304 000039D2 CD21                <1>     int 21h
  2305 000039D4 E95E0D0000          <1>     jmp freezePC.altEP
  2306                              <1> 
  2307                              <1> type:
  2308 000039D9 F605B3C6FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  2309 000039E0 0F8455E4FFFF        <1>     jz badArgError
  2310 000039E6 F605A9C6FFFFFF      <1>     test byte [arg2Flg], -1
  2311 000039ED 0F8548E4FFFF        <1>     jnz badArgError         ;If this set, error
  2312 000039F3 4C8B0515C6FFFF      <1>     mov r8, [pspPtr]
  2313 000039FA 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2314 00003A01 0FB6058CC6FFFF      <1>     movzx eax, byte [arg1Off]
  2315 00003A08 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  2316 00003A0B 803E0D              <1>     cmp byte [rsi], CR
  2317 00003A0E 0F8427E4FFFF        <1>     je badArgError
  2318 00003A14 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  2319 00003A18 750F                <1>     jne .noDrive
  2320 00003A1A 0FB60574C6FFFF      <1>     movzx eax, byte [arg1FCBret]
  2321 00003A21 3CFF                <1>     cmp al, -1
  2322 00003A23 0F8409E4FFFF        <1>     je badDriveError
  2323                              <1> .noDrive:
  2324                              <1>     ;Now we open the provided file
  2325 00003A29 E8F00B0000          <1>     call buildCommandPath
  2326 00003A2E 488D154ACAFFFF      <1>     lea rdx, searchSpec
  2327 00003A35 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  2328 00003A3A CD21                <1>     int 21h
  2329 00003A3C 0F8202E4FFFF        <1>     jc badFileError
  2330 00003A42 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  2331 00003A49 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  2332                              <1> .lp:
  2333 00003A4C B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  2334 00003A51 B43F                <1>     mov ah, 3Fh ;Read handle
  2335 00003A53 CD21                <1>     int 21h
  2336 00003A55 89C1                <1>     mov ecx, eax
  2337 00003A57 67E317              <1>     jecxz .exit
  2338 00003A5A 53                  <1>     push rbx    ;Save the original in handle
  2339 00003A5B BB01000000          <1>     mov ebx, 1  ;STDOUT
  2340 00003A60 B440                <1>     mov ah, 40h
  2341 00003A62 CD21                <1>     int 21h
  2342 00003A64 5B                  <1>     pop rbx ;Get back the original read handle
  2343 00003A65 720F                <1>     jc .exitBad
  2344 00003A67 39C8                <1>     cmp eax, ecx
  2345 00003A69 74E1                <1>     je .lp
  2346 00003A6B FFC9                <1>     dec ecx ;One less for a ^Z
  2347 00003A6D 39C8                <1>     cmp eax, ecx
  2348 00003A6F 7505                <1>     jne .exitBad
  2349                              <1> .exit:
  2350 00003A71 B43E                <1>     mov ah, 3Eh ;Close handle
  2351 00003A73 CD21                <1>     int 21h
  2352                              <1>     return
    13                              <2> %%_ret:
    14 00003A75 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2353                              <1> .exitBad:
  2354                              <1>     ;If it is a char device, don't print an error
  2355 00003A76 B800440000          <1>     mov eax, 4400h  ;Get IOCTL mode 
  2356 00003A7B BB01000000          <1>     mov ebx, 1
  2357 00003A80 CD21                <1>     int 21h
  2358 00003A82 F6C280              <1>     test dl, devCharDev
  2359                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003A85 75(75)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2360 00003A87 E954E3FFFF          <1>     jmp badDiskFull
  2361                              <1> 
  2362                              <1> exit:
  2363 00003A8C F605F1C5FFFF01      <1>     test byte [statFlg1], permaShell
  2364                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003A93 75(75)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2365                              <1> .ouch:
  2366 00003A95 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  2367 00003A9A CD21                <1>     int 21h
  2368                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00003A9C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2369                              <1> 
  2370                              <1> launchChild:
  2371                              <1>     ;We execute an external command here.
  2372                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  2373                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  2374                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  2375                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  2376                              <1>     ;We know the drive we are on is valid so no need to double check that!
  2377 00003A9D E8A50C0000          <1>     call setDTA         
  2378                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
  2379 00003AA2 488D3D2DC8FFFF      <1>     lea rdi, cmdPathSpec
  2380 00003AA9 4889FE              <1>     mov rsi, rdi
  2381 00003AAC B811120000          <1>     mov eax, 1211h  ;Normalise this path first
  2382 00003AB1 CD2F                <1>     int 2fh
  2383 00003AB3 E8A90A0000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  2384 00003AB8 4889FE              <1>     mov rsi, rdi    ;Source here
  2385 00003ABB 488D3D33C6FFFF      <1>     lea rdi, cmdFcb
  2386 00003AC2 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  2387 00003AC7 CD21                <1>     int 21h
  2388 00003AC9 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  2389 00003ACB 0F859AE3FFFF        <1>     jnz badCmdError
  2390 00003AD1 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  2391                              <1> .pathLoop:
  2392 00003AD4 488D3523C6FFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  2393 00003ADB 488D3DFDD3FFFF      <1>     lea rdi, extStr
  2394 00003AE2 BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  2395                              <1> .extLp:
  2396 00003AE7 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  2397 00003AE8 B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  2398 00003AED F3A6                <1>     rep cmpsb   ;Compare the two strings
  2399 00003AEF 5E                  <1>     pop rsi
  2400 00003AF0 85C9                <1>     test ecx, ecx
  2401 00003AF2 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  2402 00003AF4 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  2403 00003AF7 FFCA                <1>     dec edx         ;Else one less extension type to check
  2404 00003AF9 75EC                <1>     jnz .extLp
  2405                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  2406                              <1>     ;If not, error.
  2407 00003AFB B903000000          <1>     mov ecx, 3
  2408 00003B00 4889F7              <1>     mov rdi, rsi
  2409 00003B03 B020                <1>     mov al, SPC
  2410 00003B05 F3AE                <1>     rep scasb   
  2411 00003B07 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  2412 00003B09 0F855CE3FFFF        <1>     jnz badCmdError    ;If not, error!
  2413                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  2414 00003B0F 488D35C9D3FFFF      <1>     lea rsi, extStr
  2415 00003B16 BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  2416                              <1> .extSrchLp:
  2417 00003B1B 488D3DDCC5FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2418 00003B22 B903000000          <1>     mov ecx, 3
  2419 00003B27 F3A4                <1>     rep movsb   ;Copy the extension over!
  2420 00003B29 E846010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  2421 00003B2E 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  2422 00003B30 FFCB                <1>     dec ebx                 ;Decrement extension counter
  2423 00003B32 75E7                <1>     jnz .extSrchLp
  2424                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  2425                              <1> ; we start prepending path componants and trying again. To do this, we reset
  2426                              <1> ; by setting the fcb extension back to all spaces.
  2427 00003B34 488D3DC3C5FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2428 00003B3B B903000000          <1>     mov ecx, 3
  2429 00003B40 B020                <1>     mov al, SPC
  2430 00003B42 F3AA                <1>     rep stosb   ;Store back the empty extension!
  2431 00003B44 EB70                <1>     jmp short .pathHandle
  2432                              <1> .extFnd:
  2433                              <1> ;Here if the file had the right extension.
  2434 00003B46 E829010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  2435 00003B4B 7269                <1>     jc .pathHandle
  2436                              <1> .extSrchFnd:
  2437                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  2438                              <1> ; a BAT. If it is, separate handling!
  2439 00003B4D 803DAAC5FFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  2440 00003B54 0F84ABDFFFFF        <1>     je batLaunch
  2441 00003B5A 488D1DCFC5FFFF      <1>     lea rbx, launchBlock
  2442 00003B61 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  2443 00003B65 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  2444 00003B68 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  2445 00003B6F 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  2446 00003B73 498D405C            <1>     lea rax, qword [r8 + fcb1]
  2447 00003B77 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  2448 00003B7B 498D406C            <1>     lea rax, qword [r8 + fcb2]
  2449 00003B7F 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  2450 00003B83 488D154CC7FFFF      <1>     lea rdx, cmdPathSpec
  2451 00003B8A B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  2452 00003B8F CD21                <1>     int 21h
  2453                              <1> ;If the program failed to start, verify why!
  2454 00003B91 B800590000          <1>     mov eax, 5900h      ;Get extended error
  2455 00003B96 31DB                <1>     xor ebx, ebx
  2456 00003B98 CD21                <1>     int 21h
  2457 00003B9A 6689056CC4FFFF      <1>     mov word [returnCode], ax   ;Error code from EXEC
  2458 00003BA1 3C05                <1>     cmp al, errAccDen   ;Access denied?
  2459 00003BA3 0F8477E2FFFF        <1>     je badAccError
  2460 00003BA9 3C07                <1>     cmp al, errMCBbad   ;If MCB bad error, freeze PC
  2461 00003BAB 0F847B0B0000        <1>     je freezePC
  2462 00003BB1 E9B5E2FFFF          <1>     jmp badCmdError     ;If something goes wrong, error out
  2463                              <1> .pathHandle:        
  2464                              <1> ;First check if rbp is null. If it is, its a first time entry. 
  2465                              <1> ;al has error code!
  2466 00003BB6 4885ED              <1>     test rbp, rbp
  2467 00003BB9 0F85A3000000        <1>     jnz .pathReentry
  2468                              <1> ;Now check if the command we recieved included an absolute path.
  2469                              <1> ;If so, we don't do path substitution and just fail at this point
  2470 00003BBF 488D3510C7FFFF      <1>     lea rsi, cmdPathSpec
  2471 00003BC6 66AD                <1>     lodsw   ;Get the first two chars
  2472 00003BC8 3A054BC4FFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  2473 00003BCE 0F8497E2FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2474 00003BD4 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  2475 00003BD6 7412                <1>     je .pathGetEnv
  2476 00003BD8 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  2477 00003BDB 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  2478 00003BDD AC                  <1>     lodsb   ;Get the third char
  2479 00003BDE 3A0535C4FFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  2480 00003BE4 0F8481E2FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2481                              <1> .pathGetEnv:
  2482                              <1> ;Now get a pointer to the environment and search for PATH=
  2483                              <1> ;We only take the final portion of the path and add it to each path componant
  2484                              <1> ;This agrees with DOS 3.3
  2485 00003BEA E8B90B0000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  2486 00003BEF 0F8476E2FFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  2487                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  2488                              <1>     ;Now we know we dont have to keep track of chars!!
  2489 00003BF5 488D3D05D3FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  2490 00003BFC E8010C0000          <1>     call searchForEnvVar
  2491 00003C01 0F8264E2FFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
  2492 00003C07 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
  2493 00003C0A 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
  2494                              <1> .pathRejoin:
  2495 00003C11 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  2496 00003C14 0F8451E2FFFF        <1>     je badCmdError      ;Empty or no more path? Error!
  2497 00003C1A 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
  2498 00003C1D 488D3D5BC8FFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  2499                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
  2500                              <1>     ;SHOULD CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
  2501                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
  2502                              <1>     ;This is impossible to do if env edited by COMMAND.COM
  2503 00003C24 E89C090000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
  2504 00003C29 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  2505 00003C2C 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  2506 00003C2F 48FFCF              <1>     dec rdi ;Point to the null terminator
  2507 00003C32 8A05E1C3FFFF        <1>     mov al, byte [pathSep]
  2508 00003C38 3847FF              <1>     cmp byte [rdi - 1], al
  2509 00003C3B 7401                <1>     je .skipPathsep ;Need for rootdir as a double slash start is a netpath
  2510 00003C3D AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  2511                              <1> .skipPathsep: ;Affects double slashes in path (but thats ok)
  2512 00003C3E 488D35B1C4FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2513 00003C45 E83B090000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  2514 00003C4A 488D352EC8FFFF      <1>     lea rsi, searchSpec 
  2515 00003C51 488D3D7EC6FFFF      <1>     lea rdi, cmdPathSpec
  2516 00003C58 E80F080000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  2517 00003C5D E972FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  2518                              <1> .pathReentry:
  2519 00003C62 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  2520 00003C66 0F84FFE1FFFF        <1>     je badCmdError
  2521                              <1> ;Currently, because we dont swap drives, we wont print this message.
  2522                              <1> ;Not really a big deal...
  2523                              <1>     ;cmp al, errBadDrv
  2524                              <1>     ;jne .pathDrvOk
  2525                              <1>     ;lea rdx, badDrvSrch ;Print the drive was invalid!
  2526                              <1>     ;mov eax, 0900h
  2527                              <1>     ;int 21h
  2528                              <1> ;.pathDrvOk:
  2529 00003C6C 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  2530 00003C6F 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  2531 00003C72 EB9D                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  2532                              <1> 
  2533                              <1> .prepAndSearch:
  2534                              <1> ;Copies over the name and extension in UC to the last componant of the 
  2535                              <1> ;cmdPathSpec and null terminates. 
  2536                              <1> ;Input: cmdFcb name + ext setup. 
  2537                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  2538                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
  2539 00003C74 51                  <1>     push rcx
  2540 00003C75 56                  <1>     push rsi
  2541 00003C76 57                  <1>     push rdi
  2542 00003C77 488D3D58C6FFFF      <1>     lea rdi, cmdPathSpec 
  2543 00003C7E 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  2544 00003C81 E8DB080000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  2545 00003C86 807F013A            <1>     cmp byte [rdi + 1], ":"
  2546 00003C8A 7507                <1>     jne .notdriveRel
  2547 00003C8C 4881C702000000      <1>     add rdi, 2  ;Go past the drive specifier, but keep it!
  2548                              <1> .notdriveRel:
  2549 00003C93 488D355CC4FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2550 00003C9A E8E6080000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  2551 00003C9F B8004E0000          <1>     mov eax, 4E00h  ;Find first
  2552 00003CA4 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  2553 00003CA6 CD21                <1>     int 21h
  2554 00003CA8 5F                  <1>     pop rdi
  2555 00003CA9 5E                  <1>     pop rsi
  2556 00003CAA 59                  <1>     pop rcx
  2557                              <1>     return
    13                              <2> %%_ret:
    14 00003CAB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2558                              <1> 
  2559                              <1> set:
  2560 00003CAC F605E0C3FFFFFF      <1>     test byte [arg1Flg], -1
  2561 00003CB3 7539                <1>     jnz .editEnv
  2562                              <1>     ;Here we just print the environment.
  2563 00003CB5 E8EE0A0000          <1>     call checkEnvGoodAndGet 
  2564 00003CBA 0F8457E1FFFF        <1>     jz badEnvSpaceError
  2565                              <1>     ;We know this is a good env so keep going! env ptr in rsi
  2566 00003CC0 4889F7              <1>     mov rdi, rsi
  2567 00003CC3 4889F2              <1>     mov rdx, rsi
  2568                              <1> .findLp:
  2569 00003CC6 B9FFFFFFFF          <1>     mov ecx, -1
  2570 00003CCB 31C0                <1>     xor eax, eax
  2571                              <1> .scanLp:
  2572 00003CCD F2AE                <1>     repne scasb
  2573 00003CCF 75FC                <1>     jne .scanLp
  2574 00003CD1 F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
  2575                              <1>     ;Else, we now print this environment variable and CRLF it
  2576                              <1>     ;rdx points to the start of the string aleady
  2577                              <1>     ;ecx has the bytes to print
  2578 00003CD3 BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
  2579 00003CD8 B800400000          <1>     mov eax, 4000h  ;Print to handle
  2580 00003CDD CD21                <1>     int 21h
  2581 00003CDF E886050000          <1>     call printCRLF
  2582 00003CE4 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
  2583                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003CE7 74(AB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2584 00003CE9 4889FA              <1>     mov rdx, rdi   
  2585 00003CEC EBD8                <1>     jmp short .findLp
  2586                              <1> .editEnv:
  2587 00003CEE E8B50A0000          <1>     call checkEnvGoodAndGet
  2588 00003CF3 0F841EE1FFFF        <1>     jz badEnvSpaceError
  2589 00003CF9 0FB60594C3FFFF      <1>     movzx eax, byte [arg1Off]
  2590 00003D00 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2591 00003D07 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
  2592                              <1> .altEp:
  2593 00003D0A 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
  2594 00003D0D B00D                <1>     mov al, CR              ;Search for the CR
  2595 00003D0F 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
  2596 00003D17 89CB                <1>     mov ebx, ecx            ;Save this count 
  2597 00003D19 53                  <1>     push rbx                ;Save this count on the stack too!
  2598 00003D1A F2AE                <1>     repne scasb             ;Now get the length of this env string
  2599 00003D1C 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
  2600 00003D1E 66891D5CCAFFFF      <1>     mov word [envVarSz], bx ;Store the count
  2601 00003D25 59                  <1>     pop rcx                 ;Get the char count back!
  2602 00003D26 89CB                <1>     mov ebx, ecx            
  2603 00003D28 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
  2604 00003D2B B03D                <1>     mov al, "="             ;Scan for an equals sign
  2605 00003D2D F2AE                <1>     repne scasb
  2606 00003D2F 0F85D9E0FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
  2607 00003D35 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
  2608 00003D37 66891D45CAFFFF      <1>     mov word [envVarNamSz], bx
  2609 00003D3E 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
  2610 00003D41 7477                <1>     je .delEnvVar           ;Free the envvar and return
  2611 00003D43 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
  2612 00003D44 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2613 00003D47 E8B60A0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2614 00003D4C 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
  2615 00003D4E E8DD0A0000          <1>     call envFree            ;Free the var in rsi
  2616                              <1> .editNewEnv:
  2617 00003D53 E8110B0000          <1>     call getFreeSpace       ;Get the free space in env in ecx
  2618 00003D58 E8310B0000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
  2619 00003D5D 5E                  <1>     pop rsi                 ;Get back the ptr to the string
  2620 00003D5E 31C0                <1>     xor eax, eax            ;Prepare null length!
  2621 00003D60 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
  2622 00003D66 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
  2623 00003D69 720B                <1>     jb .reallocTry          ;Try to reallocate!
  2624 00003D6B FFC9                <1>     dec ecx                 ;Save a byte for end magic null
  2625 00003D6D 663B0D0DCAFFFF      <1>     cmp cx, word [envVarSz] ;Do we have enough space?
  2626 00003D74 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
  2627                              <1> .reallocTry:
  2628                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
  2629                              <1>     ; we proceed with the environment size.
  2630 00003D76 E8280B0000          <1>     call growEnvBlock   ;Attempt to grow the environment
  2631 00003D7B 7319                <1>     jnc .reallocOk
  2632 00003D7D 0F8494E0FFFF        <1>     jz badEnvSpaceError    ;Max environment space
  2633                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
  2634                              <1>     ; partially the variable into the env. If so we do that. If the name
  2635                              <1>     ; cannot fit, we don't bother
  2636                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
  2637 00003D83 663B0DF9C9FFFF      <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
  2638                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00003D8A 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00003D8C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2639 00003D8D E885E0FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
  2640 00003D92 FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
  2641 00003D94 EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
  2642                              <1> .reallocOk:
  2643                              <1>     ;Here we have all the space to just copy the full path
  2644 00003D96 0FB70DE4C9FFFF      <1>     movzx ecx, word [envVarSz]
  2645                              <1> .nameCp:
  2646                              <1> ;Now copy over the env var, ecx = #ofchars to copy
  2647                              <1> ;Always enough memory for name= here
  2648 00003D9D AC                  <1>     lodsb
  2649 00003D9E E8EC060000          <1>     call ucChar
  2650 00003DA3 AA                  <1>     stosb
  2651 00003DA4 66FFC9              <1>     dec cx      ;Always decrement this count
  2652 00003DA7 3C3D                <1>     cmp al, "="
  2653 00003DA9 75F2                <1>     jne .nameCp
  2654                              <1> .exitNameCp:
  2655 00003DAB AC                  <1>     lodsb
  2656 00003DAC 3C0D                <1>     cmp al, CR
  2657 00003DAE 7405                <1>     je .exitCp
  2658 00003DB0 AA                  <1>     stosb
  2659 00003DB1 FFC9                <1>     dec ecx
  2660 00003DB3 75F6                <1>     jnz .exitNameCp
  2661                              <1> .exitCp:
  2662 00003DB5 31C0                <1>     xor eax, eax
  2663 00003DB7 66AB                <1>     stosw   ;Store the final null word
  2664                              <1>     return
    13                              <2> %%_ret:
    14 00003DB9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2665                              <1> .delEnvVar:
  2666                              <1>     ;rsi -> Start of the envvar name in user buffer
  2667 00003DBA 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2668 00003DBD E8400A0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2669 00003DC2 7205                <1>     jc .delEnvVarSkip
  2670 00003DC4 E8670A0000          <1>     call envFree    ;Free the env var at rsi
  2671                              <1> .delEnvVarSkip:
  2672 00003DC9 F8                  <1>     clc             ;Clear CF if the var doesnt exist
  2673                              <1>     return
    13                              <2> %%_ret:
    14 00003DCA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2674                              <1> 
  2675                              <1> pathEdit:
  2676                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
  2677                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
  2678                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
  2679                              <1> ; end there. Error with too many arguments error!
  2680                              <1> ;If after the equals sign there is nothing, we just print the path!
  2681                              <1> ;Gotta process the command line ourselves first
  2682 00003DCB E8D8090000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2683 00003DD0 0F8441E0FFFF        <1>     jz badEnvSpaceError
  2684                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2685 00003DD6 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2686 00003DDD E8AD000000          <1>     call .skipPathDelimiters
  2687 00003DE2 3C0D                <1>     cmp al, CR
  2688 00003DE4 7466                <1>     je .printPath
  2689                              <1> ;Else use the set command to setup the path in the searchSpec.
  2690 00003DE6 56                  <1>     push rsi    ;Save the first char of the command line string
  2691 00003DE7 488D3513D1FFFF      <1>     lea rsi, pathEVar
  2692 00003DEE 488D3D8AC6FFFF      <1>     lea rdi, searchSpec
  2693 00003DF5 E872060000          <1>     call strcpy
  2694 00003DFA 48FFCF              <1>     dec rdi     ;Point to the terminating null
  2695 00003DFD 5E                  <1>     pop rsi     ;Get back the first char of the pathstring
  2696 00003DFE 31C9                <1>     xor ecx, ecx    ;Make a count of chars
  2697                              <1> .cpLp:
  2698 00003E00 AC                  <1>     lodsb
  2699 00003E01 3C0D                <1>     cmp al, CR
  2700 00003E03 7411                <1>     je .cpLpExit
  2701 00003E05 E891000000          <1>     call .isALPathDelimiter ;Any path delims now are exit conditions!
  2702 00003E0A 740A                <1>     je .cpLpExit
  2703 00003E0C E87E060000          <1>     call ucChar ;Uppercase the char
  2704 00003E11 AA                  <1>     stosb       ;Store it
  2705 00003E12 FFC1                <1>     inc ecx     ;Inc the count, CR not inclusive!
  2706 00003E14 EBEA                <1>     jmp short .cpLp
  2707                              <1> .cpLpExit:
  2708                              <1>     ;Remove trailing semicolons
  2709 00003E16 807FFF3B            <1>     cmp byte [rdi - 1], ";" ;Check back a char
  2710 00003E1A 7507                <1>     jne .cpLpNoIntervene
  2711 00003E1C FFC9                <1>     dec ecx     ;Reduce the count by one
  2712 00003E1E 48FFCF              <1>     dec rdi     ;Go back a char
  2713 00003E21 EBF3                <1>     jmp short .cpLpExit ;Keep removing
  2714                              <1> .cpLpNoIntervene:
  2715 00003E23 B00D                <1>     mov al, CR  ;Now we store the terminator!
  2716 00003E25 AA                  <1>     stosb       ;Store it!
  2717 00003E26 81C105000000        <1>     add ecx, 5  ;PATH= is 5 chars
  2718 00003E2C 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count
  2719 00003E33 FFC1                <1>     inc ecx     ;Add the CR for copying over
  2720 00003E35 488D3543C6FFFF      <1>     lea rsi, searchSpec
  2721 00003E3C 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2722 00003E43 57                  <1>     push rdi
  2723 00003E44 F3A4                <1>     rep movsb
  2724 00003E46 5E                  <1>     pop rsi         ;Get the ptr to the cmdline in rsi
  2725 00003E47 E9BEFEFFFF          <1>     jmp set.altEp   ;We've now set the string up, lets go!
  2726                              <1> .printPath:
  2727 00003E4C 488D3DAED0FFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
  2728 00003E53 E8AA090000          <1>     call searchForEnvVar    ;Returns ptr to env var in rsi
  2729 00003E58 7221                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
  2730 00003E5A 4889F7              <1>     mov rdi, rsi        
  2731 00003E5D E823060000          <1>     call strlen         ;Get the length of the path in rdi
  2732 00003E62 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
  2733 00003E68 7411                <1>     je .noPathPrnt      ;Print no path!
  2734 00003E6A FFC9                <1>     dec ecx             ;Drop the terminating null from the count
  2735 00003E6C 4889FA              <1>     mov rdx, rdi        ;Set path ptr for printing
  2736 00003E6F BB01000000          <1>     mov ebx, 1          ;STDOUT
  2737 00003E74 B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
  2738 00003E79 EB0C                <1>     jmp short .pathExit
  2739                              <1> .noPathPrnt:
  2740 00003E7B 488D156BCDFFFF      <1>     lea rdx, noPath
  2741 00003E82 B800090000          <1>     mov eax, 0900h
  2742                              <1> .pathExit:
  2743 00003E87 CD21                <1>     int 21h
  2744 00003E89 E8DC030000          <1>     call printCRLF      ;Print a crlf at the end
  2745                              <1>     return
    13                              <2> %%_ret:
    14 00003E8E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2746                              <1> .skipPathDelimiters:
  2747                              <1> ;Input: rsi -> Start of string to parse
  2748                              <1> ;Output: rsi -> First non-delimiter char of string
  2749                              <1> ;        al = First non delim char
  2750 00003E8F AC                  <1>     lodsb
  2751 00003E90 E806000000          <1>     call .isALPathDelimiter
  2752 00003E95 74F8                <1>     je .skipPathDelimiters
  2753 00003E97 48FFCE              <1>     dec rsi
  2754                              <1>     return
    13                              <2> %%_ret:
    14 00003E9A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2755                              <1> .isALPathDelimiter:
  2756                              <1> ;Same as before without semicolon
  2757 00003E9B 3C20                <1>     cmp al, SPC
  2758                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003E9D 74(9A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2759 00003E9F 3C09                <1>     cmp al, TAB
  2760                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003EA1 74(9A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2761 00003EA3 3C2C                <1>     cmp al, ","
  2762                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003EA5 74(9A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2763 00003EA7 3C3D                <1>     cmp al, "="
  2764                              <1>     return
    13                              <2> %%_ret:
    14 00003EA9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2765                              <1> 
  2766                              <1> prompt:
  2767 00003EAA E8F9080000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2768 00003EAF 0F8462DFFFFF        <1>     jz badEnvSpaceError
  2769                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2770 00003EB5 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2771 00003EBC E8E9050000          <1>     call skipDelimiters ;Points rsi to the first non-delimiter char
  2772 00003EC1 803E0D              <1>     cmp byte [rsi], CR  ;Is the first non-delim a CR?
  2773 00003EC4 742C                <1>     je .reset   ;Reset if so
  2774 00003EC6 56                  <1>     push rsi    ;Save ptr to the start of the user typed line
  2775 00003EC7 488D3509D0FFFF      <1>     lea rsi, promptEVar ;Copy the PROMPT= prefix to searchspec
  2776 00003ECE 488D3DAAC5FFFF      <1>     lea rdi, searchSpec
  2777 00003ED5 B907000000          <1>     mov ecx, 7  ;Copy without <CR>
  2778 00003EDA F3A4                <1>     rep movsb
  2779 00003EDC 5E                  <1>     pop rsi ;Get back ptr to the user typed line
  2780 00003EDD 31C9                <1>     xor ecx, ecx    ;Get char count
  2781                              <1> .cp:    ;Now copy the user string over
  2782 00003EDF AC                  <1>     lodsb
  2783 00003EE0 AA                  <1>     stosb 
  2784 00003EE1 3C0D                <1>     cmp al, CR
  2785 00003EE3 7404                <1>     je .cpOk
  2786 00003EE5 FFC1                <1>     inc ecx ;Increment count if non CR char copied over
  2787 00003EE7 EBF6                <1>     jmp short .cp
  2788                              <1> .cpOk:
  2789 00003EE9 488D358FC5FFFF      <1>     lea rsi, searchSpec ;Source the string from here
  2790 00003EF0 EB09                <1>     jmp short .goSet    ;Got the CR-less count
  2791                              <1> .reset:
  2792                              <1> ;Delete the environment variable!
  2793 00003EF2 488D35DECFFFFF      <1>     lea rsi, promptEVar 
  2794 00003EF9 31C9                <1>     xor ecx, ecx    ;No chars to write to the envstring
  2795                              <1> .goSet:
  2796 00003EFB 81C107000000        <1>     add ecx, 7  ;Add the chars for the prompt= string too
  2797 00003F01 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl 
  2798 00003F08 FFC1                <1>     inc ecx     ;Include CR in copy
  2799 00003F0A 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2800 00003F11 57                  <1>     push rdi
  2801 00003F12 F3A4                <1>     rep movsb
  2802 00003F14 5E                  <1>     pop rsi
  2803 00003F15 E9F0FDFFFF          <1>     jmp set.altEp
  2804                              <1> 
  2805                              <1> echo:
  2806 00003F1A F60572C1FFFFFF      <1>     test byte [arg1Flg], -1 ;If no argument, display if on or off
  2807 00003F21 752A                <1>     jnz .argGiven
  2808 00003F23 488D15B4CDFFFF      <1>     lea rdx, echoIs
  2809 00003F2A E842030000          <1>     call printString
  2810 00003F2F 488D158ECDFFFF      <1>     lea rdx, onMes
  2811 00003F36 488D0D81CDFFFF      <1>     lea rcx, offMes
  2812 00003F3D F60541C1FFFFFF      <1>     test byte [echoFlg], -1
  2813 00003F44 480F44D1            <1>     cmovz rdx, rcx
  2814 00003F48 E924030000          <1>     jmp printString
  2815                              <1> .argGiven:
  2816 00003F4D 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2817 00003F54 0FB60539C1FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the offset
  2818 00003F5B 4801C6              <1>     add rsi, rax
  2819 00003F5E AC                  <1>     lodsb   ;Get this char
  2820 00003F5F 48FFCE              <1>     dec rsi ;And go back to the start of the string
  2821 00003F62 E828050000          <1>     call ucChar
  2822 00003F67 3C4F                <1>     cmp al, "O" ;Was it an O? If not, direct copy
  2823 00003F69 755A                <1>     jne .directEcho
  2824 00003F6B 8A4601              <1>     mov al, byte [rsi + 1]  ;Get the next char
  2825 00003F6E E81C050000          <1>     call ucChar
  2826 00003F73 3C4E                <1>     cmp al, "N" ;If its N, check its the last char on the string
  2827 00003F75 751B                <1>     jne .checkOff
  2828 00003F77 56                  <1>     push rsi
  2829 00003F78 4881C602000000      <1>     add rsi, 2  ;Go past on string
  2830 00003F7F E826050000          <1>     call skipDelimiters
  2831 00003F84 803E0D              <1>     cmp byte [rsi], CR
  2832 00003F87 5E                  <1>     pop rsi
  2833 00003F88 753B                <1>     jne .directEcho ;If its not, just echo the string
  2834 00003F8A C605F4C0FFFF01      <1>     mov byte [echoFlg], 1   ;Set to 1 if on
  2835                              <1>     return
    13                              <2> %%_ret:
    14 00003F91 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2836                              <1> .checkOff:
  2837 00003F92 8A4601              <1>     mov al, byte [rsi + 1]  ;Get first char past O
  2838 00003F95 E8F5040000          <1>     call ucChar
  2839 00003F9A 3C46                <1>     cmp al, "F" ;Is it an F?
  2840 00003F9C 7527                <1>     jne .directEcho ;No, just direct echo
  2841 00003F9E 8A4602              <1>     mov al, byte [rsi + 2]
  2842 00003FA1 E8E9040000          <1>     call ucChar
  2843 00003FA6 3C46                <1>     cmp al, "F"
  2844 00003FA8 751B                <1>     jne .directEcho
  2845 00003FAA 56                  <1>     push rsi
  2846 00003FAB 4881C603000000      <1>     add rsi, 3
  2847 00003FB2 E8F3040000          <1>     call skipDelimiters
  2848 00003FB7 803E0D              <1>     cmp byte [rsi], CR
  2849 00003FBA 5E                  <1>     pop rsi
  2850 00003FBB 7508                <1>     jne .directEcho
  2851 00003FBD C605C1C0FFFF00      <1>     mov byte [echoFlg], 0
  2852                              <1>     return
    13                              <2> %%_ret:
    14 00003FC4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2853                              <1> .directEcho: 
  2854 00003FC5 AC                  <1>     lodsb
  2855 00003FC6 3C0D                <1>     cmp al, CR
  2856 00003FC8 0F849C020000        <1>     je printCRLF    ;Prints a crlf and returns
  2857 00003FCE 88C2                <1>     mov dl, al
  2858 00003FD0 E80C030000          <1>     call outChar
  2859 00003FD5 EBEE                <1>     jmp short .directEcho
  2860                              <1> 
  2861                              <1> pauza:  ;Well... pause is an instruction in english 0:)
  2862                              <1> ;Thank you authors of MSDOS Encyclopedia for confusing an argument to this command
  2863                              <1> ; with just... the actual command tail being echoed with the command -_-
  2864 00003FD7 F605A7C0FFFFFF      <1>     test byte [echoFlg], -1
  2865 00003FDE 7528                <1>     jnz .echoTail
  2866                              <1> ;Since we havent echoed the command out, type the tail out manually
  2867 00003FE0 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
  2868 00003FE7 E8BE040000          <1>     call skipDelimiters ;Skip leading delims
  2869 00003FEC 4889F2              <1>     mov rdx, rsi
  2870 00003FEF 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get the count
  2871 00003FF7 BB01000000          <1>     mov ebx, 1  ;Echo to STDOUT 
  2872 00003FFC B800400000          <1>     mov eax, 4000h  ;Write
  2873 00004001 CD21                <1>     int 21h
  2874 00004003 E862020000          <1>     call printCRLF
  2875                              <1> .echoTail:
  2876 00004008 488D1546CAFFFF      <1>     lea rdx, pauseMes
  2877 0000400F E85D020000          <1>     call printString
  2878 00004014 B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Triggers ^C
  2879 00004019 CD21                <1>     int 21h
  2880 0000401B E84A020000          <1>     call printCRLF
  2881                              <1> remark:
  2882                              <1>     return
    13                              <2> %%_ret:
    14 00004020 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printDate:
     4                              <1> ;Input: eax = Packed Date
     5                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
     6                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
     7                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
     8                              <1> ;       ebx = 0 => Print two digit year
     9                              <1> ;       ebx = 1 => Print four digit year
    10 00004021 53                  <1>     push rbx
    11 00004022 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    12 00004024 803DF0BFFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    13 0000402B 7240                <1>     jb .usDate
    14 0000402D 777C                <1>     ja .jpnDate
    15                              <1> ;European: DD/MM/YY
    16 0000402F 251F000000          <1>     and eax, 1Fh    ;Save day bits
    17 00004034 E8B0000000          <1>     call .printFirst
    18 00004039 8A15E7BFFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    19 0000403F B402                <1>     mov ah, 02h
    20 00004041 CD21                <1>     int 21h
    21                              <1> 
    22 00004043 89C8                <1>     mov eax, ecx
    23 00004045 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    24 0000404A C1E805              <1>     shr eax, 5
    25 0000404D E8B3000000          <1>     call .printSecond
    26                              <1> 
    27 00004052 8A15CEBFFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    28 00004058 B402                <1>     mov ah, 02h
    29 0000405A CD21                <1>     int 21h
    30                              <1> 
    31 0000405C 89C8                <1>     mov eax, ecx
    32 0000405E 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    33 00004063 C1E809              <1>     shr eax, 9
    34 00004066 5B                  <1>     pop rbx ;Get the year signature back
    35 00004067 E8A9000000          <1>     call .printYear
    36                              <1>     return
    13                              <2> %%_ret:
    14 0000406C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                              <1> .usDate:
    38                              <1> ;US: MM/DD/YY
    39 0000406D 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    40 00004072 C1E805              <1>     shr eax, 5
    41 00004075 E86F000000          <1>     call .printFirst
    42                              <1> 
    43 0000407A 8A15A6BFFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    44 00004080 B402                <1>     mov ah, 02h
    45 00004082 CD21                <1>     int 21h
    46                              <1> 
    47 00004084 89C8                <1>     mov eax, ecx
    48 00004086 251F000000          <1>     and eax, 1Fh    ;Save day bits
    49 0000408B E875000000          <1>     call .printSecond
    50                              <1> 
    51 00004090 8A1590BFFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 00004096 B402                <1>     mov ah, 02h
    53 00004098 CD21                <1>     int 21h
    54                              <1> 
    55 0000409A 89C8                <1>     mov eax, ecx
    56 0000409C 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 000040A1 C1E809              <1>     shr eax, 9
    58 000040A4 5B                  <1>     pop rbx ;Get the year signature back
    59 000040A5 E86B000000          <1>     call .printYear
    60                              <1>     return
    13                              <2> %%_ret:
    14 000040AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> .jpnDate:
    62                              <1> ;Japan: YY/MM/DD
    63 000040AB 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 000040B0 C1E809              <1>     shr eax, 9
    65 000040B3 5B                  <1>     pop rbx ;Get the year signature back
    66 000040B4 E85C000000          <1>     call .printYear
    67                              <1> 
    68 000040B9 8A1567BFFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    69 000040BF B402                <1>     mov ah, 02h
    70 000040C1 CD21                <1>     int 21h
    71                              <1> 
    72 000040C3 89C8                <1>     mov eax, ecx
    73 000040C5 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    74 000040CA C1E805              <1>     shr eax, 5
    75 000040CD E833000000          <1>     call .printSecond
    76                              <1> 
    77 000040D2 8A154EBFFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    78 000040D8 B402                <1>     mov ah, 02h
    79 000040DA CD21                <1>     int 21h
    80                              <1> 
    81 000040DC 89C8                <1>     mov eax, ecx
    82 000040DE 251F000000          <1>     and eax, 1Fh    ;Save day bits
    83 000040E3 E81D000000          <1>     call .printSecond
    84                              <1>     return
    13                              <2> %%_ret:
    14 000040E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> ;Each of these require eax setup correctly
    87                              <1> .printFirst:
    88 000040E9 51                  <1>     push rcx
    89 000040EA E8D9050000          <1>     call getDecimalWord
    90 000040EF 84ED                <1>     test ch, ch ;Do we have an upper digit?
    91 000040F1 7504                <1>     jnz .skipSpace
    92 000040F3 88CD                <1>     mov ch, cl
    93 000040F5 B120                <1>     mov cl, " "
    94                              <1> .skipSpace:
    95 000040F7 88CA                <1>     mov dl, cl
    96 000040F9 B402                <1>     mov ah, 02h
    97 000040FB CD21                <1>     int 21h
    98 000040FD 88EA                <1>     mov dl, ch
    99 000040FF B402                <1>     mov ah, 02h
   100 00004101 CD21                <1>     int 21h
   101 00004103 59                  <1>     pop rcx
   102                              <1>     return
    13                              <2> %%_ret:
    14 00004104 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .printSecond:
   104 00004105 51                  <1>     push rcx
   105 00004106 E8BD050000          <1>     call getDecimalWord
   106 0000410B 84ED                <1>     test ch, ch ;Do we have an upper digit?
   107 0000410D 75E8                <1>     jnz .skipSpace
   108 0000410F 88CD                <1>     mov ch, cl
   109 00004111 B130                <1>     mov cl, "0"
   110 00004113 EBE2                <1>     jmp short .skipSpace
   111                              <1> .printYear:
   112 00004115 05BC070000          <1>     add eax, 1980
   113 0000411A 51                  <1>     push rcx
   114 0000411B 53                  <1>     push rbx
   115 0000411C E8A7050000          <1>     call getDecimalWord ;Get unpacked in rcx
   116 00004121 5B                  <1>     pop rbx
   117 00004122 84DB                <1>     test bl, bl
   118 00004124 740C                <1>     jz .twoDigitYear
   119 00004126 88CA                <1>     mov dl, cl  ;Print the first digit
   120 00004128 B402                <1>     mov ah, 02h
   121 0000412A CD21                <1>     int 21h
   122 0000412C 88EA                <1>     mov dl, ch  ;Print the second digit
   123 0000412E B402                <1>     mov ah, 02h
   124 00004130 CD21                <1>     int 21h
   125                              <1> .twoDigitYear:
   126 00004132 C1E910              <1>     shr ecx, 10h    ;Get high word low
   127 00004135 88CA                <1>     mov dl, cl  ;Print the upper digit
   128 00004137 B402                <1>     mov ah, 02h
   129 00004139 CD21                <1>     int 21h
   130 0000413B 88EA                <1>     mov dl, ch  ;Print the lower digit
   131 0000413D B402                <1>     mov ah, 02h
   132 0000413F CD21                <1>     int 21h
   133 00004141 59                  <1>     pop rcx
   134                              <1>     return
    13                              <2> %%_ret:
    14 00004142 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> 
   137                              <1> printTime:
   138                              <1> ;Input: eax = Packed Time
   139                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   140                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   141 00004143 89C1                <1>     mov ecx, eax
   142 00004145 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   143 0000414A C1E80B              <1>     shr eax, 11
   144 0000414D 803DD8BEFFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   145 00004154 750B                <1>     jne .ampm
   146 00004156 E85A000000          <1>     call .printHours
   147 0000415B E831000000          <1>     call .printMinutes
   148                              <1>     return
    13                              <2> %%_ret:
    14 00004160 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> .ampm:
   150 00004161 3D0C000000          <1>     cmp eax, 12
   151 00004166 7713                <1>     ja .pm
   152 00004168 7416                <1>     je .pm2
   153 0000416A E846000000          <1>     call .printHours
   154 0000416F E81D000000          <1>     call .printMinutes
   155 00004174 B261                <1>     mov dl, "a"
   156 00004176 B402                <1>     mov ah, 02h
   157 00004178 CD21                <1>     int 21h
   158                              <1>     return
    13                              <2> %%_ret:
    14 0000417A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> .pm:
   160 0000417B 2D0C000000          <1>     sub eax, 12
   161                              <1> .pm2:
   162 00004180 E830000000          <1>     call .printHours
   163 00004185 E807000000          <1>     call .printMinutes
   164 0000418A B270                <1>     mov dl, "p"
   165 0000418C B402                <1>     mov ah, 02h
   166 0000418E CD21                <1>     int 21h
   167                              <1>     return
    13                              <2> %%_ret:
    14 00004190 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   168                              <1> .printMinutes:
   169 00004191 8A1591BEFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   170 00004197 B402                <1>     mov ah, 02h
   171 00004199 CD21                <1>     int 21h
   172                              <1> 
   173 0000419B 89C8                <1>     mov eax, ecx
   174 0000419D 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   175 000041A2 C1E805              <1>     shr eax, 5
   176                              <1> .printMinutesAlt:
   177 000041A5 51                  <1>     push rcx
   178 000041A6 E81D050000          <1>     call getDecimalWord
   179 000041AB 84ED                <1>     test ch, ch ;Do we have an upper digit?
   180 000041AD 7514                <1>     jnz .skipSpace
   181 000041AF 88CD                <1>     mov ch, cl
   182 000041B1 B130                <1>     mov cl, "0"
   183 000041B3 EB0E                <1>     jmp short .skipSpace
   184                              <1> .printHours:
   185 000041B5 51                  <1>     push rcx
   186 000041B6 E80D050000          <1>     call getDecimalWord
   187 000041BB 84ED                <1>     test ch, ch ;Do we have an upper digit?
   188 000041BD 7504                <1>     jnz .skipSpace
   189 000041BF 88CD                <1>     mov ch, cl
   190 000041C1 B120                <1>     mov cl, " "
   191                              <1> .skipSpace:
   192 000041C3 88CA                <1>     mov dl, cl
   193 000041C5 B402                <1>     mov ah, 02h
   194 000041C7 CD21                <1>     int 21h
   195 000041C9 88EA                <1>     mov dl, ch
   196 000041CB B402                <1>     mov ah, 02h
   197 000041CD CD21                <1>     int 21h
   198 000041CF 59                  <1>     pop rcx
   199                              <1>     return
    13                              <2> %%_ret:
    14 000041D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printPrompt:
   202 000041D1 F605ADBEFFFFFF      <1>     test byte [echoFlg], -1 ;If echo off, no prompt!
   203                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000041D8 74(D0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 000041DA 488D3DF6CCFFFF      <1>     lea rdi, promptEVar   ;Find the prompt var
   205 000041E1 E81C060000          <1>     call searchForEnvVar
   206 000041E6 730B                <1>     jnc .validPrompt
   207                              <1>     ;Here we print the default prompt
   208 000041E8 E8F9000000          <1>     call putCWDInPrompt
   209 000041ED E8C5000000          <1>     call putGTinPrompt
   210                              <1>     return
    13                              <2> %%_ret:
    14 000041F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> .validPrompt:
   212                              <1> ;rsi points to the prompt
   213 000041F3 4881C607000000      <1>     add rsi, 7  ;Go past the prompt= string
   214                              <1> .promptLp:
   215 000041FA AC                  <1>     lodsb   ;Get the char
   216 000041FB 84C0                <1>     test al, al
   217                              <1>     retz    ;Return when al is 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000041FD 74(F2)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   218 000041FF 3C24                <1>     cmp al, "$"
   219 00004201 7409                <1>     je .escapeChar
   220 00004203 88C2                <1>     mov dl, al
   221 00004205 E8D7000000          <1>     call outChar    ;Prints the char in dl
   222 0000420A EBEE                <1>     jmp short .promptLp
   223                              <1> .escapeChar:
   224 0000420C AC                  <1>     lodsb       ;Get the next char now that we are escaping
   225 0000420D E87D020000          <1>     call ucChar ;Uppercase this char in al
   226 00004212 488D1D2A000000      <1>     lea rbx, .pTbl
   227 00004219 B90D000000          <1>     mov ecx, pTblL / 3  ;3 bytes per entry
   228                              <1> .escapeLp:
   229 0000421E 3803                <1>     cmp byte [rbx], al  ;Are we at the right entry?
   230 00004220 740D                <1>     je .escapeFnd
   231 00004222 4881C303000000      <1>     add rbx, 3  ;Go to next entry
   232 00004229 FFC9                <1>     dec ecx
   233 0000422B 75F1                <1>     jnz .escapeLp
   234 0000422D EBCB                <1>     jmp short .promptLp  ;Output nothing if invalid
   235                              <1> .escapeFnd:
   236 0000422F 488D050D000000      <1>     lea rax, .pTbl              ;Get the table addr
   237 00004236 0FB75B01            <1>     movzx ebx, word [rbx + 1]   ;Get the word offset from the table
   238 0000423A 4801D8              <1>     add rax, rbx                ;Add these
   239 0000423D 56                  <1>     push rsi    ;Ensure rsi remains unchanged
   240 0000423E FFD0                <1>     call rax    ;Call indirectly the function to output the chars
   241 00004240 5E                  <1>     pop rsi
   242 00004241 EBB7                <1>     jmp short .promptLp
   243                              <1> 
   244                              <1> ;Easy table to use, 13 entries, 3 bytes per entry
   245                              <1> .pTbl:
   246 00004243 42                  <1>     db "B", 
   247 00004244 7000                <1>     dw putPipeInPrompt - .pTbl     ;Pipe char
   248 00004246 44                  <1>     db "D", 
   249 00004247 5D01                <1>     dw printFmtDate - .pTbl        ;Current date
   250 00004249 45                  <1>     db "E", 
   251 0000424A 6400                <1>     dw putEscInPrompt - .pTbl      ;ANSI Escape char
   252 0000424C 47                  <1>     db "G", 
   253 0000424D 7400                <1>     dw putGTinPrompt - .pTbl       ;Greater than char
   254 0000424F 48                  <1>     db "H", 
   255 00004250 7C00                <1>     dw putBSPinPrompt - .pTbl      ;Backspace
   256 00004252 4C                  <1>     db "L", 
   257 00004253 7800                <1>     dw putLTinPrompt - .pTbl       ;Less than char
   258 00004255 4E                  <1>     db "N", 
   259 00004256 9500                <1>     dw putDriveInPrompt - .pTbl    ;Current drive letter
   260 00004258 50                  <1>     db "P", 
   261 00004259 A300                <1>     dw putCWDInPrompt - .pTbl      ;Current drive and path
   262 0000425B 51                  <1>     db "Q", 
   263 0000425C 6C00                <1>     dw putEquInPrompt - .pTbl      ;Equals char
   264 0000425E 54                  <1>     db "T", 
   265 0000425F F400                <1>     dw printFmtTime - .pTbl        ;Current time in hh:mm:ss.hh fmt
   266 00004261 56                  <1>     db "V", 
   267 00004262 3600                <1>     dw putVersionInPrompt - .pTbl  ;DOS version number
   268 00004264 5F                  <1>     db "_", 
   269 00004265 2700                <1>     dw printCRLF - .pTbl           ;CRLF pair
   270 00004267 24                  <1>     db "$", 
   271 00004268 6800                <1>     dw putMoneyInPrompt - .pTbl    ;Dollar sign
   272                              <1> pTblL equ $ - .pTbl
   273                              <1> 
   274                              <1> printCRLF:
   275 0000426A 488D151FC6FFFF      <1>     lea rdx, crlf
   276                              <1> printString:
   277 00004271 B800090000          <1>     mov eax, 0900h  ;Print string
   278 00004276 CD21                <1>     int 21h
   279                              <1>     return
    13                              <2> %%_ret:
    14 00004278 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   280                              <1> 
   281                              <1> putVersionInPrompt:
   282 00004279 488D15BEC8FFFF      <1>     lea rdx, dosVer
   283 00004280 B409                <1>     mov ah, 09h ;Print String
   284 00004282 CD21                <1>     int 21h
   285 00004284 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   286 00004286 CD21                <1>     int 21h
   287 00004288 50                  <1>     push rax    ;Save minor version
   288 00004289 E884010000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   289 0000428E E89C010000          <1>     call printPackedBCD ;Print al
   290 00004293 B22E                <1>     mov dl, "."
   291 00004295 B402                <1>     mov ah, 02h
   292 00004297 CD21                <1>     int 21h
   293 00004299 58                  <1>     pop rax
   294 0000429A 88E0                <1>     mov al, ah  ;Get the minor version low
   295 0000429C E871010000          <1>     call hexToBCD
   296 000042A1 E889010000          <1>     call printPackedBCD
   297                              <1>     return
    13                              <2> %%_ret:
    14 000042A6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   298                              <1> putEscInPrompt:
   299 000042A7 B21B                <1>     mov dl, ESC
   300 000042A9 EB36                <1>     jmp short outChar
   301                              <1> 
   302                              <1> putMoneyInPrompt:
   303 000042AB B224                <1>     mov dl, "$"
   304 000042AD EB32                <1>     jmp short outChar
   305                              <1> 
   306                              <1> putEquInPrompt:
   307 000042AF B23D                <1>     mov dl, "="
   308 000042B1 EB2E                <1>     jmp short outChar
   309                              <1> 
   310                              <1> putPipeInPrompt:
   311 000042B3 B27C                <1>     mov dl, "|"
   312 000042B5 EB2A                <1>     jmp short outChar
   313                              <1> 
   314                              <1> putGTinPrompt:
   315 000042B7 B23E                <1>     mov dl, ">"
   316 000042B9 EB26                <1>     jmp short outChar
   317                              <1> 
   318                              <1> putLTinPrompt:
   319 000042BB B23C                <1>     mov dl, "<"
   320 000042BD EB22                <1>     jmp short outChar
   321                              <1> 
   322                              <1> putBSPinPrompt:
   323 000042BF 488D1573CAFFFF      <1>     lea rdx, backSpace
   324 000042C6 B903000000          <1>     mov ecx, 3
   325 000042CB BB01000000          <1>     mov ebx, 1
   326 000042D0 B800400000          <1>     mov eax, 4000h  ;Output the backspace!
   327 000042D5 CD21                <1>     int 21h
   328                              <1>     return
    13                              <2> %%_ret:
    14 000042D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   329                              <1> 
   330                              <1> putDriveInPrompt:
   331 000042D8 E88A010000          <1>     call getCurrentDrive
   332 000042DD 0441                <1>     add al, "A" ;Convert to letter
   333 000042DF 88C2                <1>     mov dl, al
   334                              <1> outChar:
   335 000042E1 B402                <1>     mov ah, 02h ;Echo to STDOUT
   336 000042E3 CD21                <1>     int 21h
   337                              <1>     return
    13                              <2> %%_ret:
    14 000042E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   338                              <1> putCWDInPrompt:
   339 000042E6 E87C010000          <1>     call getCurrentDrive
   340 000042EB 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   341 000042ED FEC2                <1>     inc dl
   342 000042EF 0441                <1>     add al, "A" ;Convert to letter
   343 000042F1 B43A                <1>     mov ah, ":"
   344 000042F3 488D3D47BDFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   345 000042FA 66AB                <1>     stosw   ;Store X:, rdi+=2
   346 000042FC 8A0517BDFFFF        <1>     mov al, byte [pathSep]
   347 00004302 AA                  <1>     stosb   ;Store pathSep, inc rdi
   348 00004303 B447                <1>     mov ah, 47h ;Get Current Working Directory
   349 00004305 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   350 00004308 CD21                <1>     int 21h
   351 0000430A 721F                <1>     jc .badDrive
   352 0000430C E874010000          <1>     call strlen
   353 00004311 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   354                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   355 00004317 B800400000          <1>     mov eax, 4000h ;Write to handle
   356 0000431C BB01000000          <1>     mov ebx, 1  ;STDOUT
   357 00004321 488D1519BDFFFF      <1>     lea rdx, currDirStr
   358 00004328 CD21                <1>     int 21h
   359                              <1>     return
    13                              <2> %%_ret:
    14 0000432A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> .badDrive:
   361                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   362 0000432B 488D15D4C8FFFF      <1>     lea rdx, badDrvMsg
   363 00004332 E93AFFFFFF          <1>     jmp printString
   364                              <1> printFmtTime:
   365                              <1> ;Outputs the formatted time
   366 00004337 E847000000          <1>     call getTime
   367 0000433C 0FB6C5              <1>     movzx eax, ch
   368 0000433F E871FEFFFF          <1>     call printTime.printHours
   369 00004344 8A15DEBCFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   370 0000434A B402                <1>     mov ah, 02h
   371 0000434C CD21                <1>     int 21h
   372 0000434E 0FB605F3C2FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   373 00004355 E84BFEFFFF          <1>     call printTime.printMinutesAlt
   374 0000435A 8A15C8BCFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   375 00004360 B402                <1>     mov ah, 02h
   376 00004362 CD21                <1>     int 21h
   377 00004364 0FB605E0C2FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   378 0000436B E835FEFFFF          <1>     call printTime.printMinutesAlt
   379 00004370 B22E                <1>     mov dl, "."
   380 00004372 B402                <1>     mov ah, 02h
   381 00004374 CD21                <1>     int 21h
   382 00004376 0FB605CDC2FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   383 0000437D E823FEFFFF          <1>     call printTime.printMinutesAlt
   384                              <1>     return
    13                              <2> %%_ret:
    14 00004382 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   385                              <1> getTime:
   386 00004383 B42C                <1>     mov ah, 2Ch ;DOS get time
   387 00004385 CD21                <1>     int 21h
   388                              <1>     ;CH = hour (0-23)
   389                              <1> 	;CL = minutes (0-59)
   390                              <1> 	;DH = seconds (0-59)
   391                              <1> 	;DL = hundredths (0-99)
   392 00004387 880DBBC2FFFF        <1>     mov byte [td1], cl
   393 0000438D 882DB6C2FFFF        <1>     mov byte [td2], ch
   394 00004393 8815B1C2FFFF        <1>     mov byte [td3], dl
   395 00004399 8835ACC2FFFF        <1>     mov byte [td4], dh
   396                              <1>     return
    13                              <2> %%_ret:
    14 0000439F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   397                              <1> 
   398                              <1> printFmtDate:
   399                              <1> ;Outputs the formatted date
   400 000043A0 B8002A0000          <1>     mov eax, 2A00h ;DOS get date
   401 000043A5 CD21                <1>     int 21h
   402                              <1> 	;AL = day of the week (0=Sunday)
   403                              <1> 	;CX = year (1980-2099)
   404                              <1> 	;DH = month (1-12)
   405                              <1> 	;DL = day (1-31)
   406 000043A7 6681E9BC07          <1>     sub cx, 1980    ;Subtract 1980 from cx
   407 000043AC 66890D95C2FFFF      <1>     mov word [td1], cx
   408 000043B3 881591C2FFFF        <1>     mov byte [td3], dl
   409 000043B9 88358CC2FFFF        <1>     mov byte [td4], dh
   410 000043BF 0FB6C0              <1>     movzx eax, al
   411 000043C2 89C3                <1>     mov ebx, eax
   412 000043C4 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   413 000043C6 01D8                <1>     add eax, ebx ;Make it 3 times 
   414 000043C8 488D15B9C6FFFF      <1>     lea rdx, dayName
   415 000043CF 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   416 000043D3 B903000000          <1>     mov ecx, 3  ;Print three chars
   417 000043D8 BB01000000          <1>     mov ebx, 1  ;STDOUT
   418 000043DD B440                <1>     mov ah, 40h ;Write to handle
   419 000043DF CD21                <1>     int 21h
   420 000043E1 B220                <1>     mov dl, " "
   421 000043E3 E8F9FEFFFF          <1>     call outChar
   422                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   423                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   424                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   425 000043E8 0FB70559C2FFFF      <1>     movzx eax, word [td1]   ;Get this word
   426 000043EF C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   427 000043F2 0FB61D52C2FFFF      <1>     movzx ebx, byte [td4]
   428 000043F9 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   429 000043FC 09D8                <1>     or eax, ebx ;Add this date to eax
   430 000043FE 0FB61D45C2FFFF      <1>     movzx ebx, byte [td3]
   431 00004405 09D8                <1>     or eax, ebx
   432 00004407 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   433 0000440C E810FCFFFF          <1>     call printDate
   434                              <1>     return
    13                              <2> %%_ret:
    14 00004411 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   435                              <1> 
   436                              <1> 
   437                              <1> hexToBCD:
   438                              <1> ;Converts a Hex byte into two BCD digits
   439                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   440 00004412 51                  <1>     push rcx
   441 00004413 0FB6C0              <1>     movzx eax, al   ;Zero extend
   442 00004416 31C9                <1>     xor ecx, ecx
   443                              <1> .htb0:
   444 00004418 3D0A000000          <1>     cmp eax, 10
   445 0000441D 7209                <1>     jb .htb1
   446 0000441F 2D0A000000          <1>     sub eax, 10
   447 00004424 FFC1                <1>     inc ecx
   448 00004426 EBF0                <1>     jmp short .htb0
   449                              <1> .htb1:
   450 00004428 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   451 0000442B 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   452 0000442D 59                  <1>     pop rcx
   453 0000442E C3                  <1>     ret
   454                              <1> 
   455                              <1> printPackedBCD:
   456                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   457                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   458                              <1> ;Preserves all registers
   459 0000442F 50                  <1>     push rax
   460 00004430 52                  <1>     push rdx
   461 00004431 88C4                <1>     mov ah, al
   462 00004433 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   463 00004435 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   464 00004438 7508                <1>     jnz .upperNybble
   465 0000443A B220                <1>     mov dl, " "
   466 0000443C B402                <1>     mov ah, 02h
   467 0000443E CD21                <1>     int 21h
   468 00004440 EB0E                <1>     jmp short .lowerNybble
   469                              <1> .upperNybble:
   470 00004442 50                  <1>     push rax
   471 00004443 C0EC04              <1>     shr ah, 4
   472 00004446 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   473 00004449 88E2                <1>     mov dl, ah
   474 0000444B B402                <1>     mov ah, 02h ;Print DL
   475 0000444D CD21                <1>     int 21h
   476 0000444F 58                  <1>     pop rax
   477                              <1> .lowerNybble:
   478 00004450 0430                <1>     add al, "0"
   479 00004452 88C2                <1>     mov dl, al
   480 00004454 B402                <1>     mov ah, 02h ;Print DL
   481 00004456 CD21                <1>     int 21h
   482 00004458 5A                  <1>     pop rdx
   483 00004459 58                  <1>     pop rax
   484                              <1>     return
    13                              <2> %%_ret:
    14 0000445A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   485                              <1> 
   486                              <1> setDrive:
   487                              <1> ;Input: dl = 0 based Drive number to set to
   488                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   489                              <1> ;AX trashed.
   490 0000445B B40E                <1>     mov ah, 0Eh ;Set drive to dl
   491 0000445D CD21                <1>     int 21h 
   492 0000445F E803000000          <1>     call getCurrentDrive
   493 00004464 38D0                <1>     cmp al, dl  ;Is this the same drive?
   494                              <1>     return
    13                              <2> %%_ret:
    14 00004466 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   495                              <1> getCurrentDrive:
   496                              <1> ;Returns the 0 based current drive in al
   497 00004467 B419                <1>     mov ah, 19h
   498 00004469 CD21                <1>     int 21h
   499                              <1>     return
    13                              <2> %%_ret:
    14 0000446B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> 
   501                              <1> strcpy:
   502                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   503                              <1> ;rsi -> Source
   504                              <1> ;rdi -> Destination
   505 0000446C 51                  <1>     push rcx
   506 0000446D 57                  <1>     push rdi
   507 0000446E 4889F7              <1>     mov rdi, rsi
   508 00004471 E80F000000          <1>     call strlen ;Get the length of the string in rsi
   509 00004476 5F                  <1>     pop rdi
   510 00004477 F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   511 00004479 59                  <1>     pop rcx
   512                              <1>     return
    13                              <2> %%_ret:
    14 0000447A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   513                              <1> 
   514                              <1> strcpy2:
   515                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   516                              <1> ;rsi -> Source
   517                              <1> ;rdi -> Destination
   518 0000447B 56                  <1>     push rsi
   519 0000447C 57                  <1>     push rdi
   520 0000447D E8EAFFFFFF          <1>     call strcpy 
   521 00004482 5F                  <1>     pop rdi
   522 00004483 5E                  <1>     pop rsi
   523                              <1>     return
    13                              <2> %%_ret:
    14 00004484 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> strlen:
   526                              <1> ;Gets the length of a ASCIIZ string
   527                              <1> ;Input: rdi = Source buffer
   528                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   529 00004485 50                  <1>     push rax
   530 00004486 B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   531 0000448B CD2F                <1>     int 2fh
   532 0000448D 58                  <1>     pop rax
   533                              <1>     return
    13                              <2> %%_ret:
    14 0000448E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   534                              <1> 
   535                              <1> ucChar:
   536                              <1> ;Input: al = Char to uppercase
   537                              <1> ;Output: al = Adjusted char 
   538 0000448F 53                  <1>     push rbx
   539 00004490 50                  <1>     push rax    ;Push the char twice on the stack
   540 00004491 B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   541 00004496 CD2F                <1>     int 2fh         ;Returns the processed char in al
   542 00004498 5B                  <1>     pop rbx         ;Pop the old word off the stack
   543 00004499 5B                  <1>     pop rbx
   544                              <1>     return
    13                              <2> %%_ret:
    14 0000449A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   545                              <1> 
   546                              <1> normalisePath:
   547                              <1> ;Uppercases chars and flips pathseps
   548                              <1> ;Input: rsi -> Path to normalise
   549 0000449B 50                  <1>     push rax
   550 0000449C 57                  <1>     push rdi
   551 0000449D 4889F7              <1>     mov rdi, rsi
   552 000044A0 B811120000          <1>     mov eax, 1211h
   553 000044A5 CD2F                <1>     int 2fh
   554 000044A7 5F                  <1>     pop rdi
   555 000044A8 58                  <1>     pop rax
   556                              <1>     return
    13                              <2> %%_ret:
    14 000044A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   557                              <1> 
   558                              <1> skipDelimiters:
   559                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   560                              <1> ; command delimiters but a subset thereof. 
   561                              <1> ;These are the same across all codepages.
   562                              <1> ;Input: rsi must point to the start of the data string
   563                              <1> ;Output: rsi points to the first non-delimiter char
   564 000044AA 50                  <1>     push rax
   565                              <1> .l1:
   566 000044AB AC                  <1>     lodsb
   567 000044AC E807000000          <1>     call isALdelimiter
   568 000044B1 74F8                <1>     jz .l1
   569                              <1> .exit:
   570 000044B3 58                  <1>     pop rax
   571 000044B4 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   572                              <1>     return
    13                              <2> %%_ret:
    14 000044B7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   573                              <1> 
   574                              <1> isALdelimiter:
   575                              <1> ;Returns: ZF=NZ if al is not a command separator 
   576                              <1> ;         ZF=ZE if al is a command separator
   577 000044B8 3C20                <1>     cmp al, " "
   578                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000044BA 74(B7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   579 000044BC 3C3B                <1>     cmp al, ";"
   580                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000044BE 74(B7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   581 000044C0 3C3D                <1>     cmp al, "="
   582                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000044C2 74(B7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   583 000044C4 3C2C                <1>     cmp al, ","
   584                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000044C6 74(B7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   585 000044C8 3C09                <1>     cmp al, TAB
   586                              <1>     return
    13                              <2> %%_ret:
    14 000044CA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   587                              <1> 
   588                              <1> clearCommandState:
   589                              <1> ;Clears the command state
   590 000044CB 488D3DC1BBFFFF      <1>     lea rdi, cmdStatePtr
   591 000044D2 B907000000          <1>     mov ecx, cmdStateL
   592 000044D7 31C0                <1>     xor eax, eax
   593 000044D9 F3AA                <1>     rep stosb
   594                              <1>     return
    13                              <2> %%_ret:
    14 000044DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   595                              <1> 
   596                              <1> clearCommandLineState:
   597                              <1> ;Clears the command line state after a 0Dh encountered
   598 000044DC 488D3DA5BBFFFF      <1>     lea rdi, cmdLineStatePtr
   599 000044E3 B912000000          <1>     mov ecx, cmdLineStateL
   600 000044E8 31C0                <1>     xor eax, eax
   601 000044EA F3AA                <1>     rep stosb
   602 000044EC C70593BBFFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   602 000044F5 FF                  <1>
   603 000044F6 C7058FBBFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   603 000044FF FF                  <1>
   604                              <1> ;Close all handles from 5->MAX
   605 00004500 0FB70D10BBFFFF      <1>     movzx ecx, word [numHdls]
   606 00004507 BB05000000          <1>     mov ebx, 5
   607                              <1> .lp:
   608 0000450C B43E                <1>     mov ah, 3Eh ;File close
   609 0000450E CD21                <1>     int 21h
   610 00004510 FFC3                <1>     inc ebx ;Goto next file
   611 00004512 39CB                <1>     cmp ebx, ecx
   612 00004514 76F6                <1>     jbe .lp    ;Keep looping whilst below or equal
   613                              <1>     return
    13                              <2> %%_ret:
    14 00004516 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   614                              <1> 
   615                              <1> asciiFilenameToFCB:
   616                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   617                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   618                              <1> ;Also doesn't check if chars are valid
   619                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   620                              <1> ;Name is space padded.
   621                              <1> ;Input: rsi = ASCII string buffer
   622                              <1> ;       rdi = FCB name buffer
   623                              <1> ;Output: al = Char that terminated the source string 
   624 00004517 53                  <1>     push rbx    
   625 00004518 57                  <1>     push rdi
   626 00004519 B90B000000          <1>     mov ecx, 11
   627 0000451E B020                <1>     mov al, " "
   628 00004520 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   629 00004522 5F                  <1>     pop rdi
   630 00004523 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   631                              <1>     ;Preprocess for Dir Searches
   632 00004526 803E2E              <1>     cmp byte [rsi], "."
   633 00004529 7509                <1>     jne .processName
   634 0000452B A4                  <1>     movsb   ;Store the first dot
   635 0000452C 803E2E              <1>     cmp byte [rsi], "."
   636 0000452F 752C                <1>     jne .exitBadChar
   637 00004531 A4                  <1>     movsb
   638 00004532 EB29                <1>     jmp short .exitBadChar
   639                              <1> .processName:
   640 00004534 AC                  <1>     lodsb   ;Get the char in al
   641 00004535 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   642 00004537 7426                <1>     jz .exit
   643 00004539 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   644 0000453B 7407                <1>     je .extSpace
   645 0000453D 3C2E                <1>     cmp al, "."
   646 0000453F 740C                <1>     je .ext
   647 00004541 AA                  <1>     stosb   ;Store the char
   648 00004542 EBF0                <1>     jmp short .processName
   649                              <1> .extSpace:
   650                              <1> ;Now we scan for a period in the name
   651 00004544 AC                  <1>     lodsb   ;Get a char and increase rsi
   652 00004545 84C0                <1>     test al, al
   653 00004547 7416                <1>     jz .exit
   654 00004549 3C2E                <1>     cmp al, "."     ;If al is not a period...
   655 0000454B 75F7                <1>     jne .extSpace   ; keep searching
   656                              <1> .ext:
   657 0000454D 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   658                              <1> .processExt:
   659 00004551 AC                  <1>     lodsb
   660 00004552 84C0                <1>     test al, al
   661 00004554 7409                <1>     jz .exit
   662 00004556 3C20                <1>     cmp al, " "
   663 00004558 7405                <1>     je .exit
   664 0000455A AA                  <1>     stosb
   665 0000455B EBF4                <1>     jmp short .processExt
   666                              <1> .exitBadChar:
   667 0000455D 30C0                <1>     xor al, al  ;Return a null terminator
   668                              <1> .exit:
   669 0000455F 5B                  <1>     pop rbx
   670                              <1>     return
    13                              <2> %%_ret:
    14 00004560 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   671                              <1> 
   672                              <1> findLastPathComponant:
   673                              <1> ;Finds the last path componant of an ASCIIZ path string
   674                              <1> ;Input: rdi -> Head of the path to find last componant on
   675                              <1> ;Output: rdi -> Start of the last componant
   676 00004561 50                  <1>     push rax
   677 00004562 51                  <1>     push rcx
   678 00004563 31C9                <1>     xor ecx, ecx
   679 00004565 FFC9                <1>     dec ecx
   680 00004567 31C0                <1>     xor eax, eax
   681 00004569 F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   682 0000456B F7D1                <1>     not ecx     ;This gets the count of chars  
   683 0000456D 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   684 00004570 8A05A3BAFFFF        <1>     mov al, byte [pathSep]
   685 00004576 FD                  <1>     std
   686 00004577 F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   687 00004579 FC                  <1>     cld
   688 0000457A 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   689 0000457C 48FFC7              <1>     inc rdi     ;Point at pathsep
   690                              <1> .exit:
   691 0000457F 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   692 00004582 59                  <1>     pop rcx
   693 00004583 58                  <1>     pop rax
   694                              <1>     return
    13                              <2> %%_ret:
    14 00004584 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   695                              <1> 
   696                              <1> FCBToAsciiz:
   697                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   698                              <1> ;Name is space padded too
   699                              <1> ;Input: rsi = FCB name buffer
   700                              <1> ;       rdi = ASCIIZ string buffer
   701 00004585 B908000000          <1>     mov ecx, 8
   702 0000458A F3A4                <1>     rep movsb   ;Move the name over
   703                              <1> .scanNameSpace:
   704 0000458C 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   705 00004590 750D                <1>     jne .ext
   706 00004592 48FFCF              <1>     dec rdi
   707 00004595 FFC1                <1>     inc ecx
   708 00004597 81F908000000        <1>     cmp ecx, 8
   709 0000459D 72ED                <1>     jb .scanNameSpace
   710                              <1> .ext:
   711 0000459F 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   712 000045A4 7506                <1>     jne .validExt
   713 000045A6 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   714 000045AA 7415                <1>     je .exit
   715                              <1> .validExt:
   716 000045AC B02E                <1>     mov al, "." ;We have a valid extension, store a period
   717 000045AE AA                  <1>     stosb
   718 000045AF B903000000          <1>     mov ecx, 3
   719 000045B4 F3A4                <1>     rep movsb   ;Move the three extension chars over
   720                              <1> .scanExtSpace:
   721 000045B6 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   722 000045BA 7505                <1>     jne .exit
   723 000045BC 48FFCF              <1>     dec rdi
   724 000045BF EBF5                <1>     jmp short .scanExtSpace
   725                              <1> .exit:
   726 000045C1 31C0                <1>     xor eax, eax
   727 000045C3 AA                  <1>     stosb   ;Store a null at the end
   728                              <1>     return
    13                              <2> %%_ret:
    14 000045C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   729                              <1> 
   730                              <1> cpDelimOrCtrlStringToBufz:
   731                              <1> ;Copy a delimited or control char terminated string to a buffer
   732                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   733                              <1> ;       rdi -> Buffer to store null terminated string in
   734                              <1> ;Output: rsi -> First char past string end
   735                              <1> ;       rdi -> One char past null terminator on string buffer
   736 000045C5 C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   737                              <1> .lp:
   738 000045C8 AC                  <1>     lodsb
   739 000045C9 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here. CR included!
   740 000045CB 760A                <1>     jbe .exit
   741 000045CD E8E6FEFFFF          <1>     call isALdelimiter
   742 000045D2 7403                <1>     je .exit
   743 000045D4 AA                  <1>     stosb
   744 000045D5 EBF1                <1>     jmp short .lp
   745                              <1> .exit:
   746 000045D7 31C0                <1>     xor eax, eax
   747 000045D9 AA                  <1>     stosb   ;Store a null terminator
   748                              <1>     return
    13                              <2> %%_ret:
    14 000045DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   749                              <1> 
   750                              <1> 
   751                              <1> cpDelimPathToBufz:
   752                              <1> ;Copy a delimited path into buffer and null terminate.
   753                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   754                              <1> ;       rdi -> Buffer to store null terminated path in
   755                              <1> ;Output: rsi -> First char past pathname delimiter
   756                              <1> ;       rdi -> One char past null terminator on pathname buffer
   757 000045DB 53                  <1>     push rbx
   758 000045DC 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   759 000045DF C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   760                              <1> .lp:
   761 000045E2 AC                  <1>     lodsb   ;Get the char
   762 000045E3 3C0D                <1>     cmp al, CR
   763 000045E5 7412                <1>     je .gotRedirPath
   764 000045E7 E8CCFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   765 000045EC 740B                <1>     jz .gotRedirPath 
   766 000045EE 3A0526BAFFFF        <1>     cmp al, byte [switchChar]
   767 000045F4 7403                <1>     je .gotRedirPath
   768 000045F6 AA                  <1>     stosb   ;Store this char and loop next char
   769 000045F7 EBE9                <1>     jmp short .lp
   770                              <1> .gotRedirPath:
   771 000045F9 50                  <1>     push rax    ;Save the char on stack
   772 000045FA 30C0                <1>     xor al, al  ;Get null terminator char
   773 000045FC 4829FB              <1>     sub rbx, rdi
   774 000045FF 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   775 00004606 7412                <1>     je .notColon
   776 00004608 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   777 0000460F 7409                <1>     je .notColon
   778 00004611 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   779 00004615 7503                <1>     jne .notColon
   780 00004617 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   781                              <1> .notColon:
   782 0000461A AA                  <1>     stosb   ;Store the null terminator for the redir path
   783 0000461B 58                  <1>     pop rax ;Get back the char in al
   784 0000461C 5B                  <1>     pop rbx
   785                              <1>     return
    13                              <2> %%_ret:
    14 0000461D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   786                              <1> 
   787                              <1> buildCommandPath:
   788                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   789 0000461E 0FB6056FBAFFFF      <1>     movzx eax, byte [arg1Off]
   790 00004625 4C8B05E3B9FFFF      <1>     mov r8, [pspPtr]
   791 0000462C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   792 00004633 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   793                              <1> copyArgumentToSearchSpec:
   794                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   795                              <1> ; and null terminates
   796 00004636 488D3D42BEFFFF      <1>     lea rdi, searchSpec
   797 0000463D E899FFFFFF          <1>     call cpDelimPathToBufz
   798                              <1>     return
    13                              <2> %%_ret:
    14 00004642 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   799                              <1> 
   800                              <1> scanForWildcards:
   801                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   802                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   803 00004643 50                  <1>     push rax
   804 00004644 56                  <1>     push rsi
   805                              <1> .lp:
   806 00004645 AC                  <1>     lodsb
   807 00004646 3C3F                <1>     cmp al, "?"
   808 00004648 740A                <1>     je .exit
   809 0000464A 3C2A                <1>     cmp al, "*"
   810 0000464C 7406                <1>     je .exit
   811 0000464E 84C0                <1>     test al, al
   812 00004650 75F3                <1>     jnz .lp
   813 00004652 FEC0                <1>     inc al  ;This will clear the ZF
   814                              <1> .exit:
   815 00004654 5E                  <1>     pop rsi
   816 00004655 58                  <1>     pop rax
   817                              <1>     return
    13                              <2> %%_ret:
    14 00004656 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   818                              <1> 
   819                              <1> printDecimalWord:
   820                              <1> ;Takes qword in rax and print it's decimal representation
   821                              <1> ;Takes the qword in eax and prints its decimal representation
   822 00004657 31C9                <1>     xor ecx, ecx
   823 00004659 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   824 0000465B 85C0                <1>     test eax, eax
   825 0000465D 750C                <1>     jnz .notZero
   826 0000465F B930000000          <1>     mov ecx, "0"
   827 00004664 BD01000000          <1>     mov ebp, 1  ;Print one digit
   828 00004669 EB3E                <1>     jmp short .dpfb2
   829                              <1> .notZero:
   830 0000466B 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   831 0000466D BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   832                              <1> .dpfb0:
   833 00004672 FFC5                <1>     inc ebp
   834 00004674 81FD08000000        <1>     cmp ebp, 8
   835 0000467A 7206                <1>     jb .dpfb00
   836 0000467C 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   837 00004680 EB04                <1>     jmp short .dpfb01
   838                              <1> .dpfb00:
   839 00004682 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   840                              <1> .dpfb01:
   841 00004686 31D2                <1>     xor edx, edx
   842 00004688 48F7F6              <1>     div rsi
   843 0000468B 80C230              <1>     add dl, '0'
   844 0000468E 80FA39              <1>     cmp dl, '9'
   845 00004691 7603                <1>     jbe .dpfb1
   846 00004693 80C207              <1>     add dl, 'A'-'0'-10
   847                              <1> .dpfb1:
   848 00004696 81FD08000000        <1>     cmp ebp, 8
   849 0000469C 7204                <1>     jb .dpfb10
   850 0000469E 88D3                <1>     mov bl, dl ;Add the bottom bits
   851 000046A0 EB02                <1>     jmp short .dpfb11
   852                              <1> .dpfb10:
   853 000046A2 88D1                <1>     mov cl, dl    ;Save remainder byte
   854                              <1> .dpfb11:
   855 000046A4 4885C0              <1>     test rax, rax
   856 000046A7 75C9                <1>     jnz .dpfb0
   857                              <1> .dpfb2:
   858 000046A9 81FD08000000        <1>     cmp ebp, 8
   859 000046AF 7208                <1>     jb .dpfb20
   860 000046B1 88DA                <1>     mov dl, bl
   861 000046B3 48C1EB08            <1>     shr rbx, 8
   862 000046B7 EB06                <1>     jmp short .dpfb21
   863                              <1> .dpfb20:
   864 000046B9 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   865 000046BB 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   866                              <1> .dpfb21:
   867 000046BF B402                <1>     mov ah, 02h
   868 000046C1 CD21                <1>     int 21h
   869 000046C3 FFCD                <1>     dec ebp
   870 000046C5 75E2                <1>     jnz .dpfb2
   871                              <1>     return
    13                              <2> %%_ret:
    14 000046C7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   872                              <1> 
   873                              <1> getDecimalWord:
   874                              <1> ;Works on MAX A dword in eax
   875                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   876 000046C8 31C9                <1>     xor ecx, ecx
   877 000046CA 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   878 000046CC BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   879                              <1> .dpfb0:
   880 000046D1 FFC5                <1>     inc ebp
   881 000046D3 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   882 000046D7 31D2                <1>     xor edx, edx
   883 000046D9 48F7F3              <1>     div rbx
   884 000046DC 80C230              <1>     add dl, '0'
   885 000046DF 80FA39              <1>     cmp dl, '9'
   886 000046E2 7603                <1>     jbe .dpfb1
   887 000046E4 80C207              <1>     add dl, 'A'-'0'-10
   888                              <1> .dpfb1:
   889 000046E7 88D1                <1>     mov cl, dl    ;Save remainder byte
   890 000046E9 4885C0              <1>     test rax, rax
   891 000046EC 75E3                <1>     jnz .dpfb0
   892                              <1>     return
    13                              <2> %%_ret:
    14 000046EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   893                              <1> getByte:
   894                              <1> ;Indicates if the number obtained is larger than a byte by setting CF
   895 000046EF E807000000          <1>     call getNum
   896 000046F4 3D00010000          <1>     cmp eax, 100h
   897 000046F9 F5                  <1>     cmc
   898                              <1>     return
    13                              <2> %%_ret:
    14 000046FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   899                              <1> getNum:
   900                              <1> ;Gets a number from a command line.
   901                              <1> ;Input: rsi -> String to get number from
   902                              <1> ;Output: rsi -> Char which terminated the accumulation
   903                              <1> ;        eax = Value of the string. May overflow if we read more than 9 chars...
   904                              <1> ;If an overflow, CF=CY. eax=Undefined. rsi-> Char 9
   905 000046FB 51                  <1>     push rcx
   906 000046FC 53                  <1>     push rbx
   907 000046FD 31DB                <1>     xor ebx, ebx
   908 000046FF 31C9                <1>     xor ecx, ecx    ;Start with a value of zero
   909 00004701 31C0                <1>     xor eax, eax    
   910                              <1> .lp:
   911 00004703 AC                  <1>     lodsb
   912 00004704 3C30                <1>     cmp al, "0"
   913 00004706 721B                <1>     jb .exit
   914 00004708 3C39                <1>     cmp al, "9"
   915 0000470A 7717                <1>     ja .exit
   916 0000470C 2C30                <1>     sub al, "0"                     ;Convert to binary 
   917 0000470E 678D0C89            <1>     lea ecx, qword [4*ecx + ecx]    ;5*rcx
   918 00004712 D1E1                <1>     shl ecx, 1                      ;2*(5*rcx)
   919 00004714 01C1                <1>     add ecx, eax
   920 00004716 FFC3                <1>     inc ebx
   921 00004718 81FB09000000        <1>     cmp ebx, 9
   922 0000471E 75E3                <1>     jne short .lp   ;Get next digit
   923 00004720 F9                  <1>     stc             ;Yikesaroony
   924 00004721 EB01                <1>     jmp short .exitBad
   925                              <1> .exit:
   926 00004723 F8                  <1>     clc             ;Clear CF
   927                              <1> .exitBad:
   928 00004724 89C8                <1>     mov eax, ecx
   929 00004726 5B                  <1>     pop rbx
   930 00004727 59                  <1>     pop rcx
   931 00004728 48FFCE              <1>     dec rsi         ;dec doesnt affect CF 
   932                              <1>     return
    13                              <2> %%_ret:
    14 0000472B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   933                              <1> 
   934                              <1> 
   935                              <1> freezePC:
   936 0000472C 488D1518C7FFFF      <1>     lea rdx, memBad1
   937 00004733 B409                <1>     mov ah, 09h
   938 00004735 CD21                <1>     int 21h
   939                              <1> .altEP:
   940 00004737 488D1536C7FFFF      <1>     lea rdx, memBad3
   941 0000473E B409                <1>     mov ah, 09h
   942 00004740 CD21                <1>     int 21h
   943                              <1> .lp:
   944 00004742 F390                <1>     pause
   945 00004744 F4                  <1>     hlt
   946 00004745 EBFB                <1>     jmp short .lp
   947                              <1> 
   948                              <1> setDTA:
   949 00004747 50                  <1>     push rax
   950 00004748 52                  <1>     push rdx
   951 00004749 488D15B5B9FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   952 00004750 B8001A0000          <1>     mov eax, 1A00h
   953 00004755 CD21                <1>     int 21h
   954 00004757 5A                  <1>     pop rdx
   955 00004758 58                  <1>     pop rax
   956                              <1>     return
    13                              <2> %%_ret:
    14 00004759 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   957                              <1> 
   958                              <1> getDTA:
   959 0000475A 488D15A4B9FFFF      <1>     lea rdx, cmdFFBlock
   960                              <1>     return
    13                              <2> %%_ret:
    14 00004761 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   961                              <1> 
   962                              <1> resetIDTentries:
   963                              <1> ;Resets the IDT entries if they were changed by dead child process
   964 00004762 488D1571020000      <1>     lea rdx, critErrorHandler
   965 00004769 B824250000          <1>     mov eax, 2524h
   966 0000476E CD21                <1>     int 21h
   967 00004770 488D1577010000      <1>     lea rdx, ctrlCHandler
   968 00004777 B823250000          <1>     mov eax, 2523h
   969 0000477C CD21                <1>     int 21h
   970 0000477E 488D15AECDFFFF      <1>     lea rdx, appRet
   971 00004785 B822250000          <1>     mov eax, 2522h
   972 0000478A CD21                <1>     int 21h
   973                              <1>     return
    13                              <2> %%_ret:
    14 0000478C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   974                              <1> 
   975                              <1> ;-------------------------------
   976                              <1> ; Environment utility functions
   977                              <1> ;-------------------------------
   978                              <1> 
   979                              <1> cmpEnvVar:
   980                              <1> ;Checks that we have found the environment variable we are looking for.
   981                              <1> ;Input: rsi -> Environment var to verify the name of
   982                              <1> ;       rdi -> Environment var name to compare against
   983                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
   984 0000478D 56                  <1>     push rsi
   985 0000478E 57                  <1>     push rdi
   986 0000478F 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs
   987                              <1> .lp:
   988 00004792 AC                  <1>     lodsb               ;Pick up from user string
   989 00004793 E8F7FCFFFF          <1>     call ucChar         ;Upper case it!
   990 00004798 3807                <1>     cmp byte [rdi], al  
   991 0000479A 7509                <1>     jne .exit
   992 0000479C 3C3D                <1>     cmp al, "="         ;Are we at the end?
   993 0000479E 7405                <1>     je .exit
   994 000047A0 48FFC7              <1>     inc rdi
   995 000047A3 EBED                <1>     jmp short .lp
   996                              <1> .exit:
   997 000047A5 5F                  <1>     pop rdi
   998 000047A6 5E                  <1>     pop rsi
   999                              <1>     return
    13                              <2> %%_ret:
    14 000047A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1000                              <1> 
  1001                              <1> checkEnvGoodAndGet:
  1002                              <1> ;Gets the env ptr and checks that it is double null terminated.
  1003                              <1> ;Output:
  1004                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
  1005                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
  1006                              <1> ;           rsi -> Environment pointer
  1007 000047A8 50                  <1>     push rax
  1008 000047A9 51                  <1>     push rcx
  1009 000047AA 57                  <1>     push rdi
  1010 000047AB 4150                <1>     push r8
  1011 000047AD 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
  1012 000047B1 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
  1013 000047B4 741A                <1>     jz .badExit
  1014 000047B6 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
  1015 000047B9 C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
  1016                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
  1017 000047BC 31C0                <1>     xor eax, eax
  1018                              <1> .pathNulScan:
  1019 000047BE F2AE                <1>     repne scasb
  1020 000047C0 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
  1021 000047C2 740C                <1>     jz .badExit
  1022 000047C4 3807                <1>     cmp byte [rdi], al  ;Is char two null?
  1023 000047C6 75F6                <1>     jne .pathNulScan    ;If not, keep searching
  1024 000047C8 31C0                <1>     xor eax, eax
  1025 000047CA FFC0                <1>     inc eax ;Clear the ZF
  1026 000047CC 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
  1027                              <1> .badExit:
  1028 000047D0 4158                <1>     pop r8
  1029 000047D2 5F                  <1>     pop rdi
  1030 000047D3 59                  <1>     pop rcx
  1031 000047D4 58                  <1>     pop rax
  1032                              <1>     return
    13                              <2> %%_ret:
    14 000047D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1033                              <1> 
  1034                              <1> 
  1035                              <1> findEnvSpace:
  1036                              <1> ;Searches the environment for space, returns a pointer to the start of the 
  1037                              <1> ; free space in the pointer and a count of free space in the environment.
  1038                              <1> ;If count is zero, pointer is not to be used.
  1039                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
  1040 000047D6 31C9                <1>     xor ecx, ecx
  1041 000047D8 31C0                <1>     xor eax, eax    ;Clear eax too
  1042 000047DA 51                  <1>     push rcx
  1043 000047DB E8C8FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
  1044 000047E0 59                  <1>     pop rcx
  1045                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000047E1 74(D5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1046 000047E3 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
  1047 000047E7 FFC9                <1>     dec ecx ;Make into a large counter
  1048 000047E9 4889F7              <1>     mov rdi, rsi    
  1049                              <1> .endsearch:
  1050 000047EC F2AE                <1>     repne scasb ;Scan
  1051 000047EE 803F00              <1>     cmp byte [rdi], 0
  1052 000047F1 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
  1053                              <1>     ;Here we are at the end of the environment
  1054 000047F3 F7D9                <1>     neg ecx
  1055 000047F5 FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
  1056 000047F7 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
  1057 000047FA 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
  1058 000047FD 29C8                <1>     sub eax, ecx
  1059 000047FF 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
  1060                              <1>     return
    13                              <2> %%_ret:
    14 00004801 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1061                              <1> 
  1062                              <1> searchForEnvVar:
  1063                              <1> ;Gets the environment, and scans it for a string with the var specified.
  1064                              <1> ;Input: rdi -> Var name to look for.
  1065                              <1> ;Returns: CF=NC: rsi -> Env var in env.
  1066 00004802 57                  <1>     push rdi
  1067 00004803 51                  <1>     push rcx
  1068 00004804 52                  <1>     push rdx
  1069 00004805 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1070 00004809 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
  1071                              <1> .varLp:
  1072 0000480C 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
  1073 0000480F E879FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1074 00004814 7416                <1>     je .varFound
  1075 00004816 31C0                <1>     xor eax, eax        ;Search for a null
  1076 00004818 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1077 0000481B B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1078 00004820 F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1079 00004822 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1080 00004824 7405                <1>     je .varNotFound     ;If second null, no more env to search!
  1081 00004826 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1082 00004829 EBE1                <1>     jmp short .varLp    ;And scan again!
  1083                              <1> .varNotFound:
  1084 0000482B F9                  <1>     stc
  1085                              <1> .varFound:
  1086 0000482C 59                  <1>     pop rcx
  1087 0000482D 5A                  <1>     pop rdx
  1088 0000482E 5F                  <1>     pop rdi
  1089                              <1>     return
    13                              <2> %%_ret:
    14 0000482F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1090                              <1> 
  1091                              <1> envFree:
  1092                              <1> ;Frees a variable from the environment, pulls the strings behind it up
  1093                              <1> ; zeros the rest of the environment, and returns a pointer to the first
  1094                              <1> ; free byte of the environment!
  1095                              <1> ;Input: rsi -> Variable to free.
  1096                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
  1097                              <1> ;        ecx = Number of free bytes in env
  1098 00004830 4889F7              <1>     mov rdi, rsi
  1099 00004833 31C0                <1>     xor eax, eax
  1100                              <1> .freeLp:
  1101 00004835 803F00              <1>     cmp byte [rdi], 0
  1102 00004838 7403                <1>     je .exitLp
  1103 0000483A AA                  <1>     stosb
  1104 0000483B EBF8                <1>     jmp short .freeLp
  1105                              <1> .exitLp:
  1106                              <1> ;rdi points to the terminating null of the var we just deleted
  1107                              <1> ;rsi points to the start of the free space
  1108 0000483D 4887F7              <1>     xchg rsi, rdi   ;Swap em!
  1109 00004840 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
  1110 00004845 7504                <1>     jne .prepPullup
  1111 00004847 31C0                <1>     xor eax, eax
  1112 00004849 EB0E                <1>     jmp short .cleanEnv
  1113                              <1> .prepPullup:
  1114 0000484B 48FFC6              <1>     inc rsi         ;Go past the terminating null!
  1115                              <1> .pullUp:
  1116 0000484E AC                  <1>     lodsb
  1117 0000484F AA                  <1>     stosb
  1118 00004850 84C0                <1>     test al, al ;Did we pick up a zero
  1119 00004852 75FA                <1>     jne .pullUp ;If not, keep copying
  1120 00004854 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
  1121 00004857 75F5                <1>     jne .pullUp
  1122                              <1> ;We are at the end of the copy!
  1123                              <1> .cleanEnv:
  1124 00004859 AA                  <1>     stosb   ;Store the famous second null
  1125 0000485A 48FFCF              <1>     dec rdi ;without incrementing it!!
  1126 0000485D E807000000          <1>     call getFreeSpace
  1127 00004862 31C0                <1>     xor eax, eax
  1128 00004864 51                  <1>     push rcx
  1129 00004865 F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
  1130 00004867 59                  <1>     pop rcx
  1131                              <1>     return
    13                              <2> %%_ret:
    14 00004868 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1132                              <1> 
  1133                              <1> getFreeSpace:
  1134                              <1> ;Output: ecx = Number of free bytes in the environment block
  1135 00004869 56                  <1>     push rsi
  1136 0000486A 57                  <1>     push rdi
  1137 0000486B E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
  1138 00004870 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1139 00004874 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
  1140 00004877 E805000000          <1>     call getEnvSize ;Get total block size
  1141 0000487C 29F9                <1>     sub ecx, edi    ;Get difference!
  1142 0000487E 5F                  <1>     pop rdi
  1143 0000487F 5E                  <1>     pop rsi
  1144                              <1>     return
    13                              <2> %%_ret:
    14 00004880 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1145                              <1> 
  1146                              <1> getEnvSize:
  1147                              <1> ;Gets the number of bytes in the environment allocation
  1148                              <1> ;Output: ecx = Number of bytes in the environment!
  1149 00004881 53                  <1>     push rbx
  1150 00004882 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
  1151 00004886 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
  1152 00004889 C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
  1153 0000488C 5B                  <1>     pop rbx
  1154                              <1>     return
    13                              <2> %%_ret:
    14 0000488D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1155                              <1> 
  1156                              <1> getPtrToEndOfEnv:
  1157                              <1> ;Gets ptr to end of the environment
  1158                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
  1159 0000488E 50                  <1>     push rax
  1160 0000488F 51                  <1>     push rcx
  1161 00004890 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
  1162 00004894 31C0                <1>     xor eax, eax
  1163 00004896 31C9                <1>     xor ecx, ecx
  1164 00004898 FFC9                <1>     dec ecx
  1165                              <1> .lp:
  1166 0000489A F2AE                <1>     repne scasb
  1167 0000489C 3807                <1>     cmp byte [rdi], al
  1168 0000489E 75FA                <1>     jne .lp
  1169 000048A0 59                  <1>     pop rcx
  1170 000048A1 58                  <1>     pop rax
  1171                              <1>     return
    13                              <2> %%_ret:
    14 000048A2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1172                              <1> 
  1173                              <1> growEnvBlock:
  1174                              <1> ;Attempts to grow the environment to store the new string. Will clean the
  1175                              <1> ; newly allocated 160 byte block of the environment.
  1176                              <1> ;Returns:   CF=NC - Environment grown ok!
  1177                              <1> ;           CF=CY & ZF=ZE - Environment at max size
  1178                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
  1179 000048A3 50                  <1>     push rax
  1180 000048A4 53                  <1>     push rbx
  1181 000048A5 51                  <1>     push rcx
  1182 000048A6 56                  <1>     push rsi
  1183 000048A7 57                  <1>     push rdi
  1184 000048A8 E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
  1185 000048AD E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
  1186 000048B2 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1187 000048B6 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
  1188 000048B9 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
  1189 000048BF 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
  1190 000048C5 7321                <1>     jae .tooLarge
  1191                              <1>     ;Here ZF must be NZ.
  1192 000048C7 4150                <1>     push r8
  1193 000048C9 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
  1194 000048CD B8004A0000          <1>     mov eax, 4A00h
  1195 000048D2 CD21                <1>     int 21h
  1196 000048D4 4158                <1>     pop r8
  1197 000048D6 720A                <1>     jc .exit
  1198                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1199                              <1>     ; so we add 160 zeros to the count of bytes
  1200 000048D8 81C1A0000000        <1>     add ecx, 0A0h
  1201 000048DE 31C0                <1>     xor eax, eax
  1202 000048E0 F3AA                <1>     rep stosb
  1203                              <1> .exit:
  1204 000048E2 5F                  <1>     pop rdi
  1205 000048E3 5E                  <1>     pop rsi
  1206 000048E4 59                  <1>     pop rcx
  1207 000048E5 5B                  <1>     pop rbx
  1208 000048E6 58                  <1>     pop rax
  1209                              <1>     return
    13                              <2> %%_ret:
    14 000048E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1210                              <1> .tooLarge:
  1211 000048E8 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1212 000048EB F9                  <1>     stc             ;Set CF
  1213 000048EC EBF4                <1>     jmp short .exit
    20                                  %include "./Source/int23h.asm"
     1                              <1> ctrlCHandler:
     2 000048EE F6058FB7FFFF80      <1>     test byte [statFlg1], inLdr     ;Are we loading?
     3 000048F5 7411                <1>     jz .notLoading
     4 000048F7 F60586B7FFFF40      <1>     test byte [statFlg1], inLdrDT   ;Are we in date/time?
     5 000048FE 7439                <1>     jz  .inInt23                    ;IRETQ if not.
     6                              <1>     ;Else, we pretend nothing was typed in and proceed.
     7 00004900 66C74201000D        <1>     mov word [rdx + 1], 0D00h       ;Place a 0 chars cnt and CR in the buffer
     8 00004906 EB12                <1>     jmp short .retFromDosCall       ;And return directly to DOS
     9                              <1> .notLoading:
    10 00004908 F60575B7FFFF02      <1>     test byte [statFlg1], inCtrlC   ;In this handler already?
    11 0000490F 742A                <1>     jz .notNested                   ;If not, handle!
    12                              <1> ;We are in this CTRL+C, check the system call that we are interrupting...
    13                              <1> ;If a CON call, we are in Terminate Batch Job msg. Set CF to indicate
    14                              <1> ; to US that the user CTRL+C'd the Terminate Batch Job message! Return
    15                              <1> ; from DOS directly, do not reenter CON call.
    16 00004911 84E4                <1>     test ah, ah
    17 00004913 7424                <1>     jz .inInt23 
    18 00004915 80FC0C              <1>     cmp ah, 0Ch
    19 00004918 771F                <1>     ja .inInt23
    20                              <1> .retFromDosCall:
    21                              <1> ;Go past the Int 23h stack frame to the entry to Int 21h stack frame
    22 0000491A 50                  <1>     push rax
    23 0000491B 488D0512000000      <1>     lea rax, .i23Bounce
    24 00004922 4889442408          <1>     mov qword [rsp + 8], rax        ;Store as ret add
    25 00004927 31C0                <1>     xor eax, eax
    26 00004929 668CC8              <1>     mov ax, cs
    27 0000492C 4889442410          <1>     mov qword [rsp + 2*8], rax      ;Store the segment too
    28 00004931 58                  <1>     pop rax
    29 00004932 48CF                <1>     iretq   ;Iretq to the next instruction instead of DOS :)
    30                              <1> .i23Bounce:
    31 00004934 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on stack frame flags!
    32                              <1> .inInt23:
    33 00004939 48CF                <1>     iretq
    34                              <1> .notNested:
    35                              <1> ;Main body of the CRTL+C handler! 
    36 0000493B 800D42B7FFFF02      <1>     or byte [statFlg1], inCtrlC     ;Set that we are in CTRL+C
    37 00004942 F6053BB7FFFF04      <1>     test byte [statFlg1], inSingle  ;Are we in single command mode?
    38 00004949 7509                <1>     jnz .skipReset                  
    39                              <1>     ;Now reset the disk subsystem to flush buffers appropriately,
    40                              <1>     ; in case of open files and/or we are hooked by someone who doesn't
    41                              <1>     ; want to return thru dos.
    42 0000494B 50                  <1>     push rax
    43 0000494C B8000D0000          <1>     mov eax, 0D00h  ;Reset Disk system!
    44 00004951 CD21                <1>     int 21h
    45 00004953 58                  <1>     pop rax
    46                              <1> .skipReset:
    47 00004954 F60529B7FFFF08      <1>     test byte [statFlg1], inBatch   ;Are we processing a batch file?
    48 0000495B 7462                <1>     jz .notBat
    49 0000495D F60520B7FFFF04      <1>     test byte [statFlg1], inSingle  ;Batch in a single command?
    50 00004964 7559                <1>     jnz .notBat                     ;No batch cleanup, kill ourselves!
    51                              <1> ;CTRLC in a batch file will always abort the current command being 
    52                              <1> ; executed. CTRLC in a batch file is only for checking if we want to 
    53                              <1> ; terminate the whole batch procedure or not!
    54 00004966 E87B020000          <1>     call errSwapHdls    ;Swap STDIO back ONLY ON BATCH Error
    55                              <1> .ynLp:
    56 0000496B 488D157BBFFFFF      <1>     lea rdx, batFail
    57 00004972 E8FAF8FFFF          <1>     call printString
    58 00004977 488D1573B7FFFF      <1>     lea rdx, batYNstr
    59 0000497E 66C74202200D        <1>     mov word [rdx + 2], 0D20h   ;Space and a CR char
    60 00004984 B80A0C0000          <1>     mov eax, 0C0Ah      ;Get clean buffered input!
    61 00004989 CD21                <1>     int 21h
    62 0000498B 7221                <1>     jc .nestKill         ;If we CTRL+C during this call, kill batch!
    63 0000498D 8A4202              <1>     mov al, byte [rdx + 2]
    64 00004990 E8FAFAFFFF          <1>     call ucChar         ;UC using DOS
    65 00004995 3C59                <1>     cmp al, "Y"
    66 00004997 740E                <1>     je .killBat
    67 00004999 3C4E                <1>     cmp al, "N"
    68 0000499B 75CE                <1>     jne .ynLp
    69                              <1> .endBat:
    70                              <1> ;Tries to abort the Command interpreter, fails and 
    71                              <1> ; our internal state will proceed with batch processing. Doing this 
    72                              <1> ; ensures the command being interrupted is cancelled.
    73 0000499D E8C8F8FFFF          <1>     call printCRLF
    74 000049A2 E923000000          <1>     jmp .exitBat    ;Clears errRetHdls and in ctrlc flag and exits!
    75                              <1> .killBat:   ;Now we need to terminate the batch file too.
    76 000049A7 E8FED3FFFF          <1>     call batCleanup
    77 000049AC EBEF                <1>     jmp short .endBat   ;Now CRLF and exit!
    78                              <1> .nestKill:
    79 000049AE E8F7D3FFFF          <1>     call batCleanup
    80 000049B3 8025CAB6FFFFFD      <1>     and byte [statFlg1], ~inCtrlC   
    81 000049BA E95BFFFFFF          <1>     jmp .retFromDosCall ;Nested kill needs to be handled like other nestings
    82                              <1> .notBat:
    83 000049BF 66813DBEB6FFFFFFFF  <1>     cmp word [errHdls], -1  ;If these are not -1, return to normal!
    84 000049C8 7405                <1>     je .exit
    85                              <1> .exitBat:
    86 000049CA E834020000          <1>     call errRetHdls 
    87                              <1> .exit:
    88 000049CF 8025AEB6FFFFFD      <1>     and byte [statFlg1], ~inCtrlC
    89                              <1> .exitIn:
    90 000049D6 F9                  <1>     stc     ;Set CF to kill the task
    91 000049D7 C20800              <1>     ret 8   ;Return and adjust rsp stack to indicate we wanna kill task
    92                              <1> ;All we need is that the stack pointer is not at the address we had it
    93                              <1> ; at when we entered DOS to trigger a CF check! So anything from ret 8 to
    94                              <1> ; ret 4*8 to remove CS, RFLAGS, SS, RSP is acceptable and safe!
    21                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 000049DA 53                  <1>     push rbx
    25 000049DB 51                  <1>     push rcx
    26 000049DC 52                  <1>     push rdx
    27 000049DD 57                  <1>     push rdi
    28 000049DE 56                  <1>     push rsi
    29 000049DF E802020000          <1>     call errSwapHdls
    30 000049E4 FC                  <1>     cld         ;Make String ops go forward
    31 000049E5 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 000049E8 488D15A1BEFFFF      <1>     lea rdx, crlf
    33 000049EF E87DF8FFFF          <1>     call printString    ;Trashes ax
    34 000049F4 0FB7FF              <1>     movzx edi, di                   ;Clear the upper word.
    35                              <1> 
    36 000049F7 53                  <1>     push rbx        ;Save the action bitfield
    37 000049F8 56                  <1>     push rsi        ;Save the driver pointer
    38 000049F9 B800590000          <1>     mov eax, 5900h  ;Get Extended Error
    39 000049FE CD21                <1>     int 21h
    40                              <1> ;DOS placed the following values in the following regs:
    41                              <1> ;ax = word [errorExCde]
    42                              <1> ;ch = byte [errorLocus]
    43                              <1> ;bh = byte [errorClass]
    44                              <1> ;bl = byte [errorAction]
    45                              <1> ;rdi = qword [errorVolLbl]
    46 00004A00 488D351BC6FFFF      <1>     lea rsi, errorMsgTbl.FVol
    47 00004A07 4887FE              <1>     xchg rdi, rsi   ;Swap the pointers
    48 00004A0A 48A5                <1>     movsq   ;Move over the 11 chars :)
    49 00004A0C 66A5                <1>     movsw
    50 00004A0E A4                  <1>     movsb
    51 00004A0F 0FB7F8              <1>     movzx edi, ax  ;Move the error code into di
    52 00004A12 5E                  <1>     pop rsi
    53 00004A13 5B                  <1>     pop rbx
    54 00004A14 81FF1F000000        <1>     cmp edi, errGF      ;Is this a normal driver error?
    55 00004A1A 7655                <1>     jbe .driverErr
    56                              <1> ;Now we split the driver from sharing and networking errors. Sharing doesnt go 
    57                              <1> ; thru the redir
    58 00004A1C 81FF24000000        <1>     cmp edi, errShrFul
    59 00004A22 763F                <1>     jbe .shareErr
    60                              <1> ;Ok so this is a net error. Check to see if an installed message!
    61                              <1> ;di has the error code still
    62 00004A24 B800050000          <1>     mov eax, 0500h      ;Install check!
    63 00004A29 CD21                <1>     int 21h
    64 00004A2B 3CFF                <1>     cmp al, -1
    65 00004A2D 752B                <1>     jne .redirDefault   ;No redir, print default net error
    66 00004A2F 89F8                <1>     mov eax, edi        ;Else, move the error code into 
    67 00004A31 B405                <1>     mov ah, 05h         ;Get the string we need
    68 00004A33 CD21                <1>     int 21h
    69 00004A35 7223                <1>     jc .redirDefault    ;If no message installed for this code, generic!
    70                              <1>     ;Returned if CF=NC:
    71                              <1>     ; al = 0 => Print rest of message
    72                              <1>     ; al = 1 => Immediately prompt ARIF
    73                              <1>     ; rdi -> ASCIIZ string to print
    74 00004A37 4889FA              <1>     mov rdx, rdi        
    75 00004A3A 50                  <1>     push rax            
    76 00004A3B 31C0                <1>     xor eax, eax
    77 00004A3D 89C1                <1>     mov ecx, eax
    78 00004A3F FFC9                <1>     dec ecx
    79 00004A41 F2AE                <1>     repne scasb         ;Search for the terminating null
    80 00004A43 C647FF24            <1>     mov byte [rdi - 1], "$" ;Replace with dos string terminator
    81 00004A47 E825F8FFFF          <1>     call printString 
    82 00004A4C C647FF00            <1>     mov byte [rdi - 1], 0   ;Replace with sane string terminator
    83 00004A50 58                  <1>     pop rax
    84 00004A51 84C0                <1>     test al, al ;Is this zero?
    85 00004A53 7450                <1>     jz .proceedNormalWrite  ;Now print reading/writing etc
    86 00004A55 E998000000          <1>     jmp .userInput    ;Else, print crlf and proceed to get input
    87                              <1> .redirDefault:
    88                              <1> ;Always jumped to with rdi in the error code. Thus, this will print only
    89                              <1> ; this line with no reading/writing etc. rdi is above errShrFul here
    90                              <1> ; and also not a table offset so definitely wont accidentally try print
    91                              <1> ; additional information
    92 00004A5A 488D15F6C5FFFF      <1>     lea rdx, genNetErr  ;Set the generic network error message
    93 00004A61 EB35                <1>     jmp short .redirDefProceed
    94                              <1> .shareErr:
    95                              <1> ;Now ensure our error code is in the table, set to GF error if not.
    96 00004A63 BA1F000000          <1>     mov edx, errGF
    97 00004A68 81FF24000000        <1>     cmp edi, errShrFul
    98 00004A6E 0F47FA              <1>     cmova edi, edx
    99                              <1> .driverErr:
   100 00004A71 BA1F000000          <1>     mov edx, errGF      ;If we have an error below Driver Error 0, Gen. Err.
   101 00004A76 81FF13000000        <1>     cmp edi, drvErrShft
   102 00004A7C 0F42FA              <1>     cmovb edi, edx
   103 00004A7F 81EF13000000        <1>     sub edi, drvErrShft ;Now reduce the error code to be a table offset
   104 00004A85 57                  <1>     push rdi    ;Save the error code for checking
   105 00004A86 488D158FC4FFFF      <1>     lea rdx, errMsgPtrTbl
   106 00004A8D 4887FA              <1>     xchg rdi, rdx   ;Swap error code and table base
   107 00004A90 0FB71457            <1>     movzx edx, word [rdi + 2*rdx]   ;Get the word offset in rdx
   108 00004A94 4801FA              <1>     add rdx, rdi            ;Now add the table base!
   109 00004A97 5F                  <1>     pop rdi
   110                              <1> .redirDefProceed:
   111 00004A98 E8D4F7FFFF          <1>     call printString        ;Call DOS to print first part of message
   112                              <1>     ;Now we handle any codes above errNoFCB - drvErrShft as 
   113                              <1>     ; to not print anything other than the string in the table!
   114                              <1>     ;cmp edi, errNoFCB - drvErrShft
   115 00004A9D 81FF0F000000        <1>     cmp edi, errIDC - drvErrShft
   116 00004AA3 734D                <1>     jae .userInput  ;IDC also triggers this skip
   117                              <1> .proceedNormalWrite:
   118 00004AA5 488D15C9C5FFFF      <1>     lea rdx, readMsg
   119 00004AAC 488D3DD1C5FFFF      <1>     lea rdi, writeMsg
   120 00004AB3 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
   121 00004AB6 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
   122 00004ABA E8B2F7FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
   123                              <1> 
   124 00004ABF F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
   125 00004AC2 0F8504010000        <1>     jnz .charError
   126                              <1> ;Disk error continues here
   127 00004AC8 488D159FC5FFFF      <1>     lea rdx, drvMsg ;Drive message
   128 00004ACF E89DF7FFFF          <1>     call printString
   129 00004AD4 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   130 00004AD6 80C241              <1>     add dl, "A" ;Add ASCII code
   131 00004AD9 B402                <1>     mov ah, 02h ;Print char in dl
   132 00004ADB CD21                <1>     int 21h
   133                              <1>     
   134 00004ADD 89D8                <1>     mov eax, ebx    ;Get bh into ah
   135 00004ADF 2500060000          <1>     and eax, 600h   ;Mask off bits 1 and 2 of bh
   136 00004AE4 3D00020000          <1>     cmp eax, 200h   ;Was this a FAT buffer?
   137 00004AE9 7507                <1>     jne .userInput  ;If not proceed as normal.
   138                              <1>     ;Else, abort! Application cannot proceed if FAT is breaking apart...
   139 00004AEB B002                <1>     mov al, 2   ;Abort! Lose that FAT buffer
   140 00004AED E9CE000000          <1>     jmp .cehExit
   141                              <1> .userInput:
   142 00004AF2 E873F7FFFF          <1>     call printCRLF  ;Print new line
   143                              <1> ;Abort, Retry, Ignore, Fail is word order
   144                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   145                              <1> .userAbort:
   146                              <1> ;Abort is always an option
   147 00004AF7 488D1595C5FFFF      <1>     lea rdx, abortMsg
   148 00004AFE E86EF7FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
   149                              <1> .userRetry:
   150 00004B03 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   151 00004B06 7418                <1>     jz .userIgnore    ;If clear, dont print message
   152 00004B08 488D159CC5FFFF      <1>     lea rdx, betweenMsg
   153 00004B0F E85DF7FFFF          <1>     call printString
   154 00004B14 488D1585C5FFFF      <1>     lea rdx, retryMsg
   155 00004B1B E851F7FFFF          <1>     call printString
   156                              <1> .userIgnore:
   157 00004B20 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   158 00004B23 7418                <1>     jz .userFail
   159 00004B25 488D157FC5FFFF      <1>     lea rdx, betweenMsg
   160 00004B2C E840F7FFFF          <1>     call printString
   161 00004B31 488D1561C5FFFF      <1>     lea rdx, ignoreMsg
   162 00004B38 E834F7FFFF          <1>     call printString
   163                              <1> .userFail:
   164 00004B3D F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   165 00004B40 7418                <1>     jz .userMsgEnd
   166 00004B42 488D1562C5FFFF      <1>     lea rdx, betweenMsg
   167 00004B49 E823F7FFFF          <1>     call printString
   168 00004B4E 488D1551C5FFFF      <1>     lea rdx, failMsg
   169 00004B55 E817F7FFFF          <1>     call printString
   170                              <1> .userMsgEnd:
   171 00004B5A 488D154DC5FFFF      <1>     lea rdx, endMsg
   172 00004B61 E80BF7FFFF          <1>     call printString
   173                              <1> ;Get user input now 
   174 00004B66 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   175 00004B68 488D3D42C5FFFF      <1>     lea rdi, i24Resp ;Go to start of string
   176 00004B6F B8010C0000          <1>     mov eax, 0C01h ;Flush and get STDIN without Console Echo
   177 00004B74 CD21                <1>     int 21h ;Get char in al
   178 00004B76 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   179 00004B78 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   180 00004B7A 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   181                              <1> .uip1:
   182 00004B7C AE                  <1>     scasb   ;Compare char to list, offset gives return code
   183 00004B7D 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   184 00004B7F FFC1                <1>     inc ecx
   185 00004B81 81F904000000        <1>     cmp ecx, 4
   186 00004B87 75F3                <1>     jne .uip1
   187 00004B89 E964FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   188                              <1> .validInput:
   189 00004B8E E8D7F6FFFF          <1>     call printCRLF   ;Note the input was accepted
   190 00004B93 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   191                              <1> ;Now check if the input is permitted
   192 00004B95 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   193 00004B97 7427                <1>     je .cehExit
   194 00004B99 84C0                <1>     test al, al ;Check if 0 => Ignore
   195 00004B9B 740F                <1>     je .viIgnore
   196 00004B9D 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   197 00004B9F 7416                <1>     je .viRetry
   198                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   199 00004BA1 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   200 00004BA4 0F8448FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   201 00004BAA EB14                <1>     jmp short .cehExit
   202                              <1> .viIgnore:
   203 00004BAC F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   204 00004BAF 0F843DFFFFFF        <1>     jz .userInput
   205 00004BB5 EB09                <1>     jmp short .cehExit
   206                              <1> .viRetry:
   207 00004BB7 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   208 00004BBA 0F8432FFFFFF        <1>     jz .userInput
   209                              <1> .cehExit:
   210 00004BC0 E83E000000          <1>     call errRetHdls
   211 00004BC5 5E                  <1>     pop rsi
   212 00004BC6 5F                  <1>     pop rdi
   213 00004BC7 5A                  <1>     pop rdx
   214 00004BC8 59                  <1>     pop rcx
   215 00004BC9 5B                  <1>     pop rbx
   216 00004BCA 48CF                <1>     iretq
   217                              <1> .charError:
   218 00004BCC B908000000          <1>     mov ecx, 8  ;8 chars in device name
   219 00004BD1 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   220                              <1> .ce1:
   221 00004BD8 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   222 00004BD9 88C2                <1>     mov dl, al  ;Move char into dl
   223 00004BDB B402                <1>     mov ah, 02h
   224 00004BDD CD21                <1>     int 21h ;Print char
   225 00004BDF E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   226 00004BE1 E90CFFFFFF          <1>     jmp .userInput
   227                              <1> 
   228                              <1> 
   229                              <1> errSwapHdls:
   230                              <1> ;Swaps STDIO to STDERR
   231                              <1> ;Start by tmporarily moving the stderr handler into stdio
   232                              <1> ;In principle dangerous, but since we cannot exit our routine, its oki.
   233 00004BE6 50                  <1>     push rax
   234 00004BE7 53                  <1>     push rbx
   235 00004BE8 E833000000          <1>     call getJftPtr  ;Get the jft pointer into rbx. Saves rax
   236 00004BED 0FB703              <1>     movzx eax, word [rbx]       ;Get STDIO into ax
   237 00004BF0 6689058FB4FFFF      <1>     mov word [errHdls], ax      ;Save em
   238 00004BF7 0FB64302            <1>     movzx eax, byte [rbx + 2]   ;Now get the STDERR SFTndx in al
   239 00004BFB 88C4                <1>     mov ah, al                  ;Move STDERR hdl into ah too 
   240 00004BFD 668903              <1>     mov word [rbx], ax          ;And set STDIO to STDERR
   241 00004C00 5B                  <1>     pop rbx
   242 00004C01 58                  <1>     pop rax
   243                              <1>     return
    13                              <2> %%_ret:
    14 00004C02 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   244                              <1> 
   245                              <1> errRetHdls:
   246                              <1> ;Returns STDIO from STDERR.
   247 00004C03 50                  <1>     push rax
   248 00004C04 53                  <1>     push rbx
   249 00004C05 E816000000          <1>     call getJftPtr  ;Get ptr in rbx. Preserves rax.
   250 00004C0A 0FB70575B4FFFF      <1>     movzx eax, word [errHdls]
   251 00004C11 66C7056CB4FFFFFFFF  <1>     mov word [errHdls], -1  ;Reset values
   252 00004C1A 668903              <1>     mov word [rbx], ax      ;Store the handle word back
   253 00004C1D 5B                  <1>     pop rbx
   254 00004C1E 58                  <1>     pop rax
   255                              <1>     return
    13                              <2> %%_ret:
    14 00004C1F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   256                              <1> 
   257                              <1> getJftPtr:
   258                              <1> ;Preserves all registers except rbx.
   259                              <1> ;Output: rbx -> JFT of current task
   260 00004C20 50                  <1>     push rax        ;Save rax
   261 00004C21 B800510000          <1>     mov eax, 5100h  ;Get current PSP in rbx
   262 00004C26 CD21                <1>     int 21h
   263 00004C28 58                  <1>     pop rax
   264 00004C29 66817B4E1400        <1>     cmp word [rbx + psp.jftSize], 20    ;If >20, pspjft is ptr to real jft
   265 00004C2F 7605                <1>     jbe .pspJftExit
   266 00004C31 488B5B2A            <1>     mov rbx, qword [rbx + psp.externalJFTPtr]   ;Get ptr to jft from the psp
   267                              <1>     return
    13                              <2> %%_ret:
    14 00004C35 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   268                              <1> .pspJftExit:
   269 00004C36 488D5B2A            <1>     lea rbx, qword [rbx + psp.jobFileTbl]       ;Make into a ptr to jft in psp
   270                              <1>     return
    13                              <2> %%_ret:
    14 00004C3A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                                  endOfAlloc: ;End of alloc
    23                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00004C3B B430                <1>     mov ah, 30h
     4 00004C3D CD21                <1>     int 21h
     5 00004C3F 3C01                <1>     cmp al, 01h ;Version 1
     6 00004C41 760D                <1>     jbe .okVersion
     7 00004C43 488D1534050000      <1>     lea rdx, badVerStr
     8 00004C4A B409                <1>     mov ah, 09h
     9 00004C4C CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00004C4E CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00004C50 800D2DB4FFFF80      <1>     or byte [statFlg1], inLdr   ;Ok now we start our special work
    15 00004C57 4C8905B1B3FFFF      <1>     mov qword [pspPtr], r8      ;Store PSP ptr in internal var 
    16                              <1> ;Call for simple internationalisation data
    17 00004C5E B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    18 00004C63 CD21                <1>     int 21h
    19 00004C65 3CFF                <1>     cmp al, -1
    20 00004C67 7412                <1>     je .skipSwitch
    21 00004C69 8815ABB3FFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    22 00004C6F 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    23 00004C72 7507                <1>     jne .skipSwitch
    24 00004C74 C6059EB3FFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    25                              <1> .skipSwitch:
    26 00004C7B B800380000          <1>     mov eax, 3800h  ;Get current country data
    27 00004C80 488D1594B3FFFF      <1>     lea rdx, ctryData
    28 00004C87 CD21                <1>     int 21h ;Write the data to the internal country table 
    29                              <1> ;Now eject all the unneeded space, to make space for allocating.
    30                              <1> ;Thus the allocations in the parsing should never fail (but still may)
    31 00004C89 488D25(00320000)    <1>     lea rsp, initEoA
    32 00004C90 4889E3              <1>     mov rbx, rsp
    33 00004C93 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    34 00004C96 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
    35 00004C9A C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    36 00004C9D B8004A0000          <1>     mov eax, 4A00h ;Realloc
    37 00004CA2 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    38 00004CA5 CD21                <1>     int 21h
    39 00004CA7 72A5                <1>     jc .exitBad 
    40                              <1> ;Now space has been made, time to parse the command tail
    41 00004CA9 E819010000          <1>     call parseCmdLine   ;Now parse the command tail.
    42 00004CAE E84A030000          <1>     call doEnv          ;Now enact the command tail actions
    43 00004CB3 E8AAFAFFFF          <1>     call resetIDTentries    ;Setup IDT entries now. 
    44 00004CB8 F605C5B3FFFF01      <1>     test byte [statFlg1], permaShell ;Are we perma?
    45 00004CBF 0F8490000000        <1>     jz .notMaster   ;Jump if not!
    46                              <1> ;Ok so we are master COMMAND.COM
    47                              <1> ;Now make myself my own parent task. We already are the current psp
    48 00004CC5 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8
    49                              <1> ;Setup Int 2Eh and the addresses in my psp to terminate back to
    50 00004CC9 488D150AFDFFFF      <1>     lea rdx, critErrorHandler
    51 00004CD0 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    52 00004CD4 488D1513FCFFFF      <1>     lea rdx, ctrlCHandler
    53 00004CDB 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    54 00004CDF 488D154DC8FFFF      <1>     lea rdx, appRet
    55 00004CE6 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    56 00004CEA 488D15E0CDFFFF      <1>     lea rdx, int2Eh
    57 00004CF1 B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    58 00004CF6 CD21                <1>     int 21h
    59                              <1> ;Always get the Autoexec from the root dir we are booting into
    60 00004CF8 E86AF7FFFF          <1>     call getCurrentDrive    ;Get 0 based drive number in al
    61 00004CFD 0441                <1>     add al, "A"
    62 00004CFF 8805ECC1FFFF        <1>     mov byte [autoSpec], al ;
    63                              <1> ;Now, open AUTOEXEC.BAT. 
    64 00004D05 488D15E5C1FFFF      <1>     lea rdx, autoSpec
    65 00004D0C B8003D0000          <1>     mov eax, 3D00h  ;Open file
    66 00004D11 CD21                <1>     int 21h
    67 00004D13 7212                <1>     jc .noAutoexec
    68                              <1>     ;Ok, we know the file exists, close it and finish init through it, ignoring 
    69                              <1>     ; the normal hello there! string
    70 00004D15 89C3                <1>     mov ebx, eax
    71 00004D17 B8003E0000          <1>     mov eax, 3E00h  ;Close file
    72 00004D1C CD21                <1>     int 21h
    73                              <1> ;Now we do the same as at the end, prepping for jettisoning
    74 00004D1E 31D2                <1>     xor edx, edx
    75 00004D20 FFCA                <1>     dec edx             ;Setup that we want to process Autoexec
    76 00004D22 E954000000          <1>     jmp .prepStart
    77                              <1> .noAutoexec:
    78                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    79 00004D27 488D1562BBFFFF      <1>     lea rdx, crlf
    80 00004D2E B409                <1>     mov ah, 09h
    81 00004D30 CD21                <1>     int 21h
    82 00004D32 800D4BB3FFFF40      <1>     or byte [statFlg1], inLdrDT
    83 00004D39 E89EE1FFFF          <1>     call time
    84 00004D3E E8EBDFFFFF          <1>     call date
    85 00004D43 80253AB3FFFFBF      <1>     and byte [statFlg1], ~inLdrDT
    86 00004D4A 488D153FBBFFFF      <1>     lea rdx, crlf
    87 00004D51 B409                <1>     mov ah, 09h
    88 00004D53 CD21                <1>     int 21h
    89                              <1>     ;Now fall thru.
    90                              <1> .notMaster:    
    91                              <1> ;Finish by printing INIT string.
    92 00004D55 F60528B3FFFF04      <1>     test byte [statFlg1], inSingle  ;Are we in single mode?
    93 00004D5C 7531                <1>     jnz .singleCom
    94 00004D5E 488D15A5030000      <1>     lea rdx, initString
    95 00004D65 B409                <1>     mov ah, 09h
    96 00004D67 CD21                <1>     int 21h ;Print init string
    97 00004D69 E804EBFFFF          <1>     call version.printVersionNumber
    98 00004D6E 488D15CB030000      <1>     lea rdx, initString2
    99 00004D75 B409                <1>     mov ah, 09h
   100 00004D77 CD21                <1>     int 21h ;Print init string
   101 00004D79 31D2                <1>     xor edx, edx        ;Indicate we DONT want to do Autoexec processing
   102                              <1> .prepStart:
   103 00004D7B E822000000          <1>     call computeStackPtr    ;Returns the stack ptr in rbx and var
   104 00004D80 4889DC              <1>     mov rsp, rbx        ;Move the stack pointer to this address
   105 00004D83 8025FAB2FFFF7F      <1>     and byte [statFlg1], ~inLdr    ;Special work complete :-)
   106 00004D8A E926C3FFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   107                              <1> .singleCom:
   108                              <1> ;In single command mode, check the length of the input string was not 0.
   109                              <1> ; If it was, exit, else proceed
   110 00004D8F 803DBBB3FFFF00      <1>     cmp byte [inBuffer + 1], 0
   111 00004D96 0F84F0ECFFFF        <1>     je exit
   112 00004D9C 31D2                <1>     xor edx, edx
   113 00004D9E FFCA                <1>     dec edx             ;Pretend that we want to process Autoexec
   114 00004DA0 EBD9                <1>     jmp short .prepStart
   115                              <1> 
   116                              <1> computeStackPtr:
   117                              <1>     ;Now we add the stack to the alloc and paragraph align
   118 00004DA2 488D1D92FEFFFF      <1>     lea rbx, endOfAlloc
   119 00004DA9 4881C340060000      <1>     add rbx, stackSize
   120 00004DB0 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   121 00004DB7 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   122 00004DBB 48C1E304            <1>     shl rbx, 4
   123 00004DBF 48891D3FB2FFFF      <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   124                              <1>     return
    13                              <2> %%_ret:
    14 00004DC6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   125                              <1> 
   126                              <1> parseCmdLine:
   127                              <1> ;COMMAND [drive:][path][device][/E:n][/P][/C string]
   128                              <1> ;[drive:] gives the default drive for COMSPEC. Default is default drive.
   129                              <1> ;[path] gives the search path to search for when searching for COMSPEC.
   130                              <1> ;   Default is root directory. Hence default COMSPEC is _:\COMMAND.COM
   131                              <1> ;[device] gives the default device to set STDIO to and reset to if we error
   132                              <1> ;           MAX 8 chars long name ([device] can be colon terminated).
   133                              <1> ;           Default is CON
   134                              <1> ;[/C string] means execute the string as a command and terminate immediately
   135                              <1> ;   This is single command mode, sets inSingle bit. Similar to int 2Eh.
   136                              <1> ;[/P] means make the instance of COMMAND.COM permanent.
   137                              <1> ;[/E:n] where n is a base 10 value between 160-32768, giving the size of the 
   138                              <1> ; environment to allocate in bytes. Only works if COMMAND.COM is to be 
   139                              <1> ; permanent. Needs a colon after E. 
   140                              <1> ;
   141                              <1> ;Start by setting up the default comspec dir, null terminated
   142 00004DC7 E89BF6FFFF          <1>     call getCurrentDrive    ;Get 0 based drive number in al
   143 00004DCC 0441                <1>     add al, "A"
   144 00004DCE B43A                <1>     mov ah, ":"
   145 00004DD0 488D3D75B8FFFF      <1>     lea rdi, comspecDir
   146 00004DD7 66AB                <1>     stosw   ;Store drive specifier
   147 00004DD9 0FB60539B2FFFF      <1>     movzx eax, byte [pathSep]
   148 00004DE0 66AB                <1>     stosw   ;Store the pathsep and a terminating <NUL>
   149                              <1> 
   150 00004DE2 E860F9FFFF          <1>     call setDTA                     ;Ensure any searches dont trample on the tail!
   151 00004DE7 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the start of tail chars
   152                              <1> .parseLp:
   153 00004DEE E8B7F6FFFF          <1>     call skipDelimiters             ;Strip delims
   154 00004DF3 AC                  <1>     lodsb
   155 00004DF4 48FFCE              <1>     dec rsi ;Point to first non-delimiter char
   156 00004DF7 3C0D                <1>     cmp al, CR
   157 00004DF9 0F8469010000        <1>     je .endScan
   158 00004DFF 3A0515B2FFFF        <1>     cmp al, byte [switchChar]       ;Is this a switchchar?
   159 00004E05 752D                <1>     jne .file
   160                              <1> .switch:
   161 00004E07 48FFC6              <1>     inc rsi ;Go past the switch char
   162 00004E0A AC                  <1>     lodsb   ;Get first char past switch, advance rsi
   163 00004E0B E87FF6FFFF          <1>     call ucChar
   164 00004E10 3C43                <1>     cmp al, "C"
   165 00004E12 0F841C010000        <1>     je .switchStr
   166 00004E18 3C50                <1>     cmp al, "P"
   167 00004E1A 0F84F8000000        <1>     je .switchPerma
   168 00004E20 3C45                <1>     cmp al, "E"
   169 00004E22 0F84A5000000        <1>     je .switchEnv
   170 00004E28 48FFCE              <1>     dec rsi ;Now point rsi back to this char
   171                              <1> .badparm:
   172 00004E2B 488D1542BCFFFF      <1>     lea rdx, badParm
   173 00004E32 EBBA                <1>     jmp short .parseLp
   174                              <1> ;-----------------------------------------------------------------
   175                              <1> ;Search for the filespec
   176                              <1> .file:
   177 00004E34 E8FDF7FFFF          <1>     call copyArgumentToSearchSpec   ;Moves rsi to char past the delimiter
   178 00004E39 48FFCE              <1>     dec rsi ;Point to the delimiter itself
   179 00004E3C 488D153CB6FFFF      <1>     lea rdx, searchSpec
   180 00004E43 B8004E0000          <1>     mov eax, 4E00h  ;Find First
   181 00004E48 B910000000          <1>     mov ecx, dirDirectory   ;Return Normal, RO, Dir or Char
   182 00004E4D CD21                <1>     int 21h
   183 00004E4F 730E                <1>     jnc .charOrDir
   184                              <1> .badSpec:
   185                              <1> ;rsi has been moved past the argument so we can keep proceeding with processing
   186 00004E51 488D153E030000      <1>     lea rdx, badCmdDir
   187                              <1> .bs0:
   188 00004E58 E814F4FFFF          <1>     call printString
   189                              <1> .plhop:
   190 00004E5D EB8F                <1>     jmp short .parseLp
   191                              <1> ;-----------------------------------------------------------------
   192                              <1> ;Check if a char or directory here
   193                              <1> .charOrDir:
   194 00004E5F 8A05B5B2FFFF        <1>     mov al, byte [cmdFFBlock + ffBlock.attribFnd]
   195 00004E65 2450                <1>     and al, dirCharDev | dirDirectory
   196 00004E67 74E8                <1>     jz .badSpec
   197 00004E69 A840                <1>     test al, dirCharDev
   198 00004E6B 7525                <1>     jnz .charDev
   199                              <1> ;Here if a directory. Save it null terminated in comspecDir.
   200 00004E6D 56                  <1>     push rsi
   201 00004E6E 488D350AB6FFFF      <1>     lea rsi, searchSpec 
   202 00004E75 488D3DD0B7FFFF      <1>     lea rdi, comspecDir
   203 00004E7C E8FAF5FFFF          <1>     call strcpy2
   204 00004E81 B811120000          <1>     mov eax, 1211h  ;Uppercase the pathspec
   205 00004E86 CD2F                <1>     int 2Fh         ;DOS 3.3 does't do this hehe 0:-)
   206 00004E88 5E                  <1>     pop rsi
   207 00004E89 C60580030000FF      <1>     mov byte [initNewSpec], -1  ;Set, we have a new comspec
   208 00004E90 EBCB                <1>     jmp short .plhop
   209                              <1> ;-----------------------------------------------------------------
   210                              <1> ;Handle char dev here
   211                              <1> .charDev:
   212                              <1> ;Check the name is max 8 chars in length
   213 00004E92 488D3DE6B5FFFF      <1>     lea rdi, searchSpec
   214 00004E99 E8E7F5FFFF          <1>     call strlen ;Get len plus <NUL> in ecx. Cant be more than 8+1 for <NUL>
   215 00004E9E 81F909000000        <1>     cmp ecx, 9  ;This can literally never happen but never hurts to be safe :)
   216 00004EA4 771E                <1>     ja .badChar
   217 00004EA6 56                  <1>     push rsi    ;Save offset into cmdTail on stack
   218 00004EA7 488D35D1B5FFFF      <1>     lea rsi, searchSpec
   219 00004EAE 488D3D33C0FFFF      <1>     lea rdi, devName
   220 00004EB5 E8B2F5FFFF          <1>     call strcpy ;Copy this string over
   221 00004EBA 5E                  <1>     pop rsi
   222 00004EBB C6054F030000FF      <1>     mov byte [initNewDev], -1   ;Set this byte now we have a new dev!
   223                              <1> .plhop1:
   224 00004EC2 EB99                <1>     jmp short .plhop    ;parseLp
   225                              <1> .badChar:
   226 00004EC4 488D155CBDFFFF      <1>     lea rdx, badDev
   227                              <1> .bs1:
   228 00004ECB EB8B                <1>     jmp short .bs0
   229                              <1> ;-----------------------------------------------------------------
   230                              <1> .switchEnv:
   231 00004ECD AC                  <1>     lodsb
   232 00004ECE 48FFCE              <1>     dec rsi
   233 00004ED1 3C3A                <1>     cmp al, ":"
   234 00004ED3 0F8552FFFFFF        <1>     jne .badparm
   235 00004ED9 48FFC6              <1>     inc rsi ;Now point past teh colon, skip any delimiters
   236 00004EDC E8C9F5FFFF          <1>     call skipDelimiters
   237 00004EE1 AC                  <1>     lodsb       ;Get the first non-delimiter
   238 00004EE2 48FFCE              <1>     dec rsi     ;Point back at it
   239 00004EE5 3C0D                <1>     cmp al, CR
   240 00004EE7 0F843EFFFFFF        <1>     je .badparm     ;Print bad arg, rsi positioned to terminate parsing now
   241                              <1>     ;Else, rsi now pointing at the first number. Do maths :)
   242 00004EED E809F8FFFF          <1>     call getNum ;Move rsi to first non digit/9th digit if too many digits
   243 00004EF2 0F8233FFFFFF        <1>     jc .badparm    ;Bad parameter error!
   244 00004EF8 3D00800000          <1>     cmp eax, 8000h
   245 00004EFD 7710                <1>     ja .badEnv
   246 00004EFF 3DA0000000          <1>     cmp eax, 0A0h
   247 00004F04 7209                <1>     jb .badEnv
   248 00004F06 66890505030000      <1>     mov word [initEnvSz], ax    ;Store the allocated size here
   249                              <1> .plhop2:
   250 00004F0D EBB3                <1>     jmp short .plhop1  ;parseLp
   251                              <1> .badEnv:
   252 00004F0F 488D15DF020000      <1>     lea rdx, badEnvSz
   253 00004F16 EBB3                <1>     jmp short .bs1
   254                              <1> ;-----------------------------------------------------------------
   255                              <1> .switchPerma:
   256 00004F18 AC                  <1>     lodsb   ;Get the second char after the P
   257 00004F19 48FFCE              <1>     dec rsi ;Point back at it
   258 00004F1C 3C0D                <1>     cmp al, CR
   259 00004F1E 740B                <1>     je .spEmbCr ;Allow CR after the P
   260 00004F20 E893F5FFFF          <1>     call isALdelimiter
   261 00004F25 0F8500FFFFFF        <1>     jne .badparm
   262                              <1> .spEmbCr:
   263 00004F2B 800D52B1FFFF01      <1>     or byte [statFlg1], permaShell  ;Set the bit
   264 00004F32 EBD9                <1>     jmp short .plhop2  ;parseLp
   265                              <1> ;-----------------------------------------------------------------
   266                              <1> .switchStr:
   267 00004F34 AC                  <1>     lodsb       ;Get the char after the C
   268 00004F35 48FFCE              <1>     dec rsi     ;Point back at it
   269 00004F38 3C0D                <1>     cmp al, CR
   270 00004F3A 740B                <1>     je .ssembCr         ;Embedded CR ok
   271 00004F3C E877F5FFFF          <1>     call isALdelimiter  ;Char immediately after the C must be a delimiter
   272 00004F41 0F85E4FEFFFF        <1>     jne .badparm
   273                              <1> .ssembCr:
   274 00004F47 E85EF5FFFF          <1>     call skipDelimiters     ;Move rsi past the delimiters
   275 00004F4C 488D3DFFB1FFFF      <1>     lea rdi, inBuffer + 2   ;Store the command in the inBuffer as if typed in
   276                              <1> .ssLp:
   277 00004F53 AC                  <1>     lodsb
   278 00004F54 AA                  <1>     stosb
   279 00004F55 3C0D                <1>     cmp al, CR
   280 00004F57 7408                <1>     je .ssOk
   281 00004F59 FE05F2B1FFFF        <1>     inc byte [inBuffer + 1] ;Increment the char count
   282 00004F5F EBF2                <1>     jmp short .ssLp
   283                              <1> .ssOk:
   284 00004F61 800D1CB1FFFF04      <1>     or byte [statFlg1], inSingle    ;Set the single flag
   285                              <1> ;Now we fall through as we have processed the cmd line and set the flag
   286                              <1> ;-----------------------------------------------------------------
   287                              <1> .endScan:
   288                              <1> ;Now copy our name to the end of the dir specified
   289 00004F68 488D3DDDB6FFFF      <1>     lea rdi, comspecDir
   290 00004F6F E811F5FFFF          <1>     call strlen ;Get the length in ecx, preserve rdi
   291 00004F74 FFC9                <1>     dec ecx ;Point to null terminator
   292 00004F76 8A059DB0FFFF        <1>     mov al, byte [pathSep]
   293 00004F7C 4801CF              <1>     add rdi, rcx    ;Now point to the null
   294 00004F7F 3847FF              <1>     cmp byte [rdi - 1], al
   295 00004F82 7401                <1>     je .esSkipPathsep
   296 00004F84 AA                  <1>     stosb
   297                              <1> .esSkipPathsep:
   298 00004F85 488D3584BFFFFF      <1>     lea rsi, cspec
   299 00004F8C E8DBF4FFFF          <1>     call strcpy ;Now copy over the name of our beloved shell
   300                              <1> ;Now ensure the user hasnt specified /C on the master shell!
   301 00004F91 E817000000          <1>     call .masterCheck
   302 00004F96 E84D000000          <1>     call .replacestdio
   303                              <1> ;Ensure that on exit, if both inSingle bit and permaShell are set, inSingle 
   304                              <1> ; wins. Unless this is the first boot, in which case, we ignore it
   305 00004F9B F605E2B0FFFF04      <1>     test byte [statFlg1], inSingle
   306                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00004FA2 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00004FA4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   307 00004FA5 8025D8B0FFFFFE      <1>     and byte [statFlg1], ~permaShell ;Else, ensure perma is deactivated
   308                              <1>     return
    13                              <2> %%_ret:
    14 00004FAC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   309                              <1> .masterCheck:
   310                              <1> ;Before exiting, determine if this is the initial/master copy of
   311                              <1> ; COMMAND.COM by checking if Int 2Eh has the same address as Int 2Dh. 
   312                              <1> ;If so, we are master, set the permanent bit.
   313 00004FAD B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
   314 00004FB2 CD21                <1>     int 21h
   315 00004FB4 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
   316 00004FB7 B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
   317 00004FBC CD21                <1>     int 21h
   318 00004FBE 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
   319                              <1>     retne   ;Else, we are done. Return
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004FC1 75(AC)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   320 00004FC3 800DBAB0FFFF01      <1>     or byte [statFlg1], permaShell
   321 00004FCA 8A05B4B0FFFF        <1>     mov al, byte [statFlg1]
   322 00004FD0 8025ADB0FFFFFB      <1>     and byte [statFlg1], ~inSingle  ;Ensure this bit is off
   323 00004FD7 A804                <1>     test al, inSingle   ;Was the bit initially set?
   324                              <1>     retz                ;Return if not
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004FD9 74(AC)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   325 00004FDB 488D15DD010000      <1>     lea rdx, badCombo   ;Else, sorry buddy, please type in your command manually!
   326 00004FE2 E88AF2FFFF          <1>     call printString
   327                              <1>     return
    13                              <2> %%_ret:
    14 00004FE7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   328                              <1> .replacestdio:
   329 00004FE8 F60522020000FF      <1>     test byte [initNewDev], -1
   330                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004FEF 74(E7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   331 00004FF1 488D15F0BEFFFF      <1>     lea rdx, devName
   332 00004FF8 E954E0FFFF          <1>     jmp ctty.loadSwap  ;Return through the return instruction in ctty
   333                              <1> 
   334                              <1> doEnv:
   335                              <1> ;Will do the environment adjustments as needed
   336 00004FFD 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
   337 00005001 4885F6              <1>     test rsi, rsi
   338 00005004 7447                <1>     jz .noInitEnv
   339 00005006 66813D030200000000  <1>     cmp word [initEnvSz], 0 ;If an env exists and /E not specified, return!
   340                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000500F 74(E7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   341                              <1> ;Now if no new comspec has been given, we allocate a new block, 
   342                              <1> ;copy the environment from the master and free the original block.
   343                              <1> ;If the block we allocate is smaller than the original block, 
   344                              <1> ; print out of env space and stop there
   345                              <1> ;Else, we simply allocate and create a fresh new environment with the new 
   346                              <1> ; comspec. 
   347 00005011 F605F8010000FF      <1>     test byte [initNewSpec], -1  ;If we have a new comspec, create afresh
   348 00005018 752E                <1>     jnz .prepNewEnv
   349                              <1>     ;Else, we create new alloc and copy master into it
   350 0000501A E867000000          <1>     call .allocEnv
   351 0000501F 4889C7              <1>     mov rdi, rax        ;Move pointer into rdi
   352 00005022 E8CC000000          <1>     call getMasterEnv   ;Get the current active master environment in rsi
   353 00005027 57                  <1>     push rdi            ;Save the start of the environment block
   354 00005028 E893000000          <1>     call .cpEnv         ;Copy the environment
   355 0000502D 5F                  <1>     pop rdi
   356 0000502E E805000000          <1>     call .freeCurrentEnv
   357 00005033 4989783E            <1>     mov qword [r8 + psp.envPtr], rdi    ;Now set us as the env ptr
   358                              <1>     return  
    13                              <2> %%_ret:
    14 00005037 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   359                              <1> .freeCurrentEnv:
   360 00005038 4150                <1>     push r8
   361 0000503A 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the original envPtr to free
   362 0000503E B800490000          <1>     mov eax, 4900h
   363 00005043 CD21                <1>     int 21h
   364 00005045 4158                <1>     pop r8
   365                              <1>     return
    13                              <2> %%_ret:
    14 00005047 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   366                              <1> .prepNewEnv:
   367 00005048 E8EBFFFFFF          <1>     call .freeCurrentEnv
   368                              <1> .noInitEnv:
   369                              <1> ;Build the initial block.
   370 0000504D E834000000          <1>     call .allocEnv
   371 00005052 4889C7              <1>     mov rdi, rax        ;Move rdi to the environment
   372 00005055 4989783E            <1>     mov qword [r8 + psp.envPtr], rdi    ;Now store this as the env pointer
   373 00005059 57                  <1>     push rdi            ;Save the environment ptr!
   374 0000505A 488D35A0BEFFFF      <1>     lea rsi, pathEVar
   375 00005061 E806F4FFFF          <1>     call strcpy
   376 00005066 488D359ABEFFFF      <1>     lea rsi, comspecEVar
   377 0000506D E8FAF3FFFF          <1>     call strcpy
   378 00005072 48FFCF              <1>     dec rdi ;Write over the terminating null
   379 00005075 488D35D0B5FFFF      <1>     lea rsi, comspecDir    ;Now copy the actual comspec! 
   380 0000507C E8EBF3FFFF          <1>     call strcpy 
   381 00005081 30C0                <1>     xor al, al
   382 00005083 AA                  <1>     stosb   ;Store the second terminating null
   383 00005084 5F                  <1>     pop rdi ;Get back the pointer to the start of the env
   384                              <1>     return
    13                              <2> %%_ret:
    14 00005085 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   385                              <1> 
   386                              <1> .allocEnv:
   387                              <1> ;Output: rax -> Ptr to the environment block. 
   388                              <1> ;   If anything goes wrong, error message and exit the shell!
   389 00005086 0FB71D85010000      <1>     movzx ebx, word [initEnvSz]
   390 0000508D 85DB                <1>     test ebx, ebx   ;If this is 0, allocate 160 bytes
   391 0000508F 750C                <1>     jnz .goAlloc
   392 00005091 BBA0000000          <1>     mov ebx, 0A0h    ;160 bytes
   393 00005096 66891D75010000      <1>     mov word [initEnvSz], bx    ;Overwrite
   394                              <1> .goAlloc:
   395 0000509D 81C30F000000        <1>     add ebx, 0Fh
   396 000050A3 C1EB04              <1>     shr ebx, 4  ;Round up and turn into paragraphs
   397 000050A6 B800480000          <1>     mov eax, 4800h
   398 000050AB CD21                <1>     int 21h
   399                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000050AD 73(85)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   400 000050AF 488D1595BDFFFF      <1>     lea rdx, memBad1
   401 000050B6 E8B6F1FFFF          <1>     call printString
   402 000050BB E9D5E9FFFF          <1>     jmp exit.ouch 
   403                              <1> 
   404                              <1> .cpEnv:
   405                              <1> ;Copies the environment
   406                              <1> ;Input: rsi -> Source to copy from
   407                              <1> ;       rdi -> Destination to copy to
   408 000050C0 0FB70D4B010000      <1>     movzx ecx, word [initEnvSz]
   409                              <1> .lp:
   410 000050C7 AC                  <1>     lodsb
   411 000050C8 AA                  <1>     stosb
   412 000050C9 84C0                <1>     test al, al
   413 000050CB 750A                <1>     jnz .notNul
   414 000050CD 3806                <1>     cmp byte [rsi], al
   415 000050CF 7506                <1>     jnz .notNul
   416                              <1>     ;Here, we have encountered our double null!
   417 000050D1 FFC9                <1>     dec ecx ;Now we check if we have space to store the second char
   418 000050D3 7406                <1>     jz .err ;If we dont have space for the last null kill last non-null char
   419 000050D5 AA                  <1>     stosb
   420                              <1>     return
    13                              <2> %%_ret:
    14 000050D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   421                              <1> .notNul:
   422 000050D7 FFC9                <1>     dec ecx ;One less char to copy over
   423 000050D9 75EC                <1>     jnz .lp
   424                              <1> .err:
   425 000050DB 4881EF02000000      <1>     sub rdi, 2
   426 000050E2 488D157FB8FFFF      <1>     lea rdx, noEnvSpace
   427 000050E9 E883F1FFFF          <1>     call printString
   428 000050EE 31C0                <1>     xor eax, eax
   429 000050F0 66AB                <1>     stosw   ;Store 0 word
   430                              <1>     return
    13                              <2> %%_ret:
    14 000050F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   431                              <1> 
   432                              <1> getMasterEnv:
   433                              <1> ;Walks the psp chain to the first self parent.
   434                              <1> ;Output: rsi -> Environment of the first self-parent program
   435 000050F3 4150                <1>     push r8
   436                              <1> .lp:
   437 000050F5 498B7022            <1>     mov rsi, qword [r8 + psp.parentPtr] ;Get the parent pointer
   438 000050F9 4C39C6              <1>     cmp rsi, r8 ;Are we a self parent?
   439 000050FC 7405                <1>     je .exit
   440 000050FE 4989F0              <1>     mov r8, rsi ;Make the current psp the parent
   441 00005101 EBF2                <1>     jmp short .lp
   442                              <1> .exit:
   443 00005103 4158                <1>     pop r8
   444 00005105 488B763E            <1>     mov rsi, qword [rsi + psp.envPtr]   ;Get the environment pointer
   445                              <1>     return
    13                              <2> %%_ret:
    14 00005109 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   446                              <1> 
   447                              <1> 
   448                              <1> ;Loader Data here
   449                              <1> initString: 
   450 0000510A 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   450 00005113 66696320436F6D7075- <1>
   450 0000511C 746572205265736561- <1>
   450 00005125 726368285229205343- <1>
   450 0000512E 502F444F5328522920- <1>
   450 00005137 56657273696F6E2024  <1>
   451                              <1> initString2:
   452 00005140 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",
   452 00005149 202020284329436F70- <1>
   452 00005152 797269676874205363- <1>
   452 0000515B 69656E746966696320- <1>
   452 00005164 436F6D707574657220- <1>
   452 0000516D 526573656172636820- <1>
   452 00005176 323032342E          <1>
   453 0000517B 0D0A24              <1>     db CR,LF,"$"
   454 0000517E 496E636F7272656374- <1> badVerStr:  db "Incorrect DOS version",CR,LF,"$"
   454 00005187 20444F532076657273- <1>
   454 00005190 696F6E0D0A24        <1>
   455 00005196 537065636966696564- <1> badCmdDir:  db "Specified COMMAND search directory bad",CR,LF,"$"
   455 0000519F 20434F4D4D414E4420- <1>
   455 000051A8 736561726368206469- <1>
   455 000051B1 726563746F72792062- <1>
   455 000051BA 61640D0A24          <1>
   456 000051BF 43616E6E6F74207370- <1> badCombo:   db "Cannot specify /C on top level process. Ignoring...",CR,LF,"$"
   456 000051C8 6563696679202F4320- <1>
   456 000051D1 6F6E20746F70206C65- <1>
   456 000051DA 76656C2070726F6365- <1>
   456 000051E3 73732E2049676E6F72- <1>
   456 000051EC 696E672E2E2E0D0A24  <1>
   457 000051F5 496E76616C69642045- <1> badEnvSz:   db "Invalid Environment Size",CR,LF,"$"
   457 000051FE 6E7669726F6E6D656E- <1>
   457 00005207 742053697A650D0A24  <1>
   458 00005210 00                  <1> initNewSpec db 0    ;Set if a new comspec found and copied
   459 00005211 00                  <1> initNewDev  db 0    ;Set if a new device found and copied
   460 00005212 0000                <1> initEnvSz       dw 0  ;Max 7FFFh (32768) bytes. Default to 160. 0 means no /E:
    24                                  Segment stack1 nobits valign=16 vfollows=cmd
    25                                  ;This stack is only used during init of COMMAND.COM
    26 00000000 <res 3200h>                 dq stackSize dup (?)
    27                                  initEoA:    ;Initial end of allocation
    27          ------------------       info: assembly required 1+8+2 passes

