     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    57 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    58                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    59                              <1> ; another, we save the number of chars to skip to that deep level).
    60                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    61                              <1> ; Only affects for SUBST drives, not JOIN
    62                              <1> ; Flags: Bit 15 set = Network drive
    63                              <1> ;        Bit 14 set = Physical drive
    64                              <1> ;        Bit 13 set = JOIN'ed drive
    65                              <1> ;        Bit 12 set = SUBST'ed drive
    66                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    67                              <1> endstruc
    68                              <1> ;CDS equates
    69                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    70                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    71                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    72                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    73                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    74                              <1> ;------------------------------------------------------------------------;
    75                              <1> ; The SFT is a way to allow applications to open file handles to files 
    76                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    77                              <1> ; under the first header, and then a second header will be linked to the 
    78                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    79                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    80                              <1> ; using the FCBS= command. Default FCBS=5.
    81                              <1> ;
    82                              <1> ; A file handle describes the file, and the location within the file that
    83                              <1> ; we are reading. The file handle can be manipulated without the file
    84                              <1> ; being in memory, thus allowing the user to access data without needing 
    85                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    86                              <1> ; accessing devices, by treating them as files with their drivers 
    87                              <1> ; responding and translating the manipulations of the file handle itself.
    88                              <1> ; Neither the driver nor the application should see or use the SFT for
    89                              <1> ; the handle, as it is subject to change (and will change when file 
    90                              <1> ; sharing provisions are included). The DOS will make requests to the 
    91                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    92                              <1> ; track of the information in the SFT entry for that handle. 
    93                              <1> ;
    94                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    95                              <1> ; can point to the same file. It all depends on what the applications 
    96                              <1> ; want to do with the File.
    97                              <1> ;
    98                              <1> ; !!!!IMPORTANT!!!!
    99                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   100                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   101                              <1> ;
   102                              <1> ;Each SFT may look like this:
   103                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   104                              <1> ;            |                |
   105                              <1> ;       wNumFiles*sft    wNumFiles*sft
   106                              <1> ;
   107                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   108                              <1> ; System FCBs.
   109                              <1> ;
   110                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   111                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   112                              <1> ;
   113                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   114                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   115                              <1> ;------------------------------------------------------------------------;
   116                              <1> struc sfth   ;System file table header
   117                              <1> ; This is the SFT header.
   118                              <1> ; This structure comes before the start of the first file in the array/table.
   119 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   120 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   121                              <1> endstruc
   122                              <1> 
   123                              <1> struc sft
   124                              <1> ;This is the file struc itself
   125 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   126 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   127 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   128 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   129 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   130 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   131 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   132 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   133 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   134 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   135 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   136 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   137 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   138 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   139 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   140 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   141 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   142 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   143 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   144                              <1> ;                           0 means no record
   145                              <1> endstruc
   146                              <1> ;Open Mode equates
   147                              <1> ;Access modes   Bits[2:0]
   148                              <1> ReadAccess      equ 0h
   149                              <1> WriteAccess     equ 1h
   150                              <1> RWAccess        equ 2h
   151                              <1> ;Bit 3 reserved 0
   152                              <1> ;Sharing modes  Bits[6:4]
   153                              <1> CompatShare     equ 0h
   154                              <1> denyRWShare     equ 10h
   155                              <1> denyWriteShare  equ 20h
   156                              <1> denyReadShare   equ 30h
   157                              <1> denyNoneShare   equ 40h
   158                              <1> netFCBShare     equ 70h
   159                              <1> noInherit       equ 80h
   160                              <1> ;Bits 8-12 reserved 0
   161                              <1> 
   162                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   163                              <1> ;Buffering on writes
   164                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   165                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   166                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   167                              <1> ;Attribute Byte
   168                              <1> readOnlyFile    equ 1h
   169                              <1> hiddenFile      equ 2h
   170                              <1> systemFile      equ 4h
   171                              <1> volumeLabel     equ 8h
   172                              <1> directoryFile   equ 10h ;Directory entry
   173                              <1> archiveFile     equ 20h
   174                              <1> ;Device Info equates
   175                              <1> ;For a block device, bits [5:0] contain the drive number
   176                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   177                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   178                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   179                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   180                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   181                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   182                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   183                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   184                              <1> devCharDev      equ 80h ;If set, it is a char device!
   185                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   186                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   187                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   188                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   189                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   190                              <1>  
   191                              <1> ;------------------------------------------------------------------------;
   192                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   193                              <1> ; to an internal buffer, and then copying it to the specified location
   194                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   195                              <1> ; another request for the same sector from the same device is made, so 
   196                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   197                              <1> ; size, selected according to the largest detected sector size during 
   198                              <1> ; the initial loadup.
   199                              <1> ;
   200                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   201                              <1> ;
   202                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   203                              <1> ;------------------------------------------------------------------------;
   204                              <1> 
   205                              <1> struc bufferHdr
   206 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   207 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   208 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   209 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   210 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   211 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   212 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   213 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   214 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   215                              <1>     .dataarea:             ;Points to the start of the data area
   216                              <1> endstruc
   217                              <1> ;Buffer Flag equates
   218                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   219                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   220                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   221                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   222                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   223                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   224                              <1> ;Note! A buffer is marked as referenced only when the application 
   225                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   226                              <1> ;------------------------------------------------------------------------;
   227                              <1> ; Memory control block for each memory arena
   228                              <1> ;------------------------------------------------------------------------;
   229                              <1> struc mcb
   230 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   231 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   232 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   233 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   234                              <1>     .program:
   235                              <1> endstruc
   236                              <1> ;MCB equates
   237                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   238                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   239                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   240                              <1> mcbMarkCtn      equ "M"
   241                              <1> mcbMarkEnd      equ "Z"
   242                              <1> 
   243                              <1> memFirstFit     equ 0   ;First free block goes to application
   244                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   245                              <1> memLastFit      equ 2   ;Last free block goes to application
   246                              <1> 
   247                              <1> ;Owner = Para aligned address => Owning application PSP
   248                              <1> ;...To consider...
   249                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   250                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   251                              <1> ;------------------------------------------------------------------------;
   252                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   253                              <1> ; following order, thus allowing for return values to be placed in the 
   254                              <1> ; registers by accessing the caller register stack frame.
   255                              <1> ;------------------------------------------------------------------------;
   256                              <1> struc callerFrame
   257 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   258 00000008 ????????????????    <1>     .rbx    resq 1    
   259 00000010 ????????????????    <1>     .rcx    resq 1
   260 00000018 ????????????????    <1>     .rdx    resq 1
   261 00000020 ????????????????    <1>     .rsi    resq 1
   262 00000028 ????????????????    <1>     .rdi    resq 1
   263 00000030 ????????????????    <1>     .rbp    resq 1
   264 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   265 00000040 ????????????????    <1>     .r9     resq 1
   266                              <1> ;Pushed by Processor when invoked via Interrupt
   267 00000048 ????????????????    <1>     .rip    resq 1
   268 00000050 ????????????????    <1>     .cs     resq 1
   269 00000058 ????????????????    <1>     .flags  resq 1
   270                              <1> endstruc
   271                              <1> 
   272                              <1> struc dpl
   273                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   274                              <1> ; server calls
   275 00000000 ????????????????    <1>     .rax    resq 1
   276 00000008 ????????????????    <1>     .rbx    resq 1
   277 00000010 ????????????????    <1>     .rcx    resq 1
   278 00000018 ????????????????    <1>     .rdx    resq 1
   279 00000020 ????????????????    <1>     .rsi    resq 1
   280 00000028 ????????????????    <1>     .rdi    resq 1
   281 00000030 ????????????????    <1>     .r8     resq 1
   282 00000038 ????????????????    <1>     .r9     resq 1
   283 00000040 ????????????????    <1>     .align  resq 1
   284 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   285 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   286                              <1> endstruc
   287                              <1> 
   288                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   289 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   290 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   291 00000010 ????????????????    <1>     .newSFTVal      resq 1
   292 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   293 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   294 00000028 ????????????????    <1>     .newLastdrive   resq 1
   295 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   296 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   297 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   298 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   299 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   300 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   301 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   302                              <1> endstruc
   303                              <1> 
   304                              <1> struc filename
   305                              <1> ;8.3 File name struct
   306 00000000 ????????????????    <1>     .fName  resb 8
   307 00000008 ??????              <1>     .fExt   resb 3
   308                              <1> endstruc
   309                              <1> 
   310                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   311 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   312 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   313 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   314 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   315 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   316 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   317 00000016 ????                <1>     .fileTime   resw 1  ;File time
   318 00000018 ????                <1>     .fileDate   resw 1  ;File date
   319 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   320 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   321                              <1> endstruc
   322                              <1> 
   323                              <1> struc psp
   324 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   325 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   326 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   327 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   328 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   329 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   330 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   331                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   332 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   333 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   334 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   335 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   336 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   337 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   338 0000005B ??                  <1>                 resb 1  ;Reserved byte
   339                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   340                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   341                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   342                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   343                              <1> ; always used and xtraHdlSz.
   344                              <1> ;Will need to add two SYSCALLS for future expansion:
   345                              <1> ;       1) Get Program Environment Pointer
   346                              <1> ;       2) Get Command Line arguments pointer
   347                              <1> ;The below are in the same place as in DOS.
   348                              <1>     .cmdLineArgPtr: ;Symbol for future use
   349 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   350 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   351                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   352 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   353 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   354                              <1> endstruc
   355                              <1> 
   356                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   357                              <1> 
   358                              <1> struc clkStruc
   359 00000000 ????                <1>     .dateWord   resw 1
   360 00000002 ??                  <1>     .minutes    resb 1
   361 00000003 ??                  <1>     .hours      resb 1
   362 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   363 00000005 ??                  <1>     .seconds    resb 1
   364                              <1> endstruc
   365                              <1> 
   366                              <1> struc countryStruc
   367 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   368                              <1>                         ;0 = month day year hh:mm:ss
   369                              <1>                         ;1 = day month year hh:mm:ss
   370                              <1>                         ;2 = year month day hh:mm:ss
   371 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   372 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   373 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   374 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   375 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   376 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   377                              <1>                         ;0 = Symbol leads, without space
   378                              <1>                         ;1 = Symbol follows, without space
   379                              <1>                         ;2 = Symbol leads, one space
   380                              <1>                         ;3 = Symbol follows, one space
   381                              <1>                         ;4 = Symbol replace decimal separator
   382 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   383 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   384 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   385 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   386 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   387                              <1> endstruc
   388                              <1> 
   389                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   390                              <1> ;for a space of 64Gb
   391                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   392                              <1> dosLowBase  equ 600h    ;Low load address
   393                              <1> 
   394                              <1> ;Critical Error AH bitfield equates
   395                              <1> critRead    equ 0h
   396                              <1> critWrite   equ 1h
   397                              <1> critDOS     equ 0h
   398                              <1> critFAT     equ 2h
   399                              <1> critDir     equ 4h
   400                              <1> critData    equ 6h
   401                              <1> critFailOK  equ 8h
   402                              <1> critRetryOK equ 10h
   403                              <1> critIgnorOK equ 20h
   404                              <1> critCharDev equ 80h
   405                              <1> 
   406                              <1> critIgnore  equ 0
   407                              <1> critRetry   equ 1
   408                              <1> critAbort   equ 2
   409                              <1> critFail    equ 3
   410                              <1> 
   411                              <1> ;MISC ASCII control chars
   412                              <1> NUL equ 00h ;^@         | ASCII Null
   413                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   414                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   415                              <1> BEL equ 07h ;^G         | ASCII Bell
   416                              <1> BSP equ 08h ;^H         | ASCII Backspace
   417                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   418                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   419                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   420                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   421                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   422                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   423                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   424                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   425                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   426                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   427                              <1> SPC equ 20h ;Printable  | ASCII Space
   428                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   429                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   430                              <1> 
   431                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   432                              <1> ;Extended Ascii Codes
   433                              <1> eF1     equ 3Bh ;F1 second byte
   434                              <1> eF2     equ 3Ch ;F2 second byte
   435                              <1> eF3     equ 3Dh ;F3 second byte
   436                              <1> eF4     equ 3Eh ;F4 second byte
   437                              <1> eF5     equ 3Fh ;F5 second byte
   438                              <1> eF6     equ 40h ;F6 second byte
   439                              <1> eF7     equ 41h ;F7 second byte
   440                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   441                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   442                              <1> eIns    equ 52h ;Insert second byte
   443                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   444                              <1> 
   445                              <1> ;Default Configuration for the system
   446                              <1> 
   447                              <1> buffersDefault  equ 30
   448                              <1> filesDefault    equ 20
   449                              <1> fcbsDefault     equ 4
   450                              <1> safeFcbsDeflt   equ 0
   451                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on INT 44h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdLineCnt  equ psp.parmList
    19                              <1> cmdLine     equ psp.progTail
    20                              <1> 
    21                              <1> 
    22                              <1> ;Struct Declarations
    23                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    24 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    25 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    26 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    27 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    28 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc execProg  ;For use with EXEC-ing a child task
    32 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    33 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    34 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    35 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    36                              <1> endstruc
    37                              <1> 
    38                              <1> ;Directory attribute equates
    39                              <1>     dirReadOnly     equ 01h
    40                              <1>     dirHidden       equ 02h
    41                              <1>     dirSystem       equ 04h
    42                              <1>     dirVolumeID     equ 08h
    43                              <1>     dirDirectory    equ 10h
    44                              <1>     dirArchive      equ 20h
    45                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    46                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    47                              <1>     ;If any of the three bits are set, then ALL three bits are set
    48                              <1>     ; in addition to whatever the user passed to search for.
    49                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    50                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    11 0000002B 5C                  <1> pathSep     db "\"  ;Default path sep
    12 0000002C 2F                  <1> switchChar  db "/"  ;Default switch char
    13 0000002D 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    14 0000002E 0000000000000000    <1> parentInt42 dq 0    ;Stores the parent values to restore upon exiting if it can
    15                              <1> ;Static strings, not used in command line parsing
    16 00000036 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    16 0000003F 000000000000000000- <1>
    16 00000048 000000000000000000- <1>
    16 00000051 000000000000000000- <1>
    16 0000005A 0000                <1>
    17 0000005C 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    17 00000065 000000000000000000- <1>
    17 0000006E 000000000000000000- <1>
    17 00000077 000000000000000000- <1>
    17 00000080 000000000000000000- <1>
    17 00000089 000000000000000000- <1>
    17 00000092 000000000000000000- <1>
    17 0000009B 00000000            <1>
    18                              <1> 
    19                              <1> 
    20                              <1> cmdLineStatePtr:
    21 0000009F 0000000000000000    <1> cmdStartPtr dq 0    ;Ptr to the first char for this command (may be a space)
    22 000000A7 0000000000000000    <1> cmdEndPtr   dq 0    ;Ptr to the terminating char for this command (0Dh or |)
    23 000000AF 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    24 000000B0 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    25 000000B2 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    26                              <1> 
    27                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    28                              <1> ;These variables are valid for a SINGLE command in a command line
    29 000000B4 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    30 000000B6 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    31 000000B7 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    32                              <1> ;                    If 2, we are redirecting output to a file, by appending
    33 000000B8 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    34 000000BA FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    35                              <1> 
    36 000000BC 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    37 000000BD 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    38 000000BE 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    39                              <1> 
    40 000000BF 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    41 000000C0 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    42 000000C1 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    43                              <1> 
    44                              <1> cmdStateL equ $ - cmdStatePtr
    45                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    46                              <1> 
    47                              <1> ;Structs and strings
    48                              <1> 
    49 000000C2 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    49 000000CB 00000000000000      <1>
    50 000000D2 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    50 000000DB 000000000000000000- <1>
    50 000000E4 000000000000000000- <1>
    50 000000ED 000000000000000000- <1>
    50 000000F6 00000000000000      <1>
    51                              <1> 
    52 000000FD 000000000000000000- <1> launchBlock db execProg_size dup (0)
    52 00000106 000000000000000000- <1>
    52 0000010F 000000000000000000- <1>
    52 00000118 0000000000          <1>
    53 0000011D 000000000000000000- <1> cmdTail     db cmdBufferL dup (0)   ;This is the tail that is passed to EXEC
    53 00000126 000000000000000000- <1>
    53 0000012F 000000000000000000- <1>
    53 00000138 000000000000000000- <1>
    53 00000141 000000000000000000- <1>
    53 0000014A 000000000000000000- <1>
    53 00000153 000000000000000000- <1>
    53 0000015C 000000000000000000- <1>
    53 00000165 000000000000000000- <1>
    53 0000016E 000000000000000000- <1>
    53 00000177 000000000000000000- <1>
    53 00000180 000000000000000000- <1>
    53 00000189 000000000000000000- <1>
    53 00000192 000000000000000000- <1>
    53 0000019B 0000                <1>
    54                              <1> 
    55 0000019D 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    55 000001A6 000000000000000000- <1>
    55 000001AF 000000000000000000- <1>
    55 000001B8 000000000000000000- <1>
    55 000001C1 000000000000000000- <1>
    55 000001CA 000000000000000000- <1>
    55 000001D3 000000000000000000- <1>
    55 000001DC 000000000000000000- <1>
    55 000001E5 000000000000000000- <1>
    55 000001EE 000000000000000000- <1>
    55 000001F7 000000000000000000- <1>
    55 00000200 000000000000000000- <1>
    55 00000209 000000000000000000- <1>
    55 00000212 000000000000000000- <1>
    55 0000021B 0000                <1>
    56 0000021D 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    56 00000226 000000000000000000- <1>
    56 0000022F 000000000000000000- <1>
    56 00000238 000000000000000000- <1>
    56 00000241 000000000000000000- <1>
    56 0000024A 000000000000000000- <1>
    56 00000253 000000000000000000- <1>
    56 0000025C 000000000000000000- <1>
    56 00000265 000000000000000000- <1>
    56 0000026E 000000000000000000- <1>
    56 00000277 000000000000000000- <1>
    56 00000280 000000000000000000- <1>
    56 00000289 000000000000000000- <1>
    56 00000292 000000000000000000- <1>
    56 0000029B 0000                <1>
    57 0000029D 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    57 000002A6 000000000000000000- <1>
    57 000002AF 000000000000000000- <1>
    57 000002B8 000000000000000000- <1>
    57 000002C1 000000000000000000- <1>
    57 000002CA 000000000000000000- <1>
    57 000002D3 000000000000000000- <1>
    57 000002DC 000000000000000000- <1>
    57 000002E5 00000000000000      <1>
    58                              <1> 
    59 000002EC 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    59 000002F5 0000                <1>
    60 000002F7 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    60 00000300 00000000            <1>
    61 00000304 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    61 0000030D 0000000000          <1>
    62                              <1> 
    63 00000312 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    63 0000031B 000000000000000000- <1>
    63 00000324 000000000000000000- <1>
    63 0000032D 000000000000000000- <1>
    63 00000336 000000000000000000- <1>
    63 0000033F 000000000000000000- <1>
    63 00000348 000000000000000000- <1>
    63 00000351 000000000000000000- <1>
    63 0000035A 00000000000000      <1>
    64 00000361 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    64 0000036A 000000000000000000- <1>
    64 00000373 000000000000000000- <1>
    64 0000037C 000000000000000000- <1>
    64 00000385 000000000000000000- <1>
    64 0000038E 000000000000000000- <1>
    64 00000397 000000000000000000- <1>
    64 000003A0 000000000000000000- <1>
    64 000003A9 00000000000000      <1>
    65                              <1> 
    66                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    67 000003B0 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    67 000003B9 000000000000000000- <1>
    67 000003C2 000000000000000000- <1>
    67 000003CB 000000000000000000- <1>
    67 000003D4 000000000000000000- <1>
    67 000003DD 000000000000000000- <1>
    67 000003E6 000000000000000000- <1>
    67 000003EF 000000000000000000- <1>
    67 000003F8 00000000000000      <1>
    68 000003FF 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    68 00000408 000000000000000000- <1>
    68 00000411 000000000000000000- <1>
    68 0000041A 000000000000000000- <1>
    68 00000423 000000000000000000- <1>
    68 0000042C 000000000000000000- <1>
    68 00000435 000000000000000000- <1>
    68 0000043E 000000000000000000- <1>
    68 00000447 00000000000000      <1>
    69                              <1> 
    70 0000044E 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    71 00000456 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    72                              <1> 
    73 0000045E 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    73 00000467 000000000000000000- <1>
    73 00000470 000000000000000000- <1>
    73 00000479 000000000000000000- <1>
    73 00000482 000000000000000000- <1>
    73 0000048B 000000000000000000- <1>
    73 00000494 000000000000000000- <1>
    73 0000049D 000000000000000000- <1>
    73 000004A6 000000000000000000- <1>
    73 000004AF 000000000000000000- <1>
    73 000004B8 000000000000000000- <1>
    73 000004C1 000000000000000000- <1>
    73 000004CA 000000000000000000- <1>
    73 000004D3 000000000000000000- <1>
    73 000004DC 0000                <1>
    74                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    75                              <1> ; users overtyping
    76                              <1> 
    77                              <1> ;Internal Function vars
    78                              <1> ;Dir Vars
    79 000004DE 00                  <1> dirPrnType  db 0    ;Print type.    Bit[0] set => /W or /w specified
    80                              <1> ;                                   Bit[1] set => /P or /p specified
    81 000004DF 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    82 000004E0 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    83 000004E1 00                  <1> dirDrv      db 0    ;0 based drive number to use
    84 000004E2 000000000000000000- <1> dirOldCWD   db cmdBufferL dup (0)   ;Space for CWD and any overspill 
    84 000004EB 000000000000000000- <1>
    84 000004F4 000000000000000000- <1>
    84 000004FD 000000000000000000- <1>
    84 00000506 000000000000000000- <1>
    84 0000050F 000000000000000000- <1>
    84 00000518 000000000000000000- <1>
    84 00000521 000000000000000000- <1>
    84 0000052A 000000000000000000- <1>
    84 00000533 000000000000000000- <1>
    84 0000053C 000000000000000000- <1>
    84 00000545 000000000000000000- <1>
    84 0000054E 000000000000000000- <1>
    84 00000557 000000000000000000- <1>
    84 00000560 0000                <1>
    85 00000562 000000000000000000- <1> dirPathArg  db cmdBufferL dup (0)   ;Copy the pathspec argument here if any
    85 0000056B 000000000000000000- <1>
    85 00000574 000000000000000000- <1>
    85 0000057D 000000000000000000- <1>
    85 00000586 000000000000000000- <1>
    85 0000058F 000000000000000000- <1>
    85 00000598 000000000000000000- <1>
    85 000005A1 000000000000000000- <1>
    85 000005AA 000000000000000000- <1>
    85 000005B3 000000000000000000- <1>
    85 000005BC 000000000000000000- <1>
    85 000005C5 000000000000000000- <1>
    85 000005CE 000000000000000000- <1>
    85 000005D7 000000000000000000- <1>
    85 000005E0 0000                <1>
    86 000005E2 3F3F3F3F3F3F3F3F    <1> dirSrchPat  db 8 dup ("?")    ;We copy the search pattern here
    87 000005EA 2E                  <1> dirSPExt    db "."
    88 000005EB 3F3F3F              <1>             db 3 dup ("?")
    89                              <1> 
    90                              <1> ;Volume Vars
    91 000005EE 000000000000000000- <1> volLblSpc   db 13 dup (0)
    91 000005F7 00000000            <1>
    92 000005FB 00                  <1> volPathBuf  db 0 ;Drive LETTER goes here
    93 000005FC 3A5C2A2E2A00        <1>             db ":\*.*",0  ;This remains to build X:\*.*,0 for vol label search
    94                              <1> 
    95                              <1> ;Time/Date vars
    96 00000602 00                  <1> td1 db 0    ;Minutes/Year
    97 00000603 00                  <1> td2 db 0    ;Hours/Zero
    98 00000604 00                  <1> td3 db 0    ;Hundredths/Day
    99 00000605 00                  <1> td4 db 0    ;Seconds/Month
   100                              <1> 
   101                              <1> ;Rename/Copy Buffers
   102 00000606 000000000000000000- <1> sourcePath  db cmdBufferL dup (0)
   102 0000060F 000000000000000000- <1>
   102 00000618 000000000000000000- <1>
   102 00000621 000000000000000000- <1>
   102 0000062A 000000000000000000- <1>
   102 00000633 000000000000000000- <1>
   102 0000063C 000000000000000000- <1>
   102 00000645 000000000000000000- <1>
   102 0000064E 000000000000000000- <1>
   102 00000657 000000000000000000- <1>
   102 00000660 000000000000000000- <1>
   102 00000669 000000000000000000- <1>
   102 00000672 000000000000000000- <1>
   102 0000067B 000000000000000000- <1>
   102 00000684 0000                <1>
   103 00000686 000000000000000000- <1> destPath    db cmdBufferL dup (0)
   103 0000068F 000000000000000000- <1>
   103 00000698 000000000000000000- <1>
   103 000006A1 000000000000000000- <1>
   103 000006AA 000000000000000000- <1>
   103 000006B3 000000000000000000- <1>
   103 000006BC 000000000000000000- <1>
   103 000006C5 000000000000000000- <1>
   103 000006CE 000000000000000000- <1>
   103 000006D7 000000000000000000- <1>
   103 000006E0 000000000000000000- <1>
   103 000006E9 000000000000000000- <1>
   103 000006F2 000000000000000000- <1>
   103 000006FB 000000000000000000- <1>
   103 00000704 0000                <1>
   104                              <1> ;Copy Handles
   105 00000706 FFFF                <1> sourceHdl   dw -1
   106 00000708 FFFF                <1> destHdl     dw -1
   107 0000070A 0000                <1> srcHdlInfo  dw 0 ;Used to save the handle device info (bit 7 Set -> Char dev)
   108                              <1> 
   109 0000070C 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   109 00000715 000000000000000000- <1>
   109 0000071E 000000000000000000- <1>
   109 00000727 000000000000000000- <1>
   109 00000730 000000000000000000- <1>
   109 00000739 000000000000000000- <1>
   109 00000742 000000000000000000- <1>
   109 0000074B 000000000000000000- <1>
   109 00000754 000000000000000000- <1>
   109 0000075D 000000000000000000- <1>
   109 00000766 000000000000000000- <1>
   109 0000076F 000000000000000000- <1>
   109 00000778 000000000000000000- <1>
   109 00000781 000000000000000000- <1>
   109 0000078A 0000                <1>
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 0000078C 03444952            <1>     db 3, "DIR"
     8 00000790 7617                <1>     dw dir - startLbl
     9                              <1> 
    10 00000792 024344              <1>     db 2, "CD"
    11 00000795 141B                <1>     dw chdir - startLbl
    12                              <1> 
    13 00000797 054348444952        <1>     db 5, "CHDIR"
    14 0000079D 141B                <1>     dw chdir - startLbl
    15                              <1> 
    16 0000079F 024D44              <1>     db 2, "MD"
    17 000007A2 BC1B                <1>     dw mkdir - startLbl
    18                              <1> 
    19 000007A4 054D4B444952        <1>     db 5, "MKDIR"
    20 000007AA BC1B                <1>     dw mkdir - startLbl
    21                              <1> 
    22 000007AC 025244              <1>     db 2, "RD"
    23 000007AF 081C                <1>     dw rmdir - startLbl
    24                              <1> 
    25 000007B1 05524D444952        <1>     db 5, "RMDIR"
    26 000007B7 081C                <1>     dw rmdir - startLbl
    27                              <1> 
    28 000007B9 0344454C            <1>     db 3, "DEL"
    29 000007BD 321E                <1>     dw erase - startLbl
    30                              <1> 
    31 000007BF 054552415345        <1>     db 5, "ERASE"
    32 000007C5 321E                <1>     dw erase - startLbl
    33                              <1> 
    34 000007C7 0444415445          <1>     db 4, "DATE"
    35 000007CC 5B1E                <1>     dw date - startLbl
    36                              <1> 
    37 000007CE 0454494D45          <1>     db 4, "TIME"
    38 000007D3 241F                <1>     dw time - startLbl
    39                              <1> 
    40 000007D5 04434F5059          <1>     db 4, "COPY"
    41 000007DA 541C                <1>     dw copy - startLbl
    42                              <1> 
    43 000007DC 0443545459          <1>     db 4, "CTTY"
    44 000007E1 BF1F                <1>     dw ctty - startLbl
    45                              <1> 
    46 000007E3 03434C53            <1>     db 3, "CLS"
    47 000007E7 5A20                <1>     dw cls - startLbl
    48                              <1> 
    49 000007E9 05425245414B        <1>     db 5, "BREAK"
    50 000007EF CC20                <1>     dw break - startLbl
    51                              <1> 
    52 000007F1 06564552494659      <1>     db 6, "VERIFY"
    53 000007F8 4D21                <1>     dw verify - startLbl
    54                              <1> 
    55 000007FA 0652454E414D45      <1>     db 6, "RENAME"
    56 00000801 CA21                <1>     dw rename - startLbl
    57                              <1> 
    58 00000803 044D4F5645          <1>     db 4, "MOVE"
    59 00000808 CA21                <1>     dw rename - startLbl
    60                              <1>     
    61 0000080A 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 00000813 8F23                <1>     dw truename - startLbl
    63                              <1> 
    64 00000815 03564552            <1>     db 3, "VER"
    65 00000819 1425                <1>     dw version - startLbl
    66                              <1> 
    67 0000081B 03564F4C            <1>     db 3, "VOL"
    68 0000081F 0124                <1>     dw volume - startLbl
    69                              <1> 
    70 00000821 034D454D            <1>     db 3, "MEM"
    71 00000825 5825                <1>     dw memory - startLbl
    72                              <1> 
    73 00000827 0445584954          <1>     db 4, "EXIT"
    74 0000082C 3A27                <1>     dw exit - startLbl
    75                              <1> 
    76 0000082E 0454595045          <1>     db 4, "TYPE"
    77 00000833 A226                <1>     dw type - startLbl
    78                              <1> 
    79 00000835 05544F554348        <1>     db 5, "TOUCH"
    80 0000083B 9722                <1>     dw touch - startLbl
    81                              <1> 
    82 0000083D 044A4F494E          <1>     db 4, "JOIN"
    83 00000842 D222                <1>     dw join - startLbl
    84                              <1> 
    85 00000844 055355425354        <1>     db 5, "SUBST"
    86 0000084A 8F23                <1>     dw subst - startLbl
    87                              <1> 
    88 0000084C FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 0000084D 0D0A24              <1> crlf    db  CR,LF,"$"
     3 00000850 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 00000855 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 0000085E 696C65206D69737369- <1>
     4 00000867 6E670D0A24          <1>
     5 0000086C 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 00000875 6469736B2077697468- <1>
     5 0000087E 206261746368206669- <1>
     5 00000887 6C65                <1>
     6 00000889 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 00000892 737320616E79206B65- <1>
     6 0000089B 79207768656E207265- <1>
     6 000008A4 6164790D0A24        <1>
     7 000008AA 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 000008B3 6E64206F722066696C- <1>
     7 000008BC 65206E616D650D0A24  <1>
     8 000008C5 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 000008CE 2066696C65206E616D- <1>
     8 000008D7 65206F7220          <1>
     9 000008DC 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 000008E5 666F756E640D0A24    <1>
    10 000008ED 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    10 000008F6 656E74206469736B20- <1>
    10 000008FF 73706163650D0A24    <1>
    11 00000907 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 00000910 7669726F6E6D656E74- <1>
    11 00000919 2073706163650D0A24  <1>
    12 00000922 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 0000092B 74696F6E206572726F- <1>
    12 00000934 720D0A24            <1>
    13 00000938 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 00000941 6F7420626520636F70- <1>
    13 0000094A 696564206F6E746F20- <1>
    13 00000953 697473656C660D0A24  <1>
    14 0000095C 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 00000965 662064657374696E61- <1>
    14 0000096E 74696F6E206C6F7374- <1>
    14 00000977 206265666F72652063- <1>
    14 00000980 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 00000986 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 0000098F 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 00000998 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 000009A1 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 000009A2 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 000009AB 65650D0A24          <1>
    21 000009B0 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 000009B9 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 000009C2 726976652073706563- <1>
    23 000009CB 696669636174696F6E- <1>
    23 000009D4 0D0A24              <1>
    24 000009D7 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 000009E0 6B6579207768656E20- <1>
    24 000009E9 7265616479202E202E- <1>
    24 000009F2 202E2024            <1>
    25 000009F6 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 000009FF 6172616D657465720D- <1>
    25 00000A08 0A24                <1>
    26                              <1> 
    27 00000A0A 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 00000A13 576564546875467269- <1>
    27 00000A1C 536174              <1>
    28 00000A1F 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 00000A28 206461746524        <1>
    29 00000A2E 43757272656E742064- <1> curDate db  "Current date is $"
    29 00000A37 6174652069732024    <1>
    30 00000A3F 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 00000A48 657720646174652024  <1>
    31 00000A51 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 00000A5A 293A2024            <1>
    32 00000A5E 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 00000A67 293A2024            <1>
    33 00000A6B 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 00000A74 293A2024            <1>
    34 00000A78 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 00000A81 2074696D6524        <1>
    35 00000A87 43757272656E742074- <1> curTime db  "Current time is $"
    35 00000A90 696D652069732024    <1>
    36 00000A98 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 00000AA1 65772074696D653A20- <1>
    36 00000AAA 24                  <1>
    37                              <1> 
    38 00000AAB 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000AB4 7572652028592F4E29- <1>
    38 00000ABD 3F2024              <1>
    39                              <1> 
    40 00000AC0 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000AC9 56657273696F6E2024  <1>
    41                              <1> 
    42 00000AD2 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000ADB 6E2064726976652024  <1>
    43 00000AE4 2069732024          <1> volOk   db " is $"
    44 00000AE9 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000AF2 6162656C24          <1>
    45                              <1> 
    46 00000AF7 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000B00 69726563746F72790D- <1>
    46 00000B09 0A24                <1>
    47 00000B0B 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000B14 206372656174652064- <1>
    47 00000B1D 69726563746F72790D- <1>
    47 00000B26 0A24                <1>
    48 00000B28 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000B31 6174682C206E6F7420- <1>
    48 00000B3A 6469726563746F7279- <1>
    48 00000B43 2C0D0A              <1>
    49 00000B46 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000B4F 6F7279206E6F742065- <1>
    49 00000B58 6D7074790D0A24      <1>
    50 00000B5F 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000B68 79206F66202024      <1>
    51 00000B6F 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000B78 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    52 00000B81 7269766520696E2073- <1>
    52 00000B8A 656172636820706174- <1>
    52 00000B93 680D0A24            <1>
    53 00000B97 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    53 00000BA0 65766963650D0A24    <1>
    54 00000BA8 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    54 00000BB1 20666F756E640D0A24  <1>
    55 00000BBA 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    55 00000BC3 726F720D0A24        <1>
    56 00000BC9 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    56 00000BD2 6F74206265206E6573- <1>
    56 00000BDB 7465640D0A24        <1>
    57 00000BE1 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    57 00000BEA 6174652066696C6520- <1>
    57 00000BF3 6572726F7220647572- <1>
    57 00000BFC 696E6720706970650D- <1>
    57 00000C05 0A24                <1>
    58 00000C07 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    58 00000C10 2062696E6172792072- <1>
    58 00000C19 656164732066726F6D- <1>
    58 00000C22 206120646576696365- <1>
    58 00000C2B 0D0A24              <1>
    59 00000C2E 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    60 00000C34 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    61 00000C39 425245414B20697320- <1> breakIs db "BREAK is $"
    61 00000C42 24                  <1>
    62 00000C43 564552494659206973- <1> verifyIs    db "VERIFY is $"
    62 00000C4C 2024                <1>
    63 00000C4E 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    64 00000C57 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    64 00000C60 617468206F72206669- <1>
    64 00000C69 6C65206E616D650D0A- <1>
    64 00000C72 24                  <1>
    65 00000C73 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    65 00000C7C 756D626572206F6620- <1>
    65 00000C85 706172616D65746572- <1>
    65 00000C8E 730D0A24            <1>
    66 00000C92 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    66 00000C9B 74696E6720746F2064- <1>
    66 00000CA4 6576696365          <1>
    67 00000CA9 08200800            <1> backSpace   db BSP," ",BSP,NUL
    68                              <1> 
    69 00000CAD 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    69 00000CB6 20202020202020546F- <1>
    69 00000CBF 74616C207379737465- <1>
    69 00000CC8 6D206D656D6F72793A- <1>
    69 00000CD1 2024                <1>
    70 00000CD3 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    70 00000CDC 20202020202020204D- <1>
    70 00000CE5 656D6F727920757365- <1>
    70 00000CEE 6420627920444F533A- <1>
    70 00000CF7 2024                <1>
    71 00000CF9 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    71 00000D02 656D6F727920757365- <1>
    71 00000D0B 64206279206170706C- <1>
    71 00000D14 69636174696F6E733A- <1>
    71 00000D1D 2024                <1>
    72 00000D1F 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    72 00000D28 656D6F727920726573- <1>
    72 00000D31 657276656420627920- <1>
    72 00000D3A 68617264776172653A- <1>
    72 00000D43 2024                <1>
    73 00000D45 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    73 00000D4E 202020202020202020- <1>
    73 00000D57 2020202020204D656D- <1>
    73 00000D60 6F727920667265653A- <1>
    73 00000D69 2024                <1>
    74 00000D6B 20627974657324      <1> memByte db " bytes$"
    75 00000D72 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    75 00000D7B 6F7420417373657274- <1>
    75 00000D84 61696E20444F532045- <1>
    75 00000D8D 6E74727920506F696E- <1>
    75 00000D96 7424                <1>
    76 00000D98 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    76 00000DA1 416C6C6F636174696F- <1>
    76 00000DAA 6E204572726F7224    <1>
    77 00000DB2 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    77 00000DBB 4572726F7224        <1>
    78 00000DC1 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    78 00000DCA 68616C74656424      <1>
    79                              <1> 
    80 00000DD1 556E61626C6520746F- <1> touchErr db "Unable to create file",CR,LF,"$"
    80 00000DDA 206372656174652066- <1>
    80 00000DE3 696C650D0A24        <1>
    81 00000DE9 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    81 00000DF2 206372656174652070- <1>
    81 00000DFB 6970650D0A          <1>
    82                              <1> pipeErrMsgL equ $ - pipeErrMsg
    83 00000E00 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    83 00000E09 6F6E206572726F720D- <1>
    83 00000E12 0A                  <1>
    84                              <1> redirErrMsgL   equ $ - redirErrMsg
    85                              <1> 
    86 00000E13 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    87 00000E17 2020202024          <1> fourSpc  db "    $"
    88 00000E1C 20202024            <1> threeSpc db "   $"
    89 00000E20 202024              <1> twoSpc   db "  $"
    90                              <1> 
    91 00000E23 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    91 00000E2C 696679204F4E206F72- <1>
    91 00000E35 204F46460D0A24      <1>
    92 00000E3C 504154483D          <1> pathEVar db "PATH="
    93 00000E41 50524F4D50543D      <1> promptEVar  db "PROMPT="
    94                              <1> 
    95                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    96                              <1> ; handles and reopen CON
    97 00000E48 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00000E4C 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00000E4F 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00000E53 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 00000E56 B44A                <1>     mov ah, 4Ah ;Realloc
     9 00000E58 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00000E5B CD41                <1>     int 41h
    11 00000E5D EB68                <1>     jmp short commandMain
    12                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    13 00000E5F B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    14 00000E64 CD41                <1>     int 41h
    15 00000E66 668905A0F1FFFF      <1>     mov word [returnCode], ax
    16                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    17 00000E6D 488D157C200000      <1>     lea rdx, critErrorHandler
    18 00000E74 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    19 00000E78 B844250000          <1>     mov eax, 2544h
    20 00000E7D CD41                <1>     int 41h
    21 00000E7F 488D15FA220000      <1>     lea rdx, int43h
    22 00000E86 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    23 00000E8A B843250000          <1>     mov eax, 2543h
    24 00000E8F CD41                <1>     int 41h
    25 00000E91 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    26 00000E98 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    27 00000E9C B842250000          <1>     mov eax, 2542h
    28 00000EA1 CD41                <1>     int 41h
    29 00000EA3 F60505F2FFFFFF      <1>     test byte [pipeFlag], -1
    30 00000EAA 7574                <1>     jnz commandMain.pipeProceed ;Skip the handle closing when pipe active
    31 00000EAC E8BA040000          <1>     call cleanUpRedir   ;Clean up redirection once we are done
    32                              <1> ;Close all handles from 5->MAX
    33 00000EB1 0FB70D6FF1FFFF      <1>     movzx ecx, word [numHdls]
    34 00000EB8 BB05000000          <1>     mov ebx, 5
    35                              <1> .handleClose:
    36 00000EBD B43E                <1>     mov ah, 3Eh ;File close
    37 00000EBF CD41                <1>     int 41h
    38 00000EC1 FFC3                <1>     inc ebx ;Goto next file
    39 00000EC3 39CB                <1>     cmp ebx, ecx
    40 00000EC5 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    41                              <1> commandMain:
    42                              <1> ;Setup Commandline
    43 00000EC7 488B2537F1FFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    44 00000ECE FC                  <1>     cld ;Ensure stringops are done the right way
    45 00000ECF C605C7F2FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    46                              <1> .inputMain:
    47 00000ED6 E8411A0000          <1>     call printCRLF
    48                              <1> .inputMain2:
    49 00000EDB E8B01D0000          <1>     call clearCommandLineState
    50 00000EE0 E8791D0000          <1>     call printPrompt
    51                              <1> 
    52 00000EE5 488D15B1F2FFFF      <1>     lea rdx, inBuffer
    53 00000EEC B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    54 00000EF1 CD41                <1>     int 41h
    55 00000EF3 E8241A0000          <1>     call printCRLF  ;Note we have accepted input
    56                              <1> 
    57                              <1> ;First check we had something typed in of length greater than 0
    58                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    59 00000EF8 803D9FF2FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    60 00000EFF 74DA                <1>     je .inputMain2
    61                              <1>     ;Copy over the input text
    62 00000F01 488D3595F2FFFF      <1>     lea rsi, inBuffer
    63 00000F08 488D3D0EF3FFFF      <1>     lea rdi, cmdBuffer
    64 00000F0F B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    65 00000F14 F3A4                <1>     rep movsb
    66                              <1> .pipeLoop:
    67 00000F16 E838000000          <1>     call parseInput
    68 00000F1B E8CB010000          <1>     call doCommandLine
    69                              <1> .pipeProceed:
    70 00000F20 E846040000          <1>     call cleanUpRedir
    71 00000F25 488B057BF1FFFF      <1>     mov rax, qword [cmdEndPtr]
    72 00000F2C 4889056CF1FFFF      <1>     mov qword [cmdStartPtr], rax
    73 00000F33 F60575F1FFFFFF      <1>     test byte [pipeFlag], -1  ;If we have any pipes active, we proceed here
    74 00000F3A 749A                <1>     jz .inputMain
    75 00000F3C E8341D0000          <1>     call clearCommandState  ;Else, clear the command state and start again
    76 00000F41 EBD3                <1>     jmp short .pipeLoop
    77                              <1> .dfltErrExit:
    78 00000F43 488D1560F9FFFF      <1>     lea rdx, badCmd
    79 00000F4A B409                <1>     mov ah, 09h
    80 00000F4C CD41                <1>     int 41h
    81 00000F4E E983FFFFFF          <1>     jmp .inputMain
    82                              <1> 
    83                              <1> parseInput:
    84                              <1> ;EndOff is set up before entering this part
    85                              <1> ;Copies a nicely formatted version of the input command line
    86                              <1> ; without any redirections to psp.dta
    87                              <1>     ;lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
    88 00000F53 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    89 00000F5A 488B353EF1FFFF      <1>     mov rsi, qword [cmdStartPtr]
    90 00000F61 4885F6              <1>     test rsi, rsi
    91 00000F64 7507                <1>     jnz .notNewCmd
    92 00000F66 488D35B1F2FFFF      <1>     lea rsi, [cmdBuffer + 1]    ;Goto command buffer - 1
    93                              <1> .notNewCmd:
    94 00000F6D 48FFC6              <1>     inc rsi ;Goto first char in new buffer since rsi points to terminating char
    95 00000F70 E8DA1C0000          <1>     call skipSpaces ;Skip any preceeding spaces
    96 00000F75 66AD                <1>     lodsw   ;Get the first two chars into ax
    97 00000F77 66890536F1FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
    98 00000F7E 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
    99 00000F85 56                  <1>     push rsi
   100 00000F86 57                  <1>     push rdi
   101 00000F87 488D3D0FF3FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   102 00000F8E 57                  <1>     push rdi
   103 00000F8F E804070000          <1>     call copyCommandTailItemProgram
   104 00000F94 5F                  <1>     pop rdi
   105 00000F95 9C                  <1>     pushfq  ;Save the CF state
   106 00000F96 E8461C0000          <1>     call strlen
   107 00000F9B FFC9                <1>     dec ecx ;Drop the terminating char from the count
   108 00000F9D 58                  <1>     pop rax ;Get the CF state in al
   109 00000F9E 5F                  <1>     pop rdi
   110 00000F9F 5E                  <1>     pop rsi
   111 00000FA0 F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   112 00000FA2 A801                <1>     test al, 1  ;Was CF set?
   113 00000FA4 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   114                              <1> .cmdLineProcess:
   115 00000FAA E8A01C0000          <1>     call skipSpaces ;Go to the next char in the input line
   116                              <1> .redirFound:
   117 00000FAF AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   118 00000FB0 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   119 00000FB2 747C                <1>     je .exit
   120 00000FB4 E822050000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   121 00000FB9 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   122 00000FBB 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   123 00000FBD B020                <1>     mov al, " "
   124 00000FBF AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   125 00000FC0 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   126 00000FC3 F605F2F0FFFFFF      <1>     test byte [arg1Flg], -1
   127 00000FCA 7521                <1>     jnz .arg2
   128                              <1> .arg1:
   129 00000FCC C605E9F0FFFFFF      <1>     mov byte [arg1Flg], -1
   130 00000FD3 E8771C0000          <1>     call skipSpaces
   131 00000FD8 4889F0              <1>     mov rax, rsi
   132 00000FDB 488D1D3BF2FFFF      <1>     lea rbx, cmdBuffer
   133 00000FE2 4829D8              <1>     sub rax, rbx
   134 00000FE5 8805D2F0FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   135 00000FEB EB2A                <1>     jmp short .argCommon
   136                              <1> .arg2:
   137 00000FED F605CBF0FFFFFF      <1>     test byte [arg2Flg], -1
   138 00000FF4 7521                <1>     jnz .argCommon
   139 00000FF6 C605C2F0FFFFFF      <1>     mov byte [arg2Flg], -1
   140 00000FFD E84D1C0000          <1>     call skipSpaces
   141 00001002 4889F0              <1>     mov rax, rsi
   142 00001005 488D1D11F2FFFF      <1>     lea rbx, cmdBuffer
   143 0000100C 4829D8              <1>     sub rax, rbx
   144 0000100F 8805ABF0FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   145 00001015 EB00                <1>     jmp short .argCommon
   146                              <1> .argCommon:
   147                              <1>     ;More than two arguments? Do nothing more than just copy it
   148                              <1>     ; over. If we encounter an embedded CR, exit there too
   149 00001017 E8331C0000          <1>     call skipSpaces
   150 0000101C 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   151 0000101F 740F                <1>     je .exit
   152                              <1>     ;If not, we copy it over
   153 00001021 E890060000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   154 00001026 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   155 0000102A 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   156                              <1> .exit:
   157 00001030 48FFCE              <1>     dec rsi
   158 00001033 4889356DF0FFFF      <1>     mov qword [cmdEndPtr], rsi
   159 0000103A B00D                <1>     mov al, CR
   160 0000103C AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   161                              <1>     ;Now compute the command line length 
   162 0000103D 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   163 00001044 B00D                <1>     mov al, CR
   164 00001046 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   165 00001048 FFC9                <1>     dec ecx ;rcx = -1
   166 0000104A F2AE                <1>     repne scasb
   167 0000104C F7D1                <1>     not ecx
   168 0000104E FEC9                <1>     dec cl  ;Dont include terminating CR
   169 00001050 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   170 00001057 880F                <1>     mov byte [rdi], cl
   171                              <1>     ;Before returning, we copy the command name to cmdName
   172 00001059 488D3D3DF2FFFF      <1>     lea rdi, cmdPathSpec
   173 00001060 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   174 00001063 30C0                <1>     xor al, al  ;Search for the terminating null
   175 00001065 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   176 0000106A F2AE                <1>     repne scasb
   177 0000106C 48FFCF              <1>     dec rdi ;Go to the last char in the command
   178 0000106F 4889FE              <1>     mov rsi, rdi
   179 00001072 FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   180                              <1> .keepSearching:
   181 00001073 AC                  <1>     lodsb
   182 00001074 3A05B1EFFFFF        <1>     cmp al, byte [pathSep]
   183 0000107A 740B                <1>     je .cmdStartFnd
   184 0000107C 4839DE              <1>     cmp rsi, rbx
   185 0000107F 75F2                <1>     jne .keepSearching
   186 00001081 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   187 00001084 48FFCE              <1>     dec rsi
   188                              <1> .cmdStartFnd:
   189 00001087 48FFC6              <1>     inc rsi
   190 0000108A 48FFC6              <1>     inc rsi ;Go past the pathsep
   191 0000108D FC                  <1>     cld ;Go the sane way again
   192 0000108E 488D3D70F2FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   193 00001095 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   194 00001096 B90E000000          <1>     mov ecx, cmdNameL
   195 0000109B 30C0                <1>     xor al, al
   196 0000109D F3AA                <1>     rep stosb
   197 0000109F 5F                  <1>     pop rdi
   198 000010A0 31C9                <1>     xor ecx, ecx
   199 000010A2 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   200                              <1> .cmdGetChar:
   201 000010A3 AC                  <1>     lodsb
   202 000010A4 84C0                <1>     test al, al ;Did we find the terminating null?
   203 000010A6 7411                <1>     jz .nameLenFnd
   204 000010A8 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   205 000010AA 740D                <1>     je .nameLenFnd
   206 000010AC 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   207 000010AE AA                  <1>     stosb   ;and store it
   208 000010AF FFC1                <1>     inc ecx
   209 000010B1 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   210 000010B7 72EA                <1>     jb .cmdGetChar
   211                              <1> .nameLenFnd:
   212 000010B9 880D45F2FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   213                              <1>     ;Now finally, create a FCB filespec
   214 000010BF 488D3D26F2FFFF      <1>     lea rdi, fcbCmdSpec
   215 000010C6 57                  <1>     push rdi
   216 000010C7 B90B000000          <1>     mov ecx, fcbNameL
   217 000010CC B020                <1>     mov al, " " ;Fill with spaces
   218 000010CE F3AA                <1>     rep stosb
   219 000010D0 5F                  <1>     pop rdi
   220 000010D1 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   221 000010D2 E8DE1B0000          <1>     call asciiToFCB
   222 000010D7 488D350EF2FFFF      <1>     lea rsi, fcbCmdSpec
   223 000010DE 488D3D12F2FFFF      <1>     lea rdi, cmdSpec
   224 000010E5 E8261C0000          <1>     call FCBToAsciiz
   225                              <1>     return
    13                              <2> %%_ret:
    14 000010EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> 
   227                              <1> doCommandLine:
   228 000010EB 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   229                              <1>     ;The following check accounts for the end of a piped command
   230 000010F2 803E0D              <1>     cmp byte [rsi], CR  ;If the first char is a CR, exit the pipe loop
   231                              <1>     rete    ;Do not attempt to execute if the first char is a CR
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000010F5 74(EA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   232 000010F7 488D3DC4EFFFFF      <1>     lea rdi, cmdFcb
   233 000010FE B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   234 00001103 CD41                <1>     int 41h
   235 00001105 0FB71DA8EFFFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   236 0000110C 80FF3A              <1>     cmp bh, ":"
   237 0000110F 752E                <1>     jne .noDriveSpecified
   238 00001111 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   239 00001113 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   240 00001116 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   241 00001119 3CFF                <1>     cmp al, -1  ;Int 41h returns AL = -1 if bad drive specified
   242 0000111B 7415                <1>     je .badDrive
   243                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   244 0000111D 803DE0F1FFFF02      <1>     cmp byte [cmdName], 2
   245 00001124 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   246 00001126 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   247 00001128 CD41                <1>     int 41h 
   248 0000112A B419                <1>     mov ah, 19h
   249 0000112C CD41                <1>     int 41h     ;Get current drive
   250 0000112E 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   251                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001130 74(EA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   252                              <1> .badDrive:
   253 00001132 488D1580F8FFFF      <1>     lea rdx, badDrv
   254 00001139 B409                <1>     mov ah, 09h
   255 0000113B CD41                <1>     int 41h
   256 0000113D F9                  <1>     stc
   257                              <1>     return
    13                              <2> %%_ret:
    14 0000113E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   258                              <1> .noDriveSpecified:
   259                              <1> ;Now we set the two FCB's in the command line
   260 0000113F F60576EFFFFFFF      <1>     test byte [arg1Flg], -1
   261 00001146 744D                <1>     jz .fcbArgsDone
   262 00001148 0FB6056EEFFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   263 0000114F 488D35C7F0FFFF      <1>     lea rsi, cmdBuffer
   264 00001156 4801C6              <1>     add rsi, rax    ;Point to first argument
   265 00001159 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   266 0000115D B801290000          <1>     mov eax, 2901h
   267 00001162 CD41                <1>     int 41h
   268 00001164 880554EFFFFF        <1>     mov byte [arg1FCBret], al
   269 0000116A F6054EEFFFFFFF      <1>     test byte [arg2Flg], -1
   270 00001171 7422                <1>     jz .fcbArgsDone
   271 00001173 0FB60546EFFFFF      <1>     movzx eax, byte [arg2Off]
   272 0000117A 488D359CF0FFFF      <1>     lea rsi, cmdBuffer
   273 00001181 4801C6              <1>     add rsi, rax    ;Point to first argument
   274 00001184 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   275 00001188 B801290000          <1>     mov eax, 2901h
   276 0000118D CD41                <1>     int 41h
   277 0000118F 88052CEFFFFF        <1>     mov byte [arg2FCBret], al
   278                              <1> .fcbArgsDone:
   279 00001195 488D1D81F0FFFF      <1>     lea rbx, cmdBuffer
   280 0000119C 488D3561F1FFFF      <1>     lea rsi, cmdName
   281 000011A3 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   282 000011A8 BAFFFF0000          <1>     mov edx, 0FFFFh
   283 000011AD B5FF                <1>     mov ch, -1
   284 000011AF CD4F                <1>     int 4Fh ;Give the TSR time to prepare if it needs to
   285 000011B1 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   286 000011B6 BAFFFF0000          <1>     mov edx, 0FFFFh
   287 000011BB 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   288 000011BD CD4F                <1>     int 4Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   289                              <1>             ;        al = 0  if the command should be executed as usual
   290 000011BF 84C0                <1>     test al, al
   291 000011C1 741D                <1>     jz .executeInternal
   292                              <1>     ;Here we execute externally and return to the prompt
   293                              <1>     ; as if it was an internal execution
   294 000011C3 488D35D3EFFFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   295 000011CA 488D1DF1EEFFFF      <1>     lea rbx, cmdFcb
   296 000011D1 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   297 000011D6 BAFFFF0000          <1>     mov edx, 0FFFFh
   298 000011DB B5FF                <1>     mov ch, -1
   299 000011DD CD4F                <1>     int 4Fh 
   300                              <1>     return
    13                              <2> %%_ret:
    14 000011DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   301                              <1> .executeInternal:
   302                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   303                              <1> ;rsi points after the command terminator in the command tail
   304 000011E0 488D1DA5F5FFFF      <1>     lea rbx, functionTable
   305                              <1> .nextEntry:
   306 000011E7 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   307 000011EA 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   308 000011ED 0F847D150000        <1>     je launchChild      ;If so, check externally now
   309 000011F3 380D0BF1FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   310 000011F9 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   311                              <1>     ;Here they have the same length so lets see if the name is the same
   312 000011FB 56                  <1>     push rsi
   313                              <1>     ;ecx has the length to compare
   314 000011FC 51                  <1>     push rcx
   315 000011FD 488D7301            <1>     lea rsi, qword [rbx + 1]
   316 00001201 488D3DFDF0FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   317 00001208 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   318 0000120A 59                  <1>     pop rcx
   319 0000120B 5E                  <1>     pop rsi
   320 0000120C 7516                <1>     jne .gotoNextEntry
   321                              <1>     ;Here it was found both strings are equal
   322 0000120E 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   323 00001213 480FB71F            <1>     movzx rbx, word [rdi]
   324 00001217 488D3DE2EDFFFF      <1>     lea rdi, startLbl
   325 0000121E 4801FB              <1>     add rbx, rdi
   326 00001221 FFD3                <1>     call rbx    ;Call this function...
   327                              <1>     return  ;... and return
    13                              <2> %%_ret:
    14 00001223 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   328                              <1> .gotoNextEntry:
   329 00001224 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   330 0000122B 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   331 0000122E EBB7                <1>     jmp short .nextEntry
   332                              <1> .dfltErrExit:
   333 00001230 488D1573F6FFFF      <1>     lea rdx, badCmd
   334 00001237 B409                <1>     mov ah, 09h
   335 00001239 CD41                <1>     int 41h
   336                              <1>     return
    13                              <2> %%_ret:
    14 0000123B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   337                              <1> 
   338                              <1> 
   339                              <1> checkExtensionExec:
   340                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   341                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   342                              <1> ;         If ZF=ZE and CF=CY => Batch file
   343 0000123C 8B0589EEFFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   344 00001242 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   345 00001247 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   346 0000124C 25DFDFDFFF          <1>     and eax, 0FFDFDFDFh ;Uppercase the three letters
   347 00001251 3D434F4D20          <1>     cmp eax, "COM "
   348                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001256 74(3B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   349 00001258 3D45584520          <1>     cmp eax, "EXE "
   350                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000125D 74(3B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   351 0000125F 3D42415420          <1>     cmp eax, "BAT "
   352                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001264 75(3B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   353 00001266 F9                  <1>     stc
   354                              <1>     return
    13                              <2> %%_ret:
    14 00001267 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   355                              <1> 
   356                              <1> redirFailure:
   357 00001268 488D1591FBFFFF      <1>     lea rdx, redirErrMsg
   358 0000126F B913000000          <1>     mov ecx, redirErrMsgL
   359 00001274 EB0C                <1>     jmp short redirPipeFailureCommon
   360                              <1> pipeFailure:
   361 00001276 488D156CFBFFFF      <1>     lea rdx, pipeErrMsg
   362 0000127D B917000000          <1>     mov ecx, pipeErrMsgL
   363                              <1> redirPipeFailureCommon:
   364                              <1> ;This routine is called if any problems happen during 
   365                              <1> ;This routine tries to close whatever handles are not -1 and delete
   366                              <1> ; pipe files if the pipe count is not 0
   367                              <1> ;It resets all variables and proceeds.
   368 00001282 B800400000          <1>     mov eax, 4000h  ;Write handle
   369 00001287 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   370 0000128C CD41                <1>     int 41h
   371 0000128E 31DB                <1>     xor ebx, ebx    ;Select STDIN
   372 00001290 E8C6000000          <1>     call .closeHandle
   373 00001295 FFC3                <1>     inc ebx         ;Select STDOUT
   374 00001297 E8BF000000          <1>     call .closeHandle
   375 0000129C B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   376 000012A1 488D15A0FBFFFF      <1>     lea rdx, conName
   377 000012A8 CD41                <1>     int 41h
   378 000012AA 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
   379 000012AC B800450000          <1>     mov eax, 4500h  ;DUP
   380 000012B1 CD41                <1>     int 41h
   381 000012B3 66C705FAEDFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   382 000012BC 0FB71DF5EDFFFF      <1>     movzx ebx, word [redirSTDIN]
   383 000012C3 E893000000          <1>     call .closeHandle
   384                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   385 000012C8 66C705E7EDFFFFFFFF  <1>     mov word [redirSTDIN], -1
   386 000012D1 0FB71DE2EDFFFF      <1>     movzx ebx, word [redirSTDOUT]
   387 000012D8 E87E000000          <1>     call .closeHandle
   388 000012DD 66C705D4EDFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   389 000012E6 0FB71DC3EDFFFF      <1>     movzx ebx, word [pipeSTDIN]
   390 000012ED E869000000          <1>     call .closeHandle
   391 000012F2 66C705B5EDFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   392 000012FB 0FB71DB0EDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   393 00001302 E854000000          <1>     call .closeHandle
   394 00001307 66C705A2EDFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   395 00001310 C60598EDFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   396 00001317 488D1592F0FFFF      <1>     lea rdx, qword [pipe1Filespec]
   397 0000131E 803A00              <1>     cmp byte [rdx], 0
   398 00001321 7407                <1>     jz .checkOld
   399 00001323 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   400 00001328 CD41                <1>     int 41h
   401                              <1> .checkOld:
   402 0000132A 488D15CEF0FFFF      <1>     lea rdx, qword [pipe2Filespec]
   403 00001331 803A00              <1>     cmp byte [rdx],0
   404 00001334 7407                <1>     jz .pipeNamesComplete
   405 00001336 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   406 0000133B CD41                <1>     int 41h
   407                              <1> .pipeNamesComplete:
   408 0000133D 31C0                <1>     xor eax, eax
   409                              <1>     ;Invalidate the pointers and the paths too
   410 0000133F 48890508F1FFFF      <1>     mov qword [newPipe], rax
   411 00001346 48890509F1FFFF      <1>     mov qword [oldPipe], rax
   412 0000134D 89055DF0FFFF        <1>     mov dword [pipe1Filespec], eax
   413 00001353 8905A6F0FFFF        <1>     mov dword [pipe2Filespec], eax
   414 00001359 F9                  <1>     stc
   415                              <1>     return
    13                              <2> %%_ret:
    14 0000135A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   416                              <1> .closeHandle:
   417 0000135B 81FBFFFFFFFF        <1>     cmp ebx, -1
   418                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001361 74(5A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   419 00001363 B8003E0000          <1>     mov eax, 3E00h
   420 00001368 CD41                <1>     int 41h
   421                              <1>     return
    13                              <2> %%_ret:
    14 0000136A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   422                              <1> 
   423                              <1> cleanUpRedir:
   424                              <1> ;Cleans up the redir stuff after we are done.
   425 0000136B 0FB7053EEDFFFF      <1>     movzx eax, word [pipeSTDIN]
   426 00001372 0FB71D39EDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   427 00001379 C1E310              <1>     shl ebx, 10h
   428 0000137C 09D8                <1>     or eax, ebx
   429 0000137E 3DFFFFFFFF          <1>     cmp eax, -1
   430 00001383 750C                <1>     jne .pipe
   431 00001385 C60523EDFFFF00      <1>     mov byte [pipeFlag], 0  ;Clear the flag
   432 0000138C E9CD000000          <1>     jmp .redirInClear   ;If no piping, skip
   433                              <1> .pipe:
   434                              <1> ;Pipe processing here
   435                              <1> ;We handle stdin, closing the redir if it is and deleting
   436                              <1> ; the redir file.
   437                              <1> ;Then we handle stdout, moving the redir to stdin.
   438 00001391 66813D16EDFFFFFFFF  <1>     cmp word [pipeSTDIN], -1
   439 0000139A 7443                <1>     je .pipeNostdin
   440                              <1>     ;We close the handle first and delete the file.
   441 0000139C 0FB71D0DEDFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   442 000013A3 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   443 000013A5 B800460000          <1>     mov eax, 4600h
   444 000013AA CD41                <1>     int 41h
   445 000013AC 0F82C4FEFFFF        <1>     jc pipeFailure
   446 000013B2 B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   447 000013B7 CD41                <1>     int 41h
   448 000013B9 0F82B7FEFFFF        <1>     jc pipeFailure
   449 000013BF 488B1590F0FFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   450 000013C6 B800410000          <1>     mov eax, 4100h  ;Delete the file!
   451 000013CB CD41                <1>     int 41h
   452 000013CD 0F82A3FEFFFF        <1>     jc pipeFailure
   453 000013D3 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   454 000013D6 66C705D1ECFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   455                              <1> .pipeNostdin:
   456 000013DF 66813DCAECFFFFFFFF  <1>     cmp word [pipeSTDOUT], -1   ;If no stdout redir, exit now
   457 000013E8 7474                <1>     je .redirInClear
   458                              <1> ;Duplicate STDIN to save across pipe
   459 000013EA B800450000          <1>     mov eax, 4500h
   460 000013EF 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   461 000013F1 CD41                <1>     int 41h
   462 000013F3 0F827DFEFFFF        <1>     jc pipeFailure
   463 000013F9 668905B0ECFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   464                              <1> 
   465                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   466 00001400 B800460000          <1>     mov eax, 4600h
   467 00001405 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   468 00001407 FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   469 00001409 CD41                <1>     int 41h
   470 0000140B 0F8265FEFFFF        <1>     jc pipeFailure
   471                              <1> 
   472                              <1> ;Now return the original stdout to stdout
   473 00001411 89D9                <1>     mov ecx, ebx
   474 00001413 0FB71D98ECFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   475 0000141A B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   476 0000141F CD41                <1>     int 41h
   477 00001421 0F824FFEFFFF        <1>     jc pipeFailure
   478                              <1> 
   479                              <1> ;Now close the DUP'ed STDOUT
   480 00001427 B8003E0000          <1>     mov eax, 3E00h
   481 0000142C CD41                <1>     int 41h
   482 0000142E 0F8242FEFFFF        <1>     jc pipeFailure
   483                              <1> 
   484                              <1> ;Finally unwind STDIN to the beginning of the file
   485 00001434 B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   486 00001439 31DB                <1>     xor ebx, ebx    ;STDIN handle
   487 0000143B 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   488 0000143D 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   489 0000143F CD41                <1>     int 41h
   490 00001441 0F822FFEFFFF        <1>     jc pipeFailure  ;This should never happen
   491                              <1> 
   492 00001447 488B1500F0FFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   493 0000144E 48891501F0FFFF      <1>     mov qword [oldPipe], rdx
   494 00001455 66C70554ECFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   495                              <1> 
   496                              <1> .redirInClear:
   497                              <1> ;Check redir in
   498 0000145E F60551ECFFFFFF      <1>     test byte [redirIn], -1
   499 00001465 7433                <1>     jz .redirOutClear
   500                              <1> 
   501 00001467 0FB71D4AECFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   502 0000146E 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   503 00001470 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   504 00001475 CD41                <1>     int 41h
   505 00001477 0F82EBFDFFFF        <1>     jc redirFailure
   506 0000147D B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   507 00001482 CD41                <1>     int 41h
   508 00001484 0F82DEFDFFFF        <1>     jc redirFailure
   509 0000148A 66C70525ECFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   510 00001493 C6051CECFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   511                              <1> .redirOutClear:
   512                              <1> ;Now check Redir Out
   513 0000149A F60516ECFFFFFF      <1>     test byte [redirOut], -1
   514                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000014A1 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000014A3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   515                              <1> 
   516 000014A4 0FB71D0FECFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   517 000014AB B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   518 000014B0 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   519 000014B5 CD41                <1>     int 41h
   520 000014B7 0F82ABFDFFFF        <1>     jc redirFailure
   521 000014BD B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   522 000014C2 CD41                <1>     int 41h
   523 000014C4 0F829EFDFFFF        <1>     jc redirFailure
   524 000014CA 66C705E7EBFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   525 000014D3 C605DDEBFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   526                              <1>     return
    13                              <2> %%_ret:
    14 000014DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   527                              <1> 
   528                              <1> checkAndSetupRedir:
   529                              <1> ;Checks and sets up redir as appropriate
   530                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   531                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   532                              <1> ;Output: ZF=NZ => No redir
   533                              <1> ;        ZF=ZY => Redir
   534                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   535                              <1> ;CF=CY if pipe set or an embedded CR found
   536 000014DB 57                  <1>     push rdi
   537 000014DC 3C3C                <1>     cmp al, "<"
   538 000014DE 740F                <1>     je .inputRedir
   539 000014E0 3C3E                <1>     cmp al, ">"
   540 000014E2 7478                <1>     je .outputRedir
   541 000014E4 3C7C                <1>     cmp al, "|"
   542 000014E6 0F8428010000        <1>     je .pipeSetup
   543 000014EC F8                  <1>     clc
   544                              <1> .redirExit:
   545 000014ED 5F                  <1>     pop rdi
   546                              <1>     return
    13                              <2> %%_ret:
    14 000014EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   547                              <1> .inputRedir:
   548 000014EF C605C0EBFFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   549 000014F6 488D3D15EEFFFF      <1>     lea rdi, rdrInFilespec
   550 000014FD E84D170000          <1>     call skipSpaces ;Skip spaces between < and the filespec
   551 00001502 E8AF010000          <1>     call copyCommandTailItem
   552                              <1>     ;jc .redirExit
   553 00001507 48FFCE              <1>     dec rsi ;Ensure rsi points to the terminating char
   554 0000150A E840170000          <1>     call skipSpaces
   555                              <1>     ;Setup the redir here for STDIN
   556 0000150F 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   557 00001511 B800450000          <1>     mov eax, 4500h
   558 00001516 CD41                <1>     int 41h
   559 00001518 0F8274010000        <1>     jc .redirError
   560 0000151E 66890593EBFFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   561 00001525 488D15E6EDFFFF      <1>     lea rdx, rdrInFilespec
   562 0000152C B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   563 00001531 CD41                <1>     int 41h
   564 00001533 0F8259010000        <1>     jc .redirError
   565 00001539 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   566 0000153B 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   567 0000153E B800460000          <1>     mov eax, 4600h
   568 00001543 CD41                <1>     int 41h
   569 00001545 0F8247010000        <1>     jc .redirError
   570 0000154B B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   571 00001550 CD41                <1>     int 41h
   572 00001552 0F823A010000        <1>     jc .redirError
   573 00001558 30C0                <1>     xor al, al
   574 0000155A EB91                <1>     jmp short .redirExit
   575                              <1> .outputRedir:
   576 0000155C C60554EBFFFF01      <1>     mov byte [redirOut], 1
   577 00001563 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   578 00001566 7509                <1>     jne .notDouble
   579 00001568 FE0549EBFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   580 0000156E 48FFC6              <1>     inc rsi ;Go past it too
   581                              <1> .notDouble:
   582 00001571 488D3DE9EDFFFF      <1>     lea rdi, rdrOutFilespec
   583 00001578 E8D2160000          <1>     call skipSpaces
   584 0000157D E834010000          <1>     call copyCommandTailItem
   585                              <1>     ;jc .redirExit
   586 00001582 48FFCE              <1>     dec rsi ;Ensure rsi points to the terminating char
   587 00001585 E8C5160000          <1>     call skipSpaces
   588                              <1>     ;Setup the redir here for STDOUT
   589 0000158A BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   590 0000158F B800450000          <1>     mov eax, 4500h
   591 00001594 CD41                <1>     int 41h
   592 00001596 0F82F6000000        <1>     jc .redirError
   593 0000159C 66890517EBFFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   594 000015A3 488D15B7EDFFFF      <1>     lea rdx, rdrOutFilespec
   595 000015AA B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   596 000015AF CD41                <1>     int 41h
   597 000015B1 7312                <1>     jnc .fileExists
   598 000015B3 B8003C0000          <1>     mov eax, 3C00h
   599 000015B8 B900000000          <1>     mov ecx, 0  ;Make the file with no attributes
   600 000015BD CD41                <1>     int 41h
   601 000015BF 0F82CD000000        <1>     jc .redirError
   602                              <1> .fileExists:
   603 000015C5 B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   604 000015CA 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   605 000015CD B800460000          <1>     mov eax, 4600h  ;DUP2
   606 000015D2 CD41                <1>     int 41h
   607 000015D4 0F82B8000000        <1>     jc .redirError
   608 000015DA B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   609 000015DF CD41                <1>     int 41h
   610 000015E1 0F82AB000000        <1>     jc .redirError
   611 000015E7 803DC9EAFFFF01      <1>     cmp byte [redirOut], 1
   612 000015EE 7416                <1>     je .dontAppend
   613                              <1>     ;Here we move the file pointer to the end of the file
   614 000015F0 31D2                <1>     xor edx, edx    ;Low order 32 bits
   615 000015F2 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   616 000015F4 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   617 000015F9 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   618 000015FE CD41                <1>     int 41h
   619 00001600 0F828C000000        <1>     jc .redirError
   620                              <1> .dontAppend:
   621 00001606 C605AAEAFFFFFF      <1>     mov byte [redirOut], -1
   622 0000160D 30C0                <1>     xor al, al
   623 0000160F E9D9FEFFFF          <1>     jmp .redirExit
   624                              <1> .pipeSetup:
   625                              <1> ;We only need to setup STDOUT redirection to the pipe file
   626 00001614 488D1595EDFFFF      <1>     lea rdx, pipe1Filespec
   627 0000161B 803A00              <1>     cmp byte [rdx], 0
   628 0000161E 740C                <1>     jz .pathFound
   629 00001620 488D15D8EDFFFF      <1>     lea rdx, pipe2Filespec
   630 00001627 803A00              <1>     cmp byte [rdx], 0
   631 0000162A 7560                <1>     jnz .pipeError
   632                              <1> .pathFound:
   633 0000162C 4889151BEEFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   634 00001633 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   635 00001638 BB01000000          <1>     mov ebx, 1
   636 0000163D CD41                <1>     int 41h
   637 0000163F 724B                <1>     jc .pipeError
   638 00001641 6689056AEAFFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   639 00001648 E88F150000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   640 0000164D 0441                <1>     add al, "A"
   641 0000164F BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   642 00001654 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   643 00001656 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   644 00001658 B900000000          <1>     mov ecx, 0;dirHidden  ;Hidden attributes
   645 0000165D B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   646 00001662 CD41                <1>     int 41h
   647 00001664 7226                <1>     jc .pipeError
   648                              <1>     ;AX has the handle for this file now, this will become STDOUT
   649                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   650 00001666 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   651 00001669 B901000000          <1>     mov ecx, 1
   652 0000166E B800460000          <1>     mov eax, 4600h
   653 00001673 CD41                <1>     int 41h
   654 00001675 7215                <1>     jc .pipeError
   655 00001677 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   656 0000167C CD41                <1>     int 41h
   657 0000167E 720C                <1>     jc .pipeError
   658 00001680 C60528EAFFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   659 00001687 30C0                <1>     xor al, al
   660 00001689 F9                  <1>     stc
   661 0000168A 5F                  <1>     pop rdi
   662                              <1>     return
    13                              <2> %%_ret:
    14 0000168B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   663                              <1> .pipeError:
   664 0000168C 5F                  <1>     pop rdi 
   665 0000168D E9E4FBFFFF          <1>     jmp pipeFailure
   666                              <1> .redirError:
   667 00001692 5F                  <1>     pop rdi 
   668 00001693 E9D0FBFFFF          <1>     jmp redirFailure
   669                              <1> 
   670                              <1> copyCommandTailItemProgram:
   671                              <1> ;Copies a program name from the command tail until a terminator is found.
   672                              <1> ;Stores a terminating null in the destination
   673                              <1> ;Input: rsi = Start of the item to copy
   674                              <1> ;       rdi = Location for copy
   675                              <1> ;Output: Sentence copied with a null terminator inserted.
   676                              <1> ; If CF=CY, embedded CR encountered
   677 00001698 AC                  <1>     lodsb
   678 00001699 3C0D                <1>     cmp al, CR
   679 0000169B 740E                <1>     je .endOfInput
   680 0000169D 3C7C                <1>     cmp al, "|"
   681 0000169F 740A                <1>     je .endOfInput
   682 000016A1 E87F150000          <1>     call isALterminator
   683 000016A6 740A                <1>     jz .exit
   684                              <1>     ;cmp al, byte [pathSep]
   685                              <1>     ;je .exit
   686                              <1>     ;cmp al, byte [switchChar]
   687                              <1>     ;je .exit
   688 000016A8 AA                  <1>     stosb
   689 000016A9 EBED                <1>     jmp short copyCommandTailItemProgram
   690                              <1> .endOfInput:
   691 000016AB E802000000          <1>     call .exit
   692 000016B0 F9                  <1>     stc 
   693                              <1>     return
    13                              <2> %%_ret:
    14 000016B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   694                              <1> .exit:
   695 000016B2 30C0                <1>     xor al, al
   696 000016B4 AA                  <1>     stosb
   697                              <1>     return
    13                              <2> %%_ret:
    14 000016B5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   698                              <1> 
   699                              <1> copyCommandTailItem:
   700                              <1> ;Copies a sentence from the command tail until a terminator is found.
   701                              <1> ;Stores a terminating null in the destination
   702                              <1> ;Input: rsi = Start of the item to copy
   703                              <1> ;       rdi = Location for copy
   704                              <1> ;Output: Sentence copied with a null terminator inserted.
   705                              <1> ; If CF=CY, embedded CR or Pipe encountered
   706 000016B6 AC                  <1>     lodsb
   707 000016B7 3C0D                <1>     cmp al, CR
   708 000016B9 7436                <1>     je .endOfInput
   709 000016BB 3C7C                <1>     cmp al, "|"
   710 000016BD 7432                <1>     je .endOfInput
   711 000016BF E861150000          <1>     call isALterminator
   712 000016C4 7432                <1>     jz .exit
   713 000016C6 3C3C                <1>     cmp al, "<"
   714 000016C8 742E                <1>     jz .exit
   715 000016CA 3C3E                <1>     cmp al, ">"
   716 000016CC 742A                <1>     jz .exit
   717 000016CE 3A0557E9FFFF        <1>     cmp al, byte [pathSep]
   718 000016D4 7403                <1>     je .pathSep
   719                              <1>     ;cmp al, byte [switchChar]
   720                              <1>     ;je .exit
   721 000016D6 AA                  <1>     stosb
   722 000016D7 EBDD                <1>     jmp short copyCommandTailItem
   723                              <1> .pathSep:
   724                              <1> ;We look ahead, if the last char is a pathsep, we ignore it
   725 000016D9 AC                  <1>     lodsb   ;Get the next char, increment rsi by one
   726 000016DA E846150000          <1>     call isALterminator
   727 000016DF 7417                <1>     jz .exit
   728 000016E1 3C0D                <1>     cmp al, CR
   729 000016E3 740C                <1>     je .endOfInput
   730                              <1>     ;cmp al, byte [switchChar]
   731                              <1>     ;je .exit
   732 000016E5 8A0540E9FFFF        <1>     mov al, byte [pathSep]
   733 000016EB AA                  <1>     stosb   ;Else store the pathsep
   734 000016EC 48FFCE              <1>     dec rsi ;Move rsi back a piece
   735 000016EF EBC5                <1>     jmp short copyCommandTailItem
   736                              <1> .endOfInput:
   737 000016F1 E802000000          <1>     call .exit
   738 000016F6 F9                  <1>     stc 
   739                              <1>     return
    13                              <2> %%_ret:
    14 000016F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   740                              <1> .exit:
   741 000016F8 30C0                <1>     xor al, al
   742 000016FA AA                  <1>     stosb
   743                              <1>     return
    13                              <2> %%_ret:
    14 000016FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   744                              <1> 
   745                              <1> 
   746                              <1> int4Eh:   ;Interrupt interface for parsing and executing command lines
   747                              <1> ;Input: rsi points to the count byte of a command line
   748 000016FC 4150                <1>     push r8
   749 000016FE 4151                <1>     push r9
   750 00001700 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   751 00001702 CD41                <1>     int 41h
   752 00001704 52                  <1>     push rdx    ;Save on the stack
   753 00001705 488D1DF4E7FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   754 0000170C B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   755 0000170E CD41                <1>     int 41h
   756 00001710 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   757 00001713 4989D9              <1>     mov r9, rbx
   758 00001716 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   759 0000171D B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   760 00001722 F348A5              <1>     rep movsq   ;Copy command line over
   761                              <1>     ;call doCommandLine
   762 00001725 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   763 00001726 B450                <1>     mov ah, 50h ;Set Current PSP
   764 00001728 CD41                <1>     int 41h
   765 0000172A 4159                <1>     pop r9
   766 0000172C 4158                <1>     pop r8
   767 0000172E 48CF                <1>     iretq
    16                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 4Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> noSelfCopyError:
     7 00001730 488D1501F2FFFF      <1>     lea rdx, noSelfCopy
     8 00001737 EB34                <1>     jmp short badCmn
     9                              <1> badParamError:
    10 00001739 488D15B6F2FFFF      <1>     lea rdx, badParm
    11 00001740 EB2B                <1>     jmp short badCmn
    12                              <1> badDriveError:
    13 00001742 488D1570F2FFFF      <1>     lea rdx, badDrv
    14 00001749 EB22                <1>     jmp short badCmn
    15                              <1> badArgError:
    16 0000174B 488D1521F5FFFF      <1>     lea rdx, badArgs
    17 00001752 EB19                <1>     jmp short badCmn
    18                              <1> badFileError:
    19 00001754 488D15FCF4FFFF      <1>     lea rdx, badSpec
    20 0000175B EB10                <1>     jmp short badCmn
    21                              <1> badDupFnf:
    22                              <1> ;Hybrid error message
    23 0000175D 488D1561F1FFFF      <1>     lea rdx, dupName
    24 00001764 EB07                <1>     jmp short badCmn
    25                              <1> badDirError:
    26 00001766 488D158AF3FFFF      <1>     lea rdx, badDir
    27                              <1> badCmn:
    28 0000176D B800090000          <1>     mov eax, 0900h
    29 00001772 CD41                <1>     int 41h
    30 00001774 F9                  <1>     stc ;Return with CY => Error occured
    31                              <1>     return
    13                              <2> %%_ret:
    14 00001775 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> 
    33                              <1> dir:
    34                              <1>     ;breakpoint
    35 00001776 C60561EDFFFF00      <1>     mov byte [dirPrnType], 0    ;Clear DIR flags
    36 0000177D C6055BEDFFFF00      <1>     mov byte [dirLineCtr], 0
    37 00001784 C60555EDFFFF00      <1>     mov byte [dirFileCtr], 0
    38 0000178B C605D0EDFFFF00      <1>     mov byte [dirPathArg], 0    ;Null terminate the start of the buffer
    39 00001792 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    39 0000179B 3F                  <1>
    40 0000179C 488D3D3FEEFFFF      <1>     lea rdi, dirSrchPat ;Start also by initialising the search pattern
    41 000017A3 48AB                <1>     stosq
    42 000017A5 48FFC7              <1>     inc rdi ;Go past dot
    43 000017A8 668907              <1>     mov word [rdi], ax
    44 000017AB 884702              <1>     mov byte [rdi + 2], al
    45                              <1>     ;Start by scanning for the switches
    46 000017AE 488D3D69EAFFFF      <1>     lea rdi, cmdBuffer + 1  ;Goto command line input chars count
    47 000017B5 0FB60F              <1>     movzx ecx, byte [rdi]   ;Get number of chars typed
    48 000017B8 48FFC7              <1>     inc rdi ;Goto first char typed in
    49 000017BB 4889FE              <1>     mov rsi, rdi    ;Use rsi as start of buffer counter
    50 000017BE 8A0568E8FFFF        <1>     mov al, byte [switchChar]   ;Scan for switchchars
    51                              <1> .switchScan:
    52 000017C4 F2AE                <1>     repne scasb ;Scan for a switchchar
    53 000017C6 67E320              <1>     jecxz .switchScanDone
    54 000017C9 24DF                <1>     and al, 0DFh    ;UC it
    55 000017CB 3C57                <1>     cmp al, "W" ;Wide print mode?
    56 000017CD 7509                <1>     jne .notWideSw
    57 000017CF 800D08EDFFFF01      <1>     or byte [dirPrnType], 1 ;Set the correct bit
    58 000017D6 EBEC                <1>     jmp short .switchScan
    59                              <1> .notWideSw:
    60 000017D8 3C50                <1>     cmp al, "P" ;Pause mode?
    61 000017DA 0F8559FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    62 000017E0 800DF7ECFFFF02      <1>     or byte [dirPrnType], 2 ;Set correct bit
    63 000017E7 EBDB                <1>     jmp short .switchScan
    64                              <1> .switchScanDone:
    65                              <1> ;If no args, only switches, we search CWD
    66                              <1> ;If one arg, search that 
    67                              <1> ;If more than one, fail
    68 000017E9 488D352FEAFFFF      <1>     lea rsi, cmdBuffer + 2
    69 000017F0 E85A140000          <1>     call skipSpaces ;Skip leading spaces
    70 000017F5 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    71                              <1> .lp:
    72 000017FC E84E140000          <1>     call skipSpaces ;Skip spaces after
    73 00001801 AC                  <1>     lodsb   ;Get first non space char
    74 00001802 E841140000          <1>     call isALEndOfCommand   ;If this is the end char CR or "|", exit
    75 00001807 744A                <1>     jz .eocNoNull
    76 00001809 3C3E                <1>     cmp al, ">"
    77 0000180B 7446                <1>     je .eocNoNull
    78 0000180D 3C3C                <1>     cmp al, "<"
    79 0000180F 7442                <1>     je .eocNoNull
    80 00001811 3A0515E8FFFF        <1>     cmp al, byte [switchChar]  ;Is al a switch char?
    81 00001817 7509                <1>     jne .notSwitch
    82                              <1>     ;Now we skip the switch if it was a switch
    83 00001819 E8D2130000          <1>     call findTerminatorOrEOC    ;Go past the switch
    84 0000181E 7233                <1>     jc .eocNoNull  ;If we reach the EOC, exit,
    85 00001820 EBDA                <1>     jmp short .lp
    86                              <1> .notSwitch:
    87                              <1>     ;If not a switch, should be a path. Copy to buffer and keep searching
    88 00001822 803D39EDFFFF00      <1>     cmp byte [dirPathArg], 0    ;If a second path provided, error
    89 00001829 0F851CFFFFFF        <1>     jne badArgError
    90 0000182F 488D3D2CEDFFFF      <1>     lea rdi, dirPathArg ;Store the path to search here AS WRITTEN BY USER
    91 00001836 48FFCE              <1>     dec rsi ;Go back to the start of the string
    92                              <1> .nameCopy:
    93 00001839 AC                  <1>     lodsb
    94 0000183A E809140000          <1>     call isALEndOfCommand
    95 0000183F 740F                <1>     jz .eocReached
    96 00001841 E8DF130000          <1>     call isALterminator
    97 00001846 7403                <1>     jz .terminateCopy
    98 00001848 AA                  <1>     stosb
    99 00001849 EBEE                <1>     jmp short .nameCopy
   100                              <1> .terminateCopy:
   101 0000184B 31C0                <1>     xor eax, eax
   102 0000184D AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   103 0000184E EBAC                <1>     jmp short .lp ;Now search if another 
   104                              <1> .eocReached:
   105 00001850 31C0                <1>     xor eax, eax
   106 00001852 AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   107                              <1> .eocNoNull:
   108 00001853 803D08EDFFFF00      <1>     cmp byte [dirPathArg], 0    ;If no path provided, use CWD for current drive
   109 0000185A 7434                <1>     je .currentDrv
   110                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   111 0000185C 488D35FFECFFFF      <1>     lea rsi, dirPathArg
   112 00001863 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   113 00001867 7527                <1>     jne .currentDrv
   114                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   115 00001869 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   116 0000186E 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   117 00001872 B801290000          <1>     mov eax, 2901h   ;Parse filename
   118 00001877 CD41                <1>     int 41h
   119 00001879 3CFF                <1>     cmp al, -1
   120 0000187B 0F84C1FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   121                              <1>     ;Else the drive in the fcb is valid
   122 00001881 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   123 00001886 FEC8                <1>     dec al  ;Convert to 0 based drive number
   124 00001888 880553ECFFFF        <1>     mov byte [dirDrv], al
   125 0000188E EB0B                <1>     jmp short .dirPrintVol
   126                              <1> .currentDrv:
   127 00001890 E847130000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   128 00001895 880546ECFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   129                              <1> .dirPrintVol:
   130 0000189B 0FB6053FECFFFF      <1>     movzx eax, byte [dirDrv] 
   131 000018A2 E8B60B0000          <1>     call volume.dirEP
   132 000018A7 803DB4ECFFFF00      <1>     cmp byte [dirPathArg], 0    ;Null path here, 
   133 000018AE 7409                <1>     je .printCWD
   134 000018B0 803DAEECFFFF00      <1>     cmp byte [dirPathArg + 3], 0    ;Was this X:,0?
   135 000018B7 7400                <1>     je .printCWD
   136                              <1>     ;Here we have a path
   137                              <1>     ;Temp measure, we just fall through ignoring the path provided
   138                              <1> .printCWD:
   139 000018B9 8A1522ECFFFF        <1>     mov dl, byte [dirDrv]
   140 000018BF 88D0                <1>     mov al, dl
   141 000018C1 0441                <1>     add al, "A"
   142 000018C3 B43A                <1>     mov ah, ":"
   143 000018C5 66890592EBFFFF      <1>     mov word [searchSpec], ax
   144 000018CC 8A0559E7FFFF        <1>     mov al, byte [pathSep]
   145 000018D2 880588EBFFFF        <1>     mov byte [searchSpec + 2], al
   146 000018D8 488D3582EBFFFF      <1>     lea rsi, searchSpec + 3  ;Make space for a X:"\"
   147 000018DF B447                <1>     mov ah, 47h ;Get Current Working Directory
   148 000018E1 FEC2                <1>     inc dl  ;Convert to 1 based number
   149 000018E3 CD41                <1>     int 41h
   150 000018E5 488D3D72EBFFFF      <1>     lea rdi, searchSpec
   151 000018EC E8F0120000          <1>     call strlen
   152 000018F1 FFC9                <1>     dec ecx
   153 000018F3 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   154 000018F7 488D1561F2FFFF      <1>     lea rdx, dirMain
   155 000018FE B409                <1>     mov ah, 09h
   156 00001900 CD41                <1>     int 41h
   157 00001902 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   158 00001905 B409                <1>     mov ah, 09h
   159 00001907 CD41                <1>     int 41h
   160 00001909 488D1540EFFFFF      <1>     lea rdx, crlf2
   161 00001910 B409                <1>     mov ah, 09h
   162 00001912 CD41                <1>     int 41h
   163 00001914 E801000000          <1>     call .searchForFile
   164                              <1>     return
    13                              <2> %%_ret:
    14 00001919 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1>     ;If we get no path spec or just a X: path spec then we 
   166                              <1>     ; search the current working directory for that pathspec
   167                              <1>     ;If we get an actual pathspec, we first save the CWD for that drive
   168                              <1>     ; and then we try to make the pathspec the CWD. 
   169                              <1>     ;   If it works, we then search *.* in that folder and return the og CWD.
   170                              <1>     ;   If it fails, we then search one level up, for the search pattern
   171                              <1>     ;    that we compute.
   172                              <1> 
   173                              <1>     
   174                              <1>     ;Now we need to print the path to the folder we will be searching in
   175                              <1> .searchForFile:
   176                              <1>     ;Now we search for the files
   177                              <1>     ;RCX must have the number of chars to the end of the pathspec
   178 0000191A 488D3D3DEBFFFF      <1>     lea rdi, searchSpec
   179 00001921 8A0504E7FFFF        <1>     mov al, byte [pathSep]
   180 00001927 38440FFF            <1>     cmp byte [rdi + rcx - 1], al
   181 0000192B 7405                <1>     je .noAddSlash  ;Deals with special case of root dir
   182 0000192D 88040F              <1>     mov byte [rdi + rcx], al
   183 00001930 FFC1                <1>     inc ecx
   184                              <1> .noAddSlash:
   185 00001932 488D3C0F            <1>     lea rdi, qword [rdi + rcx]
   186 00001936 488D35A5ECFFFF      <1>     lea rsi, dirSrchPat
   187 0000193D 4889FA              <1>     mov rdx, rdi    ;Ptr to search for in rdx
   188 00001940 48A5                <1>     movsq
   189 00001942 A5                  <1>     movsd
   190 00001943 30C0                <1>     xor al, al
   191 00001945 AA                  <1>     stosb   ;Store the terminating null
   192 00001946 B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   193 0000194B B44E                <1>     mov ah, 4Eh ;Find first
   194 0000194D CD41                <1>     int 41h
   195 0000194F 720B                <1>     jc .dirNoMoreFiles
   196                              <1> .findNext:
   197 00001951 E878000000          <1>     call .dirPrintFileData  ;Print the file information
   198 00001956 B44F                <1>     mov ah, 4Fh
   199 00001958 CD41                <1>     int 41h
   200 0000195A 73F5                <1>     jnc .findNext 
   201                              <1> .dirNoMoreFiles:
   202 0000195C F6057BEBFFFF01      <1>     test byte [dirPrnType], 1
   203 00001963 740B                <1>     jz .dirNoEndNewLine
   204 00001965 488D15E1EEFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   205 0000196C B409                <1>     mov ah, 09h
   206 0000196E CD41                <1>     int 41h
   207                              <1> .dirNoEndNewLine:
   208                              <1>     ;Now we print the number of files and the number of bytes on the disk
   209 00001970 488D15A0F4FFFF      <1>     lea rdx, fourSpc
   210 00001977 B409                <1>     mov ah, 09h
   211 00001979 CD41                <1>     int 41h
   212 0000197B B409                <1>     mov ah, 09h ;Print four Spaces twice
   213 0000197D CD41                <1>     int 41h
   214 0000197F 0FB6055AEBFFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   215 00001986 E863140000          <1>     call printDecimalWord
   216 0000198B 488D1506F0FFFF      <1>     lea rdx, dirOk
   217 00001992 B409                <1>     mov ah, 09h
   218 00001994 CD41                <1>     int 41h
   219 00001996 488D157FF4FFFF      <1>     lea rdx, threeSpc
   220 0000199D B409                <1>     mov ah, 09h
   221 0000199F CD41                <1>     int 41h
   222 000019A1 B800360000          <1>     mov eax, 3600h ;Get disk info
   223 000019A6 8A1535EBFFFF        <1>     mov dl, byte [dirDrv]
   224 000019AC FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   225 000019AE CD41                <1>     int 41h ;Get disk free space info
   226 000019B0 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   227 000019B3 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   228 000019B6 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   229 000019B8 F7E1                <1>     mul ecx ;Get bytes per cluster
   230 000019BA 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   231                              <1>     ;rax now has the number of free bytes on the disk
   232 000019BD E82C140000          <1>     call printDecimalWord
   233 000019C2 488D15D9EFFFFF      <1>     lea rdx, bytesOk
   234 000019C9 B409                <1>     mov ah, 09h
   235 000019CB CD41                <1>     int 41h
   236                              <1>     return
    13                              <2> %%_ret:
    14 000019CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   237                              <1> 
   238                              <1> .dirPrintFileData:
   239                              <1> ;Use fcbCmdSpec to build the file name with space
   240                              <1> ;Start by print the name (same for both cases)
   241                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   242 000019CE F60512E7FFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   243                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000019D5 75(CD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   244 000019D7 488D3512E7FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   245 000019DE 488D3D07E9FFFF      <1>     lea rdi, fcbCmdSpec
   246 000019E5 E8DC120000          <1>     call asciiFilenameToFCB
   247 000019EA 488D15FBE8FFFF      <1>     lea rdx, fcbCmdSpec
   248 000019F1 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   249 000019F6 BB01000000          <1>     mov ebx, 1  ;STDOUT
   250 000019FB B440                <1>     mov ah, 40h ;Write handle
   251 000019FD CD41                <1>     int 41h
   252 000019FF 52                  <1>     push rdx
   253 00001A00 B220                <1>     mov dl, " "
   254 00001A02 B402                <1>     mov ah, 02h ;Print char
   255 00001A04 CD41                <1>     int 41h
   256 00001A06 5A                  <1>     pop rdx
   257 00001A07 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   258 00001A0E B903000000          <1>     mov ecx, 3  ;Print three chars
   259 00001A13 BB01000000          <1>     mov ebx, 1  ;STDOUT
   260 00001A18 B440                <1>     mov ah, 40h ;Write handle
   261 00001A1A CD41                <1>     int 41h
   262 00001A1C F605BBEAFFFF01      <1>     test byte [dirPrnType], 1
   263 00001A23 0F85A8000000        <1>     jnz .widePrint
   264                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   265                              <1>     ;Now check if a DIR
   266 00001A29 F605B7E6FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   267 00001A30 7418                <1>     jz .dirPrintNotDir
   268 00001A32 488D1577EFFFFF      <1>     lea rdx, dirLbl
   269 00001A39 B409                <1>     mov ah, 09h
   270 00001A3B CD41                <1>     int 41h
   271 00001A3D 488D15D8F3FFFF      <1>     lea rdx, threeSpc
   272 00001A44 B409                <1>     mov ah, 09h
   273 00001A46 CD41                <1>     int 41h
   274 00001A48 EB4F                <1>     jmp short .dirPrintFileDT
   275                              <1> .dirPrintNotDir:
   276                              <1> ;Here we print the file size
   277 00001A4A B220                <1>     mov dl, " "
   278 00001A4C B402                <1>     mov ah, 02h
   279 00001A4E CD41                <1>     int 41h
   280 00001A50 8B0596E6FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   281 00001A56 E804140000          <1>     call getDecimalWord
   282 00001A5B 4889CB              <1>     mov rbx, rcx
   283 00001A5E 51                  <1>     push rcx
   284 00001A5F 480FCB              <1>     bswap rbx
   285 00001A62 B908000000          <1>     mov ecx, 8
   286                              <1> .dirPrintFileSizePrep:
   287 00001A67 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   288 00001A69 7514                <1>     jne .dirPrintFileSize
   289 00001A6B B402                <1>     mov ah, 02h
   290 00001A6D B220                <1>     mov dl, " "
   291 00001A6F CD41                <1>     int 41h
   292 00001A71 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   293 00001A75 FFC9                <1>     dec ecx
   294 00001A77 81F901000000        <1>     cmp ecx, 1
   295 00001A7D 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   296                              <1> .dirPrintFileSize:
   297 00001A7F 5B                  <1>     pop rbx
   298                              <1> .dirPrintFileSizeLoop:
   299 00001A80 88DA                <1>     mov dl, bl
   300 00001A82 B402                <1>     mov ah, 02h
   301 00001A84 CD41                <1>     int 41h
   302 00001A86 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   303 00001A8A FFC9                <1>     dec ecx
   304 00001A8C 75F2                <1>     jnz .dirPrintFileSizeLoop
   305 00001A8E 488D158BF3FFFF      <1>     lea rdx, twoSpc
   306 00001A95 B409                <1>     mov ah, 09h
   307 00001A97 CD41                <1>     int 41h
   308                              <1> .dirPrintFileDT:
   309 00001A99 B220                <1>     mov dl, " "
   310 00001A9B B402                <1>     mov ah, 02h
   311 00001A9D CD41                <1>     int 41h
   312 00001A9F 0FB70544E6FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   313 00001AA6 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   314 00001AA8 E8850E0000          <1>     call printDate
   315 00001AAD 488D156CF3FFFF      <1>     lea rdx, twoSpc
   316 00001AB4 B409                <1>     mov ah, 09h
   317 00001AB6 CD41                <1>     int 41h
   318 00001AB8 0FB70529E6FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   319 00001ABF E8900F0000          <1>     call printTime
   320 00001AC4 488D1582EDFFFF      <1>     lea rdx, crlf
   321 00001ACB B409                <1>     mov ah, 09h
   322 00001ACD CD41                <1>     int 41h
   323 00001ACF EB0B                <1>     jmp short .dirPrintNameExit
   324                              <1> .widePrint:
   325                              <1> ;If /W, print name space ext space space space space
   326 00001AD1 488D153FF3FFFF      <1>     lea rdx, fourSpc
   327 00001AD8 B409                <1>     mov ah, 09h ;Print string
   328 00001ADA CD41                <1>     int 41h
   329                              <1> .dirPrintNameExit:
   330 00001ADC FE05FEE9FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   331 00001AE2 FE05F7E9FFFF        <1>     inc byte [dirLineCtr]
   332 00001AE8 803DF0E9FFFF17      <1>     cmp byte [dirLineCtr], 23
   333                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001AEF 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001AF1 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   334 00001AF2 488D15DEEEFFFF      <1>     lea rdx, pauseMes
   335 00001AF9 B409                <1>     mov ah, 09h
   336 00001AFB CD41                <1>     int 41h
   337 00001AFD B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   338 00001AFF CD41                <1>     int 41h
   339 00001B01 C605D7E9FFFF00      <1>     mov byte [dirLineCtr], 0
   340 00001B08 488D153EEDFFFF      <1>     lea rdx, crlf   ;Force new line
   341 00001B0F B409                <1>     mov ah, 09h
   342 00001B11 CD41                <1>     int 41h
   343                              <1>     return
    13                              <2> %%_ret:
    14 00001B13 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   344                              <1> 
   345                              <1> chdir:
   346 00001B14 F605A1E5FFFFFF      <1>     test byte [arg1Flg], -1
   347 00001B1B 754D                <1>     jnz .changeDir
   348                              <1>     ;Print CWD
   349                              <1> .printCWD:
   350 00001B1D E813100000          <1>     call putCWDInPrompt ;Exactly the same procedure
   351 00001B22 E8F50D0000          <1>     call printCRLF
   352                              <1>     return
    13                              <2> %%_ret:
    14 00001B27 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   353                              <1> .printDiskCWD:
   354                              <1> ;Print CWD for a specified drive
   355 00001B28 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   356 00001B2C 88D0                <1>     mov al, dl
   357 00001B2E 0440                <1>     add al, "@" ;Get the UC letter
   358 00001B30 B43A                <1>     mov ah, ":"
   359 00001B32 488D3D25E9FFFF      <1>     lea rdi, searchSpec
   360 00001B39 66AB                <1>     stosw   ;Store X:, rdi+=2
   361 00001B3B 8A05EAE4FFFF        <1>     mov al, byte [pathSep]
   362 00001B41 AA                  <1>     stosb   ;Store pathSep, inc rdi
   363 00001B42 B447                <1>     mov ah, 47h ;Get Current Working Directory
   364 00001B44 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   365 00001B47 CD41                <1>     int 41h
   366 00001B49 E893100000          <1>     call strlen
   367 00001B4E 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   368 00001B54 B440                <1>     mov ah, 40h ;Write to handle
   369 00001B56 BB01000000          <1>     mov ebx, 1  ;STDOUT
   370 00001B5B 488D15FCE8FFFF      <1>     lea rdx, searchSpec
   371 00001B62 CD41                <1>     int 41h
   372 00001B64 E8B30D0000          <1>     call printCRLF
   373                              <1>     return
    13                              <2> %%_ret:
    14 00001B69 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   374                              <1> .changeDir:
   375 00001B6A 8A054EE5FFFF        <1>     mov al, byte [arg1FCBret]
   376 00001B70 3CFF                <1>     cmp al, -1 
   377 00001B72 0F84CAFBFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   378 00001B78 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
   379 00001B7D 7520                <1>     jne .getFQPath
   380                              <1>     ;Now we double check that on the command line we have . or ..
   381 00001B7F 0FB60537E5FFFF      <1>     movzx eax, byte [arg1Off]
   382 00001B86 488D3590E6FFFF      <1>     lea rsi, cmdBuffer
   383 00001B8D 4801C6              <1>     add rsi, rax
   384 00001B90 8A0595E4FFFF        <1>     mov al, byte [pathSep]
   385 00001B96 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
   386 00001B98 7405                <1>     je .getFQPath
   387 00001B9A 803E2E              <1>     cmp byte [rsi], "."
   388 00001B9D 7589                <1>     jne .printDiskCWD
   389                              <1>     ;If the path is . or .., its acceptable, else fail
   390                              <1> .getFQPath:
   391 00001B9F E8AC110000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   392 00001BA4 0F82BCFBFFFF        <1>     jc badDirError  ;If this returns CF=CY, its a badDir
   393 00001BAA 488D15ADE8FFFF      <1>     lea rdx, searchSpec
   394 00001BB1 B43B                <1>     mov ah, 3Bh ;CHDIR
   395 00001BB3 CD41                <1>     int 41h
   396 00001BB5 0F82ABFBFFFF        <1>     jc badDirError
   397                              <1>     return
    13                              <2> %%_ret:
    14 00001BBB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> mkdir:
   400 00001BBC F605F9E4FFFFFF      <1>     test byte [arg1Flg], -1
   401 00001BC3 0F8482FBFFFF        <1>     jz badArgError
   402 00001BC9 F605EFE4FFFFFF      <1>     test byte [arg2Flg], -1
   403 00001BD0 0F8575FBFFFF        <1>     jnz badArgError
   404                              <1>     ;We have exactly one argument
   405 00001BD6 8A05E2E4FFFF        <1>     mov al, byte [arg1FCBret]
   406 00001BDC 3CFF                <1>     cmp al, -1 
   407 00001BDE 0F845EFBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   408 00001BE4 E867110000          <1>     call buildCommandPath
   409 00001BE9 488D156EE8FFFF      <1>     lea rdx, searchSpec
   410 00001BF0 B800390000          <1>     mov eax, 3900h  ;MKDIR
   411 00001BF5 CD41                <1>     int 41h
   412                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001BF7 73(BB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   413                              <1> .badMake:   ;Else, bad make
   414 00001BF9 488D150BEFFFFF      <1>     lea rdx, badMD
   415 00001C00 B800090000          <1>     mov eax, 0900h
   416 00001C05 CD41                <1>     int 41h
   417                              <1>     return
    13                              <2> %%_ret:
    14 00001C07 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   418                              <1> 
   419                              <1> rmdir:
   420 00001C08 F605ADE4FFFFFF      <1>     test byte [arg1Flg], -1
   421 00001C0F 0F8436FBFFFF        <1>     jz badArgError
   422 00001C15 F605A3E4FFFFFF      <1>     test byte [arg2Flg], -1
   423 00001C1C 0F8529FBFFFF        <1>     jnz badArgError
   424                              <1>     ;We have exactly one argument
   425 00001C22 8A0596E4FFFF        <1>     mov al, byte [arg1FCBret]
   426 00001C28 3CFF                <1>     cmp al, -1 
   427 00001C2A 0F8412FBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   428 00001C30 E81B110000          <1>     call buildCommandPath
   429 00001C35 488D1522E8FFFF      <1>     lea rdx, searchSpec
   430 00001C3C B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   431 00001C41 CD41                <1>     int 41h
   432                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001C43 73(07)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   433                              <1> .badRemove:   ;Else, bad make
   434 00001C45 488D15DCEEFFFF      <1>     lea rdx, badRD
   435 00001C4C B800090000          <1>     mov eax, 0900h
   436 00001C51 CD41                <1>     int 41h
   437                              <1>     return
    13                              <2> %%_ret:
    14 00001C53 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   438                              <1> 
   439                              <1> copy:
   440 00001C54 F60561E4FFFFFF      <1>     test byte [arg1Flg], -1
   441 00001C5B 0F84EAFAFFFF        <1>     jz badArgError
   442 00001C61 F60557E4FFFFFF      <1>     test byte [arg2Flg], -1
   443 00001C68 0F84DDFAFFFF        <1>     jz badArgError
   444 00001C6E 488D35A8E5FFFF      <1>     lea rsi, cmdBuffer
   445 00001C75 0FB60541E4FFFF      <1>     movzx eax, byte [arg1Off]
   446 00001C7C 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   447                              <1>     ;rsi points to terminating char
   448 00001C7F AC                  <1>     lodsb   ;Get first char in AL
   449 00001C80 48FFCE              <1>     dec rsi ;Go back to this char
   450 00001C83 E8C00F0000          <1>     call isALEndOfCommand
   451 00001C88 0F82ABFAFFFF        <1>     jc badParamError
   452 00001C8E 488D3D71E9FFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   453                              <1> .copyName1:
   454 00001C95 AC                  <1>     lodsb
   455 00001C96 E8AD0F0000          <1>     call isALEndOfCommand
   456 00001C9B 0F8498FAFFFF        <1>     je badParamError
   457 00001CA1 E87F0F0000          <1>     call isALterminator
   458 00001CA6 7403                <1>     jz .endOfName1
   459 00001CA8 AA                  <1>     stosb
   460 00001CA9 EBEA                <1>     jmp short .copyName1
   461                              <1> .endOfName1:
   462 00001CAB 31C0                <1>     xor eax, eax
   463 00001CAD AA                  <1>     stosb   ;Store this 0 at rdi
   464 00001CAE 488D3568E5FFFF      <1>     lea rsi, cmdBuffer
   465 00001CB5 0FB60504E4FFFF      <1>     movzx eax, byte [arg2Off]
   466 00001CBC 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   467 00001CBF AC                  <1>     lodsb   ;Get first char in AL
   468 00001CC0 48FFCE              <1>     dec rsi ;Go back to this char
   469 00001CC3 E8800F0000          <1>     call isALEndOfCommand
   470 00001CC8 0F826BFAFFFF        <1>     jc badParamError
   471 00001CCE 488D3DB1E9FFFF      <1>     lea rdi, destPath
   472                              <1> .copyName2:
   473 00001CD5 AC                  <1>     lodsb
   474 00001CD6 E86D0F0000          <1>     call isALEndOfCommand
   475 00001CDB 740A                <1>     je .endOfName2
   476 00001CDD E8430F0000          <1>     call isALterminator
   477 00001CE2 7403                <1>     jz .endOfName2
   478 00001CE4 AA                  <1>     stosb
   479 00001CE5 EBEE                <1>     jmp short .copyName2
   480                              <1> .endOfName2:
   481 00001CE7 31C0                <1>     xor eax, eax
   482 00001CE9 AA                  <1>     stosb   ;Store this 0 at rdi
   483                              <1> ;Before we open, we check if the two filenames are equal
   484                              <1> ; If so, crap out.
   485 00001CEA 488D3515E9FFFF      <1>     lea rsi, sourcePath
   486 00001CF1 488D3D8EE9FFFF      <1>     lea rdi, destPath
   487 00001CF8 B81E120000          <1>     mov eax, 121Eh
   488 00001CFD CD4F                <1>     int 4Fh
   489 00001CFF 0F84D3000000        <1>     jz .sameFilename
   490                              <1>     ;Open source with read permission
   491                              <1>     ;Open destination with write permission
   492 00001D05 488D15FAE8FFFF      <1>     lea rdx, sourcePath
   493 00001D0C B8003D0000          <1>     mov eax, 3D00h  ;Read open
   494 00001D11 CD41                <1>     int 41h
   495 00001D13 0F8220FAFFFF        <1>     jc badParamError
   496 00001D19 668905E6E9FFFF      <1>     mov word [sourceHdl], ax
   497                              <1> 
   498 00001D20 0FB7D8              <1>     movzx ebx, ax   ;For bx
   499 00001D23 B800440000          <1>     mov eax, 4400h  ;Get device info in dx
   500 00001D28 CD41                <1>     int 41h
   501 00001D2A 668915D9E9FFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
   502                              <1> 
   503 00001D31 488D154EE9FFFF      <1>     lea rdx, destPath
   504 00001D38 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   505 00001D3D 31C9                <1>     xor ecx, ecx    ;No file attributes
   506 00001D3F CD41                <1>     int 41h
   507 00001D41 0F82B8000000        <1>     jc .badExit
   508 00001D47 668905BAE9FFFF      <1>     mov word [destHdl], ax
   509 00001D4E 31F6                <1>     xor esi, esi
   510 00001D50 488D15B5E9FFFF      <1>     lea rdx, copyBuffer
   511                              <1> .copyLoop:
   512 00001D57 B980000000          <1>     mov ecx, 128
   513 00001D5C 0FB71DA3E9FFFF      <1>     movzx ebx, word [sourceHdl]
   514 00001D63 B43F                <1>     mov ah, 3Fh ;Read
   515 00001D65 CD41                <1>     int 41h
   516 00001D67 0F8292000000        <1>     jc .badExit
   517 00001D6D 85C0                <1>     test eax, eax
   518 00001D6F 743A                <1>     jz .okExit
   519 00001D71 01C6                <1>     add esi, eax
   520 00001D73 89C1                <1>     mov ecx, eax
   521 00001D75 0FB71D8CE9FFFF      <1>     movzx ebx, word [destHdl]
   522 00001D7C B440                <1>     mov ah, 40h ;Write
   523 00001D7E CD41                <1>     int 41h
   524 00001D80 727D                <1>     jc .badExit
   525 00001D82 3D80000000          <1>     cmp eax, 128    ;Did we read 128 chars?
   526 00001D87 74CE                <1>     je .copyLoop
   527                              <1>     ;If not char dev, exit
   528 00001D89 66F70578E9FFFF8000  <1>     test word [srcHdlInfo], 80h ;Char dev bit set?
   529 00001D92 7417                <1>     jz .okExit
   530                              <1>     ;Is handle in cooked or binary mode?
   531 00001D94 66F7056DE9FFFF2000  <1>     test word [srcHdlInfo], 20h
   532 00001D9D 750C                <1>     jnz .okExit
   533                              <1>     ;Here the char dev must be in cooked mode. Check if the last char was ^Z
   534 00001D9F 09C0                <1>     or eax, eax ;Clear upper bits in eax
   535 00001DA1 488D7C02FF          <1>     lea rdi, qword [rdx + rax - 1]  ;Point to the last char in the buffer
   536 00001DA6 803F1A              <1>     cmp byte [rdi], EOF ;Was this EOF?
   537 00001DA9 75AC                <1>     jne .copyLoop   ;Jump if not
   538                              <1> .okExit:
   539 00001DAB E832000000          <1>     call .leaveCopyClose
   540 00001DB0 488D1596EAFFFF      <1>     lea rdx, crlf
   541 00001DB7 B409                <1>     mov ah, 09h
   542 00001DB9 CD41                <1>     int 41h
   543 00001DBB 488D1555F0FFFF      <1>     lea rdx, fourSpc
   544 00001DC2 B409                <1>     mov ah, 09h
   545 00001DC4 CD41                <1>     int 41h
   546 00001DC6 B402                <1>     mov ah, 02h
   547 00001DC8 B231                <1>     mov dl, "1" ;1 File(s) copied
   548 00001DCA CD41                <1>     int 41h
   549 00001DCC 488D15B3EBFFFF      <1>     lea rdx, copyOk
   550 00001DD3 B409                <1>     mov ah, 09h
   551 00001DD5 CD41                <1>     int 41h
   552                              <1>     return
    13                              <2> %%_ret:
    14 00001DD7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   553                              <1> .sameFilename:
   554 00001DD8 E805000000          <1>     call .leaveCopyClose ;Close the handles
   555 00001DDD E94EF9FFFF          <1>     jmp noSelfCopyError
   556                              <1> .leaveCopyClose:
   557 00001DE2 668B1D1DE9FFFF      <1>     mov bx, word [sourceHdl]
   558 00001DE9 B8003E0000          <1>     mov eax, 3E00h
   559 00001DEE CD41                <1>     int 41h
   560 00001DF0 668B1D11E9FFFF      <1>     mov bx, word [destHdl]
   561 00001DF7 B8003E0000          <1>     mov eax, 3E00h
   562 00001DFC CD41                <1>     int 41h
   563                              <1>     return
    13                              <2> %%_ret:
    14 00001DFE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   564                              <1> .badExit:
   565                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   566 00001DFF 668B1D00E9FFFF      <1>     mov bx, word [sourceHdl]
   567 00001E06 6681FBFFFF          <1>     cmp bx, -1
   568 00001E0B 7407                <1>     je .skipSource
   569 00001E0D B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   570 00001E12 CD41                <1>     int 41h
   571                              <1> .skipSource:
   572 00001E14 668B1DEDE8FFFF      <1>     mov bx, word [destHdl]
   573 00001E1B 6681FBFFFF          <1>     cmp bx, -1
   574 00001E20 0F8413F9FFFF        <1>     je badParamError
   575 00001E26 B8003E0000          <1>     mov eax, 3E00h
   576 00001E2B CD41                <1>     int 41h
   577 00001E2D E907F9FFFF          <1>     jmp badParamError
   578                              <1> 
   579                              <1> erase:
   580 00001E32 F60583E2FFFFFF      <1>     test byte [arg1Flg], -1
   581 00001E39 0F840CF9FFFF        <1>     jz badArgError
   582 00001E3F E80C0F0000          <1>     call buildCommandPath
   583 00001E44 488D1513E6FFFF      <1>     lea rdx, searchSpec
   584 00001E4B B800410000          <1>     mov eax, 4100h  ;Delete File 
   585 00001E50 31C9                <1>     xor ecx, ecx
   586 00001E52 CD41                <1>     int 41h
   587 00001E54 0F82F1F8FFFF        <1>     jc badArgError
   588                              <1>     return
    13                              <2> %%_ret:
    14 00001E5A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   589                              <1> date:
   590 00001E5B 488D15CCEBFFFF      <1>     lea rdx, curDate
   591 00001E62 B409                <1>     mov ah, 09h
   592 00001E64 CD41                <1>     int 41h
   593 00001E66 B42A                <1>     mov ah, 2Ah ;DOS get date
   594 00001E68 CD41                <1>     int 41h
   595                              <1> 	;AL = day of the week (0=Sunday)
   596                              <1> 	;CX = year (1980-2099)
   597                              <1> 	;DH = month (1-12)
   598                              <1> 	;DL = day (1-31)
   599 00001E6A 66890D91E7FFFF      <1>     mov word [td1], cx
   600 00001E71 88158DE7FFFF        <1>     mov byte [td3], dl
   601 00001E77 883588E7FFFF        <1>     mov byte [td4], dh
   602 00001E7D 0FB6C0              <1>     movzx eax, al
   603 00001E80 89C3                <1>     mov ebx, eax
   604 00001E82 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   605 00001E84 01D8                <1>     add eax, ebx ;Make it 3 times 
   606 00001E86 488D157DEBFFFF      <1>     lea rdx, dayName
   607 00001E8D 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   608 00001E91 B903000000          <1>     mov ecx, 3  ;Print three chars
   609 00001E96 BB01000000          <1>     mov ebx, 1  ;STDOUT
   610 00001E9B B440                <1>     mov ah, 40h ;Write to handle
   611 00001E9D CD41                <1>     int 41h
   612 00001E9F B220                <1>     mov dl, " "
   613 00001EA1 B402                <1>     mov ah, 02h
   614 00001EA3 CD41                <1>     int 41h
   615                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   616                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   617                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   618 00001EA5 0FB70556E7FFFF      <1>     movzx eax, word [td1]   ;Get this word
   619 00001EAC C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   620 00001EAF 0FB61D4FE7FFFF      <1>     movzx ebx, byte [td4]
   621 00001EB6 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   622 00001EB9 09D8                <1>     or eax, ebx ;Add this date to eax
   623 00001EBB 0FB61D42E7FFFF      <1>     movzx ebx, byte [td3]
   624 00001EC2 09D8                <1>     or eax, ebx
   625 00001EC4 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   626 00001EC9 E8640A0000          <1>     call printDate
   627                              <1> 
   628 00001ECE 488D156AEBFFFF      <1>     lea rdx, newDate
   629 00001ED5 B409                <1>     mov ah, 09h
   630 00001ED7 CD41                <1>     int 41h
   631 00001ED9 488D157EEBFFFF      <1>     lea rdx, ukDate
   632 00001EE0 488D056AEBFFFF      <1>     lea rax, usDate
   633 00001EE7 488D1D7DEBFFFF      <1>     lea rbx, jpDate
   634 00001EEE 803D41E1FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   635 00001EF5 480F47D3            <1>     cmova rdx, rbx
   636 00001EF9 480F42D0            <1>     cmovb rdx, rax
   637 00001EFD B409                <1>     mov ah, 09h
   638 00001EFF CD41                <1>     int 41h
   639                              <1> 
   640 00001F01 488D1595E2FFFF      <1>     lea rdx, inBuffer
   641 00001F08 C6027E              <1>     mov byte [rdx], 126 ;Enter a string of up to 126 chars in length
   642 00001F0B B40A                <1>     mov ah, 0Ah
   643 00001F0D CD41                <1>     int 41h
   644 00001F0F 52                  <1>     push rdx
   645 00001F10 488D1536E9FFFF      <1>     lea rdx, crlf
   646 00001F17 B409                <1>     mov ah, 09h
   647 00001F19 CD41                <1>     int 41h
   648 00001F1B 5A                  <1>     pop rdx
   649 00001F1C 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   650                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001F20 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001F22 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   651                              <1>     return
    13                              <2> %%_ret:
    14 00001F23 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   652                              <1> 
   653                              <1> time:
   654 00001F24 488D155CEBFFFF      <1>     lea rdx, curTime
   655 00001F2B B409                <1>     mov ah, 09h
   656 00001F2D CD41                <1>     int 41h
   657 00001F2F B42C                <1>     mov ah, 2Ch ;DOS get time
   658 00001F31 CD41                <1>     int 41h
   659                              <1>     ;CH = hour (0-23)
   660                              <1> 	;CL = minutes (0-59)
   661                              <1> 	;DH = seconds (0-59)
   662                              <1> 	;DL = hundredths (0-99)
   663 00001F33 880DC9E6FFFF        <1>     mov byte [td1], cl
   664 00001F39 882DC4E6FFFF        <1>     mov byte [td2], ch
   665 00001F3F 8815BFE6FFFF        <1>     mov byte [td3], dl
   666 00001F45 8835BAE6FFFF        <1>     mov byte [td4], dh
   667 00001F4B 0FB6C5              <1>     movzx eax, ch
   668 00001F4E E8730B0000          <1>     call printTime.printHours
   669                              <1> 
   670 00001F53 8A15EAE0FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   671 00001F59 B402                <1>     mov ah, 02h
   672 00001F5B CD41                <1>     int 41h
   673                              <1> 
   674 00001F5D 0FB6059EE6FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   675 00001F64 E84D0B0000          <1>     call printTime.printMinutesAlt
   676                              <1> 
   677 00001F69 8A15D4E0FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   678 00001F6F B402                <1>     mov ah, 02h
   679 00001F71 CD41                <1>     int 41h
   680                              <1> 
   681 00001F73 0FB6058BE6FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   682 00001F7A E8370B0000          <1>     call printTime.printMinutesAlt
   683                              <1> 
   684 00001F7F B22E                <1>     mov dl, "."
   685 00001F81 B402                <1>     mov ah, 02h
   686 00001F83 CD41                <1>     int 41h
   687                              <1> 
   688 00001F85 0FB60578E6FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   689 00001F8C E8250B0000          <1>     call printTime.printMinutesAlt
   690                              <1> 
   691 00001F91 488D1500EBFFFF      <1>     lea rdx, newTime
   692 00001F98 B409                <1>     mov ah, 09h
   693 00001F9A CD41                <1>     int 41h
   694                              <1> 
   695 00001F9C 488D15FAE1FFFF      <1>     lea rdx, inBuffer
   696 00001FA3 C6027E              <1>     mov byte [rdx], 126 ;Enter a string of up to 126 chars in length
   697 00001FA6 B40A                <1>     mov ah, 0Ah
   698 00001FA8 CD41                <1>     int 41h
   699 00001FAA 52                  <1>     push rdx
   700 00001FAB 488D159BE8FFFF      <1>     lea rdx, crlf
   701 00001FB2 B409                <1>     mov ah, 09h
   702 00001FB4 CD41                <1>     int 41h
   703 00001FB6 5A                  <1>     pop rdx
   704 00001FB7 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   705                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001FBB 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001FBD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   706                              <1>     return
    13                              <2> %%_ret:
    14 00001FBE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   707                              <1> ctty:
   708 00001FBF F605F6E0FFFFFF      <1>     test byte [arg1Flg], -1
   709 00001FC6 0F847FF7FFFF        <1>     jz badArgError
   710 00001FCC F605ECE0FFFFFF      <1>     test byte [arg2Flg], -1
   711 00001FD3 0F8572F7FFFF        <1>     jnz badArgError
   712 00001FD9 488D353DE2FFFF      <1>     lea rsi, cmdBuffer
   713 00001FE0 0FB605D6E0FFFF      <1>     movzx eax, byte [arg1Off]
   714 00001FE7 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   715 00001FEA 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   716 00001FEE 750F                <1>     jne .noDrive
   717 00001FF0 0FB605C7E0FFFF      <1>     movzx eax, byte [arg1FCBret]
   718 00001FF7 3CFF                <1>     cmp al, -1
   719 00001FF9 0F8443F7FFFF        <1>     je badDriveError
   720                              <1> .noDrive:
   721                              <1>     ;Now we open the provided file
   722 00001FFF E8CF0E0000          <1>     call copyArgumentToSearchSpec
   723 00002004 488D1553E4FFFF      <1>     lea rdx, searchSpec
   724 0000200B B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   725 00002010 CD41                <1>     int 41h
   726 00002012 0F823CF7FFFF        <1>     jc badFileError
   727 00002018 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   728 0000201B B800440000          <1>     mov eax, 4400h  ;Get device word
   729 00002020 CD41                <1>     int 41h
   730 00002022 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   731 00002025 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   732                              <1>     ;Now we set this handle to be STDIO
   733 00002027 80CA03              <1>     or dl, 3    ;Set STDIO bits
   734 0000202A 30F6                <1>     xor dh, dh
   735 0000202C B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   736 00002031 CD41                <1>     int 41h
   737                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   738 00002033 31C9                <1>     xor ecx, ecx    ;STDIN
   739 00002035 B446                <1>     mov ah, 46h
   740 00002037 CD41                <1>     int 41h
   741 00002039 FFC1                <1>     inc ecx         ;STDOUT
   742 0000203B B446                <1>     mov ah, 46h
   743 0000203D CD41                <1>     int 41h
   744 0000203F FFC1                <1>     inc ecx         ;STDERR
   745 00002041 B446                <1>     mov ah, 46h
   746 00002043 CD41                <1>     int 41h
   747 00002045 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   748 00002047 CD41                <1>     int 41h
   749                              <1>     return
    13                              <2> %%_ret:
    14 00002049 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   750                              <1> .badCharDev:
   751 0000204A 488D1546EBFFFF      <1>     lea rdx, badDev
   752 00002051 B409                <1>     mov ah, 09h
   753 00002053 CD41                <1>     int 41h
   754 00002055 B43E                <1>     mov ah, 3Eh ;Close opened handle
   755 00002057 CD41                <1>     int 41h
   756                              <1>     return
    13                              <2> %%_ret:
    14 00002059 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   757                              <1> 
   758                              <1> cls:  
   759 0000205A B800440000          <1>     mov eax, 4400h  ;Get device info
   760 0000205F BB01000000          <1>     mov ebx, 1      ;for handle 1
   761 00002064 CD41                <1>     int 41h         ;in dx
   762 00002066 F7C280000000        <1>     test edx, devCharDev
   763 0000206C 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   764 0000206E F7C210000000        <1>     test edx, charDevFastOut
   765 00002074 743E                <1>     jz .doAnsi
   766                              <1>     ;Test if Int 49h uses Int 30h
   767                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   768                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
   769 00002076 B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
   770 0000207B CD41                <1>     int 41h
   771                              <1> .biosCheck:
   772 0000207D 66813BCD30          <1>     cmp word [rbx], 30CDh
   773 00002082 740C                <1>     je .biosConfirmed
   774 00002084 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   775 00002089 7429                <1>     je .doAnsi
   776 0000208B 48FFC3              <1>     inc rbx
   777 0000208E EBED                <1>     jmp short .biosCheck
   778                              <1> .biosConfirmed:
   779                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   780 00002090 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   781 00002092 31DB                <1>     xor ebx, ebx
   782 00002094 CD30                <1>     int 30h
   783 00002096 B40F                <1>     mov ah, 0Fh ;Get screen mode
   784 00002098 CD30                <1>     int 30h
   785 0000209A 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   786 0000209D FECA                <1>     dec dl
   787 0000209F B619                <1>     mov dh, 25  ;Number of rows is standard
   788 000020A1 31C0                <1>     xor eax, eax
   789 000020A3 89C1                <1>     mov ecx, eax
   790 000020A5 B707                <1>     mov bh, 7   ;Screen attributes
   791 000020A7 B406                <1>     mov ah, 6   ;Scroll
   792 000020A9 CD30                <1>     int 30h
   793 000020AB 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   794 000020AD B700                <1>     mov bh, 0   ;Page 0
   795 000020AF B402                <1>     mov ah, 2
   796 000020B1 CD30                <1>     int 30h
   797                              <1>     return
    13                              <2> %%_ret:
    14 000020B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   798                              <1> .doAnsi:
   799                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   800                              <1> ;4 chars in the ansi routine
   801                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   802                              <1> ; understand ANSI codes
   803 000020B4 488D3558EDFFFF      <1>     lea rsi, ansiCls
   804 000020BB B904000000          <1>     mov ecx, 4
   805 000020C0 B406                <1>     mov ah, 06h ;Raw char output
   806                              <1> .ansiLp:
   807 000020C2 AC                  <1>     lodsb   ;Get the char in 
   808 000020C3 88C2                <1>     mov dl, al
   809 000020C5 CD41                <1>     int 41h
   810 000020C7 FFC9                <1>     dec ecx
   811 000020C9 75F7                <1>     jnz .ansiLp
   812                              <1>     return
    13                              <2> %%_ret:
    14 000020CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   813                              <1> 
   814                              <1> break:
   815 000020CC F605E9DFFFFFFF      <1>     test byte [arg1Flg], -1
   816 000020D3 752D                <1>     jnz .argumentProvided
   817                              <1>     ;Here we just get the status of break
   818 000020D5 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   819 000020DA CD41                <1>     int 41h
   820 000020DC 88D3                <1>     mov bl, dl
   821 000020DE 488D1554EBFFFF      <1>     lea rdx, breakIs
   822 000020E5 B409                <1>     mov ah, 09h
   823 000020E7 CD41                <1>     int 41h
   824 000020E9 488D1544EBFFFF      <1>     lea rdx, onMes
   825 000020F0 488D0D37EBFFFF      <1>     lea rcx, offMes
   826 000020F7 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   827 000020F9 480F44D1            <1>     cmovz rdx, rcx
   828 000020FD B409                <1>     mov ah, 09h
   829 000020FF CD41                <1>     int 41h
   830                              <1>     return
    13                              <2> %%_ret:
    14 00002101 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   831                              <1> .argumentProvided:
   832 00002102 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   833 00002106 AD                  <1>     lodsd   ;Read the word
   834 00002107 89C3                <1>     mov ebx, eax
   835 00002109 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   836 0000210E C1EB10              <1>     shr ebx, 10h     ;Get high word low
   837 00002111 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   838 00002116 7416                <1>     je .maybeOn
   839 00002118 663D4F46            <1>     cmp ax, "OF"
   840 0000211C 7523                <1>     jne .badOnOff
   841 0000211E 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   842 00002123 6681FB4620          <1>     cmp bx, "F "
   843 00002128 7517                <1>     jne .badOnOff
   844                              <1>     ;Set off
   845 0000212A 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   846 0000212C EB0B                <1>     jmp short .setBreak
   847                              <1> .maybeOn:
   848 0000212E 663D4F4E            <1>     cmp ax, "ON"
   849 00002132 750D                <1>     jne .badOnOff
   850                              <1>     ;Set on
   851 00002134 BA01000000          <1>     mov edx, 1
   852                              <1> .setBreak:
   853 00002139 B801330000          <1>     mov eax, 3301h  ;Set break
   854 0000213E CD41                <1>     int 41h
   855                              <1>     return
    13                              <2> %%_ret:
    14 00002140 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   856                              <1> .badOnOff:
   857 00002141 488D15DBECFFFF      <1>     lea rdx, badOnOff
   858 00002148 B409                <1>     mov ah, 09h
   859 0000214A CD41                <1>     int 41h
   860                              <1>     return
    13                              <2> %%_ret:
    14 0000214C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   861                              <1> 
   862                              <1> verify:
   863 0000214D F60568DFFFFFFF      <1>     test byte [arg1Flg], -1
   864 00002154 752D                <1>     jnz .argumentProvided
   865                              <1>     ;Here we just get the status of break
   866 00002156 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   867 0000215B CD41                <1>     int 41h
   868 0000215D 88C3                <1>     mov bl, al
   869 0000215F 488D15DDEAFFFF      <1>     lea rdx, verifyIs
   870 00002166 B409                <1>     mov ah, 09h
   871 00002168 CD41                <1>     int 41h
   872 0000216A 488D15C3EAFFFF      <1>     lea rdx, onMes
   873 00002171 488D0DB6EAFFFF      <1>     lea rcx, offMes
   874 00002178 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   875 0000217A 480F44D1            <1>     cmovz rdx, rcx
   876 0000217E B409                <1>     mov ah, 09h
   877 00002180 CD41                <1>     int 41h
   878                              <1>     return
    13                              <2> %%_ret:
    14 00002182 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   879                              <1> .argumentProvided:
   880 00002183 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   881 00002187 AD                  <1>     lodsd   ;Read the word
   882 00002188 89C3                <1>     mov ebx, eax
   883 0000218A 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   884 0000218F C1EB10              <1>     shr ebx, 10h     ;Get high word low
   885 00002192 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   886 00002197 7416                <1>     je .maybeOn
   887 00002199 663D4F46            <1>     cmp ax, "OF"
   888 0000219D 751F                <1>     jne .badOnOff
   889 0000219F 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   890 000021A4 6681FB4620          <1>     cmp bx, "F "
   891 000021A9 7513                <1>     jne .badOnOff
   892                              <1>     ;Set off
   893 000021AB 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   894 000021AD EB0A                <1>     jmp short .setVerify
   895                              <1> .maybeOn:
   896 000021AF 663D4F4E            <1>     cmp ax, "ON"
   897 000021B3 7509                <1>     jne .badOnOff
   898                              <1>     ;Set on
   899 000021B5 31C0                <1>     xor eax, eax
   900 000021B7 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   901                              <1> .setVerify:
   902 000021B9 B42E                <1>     mov ah, 2Eh  ;Set Verify
   903 000021BB CD41                <1>     int 41h
   904                              <1>     return
    13                              <2> %%_ret:
    14 000021BD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   905                              <1> .badOnOff:
   906 000021BE 488D155EECFFFF      <1>     lea rdx, badOnOff
   907 000021C5 B409                <1>     mov ah, 09h
   908 000021C7 CD41                <1>     int 41h
   909                              <1>     return
    13                              <2> %%_ret:
    14 000021C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   910                              <1> 
   911                              <1> rename:
   912 000021CA F605EBDEFFFFFF      <1>     test byte [arg1Flg], -1
   913 000021D1 0F8474F5FFFF        <1>     jz badArgError
   914 000021D7 F605E1DEFFFFFF      <1>     test byte [arg2Flg], -1
   915 000021DE 0F8467F5FFFF        <1>     jz badArgError
   916 000021E4 488D3532E0FFFF      <1>     lea rsi, cmdBuffer
   917 000021EB 0FB605CBDEFFFF      <1>     movzx eax, byte [arg1Off]
   918 000021F2 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   919                              <1>     ;rsi points to terminating char
   920 000021F5 AC                  <1>     lodsb   ;Get first char in AL
   921 000021F6 48FFCE              <1>     dec rsi ;Go back to this char
   922 000021F9 E84A0A0000          <1>     call isALEndOfCommand
   923 000021FE 0F8235F5FFFF        <1>     jc badParamError
   924 00002204 488D3DFBE3FFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   925                              <1> .copyName1:
   926 0000220B AC                  <1>     lodsb
   927 0000220C E8370A0000          <1>     call isALEndOfCommand
   928 00002211 0F8422F5FFFF        <1>     je badParamError
   929 00002217 E8090A0000          <1>     call isALterminator
   930 0000221C 7403                <1>     jz .endOfName1
   931 0000221E AA                  <1>     stosb
   932 0000221F EBEA                <1>     jmp short .copyName1
   933                              <1> .endOfName1:
   934 00002221 31C0                <1>     xor eax, eax
   935 00002223 AA                  <1>     stosb   ;Store this 0 at rdi
   936 00002224 488D35F2DFFFFF      <1>     lea rsi, cmdBuffer
   937 0000222B 0FB6058EDEFFFF      <1>     movzx eax, byte [arg2Off]
   938 00002232 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   939 00002235 807E013A            <1>     cmp byte [rsi + 1], ":" ;If dest path char 2 is :, must be X:, not allowed
   940 00002239 0F84FAF4FFFF        <1>     je badParamError
   941 0000223F AC                  <1>     lodsb   ;Get first char in AL
   942 00002240 48FFCE              <1>     dec rsi ;Go back to this char
   943 00002243 E8000A0000          <1>     call isALEndOfCommand
   944 00002248 0F82EBF4FFFF        <1>     jc badParamError
   945 0000224E 488D3D31E4FFFF      <1>     lea rdi, destPath
   946                              <1> .copyName2:
   947 00002255 AC                  <1>     lodsb
   948 00002256 E8ED090000          <1>     call isALEndOfCommand
   949 0000225B 740A                <1>     je .endOfName2
   950 0000225D E8C3090000          <1>     call isALterminator
   951 00002262 7403                <1>     jz .endOfName2
   952 00002264 AA                  <1>     stosb
   953 00002265 EBEE                <1>     jmp short .copyName2
   954                              <1> .endOfName2:
   955 00002267 31C0                <1>     xor eax, eax
   956 00002269 AA                  <1>     stosb   ;Store this 0 at rdi
   957 0000226A 488D1595E3FFFF      <1>     lea rdx, sourcePath
   958 00002271 488D3D0EE4FFFF      <1>     lea rdi, destPath
   959 00002278 B800560000          <1>     mov eax, 5600h
   960 0000227D CD41                <1>     int 41h
   961                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000227F 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002281 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   962 00002282 3C0F                <1>     cmp al, errBadDrv
   963 00002284 0F84B8F4FFFF        <1>     je badDriveError
   964 0000228A 3C0B                <1>     cmp al, errBadFmt
   965 0000228C 0F84D4F4FFFF        <1>     je badDirError
   966 00002292 E9C6F4FFFF          <1>     jmp badDupFnf
   967                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   968                              <1> touch:
   969                              <1> ;Temporarily used to create files
   970 00002297 F6051EDEFFFFFF      <1>     test byte [arg1Flg], -1
   971 0000229E 0F84A7F4FFFF        <1>     jz badArgError
   972 000022A4 E8A70A0000          <1>     call buildCommandPath
   973 000022A9 488D15AEE1FFFF      <1>     lea rdx, searchSpec
   974 000022B0 B8003C0000          <1>     mov eax, 3C00h  ;Create file 
   975 000022B5 31C9                <1>     xor ecx, ecx
   976 000022B7 CD41                <1>     int 41h
   977 000022B9 720B                <1>     jc .touchError
   978 000022BB 0FB7D8              <1>     movzx ebx, ax
   979 000022BE B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
   980 000022C3 CD41                <1>     int 41h
   981                              <1>     return
    13                              <2> %%_ret:
    14 000022C5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   982                              <1> .touchError:
   983 000022C6 488D1504EBFFFF      <1>     lea rdx, touchErr
   984 000022CD E99BF4FFFF          <1>     jmp badCmn
   985                              <1> 
   986                              <1> join:
   987                              <1> ;Mock join command, to test join. Make an external command.
   988                              <1> ;Mounts the A drive on C:\JOINTEST,0
   989 000022D2 F605A9000000FF      <1>     test byte [.joinOn], -1
   990 000022D9 7436                <1>     jz .okJoin
   991                              <1> .joindisable:
   992 000022DB B800520000          <1>     mov eax, 5200h  
   993 000022E0 CD41                <1>     int 41h
   994 000022E2 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]    ;Get CDS ptr
   995                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
   996 000022E6 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
   997 000022EB CD4A                <1>     int 4Ah
   998 000022ED 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
   999 000022F3 C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1000 000022F6 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1001 000022FA B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1002 000022FF CD4A                <1>     int 4Ah
  1003 00002301 C6057A00000000      <1>     mov byte [.joinOn], 0
  1004 00002308 488D1559000000      <1>     lea rdx, .joinDisableMsg
  1005 0000230F EB3E                <1>     jmp short .joinExit
  1006                              <1> .okJoin:
  1007 00002311 C6056A000000FF      <1>     mov byte [.joinOn], -1
  1008 00002318 B800520000          <1>     mov eax, 5200h  
  1009 0000231D CD41                <1>     int 41h
  1010 0000231F 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]    ;Get CDS ptr
  1011                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1012 00002323 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1013 00002328 CD4A                <1>     int 4Ah
  1014 0000232A 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1015 00002330 4889DF              <1>     mov rdi, rbx
  1016 00002333 488D3549000000      <1>     lea rsi, .joinPath
  1017 0000233A B90C000000          <1>     mov ecx, .joinPathL
  1018 0000233F F3A4                <1>     rep movsb   ;Copy chars over
  1019 00002341 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1020 00002346 CD4A                <1>     int 4Ah
  1021 00002348 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1022                              <1> .joinExit:
  1023 0000234F B800090000          <1>     mov eax, 0900h
  1024 00002354 CD41                <1>     int 41h
  1025                              <1>     return
    13                              <2> %%_ret:
    14 00002356 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1026 00002357 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1026 00002360 61626C65640D0A24    <1>
  1027 00002368 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1027 00002371 7361626C65640D0A24  <1>
  1028 0000237A FFFFFFFFFFFFFFFF    <1> .joinCDSptr:     dq -1
  1029 00002382 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1030 00002383 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1030 0000238C 535400              <1>
  1031                              <1> .joinPathL  equ $ - .joinPath 
  1032                              <1> subst:
  1033                              <1> ;Mock subst command, to test join. Make an external command.
  1034                              <1> ;Substitutes C:\SUBTEST,0 for D:    return
  1036                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1037                              <1> truename:
  1038 0000238F F60526DDFFFFFF      <1>     test byte [arg1Flg], -1
  1039 00002396 0F84AFF3FFFF        <1>     jz badArgError
  1040                              <1>     ;Explicitly call Truename if we remove truename from this function
  1041 0000239C 0FB6051ADDFFFF      <1>     movzx eax, byte [arg1Off]
  1042 000023A3 488D1573DEFFFF      <1>     lea rdx, cmdBuffer
  1043 000023AA 4801C2              <1>     add rdx, rax    ;Go to the start of the pathname
  1044 000023AD B978000000          <1>     mov ecx, 120    ;Only search within 128 chars
  1045 000023B2 B00D                <1>     mov al, CR     ;Search for the first space char after the argument
  1046 000023B4 4889D7              <1>     mov rdi, rdx
  1047 000023B7 F2AE                <1>     repne scasb
  1048 000023B9 48FFCF              <1>     dec rdi ;Go back a char
  1049 000023BC C60700              <1>     mov byte [rdi], 0   ;Make ASCIIZ
  1050 000023BF 4889FD              <1>     mov rbp, rdi    ;Have rbp point to the end of the string
  1051 000023C2 4889D6              <1>     mov rsi, rdx    ;Point rsi to start of path
  1052 000023C5 488D3D92E0FFFF      <1>     lea rdi, searchSpec ;Store the path here
  1053 000023CC B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1054 000023D1 CD41                <1>     int 41h
  1055 000023D3 730D                <1>     jnc .writePath
  1056 000023D5 3C02                <1>     cmp al, 2
  1057 000023D7 0F8477F3FFFF        <1>     je badFileError
  1058 000023DD E957F3FFFF          <1>     jmp badParamError
  1059                              <1> .writePath:
  1060 000023E2 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1061 000023E5 B9FFFFFFFF          <1>     mov ecx, -1
  1062 000023EA 30C0                <1>     xor al, al
  1063 000023EC F2AE                <1>     repne scasb     ;Get the new len
  1064 000023EE F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1065 000023F0 FFC9                <1>     dec ecx
  1066 000023F2 BB01000000          <1>     mov ebx, 01
  1067 000023F7 B440                <1>     mov ah, 40h
  1068 000023F9 CD41                <1>     int 41h
  1069 000023FB E81C050000          <1>     call printCRLF
  1070                              <1>     return
    13                              <2> %%_ret:
    14 00002400 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1071                              <1> 
  1072                              <1> volume:
  1073 00002401 488D3517DEFFFF      <1>     lea rsi, cmdBuffer + 2  ;Get the command buffer
  1074 00002408 E842080000          <1>     call skipSpaces
  1075 0000240D 4881C603000000      <1>     add rsi, 3  ;Go past the VOL command
  1076 00002414 E836080000          <1>     call skipSpaces
  1077 00002419 AC                  <1>     lodsb   ;Get the first char, and point rsi to next char
  1078 0000241A E829080000          <1>     call isALEndOfCommand   ;If this char is end of command, use current drive
  1079 0000241F 7507                <1>     jnz .checkDriveLetter
  1080 00002421 E8B6070000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1081 00002426 EB35                <1>     jmp short .dirEP
  1082                              <1> .checkDriveLetter:
  1083 00002428 803E3A              <1>     cmp byte [rsi], ":" ;If this is not a :, fail
  1084 0000242B 0F8511F3FFFF        <1>     jne badDriveError
  1085 00002431 4889F7              <1>     mov rdi, rsi    ;Save start of drive spec in rsi
  1086 00002434 48FFC6              <1>     inc rsi  ;Go past the X: spec
  1087 00002437 E813080000          <1>     call skipSpaces
  1088 0000243C AC                  <1>     lodsb   ;Get the non-space char in al
  1089 0000243D E806080000          <1>     call isALEndOfCommand   ;The next non-space char must be terminator
  1090 00002442 0F85FAF2FFFF        <1>     jne badDriveError
  1091                              <1> ;This argument should've been parsed into FCB1 so use that result
  1092 00002448 8A0570DCFFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1093 0000244E A8FF                <1>     test al, -1
  1094 00002450 0F85ECF2FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1095 00002456 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1096 0000245B FFC8                <1>     dec eax ;Convert to 0 based number
  1097                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al
  1098 0000245D 0541000000          <1>     add eax, "A" ;Get ASCII representation of 0 based number
  1099 00002462 880593E1FFFF        <1>     mov byte [volPathBuf], al   ;Store ASCII letter here
  1100 00002468 488D1563DCFFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
  1101 0000246F B41A                <1>     mov ah, 1Ah
  1102 00002471 CD41                <1>     int 41h
  1103 00002473 488D1581E1FFFF      <1>     lea rdx, volPathBuf
  1104 0000247A 66B90800            <1>     mov cx, dirVolumeID
  1105 0000247E B44E                <1>     mov ah, 4Eh ;Find first
  1106 00002480 CD41                <1>     int 41h
  1107 00002482 7221                <1>     jc .skipVolLbl
  1108 00002484 488D3565DCFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1109 0000248B 488D3D5CE1FFFF      <1>     lea rdi, volLblSpc
  1110 00002492 B90B000000          <1>     mov ecx, 11 ;Get the 11 chars of the volume label
  1111                              <1> .dirLblCopy:
  1112 00002497 AC                  <1>     lodsb   ;Get the first char
  1113 00002498 3C00                <1>     cmp al, 0
  1114 0000249A 7409                <1>     je .skipVolLbl  ;Jump with CF=NC
  1115 0000249C 3C2E                <1>     cmp al, "."
  1116 0000249E 7401                <1>     je .dirLblSkipStore
  1117 000024A0 AA                  <1>     stosb
  1118                              <1> .dirLblSkipStore:
  1119 000024A1 FFC9                <1>     dec ecx
  1120 000024A3 75F2                <1>     jnz .dirLblCopy
  1121                              <1>     ;Fallthru with CF=NC
  1122                              <1> .skipVolLbl:
  1123                              <1> ;Print volume label information now
  1124                              <1> ;Propagates the CF if CF was set    
  1125 000024A5 9C                  <1>     pushfq
  1126 000024A6 488D15A0E3FFFF      <1>     lea rdx, crlf
  1127 000024AD B409                <1>     mov ah, 09h
  1128 000024AF CD41                <1>     int 41h
  1129 000024B1 488D151AE6FFFF      <1>     lea rdx, volMes
  1130 000024B8 B409                <1>     mov ah, 09h
  1131 000024BA CD41                <1>     int 41h
  1132 000024BC 8A1539E1FFFF        <1>     mov dl, byte [volPathBuf]   ;Print the drive letter out
  1133 000024C2 B402                <1>     mov ah, 02h
  1134 000024C4 CD41                <1>     int 41h
  1135 000024C6 9D                  <1>     popfq
  1136 000024C7 7317                <1>     jnc .volIDOk
  1137 000024C9 488D1519E6FFFF      <1>     lea rdx, volNo
  1138 000024D0 B409                <1>     mov ah, 09h
  1139 000024D2 CD41                <1>     int 41h
  1140 000024D4 488D1572E3FFFF      <1>     lea rdx, crlf
  1141 000024DB B409                <1>     mov ah, 09h
  1142 000024DD CD41                <1>     int 41h
  1143                              <1>     return
    13                              <2> %%_ret:
    14 000024DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1144                              <1> .volIDOk:
  1145 000024E0 488D15FDE5FFFF      <1>     lea rdx, volOk
  1146 000024E7 B409                <1>     mov ah, 09h
  1147 000024E9 CD41                <1>     int 41h
  1148 000024EB 488D3DFCE0FFFF      <1>     lea rdi, volLblSpc
  1149 000024F2 E8EA060000          <1>     call strlen
  1150 000024F7 FFC9                <1>     dec ecx
  1151 000024F9 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
  1152 000024FD 488D15EAE0FFFF      <1>     lea rdx, volLblSpc
  1153 00002504 B409                <1>     mov ah, 09h
  1154 00002506 CD41                <1>     int 41h
  1155 00002508 488D153EE3FFFF      <1>     lea rdx, crlf
  1156 0000250F B409                <1>     mov ah, 09h
  1157 00002511 CD41                <1>     int 41h
  1158                              <1>     return
    13                              <2> %%_ret:
    14 00002513 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1159                              <1> 
  1160                              <1> version:
  1161 00002514 488D1532E3FFFF      <1>     lea rdx, crlf
  1162 0000251B B409                <1>     mov ah, 09h
  1163 0000251D CD41                <1>     int 41h
  1164 0000251F 488D159AE5FFFF      <1>     lea rdx, dosVer
  1165 00002526 B409                <1>     mov ah, 09h
  1166 00002528 CD41                <1>     int 41h
  1167 0000252A E80C000000          <1>     call .printVersionNumber
  1168 0000252F 488D1517E3FFFF      <1>     lea rdx, crlf
  1169 00002536 B409                <1>     mov ah, 09h
  1170 00002538 CD41                <1>     int 41h
  1171                              <1>     return
    13                              <2> %%_ret:
    14 0000253A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1172                              <1> .printVersionNumber:
  1173 0000253B B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1174 0000253D CD41                <1>     int 41h
  1175 0000253F 50                  <1>     push rax
  1176 00002540 0FB6C0              <1>     movzx eax, al
  1177 00002543 E8A6080000          <1>     call printDecimalWord
  1178 00002548 B22E                <1>     mov dl, "."
  1179 0000254A B402                <1>     mov ah, 02h
  1180 0000254C CD41                <1>     int 41h
  1181 0000254E 58                  <1>     pop rax
  1182 0000254F 0FB6C4              <1>     movzx eax, ah
  1183 00002552 E897080000          <1>     call printDecimalWord
  1184                              <1>     return
    13                              <2> %%_ret:
    14 00002557 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1185                              <1> 
  1186                              <1> 
  1187                              <1> memory:
  1188 00002558 488B1DC0DAFFFF      <1>     mov rbx, qword [sysVars]
  1189 0000255F 4885DB              <1>     test rbx, rbx
  1190 00002562 7510                <1>     jnz .sysvarsOK
  1191 00002564 488D1507E8FFFF      <1>     lea rdx, memBad0
  1192 0000256B B409                <1>     mov ah, 09h
  1193 0000256D CD41                <1>     int 41h
  1194 0000256F E91D090000          <1>     jmp freezePC.altEP
  1195                              <1> .sysvarsOK:
  1196                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1197                              <1>     ; and rcx to store Application memory
  1198 00002574 31F6                <1>     xor esi, esi
  1199 00002576 31FF                <1>     xor edi, edi
  1200 00002578 31ED                <1>     xor ebp, ebp
  1201 0000257A 31C9                <1>     xor ecx, ecx
  1202 0000257C 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1203 00002580 488B1B              <1>     mov rbx, qword [rbx]
  1204                              <1> .memLp:
  1205 00002583 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1206 00002586 7409                <1>     je .validMCB
  1207 00002588 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1208 0000258B 0F8501010000        <1>     jne .badMCBFound
  1209                              <1> .validMCB:
  1210 00002591 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1211 00002594 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1212 00002598 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1213 000025A0 7505                <1>     jne .notDOS
  1214 000025A2 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1215 000025A5 EB21                <1>     jmp short .gotoNext
  1216                              <1> .notDOS:
  1217 000025A7 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1218 000025AF 7505                <1>     jne .notFree
  1219 000025B1 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1220 000025B4 EB12                <1>     jmp short .gotoNext
  1221                              <1> .notFree:
  1222 000025B6 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1223 000025BE 7505                <1>     jne .notHole
  1224 000025C0 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1225 000025C3 EB03                <1>     jmp short .gotoNext
  1226                              <1> .notHole:
  1227 000025C5 4801C1              <1>     add rcx, rax    ;Add to Application count
  1228                              <1> .gotoNext:
  1229 000025C8 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1230 000025CB 7407                <1>     je .endOfWalk
  1231 000025CD 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1232 000025D2 EBAF                <1>     jmp short .memLp
  1233                              <1> .endOfWalk:
  1234                              <1>     
  1235 000025D4 488D15F8E6FFFF      <1>     lea rdx, memDOS
  1236 000025DB B409                <1>     mov ah, 09h
  1237 000025DD CD41                <1>     int 41h
  1238 000025DF 4889F0              <1>     mov rax, rsi
  1239 000025E2 E89D000000          <1>     call .mcbPrintAmount
  1240 000025E7 488D157DE7FFFF      <1>     lea rdx, memByte
  1241 000025EE B409                <1>     mov ah, 09h
  1242 000025F0 CD41                <1>     int 41h
  1243                              <1> 
  1244 000025F2 4885ED              <1>     test rbp, rbp
  1245 000025F5 741E                <1>     jz .skipHole
  1246 000025F7 488D1521E7FFFF      <1>     lea rdx, memHole
  1247 000025FE B409                <1>     mov ah, 09h
  1248 00002600 CD41                <1>     int 41h
  1249 00002602 4889E8              <1>     mov rax, rbp
  1250 00002605 E87A000000          <1>     call .mcbPrintAmount
  1251 0000260A 488D155AE7FFFF      <1>     lea rdx, memByte
  1252 00002611 B409                <1>     mov ah, 09h
  1253 00002613 CD41                <1>     int 41h
  1254                              <1> .skipHole:
  1255                              <1> 
  1256 00002615 488D15DDE6FFFF      <1>     lea rdx, memApp
  1257 0000261C B409                <1>     mov ah, 09h
  1258 0000261E CD41                <1>     int 41h
  1259 00002620 4889C8              <1>     mov rax, rcx
  1260 00002623 E85C000000          <1>     call .mcbPrintAmount
  1261 00002628 488D153CE7FFFF      <1>     lea rdx, memByte
  1262 0000262F B409                <1>     mov ah, 09h
  1263 00002631 CD41                <1>     int 41h
  1264                              <1> 
  1265 00002633 488D150BE7FFFF      <1>     lea rdx, memFree
  1266 0000263A B409                <1>     mov ah, 09h
  1267 0000263C CD41                <1>     int 41h
  1268 0000263E 4889F8              <1>     mov rax, rdi
  1269 00002641 E83E000000          <1>     call .mcbPrintAmount
  1270 00002646 488D151EE7FFFF      <1>     lea rdx, memByte
  1271 0000264D B409                <1>     mov ah, 09h
  1272 0000264F CD41                <1>     int 41h
  1273                              <1> 
  1274 00002651 488D1555E6FFFF      <1>     lea rdx, memSys
  1275 00002658 B409                <1>     mov ah, 09h
  1276 0000265A CD41                <1>     int 41h
  1277 0000265C 4889F0              <1>     mov rax, rsi
  1278 0000265F 4801F8              <1>     add rax, rdi
  1279 00002662 4801C8              <1>     add rax, rcx
  1280 00002665 4801E8              <1>     add rax, rbp
  1281 00002668 E817000000          <1>     call .mcbPrintAmount
  1282 0000266D 488D15F7E6FFFF      <1>     lea rdx, memByte
  1283 00002674 B409                <1>     mov ah, 09h
  1284 00002676 CD41                <1>     int 41h
  1285                              <1> 
  1286 00002678 488D15CEE1FFFF      <1>     lea rdx, crlf
  1287 0000267F B409                <1>     mov ah, 09h
  1288 00002681 CD41                <1>     int 41h
  1289                              <1>     return
    13                              <2> %%_ret:
    14 00002683 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1290                              <1> 
  1291                              <1> .mcbPrintAmount:
  1292 00002684 51                  <1>     push rcx
  1293 00002685 56                  <1>     push rsi
  1294 00002686 57                  <1>     push rdi
  1295 00002687 55                  <1>     push rbp
  1296 00002688 E861070000          <1>     call printDecimalWord
  1297 0000268D 5D                  <1>     pop rbp
  1298 0000268E 5F                  <1>     pop rdi
  1299 0000268F 5E                  <1>     pop rsi
  1300 00002690 59                  <1>     pop rcx
  1301                              <1>     return
    13                              <2> %%_ret:
    14 00002691 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1302                              <1> .badMCBFound:
  1303 00002692 488D1519E7FFFF      <1>     lea rdx, memBad2
  1304 00002699 B409                <1>     mov ah, 09h
  1305 0000269B CD41                <1>     int 41h
  1306 0000269D E9EF070000          <1>     jmp freezePC.altEP
  1307                              <1> 
  1308                              <1> type:
  1309 000026A2 F60513DAFFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1310 000026A9 0F849CF0FFFF        <1>     jz badArgError
  1311 000026AF F60509DAFFFFFF      <1>     test byte [arg2Flg], -1
  1312 000026B6 0F858FF0FFFF        <1>     jnz badArgError         ;If this set, error
  1313 000026BC 488D355ADBFFFF      <1>     lea rsi, cmdBuffer
  1314 000026C3 0FB605F3D9FFFF      <1>     movzx eax, byte [arg1Off]
  1315 000026CA 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1316 000026CD 803E0D              <1>     cmp byte [rsi], CR
  1317 000026D0 0F8475F0FFFF        <1>     je badArgError
  1318 000026D6 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1319 000026DA 750F                <1>     jne .noDrive
  1320 000026DC 0FB605DBD9FFFF      <1>     movzx eax, byte [arg1FCBret]
  1321 000026E3 3CFF                <1>     cmp al, -1
  1322 000026E5 0F8457F0FFFF        <1>     je badDriveError
  1323                              <1> .noDrive:
  1324                              <1>     ;Now we open the provided file
  1325 000026EB E8E3070000          <1>     call copyArgumentToSearchSpec
  1326 000026F0 488D1567DDFFFF      <1>     lea rdx, searchSpec
  1327 000026F7 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1328 000026FC CD41                <1>     int 41h
  1329 000026FE 0F8250F0FFFF        <1>     jc badFileError
  1330 00002704 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1331 0000270B 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1332                              <1> .lp:
  1333 0000270E B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1334 00002713 B43F                <1>     mov ah, 3Fh ;Read handle
  1335 00002715 CD41                <1>     int 41h
  1336 00002717 89C1                <1>     mov ecx, eax
  1337 00002719 67E317              <1>     jecxz .exit
  1338 0000271C 53                  <1>     push rbx    ;Save the original in handle
  1339 0000271D BB01000000          <1>     mov ebx, 1  ;STDOUT
  1340 00002722 B440                <1>     mov ah, 40h
  1341 00002724 CD41                <1>     int 41h
  1342 00002726 5B                  <1>     pop rbx ;Get back the original read handle
  1343 00002727 720F                <1>     jc .exitBad
  1344 00002729 39C8                <1>     cmp eax, ecx
  1345 0000272B 74E1                <1>     je .lp
  1346 0000272D FFC9                <1>     dec ecx ;One less for a ^Z
  1347 0000272F 39C8                <1>     cmp eax, ecx
  1348 00002731 7505                <1>     jne .exitBad
  1349                              <1> .exit:
  1350 00002733 B43E                <1>     mov ah, 3Eh ;Close handle
  1351 00002735 CD41                <1>     int 41h
  1352                              <1>     return
    13                              <2> %%_ret:
    14 00002737 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1353                              <1> .exitBad:
  1354                              <1>     ;Print a disk error message... use a table to build the message but for
  1355                              <1>     ; now, just exit
  1356                              <1>     ;If it is a char device, don't print a error
  1357 00002738 EBF9                <1>     jmp short .exit
  1358                              <1> 
  1359                              <1> exit:
  1360 0000273A F605ECD8FFFFFF      <1>     test byte [permaSwitch], -1
  1361                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002741 75(37)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1362 00002743 488B05CDD8FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1363 0000274A 483DFFFFFFFF        <1>     cmp rax, -1
  1364                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002750 74(37)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1365 00002752 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1366                              <1> 
  1367 00002756 488B15D1D8FFFF      <1>     mov rdx, qword [parentInt42]
  1368 0000275D 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
  1369 00002761 B842250000          <1>     mov eax, 2542h
  1370 00002766 CD41                <1>     int 41h
  1371                              <1> 
  1372 00002768 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1373 0000276D CD41                <1>     int 41h
  1374                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 0000276F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1375                              <1> 
  1376                              <1> launchChild:
  1377                              <1> ;We run EXEC on this and the child task will return via applicationReturn
  1378                              <1> ;Here we must search the CWD or all path componants before failing
  1379                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
  1380 00002770 488D155BD9FFFF      <1>     lea rdx, cmdFFBlock
  1381 00002777 B41A                <1>     mov ah, 1Ah     ;Set DTA for task
  1382 00002779 CD41                <1>     int 41h
  1383                              <1> 
  1384 0000277B 8B054AD9FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
  1385 00002781 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1386 00002786 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1387 0000278B 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
  1388 00002790 741D                <1>     je .noExt
  1389 00002792 E8A5EAFFFF          <1>     call checkExtensionExec ;ZF=ZE => Executable
  1390 00002797 0F8568010000        <1>     jnz .dfltErrExit
  1391                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1392 0000279D 0F8262010000        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
  1393                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1394                              <1>     ;So it is a com or exe that we are searching for for now
  1395 000027A3 488D3DF3DAFFFF      <1>     lea rdi, cmdPathSpec
  1396 000027AA 4889FA              <1>     mov rdx, rdi
  1397 000027AD EB24                <1>     jmp short .search
  1398                              <1> .noExt:
  1399                              <1>     ;If the filename has no extension, append a .*
  1400                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
  1401 000027AF 31DB                <1>     xor ebx, ebx
  1402 000027B1 488D3DE5DAFFFF      <1>     lea rdi, cmdPathSpec
  1403 000027B8 4889FA              <1>     mov rdx, rdi
  1404 000027BB 31C0                <1>     xor eax, eax
  1405 000027BD B9FFFFFFFF          <1>     mov ecx, -1
  1406 000027C2 F2AE                <1>     repne scasb
  1407 000027C4 48FFCF              <1>     dec rdi ;Point to the terminating null
  1408 000027C7 4889FD              <1>     mov rbp, rdi    ;Temporarily store the ptr to the . in rbp
  1409 000027CA 66B82E2A            <1>     mov ax, ".*"
  1410 000027CE 66AB                <1>     stosw
  1411 000027D0 30C0                <1>     xor al, al  ;Store terminating null
  1412 000027D2 AA                  <1>     stosb
  1413                              <1> .search:
  1414 000027D3 B906000000          <1>     mov ecx, dirIncFiles
  1415 000027D8 B44E                <1>     mov ah, 4Eh ;Find First File
  1416 000027DA CD41                <1>     int 41h
  1417 000027DC 0F8223010000        <1>     jc .dfltErrExit
  1418 000027E2 E8D1000000          <1>     call .noExtCheckExt
  1419                              <1> .moreSearch:
  1420 000027E7 B44F                <1>     mov ah, 4Fh
  1421 000027E9 CD41                <1>     int 41h
  1422 000027EB 7207                <1>     jc .noMoreFiles
  1423 000027ED E8C6000000          <1>     call .noExtCheckExt
  1424 000027F2 EBF3                <1>     jmp short .moreSearch
  1425                              <1> .noMoreFiles:
  1426 000027F4 85DB                <1>     test ebx, ebx
  1427 000027F6 0F8409010000        <1>     jz .dfltErrExit
  1428                              <1> ;So we have a valid executable
  1429 000027FC 4889EF              <1>     mov rdi, rbp    ;Get back ptr to the .*,0
  1430 000027FF F7C301000000        <1>     test ebx, 1
  1431 00002805 7407                <1>     jz .launchexebat
  1432 00002807 B82E434F4D          <1>     mov eax, ".COM"
  1433 0000280C EB14                <1>     jmp short .buildTail
  1434                              <1> .launchexebat:
  1435 0000280E F7C302000000        <1>     test ebx, 2
  1436 00002814 7407                <1>     jz .launchbat
  1437 00002816 B82E455845          <1>     mov eax, ".EXE"
  1438 0000281B EB05                <1>     jmp short .buildTail
  1439                              <1> .launchbat:
  1440                              <1> ;Temporary For BAT
  1441 0000281D E9E3000000          <1>     jmp .dfltErrExit
  1442                              <1> .buildTail:
  1443 00002822 AB                  <1>     stosd
  1444 00002823 31C0                <1>     xor eax, eax
  1445 00002825 AA                  <1>     stosb   ;Store the terminating null
  1446                              <1> ;Now we build the cmdtail properly
  1447 00002826 488D3DF0D8FFFF      <1>     lea rdi, cmdTail
  1448 0000282D 4889FA              <1>     mov rdx, rdi    ;Use rdx as the anchor pointer for cmdline
  1449 00002830 B910000000          <1>     mov ecx, 128/8
  1450 00002835 F348AB              <1>     rep stosq   ;Clear the buffer with nulls
  1451 00002838 488D7A01            <1>     lea rdi, qword [rdx + 1]    ;Mov rdi to start of cmdtail (not count)
  1452 0000283C 498DB080000000      <1>     lea rsi, qword [r8 + cmdLineCnt]
  1453 00002843 AC                  <1>     lodsb   ;Get into al the number of chars and move rsi to the tail proper
  1454 00002844 88C4                <1>     mov ah, al  ;Move the number into ah
  1455 00002846 31C9                <1>     xor ecx, ecx    ;Use ch for number of chars read, cl for chars copied
  1456                              <1>     ;Skip the parsed command name
  1457                              <1> .passName:
  1458 00002848 AC                  <1>     lodsb   ;Get the char in al
  1459 00002849 FEC5                <1>     inc ch
  1460 0000284B 80FD7F              <1>     cmp ch, 127     ;Exit condition (bad case)
  1461 0000284E 741D                <1>     je short .finishBuildingTailNoCR
  1462 00002850 3C0D                <1>     cmp al, CR      ;If we get to the CR after name, no tail
  1463 00002852 7418                <1>     je short .finishBuildingTail
  1464 00002854 3C20                <1>     cmp al, SPC
  1465 00002856 75F0                <1>     jne short .passName
  1466                              <1>     ;Now we copy the name 
  1467 00002858 E8F2030000          <1>     call skipSpaces ;Start by skipping spaces (there are no embedded tabs)
  1468                              <1>     ;rsi points to the first non-space char
  1469                              <1> .copyTail:
  1470 0000285D AC                  <1>     lodsb
  1471 0000285E 3C0D                <1>     cmp al, CR
  1472 00002860 740A                <1>     je short .finishBuildingTail
  1473 00002862 AA                  <1>     stosb
  1474 00002863 FEC1                <1>     inc cl
  1475 00002865 80F97F              <1>     cmp cl, 127 ;Exit condition
  1476 00002868 75F3                <1>     jne .copyTail
  1477 0000286A EB01                <1>     jmp short .finishBuildingTailNoCR
  1478                              <1> .finishBuildingTail:
  1479 0000286C AA                  <1>     stosb   ;Store the CR
  1480                              <1> .finishBuildingTailNoCR:
  1481 0000286D 880A                <1>     mov byte [rdx], cl  ;Finish by placing count 
  1482                              <1> .launch:
  1483 0000286F 488D1D87D8FFFF      <1>     lea rbx, launchBlock
  1484 00002876 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  1485 0000287A 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  1486 0000287D 488D0599D8FFFF      <1>     lea rax, cmdTail
  1487 00002884 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1488 00002888 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1489 0000288C 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1490 00002890 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1491 00002894 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1492 00002898 488D15FED9FFFF      <1>     lea rdx, cmdPathSpec
  1493 0000289F 4889D6              <1>     mov rsi, rdx
  1494 000028A2 4889D7              <1>     mov rdi, rdx
  1495 000028A5 B800600000          <1>     mov eax, 6000h  ;Get TRUENAME
  1496 000028AA CD41                <1>     int 41h
  1497 000028AC B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1498 000028B1 CD41                <1>     int 41h
  1499 000028B3 E94D000000          <1>     jmp .dfltErrExit    ;If something goes wrong, error out
  1500                              <1> .noExtCheckExt:
  1501                              <1>     ;mov eax, dword [cmdFFBlock + ffBlock.asciizName + filename.fExt]
  1502 000028B8 488D3531D8FFFF      <1>     lea rsi, dword [cmdFFBlock + ffBlock.asciizName]
  1503 000028BF 488D3D26DAFFFF      <1>     lea rdi, fcbCmdSpec
  1504 000028C6 E8FB030000          <1>     call asciiFilenameToFCB
  1505 000028CB 8B0523DAFFFF        <1>     mov eax, dword [fcbCmdSpec + filename.fExt]
  1506 000028D1 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1507 000028D6 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1508 000028DB 3D434F4D20          <1>     cmp eax, "COM "
  1509 000028E0 7507                <1>     jne .neceexe
  1510 000028E2 81CB01000000        <1>     or ebx, 1
  1511                              <1>     return
    13                              <2> %%_ret:
    14 000028E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1512                              <1> .neceexe:
  1513 000028E9 3D45584520          <1>     cmp eax, "EXE "
  1514 000028EE 7507                <1>     jne .necebat
  1515 000028F0 81CB02000000        <1>     or ebx, 2
  1516                              <1>     return
    13                              <2> %%_ret:
    14 000028F6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1517                              <1> .necebat:
  1518 000028F7 3D42415420          <1>     cmp eax, "BAT "
  1519                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000028FC 75(F6)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1520 000028FE 81CB04000000        <1>     or ebx, 4
  1521                              <1>     return
    13                              <2> %%_ret:
    14 00002904 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1522                              <1> 
  1523                              <1> .dfltErrExit:
  1524 00002905 488D159EDFFFFF      <1>     lea rdx, badCmd
  1525 0000290C B409                <1>     mov ah, 09h
  1526 0000290E CD41                <1>     int 41h
  1527                              <1>     return
    13                              <2> %%_ret:
    14 00002910 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1528                              <1> 
  1529                              <1> .cmdTailTerminatorCheck:
  1530                              <1> ;Input: al = Char to check
  1531                              <1> ;ZF=NZ -> Not a terminator
  1532                              <1> ;ZF=ZE and CF=NC -> SPC detected
  1533                              <1> ;ZF=ZE and CF=CY -> CR detected
  1534 00002911 F8                  <1>     clc     ;Clear CF 
  1535 00002912 3C20                <1>     cmp al, SPC
  1536                              <1>     rete    ;ZF Set
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002914 74(10)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1537 00002916 3C0D                <1>     cmp al, CR
  1538                              <1>     retne   ;CF and ZF clear
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002918 75(10)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1539 0000291A F9                  <1>     stc     ;Set CF since ZF is already set
  1540                              <1>     return
    13                              <2> %%_ret:
    14 0000291B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printCRLF:
     4 0000291C 488D152ADFFFFF      <1>     lea rdx, crlf
     5 00002923 BB01000000          <1>     mov ebx, 1  ;Print on STDOUT
     6 00002928 B440                <1>     mov ah, 40h ;Print a new line
     7 0000292A B902000000          <1>     mov ecx, 2  ;Two chars to write
     8 0000292F CD41                <1>     int 41h
     9                              <1>     return
    13                              <2> %%_ret:
    14 00002931 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    10                              <1> printDate:
    11                              <1> ;Input: eax = Packed Date
    12                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    13                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    14                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    15                              <1> ;       ebx = 0 => Print two digit year
    16                              <1> ;       ebx = 1 => Print four digit year
    17 00002932 53                  <1>     push rbx
    18 00002933 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    19 00002935 803DFAD6FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    20 0000293C 7240                <1>     jb .usDate
    21 0000293E 777C                <1>     ja .jpnDate
    22                              <1> ;European: DD/MM/YY
    23 00002940 251F000000          <1>     and eax, 1Fh    ;Save day bits
    24 00002945 E8B0000000          <1>     call .printFirst
    25 0000294A 8A15F1D6FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    26 00002950 B402                <1>     mov ah, 02h
    27 00002952 CD41                <1>     int 41h
    28                              <1> 
    29 00002954 89C8                <1>     mov eax, ecx
    30 00002956 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    31 0000295B C1E805              <1>     shr eax, 5
    32 0000295E E8B3000000          <1>     call .printSecond
    33                              <1> 
    34 00002963 8A15D8D6FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    35 00002969 B402                <1>     mov ah, 02h
    36 0000296B CD41                <1>     int 41h
    37                              <1> 
    38 0000296D 89C8                <1>     mov eax, ecx
    39 0000296F 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    40 00002974 C1E809              <1>     shr eax, 9
    41 00002977 5B                  <1>     pop rbx ;Get the year signature back
    42 00002978 E8A9000000          <1>     call .printYear
    43                              <1>     return
    13                              <2> %%_ret:
    14 0000297D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    44                              <1> .usDate:
    45                              <1> ;US: MM/DD/YY
    46 0000297E 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    47 00002983 C1E805              <1>     shr eax, 5
    48 00002986 E86F000000          <1>     call .printFirst
    49                              <1> 
    50 0000298B 8A15B0D6FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    51 00002991 B402                <1>     mov ah, 02h
    52 00002993 CD41                <1>     int 41h
    53                              <1> 
    54 00002995 89C8                <1>     mov eax, ecx
    55 00002997 251F000000          <1>     and eax, 1Fh    ;Save day bits
    56 0000299C E875000000          <1>     call .printSecond
    57                              <1> 
    58 000029A1 8A159AD6FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    59 000029A7 B402                <1>     mov ah, 02h
    60 000029A9 CD41                <1>     int 41h
    61                              <1> 
    62 000029AB 89C8                <1>     mov eax, ecx
    63 000029AD 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 000029B2 C1E809              <1>     shr eax, 9
    65 000029B5 5B                  <1>     pop rbx ;Get the year signature back
    66 000029B6 E86B000000          <1>     call .printYear
    67                              <1>     return
    13                              <2> %%_ret:
    14 000029BB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    68                              <1> .jpnDate:
    69                              <1> ;Japan: YY/MM/DD
    70 000029BC 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    71 000029C1 C1E809              <1>     shr eax, 9
    72 000029C4 5B                  <1>     pop rbx ;Get the year signature back
    73 000029C5 E85C000000          <1>     call .printYear
    74                              <1> 
    75 000029CA 8A1571D6FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    76 000029D0 B402                <1>     mov ah, 02h
    77 000029D2 CD41                <1>     int 41h
    78                              <1> 
    79 000029D4 89C8                <1>     mov eax, ecx
    80 000029D6 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    81 000029DB C1E805              <1>     shr eax, 5
    82 000029DE E833000000          <1>     call .printSecond
    83                              <1> 
    84 000029E3 8A1558D6FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    85 000029E9 B402                <1>     mov ah, 02h
    86 000029EB CD41                <1>     int 41h
    87                              <1> 
    88 000029ED 89C8                <1>     mov eax, ecx
    89 000029EF 251F000000          <1>     and eax, 1Fh    ;Save day bits
    90 000029F4 E81D000000          <1>     call .printSecond
    91                              <1>     return
    13                              <2> %%_ret:
    14 000029F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    92                              <1> 
    93                              <1> ;Each of these require eax setup correctly
    94                              <1> .printFirst:
    95 000029FA 51                  <1>     push rcx
    96 000029FB E85F040000          <1>     call getDecimalWord
    97 00002A00 84ED                <1>     test ch, ch ;Do we have an upper digit?
    98 00002A02 7504                <1>     jnz .skipSpace
    99 00002A04 88CD                <1>     mov ch, cl
   100 00002A06 B120                <1>     mov cl, " "
   101                              <1> .skipSpace:
   102 00002A08 88CA                <1>     mov dl, cl
   103 00002A0A B402                <1>     mov ah, 02h
   104 00002A0C CD41                <1>     int 41h
   105 00002A0E 88EA                <1>     mov dl, ch
   106 00002A10 B402                <1>     mov ah, 02h
   107 00002A12 CD41                <1>     int 41h
   108 00002A14 59                  <1>     pop rcx
   109                              <1>     return
    13                              <2> %%_ret:
    14 00002A15 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   110                              <1> .printSecond:
   111 00002A16 51                  <1>     push rcx
   112 00002A17 E843040000          <1>     call getDecimalWord
   113 00002A1C 84ED                <1>     test ch, ch ;Do we have an upper digit?
   114 00002A1E 75E8                <1>     jnz .skipSpace
   115 00002A20 88CD                <1>     mov ch, cl
   116 00002A22 B130                <1>     mov cl, "0"
   117 00002A24 EBE2                <1>     jmp short .skipSpace
   118                              <1> .printYear:
   119 00002A26 05BC070000          <1>     add eax, 1980
   120 00002A2B 51                  <1>     push rcx
   121 00002A2C 53                  <1>     push rbx
   122 00002A2D E82D040000          <1>     call getDecimalWord ;Get unpacked in rcx
   123 00002A32 5B                  <1>     pop rbx
   124 00002A33 84DB                <1>     test bl, bl
   125 00002A35 740C                <1>     jz .twoDigitYear
   126 00002A37 88CA                <1>     mov dl, cl  ;Print the first digit
   127 00002A39 B402                <1>     mov ah, 02h
   128 00002A3B CD41                <1>     int 41h
   129 00002A3D 88EA                <1>     mov dl, ch  ;Print the second digit
   130 00002A3F B402                <1>     mov ah, 02h
   131 00002A41 CD41                <1>     int 41h
   132                              <1> .twoDigitYear:
   133 00002A43 C1E910              <1>     shr ecx, 10h    ;Get high word low
   134 00002A46 88CA                <1>     mov dl, cl  ;Print the upper digit
   135 00002A48 B402                <1>     mov ah, 02h
   136 00002A4A CD41                <1>     int 41h
   137 00002A4C 88EA                <1>     mov dl, ch  ;Print the lower digit
   138 00002A4E B402                <1>     mov ah, 02h
   139 00002A50 CD41                <1>     int 41h
   140 00002A52 59                  <1>     pop rcx
   141                              <1>     return
    13                              <2> %%_ret:
    14 00002A53 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   142                              <1> 
   143                              <1> 
   144                              <1> printTime:
   145                              <1> ;Input: eax = Packed Time
   146                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   147                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   148 00002A54 89C1                <1>     mov ecx, eax
   149 00002A56 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   150 00002A5B C1E80B              <1>     shr eax, 11
   151 00002A5E 803DE2D5FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   152 00002A65 750B                <1>     jne .ampm
   153 00002A67 E85A000000          <1>     call .printHours
   154 00002A6C E831000000          <1>     call .printMinutes
   155                              <1>     return
    13                              <2> %%_ret:
    14 00002A71 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   156                              <1> .ampm:
   157 00002A72 3D0C000000          <1>     cmp eax, 12
   158 00002A77 7713                <1>     ja .pm
   159 00002A79 7416                <1>     je .pm2
   160 00002A7B E846000000          <1>     call .printHours
   161 00002A80 E81D000000          <1>     call .printMinutes
   162 00002A85 B261                <1>     mov dl, "a"
   163 00002A87 B402                <1>     mov ah, 02h
   164 00002A89 CD41                <1>     int 41h
   165                              <1>     return
    13                              <2> %%_ret:
    14 00002A8B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   166                              <1> .pm:
   167 00002A8C 2D0C000000          <1>     sub eax, 12
   168                              <1> .pm2:
   169 00002A91 E830000000          <1>     call .printHours
   170 00002A96 E807000000          <1>     call .printMinutes
   171 00002A9B B270                <1>     mov dl, "p"
   172 00002A9D B402                <1>     mov ah, 02h
   173 00002A9F CD41                <1>     int 41h
   174                              <1>     return
    13                              <2> %%_ret:
    14 00002AA1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   175                              <1> .printMinutes:
   176 00002AA2 8A159BD5FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   177 00002AA8 B402                <1>     mov ah, 02h
   178 00002AAA CD41                <1>     int 41h
   179                              <1> 
   180 00002AAC 89C8                <1>     mov eax, ecx
   181 00002AAE 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   182 00002AB3 C1E805              <1>     shr eax, 5
   183                              <1> .printMinutesAlt:
   184 00002AB6 51                  <1>     push rcx
   185 00002AB7 E8A3030000          <1>     call getDecimalWord
   186 00002ABC 84ED                <1>     test ch, ch ;Do we have an upper digit?
   187 00002ABE 7514                <1>     jnz .skipSpace
   188 00002AC0 88CD                <1>     mov ch, cl
   189 00002AC2 B130                <1>     mov cl, "0"
   190 00002AC4 EB0E                <1>     jmp short .skipSpace
   191                              <1> .printHours:
   192 00002AC6 51                  <1>     push rcx
   193 00002AC7 E893030000          <1>     call getDecimalWord
   194 00002ACC 84ED                <1>     test ch, ch ;Do we have an upper digit?
   195 00002ACE 7504                <1>     jnz .skipSpace
   196 00002AD0 88CD                <1>     mov ch, cl
   197 00002AD2 B120                <1>     mov cl, " "
   198                              <1> .skipSpace:
   199 00002AD4 88CA                <1>     mov dl, cl
   200 00002AD6 B402                <1>     mov ah, 02h
   201 00002AD8 CD41                <1>     int 41h
   202 00002ADA 88EA                <1>     mov dl, ch
   203 00002ADC B402                <1>     mov ah, 02h
   204 00002ADE CD41                <1>     int 41h
   205 00002AE0 59                  <1>     pop rcx
   206                              <1>     return
    13                              <2> %%_ret:
    14 00002AE1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   207                              <1> 
   208                              <1> 
   209                              <1> putVersionInPrompt:
   210 00002AE2 488D15D7DFFFFF      <1>     lea rdx, dosVer
   211 00002AE9 B409                <1>     mov ah, 09h ;Print String
   212 00002AEB CD41                <1>     int 41h
   213 00002AED B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   214 00002AEF CD41                <1>     int 41h
   215 00002AF1 50                  <1>     push rax    ;Save minor version
   216 00002AF2 E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   217 00002AF7 E8B4000000          <1>     call printPackedBCD ;Print al
   218 00002AFC B22E                <1>     mov dl, "."
   219 00002AFE B402                <1>     mov ah, 02h
   220 00002B00 CD41                <1>     int 41h
   221 00002B02 58                  <1>     pop rax
   222 00002B03 88E0                <1>     mov al, ah  ;Get the minor version low
   223 00002B05 E889000000          <1>     call hexToBCD
   224 00002B0A E8A1000000          <1>     call printPackedBCD
   225                              <1>     return
    13                              <2> %%_ret:
    14 00002B0F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> putEscInPrompt:
   227 00002B10 B21B                <1>     mov dl, ESC
   228 00002B12 EB1C                <1>     jmp short outChar
   229                              <1> 
   230                              <1> putMoneyInPrompt:
   231 00002B14 B224                <1>     mov dl, "$"
   232 00002B16 EB18                <1>     jmp short outChar
   233                              <1> 
   234                              <1> putEquInPrompt:
   235 00002B18 B23D                <1>     mov dl, "="
   236 00002B1A EB14                <1>     jmp short outChar
   237                              <1> 
   238                              <1> putPipeInPrompt:
   239 00002B1C B27C                <1>     mov dl, "|"
   240 00002B1E EB10                <1>     jmp short outChar
   241                              <1> 
   242                              <1> putGTinPrompt:
   243 00002B20 B23E                <1>     mov dl, ">"
   244 00002B22 EB0C                <1>     jmp short outChar
   245                              <1> 
   246                              <1> putLTinPrompt:
   247 00002B24 B23C                <1>     mov dl, "<"
   248 00002B26 EB08                <1>     jmp short outChar
   249                              <1> 
   250                              <1> putDriveInPrompt:
   251 00002B28 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   252 00002B2A CD41                <1>     int 41h
   253 00002B2C 0441                <1>     add al, "A" ;Convert to letter
   254 00002B2E 88C2                <1>     mov dl, al
   255                              <1> outChar:
   256 00002B30 B402                <1>     mov ah, 02h ;Echo to STDOUT
   257 00002B32 CD41                <1>     int 41h
   258                              <1>     return
    13                              <2> %%_ret:
    14 00002B34 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   259                              <1> putCWDInPrompt:
   260 00002B35 488D3D20D5FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   261 00002B3C B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   262 00002B3E CD41                <1>     int 41h
   263 00002B40 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   264 00002B42 FEC2                <1>     inc dl
   265 00002B44 0441                <1>     add al, "A" ;Convert to letter
   266 00002B46 B43A                <1>     mov ah, ":"
   267 00002B48 66AB                <1>     stosw   ;Store X:, rdi+=2
   268 00002B4A 8A05DBD4FFFF        <1>     mov al, byte [pathSep]
   269 00002B50 AA                  <1>     stosb   ;Store pathSep, inc rdi
   270 00002B51 B447                <1>     mov ah, 47h ;Get Current Working Directory
   271 00002B53 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   272 00002B56 CD41                <1>     int 41h
   273 00002B58 E884000000          <1>     call strlen
   274 00002B5D 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   275                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   276 00002B63 B440                <1>     mov ah, 40h ;Write to handle
   277 00002B65 BB01000000          <1>     mov ebx, 1  ;STDOUT
   278 00002B6A 488D15EBD4FFFF      <1>     lea rdx, currDirStr
   279 00002B71 CD41                <1>     int 41h
   280                              <1>     return
    13                              <2> %%_ret:
    14 00002B73 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   281                              <1> 
   282                              <1> BCDtoHex:
   283                              <1> ;Converts a BCD value to a Hex byte
   284                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   285 00002B74 51                  <1>     push rcx
   286 00002B75 0FB6C0              <1>     movzx eax, al   ;Zero extend
   287 00002B78 89C1                <1>     mov ecx, eax    ;Save al in ecx
   288 00002B7A 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   289 00002B7F 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   290 00002B85 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   291                              <1> .bth:
   292 00002B88 050A000000          <1>     add eax, 10
   293 00002B8D FFC9                <1>     dec ecx
   294 00002B8F 75F7                <1>     jnz .bth
   295 00002B91 59                  <1>     pop rcx
   296 00002B92 C3                  <1>     ret
   297                              <1> 
   298                              <1> hexToBCD:
   299                              <1> ;Converts a Hex byte into two BCD digits
   300                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   301 00002B93 51                  <1>     push rcx
   302 00002B94 0FB6C0              <1>     movzx eax, al   ;Zero extend
   303 00002B97 31C9                <1>     xor ecx, ecx
   304                              <1> .htb0:
   305 00002B99 3D0A000000          <1>     cmp eax, 10
   306 00002B9E 7209                <1>     jb .htb1
   307 00002BA0 2D0A000000          <1>     sub eax, 10
   308 00002BA5 FFC1                <1>     inc ecx
   309 00002BA7 EBF0                <1>     jmp short .htb0
   310                              <1> .htb1:
   311 00002BA9 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   312 00002BAC 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   313 00002BAE 59                  <1>     pop rcx
   314 00002BAF C3                  <1>     ret
   315                              <1> 
   316                              <1> printPackedBCD:
   317                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   318                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   319                              <1> ;Preserves all registers
   320 00002BB0 50                  <1>     push rax
   321 00002BB1 52                  <1>     push rdx
   322 00002BB2 88C4                <1>     mov ah, al
   323 00002BB4 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   324 00002BB6 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   325 00002BB9 7508                <1>     jnz .upperNybble
   326 00002BBB B220                <1>     mov dl, " "
   327 00002BBD B402                <1>     mov ah, 02h
   328 00002BBF CD41                <1>     int 41h
   329 00002BC1 EB0E                <1>     jmp short .lowerNybble
   330                              <1> .upperNybble:
   331 00002BC3 50                  <1>     push rax
   332 00002BC4 C0EC04              <1>     shr ah, 4
   333 00002BC7 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   334 00002BCA 88E2                <1>     mov dl, ah
   335 00002BCC B402                <1>     mov ah, 02h ;Print DL
   336 00002BCE CD41                <1>     int 41h
   337 00002BD0 58                  <1>     pop rax
   338                              <1> .lowerNybble:
   339 00002BD1 0430                <1>     add al, "0"
   340 00002BD3 88C2                <1>     mov dl, al
   341 00002BD5 B402                <1>     mov ah, 02h ;Print DL
   342 00002BD7 CD41                <1>     int 41h
   343 00002BD9 5A                  <1>     pop rdx
   344 00002BDA 58                  <1>     pop rax
   345                              <1>     return
    13                              <2> %%_ret:
    14 00002BDB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   346                              <1> 
   347                              <1> getCurrentDrive:
   348                              <1> ;Returns the 0 based current drive in al
   349 00002BDC B419                <1>     mov ah, 19h
   350 00002BDE CD41                <1>     int 41h
   351                              <1>     return
    13                              <2> %%_ret:
    14 00002BE0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   352                              <1> 
   353                              <1> strlen:
   354                              <1> ;Gets the length of a ASCIIZ string
   355                              <1> ;Input: rdi = Source buffer
   356                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   357 00002BE1 50                  <1>     push rax
   358 00002BE2 57                  <1>     push rdi
   359 00002BE3 30C0                <1>     xor al, al
   360 00002BE5 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   361 00002BE7 FFC9                <1>     dec ecx ;rcx = -1
   362 00002BE9 F2AE                <1>     repne scasb
   363 00002BEB F7D1                <1>     not ecx
   364 00002BED 5F                  <1>     pop rdi
   365 00002BEE 58                  <1>     pop rax
   366                              <1>     return
    13                              <2> %%_ret:
    14 00002BEF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   367                              <1> 
   368                              <1> findTerminatorOrEOC:
   369                              <1> ;Advances rsi to the next string terminator char or the next End of command
   370                              <1> ; char
   371                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   372                              <1> ;If a end of command char found, also sets CF
   373 00002BF0 AC                  <1>     lodsb
   374 00002BF1 3C0D                <1>     cmp al, CR
   375 00002BF3 7419                <1>     je .endOfInput
   376 00002BF5 E82B000000          <1>     call isALterminator
   377 00002BFA 7419                <1>     jz .exit
   378 00002BFC 3A0529D4FFFF        <1>     cmp al, byte [pathSep]
   379 00002C02 7411                <1>     je .exit
   380 00002C04 3A0522D4FFFF        <1>     cmp al, byte [switchChar]
   381 00002C0A 7409                <1>     je .exit
   382 00002C0C EBE2                <1>     jmp short findTerminatorOrEOC
   383                              <1> .endOfInput:
   384 00002C0E E802000000          <1>     call .exit
   385 00002C13 F9                  <1>     stc 
   386                              <1>     return
    13                              <2> %%_ret:
    14 00002C14 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .exit:
   388 00002C15 48FFCE              <1>     dec rsi ;Point to the terminating char
   389                              <1>     return
    13                              <2> %%_ret:
    14 00002C18 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   390                              <1> 
   391                              <1> findTerminator:
   392                              <1> ;Advances rsi to the next string terminator char
   393                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   394 00002C19 AC                  <1>     lodsb
   395 00002C1A E806000000          <1>     call isALterminator
   396 00002C1F 75F8                <1>     jnz findTerminator
   397 00002C21 48FFCE              <1>     dec rsi
   398                              <1>     return
    13                              <2> %%_ret:
    14 00002C24 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   399                              <1> isALterminator:
   400                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   401                              <1> ;         ZF=ZY if al is a terminator
   402 00002C25 3C20                <1>     cmp al, " "
   403                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002C27 74(24)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   404 00002C29 3C3B                <1>     cmp al, ";"
   405                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002C2B 74(24)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   406 00002C2D 3C3D                <1>     cmp al, "="
   407                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002C2F 74(24)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   408 00002C31 3C2C                <1>     cmp al, ","
   409                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002C33 74(24)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   410 00002C35 3C09                <1>     cmp al, TAB
   411                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002C37 74(24)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   412 00002C39 3C0A                <1>     cmp al, LF
   413                              <1>     return
    13                              <2> %%_ret:
    14 00002C3B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   414                              <1> 
   415                              <1> findEndOfCommand:
   416                              <1> ;Moves rsi to the | or CR that terminates this command
   417 00002C3C AC                  <1>     lodsb
   418 00002C3D E806000000          <1>     call isALEndOfCommand
   419 00002C42 75F8                <1>     jnz findEndOfCommand
   420 00002C44 48FFCE              <1>     dec rsi
   421                              <1>     return
    13                              <2> %%_ret:
    14 00002C47 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   422                              <1> isALEndOfCommand:
   423 00002C48 3C7C                <1>     cmp al, "|"
   424                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002C4A 74(47)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   425 00002C4C 3C0D                <1>     cmp al, CR
   426                              <1>     return
    13                              <2> %%_ret:
    14 00002C4E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   427                              <1> 
   428                              <1> skipSpaces:
   429                              <1> ;Also skips tabs
   430                              <1> ;Input: rsi must point to the start of the data string
   431                              <1> ;Output: rsi points to the first non-space char
   432 00002C4F 803E20              <1>     cmp byte [rsi], " "
   433 00002C52 7405                <1>     je .skip    ;If equal to a space, skip it
   434 00002C54 803E09              <1>     cmp byte [rsi], TAB
   435                              <1>     retne   ;If not equal to a tab or space, return
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002C57 75(4E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   436                              <1> .skip:
   437 00002C59 48FFC6              <1>     inc rsi
   438 00002C5C EBF1                <1>     jmp short skipSpaces
   439                              <1> 
   440                              <1> printPrompt:
   441 00002C5E 66813DC2D3FFFFFFFF  <1>     cmp word [promptPtr], -1
   442 00002C67 750B                <1>     jne .validPrompt
   443                              <1>     ;Here we print the default prompt
   444 00002C69 E8C7FEFFFF          <1>     call putCWDInPrompt
   445 00002C6E E8ADFEFFFF          <1>     call putGTinPrompt
   446                              <1>     return
    13                              <2> %%_ret:
    14 00002C73 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   447                              <1> .validPrompt:
   448                              <1>     return
    13                              <2> %%_ret:
    14 00002C74 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   449                              <1> 
   450                              <1> clearCommandState:
   451                              <1> ;Clears the command state
   452 00002C75 488D3D38D4FFFF      <1>     lea rdi, cmdStatePtr
   453 00002C7C B90E000000          <1>     mov ecx, cmdStateL
   454 00002C81 31C0                <1>     xor eax, eax
   455 00002C83 F3AA                <1>     rep stosb
   456 00002C85 C70529D4FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   456 00002C8E FF                  <1>
   457                              <1>     return
    13                              <2> %%_ret:
    14 00002C8F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   458                              <1> 
   459                              <1> clearCommandLineState:
   460                              <1> ;Clears the command line state after a 0Dh encountered
   461 00002C90 488D3D08D4FFFF      <1>     lea rdi, cmdLineStatePtr
   462 00002C97 B923000000          <1>     mov ecx, cmdLineStateL
   463 00002C9C 31C0                <1>     xor eax, eax
   464 00002C9E F3AA                <1>     rep stosb
   465 00002CA0 C70506D4FFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   465 00002CA9 FF                  <1>
   466 00002CAA C70504D4FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   466 00002CB3 FF                  <1>
   467                              <1>     return
    13                              <2> %%_ret:
    14 00002CB4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   468                              <1> 
   469                              <1> asciiToFCB:
   470                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   471                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   472                              <1> ;Also doesn't check if chars are valid
   473                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   474                              <1> ;Name is space padded.
   475                              <1> ;Input: rsi = ASCII string buffer
   476                              <1> ;       rdi = FCB name buffer
   477                              <1> ;Output: al = Char that terminated the source string 
   478 00002CB5 53                  <1>     push rbx    
   479 00002CB6 57                  <1>     push rdi
   480 00002CB7 B90B000000          <1>     mov ecx, 11
   481 00002CBC B020                <1>     mov al, " "
   482 00002CBE F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   483 00002CC0 5F                  <1>     pop rdi
   484 00002CC1 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   485 00002CC4 EB1D                <1>     jmp short asciiFilenameToFCB.processName
   486                              <1> asciiFilenameToFCB:
   487                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   488                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   489                              <1> ;Also doesn't check if chars are valid
   490                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   491                              <1> ;Name is space padded.
   492                              <1> ;Input: rsi = ASCII string buffer
   493                              <1> ;       rdi = FCB name buffer
   494                              <1> ;Output: al = Char that terminated the source string 
   495 00002CC6 53                  <1>     push rbx    
   496 00002CC7 57                  <1>     push rdi
   497 00002CC8 B90B000000          <1>     mov ecx, 11
   498 00002CCD B020                <1>     mov al, " "
   499 00002CCF F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   500 00002CD1 5F                  <1>     pop rdi
   501 00002CD2 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   502                              <1>     ;Preprocess for Dir Searches
   503 00002CD5 803E2E              <1>     cmp byte [rsi], "."
   504 00002CD8 7509                <1>     jne .processName
   505 00002CDA A4                  <1>     movsb   ;Store the first dot
   506 00002CDB 803E2E              <1>     cmp byte [rsi], "."
   507 00002CDE 752C                <1>     jne .exitBadChar
   508 00002CE0 A4                  <1>     movsb
   509 00002CE1 EB29                <1>     jmp short .exitBadChar
   510                              <1> .processName:
   511 00002CE3 AC                  <1>     lodsb   ;Get the char in al
   512 00002CE4 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   513 00002CE6 7426                <1>     jz .exit
   514 00002CE8 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   515 00002CEA 7407                <1>     je .extSpace
   516 00002CEC 3C2E                <1>     cmp al, "."
   517 00002CEE 740C                <1>     je .ext
   518 00002CF0 AA                  <1>     stosb   ;Store the char
   519 00002CF1 EBF0                <1>     jmp short .processName
   520                              <1> .extSpace:
   521                              <1> ;Now we scan for a period in the name
   522 00002CF3 AC                  <1>     lodsb   ;Get a char and increase rsi
   523 00002CF4 84C0                <1>     test al, al
   524 00002CF6 7416                <1>     jz .exit
   525 00002CF8 3C2E                <1>     cmp al, "."     ;If al is not a period...
   526 00002CFA 75F7                <1>     jne .extSpace   ; keep searching
   527                              <1> .ext:
   528 00002CFC 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   529                              <1> .processExt:
   530 00002D00 AC                  <1>     lodsb
   531 00002D01 84C0                <1>     test al, al
   532 00002D03 7409                <1>     jz .exit
   533 00002D05 3C20                <1>     cmp al, " "
   534 00002D07 7405                <1>     je .exit
   535 00002D09 AA                  <1>     stosb
   536 00002D0A EBF4                <1>     jmp short .processExt
   537                              <1> .exitBadChar:
   538 00002D0C 30C0                <1>     xor al, al  ;Return a null terminator
   539                              <1> .exit:
   540 00002D0E 5B                  <1>     pop rbx
   541                              <1>     return
    13                              <2> %%_ret:
    14 00002D0F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   542                              <1> 
   543                              <1> FCBToAsciiz:
   544                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   545                              <1> ;Name is space padded too
   546                              <1> ;Input: rsi = FCB name buffer
   547                              <1> ;       rdi = ASCIIZ string buffer
   548 00002D10 B908000000          <1>     mov ecx, 8
   549 00002D15 F3A4                <1>     rep movsb   ;Move the name over
   550                              <1> .scanNameSpace:
   551 00002D17 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   552 00002D1B 750D                <1>     jne .ext
   553 00002D1D 48FFCF              <1>     dec rdi
   554 00002D20 FFC1                <1>     inc ecx
   555 00002D22 81F908000000        <1>     cmp ecx, 8
   556 00002D28 72ED                <1>     jb .scanNameSpace
   557                              <1> .ext:
   558 00002D2A 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   559 00002D2F 7506                <1>     jne .validExt
   560 00002D31 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   561 00002D35 7415                <1>     je .exit
   562                              <1> .validExt:
   563 00002D37 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   564 00002D39 AA                  <1>     stosb
   565 00002D3A B903000000          <1>     mov ecx, 3
   566 00002D3F F3A4                <1>     rep movsb   ;Move the three extension chars over
   567                              <1> .scanExtSpace:
   568 00002D41 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   569 00002D45 7505                <1>     jne .exit
   570 00002D47 48FFCF              <1>     dec rdi
   571 00002D4A EBF5                <1>     jmp short .scanExtSpace
   572                              <1> .exit:
   573 00002D4C 31C0                <1>     xor eax, eax
   574 00002D4E AA                  <1>     stosb   ;Store a null at the end
   575                              <1>     return
    13                              <2> %%_ret:
    14 00002D4F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   576                              <1> 
   577                              <1> buildCommandPath:
   578                              <1> ;Based on the first argument on the command line
   579                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   580                              <1>     ;If this is a relative path, will handle correctly (tho unnecessary)
   581 00002D50 0FB60566D3FFFF      <1>     movzx eax, byte [arg1Off]
   582 00002D57 488D35BFD4FFFF      <1>     lea rsi, cmdBuffer
   583 00002D5E 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   584 00002D61 8A3DC4D2FFFF        <1>     mov bh, byte [pathSep]
   585 00002D67 B33A                <1>     mov bl, ":"
   586 00002D69 383E                <1>     cmp byte [rsi], bh  ;Is the first char relative to root?
   587 00002D6B 7458                <1>     je .absoluteCurrent
   588 00002D6D 66395E01            <1>     cmp word [rsi + 1], bx    ;This checks if absolute or relative
   589 00002D71 746D                <1>     je .absolutePath
   590 00002D73 385E01              <1>     cmp byte [rsi + 1], bl  ;Check if a drive separator
   591 00002D76 7409                <1>     je .relativeGiven
   592                              <1> ;No drive letter given, must get Current Drive
   593 00002D78 E85FFEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   594 00002D7D 0441                <1>     add al, "A"
   595 00002D7F EB0B                <1>     jmp short .relativeCommon
   596                              <1> .relativeGiven:
   597                              <1> ;Drive letter pointed to by AL
   598 00002D81 8A06                <1>     mov al, byte [rsi]  ;Get drive letter in al
   599 00002D83 24DF                <1>     and al, 0DFh    ;Convert to UC
   600 00002D85 4881C602000000      <1>     add rsi, 2  ;Skip the given drive letter and the colon
   601                              <1> .relativeCommon:
   602                              <1>     ;al has drive letter
   603 00002D8C 88C2                <1>     mov dl, al  ;Save drive letter in dl
   604 00002D8E 80EA40              <1>     sub dl, "@" ;Get 1 based drive number in dl
   605 00002D91 B43A                <1>     mov ah, ":" ;Get the colon in too
   606 00002D93 488D3DC4D6FFFF      <1>     lea rdi, searchSpec ;Start building our search path here
   607 00002D9A 66AB                <1>     stosw   ;Store X:
   608 00002D9C 8A0589D2FFFF        <1>     mov al, byte [pathSep]
   609 00002DA2 AA                  <1>     stosb   ;Store pathSep
   610 00002DA3 56                  <1>     push rsi    ;Save user input string
   611 00002DA4 4889FE              <1>     mov rsi, rdi    ;Put the current directory here for this drive
   612 00002DA7 B447                <1>     mov ah, 47h ;Get Current Working Directory, dl has drive number
   613 00002DA9 CD41                <1>     int 41h ;Won't fail as drive letter in dl confirmed ok
   614 00002DAB 5E                  <1>     pop rsi
   615                              <1>     ;Now want to find terminating null
   616 00002DAC 30C0                <1>     xor al, al
   617 00002DAE 31C9                <1>     xor ecx, ecx
   618 00002DB0 FFC9                <1>     dec ecx
   619 00002DB2 F2AE                <1>     repne scasb ;Search for the terminating null
   620 00002DB4 48FFCF              <1>     dec rdi ;Go back one once found
   621 00002DB7 8A056ED2FFFF        <1>     mov al, byte [pathSep]
   622 00002DBD 3847FF              <1>     cmp byte [rdi - 1], al
   623 00002DC0 7425                <1>     je .buildPath ;If the previous char is a pathsep, skip storing another
   624 00002DC2 AA                  <1>     stosb   ;Store the pathsep
   625 00002DC3 EB22                <1>     jmp short .buildPath  ;Now we copy the user string over and good to go
   626                              <1> .absoluteCurrent:
   627 00002DC5 E812FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   628 00002DCA 0441                <1>     add al, "A"
   629 00002DCC B43A                <1>     mov ah, ":" ;ax has X: now to store 
   630 00002DCE 488D3D89D6FFFF      <1>     lea rdi, searchSpec
   631 00002DD5 66AB                <1>     stosw
   632 00002DD7 8A054ED2FFFF        <1>     mov al, byte [pathSep]
   633 00002DDD AA                  <1>     stosb
   634 00002DDE EB07                <1>     jmp short .buildPath
   635                              <1> .absolutePath:
   636 00002DE0 488D3D77D6FFFF      <1>     lea rdi, searchSpec
   637                              <1> .buildPath:
   638 00002DE7 E8CAE8FFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   639 00002DEC F8                  <1>     clc ;I dont care if i encounter an embedded CR rn
   640                              <1>     return
    13                              <2> %%_ret:
    14 00002DED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   641                              <1>     
   642                              <1> printDecimalWord:
   643                              <1> ;Takes qword in rax and print it's decimal representation
   644                              <1> ;Takes the qword in eax and prints its decimal representation
   645 00002DEE 31C9                <1>     xor ecx, ecx
   646 00002DF0 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   647 00002DF2 85C0                <1>     test eax, eax
   648 00002DF4 750C                <1>     jnz .notZero
   649 00002DF6 B930000000          <1>     mov ecx, "0"
   650 00002DFB BD01000000          <1>     mov ebp, 1  ;Print one digit
   651 00002E00 EB3E                <1>     jmp short .dpfb2
   652                              <1> .notZero:
   653 00002E02 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   654 00002E04 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   655                              <1> .dpfb0:
   656 00002E09 FFC5                <1>     inc ebp
   657 00002E0B 81FD08000000        <1>     cmp ebp, 8
   658 00002E11 7206                <1>     jb .dpfb00
   659 00002E13 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   660 00002E17 EB04                <1>     jmp short .dpfb01
   661                              <1> .dpfb00:
   662 00002E19 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   663                              <1> .dpfb01:
   664 00002E1D 31D2                <1>     xor edx, edx
   665 00002E1F 48F7F6              <1>     div rsi
   666 00002E22 80C230              <1>     add dl, '0'
   667 00002E25 80FA39              <1>     cmp dl, '9'
   668 00002E28 7603                <1>     jbe .dpfb1
   669 00002E2A 80C207              <1>     add dl, 'A'-'0'-10
   670                              <1> .dpfb1:
   671 00002E2D 81FD08000000        <1>     cmp ebp, 8
   672 00002E33 7204                <1>     jb .dpfb10
   673 00002E35 88D3                <1>     mov bl, dl ;Add the bottom bits
   674 00002E37 EB02                <1>     jmp short .dpfb11
   675                              <1> .dpfb10:
   676 00002E39 88D1                <1>     mov cl, dl    ;Save remainder byte
   677                              <1> .dpfb11:
   678 00002E3B 4885C0              <1>     test rax, rax
   679 00002E3E 75C9                <1>     jnz .dpfb0
   680                              <1> .dpfb2:
   681 00002E40 81FD08000000        <1>     cmp ebp, 8
   682 00002E46 7208                <1>     jb .dpfb20
   683 00002E48 88DA                <1>     mov dl, bl
   684 00002E4A 48C1EB08            <1>     shr rbx, 8
   685 00002E4E EB06                <1>     jmp short .dpfb21
   686                              <1> .dpfb20:
   687 00002E50 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   688 00002E52 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   689                              <1> .dpfb21:
   690 00002E56 B402                <1>     mov ah, 02h
   691 00002E58 CD41                <1>     int 41h
   692 00002E5A FFCD                <1>     dec ebp
   693 00002E5C 75E2                <1>     jnz .dpfb2
   694                              <1>     return
    13                              <2> %%_ret:
    14 00002E5E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   695                              <1> 
   696                              <1> getDecimalWord:
   697                              <1> ;Works on MAX A dword in eax
   698                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   699 00002E5F 31C9                <1>     xor ecx, ecx
   700 00002E61 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   701 00002E63 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   702                              <1> .dpfb0:
   703 00002E68 FFC5                <1>     inc ebp
   704 00002E6A 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   705 00002E6E 31D2                <1>     xor edx, edx
   706 00002E70 48F7F3              <1>     div rbx
   707 00002E73 80C230              <1>     add dl, '0'
   708 00002E76 80FA39              <1>     cmp dl, '9'
   709 00002E79 7603                <1>     jbe .dpfb1
   710 00002E7B 80C207              <1>     add dl, 'A'-'0'-10
   711                              <1> .dpfb1:
   712 00002E7E 88D1                <1>     mov cl, dl    ;Save remainder byte
   713 00002E80 4885C0              <1>     test rax, rax
   714 00002E83 75E3                <1>     jnz .dpfb0
   715                              <1>     return
    13                              <2> %%_ret:
    14 00002E85 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   716                              <1> 
   717                              <1> freezePC:
   718 00002E86 488D150BDFFFFF      <1>     lea rdx, memBad1
   719 00002E8D B409                <1>     mov ah, 09h
   720 00002E8F CD41                <1>     int 41h
   721                              <1> .altEP:
   722 00002E91 488D1529DFFFFF      <1>     lea rdx, memBad3
   723 00002E98 B409                <1>     mov ah, 09h
   724 00002E9A CD41                <1>     int 41h
   725                              <1> .lp:
   726 00002E9C F390                <1>     pause
   727 00002E9E F4                  <1>     hlt
   728 00002E9F EBFB                <1>     jmp short .lp
   729                              <1> 
   730                              <1> getFilenamePtrFromFilespec:
   731                              <1> ;Gets a pointer to the first char of a filename from a asciiz pathspec
   732                              <1> ;Input: rsi = Pathspec to search
   733                              <1> ;Output: rsi = Points to the first char of the filename
   734 00002EA1 4889F3              <1>     mov rbx, rsi
   735 00002EA4 31C0                <1>     xor eax, eax
   736 00002EA6 4889F7              <1>     mov rdi, rsi    ;Go to the source string 
   737 00002EA9 E833FDFFFF          <1>     call strlen     ;Get it's length
   738 00002EAE FFC9                <1>     dec ecx ;Dont include terminating null
   739 00002EB0 741F                <1>     jz .exitBad ;Was the string of length zero? Exit bad if so
   740 00002EB2 4801CE              <1>     add rsi, rcx    ;Goto last char in path (not null)
   741                              <1> .lp:
   742 00002EB5 4839F3              <1>     cmp rbx, rsi    ;Is rdi pointing to the start of the string?
   743                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002EB8 74(85)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   744 00002EBA 8A06                <1>     mov al, byte [rsi]  ;Get the char we currently are at
   745 00002EBC 3C3A                <1>     cmp al, ":" ;X: ?
   746 00002EBE 740D                <1>     je .pointFilename
   747 00002EC0 3A0565D1FFFF        <1>     cmp al, byte [pathSep]  ;Is al pathSep?
   748 00002EC6 7405                <1>     je .pointFilename
   749 00002EC8 48FFCE              <1>     dec rsi ;Not a terminator, go back a char
   750 00002ECB EBE8                <1>     jmp short .lp
   751                              <1> .pointFilename:
   752 00002ECD 48FFC6              <1>     inc rsi ;Now point to the first char of the pathname
   753                              <1>     return
    13                              <2> %%_ret:
    14 00002ED0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   754                              <1> .exitBad:
   755 00002ED1 F9                  <1>     stc
   756                              <1> .exit:
   757                              <1>     return
    13                              <2> %%_ret:
    14 00002ED2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   758                              <1> 
   759                              <1> 
   760                              <1> copyArgumentToSearchSpec:
   761                              <1> ;Works similarly to the build searchpath but is simpler
   762                              <1> ;Null terminates
   763 00002ED3 488D3D84D5FFFF      <1>     lea rdi, searchSpec
   764                              <1> .copyPath:
   765 00002EDA AC                  <1>     lodsb
   766 00002EDB E868FDFFFF          <1>     call isALEndOfCommand
   767 00002EE0 740A                <1>     jz .finishCopy
   768 00002EE2 E83EFDFFFF          <1>     call isALterminator
   769 00002EE7 7403                <1>     jz .finishCopy
   770 00002EE9 AA                  <1>     stosb
   771 00002EEA EBEE                <1>     jmp short .copyPath
   772                              <1> .finishCopy:
   773 00002EEC 31C0                <1>     xor eax, eax
   774 00002EEE AA                  <1>     stosb
   775                              <1>     return
    13                              <2> %%_ret:
    14 00002EEF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/int44h.asm"
     1                              <1> critErrorHandler:   ;Int 44h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00002EF0 53                  <1>     push rbx
    25 00002EF1 51                  <1>     push rcx
    26 00002EF2 52                  <1>     push rdx
    27 00002EF3 57                  <1>     push rdi
    28 00002EF4 56                  <1>     push rsi
    29 00002EF5 FC                  <1>     cld         ;Make String ops go forward
    30                              <1> 
    31 00002EF6 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00002EF9 488D154DD9FFFF      <1>     lea rdx, crlf
    33 00002F00 B409                <1>     mov ah, 09h ;Print String
    34 00002F02 CD41                <1>     int 41h
    35                              <1> 
    36 00002F04 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    37 00002F0A B90C000000          <1>     mov ecx, 0Ch
    38 00002F0F 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    39 00002F11 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    40 00002F14 480FB7FF            <1>     movzx rdi, di
    41 00002F18 4889FA              <1>     mov rdx, rdi    ;Copy error code
    42 00002F1B 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    43 00002F1F 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    44 00002F22 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    45 00002F25 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    46 00002F2C 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    47 00002F30 B409                <1>     mov ah, 09h ;Print String
    48 00002F32 CD41                <1>     int 41h     ;Call DOS to print first part of message
    49                              <1> 
    50 00002F34 488D1505020000      <1>     lea rdx, qword [.readmsg]
    51 00002F3B 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    52 00002F42 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    53 00002F45 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    54 00002F49 B409                <1>     mov ah, 09h ;Print String
    55 00002F4B CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    56                              <1> 
    57 00002F4D F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    58 00002F50 0F85DF000000        <1>     jnz .charError
    59                              <1> ;Disk error continues here
    60 00002F56 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    61 00002F5D B409                <1>     mov ah, 09h
    62 00002F5F CD41                <1>     int 41h
    63 00002F61 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    64 00002F63 80C241              <1>     add dl, "A" ;Add ASCII code
    65 00002F66 B402                <1>     mov ah, 02h ;Print char in dl
    66 00002F68 CD41                <1>     int 41h
    67                              <1> .userInput:
    68 00002F6A 488D15DCD8FFFF      <1>     lea rdx, crlf  ;Print new line
    69 00002F71 B409                <1>     mov ah, 09h
    70 00002F73 CD41                <1>     int 41h
    71                              <1> ;Abort, Retry, Ignore, Fail is word order
    72                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    73                              <1> .userAbort:
    74                              <1> ;Abort is always an option
    75 00002F75 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    76 00002F7C B409                <1>     mov ah, 09h
    77 00002F7E CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    78                              <1> .userRetry:
    79 00002F80 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    80 00002F83 7416                <1>     jz .userIgnore    ;If clear, dont print message
    81 00002F85 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
    82 00002F8C B409                <1>     mov ah, 09h
    83 00002F8E CD41                <1>     int 41h
    84 00002F90 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
    85 00002F97 B409                <1>     mov ah, 09h
    86 00002F99 CD41                <1>     int 41h
    87                              <1> .userIgnore:
    88 00002F9B F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    89 00002F9E 7416                <1>     jz .userFail
    90 00002FA0 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
    91 00002FA7 B409                <1>     mov ah, 09h
    92 00002FA9 CD41                <1>     int 41h
    93 00002FAB 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
    94 00002FB2 B409                <1>     mov ah, 09h
    95 00002FB4 CD41                <1>     int 41h
    96                              <1> .userFail:
    97 00002FB6 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    98 00002FB9 7416                <1>     jz .userMsgEnd
    99 00002FBB 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   100 00002FC2 B409                <1>     mov ah, 09h
   101 00002FC4 CD41                <1>     int 41h
   102 00002FC6 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   103 00002FCD B409                <1>     mov ah, 09h
   104 00002FCF CD41                <1>     int 41h
   105                              <1> .userMsgEnd:
   106 00002FD1 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   107 00002FD8 B409                <1>     mov ah, 09h
   108 00002FDA CD41                <1>     int 41h
   109                              <1> ;Get user input now 
   110 00002FDC 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   111 00002FDE 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   112 00002FE5 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   113 00002FE7 CD41                <1>     int 41h ;Get char in al
   114 00002FE9 3C61                <1>     cmp al, "a" ;Chack if lowercase
   115 00002FEB 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   116 00002FED 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   117                              <1> .uip1:
   118 00002FEF AE                  <1>     scasb   ;Compare char to list, offset gives return code
   119 00002FF0 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   120 00002FF2 FFC1                <1>     inc ecx
   121 00002FF4 81F904000000        <1>     cmp ecx, 4
   122 00002FFA 75F3                <1>     jne .uip1
   123 00002FFC E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   124                              <1> .validInput:
   125 00003001 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   126                              <1> ;Now check if the input is permitted
   127 00003003 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   128 00003005 7427                <1>     je .cehExit
   129 00003007 84C0                <1>     test al, al ;Check if 0 => Ignore
   130 00003009 740F                <1>     je .viIgnore
   131 0000300B 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   132 0000300D 7416                <1>     je .viRetry
   133                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   134 0000300F F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   135 00003012 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   136 00003018 EB14                <1>     jmp short .cehExit
   137                              <1> .viIgnore:
   138 0000301A F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   139 0000301D 0F8447FFFFFF        <1>     jz .userInput
   140 00003023 EB09                <1>     jmp short .cehExit
   141                              <1> .viRetry:
   142 00003025 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   143 00003028 0F843CFFFFFF        <1>     jz .userInput
   144                              <1> .cehExit:
   145 0000302E 5E                  <1>     pop rsi
   146 0000302F 5F                  <1>     pop rdi
   147 00003030 5A                  <1>     pop rdx
   148 00003031 59                  <1>     pop rcx
   149 00003032 5B                  <1>     pop rbx
   150 00003033 48CF                <1>     iretq
   151                              <1> .charError:
   152 00003035 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   153 0000303A 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   154                              <1> .ce1:
   155 00003041 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   156 00003042 88C2                <1>     mov dl, al  ;Move char into dl
   157 00003044 B402                <1>     mov ah, 02h
   158 00003046 CD41                <1>     int 41h ;Print char
   159 00003048 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   160 0000304A E91BFFFFFF          <1>     jmp .userInput
   161                              <1> 
   162                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   163 0000304F 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   163 00003058 746563742024202020  <1>
   164 00003061 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   164 0000306A 6E6974202420202020  <1>
   165 00003073 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   165 0000307C 202420202020202020  <1>
   166 00003085 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   166 0000308E 6F6D6D616E64202420  <1>
   167 00003097 446174612024202020- <1>             db "Data $            "       ;Error 4
   167 000030A0 202020202020202020  <1>
   168 000030A9 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   168 000030B2 737420242020202020  <1>
   169 000030BB 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   169 000030C4 202020202020202020  <1>
   170 000030CD 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   170 000030D6 656469612024202020  <1>
   171 000030DF 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   171 000030E8 7420466F756E642024  <1>
   172 000030F1 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   172 000030FA 706572202420202020  <1>
   173 00003103 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   173 0000310C 6C7420242020202020  <1>
   174 00003115 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   174 0000311E 742024202020202020  <1>
   175 00003127 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   175 00003130 61696C757265202420  <1>
   176                              <1> 
   177 00003139 64726976652024      <1> .drive      db "drive $"
   178 00003140 6572726F7220726561- <1> .readmsg    db "error reading $"
   178 00003149 64696E672024        <1>
   179 0000314F 6572726F7220777269- <1> .writemsg   db "error writing $"
   179 00003158 74696E672024        <1>
   180 0000315E 41626F727424        <1> .abortmsg   db "Abort$" 
   181 00003164 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   182 0000316B 526574727924        <1> .retrymsg   db "Retry$"
   183 00003171 4661696C24          <1> .failmsg    db "Fail$"
   184 00003176 2C2024              <1> .betweenMsg db ", $"
   185 00003179 3F2024              <1> .endMsg     db "? $"
   186 0000317C 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   187                              <1> 
   188                              <1> int43h:
   189 00003180 F605A6CEFFFFFF      <1>     test byte [permaSwitch], -1
   190 00003187 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   191                              <1>     ;Else, we juggle parent PSP's
   192 00003189 50                  <1>     push rax
   193 0000318A 53                  <1>     push rbx
   194 0000318B 488B0585CEFFFF      <1>     mov rax, qword [realParent]
   195 00003192 488B1D76CEFFFF      <1>     mov rbx, qword [pspPtr]
   196 00003199 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   197 0000319D 5B                  <1>     pop rbx
   198 0000319E 58                  <1>     pop rax
   199                              <1> .exit:
   200 0000319F F9                  <1>     stc     ;Set CF to kill the task
   201 000031A0 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    19                                  
    20                                  endOfAllocNoMaster: ;End of alloc if not the master cmd
    21                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:  ;Yeet this is this is a child command processor, length 168 chars!
     3                              <1> ;Note this environment DOES NOT contain the full path to the program being launched
     4 000031A3 504154483D00        <1>     db "PATH=",0
     5 000031A9 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 000031B1 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0
     7 000031BA 442E434F4D00        <1>
     8 000031C0 202020202020202020- <1>     db (165 - ($ - masterEnv)) dup (" ")    ;Pad the environment with spaces
     8 000031C9 202020202020202020- <1>
     8 000031D2 202020202020202020- <1>
     8 000031DB 202020202020202020- <1>
     8 000031E4 202020202020202020- <1>
     8 000031ED 202020202020202020- <1>
     8 000031F6 202020202020202020- <1>
     8 000031FF 202020202020202020- <1>
     8 00003208 202020202020202020- <1>
     8 00003211 202020202020202020- <1>
     8 0000321A 202020202020202020- <1>
     8 00003223 202020202020202020- <1>
     8 0000322C 202020202020202020- <1>
     8 00003235 202020202020202020- <1>
     8 0000323E 202020202020202020- <1>
     8 00003247 20                  <1>
     9 00003248 0000                <1>     dw 0    ;End of environment marker
    22                                  endOfAlloc: ;End of alloc if the master cmd
    23                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    24                                  Segment transient align=1 follows=.data
    25                                  ;This segment always gets ejected post load
    26                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD41                <1>     int 41h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D15ED010000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD41                <1>     int 41h
    10 00000013 CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    11                              <1> .okVersion:
    12                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    13 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    14 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    15 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    16 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    17                              <1> ;Setup Int 42h, Int 43h and Int 44h
    18 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt42h] ;Preserve the original addresses
    19 0000002F 488905(2E000000)    <1>     mov qword [parentInt42], rax
    20                              <1> 
    21 00000036 488D15(F02E0000)    <1>     lea rdx, critErrorHandler
    22 0000003D 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    23 00000041 B844250000          <1>     mov eax, 2544h
    24 00000046 CD41                <1>     int 41h
    25 00000048 488D15(80310000)    <1>     lea rdx, int43h
    26 0000004F 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    27 00000053 B843250000          <1>     mov eax, 2543h
    28 00000058 CD41                <1>     int 41h
    29 0000005A 488D15(5F0E0000)    <1>     lea rdx, applicationReturn
    30 00000061 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    31 00000065 B842250000          <1>     mov eax, 2542h
    32 0000006A CD41                <1>     int 41h
    33                              <1> ;Get a pointer to DOS Sysvars
    34 0000006C B452                <1>     mov ah, 52h ;Get sysvars
    35 0000006E CD41                <1>     int 41h
    36 00000070 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    37                              <1> ;Call for simple internationalisation data
    38 00000077 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    39 0000007C CD41                <1>     int 41h
    40 0000007E 3CFF                <1>     cmp al, -1
    41 00000080 7412                <1>     je .skipSwitch
    42 00000082 8815(2C000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    43 00000088 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    44 0000008B 7507                <1>     jne .skipSwitch
    45 0000008D C605(2B000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    46                              <1> .skipSwitch:
    47 00000094 B800380000          <1>     mov eax, 3800h  ;Get current country data
    48 00000099 488D15(36000000)    <1>     lea rdx, ctryData
    49 000000A0 CD41                <1>     int 41h ;Write the data to the internal country table
    50                              <1> ;Now determine if this is the master copy of COMMAND.COM
    51                              <1> ;Check if Int 4Eh has the same address as Int 4Dh. If so, we are master.
    52 000000A2 B84E350000          <1>     mov eax, 354Eh  ;Get int 4Eh address
    53 000000A7 CD41                <1>     int 41h
    54 000000A9 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    55 000000AC B84D350000          <1>     mov eax, 354Dh  ;Get int 4Dh address
    56 000000B1 CD41                <1>     int 41h
    57 000000B3 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    58 000000B6 755C                <1>     jne .skipMaster
    59                              <1> ;Ok so we are master command.com
    60                              <1> ;Now make myself the real parent
    61 000000B8 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    62 000000BF 4C8905(17000000)    <1>     mov qword [realParent], r8
    63                              <1> ;Set master environment as mine
    64 000000C6 488D05(A3310000)    <1>     lea rax, masterEnv
    65 000000CD 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    66                              <1> ;Set current Drive in COMSPEC
    67 000000D1 B019                <1>     mov al, 19h ;Get current Drive
    68 000000D3 CD41                <1>     int 41h
    69 000000D5 0441                <1>     add al, "A"
    70 000000D7 8805(B1310000)      <1>     mov byte [masterEnv.cspec], al
    71                              <1> ;Set Int 4Eh up
    72 000000DD 488D15(FC160000)    <1>     lea rdx, int4Eh
    73 000000E4 B84E250000          <1>     mov eax, 254Eh ;Set this as Int 4Eh
    74 000000E9 CD41                <1>     int 41h
    75                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    76                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    77 000000EB 488D15(4D080000)    <1>     lea rdx, crlf
    78 000000F2 B409                <1>     mov ah, 09h
    79 000000F4 CD41                <1>     int 41h
    80 000000F6 E8(241F0000)        <1>     call time
    81 000000FB E8(5B1E0000)        <1>     call date
    82 00000100 488D15(4D080000)    <1>     lea rdx, crlf
    83 00000107 B409                <1>     mov ah, 09h
    84 00000109 CD41                <1>     int 41h
    85 0000010B 488D1D(4A320000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
    86 00000112 EB32                <1>     jmp short .printInit
    87                              <1> .skipMaster:
    88 00000114 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
    89 0000011B 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
    90 00000123 0FB605(2C000000)    <1>     movzx eax, byte [switchChar]
    91 0000012A F2AE                <1>     repne scasb
    92 0000012C 67E310              <1>     jecxz .noSwitches
    93 0000012F 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
    94 00000132 24DF                <1>     and al, 0DFh    ;Convert to UC
    95 00000134 3C50                <1>     cmp al, "P" ;Is it permanent switch?
    96 00000136 7507                <1>     jne .noSwitches
    97 00000138 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    98                              <1> .noSwitches:
    99 0000013F 488D1D(A3310000)    <1>     lea rbx, endOfAllocNoMaster  ;This is the base address to jettison
   100                              <1> .printInit:
   101                              <1> ;Finish by printing INIT string.
   102 00000146 53                  <1>     push rbx
   103 00000147 488D153A000000      <1>     lea rdx, initString
   104 0000014E B409                <1>     mov ah, 09h
   105 00000150 CD41                <1>     int 41h ;Print init string
   106 00000152 E8(3B250000)        <1>     call version.printVersionNumber
   107 00000157 488D1560000000      <1>     lea rdx, initString2
   108 0000015E B409                <1>     mov ah, 09h
   109 00000160 CD41                <1>     int 41h ;Print init string
   110 00000162 5B                  <1>     pop rbx
   111                              <1>     ;Now we add the stack to the alloc and paragraph align
   112 00000163 4881C340060000      <1>     add rbx, stackSize
   113 0000016A 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   114 00000171 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   115 00000175 48C1E304            <1>     shl rbx, 4
   116 00000179 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   117 0000017C 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   118 00000183 E9(4C0E0000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   119                              <1> ;Loader Data here
   120                              <1> initString: 
   121 00000188 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   121 00000191 66696320436F6D7075- <1>
   121 0000019A 746572205265736561- <1>
   121 000001A3 726368285229205343- <1>
   121 000001AC 502F444F5328522920- <1>
   121 000001B5 56657273696F6E2024  <1>
   122                              <1> initString2:
   123 000001BE 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   123 000001C7 202020284329436F70- <1>
   123 000001D0 797269676874205363- <1>
   123 000001D9 69656E746966696320- <1>
   123 000001E2 436F6D707574657220- <1>
   123 000001EB 526573657261636820- <1>
   123 000001F4 323032322E0D0A24    <1>
   124 000001FC 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   124 00000205 20444F532076657273- <1>
   124 0000020E 696F6E0D0A24        <1>
    27                                  
    28                                  stackSize equ 200*8    ;200 QWORD stack
    28          ------------------       info: assembly required 1+3+2 passes

