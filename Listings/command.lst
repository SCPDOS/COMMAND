     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    57 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    58                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    59                              <1> ; another, we save the number of chars to skip to that deep level).
    60                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    61                              <1> ; Only affects for SUBST drives, not JOIN
    62                              <1> ; Flags: Bit 15 set = Network drive
    63                              <1> ;        Bit 14 set = Physical drive
    64                              <1> ;        Bit 13 set = JOIN'ed drive
    65                              <1> ;        Bit 12 set = SUBST'ed drive
    66                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    67                              <1> endstruc
    68                              <1> ;CDS equates
    69                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    70                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    71                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    72                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    73                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    74                              <1> ;------------------------------------------------------------------------;
    75                              <1> ; The SFT is a way to allow applications to open file handles to files 
    76                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    77                              <1> ; under the first header, and then a second header will be linked to the 
    78                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    79                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    80                              <1> ; using the FCBS= command. Default FCBS=5.
    81                              <1> ;
    82                              <1> ; A file handle describes the file, and the location within the file that
    83                              <1> ; we are reading. The file handle can be manipulated without the file
    84                              <1> ; being in memory, thus allowing the user to access data without needing 
    85                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    86                              <1> ; accessing devices, by treating them as files with their drivers 
    87                              <1> ; responding and translating the manipulations of the file handle itself.
    88                              <1> ; Neither the driver nor the application should see or use the SFT for
    89                              <1> ; the handle, as it is subject to change (and will change when file 
    90                              <1> ; sharing provisions are included). The DOS will make requests to the 
    91                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    92                              <1> ; track of the information in the SFT entry for that handle. 
    93                              <1> ;
    94                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    95                              <1> ; can point to the same file. It all depends on what the applications 
    96                              <1> ; want to do with the File.
    97                              <1> ;
    98                              <1> ; !!!!IMPORTANT!!!!
    99                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   100                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   101                              <1> ;
   102                              <1> ;Each SFT may look like this:
   103                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   104                              <1> ;            |                |
   105                              <1> ;       wNumFiles*sft    wNumFiles*sft
   106                              <1> ;
   107                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   108                              <1> ; System FCBs.
   109                              <1> ;
   110                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   111                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   112                              <1> ;
   113                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   114                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   115                              <1> ;------------------------------------------------------------------------;
   116                              <1> struc sfth   ;System file table header
   117                              <1> ; This is the SFT header.
   118                              <1> ; This structure comes before the start of the first file in the array/table.
   119 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   120 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   121                              <1> endstruc
   122                              <1> 
   123                              <1> struc sft
   124                              <1> ;This is the file struc itself
   125 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   126 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   127 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   128 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   129 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   130 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   131 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   132 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   133 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   134 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   135 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   136 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   137 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   138 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   139 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   140 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   141 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   142 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   143 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   144                              <1> ;                           0 means no record
   145                              <1> endstruc
   146                              <1> ;Open Mode equates
   147                              <1> ;Access modes   Bits[2:0]
   148                              <1> ReadAccess      equ 0h
   149                              <1> WriteAccess     equ 1h
   150                              <1> RWAccess        equ 2h
   151                              <1> ;Bit 3 reserved 0
   152                              <1> ;Sharing modes  Bits[6:4]
   153                              <1> CompatShare     equ 0h
   154                              <1> denyRWShare     equ 10h
   155                              <1> denyWriteShare  equ 20h
   156                              <1> denyReadShare   equ 30h
   157                              <1> denyNoneShare   equ 40h
   158                              <1> netFCBShare     equ 70h
   159                              <1> noInherit       equ 80h
   160                              <1> ;Bits 8-12 reserved 0
   161                              <1> 
   162                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   163                              <1> ;Buffering on writes
   164                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   165                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   166                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   167                              <1> ;Attribute Byte
   168                              <1> readOnlyFile    equ 1h
   169                              <1> hiddenFile      equ 2h
   170                              <1> systemFile      equ 4h
   171                              <1> volumeLabel     equ 8h
   172                              <1> directoryFile   equ 10h ;Directory entry
   173                              <1> archiveFile     equ 20h
   174                              <1> ;Device Info equates
   175                              <1> ;For a block device, bits [5:0] contain the drive number
   176                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   177                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   178                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   179                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   180                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   181                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   182                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   183                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   184                              <1> devCharDev      equ 80h ;If set, it is a char device!
   185                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   186                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   187                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   188                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   189                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   190                              <1>  
   191                              <1> ;------------------------------------------------------------------------;
   192                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   193                              <1> ; to an internal buffer, and then copying it to the specified location
   194                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   195                              <1> ; another request for the same sector from the same device is made, so 
   196                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   197                              <1> ; size, selected according to the largest detected sector size during 
   198                              <1> ; the initial loadup.
   199                              <1> ;
   200                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   201                              <1> ;
   202                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   203                              <1> ;------------------------------------------------------------------------;
   204                              <1> 
   205                              <1> struc bufferHdr
   206 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   207 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   208 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   209 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   210 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   211 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   212 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   213 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   214 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   215                              <1>     .dataarea:             ;Points to the start of the data area
   216                              <1> endstruc
   217                              <1> ;Buffer Flag equates
   218                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   219                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   220                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   221                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   222                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   223                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   224                              <1> ;Note! A buffer is marked as referenced only when the application 
   225                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   226                              <1> ;------------------------------------------------------------------------;
   227                              <1> ; Memory control block for each memory arena
   228                              <1> ;------------------------------------------------------------------------;
   229                              <1> struc mcb
   230 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   231 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   232 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   233 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   234                              <1>     .program:
   235                              <1> endstruc
   236                              <1> ;MCB equates
   237                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   238                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   239                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   240                              <1> mcbMarkCtn      equ "M"
   241                              <1> mcbMarkEnd      equ "Z"
   242                              <1> 
   243                              <1> memFirstFit     equ 0   ;First free block goes to application
   244                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   245                              <1> memLastFit      equ 2   ;Last free block goes to application
   246                              <1> 
   247                              <1> ;Owner = Para aligned address => Owning application PSP
   248                              <1> ;...To consider...
   249                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   250                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   251                              <1> ;------------------------------------------------------------------------;
   252                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   253                              <1> ; following order, thus allowing for return values to be placed in the 
   254                              <1> ; registers by accessing the caller register stack frame.
   255                              <1> ;------------------------------------------------------------------------;
   256                              <1> struc callerFrame
   257 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   258 00000008 ????????????????    <1>     .rbx    resq 1    
   259 00000010 ????????????????    <1>     .rcx    resq 1
   260 00000018 ????????????????    <1>     .rdx    resq 1
   261 00000020 ????????????????    <1>     .rsi    resq 1
   262 00000028 ????????????????    <1>     .rdi    resq 1
   263 00000030 ????????????????    <1>     .rbp    resq 1
   264 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   265 00000040 ????????????????    <1>     .r9     resq 1
   266                              <1> ;Pushed by Processor when invoked via Interrupt
   267 00000048 ????????????????    <1>     .rip    resq 1
   268 00000050 ????????????????    <1>     .cs     resq 1
   269 00000058 ????????????????    <1>     .flags  resq 1
   270                              <1> endstruc
   271                              <1> 
   272                              <1> struc dpl
   273                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   274                              <1> ; server calls
   275 00000000 ????????????????    <1>     .rax    resq 1
   276 00000008 ????????????????    <1>     .rbx    resq 1
   277 00000010 ????????????????    <1>     .rcx    resq 1
   278 00000018 ????????????????    <1>     .rdx    resq 1
   279 00000020 ????????????????    <1>     .rsi    resq 1
   280 00000028 ????????????????    <1>     .rdi    resq 1
   281 00000030 ????????????????    <1>     .r8     resq 1
   282 00000038 ????????????????    <1>     .r9     resq 1
   283 00000040 ????????????????    <1>     .align  resq 1
   284 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   285 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   286                              <1> endstruc
   287                              <1> 
   288                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   289 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   290 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   291 00000010 ????????????????    <1>     .newSFTVal      resq 1
   292 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   293 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   294 00000028 ????????????????    <1>     .newLastdrive   resq 1
   295 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   296 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   297 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   298 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   299 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   300 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   301 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   302                              <1> endstruc
   303                              <1> 
   304                              <1> struc filename
   305                              <1> ;8.3 File name struct
   306 00000000 ????????????????    <1>     .fName  resb 8
   307 00000008 ??????              <1>     .fExt   resb 3
   308                              <1> endstruc
   309                              <1> 
   310                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   311 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   312 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   313 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   314 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   315 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   316 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   317 00000016 ????                <1>     .fileTime   resw 1  ;File time
   318 00000018 ????                <1>     .fileDate   resw 1  ;File date
   319 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   320 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   321                              <1> endstruc
   322                              <1> 
   323                              <1> struc psp
   324 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   325 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   326 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   327 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   328 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   329 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   330 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   331                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   332 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   333 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   334 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   335 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   336 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   337 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   338 0000005B ??                  <1>                 resb 1  ;Reserved byte
   339                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   340                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   341                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   342                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   343                              <1> ; always used and xtraHdlSz.
   344                              <1> ;Will need to add two SYSCALLS for future expansion:
   345                              <1> ;       1) Get Program Environment Pointer
   346                              <1> ;       2) Get Command Line arguments pointer
   347                              <1> ;The below are in the same place as in DOS.
   348                              <1>     .cmdLineArgPtr: ;Symbol for future use
   349 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   350 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   351                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   352 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   353 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   354                              <1> endstruc
   355                              <1> 
   356                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   357                              <1> 
   358                              <1> struc clkStruc
   359 00000000 ????                <1>     .dateWord   resw 1
   360 00000002 ??                  <1>     .minutes    resb 1
   361 00000003 ??                  <1>     .hours      resb 1
   362 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   363 00000005 ??                  <1>     .seconds    resb 1
   364                              <1> endstruc
   365                              <1> 
   366                              <1> struc countryStruc
   367 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   368                              <1>                         ;0 = month day year hh:mm:ss
   369                              <1>                         ;1 = day month year hh:mm:ss
   370                              <1>                         ;2 = year month day hh:mm:ss
   371 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   372 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   373 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   374 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   375 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   376 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   377                              <1>                         ;0 = Symbol leads, without space
   378                              <1>                         ;1 = Symbol follows, without space
   379                              <1>                         ;2 = Symbol leads, one space
   380                              <1>                         ;3 = Symbol follows, one space
   381                              <1>                         ;4 = Symbol replace decimal separator
   382 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   383 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   384 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   385 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   386 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   387                              <1> endstruc
   388                              <1> 
   389                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   390                              <1> ;for a space of 64Gb
   391                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   392                              <1> dosLowBase  equ 600h    ;Low load address
   393                              <1> 
   394                              <1> ;Critical Error AH bitfield equates
   395                              <1> critRead    equ 0h
   396                              <1> critWrite   equ 1h
   397                              <1> critDOS     equ 0h
   398                              <1> critFAT     equ 2h
   399                              <1> critDir     equ 4h
   400                              <1> critData    equ 6h
   401                              <1> critFailOK  equ 8h
   402                              <1> critRetryOK equ 10h
   403                              <1> critIgnorOK equ 20h
   404                              <1> critCharDev equ 80h
   405                              <1> 
   406                              <1> critIgnore  equ 0
   407                              <1> critRetry   equ 1
   408                              <1> critAbort   equ 2
   409                              <1> critFail    equ 3
   410                              <1> 
   411                              <1> ;MISC ASCII control chars
   412                              <1> NUL equ 00h ;^@         | ASCII Null
   413                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   414                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   415                              <1> BEL equ 07h ;^G         | ASCII Bell
   416                              <1> BSP equ 08h ;^H         | ASCII Backspace
   417                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   418                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   419                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   420                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   421                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   422                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   423                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   424                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   425                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   426                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   427                              <1> SPC equ 20h ;Printable  | ASCII Space
   428                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   429                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   430                              <1> 
   431                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   432                              <1> ;Extended Ascii Codes
   433                              <1> eF1     equ 3Bh ;F1 second byte
   434                              <1> eF2     equ 3Ch ;F2 second byte
   435                              <1> eF3     equ 3Dh ;F3 second byte
   436                              <1> eF4     equ 3Eh ;F4 second byte
   437                              <1> eF5     equ 3Fh ;F5 second byte
   438                              <1> eF6     equ 40h ;F6 second byte
   439                              <1> eF7     equ 41h ;F7 second byte
   440                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   441                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   442                              <1> eIns    equ 52h ;Insert second byte
   443                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   444                              <1> 
   445                              <1> ;Default Configuration for the system
   446                              <1> 
   447                              <1> buffersDefault  equ 30
   448                              <1> filesDefault    equ 20
   449                              <1> fcbsDefault     equ 4
   450                              <1> safeFcbsDeflt   equ 0
   451                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on INT 44h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdLineCnt  equ psp.parmList
    19                              <1> cmdLine     equ psp.progTail
    20                              <1> 
    21                              <1> 
    22                              <1> ;Struct Declarations
    23                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    24 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    25 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    26 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    27 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    28 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc execProg  ;For use with EXEC-ing a child task
    32 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    33 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    34 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    35 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    36                              <1> endstruc
    37                              <1> 
    38                              <1> ;Directory attribute equates
    39                              <1>     dirReadOnly     equ 01h
    40                              <1>     dirHidden       equ 02h
    41                              <1>     dirSystem       equ 04h
    42                              <1>     dirVolumeID     equ 08h
    43                              <1>     dirDirectory    equ 10h
    44                              <1>     dirArchive      equ 20h
    45                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    46                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    47                              <1>     ;If any of the three bits are set, then ALL three bits are set
    48                              <1>     ; in addition to whatever the user passed to search for.
    49                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    50                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    11 0000002B 5C                  <1> pathSep     db "\"  ;Default path sep
    12 0000002C 2F                  <1> switchChar  db "/"  ;Default switch char
    13 0000002D 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    14 0000002E 0000000000000000    <1> parentInt42 dq 0    ;Stores the parent values to restore upon exiting if it can
    15                              <1> ;Static strings, not used in command line parsing
    16 00000036 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    16 0000003F 000000000000000000- <1>
    16 00000048 000000000000000000- <1>
    16 00000051 000000000000000000- <1>
    16 0000005A 0000                <1>
    17 0000005C 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    17 00000065 000000000000000000- <1>
    17 0000006E 000000000000000000- <1>
    17 00000077 000000000000000000- <1>
    17 00000080 000000000000000000- <1>
    17 00000089 000000000000000000- <1>
    17 00000092 000000000000000000- <1>
    17 0000009B 00000000            <1>
    18                              <1> 
    19                              <1> 
    20                              <1> cmdLineStatePtr:
    21 0000009F 0000000000000000    <1> cmdStartPtr dq 0    ;Ptr to the first char for this command (may be a space)
    22 000000A7 0000000000000000    <1> cmdEndPtr   dq 0    ;Ptr to the terminating char for this command (0Dh or |)
    23 000000AF 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    24 000000B0 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    25 000000B2 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    26                              <1> 
    27                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    28                              <1> ;These variables are valid for a SINGLE command in a command line
    29 000000B4 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    30 000000B6 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    31 000000B7 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    32                              <1> ;                    If 2, we are redirecting output to a file, by appending
    33 000000B8 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    34 000000BA FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    35                              <1> 
    36 000000BC 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    37 000000BD 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    38 000000BE 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    39                              <1> 
    40 000000BF 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    41 000000C0 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    42 000000C1 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    43                              <1> 
    44                              <1> cmdStateL equ $ - cmdStatePtr
    45                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    46                              <1> 
    47                              <1> ;Structs and strings
    48                              <1> 
    49 000000C2 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    49 000000CB 00000000000000      <1>
    50 000000D2 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    50 000000DB 000000000000000000- <1>
    50 000000E4 000000000000000000- <1>
    50 000000ED 000000000000000000- <1>
    50 000000F6 00000000000000      <1>
    51                              <1> 
    52 000000FD 000000000000000000- <1> launchBlock db execProg_size dup (0)
    52 00000106 000000000000000000- <1>
    52 0000010F 000000000000000000- <1>
    52 00000118 0000000000          <1>
    53                              <1> 
    54 0000011D 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    54 00000126 000000000000000000- <1>
    54 0000012F 000000000000000000- <1>
    54 00000138 000000000000000000- <1>
    54 00000141 000000000000000000- <1>
    54 0000014A 000000000000000000- <1>
    54 00000153 000000000000000000- <1>
    54 0000015C 000000000000000000- <1>
    54 00000165 000000000000000000- <1>
    54 0000016E 000000000000000000- <1>
    54 00000177 000000000000000000- <1>
    54 00000180 000000000000000000- <1>
    54 00000189 000000000000000000- <1>
    54 00000192 000000000000000000- <1>
    54 0000019B 0000                <1>
    55 0000019D 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    55 000001A6 000000000000000000- <1>
    55 000001AF 000000000000000000- <1>
    55 000001B8 000000000000000000- <1>
    55 000001C1 000000000000000000- <1>
    55 000001CA 000000000000000000- <1>
    55 000001D3 000000000000000000- <1>
    55 000001DC 000000000000000000- <1>
    55 000001E5 000000000000000000- <1>
    55 000001EE 000000000000000000- <1>
    55 000001F7 000000000000000000- <1>
    55 00000200 000000000000000000- <1>
    55 00000209 000000000000000000- <1>
    55 00000212 000000000000000000- <1>
    55 0000021B 0000                <1>
    56 0000021D 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    56 00000226 000000000000000000- <1>
    56 0000022F 000000000000000000- <1>
    56 00000238 000000000000000000- <1>
    56 00000241 000000000000000000- <1>
    56 0000024A 000000000000000000- <1>
    56 00000253 000000000000000000- <1>
    56 0000025C 000000000000000000- <1>
    56 00000265 00000000000000      <1>
    57                              <1> 
    58 0000026C 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    58 00000275 0000                <1>
    59 00000277 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    59 00000280 00000000            <1>
    60 00000284 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    60 0000028D 0000000000          <1>
    61                              <1> 
    62 00000292 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    62 0000029B 000000000000000000- <1>
    62 000002A4 000000000000000000- <1>
    62 000002AD 000000000000000000- <1>
    62 000002B6 000000000000000000- <1>
    62 000002BF 000000000000000000- <1>
    62 000002C8 000000000000000000- <1>
    62 000002D1 000000000000000000- <1>
    62 000002DA 00000000000000      <1>
    63 000002E1 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    63 000002EA 000000000000000000- <1>
    63 000002F3 000000000000000000- <1>
    63 000002FC 000000000000000000- <1>
    63 00000305 000000000000000000- <1>
    63 0000030E 000000000000000000- <1>
    63 00000317 000000000000000000- <1>
    63 00000320 000000000000000000- <1>
    63 00000329 00000000000000      <1>
    64                              <1> 
    65                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    66 00000330 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    66 00000339 000000000000000000- <1>
    66 00000342 000000000000000000- <1>
    66 0000034B 000000000000000000- <1>
    66 00000354 000000000000000000- <1>
    66 0000035D 000000000000000000- <1>
    66 00000366 000000000000000000- <1>
    66 0000036F 000000000000000000- <1>
    66 00000378 00000000000000      <1>
    67 0000037F 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    67 00000388 000000000000000000- <1>
    67 00000391 000000000000000000- <1>
    67 0000039A 000000000000000000- <1>
    67 000003A3 000000000000000000- <1>
    67 000003AC 000000000000000000- <1>
    67 000003B5 000000000000000000- <1>
    67 000003BE 000000000000000000- <1>
    67 000003C7 00000000000000      <1>
    68                              <1> 
    69 000003CE 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    70 000003D6 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    71                              <1> 
    72 000003DE 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    72 000003E7 000000000000000000- <1>
    72 000003F0 000000000000000000- <1>
    72 000003F9 000000000000000000- <1>
    72 00000402 000000000000000000- <1>
    72 0000040B 000000000000000000- <1>
    72 00000414 000000000000000000- <1>
    72 0000041D 000000000000000000- <1>
    72 00000426 000000000000000000- <1>
    72 0000042F 000000000000000000- <1>
    72 00000438 000000000000000000- <1>
    72 00000441 000000000000000000- <1>
    72 0000044A 000000000000000000- <1>
    72 00000453 000000000000000000- <1>
    72 0000045C 0000                <1>
    73                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    74                              <1> ; users overtyping
    75                              <1> 
    76                              <1> ;Internal Function vars
    77                              <1> ;Dir Vars
    78 0000045E 00                  <1> dirPrnType  db 0    ;Print type.    Bit[0] set => /W or /w specified
    79                              <1> ;                                   Bit[1] set => /P or /p specified
    80 0000045F 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    81 00000460 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    82 00000461 00                  <1> dirDrv      db 0    ;0 based drive number to use
    83 00000462 000000000000000000- <1> dirOldCWD   db cmdBufferL dup (0)   ;Space for CWD and any overspill 
    83 0000046B 000000000000000000- <1>
    83 00000474 000000000000000000- <1>
    83 0000047D 000000000000000000- <1>
    83 00000486 000000000000000000- <1>
    83 0000048F 000000000000000000- <1>
    83 00000498 000000000000000000- <1>
    83 000004A1 000000000000000000- <1>
    83 000004AA 000000000000000000- <1>
    83 000004B3 000000000000000000- <1>
    83 000004BC 000000000000000000- <1>
    83 000004C5 000000000000000000- <1>
    83 000004CE 000000000000000000- <1>
    83 000004D7 000000000000000000- <1>
    83 000004E0 0000                <1>
    84 000004E2 000000000000000000- <1> dirPathArg  db cmdBufferL dup (0)   ;Copy the pathspec argument here if any
    84 000004EB 000000000000000000- <1>
    84 000004F4 000000000000000000- <1>
    84 000004FD 000000000000000000- <1>
    84 00000506 000000000000000000- <1>
    84 0000050F 000000000000000000- <1>
    84 00000518 000000000000000000- <1>
    84 00000521 000000000000000000- <1>
    84 0000052A 000000000000000000- <1>
    84 00000533 000000000000000000- <1>
    84 0000053C 000000000000000000- <1>
    84 00000545 000000000000000000- <1>
    84 0000054E 000000000000000000- <1>
    84 00000557 000000000000000000- <1>
    84 00000560 0000                <1>
    85 00000562 3F3F3F3F3F3F3F3F    <1> dirSrchPat  db 8 dup ("?")    ;We copy the search pattern here
    86 0000056A 2E                  <1> dirSPExt    db "."
    87 0000056B 3F3F3F              <1>             db 3 dup ("?")
    88                              <1> 
    89                              <1> ;Volume Vars
    90 0000056E 000000000000000000- <1> volLblSpc   db 13 dup (0)
    90 00000577 00000000            <1>
    91 0000057B 00                  <1> volPathBuf  db 0 ;Drive LETTER goes here
    92 0000057C 3A5C2A2E2A00        <1>             db ":\*.*",0  ;This remains to build X:\*.*,0 for vol label search
    93                              <1> 
    94                              <1> ;Time/Date vars
    95 00000582 00                  <1> td1 db 0    ;Minutes/Year
    96 00000583 00                  <1> td2 db 0    ;Hours/Zero
    97 00000584 00                  <1> td3 db 0    ;Hundredths/Day
    98 00000585 00                  <1> td4 db 0    ;Seconds/Month
    99                              <1> 
   100                              <1> ;Rename/Copy Buffers
   101 00000586 000000000000000000- <1> sourcePath  db cmdBufferL dup (0)
   101 0000058F 000000000000000000- <1>
   101 00000598 000000000000000000- <1>
   101 000005A1 000000000000000000- <1>
   101 000005AA 000000000000000000- <1>
   101 000005B3 000000000000000000- <1>
   101 000005BC 000000000000000000- <1>
   101 000005C5 000000000000000000- <1>
   101 000005CE 000000000000000000- <1>
   101 000005D7 000000000000000000- <1>
   101 000005E0 000000000000000000- <1>
   101 000005E9 000000000000000000- <1>
   101 000005F2 000000000000000000- <1>
   101 000005FB 000000000000000000- <1>
   101 00000604 0000                <1>
   102 00000606 000000000000000000- <1> destPath    db cmdBufferL dup (0)
   102 0000060F 000000000000000000- <1>
   102 00000618 000000000000000000- <1>
   102 00000621 000000000000000000- <1>
   102 0000062A 000000000000000000- <1>
   102 00000633 000000000000000000- <1>
   102 0000063C 000000000000000000- <1>
   102 00000645 000000000000000000- <1>
   102 0000064E 000000000000000000- <1>
   102 00000657 000000000000000000- <1>
   102 00000660 000000000000000000- <1>
   102 00000669 000000000000000000- <1>
   102 00000672 000000000000000000- <1>
   102 0000067B 000000000000000000- <1>
   102 00000684 0000                <1>
   103                              <1> ;Copy Handles
   104 00000686 FFFF                <1> sourceHdl   dw -1
   105 00000688 FFFF                <1> destHdl     dw -1
   106 0000068A 0000                <1> srcHdlInfo  dw 0 ;Used to save the handle device info (bit 7 Set -> Char dev)
   107                              <1> 
   108 0000068C 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   108 00000695 000000000000000000- <1>
   108 0000069E 000000000000000000- <1>
   108 000006A7 000000000000000000- <1>
   108 000006B0 000000000000000000- <1>
   108 000006B9 000000000000000000- <1>
   108 000006C2 000000000000000000- <1>
   108 000006CB 000000000000000000- <1>
   108 000006D4 000000000000000000- <1>
   108 000006DD 000000000000000000- <1>
   108 000006E6 000000000000000000- <1>
   108 000006EF 000000000000000000- <1>
   108 000006F8 000000000000000000- <1>
   108 00000701 000000000000000000- <1>
   108 0000070A 0000                <1>
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 0000070C 03444952            <1>     db 3, "DIR"
     8 00000710 0E17                <1>     dw dir - startLbl
     9                              <1> 
    10 00000712 024344              <1>     db 2, "CD"
    11 00000715 AC1A                <1>     dw chdir - startLbl
    12                              <1> 
    13 00000717 054348444952        <1>     db 5, "CHDIR"
    14 0000071D AC1A                <1>     dw chdir - startLbl
    15                              <1> 
    16 0000071F 024D44              <1>     db 2, "MD"
    17 00000722 541B                <1>     dw mkdir - startLbl
    18                              <1> 
    19 00000724 054D4B444952        <1>     db 5, "MKDIR"
    20 0000072A 541B                <1>     dw mkdir - startLbl
    21                              <1> 
    22 0000072C 025244              <1>     db 2, "RD"
    23 0000072F A01B                <1>     dw rmdir - startLbl
    24                              <1> 
    25 00000731 05524D444952        <1>     db 5, "RMDIR"
    26 00000737 A01B                <1>     dw rmdir - startLbl
    27                              <1> 
    28 00000739 0344454C            <1>     db 3, "DEL"
    29 0000073D CA1D                <1>     dw erase - startLbl
    30                              <1> 
    31 0000073F 054552415345        <1>     db 5, "ERASE"
    32 00000745 CA1D                <1>     dw erase - startLbl
    33                              <1> 
    34 00000747 0444415445          <1>     db 4, "DATE"
    35 0000074C F31D                <1>     dw date - startLbl
    36                              <1> 
    37 0000074E 0454494D45          <1>     db 4, "TIME"
    38 00000753 B91E                <1>     dw time - startLbl
    39                              <1> 
    40 00000755 04434F5059          <1>     db 4, "COPY"
    41 0000075A EC1B                <1>     dw copy - startLbl
    42                              <1> 
    43 0000075C 0443545459          <1>     db 4, "CTTY"
    44 00000761 511F                <1>     dw ctty - startLbl
    45                              <1> 
    46 00000763 03434C53            <1>     db 3, "CLS"
    47 00000767 EC1F                <1>     dw cls - startLbl
    48                              <1> 
    49 00000769 05425245414B        <1>     db 5, "BREAK"
    50 0000076F 5E20                <1>     dw break - startLbl
    51                              <1> 
    52 00000771 06564552494659      <1>     db 6, "VERIFY"
    53 00000778 DF20                <1>     dw verify - startLbl
    54                              <1> 
    55 0000077A 0652454E414D45      <1>     db 6, "RENAME"
    56 00000781 5C21                <1>     dw rename - startLbl
    57                              <1> 
    58 00000783 044D4F5645          <1>     db 4, "MOVE"
    59 00000788 5C21                <1>     dw rename - startLbl
    60                              <1>     
    61 0000078A 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 00000793 6422                <1>     dw truename - startLbl
    63                              <1> 
    64 00000795 03564552            <1>     db 3, "VER"
    65 00000799 AD23                <1>     dw version - startLbl
    66                              <1> 
    67 0000079B 03564F4C            <1>     db 3, "VOL"
    68 0000079F 9A22                <1>     dw volume - startLbl
    69                              <1> 
    70 000007A1 034D454D            <1>     db 3, "MEM"
    71 000007A5 F123                <1>     dw memory - startLbl
    72                              <1> 
    73 000007A7 0445584954          <1>     db 4, "EXIT"
    74 000007AC D325                <1>     dw exit - startLbl
    75                              <1> 
    76 000007AE 0454595045          <1>     db 4, "TYPE"
    77 000007B3 3B25                <1>     dw type - startLbl
    78                              <1> 
    79 000007B5 05544F554348        <1>     db 5, "TOUCH"
    80 000007BB 2922                <1>     dw touch - startLbl
    81                              <1> 
    82 000007BD FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 000007BE 0D0A24              <1> crlf    db  CR,LF,"$"
     3 000007C1 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 000007C6 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 000007CF 696C65206D69737369- <1>
     4 000007D8 6E670D0A24          <1>
     5 000007DD 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 000007E6 6469736B2077697468- <1>
     5 000007EF 206261746368206669- <1>
     5 000007F8 6C65                <1>
     6 000007FA 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 00000803 737320616E79206B65- <1>
     6 0000080C 79207768656E207265- <1>
     6 00000815 6164790D0A24        <1>
     7 0000081B 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 00000824 6E64206F722066696C- <1>
     7 0000082D 65206E616D650D0A24  <1>
     8 00000836 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 0000083F 2066696C65206E616D- <1>
     8 00000848 65206F7220          <1>
     9 0000084D 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 00000856 666F756E640D0A24    <1>
    10 0000085E 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    10 00000867 656E74206469736B20- <1>
    10 00000870 73706163650D0A24    <1>
    11 00000878 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 00000881 7669726F6E6D656E74- <1>
    11 0000088A 2073706163650D0A24  <1>
    12 00000893 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 0000089C 74696F6E206572726F- <1>
    12 000008A5 720D0A24            <1>
    13 000008A9 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 000008B2 6F7420626520636F70- <1>
    13 000008BB 696564206F6E746F20- <1>
    13 000008C4 697473656C660D0A24  <1>
    14 000008CD 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 000008D6 662064657374696E61- <1>
    14 000008DF 74696F6E206C6F7374- <1>
    14 000008E8 206265666F72652063- <1>
    14 000008F1 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 000008F7 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 00000900 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 00000909 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 00000912 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 00000913 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 0000091C 65650D0A24          <1>
    21 00000921 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 0000092A 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 00000933 726976652073706563- <1>
    23 0000093C 696669636174696F6E- <1>
    23 00000945 0D0A24              <1>
    24 00000948 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 00000951 6B6579207768656E20- <1>
    24 0000095A 7265616479202E202E- <1>
    24 00000963 202E2024            <1>
    25 00000967 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 00000970 6172616D657465720D- <1>
    25 00000979 0A24                <1>
    26                              <1> 
    27 0000097B 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 00000984 576564546875467269- <1>
    27 0000098D 536174              <1>
    28 00000990 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 00000999 206461746524        <1>
    29 0000099F 43757272656E742064- <1> curDate db  "Current date is $"
    29 000009A8 6174652069732024    <1>
    30 000009B0 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 000009B9 657720646174652024  <1>
    31 000009C2 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 000009CB 293A2024            <1>
    32 000009CF 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 000009D8 293A2024            <1>
    33 000009DC 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 000009E5 293A2024            <1>
    34 000009E9 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 000009F2 2074696D6524        <1>
    35 000009F8 43757272656E742074- <1> curTime db  "Current time is $"
    35 00000A01 696D652069732024    <1>
    36 00000A09 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 00000A12 65772074696D653A20- <1>
    36 00000A1B 24                  <1>
    37                              <1> 
    38 00000A1C 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000A25 7572652028592F4E29- <1>
    38 00000A2E 3F2024              <1>
    39                              <1> 
    40 00000A31 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000A3A 56657273696F6E2024  <1>
    41                              <1> 
    42 00000A43 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000A4C 6E2064726976652024  <1>
    43 00000A55 2069732024          <1> volOk   db " is $"
    44 00000A5A 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000A63 6162656C24          <1>
    45                              <1> 
    46 00000A68 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000A71 69726563746F72790D- <1>
    46 00000A7A 0A24                <1>
    47 00000A7C 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000A85 206372656174652064- <1>
    47 00000A8E 69726563746F72790D- <1>
    47 00000A97 0A24                <1>
    48 00000A99 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000AA2 6174682C206E6F7420- <1>
    48 00000AAB 6469726563746F7279- <1>
    48 00000AB4 2C0D0A              <1>
    49 00000AB7 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000AC0 6F7279206E6F742065- <1>
    49 00000AC9 6D7074790D0A24      <1>
    50 00000AD0 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000AD9 79206F66202024      <1>
    51 00000AE0 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000AE9 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    52 00000AF2 7269766520696E2073- <1>
    52 00000AFB 656172636820706174- <1>
    52 00000B04 680D0A24            <1>
    53 00000B08 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    53 00000B11 65766963650D0A24    <1>
    54 00000B19 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    54 00000B22 20666F756E640D0A24  <1>
    55 00000B2B 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    55 00000B34 726F720D0A24        <1>
    56 00000B3A 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    56 00000B43 6F74206265206E6573- <1>
    56 00000B4C 7465640D0A24        <1>
    57 00000B52 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    57 00000B5B 6174652066696C6520- <1>
    57 00000B64 6572726F7220647572- <1>
    57 00000B6D 696E6720706970650D- <1>
    57 00000B76 0A24                <1>
    58 00000B78 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    58 00000B81 2062696E6172792072- <1>
    58 00000B8A 656164732066726F6D- <1>
    58 00000B93 206120646576696365- <1>
    58 00000B9C 0D0A24              <1>
    59 00000B9F 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    60 00000BA5 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    61 00000BAA 425245414B20697320- <1> breakIs db "BREAK is $"
    61 00000BB3 24                  <1>
    62 00000BB4 564552494659206973- <1> verifyIs    db "VERIFY is $"
    62 00000BBD 2024                <1>
    63 00000BBF 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    64 00000BC8 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    64 00000BD1 617468206F72206669- <1>
    64 00000BDA 6C65206E616D650D0A- <1>
    64 00000BE3 24                  <1>
    65 00000BE4 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    65 00000BED 756D626572206F6620- <1>
    65 00000BF6 706172616D65746572- <1>
    65 00000BFF 730D0A24            <1>
    66 00000C03 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    66 00000C0C 74696E6720746F2064- <1>
    66 00000C15 6576696365          <1>
    67 00000C1A 08200800            <1> backSpace   db BSP," ",BSP,NUL
    68                              <1> 
    69 00000C1E 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    69 00000C27 20202020202020546F- <1>
    69 00000C30 74616C207379737465- <1>
    69 00000C39 6D206D656D6F72793A- <1>
    69 00000C42 2024                <1>
    70 00000C44 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    70 00000C4D 20202020202020204D- <1>
    70 00000C56 656D6F727920757365- <1>
    70 00000C5F 6420627920444F533A- <1>
    70 00000C68 2024                <1>
    71 00000C6A 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    71 00000C73 656D6F727920757365- <1>
    71 00000C7C 64206279206170706C- <1>
    71 00000C85 69636174696F6E733A- <1>
    71 00000C8E 2024                <1>
    72 00000C90 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    72 00000C99 656D6F727920726573- <1>
    72 00000CA2 657276656420627920- <1>
    72 00000CAB 68617264776172653A- <1>
    72 00000CB4 2024                <1>
    73 00000CB6 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    73 00000CBF 202020202020202020- <1>
    73 00000CC8 2020202020204D656D- <1>
    73 00000CD1 6F727920667265653A- <1>
    73 00000CDA 2024                <1>
    74 00000CDC 20627974657324      <1> memByte db " bytes$"
    75 00000CE3 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    75 00000CEC 6F7420417373657274- <1>
    75 00000CF5 61696E20444F532045- <1>
    75 00000CFE 6E74727920506F696E- <1>
    75 00000D07 7424                <1>
    76 00000D09 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    76 00000D12 416C6C6F636174696F- <1>
    76 00000D1B 6E204572726F7224    <1>
    77 00000D23 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    77 00000D2C 4572726F7224        <1>
    78 00000D32 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    78 00000D3B 68616C74656424      <1>
    79                              <1> 
    80 00000D42 556E61626C6520746F- <1> touchErr db "Unable to create file",CR,LF,"$"
    80 00000D4B 206372656174652066- <1>
    80 00000D54 696C650D0A24        <1>
    81 00000D5A 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    81 00000D63 206372656174652070- <1>
    81 00000D6C 6970650D0A          <1>
    82                              <1> pipeErrMsgL equ $ - pipeErrMsg
    83 00000D71 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    83 00000D7A 6F6E206572726F720D- <1>
    83 00000D83 0A                  <1>
    84                              <1> redirErrMsgL   equ $ - redirErrMsg
    85                              <1> 
    86 00000D84 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    87 00000D88 2020202024          <1> fourSpc  db "    $"
    88 00000D8D 20202024            <1> threeSpc db "   $"
    89 00000D91 202024              <1> twoSpc   db "  $"
    90                              <1> 
    91 00000D94 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    91 00000D9D 696679204F4E206F72- <1>
    91 00000DA6 204F46460D0A24      <1>
    92 00000DAD 504154483D          <1> pathEVar db "PATH="
    93 00000DB2 50524F4D50543D      <1> promptEVar  db "PROMPT="
    94                              <1> 
    95                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    96                              <1> ; handles and reopen CON
    97 00000DB9 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00000DBD 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00000DC0 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00000DC4 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 00000DC7 B44A                <1>     mov ah, 4Ah ;Realloc
     9 00000DC9 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00000DCC CD41                <1>     int 41h
    11 00000DCE EB68                <1>     jmp short commandMain
    12                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    13 00000DD0 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    14 00000DD5 CD41                <1>     int 41h
    15 00000DD7 6689052FF2FFFF      <1>     mov word [returnCode], ax
    16                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    17 00000DDE 488D15411F0000      <1>     lea rdx, critErrorHandler
    18 00000DE5 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    19 00000DE9 B844250000          <1>     mov eax, 2544h
    20 00000DEE CD41                <1>     int 41h
    21 00000DF0 488D15BF210000      <1>     lea rdx, int43h
    22 00000DF7 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    23 00000DFB B843250000          <1>     mov eax, 2543h
    24 00000E00 CD41                <1>     int 41h
    25 00000E02 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    26 00000E09 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    27 00000E0D B842250000          <1>     mov eax, 2542h
    28 00000E12 CD41                <1>     int 41h
    29 00000E14 F60594F2FFFFFF      <1>     test byte [pipeFlag], -1
    30 00000E1B 7576                <1>     jnz commandMain.pipeProceed ;Skip the handle closing when pipe active
    31 00000E1D E8BC040000          <1>     call cleanUpRedir   ;Clean up redirection once we are done
    32                              <1> ;Close all handles from 5->MAX
    33 00000E22 0FB70DFEF1FFFF      <1>     movzx ecx, word [numHdls]
    34 00000E29 BB05000000          <1>     mov ebx, 5
    35                              <1> .handleClose:
    36 00000E2E B43E                <1>     mov ah, 3Eh ;File close
    37 00000E30 CD41                <1>     int 41h
    38 00000E32 FFC3                <1>     inc ebx ;Goto next file
    39 00000E34 39CB                <1>     cmp ebx, ecx
    40 00000E36 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    41                              <1> commandMain:
    42                              <1> ;Setup Commandline
    43 00000E38 488B25C6F1FFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    44 00000E3F FC                  <1>     cld ;Ensure stringops are done the right way
    45 00000E40 C605D6F2FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    46                              <1> .inputMain:
    47 00000E47 E87A1C0000          <1>     call clearCommandLineState
    48 00000E4C E801190000          <1>     call printCRLF
    49 00000E51 E83E1C0000          <1>     call printPrompt
    50                              <1> 
    51 00000E56 488D15C0F2FFFF      <1>     lea rdx, inBuffer
    52 00000E5D B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    53 00000E62 CD41                <1>     int 41h
    54 00000E64 E8E9180000          <1>     call printCRLF  ;Note we have accepted input
    55                              <1> 
    56                              <1> ;First check we had something typed in of length greater than 1
    57                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    58 00000E69 803DAEF2FFFF01      <1>     cmp byte [inBuffer + 1], 1  ;Check input length valid
    59 00000E70 7444                <1>     je .dfltErrExit
    60 00000E72 72D3                <1>     jb .inputMain
    61                              <1>     ;Copy over the input text
    62 00000E74 488D35A2F2FFFF      <1>     lea rsi, inBuffer
    63 00000E7B 488D3D1BF3FFFF      <1>     lea rdi, cmdBuffer
    64 00000E82 B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    65 00000E87 F3A4                <1>     rep movsb
    66                              <1> .pipeLoop:
    67 00000E89 E838000000          <1>     call parseInput
    68 00000E8E E8CB010000          <1>     call doCommandLine
    69                              <1> .pipeProceed:
    70 00000E93 E846040000          <1>     call cleanUpRedir
    71 00000E98 488B0508F2FFFF      <1>     mov rax, qword [cmdEndPtr]
    72 00000E9F 488905F9F1FFFF      <1>     mov qword [cmdStartPtr], rax
    73 00000EA6 F60502F2FFFFFF      <1>     test byte [pipeFlag], -1  ;If we have any pipes active, we proceed here
    74 00000EAD 7498                <1>     jz .inputMain
    75 00000EAF E8F71B0000          <1>     call clearCommandState  ;Else, clear the command state and start again
    76 00000EB4 EBD3                <1>     jmp short .pipeLoop
    77                              <1> .dfltErrExit:
    78 00000EB6 488D155EF9FFFF      <1>     lea rdx, badCmd
    79 00000EBD B409                <1>     mov ah, 09h
    80 00000EBF CD41                <1>     int 41h
    81 00000EC1 E981FFFFFF          <1>     jmp .inputMain
    82                              <1> 
    83                              <1> parseInput:
    84                              <1> ;EndOff is set up before entering this part
    85                              <1> ;Copies a nicely formatted version of the input command line
    86                              <1> ; without any redirections to psp.dta
    87                              <1>     ;lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
    88 00000EC6 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    89 00000ECD 488B35CBF1FFFF      <1>     mov rsi, qword [cmdStartPtr]
    90 00000ED4 4885F6              <1>     test rsi, rsi
    91 00000ED7 7507                <1>     jnz .notNewCmd
    92 00000ED9 488D35BEF2FFFF      <1>     lea rsi, [cmdBuffer + 1]    ;Goto command buffer - 1
    93                              <1> .notNewCmd:
    94 00000EE0 48FFC6              <1>     inc rsi ;Goto first char in new buffer since rsi points to terminating char
    95 00000EE3 E89D1B0000          <1>     call skipSpaces ;Skip any preceeding spaces
    96 00000EE8 66AD                <1>     lodsw   ;Get the first two chars into ax
    97 00000EEA 668905C3F1FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
    98 00000EF1 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
    99 00000EF8 56                  <1>     push rsi
   100 00000EF9 57                  <1>     push rdi
   101 00000EFA 488D3D1CF3FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   102 00000F01 57                  <1>     push rdi
   103 00000F02 E809070000          <1>     call copyCommandTailItemProgram
   104 00000F07 5F                  <1>     pop rdi
   105 00000F08 9C                  <1>     pushfq  ;Save the CF state
   106 00000F09 E8091B0000          <1>     call strlen
   107 00000F0E FFC9                <1>     dec ecx ;Drop the terminating char from the count
   108 00000F10 58                  <1>     pop rax ;Get the CF state in al
   109 00000F11 5F                  <1>     pop rdi
   110 00000F12 5E                  <1>     pop rsi
   111 00000F13 F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   112 00000F15 A801                <1>     test al, 1  ;Was CF set?
   113 00000F17 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   114                              <1> .cmdLineProcess:
   115 00000F1D E8631B0000          <1>     call skipSpaces ;Go to the next char in the input line
   116                              <1> .redirFound:
   117 00000F22 AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   118 00000F23 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   119 00000F25 747C                <1>     je .exit
   120 00000F27 E827050000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   121 00000F2C 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   122 00000F2E 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   123 00000F30 B020                <1>     mov al, " "
   124 00000F32 AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   125 00000F33 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   126 00000F36 F6057FF1FFFFFF      <1>     test byte [arg1Flg], -1
   127 00000F3D 7521                <1>     jnz .arg2
   128                              <1> .arg1:
   129 00000F3F C60576F1FFFFFF      <1>     mov byte [arg1Flg], -1
   130 00000F46 E83A1B0000          <1>     call skipSpaces
   131 00000F4B 4889F0              <1>     mov rax, rsi
   132 00000F4E 488D1D48F2FFFF      <1>     lea rbx, cmdBuffer
   133 00000F55 4829D8              <1>     sub rax, rbx
   134 00000F58 88055FF1FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   135 00000F5E EB2A                <1>     jmp short .argCommon
   136                              <1> .arg2:
   137 00000F60 F60558F1FFFFFF      <1>     test byte [arg2Flg], -1
   138 00000F67 7521                <1>     jnz .argCommon
   139 00000F69 C6054FF1FFFFFF      <1>     mov byte [arg2Flg], -1
   140 00000F70 E8101B0000          <1>     call skipSpaces
   141 00000F75 4889F0              <1>     mov rax, rsi
   142 00000F78 488D1D1EF2FFFF      <1>     lea rbx, cmdBuffer
   143 00000F7F 4829D8              <1>     sub rax, rbx
   144 00000F82 880538F1FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   145 00000F88 EB00                <1>     jmp short .argCommon
   146                              <1> .argCommon:
   147                              <1>     ;More than two arguments? Do nothing more than just copy it
   148                              <1>     ; over. If we encounter an embedded CR, exit there too
   149 00000F8A E8F61A0000          <1>     call skipSpaces
   150 00000F8F 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   151 00000F92 740F                <1>     je .exit
   152                              <1>     ;If not, we copy it over
   153 00000F94 E8A5060000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   154 00000F99 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   155 00000F9D 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   156                              <1> .exit:
   157 00000FA3 48FFCE              <1>     dec rsi
   158 00000FA6 488935FAF0FFFF      <1>     mov qword [cmdEndPtr], rsi
   159 00000FAD B00D                <1>     mov al, CR
   160 00000FAF AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   161                              <1>     ;Now compute the command line length 
   162 00000FB0 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   163 00000FB7 B00D                <1>     mov al, CR
   164 00000FB9 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   165 00000FBB FFC9                <1>     dec ecx ;rcx = -1
   166 00000FBD F2AE                <1>     repne scasb
   167 00000FBF F7D1                <1>     not ecx
   168 00000FC1 FEC9                <1>     dec cl  ;Dont include terminating CR
   169 00000FC3 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   170 00000FCA 880F                <1>     mov byte [rdi], cl
   171                              <1>     ;Before returning, we copy the command name to cmdName
   172 00000FCC 488D3D4AF2FFFF      <1>     lea rdi, cmdPathSpec
   173 00000FD3 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   174 00000FD6 30C0                <1>     xor al, al  ;Search for the terminating null
   175 00000FD8 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   176 00000FDD F2AE                <1>     repne scasb
   177 00000FDF 48FFCF              <1>     dec rdi ;Go to the last char in the command
   178 00000FE2 4889FE              <1>     mov rsi, rdi
   179 00000FE5 FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   180                              <1> .keepSearching:
   181 00000FE6 AC                  <1>     lodsb
   182 00000FE7 3A053EF0FFFF        <1>     cmp al, byte [pathSep]
   183 00000FED 740B                <1>     je .cmdStartFnd
   184 00000FEF 4839DE              <1>     cmp rsi, rbx
   185 00000FF2 75F2                <1>     jne .keepSearching
   186 00000FF4 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   187 00000FF7 48FFCE              <1>     dec rsi
   188                              <1> .cmdStartFnd:
   189 00000FFA 48FFC6              <1>     inc rsi
   190 00000FFD 48FFC6              <1>     inc rsi ;Go past the pathsep
   191 00001000 FC                  <1>     cld ;Go the sane way again
   192 00001001 488D3D7DF2FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   193 00001008 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   194 00001009 B90E000000          <1>     mov ecx, cmdNameL
   195 0000100E 30C0                <1>     xor al, al
   196 00001010 F3AA                <1>     rep stosb
   197 00001012 5F                  <1>     pop rdi
   198 00001013 31C9                <1>     xor ecx, ecx
   199 00001015 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   200                              <1> .cmdGetChar:
   201 00001016 AC                  <1>     lodsb
   202 00001017 84C0                <1>     test al, al ;Did we find the terminating null?
   203 00001019 7411                <1>     jz .nameLenFnd
   204 0000101B 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   205 0000101D 740D                <1>     je .nameLenFnd
   206 0000101F 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   207 00001021 AA                  <1>     stosb   ;and store it
   208 00001022 FFC1                <1>     inc ecx
   209 00001024 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   210 0000102A 72EA                <1>     jb .cmdGetChar
   211                              <1> .nameLenFnd:
   212 0000102C 880D52F2FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   213                              <1>     ;Now finally, create a FCB filespec
   214 00001032 488D3D33F2FFFF      <1>     lea rdi, fcbCmdSpec
   215 00001039 57                  <1>     push rdi
   216 0000103A B90B000000          <1>     mov ecx, fcbNameL
   217 0000103F B020                <1>     mov al, " " ;Fill with spaces
   218 00001041 F3AA                <1>     rep stosb
   219 00001043 5F                  <1>     pop rdi
   220 00001044 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   221 00001045 E8A11A0000          <1>     call asciiToFCB
   222 0000104A 488D351BF2FFFF      <1>     lea rsi, fcbCmdSpec
   223 00001051 488D3D1FF2FFFF      <1>     lea rdi, cmdSpec
   224 00001058 E8E91A0000          <1>     call FCBToAsciiz
   225                              <1>     return
    13                              <2> %%_ret:
    14 0000105D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> 
   227                              <1> doCommandLine:
   228 0000105E 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   229                              <1>     ;The following check accounts for the end of a piped command
   230 00001065 803E0D              <1>     cmp byte [rsi], CR  ;If the first char is a CR, exit the pipe loop
   231                              <1>     rete    ;Do not attempt to execute if the first char is a CR
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001068 74(5D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   232 0000106A 488D3D51F0FFFF      <1>     lea rdi, cmdFcb
   233 00001071 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   234 00001076 CD41                <1>     int 41h
   235 00001078 0FB71D35F0FFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   236 0000107F 80FF3A              <1>     cmp bh, ":"
   237 00001082 752E                <1>     jne .noDriveSpecified
   238 00001084 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   239 00001086 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   240 00001089 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   241 0000108C 3CFF                <1>     cmp al, -1  ;Int 41h returns AL = -1 if bad drive specified
   242 0000108E 7415                <1>     je .badDrive
   243                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   244 00001090 803DEDF1FFFF02      <1>     cmp byte [cmdName], 2
   245 00001097 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   246 00001099 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   247 0000109B CD41                <1>     int 41h 
   248 0000109D B419                <1>     mov ah, 19h
   249 0000109F CD41                <1>     int 41h     ;Get current drive
   250 000010A1 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   251                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000010A3 74(5D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   252                              <1> .badDrive:
   253 000010A5 488D157EF8FFFF      <1>     lea rdx, badDrv
   254 000010AC B409                <1>     mov ah, 09h
   255 000010AE CD41                <1>     int 41h
   256 000010B0 F9                  <1>     stc
   257                              <1>     return
    13                              <2> %%_ret:
    14 000010B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   258                              <1> .noDriveSpecified:
   259                              <1> ;Now we set the two FCB's in the command line
   260 000010B2 F60503F0FFFFFF      <1>     test byte [arg1Flg], -1
   261 000010B9 744D                <1>     jz .fcbArgsDone
   262 000010BB 0FB605FBEFFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   263 000010C2 488D35D4F0FFFF      <1>     lea rsi, cmdBuffer
   264 000010C9 4801C6              <1>     add rsi, rax    ;Point to first argument
   265 000010CC 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   266 000010D0 B801290000          <1>     mov eax, 2901h
   267 000010D5 CD41                <1>     int 41h
   268 000010D7 8805E1EFFFFF        <1>     mov byte [arg1FCBret], al
   269 000010DD F605DBEFFFFFFF      <1>     test byte [arg2Flg], -1
   270 000010E4 7422                <1>     jz .fcbArgsDone
   271 000010E6 0FB605D3EFFFFF      <1>     movzx eax, byte [arg2Off]
   272 000010ED 488D35A9F0FFFF      <1>     lea rsi, cmdBuffer
   273 000010F4 4801C6              <1>     add rsi, rax    ;Point to first argument
   274 000010F7 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   275 000010FB B801290000          <1>     mov eax, 2901h
   276 00001100 CD41                <1>     int 41h
   277 00001102 8805B9EFFFFF        <1>     mov byte [arg2FCBret], al
   278                              <1> .fcbArgsDone:
   279 00001108 488D358EF0FFFF      <1>     lea rsi, cmdBuffer
   280 0000110F 488D1D6EF1FFFF      <1>     lea rbx, cmdName
   281 00001116 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   282 0000111B BAFFFF0000          <1>     mov edx, 0FFFFh
   283 00001120 B5FF                <1>     mov ch, -1
   284 00001122 CD4F                <1>     int 4Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   285                              <1>             ;        al = 0  if the command should be executed as usual
   286 00001124 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   287 00001129 BAFFFF0000          <1>     mov edx, 0FFFFh
   288 0000112E 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   289 00001130 CD4F                <1>     int 4Fh
   290 00001132 741D                <1>     jz .executeInternal
   291                              <1>     ;Here we execute externally and return to the prompt
   292                              <1>     ; as if it was an internal execution
   293 00001134 488D35E2EFFFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   294 0000113B 488D1D80EFFFFF      <1>     lea rbx, cmdFcb
   295 00001142 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   296 00001147 BAFFFF0000          <1>     mov edx, 0FFFFh
   297 0000114C B5FF                <1>     mov ch, -1
   298 0000114E CD4F                <1>     int 4Fh 
   299                              <1>     return
    13                              <2> %%_ret:
    14 00001150 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   300                              <1> .executeInternal:
   301                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   302                              <1> ;rsi points after the command terminator in the command tail
   303 00001151 488D1DB4F5FFFF      <1>     lea rbx, functionTable
   304                              <1> .nextEntry:
   305 00001158 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   306 0000115B 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   307 0000115E 0F84A5140000        <1>     je launchChild      ;If so, check externally now
   308 00001164 380D1AF1FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   309 0000116A 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   310                              <1>     ;Here they have the same length so lets see if the name is the same
   311 0000116C 56                  <1>     push rsi
   312                              <1>     ;ecx has the length to compare
   313 0000116D 51                  <1>     push rcx
   314 0000116E 488D7301            <1>     lea rsi, qword [rbx + 1]
   315 00001172 488D3D0CF1FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   316 00001179 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   317 0000117B 59                  <1>     pop rcx
   318 0000117C 5E                  <1>     pop rsi
   319 0000117D 7516                <1>     jne .gotoNextEntry
   320                              <1>     ;Here it was found both strings are equal
   321 0000117F 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   322 00001184 480FB71F            <1>     movzx rbx, word [rdi]
   323 00001188 488D3D71EEFFFF      <1>     lea rdi, startLbl
   324 0000118F 4801FB              <1>     add rbx, rdi
   325 00001192 FFD3                <1>     call rbx    ;Call this function...
   326                              <1>     return  ;... and return
    13                              <2> %%_ret:
    14 00001194 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   327                              <1> .gotoNextEntry:
   328 00001195 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   329 0000119C 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   330 0000119F EBB7                <1>     jmp short .nextEntry
   331                              <1> .dfltErrExit:
   332 000011A1 488D1573F6FFFF      <1>     lea rdx, badCmd
   333 000011A8 B409                <1>     mov ah, 09h
   334 000011AA CD41                <1>     int 41h
   335                              <1>     return
    13                              <2> %%_ret:
    14 000011AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   336                              <1> 
   337                              <1> 
   338                              <1> checkExtensionExec:
   339                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   340                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   341                              <1> ;         If ZF=ZE and CF=CY => Batch file
   342 000011AD 8B0518EFFFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   343 000011B3 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   344 000011B8 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   345 000011BD 25DFDFDFFF          <1>     and eax, 0FFDFDFDFh ;Uppercase the three letters
   346 000011C2 3D434F4D20          <1>     cmp eax, "COM "
   347                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000011C7 74(AC)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   348 000011C9 3D45584520          <1>     cmp eax, "EXE "
   349                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000011CE 74(AC)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   350 000011D0 3D42415420          <1>     cmp eax, "BAT "
   351                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000011D5 75(AC)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   352 000011D7 F9                  <1>     stc
   353                              <1>     return
    13                              <2> %%_ret:
    14 000011D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   354                              <1> 
   355                              <1> redirFailure:
   356 000011D9 488D1591FBFFFF      <1>     lea rdx, redirErrMsg
   357 000011E0 B913000000          <1>     mov ecx, redirErrMsgL
   358 000011E5 EB0C                <1>     jmp short redirPipeFailureCommon
   359                              <1> pipeFailure:
   360 000011E7 488D156CFBFFFF      <1>     lea rdx, pipeErrMsg
   361 000011EE B917000000          <1>     mov ecx, pipeErrMsgL
   362                              <1> redirPipeFailureCommon:
   363                              <1> ;This routine is called if any problems happen during 
   364                              <1> ;This routine tries to close whatever handles are not -1 and delete
   365                              <1> ; pipe files if the pipe count is not 0
   366                              <1> ;It resets all variables and proceeds.
   367 000011F3 B800400000          <1>     mov eax, 4000h  ;Write handle
   368 000011F8 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   369 000011FD CD41                <1>     int 41h
   370 000011FF 31DB                <1>     xor ebx, ebx    ;Select STDIN
   371 00001201 E8C8000000          <1>     call .closeHandle
   372 00001206 FFC3                <1>     inc ebx         ;Select STDOUT
   373 00001208 E8C1000000          <1>     call .closeHandle
   374 0000120D B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   375 00001212 488D15A0FBFFFF      <1>     lea rdx, conName
   376 00001219 CD41                <1>     int 41h
   377 0000121B 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
   378 0000121D B800450000          <1>     mov eax, 4500h  ;DUP
   379 00001222 CD41                <1>     int 41h
   380 00001224 66C70589EEFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   381 0000122D 0FB71D84EEFFFF      <1>     movzx ebx, word [redirSTDIN]
   382 00001234 E895000000          <1>     call .closeHandle
   383                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   384 00001239 66C70576EEFFFFFFFF  <1>     mov word [redirSTDIN], -1
   385 00001242 0FB71D71EEFFFF      <1>     movzx ebx, word [redirSTDOUT]
   386 00001249 E880000000          <1>     call .closeHandle
   387 0000124E 66C70563EEFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   388 00001257 0FB71D52EEFFFF      <1>     movzx ebx, word [pipeSTDIN]
   389 0000125E E86B000000          <1>     call .closeHandle
   390 00001263 66C70544EEFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   391 0000126C 0FB71D3FEEFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   392 00001273 E856000000          <1>     call .closeHandle
   393 00001278 66C70531EEFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   394 00001281 66C70525EEFFFF0000  <1>     mov word [pipeFlag], 0  ;Cover the pipe number too
   395 0000128A 488D159FF0FFFF      <1>     lea rdx, qword [pipe1Filespec]
   396 00001291 803A00              <1>     cmp byte [rdx], 0
   397 00001294 7407                <1>     jz .checkOld
   398 00001296 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   399 0000129B CD41                <1>     int 41h
   400                              <1> .checkOld:
   401 0000129D 488D15DBF0FFFF      <1>     lea rdx, qword [pipe2Filespec]
   402 000012A4 803A00              <1>     cmp byte [rdx],0
   403 000012A7 7407                <1>     jz .pipeNamesComplete
   404 000012A9 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   405 000012AE CD41                <1>     int 41h
   406                              <1> .pipeNamesComplete:
   407 000012B0 31C0                <1>     xor eax, eax
   408                              <1>     ;Invalidate the pointers and the paths too
   409 000012B2 48890515F1FFFF      <1>     mov qword [newPipe], rax
   410 000012B9 48890516F1FFFF      <1>     mov qword [oldPipe], rax
   411 000012C0 89056AF0FFFF        <1>     mov dword [pipe1Filespec], eax
   412 000012C6 8905B3F0FFFF        <1>     mov dword [pipe2Filespec], eax
   413 000012CC F9                  <1>     stc
   414                              <1>     return
    13                              <2> %%_ret:
    14 000012CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   415                              <1> .closeHandle:
   416 000012CE 81FBFFFFFFFF        <1>     cmp ebx, -1
   417                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000012D4 74(CD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   418 000012D6 B8003E0000          <1>     mov eax, 3E00h
   419 000012DB CD41                <1>     int 41h
   420                              <1>     return
    13                              <2> %%_ret:
    14 000012DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   421                              <1> 
   422                              <1> cleanUpRedir:
   423                              <1> ;Cleans up the redir stuff after we are done.
   424 000012DE F605D1EDFFFFFF      <1>     test byte [redirIn], -1
   425 000012E5 0F85FD000000        <1>     jnz .redirInClear
   426 000012EB F605C5EDFFFFFF      <1>     test byte [redirOut], -1
   427 000012F2 0F8524010000        <1>     jnz .redirOutClear
   428 000012F8 0FB705B1EDFFFF      <1>     movzx eax, word [pipeSTDIN]
   429 000012FF 0FB71DACEDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   430 00001306 C1E310              <1>     shl ebx, 10h
   431 00001309 09D8                <1>     or eax, ebx
   432 0000130B 3DFFFFFFFF          <1>     cmp eax, -1
   433 00001310 7508                <1>     jne .pipe
   434 00001312 C60596EDFFFF00      <1>     mov byte [pipeFlag], 0  ;Clear the flag
   435                              <1>     return
    13                              <2> %%_ret:
    14 00001319 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   436                              <1> .pipe:
   437                              <1> ;Pipe processing here
   438                              <1> ;We handle stdin, closing the redir if it is and deleting
   439                              <1> ; the redir file.
   440                              <1> ;Then we handle stdout, moving the redir to stdin.
   441 0000131A 66813D8DEDFFFFFFFF  <1>     cmp word [pipeSTDIN], -1
   442 00001323 7443                <1>     je .pipeNostdin
   443                              <1>     ;We close the handle first and delete the file.
   444 00001325 0FB71D84EDFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   445 0000132C 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   446 0000132E B800460000          <1>     mov eax, 4600h
   447 00001333 CD41                <1>     int 41h
   448 00001335 0F82ACFEFFFF        <1>     jc pipeFailure
   449 0000133B B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   450 00001340 CD41                <1>     int 41h
   451 00001342 0F829FFEFFFF        <1>     jc pipeFailure
   452 00001348 488B1587F0FFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   453 0000134F B800410000          <1>     mov eax, 4100h  ;Delete the file!
   454 00001354 CD41                <1>     int 41h
   455 00001356 0F828BFEFFFF        <1>     jc pipeFailure
   456 0000135C C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   457 0000135F 66C70548EDFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   458                              <1> .pipeNostdin:
   459 00001368 66813D41EDFFFFFFFF  <1>     cmp word [pipeSTDOUT], -1   ;If no stdout redir, exit now
   460                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001371 74(19)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   461                              <1> ;Duplicate STDIN to save across pipe
   462 00001373 B800450000          <1>     mov eax, 4500h
   463 00001378 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   464 0000137A CD41                <1>     int 41h
   465 0000137C 0F8265FEFFFF        <1>     jc pipeFailure
   466 00001382 66890527EDFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   467                              <1> 
   468                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   469 00001389 B800460000          <1>     mov eax, 4600h
   470 0000138E 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   471 00001390 FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   472 00001392 CD41                <1>     int 41h
   473 00001394 0F824DFEFFFF        <1>     jc pipeFailure
   474                              <1> 
   475                              <1> ;Now return the original stdout to stdout
   476 0000139A 89D9                <1>     mov ecx, ebx
   477 0000139C 0FB71D0FEDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   478 000013A3 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   479 000013A8 CD41                <1>     int 41h
   480 000013AA 0F8237FEFFFF        <1>     jc pipeFailure
   481                              <1> 
   482                              <1> ;Now close the DUP'ed STDOUT
   483 000013B0 B8003E0000          <1>     mov eax, 3E00h
   484 000013B5 CD41                <1>     int 41h
   485 000013B7 0F822AFEFFFF        <1>     jc pipeFailure
   486                              <1> 
   487                              <1> ;Finally unwind STDIN to the beginning of the file
   488 000013BD B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   489 000013C2 31DB                <1>     xor ebx, ebx    ;STDIN handle
   490 000013C4 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   491 000013C6 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   492 000013C8 CD41                <1>     int 41h
   493 000013CA 0F8217FEFFFF        <1>     jc pipeFailure  ;This should never happen
   494                              <1> 
   495 000013D0 488B15F7EFFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   496 000013D7 488915F8EFFFFF      <1>     mov qword [oldPipe], rdx
   497 000013DE 66C705CBECFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   498                              <1>     return
    13                              <2> %%_ret:
    14 000013E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   499                              <1> 
   500                              <1> .redirInClear:
   501 000013E8 0FB71DC9ECFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   502 000013EF 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   503 000013F1 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   504 000013F6 CD41                <1>     int 41h
   505 000013F8 0F82DBFDFFFF        <1>     jc redirFailure
   506 000013FE B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   507 00001403 CD41                <1>     int 41h
   508 00001405 0F82CEFDFFFF        <1>     jc redirFailure
   509 0000140B 66C705A4ECFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   510 00001414 C6059BECFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   511                              <1>     return
    13                              <2> %%_ret:
    14 0000141B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   512                              <1> .redirOutClear:
   513 0000141C 0FB71D97ECFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   514 00001423 B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   515 00001428 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   516 0000142D CD41                <1>     int 41h
   517 0000142F 0F82A4FDFFFF        <1>     jc redirFailure
   518 00001435 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   519 0000143A CD41                <1>     int 41h
   520 0000143C 0F8297FDFFFF        <1>     jc redirFailure
   521 00001442 66C7056FECFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   522 0000144B C60565ECFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   523                              <1>     return
    13                              <2> %%_ret:
    14 00001452 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> checkAndSetupRedir:
   526                              <1> ;Checks and sets up redir as appropriate
   527                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   528                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   529                              <1> ;Output: ZF=NZ => No redir
   530                              <1> ;        ZF=ZY => Redir
   531                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   532                              <1> ;CF=CY if pipe set or an embedded CR found
   533 00001453 57                  <1>     push rdi
   534 00001454 3C3C                <1>     cmp al, "<"
   535 00001456 740F                <1>     je .inputRedir
   536 00001458 3C3E                <1>     cmp al, ">"
   537 0000145A 7478                <1>     je .outputRedir
   538 0000145C 3C7C                <1>     cmp al, "|"
   539 0000145E 0F8428010000        <1>     je .pipeSetup
   540 00001464 F8                  <1>     clc
   541                              <1> .redirExit:
   542 00001465 5F                  <1>     pop rdi
   543                              <1>     return
    13                              <2> %%_ret:
    14 00001466 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   544                              <1> .inputRedir:
   545 00001467 C60548ECFFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   546 0000146E 488D3D1DEEFFFF      <1>     lea rdi, rdrInFilespec
   547 00001475 E80B160000          <1>     call skipSpaces ;Skip spaces between < and the filespec
   548 0000147A E8BF010000          <1>     call copyCommandTailItem
   549                              <1>     ;jc .redirExit
   550 0000147F 48FFCE              <1>     dec rsi ;Ensure rsi points to the terminating char
   551 00001482 E8FE150000          <1>     call skipSpaces
   552                              <1>     ;Setup the redir here for STDIN
   553 00001487 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   554 00001489 B800450000          <1>     mov eax, 4500h
   555 0000148E CD41                <1>     int 41h
   556 00001490 0F8274010000        <1>     jc .redirError
   557 00001496 6689051BECFFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   558 0000149D 488D15EEEDFFFF      <1>     lea rdx, rdrInFilespec
   559 000014A4 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   560 000014A9 CD41                <1>     int 41h
   561 000014AB 0F8259010000        <1>     jc .redirError
   562 000014B1 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   563 000014B3 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   564 000014B6 B800460000          <1>     mov eax, 4600h
   565 000014BB CD41                <1>     int 41h
   566 000014BD 0F8247010000        <1>     jc .redirError
   567 000014C3 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   568 000014C8 CD41                <1>     int 41h
   569 000014CA 0F823A010000        <1>     jc .redirError
   570 000014D0 30C0                <1>     xor al, al
   571 000014D2 EB91                <1>     jmp short .redirExit
   572                              <1> .outputRedir:
   573 000014D4 C605DCEBFFFF01      <1>     mov byte [redirOut], 1
   574 000014DB 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   575 000014DE 7509                <1>     jne .notDouble
   576 000014E0 FE05D1EBFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   577 000014E6 48FFC6              <1>     inc rsi ;Go past it too
   578                              <1> .notDouble:
   579 000014E9 488D3DF1EDFFFF      <1>     lea rdi, rdrOutFilespec
   580 000014F0 E890150000          <1>     call skipSpaces
   581 000014F5 E844010000          <1>     call copyCommandTailItem
   582                              <1>     ;jc .redirExit
   583 000014FA 48FFCE              <1>     dec rsi ;Ensure rsi points to the terminating char
   584 000014FD E883150000          <1>     call skipSpaces
   585                              <1>     ;Setup the redir here for STDOUT
   586 00001502 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   587 00001507 B800450000          <1>     mov eax, 4500h
   588 0000150C CD41                <1>     int 41h
   589 0000150E 0F82F6000000        <1>     jc .redirError
   590 00001514 6689059FEBFFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   591 0000151B 488D15BFEDFFFF      <1>     lea rdx, rdrOutFilespec
   592 00001522 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   593 00001527 CD41                <1>     int 41h
   594 00001529 7312                <1>     jnc .fileExists
   595 0000152B B8003C0000          <1>     mov eax, 3C00h
   596 00001530 B900000000          <1>     mov ecx, 0  ;Make the file with no attributes
   597 00001535 CD41                <1>     int 41h
   598 00001537 0F82CD000000        <1>     jc .redirError
   599                              <1> .fileExists:
   600 0000153D B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   601 00001542 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   602 00001545 B800460000          <1>     mov eax, 4600h  ;DUP2
   603 0000154A CD41                <1>     int 41h
   604 0000154C 0F82B8000000        <1>     jc .redirError
   605 00001552 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   606 00001557 CD41                <1>     int 41h
   607 00001559 0F82AB000000        <1>     jc .redirError
   608 0000155F 803D51EBFFFF01      <1>     cmp byte [redirOut], 1
   609 00001566 7416                <1>     je .dontAppend
   610                              <1>     ;Here we move the file pointer to the end of the file
   611 00001568 31D2                <1>     xor edx, edx    ;Low order 32 bits
   612 0000156A 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   613 0000156C BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   614 00001571 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   615 00001576 CD41                <1>     int 41h
   616 00001578 0F828C000000        <1>     jc .redirError
   617                              <1> .dontAppend:
   618 0000157E C60532EBFFFFFF      <1>     mov byte [redirOut], -1
   619 00001585 30C0                <1>     xor al, al
   620 00001587 E9D9FEFFFF          <1>     jmp .redirExit
   621                              <1> .pipeSetup:
   622                              <1> ;We only need to setup STDOUT redirection to the pipe file
   623 0000158C 488D159DEDFFFF      <1>     lea rdx, pipe1Filespec
   624 00001593 803A00              <1>     cmp byte [rdx], 0
   625 00001596 740C                <1>     jz .pathFound
   626 00001598 488D15E0EDFFFF      <1>     lea rdx, pipe2Filespec
   627 0000159F 803A00              <1>     cmp byte [rdx], 0
   628 000015A2 7560                <1>     jnz .pipeError
   629                              <1> .pathFound:
   630 000015A4 48891523EEFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   631 000015AB B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   632 000015B0 BB01000000          <1>     mov ebx, 1
   633 000015B5 CD41                <1>     int 41h
   634 000015B7 724B                <1>     jc .pipeError
   635 000015B9 668905F2EAFFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   636 000015C0 E84D140000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   637 000015C5 0441                <1>     add al, "A"
   638 000015C7 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   639 000015CC 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   640 000015CE 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   641 000015D0 B900000000          <1>     mov ecx, 0;dirHidden  ;Hidden attributes
   642 000015D5 B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   643 000015DA CD41                <1>     int 41h
   644 000015DC 7226                <1>     jc .pipeError
   645                              <1>     ;AX has the handle for this file now, this will become STDOUT
   646                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   647 000015DE 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   648 000015E1 B901000000          <1>     mov ecx, 1
   649 000015E6 B800460000          <1>     mov eax, 4600h
   650 000015EB CD41                <1>     int 41h
   651 000015ED 7215                <1>     jc .pipeError
   652 000015EF B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   653 000015F4 CD41                <1>     int 41h
   654 000015F6 720C                <1>     jc .pipeError
   655 000015F8 C605B0EAFFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   656 000015FF 30C0                <1>     xor al, al
   657 00001601 F9                  <1>     stc
   658 00001602 5F                  <1>     pop rdi
   659                              <1>     return
    13                              <2> %%_ret:
    14 00001603 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   660                              <1> .pipeError:
   661 00001604 5F                  <1>     pop rdi 
   662 00001605 E9DDFBFFFF          <1>     jmp pipeFailure
   663                              <1> .redirError:
   664 0000160A 5F                  <1>     pop rdi 
   665 0000160B E9C9FBFFFF          <1>     jmp redirFailure
   666                              <1> 
   667                              <1> copyCommandTailItemProgram:
   668                              <1> ;Copies a program name from the command tail until a terminator is found.
   669                              <1> ;Stores a terminating null in the destination
   670                              <1> ;Input: rsi = Start of the item to copy
   671                              <1> ;       rdi = Location for copy
   672                              <1> ;Output: Sentence copied with a null terminator inserted.
   673                              <1> ; If CF=CY, embedded CR encountered
   674 00001610 AC                  <1>     lodsb
   675 00001611 3C0D                <1>     cmp al, CR
   676 00001613 741E                <1>     je .endOfInput
   677 00001615 3C7C                <1>     cmp al, "|"
   678 00001617 741A                <1>     je .endOfInput
   679 00001619 E83D140000          <1>     call isALterminator
   680 0000161E 741A                <1>     jz .exit
   681 00001620 3A0505EAFFFF        <1>     cmp al, byte [pathSep]
   682 00001626 7412                <1>     je .exit
   683 00001628 3A05FEE9FFFF        <1>     cmp al, byte [switchChar]
   684 0000162E 740A                <1>     je .exit
   685 00001630 AA                  <1>     stosb
   686 00001631 EBDD                <1>     jmp short copyCommandTailItemProgram
   687                              <1> .endOfInput:
   688 00001633 E802000000          <1>     call .exit
   689 00001638 F9                  <1>     stc 
   690                              <1>     return
    13                              <2> %%_ret:
    14 00001639 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   691                              <1> .exit:
   692 0000163A 30C0                <1>     xor al, al
   693 0000163C AA                  <1>     stosb
   694                              <1>     return
    13                              <2> %%_ret:
    14 0000163D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   695                              <1> 
   696                              <1> copyCommandTailItem:
   697                              <1> ;Copies a sentence from the command tail until a terminator is found.
   698                              <1> ;Stores a terminating null in the destination
   699                              <1> ;Input: rsi = Start of the item to copy
   700                              <1> ;       rdi = Location for copy
   701                              <1> ;Output: Sentence copied with a null terminator inserted.
   702                              <1> ; If CF=CY, embedded CR or Pipe encountered
   703 0000163E AC                  <1>     lodsb
   704 0000163F 3C0D                <1>     cmp al, CR
   705 00001641 7446                <1>     je .endOfInput
   706 00001643 3C7C                <1>     cmp al, "|"
   707 00001645 7442                <1>     je .endOfInput
   708 00001647 E80F140000          <1>     call isALterminator
   709 0000164C 7442                <1>     jz .exit
   710 0000164E 3C3C                <1>     cmp al, "<"
   711 00001650 743E                <1>     jz .exit
   712 00001652 3C3E                <1>     cmp al, ">"
   713 00001654 743A                <1>     jz .exit
   714 00001656 3A05CFE9FFFF        <1>     cmp al, byte [pathSep]
   715 0000165C 740B                <1>     je .pathSep
   716 0000165E 3A05C8E9FFFF        <1>     cmp al, byte [switchChar]
   717 00001664 742A                <1>     je .exit
   718 00001666 AA                  <1>     stosb
   719 00001667 EBD5                <1>     jmp short copyCommandTailItem
   720                              <1> .pathSep:
   721                              <1> ;We look ahead, if the last char is a pathsep, we ignore it
   722 00001669 AC                  <1>     lodsb   ;Get the next char, increment rsi by one
   723 0000166A E8EC130000          <1>     call isALterminator
   724 0000166F 741F                <1>     jz .exit
   725 00001671 3C0D                <1>     cmp al, CR
   726 00001673 7414                <1>     je .endOfInput
   727 00001675 3A05B1E9FFFF        <1>     cmp al, byte [switchChar]
   728 0000167B 7413                <1>     je .exit
   729 0000167D 8A05A8E9FFFF        <1>     mov al, byte [pathSep]
   730 00001683 AA                  <1>     stosb   ;Else store the pathsep
   731 00001684 48FFCE              <1>     dec rsi ;Move rsi back a piece
   732 00001687 EBB5                <1>     jmp short copyCommandTailItem
   733                              <1> .endOfInput:
   734 00001689 E802000000          <1>     call .exit
   735 0000168E F9                  <1>     stc 
   736                              <1>     return
    13                              <2> %%_ret:
    14 0000168F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   737                              <1> .exit:
   738 00001690 30C0                <1>     xor al, al
   739 00001692 AA                  <1>     stosb
   740                              <1>     return
    13                              <2> %%_ret:
    14 00001693 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   741                              <1> 
   742                              <1> 
   743                              <1> int4Eh:   ;Interrupt interface for parsing and executing command lines
   744                              <1> ;Input: rsi points to the count byte of a command line
   745 00001694 4150                <1>     push r8
   746 00001696 4151                <1>     push r9
   747 00001698 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   748 0000169A CD41                <1>     int 41h
   749 0000169C 52                  <1>     push rdx    ;Save on the stack
   750 0000169D 488D1D5CE8FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   751 000016A4 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   752 000016A6 CD41                <1>     int 41h
   753 000016A8 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   754 000016AB 4989D9              <1>     mov r9, rbx
   755 000016AE 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   756 000016B5 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   757 000016BA F348A5              <1>     rep movsq   ;Copy command line over
   758                              <1>     ;call doCommandLine
   759 000016BD 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   760 000016BE B450                <1>     mov ah, 50h ;Set Current PSP
   761 000016C0 CD41                <1>     int 41h
   762 000016C2 4159                <1>     pop r9
   763 000016C4 4158                <1>     pop r8
   764 000016C6 48CF                <1>     iretq
    16                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 4Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> noSelfCopyError:
     7 000016C8 488D15DAF1FFFF      <1>     lea rdx, noSelfCopy
     8 000016CF EB34                <1>     jmp short badCmn
     9                              <1> badParamError:
    10 000016D1 488D158FF2FFFF      <1>     lea rdx, badParm
    11 000016D8 EB2B                <1>     jmp short badCmn
    12                              <1> badDriveError:
    13 000016DA 488D1549F2FFFF      <1>     lea rdx, badDrv
    14 000016E1 EB22                <1>     jmp short badCmn
    15                              <1> badArgError:
    16 000016E3 488D15FAF4FFFF      <1>     lea rdx, badArgs
    17 000016EA EB19                <1>     jmp short badCmn
    18                              <1> badFileError:
    19 000016EC 488D15D5F4FFFF      <1>     lea rdx, badSpec
    20 000016F3 EB10                <1>     jmp short badCmn
    21                              <1> badDupFnf:
    22                              <1> ;Hybrid error message
    23 000016F5 488D153AF1FFFF      <1>     lea rdx, dupName
    24 000016FC EB07                <1>     jmp short badCmn
    25                              <1> badDirError:
    26 000016FE 488D1563F3FFFF      <1>     lea rdx, badDir
    27                              <1> badCmn:
    28 00001705 B800090000          <1>     mov eax, 0900h
    29 0000170A CD41                <1>     int 41h
    30 0000170C F9                  <1>     stc ;Return with CY => Error occured
    31                              <1>     return
    13                              <2> %%_ret:
    14 0000170D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> 
    33                              <1> dir:
    34                              <1>     ;breakpoint
    35 0000170E C60549EDFFFF00      <1>     mov byte [dirPrnType], 0    ;Clear DIR flags
    36 00001715 C60543EDFFFF00      <1>     mov byte [dirLineCtr], 0
    37 0000171C C6053DEDFFFF00      <1>     mov byte [dirFileCtr], 0
    38 00001723 C605B8EDFFFF00      <1>     mov byte [dirPathArg], 0    ;Null terminate the start of the buffer
    39 0000172A 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    39 00001733 3F                  <1>
    40 00001734 488D3D27EEFFFF      <1>     lea rdi, dirSrchPat ;Start also by initialising the search pattern
    41 0000173B 48AB                <1>     stosq
    42 0000173D 48FFC7              <1>     inc rdi ;Go past dot
    43 00001740 668907              <1>     mov word [rdi], ax
    44 00001743 884702              <1>     mov byte [rdi + 2], al
    45                              <1>     ;Start by scanning for the switches
    46 00001746 488D3D51EAFFFF      <1>     lea rdi, cmdBuffer + 1  ;Goto command line input chars count
    47 0000174D 0FB60F              <1>     movzx ecx, byte [rdi]   ;Get number of chars typed
    48 00001750 48FFC7              <1>     inc rdi ;Goto first char typed in
    49 00001753 4889FE              <1>     mov rsi, rdi    ;Use rsi as start of buffer counter
    50 00001756 8A05D0E8FFFF        <1>     mov al, byte [switchChar]   ;Scan for switchchars
    51                              <1> .switchScan:
    52 0000175C F2AE                <1>     repne scasb ;Scan for a switchchar
    53 0000175E 67E320              <1>     jecxz .switchScanDone
    54 00001761 24DF                <1>     and al, 0DFh    ;UC it
    55 00001763 3C57                <1>     cmp al, "W" ;Wide print mode?
    56 00001765 7509                <1>     jne .notWideSw
    57 00001767 800DF0ECFFFF01      <1>     or byte [dirPrnType], 1 ;Set the correct bit
    58 0000176E EBEC                <1>     jmp short .switchScan
    59                              <1> .notWideSw:
    60 00001770 3C50                <1>     cmp al, "P" ;Pause mode?
    61 00001772 0F8559FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    62 00001778 800DDFECFFFF02      <1>     or byte [dirPrnType], 2 ;Set correct bit
    63 0000177F EBDB                <1>     jmp short .switchScan
    64                              <1> .switchScanDone:
    65                              <1> ;If no args, only switches, we search CWD
    66                              <1> ;If one arg, search that 
    67                              <1> ;If more than one, fail
    68 00001781 488D3517EAFFFF      <1>     lea rsi, cmdBuffer + 2
    69 00001788 E8F8120000          <1>     call skipSpaces ;Skip leading spaces
    70 0000178D 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    71                              <1> .lp:
    72 00001794 E8EC120000          <1>     call skipSpaces ;Skip spaces after
    73 00001799 AC                  <1>     lodsb   ;Get first non space char
    74 0000179A E8DF120000          <1>     call isALEndOfCommand   ;If this is the end char CR or "|", exit
    75 0000179F 744A                <1>     jz .eocNoNull
    76 000017A1 3C3E                <1>     cmp al, ">"
    77 000017A3 7446                <1>     je .eocNoNull
    78 000017A5 3C3C                <1>     cmp al, "<"
    79 000017A7 7442                <1>     je .eocNoNull
    80 000017A9 3A057DE8FFFF        <1>     cmp al, byte [switchChar]  ;Is al a switch char?
    81 000017AF 7509                <1>     jne .notSwitch
    82                              <1>     ;Now we skip the switch if it was a switch
    83 000017B1 E870120000          <1>     call findTerminatorOrEOC    ;Go past the switch
    84 000017B6 7233                <1>     jc .eocNoNull  ;If we reach the EOC, exit,
    85 000017B8 EBDA                <1>     jmp short .lp
    86                              <1> .notSwitch:
    87                              <1>     ;If not a switch, should be a path. Copy to buffer and keep searching
    88 000017BA 803D21EDFFFF00      <1>     cmp byte [dirPathArg], 0    ;If a second path provided, error
    89 000017C1 0F851CFFFFFF        <1>     jne badArgError
    90 000017C7 488D3D14EDFFFF      <1>     lea rdi, dirPathArg ;Store the path to search here AS WRITTEN BY USER
    91 000017CE 48FFCE              <1>     dec rsi ;Go back to the start of the string
    92                              <1> .nameCopy:
    93 000017D1 AC                  <1>     lodsb
    94 000017D2 E8A7120000          <1>     call isALEndOfCommand
    95 000017D7 740F                <1>     jz .eocReached
    96 000017D9 E87D120000          <1>     call isALterminator
    97 000017DE 7403                <1>     jz .terminateCopy
    98 000017E0 AA                  <1>     stosb
    99 000017E1 EBEE                <1>     jmp short .nameCopy
   100                              <1> .terminateCopy:
   101 000017E3 31C0                <1>     xor eax, eax
   102 000017E5 AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   103 000017E6 EBAC                <1>     jmp short .lp ;Now search if another 
   104                              <1> .eocReached:
   105 000017E8 31C0                <1>     xor eax, eax
   106 000017EA AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   107                              <1> .eocNoNull:
   108 000017EB 803DF0ECFFFF00      <1>     cmp byte [dirPathArg], 0    ;If no path provided, use CWD for current drive
   109 000017F2 7434                <1>     je .currentDrv
   110                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   111 000017F4 488D35E7ECFFFF      <1>     lea rsi, dirPathArg
   112 000017FB 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   113 000017FF 7527                <1>     jne .currentDrv
   114                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   115 00001801 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   116 00001806 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   117 0000180A B801290000          <1>     mov eax, 2901h   ;Parse filename
   118 0000180F CD41                <1>     int 41h
   119 00001811 3CFF                <1>     cmp al, -1
   120 00001813 0F84C1FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   121                              <1>     ;Else the drive in the fcb is valid
   122 00001819 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   123 0000181E FEC8                <1>     dec al  ;Convert to 0 based drive number
   124 00001820 88053BECFFFF        <1>     mov byte [dirDrv], al
   125 00001826 EB0B                <1>     jmp short .dirPrintVol
   126                              <1> .currentDrv:
   127 00001828 E8E5110000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   128 0000182D 88052EECFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   129                              <1> .dirPrintVol:
   130 00001833 0FB60527ECFFFF      <1>     movzx eax, byte [dirDrv] 
   131 0000183A E8B70A0000          <1>     call volume.dirEP
   132 0000183F 803D9CECFFFF00      <1>     cmp byte [dirPathArg], 0    ;Null path here, 
   133 00001846 7409                <1>     je .printCWD
   134 00001848 803D96ECFFFF00      <1>     cmp byte [dirPathArg + 3], 0    ;Was this X:,0?
   135 0000184F 7400                <1>     je .printCWD
   136                              <1>     ;Here we have a path
   137                              <1>     ;Temp measure, we just fall through ignoring the path provided
   138                              <1> .printCWD:
   139 00001851 8A150AECFFFF        <1>     mov dl, byte [dirDrv]
   140 00001857 88D0                <1>     mov al, dl
   141 00001859 0441                <1>     add al, "A"
   142 0000185B B43A                <1>     mov ah, ":"
   143 0000185D 6689057AEBFFFF      <1>     mov word [searchSpec], ax
   144 00001864 8A05C1E7FFFF        <1>     mov al, byte [pathSep]
   145 0000186A 880570EBFFFF        <1>     mov byte [searchSpec + 2], al
   146 00001870 488D356AEBFFFF      <1>     lea rsi, searchSpec + 3  ;Make space for a X:"\"
   147 00001877 B447                <1>     mov ah, 47h ;Get Current Working Directory
   148 00001879 FEC2                <1>     inc dl  ;Convert to 1 based number
   149 0000187B CD41                <1>     int 41h
   150 0000187D 488D3D5AEBFFFF      <1>     lea rdi, searchSpec
   151 00001884 E88E110000          <1>     call strlen
   152 00001889 FFC9                <1>     dec ecx
   153 0000188B C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   154 0000188F 488D153AF2FFFF      <1>     lea rdx, dirMain
   155 00001896 B409                <1>     mov ah, 09h
   156 00001898 CD41                <1>     int 41h
   157 0000189A 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   158 0000189D B409                <1>     mov ah, 09h
   159 0000189F CD41                <1>     int 41h
   160 000018A1 488D1519EFFFFF      <1>     lea rdx, crlf2
   161 000018A8 B409                <1>     mov ah, 09h
   162 000018AA CD41                <1>     int 41h
   163 000018AC E801000000          <1>     call .searchForFile
   164                              <1>     return
    13                              <2> %%_ret:
    14 000018B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1>     ;If we get no path spec or just a X: path spec then we 
   166                              <1>     ; search the current working directory for that pathspec
   167                              <1>     ;If we get an actual pathspec, we first save the CWD for that drive
   168                              <1>     ; and then we try to make the pathspec the CWD. 
   169                              <1>     ;   If it works, we then search *.* in that folder and return the og CWD.
   170                              <1>     ;   If it fails, we then search one level up, for the search pattern
   171                              <1>     ;    that we compute.
   172                              <1> 
   173                              <1>     
   174                              <1>     ;Now we need to print the path to the folder we will be searching in
   175                              <1> .searchForFile:
   176                              <1>     ;Now we search for the files
   177                              <1>     ;RCX must have the number of chars to the end of the pathspec
   178 000018B2 488D3D25EBFFFF      <1>     lea rdi, searchSpec
   179 000018B9 8A056CE7FFFF        <1>     mov al, byte [pathSep]
   180 000018BF 38440FFF            <1>     cmp byte [rdi + rcx - 1], al
   181 000018C3 7405                <1>     je .noAddSlash  ;Deals with special case of root dir
   182 000018C5 88040F              <1>     mov byte [rdi + rcx], al
   183 000018C8 FFC1                <1>     inc ecx
   184                              <1> .noAddSlash:
   185 000018CA 488D3C0F            <1>     lea rdi, qword [rdi + rcx]
   186 000018CE 488D358DECFFFF      <1>     lea rsi, dirSrchPat
   187 000018D5 4889FA              <1>     mov rdx, rdi    ;Ptr to search for in rdx
   188 000018D8 48A5                <1>     movsq
   189 000018DA A5                  <1>     movsd
   190 000018DB 30C0                <1>     xor al, al
   191 000018DD AA                  <1>     stosb   ;Store the terminating null
   192 000018DE B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   193 000018E3 B44E                <1>     mov ah, 4Eh ;Find first
   194 000018E5 CD41                <1>     int 41h
   195 000018E7 720B                <1>     jc .dirNoMoreFiles
   196                              <1> .findNext:
   197 000018E9 E878000000          <1>     call .dirPrintFileData  ;Print the file information
   198 000018EE B44F                <1>     mov ah, 4Fh
   199 000018F0 CD41                <1>     int 41h
   200 000018F2 73F5                <1>     jnc .findNext 
   201                              <1> .dirNoMoreFiles:
   202 000018F4 F60563EBFFFF01      <1>     test byte [dirPrnType], 1
   203 000018FB 740B                <1>     jz .dirNoEndNewLine
   204 000018FD 488D15BAEEFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   205 00001904 B409                <1>     mov ah, 09h
   206 00001906 CD41                <1>     int 41h
   207                              <1> .dirNoEndNewLine:
   208                              <1>     ;Now we print the number of files and the number of bytes on the disk
   209 00001908 488D1579F4FFFF      <1>     lea rdx, fourSpc
   210 0000190F B409                <1>     mov ah, 09h
   211 00001911 CD41                <1>     int 41h
   212 00001913 B409                <1>     mov ah, 09h ;Print four Spaces twice
   213 00001915 CD41                <1>     int 41h
   214 00001917 0FB60542EBFFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   215 0000191E E801130000          <1>     call printDecimalWord
   216 00001923 488D15DFEFFFFF      <1>     lea rdx, dirOk
   217 0000192A B409                <1>     mov ah, 09h
   218 0000192C CD41                <1>     int 41h
   219 0000192E 488D1558F4FFFF      <1>     lea rdx, threeSpc
   220 00001935 B409                <1>     mov ah, 09h
   221 00001937 CD41                <1>     int 41h
   222 00001939 B800360000          <1>     mov eax, 3600h ;Get disk info
   223 0000193E 8A151DEBFFFF        <1>     mov dl, byte [dirDrv]
   224 00001944 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   225 00001946 CD41                <1>     int 41h ;Get disk free space info
   226 00001948 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   227 0000194B 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   228 0000194E 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   229 00001950 F7E1                <1>     mul ecx ;Get bytes per cluster
   230 00001952 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   231                              <1>     ;rax now has the number of free bytes on the disk
   232 00001955 E8CA120000          <1>     call printDecimalWord
   233 0000195A 488D15B2EFFFFF      <1>     lea rdx, bytesOk
   234 00001961 B409                <1>     mov ah, 09h
   235 00001963 CD41                <1>     int 41h
   236                              <1>     return
    13                              <2> %%_ret:
    14 00001965 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   237                              <1> 
   238                              <1> .dirPrintFileData:
   239                              <1> ;Use fcbCmdSpec to build the file name with space
   240                              <1> ;Start by print the name (same for both cases)
   241                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   242 00001966 F6057AE7FFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   243                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000196D 75(65)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   244 0000196F 488D357AE7FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   245 00001976 488D3DEFE8FFFF      <1>     lea rdi, fcbCmdSpec
   246 0000197D E87A110000          <1>     call asciiFilenameToFCB
   247 00001982 488D15E3E8FFFF      <1>     lea rdx, fcbCmdSpec
   248 00001989 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   249 0000198E BB01000000          <1>     mov ebx, 1  ;STDOUT
   250 00001993 B440                <1>     mov ah, 40h ;Write handle
   251 00001995 CD41                <1>     int 41h
   252 00001997 52                  <1>     push rdx
   253 00001998 B220                <1>     mov dl, " "
   254 0000199A B402                <1>     mov ah, 02h ;Print char
   255 0000199C CD41                <1>     int 41h
   256 0000199E 5A                  <1>     pop rdx
   257 0000199F 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   258 000019A6 B903000000          <1>     mov ecx, 3  ;Print three chars
   259 000019AB BB01000000          <1>     mov ebx, 1  ;STDOUT
   260 000019B0 B440                <1>     mov ah, 40h ;Write handle
   261 000019B2 CD41                <1>     int 41h
   262 000019B4 F605A3EAFFFF01      <1>     test byte [dirPrnType], 1
   263 000019BB 0F85A8000000        <1>     jnz .widePrint
   264                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   265                              <1>     ;Now check if a DIR
   266 000019C1 F6051FE7FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   267 000019C8 7418                <1>     jz .dirPrintNotDir
   268 000019CA 488D1550EFFFFF      <1>     lea rdx, dirLbl
   269 000019D1 B409                <1>     mov ah, 09h
   270 000019D3 CD41                <1>     int 41h
   271 000019D5 488D15B1F3FFFF      <1>     lea rdx, threeSpc
   272 000019DC B409                <1>     mov ah, 09h
   273 000019DE CD41                <1>     int 41h
   274 000019E0 EB4F                <1>     jmp short .dirPrintFileDT
   275                              <1> .dirPrintNotDir:
   276                              <1> ;Here we print the file size
   277 000019E2 B220                <1>     mov dl, " "
   278 000019E4 B402                <1>     mov ah, 02h
   279 000019E6 CD41                <1>     int 41h
   280 000019E8 8B05FEE6FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   281 000019EE E8A2120000          <1>     call getDecimalWord
   282 000019F3 4889CB              <1>     mov rbx, rcx
   283 000019F6 51                  <1>     push rcx
   284 000019F7 480FCB              <1>     bswap rbx
   285 000019FA B908000000          <1>     mov ecx, 8
   286                              <1> .dirPrintFileSizePrep:
   287 000019FF 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   288 00001A01 7514                <1>     jne .dirPrintFileSize
   289 00001A03 B402                <1>     mov ah, 02h
   290 00001A05 B220                <1>     mov dl, " "
   291 00001A07 CD41                <1>     int 41h
   292 00001A09 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   293 00001A0D FFC9                <1>     dec ecx
   294 00001A0F 81F901000000        <1>     cmp ecx, 1
   295 00001A15 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   296                              <1> .dirPrintFileSize:
   297 00001A17 5B                  <1>     pop rbx
   298                              <1> .dirPrintFileSizeLoop:
   299 00001A18 88DA                <1>     mov dl, bl
   300 00001A1A B402                <1>     mov ah, 02h
   301 00001A1C CD41                <1>     int 41h
   302 00001A1E 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   303 00001A22 FFC9                <1>     dec ecx
   304 00001A24 75F2                <1>     jnz .dirPrintFileSizeLoop
   305 00001A26 488D1564F3FFFF      <1>     lea rdx, twoSpc
   306 00001A2D B409                <1>     mov ah, 09h
   307 00001A2F CD41                <1>     int 41h
   308                              <1> .dirPrintFileDT:
   309 00001A31 B220                <1>     mov dl, " "
   310 00001A33 B402                <1>     mov ah, 02h
   311 00001A35 CD41                <1>     int 41h
   312 00001A37 0FB705ACE6FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   313 00001A3E 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   314 00001A40 E8230D0000          <1>     call printDate
   315 00001A45 488D1545F3FFFF      <1>     lea rdx, twoSpc
   316 00001A4C B409                <1>     mov ah, 09h
   317 00001A4E CD41                <1>     int 41h
   318 00001A50 0FB70591E6FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   319 00001A57 E82E0E0000          <1>     call printTime
   320 00001A5C 488D155BEDFFFF      <1>     lea rdx, crlf
   321 00001A63 B409                <1>     mov ah, 09h
   322 00001A65 CD41                <1>     int 41h
   323 00001A67 EB0B                <1>     jmp short .dirPrintNameExit
   324                              <1> .widePrint:
   325                              <1> ;If /W, print name space ext space space space space
   326 00001A69 488D1518F3FFFF      <1>     lea rdx, fourSpc
   327 00001A70 B409                <1>     mov ah, 09h ;Print string
   328 00001A72 CD41                <1>     int 41h
   329                              <1> .dirPrintNameExit:
   330 00001A74 FE05E6E9FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   331 00001A7A FE05DFE9FFFF        <1>     inc byte [dirLineCtr]
   332 00001A80 803DD8E9FFFF17      <1>     cmp byte [dirLineCtr], 23
   333                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001A87 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001A89 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   334 00001A8A 488D15B7EEFFFF      <1>     lea rdx, pauseMes
   335 00001A91 B409                <1>     mov ah, 09h
   336 00001A93 CD41                <1>     int 41h
   337 00001A95 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   338 00001A97 CD41                <1>     int 41h
   339 00001A99 C605BFE9FFFF00      <1>     mov byte [dirLineCtr], 0
   340 00001AA0 488D1517EDFFFF      <1>     lea rdx, crlf   ;Force new line
   341 00001AA7 B409                <1>     mov ah, 09h
   342 00001AA9 CD41                <1>     int 41h
   343                              <1>     return
    13                              <2> %%_ret:
    14 00001AAB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   344                              <1> 
   345                              <1> chdir:
   346 00001AAC F60509E6FFFFFF      <1>     test byte [arg1Flg], -1
   347 00001AB3 754D                <1>     jnz .changeDir
   348                              <1>     ;Print CWD
   349                              <1> .printCWD:
   350 00001AB5 E8B10E0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   351 00001ABA E8930C0000          <1>     call printCRLF
   352                              <1>     return
    13                              <2> %%_ret:
    14 00001ABF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   353                              <1> .printDiskCWD:
   354                              <1> ;Print CWD for a specified drive
   355 00001AC0 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   356 00001AC4 88D0                <1>     mov al, dl
   357 00001AC6 0440                <1>     add al, "@" ;Get the UC letter
   358 00001AC8 B43A                <1>     mov ah, ":"
   359 00001ACA 488D3D0DE9FFFF      <1>     lea rdi, searchSpec
   360 00001AD1 66AB                <1>     stosw   ;Store X:, rdi+=2
   361 00001AD3 8A0552E5FFFF        <1>     mov al, byte [pathSep]
   362 00001AD9 AA                  <1>     stosb   ;Store pathSep, inc rdi
   363 00001ADA B447                <1>     mov ah, 47h ;Get Current Working Directory
   364 00001ADC 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   365 00001ADF CD41                <1>     int 41h
   366 00001AE1 E8310F0000          <1>     call strlen
   367 00001AE6 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   368 00001AEC B440                <1>     mov ah, 40h ;Write to handle
   369 00001AEE BB01000000          <1>     mov ebx, 1  ;STDOUT
   370 00001AF3 488D15E4E8FFFF      <1>     lea rdx, searchSpec
   371 00001AFA CD41                <1>     int 41h
   372 00001AFC E8510C0000          <1>     call printCRLF
   373                              <1>     return
    13                              <2> %%_ret:
    14 00001B01 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   374                              <1> .changeDir:
   375 00001B02 8A05B6E5FFFF        <1>     mov al, byte [arg1FCBret]
   376 00001B08 3CFF                <1>     cmp al, -1 
   377 00001B0A 0F84CAFBFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   378 00001B10 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
   379 00001B15 7520                <1>     jne .getFQPath
   380                              <1>     ;Now we double check that on the command line we have . or ..
   381 00001B17 0FB6059FE5FFFF      <1>     movzx eax, byte [arg1Off]
   382 00001B1E 488D3578E6FFFF      <1>     lea rsi, cmdBuffer
   383 00001B25 4801C6              <1>     add rsi, rax
   384 00001B28 8A05FDE4FFFF        <1>     mov al, byte [pathSep]
   385 00001B2E 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
   386 00001B30 7405                <1>     je .getFQPath
   387 00001B32 803E2E              <1>     cmp byte [rsi], "."
   388 00001B35 7589                <1>     jne .printDiskCWD
   389                              <1>     ;If the path is . or .., its acceptable, else fail
   390                              <1> .getFQPath:
   391 00001B37 E84A100000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   392 00001B3C 0F82BCFBFFFF        <1>     jc badDirError  ;If this returns CF=CY, its a badDir
   393 00001B42 488D1595E8FFFF      <1>     lea rdx, searchSpec
   394 00001B49 B43B                <1>     mov ah, 3Bh ;CHDIR
   395 00001B4B CD41                <1>     int 41h
   396 00001B4D 0F82ABFBFFFF        <1>     jc badDirError
   397                              <1>     return
    13                              <2> %%_ret:
    14 00001B53 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> mkdir:
   400 00001B54 F60561E5FFFFFF      <1>     test byte [arg1Flg], -1
   401 00001B5B 0F8482FBFFFF        <1>     jz badArgError
   402 00001B61 F60557E5FFFFFF      <1>     test byte [arg2Flg], -1
   403 00001B68 0F8575FBFFFF        <1>     jnz badArgError
   404                              <1>     ;We have exactly one argument
   405 00001B6E 8A054AE5FFFF        <1>     mov al, byte [arg1FCBret]
   406 00001B74 3CFF                <1>     cmp al, -1 
   407 00001B76 0F845EFBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   408 00001B7C E805100000          <1>     call buildCommandPath
   409 00001B81 488D1556E8FFFF      <1>     lea rdx, searchSpec
   410 00001B88 B800390000          <1>     mov eax, 3900h  ;MKDIR
   411 00001B8D CD41                <1>     int 41h
   412                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001B8F 73(53)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   413                              <1> .badMake:   ;Else, bad make
   414 00001B91 488D15E4EEFFFF      <1>     lea rdx, badMD
   415 00001B98 B800090000          <1>     mov eax, 0900h
   416 00001B9D CD41                <1>     int 41h
   417                              <1>     return
    13                              <2> %%_ret:
    14 00001B9F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   418                              <1> 
   419                              <1> rmdir:
   420 00001BA0 F60515E5FFFFFF      <1>     test byte [arg1Flg], -1
   421 00001BA7 0F8436FBFFFF        <1>     jz badArgError
   422 00001BAD F6050BE5FFFFFF      <1>     test byte [arg2Flg], -1
   423 00001BB4 0F8529FBFFFF        <1>     jnz badArgError
   424                              <1>     ;We have exactly one argument
   425 00001BBA 8A05FEE4FFFF        <1>     mov al, byte [arg1FCBret]
   426 00001BC0 3CFF                <1>     cmp al, -1 
   427 00001BC2 0F8412FBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   428 00001BC8 E8B90F0000          <1>     call buildCommandPath
   429 00001BCD 488D150AE8FFFF      <1>     lea rdx, searchSpec
   430 00001BD4 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   431 00001BD9 CD41                <1>     int 41h
   432                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001BDB 73(9F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   433                              <1> .badRemove:   ;Else, bad make
   434 00001BDD 488D15B5EEFFFF      <1>     lea rdx, badRD
   435 00001BE4 B800090000          <1>     mov eax, 0900h
   436 00001BE9 CD41                <1>     int 41h
   437                              <1>     return
    13                              <2> %%_ret:
    14 00001BEB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   438                              <1> 
   439                              <1> copy:
   440 00001BEC F605C9E4FFFFFF      <1>     test byte [arg1Flg], -1
   441 00001BF3 0F84EAFAFFFF        <1>     jz badArgError
   442 00001BF9 F605BFE4FFFFFF      <1>     test byte [arg2Flg], -1
   443 00001C00 0F84DDFAFFFF        <1>     jz badArgError
   444 00001C06 488D3590E5FFFF      <1>     lea rsi, cmdBuffer
   445 00001C0D 0FB605A9E4FFFF      <1>     movzx eax, byte [arg1Off]
   446 00001C14 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   447                              <1>     ;rsi points to terminating char
   448 00001C17 AC                  <1>     lodsb   ;Get first char in AL
   449 00001C18 48FFCE              <1>     dec rsi ;Go back to this char
   450 00001C1B E85E0E0000          <1>     call isALEndOfCommand
   451 00001C20 0F82ABFAFFFF        <1>     jc badParamError
   452 00001C26 488D3D59E9FFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   453                              <1> .copyName1:
   454 00001C2D AC                  <1>     lodsb
   455 00001C2E E84B0E0000          <1>     call isALEndOfCommand
   456 00001C33 0F8498FAFFFF        <1>     je badParamError
   457 00001C39 E81D0E0000          <1>     call isALterminator
   458 00001C3E 7403                <1>     jz .endOfName1
   459 00001C40 AA                  <1>     stosb
   460 00001C41 EBEA                <1>     jmp short .copyName1
   461                              <1> .endOfName1:
   462 00001C43 31C0                <1>     xor eax, eax
   463 00001C45 AA                  <1>     stosb   ;Store this 0 at rdi
   464 00001C46 488D3550E5FFFF      <1>     lea rsi, cmdBuffer
   465 00001C4D 0FB6056CE4FFFF      <1>     movzx eax, byte [arg2Off]
   466 00001C54 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   467 00001C57 AC                  <1>     lodsb   ;Get first char in AL
   468 00001C58 48FFCE              <1>     dec rsi ;Go back to this char
   469 00001C5B E81E0E0000          <1>     call isALEndOfCommand
   470 00001C60 0F826BFAFFFF        <1>     jc badParamError
   471 00001C66 488D3D99E9FFFF      <1>     lea rdi, destPath
   472                              <1> .copyName2:
   473 00001C6D AC                  <1>     lodsb
   474 00001C6E E80B0E0000          <1>     call isALEndOfCommand
   475 00001C73 740A                <1>     je .endOfName2
   476 00001C75 E8E10D0000          <1>     call isALterminator
   477 00001C7A 7403                <1>     jz .endOfName2
   478 00001C7C AA                  <1>     stosb
   479 00001C7D EBEE                <1>     jmp short .copyName2
   480                              <1> .endOfName2:
   481 00001C7F 31C0                <1>     xor eax, eax
   482 00001C81 AA                  <1>     stosb   ;Store this 0 at rdi
   483                              <1> ;Before we open, we check if the two filenames are equal
   484                              <1> ; If so, crap out.
   485 00001C82 488D35FDE8FFFF      <1>     lea rsi, sourcePath
   486 00001C89 488D3D76E9FFFF      <1>     lea rdi, destPath
   487 00001C90 B81E120000          <1>     mov eax, 121Eh
   488 00001C95 CD4F                <1>     int 4Fh
   489 00001C97 0F84D3000000        <1>     jz .sameFilename
   490                              <1>     ;Open source with read permission
   491                              <1>     ;Open destination with write permission
   492 00001C9D 488D15E2E8FFFF      <1>     lea rdx, sourcePath
   493 00001CA4 B8003D0000          <1>     mov eax, 3D00h  ;Read open
   494 00001CA9 CD41                <1>     int 41h
   495 00001CAB 0F8220FAFFFF        <1>     jc badParamError
   496 00001CB1 668905CEE9FFFF      <1>     mov word [sourceHdl], ax
   497                              <1> 
   498 00001CB8 B800440000          <1>     mov eax, 4400h  ;Get device info in dx
   499 00001CBD 0FB7D8              <1>     movzx ebx, ax   ;For bx
   500 00001CC0 CD41                <1>     int 41h
   501 00001CC2 668915C1E9FFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
   502                              <1> 
   503 00001CC9 488D1536E9FFFF      <1>     lea rdx, destPath
   504 00001CD0 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   505 00001CD5 31C9                <1>     xor ecx, ecx    ;No file attributes
   506 00001CD7 CD41                <1>     int 41h
   507 00001CD9 0F82B8000000        <1>     jc .badExit
   508 00001CDF 668905A2E9FFFF      <1>     mov word [destHdl], ax
   509 00001CE6 31F6                <1>     xor esi, esi
   510 00001CE8 488D159DE9FFFF      <1>     lea rdx, copyBuffer
   511                              <1> .copyLoop:
   512 00001CEF B980000000          <1>     mov ecx, 128
   513 00001CF4 0FB71D8BE9FFFF      <1>     movzx ebx, word [sourceHdl]
   514 00001CFB B43F                <1>     mov ah, 3Fh ;Read
   515 00001CFD CD41                <1>     int 41h
   516 00001CFF 0F8292000000        <1>     jc .badExit
   517 00001D05 85C0                <1>     test eax, eax
   518 00001D07 743A                <1>     jz .okExit
   519 00001D09 01C6                <1>     add esi, eax
   520 00001D0B 89C1                <1>     mov ecx, eax
   521 00001D0D 0FB71D74E9FFFF      <1>     movzx ebx, word [destHdl]
   522 00001D14 B440                <1>     mov ah, 40h ;Write
   523 00001D16 CD41                <1>     int 41h
   524 00001D18 727D                <1>     jc .badExit
   525 00001D1A 3D80000000          <1>     cmp eax, 128    ;Did we read 128 chars?
   526 00001D1F 74CE                <1>     je .copyLoop
   527                              <1>     ;If not char dev, exit
   528 00001D21 66F70560E9FFFF8000  <1>     test word [srcHdlInfo], 80h ;Char dev bit set?
   529 00001D2A 7417                <1>     jz .okExit
   530                              <1>     ;Is handle in cooked or binary mode?
   531 00001D2C 66F70555E9FFFF2000  <1>     test word [srcHdlInfo], 20h
   532 00001D35 750C                <1>     jnz .okExit
   533                              <1>     ;Here the char dev must be in cooked mode. Check if the last char was ^Z
   534 00001D37 09C0                <1>     or eax, eax ;Clear upper bits in eax
   535 00001D39 488D7C02FF          <1>     lea rdi, qword [rdx + rax - 1]  ;Point to the last char in the buffer
   536 00001D3E 803F1A              <1>     cmp byte [rdi], EOF ;Was this EOF?
   537 00001D41 75AC                <1>     jne .copyLoop   ;Jump if not
   538                              <1> .okExit:
   539 00001D43 E832000000          <1>     call .leaveCopyClose
   540 00001D48 488D156FEAFFFF      <1>     lea rdx, crlf
   541 00001D4F B409                <1>     mov ah, 09h
   542 00001D51 CD41                <1>     int 41h
   543 00001D53 488D152EF0FFFF      <1>     lea rdx, fourSpc
   544 00001D5A B409                <1>     mov ah, 09h
   545 00001D5C CD41                <1>     int 41h
   546 00001D5E B402                <1>     mov ah, 02h
   547 00001D60 B231                <1>     mov dl, "1" ;1 File(s) copied
   548 00001D62 CD41                <1>     int 41h
   549 00001D64 488D158CEBFFFF      <1>     lea rdx, copyOk
   550 00001D6B B409                <1>     mov ah, 09h
   551 00001D6D CD41                <1>     int 41h
   552                              <1>     return
    13                              <2> %%_ret:
    14 00001D6F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   553                              <1> .sameFilename:
   554 00001D70 E805000000          <1>     call .leaveCopyClose ;Close the handles
   555 00001D75 E94EF9FFFF          <1>     jmp noSelfCopyError
   556                              <1> .leaveCopyClose:
   557 00001D7A 668B1D05E9FFFF      <1>     mov bx, word [sourceHdl]
   558 00001D81 B8003E0000          <1>     mov eax, 3E00h
   559 00001D86 CD41                <1>     int 41h
   560 00001D88 668B1DF9E8FFFF      <1>     mov bx, word [destHdl]
   561 00001D8F B8003E0000          <1>     mov eax, 3E00h
   562 00001D94 CD41                <1>     int 41h
   563                              <1>     return
    13                              <2> %%_ret:
    14 00001D96 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   564                              <1> .badExit:
   565                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   566 00001D97 668B1DE8E8FFFF      <1>     mov bx, word [sourceHdl]
   567 00001D9E 6681FBFFFF          <1>     cmp bx, -1
   568 00001DA3 7407                <1>     je .skipSource
   569 00001DA5 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   570 00001DAA CD41                <1>     int 41h
   571                              <1> .skipSource:
   572 00001DAC 668B1DD5E8FFFF      <1>     mov bx, word [destHdl]
   573 00001DB3 6681FBFFFF          <1>     cmp bx, -1
   574 00001DB8 0F8413F9FFFF        <1>     je badParamError
   575 00001DBE B8003E0000          <1>     mov eax, 3E00h
   576 00001DC3 CD41                <1>     int 41h
   577 00001DC5 E907F9FFFF          <1>     jmp badParamError
   578                              <1> 
   579                              <1> erase:
   580 00001DCA F605EBE2FFFFFF      <1>     test byte [arg1Flg], -1
   581 00001DD1 0F840CF9FFFF        <1>     jz badArgError
   582 00001DD7 E8AA0D0000          <1>     call buildCommandPath
   583 00001DDC 488D15FBE5FFFF      <1>     lea rdx, searchSpec
   584 00001DE3 B800410000          <1>     mov eax, 4100h  ;Delete File 
   585 00001DE8 31C9                <1>     xor ecx, ecx
   586 00001DEA CD41                <1>     int 41h
   587 00001DEC 0F82F1F8FFFF        <1>     jc badArgError
   588                              <1>     return
    13                              <2> %%_ret:
    14 00001DF2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   589                              <1> date:
   590 00001DF3 488D15A5EBFFFF      <1>     lea rdx, curDate
   591 00001DFA B409                <1>     mov ah, 09h
   592 00001DFC CD41                <1>     int 41h
   593 00001DFE B42A                <1>     mov ah, 2Ah ;DOS get date
   594 00001E00 CD41                <1>     int 41h
   595                              <1> 	;AL = day of the week (0=Sunday)
   596                              <1> 	;CX = year (1980-2099)
   597                              <1> 	;DH = month (1-12)
   598                              <1> 	;DL = day (1-31)
   599 00001E02 66890D79E7FFFF      <1>     mov word [td1], cx
   600 00001E09 881575E7FFFF        <1>     mov byte [td3], dl
   601 00001E0F 883570E7FFFF        <1>     mov byte [td4], dh
   602 00001E15 0FB6C0              <1>     movzx eax, al
   603 00001E18 89C3                <1>     mov ebx, eax
   604 00001E1A D1E3                <1>     shl ebx, 1   ;Multiply by 2
   605 00001E1C 01D8                <1>     add eax, ebx ;Make it 3 times 
   606 00001E1E 488D1556EBFFFF      <1>     lea rdx, dayName
   607 00001E25 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   608 00001E29 B903000000          <1>     mov ecx, 3  ;Print three chars
   609 00001E2E BB01000000          <1>     mov ebx, 1  ;STDOUT
   610 00001E33 B440                <1>     mov ah, 40h ;Write to handle
   611 00001E35 CD41                <1>     int 41h
   612 00001E37 B220                <1>     mov dl, " "
   613 00001E39 B402                <1>     mov ah, 02h
   614 00001E3B CD41                <1>     int 41h
   615                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   616                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   617                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   618 00001E3D 0FB7053EE7FFFF      <1>     movzx eax, word [td1]   ;Get this word
   619 00001E44 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   620 00001E47 0FB61D37E7FFFF      <1>     movzx ebx, byte [td4]
   621 00001E4E C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   622 00001E51 09D8                <1>     or eax, ebx ;Add this date to eax
   623 00001E53 0FB61D2AE7FFFF      <1>     movzx ebx, byte [td3]
   624 00001E5A 09D8                <1>     or eax, ebx
   625 00001E5C BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   626 00001E61 E802090000          <1>     call printDate
   627                              <1> 
   628 00001E66 488D1543EBFFFF      <1>     lea rdx, newDate
   629 00001E6D B409                <1>     mov ah, 09h
   630 00001E6F CD41                <1>     int 41h
   631 00001E71 488D1557EBFFFF      <1>     lea rdx, ukDate
   632 00001E78 488D0543EBFFFF      <1>     lea rax, usDate
   633 00001E7F 488D1D56EBFFFF      <1>     lea rbx, jpDate
   634 00001E86 803DA9E1FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   635 00001E8D 480F47D3            <1>     cmova rdx, rbx
   636 00001E91 480F42D0            <1>     cmovb rdx, rax
   637 00001E95 B409                <1>     mov ah, 09h
   638 00001E97 CD41                <1>     int 41h
   639                              <1> 
   640 00001E99 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   641 00001EA0 B40A                <1>     mov ah, 0Ah
   642 00001EA2 CD41                <1>     int 41h
   643 00001EA4 52                  <1>     push rdx
   644 00001EA5 488D1512E9FFFF      <1>     lea rdx, crlf
   645 00001EAC B409                <1>     mov ah, 09h
   646 00001EAE CD41                <1>     int 41h
   647 00001EB0 5A                  <1>     pop rdx
   648 00001EB1 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   649                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001EB5 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001EB7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   650                              <1>     return
    13                              <2> %%_ret:
    14 00001EB8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   651                              <1> 
   652                              <1> time:
   653 00001EB9 488D1538EBFFFF      <1>     lea rdx, curTime
   654 00001EC0 B409                <1>     mov ah, 09h
   655 00001EC2 CD41                <1>     int 41h
   656 00001EC4 B42C                <1>     mov ah, 2Ch ;DOS get time
   657 00001EC6 CD41                <1>     int 41h
   658                              <1>     ;CH = hour (0-23)
   659                              <1> 	;CL = minutes (0-59)
   660                              <1> 	;DH = seconds (0-59)
   661                              <1> 	;DL = hundredths (0-99)
   662 00001EC8 880DB4E6FFFF        <1>     mov byte [td1], cl
   663 00001ECE 882DAFE6FFFF        <1>     mov byte [td2], ch
   664 00001ED4 8815AAE6FFFF        <1>     mov byte [td3], dl
   665 00001EDA 8835A5E6FFFF        <1>     mov byte [td4], dh
   666 00001EE0 0FB6C5              <1>     movzx eax, ch
   667 00001EE3 E8140A0000          <1>     call printTime.printHours
   668                              <1> 
   669 00001EE8 8A1555E1FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   670 00001EEE B402                <1>     mov ah, 02h
   671 00001EF0 CD41                <1>     int 41h
   672                              <1> 
   673 00001EF2 0FB60589E6FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   674 00001EF9 E8EE090000          <1>     call printTime.printMinutesAlt
   675                              <1> 
   676 00001EFE 8A153FE1FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   677 00001F04 B402                <1>     mov ah, 02h
   678 00001F06 CD41                <1>     int 41h
   679                              <1> 
   680 00001F08 0FB60576E6FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   681 00001F0F E8D8090000          <1>     call printTime.printMinutesAlt
   682                              <1> 
   683 00001F14 B22E                <1>     mov dl, "."
   684 00001F16 B402                <1>     mov ah, 02h
   685 00001F18 CD41                <1>     int 41h
   686                              <1> 
   687 00001F1A 0FB60563E6FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   688 00001F21 E8C6090000          <1>     call printTime.printMinutesAlt
   689                              <1> 
   690 00001F26 488D15DCEAFFFF      <1>     lea rdx, newTime
   691 00001F2D B409                <1>     mov ah, 09h
   692 00001F2F CD41                <1>     int 41h
   693                              <1> 
   694 00001F31 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   695 00001F38 B40A                <1>     mov ah, 0Ah
   696 00001F3A CD41                <1>     int 41h
   697 00001F3C 52                  <1>     push rdx
   698 00001F3D 488D157AE8FFFF      <1>     lea rdx, crlf
   699 00001F44 B409                <1>     mov ah, 09h
   700 00001F46 CD41                <1>     int 41h
   701 00001F48 5A                  <1>     pop rdx
   702 00001F49 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   703                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001F4D 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001F4F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   704                              <1>     return
    13                              <2> %%_ret:
    14 00001F50 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   705                              <1> ctty:
   706 00001F51 F60564E1FFFFFF      <1>     test byte [arg1Flg], -1
   707 00001F58 0F8485F7FFFF        <1>     jz badArgError
   708 00001F5E F6055AE1FFFFFF      <1>     test byte [arg2Flg], -1
   709 00001F65 0F8578F7FFFF        <1>     jnz badArgError
   710 00001F6B 488D352BE2FFFF      <1>     lea rsi, cmdBuffer
   711 00001F72 0FB60544E1FFFF      <1>     movzx eax, byte [arg1Off]
   712 00001F79 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   713 00001F7C 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   714 00001F80 750F                <1>     jne .noDrive
   715 00001F82 0FB60535E1FFFF      <1>     movzx eax, byte [arg1FCBret]
   716 00001F89 3CFF                <1>     cmp al, -1
   717 00001F8B 0F8449F7FFFF        <1>     je badDriveError
   718                              <1> .noDrive:
   719                              <1>     ;Now we open the provided file
   720 00001F91 E8730D0000          <1>     call copyArgumentToSearchSpec
   721 00001F96 488D1541E4FFFF      <1>     lea rdx, searchSpec
   722 00001F9D B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   723 00001FA2 CD41                <1>     int 41h
   724 00001FA4 0F8242F7FFFF        <1>     jc badFileError
   725 00001FAA 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   726 00001FAD B800440000          <1>     mov eax, 4400h  ;Get device word
   727 00001FB2 CD41                <1>     int 41h
   728 00001FB4 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   729 00001FB7 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   730                              <1>     ;Now we set this handle to be STDIO
   731 00001FB9 80CA03              <1>     or dl, 3    ;Set STDIO bits
   732 00001FBC 30F6                <1>     xor dh, dh
   733 00001FBE B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   734 00001FC3 CD41                <1>     int 41h
   735                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   736 00001FC5 31C9                <1>     xor ecx, ecx    ;STDIN
   737 00001FC7 B446                <1>     mov ah, 46h
   738 00001FC9 CD41                <1>     int 41h
   739 00001FCB FFC1                <1>     inc ecx         ;STDOUT
   740 00001FCD B446                <1>     mov ah, 46h
   741 00001FCF CD41                <1>     int 41h
   742 00001FD1 FFC1                <1>     inc ecx         ;STDERR
   743 00001FD3 B446                <1>     mov ah, 46h
   744 00001FD5 CD41                <1>     int 41h
   745 00001FD7 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   746 00001FD9 CD41                <1>     int 41h
   747                              <1>     return
    13                              <2> %%_ret:
    14 00001FDB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   748                              <1> .badCharDev:
   749 00001FDC 488D1525EBFFFF      <1>     lea rdx, badDev
   750 00001FE3 B409                <1>     mov ah, 09h
   751 00001FE5 CD41                <1>     int 41h
   752 00001FE7 B43E                <1>     mov ah, 3Eh ;Close opened handle
   753 00001FE9 CD41                <1>     int 41h
   754                              <1>     return
    13                              <2> %%_ret:
    14 00001FEB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   755                              <1> 
   756                              <1> cls:  
   757 00001FEC B800440000          <1>     mov eax, 4400h  ;Get device info
   758 00001FF1 BB01000000          <1>     mov ebx, 1      ;for handle 1
   759 00001FF6 CD41                <1>     int 41h         ;in dx
   760 00001FF8 F7C280000000        <1>     test edx, devCharDev
   761 00001FFE 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   762 00002000 F7C210000000        <1>     test edx, charDevFastOut
   763 00002006 743E                <1>     jz .doAnsi
   764                              <1>     ;Test if Int 49h uses Int 30h
   765                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   766                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
   767 00002008 B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
   768 0000200D CD41                <1>     int 41h
   769                              <1> .biosCheck:
   770 0000200F 66813BCD30          <1>     cmp word [rbx], 30CDh
   771 00002014 740C                <1>     je .biosConfirmed
   772 00002016 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   773 0000201B 7429                <1>     je .doAnsi
   774 0000201D 48FFC3              <1>     inc rbx
   775 00002020 EBED                <1>     jmp short .biosCheck
   776                              <1> .biosConfirmed:
   777                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   778 00002022 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   779 00002024 31DB                <1>     xor ebx, ebx
   780 00002026 CD30                <1>     int 30h
   781 00002028 B40F                <1>     mov ah, 0Fh ;Get screen mode
   782 0000202A CD30                <1>     int 30h
   783 0000202C 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   784 0000202F FECA                <1>     dec dl
   785 00002031 B619                <1>     mov dh, 25  ;Number of rows is standard
   786 00002033 31C0                <1>     xor eax, eax
   787 00002035 89C1                <1>     mov ecx, eax
   788 00002037 B707                <1>     mov bh, 7   ;Screen attributes
   789 00002039 B406                <1>     mov ah, 6   ;Scroll
   790 0000203B CD30                <1>     int 30h
   791 0000203D 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   792 0000203F B700                <1>     mov bh, 0   ;Page 0
   793 00002041 B402                <1>     mov ah, 2
   794 00002043 CD30                <1>     int 30h
   795                              <1>     return
    13                              <2> %%_ret:
    14 00002045 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   796                              <1> .doAnsi:
   797                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   798                              <1> ;4 chars in the ansi routine
   799                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   800                              <1> ; understand ANSI codes
   801 00002046 488D3537EDFFFF      <1>     lea rsi, ansiCls
   802 0000204D B904000000          <1>     mov ecx, 4
   803 00002052 B406                <1>     mov ah, 06h ;Raw char output
   804                              <1> .ansiLp:
   805 00002054 AC                  <1>     lodsb   ;Get the char in 
   806 00002055 88C2                <1>     mov dl, al
   807 00002057 CD41                <1>     int 41h
   808 00002059 FFC9                <1>     dec ecx
   809 0000205B 75F7                <1>     jnz .ansiLp
   810                              <1>     return
    13                              <2> %%_ret:
    14 0000205D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   811                              <1> 
   812                              <1> break:
   813 0000205E F60557E0FFFFFF      <1>     test byte [arg1Flg], -1
   814 00002065 752D                <1>     jnz .argumentProvided
   815                              <1>     ;Here we just get the status of break
   816 00002067 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   817 0000206C CD41                <1>     int 41h
   818 0000206E 88D3                <1>     mov bl, dl
   819 00002070 488D1533EBFFFF      <1>     lea rdx, breakIs
   820 00002077 B409                <1>     mov ah, 09h
   821 00002079 CD41                <1>     int 41h
   822 0000207B 488D1523EBFFFF      <1>     lea rdx, onMes
   823 00002082 488D0D16EBFFFF      <1>     lea rcx, offMes
   824 00002089 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   825 0000208B 480F44D1            <1>     cmovz rdx, rcx
   826 0000208F B409                <1>     mov ah, 09h
   827 00002091 CD41                <1>     int 41h
   828                              <1>     return
    13                              <2> %%_ret:
    14 00002093 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   829                              <1> .argumentProvided:
   830 00002094 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   831 00002098 AD                  <1>     lodsd   ;Read the word
   832 00002099 89C3                <1>     mov ebx, eax
   833 0000209B 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   834 000020A0 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   835 000020A3 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   836 000020A8 7416                <1>     je .maybeOn
   837 000020AA 663D4F46            <1>     cmp ax, "OF"
   838 000020AE 7523                <1>     jne .badOnOff
   839 000020B0 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   840 000020B5 6681FB4620          <1>     cmp bx, "F "
   841 000020BA 7517                <1>     jne .badOnOff
   842                              <1>     ;Set off
   843 000020BC 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   844 000020BE EB0B                <1>     jmp short .setBreak
   845                              <1> .maybeOn:
   846 000020C0 663D4F4E            <1>     cmp ax, "ON"
   847 000020C4 750D                <1>     jne .badOnOff
   848                              <1>     ;Set on
   849 000020C6 BA01000000          <1>     mov edx, 1
   850                              <1> .setBreak:
   851 000020CB B801330000          <1>     mov eax, 3301h  ;Set break
   852 000020D0 CD41                <1>     int 41h
   853                              <1>     return
    13                              <2> %%_ret:
    14 000020D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   854                              <1> .badOnOff:
   855 000020D3 488D15BAECFFFF      <1>     lea rdx, badOnOff
   856 000020DA B409                <1>     mov ah, 09h
   857 000020DC CD41                <1>     int 41h
   858                              <1>     return
    13                              <2> %%_ret:
    14 000020DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   859                              <1> 
   860                              <1> verify:
   861 000020DF F605D6DFFFFFFF      <1>     test byte [arg1Flg], -1
   862 000020E6 752D                <1>     jnz .argumentProvided
   863                              <1>     ;Here we just get the status of break
   864 000020E8 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   865 000020ED CD41                <1>     int 41h
   866 000020EF 88C3                <1>     mov bl, al
   867 000020F1 488D15BCEAFFFF      <1>     lea rdx, verifyIs
   868 000020F8 B409                <1>     mov ah, 09h
   869 000020FA CD41                <1>     int 41h
   870 000020FC 488D15A2EAFFFF      <1>     lea rdx, onMes
   871 00002103 488D0D95EAFFFF      <1>     lea rcx, offMes
   872 0000210A 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   873 0000210C 480F44D1            <1>     cmovz rdx, rcx
   874 00002110 B409                <1>     mov ah, 09h
   875 00002112 CD41                <1>     int 41h
   876                              <1>     return
    13                              <2> %%_ret:
    14 00002114 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   877                              <1> .argumentProvided:
   878 00002115 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   879 00002119 AD                  <1>     lodsd   ;Read the word
   880 0000211A 89C3                <1>     mov ebx, eax
   881 0000211C 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   882 00002121 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   883 00002124 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   884 00002129 7416                <1>     je .maybeOn
   885 0000212B 663D4F46            <1>     cmp ax, "OF"
   886 0000212F 751F                <1>     jne .badOnOff
   887 00002131 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   888 00002136 6681FB4620          <1>     cmp bx, "F "
   889 0000213B 7513                <1>     jne .badOnOff
   890                              <1>     ;Set off
   891 0000213D 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   892 0000213F EB0A                <1>     jmp short .setVerify
   893                              <1> .maybeOn:
   894 00002141 663D4F4E            <1>     cmp ax, "ON"
   895 00002145 7509                <1>     jne .badOnOff
   896                              <1>     ;Set on
   897 00002147 31C0                <1>     xor eax, eax
   898 00002149 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   899                              <1> .setVerify:
   900 0000214B B42E                <1>     mov ah, 2Eh  ;Set Verify
   901 0000214D CD41                <1>     int 41h
   902                              <1>     return
    13                              <2> %%_ret:
    14 0000214F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   903                              <1> .badOnOff:
   904 00002150 488D153DECFFFF      <1>     lea rdx, badOnOff
   905 00002157 B409                <1>     mov ah, 09h
   906 00002159 CD41                <1>     int 41h
   907                              <1>     return
    13                              <2> %%_ret:
    14 0000215B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   908                              <1> 
   909                              <1> rename:
   910 0000215C F60559DFFFFFFF      <1>     test byte [arg1Flg], -1
   911 00002163 0F847AF5FFFF        <1>     jz badArgError
   912 00002169 F6054FDFFFFFFF      <1>     test byte [arg2Flg], -1
   913 00002170 0F846DF5FFFF        <1>     jz badArgError
   914 00002176 488D3520E0FFFF      <1>     lea rsi, cmdBuffer
   915 0000217D 0FB60539DFFFFF      <1>     movzx eax, byte [arg1Off]
   916 00002184 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   917                              <1>     ;rsi points to terminating char
   918 00002187 AC                  <1>     lodsb   ;Get first char in AL
   919 00002188 48FFCE              <1>     dec rsi ;Go back to this char
   920 0000218B E8EE080000          <1>     call isALEndOfCommand
   921 00002190 0F823BF5FFFF        <1>     jc badParamError
   922 00002196 488D3DE9E3FFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   923                              <1> .copyName1:
   924 0000219D AC                  <1>     lodsb
   925 0000219E E8DB080000          <1>     call isALEndOfCommand
   926 000021A3 0F8428F5FFFF        <1>     je badParamError
   927 000021A9 E8AD080000          <1>     call isALterminator
   928 000021AE 7403                <1>     jz .endOfName1
   929 000021B0 AA                  <1>     stosb
   930 000021B1 EBEA                <1>     jmp short .copyName1
   931                              <1> .endOfName1:
   932 000021B3 31C0                <1>     xor eax, eax
   933 000021B5 AA                  <1>     stosb   ;Store this 0 at rdi
   934 000021B6 488D35E0DFFFFF      <1>     lea rsi, cmdBuffer
   935 000021BD 0FB605FCDEFFFF      <1>     movzx eax, byte [arg2Off]
   936 000021C4 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   937 000021C7 807E013A            <1>     cmp byte [rsi + 1], ":" ;If dest path char 2 is :, must be X:, not allowed
   938 000021CB 0F8400F5FFFF        <1>     je badParamError
   939 000021D1 AC                  <1>     lodsb   ;Get first char in AL
   940 000021D2 48FFCE              <1>     dec rsi ;Go back to this char
   941 000021D5 E8A4080000          <1>     call isALEndOfCommand
   942 000021DA 0F82F1F4FFFF        <1>     jc badParamError
   943 000021E0 488D3D1FE4FFFF      <1>     lea rdi, destPath
   944                              <1> .copyName2:
   945 000021E7 AC                  <1>     lodsb
   946 000021E8 E891080000          <1>     call isALEndOfCommand
   947 000021ED 740A                <1>     je .endOfName2
   948 000021EF E867080000          <1>     call isALterminator
   949 000021F4 7403                <1>     jz .endOfName2
   950 000021F6 AA                  <1>     stosb
   951 000021F7 EBEE                <1>     jmp short .copyName2
   952                              <1> .endOfName2:
   953 000021F9 31C0                <1>     xor eax, eax
   954 000021FB AA                  <1>     stosb   ;Store this 0 at rdi
   955 000021FC 488D1583E3FFFF      <1>     lea rdx, sourcePath
   956 00002203 488D3DFCE3FFFF      <1>     lea rdi, destPath
   957 0000220A B800560000          <1>     mov eax, 5600h
   958 0000220F CD41                <1>     int 41h
   959                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002211 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002213 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   960 00002214 3C0F                <1>     cmp al, errBadDrv
   961 00002216 0F84BEF4FFFF        <1>     je badDriveError
   962 0000221C 3C0B                <1>     cmp al, errBadFmt
   963 0000221E 0F84DAF4FFFF        <1>     je badDirError
   964 00002224 E9CCF4FFFF          <1>     jmp badDupFnf
   965                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   966                              <1> touch:
   967                              <1> ;Temporarily used to create files
   968 00002229 F6058CDEFFFFFF      <1>     test byte [arg1Flg], -1
   969 00002230 0F84ADF4FFFF        <1>     jz badArgError
   970 00002236 E84B090000          <1>     call buildCommandPath
   971 0000223B 488D159CE1FFFF      <1>     lea rdx, searchSpec
   972 00002242 B8003C0000          <1>     mov eax, 3C00h  ;Create file 
   973 00002247 31C9                <1>     xor ecx, ecx
   974 00002249 CD41                <1>     int 41h
   975 0000224B 720B                <1>     jc .touchError
   976 0000224D 0FB7D8              <1>     movzx ebx, ax
   977 00002250 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
   978 00002255 CD41                <1>     int 41h
   979                              <1>     return
    13                              <2> %%_ret:
    14 00002257 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   980                              <1> .touchError:
   981 00002258 488D15E3EAFFFF      <1>     lea rdx, touchErr
   982 0000225F E9A1F4FFFF          <1>     jmp badCmn
   983                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   984                              <1> truename:
   985 00002264 F60551DEFFFFFF      <1>     test byte [arg1Flg], -1
   986 0000226B 0F8472F4FFFF        <1>     jz badArgError
   987 00002271 E810090000          <1>     call buildCommandPath
   988                              <1>     ;Explicitly call Truename if we remove truename from this function
   989 00002276 488D3D61E1FFFF      <1>     lea rdi, searchSpec
   990 0000227D E895070000          <1>     call strlen
   991 00002282 FFC9                <1>     dec ecx ;Don't print terminating null
   992 00002284 488D1553E1FFFF      <1>     lea rdx, searchSpec
   993 0000228B BB01000000          <1>     mov ebx, 01
   994 00002290 B440                <1>     mov ah, 40h
   995 00002292 CD41                <1>     int 41h
   996 00002294 E8B9040000          <1>     call printCRLF
   997                              <1>     return
    13                              <2> %%_ret:
    14 00002299 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   998                              <1> 
   999                              <1> volume:
  1000 0000229A 488D35FEDEFFFF      <1>     lea rsi, cmdBuffer + 2  ;Get the command buffer
  1001 000022A1 E8DF070000          <1>     call skipSpaces
  1002 000022A6 4881C603000000      <1>     add rsi, 3  ;Go past the VOL command
  1003 000022AD E8D3070000          <1>     call skipSpaces
  1004 000022B2 AC                  <1>     lodsb   ;Get the first char, and point rsi to next char
  1005 000022B3 E8C6070000          <1>     call isALEndOfCommand   ;If this char is end of command, use current drive
  1006 000022B8 7507                <1>     jnz .checkDriveLetter
  1007 000022BA E853070000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1008 000022BF EB35                <1>     jmp short .dirEP
  1009                              <1> .checkDriveLetter:
  1010 000022C1 803E3A              <1>     cmp byte [rsi], ":" ;If this is not a :, fail
  1011 000022C4 0F8510F4FFFF        <1>     jne badDriveError
  1012 000022CA 4889F7              <1>     mov rdi, rsi    ;Save start of drive spec in rsi
  1013 000022CD 48FFC6              <1>     inc rsi  ;Go past the X: spec
  1014 000022D0 E8B0070000          <1>     call skipSpaces
  1015 000022D5 AC                  <1>     lodsb   ;Get the non-space char in al
  1016 000022D6 E8A3070000          <1>     call isALEndOfCommand   ;The next non-space char must be terminator
  1017 000022DB 0F85F9F3FFFF        <1>     jne badDriveError
  1018                              <1> ;This argument should've been parsed into FCB1 so use that result
  1019 000022E1 8A05D7DDFFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1020 000022E7 A8FF                <1>     test al, -1
  1021 000022E9 0F85EBF3FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1022 000022EF 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1023 000022F4 FFC8                <1>     dec eax ;Convert to 0 based number
  1024                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al
  1025 000022F6 0541000000          <1>     add eax, "A" ;Get ASCII representation of 0 based number
  1026 000022FB 88057AE2FFFF        <1>     mov byte [volPathBuf], al   ;Store ASCII letter here
  1027 00002301 488D15CADDFFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
  1028 00002308 B41A                <1>     mov ah, 1Ah
  1029 0000230A CD41                <1>     int 41h
  1030 0000230C 488D1568E2FFFF      <1>     lea rdx, volPathBuf
  1031 00002313 66B90800            <1>     mov cx, dirVolumeID
  1032 00002317 B44E                <1>     mov ah, 4Eh ;Find first
  1033 00002319 CD41                <1>     int 41h
  1034 0000231B 7221                <1>     jc .skipVolLbl
  1035 0000231D 488D35CCDDFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1036 00002324 488D3D43E2FFFF      <1>     lea rdi, volLblSpc
  1037 0000232B B90B000000          <1>     mov ecx, 11 ;Get the 11 chars of the volume label
  1038                              <1> .dirLblCopy:
  1039 00002330 AC                  <1>     lodsb   ;Get the first char
  1040 00002331 3C00                <1>     cmp al, 0
  1041 00002333 7409                <1>     je .skipVolLbl  ;Jump with CF=NC
  1042 00002335 3C2E                <1>     cmp al, "."
  1043 00002337 7401                <1>     je .dirLblSkipStore
  1044 00002339 AA                  <1>     stosb
  1045                              <1> .dirLblSkipStore:
  1046 0000233A FFC9                <1>     dec ecx
  1047 0000233C 75F2                <1>     jnz .dirLblCopy
  1048                              <1>     ;Fallthru with CF=NC
  1049                              <1> .skipVolLbl:
  1050                              <1> ;Print volume label information now
  1051                              <1> ;Propagates the CF if CF was set    
  1052 0000233E 9C                  <1>     pushfq
  1053 0000233F 488D1578E4FFFF      <1>     lea rdx, crlf
  1054 00002346 B409                <1>     mov ah, 09h
  1055 00002348 CD41                <1>     int 41h
  1056 0000234A 488D15F2E6FFFF      <1>     lea rdx, volMes
  1057 00002351 B409                <1>     mov ah, 09h
  1058 00002353 CD41                <1>     int 41h
  1059 00002355 8A1520E2FFFF        <1>     mov dl, byte [volPathBuf]   ;Print the drive letter out
  1060 0000235B B402                <1>     mov ah, 02h
  1061 0000235D CD41                <1>     int 41h
  1062 0000235F 9D                  <1>     popfq
  1063 00002360 7317                <1>     jnc .volIDOk
  1064 00002362 488D15F1E6FFFF      <1>     lea rdx, volNo
  1065 00002369 B409                <1>     mov ah, 09h
  1066 0000236B CD41                <1>     int 41h
  1067 0000236D 488D154AE4FFFF      <1>     lea rdx, crlf
  1068 00002374 B409                <1>     mov ah, 09h
  1069 00002376 CD41                <1>     int 41h
  1070                              <1>     return
    13                              <2> %%_ret:
    14 00002378 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1071                              <1> .volIDOk:
  1072 00002379 488D15D5E6FFFF      <1>     lea rdx, volOk
  1073 00002380 B409                <1>     mov ah, 09h
  1074 00002382 CD41                <1>     int 41h
  1075 00002384 488D3DE3E1FFFF      <1>     lea rdi, volLblSpc
  1076 0000238B E887060000          <1>     call strlen
  1077 00002390 FFC9                <1>     dec ecx
  1078 00002392 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
  1079 00002396 488D15D1E1FFFF      <1>     lea rdx, volLblSpc
  1080 0000239D B409                <1>     mov ah, 09h
  1081 0000239F CD41                <1>     int 41h
  1082 000023A1 488D1516E4FFFF      <1>     lea rdx, crlf
  1083 000023A8 B409                <1>     mov ah, 09h
  1084 000023AA CD41                <1>     int 41h
  1085                              <1>     return
    13                              <2> %%_ret:
    14 000023AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1086                              <1> 
  1087                              <1> version:
  1088 000023AD 488D150AE4FFFF      <1>     lea rdx, crlf
  1089 000023B4 B409                <1>     mov ah, 09h
  1090 000023B6 CD41                <1>     int 41h
  1091 000023B8 488D1572E6FFFF      <1>     lea rdx, dosVer
  1092 000023BF B409                <1>     mov ah, 09h
  1093 000023C1 CD41                <1>     int 41h
  1094 000023C3 E80C000000          <1>     call .printVersionNumber
  1095 000023C8 488D15EFE3FFFF      <1>     lea rdx, crlf
  1096 000023CF B409                <1>     mov ah, 09h
  1097 000023D1 CD41                <1>     int 41h
  1098                              <1>     return
    13                              <2> %%_ret:
    14 000023D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1099                              <1> .printVersionNumber:
  1100 000023D4 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1101 000023D6 CD41                <1>     int 41h
  1102 000023D8 50                  <1>     push rax
  1103 000023D9 0FB6C0              <1>     movzx eax, al
  1104 000023DC E843080000          <1>     call printDecimalWord
  1105 000023E1 B22E                <1>     mov dl, "."
  1106 000023E3 B402                <1>     mov ah, 02h
  1107 000023E5 CD41                <1>     int 41h
  1108 000023E7 58                  <1>     pop rax
  1109 000023E8 0FB6C4              <1>     movzx eax, ah
  1110 000023EB E834080000          <1>     call printDecimalWord
  1111                              <1>     return
    13                              <2> %%_ret:
    14 000023F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1112                              <1> 
  1113                              <1> 
  1114                              <1> memory:
  1115 000023F1 488B1D27DCFFFF      <1>     mov rbx, qword [sysVars]
  1116 000023F8 4885DB              <1>     test rbx, rbx
  1117 000023FB 7510                <1>     jnz .sysvarsOK
  1118 000023FD 488D15DFE8FFFF      <1>     lea rdx, memBad0
  1119 00002404 B409                <1>     mov ah, 09h
  1120 00002406 CD41                <1>     int 41h
  1121 00002408 E9BA080000          <1>     jmp freezePC.altEP
  1122                              <1> .sysvarsOK:
  1123                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1124                              <1>     ; and rcx to store Application memory
  1125 0000240D 31F6                <1>     xor esi, esi
  1126 0000240F 31FF                <1>     xor edi, edi
  1127 00002411 31ED                <1>     xor ebp, ebp
  1128 00002413 31C9                <1>     xor ecx, ecx
  1129 00002415 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1130 00002419 488B1B              <1>     mov rbx, qword [rbx]
  1131                              <1> .memLp:
  1132 0000241C 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1133 0000241F 7409                <1>     je .validMCB
  1134 00002421 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1135 00002424 0F8501010000        <1>     jne .badMCBFound
  1136                              <1> .validMCB:
  1137 0000242A 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1138 0000242D 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1139 00002431 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1140 00002439 7505                <1>     jne .notDOS
  1141 0000243B 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1142 0000243E EB21                <1>     jmp short .gotoNext
  1143                              <1> .notDOS:
  1144 00002440 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1145 00002448 7505                <1>     jne .notFree
  1146 0000244A 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1147 0000244D EB12                <1>     jmp short .gotoNext
  1148                              <1> .notFree:
  1149 0000244F 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1150 00002457 7505                <1>     jne .notHole
  1151 00002459 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1152 0000245C EB03                <1>     jmp short .gotoNext
  1153                              <1> .notHole:
  1154 0000245E 4801C1              <1>     add rcx, rax    ;Add to Application count
  1155                              <1> .gotoNext:
  1156 00002461 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1157 00002464 7407                <1>     je .endOfWalk
  1158 00002466 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1159 0000246B EBAF                <1>     jmp short .memLp
  1160                              <1> .endOfWalk:
  1161                              <1>     
  1162 0000246D 488D15D0E7FFFF      <1>     lea rdx, memDOS
  1163 00002474 B409                <1>     mov ah, 09h
  1164 00002476 CD41                <1>     int 41h
  1165 00002478 4889F0              <1>     mov rax, rsi
  1166 0000247B E89D000000          <1>     call .mcbPrintAmount
  1167 00002480 488D1555E8FFFF      <1>     lea rdx, memByte
  1168 00002487 B409                <1>     mov ah, 09h
  1169 00002489 CD41                <1>     int 41h
  1170                              <1> 
  1171 0000248B 4885ED              <1>     test rbp, rbp
  1172 0000248E 741E                <1>     jz .skipHole
  1173 00002490 488D15F9E7FFFF      <1>     lea rdx, memHole
  1174 00002497 B409                <1>     mov ah, 09h
  1175 00002499 CD41                <1>     int 41h
  1176 0000249B 4889E8              <1>     mov rax, rbp
  1177 0000249E E87A000000          <1>     call .mcbPrintAmount
  1178 000024A3 488D1532E8FFFF      <1>     lea rdx, memByte
  1179 000024AA B409                <1>     mov ah, 09h
  1180 000024AC CD41                <1>     int 41h
  1181                              <1> .skipHole:
  1182                              <1> 
  1183 000024AE 488D15B5E7FFFF      <1>     lea rdx, memApp
  1184 000024B5 B409                <1>     mov ah, 09h
  1185 000024B7 CD41                <1>     int 41h
  1186 000024B9 4889C8              <1>     mov rax, rcx
  1187 000024BC E85C000000          <1>     call .mcbPrintAmount
  1188 000024C1 488D1514E8FFFF      <1>     lea rdx, memByte
  1189 000024C8 B409                <1>     mov ah, 09h
  1190 000024CA CD41                <1>     int 41h
  1191                              <1> 
  1192 000024CC 488D15E3E7FFFF      <1>     lea rdx, memFree
  1193 000024D3 B409                <1>     mov ah, 09h
  1194 000024D5 CD41                <1>     int 41h
  1195 000024D7 4889F8              <1>     mov rax, rdi
  1196 000024DA E83E000000          <1>     call .mcbPrintAmount
  1197 000024DF 488D15F6E7FFFF      <1>     lea rdx, memByte
  1198 000024E6 B409                <1>     mov ah, 09h
  1199 000024E8 CD41                <1>     int 41h
  1200                              <1> 
  1201 000024EA 488D152DE7FFFF      <1>     lea rdx, memSys
  1202 000024F1 B409                <1>     mov ah, 09h
  1203 000024F3 CD41                <1>     int 41h
  1204 000024F5 4889F0              <1>     mov rax, rsi
  1205 000024F8 4801F8              <1>     add rax, rdi
  1206 000024FB 4801C8              <1>     add rax, rcx
  1207 000024FE 4801E8              <1>     add rax, rbp
  1208 00002501 E817000000          <1>     call .mcbPrintAmount
  1209 00002506 488D15CFE7FFFF      <1>     lea rdx, memByte
  1210 0000250D B409                <1>     mov ah, 09h
  1211 0000250F CD41                <1>     int 41h
  1212                              <1> 
  1213 00002511 488D15A6E2FFFF      <1>     lea rdx, crlf
  1214 00002518 B409                <1>     mov ah, 09h
  1215 0000251A CD41                <1>     int 41h
  1216                              <1>     return
    13                              <2> %%_ret:
    14 0000251C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1217                              <1> 
  1218                              <1> .mcbPrintAmount:
  1219 0000251D 51                  <1>     push rcx
  1220 0000251E 56                  <1>     push rsi
  1221 0000251F 57                  <1>     push rdi
  1222 00002520 55                  <1>     push rbp
  1223 00002521 E8FE060000          <1>     call printDecimalWord
  1224 00002526 5D                  <1>     pop rbp
  1225 00002527 5F                  <1>     pop rdi
  1226 00002528 5E                  <1>     pop rsi
  1227 00002529 59                  <1>     pop rcx
  1228                              <1>     return
    13                              <2> %%_ret:
    14 0000252A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1229                              <1> .badMCBFound:
  1230 0000252B 488D15F1E7FFFF      <1>     lea rdx, memBad2
  1231 00002532 B409                <1>     mov ah, 09h
  1232 00002534 CD41                <1>     int 41h
  1233 00002536 E98C070000          <1>     jmp freezePC.altEP
  1234                              <1> 
  1235                              <1> type:
  1236 0000253B F6057ADBFFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1237 00002542 0F849BF1FFFF        <1>     jz badArgError
  1238 00002548 F60570DBFFFFFF      <1>     test byte [arg2Flg], -1
  1239 0000254F 0F858EF1FFFF        <1>     jnz badArgError         ;If this set, error
  1240 00002555 488D3541DCFFFF      <1>     lea rsi, cmdBuffer
  1241 0000255C 0FB6055ADBFFFF      <1>     movzx eax, byte [arg1Off]
  1242 00002563 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1243 00002566 803E0D              <1>     cmp byte [rsi], CR
  1244 00002569 0F8474F1FFFF        <1>     je badArgError
  1245 0000256F 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1246 00002573 750F                <1>     jne .noDrive
  1247 00002575 0FB60542DBFFFF      <1>     movzx eax, byte [arg1FCBret]
  1248 0000257C 3CFF                <1>     cmp al, -1
  1249 0000257E 0F8456F1FFFF        <1>     je badDriveError
  1250                              <1> .noDrive:
  1251                              <1>     ;Now we open the provided file
  1252 00002584 E880070000          <1>     call copyArgumentToSearchSpec
  1253 00002589 488D154EDEFFFF      <1>     lea rdx, searchSpec
  1254 00002590 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1255 00002595 CD41                <1>     int 41h
  1256 00002597 0F824FF1FFFF        <1>     jc badFileError
  1257 0000259D 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1258 000025A4 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1259                              <1> .lp:
  1260 000025A7 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1261 000025AC B43F                <1>     mov ah, 3Fh ;Read handle
  1262 000025AE CD41                <1>     int 41h
  1263 000025B0 89C1                <1>     mov ecx, eax
  1264 000025B2 67E317              <1>     jecxz .exit
  1265 000025B5 53                  <1>     push rbx    ;Save the original in handle
  1266 000025B6 BB01000000          <1>     mov ebx, 1  ;STDOUT
  1267 000025BB B440                <1>     mov ah, 40h
  1268 000025BD CD41                <1>     int 41h
  1269 000025BF 5B                  <1>     pop rbx ;Get back the original read handle
  1270 000025C0 720F                <1>     jc .exitBad
  1271 000025C2 39C8                <1>     cmp eax, ecx
  1272 000025C4 74E1                <1>     je .lp
  1273 000025C6 FFC9                <1>     dec ecx ;One less for a ^Z
  1274 000025C8 39C8                <1>     cmp eax, ecx
  1275 000025CA 7505                <1>     jne .exitBad
  1276                              <1> .exit:
  1277 000025CC B43E                <1>     mov ah, 3Eh ;Close handle
  1278 000025CE CD41                <1>     int 41h
  1279                              <1>     return
    13                              <2> %%_ret:
    14 000025D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1280                              <1> .exitBad:
  1281                              <1>     ;Print a disk error message... use a table to build the message but for
  1282                              <1>     ; now, just exit
  1283                              <1>     ;If it is a char device, don't print a error
  1284 000025D1 EBF9                <1>     jmp short .exit
  1285                              <1> 
  1286                              <1> exit:
  1287 000025D3 F60553DAFFFFFF      <1>     test byte [permaSwitch], -1
  1288                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000025DA 75(D0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1289 000025DC 488B0534DAFFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1290 000025E3 483DFFFFFFFF        <1>     cmp rax, -1
  1291                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000025E9 74(D0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1292 000025EB 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1293                              <1> 
  1294 000025EF 488B1538DAFFFF      <1>     mov rdx, qword [parentInt42]
  1295 000025F6 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
  1296 000025FA B842250000          <1>     mov eax, 2542h
  1297 000025FF CD41                <1>     int 41h
  1298                              <1> 
  1299 00002601 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1300 00002606 CD41                <1>     int 41h
  1301                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00002608 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1302                              <1> 
  1303                              <1> launchChild:
  1304                              <1> ;We run EXEC on this and the child task will return via applicationReturn
  1305                              <1> ;Here we must search the CWD or all path componants before failing
  1306                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
  1307 00002609 488D15C2DAFFFF      <1>     lea rdx, cmdFFBlock
  1308 00002610 B41A                <1>     mov ah, 1Ah     ;Set DTA for task
  1309 00002612 CD41                <1>     int 41h
  1310                              <1> 
  1311 00002614 8B05B1DAFFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
  1312 0000261A 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1313 0000261F 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1314 00002624 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
  1315 00002629 741D                <1>     je .noExt
  1316 0000262B E87DEBFFFF          <1>     call checkExtensionExec ;ZF=ZE => Executable
  1317 00002630 0F8510010000        <1>     jnz .dfltErrExit
  1318                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1319 00002636 0F820A010000        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
  1320                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1321                              <1>     ;So it is a com or exe that we are searching for for now
  1322 0000263C 488D3DDADBFFFF      <1>     lea rdi, cmdPathSpec
  1323 00002643 4889FA              <1>     mov rdx, rdi
  1324 00002646 EB24                <1>     jmp short .search
  1325                              <1> .noExt:
  1326                              <1>     ;If the filename has no extension, append a .*
  1327                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
  1328 00002648 31DB                <1>     xor ebx, ebx
  1329 0000264A 488D3DCCDBFFFF      <1>     lea rdi, cmdPathSpec
  1330 00002651 4889FA              <1>     mov rdx, rdi
  1331 00002654 31C0                <1>     xor eax, eax
  1332 00002656 B9FFFFFFFF          <1>     mov ecx, -1
  1333 0000265B F2AE                <1>     repne scasb
  1334 0000265D 48FFCF              <1>     dec rdi ;Point to the terminating null
  1335 00002660 4889FD              <1>     mov rbp, rdi    ;Temporarily store the ptr to the . in rbp
  1336 00002663 66B82E2A            <1>     mov ax, ".*"
  1337 00002667 66AB                <1>     stosw
  1338 00002669 30C0                <1>     xor al, al  ;Store terminating null
  1339 0000266B AA                  <1>     stosb
  1340                              <1> .search:
  1341 0000266C B906000000          <1>     mov ecx, dirIncFiles
  1342 00002671 B44E                <1>     mov ah, 4Eh ;Find First File
  1343 00002673 CD41                <1>     int 41h
  1344 00002675 0F82CB000000        <1>     jc .dfltErrExit
  1345 0000267B E879000000          <1>     call .noExtCheckExt
  1346                              <1> .moreSearch:
  1347 00002680 B44F                <1>     mov ah, 4Fh
  1348 00002682 CD41                <1>     int 41h
  1349 00002684 7207                <1>     jc .noMoreFiles
  1350 00002686 E86E000000          <1>     call .noExtCheckExt
  1351 0000268B EBF3                <1>     jmp short .moreSearch
  1352                              <1> .noMoreFiles:
  1353 0000268D 85DB                <1>     test ebx, ebx
  1354 0000268F 0F84B1000000        <1>     jz .dfltErrExit
  1355                              <1> ;So we have a valid executable
  1356 00002695 4889EF              <1>     mov rdi, rbp    ;Get back ptr to the .*,0
  1357 00002698 F7C301000000        <1>     test ebx, 1
  1358 0000269E 7407                <1>     jz .launchexebat
  1359 000026A0 B82E434F4D          <1>     mov eax, ".COM"
  1360 000026A5 EB14                <1>     jmp short .launch
  1361                              <1> .launchexebat:
  1362 000026A7 F7C302000000        <1>     test ebx, 2
  1363 000026AD 7407                <1>     jz .launchbat
  1364 000026AF B82E455845          <1>     mov eax, ".EXE"
  1365 000026B4 EB05                <1>     jmp short .launch
  1366                              <1> .launchbat:
  1367                              <1> ;Temporary For BAT
  1368 000026B6 E98B000000          <1>     jmp .dfltErrExit
  1369                              <1> .launch:
  1370 000026BB AB                  <1>     stosd
  1371 000026BC 30C0                <1>     xor al, al
  1372 000026BE AA                  <1>     stosb   ;Store the terminating null
  1373 000026BF 488D1D37DAFFFF      <1>     lea rbx, launchBlock
  1374 000026C6 31C0                <1>     xor eax, eax
  1375 000026C8 488903              <1>     mov qword [rbx + execProg.pEnv], rax    ;Tell DOS to copy my current Env
  1376 000026CB 498D8080000000      <1>     lea rax, qword [r8 + cmdLineCnt]
  1377 000026D2 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1378 000026D6 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1379 000026DA 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1380 000026DE 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1381 000026E2 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1382 000026E6 488D1530DBFFFF      <1>     lea rdx, cmdPathSpec
  1383 000026ED B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1384 000026F2 CD41                <1>     int 41h
  1385 000026F4 E94D000000          <1>     jmp .dfltErrExit    ;If something goes wrong, error out
  1386                              <1> .noExtCheckExt:
  1387                              <1>     ;mov eax, dword [cmdFFBlock + ffBlock.asciizName + filename.fExt]
  1388 000026F9 488D35F0D9FFFF      <1>     lea rsi, dword [cmdFFBlock + ffBlock.asciizName]
  1389 00002700 488D3D65DBFFFF      <1>     lea rdi, fcbCmdSpec
  1390 00002707 E8F0030000          <1>     call asciiFilenameToFCB
  1391 0000270C 8B0562DBFFFF        <1>     mov eax, dword [fcbCmdSpec + filename.fExt]
  1392 00002712 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1393 00002717 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1394 0000271C 3D434F4D20          <1>     cmp eax, "COM "
  1395 00002721 7507                <1>     jne .neceexe
  1396 00002723 81CB01000000        <1>     or ebx, 1
  1397                              <1>     return
    13                              <2> %%_ret:
    14 00002729 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1398                              <1> .neceexe:
  1399 0000272A 3D45584520          <1>     cmp eax, "EXE "
  1400 0000272F 7507                <1>     jne .necebat
  1401 00002731 81CB02000000        <1>     or ebx, 2
  1402                              <1>     return
    13                              <2> %%_ret:
    14 00002737 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1403                              <1> .necebat:
  1404 00002738 3D42415420          <1>     cmp eax, "BAT "
  1405                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000273D 75(37)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1406 0000273F 81CB04000000        <1>     or ebx, 4
  1407                              <1>     return
    13                              <2> %%_ret:
    14 00002745 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1408                              <1> 
  1409                              <1> .dfltErrExit:
  1410 00002746 488D15CEE0FFFF      <1>     lea rdx, badCmd
  1411 0000274D B409                <1>     mov ah, 09h
  1412 0000274F CD41                <1>     int 41h
  1413                              <1>     return
    13                              <2> %%_ret:
    14 00002751 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printCRLF:
     4 00002752 488D1565E0FFFF      <1>     lea rdx, crlf
     5 00002759 BB02000000          <1>     mov ebx, 2
     6 0000275E B440                <1>     mov ah, 40h ;Print a new line
     7 00002760 B902000000          <1>     mov ecx, 2  ;Two chars to write
     8 00002765 CD41                <1>     int 41h
     9                              <1>     return
    13                              <2> %%_ret:
    14 00002767 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    10                              <1> printDate:
    11                              <1> ;Input: eax = Packed Date
    12                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    13                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    14                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    15                              <1> ;       ebx = 0 => Print two digit year
    16                              <1> ;       ebx = 1 => Print four digit year
    17 00002768 53                  <1>     push rbx
    18 00002769 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    19 0000276B 803DC4D8FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    20 00002772 7240                <1>     jb .usDate
    21 00002774 777C                <1>     ja .jpnDate
    22                              <1> ;European: DD/MM/YY
    23 00002776 251F000000          <1>     and eax, 1Fh    ;Save day bits
    24 0000277B E8B0000000          <1>     call .printFirst
    25 00002780 8A15BBD8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    26 00002786 B402                <1>     mov ah, 02h
    27 00002788 CD41                <1>     int 41h
    28                              <1> 
    29 0000278A 89C8                <1>     mov eax, ecx
    30 0000278C 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    31 00002791 C1E805              <1>     shr eax, 5
    32 00002794 E8B3000000          <1>     call .printSecond
    33                              <1> 
    34 00002799 8A15A2D8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    35 0000279F B402                <1>     mov ah, 02h
    36 000027A1 CD41                <1>     int 41h
    37                              <1> 
    38 000027A3 89C8                <1>     mov eax, ecx
    39 000027A5 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    40 000027AA C1E809              <1>     shr eax, 9
    41 000027AD 5B                  <1>     pop rbx ;Get the year signature back
    42 000027AE E8A9000000          <1>     call .printYear
    43                              <1>     return
    13                              <2> %%_ret:
    14 000027B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    44                              <1> .usDate:
    45                              <1> ;US: MM/DD/YY
    46 000027B4 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    47 000027B9 C1E805              <1>     shr eax, 5
    48 000027BC E86F000000          <1>     call .printFirst
    49                              <1> 
    50 000027C1 8A157AD8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    51 000027C7 B402                <1>     mov ah, 02h
    52 000027C9 CD41                <1>     int 41h
    53                              <1> 
    54 000027CB 89C8                <1>     mov eax, ecx
    55 000027CD 251F000000          <1>     and eax, 1Fh    ;Save day bits
    56 000027D2 E875000000          <1>     call .printSecond
    57                              <1> 
    58 000027D7 8A1564D8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    59 000027DD B402                <1>     mov ah, 02h
    60 000027DF CD41                <1>     int 41h
    61                              <1> 
    62 000027E1 89C8                <1>     mov eax, ecx
    63 000027E3 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 000027E8 C1E809              <1>     shr eax, 9
    65 000027EB 5B                  <1>     pop rbx ;Get the year signature back
    66 000027EC E86B000000          <1>     call .printYear
    67                              <1>     return
    13                              <2> %%_ret:
    14 000027F1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    68                              <1> .jpnDate:
    69                              <1> ;Japan: YY/MM/DD
    70 000027F2 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    71 000027F7 C1E809              <1>     shr eax, 9
    72 000027FA 5B                  <1>     pop rbx ;Get the year signature back
    73 000027FB E85C000000          <1>     call .printYear
    74                              <1> 
    75 00002800 8A153BD8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    76 00002806 B402                <1>     mov ah, 02h
    77 00002808 CD41                <1>     int 41h
    78                              <1> 
    79 0000280A 89C8                <1>     mov eax, ecx
    80 0000280C 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    81 00002811 C1E805              <1>     shr eax, 5
    82 00002814 E833000000          <1>     call .printSecond
    83                              <1> 
    84 00002819 8A1522D8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    85 0000281F B402                <1>     mov ah, 02h
    86 00002821 CD41                <1>     int 41h
    87                              <1> 
    88 00002823 89C8                <1>     mov eax, ecx
    89 00002825 251F000000          <1>     and eax, 1Fh    ;Save day bits
    90 0000282A E81D000000          <1>     call .printSecond
    91                              <1>     return
    13                              <2> %%_ret:
    14 0000282F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    92                              <1> 
    93                              <1> ;Each of these require eax setup correctly
    94                              <1> .printFirst:
    95 00002830 51                  <1>     push rcx
    96 00002831 E85F040000          <1>     call getDecimalWord
    97 00002836 84ED                <1>     test ch, ch ;Do we have an upper digit?
    98 00002838 7504                <1>     jnz .skipSpace
    99 0000283A 88CD                <1>     mov ch, cl
   100 0000283C B120                <1>     mov cl, " "
   101                              <1> .skipSpace:
   102 0000283E 88CA                <1>     mov dl, cl
   103 00002840 B402                <1>     mov ah, 02h
   104 00002842 CD41                <1>     int 41h
   105 00002844 88EA                <1>     mov dl, ch
   106 00002846 B402                <1>     mov ah, 02h
   107 00002848 CD41                <1>     int 41h
   108 0000284A 59                  <1>     pop rcx
   109                              <1>     return
    13                              <2> %%_ret:
    14 0000284B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   110                              <1> .printSecond:
   111 0000284C 51                  <1>     push rcx
   112 0000284D E843040000          <1>     call getDecimalWord
   113 00002852 84ED                <1>     test ch, ch ;Do we have an upper digit?
   114 00002854 75E8                <1>     jnz .skipSpace
   115 00002856 88CD                <1>     mov ch, cl
   116 00002858 B130                <1>     mov cl, "0"
   117 0000285A EBE2                <1>     jmp short .skipSpace
   118                              <1> .printYear:
   119 0000285C 05BC070000          <1>     add eax, 1980
   120 00002861 51                  <1>     push rcx
   121 00002862 53                  <1>     push rbx
   122 00002863 E82D040000          <1>     call getDecimalWord ;Get unpacked in rcx
   123 00002868 5B                  <1>     pop rbx
   124 00002869 84DB                <1>     test bl, bl
   125 0000286B 740C                <1>     jz .twoDigitYear
   126 0000286D 88CA                <1>     mov dl, cl  ;Print the first digit
   127 0000286F B402                <1>     mov ah, 02h
   128 00002871 CD41                <1>     int 41h
   129 00002873 88EA                <1>     mov dl, ch  ;Print the second digit
   130 00002875 B402                <1>     mov ah, 02h
   131 00002877 CD41                <1>     int 41h
   132                              <1> .twoDigitYear:
   133 00002879 C1E910              <1>     shr ecx, 10h    ;Get high word low
   134 0000287C 88CA                <1>     mov dl, cl  ;Print the upper digit
   135 0000287E B402                <1>     mov ah, 02h
   136 00002880 CD41                <1>     int 41h
   137 00002882 88EA                <1>     mov dl, ch  ;Print the lower digit
   138 00002884 B402                <1>     mov ah, 02h
   139 00002886 CD41                <1>     int 41h
   140 00002888 59                  <1>     pop rcx
   141                              <1>     return
    13                              <2> %%_ret:
    14 00002889 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   142                              <1> 
   143                              <1> 
   144                              <1> printTime:
   145                              <1> ;Input: eax = Packed Time
   146                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   147                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   148 0000288A 89C1                <1>     mov ecx, eax
   149 0000288C 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   150 00002891 C1E80B              <1>     shr eax, 11
   151 00002894 803DACD7FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   152 0000289B 750B                <1>     jne .ampm
   153 0000289D E85A000000          <1>     call .printHours
   154 000028A2 E831000000          <1>     call .printMinutes
   155                              <1>     return
    13                              <2> %%_ret:
    14 000028A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   156                              <1> .ampm:
   157 000028A8 3D0C000000          <1>     cmp eax, 12
   158 000028AD 7713                <1>     ja .pm
   159 000028AF 7416                <1>     je .pm2
   160 000028B1 E846000000          <1>     call .printHours
   161 000028B6 E81D000000          <1>     call .printMinutes
   162 000028BB B261                <1>     mov dl, "a"
   163 000028BD B402                <1>     mov ah, 02h
   164 000028BF CD41                <1>     int 41h
   165                              <1>     return
    13                              <2> %%_ret:
    14 000028C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   166                              <1> .pm:
   167 000028C2 2D0C000000          <1>     sub eax, 12
   168                              <1> .pm2:
   169 000028C7 E830000000          <1>     call .printHours
   170 000028CC E807000000          <1>     call .printMinutes
   171 000028D1 B270                <1>     mov dl, "p"
   172 000028D3 B402                <1>     mov ah, 02h
   173 000028D5 CD41                <1>     int 41h
   174                              <1>     return
    13                              <2> %%_ret:
    14 000028D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   175                              <1> .printMinutes:
   176 000028D8 8A1565D7FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   177 000028DE B402                <1>     mov ah, 02h
   178 000028E0 CD41                <1>     int 41h
   179                              <1> 
   180 000028E2 89C8                <1>     mov eax, ecx
   181 000028E4 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   182 000028E9 C1E805              <1>     shr eax, 5
   183                              <1> .printMinutesAlt:
   184 000028EC 51                  <1>     push rcx
   185 000028ED E8A3030000          <1>     call getDecimalWord
   186 000028F2 84ED                <1>     test ch, ch ;Do we have an upper digit?
   187 000028F4 7514                <1>     jnz .skipSpace
   188 000028F6 88CD                <1>     mov ch, cl
   189 000028F8 B130                <1>     mov cl, "0"
   190 000028FA EB0E                <1>     jmp short .skipSpace
   191                              <1> .printHours:
   192 000028FC 51                  <1>     push rcx
   193 000028FD E893030000          <1>     call getDecimalWord
   194 00002902 84ED                <1>     test ch, ch ;Do we have an upper digit?
   195 00002904 7504                <1>     jnz .skipSpace
   196 00002906 88CD                <1>     mov ch, cl
   197 00002908 B120                <1>     mov cl, " "
   198                              <1> .skipSpace:
   199 0000290A 88CA                <1>     mov dl, cl
   200 0000290C B402                <1>     mov ah, 02h
   201 0000290E CD41                <1>     int 41h
   202 00002910 88EA                <1>     mov dl, ch
   203 00002912 B402                <1>     mov ah, 02h
   204 00002914 CD41                <1>     int 41h
   205 00002916 59                  <1>     pop rcx
   206                              <1>     return
    13                              <2> %%_ret:
    14 00002917 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   207                              <1> 
   208                              <1> 
   209                              <1> putVersionInPrompt:
   210 00002918 488D1512E1FFFF      <1>     lea rdx, dosVer
   211 0000291F B409                <1>     mov ah, 09h ;Print String
   212 00002921 CD41                <1>     int 41h
   213 00002923 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   214 00002925 CD41                <1>     int 41h
   215 00002927 50                  <1>     push rax    ;Save minor version
   216 00002928 E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   217 0000292D E8B4000000          <1>     call printPackedBCD ;Print al
   218 00002932 B22E                <1>     mov dl, "."
   219 00002934 B402                <1>     mov ah, 02h
   220 00002936 CD41                <1>     int 41h
   221 00002938 58                  <1>     pop rax
   222 00002939 88E0                <1>     mov al, ah  ;Get the minor version low
   223 0000293B E889000000          <1>     call hexToBCD
   224 00002940 E8A1000000          <1>     call printPackedBCD
   225                              <1>     return
    13                              <2> %%_ret:
    14 00002945 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> putEscInPrompt:
   227 00002946 B21B                <1>     mov dl, ESC
   228 00002948 EB1C                <1>     jmp short outChar
   229                              <1> 
   230                              <1> putMoneyInPrompt:
   231 0000294A B224                <1>     mov dl, "$"
   232 0000294C EB18                <1>     jmp short outChar
   233                              <1> 
   234                              <1> putEquInPrompt:
   235 0000294E B23D                <1>     mov dl, "="
   236 00002950 EB14                <1>     jmp short outChar
   237                              <1> 
   238                              <1> putPipeInPrompt:
   239 00002952 B27C                <1>     mov dl, "|"
   240 00002954 EB10                <1>     jmp short outChar
   241                              <1> 
   242                              <1> putGTinPrompt:
   243 00002956 B23E                <1>     mov dl, ">"
   244 00002958 EB0C                <1>     jmp short outChar
   245                              <1> 
   246                              <1> putLTinPrompt:
   247 0000295A B23C                <1>     mov dl, "<"
   248 0000295C EB08                <1>     jmp short outChar
   249                              <1> 
   250                              <1> putDriveInPrompt:
   251 0000295E B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   252 00002960 CD41                <1>     int 41h
   253 00002962 0441                <1>     add al, "A" ;Convert to letter
   254 00002964 88C2                <1>     mov dl, al
   255                              <1> outChar:
   256 00002966 B402                <1>     mov ah, 02h ;Echo to STDOUT
   257 00002968 CD41                <1>     int 41h
   258                              <1>     return
    13                              <2> %%_ret:
    14 0000296A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   259                              <1> putCWDInPrompt:
   260 0000296B 488D3DEAD6FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   261 00002972 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   262 00002974 CD41                <1>     int 41h
   263 00002976 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   264 00002978 FEC2                <1>     inc dl
   265 0000297A 0441                <1>     add al, "A" ;Convert to letter
   266 0000297C B43A                <1>     mov ah, ":"
   267 0000297E 66AB                <1>     stosw   ;Store X:, rdi+=2
   268 00002980 8A05A5D6FFFF        <1>     mov al, byte [pathSep]
   269 00002986 AA                  <1>     stosb   ;Store pathSep, inc rdi
   270 00002987 B447                <1>     mov ah, 47h ;Get Current Working Directory
   271 00002989 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   272 0000298C CD41                <1>     int 41h
   273 0000298E E884000000          <1>     call strlen
   274 00002993 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   275                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   276 00002999 B440                <1>     mov ah, 40h ;Write to handle
   277 0000299B BB01000000          <1>     mov ebx, 1  ;STDOUT
   278 000029A0 488D15B5D6FFFF      <1>     lea rdx, currDirStr
   279 000029A7 CD41                <1>     int 41h
   280                              <1>     return
    13                              <2> %%_ret:
    14 000029A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   281                              <1> 
   282                              <1> BCDtoHex:
   283                              <1> ;Converts a BCD value to a Hex byte
   284                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   285 000029AA 51                  <1>     push rcx
   286 000029AB 0FB6C0              <1>     movzx eax, al   ;Zero extend
   287 000029AE 89C1                <1>     mov ecx, eax    ;Save al in ecx
   288 000029B0 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   289 000029B5 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   290 000029BB C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   291                              <1> .bth:
   292 000029BE 050A000000          <1>     add eax, 10
   293 000029C3 FFC9                <1>     dec ecx
   294 000029C5 75F7                <1>     jnz .bth
   295 000029C7 59                  <1>     pop rcx
   296 000029C8 C3                  <1>     ret
   297                              <1> 
   298                              <1> hexToBCD:
   299                              <1> ;Converts a Hex byte into two BCD digits
   300                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   301 000029C9 51                  <1>     push rcx
   302 000029CA 0FB6C0              <1>     movzx eax, al   ;Zero extend
   303 000029CD 31C9                <1>     xor ecx, ecx
   304                              <1> .htb0:
   305 000029CF 3D0A000000          <1>     cmp eax, 10
   306 000029D4 7209                <1>     jb .htb1
   307 000029D6 2D0A000000          <1>     sub eax, 10
   308 000029DB FFC1                <1>     inc ecx
   309 000029DD EBF0                <1>     jmp short .htb0
   310                              <1> .htb1:
   311 000029DF C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   312 000029E2 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   313 000029E4 59                  <1>     pop rcx
   314 000029E5 C3                  <1>     ret
   315                              <1> 
   316                              <1> printPackedBCD:
   317                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   318                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   319                              <1> ;Preserves all registers
   320 000029E6 50                  <1>     push rax
   321 000029E7 52                  <1>     push rdx
   322 000029E8 88C4                <1>     mov ah, al
   323 000029EA 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   324 000029EC 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   325 000029EF 7508                <1>     jnz .upperNybble
   326 000029F1 B220                <1>     mov dl, " "
   327 000029F3 B402                <1>     mov ah, 02h
   328 000029F5 CD41                <1>     int 41h
   329 000029F7 EB0E                <1>     jmp short .lowerNybble
   330                              <1> .upperNybble:
   331 000029F9 50                  <1>     push rax
   332 000029FA C0EC04              <1>     shr ah, 4
   333 000029FD 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   334 00002A00 88E2                <1>     mov dl, ah
   335 00002A02 B402                <1>     mov ah, 02h ;Print DL
   336 00002A04 CD41                <1>     int 41h
   337 00002A06 58                  <1>     pop rax
   338                              <1> .lowerNybble:
   339 00002A07 0430                <1>     add al, "0"
   340 00002A09 88C2                <1>     mov dl, al
   341 00002A0B B402                <1>     mov ah, 02h ;Print DL
   342 00002A0D CD41                <1>     int 41h
   343 00002A0F 5A                  <1>     pop rdx
   344 00002A10 58                  <1>     pop rax
   345                              <1>     return
    13                              <2> %%_ret:
    14 00002A11 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   346                              <1> 
   347                              <1> getCurrentDrive:
   348                              <1> ;Returns the 0 based current drive in al
   349 00002A12 B419                <1>     mov ah, 19h
   350 00002A14 CD41                <1>     int 41h
   351                              <1>     return
    13                              <2> %%_ret:
    14 00002A16 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   352                              <1> 
   353                              <1> strlen:
   354                              <1> ;Gets the length of a ASCIIZ string
   355                              <1> ;Input: rdi = Source buffer
   356                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   357 00002A17 50                  <1>     push rax
   358 00002A18 57                  <1>     push rdi
   359 00002A19 30C0                <1>     xor al, al
   360 00002A1B 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   361 00002A1D FFC9                <1>     dec ecx ;rcx = -1
   362 00002A1F F2AE                <1>     repne scasb
   363 00002A21 F7D1                <1>     not ecx
   364 00002A23 5F                  <1>     pop rdi
   365 00002A24 58                  <1>     pop rax
   366                              <1>     return
    13                              <2> %%_ret:
    14 00002A25 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   367                              <1> 
   368                              <1> findTerminatorOrEOC:
   369                              <1> ;Advances rsi to the next string terminator char or the next End of command
   370                              <1> ; char
   371                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   372                              <1> ;If a end of command char found, also sets CF
   373 00002A26 AC                  <1>     lodsb
   374 00002A27 3C0D                <1>     cmp al, CR
   375 00002A29 7419                <1>     je .endOfInput
   376 00002A2B E82B000000          <1>     call isALterminator
   377 00002A30 7419                <1>     jz .exit
   378 00002A32 3A05F3D5FFFF        <1>     cmp al, byte [pathSep]
   379 00002A38 7411                <1>     je .exit
   380 00002A3A 3A05ECD5FFFF        <1>     cmp al, byte [switchChar]
   381 00002A40 7409                <1>     je .exit
   382 00002A42 EBE2                <1>     jmp short findTerminatorOrEOC
   383                              <1> .endOfInput:
   384 00002A44 E802000000          <1>     call .exit
   385 00002A49 F9                  <1>     stc 
   386                              <1>     return
    13                              <2> %%_ret:
    14 00002A4A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .exit:
   388 00002A4B 48FFCE              <1>     dec rsi ;Point to the terminating char
   389                              <1>     return
    13                              <2> %%_ret:
    14 00002A4E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   390                              <1> 
   391                              <1> findTerminator:
   392                              <1> ;Advances rsi to the next string terminator char
   393                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   394 00002A4F AC                  <1>     lodsb
   395 00002A50 E806000000          <1>     call isALterminator
   396 00002A55 75F8                <1>     jnz findTerminator
   397 00002A57 48FFCE              <1>     dec rsi
   398                              <1>     return
    13                              <2> %%_ret:
    14 00002A5A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   399                              <1> isALterminator:
   400                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   401                              <1> ;         ZF=ZY if al is a terminator
   402 00002A5B 3C20                <1>     cmp al, " "
   403                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A5D 74(5A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   404 00002A5F 3C3B                <1>     cmp al, ";"
   405                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A61 74(5A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   406 00002A63 3C3D                <1>     cmp al, "="
   407                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A65 74(5A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   408 00002A67 3C2C                <1>     cmp al, ","
   409                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A69 74(5A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   410 00002A6B 3C09                <1>     cmp al, TAB
   411                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A6D 74(5A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   412 00002A6F 3C0A                <1>     cmp al, LF
   413                              <1>     return
    13                              <2> %%_ret:
    14 00002A71 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   414                              <1> 
   415                              <1> findEndOfCommand:
   416                              <1> ;Moves rsi to the | or CR that terminates this command
   417 00002A72 AC                  <1>     lodsb
   418 00002A73 E806000000          <1>     call isALEndOfCommand
   419 00002A78 75F8                <1>     jnz findEndOfCommand
   420 00002A7A 48FFCE              <1>     dec rsi
   421                              <1>     return
    13                              <2> %%_ret:
    14 00002A7D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   422                              <1> isALEndOfCommand:
   423 00002A7E 3C7C                <1>     cmp al, "|"
   424                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A80 74(7D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   425 00002A82 3C0D                <1>     cmp al, CR
   426                              <1>     return
    13                              <2> %%_ret:
    14 00002A84 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   427                              <1> 
   428                              <1> skipSpaces:
   429                              <1> ;Also skips tabs
   430                              <1> ;Input: rsi must point to the start of the data string
   431                              <1> ;Output: rsi points to the first non-space char
   432 00002A85 803E20              <1>     cmp byte [rsi], " "
   433 00002A88 7405                <1>     je .skip    ;If equal to a space, skip it
   434 00002A8A 803E09              <1>     cmp byte [rsi], TAB
   435                              <1>     retne   ;If not equal to a tab or space, return
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A8D 75(84)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   436                              <1> .skip:
   437 00002A8F 48FFC6              <1>     inc rsi
   438 00002A92 EBF1                <1>     jmp short skipSpaces
   439                              <1> 
   440                              <1> printPrompt:
   441 00002A94 66813D8CD5FFFFFFFF  <1>     cmp word [promptPtr], -1
   442 00002A9D 750B                <1>     jne .validPrompt
   443                              <1>     ;Here we print the default prompt
   444 00002A9F E8C7FEFFFF          <1>     call putCWDInPrompt
   445 00002AA4 E8ADFEFFFF          <1>     call putGTinPrompt
   446                              <1>     return
    13                              <2> %%_ret:
    14 00002AA9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   447                              <1> .validPrompt:
   448                              <1>     return
    13                              <2> %%_ret:
    14 00002AAA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   449                              <1> 
   450                              <1> clearCommandState:
   451                              <1> ;Clears the command state
   452 00002AAB 488D3D02D6FFFF      <1>     lea rdi, cmdStatePtr
   453 00002AB2 B90E000000          <1>     mov ecx, cmdStateL
   454 00002AB7 31C0                <1>     xor eax, eax
   455 00002AB9 F3AA                <1>     rep stosb
   456 00002ABB C705F3D5FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   456 00002AC4 FF                  <1>
   457                              <1>     return
    13                              <2> %%_ret:
    14 00002AC5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   458                              <1> 
   459                              <1> clearCommandLineState:
   460                              <1> ;Clears the command line state after a 0Dh encountered
   461 00002AC6 488D3DD2D5FFFF      <1>     lea rdi, cmdLineStatePtr
   462 00002ACD B923000000          <1>     mov ecx, cmdLineStateL
   463 00002AD2 31C0                <1>     xor eax, eax
   464 00002AD4 F3AA                <1>     rep stosb
   465 00002AD6 C705D0D5FFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   465 00002ADF FF                  <1>
   466 00002AE0 C705CED5FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   466 00002AE9 FF                  <1>
   467                              <1>     return
    13                              <2> %%_ret:
    14 00002AEA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   468                              <1> 
   469                              <1> asciiToFCB:
   470                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   471                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   472                              <1> ;Also doesn't check if chars are valid
   473                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   474                              <1> ;Name is space padded.
   475                              <1> ;Input: rsi = ASCII string buffer
   476                              <1> ;       rdi = FCB name buffer
   477                              <1> ;Output: al = Char that terminated the source string 
   478 00002AEB 53                  <1>     push rbx    
   479 00002AEC 57                  <1>     push rdi
   480 00002AED B90B000000          <1>     mov ecx, 11
   481 00002AF2 B020                <1>     mov al, " "
   482 00002AF4 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   483 00002AF6 5F                  <1>     pop rdi
   484 00002AF7 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   485 00002AFA EB1D                <1>     jmp short asciiFilenameToFCB.processName
   486                              <1> asciiFilenameToFCB:
   487                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   488                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   489                              <1> ;Also doesn't check if chars are valid
   490                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   491                              <1> ;Name is space padded.
   492                              <1> ;Input: rsi = ASCII string buffer
   493                              <1> ;       rdi = FCB name buffer
   494                              <1> ;Output: al = Char that terminated the source string 
   495 00002AFC 53                  <1>     push rbx    
   496 00002AFD 57                  <1>     push rdi
   497 00002AFE B90B000000          <1>     mov ecx, 11
   498 00002B03 B020                <1>     mov al, " "
   499 00002B05 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   500 00002B07 5F                  <1>     pop rdi
   501 00002B08 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   502                              <1>     ;Preprocess for Dir Searches
   503 00002B0B 803E2E              <1>     cmp byte [rsi], "."
   504 00002B0E 7509                <1>     jne .processName
   505 00002B10 A4                  <1>     movsb   ;Store the first dot
   506 00002B11 803E2E              <1>     cmp byte [rsi], "."
   507 00002B14 752C                <1>     jne .exitBadChar
   508 00002B16 A4                  <1>     movsb
   509 00002B17 EB29                <1>     jmp short .exitBadChar
   510                              <1> .processName:
   511 00002B19 AC                  <1>     lodsb   ;Get the char in al
   512 00002B1A 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   513 00002B1C 7426                <1>     jz .exit
   514 00002B1E 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   515 00002B20 7407                <1>     je .extSpace
   516 00002B22 3C2E                <1>     cmp al, "."
   517 00002B24 740C                <1>     je .ext
   518 00002B26 AA                  <1>     stosb   ;Store the char
   519 00002B27 EBF0                <1>     jmp short .processName
   520                              <1> .extSpace:
   521                              <1> ;Now we scan for a period in the name
   522 00002B29 AC                  <1>     lodsb   ;Get a char and increase rsi
   523 00002B2A 84C0                <1>     test al, al
   524 00002B2C 7416                <1>     jz .exit
   525 00002B2E 3C2E                <1>     cmp al, "."     ;If al is not a period...
   526 00002B30 75F7                <1>     jne .extSpace   ; keep searching
   527                              <1> .ext:
   528 00002B32 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   529                              <1> .processExt:
   530 00002B36 AC                  <1>     lodsb
   531 00002B37 84C0                <1>     test al, al
   532 00002B39 7409                <1>     jz .exit
   533 00002B3B 3C20                <1>     cmp al, " "
   534 00002B3D 7405                <1>     je .exit
   535 00002B3F AA                  <1>     stosb
   536 00002B40 EBF4                <1>     jmp short .processExt
   537                              <1> .exitBadChar:
   538 00002B42 30C0                <1>     xor al, al  ;Return a null terminator
   539                              <1> .exit:
   540 00002B44 5B                  <1>     pop rbx
   541                              <1>     return
    13                              <2> %%_ret:
    14 00002B45 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   542                              <1> 
   543                              <1> FCBToAsciiz:
   544                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   545                              <1> ;Name is space padded too
   546                              <1> ;Input: rsi = FCB name buffer
   547                              <1> ;       rdi = ASCIIZ string buffer
   548 00002B46 B908000000          <1>     mov ecx, 8
   549 00002B4B F3A4                <1>     rep movsb   ;Move the name over
   550                              <1> .scanNameSpace:
   551 00002B4D 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   552 00002B51 750D                <1>     jne .ext
   553 00002B53 48FFCF              <1>     dec rdi
   554 00002B56 FFC1                <1>     inc ecx
   555 00002B58 81F908000000        <1>     cmp ecx, 8
   556 00002B5E 72ED                <1>     jb .scanNameSpace
   557                              <1> .ext:
   558 00002B60 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   559 00002B65 7506                <1>     jne .validExt
   560 00002B67 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   561 00002B6B 7415                <1>     je .exit
   562                              <1> .validExt:
   563 00002B6D B02E                <1>     mov al, "." ;We have a valid extension, store a period
   564 00002B6F AA                  <1>     stosb
   565 00002B70 B903000000          <1>     mov ecx, 3
   566 00002B75 F3A4                <1>     rep movsb   ;Move the three extension chars over
   567                              <1> .scanExtSpace:
   568 00002B77 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   569 00002B7B 7505                <1>     jne .exit
   570 00002B7D 48FFCF              <1>     dec rdi
   571 00002B80 EBF5                <1>     jmp short .scanExtSpace
   572                              <1> .exit:
   573 00002B82 31C0                <1>     xor eax, eax
   574 00002B84 AA                  <1>     stosb   ;Store a null at the end
   575                              <1>     return
    13                              <2> %%_ret:
    14 00002B85 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   576                              <1> 
   577                              <1> buildCommandPath:
   578                              <1> ;Based on the first argument on the command line
   579                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   580                              <1>     ;If this is a relative path, will handle correctly (tho unnecessary)
   581 00002B86 0FB60530D5FFFF      <1>     movzx eax, byte [arg1Off]
   582 00002B8D 488D3509D6FFFF      <1>     lea rsi, cmdBuffer
   583 00002B94 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   584 00002B97 8A3D8ED4FFFF        <1>     mov bh, byte [pathSep]
   585 00002B9D B33A                <1>     mov bl, ":"
   586 00002B9F 383E                <1>     cmp byte [rsi], bh  ;Is the first char relative to root?
   587 00002BA1 7458                <1>     je .absoluteCurrent
   588 00002BA3 66395E01            <1>     cmp word [rsi + 1], bx    ;This checks if absolute or relative
   589 00002BA7 746D                <1>     je .absolutePath
   590 00002BA9 385E01              <1>     cmp byte [rsi + 1], bl  ;Check if a drive separator
   591 00002BAC 7409                <1>     je .relativeGiven
   592                              <1> ;No drive letter given, must get Current Drive
   593 00002BAE E85FFEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   594 00002BB3 0441                <1>     add al, "A"
   595 00002BB5 EB0B                <1>     jmp short .relativeCommon
   596                              <1> .relativeGiven:
   597                              <1> ;Drive letter pointed to by AL
   598 00002BB7 8A06                <1>     mov al, byte [rsi]  ;Get drive letter in al
   599 00002BB9 24DF                <1>     and al, 0DFh    ;Convert to UC
   600 00002BBB 4881C602000000      <1>     add rsi, 2  ;Skip the given drive letter and the colon
   601                              <1> .relativeCommon:
   602                              <1>     ;al has drive letter
   603 00002BC2 88C2                <1>     mov dl, al  ;Save drive letter in dl
   604 00002BC4 80EA40              <1>     sub dl, "@" ;Get 1 based drive number in dl
   605 00002BC7 B43A                <1>     mov ah, ":" ;Get the colon in too
   606 00002BC9 488D3D0ED8FFFF      <1>     lea rdi, searchSpec ;Start building our search path here
   607 00002BD0 66AB                <1>     stosw   ;Store X:
   608 00002BD2 8A0553D4FFFF        <1>     mov al, byte [pathSep]
   609 00002BD8 AA                  <1>     stosb   ;Store pathSep
   610 00002BD9 56                  <1>     push rsi    ;Save user input string
   611 00002BDA 4889FE              <1>     mov rsi, rdi    ;Put the current directory here for this drive
   612 00002BDD B447                <1>     mov ah, 47h ;Get Current Working Directory, dl has drive number
   613 00002BDF CD41                <1>     int 41h ;Won't fail as drive letter in dl confirmed ok
   614 00002BE1 5E                  <1>     pop rsi
   615                              <1>     ;Now want to find terminating null
   616 00002BE2 30C0                <1>     xor al, al
   617 00002BE4 31C9                <1>     xor ecx, ecx
   618 00002BE6 FFC9                <1>     dec ecx
   619 00002BE8 F2AE                <1>     repne scasb ;Search for the terminating null
   620 00002BEA 48FFCF              <1>     dec rdi ;Go back one once found
   621 00002BED 8A0538D4FFFF        <1>     mov al, byte [pathSep]
   622 00002BF3 3847FF              <1>     cmp byte [rdi - 1], al
   623 00002BF6 7425                <1>     je .buildPath ;If the previous char is a pathsep, skip storing another
   624 00002BF8 AA                  <1>     stosb   ;Store the pathsep
   625 00002BF9 EB22                <1>     jmp short .buildPath  ;Now we copy the user string over and good to go
   626                              <1> .absoluteCurrent:
   627 00002BFB E812FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   628 00002C00 0441                <1>     add al, "A"
   629 00002C02 B43A                <1>     mov ah, ":" ;ax has X: now to store 
   630 00002C04 488D3DD3D7FFFF      <1>     lea rdi, searchSpec
   631 00002C0B 66AB                <1>     stosw
   632 00002C0D 8A0518D4FFFF        <1>     mov al, byte [pathSep]
   633 00002C13 AA                  <1>     stosb
   634 00002C14 EB07                <1>     jmp short .buildPath
   635                              <1> .absolutePath:
   636 00002C16 488D3DC1D7FFFF      <1>     lea rdi, searchSpec
   637                              <1> .buildPath:
   638 00002C1D E81CEAFFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   639 00002C22 F8                  <1>     clc ;I dont care if i encounter an embedded CR rn
   640                              <1>     return
    13                              <2> %%_ret:
    14 00002C23 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   641                              <1>     
   642                              <1> printDecimalWord:
   643                              <1> ;Takes qword in rax and print it's decimal representation
   644                              <1> ;Takes the qword in eax and prints its decimal representation
   645 00002C24 31C9                <1>     xor ecx, ecx
   646 00002C26 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   647 00002C28 85C0                <1>     test eax, eax
   648 00002C2A 750C                <1>     jnz .notZero
   649 00002C2C B930000000          <1>     mov ecx, "0"
   650 00002C31 BD01000000          <1>     mov ebp, 1  ;Print one digit
   651 00002C36 EB3E                <1>     jmp short .dpfb2
   652                              <1> .notZero:
   653 00002C38 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   654 00002C3A BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   655                              <1> .dpfb0:
   656 00002C3F FFC5                <1>     inc ebp
   657 00002C41 81FD08000000        <1>     cmp ebp, 8
   658 00002C47 7206                <1>     jb .dpfb00
   659 00002C49 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   660 00002C4D EB04                <1>     jmp short .dpfb01
   661                              <1> .dpfb00:
   662 00002C4F 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   663                              <1> .dpfb01:
   664 00002C53 31D2                <1>     xor edx, edx
   665 00002C55 48F7F6              <1>     div rsi
   666 00002C58 80C230              <1>     add dl, '0'
   667 00002C5B 80FA39              <1>     cmp dl, '9'
   668 00002C5E 7603                <1>     jbe .dpfb1
   669 00002C60 80C207              <1>     add dl, 'A'-'0'-10
   670                              <1> .dpfb1:
   671 00002C63 81FD08000000        <1>     cmp ebp, 8
   672 00002C69 7204                <1>     jb .dpfb10
   673 00002C6B 88D3                <1>     mov bl, dl ;Add the bottom bits
   674 00002C6D EB02                <1>     jmp short .dpfb11
   675                              <1> .dpfb10:
   676 00002C6F 88D1                <1>     mov cl, dl    ;Save remainder byte
   677                              <1> .dpfb11:
   678 00002C71 4885C0              <1>     test rax, rax
   679 00002C74 75C9                <1>     jnz .dpfb0
   680                              <1> .dpfb2:
   681 00002C76 81FD08000000        <1>     cmp ebp, 8
   682 00002C7C 7208                <1>     jb .dpfb20
   683 00002C7E 88DA                <1>     mov dl, bl
   684 00002C80 48C1EB08            <1>     shr rbx, 8
   685 00002C84 EB06                <1>     jmp short .dpfb21
   686                              <1> .dpfb20:
   687 00002C86 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   688 00002C88 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   689                              <1> .dpfb21:
   690 00002C8C B402                <1>     mov ah, 02h
   691 00002C8E CD41                <1>     int 41h
   692 00002C90 FFCD                <1>     dec ebp
   693 00002C92 75E2                <1>     jnz .dpfb2
   694                              <1>     return
    13                              <2> %%_ret:
    14 00002C94 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   695                              <1> 
   696                              <1> getDecimalWord:
   697                              <1> ;Works on MAX A dword in eax
   698                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   699 00002C95 31C9                <1>     xor ecx, ecx
   700 00002C97 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   701 00002C99 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   702                              <1> .dpfb0:
   703 00002C9E FFC5                <1>     inc ebp
   704 00002CA0 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   705 00002CA4 31D2                <1>     xor edx, edx
   706 00002CA6 48F7F3              <1>     div rbx
   707 00002CA9 80C230              <1>     add dl, '0'
   708 00002CAC 80FA39              <1>     cmp dl, '9'
   709 00002CAF 7603                <1>     jbe .dpfb1
   710 00002CB1 80C207              <1>     add dl, 'A'-'0'-10
   711                              <1> .dpfb1:
   712 00002CB4 88D1                <1>     mov cl, dl    ;Save remainder byte
   713 00002CB6 4885C0              <1>     test rax, rax
   714 00002CB9 75E3                <1>     jnz .dpfb0
   715                              <1>     return
    13                              <2> %%_ret:
    14 00002CBB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   716                              <1> 
   717                              <1> freezePC:
   718 00002CBC 488D1546E0FFFF      <1>     lea rdx, memBad1
   719 00002CC3 B409                <1>     mov ah, 09h
   720 00002CC5 CD41                <1>     int 41h
   721                              <1> .altEP:
   722 00002CC7 488D1564E0FFFF      <1>     lea rdx, memBad3
   723 00002CCE B409                <1>     mov ah, 09h
   724 00002CD0 CD41                <1>     int 41h
   725                              <1> .lp:
   726 00002CD2 F390                <1>     pause
   727 00002CD4 F4                  <1>     hlt
   728 00002CD5 EBFB                <1>     jmp short .lp
   729                              <1> 
   730                              <1> getFilenamePtrFromFilespec:
   731                              <1> ;Gets a pointer to the first char of a filename from a asciiz pathspec
   732                              <1> ;Input: rsi = Pathspec to search
   733                              <1> ;Output: rsi = Points to the first char of the filename
   734 00002CD7 4889F3              <1>     mov rbx, rsi
   735 00002CDA 31C0                <1>     xor eax, eax
   736 00002CDC 4889F7              <1>     mov rdi, rsi    ;Go to the source string 
   737 00002CDF E833FDFFFF          <1>     call strlen     ;Get it's length
   738 00002CE4 FFC9                <1>     dec ecx ;Dont include terminating null
   739 00002CE6 741F                <1>     jz .exitBad ;Was the string of length zero? Exit bad if so
   740 00002CE8 4801CE              <1>     add rsi, rcx    ;Goto last char in path (not null)
   741                              <1> .lp:
   742 00002CEB 4839F3              <1>     cmp rbx, rsi    ;Is rdi pointing to the start of the string?
   743                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002CEE 74(BB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   744 00002CF0 8A06                <1>     mov al, byte [rsi]  ;Get the char we currently are at
   745 00002CF2 3C3A                <1>     cmp al, ":" ;X: ?
   746 00002CF4 740D                <1>     je .pointFilename
   747 00002CF6 3A052FD3FFFF        <1>     cmp al, byte [pathSep]  ;Is al pathSep?
   748 00002CFC 7405                <1>     je .pointFilename
   749 00002CFE 48FFCE              <1>     dec rsi ;Not a terminator, go back a char
   750 00002D01 EBE8                <1>     jmp short .lp
   751                              <1> .pointFilename:
   752 00002D03 48FFC6              <1>     inc rsi ;Now point to the first char of the pathname
   753                              <1>     return
    13                              <2> %%_ret:
    14 00002D06 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   754                              <1> .exitBad:
   755 00002D07 F9                  <1>     stc
   756                              <1> .exit:
   757                              <1>     return
    13                              <2> %%_ret:
    14 00002D08 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   758                              <1> 
   759                              <1> 
   760                              <1> copyArgumentToSearchSpec:
   761                              <1> ;Works similarly to the build searchpath but is simpler
   762                              <1> ;Null terminates
   763 00002D09 488D3DCED6FFFF      <1>     lea rdi, searchSpec
   764                              <1> .copyPath:
   765 00002D10 AC                  <1>     lodsb
   766 00002D11 E868FDFFFF          <1>     call isALEndOfCommand
   767 00002D16 740A                <1>     jz .finishCopy
   768 00002D18 E83EFDFFFF          <1>     call isALterminator
   769 00002D1D 7403                <1>     jz .finishCopy
   770 00002D1F AA                  <1>     stosb
   771 00002D20 EBEE                <1>     jmp short .copyPath
   772                              <1> .finishCopy:
   773 00002D22 31C0                <1>     xor eax, eax
   774 00002D24 AA                  <1>     stosb
   775                              <1>     return
    13                              <2> %%_ret:
    14 00002D25 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/int44h.asm"
     1                              <1> critErrorHandler:   ;Int 44h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00002D26 53                  <1>     push rbx
    25 00002D27 51                  <1>     push rcx
    26 00002D28 52                  <1>     push rdx
    27 00002D29 57                  <1>     push rdi
    28 00002D2A 56                  <1>     push rsi
    29 00002D2B FC                  <1>     cld         ;Make String ops go forward
    30                              <1> 
    31 00002D2C 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00002D2F 488D1588DAFFFF      <1>     lea rdx, crlf
    33 00002D36 B409                <1>     mov ah, 09h ;Print String
    34 00002D38 CD41                <1>     int 41h
    35                              <1> 
    36 00002D3A 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    37 00002D40 B90C000000          <1>     mov ecx, 0Ch
    38 00002D45 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    39 00002D47 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    40 00002D4A 480FB7FF            <1>     movzx rdi, di
    41 00002D4E 4889FA              <1>     mov rdx, rdi    ;Copy error code
    42 00002D51 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    43 00002D55 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    44 00002D58 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    45 00002D5B 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    46 00002D62 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    47 00002D66 B409                <1>     mov ah, 09h ;Print String
    48 00002D68 CD41                <1>     int 41h     ;Call DOS to print first part of message
    49                              <1> 
    50 00002D6A 488D1505020000      <1>     lea rdx, qword [.readmsg]
    51 00002D71 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    52 00002D78 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    53 00002D7B 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    54 00002D7F B409                <1>     mov ah, 09h ;Print String
    55 00002D81 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    56                              <1> 
    57 00002D83 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    58 00002D86 0F85DF000000        <1>     jnz .charError
    59                              <1> ;Disk error continues here
    60 00002D8C 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    61 00002D93 B409                <1>     mov ah, 09h
    62 00002D95 CD41                <1>     int 41h
    63 00002D97 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    64 00002D99 80C241              <1>     add dl, "A" ;Add ASCII code
    65 00002D9C B402                <1>     mov ah, 02h ;Print char in dl
    66 00002D9E CD41                <1>     int 41h
    67                              <1> .userInput:
    68 00002DA0 488D1517DAFFFF      <1>     lea rdx, crlf  ;Print new line
    69 00002DA7 B409                <1>     mov ah, 09h
    70 00002DA9 CD41                <1>     int 41h
    71                              <1> ;Abort, Retry, Ignore, Fail is word order
    72                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    73                              <1> .userAbort:
    74                              <1> ;Abort is always an option
    75 00002DAB 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    76 00002DB2 B409                <1>     mov ah, 09h
    77 00002DB4 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    78                              <1> .userRetry:
    79 00002DB6 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    80 00002DB9 7416                <1>     jz .userIgnore    ;If clear, dont print message
    81 00002DBB 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
    82 00002DC2 B409                <1>     mov ah, 09h
    83 00002DC4 CD41                <1>     int 41h
    84 00002DC6 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
    85 00002DCD B409                <1>     mov ah, 09h
    86 00002DCF CD41                <1>     int 41h
    87                              <1> .userIgnore:
    88 00002DD1 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    89 00002DD4 7416                <1>     jz .userFail
    90 00002DD6 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
    91 00002DDD B409                <1>     mov ah, 09h
    92 00002DDF CD41                <1>     int 41h
    93 00002DE1 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
    94 00002DE8 B409                <1>     mov ah, 09h
    95 00002DEA CD41                <1>     int 41h
    96                              <1> .userFail:
    97 00002DEC F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    98 00002DEF 7416                <1>     jz .userMsgEnd
    99 00002DF1 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   100 00002DF8 B409                <1>     mov ah, 09h
   101 00002DFA CD41                <1>     int 41h
   102 00002DFC 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   103 00002E03 B409                <1>     mov ah, 09h
   104 00002E05 CD41                <1>     int 41h
   105                              <1> .userMsgEnd:
   106 00002E07 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   107 00002E0E B409                <1>     mov ah, 09h
   108 00002E10 CD41                <1>     int 41h
   109                              <1> ;Get user input now 
   110 00002E12 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   111 00002E14 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   112 00002E1B B401                <1>     mov ah, 01h ;STDIN without Console Echo
   113 00002E1D CD41                <1>     int 41h ;Get char in al
   114 00002E1F 3C61                <1>     cmp al, "a" ;Chack if lowercase
   115 00002E21 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   116 00002E23 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   117                              <1> .uip1:
   118 00002E25 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   119 00002E26 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   120 00002E28 FFC1                <1>     inc ecx
   121 00002E2A 81F904000000        <1>     cmp ecx, 4
   122 00002E30 75F3                <1>     jne .uip1
   123 00002E32 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   124                              <1> .validInput:
   125 00002E37 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   126                              <1> ;Now check if the input is permitted
   127 00002E39 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   128 00002E3B 7427                <1>     je .cehExit
   129 00002E3D 84C0                <1>     test al, al ;Check if 0 => Ignore
   130 00002E3F 740F                <1>     je .viIgnore
   131 00002E41 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   132 00002E43 7416                <1>     je .viRetry
   133                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   134 00002E45 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   135 00002E48 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   136 00002E4E EB14                <1>     jmp short .cehExit
   137                              <1> .viIgnore:
   138 00002E50 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   139 00002E53 0F8447FFFFFF        <1>     jz .userInput
   140 00002E59 EB09                <1>     jmp short .cehExit
   141                              <1> .viRetry:
   142 00002E5B F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   143 00002E5E 0F843CFFFFFF        <1>     jz .userInput
   144                              <1> .cehExit:
   145 00002E64 5E                  <1>     pop rsi
   146 00002E65 5F                  <1>     pop rdi
   147 00002E66 5A                  <1>     pop rdx
   148 00002E67 59                  <1>     pop rcx
   149 00002E68 5B                  <1>     pop rbx
   150 00002E69 48CF                <1>     iretq
   151                              <1> .charError:
   152 00002E6B B908000000          <1>     mov ecx, 8  ;8 chars in device name
   153 00002E70 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   154                              <1> .ce1:
   155 00002E77 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   156 00002E78 88C2                <1>     mov dl, al  ;Move char into dl
   157 00002E7A B402                <1>     mov ah, 02h
   158 00002E7C CD41                <1>     int 41h ;Print char
   159 00002E7E E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   160 00002E80 E91BFFFFFF          <1>     jmp .userInput
   161                              <1> 
   162                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   163 00002E85 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   163 00002E8E 746563742024202020  <1>
   164 00002E97 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   164 00002EA0 6E6974202420202020  <1>
   165 00002EA9 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   165 00002EB2 202420202020202020  <1>
   166 00002EBB 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   166 00002EC4 6F6D6D616E64202420  <1>
   167 00002ECD 446174612024202020- <1>             db "Data $            "       ;Error 4
   167 00002ED6 202020202020202020  <1>
   168 00002EDF 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   168 00002EE8 737420242020202020  <1>
   169 00002EF1 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   169 00002EFA 202020202020202020  <1>
   170 00002F03 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   170 00002F0C 656469612024202020  <1>
   171 00002F15 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   171 00002F1E 7420466F756E642024  <1>
   172 00002F27 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   172 00002F30 706572202420202020  <1>
   173 00002F39 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   173 00002F42 6C7420242020202020  <1>
   174 00002F4B 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   174 00002F54 742024202020202020  <1>
   175 00002F5D 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   175 00002F66 61696C757265202420  <1>
   176                              <1> 
   177 00002F6F 64726976652024      <1> .drive      db "drive $"
   178 00002F76 6572726F7220726561- <1> .readmsg    db "error reading $"
   178 00002F7F 64696E672024        <1>
   179 00002F85 6572726F7220777269- <1> .writemsg   db "error writing $"
   179 00002F8E 74696E672024        <1>
   180 00002F94 41626F727424        <1> .abortmsg   db "Abort$" 
   181 00002F9A 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   182 00002FA1 526574727924        <1> .retrymsg   db "Retry$"
   183 00002FA7 4661696C24          <1> .failmsg    db "Fail$"
   184 00002FAC 2C2024              <1> .betweenMsg db ", $"
   185 00002FAF 3F2024              <1> .endMsg     db "? $"
   186 00002FB2 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   187                              <1> 
   188                              <1> int43h:
   189 00002FB6 F60570D0FFFFFF      <1>     test byte [permaSwitch], -1
   190 00002FBD 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   191                              <1>     ;Else, we juggle parent PSP's
   192 00002FBF 50                  <1>     push rax
   193 00002FC0 53                  <1>     push rbx
   194 00002FC1 488B054FD0FFFF      <1>     mov rax, qword [realParent]
   195 00002FC8 488B1D40D0FFFF      <1>     mov rbx, qword [pspPtr]
   196 00002FCF 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   197 00002FD3 5B                  <1>     pop rbx
   198 00002FD4 58                  <1>     pop rax
   199                              <1> .exit:
   200 00002FD5 F9                  <1>     stc     ;Set CF to kill the task
   201 00002FD6 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    19                                  
    20                                  endOfAllocNoMaster: ;End of alloc if not the master cmd
    21                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:  ;Yeet this is this is a child command processor
     3 00002FD9 5F3A434F4D4D414E44- <1>     db "_:COMMAND.COM",0
     3 00002FE2 2E434F4D00          <1>
     4 00002FE7 504154483D0000      <1>     db "PATH=",0,0  ;Terminate with two null bytes
     5 00002FEE 202020202020202020- <1>     db ($ - masterEnv) dup (" ")    ;Pad the environment with spaces
     5 00002FF7 202020202020202020- <1>
     5 00003000 202020              <1>
    22                                  endOfAlloc: ;End of alloc if the master cmd
    23                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    24                                  Segment transient align=1 follows=.data
    25                                  ;This segment always gets ejected post load
    26                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD41                <1>     int 41h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D15ED010000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD41                <1>     int 41h
    10 00000013 CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    11                              <1> .okVersion:
    12                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    13 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    14 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    15 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    16 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    17                              <1> ;Setup Int 42h, Int 43h and Int 44h
    18 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt42h] ;Preserve the original addresses
    19 0000002F 488905(2E000000)    <1>     mov qword [parentInt42], rax
    20                              <1> 
    21 00000036 488D15(262D0000)    <1>     lea rdx, critErrorHandler
    22 0000003D 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    23 00000041 B844250000          <1>     mov eax, 2544h
    24 00000046 CD41                <1>     int 41h
    25 00000048 488D15(B62F0000)    <1>     lea rdx, int43h
    26 0000004F 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    27 00000053 B843250000          <1>     mov eax, 2543h
    28 00000058 CD41                <1>     int 41h
    29 0000005A 488D15(D00D0000)    <1>     lea rdx, applicationReturn
    30 00000061 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    31 00000065 B842250000          <1>     mov eax, 2542h
    32 0000006A CD41                <1>     int 41h
    33                              <1> ;Get a pointer to DOS Sysvars
    34 0000006C B452                <1>     mov ah, 52h ;Get sysvars
    35 0000006E CD41                <1>     int 41h
    36 00000070 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    37                              <1> ;Call for simple internationalisation data
    38 00000077 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    39 0000007C CD41                <1>     int 41h
    40 0000007E 3CFF                <1>     cmp al, -1
    41 00000080 7412                <1>     je .skipSwitch
    42 00000082 8815(2C000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    43 00000088 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    44 0000008B 7507                <1>     jne .skipSwitch
    45 0000008D C605(2B000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    46                              <1> .skipSwitch:
    47 00000094 B800380000          <1>     mov eax, 3800h  ;Get current country data
    48 00000099 488D15(36000000)    <1>     lea rdx, ctryData
    49 000000A0 CD41                <1>     int 41h ;Write the data to the internal country table
    50                              <1> ;Now determine if this is the master copy of COMMAND.COM
    51                              <1> ;Check if Int 4Eh has the same address as Int 4Dh. If so, we are master.
    52 000000A2 B84E350000          <1>     mov eax, 354Eh  ;Get int 4Eh address
    53 000000A7 CD41                <1>     int 41h
    54 000000A9 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    55 000000AC B84D350000          <1>     mov eax, 354Dh  ;Get int 4Dh address
    56 000000B1 CD41                <1>     int 41h
    57 000000B3 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    58 000000B6 755C                <1>     jne .skipMaster
    59                              <1> ;Ok so we are master command.com
    60                              <1> ;Now make myself the real parent
    61 000000B8 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    62 000000BF 4C8905(17000000)    <1>     mov qword [realParent], r8
    63                              <1> ;Set master environment as mine
    64 000000C6 488D05(D92F0000)    <1>     lea rax, masterEnv
    65 000000CD 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    66                              <1> ;Set current Drive in COMSPEC
    67 000000D1 B019                <1>     mov al, 19h ;Get current Drive
    68 000000D3 CD41                <1>     int 41h
    69 000000D5 0441                <1>     add al, "A"
    70 000000D7 8805(D92F0000)      <1>     mov byte [masterEnv], al
    71                              <1> ;Set Int 4Eh up
    72 000000DD 488D15(94160000)    <1>     lea rdx, int4Eh
    73 000000E4 B84E250000          <1>     mov eax, 254Eh ;Set this as Int 4Eh
    74 000000E9 CD41                <1>     int 41h
    75                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    76                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    77 000000EB 488D15(BE070000)    <1>     lea rdx, crlf
    78 000000F2 B409                <1>     mov ah, 09h
    79 000000F4 CD41                <1>     int 41h
    80 000000F6 E8(B91E0000)        <1>     call time
    81 000000FB E8(F31D0000)        <1>     call date
    82 00000100 488D15(BE070000)    <1>     lea rdx, crlf
    83 00000107 B409                <1>     mov ah, 09h
    84 00000109 CD41                <1>     int 41h
    85 0000010B 488D1D(03300000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
    86 00000112 EB32                <1>     jmp short .printInit
    87                              <1> .skipMaster:
    88 00000114 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
    89 0000011B 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
    90 00000123 0FB605(2C000000)    <1>     movzx eax, byte [switchChar]
    91 0000012A F2AE                <1>     repne scasb
    92 0000012C 67E310              <1>     jecxz .noSwitches
    93 0000012F 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
    94 00000132 24DF                <1>     and al, 0DFh    ;Convert to UC
    95 00000134 3C50                <1>     cmp al, "P" ;Is it permanent switch?
    96 00000136 7507                <1>     jne .noSwitches
    97 00000138 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    98                              <1> .noSwitches:
    99 0000013F 488D1D(D92F0000)    <1>     lea rbx, endOfAllocNoMaster  ;This is the base address to jettison
   100                              <1> .printInit:
   101                              <1> ;Finish by printing INIT string.
   102 00000146 53                  <1>     push rbx
   103 00000147 488D153A000000      <1>     lea rdx, initString
   104 0000014E B409                <1>     mov ah, 09h
   105 00000150 CD41                <1>     int 41h ;Print init string
   106 00000152 E8(D4230000)        <1>     call version.printVersionNumber
   107 00000157 488D1560000000      <1>     lea rdx, initString2
   108 0000015E B409                <1>     mov ah, 09h
   109 00000160 CD41                <1>     int 41h ;Print init string
   110 00000162 5B                  <1>     pop rbx
   111                              <1>     ;Now we add the stack to the alloc and paragraph align
   112 00000163 4881C300020000      <1>     add rbx, stackSize
   113 0000016A 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   114 00000171 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   115 00000175 48C1E304            <1>     shl rbx, 4
   116 00000179 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   117 0000017C 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   118 00000183 E9(BD0D0000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   119                              <1> ;Loader Data here
   120                              <1> initString: 
   121 00000188 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   121 00000191 66696320436F6D7075- <1>
   121 0000019A 746572205265736561- <1>
   121 000001A3 726368285229205343- <1>
   121 000001AC 502F444F5328522920- <1>
   121 000001B5 56657273696F6E2024  <1>
   122                              <1> initString2:
   123 000001BE 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   123 000001C7 202020284329436F70- <1>
   123 000001D0 797269676874205363- <1>
   123 000001D9 69656E746966696320- <1>
   123 000001E2 436F6D707574657220- <1>
   123 000001EB 526573657261636820- <1>
   123 000001F4 323032322E0D0A24    <1>
   124 000001FC 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   124 00000205 20444F532076657273- <1>
   124 0000020E 696F6E0D0A24        <1>
    27                                  
    28                                  stackSize equ 64*8    ;64 QWORD stack
    28          ------------------       info: assembly required 1+3+2 passes

