     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  stackSize equ 200*8    ;200 QWORD stacks always
     7                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     8                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber             db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector         dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster     db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSectorsPerClusterShift db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset              dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs           db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries   dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset      dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dClusterCount           dd ?  ;Total number of clusters in data area
    27 00000013 ????????            <1>     .dFATlength              dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor        db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag             db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr             dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?  ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?  ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?  ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?  ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?  ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?  ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?  ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?  ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?  ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?  ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> struc psp
   344 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   345 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   346 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   347 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   348 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   349 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   350 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   351                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   352                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   353                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   354                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   355                              <1> ; always used and jftSize.
   356                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   357 0000002A <res 14h>           <1>     .jobFileTbl resb dfltJFTsize ;Main File handle array, JFT
   358 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   359 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   360 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   361 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   362 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   363 0000005B ??                  <1>                 db ?  ;Reserved byte
   364                              <1> ;The below are in the same place as in DOS.
   365                              <1>     .cmdLineArgPtr: ;Symbol for future use
   366 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   367 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   368                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   369 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   370 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   371                              <1> endstruc
   372                              <1> 
   373                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   374                              <1> 
   375                              <1> struc clkStruc
   376 00000000 ????                <1>     .dateWord   dw ?
   377 00000002 ??                  <1>     .minutes    db ?
   378 00000003 ??                  <1>     .hours      db ?
   379 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   380 00000005 ??                  <1>     .seconds    db ?
   381                              <1> endstruc
   382                              <1> 
   383                              <1> 
   384                              <1> struc extCtryStruc
   385 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   386 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   387 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   388 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   389 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   390                              <1>                         ;0 = month day year hh:mm:ss
   391                              <1>                         ;1 = day month year hh:mm:ss
   392                              <1>                         ;2 = year month day hh:mm:ss
   393 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   394 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   395 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   396 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   397 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   398 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   399                              <1>                         ;0 = Symbol leads, without space
   400                              <1>                         ;1 = Symbol follows, without space
   401                              <1>                         ;2 = Symbol leads, one space
   402                              <1>                         ;3 = Symbol follows, one space
   403                              <1>                         ;4 = Symbol replace decimal separator
   404 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   405 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   406 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   407 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   408 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   409                              <1> endstruc
   410                              <1> 
   411                              <1> struc countryStruc
   412 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   413                              <1>                         ;0 = month day year hh:mm:ss
   414                              <1>                         ;1 = day month year hh:mm:ss
   415                              <1>                         ;2 = year month day hh:mm:ss
   416 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   417 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   418 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   419 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   420 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   421 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   422                              <1>                         ;0 = Symbol leads, without space
   423                              <1>                         ;1 = Symbol follows, without space
   424                              <1>                         ;2 = Symbol leads, one space
   425                              <1>                         ;3 = Symbol follows, one space
   426                              <1>                         ;4 = Symbol replace decimal separator
   427 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   428 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   429 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   430 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   431 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   432                              <1> endstruc
   433                              <1> 
   434                              <1> ;Critical Error AH bitfield equates
   435                              <1> critRead    equ 0h
   436                              <1> critWrite   equ 1h
   437                              <1> critDOS     equ 0h
   438                              <1> critFAT     equ 2h
   439                              <1> critDir     equ 4h
   440                              <1> critData    equ 6h
   441                              <1> critFailOK  equ 8h
   442                              <1> critRetryOK equ 10h
   443                              <1> critIgnorOK equ 20h
   444                              <1> critCharDev equ 80h
   445                              <1> 
   446                              <1> critIgnore  equ 0
   447                              <1> critRetry   equ 1
   448                              <1> critAbort   equ 2
   449                              <1> critFail    equ 3
   450                              <1> 
   451                              <1> ;MISC ASCII control chars
   452                              <1> NUL equ 00h ;^@         | ASCII Null
   453                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   454                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   455                              <1> BEL equ 07h ;^G         | ASCII Bell
   456                              <1> BSP equ 08h ;^H         | ASCII Backspace
   457                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   458                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   459                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   460                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   461                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   462                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   463                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   464                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   465                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   466                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   467                              <1> SPC equ 20h ;Printable  | ASCII Space
   468                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   469                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   470                              <1> 
   471                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   472                              <1> ;Extended Ascii Codes
   473                              <1> eF1     equ 3Bh ;F1 second byte
   474                              <1> eF2     equ 3Ch ;F2 second byte
   475                              <1> eF3     equ 3Dh ;F3 second byte
   476                              <1> eF4     equ 3Eh ;F4 second byte
   477                              <1> eF5     equ 3Fh ;F5 second byte
   478                              <1> eF6     equ 40h ;F6 second byte
   479                              <1> eF7     equ 41h ;F7 second byte
   480                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   481                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   482                              <1> eIns    equ 52h ;Insert second byte
   483                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   484                              <1> 
   485                              <1> ;Default Configuration for the system
   486                              <1> 
   487                              <1> buffersDefault  equ 30
   488                              <1> filesDefault    equ 20
   489                              <1> fcbsDefault     equ 4
   490                              <1> safeFcbsDeflt   equ 0
   491                              <1> lastDriveDeflt  equ 5   
   492                              <1> 
   493                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   494                              <1> ; then the char has this property.
   495                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   496                              <1> termChar    equ 2   ;Terminator char type
   497                              <1> sepChar     equ 4   ;Separator char type
   498                              <1> badFCBChar  equ 8   ;FCB filename char
     9                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   db ?  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   dq ?
     8 00000009 ??????              <1>     .fileext    db 3 dup (?)
     9 0000000C ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize dw ?  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   dw ?  ;Standard date format
    14 00000016 ????                <1>     .fileTime   dw ?  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  db ?  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   db 5 dup (?)  
    28 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   db ?  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   dq ?
    31 00000010 ??????              <1>     .fileext    db 3 dup (?)
    32 00000013 ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize dw ?  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   dw ?  ;Standard date format
    37 0000001D ????                <1>     .fileTime   dw ?  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  db ?  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   db ?
    52 00000001 ????????????????    <1>     .filename   dq ?
    53 00000009 ??????              <1>     .fileext    db 3 dup (?)
    54 0000000C ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    dq ?
    57 00000019 ??????              <1>     .newExt     db 3 dup (?)
    58 0000001C ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       db 5 dup (?)  
    66 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   db ?
    68 00000008 ????????????????    <1>     .filename   dq ?
    69 00000010 ??????              <1>     .fileext    db 3 dup (?)
    70 00000013 ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    dq ?
    73 00000020 ??????              <1>     .newExt     db 3 dup (?)
    74 00000023 ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord db ?  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust dw ?  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    dw ?  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   db ?  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  dw ?  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   dw ?  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   dw ?  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    dw ?  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   dw ?  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   dw ?  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
    10                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI24     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ 1 + fileNameZL  ;1 for the count prefix
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> ;In batch, for pointers, 0 means NULL.
    25                              <1> ;FOR/CALL not priorities for implementation right now.
    26                              <1> struc batBlockHdr
    27 00000000 ??                  <1>     .zero       db ?    ;Always null
    28 00000001 ??                  <1>     .bEchoFlg   db ?    ;Echo flag on entry to batch. 1 if echo on!
    29 00000002 ????????????????    <1>     .pCallBlk   dq ?    ;Pointer to the previous batch block when CALLed
    30 0000000A ????????????????    <1>     .pForBlk    dq ?    ;Pointer to the active FOR block
    31 00000012 ??                  <1>     .bBatFlg    db ?    ;Indicates type of command currently active
    32 00000013 ????????            <1>     .dBatOffLo  dd ?    ;LSEEK Low dword of the batch offset
    33 00000017 ????????            <1>     .dBatOffHi  dd ?    ;LSEEK High dword of the batch offset (0 unless net FS)
    34 0000001B <res 14h>           <1>     .wArgs      dw 10 dup (?) ;Offsets of parameters %0-%9. -1 means no param
    35                              <1>     .cmdLine:   ;0 terminated path (%0) followed by cmd line params.
    36                              <1>     ;We include terminating CR. Add null at the end to mean end of params.
    37                              <1> endstruc
    38                              <1> bbNoParam   equ -1
    39                              <1> bbNull      equ 0
    40                              <1> bbEchoOn    equ 1
    41                              <1> bbEchoOff   equ 0
    42                              <1> bbMaxAlloc  equ batBlockHdr_size + cmdBufferL + 1 ;Add 1 for good measure :)
    43                              <1> batNoEchoChar   equ "@" ;If a line starts with this, no echo!
    44                              <1> 
    45                              <1> 
    46                              <1> 
    47                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    48 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    49 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    50 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    51 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    52 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    53                              <1> endstruc
    54                              <1> 
    55                              <1> struc execProg  ;For use with EXEC-ing a child task
    56 00000000 ????????????????    <1>     .pEnv       dq ?  ;Ptr to environment block (or 0 => copy parent env)
    57 00000008 ????????????????    <1>     .pCmdLine   dq ?  ;Ptr to the command line to be placed at PSP + 80h
    58 00000010 ????????????????    <1>     .pfcb1      dq ?  ;Ptr to the first FCB (parsed argument 1)
    59 00000018 ????????????????    <1>     .pfcb2      dq ?  ;Ptr to the second FCB  (parsed argument 2)
    60                              <1> endstruc
    61                              <1> 
    62                              <1> ;Directory attribute equates
    63                              <1>     dirReadOnly     equ 01h
    64                              <1>     dirHidden       equ 02h
    65                              <1>     dirSystem       equ 04h
    66                              <1>     dirVolumeID     equ 08h
    67                              <1>     dirDirectory    equ 10h
    68                              <1>     dirArchive      equ 20h
    69                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    70                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    71                              <1>     ;If any of the three bits are set, then ALL three bits are set
    72                              <1>     ; in addition to whatever the user passed to search for.
    73                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    74                              <1>     dirIncFiles     equ dirHidden | dirSystem
    12                                  Segment cmd align=1 valign=1
    13                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9DC4C0000          <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 0000000000000000    <1> int2Epsp    dq 0    ;
     8 0000001F 0000000000000000    <1> int2Ersp    dq 0    ;Save the far Int 2E entry stack pointer!
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 5C                  <1> pathSep     db "\"  ;Default path sep
    11 0000002A 2F                  <1> switchChar  db "/"  ;Default switch char
    12                              <1> ;Static strings, not used in command line parsing
    13 0000002B 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    13 00000034 000000000000000000- <1>
    13 0000003D 000000000000000000- <1>
    13 00000046 000000000000000000- <1>
    13 0000004F 0000                <1>
    14 00000051 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    14 0000005A 000000000000000000- <1>
    14 00000063 000000000000000000- <1>
    14 0000006C 000000000000000000- <1>
    14 00000075 000000000000000000- <1>
    14 0000007E 000000000000000000- <1>
    14 00000087 000000000000000000- <1>
    14 00000090 00000000            <1>
    15                              <1> ;=============================================================
    16 00000094 00                  <1> statFlg1    db 0    ;Flags 1 for the command interpreter
    17                              <1> ;=============================================================
    18                              <1> permaShell  equ 1   ;Up if we are a permanent command interpreter
    19                              <1> inCtrlC     equ 2   ;Up if we are processing int 23h
    20                              <1> inSingle    equ 4   ;Up if processing a single command (/C mode)
    21                              <1> inBatch     equ 8   ;Up if processing a batch file
    22                              <1> batchEOF    equ 10h ;Set to indicate we have reached the end of the batch file
    23                              <1> inCritical  equ 20h ;Up if processing a command.
    24                              <1> inLdrDT     equ 40h ;Up if in the Date / Time part of Loader
    25                              <1> inLdr       equ 80h ;Up if in loader
    26                              <1> 
    27 00000095 01                  <1> echoFlg     db 1    ;Global Echo flag, starts up! 1 means on
    28 00000096 FFFF                <1> errHdls     dw -1   ;Set to the STDIO handles. Non -1 => Handles swapped
    29                              <1> 
    30                              <1> cmdLineStatePtr:
    31 00000098 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    32 00000099 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    33 0000009B FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    34                              <1> ;These variables are valid for a SINGLE command in a command line
    35                              <1> ;Next two bytes, if set to -1, flags error
    36 0000009D 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    37 0000009E 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    38                              <1> ;                    If 2, we are redirecting output to a file, by appending
    39 0000009F FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    40 000000A1 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    41                              <1> 
    42                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    43 000000A3 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    44 000000A4 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    45 000000A5 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    46                              <1> 
    47 000000A6 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    48 000000A7 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    49 000000A8 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    50                              <1> 
    51 000000A9 00                  <1> switchFnd   db 0    ;Set if a switch char is found
    52                              <1> cmdStateL equ $ - cmdStatePtr
    53                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    54                              <1> 
    55                              <1> ;Batch state variables. Batch changes current dir to dir of batch file!
    56 000000AA 0000000000000000    <1> bbPtr       dq 0    ;Ptr to the batch block
    57 000000B2 000000000000000000- <1> batFile     db fileSpecZL dup (0)   ;Path to bat to execute. Qual with path!
    57 000000BB 000000000000000000- <1>
    57 000000C4 000000000000000000- <1>
    57 000000CD 000000000000000000- <1>
    57 000000D6 000000000000000000- <1>
    57 000000DF 000000000000000000- <1>
    57 000000E8 000000000000000000- <1>
    57 000000F1 000000000000000000- <1>
    57 000000FA 00000000000000      <1>
    58 00000101 0201200D            <1> batYNstr    db 2,1," ",CR           ;String for buffered Y/N input
    59                              <1> ;batCallPtr  dq 0    ;Ptr to the call state block
    60                              <1> 
    61                              <1> ;Structs and strings
    62                              <1> 
    63 00000105 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    63 0000010E 00000000000000      <1>
    64 00000115 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    64 0000011E 000000000000000000- <1>
    64 00000127 000000000000000000- <1>
    64 00000130 000000000000000000- <1>
    64 00000139 00000000000000      <1>
    65                              <1> 
    66 00000140 000000000000000000- <1> launchBlock db execProg_size dup (0)
    66 00000149 000000000000000000- <1>
    66 00000152 000000000000000000- <1>
    66 0000015B 0000000000          <1>
    67                              <1> 
    68                              <1> ;Use the below figure for the buffer "length" (byte 0) as this will allow 
    69                              <1> ; for us to type 127 characters plus a mandatory terminating 128th <CR>. 
    70                              <1> ; This will always be ok for copying to the PSP as on the PSP we have space for
    71                              <1> ; 127 chars. If we type 128 chars with terminating <CR>, the command name must be 
    72                              <1> ; at least 1 character long. The tail is formed of the remaining chars, so there
    73                              <1> ; will be at least 127 chars left. Thus we always have enough space.
    74                              <1> inBufferL   equ 128 
    75 00000160 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Original input from user! 128 chars max! 
    75 00000169 000000000000000000- <1>
    75 00000172 000000000000000000- <1>
    75 0000017B 000000000000000000- <1>
    75 00000184 000000000000000000- <1>
    75 0000018D 000000000000000000- <1>
    75 00000196 000000000000000000- <1>
    75 0000019F 000000000000000000- <1>
    75 000001A8 000000000000000000- <1>
    75 000001B1 000000000000000000- <1>
    75 000001BA 000000000000000000- <1>
    75 000001C3 000000000000000000- <1>
    75 000001CC 000000000000000000- <1>
    75 000001D5 000000000000000000- <1>
    75 000001DE 00000000            <1>
    76 000001E2 000000000000000000- <1> cpyBuffer   db cmdBufferL dup (0)   ;Copied input for processing
    76 000001EB 000000000000000000- <1>
    76 000001F4 000000000000000000- <1>
    76 000001FD 000000000000000000- <1>
    76 00000206 000000000000000000- <1>
    76 0000020F 000000000000000000- <1>
    76 00000218 000000000000000000- <1>
    76 00000221 000000000000000000- <1>
    76 0000022A 000000000000000000- <1>
    76 00000233 000000000000000000- <1>
    76 0000023C 000000000000000000- <1>
    76 00000245 000000000000000000- <1>
    76 0000024E 000000000000000000- <1>
    76 00000257 000000000000000000- <1>
    76 00000260 00000000            <1>
    77 00000264 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)   ;Buffer with the command pipeline
    77 0000026D 000000000000000000- <1>
    77 00000276 000000000000000000- <1>
    77 0000027F 000000000000000000- <1>
    77 00000288 000000000000000000- <1>
    77 00000291 000000000000000000- <1>
    77 0000029A 000000000000000000- <1>
    77 000002A3 000000000000000000- <1>
    77 000002AC 000000000000000000- <1>
    77 000002B5 000000000000000000- <1>
    77 000002BE 000000000000000000- <1>
    77 000002C7 000000000000000000- <1>
    77 000002D0 000000000000000000- <1>
    77 000002D9 000000000000000000- <1>
    77 000002E2 00000000            <1>
    78 000002E6 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)   ;Space for full path to a ext cmd
    78 000002EF 000000000000000000- <1>
    78 000002F8 000000000000000000- <1>
    78 00000301 000000000000000000- <1>
    78 0000030A 000000000000000000- <1>
    78 00000313 000000000000000000- <1>
    78 0000031C 000000000000000000- <1>
    78 00000325 000000000000000000- <1>
    78 0000032E 00000000000000      <1>
    79 00000335 000000000000000000- <1> cmdName     db cmdNameL dup (0)     ;Cmd name prefixed by length 
    79 0000033E 0000000000          <1>
    80                              <1> 
    81 00000343 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    81 0000034C 000000000000000000- <1>
    81 00000355 000000000000000000- <1>
    81 0000035E 000000000000000000- <1>
    81 00000367 000000000000000000- <1>
    81 00000370 000000000000000000- <1>
    81 00000379 000000000000000000- <1>
    81 00000382 000000000000000000- <1>
    81 0000038B 00000000000000      <1>
    82 00000392 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    82 0000039B 000000000000000000- <1>
    82 000003A4 000000000000000000- <1>
    82 000003AD 000000000000000000- <1>
    82 000003B6 000000000000000000- <1>
    82 000003BF 000000000000000000- <1>
    82 000003C8 000000000000000000- <1>
    82 000003D1 000000000000000000- <1>
    82 000003DA 00000000000000      <1>
    83                              <1> 
    84                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    85 000003E1 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    85 000003EA 000000000000000000- <1>
    85 000003F3 000000000000000000- <1>
    85 000003FC 000000000000000000- <1>
    85 00000405 000000000000000000- <1>
    85 0000040E 000000000000000000- <1>
    85 00000417 000000000000000000- <1>
    85 00000420 000000000000000000- <1>
    85 00000429 00000000000000      <1>
    86 00000430 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    86 00000439 000000000000000000- <1>
    86 00000442 000000000000000000- <1>
    86 0000044B 000000000000000000- <1>
    86 00000454 000000000000000000- <1>
    86 0000045D 000000000000000000- <1>
    86 00000466 000000000000000000- <1>
    86 0000046F 000000000000000000- <1>
    86 00000478 00000000000000      <1>
    87                              <1> 
    88 0000047F 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    89 00000487 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    90                              <1> 
    91                              <1> ;Main scratch buffer for forming paths! Needs to be large enough to splice
    92                              <1> ; a really long invalid DOS path for PATH to work properly.
    93 0000048F 000000000000000000- <1> searchSpec  db 2*cmdBufferL dup (0)   
    93 00000498 000000000000000000- <1>
    93 000004A1 000000000000000000- <1>
    93 000004AA 000000000000000000- <1>
    93 000004B3 000000000000000000- <1>
    93 000004BC 000000000000000000- <1>
    93 000004C5 000000000000000000- <1>
    93 000004CE 000000000000000000- <1>
    93 000004D7 000000000000000000- <1>
    93 000004E0 000000000000000000- <1>
    93 000004E9 000000000000000000- <1>
    93 000004F2 000000000000000000- <1>
    93 000004FB 000000000000000000- <1>
    93 00000504 000000000000000000- <1>
    93 0000050D 000000000000000000- <1>
    93 00000516 000000000000000000- <1>
    93 0000051F 000000000000000000- <1>
    93 00000528 000000000000000000- <1>
    93 00000531 000000000000000000- <1>
    93 0000053A 000000000000000000- <1>
    93 00000543 000000000000000000- <1>
    93 0000054C 000000000000000000- <1>
    93 00000555 000000000000000000- <1>
    93 0000055E 000000000000000000- <1>
    93 00000567 000000000000000000- <1>
    93 00000570 000000000000000000- <1>
    93 00000579 000000000000000000- <1>
    93 00000582 000000000000000000- <1>
    93 0000058B 0000000000000000    <1>
    94                              <1> 
    95                              <1> ;Internal Function vars
    96                              <1> ;Dir Vars
    97 00000593 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    98                              <1> ;                                   Bit[1] set => /P or /p specified
    99                              <1> ;                                   Bit[2] set => A file/path specified
   100 00000594 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
   101 00000595 00000000            <1> dirFileCtr  dd 0    ;Used in /W mode, rollover after 5
   102 00000599 00                  <1> dirDrv      db 0    ;0 based drive number to use
   103 0000059A 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
   103 000005A3 000000000000000000- <1>
   103 000005AC 000000000000000000- <1>
   103 000005B5 000000000000000000- <1>
   103 000005BE 000000000000000000- <1>
   103 000005C7 000000000000000000- <1>
   103 000005D0 000000000000000000- <1>
   103 000005D9 000000000000000000- <1>
   103 000005E2 000000000000000000- <1>
   103 000005EB 000000000000000000- <1>
   103 000005F4 000000000000000000- <1>
   103 000005FD 000000000000000000- <1>
   103 00000606 000000000000000000- <1>
   103 0000060F 000000000000000000- <1>
   103 00000618 00000000            <1>
   104 0000061C 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
   104 00000625 3F3F3F3F3F3F3F      <1>
   105                              <1> dirWideType equ 1
   106                              <1> dirPageType equ 2
   107                              <1> dirFileType equ 4
   108                              <1> ;Volume Vars
   109                              <1> volFcb:
   110                              <1>     istruc exFcb
   111 0000062C FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
   112 0000062D 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
   113 00000633 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
   114 00000634 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
   115 0000063C 3F3F3F              <1>     at exFcb.fileext,   db "???"
   116 0000063F 00000000            <1>     at exFcb.curBlock,  dd 0
   117 00000643 00<rep 15h>         <1>     iend 
   118                              <1> 
   119                              <1> ;Time/Date vars
   120 00000658 00                  <1> td1 db 0    ;Minutes/Year
   121 00000659 00                  <1> td2 db 0    ;Hours/Zero
   122 0000065A 00                  <1> td3 db 0    ;Hundredths/Day
   123 0000065B 00                  <1> td4 db 0    ;Seconds/Month
   124                              <1> 
   125                              <1> ;Rename/Copy/Delete Buffers
   126                              <1> delPath:
   127                              <1> comspecDir:    ;Used to store the directory passed during startup
   128 0000065C 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   128 00000665 000000000000000000- <1>
   128 0000066E 000000000000000000- <1>
   128 00000677 000000000000000000- <1>
   128 00000680 000000000000000000- <1>
   128 00000689 000000000000000000- <1>
   128 00000692 000000000000000000- <1>
   128 0000069B 000000000000000000- <1>
   128 000006A4 000000000000000000- <1>
   128 000006AD 000000000000000000- <1>
   128 000006B6 000000000000000000- <1>
   128 000006BF 000000000000000000- <1>
   128 000006C8 000000000000000000- <1>
   128 000006D1 000000000000000000- <1>
   128 000006DA 00000000            <1>
   129 000006DE 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   129 000006E7 000000000000000000- <1>
   129 000006F0 000000000000000000- <1>
   129 000006F9 000000000000000000- <1>
   129 00000702 000000000000000000- <1>
   129 0000070B 000000000000000000- <1>
   129 00000714 000000000000000000- <1>
   129 0000071D 000000000000000000- <1>
   129 00000726 000000000000000000- <1>
   129 0000072F 000000000000000000- <1>
   129 00000738 000000000000000000- <1>
   129 00000741 000000000000000000- <1>
   129 0000074A 000000000000000000- <1>
   129 00000753 000000000000000000- <1>
   129 0000075C 00000000            <1>
   130 00000760 0000000000000000    <1> srcPtr      dq 0    ;Where to copy pattern to in src path
   131 00000768 0000000000000000    <1> destPtr     dq 0    ;Where to copy pattern to in dest path
   132 00000770 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   132 00000779 2020                <1>
   133                              <1> ;Copy vars
   134 0000077B 00                  <1> verifyFlg   db 0    ;Set if verify on before copy
   135 0000077C FFFF                <1> sourceHdl   dw -1
   136 0000077E FFFF                <1> destHdl     dw -1
   137 00000780 0000                <1> srcHdlInfo  dw 0    ;Save the hdl device info (bit 7 Set -> Char dev)
   138 00000782 0000000000000000    <1> cpBufPtr    dq 0    ;Ptr to the xfr arena
   139 0000078A 0000                <1> wCpBufSz    dw 0    ;Copy Buffer size, max 4096 bytes
   140 0000078C 00000000            <1> dCpCnt      dd 0    ;Number of files we have copied
   141 00000790 00                  <1> bCpFlg      db 0    ;Copy state flag
   142                              <1> 
   143                              <1> ascSrc      equ 1   ;Set if ascii copy for this source file.
   144                              <1> binSrc      equ 2   ;Set if last encountered src file flag was binary
   145                              <1> ascDes      equ 4   ;Set if add ^Z at end of file. Clear if not!
   146                              <1> wcSrc       equ 8   ;Set if wc's in source pattern. Display source file names.
   147                              <1> oneDest     equ 10h ;Single destination, not dir 
   148                              <1> mod1Cpy     equ 20h ;Set if copying files to new dir with same names
   149                              <1> mod2Cpy     equ 40h ;Set if copying files with new names
   150                              <1> mod3Cpy     equ 80h ;Set if dflt cat ASCII files to a single destination
   151                              <1> 
   152                              <1> ;Environment manipulation vars
   153 00000791 0000                <1> envVarSz        dw 0    ;Env var size
   154 00000793 0000                <1> envVarNamSz     dw 0    ;Env var "name="" length
    14                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 00000795 03444952            <1>     db 3, "DIR"
     8 00000799 0C1F                <1>     dw dir - startLbl
     9                              <1> 
    10 0000079B 024344              <1>     db 2, "CD"
    11 0000079E FC23                <1>     dw chdir - startLbl
    12                              <1> 
    13 000007A0 054348444952        <1>     db 5, "CHDIR"
    14 000007A6 FC23                <1>     dw chdir - startLbl
    15                              <1> 
    16 000007A8 024D44              <1>     db 2, "MD"
    17 000007AB 7724                <1>     dw mkdir - startLbl
    18                              <1> 
    19 000007AD 054D4B444952        <1>     db 5, "MKDIR"
    20 000007B3 7724                <1>     dw mkdir - startLbl
    21                              <1> 
    22 000007B5 025244              <1>     db 2, "RD"
    23 000007B8 C024                <1>     dw rmdir - startLbl
    24                              <1> 
    25 000007BA 05524D444952        <1>     db 5, "RMDIR"
    26 000007C0 C024                <1>     dw rmdir - startLbl
    27                              <1> 
    28 000007C2 0344454C            <1>     db 3, "DEL"
    29 000007C6 832C                <1>     dw erase - startLbl
    30                              <1> 
    31 000007C8 054552415345        <1>     db 5, "ERASE"
    32 000007CE 832C                <1>     dw erase - startLbl
    33                              <1> 
    34 000007D0 0444415445          <1>     db 4, "DATE"
    35 000007D5 C62D                <1>     dw date - startLbl
    36                              <1> 
    37 000007D7 0454494D45          <1>     db 4, "TIME"
    38 000007DC 742F                <1>     dw time - startLbl
    39                              <1> 
    40 000007DE 04434F5059          <1>     db 4, "COPY"
    41 000007E3 0A25                <1>     dw copy - startLbl
    42                              <1> 
    43 000007E5 0443545459          <1>     db 4, "CTTY"
    44 000007EA 9D30                <1>     dw ctty - startLbl
    45                              <1> 
    46 000007EC 03434C53            <1>     db 3, "CLS"
    47 000007F0 4431                <1>     dw cls - startLbl
    48                              <1> 
    49 000007F2 05425245414B        <1>     db 5, "BREAK"
    50 000007F8 B631                <1>     dw break - startLbl
    51                              <1> 
    52 000007FA 06564552494659      <1>     db 6, "VERIFY"
    53 00000801 3732                <1>     dw verify - startLbl
    54                              <1> 
    55 00000803 0652454E414D45      <1>     db 6, "RENAME"
    56 0000080A B432                <1>     dw rename - startLbl
    57                              <1> 
    58 0000080C 0352454E            <1>     db 3, "REN"
    59 00000810 B432                <1>     dw rename - startLbl
    60                              <1>     
    61 00000812 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 0000081B FD36                <1>     dw truename - startLbl
    63                              <1> 
    64 0000081D 03564552            <1>     db 3, "VER"
    65 00000821 E338                <1>     dw version - startLbl
    66                              <1> 
    67 00000823 03564F4C            <1>     db 3, "VOL"
    68 00000827 2438                <1>     dw volume - startLbl
    69                              <1> 
    70 00000829 034D454D            <1>     db 3, "MEM"
    71 0000082D 2739                <1>     dw memory - startLbl
    72                              <1> 
    73 0000082F 0445584954          <1>     db 4, "EXIT"
    74 00000834 243B                <1>     dw exit - startLbl
    75                              <1> 
    76 00000836 0454595045          <1>     db 4, "TYPE"
    77 0000083B 713A                <1>     dw type - startLbl
    78                              <1> 
    79 0000083D 054C4142454C        <1>     db 5, "LABEL"
    80 00000843 4E37                <1>     dw label - startLbl
    81                              <1> 
    82 00000845 0450415448          <1>     db 4, "PATH"
    83 0000084A 713E                <1>     dw pathEdit - startLbl
    84                              <1> 
    85 0000084C 03534554            <1>     db 3, "SET"
    86 00000850 523D                <1>     dw set - startLbl
    87                              <1> 
    88 00000852 0650524F4D5054      <1>     db 6, "PROMPT"
    89 00000859 503F                <1>     dw prompt - startLbl
    90                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    91 0000085B 054D4B4C424C        <1>     db 5, "MKLBL"
    92 00000861 7837                <1>     dw mklbl - startLbl
    93                              <1> 
    94 00000863 05524D4C424C        <1>     db 5, "RMLBL"
    95 00000869 B337                <1>     dw rmlbl - startLbl
    96                              <1> 
    97 0000086B 05524E4C424C        <1>     db 5, "RNLBL"
    98 00000871 EE37                <1>     dw rnlbl - startLbl
    99                              <1> 
   100 00000873 05544F554348        <1>     db 5, "TOUCH"
   101 00000879 F034                <1>     dw touch - startLbl
   102                              <1> 
   103 0000087B 044A4F494E          <1>     db 4, "JOIN"
   104 00000880 5335                <1>     dw join - startLbl
   105                              <1> 
   106 00000882 055355425354        <1>     db 5, "SUBST"
   107 00000888 1636                <1>     dw subst - startLbl
   108                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   109                              <1> 
   110                              <1> ;BATCH ORIENTED COMMANDS HERE
   111 0000088A 044543484F          <1>     db 4, "ECHO"
   112 0000088F C03F                <1>     dw echo - startLbl
   113                              <1> 
   114 00000891 055041555345        <1>     db 5, "PAUSE"
   115 00000897 7D40                <1>     dw pauza - startLbl
   116                              <1> 
   117 00000899 0352454D            <1>     db 3, "REM"
   118 0000089D C640                <1>     dw remark - startLbl
   119 0000089F FF                  <1>     db -1   ;End of table
    15                                  %include "./Data/cmdStr.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 000008A0 0D0A24              <1> crlf    db  CR,LF,"$"
     3 000008A3 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 000008A8 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 000008B1 696C65206D69737369- <1>
     4 000008BA 6E670D0A24          <1>
     5 000008BF 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 000008C8 6469736B2077697468- <1>
     5 000008D1 206261746368206669- <1>
     5 000008DA 6C65                <1>
     6 000008DC 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 000008E5 737320616E79206B65- <1>
     6 000008EE 79207768656E207265- <1>
     6 000008F7 6164790D0A24        <1>
     7 000008FD 0D0A5465726D696E61- <1> batFail db  CR,LF,"Terminate batch job (Y/N)? $"
     7 00000906 746520626174636820- <1>
     7 0000090F 6A6F622028592F4E29- <1>
     7 00000918 3F2024              <1>
     8 0000091B 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     8 00000924 6E64206F722066696C- <1>
     8 0000092D 65206E616D650D0A24  <1>
     9 00000936 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     9 0000093F 2066696C65206E616D- <1>
     9 00000948 65206F7220          <1>
    10 0000094D 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    10 00000956 666F756E640D0A24    <1>
    11 0000095E 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full.
    11 00000967 656E74206469736B20- <1>
    11 00000970 73706163650D0A24    <1>
    12 00000978 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    12 00000981 7669726F6E6D656E74- <1>
    12 0000098A 2073706163650D0A24  <1>
    13 00000993 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    13 0000099C 74696F6E206572726F- <1>
    13 000009A5 720D0A24            <1>
    14 000009A9 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    14 000009B2 6F7420626520636F70- <1>
    14 000009BB 696564206F6E746F20- <1>
    14 000009C4 697473656C660D0A24  <1>
    15 000009CD 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    15 000009D6 662064657374696E61- <1>
    15 000009DF 74696F6E206C6F7374- <1>
    15 000009E8 206265666F72652063- <1>
    15 000009F1 6F70790D0A24        <1>
    16                              <1> ;Copy end message. First write # files copied then this message 
    17 000009F7 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    17 00000A00 636F706965640D0A24  <1>
    18 00000A09 4E6F7420656E6F7567- <1> cpNoMem db  "Not enough memory for COPY",CR,LF,"$"      ;Never should happen
    18 00000A12 68206D656D6F727920- <1>
    18 00000A1B 666F7220434F50590D- <1>
    18 00000A24 0A24                <1>
    19                              <1> ;Dir end1 msg. First write # files in dir then this
    20 00000A26 2046696C6528732920- <1> dirOk   db  " File(s) $"
    20 00000A2F 24                  <1>
    21                              <1> ;Dir end2 msg. First write # bytes free then this message
    22 00000A30 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    22 00000A39 65650D0A24          <1>
    23 00000A3E 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    24                              <1> 
    25 00000A47 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    25 00000A50 726976652073706563- <1>
    25 00000A59 696669636174696F6E- <1>
    25 00000A62 0D0A24              <1>
    26 00000A65 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    26 00000A6E 6B6579207768656E20- <1>
    26 00000A77 7265616479202E202E- <1>
    26 00000A80 202E2024            <1>
    27 00000A84 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    27 00000A8D 6172616D657465720D- <1>
    27 00000A96 0A24                <1>
    28                              <1> 
    29 00000A98 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    29 00000AA1 576564546875467269- <1>
    29 00000AAA 536174              <1>
    30 00000AAD 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    30 00000AB6 206461746524        <1>
    31 00000ABC 43757272656E742064- <1> curDate db  "Current date is $"
    31 00000AC5 6174652069732024    <1>
    32 00000ACD 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    32 00000AD6 657720646174652024  <1>
    33 00000ADF 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    33 00000AE8 293A2024            <1>
    34 00000AEC 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    34 00000AF5 293A2024            <1>
    35 00000AF9 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    35 00000B02 293A2024            <1>
    36 00000B06 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    36 00000B0F 2074696D6524        <1>
    37 00000B15 43757272656E742074- <1> curTime db  "Current time is $"
    37 00000B1E 696D652069732024    <1>
    38 00000B26 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    38 00000B2F 65772074696D653A20- <1>
    38 00000B38 24                  <1>
    39                              <1> 
    40 00000B39 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    40 00000B42 7572652028592F4E29- <1>
    40 00000B4B 3F2024              <1>
    41                              <1> 
    42 00000B4E 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    42 00000B57 56657273696F6E2024  <1>
    43                              <1> 
    44 00000B60 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    44 00000B69 6E2064726976652024  <1>
    45 00000B72 2069732024          <1> volOk   db " is $"
    46 00000B77 20686173206E6F206C- <1> volNo   db " has no label$"
    46 00000B80 6162656C24          <1>
    47                              <1> 
    48 00000B85 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    48 00000B8E 69726563746F72790D- <1>
    48 00000B97 0A24                <1>
    49 00000B99 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    49 00000BA2 206372656174652064- <1>
    49 00000BAB 69726563746F72790D- <1>
    49 00000BB4 0A24                <1>
    50 00000BB6 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    50 00000BBF 6174682C206E6F7420- <1>
    50 00000BC8 6469726563746F7279- <1>
    50 00000BD1 2C0D0A              <1>
    51 00000BD4 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    51 00000BDD 6F7279206E6F742065- <1>
    51 00000BE6 6D7074790D0A24      <1>
    52 00000BED 204469726563746F72- <1> dirMain db " Directory of  $"
    52 00000BF6 79206F66202024      <1>
    53 00000BFD 4E6F20506174682024  <1> noPath  db "No Path $"
    54 00000C06 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    54 00000C0F 6E6965640D0A24      <1>
    55 00000C16 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    55 00000C1F 72697665206973206E- <1>
    55 00000C28 6F206C6F6E67657220- <1>
    55 00000C31 76616C696424        <1>
    56                              <1> ;badDrvSrch  db "Invalid drive in search path",CR,LF,"$"        ;MAY REMOVE
    57 00000C37 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    57 00000C40 65766963650D0A24    <1>
    58 00000C48 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    58 00000C51 20666F756E640D0A24  <1>
    59 00000C5A 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    59 00000C63 726F720D0A24        <1>
    60 00000C69 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    60 00000C72 6F74206265206E6573- <1>
    60 00000C7B 7465640D0A24        <1>
    61 00000C81 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    61 00000C8A 6174652066696C6520- <1>
    61 00000C93 6572726F7220647572- <1>
    61 00000C9C 696E6720706970650D- <1>
    61 00000CA5 0A24                <1>
    62 00000CA7 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    62 00000CB0 2062696E6172792072- <1>
    62 00000CB9 656164732066726F6D- <1>
    62 00000CC2 206120646576696365- <1>
    62 00000CCB 0D0A24              <1>
    63 00000CCE 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    64 00000CD4 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    65 00000CD9 425245414B20697320- <1> breakIs db "BREAK is $"
    65 00000CE2 24                  <1>
    66 00000CE3 564552494659206973- <1> verifyIs    db "VERIFY is $"
    66 00000CEC 2024                <1>
    67 00000CEE 4543484F2069732024  <1> echoIs  db "ECHO is $"  
    68 00000CF7 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    68 00000D00 617468206F72206669- <1>
    68 00000D09 6C65206E616D650D0A- <1>
    68 00000D12 24                  <1>
    69 00000D13 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    69 00000D1C 756D626572206F6620- <1>
    69 00000D25 706172616D65746572- <1>
    69 00000D2E 730D0A24            <1>
    70 00000D32 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    70 00000D3B 74696E6720746F2064- <1>
    70 00000D44 6576696365          <1>
    71 00000D49 08200800            <1> backSpace   db BSP," ",BSP,NUL
    72 00000D4D 50726F6772616D2074- <1> noMemMsg  db "Program too big to fit in memory",CR,LF,"$"
    72 00000D56 6F6F2062696720746F- <1>
    72 00000D5F 2066697420696E206D- <1>
    72 00000D68 656D6F72790D0A24    <1>
    73                              <1> 
    74                              <1> 
    75 00000D70 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    75 00000D79 20202020202020546F- <1>
    75 00000D82 74616C207379737465- <1>
    75 00000D8B 6D206D656D6F72793A- <1>
    75 00000D94 2024                <1>
    76 00000D96 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    76 00000D9F 20202020202020204D- <1>
    76 00000DA8 656D6F727920757365- <1>
    76 00000DB1 6420627920444F533A- <1>
    76 00000DBA 2024                <1>
    77 00000DBC 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    77 00000DC5 656D6F727920757365- <1>
    77 00000DCE 64206279206170706C- <1>
    77 00000DD7 69636174696F6E733A- <1>
    77 00000DE0 2024                <1>
    78 00000DE2 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    78 00000DEB 656D6F727920726573- <1>
    78 00000DF4 657276656420627920- <1>
    78 00000DFD 68617264776172653A- <1>
    78 00000E06 2024                <1>
    79 00000E08 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    79 00000E11 202020202020202020- <1>
    79 00000E1A 2020202020204D656D- <1>
    79 00000E23 6F727920667265653A- <1>
    79 00000E2C 2024                <1>
    80 00000E2E 20627974657324      <1> memByte db " bytes$"
    81 00000E35 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    81 00000E3E 6F7420417373657274- <1>
    81 00000E47 61696E20444F532045- <1>
    81 00000E50 6E74727920506F696E- <1>
    81 00000E59 7424                <1>
    82 00000E5B 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    82 00000E64 416C6C6F636174696F- <1>
    82 00000E6D 6E204572726F7224    <1>
    83 00000E75 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    83 00000E7E 4572726F7224        <1>
    84 00000E84 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    84 00000E8D 68616C74656424      <1>
    85                              <1> 
    86 00000E94 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    86 00000E9D 206372656174652070- <1>
    86 00000EA6 6970650D0A          <1>
    87                              <1> pipeErrMsgL equ $ - pipeErrMsg
    88 00000EAB 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    88 00000EB4 6F6E206572726F720D- <1>
    88 00000EBD 0A                  <1>
    89                              <1> redirErrMsgL   equ $ - redirErrMsg
    90                              <1> 
    91 00000EBE 1B5B324A            <1> ansiCls  db ESC,"[2J" ;ANSI CLS sequence, 4 chars long
    92 00000EC2 2020202024          <1> fourSpc  db "    $"
    93 00000EC7 20202024            <1> threeSpc db "   $"
    94 00000ECB 202024              <1> twoSpc   db "  $"
    95                              <1> 
    96 00000ECE 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    96 00000ED7 696679204F4E206F72- <1>
    96 00000EE0 204F46460D0A24      <1>
    97                              <1> 
    98 00000EE7 50524F4D50543D0D    <1> promptEVar  db "PROMPT=",CR     ;Must be CR terminated!
    99 00000EEF 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
   100                              <1> ;If anything goes wrong with piping or redirecting just close first two 
   101                              <1> ; handles and reopen this device. Defaults to CON
   102 00000EF8 434F4E000000000000  <1> devName db "CON", 6 dup (0) ;8 chars + space for null terminator
   103 00000F01 5F3A5C4155544F4558- <1> autoSpec    db "_:\AUTOEXEC.BAT",0
   103 00000F0A 45432E42415400      <1>
   104                              <1> autoSpecL equ $ - autoSpec
   105 00000F11 504154483D00        <1> pathEVar    db "PATH=",0
   106 00000F17 434F4D535045433D00  <1> comspecEVar db "COMSPEC=",0
   107 00000F20 434F4D4D414E442E43- <1> cspec   db "COMMAND.COM", 0
   107 00000F29 4F4D00              <1>
   108                              <1> 
   109                              <1> ;Int 24h strings
   110                              <1> errMsgPtrTbl:
   111 00000F2C 2400                <1>     dw errorMsgTbl.0 - errMsgPtrTbl
   112 00000F2E 3400                <1>     dw errorMsgTbl.1 - errMsgPtrTbl
   113 00000F30 4200                <1>     dw errorMsgTbl.2 - errMsgPtrTbl
   114 00000F32 4D00                <1>     dw errorMsgTbl.3 - errMsgPtrTbl
   115 00000F34 5E00                <1>     dw errorMsgTbl.4 - errMsgPtrTbl
   116 00000F36 6400                <1>     dw errorMsgTbl.5 - errMsgPtrTbl
   117 00000F38 7100                <1>     dw errorMsgTbl.6 - errMsgPtrTbl
   118 00000F3A 7700                <1>     dw errorMsgTbl.7 - errMsgPtrTbl
   119 00000F3C 8600                <1>     dw errorMsgTbl.8 - errMsgPtrTbl
   120 00000F3E 9800                <1>     dw errorMsgTbl.9 - errMsgPtrTbl
   121 00000F40 A600                <1>     dw errorMsgTbl.A - errMsgPtrTbl
   122 00000F42 B300                <1>     dw errorMsgTbl.B - errMsgPtrTbl
   123 00000F44 BF00                <1>     dw errorMsgTbl.C - errMsgPtrTbl
   124 00000F46 D000                <1>     dw errorMsgTbl.D - errMsgPtrTbl
   125 00000F48 E300                <1>     dw errorMsgTbl.E - errMsgPtrTbl
   126 00000F4A F300                <1>     dw errorMsgTbl.F - errMsgPtrTbl
   127 00000F4C 1401                <1>     dw errorMsgTbl.10 - errMsgPtrTbl
   128 00000F4E 2501                <1>     dw errorMsgTbl.11 - errMsgPtrTbl
   129                              <1> errorMsgTbl:
   130 00000F50 57726974652050726F- <1> .0: db "Write Proctect $"       ;Driver Error 0 / DOS Error 013h
   130 00000F59 63746563742024      <1>
   131 00000F60 556E6B6E6F776E2055- <1> .1: db "Unknown Unit $"         ;Driver Error 1 / DOS Error 014h
   131 00000F69 6E69742024          <1>
   132 00000F6E 4E6F74205265616479- <1> .2: db "Not Ready $"            ;Driver Error 2 / DOS Error 015h
   132 00000F77 2024                <1>
   133 00000F79 556E6B6E6F776E2043- <1> .3: db "Unknown Command $"      ;Driver Error 3 / DOS Error 016h
   133 00000F82 6F6D6D616E642024    <1>
   134 00000F8A 446174612024        <1> .4: db "Data $"                 ;Driver Error 4 / DOS Error 017h
   135 00000F90 426164205265717565- <1> .5: db "Bad Request $"          ;Driver Error 5 / DOS Error 018h
   135 00000F99 73742024            <1>
   136 00000F9D 5365656B2024        <1> .6: db "Seek $"                 ;Driver Error 6 / DOS Error 019h
   137 00000FA3 556E6B6E6F776E204D- <1> .7: db "Unknown Media $"        ;Driver Error 7 / DOS Error 01Ah
   137 00000FAC 656469612024        <1>
   138 00000FB2 536563746F72204E6F- <1> .8: db "Sector Not Found $"     ;Driver Error 8 / DOS Error 01Bh
   138 00000FBB 7420466F756E642024  <1>
   139 00000FC4 4F7574204F66205061- <1> .9: db "Out Of Paper $"         ;Driver Error 9 / DOS Error 01Ch
   139 00000FCD 7065722024          <1>
   140 00000FD2 577269746520466175- <1> .A: db "Write Fault $"          ;Driver Error A / DOS Error 01Dh
   140 00000FDB 6C742024            <1>
   141 00000FDF 52656164204661756C- <1> .B: db "Read Fault $"           ;Driver Error B / DOS Error 01Eh
   141 00000FE8 742024              <1>
   142 00000FEB 47656E6572616C2046- <1> .C: db "General Failure $"      ;Driver Error C / DOS Error 01Fh
   142 00000FF4 61696C7572652024    <1>
   143 00000FFC 53686172696E672076- <1> .D: db "Sharing violation $"    ;SHARE Error / DOS Error 020h
   143 00001005 696F6C6174696F6E20- <1>
   143 0000100E 24                  <1>
   144 0000100F 4C6F636B2076696F6C- <1> .E: db "Lock violation $"       ;SHARE Error / DOS Error 021h
   144 00001018 6174696F6E2024      <1>
   145 0000101F 506C6561736520496E- <1> .F: db "Please Insert disk "    ;Driver Error F / DOS Error 022h
   145 00001028 73657274206469736B- <1>
   145 00001031 20                  <1>
   146 00001032 202020202020202020- <1> .FVol:  db 11 dup (" ")         ; Volume name for disk. Setup before print
   146 0000103B 2020                <1>
   147 0000103D 0D0A24              <1>         db CR,LF,"$"
   148                              <1> ;Next two strings dont print any more information, such as reading/writing etc
   149 00001040 46434220756E617661- <1> .10:    db "FCB unavailable $"      ;FCB Error / DOS Error 023h - RESERVED
   149 00001049 696C61626C652024    <1>
   150 00001051 53686172696E672062- <1> .11:    db "Sharing buffer error $" ;SHARE Error / Error 024h
   150 0000105A 756666657220657272- <1>
   150 00001063 6F722024            <1>
   151                              <1> 
   152                              <1> ;Anything above this is a generic network error.
   153 00001067 47656E6572616C204E- <1> genNetErr   db "General Network Error $"    ;All NET errors codes [32h, 58h]
   153 00001070 6574776F726B204572- <1>
   153 00001079 726F722024          <1>
   154                              <1> 
   155                              <1> ;Rest of the Int 24h error messages go here
   156 0000107E 64726976652024      <1> drvMsg      db "drive $"
   157 00001085 6572726F7220726561- <1> readMsg     db "error reading $"
   157 0000108E 64696E672024        <1>
   158 00001094 6572726F7220777269- <1> writeMsg    db "error writing $"
   158 0000109D 74696E672024        <1>
   159 000010A3 41626F727424        <1> abortMsg    db "Abort$" 
   160 000010A9 49676E6F726524      <1> ignoreMsg   db "Ignore$"
   161 000010B0 526574727924        <1> retryMsg    db "Retry$"
   162 000010B6 4661696C24          <1> failMsg     db "Fail$"
   163 000010BB 2C2024              <1> betweenMsg  db ", $"
   164 000010BE 3F2024              <1> endMsg      db "? $"
   165 000010C1 49524146            <1> i24Resp     db "IRAF"   ;Abort Retry Ignore Fail
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1> ;Jumped to with edx=0 means no autoexec. edx=-1 means autoexec.
     3                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     4                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     5                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     6 000010C5 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     7 000010C8 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     8 000010CC C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     9 000010CF B44A                <1>     mov ah, 4Ah ;Realloc
    10 000010D1 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    11 000010D4 CD21                <1>     int 21h
    12 000010D6 85D2                <1>     test edx, edx   ;If zero, no autoexec or single command
    13 000010D8 7432                <1>     jz commandMain
    14 000010DA E8E4090000          <1>     call getSetMainState    ;Ensure the buffers are ready to be used 
    15                              <1> ;If inSingle is set, cmd already in buffer and ready for processing  
    16 000010DF F605AEEFFFFF04      <1>     test byte [statFlg1], inSingle
    17 000010E6 0F8584000000        <1>     jnz commandMain.goSingle 
    18                              <1>     ;Only enter here if we are autoexec :)
    19 000010EC C6056EF0FFFF0F      <1>     mov byte [inBuffer + 1], autoSpecL - 1  ;Drop one from the count for CR
    20 000010F3 488D3507FEFFFF      <1>     lea rsi, autoSpec
    21 000010FA 488D3D61F0FFFF      <1>     lea rdi, inBuffer + 2
    22 00001101 E80C340000          <1>     call strcpy
    23 00001106 C647FF0D            <1>     mov byte [rdi - 1], CR  ;Store a CR over the terminating null
    24 0000110A EB56                <1>     jmp short commandMain.batProceed
    25                              <1> commandMain:
    26 0000110C 488B25F2EEFFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    27 00001113 E8AB090000          <1>     call getSetMainState
    28                              <1> .inputMain:         ;Only reset once per line!
    29 00001118 F60575EFFFFF04      <1>     test byte [statFlg1], inSingle   ;If we here in single mode, time to exit
    30 0000111F 0F85FF290000        <1>     jnz exit
    31 00001125 E8E6310000          <1>     call printCRLF  ;Command complete, indicate with new line!
    32 0000112A B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    33 0000112F CD21                <1>     int 21h
    34 00001131 B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    35 00001136 BA01000000          <1>     mov edx, 1      ;Start new print job
    36 0000113B CD21                <1>     int 21h
    37                              <1> .inputGetAgain:
    38 0000113D E840340000          <1>     call clearCommandLineState      ;Cleans all handles 5->MAX
    39                              <1> .inputGetCmdlineAgain:
    40 00001142 E830310000          <1>     call printPrompt    ;Ok we are gonna get more input, output prompt
    41 00001147 F60546EFFFFF08      <1>     test byte [statFlg1], inBatch   ;If batch on, get the next line to execute
    42 0000114E 0F85C20B0000        <1>     jnz batNextLine
    43 00001154 488D1505F0FFFF      <1>     lea rdx, inBuffer
    44 0000115B B8000A0000          <1>     mov eax, 0A00h      ;Do Buffered input
    45 00001160 CD21                <1>     int 21h
    46                              <1> .batProceed:            ;Jump here to copy the batch input line 
    47 00001162 E8A9310000          <1>     call printCRLF  ;Note we have accepted input
    48                              <1> ;First check we had something typed in of length greater than 0
    49 00001167 803DF3EFFFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    50 0000116E 74D2                <1>     je .inputGetCmdlineAgain  ;If not, keep looping input
    51                              <1>     ;Copy over the input text
    52                              <1> .goSingle:
    53 00001170 488D35E9EFFFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    54 00001177 488D3D64F0FFFF      <1>     lea rdi, cpyBuffer
    55 0000117E B982000000          <1>     mov ecx, cmdBufferL     ;Copy the buffer over to manipulate
    56 00001183 F3A4                <1>     rep movsb
    57 00001185 E870000000          <1>     call makeCmdBuffer      ;Preprocess the redir, make cmd buffer
    58                              <1>     ;Now check we aren't starting with a pipe or <CR> and treat differently
    59 0000118A 488D35D5F0FFFF      <1>     lea rsi, cmdBuffer + 2
    60 00001191 E8BA330000          <1>     call skipDelimiters
    61 00001196 803E0D              <1>     cmp byte [rsi], CR      ;If the first non-delim is a CR, reject input!
    62 00001199 74A2                <1>     je .inputGetAgain       ;Wipe redir flags and reobtain input!
    63 0000119B 803E7C              <1>     cmp byte [rsi], "|"     ;If the first non-delim is a pipe, syntax error!
    64 0000119E 0F84D4030000        <1>     je hardSynErr
    65                              <1> .pipeLoop:
    66 000011A4 4C8B0564EEFFFF      <1>     mov r8, qword [pspPtr]  ;Point back to home segment
    67 000011AB E8A4000000          <1>     call makeCmdString      ;Makes the CR delimited command in psp
    68                              <1>     ;ZF here indicates if we are at the end of the command or nots
    69 000011B0 E85B070000          <1>     call setupRedirandPipes ;Setup/advance pipes and redir as appropriate
    70 000011B5 E8F3000000          <1>     call analyseCmdline     ;Setup cmdName and fcb for cmdBuffer portion
    71 000011BA E845020000          <1>     call doCommandLine      ;This preps and executes the command portion.
    72                              <1> .okRet:                     ;Normal return point for processing
    73 000011BF E851050000          <1>     call advanceRedir       ;Now advance and end redir if needed
    74 000011C4 F605CDEEFFFFFF      <1>     test byte [pipeFlag], -1    ;If no pipes, reset state, accept new input
    75 000011CB 0F8447FFFFFF        <1>     jz .inputMain
    76                              <1>     ;Now we pull the commandline forwards. 
    77 000011D1 E87E000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    78 000011D6 488D3D89F0FFFF      <1>     lea rdi, cmdBuffer + 2
    79 000011DD 4889F1              <1>     mov rcx, rsi
    80 000011E0 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    81 000011E3 280D7CF0FFFF        <1>     sub byte [cmdBuffer + 1], cl    ;And erase from the count
    82 000011E9 8A0D76F0FFFF        <1>     mov cl, byte [cmdBuffer + 1]
    83 000011EF FFC1                <1>     inc ecx     ;One more for the terminating char
    84 000011F1 F3A4                <1>     rep movsb   ;Move the chars over    
    85 000011F3 E879330000          <1>     call clearCommandState  ;Else, clear the command state and start again
    86 000011F8 EBAA                <1>     jmp short .pipeLoop     ;Doesn't close handles above 5 until end of pipe!
    87                              <1> 
    88                              <1> makeCmdBuffer:
    89                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    90                              <1> ; copy buffer. Called only once in a cycle.
    91                              <1> ;Throughout: CL has char count, CH has quote count
    92 000011FA 488D35E3EFFFFF      <1>     lea rsi, [cpyBuffer + 2]    ;Goto copy buffer + 2
    93 00001201 31C9                <1>     xor ecx, ecx
    94 00001203 4889F7              <1>     mov rdi, rsi    ;Save the pointer
    95                              <1> .countQuotes:
    96 00001206 AC                  <1>     lodsb
    97 00001207 3C22                <1>     cmp al, '"'
    98 00001209 7507                <1>     jne .notQuoteToCount
    99 0000120B FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   100 0000120D E9F4FFFFFF          <1>     jmp .countQuotes
   101                              <1> .notQuoteToCount:
   102 00001212 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   103 00001214 75F0                <1>     jne .countQuotes
   104 00001216 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   105 00001219 488D3D46F0FFFF      <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
   106                              <1> .getChar:
   107 00001220 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   108 00001221 3C22                <1>     cmp al, '"'     ;Is char a quote?
   109 00001223 750E                <1>     jne .notQuote
   110 00001225 FECD                <1>     dec ch          ;We have a quote, now decrement
   111 00001227 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   112                              <1> .searchForClosingQuote:
   113                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   114 00001229 AA                  <1>     stosb   ;Store char and inc rdi
   115 0000122A FEC1                <1>     inc cl
   116 0000122C AC                  <1>     lodsb   ;Get next char
   117 0000122D 3C22                <1>     cmp al, '"'
   118 0000122F 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   119 00001231 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   120                              <1> .notQuote:
   121 00001233 E877060000          <1>     call peelRedir      ;Intervene redir if needed
   122 00001238 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   123 0000123A 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   124 0000123C EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   125                              <1> .pipeHandle:
   126                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   127 0000123E 0F8434030000        <1>     jz hardSynErr ;We had double pipe symbol, syntax error and reset!
   128                              <1> .notRedir:
   129 00001244 AA                  <1>     stosb       ;Store char and advance rdi
   130 00001245 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   131 00001247 7404                <1>     je .exit
   132 00001249 FEC1                <1>     inc cl      ;Increment char count
   133 0000124B EBD3                <1>     jmp short .getChar    ;If not, get next char
   134                              <1> .exit:
   135 0000124D 880D12F0FFFF        <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   136                              <1>     return
    13                              <2> %%_ret:
    14 00001253 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   137                              <1> 
   138                              <1> makeCmdString:
   139                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   140                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   141                              <1> ; Copies into the psp.
   142                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   143 00001254 488D350BF0FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   144 0000125B 31C9                <1>     xor ecx, ecx
   145 0000125D 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   146                              <1> .countQuotes:
   147 00001260 AC                  <1>     lodsb
   148 00001261 3C22                <1>     cmp al, '"'
   149 00001263 7507                <1>     jne .notQuoteToCount
   150 00001265 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   151 00001267 E9F4FFFFFF          <1>     jmp .countQuotes
   152                              <1> .notQuoteToCount:
   153 0000126C 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   154 0000126E 75F0                <1>     jne .countQuotes
   155 00001270 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   156 00001273 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   157                              <1> .getChar:
   158 0000127A AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   159 0000127B 3C22                <1>     cmp al, '"'     ;Is char a quote?
   160 0000127D 750E                <1>     jne .notQuote
   161 0000127F FECD                <1>     dec ch          ;We have a quote, now decrement
   162 00001281 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   163                              <1> .searchForClosingQuote:
   164                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   165 00001283 AA                  <1>     stosb   ;Store char and inc rdi
   166 00001284 FEC1                <1>     inc cl
   167 00001286 AC                  <1>     lodsb   ;Get next char
   168 00001287 3C22                <1>     cmp al, '"'
   169 00001289 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   170 0000128B FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   171                              <1> .notQuote:
   172 0000128D 3C7C                <1>     cmp al, "|"
   173 0000128F 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   174 00001291 B00D                <1>     mov al, CR          ;Store the pipe char
   175 00001293 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   176                              <1> .notPipe:
   177 00001296 AA                  <1>     stosb       ;Store char and advance rdi
   178 00001297 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   179 00001299 7404                <1>     je .exit
   180 0000129B FEC1                <1>     inc cl      ;Increment char count
   181 0000129D EBDB                <1>     jmp short .getChar    ;If not, get next char
   182                              <1> .exit:
   183 0000129F 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   184 000012A2 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   185 000012A9 803E0D              <1>     cmp byte [rsi], CR  
   186                              <1>     return
    13                              <2> %%_ret:
    14 000012AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   187                              <1> 
   188                              <1> analyseCmdline:
   189                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   190                              <1> ; processes the command name into the FCB.  
   191 000012AD C60581F0FFFF00      <1>     mov byte [cmdName], 0   ;Init this field to indicate no cmd
   192                              <1> ;Start by searching for any switch chars! Set byte if switch chars fnd!!
   193 000012B4 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   194 000012BB 4889FE              <1>     mov rsi, rdi                    ;Prep rsi here too
   195 000012BE 0FB64FFF            <1>     movzx ecx, byte [rdi - 1]       ;Get the count byte
   196 000012C2 8A0562EDFFFF        <1>     mov al, byte [switchChar]
   197 000012C8 F2AE                <1>     repne scasb                     ;Scan for the switch char
   198 000012CA 7506                <1>     jne .noSwitchFnd
   199 000012CC F615D7EDFFFF        <1>     not byte [switchFnd]            ;Set switch char fnd on!
   200                              <1> .noSwitchFnd:
   201 000012D2 E879320000          <1>     call skipDelimiters     ;Skip any preceeding separators from rsi
   202 000012D7 803E0D              <1>     cmp byte [rsi], CR      ;We have no command? Return!
   203                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000012DA 74(AC)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 000012DC 4889F3              <1>     mov rbx, rsi            ;Save the start of the text in rbx
   205                              <1> .plp:
   206 000012DF 488D3D1FEEFFFF      <1>     lea rdi, cmdFcb         ;Loop on the commandFCB
   207 000012E6 B801290000          <1>     mov eax, 2901h
   208 000012EB CD21                <1>     int 21h
   209 000012ED 3CFF                <1>     cmp al, -1  ;If DOS returns -1, we have a bad drive specified, fail!
   210 000012EF 0F8402010000        <1>     je .exitBadDrv
   211                              <1> .trailingDotLp:
   212                              <1> ;Reverse along trailing dots!
   213 000012F5 807EFF2E            <1>     cmp byte [rsi - 1], "." ;Is this a dot?
   214 000012F9 7505                <1>     jne .noTrailingDots
   215 000012FB 48FFCE              <1>     dec rsi
   216 000012FE EBF5                <1>     jmp short .trailingDotLp
   217                              <1> .noTrailingDots:
   218 00001300 8A0523EDFFFF        <1>     mov al, byte [pathSep]  
   219 00001306 3806                <1>     cmp byte [rsi], al      ;Is the terminator a pathsep?
   220 00001308 7525                <1>     jne .notPs
   221 0000130A 48FFC6              <1>     inc rsi ;Go to the char after the pathsep
   222 0000130D AC                  <1>     lodsb   ;Get this char
   223 0000130E 48FFCE              <1>     dec rsi ;And move rsi back to where we were
   224 00001311 3C20                <1>     cmp al, 20h     ;Is this char below 32?
   225 00001313 7217                <1>     jb .delimfnd    ;Also a delimiter
   226 00001315 3C5C                <1>     cmp al, "\"     ;If this is a second pathsep, we are done
   227 00001317 7413                <1>     je .delimfnd
   228 00001319 3C2F                <1>     cmp al, "/"     ;Or an alt pathsep?
   229 0000131B 740F                <1>     je .delimfnd
   230 0000131D 3C2E                <1>     cmp al, byte "."
   231 0000131F 740B                <1>     je .delimfnd
   232 00001321 3C22                <1>     cmp al, byte '"'
   233 00001323 7407                <1>     je .delimfnd
   234 00001325 E834320000          <1>     call isALdelimiter  ;Is this a delim char?
   235 0000132A 75B3                <1>     jne .plp            ;If not, we loop again
   236                              <1> .delimfnd:
   237 0000132C 48FFCE              <1>     dec rsi             ;Point rsi to end of the command
   238                              <1> .notPs:
   239                              <1> ;Now we have reached the end of the command, rsi points to the first char
   240                              <1> ; after the command, whether a delimiter or not.
   241 0000132F 4889F1              <1>     mov rcx, rsi
   242 00001332 4829D9              <1>     sub rcx, rbx    ;Get the number of chars in the command ONLY
   243 00001335 4887DE              <1>     xchg rbx, rsi   ;Swap the start and end of the commands!!!
   244 00001338 488D3DA7EFFFFF      <1>     lea rdi, cmdPathSpec
   245 0000133F F3A4                <1>     rep movsb
   246 00001341 30C0                <1>     xor al, al
   247 00001343 AA                  <1>     stosb   ;Store a terminating null
   248 00001344 4887DE              <1>     xchg rbx, rsi
   249                              <1> ;Now we build FCBs for the arguments!
   250 00001347 498D9881000000      <1>     lea rbx, qword [r8 + cmdLine]   ;Now we measure from the start of the buf!
   251 0000134E E893000000          <1>     call .skipAndCheckCR
   252 00001353 745B                <1>     je .setupCmdVars
   253 00001355 C60547EDFFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   254 0000135C 4889F0              <1>     mov rax, rsi
   255 0000135F 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   256 00001362 88053CEDFFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   257 00001368 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   258 0000136C B801290000          <1>     mov eax, 2901h
   259 00001371 CD21                <1>     int 21h
   260 00001373 88052CEDFFFF        <1>     mov byte [arg1FCBret], al
   261                              <1> .skipArg:
   262 00001379 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   263 0000137A 3C0D                <1>     cmp al, CR
   264 0000137C 7432                <1>     je .setupCmdVars
   265 0000137E E8DB310000          <1>     call isALdelimiter
   266 00001383 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   267 00001385 E85C000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   268 0000138A 7424                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   269 0000138C C60513EDFFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   270 00001393 4889F0              <1>     mov rax, rsi            
   271 00001396 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   272 00001399 880508EDFFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   273 0000139F 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   274 000013A3 B801290000          <1>     mov eax, 2901h
   275 000013A8 CD21                <1>     int 21h
   276 000013AA 8805F8ECFFFF        <1>     mov byte [arg2FCBret], al
   277                              <1> .setupCmdVars:
   278                              <1> ;Before returning, we copy the command name to cmdName 
   279 000013B0 488D3D2FEFFFFF      <1>     lea rdi, cmdPathSpec
   280 000013B7 E84B320000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   281 000013BC E86A310000          <1>     call strlen ;Get the length of the null terminated final path componant
   282 000013C1 81F90D000000        <1>     cmp ecx, fileNameZL ;11 chars + ext sep + null terminator
   283 000013C7 7726                <1>     ja .exitBad     ;Return error
   284 000013C9 4889FE              <1>     mov rsi, rdi
   285 000013CC 488D3D62EFFFFF      <1>     lea rdi, cmdName
   286 000013D3 FFC9                <1>     dec ecx ;Minus the terminating null
   287 000013D5 880F                <1>     mov byte [rdi], cl ;Store the length here
   288 000013D7 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   289                              <1> .cpCmdName:
   290 000013DA AC                  <1>     lodsb
   291 000013DB E855310000          <1>     call ucChar ;Uppercase the char
   292 000013E0 AA                  <1>     stosb
   293 000013E1 FFC9                <1>     dec ecx
   294 000013E3 75F5                <1>     jnz .cpCmdName
   295                              <1>     return
    13                              <2> %%_ret:
    14 000013E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   296                              <1> .skipAndCheckCR:
   297                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   298 000013E6 E865310000          <1>     call skipDelimiters ;Go to the next char in the input line
   299 000013EB 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   300                              <1>     return
    13                              <2> %%_ret:
    14 000013EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   301                              <1> .exitBad:
   302 000013EF C6053FEFFFFFFF      <1>     mov byte [cmdName], -1  ;Store -1 to indicate error
   303                              <1>     return
    13                              <2> %%_ret:
    14 000013F6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   304                              <1> .exitBadDrv:
   305 000013F7 C60537EFFFFFFE      <1>     mov byte [cmdName], -2  ;Indicate a bad drive specified
   306 000013FE E8C70A0000          <1>     call badDriveError
   307                              <1>     return
    13                              <2> %%_ret:
    14 00001403 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   308                              <1> 
   309                              <1> doCommandLine:
   310                              <1>     ;The following check accounts for the end of a piped command
   311 00001404 803D2AEFFFFF00      <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, syntax error!
   312 0000140B 0F8467010000        <1>     je hardSynErr   ;This now should never be hit, earmark for removal!
   313 00001411 803D1DEFFFFFFF      <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   314 00001418 0F84E50A0000        <1>     je badCmdError
   315 0000141E 803D10EFFFFFFE      <1>     cmp byte [cmdName], -2  ;Bad drive specified, nop
   316                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001425 74(03)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   317 00001427 488D35B8EEFFFF      <1>     lea rsi, cmdPathSpec
   318 0000142E 0FB71DB1EEFFFF      <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   319 00001435 80FF3A              <1>     cmp bh, ":"
   320 00001438 7520                <1>     jne .noDriveSpecified
   321 0000143A 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   322 0000143C E8F4300000          <1>     call ucChar     ;Uppercase al
   323 00001441 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   324                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   325 00001443 803DEBEEFFFF02      <1>     cmp byte [cmdName], 2
   326 0000144A 750E                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   327 0000144C 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   328 0000144E E8AE300000          <1>     call setDrive
   329                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001453 74(03)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   330 00001455 E9700A0000          <1>     jmp badDriveError
   331                              <1> .noDriveSpecified:
   332                              <1> ;rbx is writable UP TO THE FIRST PIPE OR CR (non-inclusive)
   333 0000145A 488D1D03EEFFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer
   334 00001461 488D35CDEEFFFF      <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   335 00001468 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   336 0000146D BAFFFF0000          <1>     mov edx, 0FFFFh
   337 00001472 B5FF                <1>     mov ch, -1
   338 00001474 CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   339 00001476 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   340 0000147B BAFFFF0000          <1>     mov edx, 0FFFFh
   341 00001480 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   342 00001482 CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   343                              <1>             ;        al = 0  if the command should be executed as usual
   344 00001484 84C0                <1>     test al, al
   345 00001486 7444                <1>     jz .executeInternal
   346                              <1>     ;Here we execute externally and return to the prompt
   347                              <1>     ; as if it was an internal execution. rbx is not to be relied on here!
   348 00001488 498D9880000000      <1>     lea rbx, qword [r8 + cmdTail]
   349 0000148F 488D359FEEFFFF      <1>     lea rsi, cmdName        
   350 00001496 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   351 0000149B BAFFFF0000          <1>     mov edx, 0FFFFh
   352 000014A0 B5FF                <1>     mov ch, -1
   353 000014A2 CD2F                <1>     int 2Fh
   354 000014A4 803D8AEEFFFF00      <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   355                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000014AB 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000014AD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   356                              <1>     ;We need to copy over to cmdPathSpec in the event this command
   357                              <1>     ; is an external command that is in the CD or in the PATH.
   358                              <1>     ;Should not be used for this purpose but it is here...
   359 000014AE E8C6050000          <1>     call pullCommandline    ;Pull the tail down with the original name
   360 000014B3 488D357BEEFFFF      <1>     lea rsi, cmdName        ;Now make the new cmd the new cmdspec!
   361 000014BA AC                  <1>     lodsb                   ;Get the name length
   362 000014BB 0FB6C8              <1>     movzx ecx, al
   363 000014BE 488D3D21EEFFFF      <1>     lea rdi, cmdPathSpec    ;Overwrite the original specified command
   364 000014C5 F3A4                <1>     rep movsb   
   365 000014C7 31C0                <1>     xor eax, eax
   366 000014C9 AA                  <1>     stosb   ;Store null terminator
   367 000014CA EB1F                <1>     jmp short .executeInternal2 ;Skip the equivalent for non-ae cases
   368                              <1> .executeInternal:
   369 000014CC E8A8050000          <1>     call pullCommandline    ;Now pull the tail down
   370 000014D1 488D3D0EEEFFFF      <1>     lea rdi, cmdPathSpec
   371 000014D8 E84E300000          <1>     call strlen ;Get the length of the input command
   372 000014DD FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   373 000014DF 380D50EEFFFF        <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   374 000014E5 0F8558260000        <1>     jne launchChild     ;If not, a path was specified, exit!
   375                              <1> .executeInternal2:
   376                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   377 000014EB 488D1DA3F2FFFF      <1>     lea rbx, functionTable
   378                              <1> .nextEntry:
   379 000014F2 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   380 000014F5 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   381 000014F8 0F8445260000        <1>     je launchChild      ;If so, check externally now
   382 000014FE 380D31EEFFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   383 00001504 7531                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   384                              <1>     ;Here they have the same length so lets see if the name is the same
   385 00001506 56                  <1>     push rsi
   386                              <1>     ;ecx has the length to compare
   387 00001507 51                  <1>     push rcx
   388 00001508 488D7301            <1>     lea rsi, qword [rbx + 1]
   389 0000150C 488D3D23EEFFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   390 00001513 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   391 00001515 59                  <1>     pop rcx
   392 00001516 5E                  <1>     pop rsi
   393 00001517 751E                <1>     jne .gotoNextEntry
   394                              <1>     ;Here it was found both strings are equal
   395 00001519 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   396 0000151E 480FB71F            <1>     movzx rbx, word [rdi]
   397 00001522 488D3DD7EAFFFF      <1>     lea rdi, startLbl
   398 00001529 4801FB              <1>     add rbx, rdi
   399 0000152C C605DAEAFFFF00      <1>     mov byte [returnCode], 0 ;Reset the retcode before executing function!
   400 00001533 FFD3                <1>     call rbx        ;Call the internal function!
   401 00001535 EB0C                <1>     jmp short appRet    ;Now once we are done, goto appRet!
   402                              <1> .gotoNextEntry:
   403 00001537 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   404 0000153E 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   405 00001541 EBAF                <1>     jmp short .nextEntry
   406                              <1> 
   407                              <1> appRet:  ;Return point from a task, jumped to from internal functions
   408                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled.
   409                              <1> ;Can depend on RSP here because I fixed DOS.
   410 00001543 488B25BBEAFFFF      <1>     mov rsp, qword [stackTop]   ;Reset stack ptr
   411 0000154A E8B9320000          <1>     call resetIDTentries
   412 0000154F B8004D0000          <1>     mov eax, 4D00h              ;Get retcode, will be 0 for internal commands
   413 00001554 CD21                <1>     int 21h
   414 00001556 668905B0EAFFFF      <1>     mov word [returnCode], ax
   415 0000155D 84E4                <1>     test ah, ah     ;Regular exit
   416 0000155F 0F845AFCFFFF        <1>     jz commandMain.okRet
   417 00001565 80FC03              <1>     cmp ah, 3       ;TSR exit
   418 00001568 0F8451FCFFFF        <1>     je commandMain.okRet
   419                              <1>     ;Clean redirs and fully reset! This allows for safe returning if an error
   420                              <1>     ; occured when invoked on Int 2Eh! Doesnt matter for normal single command
   421                              <1>     ; as we always close the COMMAND.COM instance at this point.
   422 0000156E E83F000000          <1>     call cleanupRedirs
   423 00001573 E994FBFFFF          <1>     jmp commandMain
   424                              <1> 
   425                              <1> hardSynErr:
   426                              <1> ;Hard syntax error in cmd line. Delete pipe files and reset completely!
   427 00001578 E829090000          <1>     call badSyntaxError         ;Output bad syntax if empty command found
   428 0000157D E926000000          <1>     jmp redirPipeFailureCommon.noPrint  ;This closes pipes and resets stack
   429                              <1> redirFailure:
   430 00001582 488D1522F9FFFF      <1>     lea rdx, redirErrMsg
   431 00001589 B913000000          <1>     mov ecx, redirErrMsgL
   432 0000158E EB0C                <1>     jmp short redirPipeFailureCommon
   433                              <1> pipeFailure:
   434 00001590 488D15FDF8FFFF      <1>     lea rdx, pipeErrMsg
   435 00001597 B917000000          <1>     mov ecx, pipeErrMsgL
   436                              <1> redirPipeFailureCommon:
   437                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   438                              <1> ;This routine tries to close whatever handles are not -1 and delete
   439                              <1> ; pipe files if the pipe count is not 0.
   440                              <1> ;It resets all variables and jumps to reset the stack!
   441 0000159C B800400000          <1>     mov eax, 4000h  ;Write handle
   442 000015A1 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   443 000015A6 CD21                <1>     int 21h
   444                              <1> .noPrint:
   445 000015A8 E805000000          <1>     call cleanupRedirs  ;Cleans the redirections 
   446 000015AD E95AFBFFFF          <1>     jmp commandMain ;Retake input from the command line
   447                              <1> 
   448                              <1> cleanupRedirs:
   449                              <1> ;Cleans all active redirections, returning to the saved state.
   450                              <1> ;Deletes any pipe files, leaves any redir out files.
   451                              <1> ;Resets the internal vars
   452 000015B2 0FB705E6EAFFFF      <1>     movzx eax, word [redirSTDIN]
   453 000015B9 0FB715D9EAFFFF      <1>     movzx edx, word [pipeSTDIN]
   454 000015C0 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   455 000015C2 E8CC000000          <1>     call .closeAndReplace
   456 000015C7 0FB705D3EAFFFF      <1>     movzx eax, word [redirSTDOUT]
   457 000015CE 0FB715C6EAFFFF      <1>     movzx edx, word [pipeSTDOUT]
   458 000015D5 FFC3                <1>     inc ebx         ;Select STDOUT for closing
   459 000015D7 E8B7000000          <1>     call .closeAndReplace
   460 000015DC 66C705B8EAFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   461 000015E5 0FB71DB3EAFFFF      <1>     movzx ebx, word [redirSTDIN]
   462 000015EC E892000000          <1>     call .closeHandle
   463                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   464 000015F1 66C705A5EAFFFFFFFF  <1>     mov word [redirSTDIN], -1
   465 000015FA 0FB71DA0EAFFFF      <1>     movzx ebx, word [redirSTDOUT]
   466 00001601 E87D000000          <1>     call .closeHandle
   467 00001606 66C70592EAFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   468 0000160F 0FB71D83EAFFFF      <1>     movzx ebx, word [pipeSTDIN]
   469 00001616 E868000000          <1>     call .closeHandle
   470 0000161B 66C70575EAFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   471 00001624 0FB71D70EAFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   472 0000162B E853000000          <1>     call .closeHandle
   473 00001630 66C70562EAFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   474 00001639 C60558EAFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   475 00001640 488D159AEDFFFF      <1>     lea rdx, qword [pipe1Filespec]
   476 00001647 803A00              <1>     cmp byte [rdx], 0
   477 0000164A 7407                <1>     jz .checkOld
   478 0000164C B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   479 00001651 CD21                <1>     int 21h
   480                              <1> .checkOld:
   481 00001653 488D15D6EDFFFF      <1>     lea rdx, qword [pipe2Filespec]
   482 0000165A 803A00              <1>     cmp byte [rdx],0
   483 0000165D 7407                <1>     jz .pipeNamesComplete
   484 0000165F B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   485 00001664 CD21                <1>     int 21h
   486                              <1> .pipeNamesComplete:
   487 00001666 31C0                <1>     xor eax, eax
   488                              <1>     ;Invalidate the pointers and the paths too
   489 00001668 48890510EEFFFF      <1>     mov qword [newPipe], rax
   490 0000166F 48890511EEFFFF      <1>     mov qword [oldPipe], rax
   491 00001676 890565EDFFFF        <1>     mov dword [pipe1Filespec], eax
   492 0000167C 8905AEEDFFFF        <1>     mov dword [pipe2Filespec], eax
   493                              <1>     return
    13                              <2> %%_ret:
    14 00001682 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   494                              <1> 
   495                              <1> .closeHandle:
   496 00001683 81FBFFFFFFFF        <1>     cmp ebx, -1
   497                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001689 74(82)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   498 0000168B B8003E0000          <1>     mov eax, 3E00h
   499 00001690 CD21                <1>     int 21h
   500                              <1>     return
    13                              <2> %%_ret:
    14 00001692 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   501                              <1> .closeAndReplace:
   502                              <1> ;Input: ax = one possible handle, dx = second possible handle
   503                              <1> ;       bx = handle to close and copy ax/dx into
   504                              <1> ;Output: Handle intervened on. bx preserved
   505 00001693 C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   506 00001696 09D0                <1>     or eax, edx     ;Form packed
   507 00001698 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   508                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000169D 74(92)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   509 0000169F E8DFFFFFFF          <1>     call .closeHandle
   510 000016A4 663DFFFF            <1>     cmp ax, -1      
   511 000016A8 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   512 000016AC 53                  <1>     push rbx
   513 000016AD 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   514 000016B0 B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   515 000016B5 CD21                <1>     int 21h
   516 000016B7 5B                  <1>     pop rbx
   517                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000016B8 73(92)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   518                              <1>     ;Else we now try to force default device to open!
   519 000016BA E8C4FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   520 000016BF B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   521 000016C4 488D152DF8FFFF      <1>     lea rdx, devName
   522 000016CB CD21                <1>     int 21h
   523                              <1>     return
    13                              <2> %%_ret:
    14 000016CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> cleanRedirOut:
   526                              <1> ;Used to oust any stdout redir if necessary. This is different to the above in 
   527                              <1> ; that it deletes the redir out file. Therefore, this is only called in 
   528                              <1> ; particular cases like launching bat files which needs special handling in 
   529                              <1> ; that all redirs need to be completely removed.
   530 000016CE 66813DCAE9FFFFFFFF  <1>     cmp word [redirSTDOUT], -1  ;Do we have > xyzzy.fil?
   531                              <1>     rete  ;Return if no stdout redir! We are ok!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000016D7 74(CD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   532 000016D9 0FB71DC1E9FFFF      <1>     movzx ebx, word [redirSTDOUT]
   533 000016E0 B901000000          <1>     mov ecx, 1      ;STDOUT
   534 000016E5 B800460000          <1>     mov eax, 4600h  ;DUP this into STDOUT closing redirout
   535 000016EA CD21                <1>     int 21h
   536 000016EC 0FB71DAEE9FFFF      <1>     movzx ebx, word [redirSTDOUT]   ;Kill the duplicate now
   537 000016F3 B8003E0000          <1>     mov eax, 3E00h  
   538 000016F8 CD21                <1>     int 21h
   539 000016FA 66C7059EE9FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Set default value back
   540 00001703 488D1588ECFFFF      <1>     lea rdx, rdrOutFilespec
   541 0000170A B800410000          <1>     mov eax, 4100h      ;Del stdout file
   542 0000170F CD21                <1>     int 21h
   543 00001711 C60200              <1>     mov byte [rdx], 0   ;Ensure this is a clear path (not necessary)
   544                              <1>     ;Ignore any errors in this procedures. Errors mean either sharing problems
   545                              <1>     ; or the file doesnt exist, which in either case, is fine to leave it be!
   546                              <1>     return
    13                              <2> %%_ret:
    14 00001714 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   547                              <1> 
   548                              <1> advanceRedir:
   549                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   550                              <1> ;Close stdin redir then stdout redir. 
   551 00001715 F60581E9FFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   552 0000171C 0F8585000000        <1>     jnz .redirIn
   553 00001722 F6056FE9FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   554 00001729 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   555 0000172F 0FBF0563E9FFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   556 00001736 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   557 0000173B 0F84EB000000        <1>     je .pipeOut              
   558                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   559 00001741 0FB71D51E9FFFF      <1>     movzx ebx, word [pipeSTDIN] 
   560 00001748 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   561 0000174A B800460000          <1>     mov eax, 4600h
   562 0000174F CD21                <1>     int 21h
   563 00001751 0F8239FEFFFF        <1>     jc pipeFailure
   564 00001757 B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   565 0000175C CD21                <1>     int 21h
   566 0000175E 0F822CFEFFFF        <1>     jc pipeFailure
   567 00001764 488B151CEDFFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   568 0000176B B800410000          <1>     mov eax, 4100h  ;Delete the file!
   569 00001770 CD21                <1>     int 21h
   570 00001772 0F8218FEFFFF        <1>     jc pipeFailure
   571 00001778 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   572 0000177B 66C70515E9FFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   573                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   574                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   575                              <1>     ;Else exit!
   576 00001784 0FBF0510E9FFFF      <1>     movsx eax, word [pipeSTDOUT]
   577 0000178B 3DFFFFFFFF          <1>     cmp eax, -1
   578 00001790 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   579 00001796 C605FBE8FFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   580 0000179D F605FAE8FFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   581 000017A4 753D                <1>     jnz .redirOut               ;Go for it if so!
   582                              <1>     return
    13                              <2> %%_ret:
    14 000017A6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   583                              <1> .redirIn:
   584                              <1> ;Here we clean redirIn
   585 000017A7 0FB71DF1E8FFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   586 000017AE 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   587 000017B0 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   588 000017B5 CD21                <1>     int 21h
   589 000017B7 0F82C5FDFFFF        <1>     jc redirFailure
   590 000017BD B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   591 000017C2 CD21                <1>     int 21h
   592 000017C4 0F82B8FDFFFF        <1>     jc redirFailure
   593 000017CA 66C705CCE8FFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   594 000017D3 C605C3E8FFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   595 000017DA F605B7E8FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   596 000017E1 7549                <1>     jnz .pipeOut
   597                              <1> .redirOut:
   598 000017E3 F605B4E8FFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   599                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000017EA 74(A6)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   600                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   601 000017EC F605A5E8FFFFFF      <1>     test byte [pipeFlag], -1
   602 000017F3 7537                <1>     jnz short .pipeOut
   603 000017F5 0FB71DA5E8FFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   604 000017FC B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   605 00001801 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   606 00001806 CD21                <1>     int 21h
   607 00001808 0F8274FDFFFF        <1>     jc redirFailure
   608 0000180E B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   609 00001813 CD21                <1>     int 21h
   610 00001815 0F8267FDFFFF        <1>     jc redirFailure
   611 0000181B 66C7057DE8FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   612 00001824 C60573E8FFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   613                              <1>     return
    13                              <2> %%_ret:
    14 0000182B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   614                              <1> .pipeOut:
   615                              <1> ;Duplicate STDIN to save across pipe
   616 0000182C 0FBF0568E8FFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   617 00001833 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   618                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001838 74(2B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   619 0000183A B800450000          <1>     mov eax, 4500h
   620 0000183F 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   621 00001841 CD21                <1>     int 21h
   622 00001843 0F8247FDFFFF        <1>     jc pipeFailure
   623 00001849 66890549E8FFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   624                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   625 00001850 B800460000          <1>     mov eax, 4600h
   626 00001855 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   627 00001857 FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   628 00001859 CD21                <1>     int 21h
   629 0000185B 0F822FFDFFFF        <1>     jc pipeFailure
   630                              <1> ;Now return the original stdout to stdout
   631 00001861 89D9                <1>     mov ecx, ebx
   632 00001863 0FB71D31E8FFFF      <1>     movzx ebx, word [pipeSTDOUT]
   633 0000186A B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   634 0000186F CD21                <1>     int 21h
   635 00001871 0F8219FDFFFF        <1>     jc pipeFailure
   636                              <1> ;Now close the DUP'ed STDOUT
   637 00001877 B8003E0000          <1>     mov eax, 3E00h
   638 0000187C CD21                <1>     int 21h
   639 0000187E 0F820CFDFFFF        <1>     jc pipeFailure
   640                              <1> ;Finally unwind STDIN to the beginning of the file
   641 00001884 B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   642 00001889 31DB                <1>     xor ebx, ebx    ;STDIN handle
   643 0000188B 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   644 0000188D 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   645 0000188F CD21                <1>     int 21h
   646 00001891 0F82F9FCFFFF        <1>     jc pipeFailure  ;This should never happen
   647 00001897 488B15E1EBFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   648 0000189E 488915E2EBFFFF      <1>     mov qword [oldPipe], rdx
   649 000018A5 66C705EDE7FFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   650                              <1>     return
    13                              <2> %%_ret:
    14 000018AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   651                              <1> 
   652                              <1> 
   653                              <1> peelRedir:
   654                              <1> ;Checks and sets up redir as appropriate
   655                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   656                              <1> ;       rsi points to the first char after the char in al in cpyBuffer
   657                              <1> ;Output: ZF=NZ => No redir
   658                              <1> ;        ZF=ZY => Redir
   659                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   660                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   661 000018AF 51                  <1>     push rcx
   662 000018B0 57                  <1>     push rdi
   663 000018B1 3C3C                <1>     cmp al, "<"
   664 000018B3 740C                <1>     je .inputRedir
   665 000018B5 3C3E                <1>     cmp al, ">"
   666 000018B7 7427                <1>     je .outputRedir
   667 000018B9 3C7C                <1>     cmp al, "|"
   668 000018BB 7441                <1>     je .pipeSetup
   669 000018BD F8                  <1>     clc
   670                              <1> .redirExit:
   671 000018BE 5F                  <1>     pop rdi
   672 000018BF 59                  <1>     pop rcx
   673                              <1>     return
    13                              <2> %%_ret:
    14 000018C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   674                              <1> .inputRedir:
   675 000018C1 C605D5E7FFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   676 000018C8 488D3D74EAFFFF      <1>     lea rdi, rdrInFilespec
   677                              <1> .redirCommon:
   678 000018CF E87C2C0000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   679 000018D4 E8A82D0000          <1>     call cpDelimPathToBufz
   680 000018D9 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   681 000018DC 30C0                <1>     xor al, al  ;Clear the ZF flag
   682 000018DE EBDE                <1>     jmp short .redirExit
   683                              <1> .outputRedir:
   684 000018E0 C605B7E7FFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   685 000018E7 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   686 000018EA 7509                <1>     jne .notDouble
   687 000018EC FE05ACE7FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   688 000018F2 48FFC6              <1>     inc rsi ;Go past it too
   689                              <1> .notDouble:
   690 000018F5 488D3D96EAFFFF      <1>     lea rdi, rdrOutFilespec
   691 000018FC EBD1                <1>     jmp short .redirCommon
   692                              <1> .pipeSetup:
   693 000018FE 56                  <1>     push rsi    ;Save rsi pointing to char past |
   694 000018FF E84C2C0000          <1>     call skipDelimiters ;Check if this is effectively a double || or |<CR>
   695 00001904 803E7C              <1>     cmp byte [rsi], "|" 
   696 00001907 7403                <1>     je .badFnd
   697 00001909 803E0D              <1>     cmp byte [rsi], CR
   698                              <1> .badFnd:
   699 0000190C 5E                  <1>     pop rsi
   700 0000190D F9                  <1>     stc
   701 0000190E EBAE                <1>     jmp short .redirExit
   702                              <1> 
   703                              <1> setupRedirandPipes:
   704                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   705                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   706 00001910 0F8484000000        <1>     jz .redirIn
   707 00001916 488D15C4EAFFFF      <1>     lea rdx, pipe1Filespec
   708 0000191D 803A00              <1>     cmp byte [rdx], 0
   709 00001920 7410                <1>     jz .pathFound
   710 00001922 488D1507EBFFFF      <1>     lea rdx, pipe2Filespec
   711 00001929 803A00              <1>     cmp byte [rdx], 0
   712 0000192C 0F855EFCFFFF        <1>     jnz pipeFailure
   713                              <1> .pathFound:
   714 00001932 48891546EBFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   715 00001939 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   716 0000193E BB01000000          <1>     mov ebx, 1
   717 00001943 CD21                <1>     int 21h
   718 00001945 0F8245FCFFFF        <1>     jc pipeFailure
   719 0000194B 66890549E7FFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   720 00001952 E8B62B0000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   721 00001957 0441                <1>     add al, "A"
   722 00001959 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   723 0000195E 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   724 00001960 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   725 00001962 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   726 00001964 B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   727 00001969 CD21                <1>     int 21h
   728 0000196B 0F821FFCFFFF        <1>     jc pipeFailure
   729                              <1>     ;AX has the handle for this file now, this will become STDOUT
   730                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   731 00001971 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   732 00001974 B901000000          <1>     mov ecx, 1
   733 00001979 B800460000          <1>     mov eax, 4600h
   734 0000197E CD21                <1>     int 21h
   735 00001980 0F820AFCFFFF        <1>     jc pipeFailure
   736 00001986 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   737 0000198B CD21                <1>     int 21h
   738 0000198D 0F82FDFBFFFF        <1>     jc pipeFailure
   739 00001993 C605FEE6FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   740                              <1> .redirIn:
   741                              <1> ;Now check if any other redir needs to be setup
   742                              <1> ;Checks and sets up redir as appropriate.
   743                              <1>     ;Setup the redir here for STDIN
   744 0000199A F605FCE6FFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   745 000019A1 7449                <1>     jz .redirOut
   746 000019A3 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   747 000019A5 B800450000          <1>     mov eax, 4500h
   748 000019AA CD21                <1>     int 21h
   749 000019AC 0F82D0FBFFFF        <1>     jc redirFailure
   750 000019B2 668905E6E6FFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   751 000019B9 488D1583E9FFFF      <1>     lea rdx, rdrInFilespec
   752 000019C0 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   753 000019C5 CD21                <1>     int 21h
   754 000019C7 0F82B5FBFFFF        <1>     jc redirFailure
   755 000019CD 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   756 000019CF 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   757 000019D2 B800460000          <1>     mov eax, 4600h
   758 000019D7 CD21                <1>     int 21h
   759 000019D9 0F82A3FBFFFF        <1>     jc redirFailure
   760 000019DF B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   761 000019E4 CD21                <1>     int 21h
   762 000019E6 0F8296FBFFFF        <1>     jc redirFailure
   763                              <1> .redirOut:
   764 000019EC F605ABE6FFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   765                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000019F3 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000019F5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   766 000019F6 803D9EE6FFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   767                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000019FD 75(F5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   768                              <1>     ;Else setup the redir here for STDOUT
   769 000019FF BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   770 00001A04 B800450000          <1>     mov eax, 4500h
   771 00001A09 CD21                <1>     int 21h
   772 00001A0B 0F8271FBFFFF        <1>     jc redirFailure
   773 00001A11 66890589E6FFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   774 00001A18 488D1573E9FFFF      <1>     lea rdx, rdrOutFilespec
   775 00001A1F B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   776 00001A24 CD21                <1>     int 21h
   777 00001A26 730F                <1>     jnc .fileExists
   778 00001A28 B8003C0000          <1>     mov eax, 3C00h
   779 00001A2D 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   780 00001A2F CD21                <1>     int 21h
   781 00001A31 0F824BFBFFFF        <1>     jc redirFailure
   782                              <1> .fileExists:
   783 00001A37 B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   784 00001A3C 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   785 00001A3F B800460000          <1>     mov eax, 4600h  ;DUP2
   786 00001A44 CD21                <1>     int 21h
   787 00001A46 0F8236FBFFFF        <1>     jc redirFailure
   788 00001A4C B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   789 00001A51 CD21                <1>     int 21h
   790 00001A53 0F8229FBFFFF        <1>     jc redirFailure
   791 00001A59 803D3EE6FFFF01      <1>     cmp byte [redirOut], 1
   792                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001A60 74(F5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   793                              <1>     ;Here we move the file pointer to the end of the file
   794 00001A62 31D2                <1>     xor edx, edx    ;Low order 32 bits
   795 00001A64 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   796 00001A66 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   797 00001A6B B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   798 00001A70 CD21                <1>     int 21h
   799 00001A72 0F820AFBFFFF        <1>     jc redirFailure
   800                              <1>     return
    13                              <2> %%_ret:
    14 00001A78 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   801                              <1> 
   802                              <1> 
   803                              <1> pullCommandline:
   804                              <1> ;This command pulls the command tail down, removing the whole launch command
   805 00001A79 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   806                              <1> ;Skip leading separators
   807                              <1> .pctSkipLeading:
   808 00001A80 AC                  <1>     lodsb   ;Get first char
   809 00001A81 E8D82A0000          <1>     call isALdelimiter
   810 00001A86 74F8                <1>     je .pctSkipLeading
   811 00001A88 48FFCE              <1>     dec rsi
   812                              <1>     ;rsi points to the start of the command
   813 00001A8B 488D3D54E8FFFF      <1>     lea rdi, cmdPathSpec
   814 00001A92 E8942A0000          <1>     call strlen ;Get the length of the command
   815 00001A97 FFC9                <1>     dec ecx ;Minus the terminating null
   816 00001A99 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   817 00001A9C 280D02E6FFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   818 00001AA2 280DFFE5FFFF        <1>     sub byte [arg2Off], cl
   819 00001AA8 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   820 00001AAA 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   821                              <1> .pctPullChars:
   822 00001AB1 AC                  <1>     lodsb
   823 00001AB2 AA                  <1>     stosb
   824 00001AB3 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   825 00001AB5 7404                <1>     je .pctExit
   826 00001AB7 FFC1                <1>     inc ecx     ;Increment count
   827 00001AB9 EBF6                <1>     jmp short .pctPullChars 
   828                              <1> .pctExit:
   829 00001ABB 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   830                              <1>     return
    13                              <2> %%_ret:
    14 00001AC2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   831                              <1> 
   832                              <1> getSetMainState:
   833                              <1> ;Resets the buffers lengths, sets stringops and gets the pspptr in r8
   834 00001AC3 FC                  <1>     cld ;Ensure stringops are done the right way
   835 00001AC4 C60595E6FFFF80      <1>     mov byte [inBuffer], inBufferL      ;Reset the buffer length
   836 00001ACB C60510E7FFFF80      <1>     mov byte [cpyBuffer], inBufferL     ;Reset the buffer length
   837 00001AD2 C6058BE7FFFF80      <1>     mov byte [cmdBuffer], inBufferL     ;Reset the buffer length
   838 00001AD9 4C8B052FE5FFFF      <1>     mov r8, qword [pspPtr]              ;Reset the pspPtr
   839                              <1>     return
    13                              <2> %%_ret:
    14 00001AE0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   840                              <1> 
   841                              <1> 
   842                              <1> int2Eh: 
   843                              <1> ;Very sucky interface for passing command lines to be processed by the 
   844                              <1> ; current top level command interpreter. Will slowly try to patch to make it
   845                              <1> ; more reliable with a critical section flag. Currently, if we are already
   846                              <1> ; processing an Int 2Eh request, this will not process the command.
   847                              <1> ;
   848                              <1> ;Need to add further safeguards for when pipes are also setup and
   849                              <1> ; batchmode is on!
   850                              <1> ;
   851                              <1> ;Input: rsi points to the count byte of a command line.
   852                              <1> ;       Max number of chars is 128 (127 + count byte)
   853                              <1> ;Output:
   854                              <1> ;       CF=NC: Command was processed. ax = Retcode
   855                              <1> ;       CF=CY: Command was not processed.
   856 00001AE1 80642410FE          <1>     and byte [rsp + 2*8], ~1    ;Clear CF on entry
   857 00001AE6 F605A7E5FFFF04      <1>     test byte [statFlg1], inSingle
   858 00001AED 757F                <1>     jnz int2EcheckReentry 
   859                              <1> .multiJoin:
   860 00001AEF 800D9EE5FFFF04      <1>     or byte [statFlg1], inSingle ;Set the bits! Gets the lock!
   861 00001AF6 48892522E5FFFF      <1>     mov qword [int2Ersp], rsp   ;Save the far stack pointer 
   862 00001AFD 488B2501E5FFFF      <1>     mov rsp, qword [stackTop]    ;Set to use the internal stack
   863 00001B04 B800510000          <1>     mov eax, 5100h ;Get Current PSP in rdx
   864 00001B09 CD21                <1>     int 21h
   865 00001B0B 48891505E5FFFF      <1>     mov qword [int2Epsp], rdx
   866 00001B12 52                  <1>     push rdx    ;Save on the stack
   867 00001B13 488B1DF5E4FFFF      <1>     mov rbx, qword [pspPtr] ;Get the psp for this COMMAND.COM
   868 00001B1A B800500000          <1>     mov eax, 5000h ;Set this version of COMMAND.COM as the current PSP
   869 00001B1F CD21                <1>     int 21h
   870 00001B21 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   871 00001B24 4989D9              <1>     mov r9, rbx
   872 00001B27 488D3D33E6FFFF      <1>     lea rdi, inBuffer + 1
   873 00001B2E B910000000          <1>     mov ecx, 10h    ;80h/8
   874 00001B33 FC                  <1>     cld
   875 00001B34 F348A5              <1>     rep movsq   ;Zoom zoom copy command line over
   876 00001B37 E887FFFFFF          <1>     call getSetMainState    ;Ensure the buffers have their lengths set
   877 00001B3C 803D1EE6FFFF00      <1>     cmp byte [inBuffer + 1], 0
   878 00001B43 0F8527F6FFFF        <1>     jne commandMain.goSingle    ;Proceed if we have anything to execute
   879                              <1> int2ERet:
   880 00001B49 488B25CFE4FFFF      <1>     mov rsp, qword [int2Ersp]
   881 00001B50 488B1DC0E4FFFF      <1>     mov rbx, qword [int2Epsp] ;Get Old current PSP in rbx
   882 00001B57 B800500000          <1>     mov eax, 5000h ;Set Current PSP
   883 00001B5C CD21                <1>     int 21h
   884 00001B5E 0FB705A8E4FFFF      <1>     movzx eax, word [returnCode]    ;Get the return code in eax
   885 00001B65 802528E5FFFFFB      <1>     and byte [statFlg1], ~inSingle  ;Clear that we are in single mode
   886 00001B6C 48CF                <1>     iretq
   887                              <1> 
   888                              <1> int2EcheckReentry:
   889                              <1> ;Now we check if we DOSMGR is installed. If so, put task on ice
   890                              <1> ; else, return with CF=CY.
   891 00001B6E B800520000          <1>     mov eax, 5200h  ;Get sysvars
   892 00001B73 CD21                <1>     int 21h
   893 00001B75 F64363FF            <1>     test byte [rbx + 63h], -1   ;check the sysVars.dosMgrPresent byte
   894 00001B79 7512                <1>     jnz short .multifnd
   895 00001B7B B800030000          <1>     mov eax, 0300h   ;Are we here check on Int 2Fh
   896 00001B80 CD2F                <1>     int 2Fh
   897 00001B82 84C0                <1>     test al, al ;This must still be zero, else something installed
   898 00001B84 7507                <1>     jnz .multifnd
   899 00001B86 804C241001          <1>     or byte [rsp + 2*8], 1  ;Else return with CF=CY, already processing
   900 00001B8B 48CF                <1>     iretq   
   901                              <1> .multifnd:
   902                              <1> ;Recognised multitasker present, we now spinlock until flag is clear!
   903 00001B8D F390                <1>     pause
   904 00001B8F F605FEE4FFFF04      <1>     test byte [statFlg1], inSingle   ;Is this bit set?
   905 00001B96 75F5                <1>     jnz .multifnd
   906 00001B98 E952FFFFFF          <1>     jmp int2Eh.multiJoin            ;Rejoin the norm now
    17                                  %include "./Source/cmdBat.asm"
     1                              <1> ;Main Batch processing routines go here!
     2                              <1> 
     3                              <1> batLaunch:
     4                              <1> ;Preps and launches a batch file! Called with rdx pointing to the filespec :)
     5 00001B9D BB200B0000          <1>     mov ebx, bbMaxAlloc << 4    ;Convert to paragraphs
     6 00001BA2 B800480000          <1>     mov eax, 4800h
     7 00001BA7 CD21                <1>     int 21h
     8 00001BA9 730A                <1>     jnc .bbAlloced
     9 00001BAB E8ED020000          <1>     call badNoMemError  ;Print not enough mem error
    10 00001BB0 E9F3F9FFFF          <1>     jmp  redirPipeFailureCommon.noPrint ;Clean up all redir and ret to cmdline
    11                              <1> .bbAlloced:
    12 00001BB5 488905EEE4FFFF      <1>     mov qword [bbPtr], rax  ;Save the ptr here!
    13 00001BBC 4889C3              <1>     mov rbx, rax
    14 00001BBF 4889DF              <1>     mov rdi, rbx
    15 00001BC2 31C0                <1>     xor eax, eax
    16 00001BC4 B9B2000000          <1>     mov ecx, bbMaxAlloc     
    17 00001BC9 F3AA                <1>     rep stosb               ;Clean the arena
    18 00001BCB 4889DF              <1>     mov rdi, rbx            ;Point back to the head
    19 00001BCE 8A05C1E4FFFF        <1>     mov al, byte [echoFlg]
    20 00001BD4 884301              <1>     mov byte [rbx + batBlockHdr.bEchoFlg], al
    21 00001BD7 B8FFFFFFFF          <1>     mov eax, -1
    22 00001BDC B905000000          <1>     mov ecx, 5
    23 00001BE1 488D7B1B            <1>     lea rdi, qword [rbx + batBlockHdr.wArgs]    ;Init the wArgs to no params!
    24 00001BE5 F3AB                <1>     rep stosd   ;Store in dwords for speed. Leave rdi pointing at .cmdLine
    25 00001BE7 66C7431B0000        <1>     mov word [rbx + batBlockHdr.wArgs], 0   ;Arg %0 starts at offset 0!
    26 00001BED 488D35F2E6FFFF      <1>     lea rsi, cmdPathSpec
    27 00001BF4 E819290000          <1>     call strcpy     ;Leave rdi past the terminating null
    28 00001BF9 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get char cnt for copy
    29 00001C01 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get copy source
    30 00001C08 57                  <1>     push rdi    ;Save the ptr to the start of cmd tail in batblock
    31 00001C09 F3A4                <1>     rep movsb   ;Copy the command tail over
    32                              <1>     ;Since this copy is shorter than the space we have, we already have a free
    33                              <1>     ; terminating null. All good!
    34 00001C0B 5E                  <1>     pop rsi 
    35                              <1>     ;Now analyse the command line to get the word offsets. Get at most 10
    36 00001C0C B901000000          <1>     mov ecx, 1  ;Start with argument 1
    37                              <1> .bbFndLp:
    38 00001C11 E83A290000          <1>     call skipDelimiters ;Skip leading delimiters, leave rsi at char1
    39 00001C16 E8E7000000          <1>     call .bbCheckEndOfCmdLine   ;Is this the end of the command?
    40 00001C1B 7428                <1>     je .bbArgsDone      ;Yes
    41                              <1>     ;Add the entry to the table!
    42 00001C1D 4889F0              <1>     mov rax, rsi
    43 00001C20 488D532F            <1>     lea rdx, qword [rbx + batBlockHdr.cmdLine]  ;Get addr of start of cmdline
    44 00001C24 4829D0              <1>     sub rax, rdx    ;Now get the difference in ax
    45 00001C27 6689440B1B          <1>     mov word [rbx + batBlockHdr.wArgs + rcx], ax    ;Store this offset here
    46                              <1>     
    47 00001C2C FFC1                <1>     inc ecx
    48 00001C2E 81F90A000000        <1>     cmp ecx, 10         ;Did we just process %9?
    49 00001C34 740F                <1>     je .bbArgsDone
    50                              <1> .bbFndLp2:
    51 00001C36 AC                  <1>     lodsb   ;Getch
    52 00001C37 E822290000          <1>     call isALdelimiter  ;If this is a delimiter, we are at the end of the command
    53 00001C3C 74D3                <1>     je .bbFndLp
    54 00001C3E E8BF000000          <1>     call .bbCheckEndOfCmdLine
    55 00001C43 75F1                <1>     jne .bbFndLp2   ;If not end of cmdline, see if next char delim
    56                              <1> .bbArgsDone:
    57                              <1> ;Now copy the batch name, need to figure the full path to it.
    58 00001C45 488D359AE6FFFF      <1>     lea rsi, cmdPathSpec
    59 00001C4C 488D3D5FE4FFFF      <1>     lea rdi, batFile
    60 00001C53 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
    61 00001C56 80FC3A              <1>     cmp ah, ":"
    62 00001C59 746D                <1>     je .bbdrvGiven
    63 00001C5B 3A05C8E3FFFF        <1>     cmp al, byte [pathSep]  ;Is the first char a pathsep?
    64 00001C61 7458                <1>     je .bbCDrvAbs
    65                              <1> ;Current drive relative
    66 00001C63 E8A5280000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
    67 00001C68 0441                <1>     add al, "A"
    68 00001C6A B43A                <1>     mov ah, ":"
    69 00001C6C 66AB                <1>     stosw   ;Store these two chars, adv rdi
    70                              <1> .bbRelPath:
    71 00001C6E 8A05B5E3FFFF        <1>     mov al, byte [pathSep]  
    72 00001C74 AA                  <1>     stosb   ;Store the pathsep
    73 00001C75 8A0537E4FFFF        <1>     mov al, byte [batFile]  ;Now get the drive letter into al
    74 00001C7B E8B5280000          <1>     call ucChar             ;UC it
    75 00001C80 88052CE4FFFF        <1>     mov byte [batFile], al  ;and overwrite it :)
    76 00001C86 2C40                <1>     sub al, "@"             ;Convert into a 1 based drive number
    77 00001C88 88C2                <1>     mov dl, al
    78 00001C8A 56                  <1>     push rsi        ;Save remaining char source
    79 00001C8B 4889FE              <1>     mov rsi, rdi    ;rdi is where we want to store the file name
    80 00001C8E B800470000          <1>     mov eax, 4700h  ;Get Current Directory
    81 00001C93 CD21                <1>     int 21h
    82 00001C95 5E                  <1>     pop rsi
    83 00001C96 7311                <1>     jnc .bbRelPathOk
    84 00001C98 488D1509ECFFFF      <1>     lea rdx, badBat
    85 00001C9F E873260000          <1>     call printString
    86 00001CA4 E963000000          <1>     jmp batFinish   ;Now clean up the batch stuff we've setup
    87                              <1> .bbRelPathOk:
    88                              <1> ;Now move rdi to the terminating null   
    89 00001CA9 31C0                <1>     xor eax, eax
    90 00001CAB 31C9                <1>     xor ecx, ecx
    91 00001CAD F2AE                <1>     repne scasb ;Find the terminating null
    92 00001CAF 48FFCF              <1>     dec rdi ;Now point to the terminating null
    93 00001CB2 8A0571E3FFFF        <1>     mov al, byte [pathSep]
    94 00001CB8 AA                  <1>     stosb   ;Store this pathsep over the original null
    95                              <1>     ;Now we are ready to copy the command line passed to us by the user
    96                              <1>     ; to rdi. rsi points to where to source the rest of the chars
    97 00001CB9 EB1B                <1>     jmp short .bbCpName
    98                              <1> .bbCDrvAbs:
    99                              <1> ;Current drive absolute. Get current drive into buffer
   100 00001CBB E84D280000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
   101 00001CC0 0441                <1>     add al, "A"
   102 00001CC2 B43A                <1>     mov ah, ":"
   103 00001CC4 66AB                <1>     stosw   ;Store these two chars
   104                              <1>     ;Now we are ready to copy the command line passed to us by the user
   105                              <1>     ; to rdi. rsi points to where to source the rest of the chars
   106 00001CC6 EB0E                <1>     jmp short .bbCpName
   107                              <1> .bbdrvGiven:
   108                              <1> ;Drive given X:
   109 00001CC8 66A5                <1>     movsw   ;Move over the X:, point rsi to the first new char
   110 00001CCA AC                  <1>     lodsb
   111 00001CCB 48FFCE              <1>     dec rsi ;Get the char and point back to it
   112 00001CCE 3A0555E3FFFF        <1>     cmp al, byte [pathSep]  ;Is char three a pathsep?
   113 00001CD4 7598                <1>     jne .bbRelPath
   114                              <1> .bbCpName:
   115 00001CD6 E837280000          <1>     call strcpy ;Copy the remaining portion
   116 00001CDB 488D35D0E3FFFF      <1>     lea rsi, batFile
   117 00001CE2 4889F7              <1>     mov rdi, rsi
   118 00001CE5 B811120000          <1>     mov eax, 1211h  ;Normalise the path :)
   119 00001CEA CD2F                <1>     int 2fh
   120                              <1> ;Now deactivate any redirs. Do redir out as cleanupRedirs somewhat ignores it.
   121                              <1> ;Do the handle close as deleting the file without closing the handle is asking 
   122                              <1> ; for SHARING trouble...
   123 00001CEC E8DDF9FFFF          <1>     call cleanRedirOut      ;Liquidates redirout if needed
   124 00001CF1 E8BCF8FFFF          <1>     call cleanupRedirs      ;Now liquidate remaining redirs and pipes
   125 00001CF6 800D97E3FFFF08      <1>     or byte [statFlg1], inBatch ;Fire up the batch processor!
   126 00001CFD E90AF4FFFF          <1>     jmp commandMain         ;Now we start reading the batch file!
   127                              <1> 
   128                              <1> .bbCheckEndOfCmdLine:
   129                              <1> ;Input: rsi -> Char to check 
   130                              <1> ;Output: ZF=ZE if we hit a CR or a <NUL>
   131 00001D02 803E00              <1>     cmp byte [rsi], 0
   132                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001D05 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001D07 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   133 00001D08 803E0D              <1>     cmp byte [rsi], CR
   134                              <1>     return
    13                              <2> %%_ret:
    14 00001D0B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> batFinish:
   137                              <1> ;This is the procedure called after we've processed the last batch line
   138 00001D0C E831010000          <1>     call batCleanup     ;Cleanup the batch and batch state vars etc etc
   139 00001D11 E9F6F3FFFF          <1>     jmp commandMain     ;And start again :)
   140                              <1> batNextLine:
   141                              <1> ;Read the next line from the file and sets if we are done with copying
   142 00001D16 F60577E3FFFF10      <1>     test byte [statFlg1], batchEOF ;Did we hit EOF?
   143 00001D1D 75ED                <1>     jnz batFinish
   144 00001D1F 488D158CE3FFFF      <1>     lea rdx, batFile
   145                              <1> .batOpen:
   146 00001D26 B8003D0000          <1>     mov eax, 3D00h  ;Open for read only
   147 00001D2B CD21                <1>     int 21h
   148 00001D2D 7315                <1>     jnc .batOpened
   149 00001D2F 488D1589EBFFFF      <1>     lea rdx, needBat
   150 00001D36 E8DC250000          <1>     call printString
   151 00001D3B B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Allows for triggering ^C
   152 00001D40 CD21                <1>     int 21h
   153 00001D42 EBE2                <1>     jmp short .batOpen
   154                              <1> .batOpened:
   155 00001D44 89C3                <1>     mov ebx, eax            ;Move the handle into ebx
   156 00001D46 488B355DE3FFFF      <1>     mov rsi, qword [bbPtr]  ;Get the batch block ptr
   157 00001D4D 8B5613              <1>     mov edx, dword [rsi + batBlockHdr.dBatOffLo]
   158 00001D50 8B4E17              <1>     mov ecx, dword [rsi + batBlockHdr.dBatOffHi]
   159 00001D53 B800420000          <1>     mov eax, 4200h          ;LSEEK to where we left off previously
   160 00001D58 CD21                <1>     int 21h
   161 00001D5A C60500E4FFFF00      <1>     mov byte [inBuffer + 1], 0  ;Reset the buffer count
   162 00001D61 488D15FAE3FFFF      <1>     lea rdx, inBuffer + 2   ;Start read pos
   163 00001D68 31FF                <1>     xor edi, edi            ;Use edi as the char counter
   164                              <1> .readlp:
   165 00001D6A E8BA000000          <1>     call .readChar          ;Read the char
   166 00001D6F 85C0                <1>     test eax, eax
   167 00001D71 7425                <1>     jz .endOfBat
   168 00001D73 FFC7                <1>     inc edi                 ;We read a char, woohoo!
   169 00001D75 803A1A              <1>     cmp byte [rdx], EOF     ;Did we read a ^Z char?
   170 00001D78 741E                <1>     je .endOfBat
   171 00001D7A 803A0D              <1>     cmp byte [rdx], CR      ;End of line?
   172 00001D7D 7433                <1>     je .endOfLineCr
   173 00001D7F 803A0A              <1>     cmp byte [rdx], LF      ;End of line UNIX?
   174 00001D82 743E                <1>     je .endOfLineLf
   175 00001D84 FE05D7E3FFFF        <1>     inc byte [inBuffer + 1] ;Inc our char count
   176 00001D8A 48FFC2              <1>     inc rdx                 ;Store the next char in the next position
   177 00001D8D 803DCDE3FFFF80      <1>     cmp byte [inBuffer + 1], 128    ;Are we 128 chars w/o CR?
   178 00001D94 75D4                <1>     jne .readlp             ;Get next char if not
   179 00001D96 EB2D                <1>     jmp short .endOfLine    ;The user typed too many chars on a line, EOL
   180                              <1> .endOfBat:
   181 00001D98 800DF5E2FFFF10      <1>     or byte [statFlg1], batchEOF    ;Set if we encounter a ^Z terminator
   182 00001D9F 803DBBE3FFFF00      <1>     cmp byte [inBuffer + 1], 0      ;If we formally read 0 chars, exit!
   183 00001DA6 751D                <1>     jne .endOfLine
   184 00001DA8 E874000000          <1>     call .closeBat                  ;Close the hdl! This is why this is here!
   185 00001DAD E95AFFFFFF          <1>     jmp batFinish
   186                              <1> .endOfLineCr:   ;Now get the next char, to possibly eliminate a trailing LF
   187 00001DB2 E872000000          <1>     call .readChar  ;Get the LF over the CR
   188 00001DB7 85C0                <1>     test eax, eax   ;Did we read nothing?
   189 00001DB9 74DD                <1>     jz .endOfBat    ;That CR was last char, check if empty buffer, else exec
   190 00001DBB 803A0A              <1>     cmp byte [rdx], LF  ;Did we read a LF?
   191 00001DBE 7502                <1>     jne .endOfLineLf    ;Reread this char if not LF
   192 00001DC0 FFC7                <1>     inc edi             ;Else add to the count
   193                              <1> .endOfLineLf:
   194 00001DC2 C6020D              <1>     mov byte [rdx], CR  ;Now place the CR over the last char
   195                              <1> .endOfLine:
   196                              <1> ;Close the file, update the batch block file pointer, then proceed.
   197                              <1> ;rsi -> Batch block.
   198 00001DC5 E857000000          <1>     call .closeBat
   199                              <1>     ;Imagine someone gives us a 2+Gb Batch file... some server magik lmao
   200 00001DCA 017E13              <1>     add dword [rsi + batBlockHdr.dBatOffLo], edi    ;Add lo dword to chars 
   201 00001DCD 81561700000000      <1>     adc dword [rsi + batBlockHdr.dBatOffHi], 0      ;Add CF if needed!
   202                              <1> ;Now we echo the line to the console unless the first char is @ or 
   203                              <1> ; the echo flag is off
   204 00001DD4 488D1587E3FFFF      <1>     lea rdx, inBuffer + 2
   205 00001DDB 803A40              <1>     cmp byte [rdx], batNoEchoChar
   206 00001DDE 7421                <1>     je .noEchoPull       
   207 00001DE0 F605AEE2FFFFFF      <1>     test byte [echoFlg], -1         
   208 00001DE7 7413                <1>     jz .noEcho
   209 00001DE9 0FB60D71E3FFFF      <1>     movzx ecx, byte [inBuffer + 1]    ;Get the number of chars to print
   210 00001DF0 BB01000000          <1>     mov ebx, 1  ;STDOUT
   211 00001DF5 B800400000          <1>     mov eax, 4000h  ;Write woo!
   212 00001DFA CD21                <1>     int 21h
   213                              <1> .noEcho:
   214 00001DFC E961F3FFFF          <1>     jmp commandMain.batProceed
   215                              <1> .noEchoPull:
   216 00001E01 FE0D5AE3FFFF        <1>     dec byte [inBuffer + 1]     ;Eliminate the @ char
   217 00001E07 0F8409FFFFFF        <1>     jz batNextLine    ;If this was just a @<CR><LF>, get next line
   218 00001E0D 4889D7              <1>     mov rdi, rdx
   219 00001E10 488D7201            <1>     lea rsi, qword [rdx + 1]    ;Start from the char afterwards
   220 00001E14 0FB60D46E3FFFF      <1>     movzx ecx, byte [inBuffer + 1]  ;Get the remaining count to copy
   221 00001E1B FFC1                <1>     inc ecx                         ;Want to copy over the terminating CR too
   222 00001E1D F3A4                <1>     rep movsb 
   223 00001E1F EBDB                <1>     jmp short .noEcho   ;Now proceed normally
   224                              <1>     
   225                              <1> .closeBat:
   226                              <1> ;Close the handle in rbx
   227 00001E21 B8003E0000          <1>     mov eax, 3E00h  ;Close the file pointer in ebx
   228 00001E26 CD21                <1>     int 21h         ;We ignore errors here... dont hurt me SHARE pls
   229                              <1>     return
    13                              <2> %%_ret:
    14 00001E28 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   230                              <1> .readChar:
   231                              <1> ;Reads a char. If no chars read, sets the EOF flag!
   232 00001E29 B901000000          <1>     mov ecx, 1
   233 00001E2E B8003F0000          <1>     mov eax, 3F00h
   234 00001E33 CD21                <1>     int 21h  
   235 00001E35 85C0                <1>     test eax, eax
   236                              <1>     retnz   ;If a char read, return
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001E37 75(28)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   237 00001E39 800D54E2FFFF10      <1>     or byte [statFlg1], batchEOF    ;Set the end of file reached flag!
   238                              <1>     return
    13                              <2> %%_ret:
    14 00001E40 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   239                              <1> 
   240                              <1> 
   241                              <1> batExpandVar:
   242                              <1> ;Input: rsi -> Char after the % sign that triggered this call.
   243                              <1> ;       rdi -> Position to place the substitution string
   244                              <1> ;Output: CF=NC: Substitution string is placed in buffer
   245                              <1> ;        CF=CY: No substitution string found
   246                              <1>     return
    13                              <2> %%_ret:
    14 00001E41 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   247                              <1>     ;cmp byte [rsi], "%"
   248                              <1> 
   249                              <1> batCleanup:
   250                              <1> ;This function is called after the last line has been processed by the 
   251                              <1> ; batch interpreter! Cleans up all the batch resources. Also called if 
   252                              <1> ; CTRLC called during a batch job and the user wants to kill the batch.
   253 00001E42 488B1D61E2FFFF      <1>     mov rbx, qword [bbPtr]
   254 00001E49 8A4301              <1>     mov al, byte [rbx + batBlockHdr.bEchoFlg]   ;Reset the echo flag
   255 00001E4C 880543E2FFFF        <1>     mov byte [echoFlg], al
   256                              <1> ;-----------------------------------------------------------------------
   257                              <1> ;===Now free the FOR and CALL blocks... oops havent implemented yet!!===
   258                              <1> ; FOR blocks are generally cleaned up by the FOR command. CALL too. 
   259                              <1> ; But since this is the routine called by the error handler too, it 
   260                              <1> ; needs to check for these things. Not a big deal as normally we'll 
   261                              <1> ; just have a null pointer.
   262                              <1> ;-----------------------------------------------------------------------
   263                              <1> ;Finally free this batch header
   264 00001E52 4150                <1>     push r8
   265 00001E54 4989D8              <1>     mov r8, rbx
   266 00001E57 B800490000          <1>     mov eax, 4900h
   267 00001E5C CD21                <1>     int 21h
   268 00001E5E 4158                <1>     pop r8
   269 00001E60 E84DF7FFFF          <1>     call cleanupRedirs  ;Clean up all redirections, close files etc
   270 00001E65 48C7053AE2FFFF0000- <1>     mov qword [bbPtr], 0    
   270 00001E6E 0000                <1>
   271 00001E70 80251DE2FFFFE7      <1>     and byte [statFlg1], ~(inBatch|batchEOF)   ;Oh bye bye batch mode!
   272                              <1>     return
    13                              <2> %%_ret:
    14 00001E77 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badDiskFull:
     7                              <1> ;This is a different error return, as this closes handles and prints
     8                              <1> ; disk full error and resets the command line!
     9 00001E78 488D15DFEAFFFF      <1>     lea rdx, noSpace
    10 00001E7F 488D0DFBEDFFFF      <1>     lea rcx, pipeErr
    11 00001E86 F6050BE2FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the flag set
    12 00001E8D 746F                <1>     jz short badCmn ;If its just disk full, dont go through pipe clean
    13 00001E8F 480F45D1            <1>     cmovnz rdx, rcx ;Swap error messages if pipe flag is on
    14 00001E93 E866000000          <1>     call badCmn     ;Print the string
    15 00001E98 E90BF7FFFF          <1>     jmp redirPipeFailureCommon.noPrint  ;Now close pipes and fully reset!
    16                              <1> badNoMemError:
    17 00001E9D 488D15A9EEFFFF      <1>     lea rdx, noMemMsg
    18 00001EA4 EB58                <1>     jmp short badCmn
    19                              <1> badSyntaxError:
    20 00001EA6 488D15ADEDFFFF      <1>     lea rdx, syntaxErr
    21 00001EAD EB4F                <1>     jmp short badCmn
    22                              <1> badEnvSpaceError:
    23 00001EAF 488D15C2EAFFFF      <1>     lea rdx, noEnvSpace
    24 00001EB6 EB46                <1>     jmp short badCmn
    25                              <1> badAccError:
    26 00001EB8 488D1547EDFFFF      <1>     lea rdx, accDenMsg
    27 00001EBF EB3D                <1>     jmp short badCmn
    28                              <1> badParamError:
    29 00001EC1 488D15BCEBFFFF      <1>     lea rdx, badParm
    30 00001EC8 EB34                <1>     jmp short badCmn
    31                              <1> badDriveError:
    32 00001ECA 488D1576EBFFFF      <1>     lea rdx, badDrv
    33 00001ED1 EB2B                <1>     jmp short badCmn
    34                              <1> badArgError:
    35 00001ED3 488D1539EEFFFF      <1>     lea rdx, badArgs
    36 00001EDA EB22                <1>     jmp short badCmn
    37                              <1> badFileError:
    38 00001EDC 488D1514EEFFFF      <1>     lea rdx, badSpec
    39 00001EE3 EB19                <1>     jmp short badCmn
    40                              <1> badDupFnf:
    41                              <1> ;Hybrid error message
    42 00001EE5 488D154AEAFFFF      <1>     lea rdx, dupName
    43 00001EEC EB10                <1>     jmp short badCmn
    44                              <1> badFnf:
    45 00001EEE 488D1558EAFFFF      <1>     lea rdx, fnfMsg
    46 00001EF5 EB07                <1>     jmp short badCmn
    47                              <1> badDirError:
    48 00001EF7 488D1587ECFFFF      <1>     lea rdx, badDir
    49                              <1> badCmn:
    50 00001EFE E914240000          <1>     jmp printString     ;This will be made nuanced later, to agree with DOS
    51                              <1> badCmdError:
    52 00001F03 488D1511EAFFFF      <1>     lea rdx, badCmd
    53 00001F0A EBF2                <1>     jmp short badCmn
    54                              <1> dir:
    55                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    56 00001F0C C60580E6FFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    57 00001F13 C6057AE6FFFF00      <1>     mov byte [dirLineCtr], 0
    58 00001F1A C70571E6FFFF000000- <1>     mov dword [dirFileCtr], 0
    58 00001F23 00                  <1>
    59 00001F24 C6056FE6FFFF00      <1>     mov byte [dirSrchDir], 0
    60 00001F2B 66C7055BE5FFFF0000  <1>     mov word [searchSpec], 0
    61 00001F34 488D3DE1E6FFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    62 00001F3B C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    63 00001F3E 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    63 00001F47 3F                  <1>
    64 00001F48 48894701            <1>     mov qword [rdi + fcb.filename], rax
    65 00001F4C C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    66                              <1>     ;Start by scanning for the switches
    67 00001F53 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    68 00001F5A 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    69                              <1> .scanNew:
    70 00001F5D E8EE250000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    71 00001F62 AC                  <1>     lodsb   ;Get this char
    72 00001F63 3C0D                <1>     cmp al, CR
    73 00001F65 744D                <1>     je .scanDone
    74 00001F67 3A05BDE0FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    75 00001F6D 7524                <1>     jne .notSwitch
    76 00001F6F AC                  <1>     lodsb   ;Get the next char
    77 00001F70 E8C0250000          <1>     call ucChar
    78 00001F75 3C57                <1>     cmp al, "W"
    79 00001F77 7509                <1>     jne .notWide
    80 00001F79 800D13E6FFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    81 00001F80 EBDB                <1>     jmp short .scanNew
    82                              <1> .notWide:
    83 00001F82 3C50                <1>     cmp al, "P"
    84 00001F84 0F8537FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    85 00001F8A 800D02E6FFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    86 00001F91 EBCA                <1>     jmp short .scanNew
    87                              <1> .notSwitch:
    88 00001F93 F605F9E5FFFF04      <1>     test byte [dirFlags], dirFileType
    89 00001F9A 0F8521FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    90                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    91 00001FA0 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    92 00001FA3 E834270000          <1>     call copyArgumentToSearchSpec   
    93 00001FA8 48FFCE              <1>     dec rsi ;Point back to the terminator char
    94 00001FAB 800DE1E5FFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    95 00001FB2 EBA9                <1>     jmp short .scanNew
    96                              <1> .scanDone:
    97 00001FB4 F605D8E5FFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    98 00001FBB 7438                <1>     jz .currentDrv
    99                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   100 00001FBD 488D35CBE4FFFF      <1>     lea rsi, searchSpec
   101 00001FC4 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   102 00001FC8 752B                <1>     jne .currentDrv
   103                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   104 00001FCA 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   105 00001FCF 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   106 00001FD3 B801290000          <1>     mov eax, 2901h   ;Parse filename
   107 00001FD8 CD21                <1>     int 21h
   108 00001FDA 3CFF                <1>     cmp al, -1
   109 00001FDC 0F84E8FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   110                              <1>     ;Else the drive in the fcb is valid
   111 00001FE2 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   112 00001FE7 84C0                <1>     test al, al
   113 00001FE9 740A                <1>     jz .currentDrv
   114 00001FEB FEC8                <1>     dec al  ;Convert to 0 based drive number
   115 00001FED 8805A6E5FFFF        <1>     mov byte [dirDrv], al
   116 00001FF3 EB0B                <1>     jmp short .dirPrintVol
   117                              <1> .currentDrv:
   118 00001FF5 E813250000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   119 00001FFA 880599E5FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   120                              <1> .dirPrintVol:
   121 00002000 488D3588E4FFFF      <1>     lea rsi, searchSpec
   122                              <1> ;Now construct the path on dirSrchDir.
   123 00002007 488D3D8CE5FFFF      <1>     lea rdi, dirSrchDir
   124 0000200E 0FB60584E5FFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   125 00002015 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   126 00002017 0441                <1>     add al, "A" ;Turn into a letter
   127 00002019 B43A                <1>     mov ah, ":"
   128 0000201B 66AB                <1>     stosw   ;Store X: into the search path
   129 0000201D B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   130 00002022 CD2F                <1>     int 2fh
   131 00002024 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   132 00002026 0F849EFEFFFF        <1>     je badDriveError
   133                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   134 0000202C 8A05F7DFFFFF        <1>     mov al, byte [pathSep]
   135 00002032 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   136 00002034 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   137 00002036 AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   138 00002037 FEC2                <1>     inc dl  ;Increment by 1
   139 00002039 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   140 0000203C B800470000          <1>     mov eax, 4700h  ;Print current working directory
   141 00002041 CD21                <1>     int 21h
   142 00002043 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   143                              <1>     ;rsi points to the first char in the provided path.
   144                              <1>     ;rdi points to the first char of the cwd.
   145 00002046 31C0                <1>     xor eax, eax
   146                              <1> .goToEndOfCwd:
   147                              <1> ;Move to the end of the string, could use repne?
   148 00002048 3807                <1>     cmp byte [rdi], al
   149 0000204A 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   150 0000204C 48FFC7              <1>     inc rdi
   151 0000204F EBF7                <1>     jmp short .goToEndOfCwd
   152                              <1> .prepCopy:
   153 00002051 8A05D2DFFFFF        <1>     mov al, byte [pathSep]
   154 00002057 3806                <1>     cmp byte [rsi], al
   155 00002059 7412                <1>     je .copyPathLoop
   156 0000205B B43A                <1>     mov ah, ":"
   157 0000205D 86C4                <1>     xchg al, ah
   158 0000205F 663947FE            <1>     cmp word [rdi - 2], ax
   159 00002063 7408                <1>     je .copyPathLoop
   160 00002065 88E0                <1>     mov al, ah
   161 00002067 3847FF              <1>     cmp byte [rdi - 1], al
   162 0000206A 7401                <1>     je .copyPathLoop
   163 0000206C AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   164                              <1> .copyPathLoop:
   165 0000206D AC                  <1>     lodsb
   166 0000206E 3A05B5DFFFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   167 00002074 7509                <1>     jne .checkDot  ;If not, store it
   168                              <1> .lpPathseps:
   169 00002076 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   170 00002078 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   171 0000207A 48FFC6              <1>     inc rsi
   172 0000207D EBF7                <1>     jmp short .lpPathseps
   173                              <1> .checkDot:
   174 0000207F 3C2E                <1>     cmp al, "."
   175 00002081 7407                <1>     je .dots
   176                              <1> .store:
   177 00002083 AA                  <1>     stosb
   178 00002084 84C0                <1>     test al, al ;Was the char we just copied a null?
   179 00002086 7472                <1>     jz .exitPathCopy
   180 00002088 EBE3                <1>     jmp short .copyPathLoop
   181                              <1> .dots:
   182                              <1>     ;Here handle dot and dot dot
   183                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   184                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   185                              <1>     ; by 1. If it is null, go to top of loop.
   186                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   187 0000208A 8A2599DFFFFF        <1>     mov ah, byte [pathSep]
   188 00002090 3867FF              <1>     cmp byte [rdi - 1], ah  
   189 00002093 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   190 00002095 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   191 00002097 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   192 0000209A 7413                <1>     je .twoDot
   193                              <1>     ;This is only a "current dir" when next char is pathsep or null
   194 0000209C 3A2587DFFFFF        <1>     cmp ah, byte [pathSep]
   195 000020A2 7406                <1>     je .skipThisPathsep
   196 000020A4 84E4                <1>     test ah, ah
   197 000020A6 74C5                <1>     jz .copyPathLoop
   198 000020A8 EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   199                              <1> .skipThisPathsep:
   200                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   201 000020AA 48FFC6              <1>     inc rsi ;Point to the pathsep
   202 000020AD EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   203                              <1> .twoDot:
   204                              <1>     ;Woohoo, this works!
   205 000020AF 48FFC6              <1>     inc rsi ;Move past the second dot
   206 000020B2 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   207 000020B4 3A256FDFFFFF        <1>     cmp ah, byte [pathSep]
   208 000020BA 7408                <1>     je .tdOk
   209 000020BC 84E4                <1>     test ah, ah
   210 000020BE 0F85FDFDFFFF        <1>     jne badParamError
   211                              <1> .tdOk:
   212 000020C4 8A055FDFFFFF        <1>     mov al, byte byte [pathSep]
   213 000020CA 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   214 000020CE 0F84EDFDFFFF        <1>     je badParamError
   215 000020D4 4881EF02000000      <1>     sub rdi, 2
   216 000020DB 31C9                <1>     xor ecx, ecx
   217 000020DD FFC9                <1>     dec ecx
   218 000020DF FD                  <1>     std
   219 000020E0 F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   220 000020E2 FC                  <1>     cld
   221 000020E3 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   222 000020EA 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   223 000020EC 0F847BFFFFFF        <1>     jz .copyPathLoop
   224 000020F2 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   225 000020F5 E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   226                              <1> .exitPathCopy:
   227                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   228 000020FA 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   229 00002101 8A0522DFFFFF        <1>     mov al, byte [pathSep]
   230 00002107 B43A                <1>     mov ah, ":"
   231 00002109 86C4                <1>     xchg al, ah
   232 0000210B 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   233 0000210F 7409                <1>     je .skipOverwrite
   234 00002111 88E0                <1>     mov al, ah
   235 00002113 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   236 00002115 7503                <1>     jne .skipOverwrite
   237 00002117 C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   238                              <1> .skipOverwrite:
   239 0000211A 488D3579E4FFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   240 00002121 4889F7              <1>     mov rdi, rsi
   241 00002124 B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   242 00002129 CD2F                <1>     int 2fh
   243 0000212B E8B9250000          <1>     call scanForWildcards
   244 00002130 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   245 00002132 4889F2              <1>     mov rdx, rsi
   246 00002135 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   247 00002139 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   248                              <1> .notNull:
   249 0000213B E8AD260000          <1>     call setDTA ;Set the DTA
   250 00002140 B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   251 00002145 B8004E0000          <1>     mov eax, 4E00h ;Find first
   252 0000214A CD21                <1>     int 21h
   253 0000214C 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   254                              <1> ;Now we have searched for the file, is a directory?
   255 0000214E F605D5DFFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   256 00002155 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   257                              <1>     ;Here we are searching IN a directory. Default search pattern!
   258 00002157 31C0                <1>     xor eax, eax
   259 00002159 31C9                <1>     xor ecx, ecx
   260 0000215B FFC9                <1>     dec ecx
   261 0000215D F2AE                <1>     repne scasb
   262 0000215F 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   263 00002162 EB40                <1>     jmp short .wcDefaultSearch
   264                              <1> .wcSearchPattern:
   265                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   266                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   267 00002164 31C0                <1>     xor eax, eax
   268 00002166 31C9                <1>     xor ecx, ecx
   269 00002168 FFC9                <1>     dec ecx
   270 0000216A F2AE                <1>     repne scasb ;Scan forwards
   271                              <1>     ;Here rdi points past the null at the end
   272 0000216C 8A05B7DEFFFF        <1>     mov al, byte [pathSep]
   273 00002172 31C9                <1>     xor ecx, ecx
   274 00002174 FFC9                <1>     dec ecx
   275 00002176 FD                  <1>     std ;Search backwards
   276 00002177 F2AE                <1>     repne scasb
   277 00002179 FC                  <1>     cld ;Search forwards again
   278 0000217A 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   279 0000217D 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   280 00002181 7503                <1>     jne .wcsp1
   281 00002183 48FFC7              <1>     inc rdi ;Go one char forwards
   282                              <1> .wcsp1:
   283                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   284 00002186 57                  <1>     push rdi
   285 00002187 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   286 00002189 7503                <1>     jne .wcsp2
   287 0000218B 48FFC7              <1>     inc rdi
   288                              <1> .wcsp2:
   289 0000218E 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   290 00002191 488D3D84E4FFFF      <1>     lea rdi, dirSrchFCB
   291 00002198 B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   292 0000219D CD21                <1>     int 21h
   293 0000219F 5F                  <1>     pop rdi
   294 000021A0 31C0                <1>     xor eax, eax
   295 000021A2 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   296                              <1> .wcDefaultSearch:
   297 000021A4 0FB605EEE3FFFF      <1>     movzx eax, byte [dirDrv] 
   298 000021AB E8C2160000          <1>     call volume.dirEP
   299 000021B0 488D1536EAFFFF      <1>     lea rdx, dirMain    ;Print message intro
   300 000021B7 B409                <1>     mov ah, 09h
   301 000021B9 CD21                <1>     int 21h
   302 000021BB C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   303 000021BE 488D15D5E3FFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   304 000021C5 B409                <1>     mov ah, 09h
   305 000021C7 CD21                <1>     int 21h
   306 000021C9 C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   307 000021CC 488D15D0E6FFFF      <1>     lea rdx, crlf2
   308 000021D3 B409                <1>     mov ah, 09h
   309 000021D5 CD21                <1>     int 21h
   310                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   311                              <1> ;rdi points to the terminating null
   312 000021D7 8A054CDEFFFF        <1>     mov al, byte [pathSep]
   313 000021DD 3847FF              <1>     cmp byte [rdi - 1], al
   314 000021E0 7403                <1>     je .root
   315 000021E2 48FFC7              <1>     inc rdi
   316                              <1> .root:
   317 000021E5 48FFCF              <1>     dec rdi ;Point back to the pathsep
   318 000021E8 AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   319 000021E9 488D352DE4FFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   320 000021F0 E836240000          <1>     call FCBToAsciiz    ;Terminates for free
   321 000021F5 E801000000          <1>     call .searchForFile
   322                              <1>     return
    13                              <2> %%_ret:
    14 000021FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   323                              <1> 
   324                              <1> .searchForFile:
   325 000021FB E8ED250000          <1>     call setDTA
   326 00002200 B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   327 00002205 488D158EE3FFFF      <1>     lea rdx, dirSrchDir
   328 0000220C B8004E0000          <1>     mov eax, 4E00h ;Find first
   329 00002211 CD21                <1>     int 21h
   330 00002213 720B                <1>     jc .dirNoMoreFiles
   331                              <1> .findNext:
   332 00002215 E890000000          <1>     call .dirPrintFileData  ;Print the file information
   333 0000221A B44F                <1>     mov ah, 4Fh
   334 0000221C CD21                <1>     int 21h
   335 0000221E 73F5                <1>     jnc .findNext 
   336                              <1> .dirNoMoreFiles:
   337 00002220 F6056CE3FFFF01      <1>     test byte [dirFlags], dirWideType
   338 00002227 740B                <1>     jz .dirNoEndNewLine
   339 00002229 488D1570E6FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   340 00002230 B409                <1>     mov ah, 09h
   341 00002232 CD21                <1>     int 21h
   342                              <1> .dirNoEndNewLine:
   343                              <1>     ;Now we print the number of files and the number of bytes on the disk
   344 00002234 F70557E3FFFFFFFFFF- <1>     test dword [dirFileCtr], -1
   344 0000223D FF                  <1>
   345 0000223E 750D                <1>     jnz .filesFound
   346                              <1>     ;Else print File not found and exit!
   347 00002240 488D1506E7FFFF      <1>     lea rdx, fnfMsg
   348 00002247 E8CB200000          <1>     call printString
   349                              <1>     return
    13                              <2> %%_ret:
    14 0000224C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   350                              <1> .filesFound:
   351 0000224D 488D156EECFFFF      <1>     lea rdx, fourSpc
   352 00002254 B409                <1>     mov ah, 09h
   353 00002256 CD21                <1>     int 21h
   354 00002258 B409                <1>     mov ah, 09h ;Print four Spaces twice
   355 0000225A CD21                <1>     int 21h
   356 0000225C 8B0533E3FFFF        <1>     mov eax, dword [dirFileCtr]   ;Get number of files
   357 00002262 E896240000          <1>     call printDecimalWord
   358 00002267 488D15B8E7FFFF      <1>     lea rdx, dirOk
   359 0000226E B409                <1>     mov ah, 09h
   360 00002270 CD21                <1>     int 21h
   361 00002272 488D154EECFFFF      <1>     lea rdx, threeSpc
   362 00002279 B409                <1>     mov ah, 09h
   363 0000227B CD21                <1>     int 21h
   364 0000227D B800360000          <1>     mov eax, 3600h ;Get disk info
   365 00002282 8A1511E3FFFF        <1>     mov dl, byte [dirDrv]
   366 00002288 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   367 0000228A CD21                <1>     int 21h ;Get disk free space info
   368 0000228C 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   369 0000228F 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   370 00002292 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   371 00002294 F7E1                <1>     mul ecx ;Get bytes per cluster
   372 00002296 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   373                              <1>     ;rax now has the number of free bytes on the disk
   374 00002299 E85F240000          <1>     call printDecimalWord
   375 0000229E 488D158BE7FFFF      <1>     lea rdx, bytesOk
   376 000022A5 B409                <1>     mov ah, 09h
   377 000022A7 CD21                <1>     int 21h
   378                              <1>     return
    13                              <2> %%_ret:
    14 000022A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   379                              <1> 
   380                              <1> .dirPrintFileData:
   381                              <1> ;Use cmdFcb to build the file name with space
   382                              <1> ;Start by print the name (same for both cases)
   383                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   384 000022AA F60579DEFFFF46      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles | dirCharDev
   385                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000022B1 75(A9)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   386 000022B3 488D3579DEFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   387 000022BA 488D3D44DEFFFF      <1>     lea rdi, cmdFcb
   388 000022C1 E8F7220000          <1>     call asciiFilenameToFCB
   389 000022C6 488D1538DEFFFF      <1>     lea rdx, cmdFcb
   390 000022CD B908000000          <1>     mov ecx, 8  ;Print 8 chars
   391 000022D2 BB01000000          <1>     mov ebx, 1  ;STDOUT
   392 000022D7 B440                <1>     mov ah, 40h ;Write handle
   393 000022D9 CD21                <1>     int 21h
   394 000022DB 52                  <1>     push rdx
   395 000022DC B220                <1>     mov dl, " "
   396 000022DE B402                <1>     mov ah, 02h ;Print char
   397 000022E0 CD21                <1>     int 21h
   398 000022E2 5A                  <1>     pop rdx
   399 000022E3 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   400 000022EA B903000000          <1>     mov ecx, 3  ;Print three chars
   401 000022EF BB01000000          <1>     mov ebx, 1  ;STDOUT
   402 000022F4 B440                <1>     mov ah, 40h ;Write handle
   403 000022F6 CD21                <1>     int 21h
   404 000022F8 F60594E2FFFF01      <1>     test byte [dirFlags], dirWideType
   405 000022FF 0F85AA000000        <1>     jnz .widePrint
   406                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   407                              <1>     ;Now check if a DIR
   408 00002305 F6051EDEFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   409 0000230C 7418                <1>     jz .dirPrintNotDir
   410 0000230E 488D1529E7FFFF      <1>     lea rdx, dirLbl
   411 00002315 B409                <1>     mov ah, 09h
   412 00002317 CD21                <1>     int 21h
   413 00002319 488D15A7EBFFFF      <1>     lea rdx, threeSpc
   414 00002320 B409                <1>     mov ah, 09h
   415 00002322 CD21                <1>     int 21h
   416 00002324 EB4F                <1>     jmp short .dirPrintFileDT
   417                              <1> .dirPrintNotDir:
   418                              <1> ;Here we print the file size
   419 00002326 B220                <1>     mov dl, " "
   420 00002328 B402                <1>     mov ah, 02h
   421 0000232A CD21                <1>     int 21h
   422 0000232C 8B05FDDDFFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   423 00002332 E837240000          <1>     call getDecimalWord
   424 00002337 4889CB              <1>     mov rbx, rcx
   425 0000233A 51                  <1>     push rcx
   426 0000233B 480FCB              <1>     bswap rbx
   427 0000233E B908000000          <1>     mov ecx, 8
   428                              <1> .dirPrintFileSizePrep:
   429 00002343 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   430 00002345 7514                <1>     jne .dirPrintFileSize
   431 00002347 B402                <1>     mov ah, 02h
   432 00002349 B220                <1>     mov dl, " "
   433 0000234B CD21                <1>     int 21h
   434 0000234D 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   435 00002351 FFC9                <1>     dec ecx
   436 00002353 81F901000000        <1>     cmp ecx, 1
   437 00002359 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   438                              <1> .dirPrintFileSize:
   439 0000235B 5B                  <1>     pop rbx
   440                              <1> .dirPrintFileSizeLoop:
   441 0000235C 88DA                <1>     mov dl, bl
   442 0000235E B402                <1>     mov ah, 02h
   443 00002360 CD21                <1>     int 21h
   444 00002362 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   445 00002366 FFC9                <1>     dec ecx
   446 00002368 75F2                <1>     jnz .dirPrintFileSizeLoop
   447 0000236A 488D155AEBFFFF      <1>     lea rdx, twoSpc
   448 00002371 B409                <1>     mov ah, 09h
   449 00002373 CD21                <1>     int 21h
   450                              <1> .dirPrintFileDT:
   451 00002375 B220                <1>     mov dl, " "
   452 00002377 B402                <1>     mov ah, 02h
   453 00002379 CD21                <1>     int 21h
   454 0000237B 0FB705ABDDFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   455 00002382 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   456 00002384 E83E1D0000          <1>     call printDate
   457 00002389 488D153BEBFFFF      <1>     lea rdx, twoSpc
   458 00002390 B409                <1>     mov ah, 09h
   459 00002392 CD21                <1>     int 21h
   460 00002394 0FB70590DDFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   461 0000239B E8491E0000          <1>     call printTime
   462 000023A0 488D15F9E4FFFF      <1>     lea rdx, crlf
   463 000023A7 B409                <1>     mov ah, 09h
   464 000023A9 CD21                <1>     int 21h
   465 000023AB B017                <1>     mov al, 23  ;23 lines... for the next bit
   466 000023AD EB0D                <1>     jmp short .dirPrintNameExit
   467                              <1> .widePrint:
   468                              <1> ;If /W, print name space ext space space space space
   469 000023AF 488D150CEBFFFF      <1>     lea rdx, fourSpc
   470 000023B6 B409                <1>     mov ah, 09h ;Print string
   471 000023B8 CD21                <1>     int 21h
   472 000023BA B073                <1>     mov al, 5*23    ;5 entries per line...
   473                              <1> .dirPrintNameExit:
   474 000023BC FF05D3E1FFFF        <1>     inc dword [dirFileCtr]   ;Increment file counter
   475 000023C2 FE05CCE1FFFF        <1>     inc byte [dirLineCtr]
   476 000023C8 3805C6E1FFFF        <1>     cmp byte [dirLineCtr], al
   477                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000023CE 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000023D0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   478 000023D1 F605BBE1FFFF02      <1>     test byte [dirFlags], dirPageType
   479 000023D8 741A                <1>     jz .dirPrnNoPag
   480 000023DA 488D1584E6FFFF      <1>     lea rdx, pauseMes
   481 000023E1 B409                <1>     mov ah, 09h
   482 000023E3 CD21                <1>     int 21h
   483 000023E5 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   484 000023E7 CD21                <1>     int 21h
   485 000023E9 488D15B0E4FFFF      <1>     lea rdx, crlf   ;Force new line
   486 000023F0 B409                <1>     mov ah, 09h
   487 000023F2 CD21                <1>     int 21h
   488                              <1> .dirPrnNoPag:
   489 000023F4 C60599E1FFFF00      <1>     mov byte [dirLineCtr], 0
   490                              <1>     return
    13                              <2> %%_ret:
    14 000023FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   491                              <1> 
   492                              <1> chdir:
   493 000023FC F605A0DCFFFFFF      <1>     test byte [arg1Flg], -1
   494 00002403 754D                <1>     jnz .changeDir
   495                              <1>     ;Print CWD
   496                              <1> .printCWD:
   497 00002405 E8821F0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   498 0000240A E8011F0000          <1>     call printCRLF
   499                              <1>     return
    13                              <2> %%_ret:
    14 0000240F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> .printDiskCWD:
   501                              <1> ;Print CWD for a specified drive
   502 00002410 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   503 00002414 88D0                <1>     mov al, dl
   504 00002416 0440                <1>     add al, "@" ;Get the UC letter
   505 00002418 B43A                <1>     mov ah, ":"
   506 0000241A 488D3D6EE0FFFF      <1>     lea rdi, searchSpec
   507 00002421 66AB                <1>     stosw   ;Store X:, rdi+=2
   508 00002423 8A0500DCFFFF        <1>     mov al, byte [pathSep]
   509 00002429 AA                  <1>     stosb   ;Store pathSep, inc rdi
   510 0000242A B447                <1>     mov ah, 47h ;Get Current Working Directory
   511 0000242C 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   512 0000242F CD21                <1>     int 21h
   513 00002431 E8F5200000          <1>     call strlen
   514 00002436 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   515 0000243C B440                <1>     mov ah, 40h ;Write to handle
   516 0000243E BB01000000          <1>     mov ebx, 1  ;STDOUT
   517 00002443 488D1545E0FFFF      <1>     lea rdx, searchSpec
   518 0000244A CD21                <1>     int 21h
   519 0000244C E8BF1E0000          <1>     call printCRLF
   520                              <1>     return
    13                              <2> %%_ret:
    14 00002451 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   521                              <1> .changeDir:
   522 00002452 8A054DDCFFFF        <1>     mov al, byte [arg1FCBret]
   523 00002458 3CFF                <1>     cmp al, -1 
   524 0000245A 0F846AFAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   525 00002460 E85F220000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   526 00002465 488D1523E0FFFF      <1>     lea rdx, searchSpec
   527 0000246C B43B                <1>     mov ah, 3Bh ;CHDIR
   528 0000246E CD21                <1>     int 21h
   529 00002470 0F8281FAFFFF        <1>     jc badDirError
   530                              <1>     return
    13                              <2> %%_ret:
    14 00002476 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   531                              <1> 
   532                              <1> mkdir:
   533 00002477 F60525DCFFFFFF      <1>     test byte [arg1Flg], -1
   534 0000247E 0F844FFAFFFF        <1>     jz badArgError
   535 00002484 F6051BDCFFFFFF      <1>     test byte [arg2Flg], -1
   536 0000248B 0F8542FAFFFF        <1>     jnz badArgError
   537                              <1>     ;We have exactly one argument
   538 00002491 8A050EDCFFFF        <1>     mov al, byte [arg1FCBret]
   539 00002497 3CFF                <1>     cmp al, -1 
   540 00002499 0F842BFAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   541 0000249F E820220000          <1>     call buildCommandPath
   542 000024A4 488D15E4DFFFFF      <1>     lea rdx, searchSpec
   543 000024AB B800390000          <1>     mov eax, 3900h  ;MKDIR
   544 000024B0 CD21                <1>     int 21h
   545                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000024B2 73(76)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   546                              <1> .badMake:   ;Else, bad make
   547 000024B4 488D15DEE6FFFF      <1>     lea rdx, badMD
   548 000024BB E9571E0000          <1>     jmp printString
   549                              <1> 
   550                              <1> rmdir:
   551 000024C0 F605DCDBFFFFFF      <1>     test byte [arg1Flg], -1
   552 000024C7 0F8406FAFFFF        <1>     jz badArgError
   553 000024CD F605D2DBFFFFFF      <1>     test byte [arg2Flg], -1
   554 000024D4 0F85F9F9FFFF        <1>     jnz badArgError
   555                              <1>     ;We have exactly one argument
   556 000024DA 8A05C5DBFFFF        <1>     mov al, byte [arg1FCBret]
   557 000024E0 3CFF                <1>     cmp al, -1 
   558 000024E2 0F84E2F9FFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   559 000024E8 E8D7210000          <1>     call buildCommandPath
   560 000024ED 488D159BDFFFFF      <1>     lea rdx, searchSpec
   561 000024F4 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   562 000024F9 CD21                <1>     int 21h
   563                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000024FB 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000024FD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   564                              <1> .badRemove:   ;Else, bad make
   565 000024FE 488D15B1E6FFFF      <1>     lea rdx, badRD
   566 00002505 E90D1E0000          <1>     jmp printString
   567                              <1> 
   568                              <1> copy:
   569 0000250A 66C70569E2FFFFFFFF  <1>     mov word [sourceHdl], -1
   570 00002513 66C70562E2FFFFFFFF  <1>     mov word [destHdl], -1
   571 0000251C 66C7055BE2FFFFFFFF  <1>     mov word [srcHdlInfo], -1
   572 00002525 C60564E2FFFF00      <1>     mov byte [bCpFlg], 0    ;State flag!
   573 0000252C 48C7054BE2FFFF0000- <1>     mov qword [cpBufPtr], 0 ;Init to null ptr!
   573 00002535 0000                <1>
   574 00002537 66C7054AE2FFFF0000  <1>     mov word [wCpBufSz], 0  ;Clear buffer count        
   575 00002540 C70542E2FFFF000000- <1>     mov dword [dCpCnt], 0   ;Clear file count
   575 00002549 00                  <1>
   576 0000254A C6050BE1FFFF00      <1>     mov byte [srcSpec], 0   ;Clear first bytes of the buffers
   577 00002551 C60586E1FFFF00      <1>     mov byte [destSpec], 0
   578 00002558 48C705FDE1FFFF0000- <1>     mov qword [srcPtr], 0
   578 00002561 0000                <1>
   579 00002563 48C705FAE1FFFF0000- <1>     mov qword [destPtr], 0
   579 0000256C 0000                <1>
   580 0000256E E87A220000          <1>     call setDTA
   581 00002573 B800540000          <1>     mov eax, 5400h  ;Get verify flag
   582 00002578 CD21                <1>     int 21h
   583 0000257A 8805FBE1FFFF        <1>     mov byte [verifyFlg], al    ;Save verify flag!
   584                              <1> ;Start with getting a disk buffer, of the size of the internal disk buffers. 
   585                              <1> ;If we cant allocate full diskbuffer, get as much as we can
   586                              <1> ;Diskbuffer as thats the best optimisation for IO buffers
   587 00002580 B800520000          <1>     mov eax, 5200h
   588 00002585 CD21                <1>     int 21h ;Get in rbx ptr to sysvars
   589 00002587 0FB74B20            <1>     movzx ecx, word [rbx + 20h] ;Get the internal buffer size in ecx!
   590 0000258B 89CB                <1>     mov ebx, ecx
   591 0000258D C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs, save bytes in ecx
   592 00002590 B800480000          <1>     mov eax, 4800h
   593 00002595 CD21                <1>     int 21h
   594 00002597 731E                <1>     jnc .bufOk
   595 00002599 85DB                <1>     test ebx, ebx       ;Cannot allocate? Yikes...
   596 0000259B 750C                <1>     jnz .okSize
   597                              <1> .badAlloc:
   598                              <1> ;Not enough memory error!
   599 0000259D 488D1565E4FFFF      <1>     lea rdx, cpNoMem
   600 000025A4 E955F9FFFF          <1>     jmp badCmn  ;Print the string and return!
   601                              <1> .okSize:
   602 000025A9 89D9                <1>     mov ecx, ebx    
   603 000025AB C1E104              <1>     shl ecx, 4  ;Convert into bytes from paragraphs
   604 000025AE B800480000          <1>     mov eax, 4800h
   605 000025B3 CD21                <1>     int 21h
   606 000025B5 72E6                <1>     jc .badAlloc
   607                              <1> .bufOk:
   608 000025B7 488905C4E1FFFF      <1>     mov qword [cpBufPtr], rax   ;Save ptr to xfr area
   609 000025BE 66890DC5E1FFFF      <1>     mov word [wCpBufSz], cx     ;Save buffer size
   610                              <1> ;Go to the end of the cmd line and search backwards for the destination first
   611 000025C5 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   612 000025CC 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]
   613 000025D4 FFC9                <1>     dec ecx ;Turn into offset
   614 000025D6 4801CE              <1>     add rsi, rcx
   615 000025D9 31D2                <1>     xor edx, edx    ;Use edx as a counter for number of destination switches
   616 000025DB FD                  <1>     std ;Go in reverse
   617                              <1> .sd:    ;At this point, any switch chars affect destination!
   618 000025DC E86F1F0000          <1>     call skipDelimiters ;skipDelimiters in reverse!
   619 000025E1 8A0543DAFFFF        <1>     mov al, byte [switchChar]
   620 000025E7 384601              <1>     cmp byte [rsi + 1], al  ;Did we hit a switch?
   621 000025EA 7509                <1>     jne .noSwitch
   622                              <1>     ;Here we hit a switchchar! Process it! rsi points to char before switchchar
   623 000025EC 0FB64602            <1>     movzx eax, byte [rsi + 2]   ;Get the char
   624 000025F0 50                  <1>     push rax        ;Push the switchchar
   625 000025F1 FFC2                <1>     inc edx         ;Inc the counter
   626 000025F3 EBE7                <1>     jmp short .sd   ;Now go back to skipping delimiters again!
   627                              <1> .noSwitch:
   628                              <1> ;Ok so we hit a path. Now set the flags based on the stack!
   629 000025F5 85D2                <1>     test edx, edx
   630 000025F7 7412                <1>     jz .noDestSwitch
   631                              <1> .ns1:
   632 000025F9 58                  <1>     pop rax ;Pop the switch char
   633 000025FA B304                <1>     mov bl, ascDes
   634 000025FC E809040000          <1>     call .doSwitchRev
   635 00002601 0F8574040000        <1>     jnz .badExit    ;Invalid switch, abort procedure!    
   636 00002607 FFCA                <1>     dec edx
   637 00002609 75EE                <1>     jnz .ns1
   638                              <1> .noDestSwitch:
   639                              <1> ;Now search for the starting delimiter or start of line
   640 0000260B 48FFC6              <1>     inc rsi ;Go to the last char in the path
   641                              <1> .noSwitchLp:
   642 0000260E AC                  <1>     lodsb   ;Get char at rsi, go back a char
   643 0000260F E84A1F0000          <1>     call isALdelimiter
   644 00002614 7412                <1>     je .destFnd
   645 00002616 8A050EDAFFFF        <1>     mov al, byte [switchChar]
   646 0000261C 3846FF              <1>     cmp byte [rsi - 1], al  ;Peek if an embedded switch?
   647 0000261F 7404                <1>     je .se  ;Jump if so!
   648 00002621 FFC9                <1>     dec ecx ;One less char left to search
   649 00002623 EBE9                <1>     jmp short .noSwitchLp
   650                              <1> .se:
   651 00002625 48FFCE              <1>     dec rsi     ;Dec to make the below work!
   652                              <1> .destFnd:
   653 00002628 4881C602000000      <1>     add rsi, 2  ;Go back to the first char past the delimiter
   654 0000262F FC                  <1>     cld 
   655 00002630 4889F5              <1>     mov rbp, rsi    ;Save this ptr in rbp temporarily
   656 00002633 488D3DA4E0FFFF      <1>     lea rdi, destSpec
   657 0000263A 57                  <1>     push rdi
   658 0000263B E841200000          <1>     call cpDelimPathToBufz ;Copy this over!   
   659 00002640 5F                  <1>     pop rdi
   660 00002641 E8C11F0000          <1>     call findLastPathComponant  ;Get last path componant in rdi
   661 00002646 48893D1BE1FFFF      <1>     mov qword [destPtr], rdi
   662 0000264D 807F013A            <1>     cmp byte [rdi + 1], ":" ;Is this a colon?
   663 00002651 7517                <1>     jne .destEnd    ;Dont worry
   664 00002653 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   665 00002655 E8DB1E0000          <1>     call ucChar             ;Make sure we UC the drive letter
   666 0000265A 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   667 0000265C 4881C702000000      <1>     add rdi, 2              ;Point to this null
   668 00002663 48893DFEE0FFFF      <1>     mov qword [destPtr], rdi    ;Store chars over the null
   669                              <1> .destEnd:
   670                              <1> ;Now start with source processing!! Clear the binSrc bit in bCpFlg
   671 0000266A 80251FE1FFFFFD      <1>     and byte [bCpFlg], ~binSrc  ;Mightve been accidentally set by dest flags
   672 00002671 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   673                              <1> .srcLp:
   674 00002678 E8D31E0000          <1>     call skipDelimiters 
   675 0000267D 8A05A7D9FFFF        <1>     mov al, byte [switchChar]
   676 00002683 3806                <1>     cmp byte [rsi], al
   677 00002685 7516                <1>     jne .noSrcSw    ;Not switch! Must be filename start!
   678                              <1>     ;rsi points to switch after switchchar
   679 00002687 B301                <1>     mov bl, ascSrc
   680 00002689 E876030000          <1>     call .doSwitch
   681 0000268E 0F85E7030000        <1>     jnz .badExit
   682 00002694 4881C602000000      <1>     add rsi, 2
   683 0000269B EBDB                <1>     jmp short .srcLp    ;Now keep searching for start of filename
   684                              <1> .noSrcSw:
   685 0000269D 4839F5              <1>     cmp rbp, rsi
   686 000026A0 7527                <1>     jne .noSameSrcDest
   687                              <1>     ;Here if the destination we specified earlier is the same as the source
   688                              <1>     ;This means, the actual destination is the current default drive
   689                              <1>     ; on the current directory. Pass to DOS X:FILENAME.EXT<NUL> string.
   690 000026A2 E8661E0000          <1>     call getCurrentDrive    ;Get current drive
   691 000026A7 0441                <1>     add al, "A"             ;Turn into a drive letter
   692 000026A9 B43A                <1>     mov ah, ":"
   693 000026AB 0FB7C0              <1>     movzx eax, ax
   694 000026AE 89052AE0FFFF        <1>     mov dword [destSpec], eax   ;Add a default null terminator
   695 000026B4 488D3D25E0FFFF      <1>     lea rdi, destSpec+2         ;Point to the null after the colon
   696 000026BB 48893DA6E0FFFF      <1>     mov qword [destPtr], rdi    ;Copy the filenames here
   697 000026C2 800DC7E0FFFF20      <1>     or byte [bCpFlg], mod1Cpy   ;Copy to curdir in cur drive
   698                              <1> .noSameSrcDest:
   699 000026C9 488D3D8CDFFFFF      <1>     lea rdi, srcSpec            ;rsi now goes into the source spec!
   700 000026D0 57                  <1>     push rdi
   701 000026D1 E8AB1F0000          <1>     call cpDelimPathToBufz      ;Copy this over! rsi points past delimiter
   702 000026D6 5F                  <1>     pop rdi
   703                              <1>     ;Now go forwards and pick up any more switches.
   704                              <1>     ;Also any "+" signs here!!
   705 000026D7 48FFCE              <1>     dec rsi ;Point back to the first delimiter
   706                              <1> .swSrcSwPost:
   707 000026DA E8711E0000          <1>     call skipDelimiters ;Skips trailing delimiters
   708 000026DF 8A0545D9FFFF        <1>     mov al, byte [switchChar]
   709 000026E5 3806                <1>     cmp byte [rsi], al
   710 000026E7 7516                <1>     jne .swSrcSwPostExit
   711                              <1>     ;rsi points to switch after switchchar
   712 000026E9 B301                <1>     mov bl, ascSrc
   713 000026EB E814030000          <1>     call .doSwitch  ;Puts us at the char past the switch itself
   714 000026F0 0F8585030000        <1>     jnz .badExit
   715 000026F6 4881C602000000      <1>     add rsi, 2      ;Go past the switch
   716 000026FD EBDB                <1>     jmp short .swSrcSwPost
   717                              <1> .swSrcSwPostExit:
   718 000026FF 4889FE              <1>     mov rsi, rdi
   719 00002702 E8E21F0000          <1>     call scanForWildcards   ;Find if we have a WC in this source!
   720 00002707 7507                <1>     jnz .oneCp
   721 00002709 800D80E0FFFF08      <1>     or byte [bCpFlg], wcSrc ;We are copying many files. Disp names
   722                              <1> .oneCp:
   723 00002710 E8F21E0000          <1>     call findLastPathComponant  ;Get last componant of src in rdi
   724 00002715 48893D44E0FFFF      <1>     mov qword [srcPtr], rdi     ;Now save the last componant
   725 0000271C 807F013A            <1>     cmp byte [rdi + 1], ":"     ;Is this a colon?
   726 00002720 7517                <1>     jne .srcEnd             ;Dont worry
   727 00002722 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   728 00002724 E80C1E0000          <1>     call ucChar             ;Make sure we UC the drive letter
   729 00002729 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   730 0000272B 4881C702000000      <1>     add rdi, 2              ;Point after the colon
   731 00002732 48893D27E0FFFF      <1>     mov qword [srcPtr], rdi ;Store chars past the colon
   732                              <1> .srcEnd:
   733                              <1> ;Now uppercase both paths
   734 00002739 488D351CDFFFFF      <1>     lea rsi, srcSpec
   735 00002740 E8FC1D0000          <1>     call normalisePath
   736 00002745 488D3D92DFFFFF      <1>     lea rdi, destSpec
   737 0000274C E8F01D0000          <1>     call normalisePath
   738                              <1> ;Now establish if the source is a directory or not!
   739 00002751 F60538E0FFFF08      <1>     test byte [bCpFlg], wcSrc
   740 00002758 7577                <1>     jnz .checkDestDir   ;Skip check if source has wildcards
   741 0000275A 488D15FBDEFFFF      <1>     lea rdx, srcSpec
   742 00002761 4889D6              <1>     mov rsi, rdx
   743 00002764 66AD                <1>     lodsw   ;Get the first two chars, is it "X:" style
   744 00002766 80FC3A              <1>     cmp ah, ":"
   745 00002769 7522                <1>     jne .isSrcDir   ;If not, check explicitly
   746 0000276B AC                  <1>     lodsb           ;Get char past :
   747 0000276C 84C0                <1>     test al, al     ;Is byte three nul?
   748 0000276E 740D                <1>     jz .srcStorWc   ;If so, we have "X:<NUL>"
   749 00002770 3A05B3D8FFFF        <1>     cmp al, byte [pathSep]  ;If char past : isnt pathsep, check manually
   750 00002776 7515                <1>     jne .isSrcDir
   751 00002778 AC                  <1>     lodsb           ;Get char past char past "X:\"
   752 00002779 84C0                <1>     test al, al     
   753 0000277B 7510                <1>     jnz .isSrcDir   ;Fall thru is "X:\<NUL>"
   754                              <1> .srcStorWc:
   755                              <1> ;rsi points past the char to store the WC at
   756 0000277D C746FF2A2E2A00      <1>     mov dword [rsi - 1], "*.*"  ;Store with terminating null!
   757 00002784 800D05E0FFFF08      <1>     or byte [bCpFlg], wcSrc     ;We're adding the wildcard to the source!
   758 0000278B EB44                <1>     jmp short .checkDestDir
   759                              <1> .isSrcDir:
   760 0000278D B910000000          <1>     mov ecx, dirDirectory
   761 00002792 B8004E0000          <1>     mov eax, 4E00h
   762 00002797 CD21                <1>     int 21h
   763 00002799 7236                <1>     jc .checkDestDir    ;Wasn't a dir!
   764                              <1>     ;Was the file we found actually a directory?
   765 0000279B 803D88D9FFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   766 000027A2 752D                <1>     jne .checkDestDir   ;Wasn't a dir
   767 000027A4 4889D7              <1>     mov rdi, rdx
   768 000027A7 E87F1D0000          <1>     call strlen
   769 000027AC FFC9                <1>     dec ecx
   770 000027AE 4801CF              <1>     add rdi, rcx    ;Move rdi to the terminating null
   771 000027B1 8A0572D8FFFF        <1>     mov al, byte [pathSep]
   772 000027B7 3847FF              <1>     cmp byte [rdi - 1], al  ;Do we have a trailing pathsep?
   773 000027BA 7401                <1>     je .srctpsp
   774 000027BC AA                  <1>     stosb   ;Store the pathsep over the null, inc rdi
   775                              <1> .srctpsp:
   776 000027BD 48893D9CDFFFFF      <1>     mov qword [srcPtr], rdi ;Update the srcPtr
   777 000027C4 B82A2E2A00          <1>     mov eax, "*.*"
   778 000027C9 AB                  <1>     stosd   ;Store the WC with terminating nul!
   779 000027CA 800DBFDFFFFF08      <1>     or byte [bCpFlg], wcSrc ;We're adding the wildcard to the source!
   780                              <1> .checkDestDir:
   781                              <1> ;Now establish if destination is a directory or not!
   782 000027D1 F605B8DFFFFF20      <1>     test byte [bCpFlg], mod1Cpy ;If we already know its mod1, skip
   783 000027D8 0F855E010000        <1>     jnz .mod1
   784 000027DE 488D35F9DEFFFF      <1>     lea rsi, destSpec
   785 000027E5 66AD                <1>     lodsw   ;Get the first word, i.e. candidate "X:"
   786 000027E7 80FC3A              <1>     cmp ah, ":"
   787 000027EA 751A                <1>     jne .isDestDir
   788 000027EC 66AD                <1>     lodsw   ;Get second word, i.e. candidate "\<NUL>" or "<NUL>"
   789 000027EE 84C0                <1>     test al, al ;Is byte three nul?
   790 000027F0 0F8446010000        <1>     jz .mod1    ;If so, it was a X:<NUL>
   791 000027F6 84E4                <1>     test ah, ah ;Is byte four nul?
   792 000027F8 750C                <1>     jnz .isDestDir  ;If not, check if destination is a directory
   793 000027FA 3A0529D8FFFF        <1>     cmp al, byte [pathSep]  ;Else, check if byte 3 was a pathsep!
   794 00002800 0F8436010000        <1>     je .mod1    ;If it is, then it was a X:\<NUL>
   795                              <1> .isDestDir:
   796                              <1> ;Only here if we suspect the destination pathspec is a path, not file!
   797 00002806 488D15D1DEFFFF      <1>     lea rdx, destSpec
   798 0000280D B910000000          <1>     mov ecx, dirDirectory
   799 00002812 B8004E0000          <1>     mov eax, 4E00h
   800 00002817 CD21                <1>     int 21h
   801 00002819 7237                <1>     jc .mod2
   802                              <1>     ;Was the file we found actually a directory?
   803 0000281B 803D08D9FFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   804 00002822 752E                <1>     jne .mod2
   805                              <1>     ;Here we just check if we have a terminating slash on the destination path.
   806                              <1>     ;If not, we need to place one there!
   807 00002824 4889D7              <1>     mov rdi, rdx    ;Move destSpec
   808 00002827 E8FF1C0000          <1>     call strlen
   809 0000282C FFC9                <1>     dec ecx         ;Lose the null terminator, zero upper bits
   810 0000282E 4801CF              <1>     add rdi, rcx    ;Go to null terminator
   811 00002831 0FB605F1D7FFFF      <1>     movzx eax, byte [pathSep]
   812 00002838 3847FF              <1>     cmp byte [rdi - 1], al  ;Is the char before the null a pathsep?
   813 0000283B 0F84FB000000        <1>     je .mod1        ;If so, skip adding another one!
   814 00002841 66AB                <1>     stosw           ;Else, store the pathsep and null!
   815 00002843 48FFCF              <1>     dec rdi         ;Point back to null
   816 00002846 48893D1BDFFFFF      <1>     mov qword [destPtr], rdi    ;Save this pointer
   817 0000284D E9EA000000          <1>     jmp .mod1
   818                              <1> .mod2:
   819                              <1> ;Here we are copying files(s) to file(s)! Filenames are copied according 
   820                              <1> ; to rename wildcard semantics. Always run through this as the destination
   821                              <1> ; name may have wildcards in it! But we don't add any.
   822 00002852 800D37DFFFFF40      <1>     or byte [bCpFlg], mod2Cpy   ;Set to remind us what we are doing!
   823 00002859 488D357EDEFFFF      <1>     lea rsi, destSpec
   824 00002860 E8841E0000          <1>     call scanForWildcards   ;ZF=ZE if WC cound
   825 00002865 7407                <1>     jz .m2Wc
   826 00002867 800D22DFFFFF10      <1>     or byte [bCpFlg], oneDest   ;The destination is a single file!
   827                              <1> .m2Wc:
   828                              <1> ;Search for the source file
   829 0000286E 488D15E7DDFFFF      <1>     lea rdx, srcSpec
   830 00002875 31C9                <1>     xor ecx, ecx    ;Normal and RO files pls
   831 00002877 B8004E0000          <1>     mov eax, 4E00h
   832 0000287C CD21                <1>     int 21h
   833 0000287E 0F82ED010000        <1>     jc .badSrcFile
   834 00002884 488B35DDDEFFFF      <1>     mov rsi, qword [destPtr]
   835 0000288B 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Create the permanent destination pattern
   836 0000288F B801290000          <1>     mov eax, 2901h
   837 00002894 CD21                <1>     int 21h
   838                              <1> .md2Lp:
   839 00002896 488D3596D8FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   840 0000289D 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Create the source pattern
   841 000028A1 B801290000          <1>     mov eax, 2901h
   842 000028A6 CD21                <1>     int 21h  
   843                              <1> ;Now depending on source and dest patterns, build a filename in renName
   844 000028A8 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
   845 000028AC 488D3DBDDEFFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
   846 000028B3 57                  <1>     push rdi
   847 000028B4 48A5                <1>     movsq
   848 000028B6 66A5                <1>     movsw
   849 000028B8 A4                  <1>     movsb
   850 000028B9 5F                  <1>     pop rdi
   851 000028BA 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
   852 000028BE B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
   853                              <1> .md2NameMake:
   854 000028C3 AC                  <1>     lodsb   ;Get the char from the source string
   855 000028C4 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
   856 000028C7 7502                <1>     jne .noStore    ;Dont store the char there
   857 000028C9 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
   858                              <1> .noStore:
   859 000028CB 48FFC7              <1>     inc rdi ;Goto next char position
   860 000028CE FFC9                <1>     dec ecx
   861 000028D0 75F1                <1>     jnz .md2NameMake
   862 000028D2 488D355AD8FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   863 000028D9 488B3D80DEFFFF      <1>     mov rdi, qword [srcPtr]
   864 000028E0 E82D1C0000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
   865 000028E5 488D3584DEFFFF      <1>     lea rsi, renName
   866 000028EC 488B3D75DEFFFF      <1>     mov rdi, qword [destPtr]
   867 000028F3 E8331D0000          <1>     call FCBToAsciiz
   868 000028F8 E8DB000000          <1>     call .prntFilespec  ;Prints the source filename
   869 000028FD E8AE010000          <1>     call copyMain       ;And copy it!
   870 00002902 731D                <1>     jnc .md2Ok
   871                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   872                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   873 00002904 3CFD                <1>     cmp al, -3
   874 00002906 0F8442010000        <1>     je .badBinCdevErr
   875 0000290C 3CFE                <1>     cmp al, -2
   876 0000290E 0F8443010000        <1>     je .rootDirFull
   877 00002914 3CFF                <1>     cmp al, -1      ;Source and destination same?
   878 00002916 0F8444010000        <1>     je .badSameFile 
   879 0000291C E95A010000          <1>     jmp .badExit    ;Else generic error message
   880                              <1> .md2Ok:
   881 00002921 F60568DEFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   882 00002928 0F8485000000        <1>     jz .copyDone        ;Copy complete!
   883 0000292E B8004F0000          <1>     mov eax, 4F00h      ;Else, find Next File
   884 00002933 CD21                <1>     int 21h
   885 00002935 727C                <1>     jc .copyDone        ;If no more files, we are done!
   886 00002937 E95AFFFFFF          <1>     jmp .md2Lp    ;Else, now build a new source and destination!
   887                              <1> .mod1:
   888                              <1> ;Here we are copying file(s) into a directory. Filenames are copied verbatum.
   889 0000293C 800D4DDEFFFF20      <1>     or byte [bCpFlg], mod1Cpy   ;Ensure this bit is set!
   890 00002943 488D1512DDFFFF      <1>     lea rdx, srcSpec
   891 0000294A 31C9                <1>     xor ecx, ecx    ;Normal and read only files pls!!
   892 0000294C B8004E0000          <1>     mov eax, 4E00h
   893 00002951 CD21                <1>     int 21h
   894 00002953 0F8218010000        <1>     jc .badSrcFile  ;File not found error!!
   895                              <1> .mod1Lp:
   896 00002959 488D35D3D7FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   897 00002960 488B3DF9DDFFFF      <1>     mov rdi, qword [srcPtr]
   898 00002967 E8B51B0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   899 0000296C 488B3DF5DDFFFF      <1>     mov rdi, qword [destPtr]
   900 00002973 E8A91B0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   901 00002978 E85B000000          <1>     call .prntFilespec
   902 0000297D E82E010000          <1>     call copyMain   ;And copy it!
   903 00002982 731D                <1>     jnc .mod1Ok
   904                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   905                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   906 00002984 3CFD                <1>     cmp al, -3
   907 00002986 0F84C2000000        <1>     je .badBinCdevErr
   908 0000298C 3CFE                <1>     cmp al, -2
   909 0000298E 0F84C3000000        <1>     je .rootDirFull
   910 00002994 3CFF                <1>     cmp al, -1      ;Source and destination same?
   911 00002996 0F84C4000000        <1>     je .badSameFile 
   912 0000299C E9DA000000          <1>     jmp .badExit    ;Else generic error message
   913                              <1> .mod1Ok:
   914 000029A1 F605E8DDFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   915 000029A8 7409                <1>     jz .copyDone
   916 000029AA B8004F0000          <1>     mov eax, 4F00h      ;Find Next File
   917 000029AF CD21                <1>     int 21h
   918 000029B1 73A6                <1>     jnc .mod1Lp         ;If no more files, we are done! Fall thru!
   919                              <1> 
   920                              <1> .copyDone:
   921 000029B3 E8CD000000          <1>     call .copyCleanup   ;Clean up resources!
   922 000029B8 B800020000          <1>     mov eax, 0200h      ;Beep a TAB out :)
   923 000029BD B209                <1>     mov dl, TAB
   924 000029BF CD21                <1>     int 21h
   925 000029C1 8B05C5DDFFFF        <1>     mov eax, dword [dCpCnt] ;Get number of files copied
   926 000029C7 E8311D0000          <1>     call printDecimalWord   ;n File(s) copied
   927 000029CC 488D1524E0FFFF      <1>     lea rdx, copyOk
   928 000029D3 B409                <1>     mov ah, 09h
   929 000029D5 CD21                <1>     int 21h    
   930                              <1>     return
    13                              <2> %%_ret:
    14 000029D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   931                              <1> 
   932                              <1> .prntFilespec:
   933                              <1> ;Prints the filespec to STDOUT. If the path is 
   934 000029D8 F605B1DDFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no wildcard, then don't print name
   935                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000029DF 74(D7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   936 000029E1 488D1574DCFFFF      <1>     lea rdx, srcSpec
   937 000029E8 4889D7              <1>     mov rdi, rdx
   938 000029EB E83B1B0000          <1>     call strlen
   939 000029F0 FFC9                <1>     dec ecx     ;Drop terminating null
   940 000029F2 BB01000000          <1>     mov ebx, 1  ;STDOUT
   941 000029F7 B800400000          <1>     mov eax, 4000h  ;Write
   942 000029FC CD21                <1>     int 21h
   943 000029FE E80D190000          <1>     call printCRLF
   944                              <1>     return
    13                              <2> %%_ret:
    14 00002A03 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   945                              <1> .doSwitch:
   946                              <1> ;Since switches can come before or after a name, handle them here!
   947                              <1> ;If invalid switch char, returns ZF=NZ.
   948                              <1> ;Input: bl = ASCII bit to set (either 1 or 2) 
   949                              <1> ;       rsi -> Switchchar
   950 00002A04 56                  <1>     push rsi
   951 00002A05 48FFC6              <1>     inc rsi ;Point to char past switchchar
   952 00002A08 AC                  <1>     lodsb   ;Get this char, goto next char
   953 00002A09 5E                  <1>     pop rsi
   954                              <1> .doSwitchRev:
   955 00002A0A E8261B0000          <1>     call ucChar
   956 00002A0F 3C41                <1>     cmp al, "A"
   957 00002A11 7510                <1>     jne .cB
   958 00002A13 081D77DDFFFF        <1>     or byte [bCpFlg], bl    ;Set the ASCII bit
   959 00002A19 802570DDFFFFFD      <1>     and byte [bCpFlg], ~binSrc  ;ASCII flag clears this
   960                              <1> .cExit:
   961 00002A20 31DB                <1>     xor ebx, ebx    ;Clear ZF 
   962                              <1>     return
    13                              <2> %%_ret:
    14 00002A22 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   963                              <1> .cB:
   964 00002A23 3C42                <1>     cmp al, "B"
   965 00002A25 7511                <1>     jne .cV
   966 00002A27 F6D3                <1>     not bl  ;Reverse bits
   967 00002A29 201D61DDFFFF        <1>     and byte [bCpFlg], bl   ;Clear the ASCII bit.
   968 00002A2F 800D5ADDFFFF02      <1>     or byte [bCpFlg], binSrc    ;This was explicitly set
   969 00002A36 EBE8                <1>     jmp short .cExit
   970                              <1> .cV:
   971 00002A38 3C56                <1>     cmp al, "V"
   972                              <1>     retne   ;Exit w/o clearing ZF
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A3A 75(22)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   973 00002A3C F60538DDFFFFFF      <1>     test byte [verifyFlg], -1   ;If verify flag set, do nothing
   974 00002A43 75DB                <1>     jnz .cExit                  ;If not zero, flag already set!
   975                              <1>     ;Else, set it. We return it at the end!
   976 00002A45 B8012E0000          <1>     mov eax, 2E01h  ;Set Verify Flag
   977 00002A4A CD21                <1>     int 21h
   978 00002A4C EBD2                <1>     jmp short .cExit
   979                              <1> 
   980                              <1> ;COPY Bad Exits!!
   981                              <1> .badBinCdevErr:
   982 00002A4E 488D1552E2FFFF      <1>     lea rdx, binDevErr
   983 00002A55 EB10                <1>     jmp short .badExitCmn
   984                              <1> .rootDirFull:
   985 00002A57 488D1535DFFFFF      <1>     lea rdx, fulRootDir
   986 00002A5E EB07                <1>     jmp short .badExitCmn
   987                              <1> .badSameFile:
   988 00002A60 488D1542DFFFFF      <1>     lea rdx, noSelfCopy
   989                              <1> .badExitCmn:
   990 00002A67 E892F4FFFF          <1>     call badCmn     ;Print error message
   991 00002A6C E942FFFFFF          <1>     jmp .copyDone   ;Clean resources
   992                              <1> .badSrcFile:
   993 00002A71 E878F4FFFF          <1>     call badFnf  ;File not found!!
   994 00002A76 E938FFFFFF          <1>     jmp .copyDone
   995                              <1> .badExit:
   996 00002A7B E841F4FFFF          <1>     call badParamError
   997 00002A80 E92EFFFFFF          <1>     jmp .copyDone
   998                              <1> 
   999                              <1> .copyCleanup:
  1000                              <1> ;Clean all resources!! Reset verify and free copy buffer. 
  1001                              <1> ;Handles are never open in this process!
  1002 00002A85 B8002E0000          <1>     mov eax, 2E00h
  1003 00002A8A 8A05EBDCFFFF        <1>     mov al, byte [verifyFlg]
  1004 00002A90 CD21                <1>     int 21h
  1005 00002A92 4150                <1>     push r8
  1006 00002A94 4C8B05E7DCFFFF      <1>     mov r8, qword [cpBufPtr]
  1007 00002A9B 4D85C0              <1>     test r8, r8 ;Check zero, clear CF
  1008 00002A9E 7407                <1>     jz .skipFree
  1009 00002AA0 B800490000          <1>     mov eax, 4900h
  1010 00002AA5 CD21                <1>     int 21h
  1011                              <1> .skipFree:
  1012 00002AA7 4158                <1>     pop r8
  1013 00002AA9 0F82231D0000        <1>     jc freezePC ;If free fails, man....
  1014                              <1>     return
    13                              <2> %%_ret:
    14 00002AAF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1015                              <1> 
  1016                              <1> copyMain:
  1017                              <1> ;This is the main copying procedure! 
  1018                              <1> ;Start by checking the two files are not the same. If so, complain!
  1019                              <1> ;If returns CF=CY, error code in al. 
  1020                              <1> ;   If al = -1, same filename error!
  1021                              <1> ;   If al = -2, Root Dir full (couldn't create file)
  1022                              <1> ;   If al = -3, attempted binary read from a device
  1023                              <1> ;If returns CF=NC, file copied successfully.
  1024                              <1> ;Check the two files are not the same using truename in searchspec
  1025 00002AB0 488D35A5DBFFFF      <1>     lea rsi, srcSpec
  1026 00002AB7 488D3DD1D9FFFF      <1>     lea rdi, searchSpec
  1027 00002ABE B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1028 00002AC3 CD21                <1>     int 21h 
  1029 00002AC5 57                  <1>     push rdi    ;Save this searchSpec
  1030 00002AC6 488D3511DCFFFF      <1>     lea rsi, destSpec
  1031 00002ACD 488D3D3DDAFFFF      <1>     lea rdi, searchSpec + cmdBufferL ;Use the latter half to store this bit
  1032 00002AD4 B800600000          <1>     mov eax, 6000h
  1033 00002AD9 CD21                <1>     int 21h
  1034 00002ADB 5E                  <1>     pop rsi     ;Get this ptr back
  1035 00002ADC B81E120000          <1>     mov eax, 121Eh  ;Cmpr ASCII strings
  1036 00002AE1 CD2F                <1>     int 2Fh
  1037 00002AE3 750F                <1>     jnz .notSameFile
  1038 00002AE5 B0FF                <1>     mov al, -1  ;Same filename error!
  1039                              <1> .badExit:
  1040 00002AE7 50                  <1>     push rax
  1041 00002AE8 E8B0000000          <1>     call .exitCleanup
  1042 00002AED 58                  <1>     pop rax
  1043 00002AEE F9                  <1>     stc
  1044                              <1>     return
    13                              <2> %%_ret:
    14 00002AEF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1045                              <1> .badExitNoSpace:
  1046 00002AF0 B0FE                <1>     mov al, -2  ;Access denied from Create happens if Root Dir full!
  1047 00002AF2 EBF3                <1>     jmp short .badExit
  1048                              <1> .notSameFile:
  1049                              <1> ;Open source with read permission
  1050                              <1> ;Open destination with write permission
  1051 00002AF4 488D1561DBFFFF      <1>     lea rdx, srcSpec
  1052 00002AFB B8003D0000          <1>     mov eax, 3D00h  ;Read open
  1053 00002B00 CD21                <1>     int 21h
  1054 00002B02 72E3                <1>     jc .badExit
  1055 00002B04 66890571DCFFFF      <1>     mov word [sourceHdl], ax
  1056 00002B0B 0FB7D8              <1>     movzx ebx, ax   ;For bx
  1057                              <1> 
  1058 00002B0E B800440000          <1>     mov eax, 4400h  ;Get device info for file in bx in dx
  1059 00002B13 CD21                <1>     int 21h
  1060 00002B15 66891564DCFFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
  1061 00002B1C F6C280              <1>     test dl, 80h    ;Is this a chardev?
  1062 00002B1F 7412                <1>     jz .prepCopy
  1063                              <1> ;Check the binary flag was not set on this source filespec
  1064 00002B21 B0FD                <1>     mov al, -3  ;Prep the error code
  1065 00002B23 F60566DCFFFF02      <1>     test byte [bCpFlg], binSrc
  1066 00002B2A 75BB                <1>     jnz .badExit    ;Return with the error code in al
  1067 00002B2C 800D5DDCFFFF01      <1>     or byte [bCpFlg], ascSrc    ;Set the ascii read bit for later!
  1068                              <1> .prepCopy:
  1069 00002B33 31F6                <1>     xor esi, esi                ;Flag if ASCII copy done after write!
  1070 00002B35 488B1546DCFFFF      <1>     mov rdx, qword [cpBufPtr]   ;Get the buffer pointer
  1071                              <1> .copyLoop:
  1072                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1073                              <1> ; CONSIDER MODIFYING THIS ROUTINE SO THAT ASCII READS ONLY WRITE AFTER       !
  1074                              <1> ; FINDING A ^Z, OR FILLING THE BUFFER. CURRENTLY, WRITES HAPPEN ON EACH LINE.!
  1075                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1076 00002B3C 0FB70D47DCFFFF      <1>     movzx ecx, word [wCpBufSz]
  1077 00002B43 0FB71D32DCFFFF      <1>     movzx ebx, word [sourceHdl]
  1078 00002B4A B8003F0000          <1>     mov eax, 3F00h ;Read
  1079 00002B4F CD21                <1>     int 21h
  1080 00002B51 7294                <1>     jc .badExit
  1081 00002B53 89C1                <1>     mov ecx, eax    ;Save the binary # of bytes read
  1082 00002B55 F60534DCFFFF01      <1>     test byte [bCpFlg], ascSrc  ;Are we copying in ascii mode
  1083 00002B5C 7413                <1>     jz .notAscii
  1084                              <1> ;Now scan the buffer for a EOF. If we find, we stop the copy at that char
  1085 00002B5E 50                  <1>     push rax        ;Save the original char count
  1086 00002B5F 4889D7              <1>     mov rdi, rdx    ;rdx keeps the buffer ptr
  1087 00002B62 B01A                <1>     mov al, EOF
  1088 00002B64 F2AE                <1>     repne scasb     ;Loop thru now!
  1089 00002B66 89C8                <1>     mov eax, ecx    ;Move the offset into the buffer in eax
  1090 00002B68 59                  <1>     pop rcx         ;Get the original read count into ecx
  1091 00002B69 7506                <1>     jne .notAscii   ;If EOF not found, ecx has the full buffer size to write
  1092                              <1> ;Here if EOF found.
  1093 00002B6B FFC0                <1>     inc eax         ;Drop one for the EOF char itself
  1094 00002B6D 29C1                <1>     sub ecx, eax    ;Get difference for # of chars to write
  1095 00002B6F FFCE                <1>     dec esi         ;Set to -1 to indicate we are done with ASCII copy!
  1096                              <1> .notAscii:
  1097 00002B71 85C9                <1>     test ecx, ecx   ;If no bytes were read, exit!
  1098 00002B73 7428                <1>     jz .exitCleanup
  1099 00002B75 51                  <1>     push rcx    ;Save the number of bytes to write
  1100 00002B76 52                  <1>     push rdx    ;Save the buffer ptr
  1101 00002B77 E88D000000          <1>     call .getWriteHandle    ;Gets hdl in bx. Inc file ctr on create/open
  1102 00002B7C 5A                  <1>     pop rdx
  1103 00002B7D 59                  <1>     pop rcx
  1104 00002B7E 0F826CFFFFFF        <1>     jc .badExitNoSpace
  1105 00002B84 B800400000          <1>     mov eax, 4000h ;Write to handle in bx, to buffer in rdx
  1106 00002B89 CD21                <1>     int 21h
  1107 00002B8B 0F8256FFFFFF        <1>     jc .badExit
  1108 00002B91 39C1                <1>     cmp ecx, eax            ;ecx=bytes to write, eax=bytes written
  1109 00002B93 0F8557FFFFFF        <1>     jne .badExitNoSpace     ;Disk must be full!!
  1110 00002B99 85F6                <1>     test esi, esi           ;Always clear in Binary mode
  1111 00002B9B 749F                <1>     jz .copyLoop            ;Set possible in ASCII mode
  1112                              <1> .exitCleanup:
  1113                              <1> ;Add a terminating EOF if we have been asked to. Else, skip!
  1114 00002B9D F605ECDBFFFF04      <1>     test byte [bCpFlg], ascDes
  1115 00002BA4 7425                <1>     jz .ecNoEOF
  1116 00002BA6 0FBF1DD1DBFFFF      <1>     movsx ebx, word [destHdl]
  1117 00002BAD 81FBFFFFFFFF        <1>     cmp ebx, -1 ;If this hdl is closed, skip this!
  1118 00002BB3 7416                <1>     je .ecNoEOF
  1119 00002BB5 488B15C6DBFFFF      <1>     mov rdx, qword [cpBufPtr]
  1120 00002BBC C6021A              <1>     mov byte [rdx], EOF
  1121 00002BBF B901000000          <1>     mov ecx, 1
  1122 00002BC4 B800400000          <1>     mov eax, 4000h  ;Write and ignore any errors that come from this!
  1123 00002BC9 CD21                <1>     int 21h
  1124                              <1> .ecNoEOF:
  1125                              <1> ;Now close copy handles!
  1126 00002BCB 668B1DAADBFFFF      <1>     mov bx, word [sourceHdl]
  1127 00002BD2 6681FBFFFF          <1>     cmp bx, -1
  1128 00002BD7 7410                <1>     je .beSkipSource
  1129 00002BD9 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
  1130 00002BDE CD21                <1>     int 21h
  1131 00002BE0 66C70593DBFFFFFFFF  <1>     mov word [sourceHdl], -1    ;Reset the var
  1132                              <1> .beSkipSource:
  1133 00002BE9 668B1D8EDBFFFF      <1>     mov bx, word [destHdl]
  1134 00002BF0 6681FBFFFF          <1>     cmp bx, -1
  1135                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002BF5 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002BF7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1136 00002BF8 B8003E0000          <1>     mov eax, 3E00h  ;Close this one too!
  1137 00002BFD CD21                <1>     int 21h
  1138 00002BFF 66C70576DBFFFFFFFF  <1>     mov word [destHdl], -1  ;Reset the var
  1139                              <1>     return
    13                              <2> %%_ret:
    14 00002C08 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1140                              <1> 
  1141                              <1> .getWriteHandle:
  1142                              <1> ;Returns in bx the handle to the destination file. If the file has not 
  1143                              <1> ; yet been opened, creates/opens the destination file as appropriate.
  1144                              <1> ;Input: Nothing
  1145                              <1> ;Output: CF=NC: bx = Handle to the file
  1146                              <1> ;        CF=CY: File failed to open/create. 
  1147 00002C09 0FB71D6EDBFFFF      <1>     movzx ebx, word [destHdl]
  1148 00002C10 6681FBFFFF          <1>     cmp bx, -1
  1149 00002C15 7402                <1>     je .gwHProceed
  1150 00002C17 F8                  <1>     clc     ;Clear the CF
  1151                              <1>     return
    13                              <2> %%_ret:
    14 00002C18 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1152                              <1> .gwHProceed:
  1153                              <1> ;Here if the destination has not been opened yet!
  1154 00002C19 488D15BEDAFFFF      <1>     lea rdx, destSpec   ;Prepare rdx to the destination
  1155                              <1> ;Now we create/reopen the file here!
  1156 00002C20 F60569DBFFFF10      <1>     test byte [bCpFlg], oneDest ;If single destination, concatenate
  1157 00002C27 743E                <1>     jz .createFile
  1158                              <1> ;Now we first try to open this file. If this is file 0, we create.
  1159                              <1> ;If this is more than file 0, we open
  1160 00002C29 813D59DBFFFF000000- <1>     cmp dword [dCpCnt], 0
  1160 00002C32 00                  <1>
  1161 00002C33 7432                <1>     je .createFile
  1162                              <1>     ;Now we open the file instead and append to the end
  1163 00002C35 B8023D0000          <1>     mov eax, 3D02h  ;Open the file in exclusive read/write mode
  1164 00002C3A CD21                <1>     int 21h
  1165                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002C3C 72(18)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1166 00002C3E FF0548DBFFFF        <1>     inc dword [dCpCnt]  ;We've opened the file for writing!
  1167 00002C44 66890533DBFFFF      <1>     mov word [destHdl], ax
  1168 00002C4B 0FB7D8              <1>     movzx ebx, ax
  1169 00002C4E 31C9                <1>     xor ecx, ecx
  1170 00002C50 31D2                <1>     xor edx, edx
  1171 00002C52 F60537DBFFFF04      <1>     test byte [bCpFlg], ascDes  ;Did we write a terminating ^Z before?
  1172 00002C59 7404                <1>     jz .gwHNoAscii
  1173 00002C5B FFCA                <1>     dec edx                     ;Overwrite the ^Z
  1174 00002C5D FFC9                <1>     dec ecx                     ;PASS A SIGNED -1 !!!!
  1175                              <1> .gwHNoAscii:
  1176 00002C5F B802420000          <1>     mov eax, 4202h  ;LSEEK from the end
  1177 00002C64 CD21                <1>     int 21h
  1178                              <1>     return
    13                              <2> %%_ret:
    14 00002C66 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1179                              <1> .createFile:
  1180 00002C67 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
  1181 00002C6C 31C9                <1>     xor ecx, ecx    ;No file attributes
  1182 00002C6E CD21                <1>     int 21h
  1183                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002C70 72(66)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1184 00002C72 FF0514DBFFFF        <1>     inc dword [dCpCnt]  ;File created for writing!
  1185 00002C78 668905FFDAFFFF      <1>     mov word [destHdl], ax
  1186 00002C7F 0FB7D8              <1>     movzx ebx, ax
  1187                              <1>     return
    13                              <2> %%_ret:
    14 00002C82 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1188                              <1> 
  1189                              <1> erase:
  1190 00002C83 F60519D4FFFFFF      <1>     test byte [arg1Flg], -1
  1191 00002C8A 0F8443F2FFFF        <1>     jz badArgError
  1192 00002C90 E8581B0000          <1>     call setDTA     ;Start by resetting the DTA
  1193 00002C95 E82A1A0000          <1>     call buildCommandPath   ;Get the relative path to the file
  1194                              <1> .dirLp:
  1195 00002C9A 488D3DEED7FFFF      <1>     lea rdi, searchSpec
  1196 00002CA1 E861190000          <1>     call findLastPathComponant
  1197 00002CA6 4889FE              <1>     mov rsi, rdi    ;Save this as the source
  1198 00002CA9 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1199 00002CAD B03F                <1>     mov al, "?"
  1200                              <1>     ;Store question marks in the name field
  1201 00002CAF 57                  <1>     push rdi
  1202 00002CB0 48FFC7              <1>     inc rdi ;Goto the first char
  1203 00002CB3 B90B000000          <1>     mov ecx, 11
  1204 00002CB8 F3AA                <1>     rep stosb
  1205 00002CBA 5F                  <1>     pop rdi
  1206 00002CBB 4889F2              <1>     mov rdx, rsi    ;Save the ptr
  1207 00002CBE B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
  1208 00002CC3 CD21                <1>     int 21h
  1209 00002CC5 3C01                <1>     cmp al, 1
  1210 00002CC7 0F85A1000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
  1211                              <1>     ;Else, we now copy back the search pattern over the last componant!
  1212                              <1>     ;No dirs to handle in here
  1213 00002CCD 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
  1214 00002CD1 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
  1215 00002CD4 E852190000          <1>     call FCBToAsciiz    ;Null terminates for free
  1216                              <1>     ;Count the number of ?'s, if 11, we print the message
  1217 00002CD9 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
  1218 00002CDD 31C9                <1>     xor ecx, ecx
  1219                              <1> .wcScan:
  1220 00002CDF AC                  <1>     lodsb
  1221 00002CE0 3C3F                <1>     cmp al, "?"
  1222 00002CE2 7534                <1>     jne .endCount
  1223 00002CE4 FFC1                <1>     inc ecx
  1224 00002CE6 81F90B000000        <1>     cmp ecx, 11
  1225 00002CEC 75F1                <1>     jne .wcScan
  1226                              <1> .ynmsg:
  1227 00002CEE 488D1544DEFFFF      <1>     lea rdx, ynMes
  1228 00002CF5 E81D160000          <1>     call printString
  1229 00002CFA B401                <1>     mov ah, 01h ;STDIN without Console Echo
  1230 00002CFC CD21                <1>     int 21h ;Get char in al
  1231 00002CFE E832180000          <1>     call ucChar ;Uppercase the char
  1232 00002D03 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
  1233 00002D05 740C                <1>     je .endCount1
  1234 00002D07 3C4E                <1>     cmp al, "N"
  1235                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002D09 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002D0B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1236 00002D0C E8FF150000          <1>     call printCRLF      ;Else, tell me what you want!!!
  1237 00002D11 EBDB                <1>     jmp short .ynmsg    
  1238                              <1> .endCount1:
  1239 00002D13 E8F8150000          <1>     call printCRLF
  1240                              <1> .endCount:
  1241                              <1>     ;Now we copy our search template pathstring to delPath
  1242 00002D18 488D3D3DD9FFFF      <1>     lea rdi, delPath
  1243 00002D1F 488D3569D7FFFF      <1>     lea rsi, searchSpec ;Source the chars from here
  1244 00002D26 E8F6170000          <1>     call strcpy2         ;Copy the string over to delPath
  1245                              <1> .findFile:
  1246                              <1>     ;Now we find first/find next our way through the files
  1247 00002D2B 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
  1248 00002D2E 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
  1249 00002D30 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1250 00002D35 CD21                <1>     int 21h
  1251 00002D37 0F82B1F1FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1252                              <1>     ;Now the file was found, we copy the name over, delete and keep going
  1253 00002D3D E8C5180000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
  1254 00002D42 488D35EAD3FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1255                              <1> .delNextFile:
  1256                              <1> ;rsi and rdi dont move here
  1257 00002D49 E8D3170000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
  1258 00002D4E 488D1507D9FFFF      <1>     lea rdx, delPath
  1259 00002D55 B800410000          <1>     mov eax, 4100h  ;Delete File 
  1260 00002D5A CD21                <1>     int 21h         ;If this fails to delete it, fail silently
  1261 00002D5C 488D152CD7FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
  1262 00002D63 B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
  1263 00002D68 CD21                <1>     int 21h
  1264 00002D6A 73DD                <1>     jnc .delNextFile    
  1265 00002D6C F8                  <1>     clc ;Clear carry to indicate success
  1266                              <1>     return
    13                              <2> %%_ret:
    14 00002D6D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1267                              <1> .noWildcard:
  1268                              <1>     ;Here we just check that the file was not a directory. If it was, we add
  1269                              <1>     ; a \*.*<NUL> over the null terminator
  1270 00002D6E 488D151AD7FFFF      <1>     lea rdx, searchSpec
  1271 00002D75 B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
  1272 00002D7A B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1273 00002D7F CD21                <1>     int 21h
  1274 00002D81 0F8267F1FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1275 00002D87 F6059CD3FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
  1276 00002D8E 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
  1277                              <1>     ;Else, we are dealing with a dir
  1278 00002D90 4889D7              <1>     mov rdi, rdx
  1279 00002D93 31C9                <1>     xor ecx, ecx
  1280 00002D95 FFC9                <1>     dec ecx
  1281 00002D97 F2AE                <1>     repne scasb ;Go to the end of the line!
  1282 00002D99 48FFCF              <1>     dec rdi
  1283 00002D9C 0FB60586D2FFFF      <1>     movzx eax, byte [pathSep]
  1284 00002DA3 AA                  <1>     stosb
  1285 00002DA4 B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
  1286 00002DA9 AB                  <1>     stosd
  1287 00002DAA E9EBFEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
  1288                              <1> .delMain:   ;Call with rdx -> buffer!
  1289 00002DAF B800410000          <1>     mov eax, 4100h  ;Delete File 
  1290 00002DB4 CD21                <1>     int 21h
  1291                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002DB6 73(6D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1292 00002DB8 3C05                <1>     cmp al, errAccDen
  1293 00002DBA 0F84F8F0FFFF        <1>     je badAccError ;If the file is RO, fail!
  1294 00002DC0 E917F1FFFF          <1>     jmp badFileError
  1295                              <1>     return
    13                              <2> %%_ret:
    14 00002DC5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1296                              <1> 
  1297                              <1> date:
  1298 00002DC6 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1299 00002DCD E87E170000          <1>     call skipDelimiters
  1300 00002DD2 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1301 00002DD5 7562                <1>     jne .goDate  ;Else rsi is pointing to something possibly a date. Try it!
  1302                              <1>     ;Else, we do interactive mode!
  1303 00002DD7 488D15DEDCFFFF      <1>     lea rdx, curDate
  1304 00002DDE B409                <1>     mov ah, 09h
  1305 00002DE0 CD21                <1>     int 21h
  1306 00002DE2 E85F160000          <1>     call printFmtDate
  1307                              <1> .noCur:
  1308 00002DE7 488D15DFDCFFFF      <1>     lea rdx, newDate
  1309 00002DEE B409                <1>     mov ah, 09h
  1310 00002DF0 CD21                <1>     int 21h
  1311 00002DF2 488D15F3DCFFFF      <1>     lea rdx, ukDate
  1312 00002DF9 488D05DFDCFFFF      <1>     lea rax, usDate
  1313 00002E00 488D1DF2DCFFFF      <1>     lea rbx, jpDate
  1314 00002E07 803D1DD2FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1315 00002E0E 480F47D3            <1>     cmova rdx, rbx
  1316 00002E12 480F42D0            <1>     cmovb rdx, rax
  1317 00002E16 B409                <1>     mov ah, 09h
  1318 00002E18 CD21                <1>     int 21h
  1319                              <1> 
  1320 00002E1A 488D15C1D3FFFF      <1>     lea rdx, cpyBuffer
  1321 00002E21 C60280              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
  1322 00002E24 B40A                <1>     mov ah, 0Ah
  1323 00002E26 CD21                <1>     int 21h
  1324 00002E28 52                  <1>     push rdx
  1325 00002E29 E8E2140000          <1>     call printCRLF
  1326 00002E2E 5A                  <1>     pop rdx
  1327 00002E2F 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1328                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002E33 74(C5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1329                              <1>     ;No spaces anywhere, separator chars allowed are / . - only
  1330 00002E35 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1331                              <1> .goDate:
  1332 00002E39 31C0                <1>     xor eax, eax    
  1333 00002E3B 803DE9D1FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1334 00002E42 727B                <1>     jb .us
  1335 00002E44 0F87B7000000        <1>     ja .jpn
  1336                              <1>     ;Here for UK style dates
  1337 00002E4A E846190000          <1>     call getByte
  1338 00002E4F 725D                <1>     jc .badDate
  1339 00002E51 880503D8FFFF        <1>     mov byte [td3], al  ;Store the day
  1340 00002E57 E80C010000          <1>     call .validSep
  1341 00002E5C 7550                <1>     jne .badDate
  1342 00002E5E E832190000          <1>     call getByte
  1343 00002E63 7249                <1>     jc .badDate
  1344 00002E65 8805F0D7FFFF        <1>     mov byte [td4], al  ;Store month
  1345 00002E6B E8F8000000          <1>     call .validSep
  1346 00002E70 753C                <1>     jne .badDate
  1347 00002E72 E82A190000          <1>     call getNum
  1348 00002E77 E8CF000000          <1>     call .doYear    ;Adjusts the year if necessary
  1349 00002E7C 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1350 00002E81 732B                <1>     jae .badDate
  1351 00002E83 668905CED7FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1352                              <1> .writeDate:
  1353 00002E8A E8C1160000          <1>     call skipDelimiters
  1354 00002E8F 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1355 00002E92 751A                <1>     jne .badDate
  1356 00002E94 0FB70DBDD7FFFF      <1>     movzx ecx, word [td1]   ;Get the year
  1357 00002E9B 668B15B8D7FFFF      <1>     mov dx, word [td3]      ;Read time and date together!
  1358 00002EA2 B8002B0000          <1>     mov eax, 2B00h
  1359 00002EA7 CD21                <1>     int 21h
  1360 00002EA9 84C0                <1>     test al, al
  1361                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002EAB 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002EAD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1362                              <1> .badDate:
  1363 00002EAE 488D15F8DBFFFF      <1>     lea rdx, badDate
  1364 00002EB5 E85D140000          <1>     call printString
  1365 00002EBA E928FFFFFF          <1>     jmp date.noCur
  1366                              <1> .us:
  1367 00002EBF E8D1180000          <1>     call getByte
  1368 00002EC4 72E8                <1>     jc .badDate
  1369 00002EC6 88058FD7FFFF        <1>     mov byte [td4], al  ;Store the month
  1370 00002ECC E897000000          <1>     call .validSep
  1371 00002ED1 75DB                <1>     jne .badDate
  1372 00002ED3 E8BD180000          <1>     call getByte
  1373 00002ED8 72D4                <1>     jc .badDate
  1374 00002EDA 88057AD7FFFF        <1>     mov byte [td3], al  ;Store day
  1375 00002EE0 E883000000          <1>     call .validSep
  1376 00002EE5 75C7                <1>     jne .badDate
  1377 00002EE7 E8B5180000          <1>     call getNum
  1378 00002EEC E85A000000          <1>     call .doYear    ;Adjusts the year if necessary
  1379 00002EF1 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1380 00002EF6 73B6                <1>     jae .badDate
  1381 00002EF8 66890559D7FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1382                              <1> .writeHop:
  1383 00002EFF EB89                <1>     jmp short .writeDate
  1384                              <1> .jpn:
  1385 00002F01 E89B180000          <1>     call getNum
  1386 00002F06 E840000000          <1>     call .doYear    ;Adjusts the year if necessary
  1387 00002F0B 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1388 00002F10 739C                <1>     jae .badDate
  1389 00002F12 6689053FD7FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1390 00002F19 E84A000000          <1>     call .validSep
  1391 00002F1E 758E                <1>     jne .badDate
  1392 00002F20 E870180000          <1>     call getByte
  1393 00002F25 7287                <1>     jc .badDate
  1394 00002F27 88052DD7FFFF        <1>     mov byte [td3], al  ;Store the day
  1395 00002F2D E836000000          <1>     call .validSep
  1396 00002F32 0F8576FFFFFF        <1>     jne .badDate
  1397 00002F38 E858180000          <1>     call getByte
  1398 00002F3D 0F826BFFFFFF        <1>     jc .badDate
  1399 00002F43 880512D7FFFF        <1>     mov byte [td4], al  ;Store month
  1400 00002F49 EBB4                <1>     jmp short .writeHop
  1401                              <1> .doYear:
  1402 00002F4B 3D77000000          <1>     cmp eax, 119    ;If this is larger than 119, return assuming valid
  1403                              <1>     reta
    73                              <2> cret a
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002F50 7601                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002F52 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1404                              <1> ;If the user specifies 80-99 it means 1980-1999
  1405                              <1> ;If the user specifies 00-79 it means 2000-2079
  1406 00002F53 BBD0070000          <1>     mov ebx, 2000
  1407 00002F58 B96C070000          <1>     mov ecx, 1900
  1408 00002F5D 3D50000000          <1>     cmp eax, 80     
  1409 00002F62 0F42CB              <1>     cmovb ecx, ebx
  1410 00002F65 01C8                <1>     add eax, ecx
  1411                              <1>     return
    13                              <2> %%_ret:
    14 00002F67 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1412                              <1> .validSep:
  1413 00002F68 AC                  <1>     lodsb           ;Get the char and return
  1414 00002F69 3C2E                <1>     cmp al, "."
  1415                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002F6B 74(67)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1416 00002F6D 3C2F                <1>     cmp al, "/"
  1417                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002F6F 74(67)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1418 00002F71 3C2D                <1>     cmp al, "-"
  1419                              <1>     return
    13                              <2> %%_ret:
    14 00002F73 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1420                              <1> 
  1421                              <1> time:
  1422 00002F74 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1423 00002F7B E8D0150000          <1>     call skipDelimiters
  1424 00002F80 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1425 00002F83 7540                <1>     jne .goTime  ;Else rsi is pointing to something possibly a time. Try it!
  1426 00002F85 488D1589DBFFFF      <1>     lea rdx, curTime
  1427 00002F8C B409                <1>     mov ah, 09h
  1428 00002F8E CD21                <1>     int 21h
  1429 00002F90 E848140000          <1>     call printFmtTime
  1430                              <1> .noCur:
  1431 00002F95 488D158ADBFFFF      <1>     lea rdx, newTime
  1432 00002F9C B409                <1>     mov ah, 09h
  1433 00002F9E CD21                <1>     int 21h
  1434                              <1> 
  1435 00002FA0 488D15B9D1FFFF      <1>     lea rdx, inBuffer
  1436 00002FA7 C60280              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
  1437 00002FAA B40A                <1>     mov ah, 0Ah
  1438 00002FAC CD21                <1>     int 21h
  1439 00002FAE 52                  <1>     push rdx
  1440 00002FAF 488D15EAD8FFFF      <1>     lea rdx, crlf
  1441 00002FB6 B409                <1>     mov ah, 09h
  1442 00002FB8 CD21                <1>     int 21h
  1443 00002FBA 5A                  <1>     pop rdx
  1444 00002FBB 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1445                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002FBF 74(73)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1446 00002FC1 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1447                              <1> .goTime:
  1448 00002FC5 C70589D6FFFF000000- <1>     mov dword [td1], 0          ;Set all fields to 0
  1448 00002FCE 00                  <1>
  1449 00002FCF 31C0                <1>     xor eax, eax   
  1450 00002FD1 E8BF170000          <1>     call getByte
  1451 00002FD6 0F8294000000        <1>     jc .badTime         ;Get the number in eax
  1452 00002FDC 880577D6FFFF        <1>     mov byte [td2], al  ;Save hours
  1453 00002FE2 E89A000000          <1>     call .validsep
  1454 00002FE7 0F8583000000        <1>     jne .badTime
  1455 00002FED E8A3170000          <1>     call getByte
  1456 00002FF2 727C                <1>     jc .badTime
  1457 00002FF4 88055ED6FFFF        <1>     mov byte [td1], al  ;Save minutes
  1458 00002FFA E882000000          <1>     call .validsep
  1459 00002FFF 740F                <1>     je .goSec
  1460 00003001 48FFCE              <1>     dec rsi ;Go back a char
  1461 00003004 E847150000          <1>     call skipDelimiters ;Skip any delimiters
  1462 00003009 803E0D              <1>     cmp byte [rsi], CR
  1463 0000300C 743E                <1>     je .setTime
  1464 0000300E EB60                <1>     jmp short .badTime
  1465                              <1> .goSec:
  1466 00003010 E878000000          <1>     call .checkNum
  1467 00003015 7259                <1>     jc .badTime
  1468 00003017 E879170000          <1>     call getByte
  1469 0000301C 7252                <1>     jc .badTime
  1470 0000301E 880537D6FFFF        <1>     mov byte [td4], al  ;Save seconds
  1471 00003024 AC                  <1>     lodsb       ;Move rsi forwards
  1472 00003025 3C2E                <1>     cmp al, "." ;Now we dont allow for colon now, only dot!
  1473 00003027 740F                <1>     je .goMsec
  1474 00003029 48FFCE              <1>     dec rsi ;Go back a char
  1475 0000302C E81F150000          <1>     call skipDelimiters ;Skip any delimiters
  1476 00003031 803E0D              <1>     cmp byte [rsi], CR
  1477 00003034 7416                <1>     je .setTime
  1478 00003036 EB38                <1>     jmp short .badTime
  1479                              <1> .goMsec:
  1480 00003038 E850000000          <1>     call .checkNum
  1481 0000303D 7231                <1>     jc .badTime
  1482 0000303F E851170000          <1>     call getByte
  1483 00003044 722A                <1>     jc .badTime
  1484 00003046 88050ED6FFFF        <1>     mov byte [td3], al  ;Save miliseconds
  1485                              <1> .setTime:
  1486 0000304C E8FF140000          <1>     call skipDelimiters
  1487 00003051 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1488 00003054 751A                <1>     jne .badTime
  1489 00003056 0FB70DFBD5FFFF      <1>     movzx ecx, word [td1]   ;Get hour/minutes
  1490 0000305D 0FB715F6D5FFFF      <1>     movzx edx, word [td3]   ;Get seconds/miliseconds
  1491 00003064 B8002D0000          <1>     mov eax, 2D00h      ;Set time
  1492 00003069 CD21                <1>     int 21h
  1493 0000306B A8FF                <1>     test al, -1
  1494                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000306D 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000306F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1495                              <1> .badTime:
  1496 00003070 488D158FDAFFFF      <1>     lea rdx, badTime
  1497 00003077 E89B120000          <1>     call printString
  1498 0000307C E914FFFFFF          <1>     jmp time.noCur
  1499                              <1> .validsep:
  1500 00003081 AC                  <1>     lodsb
  1501 00003082 3A05B0CFFFFF        <1>     cmp al, byte [ctryData + countryStruc.timeSep]  ;Usually a colon
  1502                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003088 74(6F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1503 0000308A 3C2E                <1>     cmp al, "."
  1504                              <1>     return
    13                              <2> %%_ret:
    14 0000308C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1505                              <1> .checkNum:
  1506 0000308D AC                  <1>     lodsb   ;Now ensure the first char past the delim is a number
  1507 0000308E 48FFCE              <1>     dec rsi
  1508 00003091 3C30                <1>     cmp al, "0"
  1509 00003093 7206                <1>     jb .cnbad
  1510 00003095 3C39                <1>     cmp al, "9"
  1511 00003097 7702                <1>     ja .cnbad
  1512 00003099 F8                  <1>     clc
  1513                              <1>     return
    13                              <2> %%_ret:
    14 0000309A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1514                              <1> .cnbad:
  1515 0000309B F9                  <1>     stc
  1516                              <1>     return
    13                              <2> %%_ret:
    14 0000309C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1517                              <1> ctty:
  1518 0000309D F605FFCFFFFFFF      <1>     test byte [arg1Flg], -1
  1519 000030A4 0F8429EEFFFF        <1>     jz badArgError
  1520 000030AA F605F5CFFFFFFF      <1>     test byte [arg2Flg], -1
  1521 000030B1 0F851CEEFFFF        <1>     jnz badArgError
  1522 000030B7 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1523 000030BE 0FB605DFCFFFFF      <1>     movzx eax, byte [arg1Off]
  1524 000030C5 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
  1525 000030C8 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1526 000030CC 750F                <1>     jne .noDrive
  1527 000030CE 0FB605D0CFFFFF      <1>     movzx eax, byte [arg1FCBret]
  1528 000030D5 3CFF                <1>     cmp al, -1
  1529 000030D7 0F84EDEDFFFF        <1>     je badDriveError
  1530                              <1> .noDrive:
  1531                              <1>     ;Now we open the provided file
  1532 000030DD E8FA150000          <1>     call copyArgumentToSearchSpec
  1533 000030E2 488D15A6D3FFFF      <1>     lea rdx, searchSpec
  1534                              <1> .loadSwap:
  1535 000030E9 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
  1536 000030EE CD21                <1>     int 21h
  1537 000030F0 0F82E6EDFFFF        <1>     jc badFileError
  1538 000030F6 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
  1539 000030F9 B800440000          <1>     mov eax, 4400h  ;Get device word
  1540 000030FE CD21                <1>     int 21h
  1541 00003100 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
  1542 00003103 742F                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
  1543                              <1>     ;Now we set this handle to be STDIO
  1544 00003105 80CA03              <1>     or dl, 3    ;Set STDIO bits
  1545 00003108 30F6                <1>     xor dh, dh
  1546 0000310A B801440000          <1>     mov eax, 4401h  ;Now we set the device word
  1547 0000310F CD21                <1>     int 21h
  1548                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
  1549 00003111 31C9                <1>     xor ecx, ecx    ;STDIN
  1550 00003113 B800460000          <1>     mov eax, 4600h
  1551 00003118 CD21                <1>     int 21h
  1552 0000311A FFC1                <1>     inc ecx         ;STDOUT
  1553 0000311C B800460000          <1>     mov eax, 4600h
  1554 00003121 CD21                <1>     int 21h
  1555 00003123 FFC1                <1>     inc ecx         ;STDERR
  1556 00003125 B800460000          <1>     mov eax, 4600h
  1557 0000312A CD21                <1>     int 21h
  1558 0000312C B8003E0000          <1>     mov eax, 3E00h ;Now we close the original handle
  1559 00003131 CD21                <1>     int 21h
  1560                              <1>     return
    13                              <2> %%_ret:
    14 00003133 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1561                              <1> .badCharDev:
  1562 00003134 488D15FCDAFFFF      <1>     lea rdx, badDev
  1563 0000313B B409                <1>     mov ah, 09h
  1564 0000313D CD21                <1>     int 21h
  1565 0000313F B43E                <1>     mov ah, 3Eh ;Close opened handle
  1566 00003141 CD21                <1>     int 21h
  1567                              <1>     return
    13                              <2> %%_ret:
    14 00003143 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1568                              <1> 
  1569                              <1> cls:  
  1570 00003144 B800440000          <1>     mov eax, 4400h  ;Get device info
  1571 00003149 BB01000000          <1>     mov ebx, 1      ;for handle 1
  1572 0000314E CD21                <1>     int 21h         ;in dx
  1573 00003150 F7C280000000        <1>     test edx, devCharDev
  1574 00003156 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
  1575 00003158 F7C210000000        <1>     test edx, charDevFastOut
  1576 0000315E 743E                <1>     jz .doAnsi
  1577                              <1>     ;Test if Int 29h uses Int 30h
  1578                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
  1579                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
  1580 00003160 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
  1581 00003165 CD21                <1>     int 21h
  1582                              <1> .biosCheck:
  1583 00003167 66813BCD30          <1>     cmp word [rbx], 30CDh
  1584 0000316C 740C                <1>     je .biosConfirmed
  1585 0000316E 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
  1586 00003173 7429                <1>     je .doAnsi
  1587 00003175 48FFC3              <1>     inc rbx
  1588 00003178 EBED                <1>     jmp short .biosCheck
  1589                              <1> .biosConfirmed:
  1590                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
  1591 0000317A B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
  1592 0000317C 31DB                <1>     xor ebx, ebx
  1593 0000317E CD30                <1>     int 30h
  1594 00003180 B40F                <1>     mov ah, 0Fh ;Get screen mode
  1595 00003182 CD30                <1>     int 30h
  1596 00003184 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
  1597 00003187 FECA                <1>     dec dl
  1598 00003189 B619                <1>     mov dh, 25  ;Number of rows is standard
  1599 0000318B 31C0                <1>     xor eax, eax
  1600 0000318D 89C1                <1>     mov ecx, eax
  1601 0000318F B707                <1>     mov bh, 7   ;Screen attributes
  1602 00003191 B406                <1>     mov ah, 6   ;Scroll
  1603 00003193 CD30                <1>     int 30h
  1604 00003195 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
  1605 00003197 B700                <1>     mov bh, 0   ;Page 0
  1606 00003199 B402                <1>     mov ah, 2
  1607 0000319B CD30                <1>     int 30h
  1608                              <1>     return
    13                              <2> %%_ret:
    14 0000319D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1609                              <1> .doAnsi:
  1610                              <1> ;4 chars in the ansi routine
  1611                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
  1612                              <1> ; understand ANSI codes
  1613 0000319E 488D3519DDFFFF      <1>     lea rsi, ansiCls
  1614 000031A5 B904000000          <1>     mov ecx, 4
  1615 000031AA B406                <1>     mov ah, 06h ;Raw char output
  1616                              <1> .ansiLp:
  1617 000031AC AC                  <1>     lodsb   ;Get the char in 
  1618 000031AD 88C2                <1>     mov dl, al
  1619 000031AF CD21                <1>     int 21h
  1620 000031B1 FFC9                <1>     dec ecx
  1621 000031B3 75F7                <1>     jnz .ansiLp
  1622                              <1>     return
    13                              <2> %%_ret:
    14 000031B5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1623                              <1> 
  1624                              <1> break:
  1625 000031B6 F605E6CEFFFFFF      <1>     test byte [arg1Flg], -1
  1626 000031BD 752D                <1>     jnz .argumentProvided
  1627                              <1>     ;Here we just get the status of break
  1628 000031BF B800330000          <1>     mov eax, 3300h  ;Get break status in dl
  1629 000031C4 CD21                <1>     int 21h
  1630 000031C6 88D3                <1>     mov bl, dl
  1631 000031C8 488D150ADBFFFF      <1>     lea rdx, breakIs
  1632 000031CF B409                <1>     mov ah, 09h
  1633 000031D1 CD21                <1>     int 21h
  1634 000031D3 488D15FADAFFFF      <1>     lea rdx, onMes
  1635 000031DA 488D0DEDDAFFFF      <1>     lea rcx, offMes
  1636 000031E1 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1637 000031E3 480F44D1            <1>     cmovz rdx, rcx
  1638 000031E7 B409                <1>     mov ah, 09h
  1639 000031E9 CD21                <1>     int 21h
  1640                              <1>     return
    13                              <2> %%_ret:
    14 000031EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1641                              <1> .argumentProvided:
  1642 000031EC 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1643 000031F0 AD                  <1>     lodsd   ;Read the word
  1644 000031F1 89C3                <1>     mov ebx, eax
  1645 000031F3 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1646 000031F8 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1647 000031FB 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1648 00003200 7416                <1>     je .maybeOn
  1649 00003202 663D4F46            <1>     cmp ax, "OF"
  1650 00003206 7523                <1>     jne .badOnOff
  1651 00003208 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1652 0000320D 6681FB4620          <1>     cmp bx, "F "
  1653 00003212 7517                <1>     jne .badOnOff
  1654                              <1>     ;Set off
  1655 00003214 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1656 00003216 EB0B                <1>     jmp short .setBreak
  1657                              <1> .maybeOn:
  1658 00003218 663D4F4E            <1>     cmp ax, "ON"
  1659 0000321C 750D                <1>     jne .badOnOff
  1660                              <1>     ;Set on
  1661 0000321E BA01000000          <1>     mov edx, 1
  1662                              <1> .setBreak:
  1663 00003223 B801330000          <1>     mov eax, 3301h  ;Set break
  1664 00003228 CD21                <1>     int 21h
  1665                              <1>     return
    13                              <2> %%_ret:
    14 0000322A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1666                              <1> .badOnOff:
  1667 0000322B 488D159CDCFFFF      <1>     lea rdx, badOnOff
  1668 00003232 B409                <1>     mov ah, 09h
  1669 00003234 CD21                <1>     int 21h
  1670                              <1>     return
    13                              <2> %%_ret:
    14 00003236 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1671                              <1> 
  1672                              <1> verify:
  1673 00003237 F60565CEFFFFFF      <1>     test byte [arg1Flg], -1
  1674 0000323E 752D                <1>     jnz .argumentProvided
  1675                              <1>     ;Here we just get the status of break
  1676 00003240 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1677 00003245 CD21                <1>     int 21h
  1678 00003247 88C3                <1>     mov bl, al
  1679 00003249 488D1593DAFFFF      <1>     lea rdx, verifyIs
  1680 00003250 B409                <1>     mov ah, 09h
  1681 00003252 CD21                <1>     int 21h
  1682 00003254 488D1579DAFFFF      <1>     lea rdx, onMes
  1683 0000325B 488D0D6CDAFFFF      <1>     lea rcx, offMes
  1684 00003262 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1685 00003264 480F44D1            <1>     cmovz rdx, rcx
  1686 00003268 B409                <1>     mov ah, 09h
  1687 0000326A CD21                <1>     int 21h
  1688                              <1>     return
    13                              <2> %%_ret:
    14 0000326C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1689                              <1> .argumentProvided:
  1690 0000326D 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1691 00003271 AD                  <1>     lodsd   ;Read the word
  1692 00003272 89C3                <1>     mov ebx, eax
  1693 00003274 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1694 00003279 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1695 0000327C 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1696 00003281 7416                <1>     je .maybeOn
  1697 00003283 663D4F46            <1>     cmp ax, "OF"
  1698 00003287 751F                <1>     jne .badOnOff
  1699 00003289 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1700 0000328E 6681FB4620          <1>     cmp bx, "F "
  1701 00003293 7513                <1>     jne .badOnOff
  1702                              <1>     ;Set off
  1703 00003295 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1704 00003297 EB0A                <1>     jmp short .setVerify
  1705                              <1> .maybeOn:
  1706 00003299 663D4F4E            <1>     cmp ax, "ON"
  1707 0000329D 7509                <1>     jne .badOnOff
  1708                              <1>     ;Set on
  1709 0000329F 31C0                <1>     xor eax, eax
  1710 000032A1 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1711                              <1> .setVerify:
  1712 000032A3 B42E                <1>     mov ah, 2Eh  ;Set Verify
  1713 000032A5 CD21                <1>     int 21h
  1714                              <1>     return
    13                              <2> %%_ret:
    14 000032A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1715                              <1> .badOnOff:
  1716 000032A8 488D151FDCFFFF      <1>     lea rdx, badOnOff
  1717 000032AF B409                <1>     mov ah, 09h
  1718 000032B1 CD21                <1>     int 21h
  1719                              <1>     return
    13                              <2> %%_ret:
    14 000032B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1720                              <1> 
  1721                              <1> rename:
  1722 000032B4 F605E8CDFFFFFF      <1>     test byte [arg1Flg], -1
  1723 000032BB 0F8412ECFFFF        <1>     jz badArgError
  1724 000032C1 F605DECDFFFFFF      <1>     test byte [arg2Flg], -1
  1725 000032C8 0F8405ECFFFF        <1>     jz badArgError    
  1726                              <1>     ;Initialise the variables!
  1727 000032CE 488D3587D3FFFF      <1>     lea rsi, srcSpec
  1728 000032D5 48893584D4FFFF      <1>     mov qword [srcPtr], rsi
  1729 000032DC 488D35FBD3FFFF      <1>     lea rsi, destSpec
  1730 000032E3 4889357ED4FFFF      <1>     mov qword [destPtr], rsi
  1731                              <1>     ;Check the second path is just a filename!
  1732 000032EA 0FB605B6CDFFFF      <1>     movzx eax, byte [arg2Off]
  1733 000032F1 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1734 000032F8 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1735 000032FB 488D3D8DD1FFFF      <1>     lea rdi, searchSpec
  1736 00003302 57                  <1>     push rdi
  1737 00003303 E879130000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1738 00003308 5F                  <1>     pop rdi
  1739 00003309 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1740 0000330D 0F84C0EBFFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1741                              <1> ;Check if a drive specifier has been given
  1742 00003313 0FB6058ACDFFFF      <1>     movzx eax, byte [arg1Off]
  1743 0000331A 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1744 00003321 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1745 00003324 66AD                <1>     lodsw   ;Get the first two chars
  1746 00003326 80FC3A              <1>     cmp ah, ":" ;If not, current drive
  1747 00003329 752A                <1>     jne .curDrvSrc
  1748                              <1> ;Else, copy over the drive letter from the source path, if one exists!
  1749 0000332B 488B352ED4FFFF      <1>     mov rsi, qword [srcPtr]
  1750 00003332 668906              <1>     mov word [rsi], ax
  1751 00003335 48810520D4FFFF0200- <1>     add qword [srcPtr], 2   
  1751 0000333E 0000                <1>
  1752 00003340 488B3521D4FFFF      <1>     mov rsi, qword [destPtr]
  1753 00003347 668906              <1>     mov word [rsi], ax
  1754 0000334A 48810513D4FFFF0200- <1>     add qword [destPtr], 2  ;Advance the pointer, to copy to after this ptr
  1754 00003353 0000                <1>
  1755                              <1> .curDrvSrc:
  1756 00003355 4889FE              <1>     mov rsi, rdi
  1757                              <1> .destScan:
  1758 00003358 AC                  <1>     lodsb   ;Get the char
  1759 00003359 3A05CACCFFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1760 0000335F 0F846EEBFFFF        <1>     je badArgError
  1761 00003365 84C0                <1>     test al, al
  1762 00003367 75EF                <1>     jnz .destScan
  1763                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1764 00003369 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1765 0000336D 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1765 00003376 3F                  <1>
  1766 00003377 B903000000          <1>     mov ecx, 3  ;24 bytes
  1767 0000337C F348AB              <1>     rep stosq
  1768 0000337F AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1769 00003380 488D3508D1FFFF      <1>     lea rsi, searchSpec
  1770 00003387 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1771 0000338B B80D290000          <1>     mov eax, 290Dh
  1772 00003390 CD21                <1>     int 21h     
  1773 00003392 50                  <1>     push rax    ;Save the WC signature
  1774 00003393 E82C130000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1775 00003398 488D3DF0D0FFFF      <1>     lea rdi, searchSpec
  1776 0000339F E863120000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1777 000033A4 4889FE              <1>     mov rsi, rdi
  1778 000033A7 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1779 000033AA 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1780 000033AE B80D290000          <1>     mov eax, 290Dh
  1781 000033B3 CD21                <1>     int 21h
  1782 000033B5 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1783 000033B6 88CC                <1>     mov ah, cl
  1784 000033B8 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1785 000033BB 0F84EB000000        <1>     jz .noWC
  1786 000033C1 3CFF                <1>     cmp al, -1  ;Is the source drive bad?
  1787 000033C3 0F840AEBFFFF        <1>     je badArgError
  1788 000033C9 488D35BFD0FFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1789                              <1>     ;Now we check if we have a path to actually handle
  1790 000033D0 4839F3              <1>     cmp rbx, rsi
  1791 000033D3 7444                <1>     je .noPath
  1792 000033D5 C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1793 000033D9 488D35AFD0FFFF      <1>     lea rsi, searchSpec
  1794 000033E0 488B3D75D2FFFF      <1>     mov rdi, qword [srcSpec]
  1795 000033E7 56                  <1>     push rsi
  1796 000033E8 E825110000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1797 000033ED 5E                  <1>     pop rsi
  1798 000033EE 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1799 000033F1 8A0532CCFFFF        <1>     mov al, byte [pathSep]
  1800 000033F7 AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1801 000033F8 48893D61D3FFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1802 000033FF 488B3D62D3FFFF      <1>     mov rdi, qword [destPtr]    ;Get the ptr (if it was advanced)
  1803 00003406 E807110000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1804 0000340B 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1805 0000340E AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1806 0000340F 48893D52D3FFFF      <1>     mov qword [destPtr], rdi
  1807 00003416 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1808                              <1> .noPath:
  1809                              <1>     ;Now we have where to copy the files to, we can start our work!
  1810 00003419 E8CF130000          <1>     call setDTA
  1811 0000341E 488D156AD0FFFF      <1>     lea rdx, searchSpec
  1812 00003425 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1813 00003427 B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1814 0000342C CD21                <1>     int 21h
  1815 0000342E 0F82B1EAFFFF        <1>     jc badDupFnf    ;If no file was found!
  1816                              <1> .wcLoop:
  1817                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1818 00003434 488D35F8CCFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1819 0000343B 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1820 0000343F B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1821 00003444 CD21                <1>     int 21h 
  1822                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1823 00003446 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1824 0000344A 488D3D1FD3FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1825 00003451 57                  <1>     push rdi
  1826 00003452 48A5                <1>     movsq
  1827 00003454 66A5                <1>     movsw
  1828 00003456 A4                  <1>     movsb
  1829 00003457 5F                  <1>     pop rdi
  1830 00003458 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1831 0000345C B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1832                              <1> .wcNameMake:
  1833 00003461 AC                  <1>     lodsb   ;Get the char from the source string
  1834 00003462 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1835 00003465 7502                <1>     jne .noStore    ;Dont store the char there
  1836 00003467 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1837                              <1> .noStore:
  1838 00003469 48FFC7              <1>     inc rdi ;Goto next char position
  1839 0000346C FFC9                <1>     dec ecx
  1840 0000346E 75F1                <1>     jnz .wcNameMake
  1841                              <1> ;renName now has the FCB name for the file we wish to make!
  1842                              <1> ;Now make the two paths!
  1843 00003470 488D35BCCCFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1844 00003477 488B3DE2D2FFFF      <1>     mov rdi, qword [srcPtr]
  1845 0000347E E88F100000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1846 00003483 488D35E6D2FFFF      <1>     lea rsi, renName
  1847 0000348A 488B3DD7D2FFFF      <1>     mov rdi, qword [destPtr]
  1848 00003491 E895110000          <1>     call FCBToAsciiz
  1849 00003496 488D15BFD1FFFF      <1>     lea rdx, srcSpec
  1850 0000349D E83F000000          <1>     call .ren   ;Fail silently on wildcard rename
  1851 000034A2 B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1852 000034A7 CD21                <1>     int 21h
  1853 000034A9 7389                <1>     jnc .wcLoop     ;And process it too!
  1854                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 000034AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1855                              <1> .noWC:
  1856 000034AC E813120000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1857 000034B1 0FB605EFCBFFFF      <1>     movzx eax, byte [arg2Off]
  1858 000034B8 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1859 000034BF 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1860 000034C2 488B3D9FD2FFFF      <1>     mov rdi, qword [destPtr]    
  1861 000034C9 E8B3110000          <1>     call cpDelimPathToBufz
  1862 000034CE 488D15BACFFFFF      <1>     lea rdx, searchSpec
  1863 000034D5 E807000000          <1>     call .ren
  1864                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000034DA 73(AB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1865 000034DC E904EAFFFF          <1>     jmp badDupFnf   ;Always just return this
  1866                              <1> .ren:
  1867 000034E1 488D3DF6D1FFFF      <1>     lea rdi, destSpec
  1868 000034E8 B800560000          <1>     mov eax, 5600h
  1869 000034ED CD21                <1>     int 21h
  1870                              <1>     return
    13                              <2> %%_ret:
    14 000034EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1871                              <1> 
  1872                              <1> touch:
  1873                              <1> ;Temporarily used to create files
  1874 000034F0 F605ACCBFFFFFF      <1>     test byte [arg1Flg], -1
  1875 000034F7 0F84D6E9FFFF        <1>     jz badArgError
  1876 000034FD E8C2110000          <1>     call buildCommandPath
  1877 00003502 488D1586CFFFFF      <1>     lea rdx, searchSpec
  1878 00003509 B8005B0000          <1>     mov eax, 5B00h  ;Create unique file 
  1879 0000350E 31C9                <1>     xor ecx, ecx
  1880 00003510 CD21                <1>     int 21h
  1881 00003512 721D                <1>     jc .touch1
  1882                              <1> .touchClose:
  1883 00003514 0FB7D8              <1>     movzx ebx, ax   ;Save the handle here
  1884 00003517 B80D120000          <1>     mov eax, 120Dh  ;Get date/time words from the DOS
  1885 0000351C CD2F                <1>     int 2fh
  1886 0000351E 89C1                <1>     mov ecx, eax    ;Move the time here
  1887 00003520 87D1                <1>     xchg edx, ecx   ;Get them in the right place
  1888 00003522 B801570000          <1>     mov eax, 5701h  ;Set the date/time for bx
  1889 00003527 CD21                <1>     int 21h
  1890 00003529 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1891 0000352E CD21                <1>     int 21h
  1892                              <1>     return
    13                              <2> %%_ret:
    14 00003530 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1893                              <1> .touch1:
  1894 00003531 3C50                <1>     cmp al, errFilExist ;Does the file exist?
  1895 00003533 7509                <1>     jne .touchError ;If not, this is a proper error!
  1896 00003535 B8003D0000          <1>     mov eax, 3D00h  ;R/O open instead to update the access time!!
  1897 0000353A CD21                <1>     int 21h
  1898 0000353C 73D6                <1>     jnc .touchClose ;If this worked, close the handle immediately
  1899                              <1> .touchError:
  1900 0000353E 3C03                <1>     cmp al, errPnf
  1901 00003540 0F848DE9FFFF        <1>     je badArgError
  1902 00003546 3C02                <1>     cmp al, errFnf
  1903 00003548 0F84A0E9FFFF        <1>     je badFnf
  1904 0000354E E965E9FFFF          <1>     jmp badAccError
  1905                              <1>     
  1906                              <1> 
  1907                              <1> join:
  1908                              <1> ;Mock join command, to test join. Make an external command.
  1909                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1910 00003553 F605AF000000FF      <1>     test byte [.joinOn], -1
  1911 0000355A 743D                <1>     jz .okJoin
  1912                              <1> .joindisable:
  1913 0000355C B800520000          <1>     mov eax, 5200h  
  1914 00003561 CD21                <1>     int 21h
  1915                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1916 00003563 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1917 00003568 CD2A                <1>     int 2Ah
  1918 0000356A 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1919 0000356E 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1920 00003572 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1921 00003578 C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1922 0000357B C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1923 0000357F FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1924 00003582 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1925 00003587 CD2A                <1>     int 2Ah
  1926 00003589 C6057900000000      <1>     mov byte [.joinOn], 0
  1927 00003590 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1928 00003597 EB45                <1>     jmp short .joinExit
  1929                              <1> .okJoin:
  1930 00003599 C60569000000FF      <1>     mov byte [.joinOn], -1
  1931 000035A0 B800520000          <1>     mov eax, 5200h  
  1932 000035A5 CD21                <1>     int 21h
  1933 000035A7 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1934 000035AB 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1935                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1936 000035AF B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1937 000035B4 CD2A                <1>     int 2Ah
  1938 000035B6 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1939 000035BC 4889DF              <1>     mov rdi, rbx
  1940 000035BF 488D3544000000      <1>     lea rsi, .joinPath
  1941 000035C6 B90C000000          <1>     mov ecx, .joinPathL
  1942 000035CB F3A4                <1>     rep movsb   ;Copy chars over
  1943 000035CD FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1944 000035D0 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1945 000035D5 CD2A                <1>     int 2Ah
  1946 000035D7 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1947                              <1> .joinExit:
  1948 000035DE B800090000          <1>     mov eax, 0900h
  1949 000035E3 CD21                <1>     int 21h
  1950                              <1>     return
    13                              <2> %%_ret:
    14 000035E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1951 000035E6 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1951 000035EF 61626C65640D0A24    <1>
  1952 000035F7 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1952 00003600 7361626C65640D0A24  <1>
  1953 00003609 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1954 0000360A 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1954 00003613 535400              <1>
  1955                              <1> .joinPathL  equ $ - .joinPath 
  1956                              <1> 
  1957                              <1> subst:
  1958                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1959                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1960 00003616 F605D3000000FF      <1>     test byte [.substOn], -1
  1961 0000361D 7443                <1>     jz .okSubst
  1962                              <1> .substdisable:
  1963 0000361F B800520000          <1>     mov eax, 5200h  
  1964 00003624 CD21                <1>     int 21h
  1965                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1966 00003626 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1967 0000362B CD2A                <1>     int 2Ah
  1968 0000362D 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1969 00003631 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1970 00003638 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1971 0000363E C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1972 00003641 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1973 00003645 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1974 0000364B B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1975 00003650 CD2A                <1>     int 2Ah
  1976 00003652 C6059700000000      <1>     mov byte [.substOn], 0
  1977 00003659 488D157D000000      <1>     lea rdx, .substDisableMsg
  1978 00003660 EB61                <1>     jmp short .substExit
  1979                              <1> .okSubst:
  1980 00003662 C60587000000FF      <1>     mov byte [.substOn], -1
  1981 00003669 B800520000          <1>     mov eax, 5200h  
  1982 0000366E CD21                <1>     int 21h
  1983 00003670 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1984 00003675 CD2A                <1>     int 2Ah
  1985 00003677 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1986 0000367B 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1987 00003682 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1988 00003686 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1989 0000368D 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1990 00003691 C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1991                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1992 00003698 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1993 0000369E 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1994 000036A4 4889DF              <1>     mov rdi, rbx
  1995 000036A7 488D3543000000      <1>     lea rsi, .substPath
  1996 000036AE B90C000000          <1>     mov ecx, .substPathL
  1997 000036B3 F3A4                <1>     rep movsb   ;Copy chars over
  1998 000036B5 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1999 000036BA CD2A                <1>     int 2Ah
  2000 000036BC 488D1508000000      <1>     lea rdx, .substEnableMsg
  2001                              <1> .substExit:
  2002 000036C3 B800090000          <1>     mov eax, 0900h
  2003 000036C8 CD21                <1>     int 21h
  2004                              <1>     return
    13                              <2> %%_ret:
    14 000036CA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2005 000036CB 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  2005 000036D4 6E61626C65640D0A24  <1>
  2006 000036DD 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  2006 000036E6 697361626C65640D0A- <1>
  2006 000036EF 24                  <1>
  2007 000036F0 00                  <1> .substOn: db 0    ;Var to indicate we are on
  2008 000036F1 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  2008 000036FA 535400              <1>
  2009                              <1> .substPathL  equ $ - .substPath 
  2010                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  2011                              <1> truename:
  2012 000036FD F6059FC9FFFFFF      <1>     test byte [arg1Flg], -1
  2013 00003704 0F84C9E7FFFF        <1>     jz badArgError
  2014 0000370A E8B50F0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  2015 0000370F 488D3579CDFFFF      <1>     lea rsi, searchSpec     ;Store the path here
  2016 00003716 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  2017 00003719 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  2018 0000371E CD21                <1>     int 21h
  2019 00003720 730D                <1>     jnc .writePath
  2020 00003722 3C02                <1>     cmp al, errFnf
  2021 00003724 0F84B2E7FFFF        <1>     je badFileError
  2022 0000372A E992E7FFFF          <1>     jmp badParamError
  2023                              <1> .writePath:
  2024 0000372F 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  2025 00003732 B9FFFFFFFF          <1>     mov ecx, -1
  2026 00003737 30C0                <1>     xor al, al
  2027 00003739 F2AE                <1>     repne scasb     ;Get the new len
  2028 0000373B F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  2029 0000373D FFC9                <1>     dec ecx
  2030 0000373F BB01000000          <1>     mov ebx, 01
  2031 00003744 B440                <1>     mov ah, 40h
  2032 00003746 CD21                <1>     int 21h
  2033 00003748 E8C30B0000          <1>     call printCRLF
  2034                              <1>     return
    13                              <2> %%_ret:
    14 0000374D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2035                              <1> 
  2036                              <1> label:
  2037                              <1> ;Displays/Changes/Deletes the file label
  2038 0000374E 488D1508000000      <1>     lea rdx, .l1
  2039 00003755 B800090000          <1>     mov eax, 0900h
  2040 0000375A CD21                <1>     int 21h
  2041                              <1>     return
    13                              <2> %%_ret:
    14 0000375C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2042 0000375D 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  2042 00003766 6E20756E696D706C65- <1>
  2042 0000376F 6D656E7465640D0A24  <1>
  2043                              <1> 
  2044                              <1> mklbl:
  2045                              <1>     ;lea rdx, .l1
  2046                              <1>     ;mov cx, 08h ;Make a label
  2047                              <1>     ;mov eax, 3C00h
  2048                              <1>     ;int 21h
  2049                              <1> 
  2050                              <1>     ;mov ebx, eax
  2051                              <1>     ;mov eax, 3E00h  ;Close the handle
  2052                              <1>     ;int 21h
  2053                              <1>     ;return
  2054                              <1> 
  2055                              <1> ;.l1: db "TESTLABEL",0
  2056 00003778 488D1508000000      <1>     lea rdx, .l1
  2057 0000377F B800160000          <1>     mov eax, 1600h  ;Create FCB
  2058 00003784 CD21                <1>     int 21h
  2059                              <1>     return
    13                              <2> %%_ret:
    14 00003786 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2060                              <1> .l1:
  2061                              <1>     istruc exFcb
  2062 00003787 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  2063 00003788 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  2064 0000378E 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  2065 0000378F 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  2066 00003797 4C2020              <1>     at exFcb.fileext,   db "L  "
  2067 0000379A 00000000            <1>     at exFcb.curBlock,  dd 0
  2068 0000379E 00<rep 15h>         <1>     iend 
  2069                              <1> rmlbl:
  2070 000037B3 488D1508000000      <1>     lea rdx, .l1
  2071 000037BA B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  2072 000037BF CD21                <1>     int 21h
  2073                              <1>     return
    13                              <2> %%_ret:
    14 000037C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2074                              <1> .l1:    ;FCB to volume label
  2075                              <1>     istruc exFcb
  2076 000037C2 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  2077 000037C3 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  2078 000037C9 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  2079 000037CA 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  2080 000037D2 3F3F3F              <1>     at exFcb.fileext,   db "???"
  2081 000037D5 00000000            <1>     at exFcb.curBlock,  dd 0
  2082 000037D9 00<rep 15h>         <1>     iend 
  2083                              <1> 
  2084                              <1> rnlbl:
  2085 000037EE 488D1508000000      <1>     lea rdx, .l1
  2086 000037F5 B800170000          <1>     mov eax, 1700h
  2087 000037FA CD21                <1>     int 21h
  2088                              <1>     return
    13                              <2> %%_ret:
    14 000037FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2089                              <1> .l1:
  2090                              <1>     istruc exRenFcb
  2091 000037FD FF                  <1>     at exRenFcb.extSig,     db -1
  2092 000037FE 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  2093 00003804 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  2094 00003805 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  2095 0000380D 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  2096 00003810 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  2096 00003819 4C414245            <1>
  2097 0000381D 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  2098 00003820 00<rep 4h>          <1>     iend
  2099                              <1> volume:
  2100                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  2101 00003824 F6057BC8FFFFFF      <1>     test byte [arg2Flg], -1
  2102 0000382B 0F85A2E6FFFF        <1>     jnz badArgError
  2103 00003831 F6056BC8FFFFFF      <1>     test byte [arg1Flg], -1
  2104 00003838 7507                <1>     jnz .notCurrentDrive
  2105 0000383A E8CE0C0000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  2106 0000383F EB31                <1>     jmp short .dirEP
  2107                              <1> .notCurrentDrive:
  2108 00003841 E87E0E0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  2109 00003846 488D3542CCFFFF      <1>     lea rsi, searchSpec
  2110 0000384D E8FE0C0000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  2111 00003852 66AD                <1>     lodsw                   ;Get this word
  2112 00003854 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  2113 00003857 0F8576E6FFFF        <1>     jne badArgError
  2114 0000385D 8A0542C8FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  2115 00003863 A8FF                <1>     test al, -1
  2116 00003865 0F855FE6FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  2117 0000386B 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  2118 00003870 FFC8                <1>     dec eax ;Convert to 0 based number
  2119                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  2120 00003872 E8760F0000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  2121 00003877 488D15AECDFFFF      <1>     lea rdx, volFcb
  2122 0000387E FFC0                <1>     inc eax ;Get 1 based drive number
  2123 00003880 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  2124 00003882 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  2125 00003885 B800110000          <1>     mov eax, 1100h ;Find first FCB
  2126 0000388A CD21                <1>     int 21h
  2127 0000388C 50                  <1>     push rax
  2128                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  2129 0000388D 488D150CD0FFFF      <1>     lea rdx, crlf
  2130 00003894 B409                <1>     mov ah, 09h
  2131 00003896 CD21                <1>     int 21h
  2132 00003898 488D15C1D2FFFF      <1>     lea rdx, volMes
  2133 0000389F B409                <1>     mov ah, 09h
  2134 000038A1 CD21                <1>     int 21h
  2135 000038A3 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  2136 000038A5 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  2137 000038A8 B402                <1>     mov ah, 02h
  2138 000038AA CD21                <1>     int 21h
  2139 000038AC 58                  <1>     pop rax
  2140 000038AD 84C0                <1>     test al, al ;If this is zero, the call succeeded
  2141 000038AF 7409                <1>     jz .volIDOk
  2142 000038B1 488D15BFD2FFFF      <1>     lea rdx, volNo
  2143 000038B8 EB19                <1>     jmp short .volEndPrint
  2144                              <1> .volIDOk:
  2145 000038BA 488D15B1D2FFFF      <1>     lea rdx, volOk
  2146 000038C1 B409                <1>     mov ah, 09h
  2147 000038C3 CD21                <1>     int 21h
  2148 000038C5 C6055CC8FFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  2149 000038CC 488D154AC8FFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  2150                              <1> .volEndPrint:
  2151 000038D3 B409                <1>     mov ah, 09h
  2152 000038D5 CD21                <1>     int 21h
  2153 000038D7 488D15C2CFFFFF      <1>     lea rdx, crlf
  2154 000038DE B409                <1>     mov ah, 09h
  2155 000038E0 CD21                <1>     int 21h
  2156                              <1>     return
    13                              <2> %%_ret:
    14 000038E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2157                              <1> 
  2158                              <1> version:
  2159 000038E3 488D15B6CFFFFF      <1>     lea rdx, crlf
  2160 000038EA B409                <1>     mov ah, 09h
  2161 000038EC CD21                <1>     int 21h
  2162 000038EE 488D1559D2FFFF      <1>     lea rdx, dosVer
  2163 000038F5 B409                <1>     mov ah, 09h
  2164 000038F7 CD21                <1>     int 21h
  2165 000038F9 E80C000000          <1>     call .printVersionNumber
  2166 000038FE 488D159BCFFFFF      <1>     lea rdx, crlf
  2167 00003905 B409                <1>     mov ah, 09h
  2168 00003907 CD21                <1>     int 21h
  2169                              <1>     return
    13                              <2> %%_ret:
    14 00003909 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2170                              <1> .printVersionNumber:
  2171 0000390A B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  2172 0000390C CD21                <1>     int 21h
  2173 0000390E 50                  <1>     push rax
  2174 0000390F 0FB6C0              <1>     movzx eax, al
  2175 00003912 E8E60D0000          <1>     call printDecimalWord
  2176 00003917 B22E                <1>     mov dl, "."
  2177 00003919 B402                <1>     mov ah, 02h
  2178 0000391B CD21                <1>     int 21h
  2179 0000391D 58                  <1>     pop rax
  2180 0000391E 0FB6C4              <1>     movzx eax, ah
  2181 00003921 E8D70D0000          <1>     call printDecimalWord
  2182                              <1>     return
    13                              <2> %%_ret:
    14 00003926 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2183                              <1> 
  2184                              <1> 
  2185                              <1> memory:
  2186 00003927 B800520000          <1>     mov eax, 5200h  ;Get Sysvars :)
  2187 0000392C CD21                <1>     int 21h
  2188 0000392E 4885DB              <1>     test rbx, rbx
  2189 00003931 7510                <1>     jnz .sysvarsOK
  2190 00003933 488D15FBD4FFFF      <1>     lea rdx, memBad0
  2191 0000393A B409                <1>     mov ah, 09h
  2192 0000393C CD21                <1>     int 21h
  2193 0000393E E99A0E0000          <1>     jmp freezePC.altEP
  2194                              <1> .sysvarsOK:
  2195                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  2196                              <1>     ; and rcx to store Application memory
  2197 00003943 31F6                <1>     xor esi, esi
  2198 00003945 31FF                <1>     xor edi, edi
  2199 00003947 31ED                <1>     xor ebp, ebp
  2200 00003949 31C9                <1>     xor ecx, ecx
  2201 0000394B 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  2202 0000394F 488B1B              <1>     mov rbx, qword [rbx]
  2203                              <1> .memLp:
  2204 00003952 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  2205 00003955 7409                <1>     je .validMCB
  2206 00003957 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2207 0000395A 0F8501010000        <1>     jne .badMCBFound
  2208                              <1> .validMCB:
  2209 00003960 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  2210 00003963 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  2211 00003967 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  2212 0000396F 7505                <1>     jne .notDOS
  2213 00003971 4801C6              <1>     add rsi, rax    ;Add to DOS count
  2214 00003974 EB21                <1>     jmp short .gotoNext
  2215                              <1> .notDOS:
  2216 00003976 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  2217 0000397E 7505                <1>     jne .notFree
  2218 00003980 4801C7              <1>     add rdi, rax    ;Add to Free space count
  2219 00003983 EB12                <1>     jmp short .gotoNext
  2220                              <1> .notFree:
  2221 00003985 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  2222 0000398D 7505                <1>     jne .notHole
  2223 0000398F 4801C5              <1>     add rbp, rax    ;Add to Hole count
  2224 00003992 EB03                <1>     jmp short .gotoNext
  2225                              <1> .notHole:
  2226 00003994 4801C1              <1>     add rcx, rax    ;Add to Application count
  2227                              <1> .gotoNext:
  2228 00003997 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2229 0000399A 7407                <1>     je .endOfWalk
  2230 0000399C 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  2231 000039A1 EBAF                <1>     jmp short .memLp
  2232                              <1> .endOfWalk:
  2233                              <1>     
  2234 000039A3 488D15ECD3FFFF      <1>     lea rdx, memDOS
  2235 000039AA B409                <1>     mov ah, 09h
  2236 000039AC CD21                <1>     int 21h
  2237 000039AE 4889F0              <1>     mov rax, rsi
  2238 000039B1 E89D000000          <1>     call .mcbPrintAmount
  2239 000039B6 488D1571D4FFFF      <1>     lea rdx, memByte
  2240 000039BD B409                <1>     mov ah, 09h
  2241 000039BF CD21                <1>     int 21h
  2242                              <1> 
  2243 000039C1 4885ED              <1>     test rbp, rbp
  2244 000039C4 741E                <1>     jz .skipHole
  2245 000039C6 488D1515D4FFFF      <1>     lea rdx, memHole
  2246 000039CD B409                <1>     mov ah, 09h
  2247 000039CF CD21                <1>     int 21h
  2248 000039D1 4889E8              <1>     mov rax, rbp
  2249 000039D4 E87A000000          <1>     call .mcbPrintAmount
  2250 000039D9 488D154ED4FFFF      <1>     lea rdx, memByte
  2251 000039E0 B409                <1>     mov ah, 09h
  2252 000039E2 CD21                <1>     int 21h
  2253                              <1> .skipHole:
  2254                              <1> 
  2255 000039E4 488D15D1D3FFFF      <1>     lea rdx, memApp
  2256 000039EB B409                <1>     mov ah, 09h
  2257 000039ED CD21                <1>     int 21h
  2258 000039EF 4889C8              <1>     mov rax, rcx
  2259 000039F2 E85C000000          <1>     call .mcbPrintAmount
  2260 000039F7 488D1530D4FFFF      <1>     lea rdx, memByte
  2261 000039FE B409                <1>     mov ah, 09h
  2262 00003A00 CD21                <1>     int 21h
  2263                              <1> 
  2264 00003A02 488D15FFD3FFFF      <1>     lea rdx, memFree
  2265 00003A09 B409                <1>     mov ah, 09h
  2266 00003A0B CD21                <1>     int 21h
  2267 00003A0D 4889F8              <1>     mov rax, rdi
  2268 00003A10 E83E000000          <1>     call .mcbPrintAmount
  2269 00003A15 488D1512D4FFFF      <1>     lea rdx, memByte
  2270 00003A1C B409                <1>     mov ah, 09h
  2271 00003A1E CD21                <1>     int 21h
  2272                              <1> 
  2273 00003A20 488D1549D3FFFF      <1>     lea rdx, memSys
  2274 00003A27 B409                <1>     mov ah, 09h
  2275 00003A29 CD21                <1>     int 21h
  2276 00003A2B 4889F0              <1>     mov rax, rsi
  2277 00003A2E 4801F8              <1>     add rax, rdi
  2278 00003A31 4801C8              <1>     add rax, rcx
  2279 00003A34 4801E8              <1>     add rax, rbp
  2280 00003A37 E817000000          <1>     call .mcbPrintAmount
  2281 00003A3C 488D15EBD3FFFF      <1>     lea rdx, memByte
  2282 00003A43 B409                <1>     mov ah, 09h
  2283 00003A45 CD21                <1>     int 21h
  2284                              <1> 
  2285 00003A47 488D1552CEFFFF      <1>     lea rdx, crlf
  2286 00003A4E B409                <1>     mov ah, 09h
  2287 00003A50 CD21                <1>     int 21h
  2288                              <1>     return
    13                              <2> %%_ret:
    14 00003A52 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2289                              <1> 
  2290                              <1> .mcbPrintAmount:
  2291 00003A53 51                  <1>     push rcx
  2292 00003A54 56                  <1>     push rsi
  2293 00003A55 57                  <1>     push rdi
  2294 00003A56 55                  <1>     push rbp
  2295 00003A57 E8A10C0000          <1>     call printDecimalWord
  2296 00003A5C 5D                  <1>     pop rbp
  2297 00003A5D 5F                  <1>     pop rdi
  2298 00003A5E 5E                  <1>     pop rsi
  2299 00003A5F 59                  <1>     pop rcx
  2300                              <1>     return
    13                              <2> %%_ret:
    14 00003A60 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2301                              <1> .badMCBFound:
  2302 00003A61 488D150DD4FFFF      <1>     lea rdx, memBad2
  2303 00003A68 B409                <1>     mov ah, 09h
  2304 00003A6A CD21                <1>     int 21h
  2305 00003A6C E96C0D0000          <1>     jmp freezePC.altEP
  2306                              <1> 
  2307                              <1> type:
  2308 00003A71 F6052BC6FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  2309 00003A78 0F8455E4FFFF        <1>     jz badArgError
  2310 00003A7E F60521C6FFFFFF      <1>     test byte [arg2Flg], -1
  2311 00003A85 0F8548E4FFFF        <1>     jnz badArgError         ;If this set, error
  2312 00003A8B 4C8B057DC5FFFF      <1>     mov r8, [pspPtr]
  2313 00003A92 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2314 00003A99 0FB60504C6FFFF      <1>     movzx eax, byte [arg1Off]
  2315 00003AA0 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  2316 00003AA3 803E0D              <1>     cmp byte [rsi], CR
  2317 00003AA6 0F8427E4FFFF        <1>     je badArgError
  2318 00003AAC 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  2319 00003AB0 750F                <1>     jne .noDrive
  2320 00003AB2 0FB605ECC5FFFF      <1>     movzx eax, byte [arg1FCBret]
  2321 00003AB9 3CFF                <1>     cmp al, -1
  2322 00003ABB 0F8409E4FFFF        <1>     je badDriveError
  2323                              <1> .noDrive:
  2324                              <1>     ;Now we open the provided file
  2325 00003AC1 E8FE0B0000          <1>     call buildCommandPath
  2326 00003AC6 488D15C2C9FFFF      <1>     lea rdx, searchSpec
  2327 00003ACD B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  2328 00003AD2 CD21                <1>     int 21h
  2329 00003AD4 0F8202E4FFFF        <1>     jc badFileError
  2330 00003ADA 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  2331 00003AE1 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  2332                              <1> .lp:
  2333 00003AE4 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  2334 00003AE9 B43F                <1>     mov ah, 3Fh ;Read handle
  2335 00003AEB CD21                <1>     int 21h
  2336 00003AED 89C1                <1>     mov ecx, eax
  2337 00003AEF 67E317              <1>     jecxz .exit
  2338 00003AF2 53                  <1>     push rbx    ;Save the original in handle
  2339 00003AF3 BB01000000          <1>     mov ebx, 1  ;STDOUT
  2340 00003AF8 B440                <1>     mov ah, 40h
  2341 00003AFA CD21                <1>     int 21h
  2342 00003AFC 5B                  <1>     pop rbx ;Get back the original read handle
  2343 00003AFD 720F                <1>     jc .exitBad
  2344 00003AFF 39C8                <1>     cmp eax, ecx
  2345 00003B01 74E1                <1>     je .lp
  2346 00003B03 FFC9                <1>     dec ecx ;One less for a ^Z
  2347 00003B05 39C8                <1>     cmp eax, ecx
  2348 00003B07 7505                <1>     jne .exitBad
  2349                              <1> .exit:
  2350 00003B09 B43E                <1>     mov ah, 3Eh ;Close handle
  2351 00003B0B CD21                <1>     int 21h
  2352                              <1>     return
    13                              <2> %%_ret:
    14 00003B0D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2353                              <1> .exitBad:
  2354                              <1>     ;If it is a char device, don't print an error
  2355 00003B0E B800440000          <1>     mov eax, 4400h  ;Get IOCTL mode 
  2356 00003B13 BB01000000          <1>     mov ebx, 1
  2357 00003B18 CD21                <1>     int 21h
  2358 00003B1A F6C280              <1>     test dl, devCharDev
  2359                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003B1D 75(0D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2360 00003B1F E954E3FFFF          <1>     jmp badDiskFull
  2361                              <1> 
  2362                              <1> exit:
  2363 00003B24 F60569C5FFFF01      <1>     test byte [statFlg1], permaShell
  2364 00003B2B 740E                <1>     jz .ouch        ;If not permashell, time to EXIT
  2365 00003B2D F60560C5FFFF04      <1>     test byte [statFlg1], inSingle  ;If perma and single command
  2366 00003B34 0F850FE0FFFF        <1>     jnz int2ERet    ;We are Int 2Eh, exit through the handler
  2367                              <1>     return  ;Else, permashell just returns
    13                              <2> %%_ret:
    14 00003B3A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2368                              <1> .ouch:
  2369 00003B3B B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  2370 00003B40 CD21                <1>     int 21h
  2371                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00003B42 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2372                              <1> 
  2373                              <1> launchChild:
  2374                              <1>     ;We execute an external command here.
  2375                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  2376                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  2377                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  2378                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  2379                              <1>     ;We know the drive we are on is valid so no need to double check that!
  2380 00003B43 E8A50C0000          <1>     call setDTA         
  2381                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
  2382 00003B48 488D3D97C7FFFF      <1>     lea rdi, cmdPathSpec
  2383 00003B4F 4889FE              <1>     mov rsi, rdi
  2384 00003B52 B811120000          <1>     mov eax, 1211h  ;Normalise this path first
  2385 00003B57 CD2F                <1>     int 2fh
  2386 00003B59 E8A90A0000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  2387 00003B5E 4889FE              <1>     mov rsi, rdi    ;Source here
  2388 00003B61 488D3D9DC5FFFF      <1>     lea rdi, cmdFcb
  2389 00003B68 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  2390 00003B6D CD21                <1>     int 21h
  2391 00003B6F 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  2392 00003B71 0F858CE3FFFF        <1>     jnz badCmdError
  2393 00003B77 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  2394                              <1> .pathLoop:
  2395 00003B7A 488D358DC5FFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  2396 00003B81 488D3D67D3FFFF      <1>     lea rdi, extStr
  2397 00003B88 BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  2398                              <1> .extLp:
  2399 00003B8D 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  2400 00003B8E B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  2401 00003B93 F3A6                <1>     rep cmpsb   ;Compare the two strings
  2402 00003B95 5E                  <1>     pop rsi
  2403 00003B96 85C9                <1>     test ecx, ecx
  2404 00003B98 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  2405 00003B9A 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  2406 00003B9D FFCA                <1>     dec edx         ;Else one less extension type to check
  2407 00003B9F 75EC                <1>     jnz .extLp
  2408                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  2409                              <1>     ;If not, error.
  2410 00003BA1 B903000000          <1>     mov ecx, 3
  2411 00003BA6 4889F7              <1>     mov rdi, rsi
  2412 00003BA9 B020                <1>     mov al, SPC
  2413 00003BAB F3AE                <1>     rep scasb   
  2414 00003BAD 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  2415 00003BAF 0F854EE3FFFF        <1>     jnz badCmdError    ;If not, error!
  2416                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  2417 00003BB5 488D3533D3FFFF      <1>     lea rsi, extStr
  2418 00003BBC BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  2419                              <1> .extSrchLp:
  2420 00003BC1 488D3D46C5FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2421 00003BC8 B903000000          <1>     mov ecx, 3
  2422 00003BCD F3A4                <1>     rep movsb   ;Copy the extension over!
  2423 00003BCF E846010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  2424 00003BD4 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  2425 00003BD6 FFCB                <1>     dec ebx                 ;Decrement extension counter
  2426 00003BD8 75E7                <1>     jnz .extSrchLp
  2427                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  2428                              <1> ; we start prepending path componants and trying again. To do this, we reset
  2429                              <1> ; by setting the fcb extension back to all spaces.
  2430 00003BDA 488D3D2DC5FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2431 00003BE1 B903000000          <1>     mov ecx, 3
  2432 00003BE6 B020                <1>     mov al, SPC
  2433 00003BE8 F3AA                <1>     rep stosb   ;Store back the empty extension!
  2434 00003BEA EB70                <1>     jmp short .pathHandle
  2435                              <1> .extFnd:
  2436                              <1> ;Here if the file had the right extension.
  2437 00003BEC E829010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  2438 00003BF1 7269                <1>     jc .pathHandle
  2439                              <1> .extSrchFnd:
  2440                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  2441                              <1> ; a BAT. If it is, separate handling!
  2442 00003BF3 803D14C5FFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  2443 00003BFA 0F849DDFFFFF        <1>     je batLaunch
  2444 00003C00 488D1D39C5FFFF      <1>     lea rbx, launchBlock
  2445 00003C07 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  2446 00003C0B 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  2447 00003C0E 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  2448 00003C15 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  2449 00003C19 498D405C            <1>     lea rax, qword [r8 + fcb1]
  2450 00003C1D 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  2451 00003C21 498D406C            <1>     lea rax, qword [r8 + fcb2]
  2452 00003C25 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  2453 00003C29 488D15B6C6FFFF      <1>     lea rdx, cmdPathSpec
  2454 00003C30 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  2455 00003C35 CD21                <1>     int 21h
  2456                              <1> ;If the program failed to start, verify why!
  2457 00003C37 B800590000          <1>     mov eax, 5900h      ;Get extended error
  2458 00003C3C 31DB                <1>     xor ebx, ebx
  2459 00003C3E CD21                <1>     int 21h
  2460 00003C40 668905C6C3FFFF      <1>     mov word [returnCode], ax   ;Error code from EXEC
  2461 00003C47 3C05                <1>     cmp al, errAccDen   ;Access denied?
  2462 00003C49 0F8469E2FFFF        <1>     je badAccError
  2463 00003C4F 3C07                <1>     cmp al, errMCBbad   ;If MCB bad error, freeze PC
  2464 00003C51 0F847B0B0000        <1>     je freezePC
  2465 00003C57 E9A7E2FFFF          <1>     jmp badCmdError     ;If something goes wrong, error out
  2466                              <1> .pathHandle:        
  2467                              <1> ;First check if rbp is null. If it is, its a first time entry. 
  2468                              <1> ;al has error code!
  2469 00003C5C 4885ED              <1>     test rbp, rbp
  2470 00003C5F 0F85A3000000        <1>     jnz .pathReentry
  2471                              <1> ;Now check if the command we recieved included an absolute path.
  2472                              <1> ;If so, we don't do path substitution and just fail at this point
  2473 00003C65 488D357AC6FFFF      <1>     lea rsi, cmdPathSpec
  2474 00003C6C 66AD                <1>     lodsw   ;Get the first two chars
  2475 00003C6E 3A05B5C3FFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  2476 00003C74 0F8489E2FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2477 00003C7A 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  2478 00003C7C 7412                <1>     je .pathGetEnv
  2479 00003C7E 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  2480 00003C81 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  2481 00003C83 AC                  <1>     lodsb   ;Get the third char
  2482 00003C84 3A059FC3FFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  2483 00003C8A 0F8473E2FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2484                              <1> .pathGetEnv:
  2485                              <1> ;Now get a pointer to the environment and search for PATH=
  2486                              <1> ;We only take the final portion of the path and add it to each path componant
  2487                              <1> ;This agrees with DOS 3.3
  2488 00003C90 E8B90B0000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  2489 00003C95 0F8468E2FFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  2490                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  2491                              <1>     ;Now we know we dont have to keep track of chars!!
  2492 00003C9B 488D3D6FD2FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  2493 00003CA2 E8010C0000          <1>     call searchForEnvVar
  2494 00003CA7 0F8256E2FFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
  2495 00003CAD 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
  2496 00003CB0 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
  2497                              <1> .pathRejoin:
  2498 00003CB7 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  2499 00003CBA 0F8443E2FFFF        <1>     je badCmdError      ;Empty or no more path? Error!
  2500 00003CC0 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
  2501 00003CC3 488D3DC5C7FFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  2502                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
  2503                              <1>     ;SHOULD CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
  2504                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
  2505                              <1>     ;This is impossible to do if env edited by COMMAND.COM
  2506 00003CCA E89C090000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
  2507 00003CCF 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  2508 00003CD2 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  2509 00003CD5 48FFCF              <1>     dec rdi ;Point to the null terminator
  2510 00003CD8 8A054BC3FFFF        <1>     mov al, byte [pathSep]
  2511 00003CDE 3847FF              <1>     cmp byte [rdi - 1], al
  2512 00003CE1 7401                <1>     je .skipPathsep ;Need for rootdir as a double slash start is a netpath
  2513 00003CE3 AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  2514                              <1> .skipPathsep: ;Affects double slashes in path (but thats ok)
  2515 00003CE4 488D351BC4FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2516 00003CEB E83B090000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  2517 00003CF0 488D3598C7FFFF      <1>     lea rsi, searchSpec 
  2518 00003CF7 488D3DE8C5FFFF      <1>     lea rdi, cmdPathSpec
  2519 00003CFE E80F080000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  2520 00003D03 E972FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  2521                              <1> .pathReentry:
  2522 00003D08 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  2523 00003D0C 0F84F1E1FFFF        <1>     je badCmdError
  2524                              <1> ;Currently, because we dont swap drives, we wont print this message.
  2525                              <1> ;Not really a big deal...
  2526                              <1>     ;cmp al, errBadDrv
  2527                              <1>     ;jne .pathDrvOk
  2528                              <1>     ;lea rdx, badDrvSrch ;Print the drive was invalid!
  2529                              <1>     ;mov eax, 0900h
  2530                              <1>     ;int 21h
  2531                              <1> ;.pathDrvOk:
  2532 00003D12 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  2533 00003D15 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  2534 00003D18 EB9D                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  2535                              <1> 
  2536                              <1> .prepAndSearch:
  2537                              <1> ;Copies over the name and extension in UC to the last componant of the 
  2538                              <1> ;cmdPathSpec and null terminates. 
  2539                              <1> ;Input: cmdFcb name + ext setup. 
  2540                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  2541                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
  2542 00003D1A 51                  <1>     push rcx
  2543 00003D1B 56                  <1>     push rsi
  2544 00003D1C 57                  <1>     push rdi
  2545 00003D1D 488D3DC2C5FFFF      <1>     lea rdi, cmdPathSpec 
  2546 00003D24 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  2547 00003D27 E8DB080000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  2548 00003D2C 807F013A            <1>     cmp byte [rdi + 1], ":"
  2549 00003D30 7507                <1>     jne .notdriveRel
  2550 00003D32 4881C702000000      <1>     add rdi, 2  ;Go past the drive specifier, but keep it!
  2551                              <1> .notdriveRel:
  2552 00003D39 488D35C6C3FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2553 00003D40 E8E6080000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  2554 00003D45 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  2555 00003D4A 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  2556 00003D4C CD21                <1>     int 21h
  2557 00003D4E 5F                  <1>     pop rdi
  2558 00003D4F 5E                  <1>     pop rsi
  2559 00003D50 59                  <1>     pop rcx
  2560                              <1>     return
    13                              <2> %%_ret:
    14 00003D51 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2561                              <1> 
  2562                              <1> set:
  2563 00003D52 F6054AC3FFFFFF      <1>     test byte [arg1Flg], -1
  2564 00003D59 7539                <1>     jnz .editEnv
  2565                              <1>     ;Here we just print the environment.
  2566 00003D5B E8EE0A0000          <1>     call checkEnvGoodAndGet 
  2567 00003D60 0F8449E1FFFF        <1>     jz badEnvSpaceError
  2568                              <1>     ;We know this is a good env so keep going! env ptr in rsi
  2569 00003D66 4889F7              <1>     mov rdi, rsi
  2570 00003D69 4889F2              <1>     mov rdx, rsi
  2571                              <1> .findLp:
  2572 00003D6C B9FFFFFFFF          <1>     mov ecx, -1
  2573 00003D71 31C0                <1>     xor eax, eax
  2574                              <1> .scanLp:
  2575 00003D73 F2AE                <1>     repne scasb
  2576 00003D75 75FC                <1>     jne .scanLp
  2577 00003D77 F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
  2578                              <1>     ;Else, we now print this environment variable and CRLF it
  2579                              <1>     ;rdx points to the start of the string aleady
  2580                              <1>     ;ecx has the bytes to print
  2581 00003D79 BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
  2582 00003D7E B800400000          <1>     mov eax, 4000h  ;Print to handle
  2583 00003D83 CD21                <1>     int 21h
  2584 00003D85 E886050000          <1>     call printCRLF
  2585 00003D8A 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
  2586                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003D8D 74(51)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2587 00003D8F 4889FA              <1>     mov rdx, rdi   
  2588 00003D92 EBD8                <1>     jmp short .findLp
  2589                              <1> .editEnv:
  2590 00003D94 E8B50A0000          <1>     call checkEnvGoodAndGet
  2591 00003D99 0F8410E1FFFF        <1>     jz badEnvSpaceError
  2592 00003D9F 0FB605FEC2FFFF      <1>     movzx eax, byte [arg1Off]
  2593 00003DA6 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2594 00003DAD 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
  2595                              <1> .altEp:
  2596 00003DB0 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
  2597 00003DB3 B00D                <1>     mov al, CR              ;Search for the CR
  2598 00003DB5 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
  2599 00003DBD 89CB                <1>     mov ebx, ecx            ;Save this count 
  2600 00003DBF 53                  <1>     push rbx                ;Save this count on the stack too!
  2601 00003DC0 F2AE                <1>     repne scasb             ;Now get the length of this env string
  2602 00003DC2 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
  2603 00003DC4 66891DC6C9FFFF      <1>     mov word [envVarSz], bx ;Store the count
  2604 00003DCB 59                  <1>     pop rcx                 ;Get the char count back!
  2605 00003DCC 89CB                <1>     mov ebx, ecx            
  2606 00003DCE 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
  2607 00003DD1 B03D                <1>     mov al, "="             ;Scan for an equals sign
  2608 00003DD3 F2AE                <1>     repne scasb
  2609 00003DD5 0F85CBE0FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
  2610 00003DDB 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
  2611 00003DDD 66891DAFC9FFFF      <1>     mov word [envVarNamSz], bx
  2612 00003DE4 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
  2613 00003DE7 7477                <1>     je .delEnvVar           ;Free the envvar and return
  2614 00003DE9 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
  2615 00003DEA 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2616 00003DED E8B60A0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2617 00003DF2 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
  2618 00003DF4 E8DD0A0000          <1>     call envFree            ;Free the var in rsi
  2619                              <1> .editNewEnv:
  2620 00003DF9 E8110B0000          <1>     call getFreeSpace       ;Get the free space in env in ecx
  2621 00003DFE E8310B0000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
  2622 00003E03 5E                  <1>     pop rsi                 ;Get back the ptr to the string
  2623 00003E04 31C0                <1>     xor eax, eax            ;Prepare null length!
  2624 00003E06 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
  2625 00003E0C 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
  2626 00003E0F 720B                <1>     jb .reallocTry          ;Try to reallocate!
  2627 00003E11 FFC9                <1>     dec ecx                 ;Save a byte for end magic null
  2628 00003E13 663B0D77C9FFFF      <1>     cmp cx, word [envVarSz] ;Do we have enough space?
  2629 00003E1A 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
  2630                              <1> .reallocTry:
  2631                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
  2632                              <1>     ; we proceed with the environment size.
  2633 00003E1C E8280B0000          <1>     call growEnvBlock   ;Attempt to grow the environment
  2634 00003E21 7319                <1>     jnc .reallocOk
  2635 00003E23 0F8486E0FFFF        <1>     jz badEnvSpaceError    ;Max environment space
  2636                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
  2637                              <1>     ; partially the variable into the env. If so we do that. If the name
  2638                              <1>     ; cannot fit, we don't bother
  2639                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
  2640 00003E29 663B0D63C9FFFF      <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
  2641                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00003E30 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00003E32 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2642 00003E33 E877E0FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
  2643 00003E38 FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
  2644 00003E3A EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
  2645                              <1> .reallocOk:
  2646                              <1>     ;Here we have all the space to just copy the full path
  2647 00003E3C 0FB70D4EC9FFFF      <1>     movzx ecx, word [envVarSz]
  2648                              <1> .nameCp:
  2649                              <1> ;Now copy over the env var, ecx = #ofchars to copy
  2650                              <1> ;Always enough memory for name= here
  2651 00003E43 AC                  <1>     lodsb
  2652 00003E44 E8EC060000          <1>     call ucChar
  2653 00003E49 AA                  <1>     stosb
  2654 00003E4A 66FFC9              <1>     dec cx      ;Always decrement this count
  2655 00003E4D 3C3D                <1>     cmp al, "="
  2656 00003E4F 75F2                <1>     jne .nameCp
  2657                              <1> .exitNameCp:
  2658 00003E51 AC                  <1>     lodsb
  2659 00003E52 3C0D                <1>     cmp al, CR
  2660 00003E54 7405                <1>     je .exitCp
  2661 00003E56 AA                  <1>     stosb
  2662 00003E57 FFC9                <1>     dec ecx
  2663 00003E59 75F6                <1>     jnz .exitNameCp
  2664                              <1> .exitCp:
  2665 00003E5B 31C0                <1>     xor eax, eax
  2666 00003E5D 66AB                <1>     stosw   ;Store the final null word
  2667                              <1>     return
    13                              <2> %%_ret:
    14 00003E5F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2668                              <1> .delEnvVar:
  2669                              <1>     ;rsi -> Start of the envvar name in user buffer
  2670 00003E60 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2671 00003E63 E8400A0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2672 00003E68 7205                <1>     jc .delEnvVarSkip
  2673 00003E6A E8670A0000          <1>     call envFree    ;Free the env var at rsi
  2674                              <1> .delEnvVarSkip:
  2675 00003E6F F8                  <1>     clc             ;Clear CF if the var doesnt exist
  2676                              <1>     return
    13                              <2> %%_ret:
    14 00003E70 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2677                              <1> 
  2678                              <1> pathEdit:
  2679                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
  2680                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
  2681                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
  2682                              <1> ; end there. Error with too many arguments error!
  2683                              <1> ;If after the equals sign there is nothing, we just print the path!
  2684                              <1> ;Gotta process the command line ourselves first
  2685 00003E71 E8D8090000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2686 00003E76 0F8433E0FFFF        <1>     jz badEnvSpaceError
  2687                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2688 00003E7C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2689 00003E83 E8AD000000          <1>     call .skipPathDelimiters
  2690 00003E88 3C0D                <1>     cmp al, CR
  2691 00003E8A 7466                <1>     je .printPath
  2692                              <1> ;Else use the set command to setup the path in the searchSpec.
  2693 00003E8C 56                  <1>     push rsi    ;Save the first char of the command line string
  2694 00003E8D 488D357DD0FFFF      <1>     lea rsi, pathEVar
  2695 00003E94 488D3DF4C5FFFF      <1>     lea rdi, searchSpec
  2696 00003E9B E872060000          <1>     call strcpy
  2697 00003EA0 48FFCF              <1>     dec rdi     ;Point to the terminating null
  2698 00003EA3 5E                  <1>     pop rsi     ;Get back the first char of the pathstring
  2699 00003EA4 31C9                <1>     xor ecx, ecx    ;Make a count of chars
  2700                              <1> .cpLp:
  2701 00003EA6 AC                  <1>     lodsb
  2702 00003EA7 3C0D                <1>     cmp al, CR
  2703 00003EA9 7411                <1>     je .cpLpExit
  2704 00003EAB E891000000          <1>     call .isALPathDelimiter ;Any path delims now are exit conditions!
  2705 00003EB0 740A                <1>     je .cpLpExit
  2706 00003EB2 E87E060000          <1>     call ucChar ;Uppercase the char
  2707 00003EB7 AA                  <1>     stosb       ;Store it
  2708 00003EB8 FFC1                <1>     inc ecx     ;Inc the count, CR not inclusive!
  2709 00003EBA EBEA                <1>     jmp short .cpLp
  2710                              <1> .cpLpExit:
  2711                              <1>     ;Remove trailing semicolons
  2712 00003EBC 807FFF3B            <1>     cmp byte [rdi - 1], ";" ;Check back a char
  2713 00003EC0 7507                <1>     jne .cpLpNoIntervene
  2714 00003EC2 FFC9                <1>     dec ecx     ;Reduce the count by one
  2715 00003EC4 48FFCF              <1>     dec rdi     ;Go back a char
  2716 00003EC7 EBF3                <1>     jmp short .cpLpExit ;Keep removing
  2717                              <1> .cpLpNoIntervene:
  2718 00003EC9 B00D                <1>     mov al, CR  ;Now we store the terminator!
  2719 00003ECB AA                  <1>     stosb       ;Store it!
  2720 00003ECC 81C105000000        <1>     add ecx, 5  ;PATH= is 5 chars
  2721 00003ED2 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count
  2722 00003ED9 FFC1                <1>     inc ecx     ;Add the CR for copying over
  2723 00003EDB 488D35ADC5FFFF      <1>     lea rsi, searchSpec
  2724 00003EE2 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2725 00003EE9 57                  <1>     push rdi
  2726 00003EEA F3A4                <1>     rep movsb
  2727 00003EEC 5E                  <1>     pop rsi         ;Get the ptr to the cmdline in rsi
  2728 00003EED E9BEFEFFFF          <1>     jmp set.altEp   ;We've now set the string up, lets go!
  2729                              <1> .printPath:
  2730 00003EF2 488D3D18D0FFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
  2731 00003EF9 E8AA090000          <1>     call searchForEnvVar    ;Returns ptr to env var in rsi
  2732 00003EFE 7221                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
  2733 00003F00 4889F7              <1>     mov rdi, rsi        
  2734 00003F03 E823060000          <1>     call strlen         ;Get the length of the path in rdi
  2735 00003F08 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
  2736 00003F0E 7411                <1>     je .noPathPrnt      ;Print no path!
  2737 00003F10 FFC9                <1>     dec ecx             ;Drop the terminating null from the count
  2738 00003F12 4889FA              <1>     mov rdx, rdi        ;Set path ptr for printing
  2739 00003F15 BB01000000          <1>     mov ebx, 1          ;STDOUT
  2740 00003F1A B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
  2741 00003F1F EB0C                <1>     jmp short .pathExit
  2742                              <1> .noPathPrnt:
  2743 00003F21 488D15D5CCFFFF      <1>     lea rdx, noPath
  2744 00003F28 B800090000          <1>     mov eax, 0900h
  2745                              <1> .pathExit:
  2746 00003F2D CD21                <1>     int 21h
  2747 00003F2F E8DC030000          <1>     call printCRLF      ;Print a crlf at the end
  2748                              <1>     return
    13                              <2> %%_ret:
    14 00003F34 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2749                              <1> .skipPathDelimiters:
  2750                              <1> ;Input: rsi -> Start of string to parse
  2751                              <1> ;Output: rsi -> First non-delimiter char of string
  2752                              <1> ;        al = First non delim char
  2753 00003F35 AC                  <1>     lodsb
  2754 00003F36 E806000000          <1>     call .isALPathDelimiter
  2755 00003F3B 74F8                <1>     je .skipPathDelimiters
  2756 00003F3D 48FFCE              <1>     dec rsi
  2757                              <1>     return
    13                              <2> %%_ret:
    14 00003F40 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2758                              <1> .isALPathDelimiter:
  2759                              <1> ;Same as before without semicolon
  2760 00003F41 3C20                <1>     cmp al, SPC
  2761                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003F43 74(40)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2762 00003F45 3C09                <1>     cmp al, TAB
  2763                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003F47 74(40)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2764 00003F49 3C2C                <1>     cmp al, ","
  2765                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003F4B 74(40)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2766 00003F4D 3C3D                <1>     cmp al, "="
  2767                              <1>     return
    13                              <2> %%_ret:
    14 00003F4F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2768                              <1> 
  2769                              <1> prompt:
  2770 00003F50 E8F9080000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2771 00003F55 0F8454DFFFFF        <1>     jz badEnvSpaceError
  2772                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2773 00003F5B 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2774 00003F62 E8E9050000          <1>     call skipDelimiters ;Points rsi to the first non-delimiter char
  2775 00003F67 803E0D              <1>     cmp byte [rsi], CR  ;Is the first non-delim a CR?
  2776 00003F6A 742C                <1>     je .reset   ;Reset if so
  2777 00003F6C 56                  <1>     push rsi    ;Save ptr to the start of the user typed line
  2778 00003F6D 488D3573CFFFFF      <1>     lea rsi, promptEVar ;Copy the PROMPT= prefix to searchspec
  2779 00003F74 488D3D14C5FFFF      <1>     lea rdi, searchSpec
  2780 00003F7B B907000000          <1>     mov ecx, 7  ;Copy without <CR>
  2781 00003F80 F3A4                <1>     rep movsb
  2782 00003F82 5E                  <1>     pop rsi ;Get back ptr to the user typed line
  2783 00003F83 31C9                <1>     xor ecx, ecx    ;Get char count
  2784                              <1> .cp:    ;Now copy the user string over
  2785 00003F85 AC                  <1>     lodsb
  2786 00003F86 AA                  <1>     stosb 
  2787 00003F87 3C0D                <1>     cmp al, CR
  2788 00003F89 7404                <1>     je .cpOk
  2789 00003F8B FFC1                <1>     inc ecx ;Increment count if non CR char copied over
  2790 00003F8D EBF6                <1>     jmp short .cp
  2791                              <1> .cpOk:
  2792 00003F8F 488D35F9C4FFFF      <1>     lea rsi, searchSpec ;Source the string from here
  2793 00003F96 EB09                <1>     jmp short .goSet    ;Got the CR-less count
  2794                              <1> .reset:
  2795                              <1> ;Delete the environment variable!
  2796 00003F98 488D3548CFFFFF      <1>     lea rsi, promptEVar 
  2797 00003F9F 31C9                <1>     xor ecx, ecx    ;No chars to write to the envstring
  2798                              <1> .goSet:
  2799 00003FA1 81C107000000        <1>     add ecx, 7  ;Add the chars for the prompt= string too
  2800 00003FA7 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl 
  2801 00003FAE FFC1                <1>     inc ecx     ;Include CR in copy
  2802 00003FB0 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2803 00003FB7 57                  <1>     push rdi
  2804 00003FB8 F3A4                <1>     rep movsb
  2805 00003FBA 5E                  <1>     pop rsi
  2806 00003FBB E9F0FDFFFF          <1>     jmp set.altEp
  2807                              <1> 
  2808                              <1> echo:
  2809 00003FC0 F605DCC0FFFFFF      <1>     test byte [arg1Flg], -1 ;If no argument, display if on or off
  2810 00003FC7 752A                <1>     jnz .argGiven
  2811 00003FC9 488D151ECDFFFF      <1>     lea rdx, echoIs
  2812 00003FD0 E842030000          <1>     call printString
  2813 00003FD5 488D15F8CCFFFF      <1>     lea rdx, onMes
  2814 00003FDC 488D0DEBCCFFFF      <1>     lea rcx, offMes
  2815 00003FE3 F605ABC0FFFFFF      <1>     test byte [echoFlg], -1
  2816 00003FEA 480F44D1            <1>     cmovz rdx, rcx
  2817 00003FEE E924030000          <1>     jmp printString
  2818                              <1> .argGiven:
  2819 00003FF3 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2820 00003FFA 0FB605A3C0FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the offset
  2821 00004001 4801C6              <1>     add rsi, rax
  2822 00004004 AC                  <1>     lodsb   ;Get this char
  2823 00004005 48FFCE              <1>     dec rsi ;And go back to the start of the string
  2824 00004008 E828050000          <1>     call ucChar
  2825 0000400D 3C4F                <1>     cmp al, "O" ;Was it an O? If not, direct copy
  2826 0000400F 755A                <1>     jne .directEcho
  2827 00004011 8A4601              <1>     mov al, byte [rsi + 1]  ;Get the next char
  2828 00004014 E81C050000          <1>     call ucChar
  2829 00004019 3C4E                <1>     cmp al, "N" ;If its N, check its the last char on the string
  2830 0000401B 751B                <1>     jne .checkOff
  2831 0000401D 56                  <1>     push rsi
  2832 0000401E 4881C602000000      <1>     add rsi, 2  ;Go past on string
  2833 00004025 E826050000          <1>     call skipDelimiters
  2834 0000402A 803E0D              <1>     cmp byte [rsi], CR
  2835 0000402D 5E                  <1>     pop rsi
  2836 0000402E 753B                <1>     jne .directEcho ;If its not, just echo the string
  2837 00004030 C6055EC0FFFF01      <1>     mov byte [echoFlg], 1   ;Set to 1 if on
  2838                              <1>     return
    13                              <2> %%_ret:
    14 00004037 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2839                              <1> .checkOff:
  2840 00004038 8A4601              <1>     mov al, byte [rsi + 1]  ;Get first char past O
  2841 0000403B E8F5040000          <1>     call ucChar
  2842 00004040 3C46                <1>     cmp al, "F" ;Is it an F?
  2843 00004042 7527                <1>     jne .directEcho ;No, just direct echo
  2844 00004044 8A4602              <1>     mov al, byte [rsi + 2]
  2845 00004047 E8E9040000          <1>     call ucChar
  2846 0000404C 3C46                <1>     cmp al, "F"
  2847 0000404E 751B                <1>     jne .directEcho
  2848 00004050 56                  <1>     push rsi
  2849 00004051 4881C603000000      <1>     add rsi, 3
  2850 00004058 E8F3040000          <1>     call skipDelimiters
  2851 0000405D 803E0D              <1>     cmp byte [rsi], CR
  2852 00004060 5E                  <1>     pop rsi
  2853 00004061 7508                <1>     jne .directEcho
  2854 00004063 C6052BC0FFFF00      <1>     mov byte [echoFlg], 0
  2855                              <1>     return
    13                              <2> %%_ret:
    14 0000406A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2856                              <1> .directEcho: 
  2857 0000406B AC                  <1>     lodsb
  2858 0000406C 3C0D                <1>     cmp al, CR
  2859 0000406E 0F849C020000        <1>     je printCRLF    ;Prints a crlf and returns
  2860 00004074 88C2                <1>     mov dl, al
  2861 00004076 E80C030000          <1>     call outChar
  2862 0000407B EBEE                <1>     jmp short .directEcho
  2863                              <1> 
  2864                              <1> pauza:  ;Well... pause is an instruction in english 0:)
  2865                              <1> ;Thank you authors of MSDOS Encyclopedia for confusing an argument to this command
  2866                              <1> ; with just... the actual command tail being echoed with the command -_-
  2867 0000407D F60511C0FFFFFF      <1>     test byte [echoFlg], -1
  2868 00004084 7528                <1>     jnz .echoTail
  2869                              <1> ;Since we havent echoed the command out, type the tail out manually
  2870 00004086 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
  2871 0000408D E8BE040000          <1>     call skipDelimiters ;Skip leading delims
  2872 00004092 4889F2              <1>     mov rdx, rsi
  2873 00004095 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get the count
  2874 0000409D BB01000000          <1>     mov ebx, 1  ;Echo to STDOUT 
  2875 000040A2 B800400000          <1>     mov eax, 4000h  ;Write
  2876 000040A7 CD21                <1>     int 21h
  2877 000040A9 E862020000          <1>     call printCRLF
  2878                              <1> .echoTail:
  2879 000040AE 488D15B0C9FFFF      <1>     lea rdx, pauseMes
  2880 000040B5 E85D020000          <1>     call printString
  2881 000040BA B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Triggers ^C
  2882 000040BF CD21                <1>     int 21h
  2883 000040C1 E84A020000          <1>     call printCRLF
  2884                              <1> remark:
  2885                              <1>     return
    13                              <2> %%_ret:
    14 000040C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printDate:
     4                              <1> ;Input: eax = Packed Date
     5                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
     6                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
     7                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
     8                              <1> ;       ebx = 0 => Print two digit year
     9                              <1> ;       ebx = 1 => Print four digit year
    10 000040C7 53                  <1>     push rbx
    11 000040C8 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    12 000040CA 803D5ABFFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    13 000040D1 7240                <1>     jb .usDate
    14 000040D3 777C                <1>     ja .jpnDate
    15                              <1> ;European: DD/MM/YY
    16 000040D5 251F000000          <1>     and eax, 1Fh    ;Save day bits
    17 000040DA E8B0000000          <1>     call .printFirst
    18 000040DF 8A1551BFFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    19 000040E5 B402                <1>     mov ah, 02h
    20 000040E7 CD21                <1>     int 21h
    21                              <1> 
    22 000040E9 89C8                <1>     mov eax, ecx
    23 000040EB 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    24 000040F0 C1E805              <1>     shr eax, 5
    25 000040F3 E8B3000000          <1>     call .printSecond
    26                              <1> 
    27 000040F8 8A1538BFFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    28 000040FE B402                <1>     mov ah, 02h
    29 00004100 CD21                <1>     int 21h
    30                              <1> 
    31 00004102 89C8                <1>     mov eax, ecx
    32 00004104 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    33 00004109 C1E809              <1>     shr eax, 9
    34 0000410C 5B                  <1>     pop rbx ;Get the year signature back
    35 0000410D E8A9000000          <1>     call .printYear
    36                              <1>     return
    13                              <2> %%_ret:
    14 00004112 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                              <1> .usDate:
    38                              <1> ;US: MM/DD/YY
    39 00004113 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    40 00004118 C1E805              <1>     shr eax, 5
    41 0000411B E86F000000          <1>     call .printFirst
    42                              <1> 
    43 00004120 8A1510BFFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    44 00004126 B402                <1>     mov ah, 02h
    45 00004128 CD21                <1>     int 21h
    46                              <1> 
    47 0000412A 89C8                <1>     mov eax, ecx
    48 0000412C 251F000000          <1>     and eax, 1Fh    ;Save day bits
    49 00004131 E875000000          <1>     call .printSecond
    50                              <1> 
    51 00004136 8A15FABEFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 0000413C B402                <1>     mov ah, 02h
    53 0000413E CD21                <1>     int 21h
    54                              <1> 
    55 00004140 89C8                <1>     mov eax, ecx
    56 00004142 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 00004147 C1E809              <1>     shr eax, 9
    58 0000414A 5B                  <1>     pop rbx ;Get the year signature back
    59 0000414B E86B000000          <1>     call .printYear
    60                              <1>     return
    13                              <2> %%_ret:
    14 00004150 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> .jpnDate:
    62                              <1> ;Japan: YY/MM/DD
    63 00004151 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 00004156 C1E809              <1>     shr eax, 9
    65 00004159 5B                  <1>     pop rbx ;Get the year signature back
    66 0000415A E85C000000          <1>     call .printYear
    67                              <1> 
    68 0000415F 8A15D1BEFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    69 00004165 B402                <1>     mov ah, 02h
    70 00004167 CD21                <1>     int 21h
    71                              <1> 
    72 00004169 89C8                <1>     mov eax, ecx
    73 0000416B 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    74 00004170 C1E805              <1>     shr eax, 5
    75 00004173 E833000000          <1>     call .printSecond
    76                              <1> 
    77 00004178 8A15B8BEFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    78 0000417E B402                <1>     mov ah, 02h
    79 00004180 CD21                <1>     int 21h
    80                              <1> 
    81 00004182 89C8                <1>     mov eax, ecx
    82 00004184 251F000000          <1>     and eax, 1Fh    ;Save day bits
    83 00004189 E81D000000          <1>     call .printSecond
    84                              <1>     return
    13                              <2> %%_ret:
    14 0000418E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> ;Each of these require eax setup correctly
    87                              <1> .printFirst:
    88 0000418F 51                  <1>     push rcx
    89 00004190 E8D9050000          <1>     call getDecimalWord
    90 00004195 84ED                <1>     test ch, ch ;Do we have an upper digit?
    91 00004197 7504                <1>     jnz .skipSpace
    92 00004199 88CD                <1>     mov ch, cl
    93 0000419B B120                <1>     mov cl, " "
    94                              <1> .skipSpace:
    95 0000419D 88CA                <1>     mov dl, cl
    96 0000419F B402                <1>     mov ah, 02h
    97 000041A1 CD21                <1>     int 21h
    98 000041A3 88EA                <1>     mov dl, ch
    99 000041A5 B402                <1>     mov ah, 02h
   100 000041A7 CD21                <1>     int 21h
   101 000041A9 59                  <1>     pop rcx
   102                              <1>     return
    13                              <2> %%_ret:
    14 000041AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .printSecond:
   104 000041AB 51                  <1>     push rcx
   105 000041AC E8BD050000          <1>     call getDecimalWord
   106 000041B1 84ED                <1>     test ch, ch ;Do we have an upper digit?
   107 000041B3 75E8                <1>     jnz .skipSpace
   108 000041B5 88CD                <1>     mov ch, cl
   109 000041B7 B130                <1>     mov cl, "0"
   110 000041B9 EBE2                <1>     jmp short .skipSpace
   111                              <1> .printYear:
   112 000041BB 05BC070000          <1>     add eax, 1980
   113 000041C0 51                  <1>     push rcx
   114 000041C1 53                  <1>     push rbx
   115 000041C2 E8A7050000          <1>     call getDecimalWord ;Get unpacked in rcx
   116 000041C7 5B                  <1>     pop rbx
   117 000041C8 84DB                <1>     test bl, bl
   118 000041CA 740C                <1>     jz .twoDigitYear
   119 000041CC 88CA                <1>     mov dl, cl  ;Print the first digit
   120 000041CE B402                <1>     mov ah, 02h
   121 000041D0 CD21                <1>     int 21h
   122 000041D2 88EA                <1>     mov dl, ch  ;Print the second digit
   123 000041D4 B402                <1>     mov ah, 02h
   124 000041D6 CD21                <1>     int 21h
   125                              <1> .twoDigitYear:
   126 000041D8 C1E910              <1>     shr ecx, 10h    ;Get high word low
   127 000041DB 88CA                <1>     mov dl, cl  ;Print the upper digit
   128 000041DD B402                <1>     mov ah, 02h
   129 000041DF CD21                <1>     int 21h
   130 000041E1 88EA                <1>     mov dl, ch  ;Print the lower digit
   131 000041E3 B402                <1>     mov ah, 02h
   132 000041E5 CD21                <1>     int 21h
   133 000041E7 59                  <1>     pop rcx
   134                              <1>     return
    13                              <2> %%_ret:
    14 000041E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> 
   137                              <1> printTime:
   138                              <1> ;Input: eax = Packed Time
   139                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   140                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   141 000041E9 89C1                <1>     mov ecx, eax
   142 000041EB 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   143 000041F0 C1E80B              <1>     shr eax, 11
   144 000041F3 803D42BEFFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   145 000041FA 750B                <1>     jne .ampm
   146 000041FC E85A000000          <1>     call .printHours
   147 00004201 E831000000          <1>     call .printMinutes
   148                              <1>     return
    13                              <2> %%_ret:
    14 00004206 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> .ampm:
   150 00004207 3D0C000000          <1>     cmp eax, 12
   151 0000420C 7713                <1>     ja .pm
   152 0000420E 7416                <1>     je .pm2
   153 00004210 E846000000          <1>     call .printHours
   154 00004215 E81D000000          <1>     call .printMinutes
   155 0000421A B261                <1>     mov dl, "a"
   156 0000421C B402                <1>     mov ah, 02h
   157 0000421E CD21                <1>     int 21h
   158                              <1>     return
    13                              <2> %%_ret:
    14 00004220 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> .pm:
   160 00004221 2D0C000000          <1>     sub eax, 12
   161                              <1> .pm2:
   162 00004226 E830000000          <1>     call .printHours
   163 0000422B E807000000          <1>     call .printMinutes
   164 00004230 B270                <1>     mov dl, "p"
   165 00004232 B402                <1>     mov ah, 02h
   166 00004234 CD21                <1>     int 21h
   167                              <1>     return
    13                              <2> %%_ret:
    14 00004236 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   168                              <1> .printMinutes:
   169 00004237 8A15FBBDFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   170 0000423D B402                <1>     mov ah, 02h
   171 0000423F CD21                <1>     int 21h
   172                              <1> 
   173 00004241 89C8                <1>     mov eax, ecx
   174 00004243 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   175 00004248 C1E805              <1>     shr eax, 5
   176                              <1> .printMinutesAlt:
   177 0000424B 51                  <1>     push rcx
   178 0000424C E81D050000          <1>     call getDecimalWord
   179 00004251 84ED                <1>     test ch, ch ;Do we have an upper digit?
   180 00004253 7514                <1>     jnz .skipSpace
   181 00004255 88CD                <1>     mov ch, cl
   182 00004257 B130                <1>     mov cl, "0"
   183 00004259 EB0E                <1>     jmp short .skipSpace
   184                              <1> .printHours:
   185 0000425B 51                  <1>     push rcx
   186 0000425C E80D050000          <1>     call getDecimalWord
   187 00004261 84ED                <1>     test ch, ch ;Do we have an upper digit?
   188 00004263 7504                <1>     jnz .skipSpace
   189 00004265 88CD                <1>     mov ch, cl
   190 00004267 B120                <1>     mov cl, " "
   191                              <1> .skipSpace:
   192 00004269 88CA                <1>     mov dl, cl
   193 0000426B B402                <1>     mov ah, 02h
   194 0000426D CD21                <1>     int 21h
   195 0000426F 88EA                <1>     mov dl, ch
   196 00004271 B402                <1>     mov ah, 02h
   197 00004273 CD21                <1>     int 21h
   198 00004275 59                  <1>     pop rcx
   199                              <1>     return
    13                              <2> %%_ret:
    14 00004276 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printPrompt:
   202 00004277 F60517BEFFFFFF      <1>     test byte [echoFlg], -1 ;If echo off, no prompt!
   203                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000427E 74(76)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 00004280 488D3D60CCFFFF      <1>     lea rdi, promptEVar   ;Find the prompt var
   205 00004287 E81C060000          <1>     call searchForEnvVar
   206 0000428C 730B                <1>     jnc .validPrompt
   207                              <1>     ;Here we print the default prompt
   208 0000428E E8F9000000          <1>     call putCWDInPrompt
   209 00004293 E8C5000000          <1>     call putGTinPrompt
   210                              <1>     return
    13                              <2> %%_ret:
    14 00004298 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> .validPrompt:
   212                              <1> ;rsi points to the prompt
   213 00004299 4881C607000000      <1>     add rsi, 7  ;Go past the prompt= string
   214                              <1> .promptLp:
   215 000042A0 AC                  <1>     lodsb   ;Get the char
   216 000042A1 84C0                <1>     test al, al
   217                              <1>     retz    ;Return when al is 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000042A3 74(98)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   218 000042A5 3C24                <1>     cmp al, "$"
   219 000042A7 7409                <1>     je .escapeChar
   220 000042A9 88C2                <1>     mov dl, al
   221 000042AB E8D7000000          <1>     call outChar    ;Prints the char in dl
   222 000042B0 EBEE                <1>     jmp short .promptLp
   223                              <1> .escapeChar:
   224 000042B2 AC                  <1>     lodsb       ;Get the next char now that we are escaping
   225 000042B3 E87D020000          <1>     call ucChar ;Uppercase this char in al
   226 000042B8 488D1D2A000000      <1>     lea rbx, .pTbl
   227 000042BF B90D000000          <1>     mov ecx, pTblL / 3  ;3 bytes per entry
   228                              <1> .escapeLp:
   229 000042C4 3803                <1>     cmp byte [rbx], al  ;Are we at the right entry?
   230 000042C6 740D                <1>     je .escapeFnd
   231 000042C8 4881C303000000      <1>     add rbx, 3  ;Go to next entry
   232 000042CF FFC9                <1>     dec ecx
   233 000042D1 75F1                <1>     jnz .escapeLp
   234 000042D3 EBCB                <1>     jmp short .promptLp  ;Output nothing if invalid
   235                              <1> .escapeFnd:
   236 000042D5 488D050D000000      <1>     lea rax, .pTbl              ;Get the table addr
   237 000042DC 0FB75B01            <1>     movzx ebx, word [rbx + 1]   ;Get the word offset from the table
   238 000042E0 4801D8              <1>     add rax, rbx                ;Add these
   239 000042E3 56                  <1>     push rsi    ;Ensure rsi remains unchanged
   240 000042E4 FFD0                <1>     call rax    ;Call indirectly the function to output the chars
   241 000042E6 5E                  <1>     pop rsi
   242 000042E7 EBB7                <1>     jmp short .promptLp
   243                              <1> 
   244                              <1> ;Easy table to use, 13 entries, 3 bytes per entry
   245                              <1> .pTbl:
   246 000042E9 42                  <1>     db "B", 
   247 000042EA 7000                <1>     dw putPipeInPrompt - .pTbl     ;Pipe char
   248 000042EC 44                  <1>     db "D", 
   249 000042ED 5D01                <1>     dw printFmtDate - .pTbl        ;Current date
   250 000042EF 45                  <1>     db "E", 
   251 000042F0 6400                <1>     dw putEscInPrompt - .pTbl      ;ANSI Escape char
   252 000042F2 47                  <1>     db "G", 
   253 000042F3 7400                <1>     dw putGTinPrompt - .pTbl       ;Greater than char
   254 000042F5 48                  <1>     db "H", 
   255 000042F6 7C00                <1>     dw putBSPinPrompt - .pTbl      ;Backspace
   256 000042F8 4C                  <1>     db "L", 
   257 000042F9 7800                <1>     dw putLTinPrompt - .pTbl       ;Less than char
   258 000042FB 4E                  <1>     db "N", 
   259 000042FC 9500                <1>     dw putDriveInPrompt - .pTbl    ;Current drive letter
   260 000042FE 50                  <1>     db "P", 
   261 000042FF A300                <1>     dw putCWDInPrompt - .pTbl      ;Current drive and path
   262 00004301 51                  <1>     db "Q", 
   263 00004302 6C00                <1>     dw putEquInPrompt - .pTbl      ;Equals char
   264 00004304 54                  <1>     db "T", 
   265 00004305 F400                <1>     dw printFmtTime - .pTbl        ;Current time in hh:mm:ss.hh fmt
   266 00004307 56                  <1>     db "V", 
   267 00004308 3600                <1>     dw putVersionInPrompt - .pTbl  ;DOS version number
   268 0000430A 5F                  <1>     db "_", 
   269 0000430B 2700                <1>     dw printCRLF - .pTbl           ;CRLF pair
   270 0000430D 24                  <1>     db "$", 
   271 0000430E 6800                <1>     dw putMoneyInPrompt - .pTbl    ;Dollar sign
   272                              <1> pTblL equ $ - .pTbl
   273                              <1> 
   274                              <1> printCRLF:
   275 00004310 488D1589C5FFFF      <1>     lea rdx, crlf
   276                              <1> printString:
   277 00004317 B800090000          <1>     mov eax, 0900h  ;Print string
   278 0000431C CD21                <1>     int 21h
   279                              <1>     return
    13                              <2> %%_ret:
    14 0000431E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   280                              <1> 
   281                              <1> putVersionInPrompt:
   282 0000431F 488D1528C8FFFF      <1>     lea rdx, dosVer
   283 00004326 B409                <1>     mov ah, 09h ;Print String
   284 00004328 CD21                <1>     int 21h
   285 0000432A B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   286 0000432C CD21                <1>     int 21h
   287 0000432E 50                  <1>     push rax    ;Save minor version
   288 0000432F E884010000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   289 00004334 E89C010000          <1>     call printPackedBCD ;Print al
   290 00004339 B22E                <1>     mov dl, "."
   291 0000433B B402                <1>     mov ah, 02h
   292 0000433D CD21                <1>     int 21h
   293 0000433F 58                  <1>     pop rax
   294 00004340 88E0                <1>     mov al, ah  ;Get the minor version low
   295 00004342 E871010000          <1>     call hexToBCD
   296 00004347 E889010000          <1>     call printPackedBCD
   297                              <1>     return
    13                              <2> %%_ret:
    14 0000434C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   298                              <1> putEscInPrompt:
   299 0000434D B21B                <1>     mov dl, ESC
   300 0000434F EB36                <1>     jmp short outChar
   301                              <1> 
   302                              <1> putMoneyInPrompt:
   303 00004351 B224                <1>     mov dl, "$"
   304 00004353 EB32                <1>     jmp short outChar
   305                              <1> 
   306                              <1> putEquInPrompt:
   307 00004355 B23D                <1>     mov dl, "="
   308 00004357 EB2E                <1>     jmp short outChar
   309                              <1> 
   310                              <1> putPipeInPrompt:
   311 00004359 B27C                <1>     mov dl, "|"
   312 0000435B EB2A                <1>     jmp short outChar
   313                              <1> 
   314                              <1> putGTinPrompt:
   315 0000435D B23E                <1>     mov dl, ">"
   316 0000435F EB26                <1>     jmp short outChar
   317                              <1> 
   318                              <1> putLTinPrompt:
   319 00004361 B23C                <1>     mov dl, "<"
   320 00004363 EB22                <1>     jmp short outChar
   321                              <1> 
   322                              <1> putBSPinPrompt:
   323 00004365 488D15DDC9FFFF      <1>     lea rdx, backSpace
   324 0000436C B903000000          <1>     mov ecx, 3
   325 00004371 BB01000000          <1>     mov ebx, 1
   326 00004376 B800400000          <1>     mov eax, 4000h  ;Output the backspace!
   327 0000437B CD21                <1>     int 21h
   328                              <1>     return
    13                              <2> %%_ret:
    14 0000437D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   329                              <1> 
   330                              <1> putDriveInPrompt:
   331 0000437E E88A010000          <1>     call getCurrentDrive
   332 00004383 0441                <1>     add al, "A" ;Convert to letter
   333 00004385 88C2                <1>     mov dl, al
   334                              <1> outChar:
   335 00004387 B402                <1>     mov ah, 02h ;Echo to STDOUT
   336 00004389 CD21                <1>     int 21h
   337                              <1>     return
    13                              <2> %%_ret:
    14 0000438B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   338                              <1> putCWDInPrompt:
   339 0000438C E87C010000          <1>     call getCurrentDrive
   340 00004391 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   341 00004393 FEC2                <1>     inc dl
   342 00004395 0441                <1>     add al, "A" ;Convert to letter
   343 00004397 B43A                <1>     mov ah, ":"
   344 00004399 488D3DB1BCFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   345 000043A0 66AB                <1>     stosw   ;Store X:, rdi+=2
   346 000043A2 8A0581BCFFFF        <1>     mov al, byte [pathSep]
   347 000043A8 AA                  <1>     stosb   ;Store pathSep, inc rdi
   348 000043A9 B447                <1>     mov ah, 47h ;Get Current Working Directory
   349 000043AB 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   350 000043AE CD21                <1>     int 21h
   351 000043B0 721F                <1>     jc .badDrive
   352 000043B2 E874010000          <1>     call strlen
   353 000043B7 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   354                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   355 000043BD B800400000          <1>     mov eax, 4000h ;Write to handle
   356 000043C2 BB01000000          <1>     mov ebx, 1  ;STDOUT
   357 000043C7 488D1583BCFFFF      <1>     lea rdx, currDirStr
   358 000043CE CD21                <1>     int 21h
   359                              <1>     return
    13                              <2> %%_ret:
    14 000043D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> .badDrive:
   361                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   362 000043D1 488D153EC8FFFF      <1>     lea rdx, badDrvMsg
   363 000043D8 E93AFFFFFF          <1>     jmp printString
   364                              <1> printFmtTime:
   365                              <1> ;Outputs the formatted time
   366 000043DD E847000000          <1>     call getTime
   367 000043E2 0FB6C5              <1>     movzx eax, ch
   368 000043E5 E871FEFFFF          <1>     call printTime.printHours
   369 000043EA 8A1548BCFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   370 000043F0 B402                <1>     mov ah, 02h
   371 000043F2 CD21                <1>     int 21h
   372 000043F4 0FB6055DC2FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   373 000043FB E84BFEFFFF          <1>     call printTime.printMinutesAlt
   374 00004400 8A1532BCFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   375 00004406 B402                <1>     mov ah, 02h
   376 00004408 CD21                <1>     int 21h
   377 0000440A 0FB6054AC2FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   378 00004411 E835FEFFFF          <1>     call printTime.printMinutesAlt
   379 00004416 B22E                <1>     mov dl, "."
   380 00004418 B402                <1>     mov ah, 02h
   381 0000441A CD21                <1>     int 21h
   382 0000441C 0FB60537C2FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   383 00004423 E823FEFFFF          <1>     call printTime.printMinutesAlt
   384                              <1>     return
    13                              <2> %%_ret:
    14 00004428 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   385                              <1> getTime:
   386 00004429 B42C                <1>     mov ah, 2Ch ;DOS get time
   387 0000442B CD21                <1>     int 21h
   388                              <1>     ;CH = hour (0-23)
   389                              <1> 	;CL = minutes (0-59)
   390                              <1> 	;DH = seconds (0-59)
   391                              <1> 	;DL = hundredths (0-99)
   392 0000442D 880D25C2FFFF        <1>     mov byte [td1], cl
   393 00004433 882D20C2FFFF        <1>     mov byte [td2], ch
   394 00004439 88151BC2FFFF        <1>     mov byte [td3], dl
   395 0000443F 883516C2FFFF        <1>     mov byte [td4], dh
   396                              <1>     return
    13                              <2> %%_ret:
    14 00004445 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   397                              <1> 
   398                              <1> printFmtDate:
   399                              <1> ;Outputs the formatted date
   400 00004446 B8002A0000          <1>     mov eax, 2A00h ;DOS get date
   401 0000444B CD21                <1>     int 21h
   402                              <1> 	;AL = day of the week (0=Sunday)
   403                              <1> 	;CX = year (1980-2099)
   404                              <1> 	;DH = month (1-12)
   405                              <1> 	;DL = day (1-31)
   406 0000444D 6681E9BC07          <1>     sub cx, 1980    ;Subtract 1980 from cx
   407 00004452 66890DFFC1FFFF      <1>     mov word [td1], cx
   408 00004459 8815FBC1FFFF        <1>     mov byte [td3], dl
   409 0000445F 8835F6C1FFFF        <1>     mov byte [td4], dh
   410 00004465 0FB6C0              <1>     movzx eax, al
   411 00004468 89C3                <1>     mov ebx, eax
   412 0000446A D1E3                <1>     shl ebx, 1   ;Multiply by 2
   413 0000446C 01D8                <1>     add eax, ebx ;Make it 3 times 
   414 0000446E 488D1523C6FFFF      <1>     lea rdx, dayName
   415 00004475 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   416 00004479 B903000000          <1>     mov ecx, 3  ;Print three chars
   417 0000447E BB01000000          <1>     mov ebx, 1  ;STDOUT
   418 00004483 B440                <1>     mov ah, 40h ;Write to handle
   419 00004485 CD21                <1>     int 21h
   420 00004487 B220                <1>     mov dl, " "
   421 00004489 E8F9FEFFFF          <1>     call outChar
   422                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   423                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   424                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   425 0000448E 0FB705C3C1FFFF      <1>     movzx eax, word [td1]   ;Get this word
   426 00004495 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   427 00004498 0FB61DBCC1FFFF      <1>     movzx ebx, byte [td4]
   428 0000449F C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   429 000044A2 09D8                <1>     or eax, ebx ;Add this date to eax
   430 000044A4 0FB61DAFC1FFFF      <1>     movzx ebx, byte [td3]
   431 000044AB 09D8                <1>     or eax, ebx
   432 000044AD BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   433 000044B2 E810FCFFFF          <1>     call printDate
   434                              <1>     return
    13                              <2> %%_ret:
    14 000044B7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   435                              <1> 
   436                              <1> 
   437                              <1> hexToBCD:
   438                              <1> ;Converts a Hex byte into two BCD digits
   439                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   440 000044B8 51                  <1>     push rcx
   441 000044B9 0FB6C0              <1>     movzx eax, al   ;Zero extend
   442 000044BC 31C9                <1>     xor ecx, ecx
   443                              <1> .htb0:
   444 000044BE 3D0A000000          <1>     cmp eax, 10
   445 000044C3 7209                <1>     jb .htb1
   446 000044C5 2D0A000000          <1>     sub eax, 10
   447 000044CA FFC1                <1>     inc ecx
   448 000044CC EBF0                <1>     jmp short .htb0
   449                              <1> .htb1:
   450 000044CE C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   451 000044D1 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   452 000044D3 59                  <1>     pop rcx
   453 000044D4 C3                  <1>     ret
   454                              <1> 
   455                              <1> printPackedBCD:
   456                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   457                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   458                              <1> ;Preserves all registers
   459 000044D5 50                  <1>     push rax
   460 000044D6 52                  <1>     push rdx
   461 000044D7 88C4                <1>     mov ah, al
   462 000044D9 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   463 000044DB 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   464 000044DE 7508                <1>     jnz .upperNybble
   465 000044E0 B220                <1>     mov dl, " "
   466 000044E2 B402                <1>     mov ah, 02h
   467 000044E4 CD21                <1>     int 21h
   468 000044E6 EB0E                <1>     jmp short .lowerNybble
   469                              <1> .upperNybble:
   470 000044E8 50                  <1>     push rax
   471 000044E9 C0EC04              <1>     shr ah, 4
   472 000044EC 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   473 000044EF 88E2                <1>     mov dl, ah
   474 000044F1 B402                <1>     mov ah, 02h ;Print DL
   475 000044F3 CD21                <1>     int 21h
   476 000044F5 58                  <1>     pop rax
   477                              <1> .lowerNybble:
   478 000044F6 0430                <1>     add al, "0"
   479 000044F8 88C2                <1>     mov dl, al
   480 000044FA B402                <1>     mov ah, 02h ;Print DL
   481 000044FC CD21                <1>     int 21h
   482 000044FE 5A                  <1>     pop rdx
   483 000044FF 58                  <1>     pop rax
   484                              <1>     return
    13                              <2> %%_ret:
    14 00004500 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   485                              <1> 
   486                              <1> setDrive:
   487                              <1> ;Input: dl = 0 based Drive number to set to
   488                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   489                              <1> ;AX trashed.
   490 00004501 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   491 00004503 CD21                <1>     int 21h 
   492 00004505 E803000000          <1>     call getCurrentDrive
   493 0000450A 38D0                <1>     cmp al, dl  ;Is this the same drive?
   494                              <1>     return
    13                              <2> %%_ret:
    14 0000450C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   495                              <1> getCurrentDrive:
   496                              <1> ;Returns the 0 based current drive in al
   497 0000450D B419                <1>     mov ah, 19h
   498 0000450F CD21                <1>     int 21h
   499                              <1>     return
    13                              <2> %%_ret:
    14 00004511 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> 
   501                              <1> strcpy:
   502                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   503                              <1> ;rsi -> Source
   504                              <1> ;rdi -> Destination
   505 00004512 51                  <1>     push rcx
   506 00004513 57                  <1>     push rdi
   507 00004514 4889F7              <1>     mov rdi, rsi
   508 00004517 E80F000000          <1>     call strlen ;Get the length of the string in rsi
   509 0000451C 5F                  <1>     pop rdi
   510 0000451D F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   511 0000451F 59                  <1>     pop rcx
   512                              <1>     return
    13                              <2> %%_ret:
    14 00004520 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   513                              <1> 
   514                              <1> strcpy2:
   515                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   516                              <1> ;rsi -> Source
   517                              <1> ;rdi -> Destination
   518 00004521 56                  <1>     push rsi
   519 00004522 57                  <1>     push rdi
   520 00004523 E8EAFFFFFF          <1>     call strcpy 
   521 00004528 5F                  <1>     pop rdi
   522 00004529 5E                  <1>     pop rsi
   523                              <1>     return
    13                              <2> %%_ret:
    14 0000452A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> strlen:
   526                              <1> ;Gets the length of a ASCIIZ string
   527                              <1> ;Input: rdi = Source buffer
   528                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   529 0000452B 50                  <1>     push rax
   530 0000452C B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   531 00004531 CD2F                <1>     int 2fh
   532 00004533 58                  <1>     pop rax
   533                              <1>     return
    13                              <2> %%_ret:
    14 00004534 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   534                              <1> 
   535                              <1> ucChar:
   536                              <1> ;Input: al = Char to uppercase
   537                              <1> ;Output: al = Adjusted char 
   538 00004535 53                  <1>     push rbx
   539 00004536 50                  <1>     push rax    ;Push the char twice on the stack
   540 00004537 B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   541 0000453C CD2F                <1>     int 2fh         ;Returns the processed char in al
   542 0000453E 5B                  <1>     pop rbx         ;Pop the old word off the stack
   543 0000453F 5B                  <1>     pop rbx
   544                              <1>     return
    13                              <2> %%_ret:
    14 00004540 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   545                              <1> 
   546                              <1> normalisePath:
   547                              <1> ;Uppercases chars and flips pathseps
   548                              <1> ;Input: rsi -> Path to normalise
   549 00004541 50                  <1>     push rax
   550 00004542 57                  <1>     push rdi
   551 00004543 4889F7              <1>     mov rdi, rsi
   552 00004546 B811120000          <1>     mov eax, 1211h
   553 0000454B CD2F                <1>     int 2fh
   554 0000454D 5F                  <1>     pop rdi
   555 0000454E 58                  <1>     pop rax
   556                              <1>     return
    13                              <2> %%_ret:
    14 0000454F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   557                              <1> 
   558                              <1> skipDelimiters:
   559                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   560                              <1> ; command delimiters but a subset thereof. 
   561                              <1> ;These are the same across all codepages.
   562                              <1> ;Input: rsi must point to the start of the data string
   563                              <1> ;Output: rsi points to the first non-delimiter char
   564 00004550 50                  <1>     push rax
   565                              <1> .l1:
   566 00004551 AC                  <1>     lodsb
   567 00004552 E807000000          <1>     call isALdelimiter
   568 00004557 74F8                <1>     jz .l1
   569                              <1> .exit:
   570 00004559 58                  <1>     pop rax
   571 0000455A 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   572                              <1>     return
    13                              <2> %%_ret:
    14 0000455D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   573                              <1> 
   574                              <1> isALdelimiter:
   575                              <1> ;Returns: ZF=NZ if al is not a command separator 
   576                              <1> ;         ZF=ZE if al is a command separator
   577 0000455E 3C20                <1>     cmp al, " "
   578                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004560 74(5D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   579 00004562 3C3B                <1>     cmp al, ";"
   580                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004564 74(5D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   581 00004566 3C3D                <1>     cmp al, "="
   582                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004568 74(5D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   583 0000456A 3C2C                <1>     cmp al, ","
   584                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000456C 74(5D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   585 0000456E 3C09                <1>     cmp al, TAB
   586                              <1>     return
    13                              <2> %%_ret:
    14 00004570 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   587                              <1> 
   588                              <1> clearCommandState:
   589                              <1> ;Clears the command state
   590 00004571 488D3D2BBBFFFF      <1>     lea rdi, cmdStatePtr
   591 00004578 B907000000          <1>     mov ecx, cmdStateL
   592 0000457D 31C0                <1>     xor eax, eax
   593 0000457F F3AA                <1>     rep stosb
   594                              <1>     return
    13                              <2> %%_ret:
    14 00004581 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   595                              <1> 
   596                              <1> clearCommandLineState:
   597                              <1> ;Clears the command line state after a 0Dh encountered
   598 00004582 488D3D0FBBFFFF      <1>     lea rdi, cmdLineStatePtr
   599 00004589 B912000000          <1>     mov ecx, cmdLineStateL
   600 0000458E 31C0                <1>     xor eax, eax
   601 00004590 F3AA                <1>     rep stosb
   602 00004592 C705FDBAFFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   602 0000459B FF                  <1>
   603 0000459C C705F9BAFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   603 000045A5 FF                  <1>
   604                              <1> ;Close all handles from 5->MAX
   605 000045A6 0FB70D7ABAFFFF      <1>     movzx ecx, word [numHdls]
   606 000045AD BB05000000          <1>     mov ebx, 5
   607                              <1> .lp:
   608 000045B2 B43E                <1>     mov ah, 3Eh ;File close
   609 000045B4 CD21                <1>     int 21h
   610 000045B6 FFC3                <1>     inc ebx ;Goto next file
   611 000045B8 39CB                <1>     cmp ebx, ecx
   612 000045BA 76F6                <1>     jbe .lp    ;Keep looping whilst below or equal
   613                              <1>     return
    13                              <2> %%_ret:
    14 000045BC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   614                              <1> 
   615                              <1> asciiFilenameToFCB:
   616                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   617                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   618                              <1> ;Also doesn't check if chars are valid
   619                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   620                              <1> ;Name is space padded.
   621                              <1> ;Input: rsi = ASCII string buffer
   622                              <1> ;       rdi = FCB name buffer
   623                              <1> ;Output: al = Char that terminated the source string 
   624 000045BD 53                  <1>     push rbx    
   625 000045BE 57                  <1>     push rdi
   626 000045BF B90B000000          <1>     mov ecx, 11
   627 000045C4 B020                <1>     mov al, " "
   628 000045C6 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   629 000045C8 5F                  <1>     pop rdi
   630 000045C9 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   631                              <1>     ;Preprocess for Dir Searches
   632 000045CC 803E2E              <1>     cmp byte [rsi], "."
   633 000045CF 7509                <1>     jne .processName
   634 000045D1 A4                  <1>     movsb   ;Store the first dot
   635 000045D2 803E2E              <1>     cmp byte [rsi], "."
   636 000045D5 752C                <1>     jne .exitBadChar
   637 000045D7 A4                  <1>     movsb
   638 000045D8 EB29                <1>     jmp short .exitBadChar
   639                              <1> .processName:
   640 000045DA AC                  <1>     lodsb   ;Get the char in al
   641 000045DB 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   642 000045DD 7426                <1>     jz .exit
   643 000045DF 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   644 000045E1 7407                <1>     je .extSpace
   645 000045E3 3C2E                <1>     cmp al, "."
   646 000045E5 740C                <1>     je .ext
   647 000045E7 AA                  <1>     stosb   ;Store the char
   648 000045E8 EBF0                <1>     jmp short .processName
   649                              <1> .extSpace:
   650                              <1> ;Now we scan for a period in the name
   651 000045EA AC                  <1>     lodsb   ;Get a char and increase rsi
   652 000045EB 84C0                <1>     test al, al
   653 000045ED 7416                <1>     jz .exit
   654 000045EF 3C2E                <1>     cmp al, "."     ;If al is not a period...
   655 000045F1 75F7                <1>     jne .extSpace   ; keep searching
   656                              <1> .ext:
   657 000045F3 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   658                              <1> .processExt:
   659 000045F7 AC                  <1>     lodsb
   660 000045F8 84C0                <1>     test al, al
   661 000045FA 7409                <1>     jz .exit
   662 000045FC 3C20                <1>     cmp al, " "
   663 000045FE 7405                <1>     je .exit
   664 00004600 AA                  <1>     stosb
   665 00004601 EBF4                <1>     jmp short .processExt
   666                              <1> .exitBadChar:
   667 00004603 30C0                <1>     xor al, al  ;Return a null terminator
   668                              <1> .exit:
   669 00004605 5B                  <1>     pop rbx
   670                              <1>     return
    13                              <2> %%_ret:
    14 00004606 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   671                              <1> 
   672                              <1> findLastPathComponant:
   673                              <1> ;Finds the last path componant of an ASCIIZ path string
   674                              <1> ;Input: rdi -> Head of the path to find last componant on
   675                              <1> ;Output: rdi -> Start of the last componant
   676 00004607 50                  <1>     push rax
   677 00004608 51                  <1>     push rcx
   678 00004609 31C9                <1>     xor ecx, ecx
   679 0000460B FFC9                <1>     dec ecx
   680 0000460D 31C0                <1>     xor eax, eax
   681 0000460F F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   682 00004611 F7D1                <1>     not ecx     ;This gets the count of chars  
   683 00004613 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   684 00004616 8A050DBAFFFF        <1>     mov al, byte [pathSep]
   685 0000461C FD                  <1>     std
   686 0000461D F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   687 0000461F FC                  <1>     cld
   688 00004620 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   689 00004622 48FFC7              <1>     inc rdi     ;Point at pathsep
   690                              <1> .exit:
   691 00004625 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   692 00004628 59                  <1>     pop rcx
   693 00004629 58                  <1>     pop rax
   694                              <1>     return
    13                              <2> %%_ret:
    14 0000462A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   695                              <1> 
   696                              <1> FCBToAsciiz:
   697                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   698                              <1> ;Name is space padded too
   699                              <1> ;Input: rsi = FCB name buffer
   700                              <1> ;       rdi = ASCIIZ string buffer
   701 0000462B B908000000          <1>     mov ecx, 8
   702 00004630 F3A4                <1>     rep movsb   ;Move the name over
   703                              <1> .scanNameSpace:
   704 00004632 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   705 00004636 750D                <1>     jne .ext
   706 00004638 48FFCF              <1>     dec rdi
   707 0000463B FFC1                <1>     inc ecx
   708 0000463D 81F908000000        <1>     cmp ecx, 8
   709 00004643 72ED                <1>     jb .scanNameSpace
   710                              <1> .ext:
   711 00004645 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   712 0000464A 7506                <1>     jne .validExt
   713 0000464C 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   714 00004650 7415                <1>     je .exit
   715                              <1> .validExt:
   716 00004652 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   717 00004654 AA                  <1>     stosb
   718 00004655 B903000000          <1>     mov ecx, 3
   719 0000465A F3A4                <1>     rep movsb   ;Move the three extension chars over
   720                              <1> .scanExtSpace:
   721 0000465C 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   722 00004660 7505                <1>     jne .exit
   723 00004662 48FFCF              <1>     dec rdi
   724 00004665 EBF5                <1>     jmp short .scanExtSpace
   725                              <1> .exit:
   726 00004667 31C0                <1>     xor eax, eax
   727 00004669 AA                  <1>     stosb   ;Store a null at the end
   728                              <1>     return
    13                              <2> %%_ret:
    14 0000466A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   729                              <1> 
   730                              <1> cpDelimOrCtrlStringToBufz:
   731                              <1> ;Copy a delimited or control char terminated string to a buffer
   732                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   733                              <1> ;       rdi -> Buffer to store null terminated string in
   734                              <1> ;Output: rsi -> First char past string end
   735                              <1> ;       rdi -> One char past null terminator on string buffer
   736 0000466B C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   737                              <1> .lp:
   738 0000466E AC                  <1>     lodsb
   739 0000466F 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here. CR included!
   740 00004671 760A                <1>     jbe .exit
   741 00004673 E8E6FEFFFF          <1>     call isALdelimiter
   742 00004678 7403                <1>     je .exit
   743 0000467A AA                  <1>     stosb
   744 0000467B EBF1                <1>     jmp short .lp
   745                              <1> .exit:
   746 0000467D 31C0                <1>     xor eax, eax
   747 0000467F AA                  <1>     stosb   ;Store a null terminator
   748                              <1>     return
    13                              <2> %%_ret:
    14 00004680 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   749                              <1> 
   750                              <1> 
   751                              <1> cpDelimPathToBufz:
   752                              <1> ;Copy a delimited path into buffer and null terminate.
   753                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   754                              <1> ;       rdi -> Buffer to store null terminated path in
   755                              <1> ;Output: rsi -> First char past pathname delimiter
   756                              <1> ;       rdi -> One char past null terminator on pathname buffer
   757 00004681 53                  <1>     push rbx
   758 00004682 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   759 00004685 C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   760                              <1> .lp:
   761 00004688 AC                  <1>     lodsb   ;Get the char
   762 00004689 3C0D                <1>     cmp al, CR
   763 0000468B 7412                <1>     je .gotRedirPath
   764 0000468D E8CCFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   765 00004692 740B                <1>     jz .gotRedirPath 
   766 00004694 3A0590B9FFFF        <1>     cmp al, byte [switchChar]
   767 0000469A 7403                <1>     je .gotRedirPath
   768 0000469C AA                  <1>     stosb   ;Store this char and loop next char
   769 0000469D EBE9                <1>     jmp short .lp
   770                              <1> .gotRedirPath:
   771 0000469F 50                  <1>     push rax    ;Save the char on stack
   772 000046A0 30C0                <1>     xor al, al  ;Get null terminator char
   773 000046A2 4829FB              <1>     sub rbx, rdi
   774 000046A5 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   775 000046AC 7412                <1>     je .notColon
   776 000046AE 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   777 000046B5 7409                <1>     je .notColon
   778 000046B7 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   779 000046BB 7503                <1>     jne .notColon
   780 000046BD 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   781                              <1> .notColon:
   782 000046C0 AA                  <1>     stosb   ;Store the null terminator for the redir path
   783 000046C1 58                  <1>     pop rax ;Get back the char in al
   784 000046C2 5B                  <1>     pop rbx
   785                              <1>     return
    13                              <2> %%_ret:
    14 000046C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   786                              <1> 
   787                              <1> buildCommandPath:
   788                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   789 000046C4 0FB605D9B9FFFF      <1>     movzx eax, byte [arg1Off]
   790 000046CB 4C8B053DB9FFFF      <1>     mov r8, [pspPtr]
   791 000046D2 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   792 000046D9 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   793                              <1> copyArgumentToSearchSpec:
   794                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   795                              <1> ; and null terminates
   796 000046DC 488D3DACBDFFFF      <1>     lea rdi, searchSpec
   797 000046E3 E899FFFFFF          <1>     call cpDelimPathToBufz
   798                              <1>     return
    13                              <2> %%_ret:
    14 000046E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   799                              <1> 
   800                              <1> scanForWildcards:
   801                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   802                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   803 000046E9 50                  <1>     push rax
   804 000046EA 56                  <1>     push rsi
   805                              <1> .lp:
   806 000046EB AC                  <1>     lodsb
   807 000046EC 3C3F                <1>     cmp al, "?"
   808 000046EE 740A                <1>     je .exit
   809 000046F0 3C2A                <1>     cmp al, "*"
   810 000046F2 7406                <1>     je .exit
   811 000046F4 84C0                <1>     test al, al
   812 000046F6 75F3                <1>     jnz .lp
   813 000046F8 FEC0                <1>     inc al  ;This will clear the ZF
   814                              <1> .exit:
   815 000046FA 5E                  <1>     pop rsi
   816 000046FB 58                  <1>     pop rax
   817                              <1>     return
    13                              <2> %%_ret:
    14 000046FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   818                              <1> 
   819                              <1> printDecimalWord:
   820                              <1> ;Takes qword in rax and print it's decimal representation
   821                              <1> ;Takes the qword in eax and prints its decimal representation
   822 000046FD 31C9                <1>     xor ecx, ecx
   823 000046FF 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   824 00004701 85C0                <1>     test eax, eax
   825 00004703 750C                <1>     jnz .notZero
   826 00004705 B930000000          <1>     mov ecx, "0"
   827 0000470A BD01000000          <1>     mov ebp, 1  ;Print one digit
   828 0000470F EB3E                <1>     jmp short .dpfb2
   829                              <1> .notZero:
   830 00004711 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   831 00004713 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   832                              <1> .dpfb0:
   833 00004718 FFC5                <1>     inc ebp
   834 0000471A 81FD08000000        <1>     cmp ebp, 8
   835 00004720 7206                <1>     jb .dpfb00
   836 00004722 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   837 00004726 EB04                <1>     jmp short .dpfb01
   838                              <1> .dpfb00:
   839 00004728 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   840                              <1> .dpfb01:
   841 0000472C 31D2                <1>     xor edx, edx
   842 0000472E 48F7F6              <1>     div rsi
   843 00004731 80C230              <1>     add dl, '0'
   844 00004734 80FA39              <1>     cmp dl, '9'
   845 00004737 7603                <1>     jbe .dpfb1
   846 00004739 80C207              <1>     add dl, 'A'-'0'-10
   847                              <1> .dpfb1:
   848 0000473C 81FD08000000        <1>     cmp ebp, 8
   849 00004742 7204                <1>     jb .dpfb10
   850 00004744 88D3                <1>     mov bl, dl ;Add the bottom bits
   851 00004746 EB02                <1>     jmp short .dpfb11
   852                              <1> .dpfb10:
   853 00004748 88D1                <1>     mov cl, dl    ;Save remainder byte
   854                              <1> .dpfb11:
   855 0000474A 4885C0              <1>     test rax, rax
   856 0000474D 75C9                <1>     jnz .dpfb0
   857                              <1> .dpfb2:
   858 0000474F 81FD08000000        <1>     cmp ebp, 8
   859 00004755 7208                <1>     jb .dpfb20
   860 00004757 88DA                <1>     mov dl, bl
   861 00004759 48C1EB08            <1>     shr rbx, 8
   862 0000475D EB06                <1>     jmp short .dpfb21
   863                              <1> .dpfb20:
   864 0000475F 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   865 00004761 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   866                              <1> .dpfb21:
   867 00004765 B402                <1>     mov ah, 02h
   868 00004767 CD21                <1>     int 21h
   869 00004769 FFCD                <1>     dec ebp
   870 0000476B 75E2                <1>     jnz .dpfb2
   871                              <1>     return
    13                              <2> %%_ret:
    14 0000476D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   872                              <1> 
   873                              <1> getDecimalWord:
   874                              <1> ;Works on MAX A dword in eax
   875                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   876 0000476E 31C9                <1>     xor ecx, ecx
   877 00004770 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   878 00004772 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   879                              <1> .dpfb0:
   880 00004777 FFC5                <1>     inc ebp
   881 00004779 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   882 0000477D 31D2                <1>     xor edx, edx
   883 0000477F 48F7F3              <1>     div rbx
   884 00004782 80C230              <1>     add dl, '0'
   885 00004785 80FA39              <1>     cmp dl, '9'
   886 00004788 7603                <1>     jbe .dpfb1
   887 0000478A 80C207              <1>     add dl, 'A'-'0'-10
   888                              <1> .dpfb1:
   889 0000478D 88D1                <1>     mov cl, dl    ;Save remainder byte
   890 0000478F 4885C0              <1>     test rax, rax
   891 00004792 75E3                <1>     jnz .dpfb0
   892                              <1>     return
    13                              <2> %%_ret:
    14 00004794 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   893                              <1> getByte:
   894                              <1> ;Indicates if the number obtained is larger than a byte by setting CF
   895 00004795 E807000000          <1>     call getNum
   896 0000479A 3D00010000          <1>     cmp eax, 100h
   897 0000479F F5                  <1>     cmc
   898                              <1>     return
    13                              <2> %%_ret:
    14 000047A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   899                              <1> getNum:
   900                              <1> ;Gets a number from a command line.
   901                              <1> ;Input: rsi -> String to get number from
   902                              <1> ;Output: rsi -> Char which terminated the accumulation
   903                              <1> ;        eax = Value of the string. May overflow if we read more than 9 chars...
   904                              <1> ;If an overflow, CF=CY. eax=Undefined. rsi-> Char 9
   905 000047A1 51                  <1>     push rcx
   906 000047A2 53                  <1>     push rbx
   907 000047A3 31DB                <1>     xor ebx, ebx
   908 000047A5 31C9                <1>     xor ecx, ecx    ;Start with a value of zero
   909 000047A7 31C0                <1>     xor eax, eax    
   910                              <1> .lp:
   911 000047A9 AC                  <1>     lodsb
   912 000047AA 3C30                <1>     cmp al, "0"
   913 000047AC 721B                <1>     jb .exit
   914 000047AE 3C39                <1>     cmp al, "9"
   915 000047B0 7717                <1>     ja .exit
   916 000047B2 2C30                <1>     sub al, "0"                     ;Convert to binary 
   917 000047B4 678D0C89            <1>     lea ecx, qword [4*ecx + ecx]    ;5*rcx
   918 000047B8 D1E1                <1>     shl ecx, 1                      ;2*(5*rcx)
   919 000047BA 01C1                <1>     add ecx, eax
   920 000047BC FFC3                <1>     inc ebx
   921 000047BE 81FB09000000        <1>     cmp ebx, 9
   922 000047C4 75E3                <1>     jne short .lp   ;Get next digit
   923 000047C6 F9                  <1>     stc             ;Yikesaroony
   924 000047C7 EB01                <1>     jmp short .exitBad
   925                              <1> .exit:
   926 000047C9 F8                  <1>     clc             ;Clear CF
   927                              <1> .exitBad:
   928 000047CA 89C8                <1>     mov eax, ecx
   929 000047CC 5B                  <1>     pop rbx
   930 000047CD 59                  <1>     pop rcx
   931 000047CE 48FFCE              <1>     dec rsi         ;dec doesnt affect CF 
   932                              <1>     return
    13                              <2> %%_ret:
    14 000047D1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   933                              <1> 
   934                              <1> 
   935                              <1> freezePC:
   936 000047D2 488D1582C6FFFF      <1>     lea rdx, memBad1
   937 000047D9 B409                <1>     mov ah, 09h
   938 000047DB CD21                <1>     int 21h
   939                              <1> .altEP:
   940 000047DD 488D15A0C6FFFF      <1>     lea rdx, memBad3
   941 000047E4 B409                <1>     mov ah, 09h
   942 000047E6 CD21                <1>     int 21h
   943                              <1> .lp:
   944 000047E8 F390                <1>     pause
   945 000047EA F4                  <1>     hlt
   946 000047EB EBFB                <1>     jmp short .lp
   947                              <1> 
   948                              <1> setDTA:
   949 000047ED 50                  <1>     push rax
   950 000047EE 52                  <1>     push rdx
   951 000047EF 488D151FB9FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   952 000047F6 B8001A0000          <1>     mov eax, 1A00h
   953 000047FB CD21                <1>     int 21h
   954 000047FD 5A                  <1>     pop rdx
   955 000047FE 58                  <1>     pop rax
   956                              <1>     return
    13                              <2> %%_ret:
    14 000047FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   957                              <1> 
   958                              <1> getDTA:
   959 00004800 488D150EB9FFFF      <1>     lea rdx, cmdFFBlock
   960                              <1>     return
    13                              <2> %%_ret:
    14 00004807 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   961                              <1> 
   962                              <1> resetIDTentries:
   963                              <1> ;Resets the IDT entries if they were changed by dead child process
   964 00004808 488D1571020000      <1>     lea rdx, critErrorHandler
   965 0000480F B824250000          <1>     mov eax, 2524h
   966 00004814 CD21                <1>     int 21h
   967 00004816 488D1577010000      <1>     lea rdx, ctrlCHandler
   968 0000481D B823250000          <1>     mov eax, 2523h
   969 00004822 CD21                <1>     int 21h
   970 00004824 488D1518CDFFFF      <1>     lea rdx, appRet
   971 0000482B B822250000          <1>     mov eax, 2522h
   972 00004830 CD21                <1>     int 21h
   973                              <1>     return
    13                              <2> %%_ret:
    14 00004832 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   974                              <1> 
   975                              <1> ;-------------------------------
   976                              <1> ; Environment utility functions
   977                              <1> ;-------------------------------
   978                              <1> 
   979                              <1> cmpEnvVar:
   980                              <1> ;Checks that we have found the environment variable we are looking for.
   981                              <1> ;Input: rsi -> Environment var to verify the name of
   982                              <1> ;       rdi -> Environment var name to compare against
   983                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
   984 00004833 56                  <1>     push rsi
   985 00004834 57                  <1>     push rdi
   986 00004835 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs
   987                              <1> .lp:
   988 00004838 AC                  <1>     lodsb               ;Pick up from user string
   989 00004839 E8F7FCFFFF          <1>     call ucChar         ;Upper case it!
   990 0000483E 3807                <1>     cmp byte [rdi], al  
   991 00004840 7509                <1>     jne .exit
   992 00004842 3C3D                <1>     cmp al, "="         ;Are we at the end?
   993 00004844 7405                <1>     je .exit
   994 00004846 48FFC7              <1>     inc rdi
   995 00004849 EBED                <1>     jmp short .lp
   996                              <1> .exit:
   997 0000484B 5F                  <1>     pop rdi
   998 0000484C 5E                  <1>     pop rsi
   999                              <1>     return
    13                              <2> %%_ret:
    14 0000484D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1000                              <1> 
  1001                              <1> checkEnvGoodAndGet:
  1002                              <1> ;Gets the env ptr and checks that it is double null terminated.
  1003                              <1> ;Output:
  1004                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
  1005                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
  1006                              <1> ;           rsi -> Environment pointer
  1007 0000484E 50                  <1>     push rax
  1008 0000484F 51                  <1>     push rcx
  1009 00004850 57                  <1>     push rdi
  1010 00004851 4150                <1>     push r8
  1011 00004853 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
  1012 00004857 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
  1013 0000485A 741A                <1>     jz .badExit
  1014 0000485C 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
  1015 0000485F C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
  1016                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
  1017 00004862 31C0                <1>     xor eax, eax
  1018                              <1> .pathNulScan:
  1019 00004864 F2AE                <1>     repne scasb
  1020 00004866 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
  1021 00004868 740C                <1>     jz .badExit
  1022 0000486A 3807                <1>     cmp byte [rdi], al  ;Is char two null?
  1023 0000486C 75F6                <1>     jne .pathNulScan    ;If not, keep searching
  1024 0000486E 31C0                <1>     xor eax, eax
  1025 00004870 FFC0                <1>     inc eax ;Clear the ZF
  1026 00004872 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
  1027                              <1> .badExit:
  1028 00004876 4158                <1>     pop r8
  1029 00004878 5F                  <1>     pop rdi
  1030 00004879 59                  <1>     pop rcx
  1031 0000487A 58                  <1>     pop rax
  1032                              <1>     return
    13                              <2> %%_ret:
    14 0000487B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1033                              <1> 
  1034                              <1> 
  1035                              <1> findEnvSpace:
  1036                              <1> ;Searches the environment for space, returns a pointer to the start of the 
  1037                              <1> ; free space in the pointer and a count of free space in the environment.
  1038                              <1> ;If count is zero, pointer is not to be used.
  1039                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
  1040 0000487C 31C9                <1>     xor ecx, ecx
  1041 0000487E 31C0                <1>     xor eax, eax    ;Clear eax too
  1042 00004880 51                  <1>     push rcx
  1043 00004881 E8C8FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
  1044 00004886 59                  <1>     pop rcx
  1045                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004887 74(7B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1046 00004889 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
  1047 0000488D FFC9                <1>     dec ecx ;Make into a large counter
  1048 0000488F 4889F7              <1>     mov rdi, rsi    
  1049                              <1> .endsearch:
  1050 00004892 F2AE                <1>     repne scasb ;Scan
  1051 00004894 803F00              <1>     cmp byte [rdi], 0
  1052 00004897 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
  1053                              <1>     ;Here we are at the end of the environment
  1054 00004899 F7D9                <1>     neg ecx
  1055 0000489B FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
  1056 0000489D 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
  1057 000048A0 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
  1058 000048A3 29C8                <1>     sub eax, ecx
  1059 000048A5 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
  1060                              <1>     return
    13                              <2> %%_ret:
    14 000048A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1061                              <1> 
  1062                              <1> searchForEnvVar:
  1063                              <1> ;Gets the environment, and scans it for a string with the var specified.
  1064                              <1> ;Input: rdi -> Var name to look for.
  1065                              <1> ;Returns: CF=NC: rsi -> Env var in env.
  1066 000048A8 57                  <1>     push rdi
  1067 000048A9 51                  <1>     push rcx
  1068 000048AA 52                  <1>     push rdx
  1069 000048AB 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1070 000048AF 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
  1071                              <1> .varLp:
  1072 000048B2 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
  1073 000048B5 E879FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1074 000048BA 7416                <1>     je .varFound
  1075 000048BC 31C0                <1>     xor eax, eax        ;Search for a null
  1076 000048BE 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1077 000048C1 B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1078 000048C6 F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1079 000048C8 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1080 000048CA 7405                <1>     je .varNotFound     ;If second null, no more env to search!
  1081 000048CC 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1082 000048CF EBE1                <1>     jmp short .varLp    ;And scan again!
  1083                              <1> .varNotFound:
  1084 000048D1 F9                  <1>     stc
  1085                              <1> .varFound:
  1086 000048D2 59                  <1>     pop rcx
  1087 000048D3 5A                  <1>     pop rdx
  1088 000048D4 5F                  <1>     pop rdi
  1089                              <1>     return
    13                              <2> %%_ret:
    14 000048D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1090                              <1> 
  1091                              <1> envFree:
  1092                              <1> ;Frees a variable from the environment, pulls the strings behind it up
  1093                              <1> ; zeros the rest of the environment, and returns a pointer to the first
  1094                              <1> ; free byte of the environment!
  1095                              <1> ;Input: rsi -> Variable to free.
  1096                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
  1097                              <1> ;        ecx = Number of free bytes in env
  1098 000048D6 4889F7              <1>     mov rdi, rsi
  1099 000048D9 31C0                <1>     xor eax, eax
  1100                              <1> .freeLp:
  1101 000048DB 803F00              <1>     cmp byte [rdi], 0
  1102 000048DE 7403                <1>     je .exitLp
  1103 000048E0 AA                  <1>     stosb
  1104 000048E1 EBF8                <1>     jmp short .freeLp
  1105                              <1> .exitLp:
  1106                              <1> ;rdi points to the terminating null of the var we just deleted
  1107                              <1> ;rsi points to the start of the free space
  1108 000048E3 4887F7              <1>     xchg rsi, rdi   ;Swap em!
  1109 000048E6 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
  1110 000048EB 7504                <1>     jne .prepPullup
  1111 000048ED 31C0                <1>     xor eax, eax
  1112 000048EF EB0E                <1>     jmp short .cleanEnv
  1113                              <1> .prepPullup:
  1114 000048F1 48FFC6              <1>     inc rsi         ;Go past the terminating null!
  1115                              <1> .pullUp:
  1116 000048F4 AC                  <1>     lodsb
  1117 000048F5 AA                  <1>     stosb
  1118 000048F6 84C0                <1>     test al, al ;Did we pick up a zero
  1119 000048F8 75FA                <1>     jne .pullUp ;If not, keep copying
  1120 000048FA 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
  1121 000048FD 75F5                <1>     jne .pullUp
  1122                              <1> ;We are at the end of the copy!
  1123                              <1> .cleanEnv:
  1124 000048FF AA                  <1>     stosb   ;Store the famous second null
  1125 00004900 48FFCF              <1>     dec rdi ;without incrementing it!!
  1126 00004903 E807000000          <1>     call getFreeSpace
  1127 00004908 31C0                <1>     xor eax, eax
  1128 0000490A 51                  <1>     push rcx
  1129 0000490B F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
  1130 0000490D 59                  <1>     pop rcx
  1131                              <1>     return
    13                              <2> %%_ret:
    14 0000490E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1132                              <1> 
  1133                              <1> getFreeSpace:
  1134                              <1> ;Output: ecx = Number of free bytes in the environment block
  1135 0000490F 56                  <1>     push rsi
  1136 00004910 57                  <1>     push rdi
  1137 00004911 E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
  1138 00004916 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1139 0000491A 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
  1140 0000491D E805000000          <1>     call getEnvSize ;Get total block size
  1141 00004922 29F9                <1>     sub ecx, edi    ;Get difference!
  1142 00004924 5F                  <1>     pop rdi
  1143 00004925 5E                  <1>     pop rsi
  1144                              <1>     return
    13                              <2> %%_ret:
    14 00004926 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1145                              <1> 
  1146                              <1> getEnvSize:
  1147                              <1> ;Gets the number of bytes in the environment allocation
  1148                              <1> ;Output: ecx = Number of bytes in the environment!
  1149 00004927 53                  <1>     push rbx
  1150 00004928 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
  1151 0000492C 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
  1152 0000492F C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
  1153 00004932 5B                  <1>     pop rbx
  1154                              <1>     return
    13                              <2> %%_ret:
    14 00004933 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1155                              <1> 
  1156                              <1> getPtrToEndOfEnv:
  1157                              <1> ;Gets ptr to end of the environment
  1158                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
  1159 00004934 50                  <1>     push rax
  1160 00004935 51                  <1>     push rcx
  1161 00004936 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
  1162 0000493A 31C0                <1>     xor eax, eax
  1163 0000493C 31C9                <1>     xor ecx, ecx
  1164 0000493E FFC9                <1>     dec ecx
  1165                              <1> .lp:
  1166 00004940 F2AE                <1>     repne scasb
  1167 00004942 3807                <1>     cmp byte [rdi], al
  1168 00004944 75FA                <1>     jne .lp
  1169 00004946 59                  <1>     pop rcx
  1170 00004947 58                  <1>     pop rax
  1171                              <1>     return
    13                              <2> %%_ret:
    14 00004948 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1172                              <1> 
  1173                              <1> growEnvBlock:
  1174                              <1> ;Attempts to grow the environment to store the new string. Will clean the
  1175                              <1> ; newly allocated 160 byte block of the environment.
  1176                              <1> ;Returns:   CF=NC - Environment grown ok!
  1177                              <1> ;           CF=CY & ZF=ZE - Environment at max size
  1178                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
  1179 00004949 50                  <1>     push rax
  1180 0000494A 53                  <1>     push rbx
  1181 0000494B 51                  <1>     push rcx
  1182 0000494C 56                  <1>     push rsi
  1183 0000494D 57                  <1>     push rdi
  1184 0000494E E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
  1185 00004953 E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
  1186 00004958 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1187 0000495C 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
  1188 0000495F 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
  1189 00004965 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
  1190 0000496B 7321                <1>     jae .tooLarge
  1191                              <1>     ;Here ZF must be NZ.
  1192 0000496D 4150                <1>     push r8
  1193 0000496F 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
  1194 00004973 B8004A0000          <1>     mov eax, 4A00h
  1195 00004978 CD21                <1>     int 21h
  1196 0000497A 4158                <1>     pop r8
  1197 0000497C 720A                <1>     jc .exit
  1198                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1199                              <1>     ; so we add 160 zeros to the count of bytes
  1200 0000497E 81C1A0000000        <1>     add ecx, 0A0h
  1201 00004984 31C0                <1>     xor eax, eax
  1202 00004986 F3AA                <1>     rep stosb
  1203                              <1> .exit:
  1204 00004988 5F                  <1>     pop rdi
  1205 00004989 5E                  <1>     pop rsi
  1206 0000498A 59                  <1>     pop rcx
  1207 0000498B 5B                  <1>     pop rbx
  1208 0000498C 58                  <1>     pop rax
  1209                              <1>     return
    13                              <2> %%_ret:
    14 0000498D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1210                              <1> .tooLarge:
  1211 0000498E 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1212 00004991 F9                  <1>     stc             ;Set CF
  1213 00004992 EBF4                <1>     jmp short .exit
    20                                  %include "./Source/int23h.asm"
     1                              <1> ctrlCHandler:
     2 00004994 F605F9B6FFFF80      <1>     test byte [statFlg1], inLdr     ;Are we loading?
     3 0000499B 7411                <1>     jz .notLoading
     4 0000499D F605F0B6FFFF40      <1>     test byte [statFlg1], inLdrDT   ;Are we in date/time?
     5 000049A4 7439                <1>     jz  .inInt23                    ;IRETQ if not.
     6                              <1>     ;Else, we pretend nothing was typed in and proceed.
     7 000049A6 66C74201000D        <1>     mov word [rdx + 1], 0D00h       ;Place a 0 chars cnt and CR in the buffer
     8 000049AC EB12                <1>     jmp short .retFromDosCall       ;And return directly to DOS
     9                              <1> .notLoading:
    10 000049AE F605DFB6FFFF02      <1>     test byte [statFlg1], inCtrlC   ;In this handler already?
    11 000049B5 742A                <1>     jz .notNested                   ;If not, handle!
    12                              <1> ;We are in this CTRL+C, check the system call that we are interrupting...
    13                              <1> ;If a CON call, we are in Terminate Batch Job msg. Set CF to indicate
    14                              <1> ; to US that the user CTRL+C'd the Terminate Batch Job message! Return
    15                              <1> ; from DOS directly, do not reenter CON call.
    16 000049B7 84E4                <1>     test ah, ah
    17 000049B9 7424                <1>     jz .inInt23 
    18 000049BB 80FC0C              <1>     cmp ah, 0Ch
    19 000049BE 771F                <1>     ja .inInt23
    20                              <1> .retFromDosCall:
    21                              <1> ;Go past the Int 23h stack frame to the entry to Int 21h stack frame
    22 000049C0 50                  <1>     push rax
    23 000049C1 488D0512000000      <1>     lea rax, .i23Bounce
    24 000049C8 4889442408          <1>     mov qword [rsp + 8], rax        ;Store as ret add
    25 000049CD 31C0                <1>     xor eax, eax
    26 000049CF 668CC8              <1>     mov ax, cs
    27 000049D2 4889442410          <1>     mov qword [rsp + 2*8], rax      ;Store the segment too
    28 000049D7 58                  <1>     pop rax
    29 000049D8 48CF                <1>     iretq   ;Iretq to the next instruction instead of DOS :)
    30                              <1> .i23Bounce:
    31 000049DA 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on stack frame flags!
    32                              <1> .inInt23:
    33 000049DF 48CF                <1>     iretq
    34                              <1> .notNested:
    35                              <1> ;Main body of the CRTL+C handler! 
    36 000049E1 800DACB6FFFF02      <1>     or byte [statFlg1], inCtrlC     ;Set that we are in CTRL+C
    37 000049E8 F605A5B6FFFF04      <1>     test byte [statFlg1], inSingle  ;Are we in single command mode?
    38 000049EF 7509                <1>     jnz .skipReset                  
    39                              <1>     ;Now reset the disk subsystem to flush buffers appropriately,
    40                              <1>     ; in case of open files and/or we are hooked by someone who doesn't
    41                              <1>     ; want to return thru dos.
    42 000049F1 50                  <1>     push rax
    43 000049F2 B8000D0000          <1>     mov eax, 0D00h  ;Reset Disk system!
    44 000049F7 CD21                <1>     int 21h
    45 000049F9 58                  <1>     pop rax
    46                              <1> .skipReset:
    47 000049FA F60593B6FFFF08      <1>     test byte [statFlg1], inBatch   ;Are we processing a batch file?
    48 00004A01 7462                <1>     jz .notBat
    49 00004A03 F6058AB6FFFF04      <1>     test byte [statFlg1], inSingle  ;Batch in a single command?
    50 00004A0A 7559                <1>     jnz .notBat                     ;No batch cleanup, kill ourselves!
    51                              <1> ;CTRLC in a batch file will always abort the current command being 
    52                              <1> ; executed. CTRLC in a batch file is only for checking if we want to 
    53                              <1> ; terminate the whole batch procedure or not!
    54 00004A0C E87B020000          <1>     call errSwapHdls    ;Swap STDIO back ONLY ON BATCH Error
    55                              <1> .ynLp:
    56 00004A11 488D15E5BEFFFF      <1>     lea rdx, batFail
    57 00004A18 E8FAF8FFFF          <1>     call printString
    58 00004A1D 488D15DDB6FFFF      <1>     lea rdx, batYNstr
    59 00004A24 66C74202200D        <1>     mov word [rdx + 2], 0D20h   ;Space and a CR char
    60 00004A2A B80A0C0000          <1>     mov eax, 0C0Ah      ;Get clean buffered input!
    61 00004A2F CD21                <1>     int 21h
    62 00004A31 7221                <1>     jc .nestKill         ;If we CTRL+C during this call, kill batch!
    63 00004A33 8A4202              <1>     mov al, byte [rdx + 2]
    64 00004A36 E8FAFAFFFF          <1>     call ucChar         ;UC using DOS
    65 00004A3B 3C59                <1>     cmp al, "Y"
    66 00004A3D 740E                <1>     je .killBat
    67 00004A3F 3C4E                <1>     cmp al, "N"
    68 00004A41 75CE                <1>     jne .ynLp
    69                              <1> .endBat:
    70                              <1> ;Tries to abort the Command interpreter, fails and 
    71                              <1> ; our internal state will proceed with batch processing. Doing this 
    72                              <1> ; ensures the command being interrupted is cancelled.
    73 00004A43 E8C8F8FFFF          <1>     call printCRLF
    74 00004A48 E923000000          <1>     jmp .exitBat    ;Clears errRetHdls and in ctrlc flag and exits!
    75                              <1> .killBat:   ;Now we need to terminate the batch file too.
    76 00004A4D E8F0D3FFFF          <1>     call batCleanup
    77 00004A52 EBEF                <1>     jmp short .endBat   ;Now CRLF and exit!
    78                              <1> .nestKill:
    79 00004A54 E8E9D3FFFF          <1>     call batCleanup
    80 00004A59 802534B6FFFFFD      <1>     and byte [statFlg1], ~inCtrlC   
    81 00004A60 E95BFFFFFF          <1>     jmp .retFromDosCall ;Nested kill needs to be handled like other nestings
    82                              <1> .notBat:
    83 00004A65 66813D28B6FFFFFFFF  <1>     cmp word [errHdls], -1  ;If these are not -1, return to normal!
    84 00004A6E 7405                <1>     je .exit
    85                              <1> .exitBat:
    86 00004A70 E834020000          <1>     call errRetHdls 
    87                              <1> .exit:
    88 00004A75 802518B6FFFFFD      <1>     and byte [statFlg1], ~inCtrlC
    89                              <1> .exitIn:
    90 00004A7C F9                  <1>     stc     ;Set CF to kill the task
    91 00004A7D C20800              <1>     ret 8   ;Return and adjust rsp stack to indicate we wanna kill task
    92                              <1> ;All we need is that the stack pointer is not at the address we had it
    93                              <1> ; at when we entered DOS to trigger a CF check! So anything from ret 8 to
    94                              <1> ; ret 4*8 to remove CS, RFLAGS, SS, RSP is acceptable and safe!
    21                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00004A80 53                  <1>     push rbx
    25 00004A81 51                  <1>     push rcx
    26 00004A82 52                  <1>     push rdx
    27 00004A83 57                  <1>     push rdi
    28 00004A84 56                  <1>     push rsi
    29 00004A85 E802020000          <1>     call errSwapHdls
    30 00004A8A FC                  <1>     cld         ;Make String ops go forward
    31 00004A8B 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00004A8E 488D150BBEFFFF      <1>     lea rdx, crlf
    33 00004A95 E87DF8FFFF          <1>     call printString    ;Trashes ax
    34 00004A9A 0FB7FF              <1>     movzx edi, di                   ;Clear the upper word.
    35                              <1> 
    36 00004A9D 53                  <1>     push rbx        ;Save the action bitfield
    37 00004A9E 56                  <1>     push rsi        ;Save the driver pointer
    38 00004A9F B800590000          <1>     mov eax, 5900h  ;Get Extended Error
    39 00004AA4 CD21                <1>     int 21h
    40                              <1> ;DOS placed the following values in the following regs:
    41                              <1> ;ax = word [errorExCde]
    42                              <1> ;ch = byte [errorLocus]
    43                              <1> ;bh = byte [errorClass]
    44                              <1> ;bl = byte [errorAction]
    45                              <1> ;rdi = qword [errorVolLbl]
    46 00004AA6 488D3585C5FFFF      <1>     lea rsi, errorMsgTbl.FVol
    47 00004AAD 4887FE              <1>     xchg rdi, rsi   ;Swap the pointers
    48 00004AB0 48A5                <1>     movsq   ;Move over the 11 chars :)
    49 00004AB2 66A5                <1>     movsw
    50 00004AB4 A4                  <1>     movsb
    51 00004AB5 0FB7F8              <1>     movzx edi, ax  ;Move the error code into di
    52 00004AB8 5E                  <1>     pop rsi
    53 00004AB9 5B                  <1>     pop rbx
    54 00004ABA 81FF1F000000        <1>     cmp edi, errGF      ;Is this a normal driver error?
    55 00004AC0 7655                <1>     jbe .driverErr
    56                              <1> ;Now we split the driver from sharing and networking errors. Sharing doesnt go 
    57                              <1> ; thru the redir
    58 00004AC2 81FF24000000        <1>     cmp edi, errShrFul
    59 00004AC8 763F                <1>     jbe .shareErr
    60                              <1> ;Ok so this is a net error. Check to see if an installed message!
    61                              <1> ;di has the error code still
    62 00004ACA B800050000          <1>     mov eax, 0500h      ;Install check!
    63 00004ACF CD21                <1>     int 21h
    64 00004AD1 3CFF                <1>     cmp al, -1
    65 00004AD3 752B                <1>     jne .redirDefault   ;No redir, print default net error
    66 00004AD5 89F8                <1>     mov eax, edi        ;Else, move the error code into 
    67 00004AD7 B405                <1>     mov ah, 05h         ;Get the string we need
    68 00004AD9 CD21                <1>     int 21h
    69 00004ADB 7223                <1>     jc .redirDefault    ;If no message installed for this code, generic!
    70                              <1>     ;Returned if CF=NC:
    71                              <1>     ; al = 0 => Print rest of message
    72                              <1>     ; al = 1 => Immediately prompt ARIF
    73                              <1>     ; rdi -> ASCIIZ string to print
    74 00004ADD 4889FA              <1>     mov rdx, rdi        
    75 00004AE0 50                  <1>     push rax            
    76 00004AE1 31C0                <1>     xor eax, eax
    77 00004AE3 89C1                <1>     mov ecx, eax
    78 00004AE5 FFC9                <1>     dec ecx
    79 00004AE7 F2AE                <1>     repne scasb         ;Search for the terminating null
    80 00004AE9 C647FF24            <1>     mov byte [rdi - 1], "$" ;Replace with dos string terminator
    81 00004AED E825F8FFFF          <1>     call printString 
    82 00004AF2 C647FF00            <1>     mov byte [rdi - 1], 0   ;Replace with sane string terminator
    83 00004AF6 58                  <1>     pop rax
    84 00004AF7 84C0                <1>     test al, al ;Is this zero?
    85 00004AF9 7450                <1>     jz .proceedNormalWrite  ;Now print reading/writing etc
    86 00004AFB E998000000          <1>     jmp .userInput    ;Else, print crlf and proceed to get input
    87                              <1> .redirDefault:
    88                              <1> ;Always jumped to with rdi in the error code. Thus, this will print only
    89                              <1> ; this line with no reading/writing etc. rdi is above errShrFul here
    90                              <1> ; and also not a table offset so definitely wont accidentally try print
    91                              <1> ; additional information
    92 00004B00 488D1560C5FFFF      <1>     lea rdx, genNetErr  ;Set the generic network error message
    93 00004B07 EB35                <1>     jmp short .redirDefProceed
    94                              <1> .shareErr:
    95                              <1> ;Now ensure our error code is in the table, set to GF error if not.
    96 00004B09 BA1F000000          <1>     mov edx, errGF
    97 00004B0E 81FF24000000        <1>     cmp edi, errShrFul
    98 00004B14 0F47FA              <1>     cmova edi, edx
    99                              <1> .driverErr:
   100 00004B17 BA1F000000          <1>     mov edx, errGF      ;If we have an error below Driver Error 0, Gen. Err.
   101 00004B1C 81FF13000000        <1>     cmp edi, drvErrShft
   102 00004B22 0F42FA              <1>     cmovb edi, edx
   103 00004B25 81EF13000000        <1>     sub edi, drvErrShft ;Now reduce the error code to be a table offset
   104 00004B2B 57                  <1>     push rdi    ;Save the error code for checking
   105 00004B2C 488D15F9C3FFFF      <1>     lea rdx, errMsgPtrTbl
   106 00004B33 4887FA              <1>     xchg rdi, rdx   ;Swap error code and table base
   107 00004B36 0FB71457            <1>     movzx edx, word [rdi + 2*rdx]   ;Get the word offset in rdx
   108 00004B3A 4801FA              <1>     add rdx, rdi            ;Now add the table base!
   109 00004B3D 5F                  <1>     pop rdi
   110                              <1> .redirDefProceed:
   111 00004B3E E8D4F7FFFF          <1>     call printString        ;Call DOS to print first part of message
   112                              <1>     ;Now we handle any codes above errNoFCB - drvErrShft as 
   113                              <1>     ; to not print anything other than the string in the table!
   114                              <1>     ;cmp edi, errNoFCB - drvErrShft
   115 00004B43 81FF0F000000        <1>     cmp edi, errIDC - drvErrShft
   116 00004B49 734D                <1>     jae .userInput  ;IDC also triggers this skip
   117                              <1> .proceedNormalWrite:
   118 00004B4B 488D1533C5FFFF      <1>     lea rdx, readMsg
   119 00004B52 488D3D3BC5FFFF      <1>     lea rdi, writeMsg
   120 00004B59 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
   121 00004B5C 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
   122 00004B60 E8B2F7FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
   123                              <1> 
   124 00004B65 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
   125 00004B68 0F8504010000        <1>     jnz .charError
   126                              <1> ;Disk error continues here
   127 00004B6E 488D1509C5FFFF      <1>     lea rdx, drvMsg ;Drive message
   128 00004B75 E89DF7FFFF          <1>     call printString
   129 00004B7A 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   130 00004B7C 80C241              <1>     add dl, "A" ;Add ASCII code
   131 00004B7F B402                <1>     mov ah, 02h ;Print char in dl
   132 00004B81 CD21                <1>     int 21h
   133                              <1>     
   134 00004B83 89D8                <1>     mov eax, ebx    ;Get bh into ah
   135 00004B85 2500060000          <1>     and eax, 600h   ;Mask off bits 1 and 2 of bh
   136 00004B8A 3D00020000          <1>     cmp eax, 200h   ;Was this a FAT buffer?
   137 00004B8F 7507                <1>     jne .userInput  ;If not proceed as normal.
   138                              <1>     ;Else, abort! Application cannot proceed if FAT is breaking apart...
   139 00004B91 B002                <1>     mov al, 2   ;Abort! Lose that FAT buffer
   140 00004B93 E9CE000000          <1>     jmp .cehExit
   141                              <1> .userInput:
   142 00004B98 E873F7FFFF          <1>     call printCRLF  ;Print new line
   143                              <1> ;Abort, Retry, Ignore, Fail is word order
   144                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   145                              <1> .userAbort:
   146                              <1> ;Abort is always an option
   147 00004B9D 488D15FFC4FFFF      <1>     lea rdx, abortMsg
   148 00004BA4 E86EF7FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
   149                              <1> .userRetry:
   150 00004BA9 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   151 00004BAC 7418                <1>     jz .userIgnore    ;If clear, dont print message
   152 00004BAE 488D1506C5FFFF      <1>     lea rdx, betweenMsg
   153 00004BB5 E85DF7FFFF          <1>     call printString
   154 00004BBA 488D15EFC4FFFF      <1>     lea rdx, retryMsg
   155 00004BC1 E851F7FFFF          <1>     call printString
   156                              <1> .userIgnore:
   157 00004BC6 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   158 00004BC9 7418                <1>     jz .userFail
   159 00004BCB 488D15E9C4FFFF      <1>     lea rdx, betweenMsg
   160 00004BD2 E840F7FFFF          <1>     call printString
   161 00004BD7 488D15CBC4FFFF      <1>     lea rdx, ignoreMsg
   162 00004BDE E834F7FFFF          <1>     call printString
   163                              <1> .userFail:
   164 00004BE3 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   165 00004BE6 7418                <1>     jz .userMsgEnd
   166 00004BE8 488D15CCC4FFFF      <1>     lea rdx, betweenMsg
   167 00004BEF E823F7FFFF          <1>     call printString
   168 00004BF4 488D15BBC4FFFF      <1>     lea rdx, failMsg
   169 00004BFB E817F7FFFF          <1>     call printString
   170                              <1> .userMsgEnd:
   171 00004C00 488D15B7C4FFFF      <1>     lea rdx, endMsg
   172 00004C07 E80BF7FFFF          <1>     call printString
   173                              <1> ;Get user input now 
   174 00004C0C 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   175 00004C0E 488D3DACC4FFFF      <1>     lea rdi, i24Resp ;Go to start of string
   176 00004C15 B8010C0000          <1>     mov eax, 0C01h ;Flush and get STDIN without Console Echo
   177 00004C1A CD21                <1>     int 21h ;Get char in al
   178 00004C1C 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   179 00004C1E 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   180 00004C20 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   181                              <1> .uip1:
   182 00004C22 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   183 00004C23 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   184 00004C25 FFC1                <1>     inc ecx
   185 00004C27 81F904000000        <1>     cmp ecx, 4
   186 00004C2D 75F3                <1>     jne .uip1
   187 00004C2F E964FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   188                              <1> .validInput:
   189 00004C34 E8D7F6FFFF          <1>     call printCRLF   ;Note the input was accepted
   190 00004C39 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   191                              <1> ;Now check if the input is permitted
   192 00004C3B 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   193 00004C3D 7427                <1>     je .cehExit
   194 00004C3F 84C0                <1>     test al, al ;Check if 0 => Ignore
   195 00004C41 740F                <1>     je .viIgnore
   196 00004C43 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   197 00004C45 7416                <1>     je .viRetry
   198                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   199 00004C47 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   200 00004C4A 0F8448FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   201 00004C50 EB14                <1>     jmp short .cehExit
   202                              <1> .viIgnore:
   203 00004C52 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   204 00004C55 0F843DFFFFFF        <1>     jz .userInput
   205 00004C5B EB09                <1>     jmp short .cehExit
   206                              <1> .viRetry:
   207 00004C5D F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   208 00004C60 0F8432FFFFFF        <1>     jz .userInput
   209                              <1> .cehExit:
   210 00004C66 E83E000000          <1>     call errRetHdls
   211 00004C6B 5E                  <1>     pop rsi
   212 00004C6C 5F                  <1>     pop rdi
   213 00004C6D 5A                  <1>     pop rdx
   214 00004C6E 59                  <1>     pop rcx
   215 00004C6F 5B                  <1>     pop rbx
   216 00004C70 48CF                <1>     iretq
   217                              <1> .charError:
   218 00004C72 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   219 00004C77 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   220                              <1> .ce1:
   221 00004C7E AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   222 00004C7F 88C2                <1>     mov dl, al  ;Move char into dl
   223 00004C81 B402                <1>     mov ah, 02h
   224 00004C83 CD21                <1>     int 21h ;Print char
   225 00004C85 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   226 00004C87 E90CFFFFFF          <1>     jmp .userInput
   227                              <1> 
   228                              <1> 
   229                              <1> errSwapHdls:
   230                              <1> ;Swaps STDIO to STDERR
   231                              <1> ;Start by tmporarily moving the stderr handler into stdio
   232                              <1> ;In principle dangerous, but since we cannot exit our routine, its oki.
   233 00004C8C 50                  <1>     push rax
   234 00004C8D 53                  <1>     push rbx
   235 00004C8E E833000000          <1>     call getJftPtr  ;Get the jft pointer into rbx. Saves rax
   236 00004C93 0FB703              <1>     movzx eax, word [rbx]       ;Get STDIO into ax
   237 00004C96 668905F9B3FFFF      <1>     mov word [errHdls], ax      ;Save em
   238 00004C9D 0FB64302            <1>     movzx eax, byte [rbx + 2]   ;Now get the STDERR SFTndx in al
   239 00004CA1 88C4                <1>     mov ah, al                  ;Move STDERR hdl into ah too 
   240 00004CA3 668903              <1>     mov word [rbx], ax          ;And set STDIO to STDERR
   241 00004CA6 5B                  <1>     pop rbx
   242 00004CA7 58                  <1>     pop rax
   243                              <1>     return
    13                              <2> %%_ret:
    14 00004CA8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   244                              <1> 
   245                              <1> errRetHdls:
   246                              <1> ;Returns STDIO from STDERR.
   247 00004CA9 50                  <1>     push rax
   248 00004CAA 53                  <1>     push rbx
   249 00004CAB E816000000          <1>     call getJftPtr  ;Get ptr in rbx. Preserves rax.
   250 00004CB0 0FB705DFB3FFFF      <1>     movzx eax, word [errHdls]
   251 00004CB7 66C705D6B3FFFFFFFF  <1>     mov word [errHdls], -1  ;Reset values
   252 00004CC0 668903              <1>     mov word [rbx], ax      ;Store the handle word back
   253 00004CC3 5B                  <1>     pop rbx
   254 00004CC4 58                  <1>     pop rax
   255                              <1>     return
    13                              <2> %%_ret:
    14 00004CC5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   256                              <1> 
   257                              <1> getJftPtr:
   258                              <1> ;Preserves all registers except rbx.
   259                              <1> ;Output: rbx -> JFT of current task
   260 00004CC6 50                  <1>     push rax        ;Save rax
   261 00004CC7 B800510000          <1>     mov eax, 5100h  ;Get current PSP in rbx
   262 00004CCC CD21                <1>     int 21h
   263 00004CCE 58                  <1>     pop rax
   264 00004CCF 66817B4E1400        <1>     cmp word [rbx + psp.jftSize], 20    ;If >20, pspjft is ptr to real jft
   265 00004CD5 7605                <1>     jbe .pspJftExit
   266 00004CD7 488B5B2A            <1>     mov rbx, qword [rbx + psp.externalJFTPtr]   ;Get ptr to jft from the psp
   267                              <1>     return
    13                              <2> %%_ret:
    14 00004CDB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   268                              <1> .pspJftExit:
   269 00004CDC 488D5B2A            <1>     lea rbx, qword [rbx + psp.jobFileTbl]       ;Make into a ptr to jft in psp
   270                              <1>     return
    13                              <2> %%_ret:
    14 00004CE0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                                  endOfAlloc: ;End of alloc
    23                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00004CE1 B430                <1>     mov ah, 30h
     4 00004CE3 CD21                <1>     int 21h
     5 00004CE5 3C01                <1>     cmp al, 01h ;Version 1
     6 00004CE7 760D                <1>     jbe .okVersion
     7 00004CE9 488D1534050000      <1>     lea rdx, badVerStr
     8 00004CF0 B409                <1>     mov ah, 09h
     9 00004CF2 CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00004CF4 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00004CF6 800D97B3FFFF80      <1>     or byte [statFlg1], inLdr   ;Ok now we start our special work
    15 00004CFD 4C89050BB3FFFF      <1>     mov qword [pspPtr], r8      ;Store PSP ptr in internal var 
    16                              <1> ;Call for simple internationalisation data
    17 00004D04 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    18 00004D09 CD21                <1>     int 21h
    19 00004D0B 3CFF                <1>     cmp al, -1
    20 00004D0D 7412                <1>     je .skipSwitch
    21 00004D0F 881515B3FFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    22 00004D15 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    23 00004D18 7507                <1>     jne .skipSwitch
    24 00004D1A C60508B3FFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    25                              <1> .skipSwitch:
    26 00004D21 B800380000          <1>     mov eax, 3800h  ;Get current country data
    27 00004D26 488D15FEB2FFFF      <1>     lea rdx, ctryData
    28 00004D2D CD21                <1>     int 21h ;Write the data to the internal country table 
    29                              <1> ;Now eject all the unneeded space, to make space for allocating.
    30                              <1> ;Thus the allocations in the parsing should never fail (but still may)
    31 00004D2F 488D25(00320000)    <1>     lea rsp, initEoA
    32 00004D36 4889E3              <1>     mov rbx, rsp
    33 00004D39 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    34 00004D3C 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
    35 00004D40 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    36 00004D43 B8004A0000          <1>     mov eax, 4A00h ;Realloc
    37 00004D48 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    38 00004D4B CD21                <1>     int 21h
    39 00004D4D 72A5                <1>     jc .exitBad 
    40                              <1> ;Now space has been made, time to parse the command tail
    41 00004D4F E819010000          <1>     call parseCmdLine   ;Now parse the command tail.
    42 00004D54 E84A030000          <1>     call doEnv          ;Now enact the command tail actions
    43 00004D59 E8AAFAFFFF          <1>     call resetIDTentries    ;Setup IDT entries now. 
    44 00004D5E F6052FB3FFFF01      <1>     test byte [statFlg1], permaShell ;Are we perma?
    45 00004D65 0F8490000000        <1>     jz .notMaster   ;Jump if not!
    46                              <1> ;Ok so we are master COMMAND.COM
    47                              <1> ;Now make myself my own parent task. We already are the current psp
    48 00004D6B 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8
    49                              <1> ;Setup Int 2Eh and the addresses in my psp to terminate back to
    50 00004D6F 488D150AFDFFFF      <1>     lea rdx, critErrorHandler
    51 00004D76 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    52 00004D7A 488D1513FCFFFF      <1>     lea rdx, ctrlCHandler
    53 00004D81 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    54 00004D85 488D15B7C7FFFF      <1>     lea rdx, appRet
    55 00004D8C 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    56 00004D90 488D154ACDFFFF      <1>     lea rdx, int2Eh
    57 00004D97 B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    58 00004D9C CD21                <1>     int 21h
    59                              <1> ;Always get the Autoexec from the root dir we are booting into
    60 00004D9E E86AF7FFFF          <1>     call getCurrentDrive    ;Get 0 based drive number in al
    61 00004DA3 0441                <1>     add al, "A"
    62 00004DA5 880556C1FFFF        <1>     mov byte [autoSpec], al ;
    63                              <1> ;Now, open AUTOEXEC.BAT. 
    64 00004DAB 488D154FC1FFFF      <1>     lea rdx, autoSpec
    65 00004DB2 B8003D0000          <1>     mov eax, 3D00h  ;Open file
    66 00004DB7 CD21                <1>     int 21h
    67 00004DB9 7212                <1>     jc .noAutoexec
    68                              <1>     ;Ok, we know the file exists, close it and finish init through it, ignoring 
    69                              <1>     ; the normal hello there! string
    70 00004DBB 89C3                <1>     mov ebx, eax
    71 00004DBD B8003E0000          <1>     mov eax, 3E00h  ;Close file
    72 00004DC2 CD21                <1>     int 21h
    73                              <1> ;Now we do the same as at the end, prepping for jettisoning
    74 00004DC4 31D2                <1>     xor edx, edx
    75 00004DC6 FFCA                <1>     dec edx             ;Setup that we want to process Autoexec
    76 00004DC8 E954000000          <1>     jmp .prepStart
    77                              <1> .noAutoexec:
    78                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    79 00004DCD 488D15CCBAFFFF      <1>     lea rdx, crlf
    80 00004DD4 B409                <1>     mov ah, 09h
    81 00004DD6 CD21                <1>     int 21h
    82 00004DD8 800DB5B2FFFF40      <1>     or byte [statFlg1], inLdrDT
    83 00004DDF E890E1FFFF          <1>     call time
    84 00004DE4 E8DDDFFFFF          <1>     call date
    85 00004DE9 8025A4B2FFFFBF      <1>     and byte [statFlg1], ~inLdrDT
    86 00004DF0 488D15A9BAFFFF      <1>     lea rdx, crlf
    87 00004DF7 B409                <1>     mov ah, 09h
    88 00004DF9 CD21                <1>     int 21h
    89                              <1>     ;Now fall thru.
    90                              <1> .notMaster:    
    91                              <1> ;Finish by printing INIT string.
    92 00004DFB F60592B2FFFF04      <1>     test byte [statFlg1], inSingle  ;Are we in single mode?
    93 00004E02 7531                <1>     jnz .singleCom
    94 00004E04 488D15A5030000      <1>     lea rdx, initString
    95 00004E0B B409                <1>     mov ah, 09h
    96 00004E0D CD21                <1>     int 21h ;Print init string
    97 00004E0F E8F6EAFFFF          <1>     call version.printVersionNumber
    98 00004E14 488D15CB030000      <1>     lea rdx, initString2
    99 00004E1B B409                <1>     mov ah, 09h
   100 00004E1D CD21                <1>     int 21h ;Print init string
   101 00004E1F 31D2                <1>     xor edx, edx        ;Indicate we DONT want to do Autoexec processing
   102                              <1> .prepStart:
   103 00004E21 E822000000          <1>     call computeStackPtr    ;Returns the stack ptr in rbx and var
   104 00004E26 4889DC              <1>     mov rsp, rbx        ;Move the stack pointer to this address
   105 00004E29 802564B2FFFF7F      <1>     and byte [statFlg1], ~inLdr    ;Special work complete :-)
   106 00004E30 E990C2FFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   107                              <1> .singleCom:
   108                              <1> ;In single command mode, check the length of the input string was not 0.
   109                              <1> ; If it was, exit, else proceed
   110 00004E35 803D25B3FFFF00      <1>     cmp byte [inBuffer + 1], 0
   111 00004E3C 0F84E2ECFFFF        <1>     je exit
   112 00004E42 31D2                <1>     xor edx, edx
   113 00004E44 FFCA                <1>     dec edx             ;Pretend that we want to process Autoexec
   114 00004E46 EBD9                <1>     jmp short .prepStart
   115                              <1> 
   116                              <1> computeStackPtr:
   117                              <1>     ;Now we add the stack to the alloc and paragraph align
   118 00004E48 488D1D92FEFFFF      <1>     lea rbx, endOfAlloc
   119 00004E4F 4881C340060000      <1>     add rbx, stackSize
   120 00004E56 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   121 00004E5D 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   122 00004E61 48C1E304            <1>     shl rbx, 4
   123 00004E65 48891D99B1FFFF      <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   124                              <1>     return
    13                              <2> %%_ret:
    14 00004E6C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   125                              <1> 
   126                              <1> parseCmdLine:
   127                              <1> ;COMMAND [drive:][path][device][/E:n][/P][/C string]
   128                              <1> ;[drive:] gives the default drive for COMSPEC. Default is default drive.
   129                              <1> ;[path] gives the search path to search for when searching for COMSPEC.
   130                              <1> ;   Default is root directory. Hence default COMSPEC is _:\COMMAND.COM
   131                              <1> ;[device] gives the default device to set STDIO to and reset to if we error
   132                              <1> ;           MAX 8 chars long name ([device] can be colon terminated).
   133                              <1> ;           Default is CON
   134                              <1> ;[/C string] means execute the string as a command and terminate immediately
   135                              <1> ;   This is single command mode, sets inSingle bit. Similar to int 2Eh.
   136                              <1> ;[/P] means make the instance of COMMAND.COM permanent.
   137                              <1> ;[/E:n] where n is a base 10 value between 160-32768, giving the size of the 
   138                              <1> ; environment to allocate in bytes. Only works if COMMAND.COM is to be 
   139                              <1> ; permanent. Needs a colon after E. 
   140                              <1> ;
   141                              <1> ;Start by setting up the default comspec dir, null terminated
   142 00004E6D E89BF6FFFF          <1>     call getCurrentDrive    ;Get 0 based drive number in al
   143 00004E72 0441                <1>     add al, "A"
   144 00004E74 B43A                <1>     mov ah, ":"
   145 00004E76 488D3DDFB7FFFF      <1>     lea rdi, comspecDir
   146 00004E7D 66AB                <1>     stosw   ;Store drive specifier
   147 00004E7F 0FB605A3B1FFFF      <1>     movzx eax, byte [pathSep]
   148 00004E86 66AB                <1>     stosw   ;Store the pathsep and a terminating <NUL>
   149                              <1> 
   150 00004E88 E860F9FFFF          <1>     call setDTA                     ;Ensure any searches dont trample on the tail!
   151 00004E8D 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the start of tail chars
   152                              <1> .parseLp:
   153 00004E94 E8B7F6FFFF          <1>     call skipDelimiters             ;Strip delims
   154 00004E99 AC                  <1>     lodsb
   155 00004E9A 48FFCE              <1>     dec rsi ;Point to first non-delimiter char
   156 00004E9D 3C0D                <1>     cmp al, CR
   157 00004E9F 0F8469010000        <1>     je .endScan
   158 00004EA5 3A057FB1FFFF        <1>     cmp al, byte [switchChar]       ;Is this a switchchar?
   159 00004EAB 752D                <1>     jne .file
   160                              <1> .switch:
   161 00004EAD 48FFC6              <1>     inc rsi ;Go past the switch char
   162 00004EB0 AC                  <1>     lodsb   ;Get first char past switch, advance rsi
   163 00004EB1 E87FF6FFFF          <1>     call ucChar
   164 00004EB6 3C43                <1>     cmp al, "C"
   165 00004EB8 0F841C010000        <1>     je .switchStr
   166 00004EBE 3C50                <1>     cmp al, "P"
   167 00004EC0 0F84F8000000        <1>     je .switchPerma
   168 00004EC6 3C45                <1>     cmp al, "E"
   169 00004EC8 0F84A5000000        <1>     je .switchEnv
   170 00004ECE 48FFCE              <1>     dec rsi ;Now point rsi back to this char
   171                              <1> .badparm:
   172 00004ED1 488D15ACBBFFFF      <1>     lea rdx, badParm
   173 00004ED8 EBBA                <1>     jmp short .parseLp
   174                              <1> ;-----------------------------------------------------------------
   175                              <1> ;Search for the filespec
   176                              <1> .file:
   177 00004EDA E8FDF7FFFF          <1>     call copyArgumentToSearchSpec   ;Moves rsi to char past the delimiter
   178 00004EDF 48FFCE              <1>     dec rsi ;Point to the delimiter itself
   179 00004EE2 488D15A6B5FFFF      <1>     lea rdx, searchSpec
   180 00004EE9 B8004E0000          <1>     mov eax, 4E00h  ;Find First
   181 00004EEE B910000000          <1>     mov ecx, dirDirectory   ;Return Normal, RO, Dir or Char
   182 00004EF3 CD21                <1>     int 21h
   183 00004EF5 730E                <1>     jnc .charOrDir
   184                              <1> .badSpec:
   185                              <1> ;rsi has been moved past the argument so we can keep proceeding with processing
   186 00004EF7 488D153E030000      <1>     lea rdx, badCmdDir
   187                              <1> .bs0:
   188 00004EFE E814F4FFFF          <1>     call printString
   189                              <1> .plhop:
   190 00004F03 EB8F                <1>     jmp short .parseLp
   191                              <1> ;-----------------------------------------------------------------
   192                              <1> ;Check if a char or directory here
   193                              <1> .charOrDir:
   194 00004F05 8A051FB2FFFF        <1>     mov al, byte [cmdFFBlock + ffBlock.attribFnd]
   195 00004F0B 2450                <1>     and al, dirCharDev | dirDirectory
   196 00004F0D 74E8                <1>     jz .badSpec
   197 00004F0F A840                <1>     test al, dirCharDev
   198 00004F11 7525                <1>     jnz .charDev
   199                              <1> ;Here if a directory. Save it null terminated in comspecDir.
   200 00004F13 56                  <1>     push rsi
   201 00004F14 488D3574B5FFFF      <1>     lea rsi, searchSpec 
   202 00004F1B 488D3D3AB7FFFF      <1>     lea rdi, comspecDir
   203 00004F22 E8FAF5FFFF          <1>     call strcpy2
   204 00004F27 B811120000          <1>     mov eax, 1211h  ;Uppercase the pathspec
   205 00004F2C CD2F                <1>     int 2Fh         ;DOS 3.3 does't do this hehe 0:-)
   206 00004F2E 5E                  <1>     pop rsi
   207 00004F2F C60580030000FF      <1>     mov byte [initNewSpec], -1  ;Set, we have a new comspec
   208 00004F36 EBCB                <1>     jmp short .plhop
   209                              <1> ;-----------------------------------------------------------------
   210                              <1> ;Handle char dev here
   211                              <1> .charDev:
   212                              <1> ;Check the name is max 8 chars in length
   213 00004F38 488D3D50B5FFFF      <1>     lea rdi, searchSpec
   214 00004F3F E8E7F5FFFF          <1>     call strlen ;Get len plus <NUL> in ecx. Cant be more than 8+1 for <NUL>
   215 00004F44 81F909000000        <1>     cmp ecx, 9  ;This can literally never happen but never hurts to be safe :)
   216 00004F4A 771E                <1>     ja .badChar
   217 00004F4C 56                  <1>     push rsi    ;Save offset into cmdTail on stack
   218 00004F4D 488D353BB5FFFF      <1>     lea rsi, searchSpec
   219 00004F54 488D3D9DBFFFFF      <1>     lea rdi, devName
   220 00004F5B E8B2F5FFFF          <1>     call strcpy ;Copy this string over
   221 00004F60 5E                  <1>     pop rsi
   222 00004F61 C6054F030000FF      <1>     mov byte [initNewDev], -1   ;Set this byte now we have a new dev!
   223                              <1> .plhop1:
   224 00004F68 EB99                <1>     jmp short .plhop    ;parseLp
   225                              <1> .badChar:
   226 00004F6A 488D15C6BCFFFF      <1>     lea rdx, badDev
   227                              <1> .bs1:
   228 00004F71 EB8B                <1>     jmp short .bs0
   229                              <1> ;-----------------------------------------------------------------
   230                              <1> .switchEnv:
   231 00004F73 AC                  <1>     lodsb
   232 00004F74 48FFCE              <1>     dec rsi
   233 00004F77 3C3A                <1>     cmp al, ":"
   234 00004F79 0F8552FFFFFF        <1>     jne .badparm
   235 00004F7F 48FFC6              <1>     inc rsi ;Now point past teh colon, skip any delimiters
   236 00004F82 E8C9F5FFFF          <1>     call skipDelimiters
   237 00004F87 AC                  <1>     lodsb       ;Get the first non-delimiter
   238 00004F88 48FFCE              <1>     dec rsi     ;Point back at it
   239 00004F8B 3C0D                <1>     cmp al, CR
   240 00004F8D 0F843EFFFFFF        <1>     je .badparm     ;Print bad arg, rsi positioned to terminate parsing now
   241                              <1>     ;Else, rsi now pointing at the first number. Do maths :)
   242 00004F93 E809F8FFFF          <1>     call getNum ;Move rsi to first non digit/9th digit if too many digits
   243 00004F98 0F8233FFFFFF        <1>     jc .badparm    ;Bad parameter error!
   244 00004F9E 3D00800000          <1>     cmp eax, 8000h
   245 00004FA3 7710                <1>     ja .badEnv
   246 00004FA5 3DA0000000          <1>     cmp eax, 0A0h
   247 00004FAA 7209                <1>     jb .badEnv
   248 00004FAC 66890505030000      <1>     mov word [initEnvSz], ax    ;Store the allocated size here
   249                              <1> .plhop2:
   250 00004FB3 EBB3                <1>     jmp short .plhop1  ;parseLp
   251                              <1> .badEnv:
   252 00004FB5 488D15DF020000      <1>     lea rdx, badEnvSz
   253 00004FBC EBB3                <1>     jmp short .bs1
   254                              <1> ;-----------------------------------------------------------------
   255                              <1> .switchPerma:
   256 00004FBE AC                  <1>     lodsb   ;Get the second char after the P
   257 00004FBF 48FFCE              <1>     dec rsi ;Point back at it
   258 00004FC2 3C0D                <1>     cmp al, CR
   259 00004FC4 740B                <1>     je .spEmbCr ;Allow CR after the P
   260 00004FC6 E893F5FFFF          <1>     call isALdelimiter
   261 00004FCB 0F8500FFFFFF        <1>     jne .badparm
   262                              <1> .spEmbCr:
   263 00004FD1 800DBCB0FFFF01      <1>     or byte [statFlg1], permaShell  ;Set the bit
   264 00004FD8 EBD9                <1>     jmp short .plhop2  ;parseLp
   265                              <1> ;-----------------------------------------------------------------
   266                              <1> .switchStr:
   267 00004FDA AC                  <1>     lodsb       ;Get the char after the C
   268 00004FDB 48FFCE              <1>     dec rsi     ;Point back at it
   269 00004FDE 3C0D                <1>     cmp al, CR
   270 00004FE0 740B                <1>     je .ssembCr         ;Embedded CR ok
   271 00004FE2 E877F5FFFF          <1>     call isALdelimiter  ;Char immediately after the C must be a delimiter
   272 00004FE7 0F85E4FEFFFF        <1>     jne .badparm
   273                              <1> .ssembCr:
   274 00004FED E85EF5FFFF          <1>     call skipDelimiters     ;Move rsi past the delimiters
   275 00004FF2 488D3D69B1FFFF      <1>     lea rdi, inBuffer + 2   ;Store the command in the inBuffer as if typed in
   276                              <1> .ssLp:
   277 00004FF9 AC                  <1>     lodsb
   278 00004FFA AA                  <1>     stosb
   279 00004FFB 3C0D                <1>     cmp al, CR
   280 00004FFD 7408                <1>     je .ssOk
   281 00004FFF FE055CB1FFFF        <1>     inc byte [inBuffer + 1] ;Increment the char count
   282 00005005 EBF2                <1>     jmp short .ssLp
   283                              <1> .ssOk:
   284 00005007 800D86B0FFFF04      <1>     or byte [statFlg1], inSingle    ;Set the single flag
   285                              <1> ;Now we fall through as we have processed the cmd line and set the flag
   286                              <1> ;-----------------------------------------------------------------
   287                              <1> .endScan:
   288                              <1> ;Now copy our name to the end of the dir specified
   289 0000500E 488D3D47B6FFFF      <1>     lea rdi, comspecDir
   290 00005015 E811F5FFFF          <1>     call strlen ;Get the length in ecx, preserve rdi
   291 0000501A FFC9                <1>     dec ecx ;Point to null terminator
   292 0000501C 8A0507B0FFFF        <1>     mov al, byte [pathSep]
   293 00005022 4801CF              <1>     add rdi, rcx    ;Now point to the null
   294 00005025 3847FF              <1>     cmp byte [rdi - 1], al
   295 00005028 7401                <1>     je .esSkipPathsep
   296 0000502A AA                  <1>     stosb
   297                              <1> .esSkipPathsep:
   298 0000502B 488D35EEBEFFFF      <1>     lea rsi, cspec
   299 00005032 E8DBF4FFFF          <1>     call strcpy ;Now copy over the name of our beloved shell
   300                              <1> ;Now ensure the user hasnt specified /C on the master shell!
   301 00005037 E817000000          <1>     call .masterCheck
   302 0000503C E84D000000          <1>     call .replacestdio
   303                              <1> ;Ensure that on exit, if both inSingle bit and permaShell are set, inSingle 
   304                              <1> ; wins. Unless this is the first boot, in which case, we ignore it
   305 00005041 F6054CB0FFFF04      <1>     test byte [statFlg1], inSingle
   306                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00005048 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000504A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   307 0000504B 802542B0FFFFFE      <1>     and byte [statFlg1], ~permaShell ;Else, ensure perma is deactivated
   308                              <1>     return
    13                              <2> %%_ret:
    14 00005052 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   309                              <1> .masterCheck:
   310                              <1> ;Before exiting, determine if this is the initial/master copy of
   311                              <1> ; COMMAND.COM by checking if Int 2Eh has the same address as Int 2Dh. 
   312                              <1> ;If so, we are master, set the permanent bit.
   313 00005053 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
   314 00005058 CD21                <1>     int 21h
   315 0000505A 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
   316 0000505D B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
   317 00005062 CD21                <1>     int 21h
   318 00005064 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
   319                              <1>     retne   ;Else, we are done. Return
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00005067 75(52)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   320 00005069 800D24B0FFFF01      <1>     or byte [statFlg1], permaShell
   321 00005070 8A051EB0FFFF        <1>     mov al, byte [statFlg1]
   322 00005076 802517B0FFFFFB      <1>     and byte [statFlg1], ~inSingle  ;Ensure this bit is off
   323 0000507D A804                <1>     test al, inSingle   ;Was the bit initially set?
   324                              <1>     retz                ;Return if not
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000507F 74(52)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   325 00005081 488D15DD010000      <1>     lea rdx, badCombo   ;Else, sorry buddy, please type in your command manually!
   326 00005088 E88AF2FFFF          <1>     call printString
   327                              <1>     return
    13                              <2> %%_ret:
    14 0000508D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   328                              <1> .replacestdio:
   329 0000508E F60522020000FF      <1>     test byte [initNewDev], -1
   330                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00005095 74(8D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   331 00005097 488D155ABEFFFF      <1>     lea rdx, devName
   332 0000509E E946E0FFFF          <1>     jmp ctty.loadSwap  ;Return through the return instruction in ctty
   333                              <1> 
   334                              <1> doEnv:
   335                              <1> ;Will do the environment adjustments as needed
   336 000050A3 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
   337 000050A7 4885F6              <1>     test rsi, rsi
   338 000050AA 7447                <1>     jz .noInitEnv
   339 000050AC 66813D030200000000  <1>     cmp word [initEnvSz], 0 ;If an env exists and /E not specified, return!
   340                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000050B5 74(8D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   341                              <1> ;Now if no new comspec has been given, we allocate a new block, 
   342                              <1> ;copy the environment from the master and free the original block.
   343                              <1> ;If the block we allocate is smaller than the original block, 
   344                              <1> ; print out of env space and stop there
   345                              <1> ;Else, we simply allocate and create a fresh new environment with the new 
   346                              <1> ; comspec. 
   347 000050B7 F605F8010000FF      <1>     test byte [initNewSpec], -1  ;If we have a new comspec, create afresh
   348 000050BE 752E                <1>     jnz .prepNewEnv
   349                              <1>     ;Else, we create new alloc and copy master into it
   350 000050C0 E867000000          <1>     call .allocEnv
   351 000050C5 4889C7              <1>     mov rdi, rax        ;Move pointer into rdi
   352 000050C8 E8CC000000          <1>     call getMasterEnv   ;Get the current active master environment in rsi
   353 000050CD 57                  <1>     push rdi            ;Save the start of the environment block
   354 000050CE E893000000          <1>     call .cpEnv         ;Copy the environment
   355 000050D3 5F                  <1>     pop rdi
   356 000050D4 E805000000          <1>     call .freeCurrentEnv
   357 000050D9 4989783E            <1>     mov qword [r8 + psp.envPtr], rdi    ;Now set us as the env ptr
   358                              <1>     return  
    13                              <2> %%_ret:
    14 000050DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   359                              <1> .freeCurrentEnv:
   360 000050DE 4150                <1>     push r8
   361 000050E0 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the original envPtr to free
   362 000050E4 B800490000          <1>     mov eax, 4900h
   363 000050E9 CD21                <1>     int 21h
   364 000050EB 4158                <1>     pop r8
   365                              <1>     return
    13                              <2> %%_ret:
    14 000050ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   366                              <1> .prepNewEnv:
   367 000050EE E8EBFFFFFF          <1>     call .freeCurrentEnv
   368                              <1> .noInitEnv:
   369                              <1> ;Build the initial block.
   370 000050F3 E834000000          <1>     call .allocEnv
   371 000050F8 4889C7              <1>     mov rdi, rax        ;Move rdi to the environment
   372 000050FB 4989783E            <1>     mov qword [r8 + psp.envPtr], rdi    ;Now store this as the env pointer
   373 000050FF 57                  <1>     push rdi            ;Save the environment ptr!
   374 00005100 488D350ABEFFFF      <1>     lea rsi, pathEVar
   375 00005107 E806F4FFFF          <1>     call strcpy
   376 0000510C 488D3504BEFFFF      <1>     lea rsi, comspecEVar
   377 00005113 E8FAF3FFFF          <1>     call strcpy
   378 00005118 48FFCF              <1>     dec rdi ;Write over the terminating null
   379 0000511B 488D353AB5FFFF      <1>     lea rsi, comspecDir    ;Now copy the actual comspec! 
   380 00005122 E8EBF3FFFF          <1>     call strcpy 
   381 00005127 30C0                <1>     xor al, al
   382 00005129 AA                  <1>     stosb   ;Store the second terminating null
   383 0000512A 5F                  <1>     pop rdi ;Get back the pointer to the start of the env
   384                              <1>     return
    13                              <2> %%_ret:
    14 0000512B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   385                              <1> 
   386                              <1> .allocEnv:
   387                              <1> ;Output: rax -> Ptr to the environment block. 
   388                              <1> ;   If anything goes wrong, error message and exit the shell!
   389 0000512C 0FB71D85010000      <1>     movzx ebx, word [initEnvSz]
   390 00005133 85DB                <1>     test ebx, ebx   ;If this is 0, allocate 160 bytes
   391 00005135 750C                <1>     jnz .goAlloc
   392 00005137 BBA0000000          <1>     mov ebx, 0A0h    ;160 bytes
   393 0000513C 66891D75010000      <1>     mov word [initEnvSz], bx    ;Overwrite
   394                              <1> .goAlloc:
   395 00005143 81C30F000000        <1>     add ebx, 0Fh
   396 00005149 C1EB04              <1>     shr ebx, 4  ;Round up and turn into paragraphs
   397 0000514C B800480000          <1>     mov eax, 4800h
   398 00005151 CD21                <1>     int 21h
   399                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00005153 73(2B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   400 00005155 488D15FFBCFFFF      <1>     lea rdx, memBad1
   401 0000515C E8B6F1FFFF          <1>     call printString
   402 00005161 E9D5E9FFFF          <1>     jmp exit.ouch 
   403                              <1> 
   404                              <1> .cpEnv:
   405                              <1> ;Copies the environment
   406                              <1> ;Input: rsi -> Source to copy from
   407                              <1> ;       rdi -> Destination to copy to
   408 00005166 0FB70D4B010000      <1>     movzx ecx, word [initEnvSz]
   409                              <1> .lp:
   410 0000516D AC                  <1>     lodsb
   411 0000516E AA                  <1>     stosb
   412 0000516F 84C0                <1>     test al, al
   413 00005171 750A                <1>     jnz .notNul
   414 00005173 3806                <1>     cmp byte [rsi], al
   415 00005175 7506                <1>     jnz .notNul
   416                              <1>     ;Here, we have encountered our double null!
   417 00005177 FFC9                <1>     dec ecx ;Now we check if we have space to store the second char
   418 00005179 7406                <1>     jz .err ;If we dont have space for the last null kill last non-null char
   419 0000517B AA                  <1>     stosb
   420                              <1>     return
    13                              <2> %%_ret:
    14 0000517C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   421                              <1> .notNul:
   422 0000517D FFC9                <1>     dec ecx ;One less char to copy over
   423 0000517F 75EC                <1>     jnz .lp
   424                              <1> .err:
   425 00005181 4881EF02000000      <1>     sub rdi, 2
   426 00005188 488D15E9B7FFFF      <1>     lea rdx, noEnvSpace
   427 0000518F E883F1FFFF          <1>     call printString
   428 00005194 31C0                <1>     xor eax, eax
   429 00005196 66AB                <1>     stosw   ;Store 0 word
   430                              <1>     return
    13                              <2> %%_ret:
    14 00005198 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   431                              <1> 
   432                              <1> getMasterEnv:
   433                              <1> ;Walks the psp chain to the first self parent.
   434                              <1> ;Output: rsi -> Environment of the first self-parent program
   435 00005199 4150                <1>     push r8
   436                              <1> .lp:
   437 0000519B 498B7022            <1>     mov rsi, qword [r8 + psp.parentPtr] ;Get the parent pointer
   438 0000519F 4C39C6              <1>     cmp rsi, r8 ;Are we a self parent?
   439 000051A2 7405                <1>     je .exit
   440 000051A4 4989F0              <1>     mov r8, rsi ;Make the current psp the parent
   441 000051A7 EBF2                <1>     jmp short .lp
   442                              <1> .exit:
   443 000051A9 4158                <1>     pop r8
   444 000051AB 488B763E            <1>     mov rsi, qword [rsi + psp.envPtr]   ;Get the environment pointer
   445                              <1>     return
    13                              <2> %%_ret:
    14 000051AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   446                              <1> 
   447                              <1> 
   448                              <1> ;Loader Data here
   449                              <1> initString: 
   450 000051B0 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   450 000051B9 66696320436F6D7075- <1>
   450 000051C2 746572205265736561- <1>
   450 000051CB 726368285229205343- <1>
   450 000051D4 502F444F5328522920- <1>
   450 000051DD 56657273696F6E2024  <1>
   451                              <1> initString2:
   452 000051E6 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",
   452 000051EF 202020284329436F70- <1>
   452 000051F8 797269676874205363- <1>
   452 00005201 69656E746966696320- <1>
   452 0000520A 436F6D707574657220- <1>
   452 00005213 526573656172636820- <1>
   452 0000521C 323032342E          <1>
   453 00005221 0D0A24              <1>     db CR,LF,"$"
   454 00005224 496E636F7272656374- <1> badVerStr:  db "Incorrect DOS version",CR,LF,"$"
   454 0000522D 20444F532076657273- <1>
   454 00005236 696F6E0D0A24        <1>
   455 0000523C 537065636966696564- <1> badCmdDir:  db "Specified COMMAND search directory bad",CR,LF,"$"
   455 00005245 20434F4D4D414E4420- <1>
   455 0000524E 736561726368206469- <1>
   455 00005257 726563746F72792062- <1>
   455 00005260 61640D0A24          <1>
   456 00005265 43616E6E6F74207370- <1> badCombo:   db "Cannot specify /C on top level process. Ignoring...",CR,LF,"$"
   456 0000526E 6563696679202F4320- <1>
   456 00005277 6F6E20746F70206C65- <1>
   456 00005280 76656C2070726F6365- <1>
   456 00005289 73732E2049676E6F72- <1>
   456 00005292 696E672E2E2E0D0A24  <1>
   457 0000529B 496E76616C69642045- <1> badEnvSz:   db "Invalid Environment Size",CR,LF,"$"
   457 000052A4 6E7669726F6E6D656E- <1>
   457 000052AD 742053697A650D0A24  <1>
   458 000052B6 00                  <1> initNewSpec db 0    ;Set if a new comspec found and copied
   459 000052B7 00                  <1> initNewDev  db 0    ;Set if a new device found and copied
   460 000052B8 0000                <1> initEnvSz       dw 0  ;Max 7FFFh (32768) bytes. Default to 160. 0 means no /E:
    24                                  Segment stack1 nobits valign=16 vfollows=cmd
    25                                  ;This stack is only used during init of COMMAND.COM
    26 00000000 <res 3200h>                 dq stackSize dup (?)
    27                                  initEoA:    ;Initial end of allocation
    27          ------------------       info: assembly required 1+8+2 passes

