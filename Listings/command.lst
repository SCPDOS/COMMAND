     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (41h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> netFCBShare     equ 70h
   160                              <1> noInherit       equ 80h
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> 
   163                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 24h on disk full.
   164                              <1> ;Buffering on writes
   165                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   167                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1> readOnlyFile    equ 1h
   170                              <1> hiddenFile      equ 2h
   171                              <1> systemFile      equ 4h
   172                              <1> volumeLabel     equ 8h
   173                              <1> directoryFile   equ 10h ;Directory entry
   174                              <1> archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1> charDevFastOut  equ 10h ;If set, device supports Int 29h
   182                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   183                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   185                              <1> devCharDev      equ 80h ;If set, it is a char device!
   186                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   190                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1>  
   192                              <1> ;------------------------------------------------------------------------;
   193                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   194                              <1> ; to an internal buffer, and then copying it to the specified location
   195                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   196                              <1> ; another request for the same sector from the same device is made, so 
   197                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   198                              <1> ; size, selected according to the largest detected sector size during 
   199                              <1> ; the initial loadup.
   200                              <1> ;
   201                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   202                              <1> ;
   203                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   204                              <1> ;------------------------------------------------------------------------;
   205                              <1> 
   206                              <1> struc bufferHdr
   207 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   208 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   209 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   210 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   211 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   212 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   213 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   214 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   215 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   216                              <1>     .dataarea:             ;Points to the start of the data area
   217                              <1> endstruc
   218                              <1> ;Buffer Flag equates
   219                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   220                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   221                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   222                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   223                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   224                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   225                              <1> ;Note! A buffer is marked as referenced only when the application 
   226                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   227                              <1> ;------------------------------------------------------------------------;
   228                              <1> ; Memory control block for each memory arena
   229                              <1> ;------------------------------------------------------------------------;
   230                              <1> struc mcb
   231 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   232 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   233 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   234 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   235                              <1>     .program:
   236                              <1> endstruc
   237                              <1> ;MCB equates
   238                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   239                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   240                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   241                              <1> mcbMarkCtn      equ "M"
   242                              <1> mcbMarkEnd      equ "Z"
   243                              <1> 
   244                              <1> memFirstFit     equ 0   ;First free block goes to application
   245                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   246                              <1> memLastFit      equ 2   ;Last free block goes to application
   247                              <1> 
   248                              <1> ;Owner = Para aligned address => Owning application PSP
   249                              <1> ;...To consider...
   250                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   251                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   252                              <1> ;------------------------------------------------------------------------;
   253                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   254                              <1> ; following order, thus allowing for return values to be placed in the 
   255                              <1> ; registers by accessing the caller register stack frame.
   256                              <1> ;------------------------------------------------------------------------;
   257                              <1> struc callerFrame
   258 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   259 00000008 ????????????????    <1>     .rbx    resq 1    
   260 00000010 ????????????????    <1>     .rcx    resq 1
   261 00000018 ????????????????    <1>     .rdx    resq 1
   262 00000020 ????????????????    <1>     .rsi    resq 1
   263 00000028 ????????????????    <1>     .rdi    resq 1
   264 00000030 ????????????????    <1>     .rbp    resq 1
   265 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   266 00000040 ????????????????    <1>     .r9     resq 1
   267                              <1> ;Pushed by Processor when invoked via Interrupt
   268 00000048 ????????????????    <1>     .rip    resq 1
   269 00000050 ????????????????    <1>     .cs     resq 1
   270 00000058 ????????????????    <1>     .flags  resq 1
   271                              <1> endstruc
   272                              <1> 
   273                              <1> struc dpl
   274                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   275                              <1> ; server calls
   276 00000000 ????????????????    <1>     .rax    resq 1
   277 00000008 ????????????????    <1>     .rbx    resq 1
   278 00000010 ????????????????    <1>     .rcx    resq 1
   279 00000018 ????????????????    <1>     .rdx    resq 1
   280 00000020 ????????????????    <1>     .rsi    resq 1
   281 00000028 ????????????????    <1>     .rdi    resq 1
   282 00000030 ????????????????    <1>     .r8     resq 1
   283 00000038 ????????????????    <1>     .r9     resq 1
   284 00000040 ????????????????    <1>     .align  resq 1
   285 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   286 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   287                              <1> endstruc
   288                              <1> 
   289                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   290 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   291 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   292 00000010 ????????????????    <1>     .newSFTVal      resq 1
   293 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   294 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   295 00000028 ????????????????    <1>     .newLastdrive   resq 1
   296 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   297 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   298 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   299 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   300 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   301 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   302 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc filename
   306                              <1> ;8.3 File name struct
   307 00000000 ????????????????    <1>     .fName  resb 8
   308 00000008 ??????              <1>     .fExt   resb 3
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   312 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   313 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   314 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   315 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   316 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   317 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   318 00000016 ????                <1>     .fileTime   resw 1  ;File time
   319 00000018 ????                <1>     .fileDate   resw 1  ;File date
   320 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   321 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc psp
   325 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   326 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   327 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   328 0000000A ????????????????    <1>     .oldInt22h  resq 1  ;Int 22h pointer on overlay load
   329 00000012 ????????????????    <1>     .oldInt23h  resq 1  ;Int 23h pointer on overlay load
   330 0000001A ????????????????    <1>     .oldInt24h  resq 1  ;Int 24h pointer on overlay load
   331 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   332                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   333 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   334 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   335 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 21h
   336 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   337 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   338 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   339 0000005B ??                  <1>                 resb 1  ;Reserved byte
   340                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   341                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   342                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   343                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   344                              <1> ; always used and xtraHdlSz.
   345                              <1> ;Will need to add two SYSCALLS for future expansion:
   346                              <1> ;       1) Get Program Environment Pointer
   347                              <1> ;       2) Get Command Line arguments pointer
   348                              <1> ;The below are in the same place as in DOS.
   349                              <1>     .cmdLineArgPtr: ;Symbol for future use
   350 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   351 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   352                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   353 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   354 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   355                              <1> endstruc
   356                              <1> 
   357                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   358                              <1> 
   359                              <1> struc clkStruc
   360 00000000 ????                <1>     .dateWord   resw 1
   361 00000002 ??                  <1>     .minutes    resb 1
   362 00000003 ??                  <1>     .hours      resb 1
   363 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   364 00000005 ??                  <1>     .seconds    resb 1
   365                              <1> endstruc
   366                              <1> 
   367                              <1> struc countryStruc
   368 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   369                              <1>                         ;0 = month day year hh:mm:ss
   370                              <1>                         ;1 = day month year hh:mm:ss
   371                              <1>                         ;2 = year month day hh:mm:ss
   372 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   373 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   374 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   375 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   376 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   377 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   378                              <1>                         ;0 = Symbol leads, without space
   379                              <1>                         ;1 = Symbol follows, without space
   380                              <1>                         ;2 = Symbol leads, one space
   381                              <1>                         ;3 = Symbol follows, one space
   382                              <1>                         ;4 = Symbol replace decimal separator
   383 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   384 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   385 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   386 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   387 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   388                              <1> endstruc
   389                              <1> 
   390                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   391                              <1> ;for a space of 64Gb
   392                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   393                              <1> dosLowBase  equ 600h    ;Low load address
   394                              <1> 
   395                              <1> ;Critical Error AH bitfield equates
   396                              <1> critRead    equ 0h
   397                              <1> critWrite   equ 1h
   398                              <1> critDOS     equ 0h
   399                              <1> critFAT     equ 2h
   400                              <1> critDir     equ 4h
   401                              <1> critData    equ 6h
   402                              <1> critFailOK  equ 8h
   403                              <1> critRetryOK equ 10h
   404                              <1> critIgnorOK equ 20h
   405                              <1> critCharDev equ 80h
   406                              <1> 
   407                              <1> critIgnore  equ 0
   408                              <1> critRetry   equ 1
   409                              <1> critAbort   equ 2
   410                              <1> critFail    equ 3
   411                              <1> 
   412                              <1> ;MISC ASCII control chars
   413                              <1> NUL equ 00h ;^@         | ASCII Null
   414                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   415                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   416                              <1> BEL equ 07h ;^G         | ASCII Bell
   417                              <1> BSP equ 08h ;^H         | ASCII Backspace
   418                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   419                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   420                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   421                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   422                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   423                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   424                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   425                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   426                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   427                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   428                              <1> SPC equ 20h ;Printable  | ASCII Space
   429                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   430                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   431                              <1> 
   432                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   433                              <1> ;Extended Ascii Codes
   434                              <1> eF1     equ 3Bh ;F1 second byte
   435                              <1> eF2     equ 3Ch ;F2 second byte
   436                              <1> eF3     equ 3Dh ;F3 second byte
   437                              <1> eF4     equ 3Eh ;F4 second byte
   438                              <1> eF5     equ 3Fh ;F5 second byte
   439                              <1> eF6     equ 40h ;F6 second byte
   440                              <1> eF7     equ 41h ;F7 second byte
   441                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   442                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   443                              <1> eIns    equ 52h ;Insert second byte
   444                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   445                              <1> 
   446                              <1> ;Default Configuration for the system
   447                              <1> 
   448                              <1> buffersDefault  equ 30
   449                              <1> filesDefault    equ 20
   450                              <1> fcbsDefault     equ 4
   451                              <1> safeFcbsDeflt   equ 0
   452                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       resb 5  
    66 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   resb 1
    68 00000008 ????????????????    <1>     .filename   resb 8
    69 00000010 ??????              <1>     .fileext    resb 3
    70 00000013 ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    resb 8
    73 00000020 ??????              <1>     .newExt     resb 3
    74 00000023 ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    25 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    26 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    27 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    28 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    29 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    30                              <1> endstruc
    31                              <1> 
    32                              <1> struc execProg  ;For use with EXEC-ing a child task
    33 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    34 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    35 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    36 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    37                              <1> endstruc
    38                              <1> 
    39                              <1> ;Directory attribute equates
    40                              <1>     dirReadOnly     equ 01h
    41                              <1>     dirHidden       equ 02h
    42                              <1>     dirSystem       equ 04h
    43                              <1>     dirVolumeID     equ 08h
    44                              <1>     dirDirectory    equ 10h
    45                              <1>     dirArchive      equ 20h
    46                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    47                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    48                              <1>     ;If any of the three bits are set, then ALL three bits are set
    49                              <1>     ; in addition to whatever the user passed to search for.
    50                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    51                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    11 0000002B 5C                  <1> pathSep     db "\"  ;Default path sep
    12 0000002C 2F                  <1> switchChar  db "/"  ;Default switch char
    13 0000002D 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    14 0000002E 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    15                              <1> ;Static strings, not used in command line parsing
    16 00000036 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    16 0000003F 000000000000000000- <1>
    16 00000048 000000000000000000- <1>
    16 00000051 000000000000000000- <1>
    16 0000005A 0000                <1>
    17 0000005C 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    17 00000065 000000000000000000- <1>
    17 0000006E 000000000000000000- <1>
    17 00000077 000000000000000000- <1>
    17 00000080 000000000000000000- <1>
    17 00000089 000000000000000000- <1>
    17 00000092 000000000000000000- <1>
    17 0000009B 00000000            <1>
    18                              <1> 
    19                              <1> 
    20                              <1> cmdLineStatePtr:
    21 0000009F 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    22 000000A0 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    23 000000A2 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    24                              <1> ;These variables are valid for a SINGLE command in a command line
    25                              <1> ;Next two bytes, if set to -1, flags error
    26 000000A4 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    27 000000A5 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    28                              <1> ;                    If 2, we are redirecting output to a file, by appending
    29 000000A6 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    30 000000A8 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    31                              <1> 
    32                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    33 000000AA 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    34 000000AB 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    35 000000AC 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    36                              <1> 
    37 000000AD 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    38 000000AE 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    39 000000AF 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    40                              <1> 
    41                              <1> cmdStateL equ $ - cmdStatePtr
    42                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    43                              <1> 
    44                              <1> ;Batch state variables. Batch changes current dir to dir of batch file!
    45 000000B0 00                  <1> batFlag     db 0    ;Batch mode flag. Set to -1 if batch mode on
    46 000000B1 0000000000000000    <1> batBlockPtr dq 0    ;Ptr to the batch block
    47 000000B9 000000000000000000- <1> batOgCD     db fileSpecZL dup (0)   ;Original current dir for batch
    47 000000C2 000000000000000000- <1>
    47 000000CB 000000000000000000- <1>
    47 000000D4 000000000000000000- <1>
    47 000000DD 000000000000000000- <1>
    47 000000E6 000000000000000000- <1>
    47 000000EF 000000000000000000- <1>
    47 000000F8 000000000000000000- <1>
    47 00000101 00000000000000      <1>
    48 00000108 000000000000000000- <1> batFile     db fileSpecZL dup (0)   ;Path to bat to execute. Qual with path!
    48 00000111 000000000000000000- <1>
    48 0000011A 000000000000000000- <1>
    48 00000123 000000000000000000- <1>
    48 0000012C 000000000000000000- <1>
    48 00000135 000000000000000000- <1>
    48 0000013E 000000000000000000- <1>
    48 00000147 000000000000000000- <1>
    48 00000150 00000000000000      <1>
    49                              <1> ;batCallPtr  dq 0    ;Ptr to the call state block
    50                              <1> 
    51                              <1> ;Structs and strings
    52                              <1> 
    53 00000157 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    53 00000160 00000000000000      <1>
    54 00000167 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    54 00000170 000000000000000000- <1>
    54 00000179 000000000000000000- <1>
    54 00000182 000000000000000000- <1>
    54 0000018B 00000000000000      <1>
    55                              <1> 
    56 00000192 000000000000000000- <1> launchBlock db execProg_size dup (0)
    56 0000019B 000000000000000000- <1>
    56 000001A4 000000000000000000- <1>
    56 000001AD 0000000000          <1>
    57                              <1> 
    58 000001B2 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    58 000001BB 000000000000000000- <1>
    58 000001C4 000000000000000000- <1>
    58 000001CD 000000000000000000- <1>
    58 000001D6 000000000000000000- <1>
    58 000001DF 000000000000000000- <1>
    58 000001E8 000000000000000000- <1>
    58 000001F1 000000000000000000- <1>
    58 000001FA 000000000000000000- <1>
    58 00000203 000000000000000000- <1>
    58 0000020C 000000000000000000- <1>
    58 00000215 000000000000000000- <1>
    58 0000021E 000000000000000000- <1>
    58 00000227 000000000000000000- <1>
    58 00000230 00000000            <1>
    59                              <1> inBufferL   equ 127 ;127 chars so we can copy to PSP with terminating CR
    60 00000234 000000000000000000- <1> cpyBuffer   db cmdBufferL dup (0)   ;Copied input for processing
    60 0000023D 000000000000000000- <1>
    60 00000246 000000000000000000- <1>
    60 0000024F 000000000000000000- <1>
    60 00000258 000000000000000000- <1>
    60 00000261 000000000000000000- <1>
    60 0000026A 000000000000000000- <1>
    60 00000273 000000000000000000- <1>
    60 0000027C 000000000000000000- <1>
    60 00000285 000000000000000000- <1>
    60 0000028E 000000000000000000- <1>
    60 00000297 000000000000000000- <1>
    60 000002A0 000000000000000000- <1>
    60 000002A9 000000000000000000- <1>
    60 000002B2 00000000            <1>
    61 000002B6 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)   ;Buffer with the command pipeline
    61 000002BF 000000000000000000- <1>
    61 000002C8 000000000000000000- <1>
    61 000002D1 000000000000000000- <1>
    61 000002DA 000000000000000000- <1>
    61 000002E3 000000000000000000- <1>
    61 000002EC 000000000000000000- <1>
    61 000002F5 000000000000000000- <1>
    61 000002FE 000000000000000000- <1>
    61 00000307 000000000000000000- <1>
    61 00000310 000000000000000000- <1>
    61 00000319 000000000000000000- <1>
    61 00000322 000000000000000000- <1>
    61 0000032B 000000000000000000- <1>
    61 00000334 00000000            <1>
    62 00000338 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)   ;Space for full path to a ext cmd
    62 00000341 000000000000000000- <1>
    62 0000034A 000000000000000000- <1>
    62 00000353 000000000000000000- <1>
    62 0000035C 000000000000000000- <1>
    62 00000365 000000000000000000- <1>
    62 0000036E 000000000000000000- <1>
    62 00000377 000000000000000000- <1>
    62 00000380 00000000000000      <1>
    63 00000387 000000000000000000- <1> cmdName     db cmdNameL dup (0)     ;Cmd name prefixed by length 
    63 00000390 0000000000          <1>
    64                              <1> 
    65 00000395 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    65 0000039E 000000000000000000- <1>
    65 000003A7 000000000000000000- <1>
    65 000003B0 000000000000000000- <1>
    65 000003B9 000000000000000000- <1>
    65 000003C2 000000000000000000- <1>
    65 000003CB 000000000000000000- <1>
    65 000003D4 000000000000000000- <1>
    65 000003DD 00000000000000      <1>
    66 000003E4 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    66 000003ED 000000000000000000- <1>
    66 000003F6 000000000000000000- <1>
    66 000003FF 000000000000000000- <1>
    66 00000408 000000000000000000- <1>
    66 00000411 000000000000000000- <1>
    66 0000041A 000000000000000000- <1>
    66 00000423 000000000000000000- <1>
    66 0000042C 00000000000000      <1>
    67                              <1> 
    68                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    69 00000433 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    69 0000043C 000000000000000000- <1>
    69 00000445 000000000000000000- <1>
    69 0000044E 000000000000000000- <1>
    69 00000457 000000000000000000- <1>
    69 00000460 000000000000000000- <1>
    69 00000469 000000000000000000- <1>
    69 00000472 000000000000000000- <1>
    69 0000047B 00000000000000      <1>
    70 00000482 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    70 0000048B 000000000000000000- <1>
    70 00000494 000000000000000000- <1>
    70 0000049D 000000000000000000- <1>
    70 000004A6 000000000000000000- <1>
    70 000004AF 000000000000000000- <1>
    70 000004B8 000000000000000000- <1>
    70 000004C1 000000000000000000- <1>
    70 000004CA 00000000000000      <1>
    71                              <1> 
    72 000004D1 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    73 000004D9 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    74                              <1> 
    75                              <1> ;Main scratch buffer for forming paths! Needs to be large enough to splice
    76                              <1> ; a really long invalid DOS path for PATH to work properly.
    77 000004E1 000000000000000000- <1> searchSpec  db 2*cmdBufferL dup (0)   
    77 000004EA 000000000000000000- <1>
    77 000004F3 000000000000000000- <1>
    77 000004FC 000000000000000000- <1>
    77 00000505 000000000000000000- <1>
    77 0000050E 000000000000000000- <1>
    77 00000517 000000000000000000- <1>
    77 00000520 000000000000000000- <1>
    77 00000529 000000000000000000- <1>
    77 00000532 000000000000000000- <1>
    77 0000053B 000000000000000000- <1>
    77 00000544 000000000000000000- <1>
    77 0000054D 000000000000000000- <1>
    77 00000556 000000000000000000- <1>
    77 0000055F 000000000000000000- <1>
    77 00000568 000000000000000000- <1>
    77 00000571 000000000000000000- <1>
    77 0000057A 000000000000000000- <1>
    77 00000583 000000000000000000- <1>
    77 0000058C 000000000000000000- <1>
    77 00000595 000000000000000000- <1>
    77 0000059E 000000000000000000- <1>
    77 000005A7 000000000000000000- <1>
    77 000005B0 000000000000000000- <1>
    77 000005B9 000000000000000000- <1>
    77 000005C2 000000000000000000- <1>
    77 000005CB 000000000000000000- <1>
    77 000005D4 000000000000000000- <1>
    77 000005DD 0000000000000000    <1>
    78                              <1> 
    79                              <1> ;Internal Function vars
    80                              <1> ;Dir Vars
    81 000005E5 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    82                              <1> ;                                   Bit[1] set => /P or /p specified
    83                              <1> ;                                   Bit[2] set => A file/path specified
    84 000005E6 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    85 000005E7 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    86 000005E8 00                  <1> dirDrv      db 0    ;0 based drive number to use
    87 000005E9 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
    87 000005F2 000000000000000000- <1>
    87 000005FB 000000000000000000- <1>
    87 00000604 000000000000000000- <1>
    87 0000060D 000000000000000000- <1>
    87 00000616 000000000000000000- <1>
    87 0000061F 000000000000000000- <1>
    87 00000628 000000000000000000- <1>
    87 00000631 000000000000000000- <1>
    87 0000063A 000000000000000000- <1>
    87 00000643 000000000000000000- <1>
    87 0000064C 000000000000000000- <1>
    87 00000655 000000000000000000- <1>
    87 0000065E 000000000000000000- <1>
    87 00000667 00000000            <1>
    88 0000066B 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
    88 00000674 3F3F3F3F3F3F3F      <1>
    89                              <1> dirWideType equ 1
    90                              <1> dirPageType equ 2
    91                              <1> dirFileType equ 4
    92                              <1> ;Volume Vars
    93                              <1> volFcb:
    94                              <1>     istruc exFcb
    95 0000067B FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    96 0000067C 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    97 00000682 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
    98 00000683 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
    99 0000068B 3F3F3F              <1>     at exFcb.fileext,   db "???"
   100 0000068E 00000000            <1>     at exFcb.curBlock,  dd 0
   101 00000692 00<rep 15h>         <1>     iend 
   102                              <1> 
   103                              <1> ;Time/Date vars
   104 000006A7 00                  <1> td1 db 0    ;Minutes/Year
   105 000006A8 00                  <1> td2 db 0    ;Hours/Zero
   106 000006A9 00                  <1> td3 db 0    ;Hundredths/Day
   107 000006AA 00                  <1> td4 db 0    ;Seconds/Month
   108                              <1> 
   109                              <1> ;Rename/Copy/Delete Buffers
   110                              <1> delPath:
   111 000006AB 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   111 000006B4 000000000000000000- <1>
   111 000006BD 000000000000000000- <1>
   111 000006C6 000000000000000000- <1>
   111 000006CF 000000000000000000- <1>
   111 000006D8 000000000000000000- <1>
   111 000006E1 000000000000000000- <1>
   111 000006EA 000000000000000000- <1>
   111 000006F3 000000000000000000- <1>
   111 000006FC 000000000000000000- <1>
   111 00000705 000000000000000000- <1>
   111 0000070E 000000000000000000- <1>
   111 00000717 000000000000000000- <1>
   111 00000720 000000000000000000- <1>
   111 00000729 00000000            <1>
   112 0000072D 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   112 00000736 000000000000000000- <1>
   112 0000073F 000000000000000000- <1>
   112 00000748 000000000000000000- <1>
   112 00000751 000000000000000000- <1>
   112 0000075A 000000000000000000- <1>
   112 00000763 000000000000000000- <1>
   112 0000076C 000000000000000000- <1>
   112 00000775 000000000000000000- <1>
   112 0000077E 000000000000000000- <1>
   112 00000787 000000000000000000- <1>
   112 00000790 000000000000000000- <1>
   112 00000799 000000000000000000- <1>
   112 000007A2 000000000000000000- <1>
   112 000007AB 00000000            <1>
   113 000007AF 0000000000000000    <1> srcPtr      dq 0    ;Where to copy the pattern to
   114 000007B7 0000000000000000    <1> destPtr     dq 0    ;Where to copy the pattern to
   115 000007BF 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   115 000007C8 2020                <1>
   116                              <1> ;Copy Handles
   117 000007CA FFFF                <1> sourceHdl   dw -1
   118 000007CC FFFF                <1> destHdl     dw -1
   119 000007CE 0000                <1> srcHdlInfo  dw 0 ;Used to save the handle device info (bit 7 Set -> Char dev)
   120 000007D0 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   120 000007D9 000000000000000000- <1>
   120 000007E2 000000000000000000- <1>
   120 000007EB 000000000000000000- <1>
   120 000007F4 000000000000000000- <1>
   120 000007FD 000000000000000000- <1>
   120 00000806 000000000000000000- <1>
   120 0000080F 000000000000000000- <1>
   120 00000818 000000000000000000- <1>
   120 00000821 000000000000000000- <1>
   120 0000082A 000000000000000000- <1>
   120 00000833 000000000000000000- <1>
   120 0000083C 000000000000000000- <1>
   120 00000845 000000000000000000- <1>
   120 0000084E 0000                <1>
   121                              <1> 
   122                              <1> ;Environment manipulation vars
   123 00000850 0000                <1> envVarSz        dw 0    ;Env var size
   124 00000852 0000                <1> envVarNamSz     dw 0    ;Env var "name="" length
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 00000854 03444952            <1>     db 3, "DIR"
     8 00000858 A619                <1>     dw dir - startLbl
     9                              <1> 
    10 0000085A 024344              <1>     db 2, "CD"
    11 0000085D 6F1E                <1>     dw chdir - startLbl
    12                              <1> 
    13 0000085F 054348444952        <1>     db 5, "CHDIR"
    14 00000865 6F1E                <1>     dw chdir - startLbl
    15                              <1> 
    16 00000867 024D44              <1>     db 2, "MD"
    17 0000086A EA1E                <1>     dw mkdir - startLbl
    18                              <1> 
    19 0000086C 054D4B444952        <1>     db 5, "MKDIR"
    20 00000872 EA1E                <1>     dw mkdir - startLbl
    21                              <1> 
    22 00000874 025244              <1>     db 2, "RD"
    23 00000877 361F                <1>     dw rmdir - startLbl
    24                              <1> 
    25 00000879 05524D444952        <1>     db 5, "RMDIR"
    26 0000087F 361F                <1>     dw rmdir - startLbl
    27                              <1> 
    28 00000881 0344454C            <1>     db 3, "DEL"
    29 00000885 2421                <1>     dw erase - startLbl
    30                              <1> 
    31 00000887 054552415345        <1>     db 5, "ERASE"
    32 0000088D 2421                <1>     dw erase - startLbl
    33                              <1> 
    34 0000088F 0444415445          <1>     db 4, "DATE"
    35 00000894 6222                <1>     dw date - startLbl
    36                              <1> 
    37 00000896 0454494D45          <1>     db 4, "TIME"
    38 0000089B 2B23                <1>     dw time - startLbl
    39                              <1> 
    40 0000089D 04434F5059          <1>     db 4, "COPY"
    41 000008A2 821F                <1>     dw copy - startLbl
    42                              <1> 
    43 000008A4 0443545459          <1>     db 4, "CTTY"
    44 000008A9 C623                <1>     dw ctty - startLbl
    45                              <1> 
    46 000008AB 03434C53            <1>     db 3, "CLS"
    47 000008AF 6124                <1>     dw cls - startLbl
    48                              <1> 
    49 000008B1 05425245414B        <1>     db 5, "BREAK"
    50 000008B7 D324                <1>     dw break - startLbl
    51                              <1> 
    52 000008B9 06564552494659      <1>     db 6, "VERIFY"
    53 000008C0 5425                <1>     dw verify - startLbl
    54                              <1> 
    55 000008C2 0652454E414D45      <1>     db 6, "RENAME"
    56 000008C9 D125                <1>     dw rename - startLbl
    57                              <1> 
    58 000008CB 0352454E            <1>     db 3, "REN"
    59 000008CF D125                <1>     dw rename - startLbl
    60                              <1>     
    61 000008D1 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 000008DA D529                <1>     dw truename - startLbl
    63                              <1> 
    64 000008DC 03564552            <1>     db 3, "VER"
    65 000008E0 BB2B                <1>     dw version - startLbl
    66                              <1> 
    67 000008E2 03564F4C            <1>     db 3, "VOL"
    68 000008E6 FC2A                <1>     dw volume - startLbl
    69                              <1> 
    70 000008E8 034D454D            <1>     db 3, "MEM"
    71 000008EC FF2B                <1>     dw memory - startLbl
    72                              <1> 
    73 000008EE 0445584954          <1>     db 4, "EXIT"
    74 000008F3 E82D                <1>     dw exit - startLbl
    75                              <1> 
    76 000008F5 0454595045          <1>     db 4, "TYPE"
    77 000008FA 492D                <1>     dw type - startLbl
    78                              <1> 
    79 000008FC 054C4142454C        <1>     db 5, "LABEL"
    80 00000902 262A                <1>     dw label - startLbl
    81                              <1> 
    82 00000904 0450415448          <1>     db 4, "PATH"
    83 00000909 6031                <1>     dw pathEdit - startLbl
    84                              <1> 
    85 0000090B 03534554            <1>     db 3, "SET"
    86 0000090F 4130                <1>     dw set - startLbl
    87                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    88 00000911 054D4B4C424C        <1>     db 5, "MKLBL"
    89 00000917 502A                <1>     dw mklbl - startLbl
    90                              <1> 
    91 00000919 05524D4C424C        <1>     db 5, "RMLBL"
    92 0000091F 8B2A                <1>     dw rmlbl - startLbl
    93                              <1> 
    94 00000921 05524E4C424C        <1>     db 5, "RNLBL"
    95 00000927 C62A                <1>     dw rnlbl - startLbl
    96                              <1> 
    97 00000929 05544F554348        <1>     db 5, "TOUCH"
    98 0000092F C827                <1>     dw touch - startLbl
    99                              <1> 
   100 00000931 044A4F494E          <1>     db 4, "JOIN"
   101 00000936 2B28                <1>     dw join - startLbl
   102                              <1> 
   103 00000938 055355425354        <1>     db 5, "SUBST"
   104 0000093E EE28                <1>     dw subst - startLbl
   105                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   106 00000940 FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 00000941 0D0A24              <1> crlf    db  CR,LF,"$"
     3 00000944 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 00000949 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 00000952 696C65206D69737369- <1>
     4 0000095B 6E670D0A24          <1>
     5 00000960 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 00000969 6469736B2077697468- <1>
     5 00000972 206261746368206669- <1>
     5 0000097B 6C65                <1>
     6 0000097D 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 00000986 737320616E79206B65- <1>
     6 0000098F 79207768656E207265- <1>
     6 00000998 6164790D0A24        <1>
     7 0000099E 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 000009A7 6E64206F722066696C- <1>
     7 000009B0 65206E616D650D0A24  <1>
     8 000009B9 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 000009C2 2066696C65206E616D- <1>
     8 000009CB 65206F7220          <1>
     9 000009D0 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 000009D9 666F756E640D0A24    <1>
    10 000009E1 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full. On copy only!
    10 000009EA 656E74206469736B20- <1>
    10 000009F3 73706163650D0A24    <1>
    11 000009FB 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 00000A04 7669726F6E6D656E74- <1>
    11 00000A0D 2073706163650D0A24  <1>
    12 00000A16 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 00000A1F 74696F6E206572726F- <1>
    12 00000A28 720D0A24            <1>
    13 00000A2C 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 00000A35 6F7420626520636F70- <1>
    13 00000A3E 696564206F6E746F20- <1>
    13 00000A47 697473656C660D0A24  <1>
    14 00000A50 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 00000A59 662064657374696E61- <1>
    14 00000A62 74696F6E206C6F7374- <1>
    14 00000A6B 206265666F72652063- <1>
    14 00000A74 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 00000A7A 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 00000A83 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 00000A8C 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 00000A95 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 00000A96 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 00000A9F 65650D0A24          <1>
    21 00000AA4 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 00000AAD 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 00000AB6 726976652073706563- <1>
    23 00000ABF 696669636174696F6E- <1>
    23 00000AC8 0D0A24              <1>
    24 00000ACB 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 00000AD4 6B6579207768656E20- <1>
    24 00000ADD 7265616479202E202E- <1>
    24 00000AE6 202E2024            <1>
    25 00000AEA 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 00000AF3 6172616D657465720D- <1>
    25 00000AFC 0A24                <1>
    26                              <1> 
    27 00000AFE 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 00000B07 576564546875467269- <1>
    27 00000B10 536174              <1>
    28 00000B13 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 00000B1C 206461746524        <1>
    29 00000B22 43757272656E742064- <1> curDate db  "Current date is $"
    29 00000B2B 6174652069732024    <1>
    30 00000B33 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 00000B3C 657720646174652024  <1>
    31 00000B45 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 00000B4E 293A2024            <1>
    32 00000B52 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 00000B5B 293A2024            <1>
    33 00000B5F 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 00000B68 293A2024            <1>
    34 00000B6C 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 00000B75 2074696D6524        <1>
    35 00000B7B 43757272656E742074- <1> curTime db  "Current time is $"
    35 00000B84 696D652069732024    <1>
    36 00000B8C 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 00000B95 65772074696D653A20- <1>
    36 00000B9E 24                  <1>
    37                              <1> 
    38 00000B9F 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000BA8 7572652028592F4E29- <1>
    38 00000BB1 3F2024              <1>
    39                              <1> 
    40 00000BB4 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000BBD 56657273696F6E2024  <1>
    41                              <1> 
    42 00000BC6 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000BCF 6E2064726976652024  <1>
    43 00000BD8 2069732024          <1> volOk   db " is $"
    44 00000BDD 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000BE6 6162656C24          <1>
    45                              <1> 
    46 00000BEB 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000BF4 69726563746F72790D- <1>
    46 00000BFD 0A24                <1>
    47 00000BFF 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000C08 206372656174652064- <1>
    47 00000C11 69726563746F72790D- <1>
    47 00000C1A 0A24                <1>
    48 00000C1C 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000C25 6174682C206E6F7420- <1>
    48 00000C2E 6469726563746F7279- <1>
    48 00000C37 2C0D0A              <1>
    49 00000C3A 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000C43 6F7279206E6F742065- <1>
    49 00000C4C 6D7074790D0A24      <1>
    50 00000C53 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000C5C 79206F66202024      <1>
    51 00000C63 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000C6C 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    52 00000C75 6E6965640D0A24      <1>
    53 00000C7C 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    53 00000C85 72697665206973206E- <1>
    53 00000C8E 6F206C6F6E67657220- <1>
    53 00000C97 76616C696424        <1>
    54 00000C9D 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    54 00000CA6 7269766520696E2073- <1>
    54 00000CAF 656172636820706174- <1>
    54 00000CB8 680D0A24            <1>
    55 00000CBC 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    55 00000CC5 65766963650D0A24    <1>
    56 00000CCD 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    56 00000CD6 20666F756E640D0A24  <1>
    57 00000CDF 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    57 00000CE8 726F720D0A24        <1>
    58 00000CEE 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    58 00000CF7 6F74206265206E6573- <1>
    58 00000D00 7465640D0A24        <1>
    59 00000D06 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    59 00000D0F 6174652066696C6520- <1>
    59 00000D18 6572726F7220647572- <1>
    59 00000D21 696E6720706970650D- <1>
    59 00000D2A 0A24                <1>
    60 00000D2C 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    60 00000D35 2062696E6172792072- <1>
    60 00000D3E 656164732066726F6D- <1>
    60 00000D47 206120646576696365- <1>
    60 00000D50 0D0A24              <1>
    61 00000D53 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    62 00000D59 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    63 00000D5E 425245414B20697320- <1> breakIs db "BREAK is $"
    63 00000D67 24                  <1>
    64 00000D68 564552494659206973- <1> verifyIs    db "VERIFY is $"
    64 00000D71 2024                <1>
    65 00000D73 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    66 00000D7C 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    66 00000D85 617468206F72206669- <1>
    66 00000D8E 6C65206E616D650D0A- <1>
    66 00000D97 24                  <1>
    67 00000D98 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    67 00000DA1 756D626572206F6620- <1>
    67 00000DAA 706172616D65746572- <1>
    67 00000DB3 730D0A24            <1>
    68 00000DB7 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    68 00000DC0 74696E6720746F2064- <1>
    68 00000DC9 6576696365          <1>
    69 00000DCE 08200800            <1> backSpace   db BSP," ",BSP,NUL
    70                              <1> 
    71 00000DD2 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    71 00000DDB 20202020202020546F- <1>
    71 00000DE4 74616C207379737465- <1>
    71 00000DED 6D206D656D6F72793A- <1>
    71 00000DF6 2024                <1>
    72 00000DF8 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    72 00000E01 20202020202020204D- <1>
    72 00000E0A 656D6F727920757365- <1>
    72 00000E13 6420627920444F533A- <1>
    72 00000E1C 2024                <1>
    73 00000E1E 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    73 00000E27 656D6F727920757365- <1>
    73 00000E30 64206279206170706C- <1>
    73 00000E39 69636174696F6E733A- <1>
    73 00000E42 2024                <1>
    74 00000E44 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    74 00000E4D 656D6F727920726573- <1>
    74 00000E56 657276656420627920- <1>
    74 00000E5F 68617264776172653A- <1>
    74 00000E68 2024                <1>
    75 00000E6A 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    75 00000E73 202020202020202020- <1>
    75 00000E7C 2020202020204D656D- <1>
    75 00000E85 6F727920667265653A- <1>
    75 00000E8E 2024                <1>
    76 00000E90 20627974657324      <1> memByte db " bytes$"
    77 00000E97 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    77 00000EA0 6F7420417373657274- <1>
    77 00000EA9 61696E20444F532045- <1>
    77 00000EB2 6E74727920506F696E- <1>
    77 00000EBB 7424                <1>
    78 00000EBD 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    78 00000EC6 416C6C6F636174696F- <1>
    78 00000ECF 6E204572726F7224    <1>
    79 00000ED7 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    79 00000EE0 4572726F7224        <1>
    80 00000EE6 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    80 00000EEF 68616C74656424      <1>
    81                              <1> 
    82 00000EF6 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    82 00000EFF 206372656174652070- <1>
    82 00000F08 6970650D0A          <1>
    83                              <1> pipeErrMsgL equ $ - pipeErrMsg
    84 00000F0D 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    84 00000F16 6F6E206572726F720D- <1>
    84 00000F1F 0A                  <1>
    85                              <1> redirErrMsgL   equ $ - redirErrMsg
    86                              <1> 
    87 00000F20 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    88 00000F24 2020202024          <1> fourSpc  db "    $"
    89 00000F29 20202024            <1> threeSpc db "   $"
    90 00000F2D 202024              <1> twoSpc   db "  $"
    91                              <1> 
    92 00000F30 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    92 00000F39 696679204F4E206F72- <1>
    92 00000F42 204F46460D0A24      <1>
    93                              <1> 
    94 00000F49 50524F4D50543D      <1> promptEVar  db "PROMPT="
    95 00000F50 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
    96                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    97                              <1> ; handles and reopen CON
    98 00000F59 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:
     3                              <1> ;This is copied into an MCB to be used as the environment!
     4                              <1> comspecEvar:
     5 00000F5D 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 00000F65 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0  ;Part of the comspec!
     7 00000F6E 442E434F4D00        <1>
     8                              <1> pathEVar:
     9 00000F74 504154483D0000      <1>     db "PATH=",0,0  ;End of default environment strings
    10                              <1> menv_len equ $ - masterEnv
    11                              <1> ;Master environment doesnt contain the "program name string"
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00000F7B 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00000F7E 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00000F82 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 00000F85 B44A                <1>     mov ah, 4Ah ;Realloc
     9 00000F87 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00000F8A CD21                <1>     int 21h
    11 00000F8C EB6C                <1>     jmp short commandMain
    12                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    13 00000F8E B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    14 00000F93 CD21                <1>     int 21h
    15 00000F95 66890571F0FFFF      <1>     mov word [returnCode], ax
    16                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    17 00000F9C 488D1593290000      <1>     lea rdx, critErrorHandler
    18 00000FA3 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    19 00000FA7 B824250000          <1>     mov eax, 2524h
    20 00000FAC CD21                <1>     int 21h
    21 00000FAE 488D151C2C0000      <1>     lea rdx, int23h
    22 00000FB5 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    23 00000FB9 B823250000          <1>     mov eax, 2523h
    24 00000FBE CD21                <1>     int 21h
    25 00000FC0 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    26 00000FC7 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    27 00000FCB B822250000          <1>     mov eax, 2522h
    28 00000FD0 CD21                <1>     int 21h
    29 00000FD2 F605C6F0FFFFFF      <1>     test byte [pipeFlag], -1
    30 00000FD9 0F85B8000000        <1>     jnz commandMain.pipeProceed ;Skip the handle closing when pipe active
    31 00000FDF E820050000          <1>     call advanceRedir   ;Clean up redirection once we are done
    32                              <1> ;Close all handles from 5->MAX
    33 00000FE4 0FB70D3CF0FFFF      <1>     movzx ecx, word [numHdls]
    34 00000FEB BB05000000          <1>     mov ebx, 5
    35                              <1> .handleClose:
    36 00000FF0 B43E                <1>     mov ah, 3Eh ;File close
    37 00000FF2 CD21                <1>     int 21h
    38 00000FF4 FFC3                <1>     inc ebx ;Goto next file
    39 00000FF6 39CB                <1>     cmp ebx, ecx
    40 00000FF8 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    41                              <1> commandMain:
    42 00000FFA 488B2504F0FFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    43 00001001 FC                  <1>     cld ;Ensure stringops are done the right way
    44 00001002 C605A9F1FFFF7F      <1>     mov byte [inBuffer], inBufferL      ;Reset the buffer length
    45 00001009 C60524F2FFFF7F      <1>     mov byte [cpyBuffer], inBufferL     ;Reset the buffer length
    46 00001010 C6059FF2FFFF7F      <1>     mov byte [cmdBuffer], inBufferL     ;Reset the buffer length
    47                              <1> .inputMain:
    48 00001017 E823220000          <1>     call printCRLF
    49                              <1> .inputMain2:
    50 0000101C F6058DF0FFFFFF      <1>     test byte [batFlag], -1 ;If batch on, go here
    51 00001023 0F8584080000        <1>     jnz batNextLine
    52 00001029 E86D250000          <1>     call clearCommandLineState
    53 0000102E E840250000          <1>     call printPrompt
    54                              <1> 
    55 00001033 B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    56 00001038 CD21                <1>     int 21h
    57 0000103A B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    58 0000103F BA01000000          <1>     mov edx, 1      ;Start new print job
    59 00001044 CD21                <1>     int 21h
    60 00001046 488D1565F1FFFF      <1>     lea rdx, inBuffer
    61 0000104D B8000A0000          <1>     mov eax, 0A00h  ;Do Buffered input
    62 00001052 CD21                <1>     int 21h
    63 00001054 E8E6210000          <1>     call printCRLF  ;Note we have accepted input
    64                              <1> ;First check we had something typed in of length greater than 0
    65 00001059 803D53F1FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    66 00001060 74BA                <1>     je .inputMain2
    67                              <1>     ;Copy over the input text
    68 00001062 488D3549F1FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    69                              <1> .copyPoint: ;Copy over commandline here
    70 00001069 488D3DC4F1FFFF      <1>     lea rdi, cpyBuffer
    71 00001070 B982000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    72 00001075 F3A4                <1>     rep movsb
    73 00001077 E85C000000          <1>     call makeCmdBuffer   ;Preprocess the redir, make cmd buffer
    74                              <1> .pipeLoop:
    75 0000107C 4C8B058CEFFFFF      <1>     mov r8, qword [pspPtr]  ;Point back to home segment
    76 00001083 E8AA000000          <1>     call makeCmdString      ;Now make the command string in the psp
    77 00001088 E86D060000          <1>     call setupRedirandPipes ;Setup pipes and redir if appropriate
    78 0000108D E8F9000000          <1>     call analyseCmdline
    79 00001092 E8A0010000          <1>     call doCommandLine  ;This analyses and does the command line!
    80                              <1> .pipeProceed:
    81 00001097 E868040000          <1>     call advanceRedir
    82 0000109C F605FCEFFFFFFF      <1>     test byte [pipeFlag], -1  ;If we have any pipes active, we proceed here
    83 000010A3 0F846EFFFFFF        <1>     jz .inputMain
    84                              <1>     ;Now we pull the commandline forwards. 
    85 000010A9 E884000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    86 000010AE 0F8463FFFFFF        <1>     jz .inputMain       ;We are pointing to a CR, no pipe!
    87 000010B4 488D3DFDF1FFFF      <1>     lea rdi, cmdBuffer + 2
    88 000010BB 4889F1              <1>     mov rcx, rsi
    89 000010BE 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    90 000010C1 280DF0F1FFFF        <1>     sub byte [cmdBuffer + 1], cl    ;And rease from the count
    91 000010C7 8A0DEAF1FFFF        <1>     mov cl, byte [cmdBuffer + 1]
    92 000010CD FFC1                <1>     inc ecx     ;One more for the terminating char
    93 000010CF F3A4                <1>     rep movsb   ;Move the chars over    
    94 000010D1 E8B4240000          <1>     call clearCommandState  ;Else, clear the command state and start again
    95 000010D6 EBA4                <1>     jmp short .pipeLoop
    96                              <1> 
    97                              <1> makeCmdBuffer:
    98                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    99                              <1> ; copy buffer. Called only once in a cycle.
   100                              <1> ;Throughout: CL has char count, CH has quote count
   101 000010D8 488D3557F1FFFF      <1>     lea rsi, [cpyBuffer + 2]    ;Goto copy buffer + 2
   102 000010DF 31C9                <1>     xor ecx, ecx
   103 000010E1 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   104                              <1> .countQuotes:
   105 000010E4 AC                  <1>     lodsb
   106 000010E5 3C22                <1>     cmp al, '"'
   107 000010E7 7507                <1>     jne .notQuoteToCount
   108 000010E9 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   109 000010EB E9F4FFFFFF          <1>     jmp .countQuotes
   110                              <1> .notQuoteToCount:
   111 000010F0 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   112 000010F2 75F0                <1>     jne .countQuotes
   113 000010F4 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   114 000010F7 488D3DBAF1FFFF      <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
   115                              <1> .getChar:
   116 000010FE AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   117 000010FF 3C22                <1>     cmp al, '"'     ;Is char a quote?
   118 00001101 750E                <1>     jne .notQuote
   119 00001103 FECD                <1>     dec ch          ;We have a quote, now decrement
   120 00001105 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   121                              <1> .searchForClosingQuote:
   122                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   123 00001107 AA                  <1>     stosb   ;Store char and inc rdi
   124 00001108 FEC1                <1>     inc cl
   125 0000110A AC                  <1>     lodsb   ;Get next char
   126 0000110B 3C22                <1>     cmp al, '"'
   127 0000110D 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   128 0000110F FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   129                              <1> .notQuote:
   130 00001111 E888050000          <1>     call peelRedir      ;Intervene redir if needed
   131 00001116 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   132 00001118 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   133 0000111A EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   134                              <1> .pipeHandle:
   135                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   136 0000111C 0F84A9020000        <1>     jz pipeFailure ;We had double pipe symbol, reset!
   137                              <1> .notRedir:
   138 00001122 AA                  <1>     stosb       ;Store char and advance rdi
   139 00001123 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   140 00001125 7404                <1>     je .exit
   141 00001127 FEC1                <1>     inc cl      ;Increment char count
   142 00001129 EBD3                <1>     jmp short .getChar    ;If not, get next char
   143                              <1> .exit:
   144 0000112B 880D86F1FFFF        <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   145                              <1>     return
    13                              <2> %%_ret:
    14 00001131 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   146                              <1> 
   147                              <1> makeCmdString:
   148                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   149                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   150                              <1> ; Copies into the psp.
   151                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   152 00001132 488D357FF1FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   153 00001139 31C9                <1>     xor ecx, ecx
   154 0000113B 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   155                              <1> .countQuotes:
   156 0000113E AC                  <1>     lodsb
   157 0000113F 3C22                <1>     cmp al, '"'
   158 00001141 7507                <1>     jne .notQuoteToCount
   159 00001143 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   160 00001145 E9F4FFFFFF          <1>     jmp .countQuotes
   161                              <1> .notQuoteToCount:
   162 0000114A 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   163 0000114C 75F0                <1>     jne .countQuotes
   164 0000114E 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   165 00001151 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   166                              <1> .getChar:
   167 00001158 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   168 00001159 3C22                <1>     cmp al, '"'     ;Is char a quote?
   169 0000115B 750E                <1>     jne .notQuote
   170 0000115D FECD                <1>     dec ch          ;We have a quote, now decrement
   171 0000115F 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   172                              <1> .searchForClosingQuote:
   173                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   174 00001161 AA                  <1>     stosb   ;Store char and inc rdi
   175 00001162 FEC1                <1>     inc cl
   176 00001164 AC                  <1>     lodsb   ;Get next char
   177 00001165 3C22                <1>     cmp al, '"'
   178 00001167 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   179 00001169 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   180                              <1> .notQuote:
   181 0000116B 3C7C                <1>     cmp al, "|"
   182 0000116D 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   183 0000116F B00D                <1>     mov al, CR          ;Store the pipe char
   184 00001171 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   185                              <1> .notPipe:
   186 00001174 AA                  <1>     stosb       ;Store char and advance rdi
   187 00001175 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   188 00001177 7404                <1>     je .exit
   189 00001179 FEC1                <1>     inc cl      ;Increment char count
   190 0000117B EBDB                <1>     jmp short .getChar    ;If not, get next char
   191                              <1> .exit:
   192 0000117D 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   193 00001180 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   194 00001187 803E0D              <1>     cmp byte [rsi], CR  
   195                              <1>     return
    13                              <2> %%_ret:
    14 0000118A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   196                              <1> 
   197                              <1> analyseCmdline:
   198                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   199                              <1> ; processes the command name into the FCB.  
   200 0000118B 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   201 00001192 4889F3              <1>     mov rbx, rsi            ;Save this ptr in rbx
   202 00001195 E8B8230000          <1>     call skipDelimiters     ;Skip any preceeding separators
   203 0000119A 488D3D97F1FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   204 000011A1 E8DE240000          <1>     call cpDelimPathToBufz  ;Moves rsi to the first char past the delim char
   205 000011A6 48FFCE              <1>     dec rsi ;Point it back to the delim char
   206 000011A9 E880000000          <1>     call .skipAndCheckCR
   207 000011AE 7439                <1>     je .setupCmdVars
   208 000011B0 C605F3EEFFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   209 000011B7 4889F0              <1>     mov rax, rsi
   210 000011BA 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   211 000011BD 8805E8EEFFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   212                              <1> .skipArg:
   213 000011C3 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   214 000011C4 3C0D                <1>     cmp al, CR
   215 000011C6 7421                <1>     je .setupCmdVars
   216 000011C8 E893230000          <1>     call isALdelimiter
   217 000011CD 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   218 000011CF E85A000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   219 000011D4 7413                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   220 000011D6 C605D0EEFFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   221 000011DD 4889F0              <1>     mov rax, rsi            
   222 000011E0 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   223 000011E3 8805C5EEFFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   224                              <1> .setupCmdVars:
   225                              <1> ;Before returning, we copy the command name to cmdName 
   226 000011E9 C60597F1FFFF00      <1>     mov byte [cmdName], 0   ;Initialise this field to indicate no cmd
   227 000011F0 488D3D41F1FFFF      <1>     lea rdi, cmdPathSpec
   228 000011F7 E80E240000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   229 000011FC E835230000          <1>     call strlen ;Get the length of the final path componant
   230 00001201 81F90C000000        <1>     cmp ecx, 11 + 1 ;Extra char for the ext separator (dot)
   231 00001207 771D                <1>     ja .exitBad     ;Return error
   232 00001209 4889FE              <1>     mov rsi, rdi
   233 0000120C 488D3D74F1FFFF      <1>     lea rdi, cmdName
   234 00001213 FFC9                <1>     dec ecx ;Minus the terminating null
   235 00001215 880F                <1>     mov byte [rdi], cl ;Store the length here
   236 00001217 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   237                              <1> .cpCmdName:
   238 0000121A AC                  <1>     lodsb
   239 0000121B E820230000          <1>     call ucChar ;Uppercase the char
   240 00001220 AA                  <1>     stosb
   241 00001221 FFC9                <1>     dec ecx
   242 00001223 75F5                <1>     jnz .cpCmdName
   243                              <1>     return
    13                              <2> %%_ret:
    14 00001225 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   244                              <1> .exitBad:
   245 00001226 C6055AF1FFFFFF      <1>     mov byte [cmdName], -1 ;Store -1 to indicate error
   246                              <1>     return
    13                              <2> %%_ret:
    14 0000122D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   247                              <1> .skipAndCheckCR:
   248                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   249 0000122E E81F230000          <1>     call skipDelimiters ;Go to the next char in the input line
   250 00001233 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   251                              <1>     return
    13                              <2> %%_ret:
    14 00001236 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   252                              <1> 
   253                              <1> doCommandLine:
   254 00001237 488D35FAF0FFFF      <1>     lea rsi, cmdPathSpec
   255                              <1>     ;The following check accounts for the end of a piped command
   256 0000123E 803D42F1FFFF00      <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, fail!
   257                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001245 74(36)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   258 00001247 803D39F1FFFFFF      <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   259 0000124E 0F8449070000        <1>     je badCmdError
   260 00001254 488D3DFCEEFFFF      <1>     lea rdi, cmdFcb
   261 0000125B B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
   262 00001260 CD21                <1>     int 21h
   263 00001262 0FB71DCFF0FFFF      <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   264 00001269 80FF3A              <1>     cmp bh, ":"
   265 0000126C 752D                <1>     jne .noDriveSpecified
   266 0000126E 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   267 00001270 E8CB220000          <1>     call ucChar     ;Uppercase al
   268 00001275 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   269 00001277 80FBFF              <1>     cmp bl, -1      ;Int 21h returns AL = -1 if bad drive specified
   270 0000127A 7412                <1>     je .badDrive
   271                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   272 0000127C 803D04F1FFFF02      <1>     cmp byte [cmdName], 2
   273 00001283 7516                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   274 00001285 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   275 00001287 E880220000          <1>     call setDrive
   276                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000128C 74(36)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   277                              <1> .badDrive:
   278 0000128E 488D1518F8FFFF      <1>     lea rdx, badDrv
   279 00001295 B409                <1>     mov ah, 09h
   280 00001297 CD21                <1>     int 21h
   281 00001299 F9                  <1>     stc
   282                              <1>     return
    13                              <2> %%_ret:
    14 0000129A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   283                              <1> .noDriveSpecified:
   284                              <1> ;Now we set the two FCB's in the command line
   285 0000129B F60508EEFFFFFF      <1>     test byte [arg1Flg], -1
   286 000012A2 744D                <1>     jz .fcbArgsDone
   287 000012A4 0FB60500EEFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   288 000012AB 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   289 000012B2 4801C6              <1>     add rsi, rax    ;Point to first argument
   290 000012B5 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   291 000012B9 B801290000          <1>     mov eax, 2901h
   292 000012BE CD21                <1>     int 21h
   293 000012C0 8805E6EDFFFF        <1>     mov byte [arg1FCBret], al
   294 000012C6 F605E0EDFFFFFF      <1>     test byte [arg2Flg], -1
   295 000012CD 7422                <1>     jz .fcbArgsDone
   296 000012CF 0FB605D8EDFFFF      <1>     movzx eax, byte [arg2Off]
   297 000012D6 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   298 000012DD 4801C6              <1>     add rsi, rax    ;Point to first argument
   299 000012E0 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   300 000012E4 B801290000          <1>     mov eax, 2901h
   301 000012E9 CD21                <1>     int 21h
   302 000012EB 8805BEEDFFFF        <1>     mov byte [arg2FCBret], al
   303                              <1> .fcbArgsDone:
   304 000012F1 488D1DBEEFFFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer, ergh
   305 000012F8 488D3588F0FFFF      <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   306 000012FF B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   307 00001304 BAFFFF0000          <1>     mov edx, 0FFFFh
   308 00001309 B5FF                <1>     mov ch, -1
   309 0000130B CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   310 0000130D B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   311 00001312 BAFFFF0000          <1>     mov edx, 0FFFFh
   312 00001317 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   313 00001319 CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   314                              <1>             ;        al = 0  if the command should be executed as usual
   315 0000131B 84C0                <1>     test al, al
   316 0000131D 7426                <1>     jz .executeInternal
   317                              <1>     ;Here we execute externally and return to the prompt
   318                              <1>     ; as if it was an internal execution
   319 0000131F 488D1D90EFFFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer, ergh
   320 00001326 488D355AF0FFFF      <1>     lea rsi, cmdName        
   321 0000132D B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   322 00001332 BAFFFF0000          <1>     mov edx, 0FFFFh
   323 00001337 B5FF                <1>     mov ch, -1
   324 00001339 CD2F                <1>     int 2Fh
   325 0000133B 803D45F0FFFF00      <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   326                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001342 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001344 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   327                              <1>     ;Else, we restart the command from scratch.
   328                              <1> .executeInternal:
   329                              <1> ;Now we check if the cmdName is equal to the length of the cmdPathSpec.
   330                              <1> ;If not, then its immediately an external program!
   331 00001345 E819050000          <1>     call pullCommandline    ;Now pull the tail down
   332 0000134A 488D3DE7EFFFFF      <1>     lea rdi, cmdPathSpec
   333 00001351 E8E0210000          <1>     call strlen ;Get the length of the input command
   334 00001356 FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   335 00001358 380D29F0FFFF        <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   336 0000135E 0F85BA1A0000        <1>     jne launchChild     ;If not, a path was specified, exit!
   337                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   338 00001364 488D1DE9F4FFFF      <1>     lea rbx, functionTable
   339                              <1> .nextEntry:
   340 0000136B 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   341 0000136E 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   342 00001371 0F84A71A0000        <1>     je launchChild      ;If so, check externally now
   343 00001377 380D0AF0FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   344 0000137D 7532                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   345                              <1>     ;Here they have the same length so lets see if the name is the same
   346 0000137F 56                  <1>     push rsi
   347                              <1>     ;ecx has the length to compare
   348 00001380 51                  <1>     push rcx
   349 00001381 488D7301            <1>     lea rsi, qword [rbx + 1]
   350 00001385 488D3DFCEFFFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   351 0000138C F3A6                <1>     rep cmpsb   ;Check the strings are equal
   352 0000138E 59                  <1>     pop rcx
   353 0000138F 5E                  <1>     pop rsi
   354 00001390 751F                <1>     jne .gotoNextEntry
   355                              <1>     ;Here it was found both strings are equal
   356 00001392 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   357 00001397 480FB71F            <1>     movzx rbx, word [rdi]
   358 0000139B 488D3D5EECFFFF      <1>     lea rdi, startLbl
   359 000013A2 4801FB              <1>     add rbx, rdi
   360 000013A5 FFD3                <1>     call rbx    ;Call this function...
   361                              <1>     retc    ;Always return with CF=CY on error. Error code set to -1
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000013A7 72(44)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   362 000013A9 C6055DECFFFF00      <1>     mov byte [returnCode], 0 ;Set the retcode to 0 if ok!
   363                              <1>     return  ;... and return
    13                              <2> %%_ret:
    14 000013B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   364                              <1> .gotoNextEntry:
   365 000013B1 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   366 000013B8 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   367 000013BB EBAE                <1>     jmp short .nextEntry
   368                              <1> 
   369                              <1> redirFailure:
   370 000013BD 488D1549FBFFFF      <1>     lea rdx, redirErrMsg
   371 000013C4 B913000000          <1>     mov ecx, redirErrMsgL
   372 000013C9 EB0C                <1>     jmp short redirPipeFailureCommon
   373                              <1> pipeFailure:
   374 000013CB 488D1524FBFFFF      <1>     lea rdx, pipeErrMsg
   375 000013D2 B917000000          <1>     mov ecx, pipeErrMsgL
   376                              <1> redirPipeFailureCommon:
   377                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   378                              <1> ;This routine tries to close whatever handles are not -1 and delete
   379                              <1> ; pipe files if the pipe count is not 0.
   380                              <1> ;It resets all variables and jumps to reset the stack!
   381 000013D7 B800400000          <1>     mov eax, 4000h  ;Write handle
   382 000013DC BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   383 000013E1 CD21                <1>     int 21h
   384 000013E3 0FB705BCECFFFF      <1>     movzx eax, word [redirSTDIN]
   385 000013EA 0FB715AFECFFFF      <1>     movzx edx, word [pipeSTDIN]
   386 000013F1 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   387 000013F3 E8D1000000          <1>     call .closeAndReplace
   388 000013F8 0FB705A9ECFFFF      <1>     movzx eax, word [redirSTDOUT]
   389 000013FF 0FB7159CECFFFF      <1>     movzx edx, word [pipeSTDOUT]
   390 00001406 FFC3                <1>     inc ebx         ;Select STDOUT for closing
   391 00001408 E8BC000000          <1>     call .closeAndReplace
   392 0000140D 66C7058EECFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   393 00001416 0FB71D89ECFFFF      <1>     movzx ebx, word [redirSTDIN]
   394 0000141D E896000000          <1>     call .closeHandle
   395                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   396 00001422 66C7057BECFFFFFFFF  <1>     mov word [redirSTDIN], -1
   397 0000142B 0FB71D76ECFFFF      <1>     movzx ebx, word [redirSTDOUT]
   398 00001432 E881000000          <1>     call .closeHandle
   399 00001437 66C70568ECFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   400 00001440 0FB71D59ECFFFF      <1>     movzx ebx, word [pipeSTDIN]
   401 00001447 E86C000000          <1>     call .closeHandle
   402 0000144C 66C7054BECFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   403 00001455 0FB71D46ECFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   404 0000145C E857000000          <1>     call .closeHandle
   405 00001461 66C70538ECFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   406 0000146A C6052EECFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   407 00001471 488D15BBEFFFFF      <1>     lea rdx, qword [pipe1Filespec]
   408 00001478 803A00              <1>     cmp byte [rdx], 0
   409 0000147B 7407                <1>     jz .checkOld
   410 0000147D B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   411 00001482 CD21                <1>     int 21h
   412                              <1> .checkOld:
   413 00001484 488D15F7EFFFFF      <1>     lea rdx, qword [pipe2Filespec]
   414 0000148B 803A00              <1>     cmp byte [rdx],0
   415 0000148E 7407                <1>     jz .pipeNamesComplete
   416 00001490 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   417 00001495 CD21                <1>     int 21h
   418                              <1> .pipeNamesComplete:
   419 00001497 31C0                <1>     xor eax, eax
   420                              <1>     ;Invalidate the pointers and the paths too
   421 00001499 48890531F0FFFF      <1>     mov qword [newPipe], rax
   422 000014A0 48890532F0FFFF      <1>     mov qword [oldPipe], rax
   423 000014A7 890586EFFFFF        <1>     mov dword [pipe1Filespec], eax
   424 000014AD 8905CFEFFFFF        <1>     mov dword [pipe2Filespec], eax
   425                              <1> 
   426 000014B3 E942FBFFFF          <1>     jmp commandMain ;Retake input from the command line
   427                              <1> .closeHandle:
   428 000014B8 81FBFFFFFFFF        <1>     cmp ebx, -1
   429                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000014BE 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000014C0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   430 000014C1 B8003E0000          <1>     mov eax, 3E00h
   431 000014C6 CD21                <1>     int 21h
   432                              <1>     return
    13                              <2> %%_ret:
    14 000014C8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   433                              <1> .closeAndReplace:
   434                              <1> ;Input: ax = one possible handle, dx = second possible handle
   435                              <1> ;       bx = handle to close and copy ax/dx into
   436                              <1> ;Output: Handle intervened on. bx preserved
   437 000014C9 C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   438 000014CC 09D0                <1>     or eax, edx     ;Form packed
   439 000014CE 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   440                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000014D3 74(C8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   441 000014D5 E8DEFFFFFF          <1>     call .closeHandle
   442 000014DA 663DFFFF            <1>     cmp ax, -1      
   443 000014DE 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   444 000014E2 53                  <1>     push rbx
   445 000014E3 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   446 000014E6 B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   447 000014EB CD21                <1>     int 21h
   448 000014ED 5B                  <1>     pop rbx
   449                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000014EE 73(C8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   450                              <1>     ;Else we now try to force con to open!
   451 000014F0 E8C3FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   452 000014F5 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   453 000014FA 488D1558FAFFFF      <1>     lea rdx, conName
   454 00001501 CD21                <1>     int 21h
   455                              <1>     return
    13                              <2> %%_ret:
    14 00001503 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   456                              <1> 
   457                              <1> advanceRedir:
   458                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   459                              <1> ;Close stdin redir then stdout redir. 
   460 00001504 F60599EBFFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   461 0000150B 0F8585000000        <1>     jnz .redirIn
   462 00001511 F60587EBFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   463 00001518 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   464 0000151E 0FBF057BEBFFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   465 00001525 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   466 0000152A 0F84EB000000        <1>     je .pipeOut              
   467                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   468 00001530 0FB71D69EBFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   469 00001537 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   470 00001539 B800460000          <1>     mov eax, 4600h
   471 0000153E CD21                <1>     int 21h
   472 00001540 0F8285FEFFFF        <1>     jc pipeFailure
   473 00001546 B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   474 0000154B CD21                <1>     int 21h
   475 0000154D 0F8278FEFFFF        <1>     jc pipeFailure
   476 00001553 488B157FEFFFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   477 0000155A B800410000          <1>     mov eax, 4100h  ;Delete the file!
   478 0000155F CD21                <1>     int 21h
   479 00001561 0F8264FEFFFF        <1>     jc pipeFailure
   480 00001567 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   481 0000156A 66C7052DEBFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   482                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   483                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   484                              <1>     ;Else exit!
   485 00001573 0FBF0528EBFFFF      <1>     movsx eax, word [pipeSTDOUT]
   486 0000157A 3DFFFFFFFF          <1>     cmp eax, -1
   487 0000157F 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   488 00001585 C60513EBFFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   489 0000158C F60512EBFFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   490 00001593 753D                <1>     jnz .redirOut               ;Go for it if so!
   491                              <1>     return
    13                              <2> %%_ret:
    14 00001595 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   492                              <1> .redirIn:
   493                              <1> ;Here we clean redirIn
   494 00001596 0FB71D09EBFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   495 0000159D 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   496 0000159F B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   497 000015A4 CD21                <1>     int 21h
   498 000015A6 0F8211FEFFFF        <1>     jc redirFailure
   499 000015AC B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   500 000015B1 CD21                <1>     int 21h
   501 000015B3 0F8204FEFFFF        <1>     jc redirFailure
   502 000015B9 66C705E4EAFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   503 000015C2 C605DBEAFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   504 000015C9 F605CFEAFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   505 000015D0 7549                <1>     jnz .pipeOut
   506                              <1> .redirOut:
   507 000015D2 F605CCEAFFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   508                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000015D9 74(95)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   509                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   510 000015DB F605BDEAFFFFFF      <1>     test byte [pipeFlag], -1
   511 000015E2 7537                <1>     jnz short .pipeOut
   512 000015E4 0FB71DBDEAFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   513 000015EB B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   514 000015F0 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   515 000015F5 CD21                <1>     int 21h
   516 000015F7 0F82C0FDFFFF        <1>     jc redirFailure
   517 000015FD B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   518 00001602 CD21                <1>     int 21h
   519 00001604 0F82B3FDFFFF        <1>     jc redirFailure
   520 0000160A 66C70595EAFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   521 00001613 C6058BEAFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   522                              <1>     return
    13                              <2> %%_ret:
    14 0000161A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   523                              <1> .pipeOut:
   524                              <1> ;Duplicate STDIN to save across pipe
   525 0000161B 0FBF0580EAFFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   526 00001622 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   527                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001627 74(1A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   528 00001629 B800450000          <1>     mov eax, 4500h
   529 0000162E 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   530 00001630 CD21                <1>     int 21h
   531 00001632 0F8293FDFFFF        <1>     jc pipeFailure
   532 00001638 66890561EAFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   533                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   534 0000163F B800460000          <1>     mov eax, 4600h
   535 00001644 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   536 00001646 FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   537 00001648 CD21                <1>     int 21h
   538 0000164A 0F827BFDFFFF        <1>     jc pipeFailure
   539                              <1> ;Now return the original stdout to stdout
   540 00001650 89D9                <1>     mov ecx, ebx
   541 00001652 0FB71D49EAFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   542 00001659 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   543 0000165E CD21                <1>     int 21h
   544 00001660 0F8265FDFFFF        <1>     jc pipeFailure
   545                              <1> ;Now close the DUP'ed STDOUT
   546 00001666 B8003E0000          <1>     mov eax, 3E00h
   547 0000166B CD21                <1>     int 21h
   548 0000166D 0F8258FDFFFF        <1>     jc pipeFailure
   549                              <1> ;Finally unwind STDIN to the beginning of the file
   550 00001673 B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   551 00001678 31DB                <1>     xor ebx, ebx    ;STDIN handle
   552 0000167A 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   553 0000167C 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   554 0000167E CD21                <1>     int 21h
   555 00001680 0F8245FDFFFF        <1>     jc pipeFailure  ;This should never happen
   556 00001686 488B1544EEFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   557 0000168D 48891545EEFFFF      <1>     mov qword [oldPipe], rdx
   558 00001694 66C70505EAFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   559                              <1>     return
    13                              <2> %%_ret:
    14 0000169D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   560                              <1> 
   561                              <1> 
   562                              <1> peelRedir:
   563                              <1> ;Checks and sets up redir as appropriate
   564                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   565                              <1> ;       rsi points to the first char after the char in al in cpyBuffer
   566                              <1> ;Output: ZF=NZ => No redir
   567                              <1> ;        ZF=ZY => Redir
   568                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   569                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   570 0000169E 51                  <1>     push rcx
   571 0000169F 57                  <1>     push rdi
   572 000016A0 3C3C                <1>     cmp al, "<"
   573 000016A2 740C                <1>     je .inputRedir
   574 000016A4 3C3E                <1>     cmp al, ">"
   575 000016A6 7427                <1>     je .outputRedir
   576 000016A8 3C7C                <1>     cmp al, "|"
   577 000016AA 7441                <1>     je .pipeSetup
   578 000016AC F8                  <1>     clc
   579                              <1> .redirExit:
   580 000016AD 5F                  <1>     pop rdi
   581 000016AE 59                  <1>     pop rcx
   582                              <1>     return
    13                              <2> %%_ret:
    14 000016AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   583                              <1> .inputRedir:
   584 000016B0 C605EDE9FFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   585 000016B7 488D3DD7ECFFFF      <1>     lea rdi, rdrInFilespec
   586                              <1> .redirCommon:
   587 000016BE E88F1E0000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   588 000016C3 E8BC1F0000          <1>     call cpDelimPathToBufz
   589 000016C8 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   590 000016CB 30C0                <1>     xor al, al  ;Clear the ZF flag
   591 000016CD EBDE                <1>     jmp short .redirExit
   592                              <1> .outputRedir:
   593 000016CF C605CFE9FFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   594 000016D6 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   595 000016D9 7509                <1>     jne .notDouble
   596 000016DB FE05C4E9FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   597 000016E1 48FFC6              <1>     inc rsi ;Go past it too
   598                              <1> .notDouble:
   599 000016E4 488D3DF9ECFFFF      <1>     lea rdi, rdrOutFilespec
   600 000016EB EBD1                <1>     jmp short .redirCommon
   601                              <1> .pipeSetup:
   602 000016ED 56                  <1>     push rsi    ;Save rsi pointing to char past |
   603 000016EE E85F1E0000          <1>     call skipDelimiters ;Check if this is a double ||
   604 000016F3 803E7C              <1>     cmp byte [rsi], "|" 
   605 000016F6 5E                  <1>     pop rsi
   606 000016F7 F9                  <1>     stc
   607 000016F8 EBB3                <1>     jmp short .redirExit
   608                              <1> 
   609                              <1> setupRedirandPipes:
   610                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   611                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   612 000016FA 0F8484000000        <1>     jz .redirIn
   613 00001700 488D152CEDFFFF      <1>     lea rdx, pipe1Filespec
   614 00001707 803A00              <1>     cmp byte [rdx], 0
   615 0000170A 7410                <1>     jz .pathFound
   616 0000170C 488D156FEDFFFF      <1>     lea rdx, pipe2Filespec
   617 00001713 803A00              <1>     cmp byte [rdx], 0
   618 00001716 0F85AFFCFFFF        <1>     jnz pipeFailure
   619                              <1> .pathFound:
   620 0000171C 488915AEEDFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   621 00001723 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   622 00001728 BB01000000          <1>     mov ebx, 1
   623 0000172D CD21                <1>     int 21h
   624 0000172F 0F8296FCFFFF        <1>     jc pipeFailure
   625 00001735 66890566E9FFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   626 0000173C E8D71D0000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   627 00001741 0441                <1>     add al, "A"
   628 00001743 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   629 00001748 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   630 0000174A 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   631 0000174C 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   632 0000174E B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   633 00001753 CD21                <1>     int 21h
   634 00001755 0F8270FCFFFF        <1>     jc pipeFailure
   635                              <1>     ;AX has the handle for this file now, this will become STDOUT
   636                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   637 0000175B 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   638 0000175E B901000000          <1>     mov ecx, 1
   639 00001763 B800460000          <1>     mov eax, 4600h
   640 00001768 CD21                <1>     int 21h
   641 0000176A 0F825BFCFFFF        <1>     jc pipeFailure
   642 00001770 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   643 00001775 CD21                <1>     int 21h
   644 00001777 0F824EFCFFFF        <1>     jc pipeFailure
   645 0000177D C6051BE9FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   646                              <1> .redirIn:
   647                              <1> ;Now check if any other redir needs to be setup
   648                              <1> ;Checks and sets up redir as appropriate.
   649                              <1>     ;Setup the redir here for STDIN
   650 00001784 F60519E9FFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   651 0000178B 7449                <1>     jz .redirOut
   652 0000178D 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   653 0000178F B800450000          <1>     mov eax, 4500h
   654 00001794 CD21                <1>     int 21h
   655 00001796 0F8221FCFFFF        <1>     jc redirFailure
   656 0000179C 66890503E9FFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   657 000017A3 488D15EBEBFFFF      <1>     lea rdx, rdrInFilespec
   658 000017AA B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   659 000017AF CD21                <1>     int 21h
   660 000017B1 0F8206FCFFFF        <1>     jc redirFailure
   661 000017B7 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   662 000017B9 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   663 000017BC B800460000          <1>     mov eax, 4600h
   664 000017C1 CD21                <1>     int 21h
   665 000017C3 0F82F4FBFFFF        <1>     jc redirFailure
   666 000017C9 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   667 000017CE CD21                <1>     int 21h
   668 000017D0 0F82E7FBFFFF        <1>     jc redirFailure
   669                              <1> .redirOut:
   670 000017D6 F605C8E8FFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   671                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000017DD 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000017DF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   672 000017E0 803DBBE8FFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   673                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000017E7 75(DF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   674                              <1>     ;Else setup the redir here for STDOUT
   675 000017E9 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   676 000017EE B800450000          <1>     mov eax, 4500h
   677 000017F3 CD21                <1>     int 21h
   678 000017F5 0F82C2FBFFFF        <1>     jc redirFailure
   679 000017FB 668905A6E8FFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   680 00001802 488D15DBEBFFFF      <1>     lea rdx, rdrOutFilespec
   681 00001809 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   682 0000180E CD21                <1>     int 21h
   683 00001810 730F                <1>     jnc .fileExists
   684 00001812 B8003C0000          <1>     mov eax, 3C00h
   685 00001817 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   686 00001819 CD21                <1>     int 21h
   687 0000181B 0F829CFBFFFF        <1>     jc redirFailure
   688                              <1> .fileExists:
   689 00001821 B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   690 00001826 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   691 00001829 B800460000          <1>     mov eax, 4600h  ;DUP2
   692 0000182E CD21                <1>     int 21h
   693 00001830 0F8287FBFFFF        <1>     jc redirFailure
   694 00001836 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   695 0000183B CD21                <1>     int 21h
   696 0000183D 0F827AFBFFFF        <1>     jc redirFailure
   697 00001843 803D5BE8FFFF01      <1>     cmp byte [redirOut], 1
   698                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000184A 74(DF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   699                              <1>     ;Here we move the file pointer to the end of the file
   700 0000184C 31D2                <1>     xor edx, edx    ;Low order 32 bits
   701 0000184E 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   702 00001850 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   703 00001855 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   704 0000185A CD21                <1>     int 21h
   705 0000185C 0F825BFBFFFF        <1>     jc redirFailure
   706                              <1>     return
    13                              <2> %%_ret:
    14 00001862 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   707                              <1> 
   708                              <1> 
   709                              <1> pullCommandline:
   710                              <1> ;This command pulls the command tail down, removing the whole launch command
   711 00001863 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;rbx points to the de-redired command line 
   712                              <1> ;Skip leading separators
   713                              <1> .pctSkipLeading:
   714 0000186A AC                  <1>     lodsb   ;Get first char
   715 0000186B E8F01C0000          <1>     call isALdelimiter
   716 00001870 74F8                <1>     je .pctSkipLeading
   717 00001872 48FFCE              <1>     dec rsi
   718                              <1>     ;rsi points to the start of the command
   719 00001875 488D3DBCEAFFFF      <1>     lea rdi, cmdPathSpec
   720 0000187C E8B51C0000          <1>     call strlen ;Get the length of the command
   721 00001881 FFC9                <1>     dec ecx ;Minus the terminating null
   722 00001883 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   723 00001886 280D1FE8FFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   724 0000188C 280D1CE8FFFF        <1>     sub byte [arg2Off], cl
   725 00001892 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   726 00001894 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   727                              <1> .pctPullChars:
   728 0000189B AC                  <1>     lodsb
   729 0000189C AA                  <1>     stosb
   730 0000189D 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   731 0000189F 7404                <1>     je .pctExit
   732 000018A1 FFC1                <1>     inc ecx     ;Increment count
   733 000018A3 EBF6                <1>     jmp short .pctPullChars 
   734                              <1> .pctExit:
   735 000018A5 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   736                              <1>     return
    13                              <2> %%_ret:
    14 000018AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   737                              <1> 
   738                              <1> batNextLine:
   739                              <1> ;Not yet implemented, if this is set to 1, print error and reset!
   740 000018AD 488D1513000000      <1>     lea rdx, .l1
   741 000018B4 B800090000          <1>     mov eax, 0900h
   742 000018B9 CD21                <1>     int 21h
   743 000018BB C605EEE7FFFF00      <1>     mov byte [batFlag], 0
   744 000018C2 E933F7FFFF          <1>     jmp commandMain
   745 000018C7 4261746368206D6F64- <1> .l1 db "Batch mode... wait, what? How did you do that?",CR,LF,"$"
   745 000018D0 652E2E2E2077616974- <1>
   745 000018D9 2C20776861743F2048- <1>
   745 000018E2 6F772064696420796F- <1>
   745 000018EB 7520646F2074686174- <1>
   745 000018F4 3F0D0A24            <1>
   746                              <1> 
   747                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   748                              <1> ;Input: rsi points to the count byte of a command line
   749 000018F8 4150                <1>     push r8
   750 000018FA 4151                <1>     push r9
   751 000018FC B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   752 000018FE CD21                <1>     int 21h
   753 00001900 52                  <1>     push rdx    ;Save on the stack
   754 00001901 488D1DF8E5FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   755 00001908 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   756 0000190A CD21                <1>     int 21h
   757 0000190C 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   758 0000190F 4989D9              <1>     mov r9, rbx
   759 00001912 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   760 00001919 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   761 0000191E F348A5              <1>     rep movsq   ;Copy command line over
   762                              <1>     ;call doCommandLine
   763 00001921 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   764 00001922 B450                <1>     mov ah, 50h ;Set Current PSP
   765 00001924 CD21                <1>     int 21h
   766 00001926 4159                <1>     pop r9
   767 00001928 4158                <1>     pop r8
   768 0000192A 48CF                <1>     iretq
    17                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badSyntaxError:
     7 0000192C 488D15ACF3FFFF      <1>     lea rdx, syntaxErr
     8 00001933 EB58                <1>     jmp short badCmn
     9                              <1> badEnvSpaceError:
    10 00001935 488D15BFF0FFFF      <1>     lea rdx, noEnvSpace
    11 0000193C EB4F                <1>     jmp short badCmn
    12                              <1> badAccError:
    13 0000193E 488D1527F3FFFF      <1>     lea rdx, accDenMsg
    14 00001945 EB46                <1>     jmp short badCmn
    15                              <1> noSelfCopyError:
    16 00001947 488D15DEF0FFFF      <1>     lea rdx, noSelfCopy
    17 0000194E EB3D                <1>     jmp short badCmn
    18                              <1> badParamError:
    19 00001950 488D1593F1FFFF      <1>     lea rdx, badParm
    20 00001957 EB34                <1>     jmp short badCmn
    21                              <1> badDriveError:
    22 00001959 488D154DF1FFFF      <1>     lea rdx, badDrv
    23 00001960 EB2B                <1>     jmp short badCmn
    24                              <1> badArgError:
    25 00001962 488D152FF4FFFF      <1>     lea rdx, badArgs
    26 00001969 EB22                <1>     jmp short badCmn
    27                              <1> badFileError:
    28 0000196B 488D150AF4FFFF      <1>     lea rdx, badSpec
    29 00001972 EB19                <1>     jmp short badCmn
    30                              <1> badDupFnf:
    31                              <1> ;Hybrid error message
    32 00001974 488D153EF0FFFF      <1>     lea rdx, dupName
    33 0000197B EB10                <1>     jmp short badCmn
    34                              <1> badFnf:
    35 0000197D 488D154CF0FFFF      <1>     lea rdx, fnfMsg
    36 00001984 EB07                <1>     jmp short badCmn
    37                              <1> badDirError:
    38 00001986 488D155EF2FFFF      <1>     lea rdx, badDir
    39                              <1> badCmn:
    40 0000198D C60579E6FFFFFF      <1>     mov byte [returnCode], -1    ;Return code defaults to -1 if error (for now!)
    41 00001994 B800090000          <1>     mov eax, 0900h
    42 00001999 CD21                <1>     int 21h
    43 0000199B F9                  <1>     stc ;Return with CY => Error occured
    44                              <1>     return  ;This will be made nuanced later, to agree with DOS behaviour
    13                              <2> %%_ret:
    14 0000199C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    45                              <1> badCmdError:
    46 0000199D 488D15FAEFFFFF      <1>     lea rdx, badCmd
    47 000019A4 EBE7                <1>     jmp short badCmn
    48                              <1> dir:
    49                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    50 000019A6 C60538ECFFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    51 000019AD C60532ECFFFF00      <1>     mov byte [dirLineCtr], 0
    52 000019B4 C6052CECFFFF00      <1>     mov byte [dirFileCtr], 0
    53 000019BB C60527ECFFFF00      <1>     mov byte [dirSrchDir], 0
    54 000019C2 66C70516EBFFFF0000  <1>     mov word [searchSpec], 0
    55 000019CB 488D3D99ECFFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    56 000019D2 C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    57 000019D5 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    57 000019DE 3F                  <1>
    58 000019DF 48894701            <1>     mov qword [rdi + fcb.filename], rax
    59 000019E3 C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    60                              <1>     ;Start by scanning for the switches
    61 000019EA 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    62 000019F1 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    63                              <1> .scanNew:
    64 000019F4 E8591B0000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    65 000019F9 AC                  <1>     lodsb   ;Get this char
    66 000019FA 3C0D                <1>     cmp al, CR
    67 000019FC 744D                <1>     je .scanDone
    68 000019FE 3A0528E6FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    69 00001A04 7524                <1>     jne .notSwitch
    70 00001A06 AC                  <1>     lodsb   ;Get the next char
    71 00001A07 E8341B0000          <1>     call ucChar
    72 00001A0C 3C57                <1>     cmp al, "W"
    73 00001A0E 7509                <1>     jne .notWide
    74 00001A10 800DCEEBFFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    75 00001A17 EBDB                <1>     jmp short .scanNew
    76                              <1> .notWide:
    77 00001A19 3C50                <1>     cmp al, "P"
    78 00001A1B 0F852FFFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    79 00001A21 800DBDEBFFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    80 00001A28 EBCA                <1>     jmp short .scanNew
    81                              <1> .notSwitch:
    82 00001A2A F605B4EBFFFF04      <1>     test byte [dirFlags], dirFileType
    83 00001A31 0F8519FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    84                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    85 00001A37 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    86 00001A3A E8A01C0000          <1>     call copyArgumentToSearchSpec   
    87 00001A3F 48FFCE              <1>     dec rsi ;Point back to the terminator char
    88 00001A42 800D9CEBFFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    89 00001A49 EBA9                <1>     jmp short .scanNew
    90                              <1> .scanDone:
    91 00001A4B F60593EBFFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    92 00001A52 7438                <1>     jz .currentDrv
    93                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
    94 00001A54 488D3586EAFFFF      <1>     lea rsi, searchSpec
    95 00001A5B 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
    96 00001A5F 752B                <1>     jne .currentDrv
    97                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
    98 00001A61 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
    99 00001A66 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   100 00001A6A B801290000          <1>     mov eax, 2901h   ;Parse filename
   101 00001A6F CD21                <1>     int 21h
   102 00001A71 3CFF                <1>     cmp al, -1
   103 00001A73 0F84E0FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   104                              <1>     ;Else the drive in the fcb is valid
   105 00001A79 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   106 00001A7E 84C0                <1>     test al, al
   107 00001A80 740A                <1>     jz .currentDrv
   108 00001A82 FEC8                <1>     dec al  ;Convert to 0 based drive number
   109 00001A84 88055EEBFFFF        <1>     mov byte [dirDrv], al
   110 00001A8A EB0B                <1>     jmp short .dirPrintVol
   111                              <1> .currentDrv:
   112 00001A8C E8871A0000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   113 00001A91 880551EBFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   114                              <1> .dirPrintVol:
   115 00001A97 488D3543EAFFFF      <1>     lea rsi, searchSpec
   116                              <1> ;Now construct the path on dirSrchDir.
   117 00001A9E 488D3D44EBFFFF      <1>     lea rdi, dirSrchDir
   118 00001AA5 0FB6053CEBFFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   119 00001AAC 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   120 00001AAE 0441                <1>     add al, "A" ;Turn into a letter
   121 00001AB0 B43A                <1>     mov ah, ":"
   122 00001AB2 66AB                <1>     stosw   ;Store X: into the search path
   123 00001AB4 B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   124 00001AB9 CD2F                <1>     int 2fh
   125 00001ABB 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   126 00001ABD 0F8496FEFFFF        <1>     je badDriveError
   127                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   128 00001AC3 8A0562E5FFFF        <1>     mov al, byte [pathSep]
   129 00001AC9 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   130 00001ACB 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   131 00001ACD AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   132 00001ACE FEC2                <1>     inc dl  ;Increment by 1
   133 00001AD0 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   134 00001AD3 B800470000          <1>     mov eax, 4700h  ;Print current working directory
   135 00001AD8 CD21                <1>     int 21h
   136 00001ADA 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   137                              <1>     ;rsi points to the first char in the provided path.
   138                              <1>     ;rdi points to the first char of the cwd.
   139 00001ADD 31C0                <1>     xor eax, eax
   140                              <1> .goToEndOfCwd:
   141                              <1> ;Move to the end of the string, could use repne?
   142 00001ADF 3807                <1>     cmp byte [rdi], al
   143 00001AE1 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   144 00001AE3 48FFC7              <1>     inc rdi
   145 00001AE6 EBF7                <1>     jmp short .goToEndOfCwd
   146                              <1> .prepCopy:
   147 00001AE8 8A053DE5FFFF        <1>     mov al, byte [pathSep]
   148 00001AEE 3806                <1>     cmp byte [rsi], al
   149 00001AF0 7412                <1>     je .copyPathLoop
   150 00001AF2 B43A                <1>     mov ah, ":"
   151 00001AF4 86C4                <1>     xchg al, ah
   152 00001AF6 663947FE            <1>     cmp word [rdi - 2], ax
   153 00001AFA 7408                <1>     je .copyPathLoop
   154 00001AFC 88E0                <1>     mov al, ah
   155 00001AFE 3847FF              <1>     cmp byte [rdi - 1], al
   156 00001B01 7401                <1>     je .copyPathLoop
   157 00001B03 AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   158                              <1> .copyPathLoop:
   159 00001B04 AC                  <1>     lodsb
   160 00001B05 3A0520E5FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   161 00001B0B 7509                <1>     jne .checkDot  ;If not, store it
   162                              <1> .lpPathseps:
   163 00001B0D 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   164 00001B0F 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   165 00001B11 48FFC6              <1>     inc rsi
   166 00001B14 EBF7                <1>     jmp short .lpPathseps
   167                              <1> .checkDot:
   168 00001B16 3C2E                <1>     cmp al, "."
   169 00001B18 7407                <1>     je .dots
   170                              <1> .store:
   171 00001B1A AA                  <1>     stosb
   172 00001B1B 84C0                <1>     test al, al ;Was the char we just copied a null?
   173 00001B1D 7472                <1>     jz .exitPathCopy
   174 00001B1F EBE3                <1>     jmp short .copyPathLoop
   175                              <1> .dots:
   176                              <1>     ;Here handle dot and dot dot
   177                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   178                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   179                              <1>     ; by 1. If it is null, go to top of loop.
   180                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   181 00001B21 8A2504E5FFFF        <1>     mov ah, byte [pathSep]
   182 00001B27 3867FF              <1>     cmp byte [rdi - 1], ah  
   183 00001B2A 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   184 00001B2C 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   185 00001B2E 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   186 00001B31 7413                <1>     je .twoDot
   187                              <1>     ;This is only a "current dir" when next char is pathsep or null
   188 00001B33 3A25F2E4FFFF        <1>     cmp ah, byte [pathSep]
   189 00001B39 7406                <1>     je .skipThisPathsep
   190 00001B3B 84E4                <1>     test ah, ah
   191 00001B3D 74C5                <1>     jz .copyPathLoop
   192 00001B3F EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   193                              <1> .skipThisPathsep:
   194                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   195 00001B41 48FFC6              <1>     inc rsi ;Point to the pathsep
   196 00001B44 EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   197                              <1> .twoDot:
   198                              <1>     ;Woohoo, this works!
   199 00001B46 48FFC6              <1>     inc rsi ;Move past the second dot
   200 00001B49 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   201 00001B4B 3A25DAE4FFFF        <1>     cmp ah, byte [pathSep]
   202 00001B51 7408                <1>     je .tdOk
   203 00001B53 84E4                <1>     test ah, ah
   204 00001B55 0F85F5FDFFFF        <1>     jne badParamError
   205                              <1> .tdOk:
   206 00001B5B 8A05CAE4FFFF        <1>     mov al, byte byte [pathSep]
   207 00001B61 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   208 00001B65 0F84E5FDFFFF        <1>     je badParamError
   209 00001B6B 4881EF02000000      <1>     sub rdi, 2
   210 00001B72 31C9                <1>     xor ecx, ecx
   211 00001B74 FFC9                <1>     dec ecx
   212 00001B76 FD                  <1>     std
   213 00001B77 F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   214 00001B79 FC                  <1>     cld
   215 00001B7A 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   216 00001B81 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   217 00001B83 0F847BFFFFFF        <1>     jz .copyPathLoop
   218 00001B89 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   219 00001B8C E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   220                              <1> .exitPathCopy:
   221                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   222 00001B91 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   223 00001B98 8A058DE4FFFF        <1>     mov al, byte [pathSep]
   224 00001B9E B43A                <1>     mov ah, ":"
   225 00001BA0 86C4                <1>     xchg al, ah
   226 00001BA2 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   227 00001BA6 7409                <1>     je .skipOverwrite
   228 00001BA8 88E0                <1>     mov al, ah
   229 00001BAA 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   230 00001BAC 7503                <1>     jne .skipOverwrite
   231 00001BAE C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   232                              <1> .skipOverwrite:
   233 00001BB1 488D3531EAFFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   234 00001BB8 4889F7              <1>     mov rdi, rsi
   235 00001BBB B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   236 00001BC0 CD2F                <1>     int 2fh
   237 00001BC2 E8251B0000          <1>     call scanForWildcards
   238 00001BC7 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   239 00001BC9 4889F2              <1>     mov rdx, rsi
   240 00001BCC 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   241 00001BD0 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   242                              <1> .notNull:
   243 00001BD2 E8DC1B0000          <1>     call setDTA ;Set the DTA
   244 00001BD7 B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   245 00001BDC B8004E0000          <1>     mov eax, 4E00h ;Find first
   246 00001BE1 CD21                <1>     int 21h
   247 00001BE3 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   248                              <1> ;Now we have searched for the file, is a directory?
   249 00001BE5 F60590E5FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   250 00001BEC 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   251                              <1>     ;Here we are searching IN a directory. Default search pattern!
   252 00001BEE 31C0                <1>     xor eax, eax
   253 00001BF0 31C9                <1>     xor ecx, ecx
   254 00001BF2 FFC9                <1>     dec ecx
   255 00001BF4 F2AE                <1>     repne scasb
   256 00001BF6 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   257 00001BF9 EB40                <1>     jmp short .wcDefaultSearch
   258                              <1> .wcSearchPattern:
   259                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   260                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   261 00001BFB 31C0                <1>     xor eax, eax
   262 00001BFD 31C9                <1>     xor ecx, ecx
   263 00001BFF FFC9                <1>     dec ecx
   264 00001C01 F2AE                <1>     repne scasb ;Scan forwards
   265                              <1>     ;Here rdi points past the null at the end
   266 00001C03 8A0522E4FFFF        <1>     mov al, byte [pathSep]
   267 00001C09 31C9                <1>     xor ecx, ecx
   268 00001C0B FFC9                <1>     dec ecx
   269 00001C0D FD                  <1>     std ;Search backwards
   270 00001C0E F2AE                <1>     repne scasb
   271 00001C10 FC                  <1>     cld ;Search forwards again
   272 00001C11 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   273 00001C14 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   274 00001C18 7503                <1>     jne .wcsp1
   275 00001C1A 48FFC7              <1>     inc rdi ;Go one char forwards
   276                              <1> .wcsp1:
   277                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   278 00001C1D 57                  <1>     push rdi
   279 00001C1E 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   280 00001C20 7503                <1>     jne .wcsp2
   281 00001C22 48FFC7              <1>     inc rdi
   282                              <1> .wcsp2:
   283 00001C25 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   284 00001C28 488D3D3CEAFFFF      <1>     lea rdi, dirSrchFCB
   285 00001C2F B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   286 00001C34 CD21                <1>     int 21h
   287 00001C36 5F                  <1>     pop rdi
   288 00001C37 31C0                <1>     xor eax, eax
   289 00001C39 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   290                              <1> .wcDefaultSearch:
   291 00001C3B 0FB605A6E9FFFF      <1>     movzx eax, byte [dirDrv] 
   292 00001C42 E8030F0000          <1>     call volume.dirEP
   293 00001C47 488D1505F0FFFF      <1>     lea rdx, dirMain    ;Print message intro
   294 00001C4E B409                <1>     mov ah, 09h
   295 00001C50 CD21                <1>     int 21h
   296 00001C52 C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   297 00001C55 488D158DE9FFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   298 00001C5C B409                <1>     mov ah, 09h
   299 00001C5E CD21                <1>     int 21h
   300 00001C60 C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   301 00001C63 488D15DAECFFFF      <1>     lea rdx, crlf2
   302 00001C6A B409                <1>     mov ah, 09h
   303 00001C6C CD21                <1>     int 21h
   304                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   305                              <1> ;rdi points to the terminating null
   306 00001C6E 8A05B7E3FFFF        <1>     mov al, byte [pathSep]
   307 00001C74 3847FF              <1>     cmp byte [rdi - 1], al
   308 00001C77 7403                <1>     je .root
   309 00001C79 48FFC7              <1>     inc rdi
   310                              <1> .root:
   311 00001C7C 48FFCF              <1>     dec rdi ;Point back to the pathsep
   312 00001C7F AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   313 00001C80 488D35E5E9FFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   314 00001C87 E8A2190000          <1>     call FCBToAsciiz    ;Terminates for free
   315 00001C8C E801000000          <1>     call .searchForFile
   316                              <1>     return
    13                              <2> %%_ret:
    14 00001C91 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   317                              <1> 
   318                              <1> .searchForFile:
   319 00001C92 E81C1B0000          <1>     call setDTA
   320 00001C97 B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   321 00001C9C 488D1546E9FFFF      <1>     lea rdx, dirSrchDir
   322 00001CA3 B8004E0000          <1>     mov eax, 4E00h ;Find first
   323 00001CA8 CD21                <1>     int 21h
   324 00001CAA 720B                <1>     jc .dirNoMoreFiles
   325                              <1> .findNext:
   326 00001CAC E878000000          <1>     call .dirPrintFileData  ;Print the file information
   327 00001CB1 B44F                <1>     mov ah, 4Fh
   328 00001CB3 CD21                <1>     int 21h
   329 00001CB5 73F5                <1>     jnc .findNext 
   330                              <1> .dirNoMoreFiles:
   331 00001CB7 F60527E9FFFF01      <1>     test byte [dirFlags], dirWideType
   332 00001CBE 740B                <1>     jz .dirNoEndNewLine
   333 00001CC0 488D157AECFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   334 00001CC7 B409                <1>     mov ah, 09h
   335 00001CC9 CD21                <1>     int 21h
   336                              <1> .dirNoEndNewLine:
   337                              <1>     ;Now we print the number of files and the number of bytes on the disk
   338 00001CCB 488D1552F2FFFF      <1>     lea rdx, fourSpc
   339 00001CD2 B409                <1>     mov ah, 09h
   340 00001CD4 CD21                <1>     int 21h
   341 00001CD6 B409                <1>     mov ah, 09h ;Print four Spaces twice
   342 00001CD8 CD21                <1>     int 21h
   343 00001CDA 0FB60506E9FFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   344 00001CE1 E81A1A0000          <1>     call printDecimalWord
   345 00001CE6 488D159FEDFFFF      <1>     lea rdx, dirOk
   346 00001CED B409                <1>     mov ah, 09h
   347 00001CEF CD21                <1>     int 21h
   348 00001CF1 488D1531F2FFFF      <1>     lea rdx, threeSpc
   349 00001CF8 B409                <1>     mov ah, 09h
   350 00001CFA CD21                <1>     int 21h
   351 00001CFC B800360000          <1>     mov eax, 3600h ;Get disk info
   352 00001D01 8A15E1E8FFFF        <1>     mov dl, byte [dirDrv]
   353 00001D07 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   354 00001D09 CD21                <1>     int 21h ;Get disk free space info
   355 00001D0B 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   356 00001D0E 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   357 00001D11 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   358 00001D13 F7E1                <1>     mul ecx ;Get bytes per cluster
   359 00001D15 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   360                              <1>     ;rax now has the number of free bytes on the disk
   361 00001D18 E8E3190000          <1>     call printDecimalWord
   362 00001D1D 488D1572EDFFFF      <1>     lea rdx, bytesOk
   363 00001D24 B409                <1>     mov ah, 09h
   364 00001D26 CD21                <1>     int 21h
   365                              <1>     return
    13                              <2> %%_ret:
    14 00001D28 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   366                              <1> 
   367                              <1> .dirPrintFileData:
   368                              <1> ;Use cmdFcb to build the file name with space
   369                              <1> ;Start by print the name (same for both cases)
   370                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   371 00001D29 F6054CE4FFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   372                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001D30 75(28)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   373 00001D32 488D354CE4FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   374 00001D39 488D3D17E4FFFF      <1>     lea rdi, cmdFcb
   375 00001D40 E87B180000          <1>     call asciiFilenameToFCB
   376 00001D45 488D150BE4FFFF      <1>     lea rdx, cmdFcb
   377 00001D4C B908000000          <1>     mov ecx, 8  ;Print 8 chars
   378 00001D51 BB01000000          <1>     mov ebx, 1  ;STDOUT
   379 00001D56 B440                <1>     mov ah, 40h ;Write handle
   380 00001D58 CD21                <1>     int 21h
   381 00001D5A 52                  <1>     push rdx
   382 00001D5B B220                <1>     mov dl, " "
   383 00001D5D B402                <1>     mov ah, 02h ;Print char
   384 00001D5F CD21                <1>     int 21h
   385 00001D61 5A                  <1>     pop rdx
   386 00001D62 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   387 00001D69 B903000000          <1>     mov ecx, 3  ;Print three chars
   388 00001D6E BB01000000          <1>     mov ebx, 1  ;STDOUT
   389 00001D73 B440                <1>     mov ah, 40h ;Write handle
   390 00001D75 CD21                <1>     int 21h
   391 00001D77 F60567E8FFFF01      <1>     test byte [dirFlags], dirWideType
   392 00001D7E 0F85A8000000        <1>     jnz .widePrint
   393                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   394                              <1>     ;Now check if a DIR
   395 00001D84 F605F1E3FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   396 00001D8B 7418                <1>     jz .dirPrintNotDir
   397 00001D8D 488D1510EDFFFF      <1>     lea rdx, dirLbl
   398 00001D94 B409                <1>     mov ah, 09h
   399 00001D96 CD21                <1>     int 21h
   400 00001D98 488D158AF1FFFF      <1>     lea rdx, threeSpc
   401 00001D9F B409                <1>     mov ah, 09h
   402 00001DA1 CD21                <1>     int 21h
   403 00001DA3 EB4F                <1>     jmp short .dirPrintFileDT
   404                              <1> .dirPrintNotDir:
   405                              <1> ;Here we print the file size
   406 00001DA5 B220                <1>     mov dl, " "
   407 00001DA7 B402                <1>     mov ah, 02h
   408 00001DA9 CD21                <1>     int 21h
   409 00001DAB 8B05D0E3FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   410 00001DB1 E8BB190000          <1>     call getDecimalWord
   411 00001DB6 4889CB              <1>     mov rbx, rcx
   412 00001DB9 51                  <1>     push rcx
   413 00001DBA 480FCB              <1>     bswap rbx
   414 00001DBD B908000000          <1>     mov ecx, 8
   415                              <1> .dirPrintFileSizePrep:
   416 00001DC2 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   417 00001DC4 7514                <1>     jne .dirPrintFileSize
   418 00001DC6 B402                <1>     mov ah, 02h
   419 00001DC8 B220                <1>     mov dl, " "
   420 00001DCA CD21                <1>     int 21h
   421 00001DCC 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   422 00001DD0 FFC9                <1>     dec ecx
   423 00001DD2 81F901000000        <1>     cmp ecx, 1
   424 00001DD8 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   425                              <1> .dirPrintFileSize:
   426 00001DDA 5B                  <1>     pop rbx
   427                              <1> .dirPrintFileSizeLoop:
   428 00001DDB 88DA                <1>     mov dl, bl
   429 00001DDD B402                <1>     mov ah, 02h
   430 00001DDF CD21                <1>     int 21h
   431 00001DE1 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   432 00001DE5 FFC9                <1>     dec ecx
   433 00001DE7 75F2                <1>     jnz .dirPrintFileSizeLoop
   434 00001DE9 488D153DF1FFFF      <1>     lea rdx, twoSpc
   435 00001DF0 B409                <1>     mov ah, 09h
   436 00001DF2 CD21                <1>     int 21h
   437                              <1> .dirPrintFileDT:
   438 00001DF4 B220                <1>     mov dl, " "
   439 00001DF6 B402                <1>     mov ah, 02h
   440 00001DF8 CD21                <1>     int 21h
   441 00001DFA 0FB7057EE3FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   442 00001E01 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   443 00001E03 E846140000          <1>     call printDate
   444 00001E08 488D151EF1FFFF      <1>     lea rdx, twoSpc
   445 00001E0F B409                <1>     mov ah, 09h
   446 00001E11 CD21                <1>     int 21h
   447 00001E13 0FB70563E3FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   448 00001E1A E851150000          <1>     call printTime
   449 00001E1F 488D151BEBFFFF      <1>     lea rdx, crlf
   450 00001E26 B409                <1>     mov ah, 09h
   451 00001E28 CD21                <1>     int 21h
   452 00001E2A EB0B                <1>     jmp short .dirPrintNameExit
   453                              <1> .widePrint:
   454                              <1> ;If /W, print name space ext space space space space
   455 00001E2C 488D15F1F0FFFF      <1>     lea rdx, fourSpc
   456 00001E33 B409                <1>     mov ah, 09h ;Print string
   457 00001E35 CD21                <1>     int 21h
   458                              <1> .dirPrintNameExit:
   459 00001E37 FE05AAE7FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   460 00001E3D FE05A3E7FFFF        <1>     inc byte [dirLineCtr]
   461 00001E43 803D9CE7FFFF17      <1>     cmp byte [dirLineCtr], 23
   462                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001E4A 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001E4C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   463 00001E4D 488D1577ECFFFF      <1>     lea rdx, pauseMes
   464 00001E54 B409                <1>     mov ah, 09h
   465 00001E56 CD21                <1>     int 21h
   466 00001E58 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   467 00001E5A CD21                <1>     int 21h
   468 00001E5C C60583E7FFFF00      <1>     mov byte [dirLineCtr], 0
   469 00001E63 488D15D7EAFFFF      <1>     lea rdx, crlf   ;Force new line
   470 00001E6A B409                <1>     mov ah, 09h
   471 00001E6C CD21                <1>     int 21h
   472                              <1>     return
    13                              <2> %%_ret:
    14 00001E6E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   473                              <1> 
   474                              <1> chdir:
   475 00001E6F F60534E2FFFFFF      <1>     test byte [arg1Flg], -1
   476 00001E76 754D                <1>     jnz .changeDir
   477                              <1>     ;Print CWD
   478                              <1> .printCWD:
   479 00001E78 E8D5150000          <1>     call putCWDInPrompt ;Exactly the same procedure
   480 00001E7D E8BD130000          <1>     call printCRLF
   481                              <1>     return
    13                              <2> %%_ret:
    14 00001E82 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   482                              <1> .printDiskCWD:
   483                              <1> ;Print CWD for a specified drive
   484 00001E83 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   485 00001E87 88D0                <1>     mov al, dl
   486 00001E89 0440                <1>     add al, "@" ;Get the UC letter
   487 00001E8B B43A                <1>     mov ah, ":"
   488 00001E8D 488D3D4DE6FFFF      <1>     lea rdi, searchSpec
   489 00001E94 66AB                <1>     stosw   ;Store X:, rdi+=2
   490 00001E96 8A058FE1FFFF        <1>     mov al, byte [pathSep]
   491 00001E9C AA                  <1>     stosb   ;Store pathSep, inc rdi
   492 00001E9D B447                <1>     mov ah, 47h ;Get Current Working Directory
   493 00001E9F 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   494 00001EA2 CD21                <1>     int 21h
   495 00001EA4 E88D160000          <1>     call strlen
   496 00001EA9 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   497 00001EAF B440                <1>     mov ah, 40h ;Write to handle
   498 00001EB1 BB01000000          <1>     mov ebx, 1  ;STDOUT
   499 00001EB6 488D1524E6FFFF      <1>     lea rdx, searchSpec
   500 00001EBD CD21                <1>     int 21h
   501 00001EBF E87B130000          <1>     call printCRLF
   502                              <1>     return
    13                              <2> %%_ret:
    14 00001EC4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   503                              <1> .changeDir:
   504 00001EC5 8A05E1E1FFFF        <1>     mov al, byte [arg1FCBret]
   505 00001ECB 3CFF                <1>     cmp al, -1 
   506 00001ECD 0F8486FAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   507 00001ED3 E8EF170000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   508 00001ED8 488D1502E6FFFF      <1>     lea rdx, searchSpec
   509 00001EDF B43B                <1>     mov ah, 3Bh ;CHDIR
   510 00001EE1 CD21                <1>     int 21h
   511 00001EE3 0F829DFAFFFF        <1>     jc badDirError
   512                              <1>     return
    13                              <2> %%_ret:
    14 00001EE9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   513                              <1> 
   514                              <1> mkdir:
   515 00001EEA F605B9E1FFFFFF      <1>     test byte [arg1Flg], -1
   516 00001EF1 0F846BFAFFFF        <1>     jz badArgError
   517 00001EF7 F605AFE1FFFFFF      <1>     test byte [arg2Flg], -1
   518 00001EFE 0F855EFAFFFF        <1>     jnz badArgError
   519                              <1>     ;We have exactly one argument
   520 00001F04 8A05A2E1FFFF        <1>     mov al, byte [arg1FCBret]
   521 00001F0A 3CFF                <1>     cmp al, -1 
   522 00001F0C 0F8447FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   523 00001F12 E8B0170000          <1>     call buildCommandPath
   524 00001F17 488D15C3E5FFFF      <1>     lea rdx, searchSpec
   525 00001F1E B800390000          <1>     mov eax, 3900h  ;MKDIR
   526 00001F23 CD21                <1>     int 21h
   527                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001F25 73(E9)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   528                              <1> .badMake:   ;Else, bad make
   529 00001F27 488D15D1ECFFFF      <1>     lea rdx, badMD
   530 00001F2E B800090000          <1>     mov eax, 0900h
   531 00001F33 CD21                <1>     int 21h
   532                              <1>     return
    13                              <2> %%_ret:
    14 00001F35 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   533                              <1> 
   534                              <1> rmdir:
   535 00001F36 F6056DE1FFFFFF      <1>     test byte [arg1Flg], -1
   536 00001F3D 0F841FFAFFFF        <1>     jz badArgError
   537 00001F43 F60563E1FFFFFF      <1>     test byte [arg2Flg], -1
   538 00001F4A 0F8512FAFFFF        <1>     jnz badArgError
   539                              <1>     ;We have exactly one argument
   540 00001F50 8A0556E1FFFF        <1>     mov al, byte [arg1FCBret]
   541 00001F56 3CFF                <1>     cmp al, -1 
   542 00001F58 0F84FBF9FFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   543 00001F5E E864170000          <1>     call buildCommandPath
   544 00001F63 488D1577E5FFFF      <1>     lea rdx, searchSpec
   545 00001F6A B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   546 00001F6F CD21                <1>     int 21h
   547                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001F71 73(35)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   548                              <1> .badRemove:   ;Else, bad make
   549 00001F73 488D15A2ECFFFF      <1>     lea rdx, badRD
   550 00001F7A B800090000          <1>     mov eax, 0900h
   551 00001F7F CD21                <1>     int 21h
   552                              <1>     return
    13                              <2> %%_ret:
    14 00001F81 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   553                              <1> 
   554                              <1> copy:
   555 00001F82 F60521E1FFFFFF      <1>     test byte [arg1Flg], -1
   556 00001F89 0F84D3F9FFFF        <1>     jz badArgError
   557 00001F8F F60517E1FFFFFF      <1>     test byte [arg2Flg], -1
   558 00001F96 0F84C6F9FFFF        <1>     jz badArgError
   559 00001F9C 0FB60508E1FFFF      <1>     movzx eax, byte [arg1Off]
   560 00001FA3 4C8B0565E0FFFF      <1>     mov r8, [pspPtr]
   561 00001FAA 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   562 00001FB1 4889F3              <1>     mov rbx, rsi    ;Save the ptr to the start of the string in rbx
   563 00001FB4 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   564 00001FB7 488D3DEDE6FFFF      <1>     lea rdi, srcSpec
   565 00001FBE E8C1160000          <1>     call cpDelimPathToBufz    
   566 00001FC3 0FB605E4E0FFFF      <1>     movzx eax, byte [arg2Off]
   567 00001FCA 4889DE              <1>     mov rsi, rbx    ;Get back the start of the ptr
   568 00001FCD 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   569 00001FD0 488D3D56E7FFFF      <1>     lea rdi, destSpec
   570 00001FD7 E8A8160000          <1>     call cpDelimPathToBufz   
   571                              <1> ;Before we open, we check if the two filenames are equal
   572                              <1> ; If so, crap out.
   573 00001FDC 488D35C8E6FFFF      <1>     lea rsi, srcSpec
   574 00001FE3 488D3D43E7FFFF      <1>     lea rdi, destSpec
   575 00001FEA B81E120000          <1>     mov eax, 121Eh
   576 00001FEF CD2F                <1>     int 2Fh
   577 00001FF1 0F84D3000000        <1>     jz .sameFilename
   578                              <1>     ;Open source with read permission
   579                              <1>     ;Open destination with write permission
   580 00001FF7 488D15ADE6FFFF      <1>     lea rdx, srcSpec
   581 00001FFE B8003D0000          <1>     mov eax, 3D00h  ;Read open
   582 00002003 CD21                <1>     int 21h
   583 00002005 0F8245F9FFFF        <1>     jc badParamError
   584 0000200B 668905B8E7FFFF      <1>     mov word [sourceHdl], ax
   585                              <1> 
   586 00002012 0FB7D8              <1>     movzx ebx, ax   ;For bx
   587 00002015 B800440000          <1>     mov eax, 4400h  ;Get device info in dx
   588 0000201A CD21                <1>     int 21h
   589 0000201C 668915ABE7FFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
   590                              <1> 
   591 00002023 488D1503E7FFFF      <1>     lea rdx, destSpec
   592 0000202A B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   593 0000202F 31C9                <1>     xor ecx, ecx    ;No file attributes
   594 00002031 CD21                <1>     int 21h
   595 00002033 0F82B8000000        <1>     jc .badExit
   596 00002039 6689058CE7FFFF      <1>     mov word [destHdl], ax
   597 00002040 31F6                <1>     xor esi, esi
   598 00002042 488D1587E7FFFF      <1>     lea rdx, copyBuffer
   599                              <1> .copyLoop:
   600 00002049 B980000000          <1>     mov ecx, 128
   601 0000204E 0FB71D75E7FFFF      <1>     movzx ebx, word [sourceHdl]
   602 00002055 B43F                <1>     mov ah, 3Fh ;Read
   603 00002057 CD21                <1>     int 21h
   604 00002059 0F8292000000        <1>     jc .badExit
   605 0000205F 85C0                <1>     test eax, eax
   606 00002061 743A                <1>     jz .okExit
   607 00002063 01C6                <1>     add esi, eax
   608 00002065 89C1                <1>     mov ecx, eax
   609 00002067 0FB71D5EE7FFFF      <1>     movzx ebx, word [destHdl]
   610 0000206E B440                <1>     mov ah, 40h ;Write
   611 00002070 CD21                <1>     int 21h
   612 00002072 727D                <1>     jc .badExit
   613 00002074 3D80000000          <1>     cmp eax, 128    ;Did we read 128 chars?
   614 00002079 74CE                <1>     je .copyLoop
   615                              <1>     ;If not char dev, exit
   616 0000207B 66F7054AE7FFFF8000  <1>     test word [srcHdlInfo], 80h ;Char dev bit set?
   617 00002084 7417                <1>     jz .okExit
   618                              <1>     ;Is handle in cooked or binary mode?
   619 00002086 66F7053FE7FFFF2000  <1>     test word [srcHdlInfo], 20h
   620 0000208F 750C                <1>     jnz .okExit
   621                              <1>     ;Here the char dev must be in cooked mode. Check if the last char was ^Z
   622 00002091 09C0                <1>     or eax, eax ;Clear upper bits in eax
   623 00002093 488D7C02FF          <1>     lea rdi, qword [rdx + rax - 1]  ;Point to the last char in the buffer
   624 00002098 803F1A              <1>     cmp byte [rdi], EOF ;Was this EOF?
   625 0000209B 75AC                <1>     jne .copyLoop   ;Jump if not
   626                              <1> .okExit:
   627 0000209D E832000000          <1>     call .leaveCopyClose
   628 000020A2 488D1598E8FFFF      <1>     lea rdx, crlf
   629 000020A9 B409                <1>     mov ah, 09h
   630 000020AB CD21                <1>     int 21h
   631 000020AD 488D1570EEFFFF      <1>     lea rdx, fourSpc
   632 000020B4 B409                <1>     mov ah, 09h
   633 000020B6 CD21                <1>     int 21h
   634 000020B8 B402                <1>     mov ah, 02h
   635 000020BA B231                <1>     mov dl, "1" ;1 File(s) copied
   636 000020BC CD21                <1>     int 21h
   637 000020BE 488D15B5E9FFFF      <1>     lea rdx, copyOk
   638 000020C5 B409                <1>     mov ah, 09h
   639 000020C7 CD21                <1>     int 21h
   640                              <1>     return
    13                              <2> %%_ret:
    14 000020C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   641                              <1> .sameFilename:
   642 000020CA E805000000          <1>     call .leaveCopyClose ;Close the handles
   643 000020CF E973F8FFFF          <1>     jmp noSelfCopyError
   644                              <1> .leaveCopyClose:
   645 000020D4 668B1DEFE6FFFF      <1>     mov bx, word [sourceHdl]
   646 000020DB B8003E0000          <1>     mov eax, 3E00h
   647 000020E0 CD21                <1>     int 21h
   648 000020E2 668B1DE3E6FFFF      <1>     mov bx, word [destHdl]
   649 000020E9 B8003E0000          <1>     mov eax, 3E00h
   650 000020EE CD21                <1>     int 21h
   651                              <1>     return
    13                              <2> %%_ret:
    14 000020F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   652                              <1> .badExit:
   653                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   654 000020F1 668B1DD2E6FFFF      <1>     mov bx, word [sourceHdl]
   655 000020F8 6681FBFFFF          <1>     cmp bx, -1
   656 000020FD 7407                <1>     je .skipSource
   657 000020FF B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   658 00002104 CD21                <1>     int 21h
   659                              <1> .skipSource:
   660 00002106 668B1DBFE6FFFF      <1>     mov bx, word [destHdl]
   661 0000210D 6681FBFFFF          <1>     cmp bx, -1
   662 00002112 0F8438F8FFFF        <1>     je badParamError
   663 00002118 B8003E0000          <1>     mov eax, 3E00h
   664 0000211D CD21                <1>     int 21h
   665 0000211F E92CF8FFFF          <1>     jmp badParamError
   666                              <1> 
   667                              <1> erase:
   668 00002124 F6057FDFFFFFFF      <1>     test byte [arg1Flg], -1
   669 0000212B 0F8431F8FFFF        <1>     jz badArgError
   670 00002131 E87D160000          <1>     call setDTA     ;Start by resetting the DTA
   671 00002136 E88C150000          <1>     call buildCommandPath   ;Get the relative path to the file
   672                              <1> .dirLp:
   673 0000213B 488D3D9FE3FFFF      <1>     lea rdi, searchSpec
   674 00002142 E8C3140000          <1>     call findLastPathComponant
   675 00002147 4889FE              <1>     mov rsi, rdi    ;Save this as the source
   676 0000214A 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
   677 0000214E B03F                <1>     mov al, "?"
   678                              <1>     ;Store question marks in the name field
   679 00002150 57                  <1>     push rdi
   680 00002151 48FFC7              <1>     inc rdi ;Goto the first char
   681 00002154 B90B000000          <1>     mov ecx, 11
   682 00002159 F3AA                <1>     rep stosb
   683 0000215B 5F                  <1>     pop rdi
   684 0000215C 4889F2              <1>     mov rdx, rsi    ;Save the ptr
   685 0000215F B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
   686 00002164 CD21                <1>     int 21h
   687 00002166 3C01                <1>     cmp al, 1
   688 00002168 0F859C000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
   689                              <1>     ;Else, we now copy back the search pattern over the last componant!
   690                              <1>     ;No dirs to handle in here
   691 0000216E 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
   692 00002172 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
   693 00002175 E8B4140000          <1>     call FCBToAsciiz    ;Null terminates for free
   694                              <1>     ;Count the number of ?'s, if 11, we print the message
   695 0000217A 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
   696 0000217E 31C9                <1>     xor ecx, ecx
   697                              <1> .wcScan:
   698 00002180 AC                  <1>     lodsb
   699 00002181 3C3F                <1>     cmp al, "?"
   700 00002183 752F                <1>     jne .endCount
   701 00002185 FFC1                <1>     inc ecx
   702 00002187 81F90B000000        <1>     cmp ecx, 11
   703 0000218D 75F1                <1>     jne .wcScan
   704                              <1> .ynmsg:
   705 0000218F 488D1509EAFFFF      <1>     lea rdx, ynMes
   706 00002196 E8AB100000          <1>     call printString
   707 0000219B B401                <1>     mov ah, 01h ;STDIN without Console Echo
   708 0000219D CD21                <1>     int 21h ;Get char in al
   709 0000219F E89C130000          <1>     call ucChar ;Uppercase the char
   710 000021A4 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
   711 000021A6 7407                <1>     je .endCount1
   712 000021A8 3C4E                <1>     cmp al, "N"
   713                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000021AA 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000021AC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   714 000021AD EBE0                <1>     jmp short .ynmsg    ;Else, tell me what you want!!!
   715                              <1> .endCount1:
   716 000021AF E88B100000          <1>     call printCRLF
   717                              <1> .endCount:
   718                              <1>     ;Now we copy our search template pathstring to delPath
   719 000021B4 488D3DF0E4FFFF      <1>     lea rdi, delPath
   720 000021BB 488D351FE3FFFF      <1>     lea rsi, searchSpec ;Source the chars from here
   721 000021C2 E865130000          <1>     call strcpy2         ;Copy the string over to delPath
   722                              <1> .findFile:
   723                              <1>     ;Now we find first/find next our way through the files
   724 000021C7 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
   725 000021CA 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
   726 000021CC B8004E0000          <1>     mov eax, 4E00h  ;Find first
   727 000021D1 CD21                <1>     int 21h
   728 000021D3 0F82A4F7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   729                              <1>     ;Now the file was found, we copy the name over, delete and keep going
   730 000021D9 E82C140000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
   731 000021DE 488D35A0DFFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   732                              <1> .delNextFile:
   733                              <1> ;rsi and rdi dont move here
   734 000021E5 E842130000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
   735 000021EA 488D15BAE4FFFF      <1>     lea rdx, delPath
   736 000021F1 B800410000          <1>     mov eax, 4100h  ;Delete File 
   737 000021F6 CD21                <1>     int 21h         ;If this fails to delete it, fail silently
   738 000021F8 488D15E2E2FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
   739 000021FF B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
   740 00002204 CD21                <1>     int 21h
   741 00002206 73DD                <1>     jnc .delNextFile    
   742 00002208 F8                  <1>     clc ;Clear carry to indicate success
   743                              <1>     return
    13                              <2> %%_ret:
    14 00002209 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   744                              <1> .noWildcard:
   745                              <1>     ;Here we just check that the file was not a directory. If it was, we add
   746                              <1>     ; a \*.*<NUL> over the null terminator
   747 0000220A 488D15D0E2FFFF      <1>     lea rdx, searchSpec
   748 00002211 B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
   749 00002216 B8004E0000          <1>     mov eax, 4E00h  ;Find first
   750 0000221B CD21                <1>     int 21h
   751 0000221D 0F825AF7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   752 00002223 F60552DFFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   753 0000222A 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
   754                              <1>     ;Else, we are dealing with a dir
   755 0000222C 4889D7              <1>     mov rdi, rdx
   756 0000222F 31C9                <1>     xor ecx, ecx
   757 00002231 FFC9                <1>     dec ecx
   758 00002233 F2AE                <1>     repne scasb ;Go to the end of the line!
   759 00002235 48FFCF              <1>     dec rdi
   760 00002238 0FB605ECDDFFFF      <1>     movzx eax, byte [pathSep]
   761 0000223F AA                  <1>     stosb
   762 00002240 B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
   763 00002245 AB                  <1>     stosd
   764 00002246 E9F0FEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
   765                              <1> .delMain:   ;Call with rdx -> buffer!
   766 0000224B B800410000          <1>     mov eax, 4100h  ;Delete File 
   767 00002250 CD21                <1>     int 21h
   768                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002252 73(09)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   769 00002254 3C05                <1>     cmp al, errAccDen
   770 00002256 0F84E2F6FFFF        <1>     je badAccError ;If the file is RO, fail!
   771 0000225C E90AF7FFFF          <1>     jmp badFileError
   772                              <1>     return
    13                              <2> %%_ret:
    14 00002261 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   773                              <1> date:
   774 00002262 488D15B9E8FFFF      <1>     lea rdx, curDate
   775 00002269 B409                <1>     mov ah, 09h
   776 0000226B CD21                <1>     int 21h
   777 0000226D B42A                <1>     mov ah, 2Ah ;DOS get date
   778 0000226F CD21                <1>     int 21h
   779                              <1> 	;AL = day of the week (0=Sunday)
   780                              <1> 	;CX = year (1980-2099)
   781                              <1> 	;DH = month (1-12)
   782                              <1> 	;DL = day (1-31)
   783 00002271 66890D2FE4FFFF      <1>     mov word [td1], cx
   784 00002278 88152BE4FFFF        <1>     mov byte [td3], dl
   785 0000227E 883526E4FFFF        <1>     mov byte [td4], dh
   786 00002284 0FB6C0              <1>     movzx eax, al
   787 00002287 89C3                <1>     mov ebx, eax
   788 00002289 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   789 0000228B 01D8                <1>     add eax, ebx ;Make it 3 times 
   790 0000228D 488D156AE8FFFF      <1>     lea rdx, dayName
   791 00002294 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   792 00002298 B903000000          <1>     mov ecx, 3  ;Print three chars
   793 0000229D BB01000000          <1>     mov ebx, 1  ;STDOUT
   794 000022A2 B440                <1>     mov ah, 40h ;Write to handle
   795 000022A4 CD21                <1>     int 21h
   796 000022A6 B220                <1>     mov dl, " "
   797 000022A8 B402                <1>     mov ah, 02h
   798 000022AA CD21                <1>     int 21h
   799                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   800                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   801                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   802 000022AC 0FB705F4E3FFFF      <1>     movzx eax, word [td1]   ;Get this word
   803 000022B3 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   804 000022B6 0FB61DEDE3FFFF      <1>     movzx ebx, byte [td4]
   805 000022BD C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   806 000022C0 09D8                <1>     or eax, ebx ;Add this date to eax
   807 000022C2 0FB61DE0E3FFFF      <1>     movzx ebx, byte [td3]
   808 000022C9 09D8                <1>     or eax, ebx
   809 000022CB BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   810 000022D0 E8790F0000          <1>     call printDate
   811                              <1> 
   812 000022D5 488D1557E8FFFF      <1>     lea rdx, newDate
   813 000022DC B409                <1>     mov ah, 09h
   814 000022DE CD21                <1>     int 21h
   815 000022E0 488D156BE8FFFF      <1>     lea rdx, ukDate
   816 000022E7 488D0557E8FFFF      <1>     lea rax, usDate
   817 000022EE 488D1D6AE8FFFF      <1>     lea rbx, jpDate
   818 000022F5 803D3ADDFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   819 000022FC 480F47D3            <1>     cmova rdx, rbx
   820 00002300 480F42D0            <1>     cmovb rdx, rax
   821 00002304 B409                <1>     mov ah, 09h
   822 00002306 CD21                <1>     int 21h
   823                              <1> 
   824 00002308 488D15A3DEFFFF      <1>     lea rdx, inBuffer
   825 0000230F C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
   826 00002312 B40A                <1>     mov ah, 0Ah
   827 00002314 CD21                <1>     int 21h
   828 00002316 52                  <1>     push rdx
   829 00002317 488D1523E6FFFF      <1>     lea rdx, crlf
   830 0000231E B409                <1>     mov ah, 09h
   831 00002320 CD21                <1>     int 21h
   832 00002322 5A                  <1>     pop rdx
   833 00002323 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   834                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002327 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002329 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   835                              <1>     return
    13                              <2> %%_ret:
    14 0000232A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   836                              <1> 
   837                              <1> time:
   838 0000232B 488D1549E8FFFF      <1>     lea rdx, curTime
   839 00002332 B409                <1>     mov ah, 09h
   840 00002334 CD21                <1>     int 21h
   841 00002336 B42C                <1>     mov ah, 2Ch ;DOS get time
   842 00002338 CD21                <1>     int 21h
   843                              <1>     ;CH = hour (0-23)
   844                              <1> 	;CL = minutes (0-59)
   845                              <1> 	;DH = seconds (0-59)
   846                              <1> 	;DL = hundredths (0-99)
   847 0000233A 880D67E3FFFF        <1>     mov byte [td1], cl
   848 00002340 882D62E3FFFF        <1>     mov byte [td2], ch
   849 00002346 88155DE3FFFF        <1>     mov byte [td3], dl
   850 0000234C 883558E3FFFF        <1>     mov byte [td4], dh
   851 00002352 0FB6C5              <1>     movzx eax, ch
   852 00002355 E888100000          <1>     call printTime.printHours
   853                              <1> 
   854 0000235A 8A15E3DCFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   855 00002360 B402                <1>     mov ah, 02h
   856 00002362 CD21                <1>     int 21h
   857                              <1> 
   858 00002364 0FB6053CE3FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   859 0000236B E862100000          <1>     call printTime.printMinutesAlt
   860                              <1> 
   861 00002370 8A15CDDCFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   862 00002376 B402                <1>     mov ah, 02h
   863 00002378 CD21                <1>     int 21h
   864                              <1> 
   865 0000237A 0FB60529E3FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   866 00002381 E84C100000          <1>     call printTime.printMinutesAlt
   867                              <1> 
   868 00002386 B22E                <1>     mov dl, "."
   869 00002388 B402                <1>     mov ah, 02h
   870 0000238A CD21                <1>     int 21h
   871                              <1> 
   872 0000238C 0FB60516E3FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   873 00002393 E83A100000          <1>     call printTime.printMinutesAlt
   874                              <1> 
   875 00002398 488D15EDE7FFFF      <1>     lea rdx, newTime
   876 0000239F B409                <1>     mov ah, 09h
   877 000023A1 CD21                <1>     int 21h
   878                              <1> 
   879 000023A3 488D1508DEFFFF      <1>     lea rdx, inBuffer
   880 000023AA C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
   881 000023AD B40A                <1>     mov ah, 0Ah
   882 000023AF CD21                <1>     int 21h
   883 000023B1 52                  <1>     push rdx
   884 000023B2 488D1588E5FFFF      <1>     lea rdx, crlf
   885 000023B9 B409                <1>     mov ah, 09h
   886 000023BB CD21                <1>     int 21h
   887 000023BD 5A                  <1>     pop rdx
   888 000023BE 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   889                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000023C2 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000023C4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   890                              <1>     return
    13                              <2> %%_ret:
    14 000023C5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   891                              <1> ctty:
   892 000023C6 F605DDDCFFFFFF      <1>     test byte [arg1Flg], -1
   893 000023CD 0F848FF5FFFF        <1>     jz badArgError
   894 000023D3 F605D3DCFFFFFF      <1>     test byte [arg2Flg], -1
   895 000023DA 0F8582F5FFFF        <1>     jnz badArgError
   896 000023E0 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   897 000023E7 0FB605BDDCFFFF      <1>     movzx eax, byte [arg1Off]
   898 000023EE 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   899 000023F1 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   900 000023F5 750F                <1>     jne .noDrive
   901 000023F7 0FB605AEDCFFFF      <1>     movzx eax, byte [arg1FCBret]
   902 000023FE 3CFF                <1>     cmp al, -1
   903 00002400 0F8453F5FFFF        <1>     je badDriveError
   904                              <1> .noDrive:
   905                              <1>     ;Now we open the provided file
   906 00002406 E8D4120000          <1>     call copyArgumentToSearchSpec
   907 0000240B 488D15CFE0FFFF      <1>     lea rdx, searchSpec
   908 00002412 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   909 00002417 CD21                <1>     int 21h
   910 00002419 0F824CF5FFFF        <1>     jc badFileError
   911 0000241F 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   912 00002422 B800440000          <1>     mov eax, 4400h  ;Get device word
   913 00002427 CD21                <1>     int 21h
   914 00002429 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   915 0000242C 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   916                              <1>     ;Now we set this handle to be STDIO
   917 0000242E 80CA03              <1>     or dl, 3    ;Set STDIO bits
   918 00002431 30F6                <1>     xor dh, dh
   919 00002433 B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   920 00002438 CD21                <1>     int 21h
   921                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   922 0000243A 31C9                <1>     xor ecx, ecx    ;STDIN
   923 0000243C B446                <1>     mov ah, 46h
   924 0000243E CD21                <1>     int 21h
   925 00002440 FFC1                <1>     inc ecx         ;STDOUT
   926 00002442 B446                <1>     mov ah, 46h
   927 00002444 CD21                <1>     int 21h
   928 00002446 FFC1                <1>     inc ecx         ;STDERR
   929 00002448 B446                <1>     mov ah, 46h
   930 0000244A CD21                <1>     int 21h
   931 0000244C B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   932 0000244E CD21                <1>     int 21h
   933                              <1>     return
    13                              <2> %%_ret:
    14 00002450 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   934                              <1> .badCharDev:
   935 00002451 488D1564E8FFFF      <1>     lea rdx, badDev
   936 00002458 B409                <1>     mov ah, 09h
   937 0000245A CD21                <1>     int 21h
   938 0000245C B43E                <1>     mov ah, 3Eh ;Close opened handle
   939 0000245E CD21                <1>     int 21h
   940                              <1>     return
    13                              <2> %%_ret:
    14 00002460 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   941                              <1> 
   942                              <1> cls:  
   943 00002461 B800440000          <1>     mov eax, 4400h  ;Get device info
   944 00002466 BB01000000          <1>     mov ebx, 1      ;for handle 1
   945 0000246B CD21                <1>     int 21h         ;in dx
   946 0000246D F7C280000000        <1>     test edx, devCharDev
   947 00002473 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   948 00002475 F7C210000000        <1>     test edx, charDevFastOut
   949 0000247B 743E                <1>     jz .doAnsi
   950                              <1>     ;Test if Int 29h uses Int 30h
   951                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   952                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
   953 0000247D B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
   954 00002482 CD21                <1>     int 21h
   955                              <1> .biosCheck:
   956 00002484 66813BCD30          <1>     cmp word [rbx], 30CDh
   957 00002489 740C                <1>     je .biosConfirmed
   958 0000248B 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   959 00002490 7429                <1>     je .doAnsi
   960 00002492 48FFC3              <1>     inc rbx
   961 00002495 EBED                <1>     jmp short .biosCheck
   962                              <1> .biosConfirmed:
   963                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   964 00002497 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   965 00002499 31DB                <1>     xor ebx, ebx
   966 0000249B CD30                <1>     int 30h
   967 0000249D B40F                <1>     mov ah, 0Fh ;Get screen mode
   968 0000249F CD30                <1>     int 30h
   969 000024A1 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   970 000024A4 FECA                <1>     dec dl
   971 000024A6 B619                <1>     mov dh, 25  ;Number of rows is standard
   972 000024A8 31C0                <1>     xor eax, eax
   973 000024AA 89C1                <1>     mov ecx, eax
   974 000024AC B707                <1>     mov bh, 7   ;Screen attributes
   975 000024AE B406                <1>     mov ah, 6   ;Scroll
   976 000024B0 CD30                <1>     int 30h
   977 000024B2 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   978 000024B4 B700                <1>     mov bh, 0   ;Page 0
   979 000024B6 B402                <1>     mov ah, 2
   980 000024B8 CD30                <1>     int 30h
   981                              <1>     return
    13                              <2> %%_ret:
    14 000024BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   982                              <1> .doAnsi:
   983                              <1> ;4 chars in the ansi routine
   984                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   985                              <1> ; understand ANSI codes
   986 000024BB 488D355EEAFFFF      <1>     lea rsi, ansiCls
   987 000024C2 B904000000          <1>     mov ecx, 4
   988 000024C7 B406                <1>     mov ah, 06h ;Raw char output
   989                              <1> .ansiLp:
   990 000024C9 AC                  <1>     lodsb   ;Get the char in 
   991 000024CA 88C2                <1>     mov dl, al
   992 000024CC CD21                <1>     int 21h
   993 000024CE FFC9                <1>     dec ecx
   994 000024D0 75F7                <1>     jnz .ansiLp
   995                              <1>     return
    13                              <2> %%_ret:
    14 000024D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   996                              <1> 
   997                              <1> break:
   998 000024D3 F605D0DBFFFFFF      <1>     test byte [arg1Flg], -1
   999 000024DA 752D                <1>     jnz .argumentProvided
  1000                              <1>     ;Here we just get the status of break
  1001 000024DC B800330000          <1>     mov eax, 3300h  ;Get break status in dl
  1002 000024E1 CD21                <1>     int 21h
  1003 000024E3 88D3                <1>     mov bl, dl
  1004 000024E5 488D1572E8FFFF      <1>     lea rdx, breakIs
  1005 000024EC B409                <1>     mov ah, 09h
  1006 000024EE CD21                <1>     int 21h
  1007 000024F0 488D1562E8FFFF      <1>     lea rdx, onMes
  1008 000024F7 488D0D55E8FFFF      <1>     lea rcx, offMes
  1009 000024FE 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1010 00002500 480F44D1            <1>     cmovz rdx, rcx
  1011 00002504 B409                <1>     mov ah, 09h
  1012 00002506 CD21                <1>     int 21h
  1013                              <1>     return
    13                              <2> %%_ret:
    14 00002508 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1014                              <1> .argumentProvided:
  1015 00002509 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1016 0000250D AD                  <1>     lodsd   ;Read the word
  1017 0000250E 89C3                <1>     mov ebx, eax
  1018 00002510 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1019 00002515 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1020 00002518 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1021 0000251D 7416                <1>     je .maybeOn
  1022 0000251F 663D4F46            <1>     cmp ax, "OF"
  1023 00002523 7523                <1>     jne .badOnOff
  1024 00002525 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1025 0000252A 6681FB4620          <1>     cmp bx, "F "
  1026 0000252F 7517                <1>     jne .badOnOff
  1027                              <1>     ;Set off
  1028 00002531 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1029 00002533 EB0B                <1>     jmp short .setBreak
  1030                              <1> .maybeOn:
  1031 00002535 663D4F4E            <1>     cmp ax, "ON"
  1032 00002539 750D                <1>     jne .badOnOff
  1033                              <1>     ;Set on
  1034 0000253B BA01000000          <1>     mov edx, 1
  1035                              <1> .setBreak:
  1036 00002540 B801330000          <1>     mov eax, 3301h  ;Set break
  1037 00002545 CD21                <1>     int 21h
  1038                              <1>     return
    13                              <2> %%_ret:
    14 00002547 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1039                              <1> .badOnOff:
  1040 00002548 488D15E1E9FFFF      <1>     lea rdx, badOnOff
  1041 0000254F B409                <1>     mov ah, 09h
  1042 00002551 CD21                <1>     int 21h
  1043                              <1>     return
    13                              <2> %%_ret:
    14 00002553 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1044                              <1> 
  1045                              <1> verify:
  1046 00002554 F6054FDBFFFFFF      <1>     test byte [arg1Flg], -1
  1047 0000255B 752D                <1>     jnz .argumentProvided
  1048                              <1>     ;Here we just get the status of break
  1049 0000255D B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1050 00002562 CD21                <1>     int 21h
  1051 00002564 88C3                <1>     mov bl, al
  1052 00002566 488D15FBE7FFFF      <1>     lea rdx, verifyIs
  1053 0000256D B409                <1>     mov ah, 09h
  1054 0000256F CD21                <1>     int 21h
  1055 00002571 488D15E1E7FFFF      <1>     lea rdx, onMes
  1056 00002578 488D0DD4E7FFFF      <1>     lea rcx, offMes
  1057 0000257F 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1058 00002581 480F44D1            <1>     cmovz rdx, rcx
  1059 00002585 B409                <1>     mov ah, 09h
  1060 00002587 CD21                <1>     int 21h
  1061                              <1>     return
    13                              <2> %%_ret:
    14 00002589 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1062                              <1> .argumentProvided:
  1063 0000258A 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1064 0000258E AD                  <1>     lodsd   ;Read the word
  1065 0000258F 89C3                <1>     mov ebx, eax
  1066 00002591 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1067 00002596 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1068 00002599 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1069 0000259E 7416                <1>     je .maybeOn
  1070 000025A0 663D4F46            <1>     cmp ax, "OF"
  1071 000025A4 751F                <1>     jne .badOnOff
  1072 000025A6 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1073 000025AB 6681FB4620          <1>     cmp bx, "F "
  1074 000025B0 7513                <1>     jne .badOnOff
  1075                              <1>     ;Set off
  1076 000025B2 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1077 000025B4 EB0A                <1>     jmp short .setVerify
  1078                              <1> .maybeOn:
  1079 000025B6 663D4F4E            <1>     cmp ax, "ON"
  1080 000025BA 7509                <1>     jne .badOnOff
  1081                              <1>     ;Set on
  1082 000025BC 31C0                <1>     xor eax, eax
  1083 000025BE FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1084                              <1> .setVerify:
  1085 000025C0 B42E                <1>     mov ah, 2Eh  ;Set Verify
  1086 000025C2 CD21                <1>     int 21h
  1087                              <1>     return
    13                              <2> %%_ret:
    14 000025C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1088                              <1> .badOnOff:
  1089 000025C5 488D1564E9FFFF      <1>     lea rdx, badOnOff
  1090 000025CC B409                <1>     mov ah, 09h
  1091 000025CE CD21                <1>     int 21h
  1092                              <1>     return
    13                              <2> %%_ret:
    14 000025D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1093                              <1> 
  1094                              <1> rename:
  1095 000025D1 F605D2DAFFFFFF      <1>     test byte [arg1Flg], -1
  1096 000025D8 0F8484F3FFFF        <1>     jz badArgError
  1097 000025DE F605C8DAFFFFFF      <1>     test byte [arg2Flg], -1
  1098 000025E5 0F8477F3FFFF        <1>     jz badArgError    
  1099                              <1>     ;Initialise the variables!
  1100 000025EB 488D35B9E0FFFF      <1>     lea rsi, srcSpec
  1101 000025F2 488935B6E1FFFF      <1>     mov qword [srcPtr], rsi
  1102 000025F9 488D352DE1FFFF      <1>     lea rsi, destSpec
  1103 00002600 488935B0E1FFFF      <1>     mov qword [destPtr], rsi
  1104                              <1>     ;Check the second path is just a filename!
  1105 00002607 0FB605A0DAFFFF      <1>     movzx eax, byte [arg2Off]
  1106 0000260E 4C8B05FAD9FFFF      <1>     mov r8, qword [pspPtr]
  1107 00002615 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1108 0000261C 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1109 0000261F 488D3DBBDEFFFF      <1>     lea rdi, searchSpec
  1110 00002626 57                  <1>     push rdi
  1111 00002627 E858100000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1112 0000262C 5F                  <1>     pop rdi
  1113 0000262D 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1114 00002631 0F842BF3FFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1115 00002637 4889FE              <1>     mov rsi, rdi
  1116                              <1> .destScan:
  1117 0000263A AC                  <1>     lodsb   ;Get the char
  1118 0000263B 3A05EAD9FFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1119 00002641 0F841BF3FFFF        <1>     je badArgError
  1120 00002647 84C0                <1>     test al, al
  1121 00002649 75EF                <1>     jnz .destScan
  1122                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1123 0000264B 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1124 0000264F 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1124 00002658 3F                  <1>
  1125 00002659 B903000000          <1>     mov ecx, 3  ;24 bytes
  1126 0000265E F348AB              <1>     rep stosq
  1127 00002661 AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1128 00002662 488D3578DEFFFF      <1>     lea rsi, searchSpec
  1129 00002669 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1130 0000266D B80D290000          <1>     mov eax, 290Dh
  1131 00002672 CD21                <1>     int 21h     
  1132 00002674 50                  <1>     push rax    ;Save the WC signature
  1133 00002675 E84D100000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1134 0000267A 488D3D60DEFFFF      <1>     lea rdi, searchSpec
  1135 00002681 E8840F0000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1136 00002686 4889FE              <1>     mov rsi, rdi
  1137 00002689 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1138 0000268C 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1139 00002690 B80D290000          <1>     mov eax, 290Dh
  1140 00002695 CD21                <1>     int 21h
  1141 00002697 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1142 00002698 88CC                <1>     mov ah, cl
  1143 0000269A 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1144 0000269D 0F84EC000000        <1>     jz .noWC
  1145 000026A3 488D3537DEFFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1146                              <1>     ;Now we check if we have a path to actually handle
  1147 000026AA 4839F3              <1>     cmp rbx, rsi
  1148 000026AD 7444                <1>     je .noPath
  1149 000026AF C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1150 000026B3 488D3527DEFFFF      <1>     lea rsi, searchSpec
  1151 000026BA 488D3DEADFFFFF      <1>     lea rdi, srcSpec
  1152 000026C1 56                  <1>     push rsi
  1153 000026C2 E8560E0000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1154 000026C7 5E                  <1>     pop rsi
  1155 000026C8 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1156 000026CB 8A055AD9FFFF        <1>     mov al, byte [pathSep]
  1157 000026D1 AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1158 000026D2 48893DD6E0FFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1159 000026D9 488D3D4DE0FFFF      <1>     lea rdi, destSpec
  1160 000026E0 E8380E0000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1161 000026E5 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1162 000026E8 AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1163 000026E9 48893DC7E0FFFF      <1>     mov qword [destPtr], rdi
  1164 000026F0 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1165                              <1> .noPath:
  1166                              <1>     ;Now we have where to copy the files to, we can start our work!
  1167 000026F3 E8BB100000          <1>     call setDTA
  1168 000026F8 488D15E2DDFFFF      <1>     lea rdx, searchSpec
  1169 000026FF 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1170 00002701 B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1171 00002706 CD21                <1>     int 21h
  1172 00002708 0F8266F2FFFF        <1>     jc badDupFnf    ;If no file was found!
  1173                              <1> .wcLoop:
  1174                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1175 0000270E 488D3570DAFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1176 00002715 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1177 00002719 B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1178 0000271E CD21                <1>     int 21h 
  1179                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1180 00002720 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1181 00002724 488D3D94E0FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1182 0000272B 57                  <1>     push rdi
  1183 0000272C 48A5                <1>     movsq
  1184 0000272E 66A5                <1>     movsw
  1185 00002730 A4                  <1>     movsb
  1186 00002731 5F                  <1>     pop rdi
  1187 00002732 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1188 00002736 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1189                              <1> .wcNameMake:
  1190 0000273B AC                  <1>     lodsb   ;Get the char from the source string
  1191 0000273C 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1192 0000273F 7502                <1>     jne .noStore    ;Dont store the char there
  1193 00002741 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1194                              <1> .noStore:
  1195 00002743 48FFC7              <1>     inc rdi ;Goto next char position
  1196 00002746 FFC9                <1>     dec ecx
  1197 00002748 75F1                <1>     jnz .wcNameMake
  1198                              <1> ;renName now has the FCB name for the file we wish to make!
  1199                              <1> ;Now make the two paths!
  1200 0000274A 488D3534DAFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1201 00002751 488B3D57E0FFFF      <1>     mov rdi, qword [srcPtr]
  1202 00002758 E8C00D0000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1203 0000275D 488D355BE0FFFF      <1>     lea rsi, renName
  1204 00002764 488B3D4CE0FFFF      <1>     mov rdi, qword [destPtr]
  1205 0000276B E8BE0E0000          <1>     call FCBToAsciiz
  1206 00002770 488D1534DFFFFF      <1>     lea rdx, srcSpec
  1207 00002777 488D3DAFDFFFFF      <1>     lea rdi, destSpec
  1208 0000277E B800560000          <1>     mov eax, 5600h
  1209 00002783 CD21                <1>     int 21h     ;Fail silently on wildcard rename
  1210 00002785 B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1211 0000278A CD21                <1>     int 21h
  1212 0000278C 7380                <1>     jnc .wcLoop     ;And process it too!
  1213                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 0000278E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1214                              <1> .noWC:
  1215 0000278F E8330F0000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1216 00002794 0FB60513D9FFFF      <1>     movzx eax, byte [arg2Off]
  1217 0000279B 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1218 000027A2 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1219 000027A5 488D3D81DFFFFF      <1>     lea rdi, destSpec
  1220 000027AC 57                  <1>     push rdi
  1221 000027AD E8D20E0000          <1>     call cpDelimPathToBufz
  1222 000027B2 5F                  <1>     pop rdi
  1223 000027B3 488D1527DDFFFF      <1>     lea rdx, searchSpec
  1224 000027BA B800560000          <1>     mov eax, 5600h
  1225 000027BF CD21                <1>     int 21h
  1226                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000027C1 73(8E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1227 000027C3 E9ACF1FFFF          <1>     jmp badDupFnf   ;Always just return this
  1228                              <1> 
  1229                              <1> 
  1230                              <1> touch:
  1231                              <1> ;Temporarily used to create files
  1232 000027C8 F605DBD8FFFFFF      <1>     test byte [arg1Flg], -1
  1233 000027CF 0F848DF1FFFF        <1>     jz badArgError
  1234 000027D5 E8ED0E0000          <1>     call buildCommandPath
  1235 000027DA 488D1500DDFFFF      <1>     lea rdx, searchSpec
  1236 000027E1 B8005B0000          <1>     mov eax, 5B00h  ;Create unique file 
  1237 000027E6 31C9                <1>     xor ecx, ecx
  1238 000027E8 CD21                <1>     int 21h
  1239 000027EA 721D                <1>     jc .touch1
  1240                              <1> .touchClose:
  1241 000027EC 0FB7D8              <1>     movzx ebx, ax   ;Save the handle here
  1242 000027EF B80D120000          <1>     mov eax, 120Dh  ;Get date/time words from the DOS
  1243 000027F4 CD2F                <1>     int 2fh
  1244 000027F6 89C1                <1>     mov ecx, eax    ;Move the time here
  1245 000027F8 87D1                <1>     xchg edx, ecx   ;Get them in the right place
  1246 000027FA B801570000          <1>     mov eax, 5701h  ;Set the date/time for bx
  1247 000027FF CD21                <1>     int 21h
  1248 00002801 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1249 00002806 CD21                <1>     int 21h
  1250                              <1>     return
    13                              <2> %%_ret:
    14 00002808 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1251                              <1> .touch1:
  1252 00002809 3C50                <1>     cmp al, errFilExist ;Does the file exist?
  1253 0000280B 7509                <1>     jne .touchError ;If not, this is a proper error!
  1254 0000280D B8003D0000          <1>     mov eax, 3D00h  ;R/O open instead to update the access time!!
  1255 00002812 CD21                <1>     int 21h
  1256 00002814 73D6                <1>     jnc .touchClose ;If this worked, close the handle immediately
  1257                              <1> .touchError:
  1258 00002816 3C03                <1>     cmp al, errPnf
  1259 00002818 0F8444F1FFFF        <1>     je badArgError
  1260 0000281E 3C02                <1>     cmp al, errFnf
  1261 00002820 0F8457F1FFFF        <1>     je badFnf
  1262 00002826 E913F1FFFF          <1>     jmp badAccError
  1263                              <1>     
  1264                              <1> 
  1265                              <1> join:
  1266                              <1> ;Mock join command, to test join. Make an external command.
  1267                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1268 0000282B F605AF000000FF      <1>     test byte [.joinOn], -1
  1269 00002832 743D                <1>     jz .okJoin
  1270                              <1> .joindisable:
  1271 00002834 B800520000          <1>     mov eax, 5200h  
  1272 00002839 CD21                <1>     int 21h
  1273                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1274 0000283B B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1275 00002840 CD2A                <1>     int 2Ah
  1276 00002842 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1277 00002846 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1278 0000284A 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1279 00002850 C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1280 00002853 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1281 00002857 FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1282 0000285A B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1283 0000285F CD2A                <1>     int 2Ah
  1284 00002861 C6057900000000      <1>     mov byte [.joinOn], 0
  1285 00002868 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1286 0000286F EB45                <1>     jmp short .joinExit
  1287                              <1> .okJoin:
  1288 00002871 C60569000000FF      <1>     mov byte [.joinOn], -1
  1289 00002878 B800520000          <1>     mov eax, 5200h  
  1290 0000287D CD21                <1>     int 21h
  1291 0000287F 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1292 00002883 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1293                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1294 00002887 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1295 0000288C CD2A                <1>     int 2Ah
  1296 0000288E 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1297 00002894 4889DF              <1>     mov rdi, rbx
  1298 00002897 488D3544000000      <1>     lea rsi, .joinPath
  1299 0000289E B90C000000          <1>     mov ecx, .joinPathL
  1300 000028A3 F3A4                <1>     rep movsb   ;Copy chars over
  1301 000028A5 FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1302 000028A8 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1303 000028AD CD2A                <1>     int 2Ah
  1304 000028AF 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1305                              <1> .joinExit:
  1306 000028B6 B800090000          <1>     mov eax, 0900h
  1307 000028BB CD21                <1>     int 21h
  1308                              <1>     return
    13                              <2> %%_ret:
    14 000028BD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1309 000028BE 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1309 000028C7 61626C65640D0A24    <1>
  1310 000028CF 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1310 000028D8 7361626C65640D0A24  <1>
  1311 000028E1 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1312 000028E2 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1312 000028EB 535400              <1>
  1313                              <1> .joinPathL  equ $ - .joinPath 
  1314                              <1> 
  1315                              <1> subst:
  1316                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1317                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1318 000028EE F605D3000000FF      <1>     test byte [.substOn], -1
  1319 000028F5 7443                <1>     jz .okSubst
  1320                              <1> .substdisable:
  1321 000028F7 B800520000          <1>     mov eax, 5200h  
  1322 000028FC CD21                <1>     int 21h
  1323                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1324 000028FE B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1325 00002903 CD2A                <1>     int 2Ah
  1326 00002905 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1327 00002909 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1328 00002910 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1329 00002916 C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1330 00002919 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1331 0000291D 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1332 00002923 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1333 00002928 CD2A                <1>     int 2Ah
  1334 0000292A C6059700000000      <1>     mov byte [.substOn], 0
  1335 00002931 488D157D000000      <1>     lea rdx, .substDisableMsg
  1336 00002938 EB61                <1>     jmp short .substExit
  1337                              <1> .okSubst:
  1338 0000293A C60587000000FF      <1>     mov byte [.substOn], -1
  1339 00002941 B800520000          <1>     mov eax, 5200h  
  1340 00002946 CD21                <1>     int 21h
  1341 00002948 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1342 0000294D CD2A                <1>     int 2Ah
  1343 0000294F 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1344 00002953 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1345 0000295A 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1346 0000295E 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1347 00002965 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1348 00002969 C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1349                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1350 00002970 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1351 00002976 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1352 0000297C 4889DF              <1>     mov rdi, rbx
  1353 0000297F 488D3543000000      <1>     lea rsi, .substPath
  1354 00002986 B90C000000          <1>     mov ecx, .substPathL
  1355 0000298B F3A4                <1>     rep movsb   ;Copy chars over
  1356 0000298D B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1357 00002992 CD2A                <1>     int 2Ah
  1358 00002994 488D1508000000      <1>     lea rdx, .substEnableMsg
  1359                              <1> .substExit:
  1360 0000299B B800090000          <1>     mov eax, 0900h
  1361 000029A0 CD21                <1>     int 21h
  1362                              <1>     return
    13                              <2> %%_ret:
    14 000029A2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1363 000029A3 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1363 000029AC 6E61626C65640D0A24  <1>
  1364 000029B5 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1364 000029BE 697361626C65640D0A- <1>
  1364 000029C7 24                  <1>
  1365 000029C8 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1366 000029C9 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1366 000029D2 535400              <1>
  1367                              <1> .substPathL  equ $ - .substPath 
  1368                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1369                              <1> truename:
  1370 000029D5 F605CED6FFFFFF      <1>     test byte [arg1Flg], -1
  1371 000029DC 0F8480EFFFFF        <1>     jz badArgError
  1372 000029E2 E8E00C0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1373 000029E7 488D35F3DAFFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1374 000029EE 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1375 000029F1 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1376 000029F6 CD21                <1>     int 21h
  1377 000029F8 730D                <1>     jnc .writePath
  1378 000029FA 3C02                <1>     cmp al, errFnf
  1379 000029FC 0F8469EFFFFF        <1>     je badFileError
  1380 00002A02 E949EFFFFF          <1>     jmp badParamError
  1381                              <1> .writePath:
  1382 00002A07 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1383 00002A0A B9FFFFFFFF          <1>     mov ecx, -1
  1384 00002A0F 30C0                <1>     xor al, al
  1385 00002A11 F2AE                <1>     repne scasb     ;Get the new len
  1386 00002A13 F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1387 00002A15 FFC9                <1>     dec ecx
  1388 00002A17 BB01000000          <1>     mov ebx, 01
  1389 00002A1C B440                <1>     mov ah, 40h
  1390 00002A1E CD21                <1>     int 21h
  1391 00002A20 E81A080000          <1>     call printCRLF
  1392                              <1>     return
    13                              <2> %%_ret:
    14 00002A25 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1393                              <1> 
  1394                              <1> label:
  1395                              <1> ;Displays/Changes/Deletes the file label
  1396 00002A26 488D1508000000      <1>     lea rdx, .l1
  1397 00002A2D B800090000          <1>     mov eax, 0900h
  1398 00002A32 CD21                <1>     int 21h
  1399                              <1>     return
    13                              <2> %%_ret:
    14 00002A34 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1400 00002A35 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  1400 00002A3E 6E20756E696D706C65- <1>
  1400 00002A47 6D656E7465640D0A24  <1>
  1401                              <1> 
  1402                              <1> mklbl:
  1403                              <1>     ;lea rdx, .l1
  1404                              <1>     ;mov cx, 08h ;Make a label
  1405                              <1>     ;mov eax, 3C00h
  1406                              <1>     ;int 21h
  1407                              <1> 
  1408                              <1>     ;mov ebx, eax
  1409                              <1>     ;mov eax, 3E00h  ;Close the handle
  1410                              <1>     ;int 21h
  1411                              <1>     ;return
  1412                              <1> 
  1413                              <1> ;.l1: db "TESTLABEL",0
  1414 00002A50 488D1508000000      <1>     lea rdx, .l1
  1415 00002A57 B800160000          <1>     mov eax, 1600h  ;Create FCB
  1416 00002A5C CD21                <1>     int 21h
  1417                              <1>     return
    13                              <2> %%_ret:
    14 00002A5E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1418                              <1> .l1:
  1419                              <1>     istruc exFcb
  1420 00002A5F FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1421 00002A60 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1422 00002A66 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1423 00002A67 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  1424 00002A6F 4C2020              <1>     at exFcb.fileext,   db "L  "
  1425 00002A72 00000000            <1>     at exFcb.curBlock,  dd 0
  1426 00002A76 00<rep 15h>         <1>     iend 
  1427                              <1> rmlbl:
  1428 00002A8B 488D1508000000      <1>     lea rdx, .l1
  1429 00002A92 B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  1430 00002A97 CD21                <1>     int 21h
  1431                              <1>     return
    13                              <2> %%_ret:
    14 00002A99 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1432                              <1> .l1:    ;FCB to volume label
  1433                              <1>     istruc exFcb
  1434 00002A9A FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1435 00002A9B 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1436 00002AA1 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1437 00002AA2 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  1438 00002AAA 3F3F3F              <1>     at exFcb.fileext,   db "???"
  1439 00002AAD 00000000            <1>     at exFcb.curBlock,  dd 0
  1440 00002AB1 00<rep 15h>         <1>     iend 
  1441                              <1> 
  1442                              <1> rnlbl:
  1443 00002AC6 488D1508000000      <1>     lea rdx, .l1
  1444 00002ACD B800170000          <1>     mov eax, 1700h
  1445 00002AD2 CD21                <1>     int 21h
  1446                              <1>     return
    13                              <2> %%_ret:
    14 00002AD4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1447                              <1> .l1:
  1448                              <1>     istruc exRenFcb
  1449 00002AD5 FF                  <1>     at exRenFcb.extSig,     db -1
  1450 00002AD6 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  1451 00002ADC 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  1452 00002ADD 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  1453 00002AE5 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  1454 00002AE8 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  1454 00002AF1 4C414245            <1>
  1455 00002AF5 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  1456 00002AF8 00<rep 4h>          <1>     iend
  1457                              <1> volume:
  1458                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  1459 00002AFC F605AAD5FFFFFF      <1>     test byte [arg2Flg], -1
  1460 00002B03 0F8559EEFFFF        <1>     jnz badArgError
  1461 00002B09 F6059AD5FFFFFF      <1>     test byte [arg1Flg], -1
  1462 00002B10 7507                <1>     jnz .notCurrentDrive
  1463 00002B12 E8010A0000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1464 00002B17 EB31                <1>     jmp short .dirEP
  1465                              <1> .notCurrentDrive:
  1466 00002B19 E8A90B0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1467 00002B1E 488D35BCD9FFFF      <1>     lea rsi, searchSpec
  1468 00002B25 E8280A0000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  1469 00002B2A 66AD                <1>     lodsw                   ;Get this word
  1470 00002B2C 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  1471 00002B2F 0F852DEEFFFF        <1>     jne badArgError
  1472 00002B35 8A0571D5FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1473 00002B3B A8FF                <1>     test al, -1
  1474 00002B3D 0F8516EEFFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1475 00002B43 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1476 00002B48 FFC8                <1>     dec eax ;Convert to 0 based number
  1477                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  1478 00002B4A E8640C0000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  1479 00002B4F 488D1525DBFFFF      <1>     lea rdx, volFcb
  1480 00002B56 FFC0                <1>     inc eax ;Get 1 based drive number
  1481 00002B58 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1482 00002B5A 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1483 00002B5D B800110000          <1>     mov eax, 1100h ;Find first FCB
  1484 00002B62 CD21                <1>     int 21h
  1485 00002B64 50                  <1>     push rax
  1486                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  1487 00002B65 488D15D5DDFFFF      <1>     lea rdx, crlf
  1488 00002B6C B409                <1>     mov ah, 09h
  1489 00002B6E CD21                <1>     int 21h
  1490 00002B70 488D154FE0FFFF      <1>     lea rdx, volMes
  1491 00002B77 B409                <1>     mov ah, 09h
  1492 00002B79 CD21                <1>     int 21h
  1493 00002B7B 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  1494 00002B7D 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  1495 00002B80 B402                <1>     mov ah, 02h
  1496 00002B82 CD21                <1>     int 21h
  1497 00002B84 58                  <1>     pop rax
  1498 00002B85 84C0                <1>     test al, al ;If this is zero, the call succeeded
  1499 00002B87 7409                <1>     jz .volIDOk
  1500 00002B89 488D154DE0FFFF      <1>     lea rdx, volNo
  1501 00002B90 EB19                <1>     jmp short .volEndPrint
  1502                              <1> .volIDOk:
  1503 00002B92 488D153FE0FFFF      <1>     lea rdx, volOk
  1504 00002B99 B409                <1>     mov ah, 09h
  1505 00002B9B CD21                <1>     int 21h
  1506 00002B9D C605D6D5FFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  1507 00002BA4 488D15C4D5FFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  1508                              <1> .volEndPrint:
  1509 00002BAB B409                <1>     mov ah, 09h
  1510 00002BAD CD21                <1>     int 21h
  1511 00002BAF 488D158BDDFFFF      <1>     lea rdx, crlf
  1512 00002BB6 B409                <1>     mov ah, 09h
  1513 00002BB8 CD21                <1>     int 21h
  1514                              <1>     return
    13                              <2> %%_ret:
    14 00002BBA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1515                              <1> 
  1516                              <1> version:
  1517 00002BBB 488D157FDDFFFF      <1>     lea rdx, crlf
  1518 00002BC2 B409                <1>     mov ah, 09h
  1519 00002BC4 CD21                <1>     int 21h
  1520 00002BC6 488D15E7DFFFFF      <1>     lea rdx, dosVer
  1521 00002BCD B409                <1>     mov ah, 09h
  1522 00002BCF CD21                <1>     int 21h
  1523 00002BD1 E80C000000          <1>     call .printVersionNumber
  1524 00002BD6 488D1564DDFFFF      <1>     lea rdx, crlf
  1525 00002BDD B409                <1>     mov ah, 09h
  1526 00002BDF CD21                <1>     int 21h
  1527                              <1>     return
    13                              <2> %%_ret:
    14 00002BE1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1528                              <1> .printVersionNumber:
  1529 00002BE2 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1530 00002BE4 CD21                <1>     int 21h
  1531 00002BE6 50                  <1>     push rax
  1532 00002BE7 0FB6C0              <1>     movzx eax, al
  1533 00002BEA E8110B0000          <1>     call printDecimalWord
  1534 00002BEF B22E                <1>     mov dl, "."
  1535 00002BF1 B402                <1>     mov ah, 02h
  1536 00002BF3 CD21                <1>     int 21h
  1537 00002BF5 58                  <1>     pop rax
  1538 00002BF6 0FB6C4              <1>     movzx eax, ah
  1539 00002BF9 E8020B0000          <1>     call printDecimalWord
  1540                              <1>     return
    13                              <2> %%_ret:
    14 00002BFE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1541                              <1> 
  1542                              <1> 
  1543                              <1> memory:
  1544 00002BFF 488B1D19D4FFFF      <1>     mov rbx, qword [sysVars]
  1545 00002C06 4885DB              <1>     test rbx, rbx
  1546 00002C09 7510                <1>     jnz .sysvarsOK
  1547 00002C0B 488D1585E2FFFF      <1>     lea rdx, memBad0
  1548 00002C12 B409                <1>     mov ah, 09h
  1549 00002C14 CD21                <1>     int 21h
  1550 00002C16 E9880B0000          <1>     jmp freezePC.altEP
  1551                              <1> .sysvarsOK:
  1552                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1553                              <1>     ; and rcx to store Application memory
  1554 00002C1B 31F6                <1>     xor esi, esi
  1555 00002C1D 31FF                <1>     xor edi, edi
  1556 00002C1F 31ED                <1>     xor ebp, ebp
  1557 00002C21 31C9                <1>     xor ecx, ecx
  1558 00002C23 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1559 00002C27 488B1B              <1>     mov rbx, qword [rbx]
  1560                              <1> .memLp:
  1561 00002C2A 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1562 00002C2D 7409                <1>     je .validMCB
  1563 00002C2F 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1564 00002C32 0F8501010000        <1>     jne .badMCBFound
  1565                              <1> .validMCB:
  1566 00002C38 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1567 00002C3B 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1568 00002C3F 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1569 00002C47 7505                <1>     jne .notDOS
  1570 00002C49 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1571 00002C4C EB21                <1>     jmp short .gotoNext
  1572                              <1> .notDOS:
  1573 00002C4E 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1574 00002C56 7505                <1>     jne .notFree
  1575 00002C58 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1576 00002C5B EB12                <1>     jmp short .gotoNext
  1577                              <1> .notFree:
  1578 00002C5D 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1579 00002C65 7505                <1>     jne .notHole
  1580 00002C67 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1581 00002C6A EB03                <1>     jmp short .gotoNext
  1582                              <1> .notHole:
  1583 00002C6C 4801C1              <1>     add rcx, rax    ;Add to Application count
  1584                              <1> .gotoNext:
  1585 00002C6F 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1586 00002C72 7407                <1>     je .endOfWalk
  1587 00002C74 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1588 00002C79 EBAF                <1>     jmp short .memLp
  1589                              <1> .endOfWalk:
  1590                              <1>     
  1591 00002C7B 488D1576E1FFFF      <1>     lea rdx, memDOS
  1592 00002C82 B409                <1>     mov ah, 09h
  1593 00002C84 CD21                <1>     int 21h
  1594 00002C86 4889F0              <1>     mov rax, rsi
  1595 00002C89 E89D000000          <1>     call .mcbPrintAmount
  1596 00002C8E 488D15FBE1FFFF      <1>     lea rdx, memByte
  1597 00002C95 B409                <1>     mov ah, 09h
  1598 00002C97 CD21                <1>     int 21h
  1599                              <1> 
  1600 00002C99 4885ED              <1>     test rbp, rbp
  1601 00002C9C 741E                <1>     jz .skipHole
  1602 00002C9E 488D159FE1FFFF      <1>     lea rdx, memHole
  1603 00002CA5 B409                <1>     mov ah, 09h
  1604 00002CA7 CD21                <1>     int 21h
  1605 00002CA9 4889E8              <1>     mov rax, rbp
  1606 00002CAC E87A000000          <1>     call .mcbPrintAmount
  1607 00002CB1 488D15D8E1FFFF      <1>     lea rdx, memByte
  1608 00002CB8 B409                <1>     mov ah, 09h
  1609 00002CBA CD21                <1>     int 21h
  1610                              <1> .skipHole:
  1611                              <1> 
  1612 00002CBC 488D155BE1FFFF      <1>     lea rdx, memApp
  1613 00002CC3 B409                <1>     mov ah, 09h
  1614 00002CC5 CD21                <1>     int 21h
  1615 00002CC7 4889C8              <1>     mov rax, rcx
  1616 00002CCA E85C000000          <1>     call .mcbPrintAmount
  1617 00002CCF 488D15BAE1FFFF      <1>     lea rdx, memByte
  1618 00002CD6 B409                <1>     mov ah, 09h
  1619 00002CD8 CD21                <1>     int 21h
  1620                              <1> 
  1621 00002CDA 488D1589E1FFFF      <1>     lea rdx, memFree
  1622 00002CE1 B409                <1>     mov ah, 09h
  1623 00002CE3 CD21                <1>     int 21h
  1624 00002CE5 4889F8              <1>     mov rax, rdi
  1625 00002CE8 E83E000000          <1>     call .mcbPrintAmount
  1626 00002CED 488D159CE1FFFF      <1>     lea rdx, memByte
  1627 00002CF4 B409                <1>     mov ah, 09h
  1628 00002CF6 CD21                <1>     int 21h
  1629                              <1> 
  1630 00002CF8 488D15D3E0FFFF      <1>     lea rdx, memSys
  1631 00002CFF B409                <1>     mov ah, 09h
  1632 00002D01 CD21                <1>     int 21h
  1633 00002D03 4889F0              <1>     mov rax, rsi
  1634 00002D06 4801F8              <1>     add rax, rdi
  1635 00002D09 4801C8              <1>     add rax, rcx
  1636 00002D0C 4801E8              <1>     add rax, rbp
  1637 00002D0F E817000000          <1>     call .mcbPrintAmount
  1638 00002D14 488D1575E1FFFF      <1>     lea rdx, memByte
  1639 00002D1B B409                <1>     mov ah, 09h
  1640 00002D1D CD21                <1>     int 21h
  1641                              <1> 
  1642 00002D1F 488D151BDCFFFF      <1>     lea rdx, crlf
  1643 00002D26 B409                <1>     mov ah, 09h
  1644 00002D28 CD21                <1>     int 21h
  1645                              <1>     return
    13                              <2> %%_ret:
    14 00002D2A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1646                              <1> 
  1647                              <1> .mcbPrintAmount:
  1648 00002D2B 51                  <1>     push rcx
  1649 00002D2C 56                  <1>     push rsi
  1650 00002D2D 57                  <1>     push rdi
  1651 00002D2E 55                  <1>     push rbp
  1652 00002D2F E8CC090000          <1>     call printDecimalWord
  1653 00002D34 5D                  <1>     pop rbp
  1654 00002D35 5F                  <1>     pop rdi
  1655 00002D36 5E                  <1>     pop rsi
  1656 00002D37 59                  <1>     pop rcx
  1657                              <1>     return
    13                              <2> %%_ret:
    14 00002D38 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1658                              <1> .badMCBFound:
  1659 00002D39 488D1597E1FFFF      <1>     lea rdx, memBad2
  1660 00002D40 B409                <1>     mov ah, 09h
  1661 00002D42 CD21                <1>     int 21h
  1662 00002D44 E95A0A0000          <1>     jmp freezePC.altEP
  1663                              <1> 
  1664                              <1> type:
  1665 00002D49 F6055AD3FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1666 00002D50 0F840CECFFFF        <1>     jz badArgError
  1667 00002D56 F60550D3FFFFFF      <1>     test byte [arg2Flg], -1
  1668 00002D5D 0F85FFEBFFFF        <1>     jnz badArgError         ;If this set, error
  1669 00002D63 4C8B05A5D2FFFF      <1>     mov r8, [pspPtr]
  1670 00002D6A 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1671 00002D71 0FB60533D3FFFF      <1>     movzx eax, byte [arg1Off]
  1672 00002D78 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1673 00002D7B 803E0D              <1>     cmp byte [rsi], CR
  1674 00002D7E 0F84DEEBFFFF        <1>     je badArgError
  1675 00002D84 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1676 00002D88 750F                <1>     jne .noDrive
  1677 00002D8A 0FB6051BD3FFFF      <1>     movzx eax, byte [arg1FCBret]
  1678 00002D91 3CFF                <1>     cmp al, -1
  1679 00002D93 0F84C0EBFFFF        <1>     je badDriveError
  1680                              <1> .noDrive:
  1681                              <1>     ;Now we open the provided file
  1682 00002D99 E829090000          <1>     call buildCommandPath
  1683 00002D9E 488D153CD7FFFF      <1>     lea rdx, searchSpec
  1684 00002DA5 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1685 00002DAA CD21                <1>     int 21h
  1686 00002DAC 0F82B9EBFFFF        <1>     jc badFileError
  1687 00002DB2 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1688 00002DB9 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1689                              <1> .lp:
  1690 00002DBC B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1691 00002DC1 B43F                <1>     mov ah, 3Fh ;Read handle
  1692 00002DC3 CD21                <1>     int 21h
  1693 00002DC5 89C1                <1>     mov ecx, eax
  1694 00002DC7 67E317              <1>     jecxz .exit
  1695 00002DCA 53                  <1>     push rbx    ;Save the original in handle
  1696 00002DCB BB01000000          <1>     mov ebx, 1  ;STDOUT
  1697 00002DD0 B440                <1>     mov ah, 40h
  1698 00002DD2 CD21                <1>     int 21h
  1699 00002DD4 5B                  <1>     pop rbx ;Get back the original read handle
  1700 00002DD5 720F                <1>     jc .exitBad
  1701 00002DD7 39C8                <1>     cmp eax, ecx
  1702 00002DD9 74E1                <1>     je .lp
  1703 00002DDB FFC9                <1>     dec ecx ;One less for a ^Z
  1704 00002DDD 39C8                <1>     cmp eax, ecx
  1705 00002DDF 7505                <1>     jne .exitBad
  1706                              <1> .exit:
  1707 00002DE1 B43E                <1>     mov ah, 3Eh ;Close handle
  1708 00002DE3 CD21                <1>     int 21h
  1709                              <1>     return
    13                              <2> %%_ret:
    14 00002DE5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1710                              <1> .exitBad:
  1711                              <1>     ;Print a disk error message... use a table to build the message but for
  1712                              <1>     ; now, just exit
  1713                              <1>     ;If it is a char device, don't print a error
  1714 00002DE6 EBF9                <1>     jmp short .exit
  1715                              <1> 
  1716                              <1> exit:
  1717 00002DE8 F6053ED2FFFFFF      <1>     test byte [permaSwitch], -1
  1718                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002DEF 75(E5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1719 00002DF1 488B051FD2FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1720 00002DF8 483DFFFFFFFF        <1>     cmp rax, -1
  1721                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002DFE 74(E5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1722 00002E00 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1723                              <1> 
  1724 00002E04 488B1523D2FFFF      <1>     mov rdx, qword [parentInt22]
  1725 00002E0B 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  1726 00002E0F B822250000          <1>     mov eax, 2522h
  1727 00002E14 CD21                <1>     int 21h
  1728                              <1> 
  1729 00002E16 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1730 00002E1B CD21                <1>     int 21h
  1731                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00002E1D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1732                              <1> 
  1733                              <1> launchChild:
  1734                              <1>     ;We execute an external command here.
  1735                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  1736                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  1737                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  1738                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  1739                              <1>     ;We know the drive we are on is valid so no need to double check that!
  1740 00002E1E E890090000          <1>     call setDTA         
  1741                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
  1742 00002E23 488D3D0ED5FFFF      <1>     lea rdi, cmdPathSpec
  1743 00002E2A 4889FE              <1>     mov rsi, rdi
  1744 00002E2D B811120000          <1>     mov eax, 1211h  ;Normalise this path first
  1745 00002E32 CD2F                <1>     int 2fh
  1746 00002E34 E8D1070000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  1747 00002E39 4889FE              <1>     mov rsi, rdi    ;Source here
  1748 00002E3C 488D3D14D3FFFF      <1>     lea rdi, cmdFcb
  1749 00002E43 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  1750 00002E48 CD21                <1>     int 21h
  1751 00002E4A 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  1752 00002E4C 0F854BEBFFFF        <1>     jnz badCmdError
  1753 00002E52 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  1754                              <1> .pathLoop:
  1755 00002E55 488D3504D3FFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  1756 00002E5C 488D3DEDE0FFFF      <1>     lea rdi, extStr
  1757 00002E63 BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  1758                              <1> .extLp:
  1759 00002E68 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  1760 00002E69 B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  1761 00002E6E F3A6                <1>     rep cmpsb   ;Compare the two strings
  1762 00002E70 5E                  <1>     pop rsi
  1763 00002E71 85C9                <1>     test ecx, ecx
  1764 00002E73 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  1765 00002E75 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  1766 00002E78 FFCA                <1>     dec edx         ;Else one less extension type to check
  1767 00002E7A 75EC                <1>     jnz .extLp
  1768                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  1769                              <1>     ;If not, error.
  1770 00002E7C B903000000          <1>     mov ecx, 3
  1771 00002E81 4889F7              <1>     mov rdi, rsi
  1772 00002E84 B020                <1>     mov al, SPC
  1773 00002E86 F3AE                <1>     rep scasb   
  1774 00002E88 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  1775 00002E8A 0F850DEBFFFF        <1>     jnz badCmdError    ;If not, error!
  1776                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  1777 00002E90 488D35B9E0FFFF      <1>     lea rsi, extStr
  1778 00002E97 BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  1779                              <1> .extSrchLp:
  1780 00002E9C 488D3DBDD2FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1781 00002EA3 B903000000          <1>     mov ecx, 3
  1782 00002EA8 F3A4                <1>     rep movsb   ;Copy the extension over!
  1783 00002EAA E867010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  1784 00002EAF 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  1785 00002EB1 FFCB                <1>     dec ebx                 ;Decrement extension counter
  1786 00002EB3 75E7                <1>     jnz .extSrchLp
  1787                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  1788                              <1> ; we start prepending path componants and trying again. To do this, we reset
  1789                              <1> ; by setting the fcb extension back to all spaces.
  1790 00002EB5 488D3DA4D2FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1791 00002EBC B903000000          <1>     mov ecx, 3
  1792 00002EC1 B020                <1>     mov al, SPC
  1793 00002EC3 F3AA                <1>     rep stosb   ;Store back the empty extension!
  1794 00002EC5 EB50                <1>     jmp short .pathHandle
  1795                              <1> .extFnd:
  1796                              <1> ;Here if the file had the right extension.
  1797 00002EC7 E84A010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  1798 00002ECC 7249                <1>     jc .pathHandle
  1799                              <1> .extSrchFnd:
  1800                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  1801                              <1> ; a BAT. If it is, separate handling!
  1802 00002ECE 803D8BD2FFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  1803 00002ED5 0F8407010000        <1>     je .batLaunch
  1804 00002EDB 488D1DB0D2FFFF      <1>     lea rbx, launchBlock
  1805 00002EE2 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  1806 00002EE6 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  1807 00002EE9 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  1808 00002EF0 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1809 00002EF4 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1810 00002EF8 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1811 00002EFC 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1812 00002F00 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1813 00002F04 488D152DD4FFFF      <1>     lea rdx, cmdPathSpec
  1814 00002F0B B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1815 00002F10 CD21                <1>     int 21h
  1816 00002F12 E986EAFFFF          <1>     jmp badCmdError    ;If something goes wrong, error out
  1817                              <1> .pathHandle:        
  1818                              <1> ;First check if rbp is null. If it is, its a first time entry. 
  1819                              <1> ;al has error code!
  1820 00002F17 4885ED              <1>     test rbp, rbp
  1821 00002F1A 0F859E000000        <1>     jnz .pathReentry
  1822                              <1> ;Now check if the command we recieved included an absolute path.
  1823                              <1> ;If so, we don't do path substitution and just fail at this point
  1824 00002F20 488D3511D4FFFF      <1>     lea rsi, cmdPathSpec
  1825 00002F27 66AD                <1>     lodsw   ;Get the first two chars
  1826 00002F29 3A05FCD0FFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  1827 00002F2F 0F8468EAFFFF        <1>     je badCmdError  ;Therefore, exit bad!
  1828 00002F35 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  1829 00002F37 7412                <1>     je .pathGetEnv
  1830 00002F39 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  1831 00002F3C 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  1832 00002F3E AC                  <1>     lodsb   ;Get the third char
  1833 00002F3F 3A05E6D0FFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  1834 00002F45 0F8452EAFFFF        <1>     je badCmdError  ;Therefore, exit bad!
  1835                              <1> .pathGetEnv:
  1836                              <1> ;Now get a pointer to the environment and search for PATH=
  1837                              <1> ;We only take the final portion of the path and add it to each path componant
  1838                              <1> ;This agrees with DOS 3.3
  1839 00002F4B E899080000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  1840 00002F50 0F8447EAFFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  1841                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  1842                              <1>     ;Now we know we dont have to keep track of chars!!
  1843 00002F56 488D3D17E0FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  1844 00002F5D E8E8080000          <1>     call searchForEnvVar
  1845 00002F62 0F8235EAFFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
  1846 00002F68 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
  1847 00002F6B 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
  1848                              <1> .pathRejoin:
  1849 00002F72 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  1850 00002F75 0F8422EAFFFF        <1>     je badCmdError      ;Empty or no more path? Error!
  1851 00002F7B 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
  1852 00002F7E 488D3D5CD5FFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  1853                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
  1854                              <1>     ; MUST CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
  1855                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
  1856 00002F85 E8E4060000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
  1857 00002F8A 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  1858 00002F8D 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  1859 00002F90 48FFCF              <1>     dec rdi ;Point to the null terminator
  1860 00002F93 8A0592D0FFFF        <1>     mov al, byte [pathSep]
  1861 00002F99 AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  1862 00002F9A 488D35B7D1FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  1863 00002FA1 E888060000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  1864 00002FA6 488D3534D5FFFF      <1>     lea rsi, searchSpec 
  1865 00002FAD 488D3D84D3FFFF      <1>     lea rdi, cmdPathSpec
  1866 00002FB4 E864050000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  1867 00002FB9 E997FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  1868                              <1> .pathReentry:
  1869 00002FBE 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  1870 00002FC2 0F84D5E9FFFF        <1>     je badCmdError
  1871 00002FC8 3C0F                <1>     cmp al, errBadDrv
  1872 00002FCA 750E                <1>     jne .pathDrvOk
  1873 00002FCC 488D15CADCFFFF      <1>     lea rdx, badDrvSrch ;Print the drive was invalid!
  1874 00002FD3 B800090000          <1>     mov eax, 0900h
  1875 00002FD8 CD21                <1>     int 21h
  1876                              <1> .pathDrvOk:
  1877 00002FDA 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  1878 00002FDD 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  1879 00002FE0 EB90                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  1880                              <1> 
  1881                              <1> .batLaunch:
  1882 00002FE2 488D1508000000      <1>     lea rdx, .batMsg
  1883 00002FE9 B800090000          <1>     mov eax, 0900h
  1884 00002FEE CD21                <1>     int 21h
  1885                              <1>     return
    13                              <2> %%_ret:
    14 00002FF0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1886 00002FF1 424154434820707265- <1> .batMsg db "BATCH preprocessor not implemented",CR,LF,"$"
  1886 00002FFA 70726F636573736F72- <1>
  1886 00003003 206E6F7420696D706C- <1>
  1886 0000300C 656D656E7465640D0A- <1>
  1886 00003015 24                  <1>
  1887                              <1> 
  1888                              <1> .prepAndSearch:
  1889                              <1> ;Copies over the name and extension in UC to the last componant of the 
  1890                              <1> ;cmdPathSpec and null terminates. 
  1891                              <1> ;Input: cmdFcb name + ext setup. 
  1892                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  1893                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
  1894 00003016 51                  <1>     push rcx
  1895 00003017 56                  <1>     push rsi
  1896 00003018 57                  <1>     push rdi
  1897 00003019 488D3D18D3FFFF      <1>     lea rdi, cmdPathSpec 
  1898 00003020 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  1899 00003023 E8E2050000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  1900 00003028 488D3529D1FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  1901 0000302F E8FA050000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  1902 00003034 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1903 00003039 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  1904 0000303B CD21                <1>     int 21h
  1905 0000303D 5F                  <1>     pop rdi
  1906 0000303E 5E                  <1>     pop rsi
  1907 0000303F 59                  <1>     pop rcx
  1908                              <1>     return
    13                              <2> %%_ret:
    14 00003040 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1909                              <1> 
  1910                              <1> set:
  1911 00003041 F60562D0FFFFFF      <1>     test byte [arg1Flg], -1
  1912 00003048 7539                <1>     jnz .editEnv
  1913                              <1>     ;Here we just print the environment.
  1914 0000304A E89A070000          <1>     call checkEnvGoodAndGet 
  1915 0000304F 0F84E0E8FFFF        <1>     jz badEnvSpaceError
  1916                              <1>     ;We know this is a good env so keep going! env ptr in rsi
  1917 00003055 4889F7              <1>     mov rdi, rsi
  1918 00003058 4889F2              <1>     mov rdx, rsi
  1919                              <1> .findLp:
  1920 0000305B B9FFFFFFFF          <1>     mov ecx, -1
  1921 00003060 31C0                <1>     xor eax, eax
  1922                              <1> .scanLp:
  1923 00003062 F2AE                <1>     repne scasb
  1924 00003064 75FC                <1>     jne .scanLp
  1925 00003066 F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
  1926                              <1>     ;Else, we now print this environment variable and CRLF it
  1927                              <1>     ;rdx points to the start of the string aleady
  1928                              <1>     ;ecx has the bytes to print
  1929 00003068 BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
  1930 0000306D B800400000          <1>     mov eax, 4000h  ;Print to handle
  1931 00003072 CD21                <1>     int 21h
  1932 00003074 E8C6010000          <1>     call printCRLF
  1933 00003079 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
  1934                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000307C 74(40)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1935 0000307E 4889FA              <1>     mov rdx, rdi   
  1936 00003081 EBD8                <1>     jmp short .findLp
  1937                              <1> .editEnv:
  1938 00003083 E861070000          <1>     call checkEnvGoodAndGet
  1939 00003088 0F84A7E8FFFF        <1>     jz badEnvSpaceError
  1940 0000308E 0FB60516D0FFFF      <1>     movzx eax, byte [arg1Off]
  1941 00003095 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1942 0000309C 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
  1943                              <1> .altEp:
  1944 0000309F 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
  1945 000030A2 B00D                <1>     mov al, CR              ;Search for the CR
  1946 000030A4 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
  1947 000030AC 89CB                <1>     mov ebx, ecx            ;Save this count 
  1948 000030AE 53                  <1>     push rbx                ;Save this count on the stack too!
  1949 000030AF F2AE                <1>     repne scasb             ;Now get the length of this env string
  1950 000030B1 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
  1951 000030B3 66891D96D7FFFF      <1>     mov word [envVarSz], bx ;Store the count
  1952 000030BA 59                  <1>     pop rcx                 ;Get the char count back!
  1953 000030BB 89CB                <1>     mov ebx, ecx            
  1954 000030BD 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
  1955 000030C0 B03D                <1>     mov al, "="             ;Scan for an equals sign
  1956 000030C2 F2AE                <1>     repne scasb
  1957 000030C4 0F8562E8FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
  1958 000030CA 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
  1959 000030CC 66891D7FD7FFFF      <1>     mov word [envVarNamSz], bx
  1960 000030D3 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
  1961 000030D6 7477                <1>     je .delEnvVar           ;Free the envvar and return
  1962 000030D8 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
  1963 000030D9 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  1964 000030DC E869070000          <1>     call searchForEnvVar    ;Look for the environment variable
  1965 000030E1 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
  1966 000030E3 E890070000          <1>     call envFree            ;Free the var in rsi
  1967                              <1> .editNewEnv:
  1968 000030E8 E8C4070000          <1>     call getFreeSpace       ;Get the free space in env in ecx
  1969 000030ED E8E4070000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
  1970 000030F2 5E                  <1>     pop rsi                 ;Get back the ptr to the string
  1971 000030F3 31C0                <1>     xor eax, eax            ;Prepare null length!
  1972 000030F5 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
  1973 000030FB 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
  1974 000030FE 720B                <1>     jb .reallocTry          ;Try to reallocate!
  1975 00003100 FFC9                <1>     dec ecx                 ;Save a byte for end magic null
  1976 00003102 663B0D47D7FFFF      <1>     cmp cx, word [envVarSz] ;Do we have enough space?
  1977 00003109 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
  1978                              <1> .reallocTry:
  1979                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
  1980                              <1>     ; we proceed with the environment size.
  1981 0000310B E8DB070000          <1>     call growEnvBlock   ;Attempt to grow the environment
  1982 00003110 7319                <1>     jnc .reallocOk
  1983 00003112 0F841DE8FFFF        <1>     jz badEnvSpaceError    ;Max environment space
  1984                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
  1985                              <1>     ; partially the variable into the env. If so we do that. If the name
  1986                              <1>     ; cannot fit, we don't bother
  1987                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
  1988 00003118 663B0D33D7FFFF      <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
  1989                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000311F 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00003121 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1990 00003122 E80EE8FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
  1991 00003127 FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
  1992 00003129 EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
  1993                              <1> .reallocOk:
  1994                              <1>     ;Here we have all the space to just copy the full path
  1995 0000312B 0FB70D1ED7FFFF      <1>     movzx ecx, word [envVarSz]
  1996                              <1> .nameCp:
  1997                              <1> ;Now copy over the env var, ecx = #ofchars to copy
  1998                              <1> ;Always enough memory for name= here
  1999 00003132 AC                  <1>     lodsb
  2000 00003133 E808040000          <1>     call ucChar
  2001 00003138 AA                  <1>     stosb
  2002 00003139 66FFC9              <1>     dec cx      ;Always decrement this count
  2003 0000313C 3C3D                <1>     cmp al, "="
  2004 0000313E 75F2                <1>     jne .nameCp
  2005                              <1> .exitNameCp:
  2006 00003140 AC                  <1>     lodsb
  2007 00003141 3C0D                <1>     cmp al, CR
  2008 00003143 7405                <1>     je .exitCp
  2009 00003145 AA                  <1>     stosb
  2010 00003146 FFC9                <1>     dec ecx
  2011 00003148 75F6                <1>     jnz .exitNameCp
  2012                              <1> .exitCp:
  2013 0000314A 31C0                <1>     xor eax, eax
  2014 0000314C 66AB                <1>     stosw   ;Store the final null word
  2015                              <1>     return
    13                              <2> %%_ret:
    14 0000314E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2016                              <1> .delEnvVar:
  2017                              <1>     ;rsi -> Start of the envvar name in user buffer
  2018 0000314F 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2019 00003152 E8F3060000          <1>     call searchForEnvVar    ;Look for the environment variable
  2020 00003157 7205                <1>     jc .delEnvVarSkip
  2021 00003159 E81A070000          <1>     call envFree    ;Free the env var at rsi
  2022                              <1> .delEnvVarSkip:
  2023 0000315E F8                  <1>     clc             ;Clear CF if the var doesnt exist
  2024                              <1>     return
    13                              <2> %%_ret:
    14 0000315F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2025                              <1> 
  2026                              <1> pathEdit:
  2027                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
  2028                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
  2029                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
  2030                              <1> ; end there. Error with too many arguments error!
  2031                              <1> ;If after the equals sign there is nothing, we just print the path!
  2032                              <1> ;Gotta process the command line ourselves first
  2033 00003160 E884060000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2034 00003165 0F84CAE7FFFF        <1>     jz badEnvSpaceError
  2035                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2036 0000316B 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2037 00003172 E8AD000000          <1>     call .skipPathDelimiters
  2038 00003177 3C0D                <1>     cmp al, CR
  2039 00003179 7466                <1>     je .printPath
  2040                              <1> ;Else use the set command to setup the path in the searchSpec.
  2041 0000317B 56                  <1>     push rsi    ;Save the first char of the command line string
  2042 0000317C 488D35F1DDFFFF      <1>     lea rsi, pathEVar
  2043 00003183 488D3D57D3FFFF      <1>     lea rdi, searchSpec
  2044 0000318A E88E030000          <1>     call strcpy
  2045 0000318F 48FFCF              <1>     dec rdi     ;Point to the terminating null
  2046 00003192 5E                  <1>     pop rsi     ;Get back the first char of the pathstring
  2047 00003193 31C9                <1>     xor ecx, ecx    ;Make a count of chars
  2048                              <1> .cpLp:
  2049 00003195 AC                  <1>     lodsb
  2050 00003196 3C0D                <1>     cmp al, CR
  2051 00003198 7411                <1>     je .cpLpExit
  2052 0000319A E891000000          <1>     call .isALPathDelimiter ;Any path delims now are exit conditions!
  2053 0000319F 740A                <1>     je .cpLpExit
  2054 000031A1 E89A030000          <1>     call ucChar ;Uppercase the char
  2055 000031A6 AA                  <1>     stosb       ;Store it
  2056 000031A7 FFC1                <1>     inc ecx     ;Inc the count, CR not inclusive!
  2057 000031A9 EBEA                <1>     jmp short .cpLp
  2058                              <1> .cpLpExit:
  2059                              <1>     ;Remove trailing semicolons
  2060 000031AB 807FFF3B            <1>     cmp byte [rdi - 1], ";" ;Check back a char
  2061 000031AF 7507                <1>     jne .cpLpNoIntervene
  2062 000031B1 FFC9                <1>     dec ecx     ;Reduce the count by one
  2063 000031B3 48FFCF              <1>     dec rdi     ;Go back a char
  2064 000031B6 EBF3                <1>     jmp short .cpLpExit ;Keep removing
  2065                              <1> .cpLpNoIntervene:
  2066 000031B8 B00D                <1>     mov al, CR  ;Now we store the terminator!
  2067 000031BA AA                  <1>     stosb       ;Store it!
  2068 000031BB 81C105000000        <1>     add ecx, 5  ;PATH= is 5 chars
  2069 000031C1 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count
  2070 000031C8 FFC1                <1>     inc ecx     ;Add the CR for copying over
  2071 000031CA 488D3510D3FFFF      <1>     lea rsi, searchSpec
  2072 000031D1 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2073 000031D8 57                  <1>     push rdi
  2074 000031D9 F3A4                <1>     rep movsb
  2075 000031DB 5E                  <1>     pop rsi         ;Get the ptr to the cmdline in rsi
  2076 000031DC E9BEFEFFFF          <1>     jmp set.altEp   ;We've now set the string up, lets go!
  2077                              <1> .printPath:
  2078 000031E1 488D3D8CDDFFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
  2079 000031E8 E85D060000          <1>     call searchForEnvVar    ;Returns ptr to env var in rsi
  2080 000031ED 7221                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
  2081 000031EF 4889F7              <1>     mov rdi, rsi        
  2082 000031F2 E83F030000          <1>     call strlen         ;Get the length of the path in rdi
  2083 000031F7 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
  2084 000031FD 7411                <1>     je .noPathPrnt      ;Print no path!
  2085 000031FF FFC9                <1>     dec ecx             ;Drop the terminating null from the count
  2086 00003201 4889FA              <1>     mov rdx, rdi        ;Set path ptr for printing
  2087 00003204 BB01000000          <1>     mov ebx, 1          ;STDOUT
  2088 00003209 B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
  2089 0000320E EB0C                <1>     jmp short .pathExit
  2090                              <1> .noPathPrnt:
  2091 00003210 488D154CDAFFFF      <1>     lea rdx, noPath
  2092 00003217 B800090000          <1>     mov eax, 0900h
  2093                              <1> .pathExit:
  2094 0000321C CD21                <1>     int 21h
  2095 0000321E E81C000000          <1>     call printCRLF      ;Print a crlf at the end
  2096                              <1>     return
    13                              <2> %%_ret:
    14 00003223 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2097                              <1> 
  2098                              <1> .skipPathDelimiters:
  2099                              <1> ;Input: rsi -> Start of string to parse
  2100                              <1> ;Output: rsi -> First non-delimiter char of string
  2101                              <1> ;        al = First non delim char
  2102 00003224 AC                  <1>     lodsb
  2103 00003225 E806000000          <1>     call .isALPathDelimiter
  2104 0000322A 74F8                <1>     je .skipPathDelimiters
  2105 0000322C 48FFCE              <1>     dec rsi
  2106                              <1>     return
    13                              <2> %%_ret:
    14 0000322F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2107                              <1> .isALPathDelimiter:
  2108                              <1> ;Same as before without semicolon
  2109 00003230 3C20                <1>     cmp al, SPC
  2110                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003232 74(2F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2111 00003234 3C09                <1>     cmp al, TAB
  2112                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003236 74(2F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2113 00003238 3C2C                <1>     cmp al, ","
  2114                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000323A 74(2F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2115 0000323C 3C3D                <1>     cmp al, "="
  2116                              <1>     return
    13                              <2> %%_ret:
    14 0000323E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printCRLF:
     4 0000323F 488D15FBD6FFFF      <1>     lea rdx, crlf
     5                              <1> printString:
     6 00003246 B800090000          <1>     mov eax, 0900h  ;Print string
     7 0000324B CD21                <1>     int 21h
     8                              <1>     return
    13                              <2> %%_ret:
    14 0000324D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> printDate:
    10                              <1> ;Input: eax = Packed Date
    11                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    12                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    13                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    14                              <1> ;       ebx = 0 => Print two digit year
    15                              <1> ;       ebx = 1 => Print four digit year
    16 0000324E 53                  <1>     push rbx
    17 0000324F 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    18 00003251 803DDECDFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    19 00003258 7240                <1>     jb .usDate
    20 0000325A 777C                <1>     ja .jpnDate
    21                              <1> ;European: DD/MM/YY
    22 0000325C 251F000000          <1>     and eax, 1Fh    ;Save day bits
    23 00003261 E8B0000000          <1>     call .printFirst
    24 00003266 8A15D5CDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    25 0000326C B402                <1>     mov ah, 02h
    26 0000326E CD21                <1>     int 21h
    27                              <1> 
    28 00003270 89C8                <1>     mov eax, ecx
    29 00003272 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    30 00003277 C1E805              <1>     shr eax, 5
    31 0000327A E8B3000000          <1>     call .printSecond
    32                              <1> 
    33 0000327F 8A15BCCDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    34 00003285 B402                <1>     mov ah, 02h
    35 00003287 CD21                <1>     int 21h
    36                              <1> 
    37 00003289 89C8                <1>     mov eax, ecx
    38 0000328B 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    39 00003290 C1E809              <1>     shr eax, 9
    40 00003293 5B                  <1>     pop rbx ;Get the year signature back
    41 00003294 E8A9000000          <1>     call .printYear
    42                              <1>     return
    13                              <2> %%_ret:
    14 00003299 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    43                              <1> .usDate:
    44                              <1> ;US: MM/DD/YY
    45 0000329A 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    46 0000329F C1E805              <1>     shr eax, 5
    47 000032A2 E86F000000          <1>     call .printFirst
    48                              <1> 
    49 000032A7 8A1594CDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    50 000032AD B402                <1>     mov ah, 02h
    51 000032AF CD21                <1>     int 21h
    52                              <1> 
    53 000032B1 89C8                <1>     mov eax, ecx
    54 000032B3 251F000000          <1>     and eax, 1Fh    ;Save day bits
    55 000032B8 E875000000          <1>     call .printSecond
    56                              <1> 
    57 000032BD 8A157ECDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    58 000032C3 B402                <1>     mov ah, 02h
    59 000032C5 CD21                <1>     int 21h
    60                              <1> 
    61 000032C7 89C8                <1>     mov eax, ecx
    62 000032C9 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    63 000032CE C1E809              <1>     shr eax, 9
    64 000032D1 5B                  <1>     pop rbx ;Get the year signature back
    65 000032D2 E86B000000          <1>     call .printYear
    66                              <1>     return
    13                              <2> %%_ret:
    14 000032D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    67                              <1> .jpnDate:
    68                              <1> ;Japan: YY/MM/DD
    69 000032D8 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    70 000032DD C1E809              <1>     shr eax, 9
    71 000032E0 5B                  <1>     pop rbx ;Get the year signature back
    72 000032E1 E85C000000          <1>     call .printYear
    73                              <1> 
    74 000032E6 8A1555CDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    75 000032EC B402                <1>     mov ah, 02h
    76 000032EE CD21                <1>     int 21h
    77                              <1> 
    78 000032F0 89C8                <1>     mov eax, ecx
    79 000032F2 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    80 000032F7 C1E805              <1>     shr eax, 5
    81 000032FA E833000000          <1>     call .printSecond
    82                              <1> 
    83 000032FF 8A153CCDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    84 00003305 B402                <1>     mov ah, 02h
    85 00003307 CD21                <1>     int 21h
    86                              <1> 
    87 00003309 89C8                <1>     mov eax, ecx
    88 0000330B 251F000000          <1>     and eax, 1Fh    ;Save day bits
    89 00003310 E81D000000          <1>     call .printSecond
    90                              <1>     return
    13                              <2> %%_ret:
    14 00003315 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    91                              <1> 
    92                              <1> ;Each of these require eax setup correctly
    93                              <1> .printFirst:
    94 00003316 51                  <1>     push rcx
    95 00003317 E855040000          <1>     call getDecimalWord
    96 0000331C 84ED                <1>     test ch, ch ;Do we have an upper digit?
    97 0000331E 7504                <1>     jnz .skipSpace
    98 00003320 88CD                <1>     mov ch, cl
    99 00003322 B120                <1>     mov cl, " "
   100                              <1> .skipSpace:
   101 00003324 88CA                <1>     mov dl, cl
   102 00003326 B402                <1>     mov ah, 02h
   103 00003328 CD21                <1>     int 21h
   104 0000332A 88EA                <1>     mov dl, ch
   105 0000332C B402                <1>     mov ah, 02h
   106 0000332E CD21                <1>     int 21h
   107 00003330 59                  <1>     pop rcx
   108                              <1>     return
    13                              <2> %%_ret:
    14 00003331 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   109                              <1> .printSecond:
   110 00003332 51                  <1>     push rcx
   111 00003333 E839040000          <1>     call getDecimalWord
   112 00003338 84ED                <1>     test ch, ch ;Do we have an upper digit?
   113 0000333A 75E8                <1>     jnz .skipSpace
   114 0000333C 88CD                <1>     mov ch, cl
   115 0000333E B130                <1>     mov cl, "0"
   116 00003340 EBE2                <1>     jmp short .skipSpace
   117                              <1> .printYear:
   118 00003342 05BC070000          <1>     add eax, 1980
   119 00003347 51                  <1>     push rcx
   120 00003348 53                  <1>     push rbx
   121 00003349 E823040000          <1>     call getDecimalWord ;Get unpacked in rcx
   122 0000334E 5B                  <1>     pop rbx
   123 0000334F 84DB                <1>     test bl, bl
   124 00003351 740C                <1>     jz .twoDigitYear
   125 00003353 88CA                <1>     mov dl, cl  ;Print the first digit
   126 00003355 B402                <1>     mov ah, 02h
   127 00003357 CD21                <1>     int 21h
   128 00003359 88EA                <1>     mov dl, ch  ;Print the second digit
   129 0000335B B402                <1>     mov ah, 02h
   130 0000335D CD21                <1>     int 21h
   131                              <1> .twoDigitYear:
   132 0000335F C1E910              <1>     shr ecx, 10h    ;Get high word low
   133 00003362 88CA                <1>     mov dl, cl  ;Print the upper digit
   134 00003364 B402                <1>     mov ah, 02h
   135 00003366 CD21                <1>     int 21h
   136 00003368 88EA                <1>     mov dl, ch  ;Print the lower digit
   137 0000336A B402                <1>     mov ah, 02h
   138 0000336C CD21                <1>     int 21h
   139 0000336E 59                  <1>     pop rcx
   140                              <1>     return
    13                              <2> %%_ret:
    14 0000336F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> 
   142                              <1> 
   143                              <1> printTime:
   144                              <1> ;Input: eax = Packed Time
   145                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   146                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   147 00003370 89C1                <1>     mov ecx, eax
   148 00003372 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   149 00003377 C1E80B              <1>     shr eax, 11
   150 0000337A 803DC6CCFFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   151 00003381 750B                <1>     jne .ampm
   152 00003383 E85A000000          <1>     call .printHours
   153 00003388 E831000000          <1>     call .printMinutes
   154                              <1>     return
    13                              <2> %%_ret:
    14 0000338D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   155                              <1> .ampm:
   156 0000338E 3D0C000000          <1>     cmp eax, 12
   157 00003393 7713                <1>     ja .pm
   158 00003395 7416                <1>     je .pm2
   159 00003397 E846000000          <1>     call .printHours
   160 0000339C E81D000000          <1>     call .printMinutes
   161 000033A1 B261                <1>     mov dl, "a"
   162 000033A3 B402                <1>     mov ah, 02h
   163 000033A5 CD21                <1>     int 21h
   164                              <1>     return
    13                              <2> %%_ret:
    14 000033A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1> .pm:
   166 000033A8 2D0C000000          <1>     sub eax, 12
   167                              <1> .pm2:
   168 000033AD E830000000          <1>     call .printHours
   169 000033B2 E807000000          <1>     call .printMinutes
   170 000033B7 B270                <1>     mov dl, "p"
   171 000033B9 B402                <1>     mov ah, 02h
   172 000033BB CD21                <1>     int 21h
   173                              <1>     return
    13                              <2> %%_ret:
    14 000033BD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   174                              <1> .printMinutes:
   175 000033BE 8A157FCCFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   176 000033C4 B402                <1>     mov ah, 02h
   177 000033C6 CD21                <1>     int 21h
   178                              <1> 
   179 000033C8 89C8                <1>     mov eax, ecx
   180 000033CA 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   181 000033CF C1E805              <1>     shr eax, 5
   182                              <1> .printMinutesAlt:
   183 000033D2 51                  <1>     push rcx
   184 000033D3 E899030000          <1>     call getDecimalWord
   185 000033D8 84ED                <1>     test ch, ch ;Do we have an upper digit?
   186 000033DA 7514                <1>     jnz .skipSpace
   187 000033DC 88CD                <1>     mov ch, cl
   188 000033DE B130                <1>     mov cl, "0"
   189 000033E0 EB0E                <1>     jmp short .skipSpace
   190                              <1> .printHours:
   191 000033E2 51                  <1>     push rcx
   192 000033E3 E889030000          <1>     call getDecimalWord
   193 000033E8 84ED                <1>     test ch, ch ;Do we have an upper digit?
   194 000033EA 7504                <1>     jnz .skipSpace
   195 000033EC 88CD                <1>     mov ch, cl
   196 000033EE B120                <1>     mov cl, " "
   197                              <1> .skipSpace:
   198 000033F0 88CA                <1>     mov dl, cl
   199 000033F2 B402                <1>     mov ah, 02h
   200 000033F4 CD21                <1>     int 21h
   201 000033F6 88EA                <1>     mov dl, ch
   202 000033F8 B402                <1>     mov ah, 02h
   203 000033FA CD21                <1>     int 21h
   204 000033FC 59                  <1>     pop rcx
   205                              <1>     return
    13                              <2> %%_ret:
    14 000033FD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   206                              <1> 
   207                              <1> 
   208                              <1> putVersionInPrompt:
   209 000033FE 488D15AFD7FFFF      <1>     lea rdx, dosVer
   210 00003405 B409                <1>     mov ah, 09h ;Print String
   211 00003407 CD21                <1>     int 21h
   212 00003409 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   213 0000340B CD21                <1>     int 21h
   214 0000340D 50                  <1>     push rax    ;Save minor version
   215 0000340E E8B0000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   216 00003413 E8C8000000          <1>     call printPackedBCD ;Print al
   217 00003418 B22E                <1>     mov dl, "."
   218 0000341A B402                <1>     mov ah, 02h
   219 0000341C CD21                <1>     int 21h
   220 0000341E 58                  <1>     pop rax
   221 0000341F 88E0                <1>     mov al, ah  ;Get the minor version low
   222 00003421 E89D000000          <1>     call hexToBCD
   223 00003426 E8B5000000          <1>     call printPackedBCD
   224                              <1>     return
    13                              <2> %%_ret:
    14 0000342B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   225                              <1> putEscInPrompt:
   226 0000342C B21B                <1>     mov dl, ESC
   227 0000342E EB1D                <1>     jmp short outChar
   228                              <1> 
   229                              <1> putMoneyInPrompt:
   230 00003430 B224                <1>     mov dl, "$"
   231 00003432 EB19                <1>     jmp short outChar
   232                              <1> 
   233                              <1> putEquInPrompt:
   234 00003434 B23D                <1>     mov dl, "="
   235 00003436 EB15                <1>     jmp short outChar
   236                              <1> 
   237                              <1> putPipeInPrompt:
   238 00003438 B27C                <1>     mov dl, "|"
   239 0000343A EB11                <1>     jmp short outChar
   240                              <1> 
   241                              <1> putGTinPrompt:
   242 0000343C B23E                <1>     mov dl, ">"
   243 0000343E EB0D                <1>     jmp short outChar
   244                              <1> 
   245                              <1> putLTinPrompt:
   246 00003440 B23C                <1>     mov dl, "<"
   247 00003442 EB09                <1>     jmp short outChar
   248                              <1> 
   249                              <1> putDriveInPrompt:
   250 00003444 E8CF000000          <1>     call getCurrentDrive
   251 00003449 0441                <1>     add al, "A" ;Convert to letter
   252 0000344B 88C2                <1>     mov dl, al
   253                              <1> outChar:
   254 0000344D B402                <1>     mov ah, 02h ;Echo to STDOUT
   255 0000344F CD21                <1>     int 21h
   256                              <1>     return
    13                              <2> %%_ret:
    14 00003451 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   257                              <1> putCWDInPrompt:
   258 00003452 E8C1000000          <1>     call getCurrentDrive
   259 00003457 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   260 00003459 FEC2                <1>     inc dl
   261 0000345B 0441                <1>     add al, "A" ;Convert to letter
   262 0000345D B43A                <1>     mov ah, ":"
   263 0000345F 488D3DF6CBFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   264 00003466 66AB                <1>     stosw   ;Store X:, rdi+=2
   265 00003468 8A05BDCBFFFF        <1>     mov al, byte [pathSep]
   266 0000346E AA                  <1>     stosb   ;Store pathSep, inc rdi
   267 0000346F B447                <1>     mov ah, 47h ;Get Current Working Directory
   268 00003471 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   269 00003474 CD21                <1>     int 21h
   270 00003476 721F                <1>     jc .badDrive
   271 00003478 E8B9000000          <1>     call strlen
   272 0000347D 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   273                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   274 00003483 B800400000          <1>     mov eax, 4000h ;Write to handle
   275 00003488 BB01000000          <1>     mov ebx, 1  ;STDOUT
   276 0000348D 488D15C8CBFFFF      <1>     lea rdx, currDirStr
   277 00003494 CD21                <1>     int 21h
   278                              <1>     return
    13                              <2> %%_ret:
    14 00003496 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   279                              <1> .badDrive:
   280                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   281 00003497 488D15DED7FFFF      <1>     lea rdx, badDrvMsg
   282 0000349E E8A3FDFFFF          <1>     call printString
   283                              <1>     return
    13                              <2> %%_ret:
    14 000034A3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   284                              <1> 
   285                              <1> BCDtoHex:
   286                              <1> ;Converts a BCD value to a Hex byte
   287                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   288 000034A4 51                  <1>     push rcx
   289 000034A5 0FB6C0              <1>     movzx eax, al   ;Zero extend
   290 000034A8 89C1                <1>     mov ecx, eax    ;Save al in ecx
   291 000034AA 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   292 000034AF 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   293 000034B5 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   294                              <1> .bth:
   295 000034B8 050A000000          <1>     add eax, 10
   296 000034BD FFC9                <1>     dec ecx
   297 000034BF 75F7                <1>     jnz .bth
   298 000034C1 59                  <1>     pop rcx
   299 000034C2 C3                  <1>     ret
   300                              <1> 
   301                              <1> hexToBCD:
   302                              <1> ;Converts a Hex byte into two BCD digits
   303                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   304 000034C3 51                  <1>     push rcx
   305 000034C4 0FB6C0              <1>     movzx eax, al   ;Zero extend
   306 000034C7 31C9                <1>     xor ecx, ecx
   307                              <1> .htb0:
   308 000034C9 3D0A000000          <1>     cmp eax, 10
   309 000034CE 7209                <1>     jb .htb1
   310 000034D0 2D0A000000          <1>     sub eax, 10
   311 000034D5 FFC1                <1>     inc ecx
   312 000034D7 EBF0                <1>     jmp short .htb0
   313                              <1> .htb1:
   314 000034D9 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   315 000034DC 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   316 000034DE 59                  <1>     pop rcx
   317 000034DF C3                  <1>     ret
   318                              <1> 
   319                              <1> printPackedBCD:
   320                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   321                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   322                              <1> ;Preserves all registers
   323 000034E0 50                  <1>     push rax
   324 000034E1 52                  <1>     push rdx
   325 000034E2 88C4                <1>     mov ah, al
   326 000034E4 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   327 000034E6 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   328 000034E9 7508                <1>     jnz .upperNybble
   329 000034EB B220                <1>     mov dl, " "
   330 000034ED B402                <1>     mov ah, 02h
   331 000034EF CD21                <1>     int 21h
   332 000034F1 EB0E                <1>     jmp short .lowerNybble
   333                              <1> .upperNybble:
   334 000034F3 50                  <1>     push rax
   335 000034F4 C0EC04              <1>     shr ah, 4
   336 000034F7 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   337 000034FA 88E2                <1>     mov dl, ah
   338 000034FC B402                <1>     mov ah, 02h ;Print DL
   339 000034FE CD21                <1>     int 21h
   340 00003500 58                  <1>     pop rax
   341                              <1> .lowerNybble:
   342 00003501 0430                <1>     add al, "0"
   343 00003503 88C2                <1>     mov dl, al
   344 00003505 B402                <1>     mov ah, 02h ;Print DL
   345 00003507 CD21                <1>     int 21h
   346 00003509 5A                  <1>     pop rdx
   347 0000350A 58                  <1>     pop rax
   348                              <1>     return
    13                              <2> %%_ret:
    14 0000350B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   349                              <1> 
   350                              <1> setDrive:
   351                              <1> ;Input: dl = 0 based Drive number to set to
   352                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   353                              <1> ;AX trashed.
   354 0000350C B40E                <1>     mov ah, 0Eh ;Set drive to dl
   355 0000350E CD21                <1>     int 21h 
   356 00003510 E803000000          <1>     call getCurrentDrive
   357 00003515 38D0                <1>     cmp al, dl  ;Is this the same drive?
   358                              <1>     return
    13                              <2> %%_ret:
    14 00003517 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   359                              <1> getCurrentDrive:
   360                              <1> ;Returns the 0 based current drive in al
   361 00003518 B419                <1>     mov ah, 19h
   362 0000351A CD21                <1>     int 21h
   363                              <1>     return
    13                              <2> %%_ret:
    14 0000351C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   364                              <1> 
   365                              <1> strcpy:
   366                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   367                              <1> ;rsi -> Source
   368                              <1> ;rdi -> Destination
   369 0000351D 51                  <1>     push rcx
   370 0000351E 57                  <1>     push rdi
   371 0000351F 4889F7              <1>     mov rdi, rsi
   372 00003522 E80F000000          <1>     call strlen ;Get the length of the string in rsi
   373 00003527 5F                  <1>     pop rdi
   374 00003528 F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   375 0000352A 59                  <1>     pop rcx
   376                              <1>     return
    13                              <2> %%_ret:
    14 0000352B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   377                              <1> 
   378                              <1> strcpy2:
   379                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   380                              <1> ;rsi -> Source
   381                              <1> ;rdi -> Destination
   382 0000352C 56                  <1>     push rsi
   383 0000352D 57                  <1>     push rdi
   384 0000352E E8EAFFFFFF          <1>     call strcpy 
   385 00003533 5F                  <1>     pop rdi
   386 00003534 5E                  <1>     pop rsi
   387                              <1>     return
    13                              <2> %%_ret:
    14 00003535 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   388                              <1> 
   389                              <1> strlen:
   390                              <1> ;Gets the length of a ASCIIZ string
   391                              <1> ;Input: rdi = Source buffer
   392                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   393 00003536 50                  <1>     push rax
   394 00003537 B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   395 0000353C CD2F                <1>     int 2fh
   396 0000353E 58                  <1>     pop rax
   397                              <1>     return
    13                              <2> %%_ret:
    14 0000353F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> ucChar:
   400                              <1> ;Input: al = Char to uppercase
   401                              <1> ;Output: al = Adjusted char 
   402 00003540 53                  <1>     push rbx
   403 00003541 4889E3              <1>     mov rbx, rsp    ;Save the stack ptr
   404 00003544 50                  <1>     push rax    ;Push the char twice on the stack
   405 00003545 50                  <1>     push rax
   406 00003546 B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   407 0000354B CD2F                <1>     int 2fh         ;Returns the processed char in al
   408 0000354D 4889DC              <1>     mov rsp, rbx    ;Return the stack ptr to where it was
   409 00003550 5B                  <1>     pop rbx
   410                              <1>     return
    13                              <2> %%_ret:
    14 00003551 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   411                              <1> 
   412                              <1> skipDelimiters:
   413                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   414                              <1> ; command delimiters but a subset thereof. 
   415                              <1> ;These are the same across all codepages.
   416                              <1> ;Input: rsi must point to the start of the data string
   417                              <1> ;Output: rsi points to the first non-delimiter char
   418 00003552 50                  <1>     push rax
   419                              <1> .l1:
   420 00003553 AC                  <1>     lodsb
   421 00003554 E807000000          <1>     call isALdelimiter
   422 00003559 74F8                <1>     jz .l1
   423                              <1> .exit:
   424 0000355B 58                  <1>     pop rax
   425 0000355C 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   426                              <1>     return
    13                              <2> %%_ret:
    14 0000355F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   427                              <1> 
   428                              <1> isALdelimiter:
   429                              <1> ;Returns: ZF=NZ if al is not a command separator 
   430                              <1> ;         ZF=ZE if al is a command separator
   431 00003560 3C20                <1>     cmp al, " "
   432                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003562 74(5F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   433 00003564 3C3B                <1>     cmp al, ";"
   434                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003566 74(5F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   435 00003568 3C3D                <1>     cmp al, "="
   436                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000356A 74(5F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   437 0000356C 3C2C                <1>     cmp al, ","
   438                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000356E 74(5F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   439 00003570 3C09                <1>     cmp al, TAB
   440                              <1>     return
    13                              <2> %%_ret:
    14 00003572 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   441                              <1> 
   442                              <1> printPrompt:
   443 00003573 66813DADCAFFFFFFFF  <1>     cmp word [promptPtr], -1
   444 0000357C 750B                <1>     jne .validPrompt
   445                              <1>     ;Here we print the default prompt
   446 0000357E E8CFFEFFFF          <1>     call putCWDInPrompt
   447 00003583 E8B4FEFFFF          <1>     call putGTinPrompt
   448                              <1>     return
    13                              <2> %%_ret:
    14 00003588 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   449                              <1> .validPrompt:
   450                              <1>     return
    13                              <2> %%_ret:
    14 00003589 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   451                              <1> 
   452                              <1> clearCommandState:
   453                              <1> ;Clears the command state
   454 0000358A 488D3D19CBFFFF      <1>     lea rdi, cmdStatePtr
   455 00003591 B906000000          <1>     mov ecx, cmdStateL
   456 00003596 31C0                <1>     xor eax, eax
   457 00003598 F3AA                <1>     rep stosb
   458                              <1>     return
    13                              <2> %%_ret:
    14 0000359A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   459                              <1> 
   460                              <1> clearCommandLineState:
   461                              <1> ;Clears the command line state after a 0Dh encountered
   462 0000359B 488D3DFDCAFFFF      <1>     lea rdi, cmdLineStatePtr
   463 000035A2 B911000000          <1>     mov ecx, cmdLineStateL
   464 000035A7 31C0                <1>     xor eax, eax
   465 000035A9 F3AA                <1>     rep stosb
   466 000035AB C705EBCAFFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   466 000035B4 FF                  <1>
   467 000035B5 C705E7CAFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   467 000035BE FF                  <1>
   468                              <1>     return
    13                              <2> %%_ret:
    14 000035BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   469                              <1> 
   470                              <1> asciiFilenameToFCB:
   471                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   472                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   473                              <1> ;Also doesn't check if chars are valid
   474                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   475                              <1> ;Name is space padded.
   476                              <1> ;Input: rsi = ASCII string buffer
   477                              <1> ;       rdi = FCB name buffer
   478                              <1> ;Output: al = Char that terminated the source string 
   479 000035C0 53                  <1>     push rbx    
   480 000035C1 57                  <1>     push rdi
   481 000035C2 B90B000000          <1>     mov ecx, 11
   482 000035C7 B020                <1>     mov al, " "
   483 000035C9 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   484 000035CB 5F                  <1>     pop rdi
   485 000035CC 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   486                              <1>     ;Preprocess for Dir Searches
   487 000035CF 803E2E              <1>     cmp byte [rsi], "."
   488 000035D2 7509                <1>     jne .processName
   489 000035D4 A4                  <1>     movsb   ;Store the first dot
   490 000035D5 803E2E              <1>     cmp byte [rsi], "."
   491 000035D8 752C                <1>     jne .exitBadChar
   492 000035DA A4                  <1>     movsb
   493 000035DB EB29                <1>     jmp short .exitBadChar
   494                              <1> .processName:
   495 000035DD AC                  <1>     lodsb   ;Get the char in al
   496 000035DE 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   497 000035E0 7426                <1>     jz .exit
   498 000035E2 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   499 000035E4 7407                <1>     je .extSpace
   500 000035E6 3C2E                <1>     cmp al, "."
   501 000035E8 740C                <1>     je .ext
   502 000035EA AA                  <1>     stosb   ;Store the char
   503 000035EB EBF0                <1>     jmp short .processName
   504                              <1> .extSpace:
   505                              <1> ;Now we scan for a period in the name
   506 000035ED AC                  <1>     lodsb   ;Get a char and increase rsi
   507 000035EE 84C0                <1>     test al, al
   508 000035F0 7416                <1>     jz .exit
   509 000035F2 3C2E                <1>     cmp al, "."     ;If al is not a period...
   510 000035F4 75F7                <1>     jne .extSpace   ; keep searching
   511                              <1> .ext:
   512 000035F6 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   513                              <1> .processExt:
   514 000035FA AC                  <1>     lodsb
   515 000035FB 84C0                <1>     test al, al
   516 000035FD 7409                <1>     jz .exit
   517 000035FF 3C20                <1>     cmp al, " "
   518 00003601 7405                <1>     je .exit
   519 00003603 AA                  <1>     stosb
   520 00003604 EBF4                <1>     jmp short .processExt
   521                              <1> .exitBadChar:
   522 00003606 30C0                <1>     xor al, al  ;Return a null terminator
   523                              <1> .exit:
   524 00003608 5B                  <1>     pop rbx
   525                              <1>     return
    13                              <2> %%_ret:
    14 00003609 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   526                              <1> 
   527                              <1> findLastPathComponant:
   528                              <1> ;Finds the last path componant of an ASCIIZ path string
   529                              <1> ;Input: rdi -> Head of the path to find last componant on
   530                              <1> ;Output: rdi -> Start of the last componant
   531 0000360A 50                  <1>     push rax
   532 0000360B 51                  <1>     push rcx
   533 0000360C 31C9                <1>     xor ecx, ecx
   534 0000360E FFC9                <1>     dec ecx
   535 00003610 31C0                <1>     xor eax, eax
   536 00003612 F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   537 00003614 F7D1                <1>     not ecx     ;This gets the count of chars  
   538 00003616 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   539 00003619 8A050CCAFFFF        <1>     mov al, byte [pathSep]
   540 0000361F FD                  <1>     std
   541 00003620 F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   542 00003622 FC                  <1>     cld
   543 00003623 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   544 00003625 48FFC7              <1>     inc rdi     ;Point at pathsep
   545                              <1> .exit:
   546 00003628 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   547 0000362B 59                  <1>     pop rcx
   548 0000362C 58                  <1>     pop rax
   549                              <1>     return
    13                              <2> %%_ret:
    14 0000362D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   550                              <1> 
   551                              <1> FCBToAsciiz:
   552                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   553                              <1> ;Name is space padded too
   554                              <1> ;Input: rsi = FCB name buffer
   555                              <1> ;       rdi = ASCIIZ string buffer
   556 0000362E B908000000          <1>     mov ecx, 8
   557 00003633 F3A4                <1>     rep movsb   ;Move the name over
   558                              <1> .scanNameSpace:
   559 00003635 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   560 00003639 750D                <1>     jne .ext
   561 0000363B 48FFCF              <1>     dec rdi
   562 0000363E FFC1                <1>     inc ecx
   563 00003640 81F908000000        <1>     cmp ecx, 8
   564 00003646 72ED                <1>     jb .scanNameSpace
   565                              <1> .ext:
   566 00003648 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   567 0000364D 7506                <1>     jne .validExt
   568 0000364F 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   569 00003653 7415                <1>     je .exit
   570                              <1> .validExt:
   571 00003655 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   572 00003657 AA                  <1>     stosb
   573 00003658 B903000000          <1>     mov ecx, 3
   574 0000365D F3A4                <1>     rep movsb   ;Move the three extension chars over
   575                              <1> .scanExtSpace:
   576 0000365F 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   577 00003663 7505                <1>     jne .exit
   578 00003665 48FFCF              <1>     dec rdi
   579 00003668 EBF5                <1>     jmp short .scanExtSpace
   580                              <1> .exit:
   581 0000366A 31C0                <1>     xor eax, eax
   582 0000366C AA                  <1>     stosb   ;Store a null at the end
   583                              <1>     return
    13                              <2> %%_ret:
    14 0000366D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   584                              <1> 
   585                              <1> cpDelimOrCtrlStringToBufz:
   586                              <1> ;Copy a delimited or control char terminated string to a buffer
   587                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   588                              <1> ;       rdi -> Buffer to store null terminated string in
   589                              <1> ;Output: rsi -> First char past string end
   590                              <1> ;       rdi -> One char past null terminator on string buffer
   591 0000366E C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   592                              <1> .lp:
   593 00003671 AC                  <1>     lodsb
   594 00003672 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here. CR included!
   595 00003674 760A                <1>     jbe .exit
   596 00003676 E8E5FEFFFF          <1>     call isALdelimiter
   597 0000367B 7403                <1>     je .exit
   598 0000367D AA                  <1>     stosb
   599 0000367E EBF1                <1>     jmp short .lp
   600                              <1> .exit:
   601 00003680 31C0                <1>     xor eax, eax
   602 00003682 AA                  <1>     stosb   ;Store a null terminator
   603                              <1>     return
    13                              <2> %%_ret:
    14 00003683 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   604                              <1> 
   605                              <1> 
   606                              <1> cpDelimPathToBufz:
   607                              <1> ;Copy a delimited path into buffer and null terminate.
   608                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   609                              <1> ;       rdi -> Buffer to store null terminated path in
   610                              <1> ;Output: rsi -> First char past pathname delimiter
   611                              <1> ;       rdi -> One char past null terminator on pathname buffer
   612 00003684 53                  <1>     push rbx
   613 00003685 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   614 00003688 C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   615                              <1> .lp:
   616 0000368B AC                  <1>     lodsb   ;Get the char
   617 0000368C 3C0D                <1>     cmp al, CR
   618 0000368E 7412                <1>     je .gotRedirPath
   619 00003690 E8CBFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   620 00003695 740B                <1>     jz .gotRedirPath 
   621 00003697 3A058FC9FFFF        <1>     cmp al, byte [switchChar]
   622 0000369D 7403                <1>     je .gotRedirPath
   623 0000369F AA                  <1>     stosb   ;Store this char and loop next char
   624 000036A0 EBE9                <1>     jmp short .lp
   625                              <1> .gotRedirPath:
   626 000036A2 50                  <1>     push rax    ;Save the char on stack
   627 000036A3 30C0                <1>     xor al, al  ;Get null terminator char
   628 000036A5 4829FB              <1>     sub rbx, rdi
   629 000036A8 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   630 000036AF 7412                <1>     je .notColon
   631 000036B1 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   632 000036B8 7409                <1>     je .notColon
   633 000036BA 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   634 000036BE 7503                <1>     jne .notColon
   635 000036C0 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   636                              <1> .notColon:
   637 000036C3 AA                  <1>     stosb   ;Store the null terminator for the redir path
   638 000036C4 58                  <1>     pop rax ;Get back the char in al
   639 000036C5 5B                  <1>     pop rbx
   640                              <1>     return
    13                              <2> %%_ret:
    14 000036C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   641                              <1> 
   642                              <1> buildCommandPath:
   643                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   644 000036C7 0FB605DDC9FFFF      <1>     movzx eax, byte [arg1Off]
   645 000036CE 4C8B053AC9FFFF      <1>     mov r8, [pspPtr]
   646 000036D5 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   647 000036DC 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   648                              <1> copyArgumentToSearchSpec:
   649                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   650                              <1> ; and null terminates
   651 000036DF 488D3DFBCDFFFF      <1>     lea rdi, searchSpec
   652 000036E6 E899FFFFFF          <1>     call cpDelimPathToBufz
   653                              <1>     return
    13                              <2> %%_ret:
    14 000036EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   654                              <1> 
   655                              <1> scanForWildcards:
   656                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   657                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   658 000036EC 50                  <1>     push rax
   659 000036ED 56                  <1>     push rsi
   660                              <1> .lp:
   661 000036EE AC                  <1>     lodsb
   662 000036EF 3C3F                <1>     cmp al, "?"
   663 000036F1 740A                <1>     je .exit
   664 000036F3 3C2A                <1>     cmp al, "*"
   665 000036F5 7406                <1>     je .exit
   666 000036F7 84C0                <1>     test al, al
   667 000036F9 75F3                <1>     jnz .lp
   668 000036FB FEC0                <1>     inc al  ;This will clear the ZF
   669                              <1> .exit:
   670 000036FD 5E                  <1>     pop rsi
   671 000036FE 58                  <1>     pop rax
   672                              <1>     return
    13                              <2> %%_ret:
    14 000036FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   673                              <1> 
   674                              <1> printDecimalWord:
   675                              <1> ;Takes qword in rax and print it's decimal representation
   676                              <1> ;Takes the qword in eax and prints its decimal representation
   677 00003700 31C9                <1>     xor ecx, ecx
   678 00003702 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   679 00003704 85C0                <1>     test eax, eax
   680 00003706 750C                <1>     jnz .notZero
   681 00003708 B930000000          <1>     mov ecx, "0"
   682 0000370D BD01000000          <1>     mov ebp, 1  ;Print one digit
   683 00003712 EB3E                <1>     jmp short .dpfb2
   684                              <1> .notZero:
   685 00003714 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   686 00003716 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   687                              <1> .dpfb0:
   688 0000371B FFC5                <1>     inc ebp
   689 0000371D 81FD08000000        <1>     cmp ebp, 8
   690 00003723 7206                <1>     jb .dpfb00
   691 00003725 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   692 00003729 EB04                <1>     jmp short .dpfb01
   693                              <1> .dpfb00:
   694 0000372B 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   695                              <1> .dpfb01:
   696 0000372F 31D2                <1>     xor edx, edx
   697 00003731 48F7F6              <1>     div rsi
   698 00003734 80C230              <1>     add dl, '0'
   699 00003737 80FA39              <1>     cmp dl, '9'
   700 0000373A 7603                <1>     jbe .dpfb1
   701 0000373C 80C207              <1>     add dl, 'A'-'0'-10
   702                              <1> .dpfb1:
   703 0000373F 81FD08000000        <1>     cmp ebp, 8
   704 00003745 7204                <1>     jb .dpfb10
   705 00003747 88D3                <1>     mov bl, dl ;Add the bottom bits
   706 00003749 EB02                <1>     jmp short .dpfb11
   707                              <1> .dpfb10:
   708 0000374B 88D1                <1>     mov cl, dl    ;Save remainder byte
   709                              <1> .dpfb11:
   710 0000374D 4885C0              <1>     test rax, rax
   711 00003750 75C9                <1>     jnz .dpfb0
   712                              <1> .dpfb2:
   713 00003752 81FD08000000        <1>     cmp ebp, 8
   714 00003758 7208                <1>     jb .dpfb20
   715 0000375A 88DA                <1>     mov dl, bl
   716 0000375C 48C1EB08            <1>     shr rbx, 8
   717 00003760 EB06                <1>     jmp short .dpfb21
   718                              <1> .dpfb20:
   719 00003762 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   720 00003764 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   721                              <1> .dpfb21:
   722 00003768 B402                <1>     mov ah, 02h
   723 0000376A CD21                <1>     int 21h
   724 0000376C FFCD                <1>     dec ebp
   725 0000376E 75E2                <1>     jnz .dpfb2
   726                              <1>     return
    13                              <2> %%_ret:
    14 00003770 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   727                              <1> 
   728                              <1> getDecimalWord:
   729                              <1> ;Works on MAX A dword in eax
   730                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   731 00003771 31C9                <1>     xor ecx, ecx
   732 00003773 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   733 00003775 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   734                              <1> .dpfb0:
   735 0000377A FFC5                <1>     inc ebp
   736 0000377C 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   737 00003780 31D2                <1>     xor edx, edx
   738 00003782 48F7F3              <1>     div rbx
   739 00003785 80C230              <1>     add dl, '0'
   740 00003788 80FA39              <1>     cmp dl, '9'
   741 0000378B 7603                <1>     jbe .dpfb1
   742 0000378D 80C207              <1>     add dl, 'A'-'0'-10
   743                              <1> .dpfb1:
   744 00003790 88D1                <1>     mov cl, dl    ;Save remainder byte
   745 00003792 4885C0              <1>     test rax, rax
   746 00003795 75E3                <1>     jnz .dpfb0
   747                              <1>     return
    13                              <2> %%_ret:
    14 00003797 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   748                              <1> 
   749                              <1> freezePC:
   750 00003798 488D151ED7FFFF      <1>     lea rdx, memBad1
   751 0000379F B409                <1>     mov ah, 09h
   752 000037A1 CD21                <1>     int 21h
   753                              <1> .altEP:
   754 000037A3 488D153CD7FFFF      <1>     lea rdx, memBad3
   755 000037AA B409                <1>     mov ah, 09h
   756 000037AC CD21                <1>     int 21h
   757                              <1> .lp:
   758 000037AE F390                <1>     pause
   759 000037B0 F4                  <1>     hlt
   760 000037B1 EBFB                <1>     jmp short .lp
   761                              <1> 
   762                              <1> setDTA:
   763 000037B3 50                  <1>     push rax
   764 000037B4 52                  <1>     push rdx
   765 000037B5 488D15ABC9FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   766 000037BC B8001A0000          <1>     mov eax, 1A00h
   767 000037C1 CD21                <1>     int 21h
   768 000037C3 5A                  <1>     pop rdx
   769 000037C4 58                  <1>     pop rax
   770                              <1>     return
    13                              <2> %%_ret:
    14 000037C5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   771                              <1> 
   772                              <1> getDTA:
   773 000037C6 488D159AC9FFFF      <1>     lea rdx, cmdFFBlock
   774                              <1>     return
    13                              <2> %%_ret:
    14 000037CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   775                              <1> 
   776                              <1> ;-------------------------------
   777                              <1> ; Environment utility functions
   778                              <1> ;-------------------------------
   779                              <1> 
   780                              <1> cmpEnvVar:
   781                              <1> ;Checks that we have found the environment variable we are looking for.
   782                              <1> ;Input: rsi -> Environment var to verify the name of
   783                              <1> ;       rdi -> Environment var name to compare against
   784                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
   785 000037CE 56                  <1>     push rsi
   786 000037CF 57                  <1>     push rdi
   787 000037D0 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs
   788                              <1> .lp:
   789 000037D3 AC                  <1>     lodsb               ;Pick up from user string
   790 000037D4 E867FDFFFF          <1>     call ucChar         ;Upper case it!
   791 000037D9 3807                <1>     cmp byte [rdi], al  
   792 000037DB 7509                <1>     jne .exit
   793 000037DD 3C3D                <1>     cmp al, "="         ;Are we at the end?
   794 000037DF 7405                <1>     je .exit
   795 000037E1 48FFC7              <1>     inc rdi
   796 000037E4 EBED                <1>     jmp short .lp
   797                              <1> .exit:
   798 000037E6 5F                  <1>     pop rdi
   799 000037E7 5E                  <1>     pop rsi
   800                              <1>     return
    13                              <2> %%_ret:
    14 000037E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   801                              <1> 
   802                              <1> checkEnvGoodAndGet:
   803                              <1> ;Gets the env ptr and checks that it is double null terminated.
   804                              <1> ;Output:
   805                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
   806                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
   807                              <1> ;           rsi -> Environment pointer
   808 000037E9 50                  <1>     push rax
   809 000037EA 51                  <1>     push rcx
   810 000037EB 57                  <1>     push rdi
   811 000037EC 4150                <1>     push r8
   812 000037EE 4C8B051AC8FFFF      <1>     mov r8, qword [pspPtr]
   813 000037F5 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
   814 000037F9 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
   815 000037FC 741A                <1>     jz .badExit
   816 000037FE 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
   817 00003801 C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
   818                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
   819 00003804 31C0                <1>     xor eax, eax
   820                              <1> .pathNulScan:
   821 00003806 F2AE                <1>     repne scasb
   822 00003808 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
   823 0000380A 740C                <1>     jz .badExit
   824 0000380C 3807                <1>     cmp byte [rdi], al  ;Is char two null?
   825 0000380E 75F6                <1>     jne .pathNulScan    ;If not, keep searching
   826 00003810 31C0                <1>     xor eax, eax
   827 00003812 FFC0                <1>     inc eax ;Clear the ZF
   828 00003814 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
   829                              <1> .badExit:
   830 00003818 4158                <1>     pop r8
   831 0000381A 5F                  <1>     pop rdi
   832 0000381B 59                  <1>     pop rcx
   833 0000381C 58                  <1>     pop rax
   834                              <1>     return
    13                              <2> %%_ret:
    14 0000381D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   835                              <1> 
   836                              <1> 
   837                              <1> findEnvSpace:
   838                              <1> ;Searches the environment for space, returns a pointer to the start of the 
   839                              <1> ; free space in the pointer and a count of free space in the environment.
   840                              <1> ;If count is zero, pointer is not to be used.
   841                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
   842 0000381E 31C9                <1>     xor ecx, ecx
   843 00003820 31C0                <1>     xor eax, eax    ;Clear eax too
   844 00003822 51                  <1>     push rcx
   845 00003823 E8C1FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
   846 00003828 59                  <1>     pop rcx
   847                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003829 74(1D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   848 0000382B 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
   849 0000382F FFC9                <1>     dec ecx ;Make into a large counter
   850 00003831 4889F7              <1>     mov rdi, rsi    
   851                              <1> .endsearch:
   852 00003834 F2AE                <1>     repne scasb ;Scan
   853 00003836 803F00              <1>     cmp byte [rdi], 0
   854 00003839 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
   855                              <1>     ;Here we are at the end of the environment
   856 0000383B F7D9                <1>     neg ecx
   857 0000383D FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
   858 0000383F 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
   859 00003842 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
   860 00003845 29C8                <1>     sub eax, ecx
   861 00003847 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
   862                              <1>     return
    13                              <2> %%_ret:
    14 00003849 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   863                              <1> 
   864                              <1> searchForEnvVar:
   865                              <1> ;Gets the environment, and scans it for a string with the var specified.
   866                              <1> ;Input: rdi -> Var name to look for.
   867                              <1> ;Returns: CF=NC: rsi -> Env var in env.
   868 0000384A 57                  <1>     push rdi
   869 0000384B 51                  <1>     push rcx
   870 0000384C 52                  <1>     push rdx
   871 0000384D 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
   872 00003851 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
   873                              <1> .varLp:
   874 00003854 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
   875 00003857 E872FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
   876 0000385C 7416                <1>     je .varFound
   877 0000385E 31C0                <1>     xor eax, eax        ;Search for a null
   878 00003860 4889F7              <1>     mov rdi, rsi        ;Scan the environment
   879 00003863 B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
   880 00003868 F2AE                <1>     repne scasb         ;Now scan for the terminating null
   881 0000386A 3807                <1>     cmp byte [rdi], al  ;Now check the second char
   882 0000386C 7405                <1>     je .varNotFound     ;If second null, no more env to search!
   883 0000386E 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
   884 00003871 EBE1                <1>     jmp short .varLp    ;And scan again!
   885                              <1> .varNotFound:
   886 00003873 F9                  <1>     stc
   887                              <1> .varFound:
   888 00003874 59                  <1>     pop rcx
   889 00003875 5A                  <1>     pop rdx
   890 00003876 5F                  <1>     pop rdi
   891                              <1>     return
    13                              <2> %%_ret:
    14 00003877 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   892                              <1> 
   893                              <1> envFree:
   894                              <1> ;Frees a variable from the environment, pulls the strings behind it up
   895                              <1> ; zeros the rest of the environment, and returns a pointer to the first
   896                              <1> ; free byte of the environment!
   897                              <1> ;Input: rsi -> Variable to free.
   898                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
   899                              <1> ;        ecx = Number of free bytes in env
   900 00003878 4889F7              <1>     mov rdi, rsi
   901 0000387B 31C0                <1>     xor eax, eax
   902                              <1> .freeLp:
   903 0000387D 803F00              <1>     cmp byte [rdi], 0
   904 00003880 7403                <1>     je .exitLp
   905 00003882 AA                  <1>     stosb
   906 00003883 EBF8                <1>     jmp short .freeLp
   907                              <1> .exitLp:
   908                              <1> ;rdi points to the terminating null of the var we just deleted
   909                              <1> ;rsi points to the start of the free space
   910 00003885 4887F7              <1>     xchg rsi, rdi   ;Swap em!
   911 00003888 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
   912 0000388D 7504                <1>     jne .prepPullup
   913 0000388F 31C0                <1>     xor eax, eax
   914 00003891 EB0E                <1>     jmp short .cleanEnv
   915                              <1> .prepPullup:
   916 00003893 48FFC6              <1>     inc rsi         ;Go past the terminating null!
   917                              <1> .pullUp:
   918 00003896 AC                  <1>     lodsb
   919 00003897 AA                  <1>     stosb
   920 00003898 84C0                <1>     test al, al ;Did we pick up a zero
   921 0000389A 75FA                <1>     jne .pullUp ;If not, keep copying
   922 0000389C 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
   923 0000389F 75F5                <1>     jne .pullUp
   924                              <1> ;We are at the end of the copy!
   925                              <1> .cleanEnv:
   926 000038A1 AA                  <1>     stosb   ;Store the famous second null
   927 000038A2 48FFCF              <1>     dec rdi ;without incrementing it!!
   928 000038A5 E807000000          <1>     call getFreeSpace
   929 000038AA 31C0                <1>     xor eax, eax
   930 000038AC 51                  <1>     push rcx
   931 000038AD F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
   932 000038AF 59                  <1>     pop rcx
   933                              <1>     return
    13                              <2> %%_ret:
    14 000038B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   934                              <1> 
   935                              <1> getFreeSpace:
   936                              <1> ;Output: ecx = Number of free bytes in the environment block
   937 000038B1 56                  <1>     push rsi
   938 000038B2 57                  <1>     push rdi
   939 000038B3 E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
   940 000038B8 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
   941 000038BC 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
   942 000038BF E805000000          <1>     call getEnvSize ;Get total block size
   943 000038C4 29F9                <1>     sub ecx, edi    ;Get difference!
   944 000038C6 5F                  <1>     pop rdi
   945 000038C7 5E                  <1>     pop rsi
   946                              <1>     return
    13                              <2> %%_ret:
    14 000038C8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   947                              <1> 
   948                              <1> getEnvSize:
   949                              <1> ;Gets the number of bytes in the environment allocation
   950                              <1> ;Output: ecx = Number of bytes in the environment!
   951 000038C9 53                  <1>     push rbx
   952 000038CA 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
   953 000038CE 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
   954 000038D1 C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
   955 000038D4 5B                  <1>     pop rbx
   956                              <1>     return
    13                              <2> %%_ret:
    14 000038D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   957                              <1> 
   958                              <1> getPtrToEndOfEnv:
   959                              <1> ;Gets ptr to end of the environment
   960                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
   961 000038D6 50                  <1>     push rax
   962 000038D7 51                  <1>     push rcx
   963 000038D8 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
   964 000038DC 31C0                <1>     xor eax, eax
   965 000038DE 31C9                <1>     xor ecx, ecx
   966 000038E0 FFC9                <1>     dec ecx
   967                              <1> .lp:
   968 000038E2 F2AE                <1>     repne scasb
   969 000038E4 3807                <1>     cmp byte [rdi], al
   970 000038E6 75FA                <1>     jne .lp
   971 000038E8 59                  <1>     pop rcx
   972 000038E9 58                  <1>     pop rax
   973                              <1>     return
    13                              <2> %%_ret:
    14 000038EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   974                              <1> 
   975                              <1> growEnvBlock:
   976                              <1> ;Attempts to grow the environment to store the new string. Will clean the
   977                              <1> ; newly allocated 160 byte block of the environment.
   978                              <1> ;Returns:   CF=NC - Environment grown ok!
   979                              <1> ;           CF=CY & ZF=ZE - Environment at max size
   980                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
   981 000038EB 50                  <1>     push rax
   982 000038EC 53                  <1>     push rbx
   983 000038ED 51                  <1>     push rcx
   984 000038EE 56                  <1>     push rsi
   985 000038EF 57                  <1>     push rdi
   986 000038F0 E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
   987 000038F5 E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
   988 000038FA 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
   989 000038FE 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
   990 00003901 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
   991 00003907 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
   992 0000390D 7321                <1>     jae .tooLarge
   993                              <1>     ;Here ZF must be NZ.
   994 0000390F 4150                <1>     push r8
   995 00003911 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
   996 00003915 B8004A0000          <1>     mov eax, 4A00h
   997 0000391A CD21                <1>     int 21h
   998 0000391C 4158                <1>     pop r8
   999 0000391E 720A                <1>     jc .exit
  1000                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1001                              <1>     ; so we add 160 zeros to the count of bytes
  1002 00003920 81C1A0000000        <1>     add ecx, 0A0h
  1003 00003926 31C0                <1>     xor eax, eax
  1004 00003928 F3AA                <1>     rep stosb
  1005                              <1> .exit:
  1006 0000392A 5F                  <1>     pop rdi
  1007 0000392B 5E                  <1>     pop rsi
  1008 0000392C 59                  <1>     pop rcx
  1009 0000392D 5B                  <1>     pop rbx
  1010 0000392E 58                  <1>     pop rax
  1011                              <1>     return
    13                              <2> %%_ret:
    14 0000392F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1012                              <1> .tooLarge:
  1013 00003930 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1014 00003933 F9                  <1>     stc             ;Set CF
  1015 00003934 EBF4                <1>     jmp short .exit
    19                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00003936 53                  <1>     push rbx
    25 00003937 51                  <1>     push rcx
    26 00003938 52                  <1>     push rdx
    27 00003939 57                  <1>     push rdi
    28 0000393A 56                  <1>     push rsi
    29 0000393B FC                  <1>     cld         ;Make String ops go forward
    30                              <1> 
    31 0000393C 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 0000393F 488D15FBCFFFFF      <1>     lea rdx, crlf
    33 00003946 E8FBF8FFFF          <1>     call printString
    34                              <1> 
    35 0000394B 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    36 00003951 B90C000000          <1>     mov ecx, 0Ch
    37 00003956 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    38 00003958 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    39 0000395B 480FB7FF            <1>     movzx rdi, di
    40 0000395F 4889FA              <1>     mov rdx, rdi    ;Copy error code
    41 00003962 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    42 00003966 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    43 00003969 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    44 0000396C 488D152D010000      <1>     lea rdx, qword [.errorMsgTable]
    45 00003973 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    46 00003977 E8CAF8FFFF          <1>     call printString     ;Call DOS to print first part of message
    47                              <1> 
    48 0000397C 488D150E020000      <1>     lea rdx, qword [.readmsg]
    49 00003983 488D3D16020000      <1>     lea rdi, qword [.writemsg]
    50 0000398A F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    51 0000398D 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    52 00003991 E8B0F8FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
    53                              <1> 
    54 00003996 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    55 00003999 0F85E7000000        <1>     jnz .charError
    56                              <1> ;Disk error continues here
    57 0000399F 488D15E4010000      <1>     lea rdx, qword [.drive] ;Drive message
    58 000039A6 E89BF8FFFF          <1>     call printString
    59 000039AB 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    60 000039AD 80C241              <1>     add dl, "A" ;Add ASCII code
    61 000039B0 B402                <1>     mov ah, 02h ;Print char in dl
    62 000039B2 CD21                <1>     int 21h
    63                              <1> .userInput:
    64 000039B4 E886F8FFFF          <1>     call printCRLF  ;Print new line
    65                              <1> ;Abort, Retry, Ignore, Fail is word order
    66                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    67                              <1> .userAbort:
    68                              <1> ;Abort is always an option
    69 000039B9 488D15EF010000      <1>     lea rdx, qword [.abortmsg]
    70 000039C0 E881F8FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
    71                              <1> .userRetry:
    72 000039C5 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    73 000039C8 7418                <1>     jz .userIgnore    ;If clear, dont print message
    74 000039CA 488D15F6010000      <1>     lea rdx, qword [.betweenMsg]
    75 000039D1 E870F8FFFF          <1>     call printString
    76 000039D6 488D15DF010000      <1>     lea rdx, qword [.retrymsg]
    77 000039DD E864F8FFFF          <1>     call printString
    78                              <1> .userIgnore:
    79 000039E2 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    80 000039E5 7418                <1>     jz .userFail
    81 000039E7 488D15D9010000      <1>     lea rdx, qword [.betweenMsg]
    82 000039EE E853F8FFFF          <1>     call printString
    83 000039F3 488D15BB010000      <1>     lea rdx, qword [.ignoremsg]
    84 000039FA E847F8FFFF          <1>     call printString
    85                              <1> .userFail:
    86 000039FF F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    87 00003A02 7418                <1>     jz .userMsgEnd
    88 00003A04 488D15BC010000      <1>     lea rdx, qword [.betweenMsg]
    89 00003A0B E836F8FFFF          <1>     call printString
    90 00003A10 488D15AB010000      <1>     lea rdx, qword [.failmsg]
    91 00003A17 E82AF8FFFF          <1>     call printString
    92                              <1> .userMsgEnd:
    93 00003A1C 488D15A7010000      <1>     lea rdx, qword [.endMsg]
    94 00003A23 E81EF8FFFF          <1>     call printString
    95                              <1> ;Get user input now 
    96 00003A28 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
    97 00003A2A 488D3D9C010000      <1>     lea rdi, qword [.responses] ;Go to start of string
    98 00003A31 B401                <1>     mov ah, 01h ;STDIN without Console Echo
    99 00003A33 CD21                <1>     int 21h ;Get char in al
   100 00003A35 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   101 00003A37 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   102 00003A39 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   103                              <1> .uip1:
   104 00003A3B AE                  <1>     scasb   ;Compare char to list, offset gives return code
   105 00003A3C 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   106 00003A3E FFC1                <1>     inc ecx
   107 00003A40 81F904000000        <1>     cmp ecx, 4
   108 00003A46 75F3                <1>     jne .uip1
   109 00003A48 E967FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   110                              <1> .validInput:
   111 00003A4D E8EDF7FFFF          <1>     call printCRLF   ;Note the input was accepted
   112 00003A52 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   113                              <1> ;Now check if the input is permitted
   114 00003A54 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   115 00003A56 7427                <1>     je .cehExit
   116 00003A58 84C0                <1>     test al, al ;Check if 0 => Ignore
   117 00003A5A 740F                <1>     je .viIgnore
   118 00003A5C 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   119 00003A5E 7416                <1>     je .viRetry
   120                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   121 00003A60 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   122 00003A63 0F844BFFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   123 00003A69 EB14                <1>     jmp short .cehExit
   124                              <1> .viIgnore:
   125 00003A6B F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   126 00003A6E 0F8440FFFFFF        <1>     jz .userInput
   127 00003A74 EB09                <1>     jmp short .cehExit
   128                              <1> .viRetry:
   129 00003A76 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   130 00003A79 0F8435FFFFFF        <1>     jz .userInput
   131                              <1> .cehExit:
   132 00003A7F 5E                  <1>     pop rsi
   133 00003A80 5F                  <1>     pop rdi
   134 00003A81 5A                  <1>     pop rdx
   135 00003A82 59                  <1>     pop rcx
   136 00003A83 5B                  <1>     pop rbx
   137 00003A84 48CF                <1>     iretq
   138                              <1> .charError:
   139 00003A86 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   140 00003A8B 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   141                              <1> .ce1:
   142 00003A92 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   143 00003A93 88C2                <1>     mov dl, al  ;Move char into dl
   144 00003A95 B402                <1>     mov ah, 02h
   145 00003A97 CD21                <1>     int 21h ;Print char
   146 00003A99 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   147 00003A9B E914FFFFFF          <1>     jmp .userInput
   148                              <1> 
   149                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   150 00003AA0 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   150 00003AA9 746563742024202020  <1>
   151 00003AB2 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   151 00003ABB 6E6974202420202020  <1>
   152 00003AC4 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   152 00003ACD 202420202020202020  <1>
   153 00003AD6 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   153 00003ADF 6F6D6D616E64202420  <1>
   154 00003AE8 446174612024202020- <1>             db "Data $            "       ;Error 4
   154 00003AF1 202020202020202020  <1>
   155 00003AFA 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   155 00003B03 737420242020202020  <1>
   156 00003B0C 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   156 00003B15 202020202020202020  <1>
   157 00003B1E 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   157 00003B27 656469612024202020  <1>
   158 00003B30 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   158 00003B39 7420466F756E642024  <1>
   159 00003B42 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   159 00003B4B 706572202420202020  <1>
   160 00003B54 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   160 00003B5D 6C7420242020202020  <1>
   161 00003B66 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   161 00003B6F 742024202020202020  <1>
   162 00003B78 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   162 00003B81 61696C757265202420  <1>
   163                              <1> 
   164 00003B8A 64726976652024      <1> .drive      db "drive $"
   165 00003B91 6572726F7220726561- <1> .readmsg    db "error reading $"
   165 00003B9A 64696E672024        <1>
   166 00003BA0 6572726F7220777269- <1> .writemsg   db "error writing $"
   166 00003BA9 74696E672024        <1>
   167 00003BAF 41626F727424        <1> .abortmsg   db "Abort$" 
   168 00003BB5 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   169 00003BBC 526574727924        <1> .retrymsg   db "Retry$"
   170 00003BC2 4661696C24          <1> .failmsg    db "Fail$"
   171 00003BC7 2C2024              <1> .betweenMsg db ", $"
   172 00003BCA 3F2024              <1> .endMsg     db "? $"
   173 00003BCD 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   174                              <1> 
   175                              <1> int23h:
   176 00003BD1 F60555C4FFFFFF      <1>     test byte [permaSwitch], -1
   177 00003BD8 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   178                              <1>     ;Else, we juggle parent PSP's
   179 00003BDA 50                  <1>     push rax
   180 00003BDB 53                  <1>     push rbx
   181 00003BDC 488B0534C4FFFF      <1>     mov rax, qword [realParent]
   182 00003BE3 488B1D25C4FFFF      <1>     mov rbx, qword [pspPtr]
   183 00003BEA 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   184 00003BEE 5B                  <1>     pop rbx
   185 00003BEF 58                  <1>     pop rax
   186                              <1> .exit:
   187 00003BF0 F9                  <1>     stc     ;Set CF to kill the task
   188 00003BF1 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    20                                  endOfAlloc: ;End of alloc
    21                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    22                                  Segment transient align=1 follows=.data
    23                                  ;This segment always gets ejected post load
    24                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D1508020000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    15 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    16 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    17 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    18                              <1> ;Setup Int 22h, Int 23h and Int 24h
    19 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    20 0000002F 488905(2E000000)    <1>     mov qword [parentInt22], rax
    21                              <1> 
    22 00000036 488D15(36390000)    <1>     lea rdx, critErrorHandler
    23 0000003D 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    24 00000041 B824250000          <1>     mov eax, 2524h
    25 00000046 CD21                <1>     int 21h
    26 00000048 488D15(D13B0000)    <1>     lea rdx, int23h
    27 0000004F 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    28 00000053 B823250000          <1>     mov eax, 2523h
    29 00000058 CD21                <1>     int 21h
    30 0000005A 488D15(8E0F0000)    <1>     lea rdx, applicationReturn
    31 00000061 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    32 00000065 B822250000          <1>     mov eax, 2522h
    33 0000006A CD21                <1>     int 21h
    34                              <1> ;Get a pointer to DOS Sysvars
    35 0000006C B452                <1>     mov ah, 52h ;Get sysvars
    36 0000006E CD21                <1>     int 21h
    37 00000070 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    38                              <1> ;Call for simple internationalisation data
    39 00000077 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    40 0000007C CD21                <1>     int 21h
    41 0000007E 3CFF                <1>     cmp al, -1
    42 00000080 7412                <1>     je .skipSwitch
    43 00000082 8815(2C000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    44 00000088 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    45 0000008B 7507                <1>     jne .skipSwitch
    46 0000008D C605(2B000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    47                              <1> .skipSwitch:
    48 00000094 B800380000          <1>     mov eax, 3800h  ;Get current country data
    49 00000099 488D15(36000000)    <1>     lea rdx, ctryData
    50 000000A0 CD21                <1>     int 21h ;Write the data to the internal country table
    51                              <1> ;Now determine if this is the master copy of COMMAND.COM
    52                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    53 000000A2 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    54 000000A7 CD21                <1>     int 21h
    55 000000A9 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    56 000000AC B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    57 000000B1 CD21                <1>     int 21h
    58 000000B3 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    59 000000B6 7574                <1>     jne .skipMaster
    60                              <1> ;Ok so we are master command.com
    61                              <1> ;Now make myself the real parent
    62 000000B8 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    63 000000BF 4C8905(17000000)    <1>     mov qword [realParent], r8
    64                              <1> ;Set current Drive in COMSPEC
    65 000000C6 B800190000          <1>     mov eax, 1900h ;Get current Drive
    66 000000CB CD21                <1>     int 21h
    67 000000CD 0441                <1>     add al, "A"
    68 000000CF 8805(650F0000)      <1>     mov byte [comspecEvar.cspec], al
    69                              <1> ;Set Int 2Eh up
    70 000000D5 488D15(F8180000)    <1>     lea rdx, int2Eh
    71 000000DC B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    72 000000E1 CD21                <1>     int 21h
    73                              <1> ;Now, open and parse AUTOEXEC.BAT. Build new Master Environment here.
    74                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    75 000000E3 BB0A000000          <1>     mov ebx, 10 ;Allocate 160 bytes
    76 000000E8 B800480000          <1>     mov eax, 4800h
    77 000000ED CD21                <1>     int 21h
    78 000000EF 0F821EFFFFFF        <1>     jc .exitBad
    79                              <1> ;Set master environment as mine
    80 000000F5 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    81 000000F9 488D35(5D0F0000)    <1>     lea rsi, masterEnv
    82 00000100 4889C7              <1>     mov rdi, rax
    83 00000103 B91E000000          <1>     mov ecx, menv_len
    84 00000108 F3A4                <1>     rep movsb   ;Copy the chars over!
    85                              <1> 
    86 0000010A 488D15(41090000)    <1>     lea rdx, crlf
    87 00000111 B409                <1>     mov ah, 09h
    88 00000113 CD21                <1>     int 21h
    89 00000115 E8(2B230000)        <1>     call time
    90 0000011A E8(62220000)        <1>     call date
    91 0000011F 488D15(41090000)    <1>     lea rdx, crlf
    92 00000126 B409                <1>     mov ah, 09h
    93 00000128 CD21                <1>     int 21h
    94 0000012A EB2E                <1>     jmp short .printInit
    95                              <1> .skipMaster:    
    96                              <1> ;We now search for the master environment!!
    97                              <1>     ;Walk the parentPSP chain until we find a PSP which is its own
    98                              <1>     ; parent. This is the previous master command interpreter! This means
    99                              <1>     ; that non-master COMMAND.COM instances are not their own parents! We 
   100                              <1>     ; then set our environment ptr in the PSP to the master environment.
   101 0000012C 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
   102 00000133 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
   103 0000013B 0FB605(2C000000)    <1>     movzx eax, byte [switchChar]
   104 00000142 F2AE                <1>     repne scasb
   105 00000144 67E313              <1>     jecxz .printInit
   106 00000147 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
   107 0000014A E8(40350000)        <1>     call ucChar
   108 0000014F 3C50                <1>     cmp al, "P" ;Is it permanent switch?
   109 00000151 7507                <1>     jne .printInit
   110 00000153 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
   111                              <1> .printInit:
   112 0000015A 488D1D(F43B0000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
   113                              <1> ;Finish by printing INIT string.
   114 00000161 53                  <1>     push rbx
   115 00000162 488D153A000000      <1>     lea rdx, initString
   116 00000169 B409                <1>     mov ah, 09h
   117 0000016B CD21                <1>     int 21h ;Print init string
   118 0000016D E8(E22B0000)        <1>     call version.printVersionNumber
   119 00000172 488D1560000000      <1>     lea rdx, initString2
   120 00000179 B409                <1>     mov ah, 09h
   121 0000017B CD21                <1>     int 21h ;Print init string
   122 0000017D 5B                  <1>     pop rbx
   123                              <1>     ;Now we add the stack to the alloc and paragraph align
   124 0000017E 4881C340060000      <1>     add rbx, stackSize
   125 00000185 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   126 0000018C 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   127 00000190 48C1E304            <1>     shl rbx, 4
   128 00000194 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   129 00000197 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   130 0000019E E9(7B0F0000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   131                              <1> ;Loader Data here
   132                              <1> initString: 
   133 000001A3 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   133 000001AC 66696320436F6D7075- <1>
   133 000001B5 746572205265736561- <1>
   133 000001BE 726368285229205343- <1>
   133 000001C7 502F444F5328522920- <1>
   133 000001D0 56657273696F6E2024  <1>
   134                              <1> initString2:
   135 000001D9 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",CR,LF,"$"
   135 000001E2 202020284329436F70- <1>
   135 000001EB 797269676874205363- <1>
   135 000001F4 69656E746966696320- <1>
   135 000001FD 436F6D707574657220- <1>
   135 00000206 526573656172636820- <1>
   135 0000020F 323032342E0D0A24    <1>
   136 00000217 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   136 00000220 20444F532076657273- <1>
   136 00000229 696F6E0D0A24        <1>
    25                                  
    26                                  stackSize equ 200*8    ;200 QWORD stack
    26          ------------------       info: assembly required 1+4+2 passes

