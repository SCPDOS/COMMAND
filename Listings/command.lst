     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (41h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> netFCBShare     equ 70h
   160                              <1> noInherit       equ 80h
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> 
   163                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 24h on disk full.
   164                              <1> ;Buffering on writes
   165                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   167                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1> readOnlyFile    equ 1h
   170                              <1> hiddenFile      equ 2h
   171                              <1> systemFile      equ 4h
   172                              <1> volumeLabel     equ 8h
   173                              <1> directoryFile   equ 10h ;Directory entry
   174                              <1> archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1> charDevFastOut  equ 10h ;If set, device supports Int 29h
   182                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   183                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   185                              <1> devCharDev      equ 80h ;If set, it is a char device!
   186                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   190                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1>  
   192                              <1> ;------------------------------------------------------------------------;
   193                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   194                              <1> ; to an internal buffer, and then copying it to the specified location
   195                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   196                              <1> ; another request for the same sector from the same device is made, so 
   197                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   198                              <1> ; size, selected according to the largest detected sector size during 
   199                              <1> ; the initial loadup.
   200                              <1> ;
   201                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   202                              <1> ;
   203                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   204                              <1> ;------------------------------------------------------------------------;
   205                              <1> 
   206                              <1> struc bufferHdr
   207 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   208 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   209 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   210 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   211 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   212 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   213 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   214 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   215 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   216                              <1>     .dataarea:             ;Points to the start of the data area
   217                              <1> endstruc
   218                              <1> ;Buffer Flag equates
   219                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   220                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   221                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   222                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   223                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   224                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   225                              <1> ;Note! A buffer is marked as referenced only when the application 
   226                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   227                              <1> ;------------------------------------------------------------------------;
   228                              <1> ; Memory control block for each memory arena
   229                              <1> ;------------------------------------------------------------------------;
   230                              <1> struc mcb
   231 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   232 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   233 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   234 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   235                              <1>     .program:
   236                              <1> endstruc
   237                              <1> ;MCB equates
   238                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   239                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   240                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   241                              <1> mcbMarkCtn      equ "M"
   242                              <1> mcbMarkEnd      equ "Z"
   243                              <1> 
   244                              <1> memFirstFit     equ 0   ;First free block goes to application
   245                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   246                              <1> memLastFit      equ 2   ;Last free block goes to application
   247                              <1> 
   248                              <1> ;Owner = Para aligned address => Owning application PSP
   249                              <1> ;...To consider...
   250                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   251                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   252                              <1> ;------------------------------------------------------------------------;
   253                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   254                              <1> ; following order, thus allowing for return values to be placed in the 
   255                              <1> ; registers by accessing the caller register stack frame.
   256                              <1> ;------------------------------------------------------------------------;
   257                              <1> struc callerFrame
   258 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   259 00000008 ????????????????    <1>     .rbx    resq 1    
   260 00000010 ????????????????    <1>     .rcx    resq 1
   261 00000018 ????????????????    <1>     .rdx    resq 1
   262 00000020 ????????????????    <1>     .rsi    resq 1
   263 00000028 ????????????????    <1>     .rdi    resq 1
   264 00000030 ????????????????    <1>     .rbp    resq 1
   265 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   266 00000040 ????????????????    <1>     .r9     resq 1
   267                              <1> ;Pushed by Processor when invoked via Interrupt
   268 00000048 ????????????????    <1>     .rip    resq 1
   269 00000050 ????????????????    <1>     .cs     resq 1
   270 00000058 ????????????????    <1>     .flags  resq 1
   271                              <1> endstruc
   272                              <1> 
   273                              <1> struc dpl
   274                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   275                              <1> ; server calls
   276 00000000 ????????????????    <1>     .rax    resq 1
   277 00000008 ????????????????    <1>     .rbx    resq 1
   278 00000010 ????????????????    <1>     .rcx    resq 1
   279 00000018 ????????????????    <1>     .rdx    resq 1
   280 00000020 ????????????????    <1>     .rsi    resq 1
   281 00000028 ????????????????    <1>     .rdi    resq 1
   282 00000030 ????????????????    <1>     .r8     resq 1
   283 00000038 ????????????????    <1>     .r9     resq 1
   284 00000040 ????????????????    <1>     .align  resq 1
   285 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   286 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   287                              <1> endstruc
   288                              <1> 
   289                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   290 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   291 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   292 00000010 ????????????????    <1>     .newSFTVal      resq 1
   293 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   294 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   295 00000028 ????????????????    <1>     .newLastdrive   resq 1
   296 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   297 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   298 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   299 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   300 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   301 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   302 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc filename
   306                              <1> ;8.3 File name struct
   307 00000000 ????????????????    <1>     .fName  resb 8
   308 00000008 ??????              <1>     .fExt   resb 3
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   312 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   313 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   314 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   315 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   316 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   317 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   318 00000016 ????                <1>     .fileTime   resw 1  ;File time
   319 00000018 ????                <1>     .fileDate   resw 1  ;File date
   320 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   321 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc psp
   325 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   326 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   327 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   328 0000000A ????????????????    <1>     .oldInt22h  resq 1  ;Int 22h pointer on overlay load
   329 00000012 ????????????????    <1>     .oldInt23h  resq 1  ;Int 23h pointer on overlay load
   330 0000001A ????????????????    <1>     .oldInt24h  resq 1  ;Int 24h pointer on overlay load
   331 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   332                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   333 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   334 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   335 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 21h
   336 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   337 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   338 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   339 0000005B ??                  <1>                 resb 1  ;Reserved byte
   340                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   341                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   342                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   343                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   344                              <1> ; always used and xtraHdlSz.
   345                              <1> ;Will need to add two SYSCALLS for future expansion:
   346                              <1> ;       1) Get Program Environment Pointer
   347                              <1> ;       2) Get Command Line arguments pointer
   348                              <1> ;The below are in the same place as in DOS.
   349                              <1>     .cmdLineArgPtr: ;Symbol for future use
   350 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   351 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   352                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   353 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   354 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   355                              <1> endstruc
   356                              <1> 
   357                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   358                              <1> 
   359                              <1> struc clkStruc
   360 00000000 ????                <1>     .dateWord   resw 1
   361 00000002 ??                  <1>     .minutes    resb 1
   362 00000003 ??                  <1>     .hours      resb 1
   363 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   364 00000005 ??                  <1>     .seconds    resb 1
   365                              <1> endstruc
   366                              <1> 
   367                              <1> struc countryStruc
   368 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   369                              <1>                         ;0 = month day year hh:mm:ss
   370                              <1>                         ;1 = day month year hh:mm:ss
   371                              <1>                         ;2 = year month day hh:mm:ss
   372 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   373 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   374 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   375 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   376 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   377 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   378                              <1>                         ;0 = Symbol leads, without space
   379                              <1>                         ;1 = Symbol follows, without space
   380                              <1>                         ;2 = Symbol leads, one space
   381                              <1>                         ;3 = Symbol follows, one space
   382                              <1>                         ;4 = Symbol replace decimal separator
   383 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   384 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   385 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   386 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   387 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   388                              <1> endstruc
   389                              <1> 
   390                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   391                              <1> ;for a space of 64Gb
   392                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   393                              <1> dosLowBase  equ 600h    ;Low load address
   394                              <1> 
   395                              <1> ;Critical Error AH bitfield equates
   396                              <1> critRead    equ 0h
   397                              <1> critWrite   equ 1h
   398                              <1> critDOS     equ 0h
   399                              <1> critFAT     equ 2h
   400                              <1> critDir     equ 4h
   401                              <1> critData    equ 6h
   402                              <1> critFailOK  equ 8h
   403                              <1> critRetryOK equ 10h
   404                              <1> critIgnorOK equ 20h
   405                              <1> critCharDev equ 80h
   406                              <1> 
   407                              <1> critIgnore  equ 0
   408                              <1> critRetry   equ 1
   409                              <1> critAbort   equ 2
   410                              <1> critFail    equ 3
   411                              <1> 
   412                              <1> ;MISC ASCII control chars
   413                              <1> NUL equ 00h ;^@         | ASCII Null
   414                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   415                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   416                              <1> BEL equ 07h ;^G         | ASCII Bell
   417                              <1> BSP equ 08h ;^H         | ASCII Backspace
   418                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   419                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   420                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   421                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   422                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   423                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   424                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   425                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   426                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   427                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   428                              <1> SPC equ 20h ;Printable  | ASCII Space
   429                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   430                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   431                              <1> 
   432                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   433                              <1> ;Extended Ascii Codes
   434                              <1> eF1     equ 3Bh ;F1 second byte
   435                              <1> eF2     equ 3Ch ;F2 second byte
   436                              <1> eF3     equ 3Dh ;F3 second byte
   437                              <1> eF4     equ 3Eh ;F4 second byte
   438                              <1> eF5     equ 3Fh ;F5 second byte
   439                              <1> eF6     equ 40h ;F6 second byte
   440                              <1> eF7     equ 41h ;F7 second byte
   441                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   442                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   443                              <1> eIns    equ 52h ;Insert second byte
   444                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   445                              <1> 
   446                              <1> ;Default Configuration for the system
   447                              <1> 
   448                              <1> buffersDefault  equ 30
   449                              <1> filesDefault    equ 20
   450                              <1> fcbsDefault     equ 4
   451                              <1> safeFcbsDeflt   equ 0
   452                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       resb 5  
    66 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   resb 1
    68 00000008 ????????????????    <1>     .filename   resb 8
    69 00000010 ??????              <1>     .fileext    resb 3
    70 00000013 ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    resb 8
    73 00000020 ??????              <1>     .newExt     resb 3
    74 00000023 ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    25 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    26 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    27 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    28 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    29 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    30                              <1> endstruc
    31                              <1> 
    32                              <1> struc execProg  ;For use with EXEC-ing a child task
    33 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    34 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    35 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    36 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    37                              <1> endstruc
    38                              <1> 
    39                              <1> ;Directory attribute equates
    40                              <1>     dirReadOnly     equ 01h
    41                              <1>     dirHidden       equ 02h
    42                              <1>     dirSystem       equ 04h
    43                              <1>     dirVolumeID     equ 08h
    44                              <1>     dirDirectory    equ 10h
    45                              <1>     dirArchive      equ 20h
    46                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    47                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    48                              <1>     ;If any of the three bits are set, then ALL three bits are set
    49                              <1>     ; in addition to whatever the user passed to search for.
    50                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    51                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    11 0000002B 5C                  <1> pathSep     db "\"  ;Default path sep
    12 0000002C 2F                  <1> switchChar  db "/"  ;Default switch char
    13 0000002D 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    14 0000002E 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    15                              <1> ;Static strings, not used in command line parsing
    16 00000036 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    16 0000003F 000000000000000000- <1>
    16 00000048 000000000000000000- <1>
    16 00000051 000000000000000000- <1>
    16 0000005A 0000                <1>
    17 0000005C 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    17 00000065 000000000000000000- <1>
    17 0000006E 000000000000000000- <1>
    17 00000077 000000000000000000- <1>
    17 00000080 000000000000000000- <1>
    17 00000089 000000000000000000- <1>
    17 00000092 000000000000000000- <1>
    17 0000009B 00000000            <1>
    18                              <1> 
    19                              <1> 
    20                              <1> cmdLineStatePtr:
    21 0000009F 0000000000000000    <1> cmdStartPtr dq 0    ;Ptr to the first char for this command (may be a space)
    22 000000A7 0000000000000000    <1> cmdEndPtr   dq 0    ;Ptr to the terminating char for this command (0Dh or |)
    23 000000AF 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    24 000000B0 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    25 000000B2 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    26                              <1> 
    27                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    28                              <1> ;These variables are valid for a SINGLE command in a command line
    29                              <1> ;Next two bytes, if set to -1, flags error
    30 000000B4 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    31 000000B5 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    32                              <1> ;                    If 2, we are redirecting output to a file, by appending
    33 000000B6 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    34 000000B8 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    35                              <1> 
    36 000000BA 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    37 000000BB 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    38 000000BC 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    39                              <1> 
    40 000000BD 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    41 000000BE 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    42 000000BF 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    43                              <1> 
    44                              <1> cmdStateL equ $ - cmdStatePtr
    45                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    46                              <1> 
    47                              <1> ;Structs and strings
    48                              <1> 
    49 000000C0 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    49 000000C9 00000000000000      <1>
    50 000000D0 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    50 000000D9 000000000000000000- <1>
    50 000000E2 000000000000000000- <1>
    50 000000EB 000000000000000000- <1>
    50 000000F4 00000000000000      <1>
    51                              <1> 
    52 000000FB 000000000000000000- <1> launchBlock db execProg_size dup (0)
    52 00000104 000000000000000000- <1>
    52 0000010D 000000000000000000- <1>
    52 00000116 0000000000          <1>
    53                              <1> 
    54 0000011B 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    54 00000124 000000000000000000- <1>
    54 0000012D 000000000000000000- <1>
    54 00000136 000000000000000000- <1>
    54 0000013F 000000000000000000- <1>
    54 00000148 000000000000000000- <1>
    54 00000151 000000000000000000- <1>
    54 0000015A 000000000000000000- <1>
    54 00000163 000000000000000000- <1>
    54 0000016C 000000000000000000- <1>
    54 00000175 000000000000000000- <1>
    54 0000017E 000000000000000000- <1>
    54 00000187 000000000000000000- <1>
    54 00000190 000000000000000000- <1>
    54 00000199 00000000            <1>
    55 0000019D 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    55 000001A6 000000000000000000- <1>
    55 000001AF 000000000000000000- <1>
    55 000001B8 000000000000000000- <1>
    55 000001C1 000000000000000000- <1>
    55 000001CA 000000000000000000- <1>
    55 000001D3 000000000000000000- <1>
    55 000001DC 000000000000000000- <1>
    55 000001E5 000000000000000000- <1>
    55 000001EE 000000000000000000- <1>
    55 000001F7 000000000000000000- <1>
    55 00000200 000000000000000000- <1>
    55 00000209 000000000000000000- <1>
    55 00000212 000000000000000000- <1>
    55 0000021B 00000000            <1>
    56 0000021F 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    56 00000228 000000000000000000- <1>
    56 00000231 000000000000000000- <1>
    56 0000023A 000000000000000000- <1>
    56 00000243 000000000000000000- <1>
    56 0000024C 000000000000000000- <1>
    56 00000255 000000000000000000- <1>
    56 0000025E 000000000000000000- <1>
    56 00000267 00000000000000      <1>
    57                              <1> 
    58 0000026E 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    58 00000277 0000                <1>
    59 00000279 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    59 00000282 00000000            <1>
    60 00000286 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    60 0000028F 0000000000          <1>
    61                              <1> 
    62 00000294 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    62 0000029D 000000000000000000- <1>
    62 000002A6 000000000000000000- <1>
    62 000002AF 000000000000000000- <1>
    62 000002B8 000000000000000000- <1>
    62 000002C1 000000000000000000- <1>
    62 000002CA 000000000000000000- <1>
    62 000002D3 000000000000000000- <1>
    62 000002DC 00000000000000      <1>
    63 000002E3 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    63 000002EC 000000000000000000- <1>
    63 000002F5 000000000000000000- <1>
    63 000002FE 000000000000000000- <1>
    63 00000307 000000000000000000- <1>
    63 00000310 000000000000000000- <1>
    63 00000319 000000000000000000- <1>
    63 00000322 000000000000000000- <1>
    63 0000032B 00000000000000      <1>
    64                              <1> 
    65                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    66 00000332 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    66 0000033B 000000000000000000- <1>
    66 00000344 000000000000000000- <1>
    66 0000034D 000000000000000000- <1>
    66 00000356 000000000000000000- <1>
    66 0000035F 000000000000000000- <1>
    66 00000368 000000000000000000- <1>
    66 00000371 000000000000000000- <1>
    66 0000037A 00000000000000      <1>
    67 00000381 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    67 0000038A 000000000000000000- <1>
    67 00000393 000000000000000000- <1>
    67 0000039C 000000000000000000- <1>
    67 000003A5 000000000000000000- <1>
    67 000003AE 000000000000000000- <1>
    67 000003B7 000000000000000000- <1>
    67 000003C0 000000000000000000- <1>
    67 000003C9 00000000000000      <1>
    68                              <1> 
    69 000003D0 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    70 000003D8 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    71                              <1> 
    72 000003E0 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    72 000003E9 000000000000000000- <1>
    72 000003F2 000000000000000000- <1>
    72 000003FB 000000000000000000- <1>
    72 00000404 000000000000000000- <1>
    72 0000040D 000000000000000000- <1>
    72 00000416 000000000000000000- <1>
    72 0000041F 000000000000000000- <1>
    72 00000428 000000000000000000- <1>
    72 00000431 000000000000000000- <1>
    72 0000043A 000000000000000000- <1>
    72 00000443 000000000000000000- <1>
    72 0000044C 000000000000000000- <1>
    72 00000455 000000000000000000- <1>
    72 0000045E 00000000            <1>
    73                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    74                              <1> ; users overtyping
    75                              <1> 
    76                              <1> ;Internal Function vars
    77                              <1> ;Dir Vars
    78 00000462 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    79                              <1> ;                                   Bit[1] set => /P or /p specified
    80                              <1> ;                                   Bit[2] set => A file/path specified
    81 00000463 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    82 00000464 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    83 00000465 00                  <1> dirDrv      db 0    ;0 based drive number to use
    84 00000466 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
    84 0000046F 000000000000000000- <1>
    84 00000478 000000000000000000- <1>
    84 00000481 000000000000000000- <1>
    84 0000048A 000000000000000000- <1>
    84 00000493 000000000000000000- <1>
    84 0000049C 000000000000000000- <1>
    84 000004A5 000000000000000000- <1>
    84 000004AE 000000000000000000- <1>
    84 000004B7 000000000000000000- <1>
    84 000004C0 000000000000000000- <1>
    84 000004C9 000000000000000000- <1>
    84 000004D2 000000000000000000- <1>
    84 000004DB 000000000000000000- <1>
    84 000004E4 00000000            <1>
    85 000004E8 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
    85 000004F1 3F3F3F3F3F3F3F      <1>
    86                              <1> dirWideType equ 1
    87                              <1> dirPageType equ 2
    88                              <1> dirFileType equ 4
    89                              <1> ;Volume Vars
    90                              <1> volFcb:
    91                              <1>     istruc exFcb
    92 000004F8 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    93 000004F9 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    94 000004FF 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
    95 00000500 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
    96 00000508 3F3F3F              <1>     at exFcb.fileext,   db "???"
    97 0000050B 00000000            <1>     at exFcb.curBlock,  dd 0
    98 0000050F 00<rep 15h>         <1>     iend 
    99                              <1> 
   100                              <1> ;Time/Date vars
   101 00000524 00                  <1> td1 db 0    ;Minutes/Year
   102 00000525 00                  <1> td2 db 0    ;Hours/Zero
   103 00000526 00                  <1> td3 db 0    ;Hundredths/Day
   104 00000527 00                  <1> td4 db 0    ;Seconds/Month
   105                              <1> 
   106                              <1> ;Rename/Copy/Delete Buffers
   107                              <1> delPath:
   108 00000528 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   108 00000531 000000000000000000- <1>
   108 0000053A 000000000000000000- <1>
   108 00000543 000000000000000000- <1>
   108 0000054C 000000000000000000- <1>
   108 00000555 000000000000000000- <1>
   108 0000055E 000000000000000000- <1>
   108 00000567 000000000000000000- <1>
   108 00000570 000000000000000000- <1>
   108 00000579 000000000000000000- <1>
   108 00000582 000000000000000000- <1>
   108 0000058B 000000000000000000- <1>
   108 00000594 000000000000000000- <1>
   108 0000059D 000000000000000000- <1>
   108 000005A6 00000000            <1>
   109 000005AA 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   109 000005B3 000000000000000000- <1>
   109 000005BC 000000000000000000- <1>
   109 000005C5 000000000000000000- <1>
   109 000005CE 000000000000000000- <1>
   109 000005D7 000000000000000000- <1>
   109 000005E0 000000000000000000- <1>
   109 000005E9 000000000000000000- <1>
   109 000005F2 000000000000000000- <1>
   109 000005FB 000000000000000000- <1>
   109 00000604 000000000000000000- <1>
   109 0000060D 000000000000000000- <1>
   109 00000616 000000000000000000- <1>
   109 0000061F 000000000000000000- <1>
   109 00000628 00000000            <1>
   110 0000062C 0000000000000000    <1> srcPtr      dq 0    ;Where to copy the pattern to
   111 00000634 0000000000000000    <1> destPtr     dq 0    ;Where to copy the pattern to
   112 0000063C 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   112 00000645 2020                <1>
   113                              <1> ;Copy Handles
   114 00000647 FFFF                <1> sourceHdl   dw -1
   115 00000649 FFFF                <1> destHdl     dw -1
   116 0000064B 0000                <1> srcHdlInfo  dw 0 ;Used to save the handle device info (bit 7 Set -> Char dev)
   117                              <1> 
   118 0000064D 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   118 00000656 000000000000000000- <1>
   118 0000065F 000000000000000000- <1>
   118 00000668 000000000000000000- <1>
   118 00000671 000000000000000000- <1>
   118 0000067A 000000000000000000- <1>
   118 00000683 000000000000000000- <1>
   118 0000068C 000000000000000000- <1>
   118 00000695 000000000000000000- <1>
   118 0000069E 000000000000000000- <1>
   118 000006A7 000000000000000000- <1>
   118 000006B0 000000000000000000- <1>
   118 000006B9 000000000000000000- <1>
   118 000006C2 000000000000000000- <1>
   118 000006CB 0000                <1>
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 000006CD 03444952            <1>     db 3, "DIR"
     8 000006D1 B216                <1>     dw dir - startLbl
     9                              <1> 
    10 000006D3 024344              <1>     db 2, "CD"
    11 000006D6 871B                <1>     dw chdir - startLbl
    12                              <1> 
    13 000006D8 054348444952        <1>     db 5, "CHDIR"
    14 000006DE 871B                <1>     dw chdir - startLbl
    15                              <1> 
    16 000006E0 024D44              <1>     db 2, "MD"
    17 000006E3 021C                <1>     dw mkdir - startLbl
    18                              <1> 
    19 000006E5 054D4B444952        <1>     db 5, "MKDIR"
    20 000006EB 021C                <1>     dw mkdir - startLbl
    21                              <1> 
    22 000006ED 025244              <1>     db 2, "RD"
    23 000006F0 4E1C                <1>     dw rmdir - startLbl
    24                              <1> 
    25 000006F2 05524D444952        <1>     db 5, "RMDIR"
    26 000006F8 4E1C                <1>     dw rmdir - startLbl
    27                              <1> 
    28 000006FA 0344454C            <1>     db 3, "DEL"
    29 000006FE 3C1E                <1>     dw erase - startLbl
    30                              <1> 
    31 00000700 054552415345        <1>     db 5, "ERASE"
    32 00000706 3C1E                <1>     dw erase - startLbl
    33                              <1> 
    34 00000708 0444415445          <1>     db 4, "DATE"
    35 0000070D 7A1F                <1>     dw date - startLbl
    36                              <1> 
    37 0000070F 0454494D45          <1>     db 4, "TIME"
    38 00000714 4320                <1>     dw time - startLbl
    39                              <1> 
    40 00000716 04434F5059          <1>     db 4, "COPY"
    41 0000071B 9A1C                <1>     dw copy - startLbl
    42                              <1> 
    43 0000071D 0443545459          <1>     db 4, "CTTY"
    44 00000722 DE20                <1>     dw ctty - startLbl
    45                              <1> 
    46 00000724 03434C53            <1>     db 3, "CLS"
    47 00000728 7921                <1>     dw cls - startLbl
    48                              <1> 
    49 0000072A 05425245414B        <1>     db 5, "BREAK"
    50 00000730 EB21                <1>     dw break - startLbl
    51                              <1> 
    52 00000732 06564552494659      <1>     db 6, "VERIFY"
    53 00000739 6C22                <1>     dw verify - startLbl
    54                              <1> 
    55 0000073B 0652454E414D45      <1>     db 6, "RENAME"
    56 00000742 E922                <1>     dw rename - startLbl
    57                              <1> 
    58 00000744 0352454E            <1>     db 3, "REN"
    59 00000748 E922                <1>     dw rename - startLbl
    60                              <1>     
    61 0000074A 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 00000753 ED26                <1>     dw truename - startLbl
    63                              <1> 
    64 00000755 03564552            <1>     db 3, "VER"
    65 00000759 D328                <1>     dw version - startLbl
    66                              <1> 
    67 0000075B 03564F4C            <1>     db 3, "VOL"
    68 0000075F 1428                <1>     dw volume - startLbl
    69                              <1> 
    70 00000761 034D454D            <1>     db 3, "MEM"
    71 00000765 1729                <1>     dw memory - startLbl
    72                              <1> 
    73 00000767 0445584954          <1>     db 4, "EXIT"
    74 0000076C 002B                <1>     dw exit - startLbl
    75                              <1> 
    76 0000076E 0454595045          <1>     db 4, "TYPE"
    77 00000773 612A                <1>     dw type - startLbl
    78                              <1> 
    79 00000775 054C4142454C        <1>     db 5, "LABEL"
    80 0000077B 3E27                <1>     dw label - startLbl
    81                              <1> 
    82                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    83 0000077D 054D4B4C424C        <1>     db 5, "MKLBL"
    84 00000783 6827                <1>     dw mklbl - startLbl
    85                              <1> 
    86 00000785 05524D4C424C        <1>     db 5, "RMLBL"
    87 0000078B A327                <1>     dw rmlbl - startLbl
    88                              <1> 
    89 0000078D 05524E4C424C        <1>     db 5, "RNLBL"
    90 00000793 DE27                <1>     dw rnlbl - startLbl
    91                              <1> 
    92 00000795 05544F554348        <1>     db 5, "TOUCH"
    93 0000079B E024                <1>     dw touch - startLbl
    94                              <1> 
    95 0000079D 044A4F494E          <1>     db 4, "JOIN"
    96 000007A2 4325                <1>     dw join - startLbl
    97                              <1> 
    98 000007A4 055355425354        <1>     db 5, "SUBST"
    99 000007AA 0626                <1>     dw subst - startLbl
   100                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   101 000007AC FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 000007AD 0D0A24              <1> crlf    db  CR,LF,"$"
     3 000007B0 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 000007B5 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 000007BE 696C65206D69737369- <1>
     4 000007C7 6E670D0A24          <1>
     5 000007CC 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 000007D5 6469736B2077697468- <1>
     5 000007DE 206261746368206669- <1>
     5 000007E7 6C65                <1>
     6 000007E9 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 000007F2 737320616E79206B65- <1>
     6 000007FB 79207768656E207265- <1>
     6 00000804 6164790D0A24        <1>
     7 0000080A 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 00000813 6E64206F722066696C- <1>
     7 0000081C 65206E616D650D0A24  <1>
     8 00000825 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 0000082E 2066696C65206E616D- <1>
     8 00000837 65206F7220          <1>
     9 0000083C 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 00000845 666F756E640D0A24    <1>
    10 0000084D 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    10 00000856 656E74206469736B20- <1>
    10 0000085F 73706163650D0A24    <1>
    11 00000867 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 00000870 7669726F6E6D656E74- <1>
    11 00000879 2073706163650D0A24  <1>
    12 00000882 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 0000088B 74696F6E206572726F- <1>
    12 00000894 720D0A24            <1>
    13 00000898 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 000008A1 6F7420626520636F70- <1>
    13 000008AA 696564206F6E746F20- <1>
    13 000008B3 697473656C660D0A24  <1>
    14 000008BC 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 000008C5 662064657374696E61- <1>
    14 000008CE 74696F6E206C6F7374- <1>
    14 000008D7 206265666F72652063- <1>
    14 000008E0 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 000008E6 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 000008EF 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 000008F8 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 00000901 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 00000902 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 0000090B 65650D0A24          <1>
    21 00000910 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 00000919 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 00000922 726976652073706563- <1>
    23 0000092B 696669636174696F6E- <1>
    23 00000934 0D0A24              <1>
    24 00000937 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 00000940 6B6579207768656E20- <1>
    24 00000949 7265616479202E202E- <1>
    24 00000952 202E2024            <1>
    25 00000956 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 0000095F 6172616D657465720D- <1>
    25 00000968 0A24                <1>
    26                              <1> 
    27 0000096A 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 00000973 576564546875467269- <1>
    27 0000097C 536174              <1>
    28 0000097F 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 00000988 206461746524        <1>
    29 0000098E 43757272656E742064- <1> curDate db  "Current date is $"
    29 00000997 6174652069732024    <1>
    30 0000099F 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 000009A8 657720646174652024  <1>
    31 000009B1 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 000009BA 293A2024            <1>
    32 000009BE 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 000009C7 293A2024            <1>
    33 000009CB 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 000009D4 293A2024            <1>
    34 000009D8 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 000009E1 2074696D6524        <1>
    35 000009E7 43757272656E742074- <1> curTime db  "Current time is $"
    35 000009F0 696D652069732024    <1>
    36 000009F8 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 00000A01 65772074696D653A20- <1>
    36 00000A0A 24                  <1>
    37                              <1> 
    38 00000A0B 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000A14 7572652028592F4E29- <1>
    38 00000A1D 3F2024              <1>
    39                              <1> 
    40 00000A20 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000A29 56657273696F6E2024  <1>
    41                              <1> 
    42 00000A32 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000A3B 6E2064726976652024  <1>
    43 00000A44 2069732024          <1> volOk   db " is $"
    44 00000A49 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000A52 6162656C24          <1>
    45                              <1> 
    46 00000A57 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000A60 69726563746F72790D- <1>
    46 00000A69 0A24                <1>
    47 00000A6B 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000A74 206372656174652064- <1>
    47 00000A7D 69726563746F72790D- <1>
    47 00000A86 0A24                <1>
    48 00000A88 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000A91 6174682C206E6F7420- <1>
    48 00000A9A 6469726563746F7279- <1>
    48 00000AA3 2C0D0A              <1>
    49 00000AA6 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000AAF 6F7279206E6F742065- <1>
    49 00000AB8 6D7074790D0A24      <1>
    50 00000ABF 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000AC8 79206F66202024      <1>
    51 00000ACF 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000AD8 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    52 00000AE1 6E6965640D0A24      <1>
    53 00000AE8 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    53 00000AF1 72697665206973206E- <1>
    53 00000AFA 6F206C6F6E67657220- <1>
    53 00000B03 76616C696424        <1>
    54 00000B09 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    54 00000B12 7269766520696E2073- <1>
    54 00000B1B 656172636820706174- <1>
    54 00000B24 680D0A24            <1>
    55 00000B28 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    55 00000B31 65766963650D0A24    <1>
    56 00000B39 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    56 00000B42 20666F756E640D0A24  <1>
    57 00000B4B 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    57 00000B54 726F720D0A24        <1>
    58 00000B5A 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    58 00000B63 6F74206265206E6573- <1>
    58 00000B6C 7465640D0A24        <1>
    59 00000B72 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    59 00000B7B 6174652066696C6520- <1>
    59 00000B84 6572726F7220647572- <1>
    59 00000B8D 696E6720706970650D- <1>
    59 00000B96 0A24                <1>
    60 00000B98 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    60 00000BA1 2062696E6172792072- <1>
    60 00000BAA 656164732066726F6D- <1>
    60 00000BB3 206120646576696365- <1>
    60 00000BBC 0D0A24              <1>
    61 00000BBF 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    62 00000BC5 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    63 00000BCA 425245414B20697320- <1> breakIs db "BREAK is $"
    63 00000BD3 24                  <1>
    64 00000BD4 564552494659206973- <1> verifyIs    db "VERIFY is $"
    64 00000BDD 2024                <1>
    65 00000BDF 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    66 00000BE8 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    66 00000BF1 617468206F72206669- <1>
    66 00000BFA 6C65206E616D650D0A- <1>
    66 00000C03 24                  <1>
    67 00000C04 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    67 00000C0D 756D626572206F6620- <1>
    67 00000C16 706172616D65746572- <1>
    67 00000C1F 730D0A24            <1>
    68 00000C23 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    68 00000C2C 74696E6720746F2064- <1>
    68 00000C35 6576696365          <1>
    69 00000C3A 08200800            <1> backSpace   db BSP," ",BSP,NUL
    70                              <1> 
    71 00000C3E 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    71 00000C47 20202020202020546F- <1>
    71 00000C50 74616C207379737465- <1>
    71 00000C59 6D206D656D6F72793A- <1>
    71 00000C62 2024                <1>
    72 00000C64 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    72 00000C6D 20202020202020204D- <1>
    72 00000C76 656D6F727920757365- <1>
    72 00000C7F 6420627920444F533A- <1>
    72 00000C88 2024                <1>
    73 00000C8A 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    73 00000C93 656D6F727920757365- <1>
    73 00000C9C 64206279206170706C- <1>
    73 00000CA5 69636174696F6E733A- <1>
    73 00000CAE 2024                <1>
    74 00000CB0 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    74 00000CB9 656D6F727920726573- <1>
    74 00000CC2 657276656420627920- <1>
    74 00000CCB 68617264776172653A- <1>
    74 00000CD4 2024                <1>
    75 00000CD6 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    75 00000CDF 202020202020202020- <1>
    75 00000CE8 2020202020204D656D- <1>
    75 00000CF1 6F727920667265653A- <1>
    75 00000CFA 2024                <1>
    76 00000CFC 20627974657324      <1> memByte db " bytes$"
    77 00000D03 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    77 00000D0C 6F7420417373657274- <1>
    77 00000D15 61696E20444F532045- <1>
    77 00000D1E 6E74727920506F696E- <1>
    77 00000D27 7424                <1>
    78 00000D29 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    78 00000D32 416C6C6F636174696F- <1>
    78 00000D3B 6E204572726F7224    <1>
    79 00000D43 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    79 00000D4C 4572726F7224        <1>
    80 00000D52 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    80 00000D5B 68616C74656424      <1>
    81                              <1> 
    82 00000D62 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    82 00000D6B 206372656174652070- <1>
    82 00000D74 6970650D0A          <1>
    83                              <1> pipeErrMsgL equ $ - pipeErrMsg
    84 00000D79 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    84 00000D82 6F6E206572726F720D- <1>
    84 00000D8B 0A                  <1>
    85                              <1> redirErrMsgL   equ $ - redirErrMsg
    86                              <1> 
    87 00000D8C 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    88 00000D90 2020202024          <1> fourSpc  db "    $"
    89 00000D95 20202024            <1> threeSpc db "   $"
    90 00000D99 202024              <1> twoSpc   db "  $"
    91                              <1> 
    92 00000D9C 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    92 00000DA5 696679204F4E206F72- <1>
    92 00000DAE 204F46460D0A24      <1>
    93                              <1> 
    94 00000DB5 50524F4D50543D      <1> promptEVar  db "PROMPT="
    95 00000DBC 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
    96                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    97                              <1> ; handles and reopen CON
    98 00000DC5 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:
     3                              <1> ;This is copied into an MCB to be used as the environment!
     4                              <1> comspecEvar:
     5 00000DC9 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 00000DD1 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0  ;Part of the comspec!
     7 00000DDA 442E434F4D00        <1>
     8                              <1> pathEVar:
     9 00000DE0 504154483D0000      <1>     db "PATH=",0,0  ;End of default environment strings
    10                              <1> menv_len equ $ - masterEnv
    11                              <1> ;Master environment doesnt contain the "program name string"
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00000DE7 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00000DEA 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00000DEE C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 00000DF1 B44A                <1>     mov ah, 4Ah ;Realloc
     9 00000DF3 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00000DF6 CD21                <1>     int 21h
    11 00000DF8 EB6C                <1>     jmp short commandMain
    12                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    13 00000DFA B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    14 00000DFF CD21                <1>     int 21h
    15 00000E01 66890505F2FFFF      <1>     mov word [returnCode], ax
    16                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    17 00000E08 488D152E250000      <1>     lea rdx, critErrorHandler
    18 00000E0F 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    19 00000E13 B824250000          <1>     mov eax, 2524h
    20 00000E18 CD21                <1>     int 21h
    21 00000E1A 488D15B7270000      <1>     lea rdx, int23h
    22 00000E21 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    23 00000E25 B823250000          <1>     mov eax, 2523h
    24 00000E2A CD21                <1>     int 21h
    25 00000E2C 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    26 00000E33 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    27 00000E37 B822250000          <1>     mov eax, 2522h
    28 00000E3C CD21                <1>     int 21h
    29 00000E3E F6056AF2FFFFFF      <1>     test byte [pipeFlag], -1
    30 00000E45 0F858C000000        <1>     jnz commandMain.pipeProceed ;Skip the handle closing when pipe active
    31 00000E4B E893040000          <1>     call cleanUpRedir   ;Clean up redirection once we are done
    32                              <1> ;Close all handles from 5->MAX
    33 00000E50 0FB70DD0F1FFFF      <1>     movzx ecx, word [numHdls]
    34 00000E57 BB05000000          <1>     mov ebx, 5
    35                              <1> .handleClose:
    36 00000E5C B43E                <1>     mov ah, 3Eh ;File close
    37 00000E5E CD21                <1>     int 21h
    38 00000E60 FFC3                <1>     inc ebx ;Goto next file
    39 00000E62 39CB                <1>     cmp ebx, ecx
    40 00000E64 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    41                              <1> commandMain:
    42                              <1> ;Setup Commandline. First check if batch mode is active, then fall.
    43                              <1> ;=========================
    44                              <1> ;   BATCH HANDLING HERE
    45                              <1> ;=========================
    46 00000E66 488B2598F1FFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    47 00000E6D FC                  <1>     cld ;Ensure stringops are done the right way
    48 00000E6E C605A6F2FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    49                              <1> .inputMain:
    50 00000E75 E8DB1E0000          <1>     call printCRLF
    51                              <1> .inputMain2:
    52 00000E7A E83C220000          <1>     call clearCommandLineState
    53 00000E7F E805220000          <1>     call printPrompt
    54                              <1> 
    55 00000E84 B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    56 00000E89 CD21                <1>     int 21h
    57 00000E8B B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    58 00000E90 BA01000000          <1>     mov edx, 1      ;Start new print job
    59 00000E95 CD21                <1>     int 21h
    60 00000E97 488D157DF2FFFF      <1>     lea rdx, inBuffer
    61 00000E9E B8000A0000          <1>     mov eax, 0A00h  ;Do Buffered input
    62 00000EA3 CD21                <1>     int 21h
    63 00000EA5 E8AB1E0000          <1>     call printCRLF  ;Note we have accepted input
    64                              <1> ;First check we had something typed in of length greater than 0
    65                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    66 00000EAA 803D6BF2FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    67 00000EB1 74C7                <1>     je .inputMain2
    68                              <1>     ;Copy over the input text
    69 00000EB3 488D3561F2FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    70 00000EBA 488D3DDCF2FFFF      <1>     lea rdi, cmdBuffer
    71 00000EC1 B982000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    72 00000EC6 F3A4                <1>     rep movsb
    73                              <1> .pipeLoop:
    74 00000EC8 E846000000          <1>     call preProcessBuffer
    75 00000ECD E8BC000000          <1>     call analyseCmdline
    76 00000ED2 E8B3010000          <1>     call doCommandLine
    77                              <1> .pipeProceed:
    78 00000ED7 E807040000          <1>     call cleanUpRedir
    79 00000EDC 488B05C4F1FFFF      <1>     mov rax, qword [cmdEndPtr]
    80 00000EE3 488905B5F1FFFF      <1>     mov qword [cmdStartPtr], rax
    81 00000EEA F605BEF1FFFFFF      <1>     test byte [pipeFlag], -1  ;If we have any pipes active, we proceed here
    82 00000EF1 7482                <1>     jz .inputMain
    83 00000EF3 80380D              <1>     cmp byte [rax], CR  ;Are we done?
    84 00000EF6 0F8479FFFFFF        <1>     je .inputMain
    85 00000EFC E89F210000          <1>     call clearCommandState  ;Else, clear the command state and start again
    86 00000F01 EBC5                <1>     jmp short .pipeLoop
    87                              <1> .dfltErrExit:
    88 00000F03 488D1500F9FFFF      <1>     lea rdx, badCmd
    89 00000F0A B409                <1>     mov ah, 09h
    90 00000F0C CD21                <1>     int 21h
    91 00000F0E E962FFFFFF          <1>     jmp .inputMain
    92                              <1> 
    93                              <1> preProcessBuffer:
    94                              <1> ;Start by preprocessing the path, escape quotes and handle redirections.
    95                              <1> ;Each normal char gets copied over to psp.dta + 1 except for those special chars.
    96                              <1> ;Places the count of chars save CR in byte 0 of psp.dta.
    97                              <1> ;Places the ptr to the first byte past pipe or CR in cmdEndPtr
    98                              <1> ;Throughout: CL has char count, CH has number of quotes.
    99 00000F13 31C9                <1>     xor ecx, ecx
   100 00000F15 4C8B05F3F0FFFF      <1>     mov r8, qword [pspPtr]  ;Ensure we have our pspPtr pointing to the right place
   101 00000F1C 488B357CF1FFFF      <1>     mov rsi, qword [cmdStartPtr]
   102 00000F23 4885F6              <1>     test rsi, rsi
   103 00000F26 7507                <1>     jnz .notNewCmd
   104 00000F28 488D3570F2FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto command buffer + 2
   105                              <1> .notNewCmd:
   106 00000F2F 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   107                              <1> .countQuotes:
   108 00000F32 AC                  <1>     lodsb
   109 00000F33 3C22                <1>     cmp al, '"'
   110 00000F35 7507                <1>     jne .notQuoteToCount
   111 00000F37 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   112 00000F39 E9F4FFFFFF          <1>     jmp .countQuotes
   113                              <1> .notQuoteToCount:
   114 00000F3E 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   115 00000F40 75F0                <1>     jne .countQuotes
   116 00000F42 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   117 00000F45 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We store this nicely formatted string in psp
   118                              <1> .getChar:
   119 00000F4C AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   120 00000F4D 3C22                <1>     cmp al, '"'     ;Is char a quote?
   121 00000F4F 750E                <1>     jne .notQuote
   122 00000F51 FECD                <1>     dec ch          ;We have a quote, now decrement
   123 00000F53 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   124                              <1> .searchForClosingQuote:
   125                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   126 00000F55 AA                  <1>     stosb   ;Store char and inc rdi
   127 00000F56 FEC1                <1>     inc cl
   128 00000F58 AC                  <1>     lodsb   ;Get next char
   129 00000F59 3C22                <1>     cmp al, '"'
   130 00000F5B 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   131 00000F5D FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   132                              <1> .notQuote:
   133 00000F5F 51                  <1>     push rcx    ;Save counts, if anything goes wrong, stack is jiggled properly
   134 00000F60 E8EE040000          <1>     call checkAndSetupRedir ;Intervene redir
   135 00000F65 59                  <1>     pop rcx
   136 00000F66 7509                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   137 00000F68 7202                <1>     jc .pipeHandle      ;Store a CR in the buffer if a pipe
   138 00000F6A EBE0                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   139                              <1> .pipeHandle:
   140 00000F6C B00D                <1>     mov al, CR  ;Now store a Carriage return 
   141 00000F6E 48FFC6              <1>     inc rsi ;Ensure we remain one char past the pipe
   142                              <1> .notRedir:
   143 00000F71 AA                  <1>     stosb       ;Store char and advance rdi
   144 00000F72 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   145 00000F74 7404                <1>     je .exit
   146 00000F76 FEC1                <1>     inc cl      ;Increment char count
   147 00000F78 EBD2                <1>     jmp short .getChar    ;If not, get next char
   148                              <1> .exit:
   149 00000F7A 48FFCE              <1>     dec rsi ;move rsi to point back to terminator or one past | 
   150 00000F7D 48893523F1FFFF      <1>     mov qword [cmdEndPtr], rsi  ;Store rsi pointing to the first char past CR or |
   151 00000F84 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   152 00000F8B 880F                <1>     mov byte [rdi], cl  ;Store the count of chars in the psp buffer
   153                              <1>     return
    13                              <2> %%_ret:
    14 00000F8D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   154                              <1> 
   155                              <1> analyseCmdline:
   156                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   157                              <1> ; processes the command name into the FCB.  
   158 00000F8E 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   159 00000F95 4889F3              <1>     mov rbx, rsi            ;Save this ptr in rbx
   160 00000F98 E8CB200000          <1>     call skipDelimiters     ;Skip any preceeding separators
   161 00000F9D 488D3D7BF2FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   162 00000FA4 E80C220000          <1>     call cpDelimPathToBufz  ;Moves rsi to the first char past the delim char
   163 00000FA9 48FFCE              <1>     dec rsi ;Point it back to the delim char
   164 00000FAC E8D0000000          <1>     call .skipAndCheckCR
   165 00000FB1 7439                <1>     je .exit
   166 00000FB3 C60500F1FFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   167 00000FBA 4889F0              <1>     mov rax, rsi
   168 00000FBD 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   169 00000FC0 8805F5F0FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   170                              <1> .skipArg:
   171 00000FC6 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   172 00000FC7 3C0D                <1>     cmp al, CR
   173 00000FC9 7421                <1>     je .exit
   174 00000FCB E8A6200000          <1>     call isALdelimiter
   175 00000FD0 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   176 00000FD2 E8AA000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   177 00000FD7 7413                <1>     je .exit            ;If ZF set, this we encountered a CR
   178 00000FD9 C605DDF0FFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   179 00000FE0 4889F0              <1>     mov rax, rsi            
   180 00000FE3 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   181 00000FE6 8805D2F0FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   182                              <1> .exit:
   183                              <1> ;Before returning, we copy the command name to cmdName and make it useful
   184 00000FEC 488D3D2CF2FFFF      <1>     lea rdi, cmdPathSpec
   185 00000FF3 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   186 00000FF6 30C0                <1>     xor al, al  ;Search for the terminating null
   187 00000FF8 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   188 00000FFD F2AE                <1>     repne scasb
   189 00000FFF 48FFCF              <1>     dec rdi ;Go to the last char in the command
   190 00001002 4889FE              <1>     mov rsi, rdi
   191 00001005 FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   192                              <1> .keepSearching:
   193 00001006 AC                  <1>     lodsb
   194 00001007 3A051EF0FFFF        <1>     cmp al, byte [pathSep]
   195 0000100D 740B                <1>     je .cmdStartFnd
   196 0000100F 4839DE              <1>     cmp rsi, rbx
   197 00001012 75F2                <1>     jne .keepSearching
   198 00001014 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   199 00001017 48FFCE              <1>     dec rsi
   200                              <1> .cmdStartFnd:
   201 0000101A 48FFC6              <1>     inc rsi
   202 0000101D 48FFC6              <1>     inc rsi ;Go past the pathsep
   203 00001020 FC                  <1>     cld ;Go the sane way again
   204 00001021 488D3D5FF2FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   205 00001028 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   206 00001029 B90E000000          <1>     mov ecx, cmdNameL
   207 0000102E 30C0                <1>     xor al, al
   208 00001030 F3AA                <1>     rep stosb
   209 00001032 5F                  <1>     pop rdi
   210 00001033 31C9                <1>     xor ecx, ecx
   211 00001035 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   212                              <1> .cmdGetChar:
   213 00001036 AC                  <1>     lodsb
   214 00001037 84C0                <1>     test al, al ;Did we find the terminating null?
   215 00001039 7414                <1>     jz .nameLenFnd
   216 0000103B 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   217 0000103D 7410                <1>     je .nameLenFnd
   218 0000103F E812200000          <1>     call ucChar ;Else uppercase char
   219 00001044 AA                  <1>     stosb   ;and store it
   220 00001045 FFC1                <1>     inc ecx
   221 00001047 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   222 0000104D 72E7                <1>     jb .cmdGetChar
   223                              <1> .nameLenFnd:
   224 0000104F 880D31F2FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   225                              <1>     ;Now finally, create a FCB filespec
   226 00001055 488D3D12F2FFFF      <1>     lea rdi, fcbCmdSpec
   227 0000105C 57                  <1>     push rdi
   228 0000105D B90B000000          <1>     mov ecx, fcbNameL
   229 00001062 B020                <1>     mov al, " " ;Fill with spaces
   230 00001064 F3AA                <1>     rep stosb
   231 00001066 5F                  <1>     pop rdi
   232 00001067 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   233 00001068 E873200000          <1>     call asciiToFCB
   234 0000106D 488D35FAF1FFFF      <1>     lea rsi, fcbCmdSpec
   235 00001074 488D3DFEF1FFFF      <1>     lea rdi, cmdSpec
   236 0000107B E8DF200000          <1>     call FCBToAsciiz
   237                              <1>     return
    13                              <2> %%_ret:
    14 00001080 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   238                              <1> .skipAndCheckCR:
   239                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   240 00001081 E8E21F0000          <1>     call skipDelimiters ;Go to the next char in the input line
   241 00001086 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   242                              <1>     return
    13                              <2> %%_ret:
    14 00001089 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   243                              <1> 
   244                              <1> doCommandLine:
   245 0000108A 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   246                              <1>     ;The following check accounts for the end of a piped command
   247 00001091 803E0D              <1>     cmp byte [rsi], CR  ;If the first char is a CR, exit the pipe loop
   248                              <1>     rete    ;Do not attempt to execute if the first char is a CR
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001094 74(89)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   249 00001096 488D3D23F0FFFF      <1>     lea rdi, cmdFcb
   250 0000109D B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
   251 000010A2 CD21                <1>     int 21h
   252 000010A4 410FB79881000000    <1>     movzx ebx, word [r8 + cmdLine]    ;Get the drive specifier
   253 000010AC 80FF3A              <1>     cmp bh, ":"
   254 000010AF 7529                <1>     jne .noDriveSpecified
   255 000010B1 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   256 000010B3 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   257 000010B6 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   258 000010B9 3CFF                <1>     cmp al, -1  ;Int 21h returns AL = -1 if bad drive specified
   259 000010BB 7410                <1>     je .badDrive
   260                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   261 000010BD 803DC2F1FFFF02      <1>     cmp byte [cmdName], 2
   262 000010C4 7514                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   263 000010C6 E8571F0000          <1>     call setDrive
   264                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000010CB 74(89)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   265                              <1> .badDrive:
   266 000010CD 488D1545F8FFFF      <1>     lea rdx, badDrv
   267 000010D4 B409                <1>     mov ah, 09h
   268 000010D6 CD21                <1>     int 21h
   269 000010D8 F9                  <1>     stc
   270                              <1>     return
    13                              <2> %%_ret:
    14 000010D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   271                              <1> .noDriveSpecified:
   272                              <1> ;Now we set the two FCB's in the command line
   273 000010DA F605D9EFFFFFFF      <1>     test byte [arg1Flg], -1
   274 000010E1 744D                <1>     jz .fcbArgsDone
   275 000010E3 0FB605D1EFFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   276 000010EA 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   277 000010F1 4801C6              <1>     add rsi, rax    ;Point to first argument
   278 000010F4 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   279 000010F8 B801290000          <1>     mov eax, 2901h
   280 000010FD CD21                <1>     int 21h
   281 000010FF 8805B7EFFFFF        <1>     mov byte [arg1FCBret], al
   282 00001105 F605B1EFFFFFFF      <1>     test byte [arg2Flg], -1
   283 0000110C 7422                <1>     jz .fcbArgsDone
   284 0000110E 0FB605A9EFFFFF      <1>     movzx eax, byte [arg2Off]
   285 00001115 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   286 0000111C 4801C6              <1>     add rsi, rax    ;Point to first argument
   287 0000111F 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   288 00001123 B801290000          <1>     mov eax, 2901h
   289 00001128 CD21                <1>     int 21h
   290 0000112A 88058FEFFFFF        <1>     mov byte [arg2FCBret], al
   291                              <1> .fcbArgsDone:
   292 00001130 498D9881000000      <1>     lea rbx, [r8 + cmdLine]
   293 00001137 488D3548F1FFFF      <1>     lea rsi, cmdName
   294 0000113E B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   295 00001143 BAFFFF0000          <1>     mov edx, 0FFFFh
   296 00001148 B5FF                <1>     mov ch, -1
   297 0000114A CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   298 0000114C B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   299 00001151 BAFFFF0000          <1>     mov edx, 0FFFFh
   300 00001156 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   301 00001158 CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   302                              <1>             ;        al = 0  if the command should be executed as usual
   303 0000115A 84C0                <1>     test al, al
   304 0000115C 741D                <1>     jz .executeInternal
   305                              <1>     ;Here we execute externally and return to the prompt
   306                              <1>     ; as if it was an internal execution
   307 0000115E 488D35B6EFFFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   308 00001165 488D1D54EFFFFF      <1>     lea rbx, cmdFcb
   309 0000116C B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   310 00001171 BAFFFF0000          <1>     mov edx, 0FFFFh
   311 00001176 B5FF                <1>     mov ch, -1
   312 00001178 CD2F                <1>     int 2Fh 
   313                              <1>     return
    13                              <2> %%_ret:
    14 0000117A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   314                              <1> .executeInternal:
   315                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   316                              <1> ;rsi points after the command terminator in the command tail
   317 0000117B 488D1D4BF5FFFF      <1>     lea rbx, functionTable
   318                              <1> .nextEntry:
   319 00001182 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   320 00001185 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   321 00001188 0F84A8190000        <1>     je launchChild      ;If so, check externally now
   322 0000118E 380DF2F0FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   323 00001194 7532                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   324                              <1>     ;Here they have the same length so lets see if the name is the same
   325 00001196 56                  <1>     push rsi
   326                              <1>     ;ecx has the length to compare
   327 00001197 51                  <1>     push rcx
   328 00001198 488D7301            <1>     lea rsi, qword [rbx + 1]
   329 0000119C 488D3DE4F0FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   330 000011A3 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   331 000011A5 59                  <1>     pop rcx
   332 000011A6 5E                  <1>     pop rsi
   333 000011A7 751F                <1>     jne .gotoNextEntry
   334                              <1>     ;Here it was found both strings are equal
   335 000011A9 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   336 000011AE 480FB71F            <1>     movzx rbx, word [rdi]
   337 000011B2 488D3D47EEFFFF      <1>     lea rdi, startLbl
   338 000011B9 4801FB              <1>     add rbx, rdi
   339 000011BC FFD3                <1>     call rbx    ;Call this function...
   340                              <1>     retc    ;Always return with CF=CY on error. Error code set to -1
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000011BE 72(7A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   341 000011C0 C60546EEFFFF00      <1>     mov byte [returnCode], 0 ;Set the retcode to 0 if ok!
   342                              <1>     return  ;... and return
    13                              <2> %%_ret:
    14 000011C7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   343                              <1> .gotoNextEntry:
   344 000011C8 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   345 000011CF 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   346 000011D2 EBAE                <1>     jmp short .nextEntry
   347                              <1> .dfltErrExit:
   348 000011D4 488D152FF6FFFF      <1>     lea rdx, badCmd
   349 000011DB B409                <1>     mov ah, 09h
   350 000011DD CD21                <1>     int 21h
   351                              <1>     return
    13                              <2> %%_ret:
    14 000011DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   352                              <1> 
   353                              <1> redirFailure:
   354 000011E0 488D1592FBFFFF      <1>     lea rdx, redirErrMsg
   355 000011E7 B913000000          <1>     mov ecx, redirErrMsgL
   356 000011EC EB0C                <1>     jmp short redirPipeFailureCommon
   357                              <1> pipeFailure:
   358 000011EE 488D156DFBFFFF      <1>     lea rdx, pipeErrMsg
   359 000011F5 B917000000          <1>     mov ecx, pipeErrMsgL
   360                              <1> redirPipeFailureCommon:
   361                              <1> ;This routine is called if any problems happen during 
   362                              <1> ;This routine tries to close whatever handles are not -1 and delete
   363                              <1> ; pipe files if the pipe count is not 0
   364                              <1> ;It resets all variables and proceeds.
   365 000011FA B800400000          <1>     mov eax, 4000h  ;Write handle
   366 000011FF BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   367 00001204 CD21                <1>     int 21h
   368 00001206 31DB                <1>     xor ebx, ebx    ;Select STDIN
   369 00001208 E8C6000000          <1>     call .closeHandle
   370 0000120D FFC3                <1>     inc ebx         ;Select STDOUT
   371 0000120F E8BF000000          <1>     call .closeHandle
   372 00001214 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   373 00001219 488D15A5FBFFFF      <1>     lea rdx, conName
   374 00001220 CD21                <1>     int 21h
   375 00001222 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
   376 00001224 B800450000          <1>     mov eax, 4500h  ;DUP
   377 00001229 CD21                <1>     int 21h
   378 0000122B 66C70580EEFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   379 00001234 0FB71D7BEEFFFF      <1>     movzx ebx, word [redirSTDIN]
   380 0000123B E893000000          <1>     call .closeHandle
   381                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   382 00001240 66C7056DEEFFFFFFFF  <1>     mov word [redirSTDIN], -1
   383 00001249 0FB71D68EEFFFF      <1>     movzx ebx, word [redirSTDOUT]
   384 00001250 E87E000000          <1>     call .closeHandle
   385 00001255 66C7055AEEFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   386 0000125E 0FB71D4BEEFFFF      <1>     movzx ebx, word [pipeSTDIN]
   387 00001265 E869000000          <1>     call .closeHandle
   388 0000126A 66C7053DEEFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   389 00001273 0FB71D38EEFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   390 0000127A E854000000          <1>     call .closeHandle
   391 0000127F 66C7052AEEFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   392 00001288 C60520EEFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   393 0000128F 488D159CF0FFFF      <1>     lea rdx, qword [pipe1Filespec]
   394 00001296 803A00              <1>     cmp byte [rdx], 0
   395 00001299 7407                <1>     jz .checkOld
   396 0000129B B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   397 000012A0 CD21                <1>     int 21h
   398                              <1> .checkOld:
   399 000012A2 488D15D8F0FFFF      <1>     lea rdx, qword [pipe2Filespec]
   400 000012A9 803A00              <1>     cmp byte [rdx],0
   401 000012AC 7407                <1>     jz .pipeNamesComplete
   402 000012AE B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   403 000012B3 CD21                <1>     int 21h
   404                              <1> .pipeNamesComplete:
   405 000012B5 31C0                <1>     xor eax, eax
   406                              <1>     ;Invalidate the pointers and the paths too
   407 000012B7 48890512F1FFFF      <1>     mov qword [newPipe], rax
   408 000012BE 48890513F1FFFF      <1>     mov qword [oldPipe], rax
   409 000012C5 890567F0FFFF        <1>     mov dword [pipe1Filespec], eax
   410 000012CB 8905B0F0FFFF        <1>     mov dword [pipe2Filespec], eax
   411 000012D1 F9                  <1>     stc
   412                              <1>     return
    13                              <2> %%_ret:
    14 000012D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   413                              <1> .closeHandle:
   414 000012D3 81FBFFFFFFFF        <1>     cmp ebx, -1
   415                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000012D9 74(D2)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   416 000012DB B8003E0000          <1>     mov eax, 3E00h
   417 000012E0 CD21                <1>     int 21h
   418                              <1>     return
    13                              <2> %%_ret:
    14 000012E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   419                              <1> 
   420                              <1> cleanUpRedir:
   421                              <1> ;Cleans up the redir stuff after we are done.
   422 000012E3 0FB705C6EDFFFF      <1>     movzx eax, word [pipeSTDIN]
   423 000012EA 0FB71DC1EDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   424 000012F1 C1E310              <1>     shl ebx, 10h
   425 000012F4 09D8                <1>     or eax, ebx
   426 000012F6 3DFFFFFFFF          <1>     cmp eax, -1
   427 000012FB 750C                <1>     jne .pipe
   428 000012FD C605ABEDFFFF00      <1>     mov byte [pipeFlag], 0  ;Clear the flag
   429 00001304 E9CD000000          <1>     jmp .redirInClear   ;If no piping, skip
   430                              <1> .pipe:
   431                              <1> ;Pipe processing here
   432                              <1> ;We handle stdin, closing the redir if it is and deleting
   433                              <1> ; the redir file.
   434                              <1> ;Then we handle stdout, moving the redir to stdin.
   435 00001309 66813D9EEDFFFFFFFF  <1>     cmp word [pipeSTDIN], -1
   436 00001312 7443                <1>     je .pipeNostdin
   437                              <1>     ;We close the handle first and delete the file.
   438 00001314 0FB71D95EDFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   439 0000131B 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   440 0000131D B800460000          <1>     mov eax, 4600h
   441 00001322 CD21                <1>     int 21h
   442 00001324 0F82C4FEFFFF        <1>     jc pipeFailure
   443 0000132A B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   444 0000132F CD21                <1>     int 21h
   445 00001331 0F82B7FEFFFF        <1>     jc pipeFailure
   446 00001337 488B159AF0FFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   447 0000133E B800410000          <1>     mov eax, 4100h  ;Delete the file!
   448 00001343 CD21                <1>     int 21h
   449 00001345 0F82A3FEFFFF        <1>     jc pipeFailure
   450 0000134B C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   451 0000134E 66C70559EDFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   452                              <1> .pipeNostdin:
   453 00001357 66813D52EDFFFFFFFF  <1>     cmp word [pipeSTDOUT], -1   ;If no stdout redir, exit now
   454 00001360 7474                <1>     je .redirInClear
   455                              <1> ;Duplicate STDIN to save across pipe
   456 00001362 B800450000          <1>     mov eax, 4500h
   457 00001367 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   458 00001369 CD21                <1>     int 21h
   459 0000136B 0F827DFEFFFF        <1>     jc pipeFailure
   460 00001371 66890538EDFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   461                              <1> 
   462                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   463 00001378 B800460000          <1>     mov eax, 4600h
   464 0000137D 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   465 0000137F FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   466 00001381 CD21                <1>     int 21h
   467 00001383 0F8265FEFFFF        <1>     jc pipeFailure
   468                              <1> 
   469                              <1> ;Now return the original stdout to stdout
   470 00001389 89D9                <1>     mov ecx, ebx
   471 0000138B 0FB71D20EDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   472 00001392 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   473 00001397 CD21                <1>     int 21h
   474 00001399 0F824FFEFFFF        <1>     jc pipeFailure
   475                              <1> 
   476                              <1> ;Now close the DUP'ed STDOUT
   477 0000139F B8003E0000          <1>     mov eax, 3E00h
   478 000013A4 CD21                <1>     int 21h
   479 000013A6 0F8242FEFFFF        <1>     jc pipeFailure
   480                              <1> 
   481                              <1> ;Finally unwind STDIN to the beginning of the file
   482 000013AC B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   483 000013B1 31DB                <1>     xor ebx, ebx    ;STDIN handle
   484 000013B3 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   485 000013B5 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   486 000013B7 CD21                <1>     int 21h
   487 000013B9 0F822FFEFFFF        <1>     jc pipeFailure  ;This should never happen
   488                              <1> 
   489 000013BF 488B150AF0FFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   490 000013C6 4889150BF0FFFF      <1>     mov qword [oldPipe], rdx
   491 000013CD 66C705DCECFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   492                              <1> .redirInClear:
   493                              <1> ;Check redir in
   494 000013D6 F605D7ECFFFFFF      <1>     test byte [redirIn], -1
   495 000013DD 7433                <1>     jz .redirOutClear
   496                              <1> 
   497 000013DF 0FB71DD0ECFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   498 000013E6 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   499 000013E8 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   500 000013ED CD21                <1>     int 21h
   501 000013EF 0F82EBFDFFFF        <1>     jc redirFailure
   502 000013F5 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   503 000013FA CD21                <1>     int 21h
   504 000013FC 0F82DEFDFFFF        <1>     jc redirFailure
   505 00001402 66C705ABECFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   506 0000140B C605A2ECFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   507                              <1> .redirOutClear:
   508                              <1> ;Now check Redir Out
   509 00001412 F6059CECFFFFFF      <1>     test byte [redirOut], -1
   510                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001419 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000141B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   511                              <1> 
   512 0000141C 0FB71D95ECFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   513 00001423 B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   514 00001428 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   515 0000142D CD21                <1>     int 21h
   516 0000142F 0F82ABFDFFFF        <1>     jc redirFailure
   517 00001435 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   518 0000143A CD21                <1>     int 21h
   519 0000143C 0F829EFDFFFF        <1>     jc redirFailure
   520 00001442 66C7056DECFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   521 0000144B C60563ECFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   522                              <1>     return
    13                              <2> %%_ret:
    14 00001452 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   523                              <1> 
   524                              <1> checkAndSetupRedir:
   525                              <1> ;Checks and sets up redir as appropriate
   526                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   527                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   528                              <1> ;Output: ZF=NZ => No redir
   529                              <1> ;        ZF=ZY => Redir
   530                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   531                              <1> ;CF=CY if pipe set or an embedded CR found. rsi points to first char past it!
   532 00001453 57                  <1>     push rdi
   533 00001454 3C3C                <1>     cmp al, "<"
   534 00001456 740F                <1>     je .inputRedir
   535 00001458 3C3E                <1>     cmp al, ">"
   536 0000145A 7473                <1>     je .outputRedir
   537 0000145C 3C7C                <1>     cmp al, "|"
   538 0000145E 0F841B010000        <1>     je .pipeSetup
   539 00001464 F8                  <1>     clc
   540                              <1> .redirExit:
   541 00001465 5F                  <1>     pop rdi
   542                              <1>     return
    13                              <2> %%_ret:
    14 00001466 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   543                              <1> .inputRedir:
   544 00001467 C60546ECFFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   545 0000146E 488D3D1FEEFFFF      <1>     lea rdi, rdrInFilespec
   546 00001475 E8EE1B0000          <1>     call skipDelimiters ;Skip spaces between < and the filespec
   547 0000147A E8361D0000          <1>     call cpDelimPathToBufz
   548 0000147F 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char as 
   549                              <1>     ;Setup the redir here for STDIN
   550 00001482 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   551 00001484 B800450000          <1>     mov eax, 4500h
   552 00001489 CD21                <1>     int 21h
   553 0000148B 0F827A010000        <1>     jc .redirError
   554 00001491 6689051EECFFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   555 00001498 488D15F5EDFFFF      <1>     lea rdx, rdrInFilespec
   556 0000149F B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   557 000014A4 CD21                <1>     int 21h
   558 000014A6 0F825F010000        <1>     jc .redirError
   559 000014AC 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   560 000014AE 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   561 000014B1 B800460000          <1>     mov eax, 4600h
   562 000014B6 CD21                <1>     int 21h
   563 000014B8 0F824D010000        <1>     jc .redirError
   564 000014BE B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   565 000014C3 CD21                <1>     int 21h
   566 000014C5 0F8240010000        <1>     jc .redirError
   567 000014CB 30C0                <1>     xor al, al
   568 000014CD EB96                <1>     jmp short .redirExit
   569                              <1> .outputRedir:
   570 000014CF C605DFEBFFFF01      <1>     mov byte [redirOut], 1
   571 000014D6 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   572 000014D9 7509                <1>     jne .notDouble
   573 000014DB FE05D4EBFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   574 000014E1 48FFC6              <1>     inc rsi ;Go past it too
   575                              <1> .notDouble:
   576 000014E4 488D3DF8EDFFFF      <1>     lea rdi, rdrOutFilespec
   577 000014EB E8781B0000          <1>     call skipDelimiters
   578 000014F0 E8C01C0000          <1>     call cpDelimPathToBufz
   579 000014F5 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char as 
   580                              <1>     ;Setup the redir here for STDOUT
   581 000014F8 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   582 000014FD B800450000          <1>     mov eax, 4500h
   583 00001502 CD21                <1>     int 21h
   584 00001504 0F8201010000        <1>     jc .redirError
   585 0000150A 668905A7EBFFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   586 00001511 488D15CBEDFFFF      <1>     lea rdx, rdrOutFilespec
   587 00001518 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   588 0000151D CD21                <1>     int 21h
   589 0000151F 730F                <1>     jnc .fileExists
   590 00001521 B8003C0000          <1>     mov eax, 3C00h
   591 00001526 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   592 00001528 CD21                <1>     int 21h
   593 0000152A 0F82DB000000        <1>     jc .redirError
   594                              <1> .fileExists:
   595 00001530 B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   596 00001535 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   597 00001538 B800460000          <1>     mov eax, 4600h  ;DUP2
   598 0000153D CD21                <1>     int 21h
   599 0000153F 0F82C6000000        <1>     jc .redirError
   600 00001545 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   601 0000154A CD21                <1>     int 21h
   602 0000154C 0F82B9000000        <1>     jc .redirError
   603 00001552 803D5CEBFFFF01      <1>     cmp byte [redirOut], 1
   604 00001559 7416                <1>     je .dontAppend
   605                              <1>     ;Here we move the file pointer to the end of the file
   606 0000155B 31D2                <1>     xor edx, edx    ;Low order 32 bits
   607 0000155D 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   608 0000155F BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   609 00001564 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   610 00001569 CD21                <1>     int 21h
   611 0000156B 0F829A000000        <1>     jc .redirError
   612                              <1> .dontAppend:
   613 00001571 C6053DEBFFFFFF      <1>     mov byte [redirOut], -1
   614 00001578 30C0                <1>     xor al, al
   615 0000157A E9E6FEFFFF          <1>     jmp .redirExit
   616                              <1> .pipeSetup:
   617                              <1> ;We only need to setup STDOUT redirection to the pipe file
   618 0000157F 56                  <1>     push rsi    ;Save rsi pointing to char past |
   619 00001580 E8E31A0000          <1>     call skipDelimiters ;Check if this is a double ||
   620 00001585 803E7C              <1>     cmp byte [rsi], "|" 
   621 00001588 5E                  <1>     pop rsi
   622 00001589 7475                <1>     je .pipeError
   623 0000158B 488D15A0EDFFFF      <1>     lea rdx, pipe1Filespec
   624 00001592 803A00              <1>     cmp byte [rdx], 0
   625 00001595 740C                <1>     jz .pathFound
   626 00001597 488D15E3EDFFFF      <1>     lea rdx, pipe2Filespec
   627 0000159E 803A00              <1>     cmp byte [rdx], 0
   628 000015A1 755D                <1>     jnz .pipeError
   629                              <1> .pathFound:
   630 000015A3 48891526EEFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   631 000015AA B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   632 000015AF BB01000000          <1>     mov ebx, 1
   633 000015B4 CD21                <1>     int 21h
   634 000015B6 7248                <1>     jc .pipeError
   635 000015B8 668905F3EAFFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   636 000015BF E86A1A0000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   637 000015C4 0441                <1>     add al, "A"
   638 000015C6 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   639 000015CB 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   640 000015CD 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   641 000015CF 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   642 000015D1 B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   643 000015D6 CD21                <1>     int 21h
   644 000015D8 7226                <1>     jc .pipeError
   645                              <1>     ;AX has the handle for this file now, this will become STDOUT
   646                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   647 000015DA 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   648 000015DD B901000000          <1>     mov ecx, 1
   649 000015E2 B800460000          <1>     mov eax, 4600h
   650 000015E7 CD21                <1>     int 21h
   651 000015E9 7215                <1>     jc .pipeError
   652 000015EB B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   653 000015F0 CD21                <1>     int 21h
   654 000015F2 720C                <1>     jc .pipeError
   655 000015F4 C605B4EAFFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   656 000015FB 30C0                <1>     xor al, al  ;Set ZF
   657 000015FD F9                  <1>     stc         ;But also CF to indicate pipe!
   658 000015FE 5F                  <1>     pop rdi
   659                              <1>     return
    13                              <2> %%_ret:
    14 000015FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   660                              <1> .pipeError:
   661 00001600 5F                  <1>     pop rdi 
   662 00001601 E8E8FBFFFF          <1>     call pipeFailure
   663 00001606 E95BF8FFFF          <1>     jmp commandMain ;Fully reset the state if a pipe failure occurs.
   664                              <1> .redirError:
   665 0000160B 5F                  <1>     pop rdi 
   666 0000160C E8CFFBFFFF          <1>     call redirFailure
   667 00001611 E950F8FFFF          <1>     jmp commandMain ;Fully reset the state if a redir failure occurs.
   668                              <1> 
   669                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   670                              <1> ;Input: rsi points to the count byte of a command line
   671 00001616 4150                <1>     push r8
   672 00001618 4151                <1>     push r9
   673 0000161A B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   674 0000161C CD21                <1>     int 21h
   675 0000161E 52                  <1>     push rdx    ;Save on the stack
   676 0000161F 488D1DDAE8FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   677 00001626 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   678 00001628 CD21                <1>     int 21h
   679 0000162A 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   680 0000162D 4989D9              <1>     mov r9, rbx
   681 00001630 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   682 00001637 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   683 0000163C F348A5              <1>     rep movsq   ;Copy command line over
   684                              <1>     ;call doCommandLine
   685 0000163F 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   686 00001640 B450                <1>     mov ah, 50h ;Set Current PSP
   687 00001642 CD21                <1>     int 21h
   688 00001644 4159                <1>     pop r9
   689 00001646 4158                <1>     pop r8
   690 00001648 48CF                <1>     iretq
    17                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badAccError:
     7 0000164A 488D1587F4FFFF      <1>     lea rdx, accDenMsg
     8 00001651 EB46                <1>     jmp short badCmn
     9                              <1> noSelfCopyError:
    10 00001653 488D153EF2FFFF      <1>     lea rdx, noSelfCopy
    11 0000165A EB3D                <1>     jmp short badCmn
    12                              <1> badParamError:
    13 0000165C 488D15F3F2FFFF      <1>     lea rdx, badParm
    14 00001663 EB34                <1>     jmp short badCmn
    15                              <1> badDriveError:
    16 00001665 488D15ADF2FFFF      <1>     lea rdx, badDrv
    17 0000166C EB2B                <1>     jmp short badCmn
    18                              <1> badArgError:
    19 0000166E 488D158FF5FFFF      <1>     lea rdx, badArgs
    20 00001675 EB22                <1>     jmp short badCmn
    21                              <1> badFileError:
    22 00001677 488D156AF5FFFF      <1>     lea rdx, badSpec
    23 0000167E EB19                <1>     jmp short badCmn
    24                              <1> badDupFnf:
    25                              <1> ;Hybrid error message
    26 00001680 488D159EF1FFFF      <1>     lea rdx, dupName
    27 00001687 EB10                <1>     jmp short badCmn
    28                              <1> badFnf:
    29 00001689 488D15ACF1FFFF      <1>     lea rdx, fnfMsg
    30 00001690 EB07                <1>     jmp short badCmn
    31                              <1> badDirError:
    32 00001692 488D15BEF3FFFF      <1>     lea rdx, badDir
    33                              <1> badCmn:
    34 00001699 C6056DE9FFFFFF      <1>     mov byte [returnCode], -1    ;Return code defaults to -1 if error (for now!)
    35 000016A0 B800090000          <1>     mov eax, 0900h
    36 000016A5 CD21                <1>     int 21h
    37 000016A7 F9                  <1>     stc ;Return with CY => Error occured
    38                              <1>     return  ;This will be made nuanced later, to agree with DOS behaviour
    13                              <2> %%_ret:
    14 000016A8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    39                              <1> badCmdError:
    40 000016A9 488D155AF1FFFF      <1>     lea rdx, badCmd
    41 000016B0 EBE7                <1>     jmp short badCmn
    42                              <1> dir:
    43                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    44 000016B2 C605A9EDFFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    45 000016B9 C605A3EDFFFF00      <1>     mov byte [dirLineCtr], 0
    46 000016C0 C6059DEDFFFF00      <1>     mov byte [dirFileCtr], 0
    47 000016C7 C60598EDFFFF00      <1>     mov byte [dirSrchDir], 0
    48 000016CE 66C70509EDFFFF0000  <1>     mov word [searchSpec], 0
    49 000016D7 488D3D0AEEFFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    50 000016DE C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    51 000016E1 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    51 000016EA 3F                  <1>
    52 000016EB 48894701            <1>     mov qword [rdi + fcb.filename], rax
    53 000016EF C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    54                              <1>     ;Start by scanning for the switches
    55 000016F6 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    56 000016FD 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    57 00001700 E863190000          <1>     call skipDelimiters ;Skip leading delimiters
    58 00001705 4881C603000000      <1>     add rsi, 3  ;Go past the DIR
    59                              <1> .scanNew:
    60 0000170C E857190000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    61 00001711 AC                  <1>     lodsb   ;Get this char
    62 00001712 3C0D                <1>     cmp al, CR
    63 00001714 744D                <1>     je .scanDone
    64 00001716 3A0510E9FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    65 0000171C 7524                <1>     jne .notSwitch
    66 0000171E AC                  <1>     lodsb   ;Get the next char
    67 0000171F E832190000          <1>     call ucChar
    68 00001724 3C57                <1>     cmp al, "W"
    69 00001726 7509                <1>     jne .notWide
    70 00001728 800D33EDFFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    71 0000172F EBDB                <1>     jmp short .scanNew
    72                              <1> .notWide:
    73 00001731 3C50                <1>     cmp al, "P"
    74 00001733 0F8523FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    75 00001739 800D22EDFFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    76 00001740 EBCA                <1>     jmp short .scanNew
    77                              <1> .notSwitch:
    78 00001742 F60519EDFFFF04      <1>     test byte [dirFlags], dirFileType
    79 00001749 0F850DFFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    80                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    81 0000174F 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    82 00001752 E8B91A0000          <1>     call copyArgumentToSearchSpec   
    83 00001757 48FFCE              <1>     dec rsi ;Point back to the terminator char
    84 0000175A 800D01EDFFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    85 00001761 EBA9                <1>     jmp short .scanNew
    86                              <1> .scanDone:
    87 00001763 F605F8ECFFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    88 0000176A 7438                <1>     jz .currentDrv
    89                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
    90 0000176C 488D356DECFFFF      <1>     lea rsi, searchSpec
    91 00001773 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
    92 00001777 752B                <1>     jne .currentDrv
    93                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
    94 00001779 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
    95 0000177E 498D785C            <1>     lea rdi, qword [r8 + fcb1]
    96 00001782 B801290000          <1>     mov eax, 2901h   ;Parse filename
    97 00001787 CD21                <1>     int 21h
    98 00001789 3CFF                <1>     cmp al, -1
    99 0000178B 0F84D4FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   100                              <1>     ;Else the drive in the fcb is valid
   101 00001791 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   102 00001796 84C0                <1>     test al, al
   103 00001798 740A                <1>     jz .currentDrv
   104 0000179A FEC8                <1>     dec al  ;Convert to 0 based drive number
   105 0000179C 8805C3ECFFFF        <1>     mov byte [dirDrv], al
   106 000017A2 EB0B                <1>     jmp short .dirPrintVol
   107                              <1> .currentDrv:
   108 000017A4 E885180000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   109 000017A9 8805B6ECFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   110                              <1> .dirPrintVol:
   111 000017AF 488D352AECFFFF      <1>     lea rsi, searchSpec
   112                              <1> ;Now construct the path on dirSrchDir.
   113 000017B6 488D3DA9ECFFFF      <1>     lea rdi, dirSrchDir
   114 000017BD 0FB605A1ECFFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   115 000017C4 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   116 000017C6 0441                <1>     add al, "A" ;Turn into a letter
   117 000017C8 B43A                <1>     mov ah, ":"
   118 000017CA 66AB                <1>     stosw   ;Store X: into the search path
   119 000017CC B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   120 000017D1 CD2F                <1>     int 2fh
   121 000017D3 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   122 000017D5 0F848AFEFFFF        <1>     je badDriveError
   123                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   124 000017DB 8A054AE8FFFF        <1>     mov al, byte [pathSep]
   125 000017E1 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   126 000017E3 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   127 000017E5 AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   128 000017E6 FEC2                <1>     inc dl  ;Increment by 1
   129 000017E8 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   130 000017EB B800470000          <1>     mov eax, 4700h  ;Print current working directory
   131 000017F0 CD21                <1>     int 21h
   132 000017F2 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   133                              <1>     ;rsi points to the first char in the provided path.
   134                              <1>     ;rdi points to the first char of the cwd.
   135 000017F5 31C0                <1>     xor eax, eax
   136                              <1> .goToEndOfCwd:
   137                              <1> ;Move to the end of the string, could use repne?
   138 000017F7 3807                <1>     cmp byte [rdi], al
   139 000017F9 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   140 000017FB 48FFC7              <1>     inc rdi
   141 000017FE EBF7                <1>     jmp short .goToEndOfCwd
   142                              <1> .prepCopy:
   143 00001800 8A0525E8FFFF        <1>     mov al, byte [pathSep]
   144 00001806 3806                <1>     cmp byte [rsi], al
   145 00001808 7412                <1>     je .copyPathLoop
   146 0000180A B43A                <1>     mov ah, ":"
   147 0000180C 86C4                <1>     xchg al, ah
   148 0000180E 663947FE            <1>     cmp word [rdi - 2], ax
   149 00001812 7408                <1>     je .copyPathLoop
   150 00001814 88E0                <1>     mov al, ah
   151 00001816 3847FF              <1>     cmp byte [rdi - 1], al
   152 00001819 7401                <1>     je .copyPathLoop
   153 0000181B AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   154                              <1> .copyPathLoop:
   155 0000181C AC                  <1>     lodsb
   156 0000181D 3A0508E8FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   157 00001823 7509                <1>     jne .checkDot  ;If not, store it
   158                              <1> .lpPathseps:
   159 00001825 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   160 00001827 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   161 00001829 48FFC6              <1>     inc rsi
   162 0000182C EBF7                <1>     jmp short .lpPathseps
   163                              <1> .checkDot:
   164 0000182E 3C2E                <1>     cmp al, "."
   165 00001830 7407                <1>     je .dots
   166                              <1> .store:
   167 00001832 AA                  <1>     stosb
   168 00001833 84C0                <1>     test al, al ;Was the char we just copied a null?
   169 00001835 7472                <1>     jz .exitPathCopy
   170 00001837 EBE3                <1>     jmp short .copyPathLoop
   171                              <1> .dots:
   172                              <1>     ;Here handle dot and dot dot
   173                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   174                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   175                              <1>     ; by 1. If it is null, go to top of loop.
   176                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   177 00001839 8A25ECE7FFFF        <1>     mov ah, byte [pathSep]
   178 0000183F 3867FF              <1>     cmp byte [rdi - 1], ah  
   179 00001842 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   180 00001844 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   181 00001846 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   182 00001849 7413                <1>     je .twoDot
   183                              <1>     ;This is only a "current dir" when next char is pathsep or null
   184 0000184B 3A25DAE7FFFF        <1>     cmp ah, byte [pathSep]
   185 00001851 7406                <1>     je .skipThisPathsep
   186 00001853 84E4                <1>     test ah, ah
   187 00001855 74C5                <1>     jz .copyPathLoop
   188 00001857 EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   189                              <1> .skipThisPathsep:
   190                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   191 00001859 48FFC6              <1>     inc rsi ;Point to the pathsep
   192 0000185C EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   193                              <1> .twoDot:
   194                              <1>     ;Woohoo, this works!
   195 0000185E 48FFC6              <1>     inc rsi ;Move past the second dot
   196 00001861 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   197 00001863 3A25C2E7FFFF        <1>     cmp ah, byte [pathSep]
   198 00001869 7408                <1>     je .tdOk
   199 0000186B 84E4                <1>     test ah, ah
   200 0000186D 0F85E9FDFFFF        <1>     jne badParamError
   201                              <1> .tdOk:
   202 00001873 8A05B2E7FFFF        <1>     mov al, byte byte [pathSep]
   203 00001879 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   204 0000187D 0F84D9FDFFFF        <1>     je badParamError
   205 00001883 4881EF02000000      <1>     sub rdi, 2
   206 0000188A 31C9                <1>     xor ecx, ecx
   207 0000188C FFC9                <1>     dec ecx
   208 0000188E FD                  <1>     std
   209 0000188F F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   210 00001891 FC                  <1>     cld
   211 00001892 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   212 00001899 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   213 0000189B 0F847BFFFFFF        <1>     jz .copyPathLoop
   214 000018A1 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   215 000018A4 E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   216                              <1> .exitPathCopy:
   217                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   218 000018A9 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   219 000018B0 8A0575E7FFFF        <1>     mov al, byte [pathSep]
   220 000018B6 B43A                <1>     mov ah, ":"
   221 000018B8 86C4                <1>     xchg al, ah
   222 000018BA 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   223 000018BE 7409                <1>     je .skipOverwrite
   224 000018C0 88E0                <1>     mov al, ah
   225 000018C2 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   226 000018C4 7503                <1>     jne .skipOverwrite
   227 000018C6 C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   228                              <1> .skipOverwrite:
   229 000018C9 488D3596EBFFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   230 000018D0 4889F7              <1>     mov rdi, rsi
   231 000018D3 B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   232 000018D8 CD2F                <1>     int 2fh
   233 000018DA E83E190000          <1>     call scanForWildcards
   234 000018DF 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   235 000018E1 4889F2              <1>     mov rdx, rsi
   236 000018E4 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   237 000018E8 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   238                              <1> .notNull:
   239 000018EA E8F5190000          <1>     call setDTA ;Set the DTA
   240 000018EF B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   241 000018F4 B8004E0000          <1>     mov eax, 4E00h ;Find first
   242 000018F9 CD21                <1>     int 21h
   243 000018FB 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   244                              <1> ;Now we have searched for the file, is a directory?
   245 000018FD F605E1E7FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   246 00001904 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   247                              <1>     ;Here we are searching IN a directory. Default search pattern!
   248 00001906 31C0                <1>     xor eax, eax
   249 00001908 31C9                <1>     xor ecx, ecx
   250 0000190A FFC9                <1>     dec ecx
   251 0000190C F2AE                <1>     repne scasb
   252 0000190E 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   253 00001911 EB40                <1>     jmp short .wcDefaultSearch
   254                              <1> .wcSearchPattern:
   255                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   256                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   257 00001913 31C0                <1>     xor eax, eax
   258 00001915 31C9                <1>     xor ecx, ecx
   259 00001917 FFC9                <1>     dec ecx
   260 00001919 F2AE                <1>     repne scasb ;Scan forwards
   261                              <1>     ;Here rdi points past the null at the end
   262 0000191B 8A050AE7FFFF        <1>     mov al, byte [pathSep]
   263 00001921 31C9                <1>     xor ecx, ecx
   264 00001923 FFC9                <1>     dec ecx
   265 00001925 FD                  <1>     std ;Search backwards
   266 00001926 F2AE                <1>     repne scasb
   267 00001928 FC                  <1>     cld ;Search forwards again
   268 00001929 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   269 0000192C 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   270 00001930 7503                <1>     jne .wcsp1
   271 00001932 48FFC7              <1>     inc rdi ;Go one char forwards
   272                              <1> .wcsp1:
   273                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   274 00001935 57                  <1>     push rdi
   275 00001936 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   276 00001938 7503                <1>     jne .wcsp2
   277 0000193A 48FFC7              <1>     inc rdi
   278                              <1> .wcsp2:
   279 0000193D 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   280 00001940 488D3DA1EBFFFF      <1>     lea rdi, dirSrchFCB
   281 00001947 B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   282 0000194C CD21                <1>     int 21h
   283 0000194E 5F                  <1>     pop rdi
   284 0000194F 31C0                <1>     xor eax, eax
   285 00001951 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   286                              <1> .wcDefaultSearch:
   287 00001953 0FB6050BEBFFFF      <1>     movzx eax, byte [dirDrv] 
   288 0000195A E8030F0000          <1>     call volume.dirEP
   289 0000195F 488D1559F1FFFF      <1>     lea rdx, dirMain    ;Print message intro
   290 00001966 B409                <1>     mov ah, 09h
   291 00001968 CD21                <1>     int 21h
   292 0000196A C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   293 0000196D 488D15F2EAFFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   294 00001974 B409                <1>     mov ah, 09h
   295 00001976 CD21                <1>     int 21h
   296 00001978 C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   297 0000197B 488D152EEEFFFF      <1>     lea rdx, crlf2
   298 00001982 B409                <1>     mov ah, 09h
   299 00001984 CD21                <1>     int 21h
   300                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   301                              <1> ;rdi points to the terminating null
   302 00001986 8A059FE6FFFF        <1>     mov al, byte [pathSep]
   303 0000198C 3847FF              <1>     cmp byte [rdi - 1], al
   304 0000198F 7403                <1>     je .root
   305 00001991 48FFC7              <1>     inc rdi
   306                              <1> .root:
   307 00001994 48FFCF              <1>     dec rdi ;Point back to the pathsep
   308 00001997 AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   309 00001998 488D354AEBFFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   310 0000199F E8BB170000          <1>     call FCBToAsciiz    ;Terminates for free
   311 000019A4 E801000000          <1>     call .searchForFile
   312                              <1>     return
    13                              <2> %%_ret:
    14 000019A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   313                              <1> 
   314                              <1> .searchForFile:
   315 000019AA E835190000          <1>     call setDTA
   316 000019AF B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   317 000019B4 488D15ABEAFFFF      <1>     lea rdx, dirSrchDir
   318 000019BB B8004E0000          <1>     mov eax, 4E00h ;Find first
   319 000019C0 CD21                <1>     int 21h
   320 000019C2 720B                <1>     jc .dirNoMoreFiles
   321                              <1> .findNext:
   322 000019C4 E878000000          <1>     call .dirPrintFileData  ;Print the file information
   323 000019C9 B44F                <1>     mov ah, 4Fh
   324 000019CB CD21                <1>     int 21h
   325 000019CD 73F5                <1>     jnc .findNext 
   326                              <1> .dirNoMoreFiles:
   327 000019CF F6058CEAFFFF01      <1>     test byte [dirFlags], dirWideType
   328 000019D6 740B                <1>     jz .dirNoEndNewLine
   329 000019D8 488D15CEEDFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   330 000019DF B409                <1>     mov ah, 09h
   331 000019E1 CD21                <1>     int 21h
   332                              <1> .dirNoEndNewLine:
   333                              <1>     ;Now we print the number of files and the number of bytes on the disk
   334 000019E3 488D15A6F3FFFF      <1>     lea rdx, fourSpc
   335 000019EA B409                <1>     mov ah, 09h
   336 000019EC CD21                <1>     int 21h
   337 000019EE B409                <1>     mov ah, 09h ;Print four Spaces twice
   338 000019F0 CD21                <1>     int 21h
   339 000019F2 0FB6056BEAFFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   340 000019F9 E833180000          <1>     call printDecimalWord
   341 000019FE 488D15F3EEFFFF      <1>     lea rdx, dirOk
   342 00001A05 B409                <1>     mov ah, 09h
   343 00001A07 CD21                <1>     int 21h
   344 00001A09 488D1585F3FFFF      <1>     lea rdx, threeSpc
   345 00001A10 B409                <1>     mov ah, 09h
   346 00001A12 CD21                <1>     int 21h
   347 00001A14 B800360000          <1>     mov eax, 3600h ;Get disk info
   348 00001A19 8A1546EAFFFF        <1>     mov dl, byte [dirDrv]
   349 00001A1F FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   350 00001A21 CD21                <1>     int 21h ;Get disk free space info
   351 00001A23 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   352 00001A26 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   353 00001A29 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   354 00001A2B F7E1                <1>     mul ecx ;Get bytes per cluster
   355 00001A2D 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   356                              <1>     ;rax now has the number of free bytes on the disk
   357 00001A30 E8FC170000          <1>     call printDecimalWord
   358 00001A35 488D15C6EEFFFF      <1>     lea rdx, bytesOk
   359 00001A3C B409                <1>     mov ah, 09h
   360 00001A3E CD21                <1>     int 21h
   361                              <1>     return
    13                              <2> %%_ret:
    14 00001A40 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   362                              <1> 
   363                              <1> .dirPrintFileData:
   364                              <1> ;Use fcbCmdSpec to build the file name with space
   365                              <1> ;Start by print the name (same for both cases)
   366                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   367 00001A41 F6059DE6FFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   368                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001A48 75(40)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   369 00001A4A 488D359DE6FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   370 00001A51 488D3D16E8FFFF      <1>     lea rdi, fcbCmdSpec
   371 00001A58 E894160000          <1>     call asciiFilenameToFCB
   372 00001A5D 488D150AE8FFFF      <1>     lea rdx, fcbCmdSpec
   373 00001A64 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   374 00001A69 BB01000000          <1>     mov ebx, 1  ;STDOUT
   375 00001A6E B440                <1>     mov ah, 40h ;Write handle
   376 00001A70 CD21                <1>     int 21h
   377 00001A72 52                  <1>     push rdx
   378 00001A73 B220                <1>     mov dl, " "
   379 00001A75 B402                <1>     mov ah, 02h ;Print char
   380 00001A77 CD21                <1>     int 21h
   381 00001A79 5A                  <1>     pop rdx
   382 00001A7A 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   383 00001A81 B903000000          <1>     mov ecx, 3  ;Print three chars
   384 00001A86 BB01000000          <1>     mov ebx, 1  ;STDOUT
   385 00001A8B B440                <1>     mov ah, 40h ;Write handle
   386 00001A8D CD21                <1>     int 21h
   387 00001A8F F605CCE9FFFF01      <1>     test byte [dirFlags], dirWideType
   388 00001A96 0F85A8000000        <1>     jnz .widePrint
   389                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   390                              <1>     ;Now check if a DIR
   391 00001A9C F60542E6FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   392 00001AA3 7418                <1>     jz .dirPrintNotDir
   393 00001AA5 488D1564EEFFFF      <1>     lea rdx, dirLbl
   394 00001AAC B409                <1>     mov ah, 09h
   395 00001AAE CD21                <1>     int 21h
   396 00001AB0 488D15DEF2FFFF      <1>     lea rdx, threeSpc
   397 00001AB7 B409                <1>     mov ah, 09h
   398 00001AB9 CD21                <1>     int 21h
   399 00001ABB EB4F                <1>     jmp short .dirPrintFileDT
   400                              <1> .dirPrintNotDir:
   401                              <1> ;Here we print the file size
   402 00001ABD B220                <1>     mov dl, " "
   403 00001ABF B402                <1>     mov ah, 02h
   404 00001AC1 CD21                <1>     int 21h
   405 00001AC3 8B0521E6FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   406 00001AC9 E8D4170000          <1>     call getDecimalWord
   407 00001ACE 4889CB              <1>     mov rbx, rcx
   408 00001AD1 51                  <1>     push rcx
   409 00001AD2 480FCB              <1>     bswap rbx
   410 00001AD5 B908000000          <1>     mov ecx, 8
   411                              <1> .dirPrintFileSizePrep:
   412 00001ADA 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   413 00001ADC 7514                <1>     jne .dirPrintFileSize
   414 00001ADE B402                <1>     mov ah, 02h
   415 00001AE0 B220                <1>     mov dl, " "
   416 00001AE2 CD21                <1>     int 21h
   417 00001AE4 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   418 00001AE8 FFC9                <1>     dec ecx
   419 00001AEA 81F901000000        <1>     cmp ecx, 1
   420 00001AF0 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   421                              <1> .dirPrintFileSize:
   422 00001AF2 5B                  <1>     pop rbx
   423                              <1> .dirPrintFileSizeLoop:
   424 00001AF3 88DA                <1>     mov dl, bl
   425 00001AF5 B402                <1>     mov ah, 02h
   426 00001AF7 CD21                <1>     int 21h
   427 00001AF9 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   428 00001AFD FFC9                <1>     dec ecx
   429 00001AFF 75F2                <1>     jnz .dirPrintFileSizeLoop
   430 00001B01 488D1591F2FFFF      <1>     lea rdx, twoSpc
   431 00001B08 B409                <1>     mov ah, 09h
   432 00001B0A CD21                <1>     int 21h
   433                              <1> .dirPrintFileDT:
   434 00001B0C B220                <1>     mov dl, " "
   435 00001B0E B402                <1>     mov ah, 02h
   436 00001B10 CD21                <1>     int 21h
   437 00001B12 0FB705CFE5FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   438 00001B19 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   439 00001B1B E844120000          <1>     call printDate
   440 00001B20 488D1572F2FFFF      <1>     lea rdx, twoSpc
   441 00001B27 B409                <1>     mov ah, 09h
   442 00001B29 CD21                <1>     int 21h
   443 00001B2B 0FB705B4E5FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   444 00001B32 E84F130000          <1>     call printTime
   445 00001B37 488D156FECFFFF      <1>     lea rdx, crlf
   446 00001B3E B409                <1>     mov ah, 09h
   447 00001B40 CD21                <1>     int 21h
   448 00001B42 EB0B                <1>     jmp short .dirPrintNameExit
   449                              <1> .widePrint:
   450                              <1> ;If /W, print name space ext space space space space
   451 00001B44 488D1545F2FFFF      <1>     lea rdx, fourSpc
   452 00001B4B B409                <1>     mov ah, 09h ;Print string
   453 00001B4D CD21                <1>     int 21h
   454                              <1> .dirPrintNameExit:
   455 00001B4F FE050FE9FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   456 00001B55 FE0508E9FFFF        <1>     inc byte [dirLineCtr]
   457 00001B5B 803D01E9FFFF17      <1>     cmp byte [dirLineCtr], 23
   458                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001B62 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001B64 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   459 00001B65 488D15CBEDFFFF      <1>     lea rdx, pauseMes
   460 00001B6C B409                <1>     mov ah, 09h
   461 00001B6E CD21                <1>     int 21h
   462 00001B70 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   463 00001B72 CD21                <1>     int 21h
   464 00001B74 C605E8E8FFFF00      <1>     mov byte [dirLineCtr], 0
   465 00001B7B 488D152BECFFFF      <1>     lea rdx, crlf   ;Force new line
   466 00001B82 B409                <1>     mov ah, 09h
   467 00001B84 CD21                <1>     int 21h
   468                              <1>     return
    13                              <2> %%_ret:
    14 00001B86 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   469                              <1> 
   470                              <1> chdir:
   471 00001B87 F6052CE5FFFFFF      <1>     test byte [arg1Flg], -1
   472 00001B8E 754D                <1>     jnz .changeDir
   473                              <1>     ;Print CWD
   474                              <1> .printCWD:
   475 00001B90 E8D3130000          <1>     call putCWDInPrompt ;Exactly the same procedure
   476 00001B95 E8BB110000          <1>     call printCRLF
   477                              <1>     return
    13                              <2> %%_ret:
    14 00001B9A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   478                              <1> .printDiskCWD:
   479                              <1> ;Print CWD for a specified drive
   480 00001B9B 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   481 00001B9F 88D0                <1>     mov al, dl
   482 00001BA1 0440                <1>     add al, "@" ;Get the UC letter
   483 00001BA3 B43A                <1>     mov ah, ":"
   484 00001BA5 488D3D34E8FFFF      <1>     lea rdi, searchSpec
   485 00001BAC 66AB                <1>     stosw   ;Store X:, rdi+=2
   486 00001BAE 8A0577E4FFFF        <1>     mov al, byte [pathSep]
   487 00001BB4 AA                  <1>     stosb   ;Store pathSep, inc rdi
   488 00001BB5 B447                <1>     mov ah, 47h ;Get Current Working Directory
   489 00001BB7 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   490 00001BBA CD21                <1>     int 21h
   491 00001BBC E88B140000          <1>     call strlen
   492 00001BC1 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   493 00001BC7 B440                <1>     mov ah, 40h ;Write to handle
   494 00001BC9 BB01000000          <1>     mov ebx, 1  ;STDOUT
   495 00001BCE 488D150BE8FFFF      <1>     lea rdx, searchSpec
   496 00001BD5 CD21                <1>     int 21h
   497 00001BD7 E879110000          <1>     call printCRLF
   498                              <1>     return
    13                              <2> %%_ret:
    14 00001BDC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   499                              <1> .changeDir:
   500 00001BDD 8A05D9E4FFFF        <1>     mov al, byte [arg1FCBret]
   501 00001BE3 3CFF                <1>     cmp al, -1 
   502 00001BE5 0F847AFAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   503 00001BEB E808160000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   504 00001BF0 488D15E9E7FFFF      <1>     lea rdx, searchSpec
   505 00001BF7 B43B                <1>     mov ah, 3Bh ;CHDIR
   506 00001BF9 CD21                <1>     int 21h
   507 00001BFB 0F8291FAFFFF        <1>     jc badDirError
   508                              <1>     return
    13                              <2> %%_ret:
    14 00001C01 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   509                              <1> 
   510                              <1> mkdir:
   511 00001C02 F605B1E4FFFFFF      <1>     test byte [arg1Flg], -1
   512 00001C09 0F845FFAFFFF        <1>     jz badArgError
   513 00001C0F F605A7E4FFFFFF      <1>     test byte [arg2Flg], -1
   514 00001C16 0F8552FAFFFF        <1>     jnz badArgError
   515                              <1>     ;We have exactly one argument
   516 00001C1C 8A059AE4FFFF        <1>     mov al, byte [arg1FCBret]
   517 00001C22 3CFF                <1>     cmp al, -1 
   518 00001C24 0F843BFAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   519 00001C2A E8C9150000          <1>     call buildCommandPath
   520 00001C2F 488D15AAE7FFFF      <1>     lea rdx, searchSpec
   521 00001C36 B800390000          <1>     mov eax, 3900h  ;MKDIR
   522 00001C3B CD21                <1>     int 21h
   523                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001C3D 73(01)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   524                              <1> .badMake:   ;Else, bad make
   525 00001C3F 488D1525EEFFFF      <1>     lea rdx, badMD
   526 00001C46 B800090000          <1>     mov eax, 0900h
   527 00001C4B CD21                <1>     int 21h
   528                              <1>     return
    13                              <2> %%_ret:
    14 00001C4D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   529                              <1> 
   530                              <1> rmdir:
   531 00001C4E F60565E4FFFFFF      <1>     test byte [arg1Flg], -1
   532 00001C55 0F8413FAFFFF        <1>     jz badArgError
   533 00001C5B F6055BE4FFFFFF      <1>     test byte [arg2Flg], -1
   534 00001C62 0F8506FAFFFF        <1>     jnz badArgError
   535                              <1>     ;We have exactly one argument
   536 00001C68 8A054EE4FFFF        <1>     mov al, byte [arg1FCBret]
   537 00001C6E 3CFF                <1>     cmp al, -1 
   538 00001C70 0F84EFF9FFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   539 00001C76 E87D150000          <1>     call buildCommandPath
   540 00001C7B 488D155EE7FFFF      <1>     lea rdx, searchSpec
   541 00001C82 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   542 00001C87 CD21                <1>     int 21h
   543                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001C89 73(4D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   544                              <1> .badRemove:   ;Else, bad make
   545 00001C8B 488D15F6EDFFFF      <1>     lea rdx, badRD
   546 00001C92 B800090000          <1>     mov eax, 0900h
   547 00001C97 CD21                <1>     int 21h
   548                              <1>     return
    13                              <2> %%_ret:
    14 00001C99 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   549                              <1> 
   550                              <1> copy:
   551 00001C9A F60519E4FFFFFF      <1>     test byte [arg1Flg], -1
   552 00001CA1 0F84C7F9FFFF        <1>     jz badArgError
   553 00001CA7 F6050FE4FFFFFF      <1>     test byte [arg2Flg], -1
   554 00001CAE 0F84BAF9FFFF        <1>     jz badArgError
   555 00001CB4 0FB60500E4FFFF      <1>     movzx eax, byte [arg1Off]
   556 00001CBB 4C8B054DE3FFFF      <1>     mov r8, [pspPtr]
   557 00001CC2 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   558 00001CC9 4889F3              <1>     mov rbx, rsi    ;Save the ptr to the start of the string in rbx
   559 00001CCC 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   560 00001CCF 488D3D52E8FFFF      <1>     lea rdi, srcSpec
   561 00001CD6 E8DA140000          <1>     call cpDelimPathToBufz    
   562 00001CDB 0FB605DCE3FFFF      <1>     movzx eax, byte [arg2Off]
   563 00001CE2 4889DE              <1>     mov rsi, rbx    ;Get back the start of the ptr
   564 00001CE5 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   565 00001CE8 488D3DBBE8FFFF      <1>     lea rdi, destSpec
   566 00001CEF E8C1140000          <1>     call cpDelimPathToBufz   
   567                              <1> ;Before we open, we check if the two filenames are equal
   568                              <1> ; If so, crap out.
   569 00001CF4 488D352DE8FFFF      <1>     lea rsi, srcSpec
   570 00001CFB 488D3DA8E8FFFF      <1>     lea rdi, destSpec
   571 00001D02 B81E120000          <1>     mov eax, 121Eh
   572 00001D07 CD2F                <1>     int 2Fh
   573 00001D09 0F84D3000000        <1>     jz .sameFilename
   574                              <1>     ;Open source with read permission
   575                              <1>     ;Open destination with write permission
   576 00001D0F 488D1512E8FFFF      <1>     lea rdx, srcSpec
   577 00001D16 B8003D0000          <1>     mov eax, 3D00h  ;Read open
   578 00001D1B CD21                <1>     int 21h
   579 00001D1D 0F8239F9FFFF        <1>     jc badParamError
   580 00001D23 6689051DE9FFFF      <1>     mov word [sourceHdl], ax
   581                              <1> 
   582 00001D2A 0FB7D8              <1>     movzx ebx, ax   ;For bx
   583 00001D2D B800440000          <1>     mov eax, 4400h  ;Get device info in dx
   584 00001D32 CD21                <1>     int 21h
   585 00001D34 66891510E9FFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
   586                              <1> 
   587 00001D3B 488D1568E8FFFF      <1>     lea rdx, destSpec
   588 00001D42 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   589 00001D47 31C9                <1>     xor ecx, ecx    ;No file attributes
   590 00001D49 CD21                <1>     int 21h
   591 00001D4B 0F82B8000000        <1>     jc .badExit
   592 00001D51 668905F1E8FFFF      <1>     mov word [destHdl], ax
   593 00001D58 31F6                <1>     xor esi, esi
   594 00001D5A 488D15ECE8FFFF      <1>     lea rdx, copyBuffer
   595                              <1> .copyLoop:
   596 00001D61 B980000000          <1>     mov ecx, 128
   597 00001D66 0FB71DDAE8FFFF      <1>     movzx ebx, word [sourceHdl]
   598 00001D6D B43F                <1>     mov ah, 3Fh ;Read
   599 00001D6F CD21                <1>     int 21h
   600 00001D71 0F8292000000        <1>     jc .badExit
   601 00001D77 85C0                <1>     test eax, eax
   602 00001D79 743A                <1>     jz .okExit
   603 00001D7B 01C6                <1>     add esi, eax
   604 00001D7D 89C1                <1>     mov ecx, eax
   605 00001D7F 0FB71DC3E8FFFF      <1>     movzx ebx, word [destHdl]
   606 00001D86 B440                <1>     mov ah, 40h ;Write
   607 00001D88 CD21                <1>     int 21h
   608 00001D8A 727D                <1>     jc .badExit
   609 00001D8C 3D80000000          <1>     cmp eax, 128    ;Did we read 128 chars?
   610 00001D91 74CE                <1>     je .copyLoop
   611                              <1>     ;If not char dev, exit
   612 00001D93 66F705AFE8FFFF8000  <1>     test word [srcHdlInfo], 80h ;Char dev bit set?
   613 00001D9C 7417                <1>     jz .okExit
   614                              <1>     ;Is handle in cooked or binary mode?
   615 00001D9E 66F705A4E8FFFF2000  <1>     test word [srcHdlInfo], 20h
   616 00001DA7 750C                <1>     jnz .okExit
   617                              <1>     ;Here the char dev must be in cooked mode. Check if the last char was ^Z
   618 00001DA9 09C0                <1>     or eax, eax ;Clear upper bits in eax
   619 00001DAB 488D7C02FF          <1>     lea rdi, qword [rdx + rax - 1]  ;Point to the last char in the buffer
   620 00001DB0 803F1A              <1>     cmp byte [rdi], EOF ;Was this EOF?
   621 00001DB3 75AC                <1>     jne .copyLoop   ;Jump if not
   622                              <1> .okExit:
   623 00001DB5 E832000000          <1>     call .leaveCopyClose
   624 00001DBA 488D15ECE9FFFF      <1>     lea rdx, crlf
   625 00001DC1 B409                <1>     mov ah, 09h
   626 00001DC3 CD21                <1>     int 21h
   627 00001DC5 488D15C4EFFFFF      <1>     lea rdx, fourSpc
   628 00001DCC B409                <1>     mov ah, 09h
   629 00001DCE CD21                <1>     int 21h
   630 00001DD0 B402                <1>     mov ah, 02h
   631 00001DD2 B231                <1>     mov dl, "1" ;1 File(s) copied
   632 00001DD4 CD21                <1>     int 21h
   633 00001DD6 488D1509EBFFFF      <1>     lea rdx, copyOk
   634 00001DDD B409                <1>     mov ah, 09h
   635 00001DDF CD21                <1>     int 21h
   636                              <1>     return
    13                              <2> %%_ret:
    14 00001DE1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   637                              <1> .sameFilename:
   638 00001DE2 E805000000          <1>     call .leaveCopyClose ;Close the handles
   639 00001DE7 E967F8FFFF          <1>     jmp noSelfCopyError
   640                              <1> .leaveCopyClose:
   641 00001DEC 668B1D54E8FFFF      <1>     mov bx, word [sourceHdl]
   642 00001DF3 B8003E0000          <1>     mov eax, 3E00h
   643 00001DF8 CD21                <1>     int 21h
   644 00001DFA 668B1D48E8FFFF      <1>     mov bx, word [destHdl]
   645 00001E01 B8003E0000          <1>     mov eax, 3E00h
   646 00001E06 CD21                <1>     int 21h
   647                              <1>     return
    13                              <2> %%_ret:
    14 00001E08 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   648                              <1> .badExit:
   649                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   650 00001E09 668B1D37E8FFFF      <1>     mov bx, word [sourceHdl]
   651 00001E10 6681FBFFFF          <1>     cmp bx, -1
   652 00001E15 7407                <1>     je .skipSource
   653 00001E17 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   654 00001E1C CD21                <1>     int 21h
   655                              <1> .skipSource:
   656 00001E1E 668B1D24E8FFFF      <1>     mov bx, word [destHdl]
   657 00001E25 6681FBFFFF          <1>     cmp bx, -1
   658 00001E2A 0F842CF8FFFF        <1>     je badParamError
   659 00001E30 B8003E0000          <1>     mov eax, 3E00h
   660 00001E35 CD21                <1>     int 21h
   661 00001E37 E920F8FFFF          <1>     jmp badParamError
   662                              <1> 
   663                              <1> erase:
   664 00001E3C F60577E2FFFFFF      <1>     test byte [arg1Flg], -1
   665 00001E43 0F8425F8FFFF        <1>     jz badArgError
   666 00001E49 E896140000          <1>     call setDTA     ;Start by resetting the DTA
   667 00001E4E E8A5130000          <1>     call buildCommandPath   ;Get the relative path to the file
   668                              <1> .dirLp:
   669 00001E53 488D3D86E5FFFF      <1>     lea rdi, searchSpec
   670 00001E5A E8DC120000          <1>     call findLastPathComponant
   671 00001E5F 4889FE              <1>     mov rsi, rdi    ;Save this as the source
   672 00001E62 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
   673 00001E66 B03F                <1>     mov al, "?"
   674                              <1>     ;Store question marks in the name field
   675 00001E68 57                  <1>     push rdi
   676 00001E69 48FFC7              <1>     inc rdi ;Goto the first char
   677 00001E6C B90B000000          <1>     mov ecx, 11
   678 00001E71 F3AA                <1>     rep stosb
   679 00001E73 5F                  <1>     pop rdi
   680 00001E74 4889F2              <1>     mov rdx, rsi    ;Save the ptr
   681 00001E77 B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
   682 00001E7C CD21                <1>     int 21h
   683 00001E7E 3C01                <1>     cmp al, 1
   684 00001E80 0F859C000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
   685                              <1>     ;Else, we now copy back the search pattern over the last componant!
   686                              <1>     ;No dirs to handle in here
   687 00001E86 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
   688 00001E8A 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
   689 00001E8D E8CD120000          <1>     call FCBToAsciiz    ;Null terminates for free
   690                              <1>     ;Count the number of ?'s, if 11, we print the message
   691 00001E92 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
   692 00001E96 31C9                <1>     xor ecx, ecx
   693                              <1> .wcScan:
   694 00001E98 AC                  <1>     lodsb
   695 00001E99 3C3F                <1>     cmp al, "?"
   696 00001E9B 752F                <1>     jne .endCount
   697 00001E9D FFC1                <1>     inc ecx
   698 00001E9F 81F90B000000        <1>     cmp ecx, 11
   699 00001EA5 75F1                <1>     jne .wcScan
   700                              <1> .ynmsg:
   701 00001EA7 488D155DEBFFFF      <1>     lea rdx, ynMes
   702 00001EAE E8A90E0000          <1>     call printString
   703 00001EB3 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   704 00001EB5 CD21                <1>     int 21h ;Get char in al
   705 00001EB7 E89A110000          <1>     call ucChar ;Uppercase the char
   706 00001EBC 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
   707 00001EBE 7407                <1>     je .endCount1
   708 00001EC0 3C4E                <1>     cmp al, "N"
   709                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001EC2 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001EC4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   710 00001EC5 EBE0                <1>     jmp short .ynmsg    ;Else, tell me what you want!!!
   711                              <1> .endCount1:
   712 00001EC7 E8890E0000          <1>     call printCRLF
   713                              <1> .endCount:
   714                              <1>     ;Now we copy our search template pathstring to delPath
   715 00001ECC 488D3D55E6FFFF      <1>     lea rdi, delPath
   716 00001ED3 488D3506E5FFFF      <1>     lea rsi, searchSpec ;Source the chars from here
   717 00001EDA E863110000          <1>     call strcpy2         ;Copy the string over to delPath
   718                              <1> .findFile:
   719                              <1>     ;Now we find first/find next our way through the files
   720 00001EDF 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
   721 00001EE2 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
   722 00001EE4 B8004E0000          <1>     mov eax, 4E00h  ;Find first
   723 00001EE9 CD21                <1>     int 21h
   724 00001EEB 0F8298F7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   725                              <1>     ;Now the file was found, we copy the name over, delete and keep going
   726 00001EF1 E845120000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
   727 00001EF6 488D35F1E1FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   728                              <1> .delNextFile:
   729                              <1> ;rsi and rdi dont move here
   730 00001EFD E840110000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
   731 00001F02 488D151FE6FFFF      <1>     lea rdx, delPath
   732 00001F09 B800410000          <1>     mov eax, 4100h  ;Delete File 
   733 00001F0E CD21                <1>     int 21h         ;If this fails to delete it, fail silently
   734 00001F10 488D15C9E4FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
   735 00001F17 B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
   736 00001F1C CD21                <1>     int 21h
   737 00001F1E 73DD                <1>     jnc .delNextFile    
   738 00001F20 F8                  <1>     clc ;Clear carry to indicate success
   739                              <1>     return
    13                              <2> %%_ret:
    14 00001F21 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   740                              <1> .noWildcard:
   741                              <1>     ;Here we just check that the file was not a directory. If it was, we add
   742                              <1>     ; a \*.*<NUL> over the null terminator
   743 00001F22 488D15B7E4FFFF      <1>     lea rdx, searchSpec
   744 00001F29 B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
   745 00001F2E B8004E0000          <1>     mov eax, 4E00h  ;Find first
   746 00001F33 CD21                <1>     int 21h
   747 00001F35 0F824EF7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   748 00001F3B F605A3E1FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   749 00001F42 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
   750                              <1>     ;Else, we are dealing with a dir
   751 00001F44 4889D7              <1>     mov rdi, rdx
   752 00001F47 31C9                <1>     xor ecx, ecx
   753 00001F49 FFC9                <1>     dec ecx
   754 00001F4B F2AE                <1>     repne scasb ;Go to the end of the line!
   755 00001F4D 48FFCF              <1>     dec rdi
   756 00001F50 0FB605D4E0FFFF      <1>     movzx eax, byte [pathSep]
   757 00001F57 AA                  <1>     stosb
   758 00001F58 B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
   759 00001F5D AB                  <1>     stosd
   760 00001F5E E9F0FEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
   761                              <1> .delMain:   ;Call with rdx -> buffer!
   762 00001F63 B800410000          <1>     mov eax, 4100h  ;Delete File 
   763 00001F68 CD21                <1>     int 21h
   764                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001F6A 73(21)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   765 00001F6C 3C05                <1>     cmp al, errAccDen
   766 00001F6E 0F84D6F6FFFF        <1>     je badAccError ;If the file is RO, fail!
   767 00001F74 E9FEF6FFFF          <1>     jmp badFileError
   768                              <1>     return
    13                              <2> %%_ret:
    14 00001F79 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   769                              <1> date:
   770 00001F7A 488D150DEAFFFF      <1>     lea rdx, curDate
   771 00001F81 B409                <1>     mov ah, 09h
   772 00001F83 CD21                <1>     int 21h
   773 00001F85 B42A                <1>     mov ah, 2Ah ;DOS get date
   774 00001F87 CD21                <1>     int 21h
   775                              <1> 	;AL = day of the week (0=Sunday)
   776                              <1> 	;CX = year (1980-2099)
   777                              <1> 	;DH = month (1-12)
   778                              <1> 	;DL = day (1-31)
   779 00001F89 66890D94E5FFFF      <1>     mov word [td1], cx
   780 00001F90 881590E5FFFF        <1>     mov byte [td3], dl
   781 00001F96 88358BE5FFFF        <1>     mov byte [td4], dh
   782 00001F9C 0FB6C0              <1>     movzx eax, al
   783 00001F9F 89C3                <1>     mov ebx, eax
   784 00001FA1 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   785 00001FA3 01D8                <1>     add eax, ebx ;Make it 3 times 
   786 00001FA5 488D15BEE9FFFF      <1>     lea rdx, dayName
   787 00001FAC 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   788 00001FB0 B903000000          <1>     mov ecx, 3  ;Print three chars
   789 00001FB5 BB01000000          <1>     mov ebx, 1  ;STDOUT
   790 00001FBA B440                <1>     mov ah, 40h ;Write to handle
   791 00001FBC CD21                <1>     int 21h
   792 00001FBE B220                <1>     mov dl, " "
   793 00001FC0 B402                <1>     mov ah, 02h
   794 00001FC2 CD21                <1>     int 21h
   795                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   796                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   797                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   798 00001FC4 0FB70559E5FFFF      <1>     movzx eax, word [td1]   ;Get this word
   799 00001FCB C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   800 00001FCE 0FB61D52E5FFFF      <1>     movzx ebx, byte [td4]
   801 00001FD5 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   802 00001FD8 09D8                <1>     or eax, ebx ;Add this date to eax
   803 00001FDA 0FB61D45E5FFFF      <1>     movzx ebx, byte [td3]
   804 00001FE1 09D8                <1>     or eax, ebx
   805 00001FE3 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   806 00001FE8 E8770D0000          <1>     call printDate
   807                              <1> 
   808 00001FED 488D15ABE9FFFF      <1>     lea rdx, newDate
   809 00001FF4 B409                <1>     mov ah, 09h
   810 00001FF6 CD21                <1>     int 21h
   811 00001FF8 488D15BFE9FFFF      <1>     lea rdx, ukDate
   812 00001FFF 488D05ABE9FFFF      <1>     lea rax, usDate
   813 00002006 488D1DBEE9FFFF      <1>     lea rbx, jpDate
   814 0000200D 803D22E0FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   815 00002014 480F47D3            <1>     cmova rdx, rbx
   816 00002018 480F42D0            <1>     cmovb rdx, rax
   817 0000201C B409                <1>     mov ah, 09h
   818 0000201E CD21                <1>     int 21h
   819                              <1> 
   820 00002020 488D15F4E0FFFF      <1>     lea rdx, inBuffer
   821 00002027 C6027E              <1>     mov byte [rdx], 126 ;Enter a string of up to 126 chars in length
   822 0000202A B40A                <1>     mov ah, 0Ah
   823 0000202C CD21                <1>     int 21h
   824 0000202E 52                  <1>     push rdx
   825 0000202F 488D1577E7FFFF      <1>     lea rdx, crlf
   826 00002036 B409                <1>     mov ah, 09h
   827 00002038 CD21                <1>     int 21h
   828 0000203A 5A                  <1>     pop rdx
   829 0000203B 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   830                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000203F 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002041 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   831                              <1>     return
    13                              <2> %%_ret:
    14 00002042 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   832                              <1> 
   833                              <1> time:
   834 00002043 488D159DE9FFFF      <1>     lea rdx, curTime
   835 0000204A B409                <1>     mov ah, 09h
   836 0000204C CD21                <1>     int 21h
   837 0000204E B42C                <1>     mov ah, 2Ch ;DOS get time
   838 00002050 CD21                <1>     int 21h
   839                              <1>     ;CH = hour (0-23)
   840                              <1> 	;CL = minutes (0-59)
   841                              <1> 	;DH = seconds (0-59)
   842                              <1> 	;DL = hundredths (0-99)
   843 00002052 880DCCE4FFFF        <1>     mov byte [td1], cl
   844 00002058 882DC7E4FFFF        <1>     mov byte [td2], ch
   845 0000205E 8815C2E4FFFF        <1>     mov byte [td3], dl
   846 00002064 8835BDE4FFFF        <1>     mov byte [td4], dh
   847 0000206A 0FB6C5              <1>     movzx eax, ch
   848 0000206D E8860E0000          <1>     call printTime.printHours
   849                              <1> 
   850 00002072 8A15CBDFFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   851 00002078 B402                <1>     mov ah, 02h
   852 0000207A CD21                <1>     int 21h
   853                              <1> 
   854 0000207C 0FB605A1E4FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   855 00002083 E8600E0000          <1>     call printTime.printMinutesAlt
   856                              <1> 
   857 00002088 8A15B5DFFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   858 0000208E B402                <1>     mov ah, 02h
   859 00002090 CD21                <1>     int 21h
   860                              <1> 
   861 00002092 0FB6058EE4FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   862 00002099 E84A0E0000          <1>     call printTime.printMinutesAlt
   863                              <1> 
   864 0000209E B22E                <1>     mov dl, "."
   865 000020A0 B402                <1>     mov ah, 02h
   866 000020A2 CD21                <1>     int 21h
   867                              <1> 
   868 000020A4 0FB6057BE4FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   869 000020AB E8380E0000          <1>     call printTime.printMinutesAlt
   870                              <1> 
   871 000020B0 488D1541E9FFFF      <1>     lea rdx, newTime
   872 000020B7 B409                <1>     mov ah, 09h
   873 000020B9 CD21                <1>     int 21h
   874                              <1> 
   875 000020BB 488D1559E0FFFF      <1>     lea rdx, inBuffer
   876 000020C2 C6027E              <1>     mov byte [rdx], 126 ;Enter a string of up to 126 chars in length
   877 000020C5 B40A                <1>     mov ah, 0Ah
   878 000020C7 CD21                <1>     int 21h
   879 000020C9 52                  <1>     push rdx
   880 000020CA 488D15DCE6FFFF      <1>     lea rdx, crlf
   881 000020D1 B409                <1>     mov ah, 09h
   882 000020D3 CD21                <1>     int 21h
   883 000020D5 5A                  <1>     pop rdx
   884 000020D6 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   885                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000020DA 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000020DC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   886                              <1>     return
    13                              <2> %%_ret:
    14 000020DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   887                              <1> ctty:
   888 000020DE F605D5DFFFFFFF      <1>     test byte [arg1Flg], -1
   889 000020E5 0F8483F5FFFF        <1>     jz badArgError
   890 000020EB F605CBDFFFFFFF      <1>     test byte [arg2Flg], -1
   891 000020F2 0F8576F5FFFF        <1>     jnz badArgError
   892 000020F8 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   893 000020FF 0FB605B5DFFFFF      <1>     movzx eax, byte [arg1Off]
   894 00002106 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   895 00002109 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   896 0000210D 750F                <1>     jne .noDrive
   897 0000210F 0FB605A6DFFFFF      <1>     movzx eax, byte [arg1FCBret]
   898 00002116 3CFF                <1>     cmp al, -1
   899 00002118 0F8447F5FFFF        <1>     je badDriveError
   900                              <1> .noDrive:
   901                              <1>     ;Now we open the provided file
   902 0000211E E8ED100000          <1>     call copyArgumentToSearchSpec
   903 00002123 488D15B6E2FFFF      <1>     lea rdx, searchSpec
   904 0000212A B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   905 0000212F CD21                <1>     int 21h
   906 00002131 0F8240F5FFFF        <1>     jc badFileError
   907 00002137 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   908 0000213A B800440000          <1>     mov eax, 4400h  ;Get device word
   909 0000213F CD21                <1>     int 21h
   910 00002141 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   911 00002144 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   912                              <1>     ;Now we set this handle to be STDIO
   913 00002146 80CA03              <1>     or dl, 3    ;Set STDIO bits
   914 00002149 30F6                <1>     xor dh, dh
   915 0000214B B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   916 00002150 CD21                <1>     int 21h
   917                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   918 00002152 31C9                <1>     xor ecx, ecx    ;STDIN
   919 00002154 B446                <1>     mov ah, 46h
   920 00002156 CD21                <1>     int 21h
   921 00002158 FFC1                <1>     inc ecx         ;STDOUT
   922 0000215A B446                <1>     mov ah, 46h
   923 0000215C CD21                <1>     int 21h
   924 0000215E FFC1                <1>     inc ecx         ;STDERR
   925 00002160 B446                <1>     mov ah, 46h
   926 00002162 CD21                <1>     int 21h
   927 00002164 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   928 00002166 CD21                <1>     int 21h
   929                              <1>     return
    13                              <2> %%_ret:
    14 00002168 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   930                              <1> .badCharDev:
   931 00002169 488D15B8E9FFFF      <1>     lea rdx, badDev
   932 00002170 B409                <1>     mov ah, 09h
   933 00002172 CD21                <1>     int 21h
   934 00002174 B43E                <1>     mov ah, 3Eh ;Close opened handle
   935 00002176 CD21                <1>     int 21h
   936                              <1>     return
    13                              <2> %%_ret:
    14 00002178 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   937                              <1> 
   938                              <1> cls:  
   939 00002179 B800440000          <1>     mov eax, 4400h  ;Get device info
   940 0000217E BB01000000          <1>     mov ebx, 1      ;for handle 1
   941 00002183 CD21                <1>     int 21h         ;in dx
   942 00002185 F7C280000000        <1>     test edx, devCharDev
   943 0000218B 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   944 0000218D F7C210000000        <1>     test edx, charDevFastOut
   945 00002193 743E                <1>     jz .doAnsi
   946                              <1>     ;Test if Int 29h uses Int 30h
   947                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   948                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
   949 00002195 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
   950 0000219A CD21                <1>     int 21h
   951                              <1> .biosCheck:
   952 0000219C 66813BCD30          <1>     cmp word [rbx], 30CDh
   953 000021A1 740C                <1>     je .biosConfirmed
   954 000021A3 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   955 000021A8 7429                <1>     je .doAnsi
   956 000021AA 48FFC3              <1>     inc rbx
   957 000021AD EBED                <1>     jmp short .biosCheck
   958                              <1> .biosConfirmed:
   959                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   960 000021AF B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   961 000021B1 31DB                <1>     xor ebx, ebx
   962 000021B3 CD30                <1>     int 30h
   963 000021B5 B40F                <1>     mov ah, 0Fh ;Get screen mode
   964 000021B7 CD30                <1>     int 30h
   965 000021B9 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   966 000021BC FECA                <1>     dec dl
   967 000021BE B619                <1>     mov dh, 25  ;Number of rows is standard
   968 000021C0 31C0                <1>     xor eax, eax
   969 000021C2 89C1                <1>     mov ecx, eax
   970 000021C4 B707                <1>     mov bh, 7   ;Screen attributes
   971 000021C6 B406                <1>     mov ah, 6   ;Scroll
   972 000021C8 CD30                <1>     int 30h
   973 000021CA 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   974 000021CC B700                <1>     mov bh, 0   ;Page 0
   975 000021CE B402                <1>     mov ah, 2
   976 000021D0 CD30                <1>     int 30h
   977                              <1>     return
    13                              <2> %%_ret:
    14 000021D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   978                              <1> .doAnsi:
   979                              <1> ;4 chars in the ansi routine
   980                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   981                              <1> ; understand ANSI codes
   982 000021D3 488D35B2EBFFFF      <1>     lea rsi, ansiCls
   983 000021DA B904000000          <1>     mov ecx, 4
   984 000021DF B406                <1>     mov ah, 06h ;Raw char output
   985                              <1> .ansiLp:
   986 000021E1 AC                  <1>     lodsb   ;Get the char in 
   987 000021E2 88C2                <1>     mov dl, al
   988 000021E4 CD21                <1>     int 21h
   989 000021E6 FFC9                <1>     dec ecx
   990 000021E8 75F7                <1>     jnz .ansiLp
   991                              <1>     return
    13                              <2> %%_ret:
    14 000021EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   992                              <1> 
   993                              <1> break:
   994 000021EB F605C8DEFFFFFF      <1>     test byte [arg1Flg], -1
   995 000021F2 752D                <1>     jnz .argumentProvided
   996                              <1>     ;Here we just get the status of break
   997 000021F4 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   998 000021F9 CD21                <1>     int 21h
   999 000021FB 88D3                <1>     mov bl, dl
  1000 000021FD 488D15C6E9FFFF      <1>     lea rdx, breakIs
  1001 00002204 B409                <1>     mov ah, 09h
  1002 00002206 CD21                <1>     int 21h
  1003 00002208 488D15B6E9FFFF      <1>     lea rdx, onMes
  1004 0000220F 488D0DA9E9FFFF      <1>     lea rcx, offMes
  1005 00002216 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1006 00002218 480F44D1            <1>     cmovz rdx, rcx
  1007 0000221C B409                <1>     mov ah, 09h
  1008 0000221E CD21                <1>     int 21h
  1009                              <1>     return
    13                              <2> %%_ret:
    14 00002220 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1010                              <1> .argumentProvided:
  1011 00002221 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1012 00002225 AD                  <1>     lodsd   ;Read the word
  1013 00002226 89C3                <1>     mov ebx, eax
  1014 00002228 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1015 0000222D C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1016 00002230 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1017 00002235 7416                <1>     je .maybeOn
  1018 00002237 663D4F46            <1>     cmp ax, "OF"
  1019 0000223B 7523                <1>     jne .badOnOff
  1020 0000223D 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1021 00002242 6681FB4620          <1>     cmp bx, "F "
  1022 00002247 7517                <1>     jne .badOnOff
  1023                              <1>     ;Set off
  1024 00002249 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1025 0000224B EB0B                <1>     jmp short .setBreak
  1026                              <1> .maybeOn:
  1027 0000224D 663D4F4E            <1>     cmp ax, "ON"
  1028 00002251 750D                <1>     jne .badOnOff
  1029                              <1>     ;Set on
  1030 00002253 BA01000000          <1>     mov edx, 1
  1031                              <1> .setBreak:
  1032 00002258 B801330000          <1>     mov eax, 3301h  ;Set break
  1033 0000225D CD21                <1>     int 21h
  1034                              <1>     return
    13                              <2> %%_ret:
    14 0000225F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1035                              <1> .badOnOff:
  1036 00002260 488D1535EBFFFF      <1>     lea rdx, badOnOff
  1037 00002267 B409                <1>     mov ah, 09h
  1038 00002269 CD21                <1>     int 21h
  1039                              <1>     return
    13                              <2> %%_ret:
    14 0000226B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1040                              <1> 
  1041                              <1> verify:
  1042 0000226C F60547DEFFFFFF      <1>     test byte [arg1Flg], -1
  1043 00002273 752D                <1>     jnz .argumentProvided
  1044                              <1>     ;Here we just get the status of break
  1045 00002275 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1046 0000227A CD21                <1>     int 21h
  1047 0000227C 88C3                <1>     mov bl, al
  1048 0000227E 488D154FE9FFFF      <1>     lea rdx, verifyIs
  1049 00002285 B409                <1>     mov ah, 09h
  1050 00002287 CD21                <1>     int 21h
  1051 00002289 488D1535E9FFFF      <1>     lea rdx, onMes
  1052 00002290 488D0D28E9FFFF      <1>     lea rcx, offMes
  1053 00002297 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1054 00002299 480F44D1            <1>     cmovz rdx, rcx
  1055 0000229D B409                <1>     mov ah, 09h
  1056 0000229F CD21                <1>     int 21h
  1057                              <1>     return
    13                              <2> %%_ret:
    14 000022A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1058                              <1> .argumentProvided:
  1059 000022A2 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1060 000022A6 AD                  <1>     lodsd   ;Read the word
  1061 000022A7 89C3                <1>     mov ebx, eax
  1062 000022A9 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1063 000022AE C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1064 000022B1 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1065 000022B6 7416                <1>     je .maybeOn
  1066 000022B8 663D4F46            <1>     cmp ax, "OF"
  1067 000022BC 751F                <1>     jne .badOnOff
  1068 000022BE 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1069 000022C3 6681FB4620          <1>     cmp bx, "F "
  1070 000022C8 7513                <1>     jne .badOnOff
  1071                              <1>     ;Set off
  1072 000022CA 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1073 000022CC EB0A                <1>     jmp short .setVerify
  1074                              <1> .maybeOn:
  1075 000022CE 663D4F4E            <1>     cmp ax, "ON"
  1076 000022D2 7509                <1>     jne .badOnOff
  1077                              <1>     ;Set on
  1078 000022D4 31C0                <1>     xor eax, eax
  1079 000022D6 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1080                              <1> .setVerify:
  1081 000022D8 B42E                <1>     mov ah, 2Eh  ;Set Verify
  1082 000022DA CD21                <1>     int 21h
  1083                              <1>     return
    13                              <2> %%_ret:
    14 000022DC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1084                              <1> .badOnOff:
  1085 000022DD 488D15B8EAFFFF      <1>     lea rdx, badOnOff
  1086 000022E4 B409                <1>     mov ah, 09h
  1087 000022E6 CD21                <1>     int 21h
  1088                              <1>     return
    13                              <2> %%_ret:
    14 000022E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1089                              <1> 
  1090                              <1> rename:
  1091 000022E9 F605CADDFFFFFF      <1>     test byte [arg1Flg], -1
  1092 000022F0 0F8478F3FFFF        <1>     jz badArgError
  1093 000022F6 F605C0DDFFFFFF      <1>     test byte [arg2Flg], -1
  1094 000022FD 0F846BF3FFFF        <1>     jz badArgError    
  1095                              <1>     ;Initialise the variables!
  1096 00002303 488D351EE2FFFF      <1>     lea rsi, srcSpec
  1097 0000230A 4889351BE3FFFF      <1>     mov qword [srcPtr], rsi
  1098 00002311 488D3592E2FFFF      <1>     lea rsi, destSpec
  1099 00002318 48893515E3FFFF      <1>     mov qword [destPtr], rsi
  1100                              <1>     ;Check the second path is just a filename!
  1101 0000231F 0FB60598DDFFFF      <1>     movzx eax, byte [arg2Off]
  1102 00002326 4C8B05E2DCFFFF      <1>     mov r8, qword [pspPtr]
  1103 0000232D 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1104 00002334 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1105 00002337 488D3DA2E0FFFF      <1>     lea rdi, searchSpec
  1106 0000233E 57                  <1>     push rdi
  1107 0000233F E8710E0000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1108 00002344 5F                  <1>     pop rdi
  1109 00002345 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1110 00002349 0F841FF3FFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1111 0000234F 4889FE              <1>     mov rsi, rdi
  1112                              <1> .destScan:
  1113 00002352 AC                  <1>     lodsb   ;Get the char
  1114 00002353 3A05D2DCFFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1115 00002359 0F840FF3FFFF        <1>     je badArgError
  1116 0000235F 84C0                <1>     test al, al
  1117 00002361 75EF                <1>     jnz .destScan
  1118                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1119 00002363 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1120 00002367 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1120 00002370 3F                  <1>
  1121 00002371 B903000000          <1>     mov ecx, 3  ;24 bytes
  1122 00002376 F348AB              <1>     rep stosq
  1123 00002379 AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1124 0000237A 488D355FE0FFFF      <1>     lea rsi, searchSpec
  1125 00002381 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1126 00002385 B80D290000          <1>     mov eax, 290Dh
  1127 0000238A CD21                <1>     int 21h     
  1128 0000238C 50                  <1>     push rax    ;Save the WC signature
  1129 0000238D E8660E0000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1130 00002392 488D3D47E0FFFF      <1>     lea rdi, searchSpec
  1131 00002399 E89D0D0000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1132 0000239E 4889FE              <1>     mov rsi, rdi
  1133 000023A1 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1134 000023A4 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1135 000023A8 B80D290000          <1>     mov eax, 290Dh
  1136 000023AD CD21                <1>     int 21h
  1137 000023AF 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1138 000023B0 88CC                <1>     mov ah, cl
  1139 000023B2 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1140 000023B5 0F84EC000000        <1>     jz .noWC
  1141 000023BB 488D351EE0FFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1142                              <1>     ;Now we check if we have a path to actually handle
  1143 000023C2 4839F3              <1>     cmp rbx, rsi
  1144 000023C5 7444                <1>     je .noPath
  1145 000023C7 C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1146 000023CB 488D350EE0FFFF      <1>     lea rsi, searchSpec
  1147 000023D2 488D3D4FE1FFFF      <1>     lea rdi, srcSpec
  1148 000023D9 56                  <1>     push rsi
  1149 000023DA E8540C0000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1150 000023DF 5E                  <1>     pop rsi
  1151 000023E0 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1152 000023E3 8A0542DCFFFF        <1>     mov al, byte [pathSep]
  1153 000023E9 AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1154 000023EA 48893D3BE2FFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1155 000023F1 488D3DB2E1FFFF      <1>     lea rdi, destSpec
  1156 000023F8 E8360C0000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1157 000023FD 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1158 00002400 AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1159 00002401 48893D2CE2FFFF      <1>     mov qword [destPtr], rdi
  1160 00002408 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1161                              <1> .noPath:
  1162                              <1>     ;Now we have where to copy the files to, we can start our work!
  1163 0000240B E8D40E0000          <1>     call setDTA
  1164 00002410 488D15C9DFFFFF      <1>     lea rdx, searchSpec
  1165 00002417 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1166 00002419 B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1167 0000241E CD21                <1>     int 21h
  1168 00002420 0F825AF2FFFF        <1>     jc badDupFnf    ;If no file was found!
  1169                              <1> .wcLoop:
  1170                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1171 00002426 488D35C1DCFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1172 0000242D 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1173 00002431 B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1174 00002436 CD21                <1>     int 21h 
  1175                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1176 00002438 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1177 0000243C 488D3DF9E1FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1178 00002443 57                  <1>     push rdi
  1179 00002444 48A5                <1>     movsq
  1180 00002446 66A5                <1>     movsw
  1181 00002448 A4                  <1>     movsb
  1182 00002449 5F                  <1>     pop rdi
  1183 0000244A 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1184 0000244E B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1185                              <1> .wcNameMake:
  1186 00002453 AC                  <1>     lodsb   ;Get the char from the source string
  1187 00002454 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1188 00002457 7502                <1>     jne .noStore    ;Dont store the char there
  1189 00002459 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1190                              <1> .noStore:
  1191 0000245B 48FFC7              <1>     inc rdi ;Goto next char position
  1192 0000245E FFC9                <1>     dec ecx
  1193 00002460 75F1                <1>     jnz .wcNameMake
  1194                              <1> ;renName now has the FCB name for the file we wish to make!
  1195                              <1> ;Now make the two paths!
  1196 00002462 488D3585DCFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1197 00002469 488B3DBCE1FFFF      <1>     mov rdi, qword [srcPtr]
  1198 00002470 E8BE0B0000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1199 00002475 488D35C0E1FFFF      <1>     lea rsi, renName
  1200 0000247C 488B3DB1E1FFFF      <1>     mov rdi, qword [destPtr]
  1201 00002483 E8D70C0000          <1>     call FCBToAsciiz
  1202 00002488 488D1599E0FFFF      <1>     lea rdx, srcSpec
  1203 0000248F 488D3D14E1FFFF      <1>     lea rdi, destSpec
  1204 00002496 B800560000          <1>     mov eax, 5600h
  1205 0000249B CD21                <1>     int 21h     ;Fail silently on wildcard rename
  1206 0000249D B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1207 000024A2 CD21                <1>     int 21h
  1208 000024A4 7380                <1>     jnc .wcLoop     ;And process it too!
  1209                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 000024A6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1210                              <1> .noWC:
  1211 000024A7 E84C0D0000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1212 000024AC 0FB6050BDCFFFF      <1>     movzx eax, byte [arg2Off]
  1213 000024B3 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1214 000024BA 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1215 000024BD 488D3DE6E0FFFF      <1>     lea rdi, destSpec
  1216 000024C4 57                  <1>     push rdi
  1217 000024C5 E8EB0C0000          <1>     call cpDelimPathToBufz
  1218 000024CA 5F                  <1>     pop rdi
  1219 000024CB 488D150EDFFFFF      <1>     lea rdx, searchSpec
  1220 000024D2 B800560000          <1>     mov eax, 5600h
  1221 000024D7 CD21                <1>     int 21h
  1222                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000024D9 73(A6)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1223 000024DB E9A0F1FFFF          <1>     jmp badDupFnf   ;Always just return this
  1224                              <1> 
  1225                              <1> 
  1226                              <1> touch:
  1227                              <1> ;Temporarily used to create files
  1228 000024E0 F605D3DBFFFFFF      <1>     test byte [arg1Flg], -1
  1229 000024E7 0F8481F1FFFF        <1>     jz badArgError
  1230 000024ED E8060D0000          <1>     call buildCommandPath
  1231 000024F2 488D15E7DEFFFF      <1>     lea rdx, searchSpec
  1232 000024F9 B8005B0000          <1>     mov eax, 5B00h  ;Create unique file 
  1233 000024FE 31C9                <1>     xor ecx, ecx
  1234 00002500 CD21                <1>     int 21h
  1235 00002502 721D                <1>     jc .touch1
  1236                              <1> .touchClose:
  1237 00002504 0FB7D8              <1>     movzx ebx, ax   ;Save the handle here
  1238 00002507 B80D120000          <1>     mov eax, 120Dh  ;Get date/time words from the DOS
  1239 0000250C CD2F                <1>     int 2fh
  1240 0000250E 89C1                <1>     mov ecx, eax    ;Move the time here
  1241 00002510 87D1                <1>     xchg edx, ecx   ;Get them in the right place
  1242 00002512 B801570000          <1>     mov eax, 5701h  ;Set the date/time for bx
  1243 00002517 CD21                <1>     int 21h
  1244 00002519 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1245 0000251E CD21                <1>     int 21h
  1246                              <1>     return
    13                              <2> %%_ret:
    14 00002520 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1247                              <1> .touch1:
  1248 00002521 3C50                <1>     cmp al, errFilExist ;Does the file exist?
  1249 00002523 7509                <1>     jne .touchError ;If not, this is a proper error!
  1250 00002525 B8003D0000          <1>     mov eax, 3D00h  ;R/O open instead to update the access time!!
  1251 0000252A CD21                <1>     int 21h
  1252 0000252C 73D6                <1>     jnc .touchClose ;If this worked, close the handle immediately
  1253                              <1> .touchError:
  1254 0000252E 3C03                <1>     cmp al, errPnf
  1255 00002530 0F8438F1FFFF        <1>     je badArgError
  1256 00002536 3C02                <1>     cmp al, errFnf
  1257 00002538 0F844BF1FFFF        <1>     je badFnf
  1258 0000253E E907F1FFFF          <1>     jmp badAccError
  1259                              <1>     
  1260                              <1> 
  1261                              <1> join:
  1262                              <1> ;Mock join command, to test join. Make an external command.
  1263                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1264 00002543 F605AF000000FF      <1>     test byte [.joinOn], -1
  1265 0000254A 743D                <1>     jz .okJoin
  1266                              <1> .joindisable:
  1267 0000254C B800520000          <1>     mov eax, 5200h  
  1268 00002551 CD21                <1>     int 21h
  1269                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1270 00002553 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1271 00002558 CD2A                <1>     int 2Ah
  1272 0000255A 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1273 0000255E 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1274 00002562 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1275 00002568 C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1276 0000256B C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1277 0000256F FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1278 00002572 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1279 00002577 CD2A                <1>     int 2Ah
  1280 00002579 C6057900000000      <1>     mov byte [.joinOn], 0
  1281 00002580 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1282 00002587 EB45                <1>     jmp short .joinExit
  1283                              <1> .okJoin:
  1284 00002589 C60569000000FF      <1>     mov byte [.joinOn], -1
  1285 00002590 B800520000          <1>     mov eax, 5200h  
  1286 00002595 CD21                <1>     int 21h
  1287 00002597 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1288 0000259B 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1289                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1290 0000259F B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1291 000025A4 CD2A                <1>     int 2Ah
  1292 000025A6 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1293 000025AC 4889DF              <1>     mov rdi, rbx
  1294 000025AF 488D3544000000      <1>     lea rsi, .joinPath
  1295 000025B6 B90C000000          <1>     mov ecx, .joinPathL
  1296 000025BB F3A4                <1>     rep movsb   ;Copy chars over
  1297 000025BD FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1298 000025C0 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1299 000025C5 CD2A                <1>     int 2Ah
  1300 000025C7 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1301                              <1> .joinExit:
  1302 000025CE B800090000          <1>     mov eax, 0900h
  1303 000025D3 CD21                <1>     int 21h
  1304                              <1>     return
    13                              <2> %%_ret:
    14 000025D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1305 000025D6 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1305 000025DF 61626C65640D0A24    <1>
  1306 000025E7 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1306 000025F0 7361626C65640D0A24  <1>
  1307 000025F9 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1308 000025FA 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1308 00002603 535400              <1>
  1309                              <1> .joinPathL  equ $ - .joinPath 
  1310                              <1> 
  1311                              <1> subst:
  1312                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1313                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1314 00002606 F605D3000000FF      <1>     test byte [.substOn], -1
  1315 0000260D 7443                <1>     jz .okSubst
  1316                              <1> .substdisable:
  1317 0000260F B800520000          <1>     mov eax, 5200h  
  1318 00002614 CD21                <1>     int 21h
  1319                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1320 00002616 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1321 0000261B CD2A                <1>     int 2Ah
  1322 0000261D 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1323 00002621 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1324 00002628 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1325 0000262E C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1326 00002631 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1327 00002635 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1328 0000263B B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1329 00002640 CD2A                <1>     int 2Ah
  1330 00002642 C6059700000000      <1>     mov byte [.substOn], 0
  1331 00002649 488D157D000000      <1>     lea rdx, .substDisableMsg
  1332 00002650 EB61                <1>     jmp short .substExit
  1333                              <1> .okSubst:
  1334 00002652 C60587000000FF      <1>     mov byte [.substOn], -1
  1335 00002659 B800520000          <1>     mov eax, 5200h  
  1336 0000265E CD21                <1>     int 21h
  1337 00002660 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1338 00002665 CD2A                <1>     int 2Ah
  1339 00002667 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1340 0000266B 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1341 00002672 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1342 00002676 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1343 0000267D 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1344 00002681 C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1345                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1346 00002688 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1347 0000268E 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1348 00002694 4889DF              <1>     mov rdi, rbx
  1349 00002697 488D3543000000      <1>     lea rsi, .substPath
  1350 0000269E B90C000000          <1>     mov ecx, .substPathL
  1351 000026A3 F3A4                <1>     rep movsb   ;Copy chars over
  1352 000026A5 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1353 000026AA CD2A                <1>     int 2Ah
  1354 000026AC 488D1508000000      <1>     lea rdx, .substEnableMsg
  1355                              <1> .substExit:
  1356 000026B3 B800090000          <1>     mov eax, 0900h
  1357 000026B8 CD21                <1>     int 21h
  1358                              <1>     return
    13                              <2> %%_ret:
    14 000026BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1359 000026BB 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1359 000026C4 6E61626C65640D0A24  <1>
  1360 000026CD 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1360 000026D6 697361626C65640D0A- <1>
  1360 000026DF 24                  <1>
  1361 000026E0 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1362 000026E1 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1362 000026EA 535400              <1>
  1363                              <1> .substPathL  equ $ - .substPath 
  1364                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1365                              <1> truename:
  1366 000026ED F605C6D9FFFFFF      <1>     test byte [arg1Flg], -1
  1367 000026F4 0F8474EFFFFF        <1>     jz badArgError
  1368 000026FA E8F90A0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1369 000026FF 488D35DADCFFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1370 00002706 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1371 00002709 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1372 0000270E CD21                <1>     int 21h
  1373 00002710 730D                <1>     jnc .writePath
  1374 00002712 3C02                <1>     cmp al, errFnf
  1375 00002714 0F845DEFFFFF        <1>     je badFileError
  1376 0000271A E93DEFFFFF          <1>     jmp badParamError
  1377                              <1> .writePath:
  1378 0000271F 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1379 00002722 B9FFFFFFFF          <1>     mov ecx, -1
  1380 00002727 30C0                <1>     xor al, al
  1381 00002729 F2AE                <1>     repne scasb     ;Get the new len
  1382 0000272B F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1383 0000272D FFC9                <1>     dec ecx
  1384 0000272F BB01000000          <1>     mov ebx, 01
  1385 00002734 B440                <1>     mov ah, 40h
  1386 00002736 CD21                <1>     int 21h
  1387 00002738 E818060000          <1>     call printCRLF
  1388                              <1>     return
    13                              <2> %%_ret:
    14 0000273D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1389                              <1> 
  1390                              <1> label:
  1391                              <1> ;Displays/Changes/Deletes the file label
  1392 0000273E 488D1508000000      <1>     lea rdx, .l1
  1393 00002745 B800090000          <1>     mov eax, 0900h
  1394 0000274A CD21                <1>     int 21h
  1395                              <1>     return
    13                              <2> %%_ret:
    14 0000274C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1396 0000274D 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  1396 00002756 6E20756E696D706C65- <1>
  1396 0000275F 6D656E7465640D0A24  <1>
  1397                              <1> 
  1398                              <1> mklbl:
  1399                              <1>     ;lea rdx, .l1
  1400                              <1>     ;mov cx, 08h ;Make a label
  1401                              <1>     ;mov eax, 3C00h
  1402                              <1>     ;int 21h
  1403                              <1> 
  1404                              <1>     ;mov ebx, eax
  1405                              <1>     ;mov eax, 3E00h  ;Close the handle
  1406                              <1>     ;int 21h
  1407                              <1>     ;return
  1408                              <1> 
  1409                              <1> ;.l1: db "TESTLABEL",0
  1410 00002768 488D1508000000      <1>     lea rdx, .l1
  1411 0000276F B800160000          <1>     mov eax, 1600h  ;Create FCB
  1412 00002774 CD21                <1>     int 21h
  1413                              <1>     return
    13                              <2> %%_ret:
    14 00002776 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1414                              <1> .l1:
  1415                              <1>     istruc exFcb
  1416 00002777 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1417 00002778 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1418 0000277E 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1419 0000277F 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  1420 00002787 4C2020              <1>     at exFcb.fileext,   db "L  "
  1421 0000278A 00000000            <1>     at exFcb.curBlock,  dd 0
  1422 0000278E 00<rep 15h>         <1>     iend 
  1423                              <1> rmlbl:
  1424 000027A3 488D1508000000      <1>     lea rdx, .l1
  1425 000027AA B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  1426 000027AF CD21                <1>     int 21h
  1427                              <1>     return
    13                              <2> %%_ret:
    14 000027B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1428                              <1> .l1:    ;FCB to volume label
  1429                              <1>     istruc exFcb
  1430 000027B2 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1431 000027B3 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1432 000027B9 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1433 000027BA 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  1434 000027C2 3F3F3F              <1>     at exFcb.fileext,   db "???"
  1435 000027C5 00000000            <1>     at exFcb.curBlock,  dd 0
  1436 000027C9 00<rep 15h>         <1>     iend 
  1437                              <1> 
  1438                              <1> rnlbl:
  1439 000027DE 488D1508000000      <1>     lea rdx, .l1
  1440 000027E5 B800170000          <1>     mov eax, 1700h
  1441 000027EA CD21                <1>     int 21h
  1442                              <1>     return
    13                              <2> %%_ret:
    14 000027EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1443                              <1> .l1:
  1444                              <1>     istruc exRenFcb
  1445 000027ED FF                  <1>     at exRenFcb.extSig,     db -1
  1446 000027EE 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  1447 000027F4 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  1448 000027F5 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  1449 000027FD 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  1450 00002800 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  1450 00002809 4C414245            <1>
  1451 0000280D 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  1452 00002810 00<rep 4h>          <1>     iend
  1453                              <1> volume:
  1454                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  1455 00002814 F605A2D8FFFFFF      <1>     test byte [arg2Flg], -1
  1456 0000281B 0F854DEEFFFF        <1>     jnz badArgError
  1457 00002821 F60592D8FFFFFF      <1>     test byte [arg1Flg], -1
  1458 00002828 7507                <1>     jnz .notCurrentDrive
  1459 0000282A E8FF070000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1460 0000282F EB31                <1>     jmp short .dirEP
  1461                              <1> .notCurrentDrive:
  1462 00002831 E8C2090000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1463 00002836 488D35A3DBFFFF      <1>     lea rsi, searchSpec
  1464 0000283D E826080000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  1465 00002842 66AD                <1>     lodsw                   ;Get this word
  1466 00002844 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  1467 00002847 0F8521EEFFFF        <1>     jne badArgError
  1468 0000284D 8A0569D8FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1469 00002853 A8FF                <1>     test al, -1
  1470 00002855 0F850AEEFFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1471 0000285B 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1472 00002860 FFC8                <1>     dec eax ;Convert to 0 based number
  1473                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  1474 00002862 E87D0A0000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  1475 00002867 488D158ADCFFFF      <1>     lea rdx, volFcb
  1476 0000286E FFC0                <1>     inc eax ;Get 1 based drive number
  1477 00002870 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1478 00002872 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1479 00002875 B800110000          <1>     mov eax, 1100h ;Find first FCB
  1480 0000287A CD21                <1>     int 21h
  1481 0000287C 50                  <1>     push rax
  1482                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  1483 0000287D 488D1529DFFFFF      <1>     lea rdx, crlf
  1484 00002884 B409                <1>     mov ah, 09h
  1485 00002886 CD21                <1>     int 21h
  1486 00002888 488D15A3E1FFFF      <1>     lea rdx, volMes
  1487 0000288F B409                <1>     mov ah, 09h
  1488 00002891 CD21                <1>     int 21h
  1489 00002893 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  1490 00002895 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  1491 00002898 B402                <1>     mov ah, 02h
  1492 0000289A CD21                <1>     int 21h
  1493 0000289C 58                  <1>     pop rax
  1494 0000289D 84C0                <1>     test al, al ;If this is zero, the call succeeded
  1495 0000289F 7409                <1>     jz .volIDOk
  1496 000028A1 488D15A1E1FFFF      <1>     lea rdx, volNo
  1497 000028A8 EB19                <1>     jmp short .volEndPrint
  1498                              <1> .volIDOk:
  1499 000028AA 488D1593E1FFFF      <1>     lea rdx, volOk
  1500 000028B1 B409                <1>     mov ah, 09h
  1501 000028B3 CD21                <1>     int 21h
  1502 000028B5 C60527D8FFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  1503 000028BC 488D1515D8FFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  1504                              <1> .volEndPrint:
  1505 000028C3 B409                <1>     mov ah, 09h
  1506 000028C5 CD21                <1>     int 21h
  1507 000028C7 488D15DFDEFFFF      <1>     lea rdx, crlf
  1508 000028CE B409                <1>     mov ah, 09h
  1509 000028D0 CD21                <1>     int 21h
  1510                              <1>     return
    13                              <2> %%_ret:
    14 000028D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1511                              <1> 
  1512                              <1> version:
  1513 000028D3 488D15D3DEFFFF      <1>     lea rdx, crlf
  1514 000028DA B409                <1>     mov ah, 09h
  1515 000028DC CD21                <1>     int 21h
  1516 000028DE 488D153BE1FFFF      <1>     lea rdx, dosVer
  1517 000028E5 B409                <1>     mov ah, 09h
  1518 000028E7 CD21                <1>     int 21h
  1519 000028E9 E80C000000          <1>     call .printVersionNumber
  1520 000028EE 488D15B8DEFFFF      <1>     lea rdx, crlf
  1521 000028F5 B409                <1>     mov ah, 09h
  1522 000028F7 CD21                <1>     int 21h
  1523                              <1>     return
    13                              <2> %%_ret:
    14 000028F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1524                              <1> .printVersionNumber:
  1525 000028FA B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1526 000028FC CD21                <1>     int 21h
  1527 000028FE 50                  <1>     push rax
  1528 000028FF 0FB6C0              <1>     movzx eax, al
  1529 00002902 E82A090000          <1>     call printDecimalWord
  1530 00002907 B22E                <1>     mov dl, "."
  1531 00002909 B402                <1>     mov ah, 02h
  1532 0000290B CD21                <1>     int 21h
  1533 0000290D 58                  <1>     pop rax
  1534 0000290E 0FB6C4              <1>     movzx eax, ah
  1535 00002911 E81B090000          <1>     call printDecimalWord
  1536                              <1>     return
    13                              <2> %%_ret:
    14 00002916 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1537                              <1> 
  1538                              <1> 
  1539                              <1> memory:
  1540 00002917 488B1D01D7FFFF      <1>     mov rbx, qword [sysVars]
  1541 0000291E 4885DB              <1>     test rbx, rbx
  1542 00002921 7510                <1>     jnz .sysvarsOK
  1543 00002923 488D15D9E3FFFF      <1>     lea rdx, memBad0
  1544 0000292A B409                <1>     mov ah, 09h
  1545 0000292C CD21                <1>     int 21h
  1546 0000292E E9A1090000          <1>     jmp freezePC.altEP
  1547                              <1> .sysvarsOK:
  1548                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1549                              <1>     ; and rcx to store Application memory
  1550 00002933 31F6                <1>     xor esi, esi
  1551 00002935 31FF                <1>     xor edi, edi
  1552 00002937 31ED                <1>     xor ebp, ebp
  1553 00002939 31C9                <1>     xor ecx, ecx
  1554 0000293B 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1555 0000293F 488B1B              <1>     mov rbx, qword [rbx]
  1556                              <1> .memLp:
  1557 00002942 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1558 00002945 7409                <1>     je .validMCB
  1559 00002947 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1560 0000294A 0F8501010000        <1>     jne .badMCBFound
  1561                              <1> .validMCB:
  1562 00002950 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1563 00002953 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1564 00002957 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1565 0000295F 7505                <1>     jne .notDOS
  1566 00002961 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1567 00002964 EB21                <1>     jmp short .gotoNext
  1568                              <1> .notDOS:
  1569 00002966 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1570 0000296E 7505                <1>     jne .notFree
  1571 00002970 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1572 00002973 EB12                <1>     jmp short .gotoNext
  1573                              <1> .notFree:
  1574 00002975 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1575 0000297D 7505                <1>     jne .notHole
  1576 0000297F 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1577 00002982 EB03                <1>     jmp short .gotoNext
  1578                              <1> .notHole:
  1579 00002984 4801C1              <1>     add rcx, rax    ;Add to Application count
  1580                              <1> .gotoNext:
  1581 00002987 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1582 0000298A 7407                <1>     je .endOfWalk
  1583 0000298C 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1584 00002991 EBAF                <1>     jmp short .memLp
  1585                              <1> .endOfWalk:
  1586                              <1>     
  1587 00002993 488D15CAE2FFFF      <1>     lea rdx, memDOS
  1588 0000299A B409                <1>     mov ah, 09h
  1589 0000299C CD21                <1>     int 21h
  1590 0000299E 4889F0              <1>     mov rax, rsi
  1591 000029A1 E89D000000          <1>     call .mcbPrintAmount
  1592 000029A6 488D154FE3FFFF      <1>     lea rdx, memByte
  1593 000029AD B409                <1>     mov ah, 09h
  1594 000029AF CD21                <1>     int 21h
  1595                              <1> 
  1596 000029B1 4885ED              <1>     test rbp, rbp
  1597 000029B4 741E                <1>     jz .skipHole
  1598 000029B6 488D15F3E2FFFF      <1>     lea rdx, memHole
  1599 000029BD B409                <1>     mov ah, 09h
  1600 000029BF CD21                <1>     int 21h
  1601 000029C1 4889E8              <1>     mov rax, rbp
  1602 000029C4 E87A000000          <1>     call .mcbPrintAmount
  1603 000029C9 488D152CE3FFFF      <1>     lea rdx, memByte
  1604 000029D0 B409                <1>     mov ah, 09h
  1605 000029D2 CD21                <1>     int 21h
  1606                              <1> .skipHole:
  1607                              <1> 
  1608 000029D4 488D15AFE2FFFF      <1>     lea rdx, memApp
  1609 000029DB B409                <1>     mov ah, 09h
  1610 000029DD CD21                <1>     int 21h
  1611 000029DF 4889C8              <1>     mov rax, rcx
  1612 000029E2 E85C000000          <1>     call .mcbPrintAmount
  1613 000029E7 488D150EE3FFFF      <1>     lea rdx, memByte
  1614 000029EE B409                <1>     mov ah, 09h
  1615 000029F0 CD21                <1>     int 21h
  1616                              <1> 
  1617 000029F2 488D15DDE2FFFF      <1>     lea rdx, memFree
  1618 000029F9 B409                <1>     mov ah, 09h
  1619 000029FB CD21                <1>     int 21h
  1620 000029FD 4889F8              <1>     mov rax, rdi
  1621 00002A00 E83E000000          <1>     call .mcbPrintAmount
  1622 00002A05 488D15F0E2FFFF      <1>     lea rdx, memByte
  1623 00002A0C B409                <1>     mov ah, 09h
  1624 00002A0E CD21                <1>     int 21h
  1625                              <1> 
  1626 00002A10 488D1527E2FFFF      <1>     lea rdx, memSys
  1627 00002A17 B409                <1>     mov ah, 09h
  1628 00002A19 CD21                <1>     int 21h
  1629 00002A1B 4889F0              <1>     mov rax, rsi
  1630 00002A1E 4801F8              <1>     add rax, rdi
  1631 00002A21 4801C8              <1>     add rax, rcx
  1632 00002A24 4801E8              <1>     add rax, rbp
  1633 00002A27 E817000000          <1>     call .mcbPrintAmount
  1634 00002A2C 488D15C9E2FFFF      <1>     lea rdx, memByte
  1635 00002A33 B409                <1>     mov ah, 09h
  1636 00002A35 CD21                <1>     int 21h
  1637                              <1> 
  1638 00002A37 488D156FDDFFFF      <1>     lea rdx, crlf
  1639 00002A3E B409                <1>     mov ah, 09h
  1640 00002A40 CD21                <1>     int 21h
  1641                              <1>     return
    13                              <2> %%_ret:
    14 00002A42 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1642                              <1> 
  1643                              <1> .mcbPrintAmount:
  1644 00002A43 51                  <1>     push rcx
  1645 00002A44 56                  <1>     push rsi
  1646 00002A45 57                  <1>     push rdi
  1647 00002A46 55                  <1>     push rbp
  1648 00002A47 E8E5070000          <1>     call printDecimalWord
  1649 00002A4C 5D                  <1>     pop rbp
  1650 00002A4D 5F                  <1>     pop rdi
  1651 00002A4E 5E                  <1>     pop rsi
  1652 00002A4F 59                  <1>     pop rcx
  1653                              <1>     return
    13                              <2> %%_ret:
    14 00002A50 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1654                              <1> .badMCBFound:
  1655 00002A51 488D15EBE2FFFF      <1>     lea rdx, memBad2
  1656 00002A58 B409                <1>     mov ah, 09h
  1657 00002A5A CD21                <1>     int 21h
  1658 00002A5C E973080000          <1>     jmp freezePC.altEP
  1659                              <1> 
  1660                              <1> type:
  1661 00002A61 F60552D6FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1662 00002A68 0F8400ECFFFF        <1>     jz badArgError
  1663 00002A6E F60548D6FFFFFF      <1>     test byte [arg2Flg], -1
  1664 00002A75 0F85F3EBFFFF        <1>     jnz badArgError         ;If this set, error
  1665 00002A7B 4C8B058DD5FFFF      <1>     mov r8, [pspPtr]
  1666 00002A82 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1667 00002A89 0FB6052BD6FFFF      <1>     movzx eax, byte [arg1Off]
  1668 00002A90 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1669 00002A93 803E0D              <1>     cmp byte [rsi], CR
  1670 00002A96 0F84D2EBFFFF        <1>     je badArgError
  1671 00002A9C 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1672 00002AA0 750F                <1>     jne .noDrive
  1673 00002AA2 0FB60513D6FFFF      <1>     movzx eax, byte [arg1FCBret]
  1674 00002AA9 3CFF                <1>     cmp al, -1
  1675 00002AAB 0F84B4EBFFFF        <1>     je badDriveError
  1676                              <1> .noDrive:
  1677                              <1>     ;Now we open the provided file
  1678 00002AB1 E842070000          <1>     call buildCommandPath
  1679 00002AB6 488D1523D9FFFF      <1>     lea rdx, searchSpec
  1680 00002ABD B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1681 00002AC2 CD21                <1>     int 21h
  1682 00002AC4 0F82ADEBFFFF        <1>     jc badFileError
  1683 00002ACA 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1684 00002AD1 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1685                              <1> .lp:
  1686 00002AD4 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1687 00002AD9 B43F                <1>     mov ah, 3Fh ;Read handle
  1688 00002ADB CD21                <1>     int 21h
  1689 00002ADD 89C1                <1>     mov ecx, eax
  1690 00002ADF 67E317              <1>     jecxz .exit
  1691 00002AE2 53                  <1>     push rbx    ;Save the original in handle
  1692 00002AE3 BB01000000          <1>     mov ebx, 1  ;STDOUT
  1693 00002AE8 B440                <1>     mov ah, 40h
  1694 00002AEA CD21                <1>     int 21h
  1695 00002AEC 5B                  <1>     pop rbx ;Get back the original read handle
  1696 00002AED 720F                <1>     jc .exitBad
  1697 00002AEF 39C8                <1>     cmp eax, ecx
  1698 00002AF1 74E1                <1>     je .lp
  1699 00002AF3 FFC9                <1>     dec ecx ;One less for a ^Z
  1700 00002AF5 39C8                <1>     cmp eax, ecx
  1701 00002AF7 7505                <1>     jne .exitBad
  1702                              <1> .exit:
  1703 00002AF9 B43E                <1>     mov ah, 3Eh ;Close handle
  1704 00002AFB CD21                <1>     int 21h
  1705                              <1>     return
    13                              <2> %%_ret:
    14 00002AFD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1706                              <1> .exitBad:
  1707                              <1>     ;Print a disk error message... use a table to build the message but for
  1708                              <1>     ; now, just exit
  1709                              <1>     ;If it is a char device, don't print a error
  1710 00002AFE EBF9                <1>     jmp short .exit
  1711                              <1> 
  1712                              <1> exit:
  1713 00002B00 F60526D5FFFFFF      <1>     test byte [permaSwitch], -1
  1714                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002B07 75(FD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1715 00002B09 488B0507D5FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1716 00002B10 483DFFFFFFFF        <1>     cmp rax, -1
  1717                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002B16 74(FD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1718 00002B18 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1719                              <1> 
  1720 00002B1C 488B150BD5FFFF      <1>     mov rdx, qword [parentInt22]
  1721 00002B23 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  1722 00002B27 B822250000          <1>     mov eax, 2522h
  1723 00002B2C CD21                <1>     int 21h
  1724                              <1> 
  1725 00002B2E B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1726 00002B33 CD21                <1>     int 21h
  1727                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00002B35 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1728                              <1> 
  1729                              <1> launchChild:
  1730                              <1>     ;We execute an external command here.
  1731                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  1732                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  1733                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  1734                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  1735                              <1>     ;We know the drive we are on is valid so no need to double check that!
  1736 00002B36 E8A9070000          <1>     call setDTA ;Searching setting
  1737 00002B3B 4C8B05CDD4FFFF      <1>     mov r8, qword [pspPtr]
  1738                              <1>     ;Start by rebuilding the cmdFcb from the last path componant.
  1739 00002B42 488D3DD6D6FFFF      <1>     lea rdi, cmdPathSpec
  1740 00002B49 E8ED050000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  1741 00002B4E 4889FE              <1>     mov rsi, rdi    ;Source here
  1742 00002B51 488D3D68D5FFFF      <1>     lea rdi, cmdFcb
  1743 00002B58 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  1744 00002B5D CD21                <1>     int 21h
  1745 00002B5F 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  1746 00002B61 0F8542EBFFFF        <1>     jnz badCmdError
  1747 00002B67 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  1748                              <1> .pathLoop:
  1749 00002B6A 488D3558D5FFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  1750 00002B71 488D3D44E2FFFF      <1>     lea rdi, extStr
  1751 00002B78 BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  1752                              <1> .extLp:
  1753 00002B7D 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  1754 00002B7E B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  1755 00002B83 F3A6                <1>     rep cmpsb   ;Compare the two strings
  1756 00002B85 5E                  <1>     pop rsi
  1757 00002B86 85C9                <1>     test ecx, ecx
  1758 00002B88 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  1759 00002B8A 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  1760 00002B8D FFCA                <1>     dec edx         ;Else one less extension type to check
  1761 00002B8F 75EC                <1>     jnz .extLp
  1762                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  1763                              <1>     ;If not, error.
  1764 00002B91 B903000000          <1>     mov ecx, 3
  1765 00002B96 4889F7              <1>     mov rdi, rsi
  1766 00002B99 B020                <1>     mov al, SPC
  1767 00002B9B F3AE                <1>     rep scasb   
  1768 00002B9D 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  1769 00002B9F 0F8504EBFFFF        <1>     jnz badCmdError    ;If not, error!
  1770                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  1771 00002BA5 488D3510E2FFFF      <1>     lea rsi, extStr
  1772 00002BAC BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  1773                              <1> .extSrchLp:
  1774 00002BB1 488D3D11D5FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1775 00002BB8 B903000000          <1>     mov ecx, 3
  1776 00002BBD F3A4                <1>     rep movsb   ;Copy the extension over!
  1777 00002BBF E861010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  1778 00002BC4 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  1779 00002BC6 FFCB                <1>     dec ebx                 ;Decrement extension counter
  1780 00002BC8 75E7                <1>     jnz .extSrchLp
  1781                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  1782                              <1> ; we start prepending path componants and trying again. To do this, we reset
  1783                              <1> ; by setting the fcb extension back to all spaces.
  1784 00002BCA 488D3DF8D4FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1785 00002BD1 B903000000          <1>     mov ecx, 3
  1786 00002BD6 B020                <1>     mov al, SPC
  1787 00002BD8 F3AA                <1>     rep stosb   ;Store back the empty extension!
  1788 00002BDA EB50                <1>     jmp short .pathHandle
  1789                              <1> .extFnd:
  1790                              <1> ;Here if the file had the right extension.
  1791 00002BDC E844010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  1792 00002BE1 7249                <1>     jc .pathHandle
  1793                              <1> .extSrchFnd:
  1794                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  1795                              <1> ; a BAT. If it is, separate handling!
  1796 00002BE3 803DDFD4FFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  1797 00002BEA 0F8401010000        <1>     je .batLaunch
  1798 00002BF0 488D1D04D5FFFF      <1>     lea rbx, launchBlock
  1799 00002BF7 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  1800 00002BFB 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  1801 00002BFE 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  1802 00002C05 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1803 00002C09 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1804 00002C0D 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1805 00002C11 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1806 00002C15 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1807 00002C19 488D15FFD5FFFF      <1>     lea rdx, cmdPathSpec
  1808 00002C20 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1809 00002C25 CD21                <1>     int 21h
  1810 00002C27 E97DEAFFFF          <1>     jmp badCmdError    ;If something goes wrong, error out
  1811                              <1> .pathHandle:        
  1812                              <1> ;First check if rbp is null. If it is, its a first time entry
  1813 00002C2C 4885ED              <1>     test rbp, rbp
  1814 00002C2F 0F85AA000000        <1>     jnz .pathReentry
  1815                              <1> ;Now check if the command we recieved included an absolute path.
  1816                              <1> ;If so, we don't do path substitution and just fail at this point
  1817 00002C35 488D35E3D5FFFF      <1>     lea rsi, cmdPathSpec
  1818 00002C3C 66AD                <1>     lodsw   ;Get the first two chars
  1819 00002C3E 3A05E7D3FFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  1820 00002C44 0F845FEAFFFF        <1>     je badCmdError  ;Therefore, exit bad!
  1821 00002C4A 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  1822 00002C4C 7412                <1>     je .pathGetEnv
  1823 00002C4E 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  1824 00002C51 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  1825 00002C53 AC                  <1>     lodsb   ;Get the third char
  1826 00002C54 3A05D1D3FFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  1827 00002C5A 0F8449EAFFFF        <1>     je badCmdError  ;Therefore, exit bad!
  1828                              <1> .pathGetEnv:
  1829                              <1> ;Now get a pointer to the environment and search for PATH=
  1830                              <1> ;We only take the final portion of the path and add it to each path componant
  1831                              <1> ;This agrees with DOS 3.3
  1832 00002C60 E8A3060000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  1833 00002C65 0F843EEAFFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  1834                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  1835                              <1>     ;Now we know we dont have to keep track of chars!!
  1836                              <1> .pathLp:
  1837 00002C6B 488D3D6EE1FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  1838 00002C72 B905000000          <1>     mov ecx, 5          ;5 Chars in PATH=
  1839 00002C77 E883060000          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1840 00002C7C 7419                <1>     je .pathFound
  1841 00002C7E 31C0                <1>     xor eax, eax        ;Search for a null
  1842 00002C80 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1843 00002C83 B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1844 00002C88 F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1845 00002C8A 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1846 00002C8C 0F8417EAFFFF        <1>     je badCmdError      ;If second null, no more env to search!
  1847 00002C92 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1848 00002C95 EBD4                <1>     jmp short .pathLp   ;And scan again!
  1849                              <1> .pathFound:
  1850                              <1> ;Env var found!
  1851 00002C97 F3A6                <1>     repe cmpsb          ;Move rdi past the = sign!
  1852                              <1> .pathRejoin:
  1853 00002C99 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  1854 00002C9C 4889FE              <1>     mov rsi, rdi        ;This is a ; delimited ASCII string
  1855 00002C9F 488D3D3AD7FFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  1856 00002CA6 E8F4040000          <1>     call cpDelimOrCtrlStringToBufz   
  1857 00002CAB 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  1858 00002CAE 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  1859 00002CB1 48FFCF              <1>     dec rdi ;Point to the null terminator
  1860 00002CB4 8A0571D3FFFF        <1>     mov al, byte [pathSep]
  1861 00002CBA AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  1862 00002CBB 488D35FFD3FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  1863 00002CC2 E898040000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  1864 00002CC7 488D3512D7FFFF      <1>     lea rsi, searchSpec 
  1865 00002CCE 488D3D4AD5FFFF      <1>     lea rdi, cmdPathSpec
  1866 00002CD5 E859030000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  1867 00002CDA E98BFEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  1868                              <1> .pathReentry:
  1869 00002CDF 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  1870 00002CE3 0F84C0E9FFFF        <1>     je badCmdError
  1871 00002CE9 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  1872 00002CEC 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  1873 00002CEF EBA8                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  1874                              <1> 
  1875                              <1> .batLaunch:
  1876 00002CF1 488D1508000000      <1>     lea rdx, .batMsg
  1877 00002CF8 B800090000          <1>     mov eax, 0900h
  1878 00002CFD CD21                <1>     int 21h
  1879                              <1>     return
    13                              <2> %%_ret:
    14 00002CFF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1880 00002D00 424154434820707265- <1> .batMsg db "BATCH preprocessor not implemented",CR,LF,"$"
  1880 00002D09 70726F636573736F72- <1>
  1880 00002D12 206E6F7420696D706C- <1>
  1880 00002D1B 656D656E7465640D0A- <1>
  1880 00002D24 24                  <1>
  1881                              <1> 
  1882                              <1> .prepAndSearch:
  1883                              <1> ;Copies over the name and extension in UC to the last componant of the 
  1884                              <1> ;cmdPathSpec and null terminates. 
  1885                              <1> ;Input: cmdFcb name.ext setup. 
  1886                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  1887                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found!
  1888 00002D25 50                  <1>     push rax
  1889 00002D26 51                  <1>     push rcx
  1890 00002D27 56                  <1>     push rsi
  1891 00002D28 57                  <1>     push rdi
  1892 00002D29 488D3DEFD4FFFF      <1>     lea rdi, cmdPathSpec 
  1893 00002D30 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  1894 00002D33 E803040000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  1895 00002D38 488D3582D3FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  1896 00002D3F E81B040000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  1897 00002D44 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1898 00002D49 B904000000          <1>     mov ecx, dirSystem  ;Normal, RO and System files only searchable!
  1899 00002D4E CD21                <1>     int 21h
  1900 00002D50 5F                  <1>     pop rdi
  1901 00002D51 5E                  <1>     pop rsi
  1902 00002D52 59                  <1>     pop rcx
  1903 00002D53 58                  <1>     pop rax
  1904                              <1>     return
    13                              <2> %%_ret:
    14 00002D54 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printCRLF:
     4 00002D55 488D1551DAFFFF      <1>     lea rdx, crlf
     5                              <1> printString:
     6 00002D5C B800090000          <1>     mov eax, 0900h  ;Print string
     7 00002D61 CD21                <1>     int 21h
     8                              <1>     return
    13                              <2> %%_ret:
    14 00002D63 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> printDate:
    10                              <1> ;Input: eax = Packed Date
    11                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    12                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    13                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    14                              <1> ;       ebx = 0 => Print two digit year
    15                              <1> ;       ebx = 1 => Print four digit year
    16 00002D64 53                  <1>     push rbx
    17 00002D65 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    18 00002D67 803DC8D2FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    19 00002D6E 7240                <1>     jb .usDate
    20 00002D70 777C                <1>     ja .jpnDate
    21                              <1> ;European: DD/MM/YY
    22 00002D72 251F000000          <1>     and eax, 1Fh    ;Save day bits
    23 00002D77 E8B0000000          <1>     call .printFirst
    24 00002D7C 8A15BFD2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    25 00002D82 B402                <1>     mov ah, 02h
    26 00002D84 CD21                <1>     int 21h
    27                              <1> 
    28 00002D86 89C8                <1>     mov eax, ecx
    29 00002D88 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    30 00002D8D C1E805              <1>     shr eax, 5
    31 00002D90 E8B3000000          <1>     call .printSecond
    32                              <1> 
    33 00002D95 8A15A6D2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    34 00002D9B B402                <1>     mov ah, 02h
    35 00002D9D CD21                <1>     int 21h
    36                              <1> 
    37 00002D9F 89C8                <1>     mov eax, ecx
    38 00002DA1 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    39 00002DA6 C1E809              <1>     shr eax, 9
    40 00002DA9 5B                  <1>     pop rbx ;Get the year signature back
    41 00002DAA E8A9000000          <1>     call .printYear
    42                              <1>     return
    13                              <2> %%_ret:
    14 00002DAF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    43                              <1> .usDate:
    44                              <1> ;US: MM/DD/YY
    45 00002DB0 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    46 00002DB5 C1E805              <1>     shr eax, 5
    47 00002DB8 E86F000000          <1>     call .printFirst
    48                              <1> 
    49 00002DBD 8A157ED2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    50 00002DC3 B402                <1>     mov ah, 02h
    51 00002DC5 CD21                <1>     int 21h
    52                              <1> 
    53 00002DC7 89C8                <1>     mov eax, ecx
    54 00002DC9 251F000000          <1>     and eax, 1Fh    ;Save day bits
    55 00002DCE E875000000          <1>     call .printSecond
    56                              <1> 
    57 00002DD3 8A1568D2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    58 00002DD9 B402                <1>     mov ah, 02h
    59 00002DDB CD21                <1>     int 21h
    60                              <1> 
    61 00002DDD 89C8                <1>     mov eax, ecx
    62 00002DDF 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    63 00002DE4 C1E809              <1>     shr eax, 9
    64 00002DE7 5B                  <1>     pop rbx ;Get the year signature back
    65 00002DE8 E86B000000          <1>     call .printYear
    66                              <1>     return
    13                              <2> %%_ret:
    14 00002DED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    67                              <1> .jpnDate:
    68                              <1> ;Japan: YY/MM/DD
    69 00002DEE 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    70 00002DF3 C1E809              <1>     shr eax, 9
    71 00002DF6 5B                  <1>     pop rbx ;Get the year signature back
    72 00002DF7 E85C000000          <1>     call .printYear
    73                              <1> 
    74 00002DFC 8A153FD2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    75 00002E02 B402                <1>     mov ah, 02h
    76 00002E04 CD21                <1>     int 21h
    77                              <1> 
    78 00002E06 89C8                <1>     mov eax, ecx
    79 00002E08 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    80 00002E0D C1E805              <1>     shr eax, 5
    81 00002E10 E833000000          <1>     call .printSecond
    82                              <1> 
    83 00002E15 8A1526D2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    84 00002E1B B402                <1>     mov ah, 02h
    85 00002E1D CD21                <1>     int 21h
    86                              <1> 
    87 00002E1F 89C8                <1>     mov eax, ecx
    88 00002E21 251F000000          <1>     and eax, 1Fh    ;Save day bits
    89 00002E26 E81D000000          <1>     call .printSecond
    90                              <1>     return
    13                              <2> %%_ret:
    14 00002E2B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    91                              <1> 
    92                              <1> ;Each of these require eax setup correctly
    93                              <1> .printFirst:
    94 00002E2C 51                  <1>     push rcx
    95 00002E2D E870040000          <1>     call getDecimalWord
    96 00002E32 84ED                <1>     test ch, ch ;Do we have an upper digit?
    97 00002E34 7504                <1>     jnz .skipSpace
    98 00002E36 88CD                <1>     mov ch, cl
    99 00002E38 B120                <1>     mov cl, " "
   100                              <1> .skipSpace:
   101 00002E3A 88CA                <1>     mov dl, cl
   102 00002E3C B402                <1>     mov ah, 02h
   103 00002E3E CD21                <1>     int 21h
   104 00002E40 88EA                <1>     mov dl, ch
   105 00002E42 B402                <1>     mov ah, 02h
   106 00002E44 CD21                <1>     int 21h
   107 00002E46 59                  <1>     pop rcx
   108                              <1>     return
    13                              <2> %%_ret:
    14 00002E47 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   109                              <1> .printSecond:
   110 00002E48 51                  <1>     push rcx
   111 00002E49 E854040000          <1>     call getDecimalWord
   112 00002E4E 84ED                <1>     test ch, ch ;Do we have an upper digit?
   113 00002E50 75E8                <1>     jnz .skipSpace
   114 00002E52 88CD                <1>     mov ch, cl
   115 00002E54 B130                <1>     mov cl, "0"
   116 00002E56 EBE2                <1>     jmp short .skipSpace
   117                              <1> .printYear:
   118 00002E58 05BC070000          <1>     add eax, 1980
   119 00002E5D 51                  <1>     push rcx
   120 00002E5E 53                  <1>     push rbx
   121 00002E5F E83E040000          <1>     call getDecimalWord ;Get unpacked in rcx
   122 00002E64 5B                  <1>     pop rbx
   123 00002E65 84DB                <1>     test bl, bl
   124 00002E67 740C                <1>     jz .twoDigitYear
   125 00002E69 88CA                <1>     mov dl, cl  ;Print the first digit
   126 00002E6B B402                <1>     mov ah, 02h
   127 00002E6D CD21                <1>     int 21h
   128 00002E6F 88EA                <1>     mov dl, ch  ;Print the second digit
   129 00002E71 B402                <1>     mov ah, 02h
   130 00002E73 CD21                <1>     int 21h
   131                              <1> .twoDigitYear:
   132 00002E75 C1E910              <1>     shr ecx, 10h    ;Get high word low
   133 00002E78 88CA                <1>     mov dl, cl  ;Print the upper digit
   134 00002E7A B402                <1>     mov ah, 02h
   135 00002E7C CD21                <1>     int 21h
   136 00002E7E 88EA                <1>     mov dl, ch  ;Print the lower digit
   137 00002E80 B402                <1>     mov ah, 02h
   138 00002E82 CD21                <1>     int 21h
   139 00002E84 59                  <1>     pop rcx
   140                              <1>     return
    13                              <2> %%_ret:
    14 00002E85 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> 
   142                              <1> 
   143                              <1> printTime:
   144                              <1> ;Input: eax = Packed Time
   145                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   146                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   147 00002E86 89C1                <1>     mov ecx, eax
   148 00002E88 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   149 00002E8D C1E80B              <1>     shr eax, 11
   150 00002E90 803DB0D1FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   151 00002E97 750B                <1>     jne .ampm
   152 00002E99 E85A000000          <1>     call .printHours
   153 00002E9E E831000000          <1>     call .printMinutes
   154                              <1>     return
    13                              <2> %%_ret:
    14 00002EA3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   155                              <1> .ampm:
   156 00002EA4 3D0C000000          <1>     cmp eax, 12
   157 00002EA9 7713                <1>     ja .pm
   158 00002EAB 7416                <1>     je .pm2
   159 00002EAD E846000000          <1>     call .printHours
   160 00002EB2 E81D000000          <1>     call .printMinutes
   161 00002EB7 B261                <1>     mov dl, "a"
   162 00002EB9 B402                <1>     mov ah, 02h
   163 00002EBB CD21                <1>     int 21h
   164                              <1>     return
    13                              <2> %%_ret:
    14 00002EBD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1> .pm:
   166 00002EBE 2D0C000000          <1>     sub eax, 12
   167                              <1> .pm2:
   168 00002EC3 E830000000          <1>     call .printHours
   169 00002EC8 E807000000          <1>     call .printMinutes
   170 00002ECD B270                <1>     mov dl, "p"
   171 00002ECF B402                <1>     mov ah, 02h
   172 00002ED1 CD21                <1>     int 21h
   173                              <1>     return
    13                              <2> %%_ret:
    14 00002ED3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   174                              <1> .printMinutes:
   175 00002ED4 8A1569D1FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   176 00002EDA B402                <1>     mov ah, 02h
   177 00002EDC CD21                <1>     int 21h
   178                              <1> 
   179 00002EDE 89C8                <1>     mov eax, ecx
   180 00002EE0 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   181 00002EE5 C1E805              <1>     shr eax, 5
   182                              <1> .printMinutesAlt:
   183 00002EE8 51                  <1>     push rcx
   184 00002EE9 E8B4030000          <1>     call getDecimalWord
   185 00002EEE 84ED                <1>     test ch, ch ;Do we have an upper digit?
   186 00002EF0 7514                <1>     jnz .skipSpace
   187 00002EF2 88CD                <1>     mov ch, cl
   188 00002EF4 B130                <1>     mov cl, "0"
   189 00002EF6 EB0E                <1>     jmp short .skipSpace
   190                              <1> .printHours:
   191 00002EF8 51                  <1>     push rcx
   192 00002EF9 E8A4030000          <1>     call getDecimalWord
   193 00002EFE 84ED                <1>     test ch, ch ;Do we have an upper digit?
   194 00002F00 7504                <1>     jnz .skipSpace
   195 00002F02 88CD                <1>     mov ch, cl
   196 00002F04 B120                <1>     mov cl, " "
   197                              <1> .skipSpace:
   198 00002F06 88CA                <1>     mov dl, cl
   199 00002F08 B402                <1>     mov ah, 02h
   200 00002F0A CD21                <1>     int 21h
   201 00002F0C 88EA                <1>     mov dl, ch
   202 00002F0E B402                <1>     mov ah, 02h
   203 00002F10 CD21                <1>     int 21h
   204 00002F12 59                  <1>     pop rcx
   205                              <1>     return
    13                              <2> %%_ret:
    14 00002F13 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   206                              <1> 
   207                              <1> 
   208                              <1> putVersionInPrompt:
   209 00002F14 488D1505DBFFFF      <1>     lea rdx, dosVer
   210 00002F1B B409                <1>     mov ah, 09h ;Print String
   211 00002F1D CD21                <1>     int 21h
   212 00002F1F B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   213 00002F21 CD21                <1>     int 21h
   214 00002F23 50                  <1>     push rax    ;Save minor version
   215 00002F24 E8B0000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   216 00002F29 E8C8000000          <1>     call printPackedBCD ;Print al
   217 00002F2E B22E                <1>     mov dl, "."
   218 00002F30 B402                <1>     mov ah, 02h
   219 00002F32 CD21                <1>     int 21h
   220 00002F34 58                  <1>     pop rax
   221 00002F35 88E0                <1>     mov al, ah  ;Get the minor version low
   222 00002F37 E89D000000          <1>     call hexToBCD
   223 00002F3C E8B5000000          <1>     call printPackedBCD
   224                              <1>     return
    13                              <2> %%_ret:
    14 00002F41 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   225                              <1> putEscInPrompt:
   226 00002F42 B21B                <1>     mov dl, ESC
   227 00002F44 EB1D                <1>     jmp short outChar
   228                              <1> 
   229                              <1> putMoneyInPrompt:
   230 00002F46 B224                <1>     mov dl, "$"
   231 00002F48 EB19                <1>     jmp short outChar
   232                              <1> 
   233                              <1> putEquInPrompt:
   234 00002F4A B23D                <1>     mov dl, "="
   235 00002F4C EB15                <1>     jmp short outChar
   236                              <1> 
   237                              <1> putPipeInPrompt:
   238 00002F4E B27C                <1>     mov dl, "|"
   239 00002F50 EB11                <1>     jmp short outChar
   240                              <1> 
   241                              <1> putGTinPrompt:
   242 00002F52 B23E                <1>     mov dl, ">"
   243 00002F54 EB0D                <1>     jmp short outChar
   244                              <1> 
   245                              <1> putLTinPrompt:
   246 00002F56 B23C                <1>     mov dl, "<"
   247 00002F58 EB09                <1>     jmp short outChar
   248                              <1> 
   249                              <1> putDriveInPrompt:
   250 00002F5A E8CF000000          <1>     call getCurrentDrive
   251 00002F5F 0441                <1>     add al, "A" ;Convert to letter
   252 00002F61 88C2                <1>     mov dl, al
   253                              <1> outChar:
   254 00002F63 B402                <1>     mov ah, 02h ;Echo to STDOUT
   255 00002F65 CD21                <1>     int 21h
   256                              <1>     return
    13                              <2> %%_ret:
    14 00002F67 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   257                              <1> putCWDInPrompt:
   258 00002F68 E8C1000000          <1>     call getCurrentDrive
   259 00002F6D 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   260 00002F6F FEC2                <1>     inc dl
   261 00002F71 0441                <1>     add al, "A" ;Convert to letter
   262 00002F73 B43A                <1>     mov ah, ":"
   263 00002F75 488D3DE0D0FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   264 00002F7C 66AB                <1>     stosw   ;Store X:, rdi+=2
   265 00002F7E 8A05A7D0FFFF        <1>     mov al, byte [pathSep]
   266 00002F84 AA                  <1>     stosb   ;Store pathSep, inc rdi
   267 00002F85 B447                <1>     mov ah, 47h ;Get Current Working Directory
   268 00002F87 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   269 00002F8A CD21                <1>     int 21h
   270 00002F8C 721F                <1>     jc .badDrive
   271 00002F8E E8B9000000          <1>     call strlen
   272 00002F93 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   273                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   274 00002F99 B800400000          <1>     mov eax, 4000h ;Write to handle
   275 00002F9E BB01000000          <1>     mov ebx, 1  ;STDOUT
   276 00002FA3 488D15B2D0FFFF      <1>     lea rdx, currDirStr
   277 00002FAA CD21                <1>     int 21h
   278                              <1>     return
    13                              <2> %%_ret:
    14 00002FAC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   279                              <1> .badDrive:
   280                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   281 00002FAD 488D1534DBFFFF      <1>     lea rdx, badDrvMsg
   282 00002FB4 E8A3FDFFFF          <1>     call printString
   283                              <1>     return
    13                              <2> %%_ret:
    14 00002FB9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   284                              <1> 
   285                              <1> BCDtoHex:
   286                              <1> ;Converts a BCD value to a Hex byte
   287                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   288 00002FBA 51                  <1>     push rcx
   289 00002FBB 0FB6C0              <1>     movzx eax, al   ;Zero extend
   290 00002FBE 89C1                <1>     mov ecx, eax    ;Save al in ecx
   291 00002FC0 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   292 00002FC5 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   293 00002FCB C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   294                              <1> .bth:
   295 00002FCE 050A000000          <1>     add eax, 10
   296 00002FD3 FFC9                <1>     dec ecx
   297 00002FD5 75F7                <1>     jnz .bth
   298 00002FD7 59                  <1>     pop rcx
   299 00002FD8 C3                  <1>     ret
   300                              <1> 
   301                              <1> hexToBCD:
   302                              <1> ;Converts a Hex byte into two BCD digits
   303                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   304 00002FD9 51                  <1>     push rcx
   305 00002FDA 0FB6C0              <1>     movzx eax, al   ;Zero extend
   306 00002FDD 31C9                <1>     xor ecx, ecx
   307                              <1> .htb0:
   308 00002FDF 3D0A000000          <1>     cmp eax, 10
   309 00002FE4 7209                <1>     jb .htb1
   310 00002FE6 2D0A000000          <1>     sub eax, 10
   311 00002FEB FFC1                <1>     inc ecx
   312 00002FED EBF0                <1>     jmp short .htb0
   313                              <1> .htb1:
   314 00002FEF C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   315 00002FF2 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   316 00002FF4 59                  <1>     pop rcx
   317 00002FF5 C3                  <1>     ret
   318                              <1> 
   319                              <1> printPackedBCD:
   320                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   321                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   322                              <1> ;Preserves all registers
   323 00002FF6 50                  <1>     push rax
   324 00002FF7 52                  <1>     push rdx
   325 00002FF8 88C4                <1>     mov ah, al
   326 00002FFA 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   327 00002FFC 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   328 00002FFF 7508                <1>     jnz .upperNybble
   329 00003001 B220                <1>     mov dl, " "
   330 00003003 B402                <1>     mov ah, 02h
   331 00003005 CD21                <1>     int 21h
   332 00003007 EB0E                <1>     jmp short .lowerNybble
   333                              <1> .upperNybble:
   334 00003009 50                  <1>     push rax
   335 0000300A C0EC04              <1>     shr ah, 4
   336 0000300D 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   337 00003010 88E2                <1>     mov dl, ah
   338 00003012 B402                <1>     mov ah, 02h ;Print DL
   339 00003014 CD21                <1>     int 21h
   340 00003016 58                  <1>     pop rax
   341                              <1> .lowerNybble:
   342 00003017 0430                <1>     add al, "0"
   343 00003019 88C2                <1>     mov dl, al
   344 0000301B B402                <1>     mov ah, 02h ;Print DL
   345 0000301D CD21                <1>     int 21h
   346 0000301F 5A                  <1>     pop rdx
   347 00003020 58                  <1>     pop rax
   348                              <1>     return
    13                              <2> %%_ret:
    14 00003021 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   349                              <1> 
   350                              <1> setDrive:
   351                              <1> ;Input: dl = 0 based Drive number to set to
   352                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   353                              <1> ;AX trashed.
   354 00003022 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   355 00003024 CD21                <1>     int 21h 
   356 00003026 E803000000          <1>     call getCurrentDrive
   357 0000302B 38D0                <1>     cmp al, dl  ;Is this the same drive?
   358                              <1>     return
    13                              <2> %%_ret:
    14 0000302D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   359                              <1> getCurrentDrive:
   360                              <1> ;Returns the 0 based current drive in al
   361 0000302E B419                <1>     mov ah, 19h
   362 00003030 CD21                <1>     int 21h
   363                              <1>     return
    13                              <2> %%_ret:
    14 00003032 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   364                              <1> 
   365                              <1> strcpy:
   366                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   367                              <1> ;rsi -> Source
   368                              <1> ;rdi -> Destination
   369 00003033 51                  <1>     push rcx
   370 00003034 57                  <1>     push rdi
   371 00003035 4889F7              <1>     mov rdi, rsi
   372 00003038 E80F000000          <1>     call strlen ;Get the length of the string in rsi
   373 0000303D 5F                  <1>     pop rdi
   374 0000303E F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   375 00003040 59                  <1>     pop rcx
   376                              <1>     return
    13                              <2> %%_ret:
    14 00003041 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   377                              <1> 
   378                              <1> strcpy2:
   379                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   380                              <1> ;rsi -> Source
   381                              <1> ;rdi -> Destination
   382 00003042 56                  <1>     push rsi
   383 00003043 57                  <1>     push rdi
   384 00003044 E8EAFFFFFF          <1>     call strcpy 
   385 00003049 5F                  <1>     pop rdi
   386 0000304A 5E                  <1>     pop rsi
   387                              <1>     return
    13                              <2> %%_ret:
    14 0000304B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   388                              <1> 
   389                              <1> strlen:
   390                              <1> ;Gets the length of a ASCIIZ string
   391                              <1> ;Input: rdi = Source buffer
   392                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   393 0000304C 50                  <1>     push rax
   394 0000304D B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   395 00003052 CD2F                <1>     int 2fh
   396 00003054 58                  <1>     pop rax
   397                              <1>     return
    13                              <2> %%_ret:
    14 00003055 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> ucChar:
   400                              <1> ;Input: al = Char to uppercase
   401                              <1> ;Output: al = Adjusted char 
   402 00003056 53                  <1>     push rbx
   403 00003057 4889E3              <1>     mov rbx, rsp    ;Save the stack ptr
   404 0000305A 50                  <1>     push rax    ;Push the char twice on the stack
   405 0000305B 50                  <1>     push rax
   406 0000305C B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   407 00003061 CD2F                <1>     int 2fh         ;Returns the processed char in al
   408 00003063 4889DC              <1>     mov rsp, rbx    ;Return the stack ptr to where it was
   409 00003066 5B                  <1>     pop rbx
   410                              <1>     return
    13                              <2> %%_ret:
    14 00003067 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   411                              <1> 
   412                              <1> skipDelimiters:
   413                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   414                              <1> ; command delimiters but a subset thereof. 
   415                              <1> ;These are the same across all codepages.
   416                              <1> ;Input: rsi must point to the start of the data string
   417                              <1> ;Output: rsi points to the first non-delimiter char
   418 00003068 50                  <1>     push rax
   419                              <1> .l1:
   420 00003069 AC                  <1>     lodsb
   421 0000306A E807000000          <1>     call isALdelimiter
   422 0000306F 74F8                <1>     jz .l1
   423                              <1> .exit:
   424 00003071 58                  <1>     pop rax
   425 00003072 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   426                              <1>     return
    13                              <2> %%_ret:
    14 00003075 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   427                              <1> 
   428                              <1> isALdelimiter:
   429                              <1> ;Returns: ZF=NZ if al is not a command separator 
   430                              <1> ;         ZF=ZE if al is a command separator
   431 00003076 3C20                <1>     cmp al, " "
   432                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003078 74(75)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   433 0000307A 3C3B                <1>     cmp al, ";"
   434                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000307C 74(75)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   435 0000307E 3C3D                <1>     cmp al, "="
   436                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003080 74(75)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   437 00003082 3C2C                <1>     cmp al, ","
   438                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003084 74(75)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   439 00003086 3C09                <1>     cmp al, TAB
   440                              <1>     return
    13                              <2> %%_ret:
    14 00003088 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   441                              <1> 
   442                              <1> printPrompt:
   443 00003089 66813D97CFFFFFFFFF  <1>     cmp word [promptPtr], -1
   444 00003092 750B                <1>     jne .validPrompt
   445                              <1>     ;Here we print the default prompt
   446 00003094 E8CFFEFFFF          <1>     call putCWDInPrompt
   447 00003099 E8B4FEFFFF          <1>     call putGTinPrompt
   448                              <1>     return
    13                              <2> %%_ret:
    14 0000309E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   449                              <1> .validPrompt:
   450                              <1>     return
    13                              <2> %%_ret:
    14 0000309F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   451                              <1> 
   452                              <1> clearCommandState:
   453                              <1> ;Clears the command state
   454 000030A0 488D3D0DD0FFFF      <1>     lea rdi, cmdStatePtr
   455 000030A7 B90C000000          <1>     mov ecx, cmdStateL
   456 000030AC 31C0                <1>     xor eax, eax
   457 000030AE F3AA                <1>     rep stosb
   458 000030B0 C705FCCFFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   458 000030B9 FF                  <1>
   459                              <1>     return
    13                              <2> %%_ret:
    14 000030BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   460                              <1> 
   461                              <1> clearCommandLineState:
   462                              <1> ;Clears the command line state after a 0Dh encountered
   463 000030BB 488D3DDDCFFFFF      <1>     lea rdi, cmdLineStatePtr
   464 000030C2 B921000000          <1>     mov ecx, cmdLineStateL
   465 000030C7 31C0                <1>     xor eax, eax
   466 000030C9 F3AA                <1>     rep stosb
   467 000030CB C705DBCFFFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   467 000030D4 FF                  <1>
   468 000030D5 C705D7CFFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   468 000030DE FF                  <1>
   469                              <1>     return
    13                              <2> %%_ret:
    14 000030DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   470                              <1> 
   471                              <1> asciiToFCB:
   472                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   473                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   474                              <1> ;Also doesn't check if chars are valid
   475                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   476                              <1> ;Name is space padded.
   477                              <1> ;Input: rsi = ASCII string buffer
   478                              <1> ;       rdi = FCB name buffer
   479                              <1> ;Output: al = Char that terminated the source string 
   480 000030E0 53                  <1>     push rbx    
   481 000030E1 57                  <1>     push rdi
   482 000030E2 B90B000000          <1>     mov ecx, 11
   483 000030E7 B020                <1>     mov al, " "
   484 000030E9 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   485 000030EB 5F                  <1>     pop rdi
   486 000030EC 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   487 000030EF EB1D                <1>     jmp short asciiFilenameToFCB.processName
   488                              <1> asciiFilenameToFCB:
   489                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   490                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   491                              <1> ;Also doesn't check if chars are valid
   492                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   493                              <1> ;Name is space padded.
   494                              <1> ;Input: rsi = ASCII string buffer
   495                              <1> ;       rdi = FCB name buffer
   496                              <1> ;Output: al = Char that terminated the source string 
   497 000030F1 53                  <1>     push rbx    
   498 000030F2 57                  <1>     push rdi
   499 000030F3 B90B000000          <1>     mov ecx, 11
   500 000030F8 B020                <1>     mov al, " "
   501 000030FA F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   502 000030FC 5F                  <1>     pop rdi
   503 000030FD 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   504                              <1>     ;Preprocess for Dir Searches
   505 00003100 803E2E              <1>     cmp byte [rsi], "."
   506 00003103 7509                <1>     jne .processName
   507 00003105 A4                  <1>     movsb   ;Store the first dot
   508 00003106 803E2E              <1>     cmp byte [rsi], "."
   509 00003109 752C                <1>     jne .exitBadChar
   510 0000310B A4                  <1>     movsb
   511 0000310C EB29                <1>     jmp short .exitBadChar
   512                              <1> .processName:
   513 0000310E AC                  <1>     lodsb   ;Get the char in al
   514 0000310F 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   515 00003111 7426                <1>     jz .exit
   516 00003113 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   517 00003115 7407                <1>     je .extSpace
   518 00003117 3C2E                <1>     cmp al, "."
   519 00003119 740C                <1>     je .ext
   520 0000311B AA                  <1>     stosb   ;Store the char
   521 0000311C EBF0                <1>     jmp short .processName
   522                              <1> .extSpace:
   523                              <1> ;Now we scan for a period in the name
   524 0000311E AC                  <1>     lodsb   ;Get a char and increase rsi
   525 0000311F 84C0                <1>     test al, al
   526 00003121 7416                <1>     jz .exit
   527 00003123 3C2E                <1>     cmp al, "."     ;If al is not a period...
   528 00003125 75F7                <1>     jne .extSpace   ; keep searching
   529                              <1> .ext:
   530 00003127 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   531                              <1> .processExt:
   532 0000312B AC                  <1>     lodsb
   533 0000312C 84C0                <1>     test al, al
   534 0000312E 7409                <1>     jz .exit
   535 00003130 3C20                <1>     cmp al, " "
   536 00003132 7405                <1>     je .exit
   537 00003134 AA                  <1>     stosb
   538 00003135 EBF4                <1>     jmp short .processExt
   539                              <1> .exitBadChar:
   540 00003137 30C0                <1>     xor al, al  ;Return a null terminator
   541                              <1> .exit:
   542 00003139 5B                  <1>     pop rbx
   543                              <1>     return
    13                              <2> %%_ret:
    14 0000313A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   544                              <1> 
   545                              <1> findLastPathComponant:
   546                              <1> ;Finds the last path componant of an ASCIIZ path string
   547                              <1> ;Input: rdi -> Head of the path to find last componant on
   548                              <1> ;Output: rdi -> Start of the last componant
   549 0000313B 50                  <1>     push rax
   550 0000313C 51                  <1>     push rcx
   551 0000313D 31C9                <1>     xor ecx, ecx
   552 0000313F FFC9                <1>     dec ecx
   553 00003141 31C0                <1>     xor eax, eax
   554 00003143 F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   555 00003145 F7D1                <1>     not ecx     ;This gets the count of chars  
   556 00003147 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   557 0000314A 8A05DBCEFFFF        <1>     mov al, byte [pathSep]
   558 00003150 FD                  <1>     std
   559 00003151 F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   560 00003153 FC                  <1>     cld
   561 00003154 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   562 00003156 48FFC7              <1>     inc rdi     ;Point at pathsep
   563                              <1> .exit:
   564 00003159 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   565 0000315C 59                  <1>     pop rcx
   566 0000315D 58                  <1>     pop rax
   567                              <1>     return
    13                              <2> %%_ret:
    14 0000315E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   568                              <1> 
   569                              <1> FCBToAsciiz:
   570                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   571                              <1> ;Name is space padded too
   572                              <1> ;Input: rsi = FCB name buffer
   573                              <1> ;       rdi = ASCIIZ string buffer
   574 0000315F B908000000          <1>     mov ecx, 8
   575 00003164 F3A4                <1>     rep movsb   ;Move the name over
   576                              <1> .scanNameSpace:
   577 00003166 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   578 0000316A 750D                <1>     jne .ext
   579 0000316C 48FFCF              <1>     dec rdi
   580 0000316F FFC1                <1>     inc ecx
   581 00003171 81F908000000        <1>     cmp ecx, 8
   582 00003177 72ED                <1>     jb .scanNameSpace
   583                              <1> .ext:
   584 00003179 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   585 0000317E 7506                <1>     jne .validExt
   586 00003180 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   587 00003184 7415                <1>     je .exit
   588                              <1> .validExt:
   589 00003186 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   590 00003188 AA                  <1>     stosb
   591 00003189 B903000000          <1>     mov ecx, 3
   592 0000318E F3A4                <1>     rep movsb   ;Move the three extension chars over
   593                              <1> .scanExtSpace:
   594 00003190 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   595 00003194 7505                <1>     jne .exit
   596 00003196 48FFCF              <1>     dec rdi
   597 00003199 EBF5                <1>     jmp short .scanExtSpace
   598                              <1> .exit:
   599 0000319B 31C0                <1>     xor eax, eax
   600 0000319D AA                  <1>     stosb   ;Store a null at the end
   601                              <1>     return
    13                              <2> %%_ret:
    14 0000319E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   602                              <1> 
   603                              <1> cpDelimOrCtrlStringToBufz:
   604                              <1> ;Copy a delimited or control char terminated string to a buffer
   605                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   606                              <1> ;       rdi -> Buffer to store null terminated string in
   607                              <1> ;Output: rsi -> First char past string end
   608                              <1> ;       rdi -> One char past null terminator on string buffer
   609 0000319F C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   610                              <1> .lp:
   611 000031A2 AC                  <1>     lodsb
   612 000031A3 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here
   613 000031A5 760A                <1>     jbe .exit
   614 000031A7 E8CAFEFFFF          <1>     call isALdelimiter
   615 000031AC 7403                <1>     je .exit
   616 000031AE AA                  <1>     stosb
   617 000031AF EBF1                <1>     jmp short .lp
   618                              <1> .exit:
   619 000031B1 31C0                <1>     xor eax, eax
   620 000031B3 AA                  <1>     stosb   ;Store a null terminator
   621                              <1>     return
    13                              <2> %%_ret:
    14 000031B4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   622                              <1> 
   623                              <1> 
   624                              <1> cpDelimPathToBufz:
   625                              <1> ;Copy a delimited path into buffer and null terminate.
   626                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   627                              <1> ;       rdi -> Buffer to store null terminated path in
   628                              <1> ;Output: rsi -> First char past pathname delimiter
   629                              <1> ;       rdi -> One char past null terminator on pathname buffer
   630 000031B5 53                  <1>     push rbx
   631 000031B6 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   632 000031B9 C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   633                              <1> .lp:
   634 000031BC AC                  <1>     lodsb   ;Get the char
   635 000031BD 3C0D                <1>     cmp al, CR
   636 000031BF 7412                <1>     je .gotRedirPath
   637 000031C1 E8B0FEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   638 000031C6 740B                <1>     jz .gotRedirPath 
   639 000031C8 3A055ECEFFFF        <1>     cmp al, byte [switchChar]
   640 000031CE 7403                <1>     je .gotRedirPath
   641 000031D0 AA                  <1>     stosb   ;Store this char and loop next char
   642 000031D1 EBE9                <1>     jmp short .lp
   643                              <1> .gotRedirPath:
   644 000031D3 50                  <1>     push rax    ;Save the char on stack
   645 000031D4 30C0                <1>     xor al, al  ;Get null terminator char
   646 000031D6 4829FB              <1>     sub rbx, rdi
   647 000031D9 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   648 000031E0 7412                <1>     je .notColon
   649 000031E2 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   650 000031E9 7409                <1>     je .notColon
   651 000031EB 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   652 000031EF 7503                <1>     jne .notColon
   653 000031F1 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   654                              <1> .notColon:
   655 000031F4 AA                  <1>     stosb   ;Store the null terminator for the redir path
   656 000031F5 58                  <1>     pop rax ;Get back the char in al
   657 000031F6 5B                  <1>     pop rbx
   658                              <1>     return
    13                              <2> %%_ret:
    14 000031F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   659                              <1> 
   660                              <1> buildCommandPath:
   661                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   662 000031F8 0FB605BCCEFFFF      <1>     movzx eax, byte [arg1Off]
   663 000031FF 4C8B0509CEFFFF      <1>     mov r8, [pspPtr]
   664 00003206 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   665 0000320D 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   666                              <1> copyArgumentToSearchSpec:
   667                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   668                              <1> ; and null terminates
   669 00003210 488D3DC9D1FFFF      <1>     lea rdi, searchSpec
   670 00003217 E899FFFFFF          <1>     call cpDelimPathToBufz
   671                              <1>     return
    13                              <2> %%_ret:
    14 0000321C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   672                              <1> 
   673                              <1> scanForWildcards:
   674                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   675                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   676 0000321D 50                  <1>     push rax
   677 0000321E 56                  <1>     push rsi
   678                              <1> .lp:
   679 0000321F AC                  <1>     lodsb
   680 00003220 3C3F                <1>     cmp al, "?"
   681 00003222 740A                <1>     je .exit
   682 00003224 3C2A                <1>     cmp al, "*"
   683 00003226 7406                <1>     je .exit
   684 00003228 84C0                <1>     test al, al
   685 0000322A 75F3                <1>     jnz .lp
   686 0000322C FEC0                <1>     inc al  ;This will clear the ZF
   687                              <1> .exit:
   688 0000322E 5E                  <1>     pop rsi
   689 0000322F 58                  <1>     pop rax
   690                              <1>     return
    13                              <2> %%_ret:
    14 00003230 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   691                              <1> 
   692                              <1> printDecimalWord:
   693                              <1> ;Takes qword in rax and print it's decimal representation
   694                              <1> ;Takes the qword in eax and prints its decimal representation
   695 00003231 31C9                <1>     xor ecx, ecx
   696 00003233 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   697 00003235 85C0                <1>     test eax, eax
   698 00003237 750C                <1>     jnz .notZero
   699 00003239 B930000000          <1>     mov ecx, "0"
   700 0000323E BD01000000          <1>     mov ebp, 1  ;Print one digit
   701 00003243 EB3E                <1>     jmp short .dpfb2
   702                              <1> .notZero:
   703 00003245 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   704 00003247 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   705                              <1> .dpfb0:
   706 0000324C FFC5                <1>     inc ebp
   707 0000324E 81FD08000000        <1>     cmp ebp, 8
   708 00003254 7206                <1>     jb .dpfb00
   709 00003256 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   710 0000325A EB04                <1>     jmp short .dpfb01
   711                              <1> .dpfb00:
   712 0000325C 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   713                              <1> .dpfb01:
   714 00003260 31D2                <1>     xor edx, edx
   715 00003262 48F7F6              <1>     div rsi
   716 00003265 80C230              <1>     add dl, '0'
   717 00003268 80FA39              <1>     cmp dl, '9'
   718 0000326B 7603                <1>     jbe .dpfb1
   719 0000326D 80C207              <1>     add dl, 'A'-'0'-10
   720                              <1> .dpfb1:
   721 00003270 81FD08000000        <1>     cmp ebp, 8
   722 00003276 7204                <1>     jb .dpfb10
   723 00003278 88D3                <1>     mov bl, dl ;Add the bottom bits
   724 0000327A EB02                <1>     jmp short .dpfb11
   725                              <1> .dpfb10:
   726 0000327C 88D1                <1>     mov cl, dl    ;Save remainder byte
   727                              <1> .dpfb11:
   728 0000327E 4885C0              <1>     test rax, rax
   729 00003281 75C9                <1>     jnz .dpfb0
   730                              <1> .dpfb2:
   731 00003283 81FD08000000        <1>     cmp ebp, 8
   732 00003289 7208                <1>     jb .dpfb20
   733 0000328B 88DA                <1>     mov dl, bl
   734 0000328D 48C1EB08            <1>     shr rbx, 8
   735 00003291 EB06                <1>     jmp short .dpfb21
   736                              <1> .dpfb20:
   737 00003293 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   738 00003295 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   739                              <1> .dpfb21:
   740 00003299 B402                <1>     mov ah, 02h
   741 0000329B CD21                <1>     int 21h
   742 0000329D FFCD                <1>     dec ebp
   743 0000329F 75E2                <1>     jnz .dpfb2
   744                              <1>     return
    13                              <2> %%_ret:
    14 000032A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   745                              <1> 
   746                              <1> getDecimalWord:
   747                              <1> ;Works on MAX A dword in eax
   748                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   749 000032A2 31C9                <1>     xor ecx, ecx
   750 000032A4 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   751 000032A6 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   752                              <1> .dpfb0:
   753 000032AB FFC5                <1>     inc ebp
   754 000032AD 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   755 000032B1 31D2                <1>     xor edx, edx
   756 000032B3 48F7F3              <1>     div rbx
   757 000032B6 80C230              <1>     add dl, '0'
   758 000032B9 80FA39              <1>     cmp dl, '9'
   759 000032BC 7603                <1>     jbe .dpfb1
   760 000032BE 80C207              <1>     add dl, 'A'-'0'-10
   761                              <1> .dpfb1:
   762 000032C1 88D1                <1>     mov cl, dl    ;Save remainder byte
   763 000032C3 4885C0              <1>     test rax, rax
   764 000032C6 75E3                <1>     jnz .dpfb0
   765                              <1>     return
    13                              <2> %%_ret:
    14 000032C8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   766                              <1> 
   767                              <1> freezePC:
   768 000032C9 488D1559DAFFFF      <1>     lea rdx, memBad1
   769 000032D0 B409                <1>     mov ah, 09h
   770 000032D2 CD21                <1>     int 21h
   771                              <1> .altEP:
   772 000032D4 488D1577DAFFFF      <1>     lea rdx, memBad3
   773 000032DB B409                <1>     mov ah, 09h
   774 000032DD CD21                <1>     int 21h
   775                              <1> .lp:
   776 000032DF F390                <1>     pause
   777 000032E1 F4                  <1>     hlt
   778 000032E2 EBFB                <1>     jmp short .lp
   779                              <1> 
   780                              <1> setDTA:
   781 000032E4 50                  <1>     push rax
   782 000032E5 52                  <1>     push rdx
   783 000032E6 488D15E3CDFFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   784 000032ED B8001A0000          <1>     mov eax, 1A00h
   785 000032F2 CD21                <1>     int 21h
   786 000032F4 5A                  <1>     pop rdx
   787 000032F5 58                  <1>     pop rax
   788                              <1>     return
    13                              <2> %%_ret:
    14 000032F6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   789                              <1> 
   790                              <1> getDTA:
   791 000032F7 488D15D2CDFFFF      <1>     lea rdx, cmdFFBlock
   792                              <1>     return
    13                              <2> %%_ret:
    14 000032FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   793                              <1> 
   794                              <1> cmpEnvVar:
   795                              <1> ;Checks that we have found the environment variable we are looking for.
   796                              <1> ;Input: rsi -> Environment var to verify the name of
   797                              <1> ;       rdi -> Environment var name to compare against
   798                              <1> ;       ecx = Length of the environment variable
   799                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
   800 000032FF 56                  <1>     push rsi
   801 00003300 57                  <1>     push rdi
   802 00003301 51                  <1>     push rcx
   803 00003302 F3A6                <1>     rep cmpsb
   804 00003304 59                  <1>     pop rcx
   805 00003305 5F                  <1>     pop rdi
   806 00003306 5E                  <1>     pop rsi
   807                              <1>     return
    13                              <2> %%_ret:
    14 00003307 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   808                              <1> 
   809                              <1> checkEnvGoodAndGet:
   810                              <1> ;Gets the env ptr and checks that it is double null terminated.
   811                              <1> ;Output:
   812                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
   813                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
   814                              <1> ;           rsi -> Environment pointer
   815 00003308 50                  <1>     push rax
   816 00003309 51                  <1>     push rcx
   817 0000330A 57                  <1>     push rdi
   818 0000330B 4150                <1>     push r8
   819 0000330D 4C8B05FBCCFFFF      <1>     mov r8, qword [pspPtr]
   820 00003314 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
   821 00003318 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
   822 0000331B 741A                <1>     jz .badExit
   823 0000331D 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
   824 00003320 C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
   825                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
   826 00003323 31C0                <1>     xor eax, eax
   827                              <1> .pathNulScan:
   828 00003325 F2AE                <1>     repne scasb
   829 00003327 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
   830 00003329 740C                <1>     jz .badExit
   831 0000332B 3807                <1>     cmp byte [rdi], al  ;Is char two null?
   832 0000332D 75F6                <1>     jne .pathNulScan    ;If not, keep searching
   833 0000332F 31C0                <1>     xor eax, eax
   834 00003331 FFC0                <1>     inc eax ;Clear the ZF
   835 00003333 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
   836                              <1> .badExit:
   837 00003337 4158                <1>     pop r8
   838 00003339 5F                  <1>     pop rdi
   839 0000333A 59                  <1>     pop rcx
   840 0000333B 58                  <1>     pop rax
   841                              <1>     return
    13                              <2> %%_ret:
    14 0000333C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 0000333D 53                  <1>     push rbx
    25 0000333E 51                  <1>     push rcx
    26 0000333F 52                  <1>     push rdx
    27 00003340 57                  <1>     push rdi
    28 00003341 56                  <1>     push rsi
    29 00003342 FC                  <1>     cld         ;Make String ops go forward
    30                              <1> 
    31 00003343 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00003346 488D1560D4FFFF      <1>     lea rdx, crlf
    33 0000334D E80AFAFFFF          <1>     call printString
    34                              <1> 
    35 00003352 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    36 00003358 B90C000000          <1>     mov ecx, 0Ch
    37 0000335D 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    38 0000335F 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    39 00003362 480FB7FF            <1>     movzx rdi, di
    40 00003366 4889FA              <1>     mov rdx, rdi    ;Copy error code
    41 00003369 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    42 0000336D 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    43 00003370 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    44 00003373 488D152D010000      <1>     lea rdx, qword [.errorMsgTable]
    45 0000337A 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    46 0000337E E8D9F9FFFF          <1>     call printString     ;Call DOS to print first part of message
    47                              <1> 
    48 00003383 488D150E020000      <1>     lea rdx, qword [.readmsg]
    49 0000338A 488D3D16020000      <1>     lea rdi, qword [.writemsg]
    50 00003391 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    51 00003394 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    52 00003398 E8BFF9FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
    53                              <1> 
    54 0000339D F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    55 000033A0 0F85E7000000        <1>     jnz .charError
    56                              <1> ;Disk error continues here
    57 000033A6 488D15E4010000      <1>     lea rdx, qword [.drive] ;Drive message
    58 000033AD E8AAF9FFFF          <1>     call printString
    59 000033B2 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    60 000033B4 80C241              <1>     add dl, "A" ;Add ASCII code
    61 000033B7 B402                <1>     mov ah, 02h ;Print char in dl
    62 000033B9 CD21                <1>     int 21h
    63                              <1> .userInput:
    64 000033BB E895F9FFFF          <1>     call printCRLF  ;Print new line
    65                              <1> ;Abort, Retry, Ignore, Fail is word order
    66                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    67                              <1> .userAbort:
    68                              <1> ;Abort is always an option
    69 000033C0 488D15EF010000      <1>     lea rdx, qword [.abortmsg]
    70 000033C7 E890F9FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
    71                              <1> .userRetry:
    72 000033CC F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    73 000033CF 7418                <1>     jz .userIgnore    ;If clear, dont print message
    74 000033D1 488D15F6010000      <1>     lea rdx, qword [.betweenMsg]
    75 000033D8 E87FF9FFFF          <1>     call printString
    76 000033DD 488D15DF010000      <1>     lea rdx, qword [.retrymsg]
    77 000033E4 E873F9FFFF          <1>     call printString
    78                              <1> .userIgnore:
    79 000033E9 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    80 000033EC 7418                <1>     jz .userFail
    81 000033EE 488D15D9010000      <1>     lea rdx, qword [.betweenMsg]
    82 000033F5 E862F9FFFF          <1>     call printString
    83 000033FA 488D15BB010000      <1>     lea rdx, qword [.ignoremsg]
    84 00003401 E856F9FFFF          <1>     call printString
    85                              <1> .userFail:
    86 00003406 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    87 00003409 7418                <1>     jz .userMsgEnd
    88 0000340B 488D15BC010000      <1>     lea rdx, qword [.betweenMsg]
    89 00003412 E845F9FFFF          <1>     call printString
    90 00003417 488D15AB010000      <1>     lea rdx, qword [.failmsg]
    91 0000341E E839F9FFFF          <1>     call printString
    92                              <1> .userMsgEnd:
    93 00003423 488D15A7010000      <1>     lea rdx, qword [.endMsg]
    94 0000342A E82DF9FFFF          <1>     call printString
    95                              <1> ;Get user input now 
    96 0000342F 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
    97 00003431 488D3D9C010000      <1>     lea rdi, qword [.responses] ;Go to start of string
    98 00003438 B401                <1>     mov ah, 01h ;STDIN without Console Echo
    99 0000343A CD21                <1>     int 21h ;Get char in al
   100 0000343C 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   101 0000343E 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   102 00003440 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   103                              <1> .uip1:
   104 00003442 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   105 00003443 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   106 00003445 FFC1                <1>     inc ecx
   107 00003447 81F904000000        <1>     cmp ecx, 4
   108 0000344D 75F3                <1>     jne .uip1
   109 0000344F E967FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   110                              <1> .validInput:
   111 00003454 E8FCF8FFFF          <1>     call printCRLF   ;Note the input was accepted
   112 00003459 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   113                              <1> ;Now check if the input is permitted
   114 0000345B 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   115 0000345D 7427                <1>     je .cehExit
   116 0000345F 84C0                <1>     test al, al ;Check if 0 => Ignore
   117 00003461 740F                <1>     je .viIgnore
   118 00003463 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   119 00003465 7416                <1>     je .viRetry
   120                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   121 00003467 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   122 0000346A 0F844BFFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   123 00003470 EB14                <1>     jmp short .cehExit
   124                              <1> .viIgnore:
   125 00003472 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   126 00003475 0F8440FFFFFF        <1>     jz .userInput
   127 0000347B EB09                <1>     jmp short .cehExit
   128                              <1> .viRetry:
   129 0000347D F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   130 00003480 0F8435FFFFFF        <1>     jz .userInput
   131                              <1> .cehExit:
   132 00003486 5E                  <1>     pop rsi
   133 00003487 5F                  <1>     pop rdi
   134 00003488 5A                  <1>     pop rdx
   135 00003489 59                  <1>     pop rcx
   136 0000348A 5B                  <1>     pop rbx
   137 0000348B 48CF                <1>     iretq
   138                              <1> .charError:
   139 0000348D B908000000          <1>     mov ecx, 8  ;8 chars in device name
   140 00003492 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   141                              <1> .ce1:
   142 00003499 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   143 0000349A 88C2                <1>     mov dl, al  ;Move char into dl
   144 0000349C B402                <1>     mov ah, 02h
   145 0000349E CD21                <1>     int 21h ;Print char
   146 000034A0 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   147 000034A2 E914FFFFFF          <1>     jmp .userInput
   148                              <1> 
   149                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   150 000034A7 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   150 000034B0 746563742024202020  <1>
   151 000034B9 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   151 000034C2 6E6974202420202020  <1>
   152 000034CB 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   152 000034D4 202420202020202020  <1>
   153 000034DD 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   153 000034E6 6F6D6D616E64202420  <1>
   154 000034EF 446174612024202020- <1>             db "Data $            "       ;Error 4
   154 000034F8 202020202020202020  <1>
   155 00003501 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   155 0000350A 737420242020202020  <1>
   156 00003513 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   156 0000351C 202020202020202020  <1>
   157 00003525 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   157 0000352E 656469612024202020  <1>
   158 00003537 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   158 00003540 7420466F756E642024  <1>
   159 00003549 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   159 00003552 706572202420202020  <1>
   160 0000355B 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   160 00003564 6C7420242020202020  <1>
   161 0000356D 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   161 00003576 742024202020202020  <1>
   162 0000357F 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   162 00003588 61696C757265202420  <1>
   163                              <1> 
   164 00003591 64726976652024      <1> .drive      db "drive $"
   165 00003598 6572726F7220726561- <1> .readmsg    db "error reading $"
   165 000035A1 64696E672024        <1>
   166 000035A7 6572726F7220777269- <1> .writemsg   db "error writing $"
   166 000035B0 74696E672024        <1>
   167 000035B6 41626F727424        <1> .abortmsg   db "Abort$" 
   168 000035BC 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   169 000035C3 526574727924        <1> .retrymsg   db "Retry$"
   170 000035C9 4661696C24          <1> .failmsg    db "Fail$"
   171 000035CE 2C2024              <1> .betweenMsg db ", $"
   172 000035D1 3F2024              <1> .endMsg     db "? $"
   173 000035D4 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   174                              <1> 
   175                              <1> int23h:
   176 000035D8 F6054ECAFFFFFF      <1>     test byte [permaSwitch], -1
   177 000035DF 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   178                              <1>     ;Else, we juggle parent PSP's
   179 000035E1 50                  <1>     push rax
   180 000035E2 53                  <1>     push rbx
   181 000035E3 488B052DCAFFFF      <1>     mov rax, qword [realParent]
   182 000035EA 488B1D1ECAFFFF      <1>     mov rbx, qword [pspPtr]
   183 000035F1 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   184 000035F5 5B                  <1>     pop rbx
   185 000035F6 58                  <1>     pop rax
   186                              <1> .exit:
   187 000035F7 F9                  <1>     stc     ;Set CF to kill the task
   188 000035F8 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    20                                  endOfAlloc: ;End of alloc
    21                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    22                                  Segment transient align=1 follows=.data
    23                                  ;This segment always gets ejected post load
    24                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D1508020000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    15 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    16 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    17 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    18                              <1> ;Setup Int 22h, Int 23h and Int 24h
    19 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    20 0000002F 488905(2E000000)    <1>     mov qword [parentInt22], rax
    21                              <1> 
    22 00000036 488D15(3D330000)    <1>     lea rdx, critErrorHandler
    23 0000003D 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    24 00000041 B824250000          <1>     mov eax, 2524h
    25 00000046 CD21                <1>     int 21h
    26 00000048 488D15(D8350000)    <1>     lea rdx, int23h
    27 0000004F 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    28 00000053 B823250000          <1>     mov eax, 2523h
    29 00000058 CD21                <1>     int 21h
    30 0000005A 488D15(FA0D0000)    <1>     lea rdx, applicationReturn
    31 00000061 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    32 00000065 B822250000          <1>     mov eax, 2522h
    33 0000006A CD21                <1>     int 21h
    34                              <1> ;Get a pointer to DOS Sysvars
    35 0000006C B452                <1>     mov ah, 52h ;Get sysvars
    36 0000006E CD21                <1>     int 21h
    37 00000070 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    38                              <1> ;Call for simple internationalisation data
    39 00000077 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    40 0000007C CD21                <1>     int 21h
    41 0000007E 3CFF                <1>     cmp al, -1
    42 00000080 7412                <1>     je .skipSwitch
    43 00000082 8815(2C000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    44 00000088 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    45 0000008B 7507                <1>     jne .skipSwitch
    46 0000008D C605(2B000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    47                              <1> .skipSwitch:
    48 00000094 B800380000          <1>     mov eax, 3800h  ;Get current country data
    49 00000099 488D15(36000000)    <1>     lea rdx, ctryData
    50 000000A0 CD21                <1>     int 21h ;Write the data to the internal country table
    51                              <1> ;Now determine if this is the master copy of COMMAND.COM
    52                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    53 000000A2 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    54 000000A7 CD21                <1>     int 21h
    55 000000A9 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    56 000000AC B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    57 000000B1 CD21                <1>     int 21h
    58 000000B3 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    59 000000B6 7574                <1>     jne .skipMaster
    60                              <1> ;Ok so we are master command.com
    61                              <1> ;Now make myself the real parent
    62 000000B8 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    63 000000BF 4C8905(17000000)    <1>     mov qword [realParent], r8
    64                              <1> ;Set current Drive in COMSPEC
    65 000000C6 B800190000          <1>     mov eax, 1900h ;Get current Drive
    66 000000CB CD21                <1>     int 21h
    67 000000CD 0441                <1>     add al, "A"
    68 000000CF 8805(D10D0000)      <1>     mov byte [comspecEvar.cspec], al
    69                              <1> ;Set Int 2Eh up
    70 000000D5 488D15(16160000)    <1>     lea rdx, int2Eh
    71 000000DC B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    72 000000E1 CD21                <1>     int 21h
    73                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    74                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    75 000000E3 BB0A000000          <1>     mov ebx, 10 ;Allocate 160 bytes
    76 000000E8 B800480000          <1>     mov eax, 4800h
    77 000000ED CD21                <1>     int 21h
    78 000000EF 0F821EFFFFFF        <1>     jc .exitBad
    79                              <1> ;Set master environment as mine
    80 000000F5 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    81 000000F9 488D35(C90D0000)    <1>     lea rsi, masterEnv
    82 00000100 4889C7              <1>     mov rdi, rax
    83 00000103 B91E000000          <1>     mov ecx, menv_len
    84 00000108 F3A4                <1>     rep movsb   ;Copy the chars over!
    85                              <1> 
    86 0000010A 488D15(AD070000)    <1>     lea rdx, crlf
    87 00000111 B409                <1>     mov ah, 09h
    88 00000113 CD21                <1>     int 21h
    89 00000115 E8(43200000)        <1>     call time
    90 0000011A E8(7A1F0000)        <1>     call date
    91 0000011F 488D15(AD070000)    <1>     lea rdx, crlf
    92 00000126 B409                <1>     mov ah, 09h
    93 00000128 CD21                <1>     int 21h
    94 0000012A EB2E                <1>     jmp short .printInit
    95                              <1> .skipMaster:
    96 0000012C 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
    97 00000133 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
    98 0000013B 0FB605(2C000000)    <1>     movzx eax, byte [switchChar]
    99 00000142 F2AE                <1>     repne scasb
   100 00000144 67E313              <1>     jecxz .printInit
   101 00000147 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
   102 0000014A E8(56300000)        <1>     call ucChar
   103 0000014F 3C50                <1>     cmp al, "P" ;Is it permanent switch?
   104 00000151 7507                <1>     jne .printInit
   105 00000153 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
   106                              <1> .printInit:
   107 0000015A 488D1D(FB350000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
   108                              <1> ;Finish by printing INIT string.
   109 00000161 53                  <1>     push rbx
   110 00000162 488D153A000000      <1>     lea rdx, initString
   111 00000169 B409                <1>     mov ah, 09h
   112 0000016B CD21                <1>     int 21h ;Print init string
   113 0000016D E8(FA280000)        <1>     call version.printVersionNumber
   114 00000172 488D1560000000      <1>     lea rdx, initString2
   115 00000179 B409                <1>     mov ah, 09h
   116 0000017B CD21                <1>     int 21h ;Print init string
   117 0000017D 5B                  <1>     pop rbx
   118                              <1>     ;Now we add the stack to the alloc and paragraph align
   119 0000017E 4881C340060000      <1>     add rbx, stackSize
   120 00000185 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   121 0000018C 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   122 00000190 48C1E304            <1>     shl rbx, 4
   123 00000194 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   124 00000197 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   125 0000019E E9(E70D0000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   126                              <1> ;Loader Data here
   127                              <1> initString: 
   128 000001A3 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   128 000001AC 66696320436F6D7075- <1>
   128 000001B5 746572205265736561- <1>
   128 000001BE 726368285229205343- <1>
   128 000001C7 502F444F5328522920- <1>
   128 000001D0 56657273696F6E2024  <1>
   129                              <1> initString2:
   130 000001D9 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",CR,LF,"$"
   130 000001E2 202020284329436F70- <1>
   130 000001EB 797269676874205363- <1>
   130 000001F4 69656E746966696320- <1>
   130 000001FD 436F6D707574657220- <1>
   130 00000206 526573656172636820- <1>
   130 0000020F 323032342E0D0A24    <1>
   131 00000217 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   131 00000220 20444F532076657273- <1>
   131 00000229 696F6E0D0A24        <1>
    25                                  
    26                                  stackSize equ 200*8    ;200 QWORD stack
    26          ------------------       info: assembly required 1+3+2 passes

