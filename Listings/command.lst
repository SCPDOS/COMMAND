     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (41h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> netFCBShare     equ 70h
   160                              <1> noInherit       equ 80h
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> 
   163                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 24h on disk full.
   164                              <1> ;Buffering on writes
   165                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   167                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1> readOnlyFile    equ 1h
   170                              <1> hiddenFile      equ 2h
   171                              <1> systemFile      equ 4h
   172                              <1> volumeLabel     equ 8h
   173                              <1> directoryFile   equ 10h ;Directory entry
   174                              <1> archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1> charDevFastOut  equ 10h ;If set, device supports Int 29h
   182                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   183                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   185                              <1> devCharDev      equ 80h ;If set, it is a char device!
   186                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   190                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1>  
   192                              <1> ;------------------------------------------------------------------------;
   193                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   194                              <1> ; to an internal buffer, and then copying it to the specified location
   195                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   196                              <1> ; another request for the same sector from the same device is made, so 
   197                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   198                              <1> ; size, selected according to the largest detected sector size during 
   199                              <1> ; the initial loadup.
   200                              <1> ;
   201                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   202                              <1> ;
   203                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   204                              <1> ;------------------------------------------------------------------------;
   205                              <1> 
   206                              <1> struc bufferHdr
   207 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   208 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   209 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   210 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   211 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   212 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   213 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   214 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   215 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   216                              <1>     .dataarea:             ;Points to the start of the data area
   217                              <1> endstruc
   218                              <1> ;Buffer Flag equates
   219                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   220                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   221                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   222                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   223                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   224                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   225                              <1> ;Note! A buffer is marked as referenced only when the application 
   226                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   227                              <1> ;------------------------------------------------------------------------;
   228                              <1> ; Memory control block for each memory arena
   229                              <1> ;------------------------------------------------------------------------;
   230                              <1> struc mcb
   231 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   232 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   233 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   234 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   235                              <1>     .program:
   236                              <1> endstruc
   237                              <1> ;MCB equates
   238                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   239                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   240                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   241                              <1> mcbMarkCtn      equ "M"
   242                              <1> mcbMarkEnd      equ "Z"
   243                              <1> 
   244                              <1> memFirstFit     equ 0   ;First free block goes to application
   245                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   246                              <1> memLastFit      equ 2   ;Last free block goes to application
   247                              <1> 
   248                              <1> ;Owner = Para aligned address => Owning application PSP
   249                              <1> ;...To consider...
   250                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   251                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   252                              <1> ;------------------------------------------------------------------------;
   253                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   254                              <1> ; following order, thus allowing for return values to be placed in the 
   255                              <1> ; registers by accessing the caller register stack frame.
   256                              <1> ;------------------------------------------------------------------------;
   257                              <1> struc callerFrame
   258 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   259 00000008 ????????????????    <1>     .rbx    resq 1    
   260 00000010 ????????????????    <1>     .rcx    resq 1
   261 00000018 ????????????????    <1>     .rdx    resq 1
   262 00000020 ????????????????    <1>     .rsi    resq 1
   263 00000028 ????????????????    <1>     .rdi    resq 1
   264 00000030 ????????????????    <1>     .rbp    resq 1
   265 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   266 00000040 ????????????????    <1>     .r9     resq 1
   267                              <1> ;Pushed by Processor when invoked via Interrupt
   268 00000048 ????????????????    <1>     .rip    resq 1
   269 00000050 ????????????????    <1>     .cs     resq 1
   270 00000058 ????????????????    <1>     .flags  resq 1
   271                              <1> endstruc
   272                              <1> 
   273                              <1> struc dpl
   274                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   275                              <1> ; server calls
   276 00000000 ????????????????    <1>     .rax    resq 1
   277 00000008 ????????????????    <1>     .rbx    resq 1
   278 00000010 ????????????????    <1>     .rcx    resq 1
   279 00000018 ????????????????    <1>     .rdx    resq 1
   280 00000020 ????????????????    <1>     .rsi    resq 1
   281 00000028 ????????????????    <1>     .rdi    resq 1
   282 00000030 ????????????????    <1>     .r8     resq 1
   283 00000038 ????????????????    <1>     .r9     resq 1
   284 00000040 ????????????????    <1>     .align  resq 1
   285 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   286 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   287                              <1> endstruc
   288                              <1> 
   289                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   290 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   291 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   292 00000010 ????????????????    <1>     .newSFTVal      resq 1
   293 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   294 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   295 00000028 ????????????????    <1>     .newLastdrive   resq 1
   296 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   297 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   298 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   299 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   300 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   301 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   302 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc filename
   306                              <1> ;8.3 File name struct
   307 00000000 ????????????????    <1>     .fName  resb 8
   308 00000008 ??????              <1>     .fExt   resb 3
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   312 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   313 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   314 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   315 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   316 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   317 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   318 00000016 ????                <1>     .fileTime   resw 1  ;File time
   319 00000018 ????                <1>     .fileDate   resw 1  ;File date
   320 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   321 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc psp
   325 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   326 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   327 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   328 0000000A ????????????????    <1>     .oldInt22h  resq 1  ;Int 22h pointer on overlay load
   329 00000012 ????????????????    <1>     .oldInt23h  resq 1  ;Int 23h pointer on overlay load
   330 0000001A ????????????????    <1>     .oldInt24h  resq 1  ;Int 24h pointer on overlay load
   331 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   332                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   333 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   334 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   335 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 21h
   336 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   337 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   338 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   339 0000005B ??                  <1>                 resb 1  ;Reserved byte
   340                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   341                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   342                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   343                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   344                              <1> ; always used and xtraHdlSz.
   345                              <1> ;Will need to add two SYSCALLS for future expansion:
   346                              <1> ;       1) Get Program Environment Pointer
   347                              <1> ;       2) Get Command Line arguments pointer
   348                              <1> ;The below are in the same place as in DOS.
   349                              <1>     .cmdLineArgPtr: ;Symbol for future use
   350 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   351 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   352                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   353 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   354 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   355                              <1> endstruc
   356                              <1> 
   357                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   358                              <1> 
   359                              <1> struc clkStruc
   360 00000000 ????                <1>     .dateWord   resw 1
   361 00000002 ??                  <1>     .minutes    resb 1
   362 00000003 ??                  <1>     .hours      resb 1
   363 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   364 00000005 ??                  <1>     .seconds    resb 1
   365                              <1> endstruc
   366                              <1> 
   367                              <1> struc countryStruc
   368 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   369                              <1>                         ;0 = month day year hh:mm:ss
   370                              <1>                         ;1 = day month year hh:mm:ss
   371                              <1>                         ;2 = year month day hh:mm:ss
   372 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   373 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   374 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   375 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   376 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   377 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   378                              <1>                         ;0 = Symbol leads, without space
   379                              <1>                         ;1 = Symbol follows, without space
   380                              <1>                         ;2 = Symbol leads, one space
   381                              <1>                         ;3 = Symbol follows, one space
   382                              <1>                         ;4 = Symbol replace decimal separator
   383 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   384 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   385 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   386 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   387 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   388                              <1> endstruc
   389                              <1> 
   390                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   391                              <1> ;for a space of 64Gb
   392                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   393                              <1> dosLowBase  equ 600h    ;Low load address
   394                              <1> 
   395                              <1> ;Critical Error AH bitfield equates
   396                              <1> critRead    equ 0h
   397                              <1> critWrite   equ 1h
   398                              <1> critDOS     equ 0h
   399                              <1> critFAT     equ 2h
   400                              <1> critDir     equ 4h
   401                              <1> critData    equ 6h
   402                              <1> critFailOK  equ 8h
   403                              <1> critRetryOK equ 10h
   404                              <1> critIgnorOK equ 20h
   405                              <1> critCharDev equ 80h
   406                              <1> 
   407                              <1> critIgnore  equ 0
   408                              <1> critRetry   equ 1
   409                              <1> critAbort   equ 2
   410                              <1> critFail    equ 3
   411                              <1> 
   412                              <1> ;MISC ASCII control chars
   413                              <1> NUL equ 00h ;^@         | ASCII Null
   414                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   415                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   416                              <1> BEL equ 07h ;^G         | ASCII Bell
   417                              <1> BSP equ 08h ;^H         | ASCII Backspace
   418                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   419                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   420                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   421                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   422                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   423                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   424                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   425                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   426                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   427                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   428                              <1> SPC equ 20h ;Printable  | ASCII Space
   429                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   430                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   431                              <1> 
   432                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   433                              <1> ;Extended Ascii Codes
   434                              <1> eF1     equ 3Bh ;F1 second byte
   435                              <1> eF2     equ 3Ch ;F2 second byte
   436                              <1> eF3     equ 3Dh ;F3 second byte
   437                              <1> eF4     equ 3Eh ;F4 second byte
   438                              <1> eF5     equ 3Fh ;F5 second byte
   439                              <1> eF6     equ 40h ;F6 second byte
   440                              <1> eF7     equ 41h ;F7 second byte
   441                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   442                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   443                              <1> eIns    equ 52h ;Insert second byte
   444                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   445                              <1> 
   446                              <1> ;Default Configuration for the system
   447                              <1> 
   448                              <1> buffersDefault  equ 30
   449                              <1> filesDefault    equ 20
   450                              <1> fcbsDefault     equ 4
   451                              <1> safeFcbsDeflt   equ 0
   452                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       resb 5  
    66 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   resb 1
    68 00000008 ????????????????    <1>     .filename   resb 8
    69 00000010 ??????              <1>     .fileext    resb 3
    70 00000013 ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    resb 8
    73 00000020 ??????              <1>     .newExt     resb 3
    74 00000023 ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    25 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    26 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    27 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    28 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    29 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    30                              <1> endstruc
    31                              <1> 
    32                              <1> struc execProg  ;For use with EXEC-ing a child task
    33 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    34 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    35 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    36 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    37                              <1> endstruc
    38                              <1> 
    39                              <1> ;Directory attribute equates
    40                              <1>     dirReadOnly     equ 01h
    41                              <1>     dirHidden       equ 02h
    42                              <1>     dirSystem       equ 04h
    43                              <1>     dirVolumeID     equ 08h
    44                              <1>     dirDirectory    equ 10h
    45                              <1>     dirArchive      equ 20h
    46                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    47                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    48                              <1>     ;If any of the three bits are set, then ALL three bits are set
    49                              <1>     ; in addition to whatever the user passed to search for.
    50                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    51                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    11 0000002B 5C                  <1> pathSep     db "\"  ;Default path sep
    12 0000002C 2F                  <1> switchChar  db "/"  ;Default switch char
    13 0000002D 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    14 0000002E 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    15                              <1> ;Static strings, not used in command line parsing
    16 00000036 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    16 0000003F 000000000000000000- <1>
    16 00000048 000000000000000000- <1>
    16 00000051 000000000000000000- <1>
    16 0000005A 0000                <1>
    17 0000005C 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    17 00000065 000000000000000000- <1>
    17 0000006E 000000000000000000- <1>
    17 00000077 000000000000000000- <1>
    17 00000080 000000000000000000- <1>
    17 00000089 000000000000000000- <1>
    17 00000092 000000000000000000- <1>
    17 0000009B 00000000            <1>
    18                              <1> 
    19                              <1> 
    20                              <1> cmdLineStatePtr:
    21 0000009F 0000000000000000    <1> cmdStartPtr dq 0    ;Ptr to the first char for this command (may be a space)
    22 000000A7 0000000000000000    <1> cmdEndPtr   dq 0    ;Ptr to the terminating char for this command (0Dh or |)
    23 000000AF 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    24 000000B0 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    25 000000B2 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    26                              <1> 
    27                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    28                              <1> ;These variables are valid for a SINGLE command in a command line
    29                              <1> ;Next two bytes, if set to -1, flags error
    30 000000B4 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    31 000000B5 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    32                              <1> ;                    If 2, we are redirecting output to a file, by appending
    33 000000B6 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    34 000000B8 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    35                              <1> 
    36 000000BA 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    37 000000BB 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    38 000000BC 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    39                              <1> 
    40 000000BD 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    41 000000BE 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    42 000000BF 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    43                              <1> 
    44                              <1> cmdStateL equ $ - cmdStatePtr
    45                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    46                              <1> 
    47                              <1> ;Structs and strings
    48                              <1> 
    49 000000C0 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    49 000000C9 00000000000000      <1>
    50 000000D0 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    50 000000D9 000000000000000000- <1>
    50 000000E2 000000000000000000- <1>
    50 000000EB 000000000000000000- <1>
    50 000000F4 00000000000000      <1>
    51                              <1> 
    52 000000FB 000000000000000000- <1> launchBlock db execProg_size dup (0)
    52 00000104 000000000000000000- <1>
    52 0000010D 000000000000000000- <1>
    52 00000116 0000000000          <1>
    53                              <1> 
    54 0000011B 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    54 00000124 000000000000000000- <1>
    54 0000012D 000000000000000000- <1>
    54 00000136 000000000000000000- <1>
    54 0000013F 000000000000000000- <1>
    54 00000148 000000000000000000- <1>
    54 00000151 000000000000000000- <1>
    54 0000015A 000000000000000000- <1>
    54 00000163 000000000000000000- <1>
    54 0000016C 000000000000000000- <1>
    54 00000175 000000000000000000- <1>
    54 0000017E 000000000000000000- <1>
    54 00000187 000000000000000000- <1>
    54 00000190 000000000000000000- <1>
    54 00000199 00000000            <1>
    55                              <1> inBufferL   equ 126 ;126 chars so we can copy to PSP with terminating CR
    56                              <1> 
    57 0000019D 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    57 000001A6 000000000000000000- <1>
    57 000001AF 000000000000000000- <1>
    57 000001B8 000000000000000000- <1>
    57 000001C1 000000000000000000- <1>
    57 000001CA 000000000000000000- <1>
    57 000001D3 000000000000000000- <1>
    57 000001DC 000000000000000000- <1>
    57 000001E5 000000000000000000- <1>
    57 000001EE 000000000000000000- <1>
    57 000001F7 000000000000000000- <1>
    57 00000200 000000000000000000- <1>
    57 00000209 000000000000000000- <1>
    57 00000212 000000000000000000- <1>
    57 0000021B 00000000            <1>
    58 0000021F 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    58 00000228 000000000000000000- <1>
    58 00000231 000000000000000000- <1>
    58 0000023A 000000000000000000- <1>
    58 00000243 000000000000000000- <1>
    58 0000024C 000000000000000000- <1>
    58 00000255 000000000000000000- <1>
    58 0000025E 000000000000000000- <1>
    58 00000267 00000000000000      <1>
    59 0000026E 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    59 00000277 0000000000          <1>
    60                              <1> 
    61 0000027C 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    61 00000285 000000000000000000- <1>
    61 0000028E 000000000000000000- <1>
    61 00000297 000000000000000000- <1>
    61 000002A0 000000000000000000- <1>
    61 000002A9 000000000000000000- <1>
    61 000002B2 000000000000000000- <1>
    61 000002BB 000000000000000000- <1>
    61 000002C4 00000000000000      <1>
    62 000002CB 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    62 000002D4 000000000000000000- <1>
    62 000002DD 000000000000000000- <1>
    62 000002E6 000000000000000000- <1>
    62 000002EF 000000000000000000- <1>
    62 000002F8 000000000000000000- <1>
    62 00000301 000000000000000000- <1>
    62 0000030A 000000000000000000- <1>
    62 00000313 00000000000000      <1>
    63                              <1> 
    64                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    65 0000031A 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    65 00000323 000000000000000000- <1>
    65 0000032C 000000000000000000- <1>
    65 00000335 000000000000000000- <1>
    65 0000033E 000000000000000000- <1>
    65 00000347 000000000000000000- <1>
    65 00000350 000000000000000000- <1>
    65 00000359 000000000000000000- <1>
    65 00000362 00000000000000      <1>
    66 00000369 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    66 00000372 000000000000000000- <1>
    66 0000037B 000000000000000000- <1>
    66 00000384 000000000000000000- <1>
    66 0000038D 000000000000000000- <1>
    66 00000396 000000000000000000- <1>
    66 0000039F 000000000000000000- <1>
    66 000003A8 000000000000000000- <1>
    66 000003B1 00000000000000      <1>
    67                              <1> 
    68 000003B8 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    69 000003C0 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    70                              <1> 
    71 000003C8 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    71 000003D1 000000000000000000- <1>
    71 000003DA 000000000000000000- <1>
    71 000003E3 000000000000000000- <1>
    71 000003EC 000000000000000000- <1>
    71 000003F5 000000000000000000- <1>
    71 000003FE 000000000000000000- <1>
    71 00000407 000000000000000000- <1>
    71 00000410 000000000000000000- <1>
    71 00000419 000000000000000000- <1>
    71 00000422 000000000000000000- <1>
    71 0000042B 000000000000000000- <1>
    71 00000434 000000000000000000- <1>
    71 0000043D 000000000000000000- <1>
    71 00000446 00000000            <1>
    72                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    73                              <1> ; users overtyping
    74                              <1> 
    75                              <1> ;Internal Function vars
    76                              <1> ;Dir Vars
    77 0000044A 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    78                              <1> ;                                   Bit[1] set => /P or /p specified
    79                              <1> ;                                   Bit[2] set => A file/path specified
    80 0000044B 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    81 0000044C 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    82 0000044D 00                  <1> dirDrv      db 0    ;0 based drive number to use
    83 0000044E 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
    83 00000457 000000000000000000- <1>
    83 00000460 000000000000000000- <1>
    83 00000469 000000000000000000- <1>
    83 00000472 000000000000000000- <1>
    83 0000047B 000000000000000000- <1>
    83 00000484 000000000000000000- <1>
    83 0000048D 000000000000000000- <1>
    83 00000496 000000000000000000- <1>
    83 0000049F 000000000000000000- <1>
    83 000004A8 000000000000000000- <1>
    83 000004B1 000000000000000000- <1>
    83 000004BA 000000000000000000- <1>
    83 000004C3 000000000000000000- <1>
    83 000004CC 00000000            <1>
    84 000004D0 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
    84 000004D9 3F3F3F3F3F3F3F      <1>
    85                              <1> dirWideType equ 1
    86                              <1> dirPageType equ 2
    87                              <1> dirFileType equ 4
    88                              <1> ;Volume Vars
    89                              <1> volFcb:
    90                              <1>     istruc exFcb
    91 000004E0 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    92 000004E1 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    93 000004E7 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
    94 000004E8 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
    95 000004F0 3F3F3F              <1>     at exFcb.fileext,   db "???"
    96 000004F3 00000000            <1>     at exFcb.curBlock,  dd 0
    97 000004F7 00<rep 15h>         <1>     iend 
    98                              <1> 
    99                              <1> ;Time/Date vars
   100 0000050C 00                  <1> td1 db 0    ;Minutes/Year
   101 0000050D 00                  <1> td2 db 0    ;Hours/Zero
   102 0000050E 00                  <1> td3 db 0    ;Hundredths/Day
   103 0000050F 00                  <1> td4 db 0    ;Seconds/Month
   104                              <1> 
   105                              <1> ;Rename/Copy/Delete Buffers
   106                              <1> delPath:
   107 00000510 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   107 00000519 000000000000000000- <1>
   107 00000522 000000000000000000- <1>
   107 0000052B 000000000000000000- <1>
   107 00000534 000000000000000000- <1>
   107 0000053D 000000000000000000- <1>
   107 00000546 000000000000000000- <1>
   107 0000054F 000000000000000000- <1>
   107 00000558 000000000000000000- <1>
   107 00000561 000000000000000000- <1>
   107 0000056A 000000000000000000- <1>
   107 00000573 000000000000000000- <1>
   107 0000057C 000000000000000000- <1>
   107 00000585 000000000000000000- <1>
   107 0000058E 00000000            <1>
   108 00000592 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   108 0000059B 000000000000000000- <1>
   108 000005A4 000000000000000000- <1>
   108 000005AD 000000000000000000- <1>
   108 000005B6 000000000000000000- <1>
   108 000005BF 000000000000000000- <1>
   108 000005C8 000000000000000000- <1>
   108 000005D1 000000000000000000- <1>
   108 000005DA 000000000000000000- <1>
   108 000005E3 000000000000000000- <1>
   108 000005EC 000000000000000000- <1>
   108 000005F5 000000000000000000- <1>
   108 000005FE 000000000000000000- <1>
   108 00000607 000000000000000000- <1>
   108 00000610 00000000            <1>
   109 00000614 0000000000000000    <1> srcPtr      dq 0    ;Where to copy the pattern to
   110 0000061C 0000000000000000    <1> destPtr     dq 0    ;Where to copy the pattern to
   111 00000624 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   111 0000062D 2020                <1>
   112                              <1> ;Copy Handles
   113 0000062F FFFF                <1> sourceHdl   dw -1
   114 00000631 FFFF                <1> destHdl     dw -1
   115 00000633 0000                <1> srcHdlInfo  dw 0 ;Used to save the handle device info (bit 7 Set -> Char dev)
   116                              <1> 
   117 00000635 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   117 0000063E 000000000000000000- <1>
   117 00000647 000000000000000000- <1>
   117 00000650 000000000000000000- <1>
   117 00000659 000000000000000000- <1>
   117 00000662 000000000000000000- <1>
   117 0000066B 000000000000000000- <1>
   117 00000674 000000000000000000- <1>
   117 0000067D 000000000000000000- <1>
   117 00000686 000000000000000000- <1>
   117 0000068F 000000000000000000- <1>
   117 00000698 000000000000000000- <1>
   117 000006A1 000000000000000000- <1>
   117 000006AA 000000000000000000- <1>
   117 000006B3 0000                <1>
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 000006B5 03444952            <1>     db 3, "DIR"
     8 000006B9 D016                <1>     dw dir - startLbl
     9                              <1> 
    10 000006BB 024344              <1>     db 2, "CD"
    11 000006BE 991B                <1>     dw chdir - startLbl
    12                              <1> 
    13 000006C0 054348444952        <1>     db 5, "CHDIR"
    14 000006C6 991B                <1>     dw chdir - startLbl
    15                              <1> 
    16 000006C8 024D44              <1>     db 2, "MD"
    17 000006CB 141C                <1>     dw mkdir - startLbl
    18                              <1> 
    19 000006CD 054D4B444952        <1>     db 5, "MKDIR"
    20 000006D3 141C                <1>     dw mkdir - startLbl
    21                              <1> 
    22 000006D5 025244              <1>     db 2, "RD"
    23 000006D8 601C                <1>     dw rmdir - startLbl
    24                              <1> 
    25 000006DA 05524D444952        <1>     db 5, "RMDIR"
    26 000006E0 601C                <1>     dw rmdir - startLbl
    27                              <1> 
    28 000006E2 0344454C            <1>     db 3, "DEL"
    29 000006E6 4E1E                <1>     dw erase - startLbl
    30                              <1> 
    31 000006E8 054552415345        <1>     db 5, "ERASE"
    32 000006EE 4E1E                <1>     dw erase - startLbl
    33                              <1> 
    34 000006F0 0444415445          <1>     db 4, "DATE"
    35 000006F5 8C1F                <1>     dw date - startLbl
    36                              <1> 
    37 000006F7 0454494D45          <1>     db 4, "TIME"
    38 000006FC 5520                <1>     dw time - startLbl
    39                              <1> 
    40 000006FE 04434F5059          <1>     db 4, "COPY"
    41 00000703 AC1C                <1>     dw copy - startLbl
    42                              <1> 
    43 00000705 0443545459          <1>     db 4, "CTTY"
    44 0000070A F020                <1>     dw ctty - startLbl
    45                              <1> 
    46 0000070C 03434C53            <1>     db 3, "CLS"
    47 00000710 8B21                <1>     dw cls - startLbl
    48                              <1> 
    49 00000712 05425245414B        <1>     db 5, "BREAK"
    50 00000718 FD21                <1>     dw break - startLbl
    51                              <1> 
    52 0000071A 06564552494659      <1>     db 6, "VERIFY"
    53 00000721 7E22                <1>     dw verify - startLbl
    54                              <1> 
    55 00000723 0652454E414D45      <1>     db 6, "RENAME"
    56 0000072A FB22                <1>     dw rename - startLbl
    57                              <1> 
    58 0000072C 0352454E            <1>     db 3, "REN"
    59 00000730 FB22                <1>     dw rename - startLbl
    60                              <1>     
    61 00000732 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 0000073B FF26                <1>     dw truename - startLbl
    63                              <1> 
    64 0000073D 03564552            <1>     db 3, "VER"
    65 00000741 E528                <1>     dw version - startLbl
    66                              <1> 
    67 00000743 03564F4C            <1>     db 3, "VOL"
    68 00000747 2628                <1>     dw volume - startLbl
    69                              <1> 
    70 00000749 034D454D            <1>     db 3, "MEM"
    71 0000074D 2929                <1>     dw memory - startLbl
    72                              <1> 
    73 0000074F 0445584954          <1>     db 4, "EXIT"
    74 00000754 122B                <1>     dw exit - startLbl
    75                              <1> 
    76 00000756 0454595045          <1>     db 4, "TYPE"
    77 0000075B 732A                <1>     dw type - startLbl
    78                              <1> 
    79 0000075D 054C4142454C        <1>     db 5, "LABEL"
    80 00000763 5027                <1>     dw label - startLbl
    81                              <1> 
    82 00000765 0450415448          <1>     db 4, "PATH"
    83 0000076A 892D                <1>     dw pathEdit - startLbl
    84                              <1> 
    85 0000076C 03534554            <1>     db 3, "SET"
    86 00000770 642D                <1>     dw set - startLbl
    87                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    88 00000772 054D4B4C424C        <1>     db 5, "MKLBL"
    89 00000778 7A27                <1>     dw mklbl - startLbl
    90                              <1> 
    91 0000077A 05524D4C424C        <1>     db 5, "RMLBL"
    92 00000780 B527                <1>     dw rmlbl - startLbl
    93                              <1> 
    94 00000782 05524E4C424C        <1>     db 5, "RNLBL"
    95 00000788 F027                <1>     dw rnlbl - startLbl
    96                              <1> 
    97 0000078A 05544F554348        <1>     db 5, "TOUCH"
    98 00000790 F224                <1>     dw touch - startLbl
    99                              <1> 
   100 00000792 044A4F494E          <1>     db 4, "JOIN"
   101 00000797 5525                <1>     dw join - startLbl
   102                              <1> 
   103 00000799 055355425354        <1>     db 5, "SUBST"
   104 0000079F 1826                <1>     dw subst - startLbl
   105                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   106 000007A1 FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 000007A2 0D0A24              <1> crlf    db  CR,LF,"$"
     3 000007A5 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 000007AA 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 000007B3 696C65206D69737369- <1>
     4 000007BC 6E670D0A24          <1>
     5 000007C1 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 000007CA 6469736B2077697468- <1>
     5 000007D3 206261746368206669- <1>
     5 000007DC 6C65                <1>
     6 000007DE 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 000007E7 737320616E79206B65- <1>
     6 000007F0 79207768656E207265- <1>
     6 000007F9 6164790D0A24        <1>
     7 000007FF 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 00000808 6E64206F722066696C- <1>
     7 00000811 65206E616D650D0A24  <1>
     8 0000081A 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 00000823 2066696C65206E616D- <1>
     8 0000082C 65206F7220          <1>
     9 00000831 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 0000083A 666F756E640D0A24    <1>
    10 00000842 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    10 0000084B 656E74206469736B20- <1>
    10 00000854 73706163650D0A24    <1>
    11 0000085C 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 00000865 7669726F6E6D656E74- <1>
    11 0000086E 2073706163650D0A24  <1>
    12 00000877 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 00000880 74696F6E206572726F- <1>
    12 00000889 720D0A24            <1>
    13 0000088D 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 00000896 6F7420626520636F70- <1>
    13 0000089F 696564206F6E746F20- <1>
    13 000008A8 697473656C660D0A24  <1>
    14 000008B1 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 000008BA 662064657374696E61- <1>
    14 000008C3 74696F6E206C6F7374- <1>
    14 000008CC 206265666F72652063- <1>
    14 000008D5 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 000008DB 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 000008E4 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 000008ED 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 000008F6 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 000008F7 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 00000900 65650D0A24          <1>
    21 00000905 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 0000090E 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 00000917 726976652073706563- <1>
    23 00000920 696669636174696F6E- <1>
    23 00000929 0D0A24              <1>
    24 0000092C 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 00000935 6B6579207768656E20- <1>
    24 0000093E 7265616479202E202E- <1>
    24 00000947 202E2024            <1>
    25 0000094B 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 00000954 6172616D657465720D- <1>
    25 0000095D 0A24                <1>
    26                              <1> 
    27 0000095F 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 00000968 576564546875467269- <1>
    27 00000971 536174              <1>
    28 00000974 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 0000097D 206461746524        <1>
    29 00000983 43757272656E742064- <1> curDate db  "Current date is $"
    29 0000098C 6174652069732024    <1>
    30 00000994 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 0000099D 657720646174652024  <1>
    31 000009A6 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 000009AF 293A2024            <1>
    32 000009B3 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 000009BC 293A2024            <1>
    33 000009C0 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 000009C9 293A2024            <1>
    34 000009CD 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 000009D6 2074696D6524        <1>
    35 000009DC 43757272656E742074- <1> curTime db  "Current time is $"
    35 000009E5 696D652069732024    <1>
    36 000009ED 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 000009F6 65772074696D653A20- <1>
    36 000009FF 24                  <1>
    37                              <1> 
    38 00000A00 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000A09 7572652028592F4E29- <1>
    38 00000A12 3F2024              <1>
    39                              <1> 
    40 00000A15 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000A1E 56657273696F6E2024  <1>
    41                              <1> 
    42 00000A27 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000A30 6E2064726976652024  <1>
    43 00000A39 2069732024          <1> volOk   db " is $"
    44 00000A3E 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000A47 6162656C24          <1>
    45                              <1> 
    46 00000A4C 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000A55 69726563746F72790D- <1>
    46 00000A5E 0A24                <1>
    47 00000A60 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000A69 206372656174652064- <1>
    47 00000A72 69726563746F72790D- <1>
    47 00000A7B 0A24                <1>
    48 00000A7D 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000A86 6174682C206E6F7420- <1>
    48 00000A8F 6469726563746F7279- <1>
    48 00000A98 2C0D0A              <1>
    49 00000A9B 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000AA4 6F7279206E6F742065- <1>
    49 00000AAD 6D7074790D0A24      <1>
    50 00000AB4 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000ABD 79206F66202024      <1>
    51 00000AC4 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000ACD 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    52 00000AD6 6E6965640D0A24      <1>
    53 00000ADD 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    53 00000AE6 72697665206973206E- <1>
    53 00000AEF 6F206C6F6E67657220- <1>
    53 00000AF8 76616C696424        <1>
    54 00000AFE 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    54 00000B07 7269766520696E2073- <1>
    54 00000B10 656172636820706174- <1>
    54 00000B19 680D0A24            <1>
    55 00000B1D 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    55 00000B26 65766963650D0A24    <1>
    56 00000B2E 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    56 00000B37 20666F756E640D0A24  <1>
    57 00000B40 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    57 00000B49 726F720D0A24        <1>
    58 00000B4F 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    58 00000B58 6F74206265206E6573- <1>
    58 00000B61 7465640D0A24        <1>
    59 00000B67 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    59 00000B70 6174652066696C6520- <1>
    59 00000B79 6572726F7220647572- <1>
    59 00000B82 696E6720706970650D- <1>
    59 00000B8B 0A24                <1>
    60 00000B8D 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    60 00000B96 2062696E6172792072- <1>
    60 00000B9F 656164732066726F6D- <1>
    60 00000BA8 206120646576696365- <1>
    60 00000BB1 0D0A24              <1>
    61 00000BB4 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    62 00000BBA 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    63 00000BBF 425245414B20697320- <1> breakIs db "BREAK is $"
    63 00000BC8 24                  <1>
    64 00000BC9 564552494659206973- <1> verifyIs    db "VERIFY is $"
    64 00000BD2 2024                <1>
    65 00000BD4 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    66 00000BDD 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    66 00000BE6 617468206F72206669- <1>
    66 00000BEF 6C65206E616D650D0A- <1>
    66 00000BF8 24                  <1>
    67 00000BF9 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    67 00000C02 756D626572206F6620- <1>
    67 00000C0B 706172616D65746572- <1>
    67 00000C14 730D0A24            <1>
    68 00000C18 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    68 00000C21 74696E6720746F2064- <1>
    68 00000C2A 6576696365          <1>
    69 00000C2F 08200800            <1> backSpace   db BSP," ",BSP,NUL
    70                              <1> 
    71 00000C33 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    71 00000C3C 20202020202020546F- <1>
    71 00000C45 74616C207379737465- <1>
    71 00000C4E 6D206D656D6F72793A- <1>
    71 00000C57 2024                <1>
    72 00000C59 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    72 00000C62 20202020202020204D- <1>
    72 00000C6B 656D6F727920757365- <1>
    72 00000C74 6420627920444F533A- <1>
    72 00000C7D 2024                <1>
    73 00000C7F 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    73 00000C88 656D6F727920757365- <1>
    73 00000C91 64206279206170706C- <1>
    73 00000C9A 69636174696F6E733A- <1>
    73 00000CA3 2024                <1>
    74 00000CA5 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    74 00000CAE 656D6F727920726573- <1>
    74 00000CB7 657276656420627920- <1>
    74 00000CC0 68617264776172653A- <1>
    74 00000CC9 2024                <1>
    75 00000CCB 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    75 00000CD4 202020202020202020- <1>
    75 00000CDD 2020202020204D656D- <1>
    75 00000CE6 6F727920667265653A- <1>
    75 00000CEF 2024                <1>
    76 00000CF1 20627974657324      <1> memByte db " bytes$"
    77 00000CF8 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    77 00000D01 6F7420417373657274- <1>
    77 00000D0A 61696E20444F532045- <1>
    77 00000D13 6E74727920506F696E- <1>
    77 00000D1C 7424                <1>
    78 00000D1E 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    78 00000D27 416C6C6F636174696F- <1>
    78 00000D30 6E204572726F7224    <1>
    79 00000D38 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    79 00000D41 4572726F7224        <1>
    80 00000D47 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    80 00000D50 68616C74656424      <1>
    81                              <1> 
    82 00000D57 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    82 00000D60 206372656174652070- <1>
    82 00000D69 6970650D0A          <1>
    83                              <1> pipeErrMsgL equ $ - pipeErrMsg
    84 00000D6E 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    84 00000D77 6F6E206572726F720D- <1>
    84 00000D80 0A                  <1>
    85                              <1> redirErrMsgL   equ $ - redirErrMsg
    86                              <1> 
    87 00000D81 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    88 00000D85 2020202024          <1> fourSpc  db "    $"
    89 00000D8A 20202024            <1> threeSpc db "   $"
    90 00000D8E 202024              <1> twoSpc   db "  $"
    91                              <1> 
    92 00000D91 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    92 00000D9A 696679204F4E206F72- <1>
    92 00000DA3 204F46460D0A24      <1>
    93                              <1> 
    94 00000DAA 50524F4D50543D      <1> promptEVar  db "PROMPT="
    95 00000DB1 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
    96                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    97                              <1> ; handles and reopen CON
    98 00000DBA 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:
     3                              <1> ;This is copied into an MCB to be used as the environment!
     4                              <1> comspecEvar:
     5 00000DBE 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 00000DC6 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0  ;Part of the comspec!
     7 00000DCF 442E434F4D00        <1>
     8                              <1> pathEVar:
     9 00000DD5 504154483D413A5C54- <1>     db "PATH=A:\TEST",0,0  ;End of default environment strings
     9 00000DDE 4553540000          <1>
    10                              <1> menv_len equ $ - masterEnv
    11                              <1> ;Master environment doesnt contain the "program name string"
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00000DE3 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00000DE6 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00000DEA C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 00000DED B44A                <1>     mov ah, 4Ah ;Realloc
     9 00000DEF 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00000DF2 CD21                <1>     int 21h
    11 00000DF4 EB6C                <1>     jmp short commandMain
    12                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    13 00000DF6 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    14 00000DFB CD21                <1>     int 21h
    15 00000DFD 66890509F2FFFF      <1>     mov word [returnCode], ax
    16                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    17 00000E04 488D15A4250000      <1>     lea rdx, critErrorHandler
    18 00000E0B 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    19 00000E0F B824250000          <1>     mov eax, 2524h
    20 00000E14 CD21                <1>     int 21h
    21 00000E16 488D152D280000      <1>     lea rdx, int23h
    22 00000E1D 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    23 00000E21 B823250000          <1>     mov eax, 2523h
    24 00000E26 CD21                <1>     int 21h
    25 00000E28 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    26 00000E2F 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    27 00000E33 B822250000          <1>     mov eax, 2522h
    28 00000E38 CD21                <1>     int 21h
    29 00000E3A F6056EF2FFFFFF      <1>     test byte [pipeFlag], -1
    30 00000E41 0F858C000000        <1>     jnz commandMain.pipeProceed ;Skip the handle closing when pipe active
    31 00000E47 E8B5040000          <1>     call cleanUpRedir   ;Clean up redirection once we are done
    32                              <1> ;Close all handles from 5->MAX
    33 00000E4C 0FB70DD4F1FFFF      <1>     movzx ecx, word [numHdls]
    34 00000E53 BB05000000          <1>     mov ebx, 5
    35                              <1> .handleClose:
    36 00000E58 B43E                <1>     mov ah, 3Eh ;File close
    37 00000E5A CD21                <1>     int 21h
    38 00000E5C FFC3                <1>     inc ebx ;Goto next file
    39 00000E5E 39CB                <1>     cmp ebx, ecx
    40 00000E60 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    41                              <1> commandMain:
    42                              <1> ;Setup Commandline. First check if batch mode is active, then fall.
    43                              <1> ;=========================
    44                              <1> ;   BATCH HANDLING HERE
    45                              <1> ;=========================
    46 00000E62 488B259CF1FFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    47 00000E69 FC                  <1>     cld ;Ensure stringops are done the right way
    48 00000E6A C605AAF2FFFF7E      <1>     mov byte [inBuffer], inBufferL    ;Reset the buffer length
    49                              <1> .inputMain:
    50 00000E71 E8451F0000          <1>     call printCRLF
    51                              <1> .inputMain2:
    52 00000E76 E8A6220000          <1>     call clearCommandLineState
    53 00000E7B E86F220000          <1>     call printPrompt
    54                              <1> 
    55 00000E80 B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    56 00000E85 CD21                <1>     int 21h
    57 00000E87 B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    58 00000E8C BA01000000          <1>     mov edx, 1      ;Start new print job
    59 00000E91 CD21                <1>     int 21h
    60 00000E93 488D1581F2FFFF      <1>     lea rdx, inBuffer
    61 00000E9A B8000A0000          <1>     mov eax, 0A00h  ;Do Buffered input
    62 00000E9F CD21                <1>     int 21h
    63 00000EA1 E8151F0000          <1>     call printCRLF  ;Note we have accepted input
    64                              <1> ;First check we had something typed in of length greater than 0
    65                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    66 00000EA6 803D6FF2FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    67 00000EAD 74C7                <1>     je .inputMain2
    68                              <1>     ;Copy over the input text
    69 00000EAF 488D3565F2FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    70 00000EB6 488D3DE0F2FFFF      <1>     lea rdi, cmdBuffer
    71 00000EBD B982000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    72 00000EC2 F3A4                <1>     rep movsb
    73                              <1> .pipeLoop:
    74 00000EC4 E846000000          <1>     call preProcessBuffer
    75 00000EC9 E8BC000000          <1>     call analyseCmdline
    76 00000ECE E8B0010000          <1>     call doCommandLine
    77                              <1> .pipeProceed:
    78 00000ED3 E829040000          <1>     call cleanUpRedir
    79 00000ED8 488B05C8F1FFFF      <1>     mov rax, qword [cmdEndPtr]
    80 00000EDF 488905B9F1FFFF      <1>     mov qword [cmdStartPtr], rax
    81 00000EE6 F605C2F1FFFFFF      <1>     test byte [pipeFlag], -1  ;If we have any pipes active, we proceed here
    82 00000EED 7482                <1>     jz .inputMain
    83 00000EEF 80380D              <1>     cmp byte [rax], CR  ;Are we done?
    84 00000EF2 0F8479FFFFFF        <1>     je .inputMain
    85 00000EF8 E809220000          <1>     call clearCommandState  ;Else, clear the command state and start again
    86 00000EFD EBC5                <1>     jmp short .pipeLoop
    87                              <1> .dfltErrExit:
    88 00000EFF 488D15F9F8FFFF      <1>     lea rdx, badCmd
    89 00000F06 B409                <1>     mov ah, 09h
    90 00000F08 CD21                <1>     int 21h
    91 00000F0A E962FFFFFF          <1>     jmp .inputMain
    92                              <1> 
    93                              <1> preProcessBuffer:
    94                              <1> ;Start by preprocessing the path, escape quotes and handle redirections.
    95                              <1> ;Each normal char gets copied over to psp.dta + 1 except for those special chars.
    96                              <1> ;Places the count of chars save CR in byte 0 of psp.dta.
    97                              <1> ;Places the ptr to the first byte past pipe or CR in cmdEndPtr
    98                              <1> ;Throughout: CL has char count, CH has number of quotes.
    99 00000F0F 31C9                <1>     xor ecx, ecx
   100 00000F11 4C8B05F7F0FFFF      <1>     mov r8, qword [pspPtr]  ;Ensure we have our pspPtr pointing to the right place
   101 00000F18 488B3580F1FFFF      <1>     mov rsi, qword [cmdStartPtr]
   102 00000F1F 4885F6              <1>     test rsi, rsi
   103 00000F22 7507                <1>     jnz .notNewCmd
   104 00000F24 488D3574F2FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto command buffer + 2
   105                              <1> .notNewCmd:
   106 00000F2B 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   107                              <1> .countQuotes:
   108 00000F2E AC                  <1>     lodsb
   109 00000F2F 3C22                <1>     cmp al, '"'
   110 00000F31 7507                <1>     jne .notQuoteToCount
   111 00000F33 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   112 00000F35 E9F4FFFFFF          <1>     jmp .countQuotes
   113                              <1> .notQuoteToCount:
   114 00000F3A 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   115 00000F3C 75F0                <1>     jne .countQuotes
   116 00000F3E 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   117 00000F41 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We store this nicely formatted string in psp
   118                              <1> .getChar:
   119 00000F48 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   120 00000F49 3C22                <1>     cmp al, '"'     ;Is char a quote?
   121 00000F4B 750E                <1>     jne .notQuote
   122 00000F4D FECD                <1>     dec ch          ;We have a quote, now decrement
   123 00000F4F 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   124                              <1> .searchForClosingQuote:
   125                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   126 00000F51 AA                  <1>     stosb   ;Store char and inc rdi
   127 00000F52 FEC1                <1>     inc cl
   128 00000F54 AC                  <1>     lodsb   ;Get next char
   129 00000F55 3C22                <1>     cmp al, '"'
   130 00000F57 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   131 00000F59 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   132                              <1> .notQuote:
   133 00000F5B 51                  <1>     push rcx    ;Save counts, if anything goes wrong, stack is jiggled properly
   134 00000F5C E810050000          <1>     call checkAndSetupRedir ;Intervene redir
   135 00000F61 59                  <1>     pop rcx
   136 00000F62 7509                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   137 00000F64 7202                <1>     jc .pipeHandle      ;Store a CR in the buffer if a pipe
   138 00000F66 EBE0                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   139                              <1> .pipeHandle:
   140 00000F68 B00D                <1>     mov al, CR  ;Now store a Carriage return 
   141 00000F6A 48FFC6              <1>     inc rsi ;Ensure we remain one char past the pipe
   142                              <1> .notRedir:
   143 00000F6D AA                  <1>     stosb       ;Store char and advance rdi
   144 00000F6E 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   145 00000F70 7404                <1>     je .exit
   146 00000F72 FEC1                <1>     inc cl      ;Increment char count
   147 00000F74 EBD2                <1>     jmp short .getChar    ;If not, get next char
   148                              <1> .exit:
   149 00000F76 48FFCE              <1>     dec rsi ;move rsi to point back to terminator or one past | 
   150 00000F79 48893527F1FFFF      <1>     mov qword [cmdEndPtr], rsi  ;Store rsi pointing to the first char past CR or |
   151 00000F80 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   152 00000F87 880F                <1>     mov byte [rdi], cl  ;Store the count of chars in the psp buffer
   153                              <1>     return
    13                              <2> %%_ret:
    14 00000F89 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   154                              <1> 
   155                              <1> analyseCmdline:
   156                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   157                              <1> ; processes the command name into the FCB.  
   158 00000F8A 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   159 00000F91 4889F3              <1>     mov rbx, rsi            ;Save this ptr in rbx
   160 00000F94 E835210000          <1>     call skipDelimiters     ;Skip any preceeding separators
   161 00000F99 488D3D7FF2FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   162 00000FA0 E876220000          <1>     call cpDelimPathToBufz  ;Moves rsi to the first char past the delim char
   163 00000FA5 48FFCE              <1>     dec rsi ;Point it back to the delim char
   164 00000FA8 E8CD000000          <1>     call .skipAndCheckCR
   165 00000FAD 7439                <1>     je .setupCmdVars
   166 00000FAF C60504F1FFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   167 00000FB6 4889F0              <1>     mov rax, rsi
   168 00000FB9 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   169 00000FBC 8805F9F0FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   170                              <1> .skipArg:
   171 00000FC2 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   172 00000FC3 3C0D                <1>     cmp al, CR
   173 00000FC5 7421                <1>     je .setupCmdVars
   174 00000FC7 E810210000          <1>     call isALdelimiter
   175 00000FCC 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   176 00000FCE E8A7000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   177 00000FD3 7413                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   178 00000FD5 C605E1F0FFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   179 00000FDC 4889F0              <1>     mov rax, rsi            
   180 00000FDF 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   181 00000FE2 8805D6F0FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   182                              <1> .setupCmdVars:
   183                              <1> ;Before returning, we copy the command name to cmdName and pull
   184                              <1> ; the command line tail to NOT have the command in it  
   185 00000FE8 C6057FF2FFFF00      <1>     mov byte [cmdName], 0   ;Initialise this field to indicate no cmd
   186 00000FEF 488D3D29F2FFFF      <1>     lea rdi, cmdPathSpec
   187 00000FF6 E8A6210000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   188 00000FFB E8B2200000          <1>     call strlen ;Get the length of the final path componant
   189 00001000 81F90B000000        <1>     cmp ecx, 11
   190 00001006 776A                <1>     ja .exitBad ;Return error
   191 00001008 4889FE              <1>     mov rsi, rdi
   192 0000100B 488D3D5CF2FFFF      <1>     lea rdi, cmdName
   193 00001012 FFC9                <1>     dec ecx ;Minus the terminating null
   194 00001014 880F                <1>     mov byte [rdi], cl ;Store the length here
   195 00001016 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   196                              <1> .cpCmdName:
   197 00001019 AC                  <1>     lodsb
   198 0000101A E89D200000          <1>     call ucChar ;Uppercase the char
   199 0000101F AA                  <1>     stosb
   200 00001020 FFC9                <1>     dec ecx
   201 00001022 75F5                <1>     jnz .cpCmdName
   202                              <1> ;Now we pull the command line removing the command name from the command tail
   203 00001024 4889DE              <1>     mov rsi, rbx  ;rbx points to the de-redired command line 
   204                              <1> ;Skip leading separators
   205                              <1> .pctSkipLeading:
   206 00001027 AC                  <1>     lodsb   ;Get first char
   207 00001028 E8AF200000          <1>     call isALdelimiter
   208 0000102D 74F8                <1>     je .pctSkipLeading
   209 0000102F 48FFCE              <1>     dec rsi
   210                              <1>     ;rsi points to the start of the command
   211 00001032 488D3DE6F1FFFF      <1>     lea rdi, cmdPathSpec
   212 00001039 E874200000          <1>     call strlen ;Get the length of the command
   213 0000103E FFC9                <1>     dec ecx ;Minus the terminating null
   214 00001040 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   215 00001043 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   216 00001045 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   217                              <1> .pctPullChars:
   218 0000104C AC                  <1>     lodsb
   219 0000104D AA                  <1>     stosb
   220 0000104E 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   221 00001050 7404                <1>     je .pctExit
   222 00001052 FFC1                <1>     inc ecx     ;Increment count
   223 00001054 EBF6                <1>     jmp short .pctPullChars 
   224                              <1> .pctExit:
   225 00001056 41868880000000      <1>     xchg byte [r8 + cmdLineCnt], cl  ;Swap the counts
   226 0000105D 412A8880000000      <1>     sub cl, byte [r8 + cmdLineCnt]  ;How many chars did we remove from buffer?
   227 00001064 280D51F0FFFF        <1>     sub byte [arg1Off], cl  ;Now subtract their offsets!
   228 0000106A 280D4EF0FFFF        <1>     sub byte [arg2Off], cl  ;If there is no args, this is a null point
   229 00001070 F8                  <1>     clc
   230                              <1>     return
    13                              <2> %%_ret:
    14 00001071 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   231                              <1> .exitBad:
   232 00001072 C605F5F1FFFFFF      <1>     mov byte [cmdName], -1 ;Store -1 to indicate error
   233                              <1>     return
    13                              <2> %%_ret:
    14 00001079 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   234                              <1> .skipAndCheckCR:
   235                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   236 0000107A E84F200000          <1>     call skipDelimiters ;Go to the next char in the input line
   237 0000107F 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   238                              <1>     return
    13                              <2> %%_ret:
    14 00001082 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   239                              <1> 
   240                              <1> doCommandLine:
   241 00001083 4C8B0585EFFFFF      <1>     mov r8, qword [pspPtr]
   242 0000108A 488D358EF1FFFF      <1>     lea rsi, cmdPathSpec
   243                              <1>     ;The following check accounts for the end of a piped command
   244 00001091 803DD6F1FFFF00      <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, fail!
   245                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001098 74(82)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   246 0000109A 803DCDF1FFFFFF      <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   247 000010A1 0F8420060000        <1>     je badCmdError
   248 000010A7 488D3D12F0FFFF      <1>     lea rdi, cmdFcb
   249 000010AE B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
   250 000010B3 CD21                <1>     int 21h
   251 000010B5 0FB71D63F1FFFF      <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   252 000010BC 80FF3A              <1>     cmp bh, ":"
   253 000010BF 752D                <1>     jne .noDriveSpecified
   254 000010C1 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   255 000010C3 E8F41F0000          <1>     call ucChar     ;Uppercase al
   256 000010C8 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   257 000010CA 80FBFF              <1>     cmp bl, -1      ;Int 21h returns AL = -1 if bad drive specified
   258 000010CD 7412                <1>     je .badDrive
   259                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   260 000010CF 803D98F1FFFF02      <1>     cmp byte [cmdName], 2
   261 000010D6 7516                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   262 000010D8 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   263 000010DA E8A91F0000          <1>     call setDrive
   264                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000010DF 74(82)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   265                              <1> .badDrive:
   266 000010E1 488D1526F8FFFF      <1>     lea rdx, badDrv
   267 000010E8 B409                <1>     mov ah, 09h
   268 000010EA CD21                <1>     int 21h
   269 000010EC F9                  <1>     stc
   270                              <1>     return
    13                              <2> %%_ret:
    14 000010ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   271                              <1> .noDriveSpecified:
   272                              <1> ;Now we set the two FCB's in the command line
   273 000010EE F605C5EFFFFFFF      <1>     test byte [arg1Flg], -1
   274 000010F5 744D                <1>     jz .fcbArgsDone
   275 000010F7 0FB605BDEFFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   276 000010FE 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   277 00001105 4801C6              <1>     add rsi, rax    ;Point to first argument
   278 00001108 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   279 0000110C B801290000          <1>     mov eax, 2901h
   280 00001111 CD21                <1>     int 21h
   281 00001113 8805A3EFFFFF        <1>     mov byte [arg1FCBret], al
   282 00001119 F6059DEFFFFFFF      <1>     test byte [arg2Flg], -1
   283 00001120 7422                <1>     jz .fcbArgsDone
   284 00001122 0FB60595EFFFFF      <1>     movzx eax, byte [arg2Off]
   285 00001129 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   286 00001130 4801C6              <1>     add rsi, rax    ;Point to first argument
   287 00001133 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   288 00001137 B801290000          <1>     mov eax, 2901h
   289 0000113C CD21                <1>     int 21h
   290 0000113E 88057BEFFFFF        <1>     mov byte [arg2FCBret], al
   291                              <1> .fcbArgsDone:
   292 00001144 498D9881000000      <1>     lea rbx, [r8 + cmdLine] ;Point at processed command tail
   293 0000114B 488D351CF1FFFF      <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   294 00001152 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   295 00001157 BAFFFF0000          <1>     mov edx, 0FFFFh
   296 0000115C B5FF                <1>     mov ch, -1
   297 0000115E CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   298 00001160 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   299 00001165 BAFFFF0000          <1>     mov edx, 0FFFFh
   300 0000116A 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   301 0000116C CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   302                              <1>             ;        al = 0  if the command should be executed as usual
   303 0000116E 84C0                <1>     test al, al
   304 00001170 7427                <1>     jz .executeInternal
   305                              <1>     ;Here we execute externally and return to the prompt
   306                              <1>     ; as if it was an internal execution
   307 00001172 498D9881000000      <1>     lea rbx, [r8 + cmdLine] ;Point at processed command tail
   308 00001179 488D35EEF0FFFF      <1>     lea rsi, cmdName        
   309 00001180 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   310 00001185 BAFFFF0000          <1>     mov edx, 0FFFFh
   311 0000118A B5FF                <1>     mov ch, -1
   312 0000118C CD2F                <1>     int 2Fh
   313 0000118E 4180B88100000000    <1>     cmp byte [r8 + cmdLine], 0  ;If this is non-zero, we execute internal
   314                              <1>     retz    ;Else, we return silently
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001196 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001198 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   315                              <1> .executeInternal:
   316                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   317                              <1> ;rsi points after the command terminator in the command tail
   318 00001199 488D1D15F5FFFF      <1>     lea rbx, functionTable
   319                              <1> .nextEntry:
   320 000011A0 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   321 000011A3 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   322 000011A6 0F849C190000        <1>     je launchChild      ;If so, check externally now
   323 000011AC 380DBCF0FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   324 000011B2 7532                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   325                              <1>     ;Here they have the same length so lets see if the name is the same
   326 000011B4 56                  <1>     push rsi
   327                              <1>     ;ecx has the length to compare
   328 000011B5 51                  <1>     push rcx
   329 000011B6 488D7301            <1>     lea rsi, qword [rbx + 1]
   330 000011BA 488D3DAEF0FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   331 000011C1 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   332 000011C3 59                  <1>     pop rcx
   333 000011C4 5E                  <1>     pop rsi
   334 000011C5 751F                <1>     jne .gotoNextEntry
   335                              <1>     ;Here it was found both strings are equal
   336 000011C7 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   337 000011CC 480FB71F            <1>     movzx rbx, word [rdi]
   338 000011D0 488D3D29EEFFFF      <1>     lea rdi, startLbl
   339 000011D7 4801FB              <1>     add rbx, rdi
   340 000011DA FFD3                <1>     call rbx    ;Call this function...
   341                              <1>     retc    ;Always return with CF=CY on error. Error code set to -1
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000011DC 72(98)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   342 000011DE C60528EEFFFF00      <1>     mov byte [returnCode], 0 ;Set the retcode to 0 if ok!
   343                              <1>     return  ;... and return
    13                              <2> %%_ret:
    14 000011E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   344                              <1> .gotoNextEntry:
   345 000011E6 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   346 000011ED 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   347 000011F0 EBAE                <1>     jmp short .nextEntry
   348                              <1> .dfltErrExit:
   349 000011F2 488D1506F6FFFF      <1>     lea rdx, badCmd
   350 000011F9 B409                <1>     mov ah, 09h
   351 000011FB CD21                <1>     int 21h
   352                              <1>     return
    13                              <2> %%_ret:
    14 000011FD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   353                              <1> 
   354                              <1> redirFailure:
   355 000011FE 488D1569FBFFFF      <1>     lea rdx, redirErrMsg
   356 00001205 B913000000          <1>     mov ecx, redirErrMsgL
   357 0000120A EB0C                <1>     jmp short redirPipeFailureCommon
   358                              <1> pipeFailure:
   359 0000120C 488D1544FBFFFF      <1>     lea rdx, pipeErrMsg
   360 00001213 B917000000          <1>     mov ecx, pipeErrMsgL
   361                              <1> redirPipeFailureCommon:
   362                              <1> ;This routine is called if any problems happen during 
   363                              <1> ;This routine tries to close whatever handles are not -1 and delete
   364                              <1> ; pipe files if the pipe count is not 0
   365                              <1> ;It resets all variables and proceeds.
   366 00001218 B800400000          <1>     mov eax, 4000h  ;Write handle
   367 0000121D BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   368 00001222 CD21                <1>     int 21h
   369 00001224 31DB                <1>     xor ebx, ebx    ;Select STDIN
   370 00001226 E8C6000000          <1>     call .closeHandle
   371 0000122B FFC3                <1>     inc ebx         ;Select STDOUT
   372 0000122D E8BF000000          <1>     call .closeHandle
   373 00001232 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   374 00001237 488D157CFBFFFF      <1>     lea rdx, conName
   375 0000123E CD21                <1>     int 21h
   376 00001240 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
   377 00001242 B800450000          <1>     mov eax, 4500h  ;DUP
   378 00001247 CD21                <1>     int 21h
   379 00001249 66C70562EEFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   380 00001252 0FB71D5DEEFFFF      <1>     movzx ebx, word [redirSTDIN]
   381 00001259 E893000000          <1>     call .closeHandle
   382                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   383 0000125E 66C7054FEEFFFFFFFF  <1>     mov word [redirSTDIN], -1
   384 00001267 0FB71D4AEEFFFF      <1>     movzx ebx, word [redirSTDOUT]
   385 0000126E E87E000000          <1>     call .closeHandle
   386 00001273 66C7053CEEFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   387 0000127C 0FB71D2DEEFFFF      <1>     movzx ebx, word [pipeSTDIN]
   388 00001283 E869000000          <1>     call .closeHandle
   389 00001288 66C7051FEEFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   390 00001291 0FB71D1AEEFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   391 00001298 E854000000          <1>     call .closeHandle
   392 0000129D 66C7050CEEFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   393 000012A6 C60502EEFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   394 000012AD 488D1566F0FFFF      <1>     lea rdx, qword [pipe1Filespec]
   395 000012B4 803A00              <1>     cmp byte [rdx], 0
   396 000012B7 7407                <1>     jz .checkOld
   397 000012B9 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   398 000012BE CD21                <1>     int 21h
   399                              <1> .checkOld:
   400 000012C0 488D15A2F0FFFF      <1>     lea rdx, qword [pipe2Filespec]
   401 000012C7 803A00              <1>     cmp byte [rdx],0
   402 000012CA 7407                <1>     jz .pipeNamesComplete
   403 000012CC B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   404 000012D1 CD21                <1>     int 21h
   405                              <1> .pipeNamesComplete:
   406 000012D3 31C0                <1>     xor eax, eax
   407                              <1>     ;Invalidate the pointers and the paths too
   408 000012D5 488905DCF0FFFF      <1>     mov qword [newPipe], rax
   409 000012DC 488905DDF0FFFF      <1>     mov qword [oldPipe], rax
   410 000012E3 890531F0FFFF        <1>     mov dword [pipe1Filespec], eax
   411 000012E9 89057AF0FFFF        <1>     mov dword [pipe2Filespec], eax
   412 000012EF F9                  <1>     stc
   413                              <1>     return
    13                              <2> %%_ret:
    14 000012F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   414                              <1> .closeHandle:
   415 000012F1 81FBFFFFFFFF        <1>     cmp ebx, -1
   416                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000012F7 74(F0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   417 000012F9 B8003E0000          <1>     mov eax, 3E00h
   418 000012FE CD21                <1>     int 21h
   419                              <1>     return
    13                              <2> %%_ret:
    14 00001300 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   420                              <1> 
   421                              <1> cleanUpRedir:
   422                              <1> ;Cleans up the redir stuff after we are done.
   423 00001301 0FB705A8EDFFFF      <1>     movzx eax, word [pipeSTDIN]
   424 00001308 0FB71DA3EDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   425 0000130F C1E310              <1>     shl ebx, 10h
   426 00001312 09D8                <1>     or eax, ebx
   427 00001314 3DFFFFFFFF          <1>     cmp eax, -1
   428 00001319 750C                <1>     jne .pipe
   429 0000131B C6058DEDFFFF00      <1>     mov byte [pipeFlag], 0  ;Clear the flag
   430 00001322 E9CD000000          <1>     jmp .redirInClear   ;If no piping, skip
   431                              <1> .pipe:
   432                              <1> ;Pipe processing here
   433                              <1> ;We handle stdin, closing the redir if it is and deleting
   434                              <1> ; the redir file.
   435                              <1> ;Then we handle stdout, moving the redir to stdin.
   436 00001327 66813D80EDFFFFFFFF  <1>     cmp word [pipeSTDIN], -1
   437 00001330 7443                <1>     je .pipeNostdin
   438                              <1>     ;We close the handle first and delete the file.
   439 00001332 0FB71D77EDFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   440 00001339 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   441 0000133B B800460000          <1>     mov eax, 4600h
   442 00001340 CD21                <1>     int 21h
   443 00001342 0F82C4FEFFFF        <1>     jc pipeFailure
   444 00001348 B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   445 0000134D CD21                <1>     int 21h
   446 0000134F 0F82B7FEFFFF        <1>     jc pipeFailure
   447 00001355 488B1564F0FFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   448 0000135C B800410000          <1>     mov eax, 4100h  ;Delete the file!
   449 00001361 CD21                <1>     int 21h
   450 00001363 0F82A3FEFFFF        <1>     jc pipeFailure
   451 00001369 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   452 0000136C 66C7053BEDFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   453                              <1> .pipeNostdin:
   454 00001375 66813D34EDFFFFFFFF  <1>     cmp word [pipeSTDOUT], -1   ;If no stdout redir, exit now
   455 0000137E 7474                <1>     je .redirInClear
   456                              <1> ;Duplicate STDIN to save across pipe
   457 00001380 B800450000          <1>     mov eax, 4500h
   458 00001385 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   459 00001387 CD21                <1>     int 21h
   460 00001389 0F827DFEFFFF        <1>     jc pipeFailure
   461 0000138F 6689051AEDFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   462                              <1> 
   463                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   464 00001396 B800460000          <1>     mov eax, 4600h
   465 0000139B 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   466 0000139D FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   467 0000139F CD21                <1>     int 21h
   468 000013A1 0F8265FEFFFF        <1>     jc pipeFailure
   469                              <1> 
   470                              <1> ;Now return the original stdout to stdout
   471 000013A7 89D9                <1>     mov ecx, ebx
   472 000013A9 0FB71D02EDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   473 000013B0 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   474 000013B5 CD21                <1>     int 21h
   475 000013B7 0F824FFEFFFF        <1>     jc pipeFailure
   476                              <1> 
   477                              <1> ;Now close the DUP'ed STDOUT
   478 000013BD B8003E0000          <1>     mov eax, 3E00h
   479 000013C2 CD21                <1>     int 21h
   480 000013C4 0F8242FEFFFF        <1>     jc pipeFailure
   481                              <1> 
   482                              <1> ;Finally unwind STDIN to the beginning of the file
   483 000013CA B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   484 000013CF 31DB                <1>     xor ebx, ebx    ;STDIN handle
   485 000013D1 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   486 000013D3 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   487 000013D5 CD21                <1>     int 21h
   488 000013D7 0F822FFEFFFF        <1>     jc pipeFailure  ;This should never happen
   489                              <1> 
   490 000013DD 488B15D4EFFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   491 000013E4 488915D5EFFFFF      <1>     mov qword [oldPipe], rdx
   492 000013EB 66C705BEECFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   493                              <1> .redirInClear:
   494                              <1> ;Check redir in
   495 000013F4 F605B9ECFFFFFF      <1>     test byte [redirIn], -1
   496 000013FB 7433                <1>     jz .redirOutClear
   497                              <1> 
   498 000013FD 0FB71DB2ECFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   499 00001404 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   500 00001406 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   501 0000140B CD21                <1>     int 21h
   502 0000140D 0F82EBFDFFFF        <1>     jc redirFailure
   503 00001413 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   504 00001418 CD21                <1>     int 21h
   505 0000141A 0F82DEFDFFFF        <1>     jc redirFailure
   506 00001420 66C7058DECFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   507 00001429 C60584ECFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   508                              <1> .redirOutClear:
   509                              <1> ;Now check Redir Out
   510 00001430 F6057EECFFFFFF      <1>     test byte [redirOut], -1
   511                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001437 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001439 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   512                              <1> 
   513 0000143A 0FB71D77ECFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   514 00001441 B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   515 00001446 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   516 0000144B CD21                <1>     int 21h
   517 0000144D 0F82ABFDFFFF        <1>     jc redirFailure
   518 00001453 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   519 00001458 CD21                <1>     int 21h
   520 0000145A 0F829EFDFFFF        <1>     jc redirFailure
   521 00001460 66C7054FECFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   522 00001469 C60545ECFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   523                              <1>     return
    13                              <2> %%_ret:
    14 00001470 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> checkAndSetupRedir:
   526                              <1> ;Checks and sets up redir as appropriate
   527                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   528                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   529                              <1> ;Output: ZF=NZ => No redir
   530                              <1> ;        ZF=ZY => Redir
   531                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   532                              <1> ;CF=CY if pipe set or an embedded CR found. rsi points to first char past it!
   533 00001471 57                  <1>     push rdi
   534 00001472 3C3C                <1>     cmp al, "<"
   535 00001474 740F                <1>     je .inputRedir
   536 00001476 3C3E                <1>     cmp al, ">"
   537 00001478 7473                <1>     je .outputRedir
   538 0000147A 3C7C                <1>     cmp al, "|"
   539 0000147C 0F841B010000        <1>     je .pipeSetup
   540 00001482 F8                  <1>     clc
   541                              <1> .redirExit:
   542 00001483 5F                  <1>     pop rdi
   543                              <1>     return
    13                              <2> %%_ret:
    14 00001484 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   544                              <1> .inputRedir:
   545 00001485 C60528ECFFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   546 0000148C 488D3DE9EDFFFF      <1>     lea rdi, rdrInFilespec
   547 00001493 E8361C0000          <1>     call skipDelimiters ;Skip spaces between < and the filespec
   548 00001498 E87E1D0000          <1>     call cpDelimPathToBufz
   549 0000149D 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char as 
   550                              <1>     ;Setup the redir here for STDIN
   551 000014A0 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   552 000014A2 B800450000          <1>     mov eax, 4500h
   553 000014A7 CD21                <1>     int 21h
   554 000014A9 0F827A010000        <1>     jc .redirError
   555 000014AF 66890500ECFFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   556 000014B6 488D15BFEDFFFF      <1>     lea rdx, rdrInFilespec
   557 000014BD B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   558 000014C2 CD21                <1>     int 21h
   559 000014C4 0F825F010000        <1>     jc .redirError
   560 000014CA 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   561 000014CC 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   562 000014CF B800460000          <1>     mov eax, 4600h
   563 000014D4 CD21                <1>     int 21h
   564 000014D6 0F824D010000        <1>     jc .redirError
   565 000014DC B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   566 000014E1 CD21                <1>     int 21h
   567 000014E3 0F8240010000        <1>     jc .redirError
   568 000014E9 30C0                <1>     xor al, al
   569 000014EB EB96                <1>     jmp short .redirExit
   570                              <1> .outputRedir:
   571 000014ED C605C1EBFFFF01      <1>     mov byte [redirOut], 1
   572 000014F4 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   573 000014F7 7509                <1>     jne .notDouble
   574 000014F9 FE05B6EBFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   575 000014FF 48FFC6              <1>     inc rsi ;Go past it too
   576                              <1> .notDouble:
   577 00001502 488D3DC2EDFFFF      <1>     lea rdi, rdrOutFilespec
   578 00001509 E8C01B0000          <1>     call skipDelimiters
   579 0000150E E8081D0000          <1>     call cpDelimPathToBufz
   580 00001513 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char as 
   581                              <1>     ;Setup the redir here for STDOUT
   582 00001516 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   583 0000151B B800450000          <1>     mov eax, 4500h
   584 00001520 CD21                <1>     int 21h
   585 00001522 0F8201010000        <1>     jc .redirError
   586 00001528 66890589EBFFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   587 0000152F 488D1595EDFFFF      <1>     lea rdx, rdrOutFilespec
   588 00001536 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   589 0000153B CD21                <1>     int 21h
   590 0000153D 730F                <1>     jnc .fileExists
   591 0000153F B8003C0000          <1>     mov eax, 3C00h
   592 00001544 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   593 00001546 CD21                <1>     int 21h
   594 00001548 0F82DB000000        <1>     jc .redirError
   595                              <1> .fileExists:
   596 0000154E B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   597 00001553 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   598 00001556 B800460000          <1>     mov eax, 4600h  ;DUP2
   599 0000155B CD21                <1>     int 21h
   600 0000155D 0F82C6000000        <1>     jc .redirError
   601 00001563 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   602 00001568 CD21                <1>     int 21h
   603 0000156A 0F82B9000000        <1>     jc .redirError
   604 00001570 803D3EEBFFFF01      <1>     cmp byte [redirOut], 1
   605 00001577 7416                <1>     je .dontAppend
   606                              <1>     ;Here we move the file pointer to the end of the file
   607 00001579 31D2                <1>     xor edx, edx    ;Low order 32 bits
   608 0000157B 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   609 0000157D BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   610 00001582 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   611 00001587 CD21                <1>     int 21h
   612 00001589 0F829A000000        <1>     jc .redirError
   613                              <1> .dontAppend:
   614 0000158F C6051FEBFFFFFF      <1>     mov byte [redirOut], -1
   615 00001596 30C0                <1>     xor al, al
   616 00001598 E9E6FEFFFF          <1>     jmp .redirExit
   617                              <1> .pipeSetup:
   618                              <1> ;We only need to setup STDOUT redirection to the pipe file
   619 0000159D 56                  <1>     push rsi    ;Save rsi pointing to char past |
   620 0000159E E82B1B0000          <1>     call skipDelimiters ;Check if this is a double ||
   621 000015A3 803E7C              <1>     cmp byte [rsi], "|" 
   622 000015A6 5E                  <1>     pop rsi
   623 000015A7 7475                <1>     je .pipeError
   624 000015A9 488D156AEDFFFF      <1>     lea rdx, pipe1Filespec
   625 000015B0 803A00              <1>     cmp byte [rdx], 0
   626 000015B3 740C                <1>     jz .pathFound
   627 000015B5 488D15ADEDFFFF      <1>     lea rdx, pipe2Filespec
   628 000015BC 803A00              <1>     cmp byte [rdx], 0
   629 000015BF 755D                <1>     jnz .pipeError
   630                              <1> .pathFound:
   631 000015C1 488915F0EDFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   632 000015C8 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   633 000015CD BB01000000          <1>     mov ebx, 1
   634 000015D2 CD21                <1>     int 21h
   635 000015D4 7248                <1>     jc .pipeError
   636 000015D6 668905D5EAFFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   637 000015DD E8B21A0000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   638 000015E2 0441                <1>     add al, "A"
   639 000015E4 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   640 000015E9 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   641 000015EB 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   642 000015ED 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   643 000015EF B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   644 000015F4 CD21                <1>     int 21h
   645 000015F6 7226                <1>     jc .pipeError
   646                              <1>     ;AX has the handle for this file now, this will become STDOUT
   647                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   648 000015F8 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   649 000015FB B901000000          <1>     mov ecx, 1
   650 00001600 B800460000          <1>     mov eax, 4600h
   651 00001605 CD21                <1>     int 21h
   652 00001607 7215                <1>     jc .pipeError
   653 00001609 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   654 0000160E CD21                <1>     int 21h
   655 00001610 720C                <1>     jc .pipeError
   656 00001612 C60596EAFFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   657 00001619 30C0                <1>     xor al, al  ;Set ZF
   658 0000161B F9                  <1>     stc         ;But also CF to indicate pipe!
   659 0000161C 5F                  <1>     pop rdi
   660                              <1>     return
    13                              <2> %%_ret:
    14 0000161D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   661                              <1> .pipeError:
   662 0000161E 5F                  <1>     pop rdi 
   663 0000161F E8E8FBFFFF          <1>     call pipeFailure
   664 00001624 E939F8FFFF          <1>     jmp commandMain ;Fully reset the state if a pipe failure occurs.
   665                              <1> .redirError:
   666 00001629 5F                  <1>     pop rdi 
   667 0000162A E8CFFBFFFF          <1>     call redirFailure
   668 0000162F E92EF8FFFF          <1>     jmp commandMain ;Fully reset the state if a redir failure occurs.
   669                              <1> 
   670                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   671                              <1> ;Input: rsi points to the count byte of a command line
   672 00001634 4150                <1>     push r8
   673 00001636 4151                <1>     push r9
   674 00001638 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   675 0000163A CD21                <1>     int 21h
   676 0000163C 52                  <1>     push rdx    ;Save on the stack
   677 0000163D 488D1DBCE8FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   678 00001644 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   679 00001646 CD21                <1>     int 21h
   680 00001648 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   681 0000164B 4989D9              <1>     mov r9, rbx
   682 0000164E 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   683 00001655 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   684 0000165A F348A5              <1>     rep movsq   ;Copy command line over
   685                              <1>     ;call doCommandLine
   686 0000165D 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   687 0000165E B450                <1>     mov ah, 50h ;Set Current PSP
   688 00001660 CD21                <1>     int 21h
   689 00001662 4159                <1>     pop r9
   690 00001664 4158                <1>     pop r8
   691 00001666 48CF                <1>     iretq
    17                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badAccError:
     7 00001668 488D155EF4FFFF      <1>     lea rdx, accDenMsg
     8 0000166F EB46                <1>     jmp short badCmn
     9                              <1> noSelfCopyError:
    10 00001671 488D1515F2FFFF      <1>     lea rdx, noSelfCopy
    11 00001678 EB3D                <1>     jmp short badCmn
    12                              <1> badParamError:
    13 0000167A 488D15CAF2FFFF      <1>     lea rdx, badParm
    14 00001681 EB34                <1>     jmp short badCmn
    15                              <1> badDriveError:
    16 00001683 488D1584F2FFFF      <1>     lea rdx, badDrv
    17 0000168A EB2B                <1>     jmp short badCmn
    18                              <1> badArgError:
    19 0000168C 488D1566F5FFFF      <1>     lea rdx, badArgs
    20 00001693 EB22                <1>     jmp short badCmn
    21                              <1> badFileError:
    22 00001695 488D1541F5FFFF      <1>     lea rdx, badSpec
    23 0000169C EB19                <1>     jmp short badCmn
    24                              <1> badDupFnf:
    25                              <1> ;Hybrid error message
    26 0000169E 488D1575F1FFFF      <1>     lea rdx, dupName
    27 000016A5 EB10                <1>     jmp short badCmn
    28                              <1> badFnf:
    29 000016A7 488D1583F1FFFF      <1>     lea rdx, fnfMsg
    30 000016AE EB07                <1>     jmp short badCmn
    31                              <1> badDirError:
    32 000016B0 488D1595F3FFFF      <1>     lea rdx, badDir
    33                              <1> badCmn:
    34 000016B7 C6054FE9FFFFFF      <1>     mov byte [returnCode], -1    ;Return code defaults to -1 if error (for now!)
    35 000016BE B800090000          <1>     mov eax, 0900h
    36 000016C3 CD21                <1>     int 21h
    37 000016C5 F9                  <1>     stc ;Return with CY => Error occured
    38                              <1>     return  ;This will be made nuanced later, to agree with DOS behaviour
    13                              <2> %%_ret:
    14 000016C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    39                              <1> badCmdError:
    40 000016C7 488D1531F1FFFF      <1>     lea rdx, badCmd
    41 000016CE EBE7                <1>     jmp short badCmn
    42                              <1> dir:
    43                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    44 000016D0 C60573EDFFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    45 000016D7 C6056DEDFFFF00      <1>     mov byte [dirLineCtr], 0
    46 000016DE C60567EDFFFF00      <1>     mov byte [dirFileCtr], 0
    47 000016E5 C60562EDFFFF00      <1>     mov byte [dirSrchDir], 0
    48 000016EC 66C705D3ECFFFF0000  <1>     mov word [searchSpec], 0
    49 000016F5 488D3DD4EDFFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    50 000016FC C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    51 000016FF 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    51 00001708 3F                  <1>
    52 00001709 48894701            <1>     mov qword [rdi + fcb.filename], rax
    53 0000170D C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    54                              <1>     ;Start by scanning for the switches
    55 00001714 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    56 0000171B 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    57                              <1> .scanNew:
    58 0000171E E8AB190000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    59 00001723 AC                  <1>     lodsb   ;Get this char
    60 00001724 3C0D                <1>     cmp al, CR
    61 00001726 744D                <1>     je .scanDone
    62 00001728 3A05FEE8FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    63 0000172E 7524                <1>     jne .notSwitch
    64 00001730 AC                  <1>     lodsb   ;Get the next char
    65 00001731 E886190000          <1>     call ucChar
    66 00001736 3C57                <1>     cmp al, "W"
    67 00001738 7509                <1>     jne .notWide
    68 0000173A 800D09EDFFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    69 00001741 EBDB                <1>     jmp short .scanNew
    70                              <1> .notWide:
    71 00001743 3C50                <1>     cmp al, "P"
    72 00001745 0F852FFFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    73 0000174B 800DF8ECFFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    74 00001752 EBCA                <1>     jmp short .scanNew
    75                              <1> .notSwitch:
    76 00001754 F605EFECFFFF04      <1>     test byte [dirFlags], dirFileType
    77 0000175B 0F8519FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    78                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    79 00001761 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    80 00001764 E80D1B0000          <1>     call copyArgumentToSearchSpec   
    81 00001769 48FFCE              <1>     dec rsi ;Point back to the terminator char
    82 0000176C 800DD7ECFFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    83 00001773 EBA9                <1>     jmp short .scanNew
    84                              <1> .scanDone:
    85 00001775 F605CEECFFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    86 0000177C 7438                <1>     jz .currentDrv
    87                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
    88 0000177E 488D3543ECFFFF      <1>     lea rsi, searchSpec
    89 00001785 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
    90 00001789 752B                <1>     jne .currentDrv
    91                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
    92 0000178B 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
    93 00001790 498D785C            <1>     lea rdi, qword [r8 + fcb1]
    94 00001794 B801290000          <1>     mov eax, 2901h   ;Parse filename
    95 00001799 CD21                <1>     int 21h
    96 0000179B 3CFF                <1>     cmp al, -1
    97 0000179D 0F84E0FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
    98                              <1>     ;Else the drive in the fcb is valid
    99 000017A3 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   100 000017A8 84C0                <1>     test al, al
   101 000017AA 740A                <1>     jz .currentDrv
   102 000017AC FEC8                <1>     dec al  ;Convert to 0 based drive number
   103 000017AE 880599ECFFFF        <1>     mov byte [dirDrv], al
   104 000017B4 EB0B                <1>     jmp short .dirPrintVol
   105                              <1> .currentDrv:
   106 000017B6 E8D9180000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   107 000017BB 88058CECFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   108                              <1> .dirPrintVol:
   109 000017C1 488D3500ECFFFF      <1>     lea rsi, searchSpec
   110                              <1> ;Now construct the path on dirSrchDir.
   111 000017C8 488D3D7FECFFFF      <1>     lea rdi, dirSrchDir
   112 000017CF 0FB60577ECFFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   113 000017D6 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   114 000017D8 0441                <1>     add al, "A" ;Turn into a letter
   115 000017DA B43A                <1>     mov ah, ":"
   116 000017DC 66AB                <1>     stosw   ;Store X: into the search path
   117 000017DE B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   118 000017E3 CD2F                <1>     int 2fh
   119 000017E5 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   120 000017E7 0F8496FEFFFF        <1>     je badDriveError
   121                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   122 000017ED 8A0538E8FFFF        <1>     mov al, byte [pathSep]
   123 000017F3 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   124 000017F5 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   125 000017F7 AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   126 000017F8 FEC2                <1>     inc dl  ;Increment by 1
   127 000017FA 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   128 000017FD B800470000          <1>     mov eax, 4700h  ;Print current working directory
   129 00001802 CD21                <1>     int 21h
   130 00001804 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   131                              <1>     ;rsi points to the first char in the provided path.
   132                              <1>     ;rdi points to the first char of the cwd.
   133 00001807 31C0                <1>     xor eax, eax
   134                              <1> .goToEndOfCwd:
   135                              <1> ;Move to the end of the string, could use repne?
   136 00001809 3807                <1>     cmp byte [rdi], al
   137 0000180B 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   138 0000180D 48FFC7              <1>     inc rdi
   139 00001810 EBF7                <1>     jmp short .goToEndOfCwd
   140                              <1> .prepCopy:
   141 00001812 8A0513E8FFFF        <1>     mov al, byte [pathSep]
   142 00001818 3806                <1>     cmp byte [rsi], al
   143 0000181A 7412                <1>     je .copyPathLoop
   144 0000181C B43A                <1>     mov ah, ":"
   145 0000181E 86C4                <1>     xchg al, ah
   146 00001820 663947FE            <1>     cmp word [rdi - 2], ax
   147 00001824 7408                <1>     je .copyPathLoop
   148 00001826 88E0                <1>     mov al, ah
   149 00001828 3847FF              <1>     cmp byte [rdi - 1], al
   150 0000182B 7401                <1>     je .copyPathLoop
   151 0000182D AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   152                              <1> .copyPathLoop:
   153 0000182E AC                  <1>     lodsb
   154 0000182F 3A05F6E7FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   155 00001835 7509                <1>     jne .checkDot  ;If not, store it
   156                              <1> .lpPathseps:
   157 00001837 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   158 00001839 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   159 0000183B 48FFC6              <1>     inc rsi
   160 0000183E EBF7                <1>     jmp short .lpPathseps
   161                              <1> .checkDot:
   162 00001840 3C2E                <1>     cmp al, "."
   163 00001842 7407                <1>     je .dots
   164                              <1> .store:
   165 00001844 AA                  <1>     stosb
   166 00001845 84C0                <1>     test al, al ;Was the char we just copied a null?
   167 00001847 7472                <1>     jz .exitPathCopy
   168 00001849 EBE3                <1>     jmp short .copyPathLoop
   169                              <1> .dots:
   170                              <1>     ;Here handle dot and dot dot
   171                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   172                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   173                              <1>     ; by 1. If it is null, go to top of loop.
   174                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   175 0000184B 8A25DAE7FFFF        <1>     mov ah, byte [pathSep]
   176 00001851 3867FF              <1>     cmp byte [rdi - 1], ah  
   177 00001854 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   178 00001856 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   179 00001858 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   180 0000185B 7413                <1>     je .twoDot
   181                              <1>     ;This is only a "current dir" when next char is pathsep or null
   182 0000185D 3A25C8E7FFFF        <1>     cmp ah, byte [pathSep]
   183 00001863 7406                <1>     je .skipThisPathsep
   184 00001865 84E4                <1>     test ah, ah
   185 00001867 74C5                <1>     jz .copyPathLoop
   186 00001869 EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   187                              <1> .skipThisPathsep:
   188                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   189 0000186B 48FFC6              <1>     inc rsi ;Point to the pathsep
   190 0000186E EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   191                              <1> .twoDot:
   192                              <1>     ;Woohoo, this works!
   193 00001870 48FFC6              <1>     inc rsi ;Move past the second dot
   194 00001873 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   195 00001875 3A25B0E7FFFF        <1>     cmp ah, byte [pathSep]
   196 0000187B 7408                <1>     je .tdOk
   197 0000187D 84E4                <1>     test ah, ah
   198 0000187F 0F85F5FDFFFF        <1>     jne badParamError
   199                              <1> .tdOk:
   200 00001885 8A05A0E7FFFF        <1>     mov al, byte byte [pathSep]
   201 0000188B 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   202 0000188F 0F84E5FDFFFF        <1>     je badParamError
   203 00001895 4881EF02000000      <1>     sub rdi, 2
   204 0000189C 31C9                <1>     xor ecx, ecx
   205 0000189E FFC9                <1>     dec ecx
   206 000018A0 FD                  <1>     std
   207 000018A1 F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   208 000018A3 FC                  <1>     cld
   209 000018A4 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   210 000018AB 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   211 000018AD 0F847BFFFFFF        <1>     jz .copyPathLoop
   212 000018B3 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   213 000018B6 E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   214                              <1> .exitPathCopy:
   215                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   216 000018BB 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   217 000018C2 8A0563E7FFFF        <1>     mov al, byte [pathSep]
   218 000018C8 B43A                <1>     mov ah, ":"
   219 000018CA 86C4                <1>     xchg al, ah
   220 000018CC 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   221 000018D0 7409                <1>     je .skipOverwrite
   222 000018D2 88E0                <1>     mov al, ah
   223 000018D4 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   224 000018D6 7503                <1>     jne .skipOverwrite
   225 000018D8 C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   226                              <1> .skipOverwrite:
   227 000018DB 488D356CEBFFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   228 000018E2 4889F7              <1>     mov rdi, rsi
   229 000018E5 B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   230 000018EA CD2F                <1>     int 2fh
   231 000018EC E892190000          <1>     call scanForWildcards
   232 000018F1 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   233 000018F3 4889F2              <1>     mov rdx, rsi
   234 000018F6 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   235 000018FA 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   236                              <1> .notNull:
   237 000018FC E8491A0000          <1>     call setDTA ;Set the DTA
   238 00001901 B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   239 00001906 B8004E0000          <1>     mov eax, 4E00h ;Find first
   240 0000190B CD21                <1>     int 21h
   241 0000190D 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   242                              <1> ;Now we have searched for the file, is a directory?
   243 0000190F F605CFE7FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   244 00001916 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   245                              <1>     ;Here we are searching IN a directory. Default search pattern!
   246 00001918 31C0                <1>     xor eax, eax
   247 0000191A 31C9                <1>     xor ecx, ecx
   248 0000191C FFC9                <1>     dec ecx
   249 0000191E F2AE                <1>     repne scasb
   250 00001920 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   251 00001923 EB40                <1>     jmp short .wcDefaultSearch
   252                              <1> .wcSearchPattern:
   253                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   254                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   255 00001925 31C0                <1>     xor eax, eax
   256 00001927 31C9                <1>     xor ecx, ecx
   257 00001929 FFC9                <1>     dec ecx
   258 0000192B F2AE                <1>     repne scasb ;Scan forwards
   259                              <1>     ;Here rdi points past the null at the end
   260 0000192D 8A05F8E6FFFF        <1>     mov al, byte [pathSep]
   261 00001933 31C9                <1>     xor ecx, ecx
   262 00001935 FFC9                <1>     dec ecx
   263 00001937 FD                  <1>     std ;Search backwards
   264 00001938 F2AE                <1>     repne scasb
   265 0000193A FC                  <1>     cld ;Search forwards again
   266 0000193B 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   267 0000193E 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   268 00001942 7503                <1>     jne .wcsp1
   269 00001944 48FFC7              <1>     inc rdi ;Go one char forwards
   270                              <1> .wcsp1:
   271                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   272 00001947 57                  <1>     push rdi
   273 00001948 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   274 0000194A 7503                <1>     jne .wcsp2
   275 0000194C 48FFC7              <1>     inc rdi
   276                              <1> .wcsp2:
   277 0000194F 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   278 00001952 488D3D77EBFFFF      <1>     lea rdi, dirSrchFCB
   279 00001959 B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   280 0000195E CD21                <1>     int 21h
   281 00001960 5F                  <1>     pop rdi
   282 00001961 31C0                <1>     xor eax, eax
   283 00001963 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   284                              <1> .wcDefaultSearch:
   285 00001965 0FB605E1EAFFFF      <1>     movzx eax, byte [dirDrv] 
   286 0000196C E8030F0000          <1>     call volume.dirEP
   287 00001971 488D153CF1FFFF      <1>     lea rdx, dirMain    ;Print message intro
   288 00001978 B409                <1>     mov ah, 09h
   289 0000197A CD21                <1>     int 21h
   290 0000197C C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   291 0000197F 488D15C8EAFFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   292 00001986 B409                <1>     mov ah, 09h
   293 00001988 CD21                <1>     int 21h
   294 0000198A C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   295 0000198D 488D1511EEFFFF      <1>     lea rdx, crlf2
   296 00001994 B409                <1>     mov ah, 09h
   297 00001996 CD21                <1>     int 21h
   298                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   299                              <1> ;rdi points to the terminating null
   300 00001998 8A058DE6FFFF        <1>     mov al, byte [pathSep]
   301 0000199E 3847FF              <1>     cmp byte [rdi - 1], al
   302 000019A1 7403                <1>     je .root
   303 000019A3 48FFC7              <1>     inc rdi
   304                              <1> .root:
   305 000019A6 48FFCF              <1>     dec rdi ;Point back to the pathsep
   306 000019A9 AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   307 000019AA 488D3520EBFFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   308 000019B1 E80F180000          <1>     call FCBToAsciiz    ;Terminates for free
   309 000019B6 E801000000          <1>     call .searchForFile
   310                              <1>     return
    13                              <2> %%_ret:
    14 000019BB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   311                              <1> 
   312                              <1> .searchForFile:
   313 000019BC E889190000          <1>     call setDTA
   314 000019C1 B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   315 000019C6 488D1581EAFFFF      <1>     lea rdx, dirSrchDir
   316 000019CD B8004E0000          <1>     mov eax, 4E00h ;Find first
   317 000019D2 CD21                <1>     int 21h
   318 000019D4 720B                <1>     jc .dirNoMoreFiles
   319                              <1> .findNext:
   320 000019D6 E878000000          <1>     call .dirPrintFileData  ;Print the file information
   321 000019DB B44F                <1>     mov ah, 4Fh
   322 000019DD CD21                <1>     int 21h
   323 000019DF 73F5                <1>     jnc .findNext 
   324                              <1> .dirNoMoreFiles:
   325 000019E1 F60562EAFFFF01      <1>     test byte [dirFlags], dirWideType
   326 000019E8 740B                <1>     jz .dirNoEndNewLine
   327 000019EA 488D15B1EDFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   328 000019F1 B409                <1>     mov ah, 09h
   329 000019F3 CD21                <1>     int 21h
   330                              <1> .dirNoEndNewLine:
   331                              <1>     ;Now we print the number of files and the number of bytes on the disk
   332 000019F5 488D1589F3FFFF      <1>     lea rdx, fourSpc
   333 000019FC B409                <1>     mov ah, 09h
   334 000019FE CD21                <1>     int 21h
   335 00001A00 B409                <1>     mov ah, 09h ;Print four Spaces twice
   336 00001A02 CD21                <1>     int 21h
   337 00001A04 0FB60541EAFFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   338 00001A0B E887180000          <1>     call printDecimalWord
   339 00001A10 488D15D6EEFFFF      <1>     lea rdx, dirOk
   340 00001A17 B409                <1>     mov ah, 09h
   341 00001A19 CD21                <1>     int 21h
   342 00001A1B 488D1568F3FFFF      <1>     lea rdx, threeSpc
   343 00001A22 B409                <1>     mov ah, 09h
   344 00001A24 CD21                <1>     int 21h
   345 00001A26 B800360000          <1>     mov eax, 3600h ;Get disk info
   346 00001A2B 8A151CEAFFFF        <1>     mov dl, byte [dirDrv]
   347 00001A31 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   348 00001A33 CD21                <1>     int 21h ;Get disk free space info
   349 00001A35 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   350 00001A38 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   351 00001A3B 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   352 00001A3D F7E1                <1>     mul ecx ;Get bytes per cluster
   353 00001A3F 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   354                              <1>     ;rax now has the number of free bytes on the disk
   355 00001A42 E850180000          <1>     call printDecimalWord
   356 00001A47 488D15A9EEFFFF      <1>     lea rdx, bytesOk
   357 00001A4E B409                <1>     mov ah, 09h
   358 00001A50 CD21                <1>     int 21h
   359                              <1>     return
    13                              <2> %%_ret:
    14 00001A52 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> 
   361                              <1> .dirPrintFileData:
   362                              <1> ;Use cmdFcb to build the file name with space
   363                              <1> ;Start by print the name (same for both cases)
   364                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   365 00001A53 F6058BE6FFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   366                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001A5A 75(52)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   367 00001A5C 488D358BE6FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   368 00001A63 488D3D56E6FFFF      <1>     lea rdi, cmdFcb
   369 00001A6A E8E8160000          <1>     call asciiFilenameToFCB
   370 00001A6F 488D154AE6FFFF      <1>     lea rdx, cmdFcb
   371 00001A76 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   372 00001A7B BB01000000          <1>     mov ebx, 1  ;STDOUT
   373 00001A80 B440                <1>     mov ah, 40h ;Write handle
   374 00001A82 CD21                <1>     int 21h
   375 00001A84 52                  <1>     push rdx
   376 00001A85 B220                <1>     mov dl, " "
   377 00001A87 B402                <1>     mov ah, 02h ;Print char
   378 00001A89 CD21                <1>     int 21h
   379 00001A8B 5A                  <1>     pop rdx
   380 00001A8C 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   381 00001A93 B903000000          <1>     mov ecx, 3  ;Print three chars
   382 00001A98 BB01000000          <1>     mov ebx, 1  ;STDOUT
   383 00001A9D B440                <1>     mov ah, 40h ;Write handle
   384 00001A9F CD21                <1>     int 21h
   385 00001AA1 F605A2E9FFFF01      <1>     test byte [dirFlags], dirWideType
   386 00001AA8 0F85A8000000        <1>     jnz .widePrint
   387                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   388                              <1>     ;Now check if a DIR
   389 00001AAE F60530E6FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   390 00001AB5 7418                <1>     jz .dirPrintNotDir
   391 00001AB7 488D1547EEFFFF      <1>     lea rdx, dirLbl
   392 00001ABE B409                <1>     mov ah, 09h
   393 00001AC0 CD21                <1>     int 21h
   394 00001AC2 488D15C1F2FFFF      <1>     lea rdx, threeSpc
   395 00001AC9 B409                <1>     mov ah, 09h
   396 00001ACB CD21                <1>     int 21h
   397 00001ACD EB4F                <1>     jmp short .dirPrintFileDT
   398                              <1> .dirPrintNotDir:
   399                              <1> ;Here we print the file size
   400 00001ACF B220                <1>     mov dl, " "
   401 00001AD1 B402                <1>     mov ah, 02h
   402 00001AD3 CD21                <1>     int 21h
   403 00001AD5 8B050FE6FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   404 00001ADB E828180000          <1>     call getDecimalWord
   405 00001AE0 4889CB              <1>     mov rbx, rcx
   406 00001AE3 51                  <1>     push rcx
   407 00001AE4 480FCB              <1>     bswap rbx
   408 00001AE7 B908000000          <1>     mov ecx, 8
   409                              <1> .dirPrintFileSizePrep:
   410 00001AEC 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   411 00001AEE 7514                <1>     jne .dirPrintFileSize
   412 00001AF0 B402                <1>     mov ah, 02h
   413 00001AF2 B220                <1>     mov dl, " "
   414 00001AF4 CD21                <1>     int 21h
   415 00001AF6 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   416 00001AFA FFC9                <1>     dec ecx
   417 00001AFC 81F901000000        <1>     cmp ecx, 1
   418 00001B02 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   419                              <1> .dirPrintFileSize:
   420 00001B04 5B                  <1>     pop rbx
   421                              <1> .dirPrintFileSizeLoop:
   422 00001B05 88DA                <1>     mov dl, bl
   423 00001B07 B402                <1>     mov ah, 02h
   424 00001B09 CD21                <1>     int 21h
   425 00001B0B 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   426 00001B0F FFC9                <1>     dec ecx
   427 00001B11 75F2                <1>     jnz .dirPrintFileSizeLoop
   428 00001B13 488D1574F2FFFF      <1>     lea rdx, twoSpc
   429 00001B1A B409                <1>     mov ah, 09h
   430 00001B1C CD21                <1>     int 21h
   431                              <1> .dirPrintFileDT:
   432 00001B1E B220                <1>     mov dl, " "
   433 00001B20 B402                <1>     mov ah, 02h
   434 00001B22 CD21                <1>     int 21h
   435 00001B24 0FB705BDE5FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   436 00001B2B 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   437 00001B2D E898120000          <1>     call printDate
   438 00001B32 488D1555F2FFFF      <1>     lea rdx, twoSpc
   439 00001B39 B409                <1>     mov ah, 09h
   440 00001B3B CD21                <1>     int 21h
   441 00001B3D 0FB705A2E5FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   442 00001B44 E8A3130000          <1>     call printTime
   443 00001B49 488D1552ECFFFF      <1>     lea rdx, crlf
   444 00001B50 B409                <1>     mov ah, 09h
   445 00001B52 CD21                <1>     int 21h
   446 00001B54 EB0B                <1>     jmp short .dirPrintNameExit
   447                              <1> .widePrint:
   448                              <1> ;If /W, print name space ext space space space space
   449 00001B56 488D1528F2FFFF      <1>     lea rdx, fourSpc
   450 00001B5D B409                <1>     mov ah, 09h ;Print string
   451 00001B5F CD21                <1>     int 21h
   452                              <1> .dirPrintNameExit:
   453 00001B61 FE05E5E8FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   454 00001B67 FE05DEE8FFFF        <1>     inc byte [dirLineCtr]
   455 00001B6D 803DD7E8FFFF17      <1>     cmp byte [dirLineCtr], 23
   456                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001B74 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001B76 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   457 00001B77 488D15AEEDFFFF      <1>     lea rdx, pauseMes
   458 00001B7E B409                <1>     mov ah, 09h
   459 00001B80 CD21                <1>     int 21h
   460 00001B82 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   461 00001B84 CD21                <1>     int 21h
   462 00001B86 C605BEE8FFFF00      <1>     mov byte [dirLineCtr], 0
   463 00001B8D 488D150EECFFFF      <1>     lea rdx, crlf   ;Force new line
   464 00001B94 B409                <1>     mov ah, 09h
   465 00001B96 CD21                <1>     int 21h
   466                              <1>     return
    13                              <2> %%_ret:
    14 00001B98 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   467                              <1> 
   468                              <1> chdir:
   469 00001B99 F6051AE5FFFFFF      <1>     test byte [arg1Flg], -1
   470 00001BA0 754D                <1>     jnz .changeDir
   471                              <1>     ;Print CWD
   472                              <1> .printCWD:
   473 00001BA2 E827140000          <1>     call putCWDInPrompt ;Exactly the same procedure
   474 00001BA7 E80F120000          <1>     call printCRLF
   475                              <1>     return
    13                              <2> %%_ret:
    14 00001BAC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   476                              <1> .printDiskCWD:
   477                              <1> ;Print CWD for a specified drive
   478 00001BAD 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   479 00001BB1 88D0                <1>     mov al, dl
   480 00001BB3 0440                <1>     add al, "@" ;Get the UC letter
   481 00001BB5 B43A                <1>     mov ah, ":"
   482 00001BB7 488D3D0AE8FFFF      <1>     lea rdi, searchSpec
   483 00001BBE 66AB                <1>     stosw   ;Store X:, rdi+=2
   484 00001BC0 8A0565E4FFFF        <1>     mov al, byte [pathSep]
   485 00001BC6 AA                  <1>     stosb   ;Store pathSep, inc rdi
   486 00001BC7 B447                <1>     mov ah, 47h ;Get Current Working Directory
   487 00001BC9 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   488 00001BCC CD21                <1>     int 21h
   489 00001BCE E8DF140000          <1>     call strlen
   490 00001BD3 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   491 00001BD9 B440                <1>     mov ah, 40h ;Write to handle
   492 00001BDB BB01000000          <1>     mov ebx, 1  ;STDOUT
   493 00001BE0 488D15E1E7FFFF      <1>     lea rdx, searchSpec
   494 00001BE7 CD21                <1>     int 21h
   495 00001BE9 E8CD110000          <1>     call printCRLF
   496                              <1>     return
    13                              <2> %%_ret:
    14 00001BEE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   497                              <1> .changeDir:
   498 00001BEF 8A05C7E4FFFF        <1>     mov al, byte [arg1FCBret]
   499 00001BF5 3CFF                <1>     cmp al, -1 
   500 00001BF7 0F8486FAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   501 00001BFD E85C160000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   502 00001C02 488D15BFE7FFFF      <1>     lea rdx, searchSpec
   503 00001C09 B43B                <1>     mov ah, 3Bh ;CHDIR
   504 00001C0B CD21                <1>     int 21h
   505 00001C0D 0F829DFAFFFF        <1>     jc badDirError
   506                              <1>     return
    13                              <2> %%_ret:
    14 00001C13 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   507                              <1> 
   508                              <1> mkdir:
   509 00001C14 F6059FE4FFFFFF      <1>     test byte [arg1Flg], -1
   510 00001C1B 0F846BFAFFFF        <1>     jz badArgError
   511 00001C21 F60595E4FFFFFF      <1>     test byte [arg2Flg], -1
   512 00001C28 0F855EFAFFFF        <1>     jnz badArgError
   513                              <1>     ;We have exactly one argument
   514 00001C2E 8A0588E4FFFF        <1>     mov al, byte [arg1FCBret]
   515 00001C34 3CFF                <1>     cmp al, -1 
   516 00001C36 0F8447FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   517 00001C3C E81D160000          <1>     call buildCommandPath
   518 00001C41 488D1580E7FFFF      <1>     lea rdx, searchSpec
   519 00001C48 B800390000          <1>     mov eax, 3900h  ;MKDIR
   520 00001C4D CD21                <1>     int 21h
   521                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001C4F 73(13)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   522                              <1> .badMake:   ;Else, bad make
   523 00001C51 488D1508EEFFFF      <1>     lea rdx, badMD
   524 00001C58 B800090000          <1>     mov eax, 0900h
   525 00001C5D CD21                <1>     int 21h
   526                              <1>     return
    13                              <2> %%_ret:
    14 00001C5F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   527                              <1> 
   528                              <1> rmdir:
   529 00001C60 F60553E4FFFFFF      <1>     test byte [arg1Flg], -1
   530 00001C67 0F841FFAFFFF        <1>     jz badArgError
   531 00001C6D F60549E4FFFFFF      <1>     test byte [arg2Flg], -1
   532 00001C74 0F8512FAFFFF        <1>     jnz badArgError
   533                              <1>     ;We have exactly one argument
   534 00001C7A 8A053CE4FFFF        <1>     mov al, byte [arg1FCBret]
   535 00001C80 3CFF                <1>     cmp al, -1 
   536 00001C82 0F84FBF9FFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   537 00001C88 E8D1150000          <1>     call buildCommandPath
   538 00001C8D 488D1534E7FFFF      <1>     lea rdx, searchSpec
   539 00001C94 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   540 00001C99 CD21                <1>     int 21h
   541                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001C9B 73(5F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   542                              <1> .badRemove:   ;Else, bad make
   543 00001C9D 488D15D9EDFFFF      <1>     lea rdx, badRD
   544 00001CA4 B800090000          <1>     mov eax, 0900h
   545 00001CA9 CD21                <1>     int 21h
   546                              <1>     return
    13                              <2> %%_ret:
    14 00001CAB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   547                              <1> 
   548                              <1> copy:
   549 00001CAC F60507E4FFFFFF      <1>     test byte [arg1Flg], -1
   550 00001CB3 0F84D3F9FFFF        <1>     jz badArgError
   551 00001CB9 F605FDE3FFFFFF      <1>     test byte [arg2Flg], -1
   552 00001CC0 0F84C6F9FFFF        <1>     jz badArgError
   553 00001CC6 0FB605EEE3FFFF      <1>     movzx eax, byte [arg1Off]
   554 00001CCD 4C8B053BE3FFFF      <1>     mov r8, [pspPtr]
   555 00001CD4 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   556 00001CDB 4889F3              <1>     mov rbx, rsi    ;Save the ptr to the start of the string in rbx
   557 00001CDE 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   558 00001CE1 488D3D28E8FFFF      <1>     lea rdi, srcSpec
   559 00001CE8 E82E150000          <1>     call cpDelimPathToBufz    
   560 00001CED 0FB605CAE3FFFF      <1>     movzx eax, byte [arg2Off]
   561 00001CF4 4889DE              <1>     mov rsi, rbx    ;Get back the start of the ptr
   562 00001CF7 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   563 00001CFA 488D3D91E8FFFF      <1>     lea rdi, destSpec
   564 00001D01 E815150000          <1>     call cpDelimPathToBufz   
   565                              <1> ;Before we open, we check if the two filenames are equal
   566                              <1> ; If so, crap out.
   567 00001D06 488D3503E8FFFF      <1>     lea rsi, srcSpec
   568 00001D0D 488D3D7EE8FFFF      <1>     lea rdi, destSpec
   569 00001D14 B81E120000          <1>     mov eax, 121Eh
   570 00001D19 CD2F                <1>     int 2Fh
   571 00001D1B 0F84D3000000        <1>     jz .sameFilename
   572                              <1>     ;Open source with read permission
   573                              <1>     ;Open destination with write permission
   574 00001D21 488D15E8E7FFFF      <1>     lea rdx, srcSpec
   575 00001D28 B8003D0000          <1>     mov eax, 3D00h  ;Read open
   576 00001D2D CD21                <1>     int 21h
   577 00001D2F 0F8245F9FFFF        <1>     jc badParamError
   578 00001D35 668905F3E8FFFF      <1>     mov word [sourceHdl], ax
   579                              <1> 
   580 00001D3C 0FB7D8              <1>     movzx ebx, ax   ;For bx
   581 00001D3F B800440000          <1>     mov eax, 4400h  ;Get device info in dx
   582 00001D44 CD21                <1>     int 21h
   583 00001D46 668915E6E8FFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
   584                              <1> 
   585 00001D4D 488D153EE8FFFF      <1>     lea rdx, destSpec
   586 00001D54 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   587 00001D59 31C9                <1>     xor ecx, ecx    ;No file attributes
   588 00001D5B CD21                <1>     int 21h
   589 00001D5D 0F82B8000000        <1>     jc .badExit
   590 00001D63 668905C7E8FFFF      <1>     mov word [destHdl], ax
   591 00001D6A 31F6                <1>     xor esi, esi
   592 00001D6C 488D15C2E8FFFF      <1>     lea rdx, copyBuffer
   593                              <1> .copyLoop:
   594 00001D73 B980000000          <1>     mov ecx, 128
   595 00001D78 0FB71DB0E8FFFF      <1>     movzx ebx, word [sourceHdl]
   596 00001D7F B43F                <1>     mov ah, 3Fh ;Read
   597 00001D81 CD21                <1>     int 21h
   598 00001D83 0F8292000000        <1>     jc .badExit
   599 00001D89 85C0                <1>     test eax, eax
   600 00001D8B 743A                <1>     jz .okExit
   601 00001D8D 01C6                <1>     add esi, eax
   602 00001D8F 89C1                <1>     mov ecx, eax
   603 00001D91 0FB71D99E8FFFF      <1>     movzx ebx, word [destHdl]
   604 00001D98 B440                <1>     mov ah, 40h ;Write
   605 00001D9A CD21                <1>     int 21h
   606 00001D9C 727D                <1>     jc .badExit
   607 00001D9E 3D80000000          <1>     cmp eax, 128    ;Did we read 128 chars?
   608 00001DA3 74CE                <1>     je .copyLoop
   609                              <1>     ;If not char dev, exit
   610 00001DA5 66F70585E8FFFF8000  <1>     test word [srcHdlInfo], 80h ;Char dev bit set?
   611 00001DAE 7417                <1>     jz .okExit
   612                              <1>     ;Is handle in cooked or binary mode?
   613 00001DB0 66F7057AE8FFFF2000  <1>     test word [srcHdlInfo], 20h
   614 00001DB9 750C                <1>     jnz .okExit
   615                              <1>     ;Here the char dev must be in cooked mode. Check if the last char was ^Z
   616 00001DBB 09C0                <1>     or eax, eax ;Clear upper bits in eax
   617 00001DBD 488D7C02FF          <1>     lea rdi, qword [rdx + rax - 1]  ;Point to the last char in the buffer
   618 00001DC2 803F1A              <1>     cmp byte [rdi], EOF ;Was this EOF?
   619 00001DC5 75AC                <1>     jne .copyLoop   ;Jump if not
   620                              <1> .okExit:
   621 00001DC7 E832000000          <1>     call .leaveCopyClose
   622 00001DCC 488D15CFE9FFFF      <1>     lea rdx, crlf
   623 00001DD3 B409                <1>     mov ah, 09h
   624 00001DD5 CD21                <1>     int 21h
   625 00001DD7 488D15A7EFFFFF      <1>     lea rdx, fourSpc
   626 00001DDE B409                <1>     mov ah, 09h
   627 00001DE0 CD21                <1>     int 21h
   628 00001DE2 B402                <1>     mov ah, 02h
   629 00001DE4 B231                <1>     mov dl, "1" ;1 File(s) copied
   630 00001DE6 CD21                <1>     int 21h
   631 00001DE8 488D15ECEAFFFF      <1>     lea rdx, copyOk
   632 00001DEF B409                <1>     mov ah, 09h
   633 00001DF1 CD21                <1>     int 21h
   634                              <1>     return
    13                              <2> %%_ret:
    14 00001DF3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   635                              <1> .sameFilename:
   636 00001DF4 E805000000          <1>     call .leaveCopyClose ;Close the handles
   637 00001DF9 E973F8FFFF          <1>     jmp noSelfCopyError
   638                              <1> .leaveCopyClose:
   639 00001DFE 668B1D2AE8FFFF      <1>     mov bx, word [sourceHdl]
   640 00001E05 B8003E0000          <1>     mov eax, 3E00h
   641 00001E0A CD21                <1>     int 21h
   642 00001E0C 668B1D1EE8FFFF      <1>     mov bx, word [destHdl]
   643 00001E13 B8003E0000          <1>     mov eax, 3E00h
   644 00001E18 CD21                <1>     int 21h
   645                              <1>     return
    13                              <2> %%_ret:
    14 00001E1A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   646                              <1> .badExit:
   647                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   648 00001E1B 668B1D0DE8FFFF      <1>     mov bx, word [sourceHdl]
   649 00001E22 6681FBFFFF          <1>     cmp bx, -1
   650 00001E27 7407                <1>     je .skipSource
   651 00001E29 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   652 00001E2E CD21                <1>     int 21h
   653                              <1> .skipSource:
   654 00001E30 668B1DFAE7FFFF      <1>     mov bx, word [destHdl]
   655 00001E37 6681FBFFFF          <1>     cmp bx, -1
   656 00001E3C 0F8438F8FFFF        <1>     je badParamError
   657 00001E42 B8003E0000          <1>     mov eax, 3E00h
   658 00001E47 CD21                <1>     int 21h
   659 00001E49 E92CF8FFFF          <1>     jmp badParamError
   660                              <1> 
   661                              <1> erase:
   662 00001E4E F60565E2FFFFFF      <1>     test byte [arg1Flg], -1
   663 00001E55 0F8431F8FFFF        <1>     jz badArgError
   664 00001E5B E8EA140000          <1>     call setDTA     ;Start by resetting the DTA
   665 00001E60 E8F9130000          <1>     call buildCommandPath   ;Get the relative path to the file
   666                              <1> .dirLp:
   667 00001E65 488D3D5CE5FFFF      <1>     lea rdi, searchSpec
   668 00001E6C E830130000          <1>     call findLastPathComponant
   669 00001E71 4889FE              <1>     mov rsi, rdi    ;Save this as the source
   670 00001E74 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
   671 00001E78 B03F                <1>     mov al, "?"
   672                              <1>     ;Store question marks in the name field
   673 00001E7A 57                  <1>     push rdi
   674 00001E7B 48FFC7              <1>     inc rdi ;Goto the first char
   675 00001E7E B90B000000          <1>     mov ecx, 11
   676 00001E83 F3AA                <1>     rep stosb
   677 00001E85 5F                  <1>     pop rdi
   678 00001E86 4889F2              <1>     mov rdx, rsi    ;Save the ptr
   679 00001E89 B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
   680 00001E8E CD21                <1>     int 21h
   681 00001E90 3C01                <1>     cmp al, 1
   682 00001E92 0F859C000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
   683                              <1>     ;Else, we now copy back the search pattern over the last componant!
   684                              <1>     ;No dirs to handle in here
   685 00001E98 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
   686 00001E9C 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
   687 00001E9F E821130000          <1>     call FCBToAsciiz    ;Null terminates for free
   688                              <1>     ;Count the number of ?'s, if 11, we print the message
   689 00001EA4 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
   690 00001EA8 31C9                <1>     xor ecx, ecx
   691                              <1> .wcScan:
   692 00001EAA AC                  <1>     lodsb
   693 00001EAB 3C3F                <1>     cmp al, "?"
   694 00001EAD 752F                <1>     jne .endCount
   695 00001EAF FFC1                <1>     inc ecx
   696 00001EB1 81F90B000000        <1>     cmp ecx, 11
   697 00001EB7 75F1                <1>     jne .wcScan
   698                              <1> .ynmsg:
   699 00001EB9 488D1540EBFFFF      <1>     lea rdx, ynMes
   700 00001EC0 E8FD0E0000          <1>     call printString
   701 00001EC5 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   702 00001EC7 CD21                <1>     int 21h ;Get char in al
   703 00001EC9 E8EE110000          <1>     call ucChar ;Uppercase the char
   704 00001ECE 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
   705 00001ED0 7407                <1>     je .endCount1
   706 00001ED2 3C4E                <1>     cmp al, "N"
   707                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001ED4 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001ED6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   708 00001ED7 EBE0                <1>     jmp short .ynmsg    ;Else, tell me what you want!!!
   709                              <1> .endCount1:
   710 00001ED9 E8DD0E0000          <1>     call printCRLF
   711                              <1> .endCount:
   712                              <1>     ;Now we copy our search template pathstring to delPath
   713 00001EDE 488D3D2BE6FFFF      <1>     lea rdi, delPath
   714 00001EE5 488D35DCE4FFFF      <1>     lea rsi, searchSpec ;Source the chars from here
   715 00001EEC E8B7110000          <1>     call strcpy2         ;Copy the string over to delPath
   716                              <1> .findFile:
   717                              <1>     ;Now we find first/find next our way through the files
   718 00001EF1 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
   719 00001EF4 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
   720 00001EF6 B8004E0000          <1>     mov eax, 4E00h  ;Find first
   721 00001EFB CD21                <1>     int 21h
   722 00001EFD 0F82A4F7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   723                              <1>     ;Now the file was found, we copy the name over, delete and keep going
   724 00001F03 E899120000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
   725 00001F08 488D35DFE1FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   726                              <1> .delNextFile:
   727                              <1> ;rsi and rdi dont move here
   728 00001F0F E894110000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
   729 00001F14 488D15F5E5FFFF      <1>     lea rdx, delPath
   730 00001F1B B800410000          <1>     mov eax, 4100h  ;Delete File 
   731 00001F20 CD21                <1>     int 21h         ;If this fails to delete it, fail silently
   732 00001F22 488D159FE4FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
   733 00001F29 B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
   734 00001F2E CD21                <1>     int 21h
   735 00001F30 73DD                <1>     jnc .delNextFile    
   736 00001F32 F8                  <1>     clc ;Clear carry to indicate success
   737                              <1>     return
    13                              <2> %%_ret:
    14 00001F33 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   738                              <1> .noWildcard:
   739                              <1>     ;Here we just check that the file was not a directory. If it was, we add
   740                              <1>     ; a \*.*<NUL> over the null terminator
   741 00001F34 488D158DE4FFFF      <1>     lea rdx, searchSpec
   742 00001F3B B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
   743 00001F40 B8004E0000          <1>     mov eax, 4E00h  ;Find first
   744 00001F45 CD21                <1>     int 21h
   745 00001F47 0F825AF7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   746 00001F4D F60591E1FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   747 00001F54 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
   748                              <1>     ;Else, we are dealing with a dir
   749 00001F56 4889D7              <1>     mov rdi, rdx
   750 00001F59 31C9                <1>     xor ecx, ecx
   751 00001F5B FFC9                <1>     dec ecx
   752 00001F5D F2AE                <1>     repne scasb ;Go to the end of the line!
   753 00001F5F 48FFCF              <1>     dec rdi
   754 00001F62 0FB605C2E0FFFF      <1>     movzx eax, byte [pathSep]
   755 00001F69 AA                  <1>     stosb
   756 00001F6A B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
   757 00001F6F AB                  <1>     stosd
   758 00001F70 E9F0FEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
   759                              <1> .delMain:   ;Call with rdx -> buffer!
   760 00001F75 B800410000          <1>     mov eax, 4100h  ;Delete File 
   761 00001F7A CD21                <1>     int 21h
   762                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001F7C 73(33)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   763 00001F7E 3C05                <1>     cmp al, errAccDen
   764 00001F80 0F84E2F6FFFF        <1>     je badAccError ;If the file is RO, fail!
   765 00001F86 E90AF7FFFF          <1>     jmp badFileError
   766                              <1>     return
    13                              <2> %%_ret:
    14 00001F8B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   767                              <1> date:
   768 00001F8C 488D15F0E9FFFF      <1>     lea rdx, curDate
   769 00001F93 B409                <1>     mov ah, 09h
   770 00001F95 CD21                <1>     int 21h
   771 00001F97 B42A                <1>     mov ah, 2Ah ;DOS get date
   772 00001F99 CD21                <1>     int 21h
   773                              <1> 	;AL = day of the week (0=Sunday)
   774                              <1> 	;CX = year (1980-2099)
   775                              <1> 	;DH = month (1-12)
   776                              <1> 	;DL = day (1-31)
   777 00001F9B 66890D6AE5FFFF      <1>     mov word [td1], cx
   778 00001FA2 881566E5FFFF        <1>     mov byte [td3], dl
   779 00001FA8 883561E5FFFF        <1>     mov byte [td4], dh
   780 00001FAE 0FB6C0              <1>     movzx eax, al
   781 00001FB1 89C3                <1>     mov ebx, eax
   782 00001FB3 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   783 00001FB5 01D8                <1>     add eax, ebx ;Make it 3 times 
   784 00001FB7 488D15A1E9FFFF      <1>     lea rdx, dayName
   785 00001FBE 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   786 00001FC2 B903000000          <1>     mov ecx, 3  ;Print three chars
   787 00001FC7 BB01000000          <1>     mov ebx, 1  ;STDOUT
   788 00001FCC B440                <1>     mov ah, 40h ;Write to handle
   789 00001FCE CD21                <1>     int 21h
   790 00001FD0 B220                <1>     mov dl, " "
   791 00001FD2 B402                <1>     mov ah, 02h
   792 00001FD4 CD21                <1>     int 21h
   793                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   794                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   795                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   796 00001FD6 0FB7052FE5FFFF      <1>     movzx eax, word [td1]   ;Get this word
   797 00001FDD C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   798 00001FE0 0FB61D28E5FFFF      <1>     movzx ebx, byte [td4]
   799 00001FE7 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   800 00001FEA 09D8                <1>     or eax, ebx ;Add this date to eax
   801 00001FEC 0FB61D1BE5FFFF      <1>     movzx ebx, byte [td3]
   802 00001FF3 09D8                <1>     or eax, ebx
   803 00001FF5 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   804 00001FFA E8CB0D0000          <1>     call printDate
   805                              <1> 
   806 00001FFF 488D158EE9FFFF      <1>     lea rdx, newDate
   807 00002006 B409                <1>     mov ah, 09h
   808 00002008 CD21                <1>     int 21h
   809 0000200A 488D15A2E9FFFF      <1>     lea rdx, ukDate
   810 00002011 488D058EE9FFFF      <1>     lea rax, usDate
   811 00002018 488D1DA1E9FFFF      <1>     lea rbx, jpDate
   812 0000201F 803D10E0FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   813 00002026 480F47D3            <1>     cmova rdx, rbx
   814 0000202A 480F42D0            <1>     cmovb rdx, rax
   815 0000202E B409                <1>     mov ah, 09h
   816 00002030 CD21                <1>     int 21h
   817                              <1> 
   818 00002032 488D15E2E0FFFF      <1>     lea rdx, inBuffer
   819 00002039 C6027E              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
   820 0000203C B40A                <1>     mov ah, 0Ah
   821 0000203E CD21                <1>     int 21h
   822 00002040 52                  <1>     push rdx
   823 00002041 488D155AE7FFFF      <1>     lea rdx, crlf
   824 00002048 B409                <1>     mov ah, 09h
   825 0000204A CD21                <1>     int 21h
   826 0000204C 5A                  <1>     pop rdx
   827 0000204D 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   828                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002051 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002053 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   829                              <1>     return
    13                              <2> %%_ret:
    14 00002054 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   830                              <1> 
   831                              <1> time:
   832 00002055 488D1580E9FFFF      <1>     lea rdx, curTime
   833 0000205C B409                <1>     mov ah, 09h
   834 0000205E CD21                <1>     int 21h
   835 00002060 B42C                <1>     mov ah, 2Ch ;DOS get time
   836 00002062 CD21                <1>     int 21h
   837                              <1>     ;CH = hour (0-23)
   838                              <1> 	;CL = minutes (0-59)
   839                              <1> 	;DH = seconds (0-59)
   840                              <1> 	;DL = hundredths (0-99)
   841 00002064 880DA2E4FFFF        <1>     mov byte [td1], cl
   842 0000206A 882D9DE4FFFF        <1>     mov byte [td2], ch
   843 00002070 881598E4FFFF        <1>     mov byte [td3], dl
   844 00002076 883593E4FFFF        <1>     mov byte [td4], dh
   845 0000207C 0FB6C5              <1>     movzx eax, ch
   846 0000207F E8DA0E0000          <1>     call printTime.printHours
   847                              <1> 
   848 00002084 8A15B9DFFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   849 0000208A B402                <1>     mov ah, 02h
   850 0000208C CD21                <1>     int 21h
   851                              <1> 
   852 0000208E 0FB60577E4FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   853 00002095 E8B40E0000          <1>     call printTime.printMinutesAlt
   854                              <1> 
   855 0000209A 8A15A3DFFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   856 000020A0 B402                <1>     mov ah, 02h
   857 000020A2 CD21                <1>     int 21h
   858                              <1> 
   859 000020A4 0FB60564E4FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   860 000020AB E89E0E0000          <1>     call printTime.printMinutesAlt
   861                              <1> 
   862 000020B0 B22E                <1>     mov dl, "."
   863 000020B2 B402                <1>     mov ah, 02h
   864 000020B4 CD21                <1>     int 21h
   865                              <1> 
   866 000020B6 0FB60551E4FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   867 000020BD E88C0E0000          <1>     call printTime.printMinutesAlt
   868                              <1> 
   869 000020C2 488D1524E9FFFF      <1>     lea rdx, newTime
   870 000020C9 B409                <1>     mov ah, 09h
   871 000020CB CD21                <1>     int 21h
   872                              <1> 
   873 000020CD 488D1547E0FFFF      <1>     lea rdx, inBuffer
   874 000020D4 C6027E              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
   875 000020D7 B40A                <1>     mov ah, 0Ah
   876 000020D9 CD21                <1>     int 21h
   877 000020DB 52                  <1>     push rdx
   878 000020DC 488D15BFE6FFFF      <1>     lea rdx, crlf
   879 000020E3 B409                <1>     mov ah, 09h
   880 000020E5 CD21                <1>     int 21h
   881 000020E7 5A                  <1>     pop rdx
   882 000020E8 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   883                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000020EC 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000020EE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   884                              <1>     return
    13                              <2> %%_ret:
    14 000020EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   885                              <1> ctty:
   886 000020F0 F605C3DFFFFFFF      <1>     test byte [arg1Flg], -1
   887 000020F7 0F848FF5FFFF        <1>     jz badArgError
   888 000020FD F605B9DFFFFFFF      <1>     test byte [arg2Flg], -1
   889 00002104 0F8582F5FFFF        <1>     jnz badArgError
   890 0000210A 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   891 00002111 0FB605A3DFFFFF      <1>     movzx eax, byte [arg1Off]
   892 00002118 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   893 0000211B 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   894 0000211F 750F                <1>     jne .noDrive
   895 00002121 0FB60594DFFFFF      <1>     movzx eax, byte [arg1FCBret]
   896 00002128 3CFF                <1>     cmp al, -1
   897 0000212A 0F8453F5FFFF        <1>     je badDriveError
   898                              <1> .noDrive:
   899                              <1>     ;Now we open the provided file
   900 00002130 E841110000          <1>     call copyArgumentToSearchSpec
   901 00002135 488D158CE2FFFF      <1>     lea rdx, searchSpec
   902 0000213C B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   903 00002141 CD21                <1>     int 21h
   904 00002143 0F824CF5FFFF        <1>     jc badFileError
   905 00002149 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   906 0000214C B800440000          <1>     mov eax, 4400h  ;Get device word
   907 00002151 CD21                <1>     int 21h
   908 00002153 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   909 00002156 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   910                              <1>     ;Now we set this handle to be STDIO
   911 00002158 80CA03              <1>     or dl, 3    ;Set STDIO bits
   912 0000215B 30F6                <1>     xor dh, dh
   913 0000215D B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   914 00002162 CD21                <1>     int 21h
   915                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   916 00002164 31C9                <1>     xor ecx, ecx    ;STDIN
   917 00002166 B446                <1>     mov ah, 46h
   918 00002168 CD21                <1>     int 21h
   919 0000216A FFC1                <1>     inc ecx         ;STDOUT
   920 0000216C B446                <1>     mov ah, 46h
   921 0000216E CD21                <1>     int 21h
   922 00002170 FFC1                <1>     inc ecx         ;STDERR
   923 00002172 B446                <1>     mov ah, 46h
   924 00002174 CD21                <1>     int 21h
   925 00002176 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   926 00002178 CD21                <1>     int 21h
   927                              <1>     return
    13                              <2> %%_ret:
    14 0000217A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   928                              <1> .badCharDev:
   929 0000217B 488D159BE9FFFF      <1>     lea rdx, badDev
   930 00002182 B409                <1>     mov ah, 09h
   931 00002184 CD21                <1>     int 21h
   932 00002186 B43E                <1>     mov ah, 3Eh ;Close opened handle
   933 00002188 CD21                <1>     int 21h
   934                              <1>     return
    13                              <2> %%_ret:
    14 0000218A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   935                              <1> 
   936                              <1> cls:  
   937 0000218B B800440000          <1>     mov eax, 4400h  ;Get device info
   938 00002190 BB01000000          <1>     mov ebx, 1      ;for handle 1
   939 00002195 CD21                <1>     int 21h         ;in dx
   940 00002197 F7C280000000        <1>     test edx, devCharDev
   941 0000219D 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   942 0000219F F7C210000000        <1>     test edx, charDevFastOut
   943 000021A5 743E                <1>     jz .doAnsi
   944                              <1>     ;Test if Int 29h uses Int 30h
   945                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   946                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
   947 000021A7 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
   948 000021AC CD21                <1>     int 21h
   949                              <1> .biosCheck:
   950 000021AE 66813BCD30          <1>     cmp word [rbx], 30CDh
   951 000021B3 740C                <1>     je .biosConfirmed
   952 000021B5 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   953 000021BA 7429                <1>     je .doAnsi
   954 000021BC 48FFC3              <1>     inc rbx
   955 000021BF EBED                <1>     jmp short .biosCheck
   956                              <1> .biosConfirmed:
   957                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   958 000021C1 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   959 000021C3 31DB                <1>     xor ebx, ebx
   960 000021C5 CD30                <1>     int 30h
   961 000021C7 B40F                <1>     mov ah, 0Fh ;Get screen mode
   962 000021C9 CD30                <1>     int 30h
   963 000021CB 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   964 000021CE FECA                <1>     dec dl
   965 000021D0 B619                <1>     mov dh, 25  ;Number of rows is standard
   966 000021D2 31C0                <1>     xor eax, eax
   967 000021D4 89C1                <1>     mov ecx, eax
   968 000021D6 B707                <1>     mov bh, 7   ;Screen attributes
   969 000021D8 B406                <1>     mov ah, 6   ;Scroll
   970 000021DA CD30                <1>     int 30h
   971 000021DC 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   972 000021DE B700                <1>     mov bh, 0   ;Page 0
   973 000021E0 B402                <1>     mov ah, 2
   974 000021E2 CD30                <1>     int 30h
   975                              <1>     return
    13                              <2> %%_ret:
    14 000021E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   976                              <1> .doAnsi:
   977                              <1> ;4 chars in the ansi routine
   978                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   979                              <1> ; understand ANSI codes
   980 000021E5 488D3595EBFFFF      <1>     lea rsi, ansiCls
   981 000021EC B904000000          <1>     mov ecx, 4
   982 000021F1 B406                <1>     mov ah, 06h ;Raw char output
   983                              <1> .ansiLp:
   984 000021F3 AC                  <1>     lodsb   ;Get the char in 
   985 000021F4 88C2                <1>     mov dl, al
   986 000021F6 CD21                <1>     int 21h
   987 000021F8 FFC9                <1>     dec ecx
   988 000021FA 75F7                <1>     jnz .ansiLp
   989                              <1>     return
    13                              <2> %%_ret:
    14 000021FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   990                              <1> 
   991                              <1> break:
   992 000021FD F605B6DEFFFFFF      <1>     test byte [arg1Flg], -1
   993 00002204 752D                <1>     jnz .argumentProvided
   994                              <1>     ;Here we just get the status of break
   995 00002206 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   996 0000220B CD21                <1>     int 21h
   997 0000220D 88D3                <1>     mov bl, dl
   998 0000220F 488D15A9E9FFFF      <1>     lea rdx, breakIs
   999 00002216 B409                <1>     mov ah, 09h
  1000 00002218 CD21                <1>     int 21h
  1001 0000221A 488D1599E9FFFF      <1>     lea rdx, onMes
  1002 00002221 488D0D8CE9FFFF      <1>     lea rcx, offMes
  1003 00002228 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1004 0000222A 480F44D1            <1>     cmovz rdx, rcx
  1005 0000222E B409                <1>     mov ah, 09h
  1006 00002230 CD21                <1>     int 21h
  1007                              <1>     return
    13                              <2> %%_ret:
    14 00002232 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1008                              <1> .argumentProvided:
  1009 00002233 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1010 00002237 AD                  <1>     lodsd   ;Read the word
  1011 00002238 89C3                <1>     mov ebx, eax
  1012 0000223A 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1013 0000223F C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1014 00002242 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1015 00002247 7416                <1>     je .maybeOn
  1016 00002249 663D4F46            <1>     cmp ax, "OF"
  1017 0000224D 7523                <1>     jne .badOnOff
  1018 0000224F 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1019 00002254 6681FB4620          <1>     cmp bx, "F "
  1020 00002259 7517                <1>     jne .badOnOff
  1021                              <1>     ;Set off
  1022 0000225B 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1023 0000225D EB0B                <1>     jmp short .setBreak
  1024                              <1> .maybeOn:
  1025 0000225F 663D4F4E            <1>     cmp ax, "ON"
  1026 00002263 750D                <1>     jne .badOnOff
  1027                              <1>     ;Set on
  1028 00002265 BA01000000          <1>     mov edx, 1
  1029                              <1> .setBreak:
  1030 0000226A B801330000          <1>     mov eax, 3301h  ;Set break
  1031 0000226F CD21                <1>     int 21h
  1032                              <1>     return
    13                              <2> %%_ret:
    14 00002271 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1033                              <1> .badOnOff:
  1034 00002272 488D1518EBFFFF      <1>     lea rdx, badOnOff
  1035 00002279 B409                <1>     mov ah, 09h
  1036 0000227B CD21                <1>     int 21h
  1037                              <1>     return
    13                              <2> %%_ret:
    14 0000227D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1038                              <1> 
  1039                              <1> verify:
  1040 0000227E F60535DEFFFFFF      <1>     test byte [arg1Flg], -1
  1041 00002285 752D                <1>     jnz .argumentProvided
  1042                              <1>     ;Here we just get the status of break
  1043 00002287 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1044 0000228C CD21                <1>     int 21h
  1045 0000228E 88C3                <1>     mov bl, al
  1046 00002290 488D1532E9FFFF      <1>     lea rdx, verifyIs
  1047 00002297 B409                <1>     mov ah, 09h
  1048 00002299 CD21                <1>     int 21h
  1049 0000229B 488D1518E9FFFF      <1>     lea rdx, onMes
  1050 000022A2 488D0D0BE9FFFF      <1>     lea rcx, offMes
  1051 000022A9 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1052 000022AB 480F44D1            <1>     cmovz rdx, rcx
  1053 000022AF B409                <1>     mov ah, 09h
  1054 000022B1 CD21                <1>     int 21h
  1055                              <1>     return
    13                              <2> %%_ret:
    14 000022B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1056                              <1> .argumentProvided:
  1057 000022B4 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1058 000022B8 AD                  <1>     lodsd   ;Read the word
  1059 000022B9 89C3                <1>     mov ebx, eax
  1060 000022BB 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1061 000022C0 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1062 000022C3 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1063 000022C8 7416                <1>     je .maybeOn
  1064 000022CA 663D4F46            <1>     cmp ax, "OF"
  1065 000022CE 751F                <1>     jne .badOnOff
  1066 000022D0 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1067 000022D5 6681FB4620          <1>     cmp bx, "F "
  1068 000022DA 7513                <1>     jne .badOnOff
  1069                              <1>     ;Set off
  1070 000022DC 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1071 000022DE EB0A                <1>     jmp short .setVerify
  1072                              <1> .maybeOn:
  1073 000022E0 663D4F4E            <1>     cmp ax, "ON"
  1074 000022E4 7509                <1>     jne .badOnOff
  1075                              <1>     ;Set on
  1076 000022E6 31C0                <1>     xor eax, eax
  1077 000022E8 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1078                              <1> .setVerify:
  1079 000022EA B42E                <1>     mov ah, 2Eh  ;Set Verify
  1080 000022EC CD21                <1>     int 21h
  1081                              <1>     return
    13                              <2> %%_ret:
    14 000022EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1082                              <1> .badOnOff:
  1083 000022EF 488D159BEAFFFF      <1>     lea rdx, badOnOff
  1084 000022F6 B409                <1>     mov ah, 09h
  1085 000022F8 CD21                <1>     int 21h
  1086                              <1>     return
    13                              <2> %%_ret:
    14 000022FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1087                              <1> 
  1088                              <1> rename:
  1089 000022FB F605B8DDFFFFFF      <1>     test byte [arg1Flg], -1
  1090 00002302 0F8484F3FFFF        <1>     jz badArgError
  1091 00002308 F605AEDDFFFFFF      <1>     test byte [arg2Flg], -1
  1092 0000230F 0F8477F3FFFF        <1>     jz badArgError    
  1093                              <1>     ;Initialise the variables!
  1094 00002315 488D35F4E1FFFF      <1>     lea rsi, srcSpec
  1095 0000231C 488935F1E2FFFF      <1>     mov qword [srcPtr], rsi
  1096 00002323 488D3568E2FFFF      <1>     lea rsi, destSpec
  1097 0000232A 488935EBE2FFFF      <1>     mov qword [destPtr], rsi
  1098                              <1>     ;Check the second path is just a filename!
  1099 00002331 0FB60586DDFFFF      <1>     movzx eax, byte [arg2Off]
  1100 00002338 4C8B05D0DCFFFF      <1>     mov r8, qword [pspPtr]
  1101 0000233F 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1102 00002346 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1103 00002349 488D3D78E0FFFF      <1>     lea rdi, searchSpec
  1104 00002350 57                  <1>     push rdi
  1105 00002351 E8C50E0000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1106 00002356 5F                  <1>     pop rdi
  1107 00002357 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1108 0000235B 0F842BF3FFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1109 00002361 4889FE              <1>     mov rsi, rdi
  1110                              <1> .destScan:
  1111 00002364 AC                  <1>     lodsb   ;Get the char
  1112 00002365 3A05C0DCFFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1113 0000236B 0F841BF3FFFF        <1>     je badArgError
  1114 00002371 84C0                <1>     test al, al
  1115 00002373 75EF                <1>     jnz .destScan
  1116                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1117 00002375 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1118 00002379 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1118 00002382 3F                  <1>
  1119 00002383 B903000000          <1>     mov ecx, 3  ;24 bytes
  1120 00002388 F348AB              <1>     rep stosq
  1121 0000238B AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1122 0000238C 488D3535E0FFFF      <1>     lea rsi, searchSpec
  1123 00002393 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1124 00002397 B80D290000          <1>     mov eax, 290Dh
  1125 0000239C CD21                <1>     int 21h     
  1126 0000239E 50                  <1>     push rax    ;Save the WC signature
  1127 0000239F E8BA0E0000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1128 000023A4 488D3D1DE0FFFF      <1>     lea rdi, searchSpec
  1129 000023AB E8F10D0000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1130 000023B0 4889FE              <1>     mov rsi, rdi
  1131 000023B3 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1132 000023B6 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1133 000023BA B80D290000          <1>     mov eax, 290Dh
  1134 000023BF CD21                <1>     int 21h
  1135 000023C1 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1136 000023C2 88CC                <1>     mov ah, cl
  1137 000023C4 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1138 000023C7 0F84EC000000        <1>     jz .noWC
  1139 000023CD 488D35F4DFFFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1140                              <1>     ;Now we check if we have a path to actually handle
  1141 000023D4 4839F3              <1>     cmp rbx, rsi
  1142 000023D7 7444                <1>     je .noPath
  1143 000023D9 C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1144 000023DD 488D35E4DFFFFF      <1>     lea rsi, searchSpec
  1145 000023E4 488D3D25E1FFFF      <1>     lea rdi, srcSpec
  1146 000023EB 56                  <1>     push rsi
  1147 000023EC E8A80C0000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1148 000023F1 5E                  <1>     pop rsi
  1149 000023F2 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1150 000023F5 8A0530DCFFFF        <1>     mov al, byte [pathSep]
  1151 000023FB AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1152 000023FC 48893D11E2FFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1153 00002403 488D3D88E1FFFF      <1>     lea rdi, destSpec
  1154 0000240A E88A0C0000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1155 0000240F 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1156 00002412 AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1157 00002413 48893D02E2FFFF      <1>     mov qword [destPtr], rdi
  1158 0000241A 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1159                              <1> .noPath:
  1160                              <1>     ;Now we have where to copy the files to, we can start our work!
  1161 0000241D E8280F0000          <1>     call setDTA
  1162 00002422 488D159FDFFFFF      <1>     lea rdx, searchSpec
  1163 00002429 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1164 0000242B B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1165 00002430 CD21                <1>     int 21h
  1166 00002432 0F8266F2FFFF        <1>     jc badDupFnf    ;If no file was found!
  1167                              <1> .wcLoop:
  1168                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1169 00002438 488D35AFDCFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1170 0000243F 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1171 00002443 B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1172 00002448 CD21                <1>     int 21h 
  1173                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1174 0000244A 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1175 0000244E 488D3DCFE1FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1176 00002455 57                  <1>     push rdi
  1177 00002456 48A5                <1>     movsq
  1178 00002458 66A5                <1>     movsw
  1179 0000245A A4                  <1>     movsb
  1180 0000245B 5F                  <1>     pop rdi
  1181 0000245C 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1182 00002460 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1183                              <1> .wcNameMake:
  1184 00002465 AC                  <1>     lodsb   ;Get the char from the source string
  1185 00002466 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1186 00002469 7502                <1>     jne .noStore    ;Dont store the char there
  1187 0000246B 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1188                              <1> .noStore:
  1189 0000246D 48FFC7              <1>     inc rdi ;Goto next char position
  1190 00002470 FFC9                <1>     dec ecx
  1191 00002472 75F1                <1>     jnz .wcNameMake
  1192                              <1> ;renName now has the FCB name for the file we wish to make!
  1193                              <1> ;Now make the two paths!
  1194 00002474 488D3573DCFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1195 0000247B 488B3D92E1FFFF      <1>     mov rdi, qword [srcPtr]
  1196 00002482 E8120C0000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1197 00002487 488D3596E1FFFF      <1>     lea rsi, renName
  1198 0000248E 488B3D87E1FFFF      <1>     mov rdi, qword [destPtr]
  1199 00002495 E82B0D0000          <1>     call FCBToAsciiz
  1200 0000249A 488D156FE0FFFF      <1>     lea rdx, srcSpec
  1201 000024A1 488D3DEAE0FFFF      <1>     lea rdi, destSpec
  1202 000024A8 B800560000          <1>     mov eax, 5600h
  1203 000024AD CD21                <1>     int 21h     ;Fail silently on wildcard rename
  1204 000024AF B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1205 000024B4 CD21                <1>     int 21h
  1206 000024B6 7380                <1>     jnc .wcLoop     ;And process it too!
  1207                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 000024B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1208                              <1> .noWC:
  1209 000024B9 E8A00D0000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1210 000024BE 0FB605F9DBFFFF      <1>     movzx eax, byte [arg2Off]
  1211 000024C5 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1212 000024CC 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1213 000024CF 488D3DBCE0FFFF      <1>     lea rdi, destSpec
  1214 000024D6 57                  <1>     push rdi
  1215 000024D7 E83F0D0000          <1>     call cpDelimPathToBufz
  1216 000024DC 5F                  <1>     pop rdi
  1217 000024DD 488D15E4DEFFFF      <1>     lea rdx, searchSpec
  1218 000024E4 B800560000          <1>     mov eax, 5600h
  1219 000024E9 CD21                <1>     int 21h
  1220                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000024EB 73(B8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1221 000024ED E9ACF1FFFF          <1>     jmp badDupFnf   ;Always just return this
  1222                              <1> 
  1223                              <1> 
  1224                              <1> touch:
  1225                              <1> ;Temporarily used to create files
  1226 000024F2 F605C1DBFFFFFF      <1>     test byte [arg1Flg], -1
  1227 000024F9 0F848DF1FFFF        <1>     jz badArgError
  1228 000024FF E85A0D0000          <1>     call buildCommandPath
  1229 00002504 488D15BDDEFFFF      <1>     lea rdx, searchSpec
  1230 0000250B B8005B0000          <1>     mov eax, 5B00h  ;Create unique file 
  1231 00002510 31C9                <1>     xor ecx, ecx
  1232 00002512 CD21                <1>     int 21h
  1233 00002514 721D                <1>     jc .touch1
  1234                              <1> .touchClose:
  1235 00002516 0FB7D8              <1>     movzx ebx, ax   ;Save the handle here
  1236 00002519 B80D120000          <1>     mov eax, 120Dh  ;Get date/time words from the DOS
  1237 0000251E CD2F                <1>     int 2fh
  1238 00002520 89C1                <1>     mov ecx, eax    ;Move the time here
  1239 00002522 87D1                <1>     xchg edx, ecx   ;Get them in the right place
  1240 00002524 B801570000          <1>     mov eax, 5701h  ;Set the date/time for bx
  1241 00002529 CD21                <1>     int 21h
  1242 0000252B B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1243 00002530 CD21                <1>     int 21h
  1244                              <1>     return
    13                              <2> %%_ret:
    14 00002532 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1245                              <1> .touch1:
  1246 00002533 3C50                <1>     cmp al, errFilExist ;Does the file exist?
  1247 00002535 7509                <1>     jne .touchError ;If not, this is a proper error!
  1248 00002537 B8003D0000          <1>     mov eax, 3D00h  ;R/O open instead to update the access time!!
  1249 0000253C CD21                <1>     int 21h
  1250 0000253E 73D6                <1>     jnc .touchClose ;If this worked, close the handle immediately
  1251                              <1> .touchError:
  1252 00002540 3C03                <1>     cmp al, errPnf
  1253 00002542 0F8444F1FFFF        <1>     je badArgError
  1254 00002548 3C02                <1>     cmp al, errFnf
  1255 0000254A 0F8457F1FFFF        <1>     je badFnf
  1256 00002550 E913F1FFFF          <1>     jmp badAccError
  1257                              <1>     
  1258                              <1> 
  1259                              <1> join:
  1260                              <1> ;Mock join command, to test join. Make an external command.
  1261                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1262 00002555 F605AF000000FF      <1>     test byte [.joinOn], -1
  1263 0000255C 743D                <1>     jz .okJoin
  1264                              <1> .joindisable:
  1265 0000255E B800520000          <1>     mov eax, 5200h  
  1266 00002563 CD21                <1>     int 21h
  1267                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1268 00002565 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1269 0000256A CD2A                <1>     int 2Ah
  1270 0000256C 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1271 00002570 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1272 00002574 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1273 0000257A C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1274 0000257D C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1275 00002581 FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1276 00002584 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1277 00002589 CD2A                <1>     int 2Ah
  1278 0000258B C6057900000000      <1>     mov byte [.joinOn], 0
  1279 00002592 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1280 00002599 EB45                <1>     jmp short .joinExit
  1281                              <1> .okJoin:
  1282 0000259B C60569000000FF      <1>     mov byte [.joinOn], -1
  1283 000025A2 B800520000          <1>     mov eax, 5200h  
  1284 000025A7 CD21                <1>     int 21h
  1285 000025A9 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1286 000025AD 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1287                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1288 000025B1 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1289 000025B6 CD2A                <1>     int 2Ah
  1290 000025B8 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1291 000025BE 4889DF              <1>     mov rdi, rbx
  1292 000025C1 488D3544000000      <1>     lea rsi, .joinPath
  1293 000025C8 B90C000000          <1>     mov ecx, .joinPathL
  1294 000025CD F3A4                <1>     rep movsb   ;Copy chars over
  1295 000025CF FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1296 000025D2 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1297 000025D7 CD2A                <1>     int 2Ah
  1298 000025D9 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1299                              <1> .joinExit:
  1300 000025E0 B800090000          <1>     mov eax, 0900h
  1301 000025E5 CD21                <1>     int 21h
  1302                              <1>     return
    13                              <2> %%_ret:
    14 000025E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1303 000025E8 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1303 000025F1 61626C65640D0A24    <1>
  1304 000025F9 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1304 00002602 7361626C65640D0A24  <1>
  1305 0000260B 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1306 0000260C 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1306 00002615 535400              <1>
  1307                              <1> .joinPathL  equ $ - .joinPath 
  1308                              <1> 
  1309                              <1> subst:
  1310                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1311                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1312 00002618 F605D3000000FF      <1>     test byte [.substOn], -1
  1313 0000261F 7443                <1>     jz .okSubst
  1314                              <1> .substdisable:
  1315 00002621 B800520000          <1>     mov eax, 5200h  
  1316 00002626 CD21                <1>     int 21h
  1317                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1318 00002628 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1319 0000262D CD2A                <1>     int 2Ah
  1320 0000262F 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1321 00002633 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1322 0000263A 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1323 00002640 C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1324 00002643 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1325 00002647 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1326 0000264D B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1327 00002652 CD2A                <1>     int 2Ah
  1328 00002654 C6059700000000      <1>     mov byte [.substOn], 0
  1329 0000265B 488D157D000000      <1>     lea rdx, .substDisableMsg
  1330 00002662 EB61                <1>     jmp short .substExit
  1331                              <1> .okSubst:
  1332 00002664 C60587000000FF      <1>     mov byte [.substOn], -1
  1333 0000266B B800520000          <1>     mov eax, 5200h  
  1334 00002670 CD21                <1>     int 21h
  1335 00002672 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1336 00002677 CD2A                <1>     int 2Ah
  1337 00002679 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1338 0000267D 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1339 00002684 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1340 00002688 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1341 0000268F 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1342 00002693 C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1343                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1344 0000269A 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1345 000026A0 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1346 000026A6 4889DF              <1>     mov rdi, rbx
  1347 000026A9 488D3543000000      <1>     lea rsi, .substPath
  1348 000026B0 B90C000000          <1>     mov ecx, .substPathL
  1349 000026B5 F3A4                <1>     rep movsb   ;Copy chars over
  1350 000026B7 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1351 000026BC CD2A                <1>     int 2Ah
  1352 000026BE 488D1508000000      <1>     lea rdx, .substEnableMsg
  1353                              <1> .substExit:
  1354 000026C5 B800090000          <1>     mov eax, 0900h
  1355 000026CA CD21                <1>     int 21h
  1356                              <1>     return
    13                              <2> %%_ret:
    14 000026CC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1357 000026CD 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1357 000026D6 6E61626C65640D0A24  <1>
  1358 000026DF 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1358 000026E8 697361626C65640D0A- <1>
  1358 000026F1 24                  <1>
  1359 000026F2 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1360 000026F3 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1360 000026FC 535400              <1>
  1361                              <1> .substPathL  equ $ - .substPath 
  1362                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1363                              <1> truename:
  1364 000026FF F605B4D9FFFFFF      <1>     test byte [arg1Flg], -1
  1365 00002706 0F8480EFFFFF        <1>     jz badArgError
  1366 0000270C E84D0B0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1367 00002711 488D35B0DCFFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1368 00002718 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1369 0000271B B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1370 00002720 CD21                <1>     int 21h
  1371 00002722 730D                <1>     jnc .writePath
  1372 00002724 3C02                <1>     cmp al, errFnf
  1373 00002726 0F8469EFFFFF        <1>     je badFileError
  1374 0000272C E949EFFFFF          <1>     jmp badParamError
  1375                              <1> .writePath:
  1376 00002731 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1377 00002734 B9FFFFFFFF          <1>     mov ecx, -1
  1378 00002739 30C0                <1>     xor al, al
  1379 0000273B F2AE                <1>     repne scasb     ;Get the new len
  1380 0000273D F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1381 0000273F FFC9                <1>     dec ecx
  1382 00002741 BB01000000          <1>     mov ebx, 01
  1383 00002746 B440                <1>     mov ah, 40h
  1384 00002748 CD21                <1>     int 21h
  1385 0000274A E86C060000          <1>     call printCRLF
  1386                              <1>     return
    13                              <2> %%_ret:
    14 0000274F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1387                              <1> 
  1388                              <1> label:
  1389                              <1> ;Displays/Changes/Deletes the file label
  1390 00002750 488D1508000000      <1>     lea rdx, .l1
  1391 00002757 B800090000          <1>     mov eax, 0900h
  1392 0000275C CD21                <1>     int 21h
  1393                              <1>     return
    13                              <2> %%_ret:
    14 0000275E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1394 0000275F 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  1394 00002768 6E20756E696D706C65- <1>
  1394 00002771 6D656E7465640D0A24  <1>
  1395                              <1> 
  1396                              <1> mklbl:
  1397                              <1>     ;lea rdx, .l1
  1398                              <1>     ;mov cx, 08h ;Make a label
  1399                              <1>     ;mov eax, 3C00h
  1400                              <1>     ;int 21h
  1401                              <1> 
  1402                              <1>     ;mov ebx, eax
  1403                              <1>     ;mov eax, 3E00h  ;Close the handle
  1404                              <1>     ;int 21h
  1405                              <1>     ;return
  1406                              <1> 
  1407                              <1> ;.l1: db "TESTLABEL",0
  1408 0000277A 488D1508000000      <1>     lea rdx, .l1
  1409 00002781 B800160000          <1>     mov eax, 1600h  ;Create FCB
  1410 00002786 CD21                <1>     int 21h
  1411                              <1>     return
    13                              <2> %%_ret:
    14 00002788 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1412                              <1> .l1:
  1413                              <1>     istruc exFcb
  1414 00002789 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1415 0000278A 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1416 00002790 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1417 00002791 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  1418 00002799 4C2020              <1>     at exFcb.fileext,   db "L  "
  1419 0000279C 00000000            <1>     at exFcb.curBlock,  dd 0
  1420 000027A0 00<rep 15h>         <1>     iend 
  1421                              <1> rmlbl:
  1422 000027B5 488D1508000000      <1>     lea rdx, .l1
  1423 000027BC B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  1424 000027C1 CD21                <1>     int 21h
  1425                              <1>     return
    13                              <2> %%_ret:
    14 000027C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1426                              <1> .l1:    ;FCB to volume label
  1427                              <1>     istruc exFcb
  1428 000027C4 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1429 000027C5 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1430 000027CB 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1431 000027CC 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  1432 000027D4 3F3F3F              <1>     at exFcb.fileext,   db "???"
  1433 000027D7 00000000            <1>     at exFcb.curBlock,  dd 0
  1434 000027DB 00<rep 15h>         <1>     iend 
  1435                              <1> 
  1436                              <1> rnlbl:
  1437 000027F0 488D1508000000      <1>     lea rdx, .l1
  1438 000027F7 B800170000          <1>     mov eax, 1700h
  1439 000027FC CD21                <1>     int 21h
  1440                              <1>     return
    13                              <2> %%_ret:
    14 000027FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1441                              <1> .l1:
  1442                              <1>     istruc exRenFcb
  1443 000027FF FF                  <1>     at exRenFcb.extSig,     db -1
  1444 00002800 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  1445 00002806 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  1446 00002807 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  1447 0000280F 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  1448 00002812 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  1448 0000281B 4C414245            <1>
  1449 0000281F 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  1450 00002822 00<rep 4h>          <1>     iend
  1451                              <1> volume:
  1452                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  1453 00002826 F60590D8FFFFFF      <1>     test byte [arg2Flg], -1
  1454 0000282D 0F8559EEFFFF        <1>     jnz badArgError
  1455 00002833 F60580D8FFFFFF      <1>     test byte [arg1Flg], -1
  1456 0000283A 7507                <1>     jnz .notCurrentDrive
  1457 0000283C E853080000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1458 00002841 EB31                <1>     jmp short .dirEP
  1459                              <1> .notCurrentDrive:
  1460 00002843 E8160A0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1461 00002848 488D3579DBFFFF      <1>     lea rsi, searchSpec
  1462 0000284F E87A080000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  1463 00002854 66AD                <1>     lodsw                   ;Get this word
  1464 00002856 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  1465 00002859 0F852DEEFFFF        <1>     jne badArgError
  1466 0000285F 8A0557D8FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1467 00002865 A8FF                <1>     test al, -1
  1468 00002867 0F8516EEFFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1469 0000286D 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1470 00002872 FFC8                <1>     dec eax ;Convert to 0 based number
  1471                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  1472 00002874 E8D10A0000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  1473 00002879 488D1560DCFFFF      <1>     lea rdx, volFcb
  1474 00002880 FFC0                <1>     inc eax ;Get 1 based drive number
  1475 00002882 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1476 00002884 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1477 00002887 B800110000          <1>     mov eax, 1100h ;Find first FCB
  1478 0000288C CD21                <1>     int 21h
  1479 0000288E 50                  <1>     push rax
  1480                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  1481 0000288F 488D150CDFFFFF      <1>     lea rdx, crlf
  1482 00002896 B409                <1>     mov ah, 09h
  1483 00002898 CD21                <1>     int 21h
  1484 0000289A 488D1586E1FFFF      <1>     lea rdx, volMes
  1485 000028A1 B409                <1>     mov ah, 09h
  1486 000028A3 CD21                <1>     int 21h
  1487 000028A5 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  1488 000028A7 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  1489 000028AA B402                <1>     mov ah, 02h
  1490 000028AC CD21                <1>     int 21h
  1491 000028AE 58                  <1>     pop rax
  1492 000028AF 84C0                <1>     test al, al ;If this is zero, the call succeeded
  1493 000028B1 7409                <1>     jz .volIDOk
  1494 000028B3 488D1584E1FFFF      <1>     lea rdx, volNo
  1495 000028BA EB19                <1>     jmp short .volEndPrint
  1496                              <1> .volIDOk:
  1497 000028BC 488D1576E1FFFF      <1>     lea rdx, volOk
  1498 000028C3 B409                <1>     mov ah, 09h
  1499 000028C5 CD21                <1>     int 21h
  1500 000028C7 C60515D8FFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  1501 000028CE 488D1503D8FFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  1502                              <1> .volEndPrint:
  1503 000028D5 B409                <1>     mov ah, 09h
  1504 000028D7 CD21                <1>     int 21h
  1505 000028D9 488D15C2DEFFFF      <1>     lea rdx, crlf
  1506 000028E0 B409                <1>     mov ah, 09h
  1507 000028E2 CD21                <1>     int 21h
  1508                              <1>     return
    13                              <2> %%_ret:
    14 000028E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1509                              <1> 
  1510                              <1> version:
  1511 000028E5 488D15B6DEFFFF      <1>     lea rdx, crlf
  1512 000028EC B409                <1>     mov ah, 09h
  1513 000028EE CD21                <1>     int 21h
  1514 000028F0 488D151EE1FFFF      <1>     lea rdx, dosVer
  1515 000028F7 B409                <1>     mov ah, 09h
  1516 000028F9 CD21                <1>     int 21h
  1517 000028FB E80C000000          <1>     call .printVersionNumber
  1518 00002900 488D159BDEFFFF      <1>     lea rdx, crlf
  1519 00002907 B409                <1>     mov ah, 09h
  1520 00002909 CD21                <1>     int 21h
  1521                              <1>     return
    13                              <2> %%_ret:
    14 0000290B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1522                              <1> .printVersionNumber:
  1523 0000290C B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1524 0000290E CD21                <1>     int 21h
  1525 00002910 50                  <1>     push rax
  1526 00002911 0FB6C0              <1>     movzx eax, al
  1527 00002914 E87E090000          <1>     call printDecimalWord
  1528 00002919 B22E                <1>     mov dl, "."
  1529 0000291B B402                <1>     mov ah, 02h
  1530 0000291D CD21                <1>     int 21h
  1531 0000291F 58                  <1>     pop rax
  1532 00002920 0FB6C4              <1>     movzx eax, ah
  1533 00002923 E86F090000          <1>     call printDecimalWord
  1534                              <1>     return
    13                              <2> %%_ret:
    14 00002928 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1535                              <1> 
  1536                              <1> 
  1537                              <1> memory:
  1538 00002929 488B1DEFD6FFFF      <1>     mov rbx, qword [sysVars]
  1539 00002930 4885DB              <1>     test rbx, rbx
  1540 00002933 7510                <1>     jnz .sysvarsOK
  1541 00002935 488D15BCE3FFFF      <1>     lea rdx, memBad0
  1542 0000293C B409                <1>     mov ah, 09h
  1543 0000293E CD21                <1>     int 21h
  1544 00002940 E9F5090000          <1>     jmp freezePC.altEP
  1545                              <1> .sysvarsOK:
  1546                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1547                              <1>     ; and rcx to store Application memory
  1548 00002945 31F6                <1>     xor esi, esi
  1549 00002947 31FF                <1>     xor edi, edi
  1550 00002949 31ED                <1>     xor ebp, ebp
  1551 0000294B 31C9                <1>     xor ecx, ecx
  1552 0000294D 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1553 00002951 488B1B              <1>     mov rbx, qword [rbx]
  1554                              <1> .memLp:
  1555 00002954 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1556 00002957 7409                <1>     je .validMCB
  1557 00002959 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1558 0000295C 0F8501010000        <1>     jne .badMCBFound
  1559                              <1> .validMCB:
  1560 00002962 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1561 00002965 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1562 00002969 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1563 00002971 7505                <1>     jne .notDOS
  1564 00002973 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1565 00002976 EB21                <1>     jmp short .gotoNext
  1566                              <1> .notDOS:
  1567 00002978 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1568 00002980 7505                <1>     jne .notFree
  1569 00002982 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1570 00002985 EB12                <1>     jmp short .gotoNext
  1571                              <1> .notFree:
  1572 00002987 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1573 0000298F 7505                <1>     jne .notHole
  1574 00002991 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1575 00002994 EB03                <1>     jmp short .gotoNext
  1576                              <1> .notHole:
  1577 00002996 4801C1              <1>     add rcx, rax    ;Add to Application count
  1578                              <1> .gotoNext:
  1579 00002999 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1580 0000299C 7407                <1>     je .endOfWalk
  1581 0000299E 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1582 000029A3 EBAF                <1>     jmp short .memLp
  1583                              <1> .endOfWalk:
  1584                              <1>     
  1585 000029A5 488D15ADE2FFFF      <1>     lea rdx, memDOS
  1586 000029AC B409                <1>     mov ah, 09h
  1587 000029AE CD21                <1>     int 21h
  1588 000029B0 4889F0              <1>     mov rax, rsi
  1589 000029B3 E89D000000          <1>     call .mcbPrintAmount
  1590 000029B8 488D1532E3FFFF      <1>     lea rdx, memByte
  1591 000029BF B409                <1>     mov ah, 09h
  1592 000029C1 CD21                <1>     int 21h
  1593                              <1> 
  1594 000029C3 4885ED              <1>     test rbp, rbp
  1595 000029C6 741E                <1>     jz .skipHole
  1596 000029C8 488D15D6E2FFFF      <1>     lea rdx, memHole
  1597 000029CF B409                <1>     mov ah, 09h
  1598 000029D1 CD21                <1>     int 21h
  1599 000029D3 4889E8              <1>     mov rax, rbp
  1600 000029D6 E87A000000          <1>     call .mcbPrintAmount
  1601 000029DB 488D150FE3FFFF      <1>     lea rdx, memByte
  1602 000029E2 B409                <1>     mov ah, 09h
  1603 000029E4 CD21                <1>     int 21h
  1604                              <1> .skipHole:
  1605                              <1> 
  1606 000029E6 488D1592E2FFFF      <1>     lea rdx, memApp
  1607 000029ED B409                <1>     mov ah, 09h
  1608 000029EF CD21                <1>     int 21h
  1609 000029F1 4889C8              <1>     mov rax, rcx
  1610 000029F4 E85C000000          <1>     call .mcbPrintAmount
  1611 000029F9 488D15F1E2FFFF      <1>     lea rdx, memByte
  1612 00002A00 B409                <1>     mov ah, 09h
  1613 00002A02 CD21                <1>     int 21h
  1614                              <1> 
  1615 00002A04 488D15C0E2FFFF      <1>     lea rdx, memFree
  1616 00002A0B B409                <1>     mov ah, 09h
  1617 00002A0D CD21                <1>     int 21h
  1618 00002A0F 4889F8              <1>     mov rax, rdi
  1619 00002A12 E83E000000          <1>     call .mcbPrintAmount
  1620 00002A17 488D15D3E2FFFF      <1>     lea rdx, memByte
  1621 00002A1E B409                <1>     mov ah, 09h
  1622 00002A20 CD21                <1>     int 21h
  1623                              <1> 
  1624 00002A22 488D150AE2FFFF      <1>     lea rdx, memSys
  1625 00002A29 B409                <1>     mov ah, 09h
  1626 00002A2B CD21                <1>     int 21h
  1627 00002A2D 4889F0              <1>     mov rax, rsi
  1628 00002A30 4801F8              <1>     add rax, rdi
  1629 00002A33 4801C8              <1>     add rax, rcx
  1630 00002A36 4801E8              <1>     add rax, rbp
  1631 00002A39 E817000000          <1>     call .mcbPrintAmount
  1632 00002A3E 488D15ACE2FFFF      <1>     lea rdx, memByte
  1633 00002A45 B409                <1>     mov ah, 09h
  1634 00002A47 CD21                <1>     int 21h
  1635                              <1> 
  1636 00002A49 488D1552DDFFFF      <1>     lea rdx, crlf
  1637 00002A50 B409                <1>     mov ah, 09h
  1638 00002A52 CD21                <1>     int 21h
  1639                              <1>     return
    13                              <2> %%_ret:
    14 00002A54 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1640                              <1> 
  1641                              <1> .mcbPrintAmount:
  1642 00002A55 51                  <1>     push rcx
  1643 00002A56 56                  <1>     push rsi
  1644 00002A57 57                  <1>     push rdi
  1645 00002A58 55                  <1>     push rbp
  1646 00002A59 E839080000          <1>     call printDecimalWord
  1647 00002A5E 5D                  <1>     pop rbp
  1648 00002A5F 5F                  <1>     pop rdi
  1649 00002A60 5E                  <1>     pop rsi
  1650 00002A61 59                  <1>     pop rcx
  1651                              <1>     return
    13                              <2> %%_ret:
    14 00002A62 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1652                              <1> .badMCBFound:
  1653 00002A63 488D15CEE2FFFF      <1>     lea rdx, memBad2
  1654 00002A6A B409                <1>     mov ah, 09h
  1655 00002A6C CD21                <1>     int 21h
  1656 00002A6E E9C7080000          <1>     jmp freezePC.altEP
  1657                              <1> 
  1658                              <1> type:
  1659 00002A73 F60540D6FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1660 00002A7A 0F840CECFFFF        <1>     jz badArgError
  1661 00002A80 F60536D6FFFFFF      <1>     test byte [arg2Flg], -1
  1662 00002A87 0F85FFEBFFFF        <1>     jnz badArgError         ;If this set, error
  1663 00002A8D 4C8B057BD5FFFF      <1>     mov r8, [pspPtr]
  1664 00002A94 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1665 00002A9B 0FB60519D6FFFF      <1>     movzx eax, byte [arg1Off]
  1666 00002AA2 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1667 00002AA5 803E0D              <1>     cmp byte [rsi], CR
  1668 00002AA8 0F84DEEBFFFF        <1>     je badArgError
  1669 00002AAE 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1670 00002AB2 750F                <1>     jne .noDrive
  1671 00002AB4 0FB60501D6FFFF      <1>     movzx eax, byte [arg1FCBret]
  1672 00002ABB 3CFF                <1>     cmp al, -1
  1673 00002ABD 0F84C0EBFFFF        <1>     je badDriveError
  1674                              <1> .noDrive:
  1675                              <1>     ;Now we open the provided file
  1676 00002AC3 E896070000          <1>     call buildCommandPath
  1677 00002AC8 488D15F9D8FFFF      <1>     lea rdx, searchSpec
  1678 00002ACF B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1679 00002AD4 CD21                <1>     int 21h
  1680 00002AD6 0F82B9EBFFFF        <1>     jc badFileError
  1681 00002ADC 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1682 00002AE3 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1683                              <1> .lp:
  1684 00002AE6 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1685 00002AEB B43F                <1>     mov ah, 3Fh ;Read handle
  1686 00002AED CD21                <1>     int 21h
  1687 00002AEF 89C1                <1>     mov ecx, eax
  1688 00002AF1 67E317              <1>     jecxz .exit
  1689 00002AF4 53                  <1>     push rbx    ;Save the original in handle
  1690 00002AF5 BB01000000          <1>     mov ebx, 1  ;STDOUT
  1691 00002AFA B440                <1>     mov ah, 40h
  1692 00002AFC CD21                <1>     int 21h
  1693 00002AFE 5B                  <1>     pop rbx ;Get back the original read handle
  1694 00002AFF 720F                <1>     jc .exitBad
  1695 00002B01 39C8                <1>     cmp eax, ecx
  1696 00002B03 74E1                <1>     je .lp
  1697 00002B05 FFC9                <1>     dec ecx ;One less for a ^Z
  1698 00002B07 39C8                <1>     cmp eax, ecx
  1699 00002B09 7505                <1>     jne .exitBad
  1700                              <1> .exit:
  1701 00002B0B B43E                <1>     mov ah, 3Eh ;Close handle
  1702 00002B0D CD21                <1>     int 21h
  1703                              <1>     return
    13                              <2> %%_ret:
    14 00002B0F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1704                              <1> .exitBad:
  1705                              <1>     ;Print a disk error message... use a table to build the message but for
  1706                              <1>     ; now, just exit
  1707                              <1>     ;If it is a char device, don't print a error
  1708 00002B10 EBF9                <1>     jmp short .exit
  1709                              <1> 
  1710                              <1> exit:
  1711 00002B12 F60514D5FFFFFF      <1>     test byte [permaSwitch], -1
  1712                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002B19 75(0F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1713 00002B1B 488B05F5D4FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1714 00002B22 483DFFFFFFFF        <1>     cmp rax, -1
  1715                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002B28 74(0F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1716 00002B2A 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1717                              <1> 
  1718 00002B2E 488B15F9D4FFFF      <1>     mov rdx, qword [parentInt22]
  1719 00002B35 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  1720 00002B39 B822250000          <1>     mov eax, 2522h
  1721 00002B3E CD21                <1>     int 21h
  1722                              <1> 
  1723 00002B40 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1724 00002B45 CD21                <1>     int 21h
  1725                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00002B47 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1726                              <1> 
  1727                              <1> launchChild:
  1728                              <1>     ;We execute an external command here.
  1729                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  1730                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  1731                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  1732                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  1733                              <1>     ;We know the drive we are on is valid so no need to double check that!
  1734 00002B48 4C8B05C0D4FFFF      <1>     mov r8, qword [pspPtr]
  1735 00002B4F E8F6070000          <1>     call setDTA         
  1736                              <1>     ;Start by rebuilding the cmdFcb from the last path componant.
  1737 00002B54 488D3DC4D6FFFF      <1>     lea rdi, cmdPathSpec
  1738 00002B5B E841060000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  1739 00002B60 4889FE              <1>     mov rsi, rdi    ;Source here
  1740 00002B63 488D3D56D5FFFF      <1>     lea rdi, cmdFcb
  1741 00002B6A B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  1742 00002B6F CD21                <1>     int 21h
  1743 00002B71 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  1744 00002B73 0F854EEBFFFF        <1>     jnz badCmdError
  1745 00002B79 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  1746                              <1> .pathLoop:
  1747 00002B7C 488D3546D5FFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  1748 00002B83 488D3D27E2FFFF      <1>     lea rdi, extStr
  1749 00002B8A BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  1750                              <1> .extLp:
  1751 00002B8F 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  1752 00002B90 B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  1753 00002B95 F3A6                <1>     rep cmpsb   ;Compare the two strings
  1754 00002B97 5E                  <1>     pop rsi
  1755 00002B98 85C9                <1>     test ecx, ecx
  1756 00002B9A 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  1757 00002B9C 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  1758 00002B9F FFCA                <1>     dec edx         ;Else one less extension type to check
  1759 00002BA1 75EC                <1>     jnz .extLp
  1760                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  1761                              <1>     ;If not, error.
  1762 00002BA3 B903000000          <1>     mov ecx, 3
  1763 00002BA8 4889F7              <1>     mov rdi, rsi
  1764 00002BAB B020                <1>     mov al, SPC
  1765 00002BAD F3AE                <1>     rep scasb   
  1766 00002BAF 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  1767 00002BB1 0F8510EBFFFF        <1>     jnz badCmdError    ;If not, error!
  1768                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  1769 00002BB7 488D35F3E1FFFF      <1>     lea rsi, extStr
  1770 00002BBE BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  1771                              <1> .extSrchLp:
  1772 00002BC3 488D3DFFD4FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1773 00002BCA B903000000          <1>     mov ecx, 3
  1774 00002BCF F3A4                <1>     rep movsb   ;Copy the extension over!
  1775 00002BD1 E861010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  1776 00002BD6 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  1777 00002BD8 FFCB                <1>     dec ebx                 ;Decrement extension counter
  1778 00002BDA 75E7                <1>     jnz .extSrchLp
  1779                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  1780                              <1> ; we start prepending path componants and trying again. To do this, we reset
  1781                              <1> ; by setting the fcb extension back to all spaces.
  1782 00002BDC 488D3DE6D4FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1783 00002BE3 B903000000          <1>     mov ecx, 3
  1784 00002BE8 B020                <1>     mov al, SPC
  1785 00002BEA F3AA                <1>     rep stosb   ;Store back the empty extension!
  1786 00002BEC EB50                <1>     jmp short .pathHandle
  1787                              <1> .extFnd:
  1788                              <1> ;Here if the file had the right extension.
  1789 00002BEE E844010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  1790 00002BF3 7249                <1>     jc .pathHandle
  1791                              <1> .extSrchFnd:
  1792                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  1793                              <1> ; a BAT. If it is, separate handling!
  1794 00002BF5 803DCDD4FFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  1795 00002BFC 0F8401010000        <1>     je .batLaunch
  1796 00002C02 488D1DF2D4FFFF      <1>     lea rbx, launchBlock
  1797 00002C09 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  1798 00002C0D 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  1799 00002C10 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  1800 00002C17 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1801 00002C1B 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1802 00002C1F 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1803 00002C23 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1804 00002C27 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1805 00002C2B 488D15EDD5FFFF      <1>     lea rdx, cmdPathSpec
  1806 00002C32 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1807 00002C37 CD21                <1>     int 21h
  1808 00002C39 E989EAFFFF          <1>     jmp badCmdError    ;If something goes wrong, error out
  1809                              <1> .pathHandle:        
  1810                              <1> ;First check if rbp is null. If it is, its a first time entry
  1811 00002C3E 4885ED              <1>     test rbp, rbp
  1812 00002C41 0F85AA000000        <1>     jnz .pathReentry
  1813                              <1> ;Now check if the command we recieved included an absolute path.
  1814                              <1> ;If so, we don't do path substitution and just fail at this point
  1815 00002C47 488D35D1D5FFFF      <1>     lea rsi, cmdPathSpec
  1816 00002C4E 66AD                <1>     lodsw   ;Get the first two chars
  1817 00002C50 3A05D5D3FFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  1818 00002C56 0F846BEAFFFF        <1>     je badCmdError  ;Therefore, exit bad!
  1819 00002C5C 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  1820 00002C5E 7412                <1>     je .pathGetEnv
  1821 00002C60 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  1822 00002C63 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  1823 00002C65 AC                  <1>     lodsb   ;Get the third char
  1824 00002C66 3A05BFD3FFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  1825 00002C6C 0F8455EAFFFF        <1>     je badCmdError  ;Therefore, exit bad!
  1826                              <1> .pathGetEnv:
  1827                              <1> ;Now get a pointer to the environment and search for PATH=
  1828                              <1> ;We only take the final portion of the path and add it to each path componant
  1829                              <1> ;This agrees with DOS 3.3
  1830 00002C72 E8F7060000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  1831 00002C77 0F844AEAFFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  1832                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  1833                              <1>     ;Now we know we dont have to keep track of chars!!
  1834                              <1> .pathLp:
  1835 00002C7D 488D3D51E1FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  1836 00002C84 B905000000          <1>     mov ecx, 5          ;5 Chars in PATH=
  1837 00002C89 E8D7060000          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1838 00002C8E 7419                <1>     je .pathFound
  1839 00002C90 31C0                <1>     xor eax, eax        ;Search for a null
  1840 00002C92 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1841 00002C95 B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1842 00002C9A F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1843 00002C9C 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1844 00002C9E 0F8423EAFFFF        <1>     je badCmdError      ;If second null, no more env to search!
  1845 00002CA4 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1846 00002CA7 EBD4                <1>     jmp short .pathLp   ;And scan again!
  1847                              <1> .pathFound:
  1848                              <1> ;Env var found!
  1849 00002CA9 F3A6                <1>     repe cmpsb          ;Move rdi past the = sign!
  1850                              <1> .pathRejoin:
  1851 00002CAB 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  1852 00002CAE 4889FE              <1>     mov rsi, rdi        ;This is a ; delimited ASCII string
  1853 00002CB1 488D3D10D7FFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  1854 00002CB8 E848050000          <1>     call cpDelimOrCtrlStringToBufz   
  1855 00002CBD 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  1856 00002CC0 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  1857 00002CC3 48FFCF              <1>     dec rdi ;Point to the null terminator
  1858 00002CC6 8A055FD3FFFF        <1>     mov al, byte [pathSep]
  1859 00002CCC AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  1860 00002CCD 488D35EDD3FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  1861 00002CD4 E8EC040000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  1862 00002CD9 488D35E8D6FFFF      <1>     lea rsi, searchSpec 
  1863 00002CE0 488D3D38D5FFFF      <1>     lea rdi, cmdPathSpec
  1864 00002CE7 E8AD030000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  1865 00002CEC E98BFEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  1866                              <1> .pathReentry:
  1867 00002CF1 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  1868 00002CF5 0F84CCE9FFFF        <1>     je badCmdError
  1869 00002CFB 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  1870 00002CFE 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  1871 00002D01 EBA8                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  1872                              <1> 
  1873                              <1> .batLaunch:
  1874 00002D03 488D1508000000      <1>     lea rdx, .batMsg
  1875 00002D0A B800090000          <1>     mov eax, 0900h
  1876 00002D0F CD21                <1>     int 21h
  1877                              <1>     return
    13                              <2> %%_ret:
    14 00002D11 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1878 00002D12 424154434820707265- <1> .batMsg db "BATCH preprocessor not implemented",CR,LF,"$"
  1878 00002D1B 70726F636573736F72- <1>
  1878 00002D24 206E6F7420696D706C- <1>
  1878 00002D2D 656D656E7465640D0A- <1>
  1878 00002D36 24                  <1>
  1879                              <1> 
  1880                              <1> .prepAndSearch:
  1881                              <1> ;Copies over the name and extension in UC to the last componant of the 
  1882                              <1> ;cmdPathSpec and null terminates. 
  1883                              <1> ;Input: cmdFcb name + ext setup. 
  1884                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  1885                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found!
  1886 00002D37 50                  <1>     push rax
  1887 00002D38 51                  <1>     push rcx
  1888 00002D39 56                  <1>     push rsi
  1889 00002D3A 57                  <1>     push rdi
  1890 00002D3B 488D3DDDD4FFFF      <1>     lea rdi, cmdPathSpec 
  1891 00002D42 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  1892 00002D45 E857040000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  1893 00002D4A 488D3570D3FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  1894 00002D51 E86F040000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  1895 00002D56 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1896 00002D5B 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  1897 00002D5D CD21                <1>     int 21h
  1898 00002D5F 5F                  <1>     pop rdi
  1899 00002D60 5E                  <1>     pop rsi
  1900 00002D61 59                  <1>     pop rcx
  1901 00002D62 58                  <1>     pop rax
  1902                              <1>     return
    13                              <2> %%_ret:
    14 00002D63 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1903                              <1> 
  1904                              <1> set:
  1905 00002D64 F6054FD3FFFFFF      <1>     test byte [arg1Flg], -1
  1906 00002D6B 0F841BE9FFFF        <1>     jz badArgError  ;Need to give an argument!
  1907 00002D71 0FB60543D3FFFF      <1>     movzx eax, byte [arg1Off]
  1908 00002D78 4C8B0590D2FFFF      <1>     mov r8, [pspPtr]
  1909 00002D7F 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1910 00002D86 4801C6              <1>     add rsi, rax    ;Go to the start of the argument
  1911                              <1>     ;rsi -> EnvvarName=string;string;string<CR>
  1912                              <1> 
  1913                              <1> pathEdit:
  1914 00002D89 488D1508000000      <1>     lea rdx, .pMsg
  1915 00002D90 B800090000          <1>     mov eax, 0900h
  1916 00002D95 CD21                <1>     int 21h
  1917                              <1>     return
    13                              <2> %%_ret:
    14 00002D97 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1918 00002D98 504154482065646974- <1> .pMsg db "PATH editing not yet implemented",CR,LF,"$"
  1918 00002DA1 696E67206E6F742079- <1>
  1918 00002DAA 657420696D706C656D- <1>
  1918 00002DB3 656E7465640D0A24    <1>
    18                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printCRLF:
     4 00002DBB 488D15E0D9FFFF      <1>     lea rdx, crlf
     5                              <1> printString:
     6 00002DC2 B800090000          <1>     mov eax, 0900h  ;Print string
     7 00002DC7 CD21                <1>     int 21h
     8                              <1>     return
    13                              <2> %%_ret:
    14 00002DC9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> printDate:
    10                              <1> ;Input: eax = Packed Date
    11                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    12                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    13                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    14                              <1> ;       ebx = 0 => Print two digit year
    15                              <1> ;       ebx = 1 => Print four digit year
    16 00002DCA 53                  <1>     push rbx
    17 00002DCB 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    18 00002DCD 803D62D2FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    19 00002DD4 7240                <1>     jb .usDate
    20 00002DD6 777C                <1>     ja .jpnDate
    21                              <1> ;European: DD/MM/YY
    22 00002DD8 251F000000          <1>     and eax, 1Fh    ;Save day bits
    23 00002DDD E8B0000000          <1>     call .printFirst
    24 00002DE2 8A1559D2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    25 00002DE8 B402                <1>     mov ah, 02h
    26 00002DEA CD21                <1>     int 21h
    27                              <1> 
    28 00002DEC 89C8                <1>     mov eax, ecx
    29 00002DEE 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    30 00002DF3 C1E805              <1>     shr eax, 5
    31 00002DF6 E8B3000000          <1>     call .printSecond
    32                              <1> 
    33 00002DFB 8A1540D2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    34 00002E01 B402                <1>     mov ah, 02h
    35 00002E03 CD21                <1>     int 21h
    36                              <1> 
    37 00002E05 89C8                <1>     mov eax, ecx
    38 00002E07 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    39 00002E0C C1E809              <1>     shr eax, 9
    40 00002E0F 5B                  <1>     pop rbx ;Get the year signature back
    41 00002E10 E8A9000000          <1>     call .printYear
    42                              <1>     return
    13                              <2> %%_ret:
    14 00002E15 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    43                              <1> .usDate:
    44                              <1> ;US: MM/DD/YY
    45 00002E16 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    46 00002E1B C1E805              <1>     shr eax, 5
    47 00002E1E E86F000000          <1>     call .printFirst
    48                              <1> 
    49 00002E23 8A1518D2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    50 00002E29 B402                <1>     mov ah, 02h
    51 00002E2B CD21                <1>     int 21h
    52                              <1> 
    53 00002E2D 89C8                <1>     mov eax, ecx
    54 00002E2F 251F000000          <1>     and eax, 1Fh    ;Save day bits
    55 00002E34 E875000000          <1>     call .printSecond
    56                              <1> 
    57 00002E39 8A1502D2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    58 00002E3F B402                <1>     mov ah, 02h
    59 00002E41 CD21                <1>     int 21h
    60                              <1> 
    61 00002E43 89C8                <1>     mov eax, ecx
    62 00002E45 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    63 00002E4A C1E809              <1>     shr eax, 9
    64 00002E4D 5B                  <1>     pop rbx ;Get the year signature back
    65 00002E4E E86B000000          <1>     call .printYear
    66                              <1>     return
    13                              <2> %%_ret:
    14 00002E53 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    67                              <1> .jpnDate:
    68                              <1> ;Japan: YY/MM/DD
    69 00002E54 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    70 00002E59 C1E809              <1>     shr eax, 9
    71 00002E5C 5B                  <1>     pop rbx ;Get the year signature back
    72 00002E5D E85C000000          <1>     call .printYear
    73                              <1> 
    74 00002E62 8A15D9D1FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    75 00002E68 B402                <1>     mov ah, 02h
    76 00002E6A CD21                <1>     int 21h
    77                              <1> 
    78 00002E6C 89C8                <1>     mov eax, ecx
    79 00002E6E 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    80 00002E73 C1E805              <1>     shr eax, 5
    81 00002E76 E833000000          <1>     call .printSecond
    82                              <1> 
    83 00002E7B 8A15C0D1FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    84 00002E81 B402                <1>     mov ah, 02h
    85 00002E83 CD21                <1>     int 21h
    86                              <1> 
    87 00002E85 89C8                <1>     mov eax, ecx
    88 00002E87 251F000000          <1>     and eax, 1Fh    ;Save day bits
    89 00002E8C E81D000000          <1>     call .printSecond
    90                              <1>     return
    13                              <2> %%_ret:
    14 00002E91 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    91                              <1> 
    92                              <1> ;Each of these require eax setup correctly
    93                              <1> .printFirst:
    94 00002E92 51                  <1>     push rcx
    95 00002E93 E870040000          <1>     call getDecimalWord
    96 00002E98 84ED                <1>     test ch, ch ;Do we have an upper digit?
    97 00002E9A 7504                <1>     jnz .skipSpace
    98 00002E9C 88CD                <1>     mov ch, cl
    99 00002E9E B120                <1>     mov cl, " "
   100                              <1> .skipSpace:
   101 00002EA0 88CA                <1>     mov dl, cl
   102 00002EA2 B402                <1>     mov ah, 02h
   103 00002EA4 CD21                <1>     int 21h
   104 00002EA6 88EA                <1>     mov dl, ch
   105 00002EA8 B402                <1>     mov ah, 02h
   106 00002EAA CD21                <1>     int 21h
   107 00002EAC 59                  <1>     pop rcx
   108                              <1>     return
    13                              <2> %%_ret:
    14 00002EAD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   109                              <1> .printSecond:
   110 00002EAE 51                  <1>     push rcx
   111 00002EAF E854040000          <1>     call getDecimalWord
   112 00002EB4 84ED                <1>     test ch, ch ;Do we have an upper digit?
   113 00002EB6 75E8                <1>     jnz .skipSpace
   114 00002EB8 88CD                <1>     mov ch, cl
   115 00002EBA B130                <1>     mov cl, "0"
   116 00002EBC EBE2                <1>     jmp short .skipSpace
   117                              <1> .printYear:
   118 00002EBE 05BC070000          <1>     add eax, 1980
   119 00002EC3 51                  <1>     push rcx
   120 00002EC4 53                  <1>     push rbx
   121 00002EC5 E83E040000          <1>     call getDecimalWord ;Get unpacked in rcx
   122 00002ECA 5B                  <1>     pop rbx
   123 00002ECB 84DB                <1>     test bl, bl
   124 00002ECD 740C                <1>     jz .twoDigitYear
   125 00002ECF 88CA                <1>     mov dl, cl  ;Print the first digit
   126 00002ED1 B402                <1>     mov ah, 02h
   127 00002ED3 CD21                <1>     int 21h
   128 00002ED5 88EA                <1>     mov dl, ch  ;Print the second digit
   129 00002ED7 B402                <1>     mov ah, 02h
   130 00002ED9 CD21                <1>     int 21h
   131                              <1> .twoDigitYear:
   132 00002EDB C1E910              <1>     shr ecx, 10h    ;Get high word low
   133 00002EDE 88CA                <1>     mov dl, cl  ;Print the upper digit
   134 00002EE0 B402                <1>     mov ah, 02h
   135 00002EE2 CD21                <1>     int 21h
   136 00002EE4 88EA                <1>     mov dl, ch  ;Print the lower digit
   137 00002EE6 B402                <1>     mov ah, 02h
   138 00002EE8 CD21                <1>     int 21h
   139 00002EEA 59                  <1>     pop rcx
   140                              <1>     return
    13                              <2> %%_ret:
    14 00002EEB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> 
   142                              <1> 
   143                              <1> printTime:
   144                              <1> ;Input: eax = Packed Time
   145                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   146                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   147 00002EEC 89C1                <1>     mov ecx, eax
   148 00002EEE 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   149 00002EF3 C1E80B              <1>     shr eax, 11
   150 00002EF6 803D4AD1FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   151 00002EFD 750B                <1>     jne .ampm
   152 00002EFF E85A000000          <1>     call .printHours
   153 00002F04 E831000000          <1>     call .printMinutes
   154                              <1>     return
    13                              <2> %%_ret:
    14 00002F09 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   155                              <1> .ampm:
   156 00002F0A 3D0C000000          <1>     cmp eax, 12
   157 00002F0F 7713                <1>     ja .pm
   158 00002F11 7416                <1>     je .pm2
   159 00002F13 E846000000          <1>     call .printHours
   160 00002F18 E81D000000          <1>     call .printMinutes
   161 00002F1D B261                <1>     mov dl, "a"
   162 00002F1F B402                <1>     mov ah, 02h
   163 00002F21 CD21                <1>     int 21h
   164                              <1>     return
    13                              <2> %%_ret:
    14 00002F23 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1> .pm:
   166 00002F24 2D0C000000          <1>     sub eax, 12
   167                              <1> .pm2:
   168 00002F29 E830000000          <1>     call .printHours
   169 00002F2E E807000000          <1>     call .printMinutes
   170 00002F33 B270                <1>     mov dl, "p"
   171 00002F35 B402                <1>     mov ah, 02h
   172 00002F37 CD21                <1>     int 21h
   173                              <1>     return
    13                              <2> %%_ret:
    14 00002F39 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   174                              <1> .printMinutes:
   175 00002F3A 8A1503D1FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   176 00002F40 B402                <1>     mov ah, 02h
   177 00002F42 CD21                <1>     int 21h
   178                              <1> 
   179 00002F44 89C8                <1>     mov eax, ecx
   180 00002F46 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   181 00002F4B C1E805              <1>     shr eax, 5
   182                              <1> .printMinutesAlt:
   183 00002F4E 51                  <1>     push rcx
   184 00002F4F E8B4030000          <1>     call getDecimalWord
   185 00002F54 84ED                <1>     test ch, ch ;Do we have an upper digit?
   186 00002F56 7514                <1>     jnz .skipSpace
   187 00002F58 88CD                <1>     mov ch, cl
   188 00002F5A B130                <1>     mov cl, "0"
   189 00002F5C EB0E                <1>     jmp short .skipSpace
   190                              <1> .printHours:
   191 00002F5E 51                  <1>     push rcx
   192 00002F5F E8A4030000          <1>     call getDecimalWord
   193 00002F64 84ED                <1>     test ch, ch ;Do we have an upper digit?
   194 00002F66 7504                <1>     jnz .skipSpace
   195 00002F68 88CD                <1>     mov ch, cl
   196 00002F6A B120                <1>     mov cl, " "
   197                              <1> .skipSpace:
   198 00002F6C 88CA                <1>     mov dl, cl
   199 00002F6E B402                <1>     mov ah, 02h
   200 00002F70 CD21                <1>     int 21h
   201 00002F72 88EA                <1>     mov dl, ch
   202 00002F74 B402                <1>     mov ah, 02h
   203 00002F76 CD21                <1>     int 21h
   204 00002F78 59                  <1>     pop rcx
   205                              <1>     return
    13                              <2> %%_ret:
    14 00002F79 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   206                              <1> 
   207                              <1> 
   208                              <1> putVersionInPrompt:
   209 00002F7A 488D1594DAFFFF      <1>     lea rdx, dosVer
   210 00002F81 B409                <1>     mov ah, 09h ;Print String
   211 00002F83 CD21                <1>     int 21h
   212 00002F85 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   213 00002F87 CD21                <1>     int 21h
   214 00002F89 50                  <1>     push rax    ;Save minor version
   215 00002F8A E8B0000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   216 00002F8F E8C8000000          <1>     call printPackedBCD ;Print al
   217 00002F94 B22E                <1>     mov dl, "."
   218 00002F96 B402                <1>     mov ah, 02h
   219 00002F98 CD21                <1>     int 21h
   220 00002F9A 58                  <1>     pop rax
   221 00002F9B 88E0                <1>     mov al, ah  ;Get the minor version low
   222 00002F9D E89D000000          <1>     call hexToBCD
   223 00002FA2 E8B5000000          <1>     call printPackedBCD
   224                              <1>     return
    13                              <2> %%_ret:
    14 00002FA7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   225                              <1> putEscInPrompt:
   226 00002FA8 B21B                <1>     mov dl, ESC
   227 00002FAA EB1D                <1>     jmp short outChar
   228                              <1> 
   229                              <1> putMoneyInPrompt:
   230 00002FAC B224                <1>     mov dl, "$"
   231 00002FAE EB19                <1>     jmp short outChar
   232                              <1> 
   233                              <1> putEquInPrompt:
   234 00002FB0 B23D                <1>     mov dl, "="
   235 00002FB2 EB15                <1>     jmp short outChar
   236                              <1> 
   237                              <1> putPipeInPrompt:
   238 00002FB4 B27C                <1>     mov dl, "|"
   239 00002FB6 EB11                <1>     jmp short outChar
   240                              <1> 
   241                              <1> putGTinPrompt:
   242 00002FB8 B23E                <1>     mov dl, ">"
   243 00002FBA EB0D                <1>     jmp short outChar
   244                              <1> 
   245                              <1> putLTinPrompt:
   246 00002FBC B23C                <1>     mov dl, "<"
   247 00002FBE EB09                <1>     jmp short outChar
   248                              <1> 
   249                              <1> putDriveInPrompt:
   250 00002FC0 E8CF000000          <1>     call getCurrentDrive
   251 00002FC5 0441                <1>     add al, "A" ;Convert to letter
   252 00002FC7 88C2                <1>     mov dl, al
   253                              <1> outChar:
   254 00002FC9 B402                <1>     mov ah, 02h ;Echo to STDOUT
   255 00002FCB CD21                <1>     int 21h
   256                              <1>     return
    13                              <2> %%_ret:
    14 00002FCD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   257                              <1> putCWDInPrompt:
   258 00002FCE E8C1000000          <1>     call getCurrentDrive
   259 00002FD3 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   260 00002FD5 FEC2                <1>     inc dl
   261 00002FD7 0441                <1>     add al, "A" ;Convert to letter
   262 00002FD9 B43A                <1>     mov ah, ":"
   263 00002FDB 488D3D7AD0FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   264 00002FE2 66AB                <1>     stosw   ;Store X:, rdi+=2
   265 00002FE4 8A0541D0FFFF        <1>     mov al, byte [pathSep]
   266 00002FEA AA                  <1>     stosb   ;Store pathSep, inc rdi
   267 00002FEB B447                <1>     mov ah, 47h ;Get Current Working Directory
   268 00002FED 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   269 00002FF0 CD21                <1>     int 21h
   270 00002FF2 721F                <1>     jc .badDrive
   271 00002FF4 E8B9000000          <1>     call strlen
   272 00002FF9 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   273                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   274 00002FFF B800400000          <1>     mov eax, 4000h ;Write to handle
   275 00003004 BB01000000          <1>     mov ebx, 1  ;STDOUT
   276 00003009 488D154CD0FFFF      <1>     lea rdx, currDirStr
   277 00003010 CD21                <1>     int 21h
   278                              <1>     return
    13                              <2> %%_ret:
    14 00003012 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   279                              <1> .badDrive:
   280                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   281 00003013 488D15C3DAFFFF      <1>     lea rdx, badDrvMsg
   282 0000301A E8A3FDFFFF          <1>     call printString
   283                              <1>     return
    13                              <2> %%_ret:
    14 0000301F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   284                              <1> 
   285                              <1> BCDtoHex:
   286                              <1> ;Converts a BCD value to a Hex byte
   287                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   288 00003020 51                  <1>     push rcx
   289 00003021 0FB6C0              <1>     movzx eax, al   ;Zero extend
   290 00003024 89C1                <1>     mov ecx, eax    ;Save al in ecx
   291 00003026 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   292 0000302B 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   293 00003031 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   294                              <1> .bth:
   295 00003034 050A000000          <1>     add eax, 10
   296 00003039 FFC9                <1>     dec ecx
   297 0000303B 75F7                <1>     jnz .bth
   298 0000303D 59                  <1>     pop rcx
   299 0000303E C3                  <1>     ret
   300                              <1> 
   301                              <1> hexToBCD:
   302                              <1> ;Converts a Hex byte into two BCD digits
   303                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   304 0000303F 51                  <1>     push rcx
   305 00003040 0FB6C0              <1>     movzx eax, al   ;Zero extend
   306 00003043 31C9                <1>     xor ecx, ecx
   307                              <1> .htb0:
   308 00003045 3D0A000000          <1>     cmp eax, 10
   309 0000304A 7209                <1>     jb .htb1
   310 0000304C 2D0A000000          <1>     sub eax, 10
   311 00003051 FFC1                <1>     inc ecx
   312 00003053 EBF0                <1>     jmp short .htb0
   313                              <1> .htb1:
   314 00003055 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   315 00003058 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   316 0000305A 59                  <1>     pop rcx
   317 0000305B C3                  <1>     ret
   318                              <1> 
   319                              <1> printPackedBCD:
   320                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   321                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   322                              <1> ;Preserves all registers
   323 0000305C 50                  <1>     push rax
   324 0000305D 52                  <1>     push rdx
   325 0000305E 88C4                <1>     mov ah, al
   326 00003060 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   327 00003062 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   328 00003065 7508                <1>     jnz .upperNybble
   329 00003067 B220                <1>     mov dl, " "
   330 00003069 B402                <1>     mov ah, 02h
   331 0000306B CD21                <1>     int 21h
   332 0000306D EB0E                <1>     jmp short .lowerNybble
   333                              <1> .upperNybble:
   334 0000306F 50                  <1>     push rax
   335 00003070 C0EC04              <1>     shr ah, 4
   336 00003073 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   337 00003076 88E2                <1>     mov dl, ah
   338 00003078 B402                <1>     mov ah, 02h ;Print DL
   339 0000307A CD21                <1>     int 21h
   340 0000307C 58                  <1>     pop rax
   341                              <1> .lowerNybble:
   342 0000307D 0430                <1>     add al, "0"
   343 0000307F 88C2                <1>     mov dl, al
   344 00003081 B402                <1>     mov ah, 02h ;Print DL
   345 00003083 CD21                <1>     int 21h
   346 00003085 5A                  <1>     pop rdx
   347 00003086 58                  <1>     pop rax
   348                              <1>     return
    13                              <2> %%_ret:
    14 00003087 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   349                              <1> 
   350                              <1> setDrive:
   351                              <1> ;Input: dl = 0 based Drive number to set to
   352                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   353                              <1> ;AX trashed.
   354 00003088 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   355 0000308A CD21                <1>     int 21h 
   356 0000308C E803000000          <1>     call getCurrentDrive
   357 00003091 38D0                <1>     cmp al, dl  ;Is this the same drive?
   358                              <1>     return
    13                              <2> %%_ret:
    14 00003093 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   359                              <1> getCurrentDrive:
   360                              <1> ;Returns the 0 based current drive in al
   361 00003094 B419                <1>     mov ah, 19h
   362 00003096 CD21                <1>     int 21h
   363                              <1>     return
    13                              <2> %%_ret:
    14 00003098 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   364                              <1> 
   365                              <1> strcpy:
   366                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   367                              <1> ;rsi -> Source
   368                              <1> ;rdi -> Destination
   369 00003099 51                  <1>     push rcx
   370 0000309A 57                  <1>     push rdi
   371 0000309B 4889F7              <1>     mov rdi, rsi
   372 0000309E E80F000000          <1>     call strlen ;Get the length of the string in rsi
   373 000030A3 5F                  <1>     pop rdi
   374 000030A4 F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   375 000030A6 59                  <1>     pop rcx
   376                              <1>     return
    13                              <2> %%_ret:
    14 000030A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   377                              <1> 
   378                              <1> strcpy2:
   379                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   380                              <1> ;rsi -> Source
   381                              <1> ;rdi -> Destination
   382 000030A8 56                  <1>     push rsi
   383 000030A9 57                  <1>     push rdi
   384 000030AA E8EAFFFFFF          <1>     call strcpy 
   385 000030AF 5F                  <1>     pop rdi
   386 000030B0 5E                  <1>     pop rsi
   387                              <1>     return
    13                              <2> %%_ret:
    14 000030B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   388                              <1> 
   389                              <1> strlen:
   390                              <1> ;Gets the length of a ASCIIZ string
   391                              <1> ;Input: rdi = Source buffer
   392                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   393 000030B2 50                  <1>     push rax
   394 000030B3 B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   395 000030B8 CD2F                <1>     int 2fh
   396 000030BA 58                  <1>     pop rax
   397                              <1>     return
    13                              <2> %%_ret:
    14 000030BB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> ucChar:
   400                              <1> ;Input: al = Char to uppercase
   401                              <1> ;Output: al = Adjusted char 
   402 000030BC 53                  <1>     push rbx
   403 000030BD 4889E3              <1>     mov rbx, rsp    ;Save the stack ptr
   404 000030C0 50                  <1>     push rax    ;Push the char twice on the stack
   405 000030C1 50                  <1>     push rax
   406 000030C2 B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   407 000030C7 CD2F                <1>     int 2fh         ;Returns the processed char in al
   408 000030C9 4889DC              <1>     mov rsp, rbx    ;Return the stack ptr to where it was
   409 000030CC 5B                  <1>     pop rbx
   410                              <1>     return
    13                              <2> %%_ret:
    14 000030CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   411                              <1> 
   412                              <1> skipDelimiters:
   413                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   414                              <1> ; command delimiters but a subset thereof. 
   415                              <1> ;These are the same across all codepages.
   416                              <1> ;Input: rsi must point to the start of the data string
   417                              <1> ;Output: rsi points to the first non-delimiter char
   418 000030CE 50                  <1>     push rax
   419                              <1> .l1:
   420 000030CF AC                  <1>     lodsb
   421 000030D0 E807000000          <1>     call isALdelimiter
   422 000030D5 74F8                <1>     jz .l1
   423                              <1> .exit:
   424 000030D7 58                  <1>     pop rax
   425 000030D8 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   426                              <1>     return
    13                              <2> %%_ret:
    14 000030DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   427                              <1> 
   428                              <1> isALdelimiter:
   429                              <1> ;Returns: ZF=NZ if al is not a command separator 
   430                              <1> ;         ZF=ZE if al is a command separator
   431 000030DC 3C20                <1>     cmp al, " "
   432                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000030DE 74(DB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   433 000030E0 3C3B                <1>     cmp al, ";"
   434                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000030E2 74(DB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   435 000030E4 3C3D                <1>     cmp al, "="
   436                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000030E6 74(DB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   437 000030E8 3C2C                <1>     cmp al, ","
   438                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000030EA 74(DB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   439 000030EC 3C09                <1>     cmp al, TAB
   440                              <1>     return
    13                              <2> %%_ret:
    14 000030EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   441                              <1> 
   442                              <1> printPrompt:
   443 000030EF 66813D31CFFFFFFFFF  <1>     cmp word [promptPtr], -1
   444 000030F8 750B                <1>     jne .validPrompt
   445                              <1>     ;Here we print the default prompt
   446 000030FA E8CFFEFFFF          <1>     call putCWDInPrompt
   447 000030FF E8B4FEFFFF          <1>     call putGTinPrompt
   448                              <1>     return
    13                              <2> %%_ret:
    14 00003104 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   449                              <1> .validPrompt:
   450                              <1>     return
    13                              <2> %%_ret:
    14 00003105 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   451                              <1> 
   452                              <1> clearCommandState:
   453                              <1> ;Clears the command state
   454 00003106 488D3DA7CFFFFF      <1>     lea rdi, cmdStatePtr
   455 0000310D B90C000000          <1>     mov ecx, cmdStateL
   456 00003112 31C0                <1>     xor eax, eax
   457 00003114 F3AA                <1>     rep stosb
   458 00003116 C70596CFFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   458 0000311F FF                  <1>
   459                              <1>     return
    13                              <2> %%_ret:
    14 00003120 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   460                              <1> 
   461                              <1> clearCommandLineState:
   462                              <1> ;Clears the command line state after a 0Dh encountered
   463 00003121 488D3D77CFFFFF      <1>     lea rdi, cmdLineStatePtr
   464 00003128 B921000000          <1>     mov ecx, cmdLineStateL
   465 0000312D 31C0                <1>     xor eax, eax
   466 0000312F F3AA                <1>     rep stosb
   467 00003131 C70575CFFFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   467 0000313A FF                  <1>
   468 0000313B C70571CFFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   468 00003144 FF                  <1>
   469                              <1>     return
    13                              <2> %%_ret:
    14 00003145 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   470                              <1> 
   471                              <1> asciiToFCB:
   472                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   473                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   474                              <1> ;Also doesn't check if chars are valid
   475                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   476                              <1> ;Name is space padded.
   477                              <1> ;Input: rsi = ASCII string buffer
   478                              <1> ;       rdi = FCB name buffer
   479                              <1> ;Output: al = Char that terminated the source string 
   480 00003146 53                  <1>     push rbx    
   481 00003147 57                  <1>     push rdi
   482 00003148 B90B000000          <1>     mov ecx, 11
   483 0000314D B020                <1>     mov al, " "
   484 0000314F F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   485 00003151 5F                  <1>     pop rdi
   486 00003152 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   487 00003155 EB1D                <1>     jmp short asciiFilenameToFCB.processName
   488                              <1> asciiFilenameToFCB:
   489                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   490                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   491                              <1> ;Also doesn't check if chars are valid
   492                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   493                              <1> ;Name is space padded.
   494                              <1> ;Input: rsi = ASCII string buffer
   495                              <1> ;       rdi = FCB name buffer
   496                              <1> ;Output: al = Char that terminated the source string 
   497 00003157 53                  <1>     push rbx    
   498 00003158 57                  <1>     push rdi
   499 00003159 B90B000000          <1>     mov ecx, 11
   500 0000315E B020                <1>     mov al, " "
   501 00003160 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   502 00003162 5F                  <1>     pop rdi
   503 00003163 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   504                              <1>     ;Preprocess for Dir Searches
   505 00003166 803E2E              <1>     cmp byte [rsi], "."
   506 00003169 7509                <1>     jne .processName
   507 0000316B A4                  <1>     movsb   ;Store the first dot
   508 0000316C 803E2E              <1>     cmp byte [rsi], "."
   509 0000316F 752C                <1>     jne .exitBadChar
   510 00003171 A4                  <1>     movsb
   511 00003172 EB29                <1>     jmp short .exitBadChar
   512                              <1> .processName:
   513 00003174 AC                  <1>     lodsb   ;Get the char in al
   514 00003175 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   515 00003177 7426                <1>     jz .exit
   516 00003179 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   517 0000317B 7407                <1>     je .extSpace
   518 0000317D 3C2E                <1>     cmp al, "."
   519 0000317F 740C                <1>     je .ext
   520 00003181 AA                  <1>     stosb   ;Store the char
   521 00003182 EBF0                <1>     jmp short .processName
   522                              <1> .extSpace:
   523                              <1> ;Now we scan for a period in the name
   524 00003184 AC                  <1>     lodsb   ;Get a char and increase rsi
   525 00003185 84C0                <1>     test al, al
   526 00003187 7416                <1>     jz .exit
   527 00003189 3C2E                <1>     cmp al, "."     ;If al is not a period...
   528 0000318B 75F7                <1>     jne .extSpace   ; keep searching
   529                              <1> .ext:
   530 0000318D 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   531                              <1> .processExt:
   532 00003191 AC                  <1>     lodsb
   533 00003192 84C0                <1>     test al, al
   534 00003194 7409                <1>     jz .exit
   535 00003196 3C20                <1>     cmp al, " "
   536 00003198 7405                <1>     je .exit
   537 0000319A AA                  <1>     stosb
   538 0000319B EBF4                <1>     jmp short .processExt
   539                              <1> .exitBadChar:
   540 0000319D 30C0                <1>     xor al, al  ;Return a null terminator
   541                              <1> .exit:
   542 0000319F 5B                  <1>     pop rbx
   543                              <1>     return
    13                              <2> %%_ret:
    14 000031A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   544                              <1> 
   545                              <1> findLastPathComponant:
   546                              <1> ;Finds the last path componant of an ASCIIZ path string
   547                              <1> ;Input: rdi -> Head of the path to find last componant on
   548                              <1> ;Output: rdi -> Start of the last componant
   549 000031A1 50                  <1>     push rax
   550 000031A2 51                  <1>     push rcx
   551 000031A3 31C9                <1>     xor ecx, ecx
   552 000031A5 FFC9                <1>     dec ecx
   553 000031A7 31C0                <1>     xor eax, eax
   554 000031A9 F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   555 000031AB F7D1                <1>     not ecx     ;This gets the count of chars  
   556 000031AD 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   557 000031B0 8A0575CEFFFF        <1>     mov al, byte [pathSep]
   558 000031B6 FD                  <1>     std
   559 000031B7 F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   560 000031B9 FC                  <1>     cld
   561 000031BA 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   562 000031BC 48FFC7              <1>     inc rdi     ;Point at pathsep
   563                              <1> .exit:
   564 000031BF 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   565 000031C2 59                  <1>     pop rcx
   566 000031C3 58                  <1>     pop rax
   567                              <1>     return
    13                              <2> %%_ret:
    14 000031C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   568                              <1> 
   569                              <1> FCBToAsciiz:
   570                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   571                              <1> ;Name is space padded too
   572                              <1> ;Input: rsi = FCB name buffer
   573                              <1> ;       rdi = ASCIIZ string buffer
   574 000031C5 B908000000          <1>     mov ecx, 8
   575 000031CA F3A4                <1>     rep movsb   ;Move the name over
   576                              <1> .scanNameSpace:
   577 000031CC 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   578 000031D0 750D                <1>     jne .ext
   579 000031D2 48FFCF              <1>     dec rdi
   580 000031D5 FFC1                <1>     inc ecx
   581 000031D7 81F908000000        <1>     cmp ecx, 8
   582 000031DD 72ED                <1>     jb .scanNameSpace
   583                              <1> .ext:
   584 000031DF 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   585 000031E4 7506                <1>     jne .validExt
   586 000031E6 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   587 000031EA 7415                <1>     je .exit
   588                              <1> .validExt:
   589 000031EC B02E                <1>     mov al, "." ;We have a valid extension, store a period
   590 000031EE AA                  <1>     stosb
   591 000031EF B903000000          <1>     mov ecx, 3
   592 000031F4 F3A4                <1>     rep movsb   ;Move the three extension chars over
   593                              <1> .scanExtSpace:
   594 000031F6 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   595 000031FA 7505                <1>     jne .exit
   596 000031FC 48FFCF              <1>     dec rdi
   597 000031FF EBF5                <1>     jmp short .scanExtSpace
   598                              <1> .exit:
   599 00003201 31C0                <1>     xor eax, eax
   600 00003203 AA                  <1>     stosb   ;Store a null at the end
   601                              <1>     return
    13                              <2> %%_ret:
    14 00003204 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   602                              <1> 
   603                              <1> cpDelimOrCtrlStringToBufz:
   604                              <1> ;Copy a delimited or control char terminated string to a buffer
   605                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   606                              <1> ;       rdi -> Buffer to store null terminated string in
   607                              <1> ;Output: rsi -> First char past string end
   608                              <1> ;       rdi -> One char past null terminator on string buffer
   609 00003205 C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   610                              <1> .lp:
   611 00003208 AC                  <1>     lodsb
   612 00003209 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here
   613 0000320B 760A                <1>     jbe .exit
   614 0000320D E8CAFEFFFF          <1>     call isALdelimiter
   615 00003212 7403                <1>     je .exit
   616 00003214 AA                  <1>     stosb
   617 00003215 EBF1                <1>     jmp short .lp
   618                              <1> .exit:
   619 00003217 31C0                <1>     xor eax, eax
   620 00003219 AA                  <1>     stosb   ;Store a null terminator
   621                              <1>     return
    13                              <2> %%_ret:
    14 0000321A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   622                              <1> 
   623                              <1> 
   624                              <1> cpDelimPathToBufz:
   625                              <1> ;Copy a delimited path into buffer and null terminate.
   626                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   627                              <1> ;       rdi -> Buffer to store null terminated path in
   628                              <1> ;Output: rsi -> First char past pathname delimiter
   629                              <1> ;       rdi -> One char past null terminator on pathname buffer
   630 0000321B 53                  <1>     push rbx
   631 0000321C 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   632 0000321F C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   633                              <1> .lp:
   634 00003222 AC                  <1>     lodsb   ;Get the char
   635 00003223 3C0D                <1>     cmp al, CR
   636 00003225 7412                <1>     je .gotRedirPath
   637 00003227 E8B0FEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   638 0000322C 740B                <1>     jz .gotRedirPath 
   639 0000322E 3A05F8CDFFFF        <1>     cmp al, byte [switchChar]
   640 00003234 7403                <1>     je .gotRedirPath
   641 00003236 AA                  <1>     stosb   ;Store this char and loop next char
   642 00003237 EBE9                <1>     jmp short .lp
   643                              <1> .gotRedirPath:
   644 00003239 50                  <1>     push rax    ;Save the char on stack
   645 0000323A 30C0                <1>     xor al, al  ;Get null terminator char
   646 0000323C 4829FB              <1>     sub rbx, rdi
   647 0000323F 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   648 00003246 7412                <1>     je .notColon
   649 00003248 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   650 0000324F 7409                <1>     je .notColon
   651 00003251 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   652 00003255 7503                <1>     jne .notColon
   653 00003257 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   654                              <1> .notColon:
   655 0000325A AA                  <1>     stosb   ;Store the null terminator for the redir path
   656 0000325B 58                  <1>     pop rax ;Get back the char in al
   657 0000325C 5B                  <1>     pop rbx
   658                              <1>     return
    13                              <2> %%_ret:
    14 0000325D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   659                              <1> 
   660                              <1> buildCommandPath:
   661                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   662 0000325E 0FB60556CEFFFF      <1>     movzx eax, byte [arg1Off]
   663 00003265 4C8B05A3CDFFFF      <1>     mov r8, [pspPtr]
   664 0000326C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   665 00003273 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   666                              <1> copyArgumentToSearchSpec:
   667                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   668                              <1> ; and null terminates
   669 00003276 488D3D4BD1FFFF      <1>     lea rdi, searchSpec
   670 0000327D E899FFFFFF          <1>     call cpDelimPathToBufz
   671                              <1>     return
    13                              <2> %%_ret:
    14 00003282 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   672                              <1> 
   673                              <1> scanForWildcards:
   674                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   675                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   676 00003283 50                  <1>     push rax
   677 00003284 56                  <1>     push rsi
   678                              <1> .lp:
   679 00003285 AC                  <1>     lodsb
   680 00003286 3C3F                <1>     cmp al, "?"
   681 00003288 740A                <1>     je .exit
   682 0000328A 3C2A                <1>     cmp al, "*"
   683 0000328C 7406                <1>     je .exit
   684 0000328E 84C0                <1>     test al, al
   685 00003290 75F3                <1>     jnz .lp
   686 00003292 FEC0                <1>     inc al  ;This will clear the ZF
   687                              <1> .exit:
   688 00003294 5E                  <1>     pop rsi
   689 00003295 58                  <1>     pop rax
   690                              <1>     return
    13                              <2> %%_ret:
    14 00003296 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   691                              <1> 
   692                              <1> printDecimalWord:
   693                              <1> ;Takes qword in rax and print it's decimal representation
   694                              <1> ;Takes the qword in eax and prints its decimal representation
   695 00003297 31C9                <1>     xor ecx, ecx
   696 00003299 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   697 0000329B 85C0                <1>     test eax, eax
   698 0000329D 750C                <1>     jnz .notZero
   699 0000329F B930000000          <1>     mov ecx, "0"
   700 000032A4 BD01000000          <1>     mov ebp, 1  ;Print one digit
   701 000032A9 EB3E                <1>     jmp short .dpfb2
   702                              <1> .notZero:
   703 000032AB 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   704 000032AD BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   705                              <1> .dpfb0:
   706 000032B2 FFC5                <1>     inc ebp
   707 000032B4 81FD08000000        <1>     cmp ebp, 8
   708 000032BA 7206                <1>     jb .dpfb00
   709 000032BC 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   710 000032C0 EB04                <1>     jmp short .dpfb01
   711                              <1> .dpfb00:
   712 000032C2 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   713                              <1> .dpfb01:
   714 000032C6 31D2                <1>     xor edx, edx
   715 000032C8 48F7F6              <1>     div rsi
   716 000032CB 80C230              <1>     add dl, '0'
   717 000032CE 80FA39              <1>     cmp dl, '9'
   718 000032D1 7603                <1>     jbe .dpfb1
   719 000032D3 80C207              <1>     add dl, 'A'-'0'-10
   720                              <1> .dpfb1:
   721 000032D6 81FD08000000        <1>     cmp ebp, 8
   722 000032DC 7204                <1>     jb .dpfb10
   723 000032DE 88D3                <1>     mov bl, dl ;Add the bottom bits
   724 000032E0 EB02                <1>     jmp short .dpfb11
   725                              <1> .dpfb10:
   726 000032E2 88D1                <1>     mov cl, dl    ;Save remainder byte
   727                              <1> .dpfb11:
   728 000032E4 4885C0              <1>     test rax, rax
   729 000032E7 75C9                <1>     jnz .dpfb0
   730                              <1> .dpfb2:
   731 000032E9 81FD08000000        <1>     cmp ebp, 8
   732 000032EF 7208                <1>     jb .dpfb20
   733 000032F1 88DA                <1>     mov dl, bl
   734 000032F3 48C1EB08            <1>     shr rbx, 8
   735 000032F7 EB06                <1>     jmp short .dpfb21
   736                              <1> .dpfb20:
   737 000032F9 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   738 000032FB 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   739                              <1> .dpfb21:
   740 000032FF B402                <1>     mov ah, 02h
   741 00003301 CD21                <1>     int 21h
   742 00003303 FFCD                <1>     dec ebp
   743 00003305 75E2                <1>     jnz .dpfb2
   744                              <1>     return
    13                              <2> %%_ret:
    14 00003307 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   745                              <1> 
   746                              <1> getDecimalWord:
   747                              <1> ;Works on MAX A dword in eax
   748                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   749 00003308 31C9                <1>     xor ecx, ecx
   750 0000330A 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   751 0000330C BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   752                              <1> .dpfb0:
   753 00003311 FFC5                <1>     inc ebp
   754 00003313 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   755 00003317 31D2                <1>     xor edx, edx
   756 00003319 48F7F3              <1>     div rbx
   757 0000331C 80C230              <1>     add dl, '0'
   758 0000331F 80FA39              <1>     cmp dl, '9'
   759 00003322 7603                <1>     jbe .dpfb1
   760 00003324 80C207              <1>     add dl, 'A'-'0'-10
   761                              <1> .dpfb1:
   762 00003327 88D1                <1>     mov cl, dl    ;Save remainder byte
   763 00003329 4885C0              <1>     test rax, rax
   764 0000332C 75E3                <1>     jnz .dpfb0
   765                              <1>     return
    13                              <2> %%_ret:
    14 0000332E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   766                              <1> 
   767                              <1> freezePC:
   768 0000332F 488D15E8D9FFFF      <1>     lea rdx, memBad1
   769 00003336 B409                <1>     mov ah, 09h
   770 00003338 CD21                <1>     int 21h
   771                              <1> .altEP:
   772 0000333A 488D1506DAFFFF      <1>     lea rdx, memBad3
   773 00003341 B409                <1>     mov ah, 09h
   774 00003343 CD21                <1>     int 21h
   775                              <1> .lp:
   776 00003345 F390                <1>     pause
   777 00003347 F4                  <1>     hlt
   778 00003348 EBFB                <1>     jmp short .lp
   779                              <1> 
   780                              <1> setDTA:
   781 0000334A 50                  <1>     push rax
   782 0000334B 52                  <1>     push rdx
   783 0000334C 488D157DCDFFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   784 00003353 B8001A0000          <1>     mov eax, 1A00h
   785 00003358 CD21                <1>     int 21h
   786 0000335A 5A                  <1>     pop rdx
   787 0000335B 58                  <1>     pop rax
   788                              <1>     return
    13                              <2> %%_ret:
    14 0000335C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   789                              <1> 
   790                              <1> getDTA:
   791 0000335D 488D156CCDFFFF      <1>     lea rdx, cmdFFBlock
   792                              <1>     return
    13                              <2> %%_ret:
    14 00003364 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   793                              <1> 
   794                              <1> ;-------------------------------
   795                              <1> ; Environment utility functions
   796                              <1> ;-------------------------------
   797                              <1> 
   798                              <1> cmpEnvVar:
   799                              <1> ;Checks that we have found the environment variable we are looking for.
   800                              <1> ;Input: rsi -> Environment var to verify the name of
   801                              <1> ;       rdi -> Environment var name to compare against
   802                              <1> ;       ecx = Length of the environment variable
   803                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
   804 00003365 56                  <1>     push rsi
   805 00003366 57                  <1>     push rdi
   806 00003367 51                  <1>     push rcx
   807 00003368 F3A6                <1>     rep cmpsb
   808 0000336A 59                  <1>     pop rcx
   809 0000336B 5F                  <1>     pop rdi
   810 0000336C 5E                  <1>     pop rsi
   811                              <1>     return
    13                              <2> %%_ret:
    14 0000336D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   812                              <1> 
   813                              <1> checkEnvGoodAndGet:
   814                              <1> ;Gets the env ptr and checks that it is double null terminated.
   815                              <1> ;Output:
   816                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
   817                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
   818                              <1> ;           rsi -> Environment pointer
   819 0000336E 50                  <1>     push rax
   820 0000336F 51                  <1>     push rcx
   821 00003370 57                  <1>     push rdi
   822 00003371 4150                <1>     push r8
   823 00003373 4C8B0595CCFFFF      <1>     mov r8, qword [pspPtr]
   824 0000337A 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
   825 0000337E 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
   826 00003381 741A                <1>     jz .badExit
   827 00003383 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
   828 00003386 C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
   829                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
   830 00003389 31C0                <1>     xor eax, eax
   831                              <1> .pathNulScan:
   832 0000338B F2AE                <1>     repne scasb
   833 0000338D 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
   834 0000338F 740C                <1>     jz .badExit
   835 00003391 3807                <1>     cmp byte [rdi], al  ;Is char two null?
   836 00003393 75F6                <1>     jne .pathNulScan    ;If not, keep searching
   837 00003395 31C0                <1>     xor eax, eax
   838 00003397 FFC0                <1>     inc eax ;Clear the ZF
   839 00003399 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
   840                              <1> .badExit:
   841 0000339D 4158                <1>     pop r8
   842 0000339F 5F                  <1>     pop rdi
   843 000033A0 59                  <1>     pop rcx
   844 000033A1 58                  <1>     pop rax
   845                              <1>     return
    13                              <2> %%_ret:
    14 000033A2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   846                              <1> 
   847                              <1> allocEnv:
   848                              <1> ;Allocates space in the environment. Assumes environment is good.
   849                              <1> ;Input: ecx = Number of bytes to allocate
   850                              <1> ;Output: CF=NC: rsi -> Start of alloc region
   851                              <1> ;        CF=CY: Not enough space to alloc
   852                              <1> 
   853                              <1> freeEnv:
   854                              <1> ;Frees space in the environment by zeroing all allocated chars.
   855                              <1> ;Input: rdi -> Byte to start zeroing from.
   856                              <1> ;Output: All bytes from rdi to first null zero. rdi trashed.
   857 000033A3 50                  <1>     push rax
   858 000033A4 31C0                <1>     xor eax, eax
   859                              <1> .lp:
   860 000033A6 3807                <1>     cmp byte [rdi], al
   861 000033A8 7403                <1>     je .exit
   862 000033AA AA                  <1>     stosb
   863 000033AB EBF9                <1>     jmp short .lp
   864                              <1> .exit:
   865 000033AD 58                  <1>     pop rax
   866                              <1>     return
    13                              <2> %%_ret:
    14 000033AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   867                              <1> 
   868                              <1> findEnvSpace:
   869                              <1> ;Searches the environment for space
    19                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 000033AF 53                  <1>     push rbx
    25 000033B0 51                  <1>     push rcx
    26 000033B1 52                  <1>     push rdx
    27 000033B2 57                  <1>     push rdi
    28 000033B3 56                  <1>     push rsi
    29 000033B4 FC                  <1>     cld         ;Make String ops go forward
    30                              <1> 
    31 000033B5 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 000033B8 488D15E3D3FFFF      <1>     lea rdx, crlf
    33 000033BF E8FEF9FFFF          <1>     call printString
    34                              <1> 
    35 000033C4 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    36 000033CA B90C000000          <1>     mov ecx, 0Ch
    37 000033CF 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    38 000033D1 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    39 000033D4 480FB7FF            <1>     movzx rdi, di
    40 000033D8 4889FA              <1>     mov rdx, rdi    ;Copy error code
    41 000033DB 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    42 000033DF 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    43 000033E2 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    44 000033E5 488D152D010000      <1>     lea rdx, qword [.errorMsgTable]
    45 000033EC 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    46 000033F0 E8CDF9FFFF          <1>     call printString     ;Call DOS to print first part of message
    47                              <1> 
    48 000033F5 488D150E020000      <1>     lea rdx, qword [.readmsg]
    49 000033FC 488D3D16020000      <1>     lea rdi, qword [.writemsg]
    50 00003403 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    51 00003406 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    52 0000340A E8B3F9FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
    53                              <1> 
    54 0000340F F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    55 00003412 0F85E7000000        <1>     jnz .charError
    56                              <1> ;Disk error continues here
    57 00003418 488D15E4010000      <1>     lea rdx, qword [.drive] ;Drive message
    58 0000341F E89EF9FFFF          <1>     call printString
    59 00003424 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    60 00003426 80C241              <1>     add dl, "A" ;Add ASCII code
    61 00003429 B402                <1>     mov ah, 02h ;Print char in dl
    62 0000342B CD21                <1>     int 21h
    63                              <1> .userInput:
    64 0000342D E889F9FFFF          <1>     call printCRLF  ;Print new line
    65                              <1> ;Abort, Retry, Ignore, Fail is word order
    66                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    67                              <1> .userAbort:
    68                              <1> ;Abort is always an option
    69 00003432 488D15EF010000      <1>     lea rdx, qword [.abortmsg]
    70 00003439 E884F9FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
    71                              <1> .userRetry:
    72 0000343E F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    73 00003441 7418                <1>     jz .userIgnore    ;If clear, dont print message
    74 00003443 488D15F6010000      <1>     lea rdx, qword [.betweenMsg]
    75 0000344A E873F9FFFF          <1>     call printString
    76 0000344F 488D15DF010000      <1>     lea rdx, qword [.retrymsg]
    77 00003456 E867F9FFFF          <1>     call printString
    78                              <1> .userIgnore:
    79 0000345B F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    80 0000345E 7418                <1>     jz .userFail
    81 00003460 488D15D9010000      <1>     lea rdx, qword [.betweenMsg]
    82 00003467 E856F9FFFF          <1>     call printString
    83 0000346C 488D15BB010000      <1>     lea rdx, qword [.ignoremsg]
    84 00003473 E84AF9FFFF          <1>     call printString
    85                              <1> .userFail:
    86 00003478 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    87 0000347B 7418                <1>     jz .userMsgEnd
    88 0000347D 488D15BC010000      <1>     lea rdx, qword [.betweenMsg]
    89 00003484 E839F9FFFF          <1>     call printString
    90 00003489 488D15AB010000      <1>     lea rdx, qword [.failmsg]
    91 00003490 E82DF9FFFF          <1>     call printString
    92                              <1> .userMsgEnd:
    93 00003495 488D15A7010000      <1>     lea rdx, qword [.endMsg]
    94 0000349C E821F9FFFF          <1>     call printString
    95                              <1> ;Get user input now 
    96 000034A1 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
    97 000034A3 488D3D9C010000      <1>     lea rdi, qword [.responses] ;Go to start of string
    98 000034AA B401                <1>     mov ah, 01h ;STDIN without Console Echo
    99 000034AC CD21                <1>     int 21h ;Get char in al
   100 000034AE 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   101 000034B0 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   102 000034B2 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   103                              <1> .uip1:
   104 000034B4 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   105 000034B5 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   106 000034B7 FFC1                <1>     inc ecx
   107 000034B9 81F904000000        <1>     cmp ecx, 4
   108 000034BF 75F3                <1>     jne .uip1
   109 000034C1 E967FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   110                              <1> .validInput:
   111 000034C6 E8F0F8FFFF          <1>     call printCRLF   ;Note the input was accepted
   112 000034CB 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   113                              <1> ;Now check if the input is permitted
   114 000034CD 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   115 000034CF 7427                <1>     je .cehExit
   116 000034D1 84C0                <1>     test al, al ;Check if 0 => Ignore
   117 000034D3 740F                <1>     je .viIgnore
   118 000034D5 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   119 000034D7 7416                <1>     je .viRetry
   120                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   121 000034D9 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   122 000034DC 0F844BFFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   123 000034E2 EB14                <1>     jmp short .cehExit
   124                              <1> .viIgnore:
   125 000034E4 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   126 000034E7 0F8440FFFFFF        <1>     jz .userInput
   127 000034ED EB09                <1>     jmp short .cehExit
   128                              <1> .viRetry:
   129 000034EF F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   130 000034F2 0F8435FFFFFF        <1>     jz .userInput
   131                              <1> .cehExit:
   132 000034F8 5E                  <1>     pop rsi
   133 000034F9 5F                  <1>     pop rdi
   134 000034FA 5A                  <1>     pop rdx
   135 000034FB 59                  <1>     pop rcx
   136 000034FC 5B                  <1>     pop rbx
   137 000034FD 48CF                <1>     iretq
   138                              <1> .charError:
   139 000034FF B908000000          <1>     mov ecx, 8  ;8 chars in device name
   140 00003504 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   141                              <1> .ce1:
   142 0000350B AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   143 0000350C 88C2                <1>     mov dl, al  ;Move char into dl
   144 0000350E B402                <1>     mov ah, 02h
   145 00003510 CD21                <1>     int 21h ;Print char
   146 00003512 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   147 00003514 E914FFFFFF          <1>     jmp .userInput
   148                              <1> 
   149                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   150 00003519 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   150 00003522 746563742024202020  <1>
   151 0000352B 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   151 00003534 6E6974202420202020  <1>
   152 0000353D 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   152 00003546 202420202020202020  <1>
   153 0000354F 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   153 00003558 6F6D6D616E64202420  <1>
   154 00003561 446174612024202020- <1>             db "Data $            "       ;Error 4
   154 0000356A 202020202020202020  <1>
   155 00003573 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   155 0000357C 737420242020202020  <1>
   156 00003585 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   156 0000358E 202020202020202020  <1>
   157 00003597 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   157 000035A0 656469612024202020  <1>
   158 000035A9 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   158 000035B2 7420466F756E642024  <1>
   159 000035BB 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   159 000035C4 706572202420202020  <1>
   160 000035CD 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   160 000035D6 6C7420242020202020  <1>
   161 000035DF 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   161 000035E8 742024202020202020  <1>
   162 000035F1 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   162 000035FA 61696C757265202420  <1>
   163                              <1> 
   164 00003603 64726976652024      <1> .drive      db "drive $"
   165 0000360A 6572726F7220726561- <1> .readmsg    db "error reading $"
   165 00003613 64696E672024        <1>
   166 00003619 6572726F7220777269- <1> .writemsg   db "error writing $"
   166 00003622 74696E672024        <1>
   167 00003628 41626F727424        <1> .abortmsg   db "Abort$" 
   168 0000362E 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   169 00003635 526574727924        <1> .retrymsg   db "Retry$"
   170 0000363B 4661696C24          <1> .failmsg    db "Fail$"
   171 00003640 2C2024              <1> .betweenMsg db ", $"
   172 00003643 3F2024              <1> .endMsg     db "? $"
   173 00003646 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   174                              <1> 
   175                              <1> int23h:
   176 0000364A F605DCC9FFFFFF      <1>     test byte [permaSwitch], -1
   177 00003651 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   178                              <1>     ;Else, we juggle parent PSP's
   179 00003653 50                  <1>     push rax
   180 00003654 53                  <1>     push rbx
   181 00003655 488B05BBC9FFFF      <1>     mov rax, qword [realParent]
   182 0000365C 488B1DACC9FFFF      <1>     mov rbx, qword [pspPtr]
   183 00003663 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   184 00003667 5B                  <1>     pop rbx
   185 00003668 58                  <1>     pop rax
   186                              <1> .exit:
   187 00003669 F9                  <1>     stc     ;Set CF to kill the task
   188 0000366A C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    20                                  endOfAlloc: ;End of alloc
    21                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    22                                  Segment transient align=1 follows=.data
    23                                  ;This segment always gets ejected post load
    24                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D1508020000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    15 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    16 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    17 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    18                              <1> ;Setup Int 22h, Int 23h and Int 24h
    19 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    20 0000002F 488905(2E000000)    <1>     mov qword [parentInt22], rax
    21                              <1> 
    22 00000036 488D15(AF330000)    <1>     lea rdx, critErrorHandler
    23 0000003D 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    24 00000041 B824250000          <1>     mov eax, 2524h
    25 00000046 CD21                <1>     int 21h
    26 00000048 488D15(4A360000)    <1>     lea rdx, int23h
    27 0000004F 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    28 00000053 B823250000          <1>     mov eax, 2523h
    29 00000058 CD21                <1>     int 21h
    30 0000005A 488D15(F60D0000)    <1>     lea rdx, applicationReturn
    31 00000061 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    32 00000065 B822250000          <1>     mov eax, 2522h
    33 0000006A CD21                <1>     int 21h
    34                              <1> ;Get a pointer to DOS Sysvars
    35 0000006C B452                <1>     mov ah, 52h ;Get sysvars
    36 0000006E CD21                <1>     int 21h
    37 00000070 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    38                              <1> ;Call for simple internationalisation data
    39 00000077 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    40 0000007C CD21                <1>     int 21h
    41 0000007E 3CFF                <1>     cmp al, -1
    42 00000080 7412                <1>     je .skipSwitch
    43 00000082 8815(2C000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    44 00000088 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    45 0000008B 7507                <1>     jne .skipSwitch
    46 0000008D C605(2B000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    47                              <1> .skipSwitch:
    48 00000094 B800380000          <1>     mov eax, 3800h  ;Get current country data
    49 00000099 488D15(36000000)    <1>     lea rdx, ctryData
    50 000000A0 CD21                <1>     int 21h ;Write the data to the internal country table
    51                              <1> ;Now determine if this is the master copy of COMMAND.COM
    52                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    53 000000A2 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    54 000000A7 CD21                <1>     int 21h
    55 000000A9 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    56 000000AC B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    57 000000B1 CD21                <1>     int 21h
    58 000000B3 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    59 000000B6 7574                <1>     jne .skipMaster
    60                              <1> ;Ok so we are master command.com
    61                              <1> ;Now make myself the real parent
    62 000000B8 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    63 000000BF 4C8905(17000000)    <1>     mov qword [realParent], r8
    64                              <1> ;Set current Drive in COMSPEC
    65 000000C6 B800190000          <1>     mov eax, 1900h ;Get current Drive
    66 000000CB CD21                <1>     int 21h
    67 000000CD 0441                <1>     add al, "A"
    68 000000CF 8805(C60D0000)      <1>     mov byte [comspecEvar.cspec], al
    69                              <1> ;Set Int 2Eh up
    70 000000D5 488D15(34160000)    <1>     lea rdx, int2Eh
    71 000000DC B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    72 000000E1 CD21                <1>     int 21h
    73                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    74                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    75 000000E3 BB0A000000          <1>     mov ebx, 10 ;Allocate 160 bytes
    76 000000E8 B800480000          <1>     mov eax, 4800h
    77 000000ED CD21                <1>     int 21h
    78 000000EF 0F821EFFFFFF        <1>     jc .exitBad
    79                              <1> ;Set master environment as mine
    80 000000F5 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    81 000000F9 488D35(BE0D0000)    <1>     lea rsi, masterEnv
    82 00000100 4889C7              <1>     mov rdi, rax
    83 00000103 B925000000          <1>     mov ecx, menv_len
    84 00000108 F3A4                <1>     rep movsb   ;Copy the chars over!
    85                              <1> 
    86 0000010A 488D15(A2070000)    <1>     lea rdx, crlf
    87 00000111 B409                <1>     mov ah, 09h
    88 00000113 CD21                <1>     int 21h
    89 00000115 E8(55200000)        <1>     call time
    90 0000011A E8(8C1F0000)        <1>     call date
    91 0000011F 488D15(A2070000)    <1>     lea rdx, crlf
    92 00000126 B409                <1>     mov ah, 09h
    93 00000128 CD21                <1>     int 21h
    94 0000012A EB2E                <1>     jmp short .printInit
    95                              <1> .skipMaster:
    96 0000012C 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
    97 00000133 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
    98 0000013B 0FB605(2C000000)    <1>     movzx eax, byte [switchChar]
    99 00000142 F2AE                <1>     repne scasb
   100 00000144 67E313              <1>     jecxz .printInit
   101 00000147 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
   102 0000014A E8(BC300000)        <1>     call ucChar
   103 0000014F 3C50                <1>     cmp al, "P" ;Is it permanent switch?
   104 00000151 7507                <1>     jne .printInit
   105 00000153 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
   106                              <1> .printInit:
   107 0000015A 488D1D(6D360000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
   108                              <1> ;Finish by printing INIT string.
   109 00000161 53                  <1>     push rbx
   110 00000162 488D153A000000      <1>     lea rdx, initString
   111 00000169 B409                <1>     mov ah, 09h
   112 0000016B CD21                <1>     int 21h ;Print init string
   113 0000016D E8(0C290000)        <1>     call version.printVersionNumber
   114 00000172 488D1560000000      <1>     lea rdx, initString2
   115 00000179 B409                <1>     mov ah, 09h
   116 0000017B CD21                <1>     int 21h ;Print init string
   117 0000017D 5B                  <1>     pop rbx
   118                              <1>     ;Now we add the stack to the alloc and paragraph align
   119 0000017E 4881C340060000      <1>     add rbx, stackSize
   120 00000185 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   121 0000018C 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   122 00000190 48C1E304            <1>     shl rbx, 4
   123 00000194 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   124 00000197 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   125 0000019E E9(E30D0000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   126                              <1> ;Loader Data here
   127                              <1> initString: 
   128 000001A3 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   128 000001AC 66696320436F6D7075- <1>
   128 000001B5 746572205265736561- <1>
   128 000001BE 726368285229205343- <1>
   128 000001C7 502F444F5328522920- <1>
   128 000001D0 56657273696F6E2024  <1>
   129                              <1> initString2:
   130 000001D9 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",CR,LF,"$"
   130 000001E2 202020284329436F70- <1>
   130 000001EB 797269676874205363- <1>
   130 000001F4 69656E746966696320- <1>
   130 000001FD 436F6D707574657220- <1>
   130 00000206 526573656172636820- <1>
   130 0000020F 323032342E0D0A24    <1>
   131 00000217 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   131 00000220 20444F532076657273- <1>
   131 00000229 696F6E0D0A24        <1>
    25                                  
    26                                  stackSize equ 200*8    ;200 QWORD stack
    26          ------------------       info: assembly required 1+3+2 passes

