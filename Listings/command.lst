     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (41h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> netFCBShare     equ 70h
   160                              <1> noInherit       equ 80h
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> 
   163                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 24h on disk full.
   164                              <1> ;Buffering on writes
   165                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   167                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1> readOnlyFile    equ 1h
   170                              <1> hiddenFile      equ 2h
   171                              <1> systemFile      equ 4h
   172                              <1> volumeLabel     equ 8h
   173                              <1> directoryFile   equ 10h ;Directory entry
   174                              <1> archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1> charDevFastOut  equ 10h ;If set, device supports Int 29h
   182                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   183                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   185                              <1> devCharDev      equ 80h ;If set, it is a char device!
   186                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   190                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1>  
   192                              <1> ;------------------------------------------------------------------------;
   193                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   194                              <1> ; to an internal buffer, and then copying it to the specified location
   195                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   196                              <1> ; another request for the same sector from the same device is made, so 
   197                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   198                              <1> ; size, selected according to the largest detected sector size during 
   199                              <1> ; the initial loadup.
   200                              <1> ;
   201                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   202                              <1> ;
   203                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   204                              <1> ;------------------------------------------------------------------------;
   205                              <1> 
   206                              <1> struc bufferHdr
   207 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   208 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   209 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   210 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   211 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   212 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   213 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   214 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   215 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   216                              <1>     .dataarea:             ;Points to the start of the data area
   217                              <1> endstruc
   218                              <1> ;Buffer Flag equates
   219                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   220                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   221                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   222                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   223                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   224                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   225                              <1> ;Note! A buffer is marked as referenced only when the application 
   226                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   227                              <1> ;------------------------------------------------------------------------;
   228                              <1> ; Memory control block for each memory arena
   229                              <1> ;------------------------------------------------------------------------;
   230                              <1> struc mcb
   231 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   232 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   233 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   234 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   235                              <1>     .program:
   236                              <1> endstruc
   237                              <1> ;MCB equates
   238                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   239                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   240                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   241                              <1> mcbMarkCtn      equ "M"
   242                              <1> mcbMarkEnd      equ "Z"
   243                              <1> 
   244                              <1> memFirstFit     equ 0   ;First free block goes to application
   245                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   246                              <1> memLastFit      equ 2   ;Last free block goes to application
   247                              <1> 
   248                              <1> ;Owner = Para aligned address => Owning application PSP
   249                              <1> ;...To consider...
   250                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   251                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   252                              <1> ;------------------------------------------------------------------------;
   253                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   254                              <1> ; following order, thus allowing for return values to be placed in the 
   255                              <1> ; registers by accessing the caller register stack frame.
   256                              <1> ;------------------------------------------------------------------------;
   257                              <1> struc callerFrame
   258 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   259 00000008 ????????????????    <1>     .rbx    resq 1    
   260 00000010 ????????????????    <1>     .rcx    resq 1
   261 00000018 ????????????????    <1>     .rdx    resq 1
   262 00000020 ????????????????    <1>     .rsi    resq 1
   263 00000028 ????????????????    <1>     .rdi    resq 1
   264 00000030 ????????????????    <1>     .rbp    resq 1
   265 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   266 00000040 ????????????????    <1>     .r9     resq 1
   267                              <1> ;Pushed by Processor when invoked via Interrupt
   268 00000048 ????????????????    <1>     .rip    resq 1
   269 00000050 ????????????????    <1>     .cs     resq 1
   270 00000058 ????????????????    <1>     .flags  resq 1
   271                              <1> endstruc
   272                              <1> 
   273                              <1> struc dpl
   274                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   275                              <1> ; server calls
   276 00000000 ????????????????    <1>     .rax    resq 1
   277 00000008 ????????????????    <1>     .rbx    resq 1
   278 00000010 ????????????????    <1>     .rcx    resq 1
   279 00000018 ????????????????    <1>     .rdx    resq 1
   280 00000020 ????????????????    <1>     .rsi    resq 1
   281 00000028 ????????????????    <1>     .rdi    resq 1
   282 00000030 ????????????????    <1>     .r8     resq 1
   283 00000038 ????????????????    <1>     .r9     resq 1
   284 00000040 ????????????????    <1>     .align  resq 1
   285 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   286 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   287                              <1> endstruc
   288                              <1> 
   289                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   290 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   291 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   292 00000010 ????????????????    <1>     .newSFTVal      resq 1
   293 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   294 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   295 00000028 ????????????????    <1>     .newLastdrive   resq 1
   296 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   297 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   298 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   299 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   300 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   301 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   302 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc filename
   306                              <1> ;8.3 File name struct
   307 00000000 ????????????????    <1>     .fName  resb 8
   308 00000008 ??????              <1>     .fExt   resb 3
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   312 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   313 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   314 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   315 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   316 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   317 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   318 00000016 ????                <1>     .fileTime   resw 1  ;File time
   319 00000018 ????                <1>     .fileDate   resw 1  ;File date
   320 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   321 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc psp
   325 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   326 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   327 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   328 0000000A ????????????????    <1>     .oldInt22h  resq 1  ;Int 22h pointer on overlay load
   329 00000012 ????????????????    <1>     .oldInt23h  resq 1  ;Int 23h pointer on overlay load
   330 0000001A ????????????????    <1>     .oldInt24h  resq 1  ;Int 24h pointer on overlay load
   331 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   332                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   333 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   334 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   335 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 21h
   336 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   337 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   338 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   339 0000005B ??                  <1>                 resb 1  ;Reserved byte
   340                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   341                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   342                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   343                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   344                              <1> ; always used and xtraHdlSz.
   345                              <1> ;Will need to add two SYSCALLS for future expansion:
   346                              <1> ;       1) Get Program Environment Pointer
   347                              <1> ;       2) Get Command Line arguments pointer
   348                              <1> ;The below are in the same place as in DOS.
   349                              <1>     .cmdLineArgPtr: ;Symbol for future use
   350 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   351 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   352                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   353 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   354 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   355                              <1> endstruc
   356                              <1> 
   357                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   358                              <1> 
   359                              <1> struc clkStruc
   360 00000000 ????                <1>     .dateWord   resw 1
   361 00000002 ??                  <1>     .minutes    resb 1
   362 00000003 ??                  <1>     .hours      resb 1
   363 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   364 00000005 ??                  <1>     .seconds    resb 1
   365                              <1> endstruc
   366                              <1> 
   367                              <1> struc countryStruc
   368 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   369                              <1>                         ;0 = month day year hh:mm:ss
   370                              <1>                         ;1 = day month year hh:mm:ss
   371                              <1>                         ;2 = year month day hh:mm:ss
   372 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   373 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   374 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   375 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   376 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   377 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   378                              <1>                         ;0 = Symbol leads, without space
   379                              <1>                         ;1 = Symbol follows, without space
   380                              <1>                         ;2 = Symbol leads, one space
   381                              <1>                         ;3 = Symbol follows, one space
   382                              <1>                         ;4 = Symbol replace decimal separator
   383 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   384 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   385 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   386 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   387 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   388                              <1> endstruc
   389                              <1> 
   390                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   391                              <1> ;for a space of 64Gb
   392                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   393                              <1> dosLowBase  equ 600h    ;Low load address
   394                              <1> 
   395                              <1> ;Critical Error AH bitfield equates
   396                              <1> critRead    equ 0h
   397                              <1> critWrite   equ 1h
   398                              <1> critDOS     equ 0h
   399                              <1> critFAT     equ 2h
   400                              <1> critDir     equ 4h
   401                              <1> critData    equ 6h
   402                              <1> critFailOK  equ 8h
   403                              <1> critRetryOK equ 10h
   404                              <1> critIgnorOK equ 20h
   405                              <1> critCharDev equ 80h
   406                              <1> 
   407                              <1> critIgnore  equ 0
   408                              <1> critRetry   equ 1
   409                              <1> critAbort   equ 2
   410                              <1> critFail    equ 3
   411                              <1> 
   412                              <1> ;MISC ASCII control chars
   413                              <1> NUL equ 00h ;^@         | ASCII Null
   414                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   415                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   416                              <1> BEL equ 07h ;^G         | ASCII Bell
   417                              <1> BSP equ 08h ;^H         | ASCII Backspace
   418                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   419                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   420                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   421                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   422                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   423                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   424                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   425                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   426                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   427                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   428                              <1> SPC equ 20h ;Printable  | ASCII Space
   429                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   430                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   431                              <1> 
   432                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   433                              <1> ;Extended Ascii Codes
   434                              <1> eF1     equ 3Bh ;F1 second byte
   435                              <1> eF2     equ 3Ch ;F2 second byte
   436                              <1> eF3     equ 3Dh ;F3 second byte
   437                              <1> eF4     equ 3Eh ;F4 second byte
   438                              <1> eF5     equ 3Fh ;F5 second byte
   439                              <1> eF6     equ 40h ;F6 second byte
   440                              <1> eF7     equ 41h ;F7 second byte
   441                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   442                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   443                              <1> eIns    equ 52h ;Insert second byte
   444                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   445                              <1> 
   446                              <1> ;Default Configuration for the system
   447                              <1> 
   448                              <1> buffersDefault  equ 30
   449                              <1> filesDefault    equ 20
   450                              <1> fcbsDefault     equ 4
   451                              <1> safeFcbsDeflt   equ 0
   452                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       resb 5  
    66 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   resb 1
    68 00000008 ????????????????    <1>     .filename   resb 8
    69 00000010 ??????              <1>     .fileext    resb 3
    70 00000013 ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    resb 8
    73 00000020 ??????              <1>     .newExt     resb 3
    74 00000023 ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI24     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    25 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    26 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    27 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    28 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    29 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    30                              <1> endstruc
    31                              <1> 
    32                              <1> struc execProg  ;For use with EXEC-ing a child task
    33 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    34 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    35 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    36 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    37                              <1> endstruc
    38                              <1> 
    39                              <1> ;Directory attribute equates
    40                              <1>     dirReadOnly     equ 01h
    41                              <1>     dirHidden       equ 02h
    42                              <1>     dirSystem       equ 04h
    43                              <1>     dirVolumeID     equ 08h
    44                              <1>     dirDirectory    equ 10h
    45                              <1>     dirArchive      equ 20h
    46                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    47                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    48                              <1>     ;If any of the three bits are set, then ALL three bits are set
    49                              <1>     ; in addition to whatever the user passed to search for.
    50                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    51                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 5C                  <1> pathSep     db "\"  ;Default path sep
    11 0000002A 2F                  <1> switchChar  db "/"  ;Default switch char
    12 0000002B 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    13 0000002C 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    14                              <1> ;Static strings, not used in command line parsing
    15 00000034 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    15 0000003D 000000000000000000- <1>
    15 00000046 000000000000000000- <1>
    15 0000004F 000000000000000000- <1>
    15 00000058 0000                <1>
    16 0000005A 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    16 00000063 000000000000000000- <1>
    16 0000006C 000000000000000000- <1>
    16 00000075 000000000000000000- <1>
    16 0000007E 000000000000000000- <1>
    16 00000087 000000000000000000- <1>
    16 00000090 000000000000000000- <1>
    16 00000099 00000000            <1>
    17 0000009D 00                  <1> inCritical  db 0    ;Up if processing a command.
    18 0000009E FF                  <1> echoFlg     db -1   ;Global Echo flag, starts up!
    19                              <1> 
    20                              <1> 
    21                              <1> cmdLineStatePtr:
    22 0000009F 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    23 000000A0 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    24 000000A2 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    25                              <1> ;These variables are valid for a SINGLE command in a command line
    26                              <1> ;Next two bytes, if set to -1, flags error
    27 000000A4 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    28 000000A5 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    29                              <1> ;                    If 2, we are redirecting output to a file, by appending
    30 000000A6 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    31 000000A8 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    32                              <1> 
    33                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    34 000000AA 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    35 000000AB 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    36 000000AC 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    37                              <1> 
    38 000000AD 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    39 000000AE 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    40 000000AF 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    41                              <1> 
    42                              <1> cmdStateL equ $ - cmdStatePtr
    43                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    44                              <1> 
    45                              <1> ;Batch state variables. Batch changes current dir to dir of batch file!
    46 000000B0 00                  <1> batFlag     db 0    ;Batch mode flag. Set to -1 if batch mode on
    47 000000B1 0000000000000000    <1> batBlockPtr dq 0    ;Ptr to the batch block
    48 000000B9 000000000000000000- <1> batOgCD     db fileSpecZL dup (0)   ;Original current dir for batch
    48 000000C2 000000000000000000- <1>
    48 000000CB 000000000000000000- <1>
    48 000000D4 000000000000000000- <1>
    48 000000DD 000000000000000000- <1>
    48 000000E6 000000000000000000- <1>
    48 000000EF 000000000000000000- <1>
    48 000000F8 000000000000000000- <1>
    48 00000101 00000000000000      <1>
    49 00000108 000000000000000000- <1> batFile     db fileSpecZL dup (0)   ;Path to bat to execute. Qual with path!
    49 00000111 000000000000000000- <1>
    49 0000011A 000000000000000000- <1>
    49 00000123 000000000000000000- <1>
    49 0000012C 000000000000000000- <1>
    49 00000135 000000000000000000- <1>
    49 0000013E 000000000000000000- <1>
    49 00000147 000000000000000000- <1>
    49 00000150 00000000000000      <1>
    50                              <1> ;batCallPtr  dq 0    ;Ptr to the call state block
    51                              <1> 
    52                              <1> ;Structs and strings
    53                              <1> 
    54 00000157 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    54 00000160 00000000000000      <1>
    55 00000167 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    55 00000170 000000000000000000- <1>
    55 00000179 000000000000000000- <1>
    55 00000182 000000000000000000- <1>
    55 0000018B 00000000000000      <1>
    56                              <1> 
    57 00000192 000000000000000000- <1> launchBlock db execProg_size dup (0)
    57 0000019B 000000000000000000- <1>
    57 000001A4 000000000000000000- <1>
    57 000001AD 0000000000          <1>
    58                              <1> 
    59 000001B2 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    59 000001BB 000000000000000000- <1>
    59 000001C4 000000000000000000- <1>
    59 000001CD 000000000000000000- <1>
    59 000001D6 000000000000000000- <1>
    59 000001DF 000000000000000000- <1>
    59 000001E8 000000000000000000- <1>
    59 000001F1 000000000000000000- <1>
    59 000001FA 000000000000000000- <1>
    59 00000203 000000000000000000- <1>
    59 0000020C 000000000000000000- <1>
    59 00000215 000000000000000000- <1>
    59 0000021E 000000000000000000- <1>
    59 00000227 000000000000000000- <1>
    59 00000230 00000000            <1>
    60                              <1> inBufferL   equ 127 ;127 chars so we can copy to PSP with terminating CR
    61 00000234 000000000000000000- <1> cpyBuffer   db cmdBufferL dup (0)   ;Copied input for processing
    61 0000023D 000000000000000000- <1>
    61 00000246 000000000000000000- <1>
    61 0000024F 000000000000000000- <1>
    61 00000258 000000000000000000- <1>
    61 00000261 000000000000000000- <1>
    61 0000026A 000000000000000000- <1>
    61 00000273 000000000000000000- <1>
    61 0000027C 000000000000000000- <1>
    61 00000285 000000000000000000- <1>
    61 0000028E 000000000000000000- <1>
    61 00000297 000000000000000000- <1>
    61 000002A0 000000000000000000- <1>
    61 000002A9 000000000000000000- <1>
    61 000002B2 00000000            <1>
    62 000002B6 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)   ;Buffer with the command pipeline
    62 000002BF 000000000000000000- <1>
    62 000002C8 000000000000000000- <1>
    62 000002D1 000000000000000000- <1>
    62 000002DA 000000000000000000- <1>
    62 000002E3 000000000000000000- <1>
    62 000002EC 000000000000000000- <1>
    62 000002F5 000000000000000000- <1>
    62 000002FE 000000000000000000- <1>
    62 00000307 000000000000000000- <1>
    62 00000310 000000000000000000- <1>
    62 00000319 000000000000000000- <1>
    62 00000322 000000000000000000- <1>
    62 0000032B 000000000000000000- <1>
    62 00000334 00000000            <1>
    63 00000338 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)   ;Space for full path to a ext cmd
    63 00000341 000000000000000000- <1>
    63 0000034A 000000000000000000- <1>
    63 00000353 000000000000000000- <1>
    63 0000035C 000000000000000000- <1>
    63 00000365 000000000000000000- <1>
    63 0000036E 000000000000000000- <1>
    63 00000377 000000000000000000- <1>
    63 00000380 00000000000000      <1>
    64 00000387 000000000000000000- <1> cmdName     db cmdNameL dup (0)     ;Cmd name prefixed by length 
    64 00000390 0000000000          <1>
    65                              <1> 
    66 00000395 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    66 0000039E 000000000000000000- <1>
    66 000003A7 000000000000000000- <1>
    66 000003B0 000000000000000000- <1>
    66 000003B9 000000000000000000- <1>
    66 000003C2 000000000000000000- <1>
    66 000003CB 000000000000000000- <1>
    66 000003D4 000000000000000000- <1>
    66 000003DD 00000000000000      <1>
    67 000003E4 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    67 000003ED 000000000000000000- <1>
    67 000003F6 000000000000000000- <1>
    67 000003FF 000000000000000000- <1>
    67 00000408 000000000000000000- <1>
    67 00000411 000000000000000000- <1>
    67 0000041A 000000000000000000- <1>
    67 00000423 000000000000000000- <1>
    67 0000042C 00000000000000      <1>
    68                              <1> 
    69                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    70 00000433 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    70 0000043C 000000000000000000- <1>
    70 00000445 000000000000000000- <1>
    70 0000044E 000000000000000000- <1>
    70 00000457 000000000000000000- <1>
    70 00000460 000000000000000000- <1>
    70 00000469 000000000000000000- <1>
    70 00000472 000000000000000000- <1>
    70 0000047B 00000000000000      <1>
    71 00000482 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    71 0000048B 000000000000000000- <1>
    71 00000494 000000000000000000- <1>
    71 0000049D 000000000000000000- <1>
    71 000004A6 000000000000000000- <1>
    71 000004AF 000000000000000000- <1>
    71 000004B8 000000000000000000- <1>
    71 000004C1 000000000000000000- <1>
    71 000004CA 00000000000000      <1>
    72                              <1> 
    73 000004D1 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    74 000004D9 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    75                              <1> 
    76                              <1> ;Main scratch buffer for forming paths! Needs to be large enough to splice
    77                              <1> ; a really long invalid DOS path for PATH to work properly.
    78 000004E1 000000000000000000- <1> searchSpec  db 2*cmdBufferL dup (0)   
    78 000004EA 000000000000000000- <1>
    78 000004F3 000000000000000000- <1>
    78 000004FC 000000000000000000- <1>
    78 00000505 000000000000000000- <1>
    78 0000050E 000000000000000000- <1>
    78 00000517 000000000000000000- <1>
    78 00000520 000000000000000000- <1>
    78 00000529 000000000000000000- <1>
    78 00000532 000000000000000000- <1>
    78 0000053B 000000000000000000- <1>
    78 00000544 000000000000000000- <1>
    78 0000054D 000000000000000000- <1>
    78 00000556 000000000000000000- <1>
    78 0000055F 000000000000000000- <1>
    78 00000568 000000000000000000- <1>
    78 00000571 000000000000000000- <1>
    78 0000057A 000000000000000000- <1>
    78 00000583 000000000000000000- <1>
    78 0000058C 000000000000000000- <1>
    78 00000595 000000000000000000- <1>
    78 0000059E 000000000000000000- <1>
    78 000005A7 000000000000000000- <1>
    78 000005B0 000000000000000000- <1>
    78 000005B9 000000000000000000- <1>
    78 000005C2 000000000000000000- <1>
    78 000005CB 000000000000000000- <1>
    78 000005D4 000000000000000000- <1>
    78 000005DD 0000000000000000    <1>
    79                              <1> 
    80                              <1> ;Internal Function vars
    81                              <1> ;Dir Vars
    82 000005E5 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    83                              <1> ;                                   Bit[1] set => /P or /p specified
    84                              <1> ;                                   Bit[2] set => A file/path specified
    85 000005E6 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    86 000005E7 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    87 000005E8 00                  <1> dirDrv      db 0    ;0 based drive number to use
    88 000005E9 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
    88 000005F2 000000000000000000- <1>
    88 000005FB 000000000000000000- <1>
    88 00000604 000000000000000000- <1>
    88 0000060D 000000000000000000- <1>
    88 00000616 000000000000000000- <1>
    88 0000061F 000000000000000000- <1>
    88 00000628 000000000000000000- <1>
    88 00000631 000000000000000000- <1>
    88 0000063A 000000000000000000- <1>
    88 00000643 000000000000000000- <1>
    88 0000064C 000000000000000000- <1>
    88 00000655 000000000000000000- <1>
    88 0000065E 000000000000000000- <1>
    88 00000667 00000000            <1>
    89 0000066B 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
    89 00000674 3F3F3F3F3F3F3F      <1>
    90                              <1> dirWideType equ 1
    91                              <1> dirPageType equ 2
    92                              <1> dirFileType equ 4
    93                              <1> ;Volume Vars
    94                              <1> volFcb:
    95                              <1>     istruc exFcb
    96 0000067B FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    97 0000067C 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    98 00000682 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
    99 00000683 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
   100 0000068B 3F3F3F              <1>     at exFcb.fileext,   db "???"
   101 0000068E 00000000            <1>     at exFcb.curBlock,  dd 0
   102 00000692 00<rep 15h>         <1>     iend 
   103                              <1> 
   104                              <1> ;Time/Date vars
   105 000006A7 00                  <1> td1 db 0    ;Minutes/Year
   106 000006A8 00                  <1> td2 db 0    ;Hours/Zero
   107 000006A9 00                  <1> td3 db 0    ;Hundredths/Day
   108 000006AA 00                  <1> td4 db 0    ;Seconds/Month
   109                              <1> 
   110                              <1> ;Rename/Copy/Delete Buffers
   111                              <1> delPath:
   112 000006AB 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   112 000006B4 000000000000000000- <1>
   112 000006BD 000000000000000000- <1>
   112 000006C6 000000000000000000- <1>
   112 000006CF 000000000000000000- <1>
   112 000006D8 000000000000000000- <1>
   112 000006E1 000000000000000000- <1>
   112 000006EA 000000000000000000- <1>
   112 000006F3 000000000000000000- <1>
   112 000006FC 000000000000000000- <1>
   112 00000705 000000000000000000- <1>
   112 0000070E 000000000000000000- <1>
   112 00000717 000000000000000000- <1>
   112 00000720 000000000000000000- <1>
   112 00000729 00000000            <1>
   113 0000072D 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   113 00000736 000000000000000000- <1>
   113 0000073F 000000000000000000- <1>
   113 00000748 000000000000000000- <1>
   113 00000751 000000000000000000- <1>
   113 0000075A 000000000000000000- <1>
   113 00000763 000000000000000000- <1>
   113 0000076C 000000000000000000- <1>
   113 00000775 000000000000000000- <1>
   113 0000077E 000000000000000000- <1>
   113 00000787 000000000000000000- <1>
   113 00000790 000000000000000000- <1>
   113 00000799 000000000000000000- <1>
   113 000007A2 000000000000000000- <1>
   113 000007AB 00000000            <1>
   114 000007AF 0000000000000000    <1> srcPtr      dq 0    ;Where to copy the pattern to
   115 000007B7 0000000000000000    <1> destPtr     dq 0    ;Where to copy the pattern to
   116 000007BF 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   116 000007C8 2020                <1>
   117                              <1> ;Copy Handles
   118 000007CA FFFF                <1> sourceHdl   dw -1
   119 000007CC FFFF                <1> destHdl     dw -1
   120 000007CE 0000                <1> srcHdlInfo  dw 0 ;Used to save the handle device info (bit 7 Set -> Char dev)
   121 000007D0 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   121 000007D9 000000000000000000- <1>
   121 000007E2 000000000000000000- <1>
   121 000007EB 000000000000000000- <1>
   121 000007F4 000000000000000000- <1>
   121 000007FD 000000000000000000- <1>
   121 00000806 000000000000000000- <1>
   121 0000080F 000000000000000000- <1>
   121 00000818 000000000000000000- <1>
   121 00000821 000000000000000000- <1>
   121 0000082A 000000000000000000- <1>
   121 00000833 000000000000000000- <1>
   121 0000083C 000000000000000000- <1>
   121 00000845 000000000000000000- <1>
   121 0000084E 0000                <1>
   122                              <1> 
   123                              <1> ;Environment manipulation vars
   124 00000850 0000                <1> envVarSz        dw 0    ;Env var size
   125 00000852 0000                <1> envVarNamSz     dw 0    ;Env var "name="" length
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 00000854 03444952            <1>     db 3, "DIR"
     8 00000858 9219                <1>     dw dir - startLbl
     9                              <1> 
    10 0000085A 024344              <1>     db 2, "CD"
    11 0000085D 5B1E                <1>     dw chdir - startLbl
    12                              <1> 
    13 0000085F 054348444952        <1>     db 5, "CHDIR"
    14 00000865 5B1E                <1>     dw chdir - startLbl
    15                              <1> 
    16 00000867 024D44              <1>     db 2, "MD"
    17 0000086A D61E                <1>     dw mkdir - startLbl
    18                              <1> 
    19 0000086C 054D4B444952        <1>     db 5, "MKDIR"
    20 00000872 D61E                <1>     dw mkdir - startLbl
    21                              <1> 
    22 00000874 025244              <1>     db 2, "RD"
    23 00000877 1F1F                <1>     dw rmdir - startLbl
    24                              <1> 
    25 00000879 05524D444952        <1>     db 5, "RMDIR"
    26 0000087F 1F1F                <1>     dw rmdir - startLbl
    27                              <1> 
    28 00000881 0344454C            <1>     db 3, "DEL"
    29 00000885 0B21                <1>     dw erase - startLbl
    30                              <1> 
    31 00000887 054552415345        <1>     db 5, "ERASE"
    32 0000088D 0B21                <1>     dw erase - startLbl
    33                              <1> 
    34 0000088F 0444415445          <1>     db 4, "DATE"
    35 00000894 4922                <1>     dw date - startLbl
    36                              <1> 
    37 00000896 0454494D45          <1>     db 4, "TIME"
    38 0000089B AE22                <1>     dw time - startLbl
    39                              <1> 
    40 0000089D 04434F5059          <1>     db 4, "COPY"
    41 000008A2 691F                <1>     dw copy - startLbl
    42                              <1> 
    43 000008A4 0443545459          <1>     db 4, "CTTY"
    44 000008A9 EB22                <1>     dw ctty - startLbl
    45                              <1> 
    46 000008AB 03434C53            <1>     db 3, "CLS"
    47 000008AF 8623                <1>     dw cls - startLbl
    48                              <1> 
    49 000008B1 05425245414B        <1>     db 5, "BREAK"
    50 000008B7 F823                <1>     dw break - startLbl
    51                              <1> 
    52 000008B9 06564552494659      <1>     db 6, "VERIFY"
    53 000008C0 7924                <1>     dw verify - startLbl
    54                              <1> 
    55 000008C2 0652454E414D45      <1>     db 6, "RENAME"
    56 000008C9 F624                <1>     dw rename - startLbl
    57                              <1> 
    58 000008CB 0352454E            <1>     db 3, "REN"
    59 000008CF F624                <1>     dw rename - startLbl
    60                              <1>     
    61 000008D1 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 000008DA F328                <1>     dw truename - startLbl
    63                              <1> 
    64 000008DC 03564552            <1>     db 3, "VER"
    65 000008E0 D92A                <1>     dw version - startLbl
    66                              <1> 
    67 000008E2 03564F4C            <1>     db 3, "VOL"
    68 000008E6 1A2A                <1>     dw volume - startLbl
    69                              <1> 
    70 000008E8 034D454D            <1>     db 3, "MEM"
    71 000008EC 1D2B                <1>     dw memory - startLbl
    72                              <1> 
    73 000008EE 0445584954          <1>     db 4, "EXIT"
    74 000008F3 1A2D                <1>     dw exit - startLbl
    75                              <1> 
    76 000008F5 0454595045          <1>     db 4, "TYPE"
    77 000008FA 672C                <1>     dw type - startLbl
    78                              <1> 
    79 000008FC 054C4142454C        <1>     db 5, "LABEL"
    80 00000902 4429                <1>     dw label - startLbl
    81                              <1> 
    82 00000904 0450415448          <1>     db 4, "PATH"
    83 00000909 BD30                <1>     dw pathEdit - startLbl
    84                              <1> 
    85 0000090B 03534554            <1>     db 3, "SET"
    86 0000090F 9E2F                <1>     dw set - startLbl
    87                              <1> 
    88 00000911 0650524F4D5054      <1>     db 6, "PROMPT"
    89 00000918 9C31                <1>     dw prompt - startLbl
    90                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    91 0000091A 054D4B4C424C        <1>     db 5, "MKLBL"
    92 00000920 6E29                <1>     dw mklbl - startLbl
    93                              <1> 
    94 00000922 05524D4C424C        <1>     db 5, "RMLBL"
    95 00000928 A929                <1>     dw rmlbl - startLbl
    96                              <1> 
    97 0000092A 05524E4C424C        <1>     db 5, "RNLBL"
    98 00000930 E429                <1>     dw rnlbl - startLbl
    99                              <1> 
   100 00000932 05544F554348        <1>     db 5, "TOUCH"
   101 00000938 E626                <1>     dw touch - startLbl
   102                              <1> 
   103 0000093A 044A4F494E          <1>     db 4, "JOIN"
   104 0000093F 4927                <1>     dw join - startLbl
   105                              <1> 
   106 00000941 055355425354        <1>     db 5, "SUBST"
   107 00000947 0C28                <1>     dw subst - startLbl
   108                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   109                              <1> 
   110 00000949 044543484F          <1>     db 4, "ECHO"
   111 0000094E 3D32                <1>     dw echo - startLbl
   112 00000950 FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 00000951 0D0A24              <1> crlf    db  CR,LF,"$"
     3 00000954 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 00000959 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 00000962 696C65206D69737369- <1>
     4 0000096B 6E670D0A24          <1>
     5 00000970 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 00000979 6469736B2077697468- <1>
     5 00000982 206261746368206669- <1>
     5 0000098B 6C65                <1>
     6 0000098D 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 00000996 737320616E79206B65- <1>
     6 0000099F 79207768656E207265- <1>
     6 000009A8 6164790D0A24        <1>
     7 000009AE 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 000009B7 6E64206F722066696C- <1>
     7 000009C0 65206E616D650D0A24  <1>
     8 000009C9 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 000009D2 2066696C65206E616D- <1>
     8 000009DB 65206F7220          <1>
     9 000009E0 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 000009E9 666F756E640D0A24    <1>
    10 000009F1 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full.
    10 000009FA 656E74206469736B20- <1>
    10 00000A03 73706163650D0A24    <1>
    11 00000A0B 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 00000A14 7669726F6E6D656E74- <1>
    11 00000A1D 2073706163650D0A24  <1>
    12 00000A26 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 00000A2F 74696F6E206572726F- <1>
    12 00000A38 720D0A24            <1>
    13 00000A3C 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 00000A45 6F7420626520636F70- <1>
    13 00000A4E 696564206F6E746F20- <1>
    13 00000A57 697473656C660D0A24  <1>
    14 00000A60 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 00000A69 662064657374696E61- <1>
    14 00000A72 74696F6E206C6F7374- <1>
    14 00000A7B 206265666F72652063- <1>
    14 00000A84 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 00000A8A 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 00000A93 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 00000A9C 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 00000AA5 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 00000AA6 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 00000AAF 65650D0A24          <1>
    21 00000AB4 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 00000ABD 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 00000AC6 726976652073706563- <1>
    23 00000ACF 696669636174696F6E- <1>
    23 00000AD8 0D0A24              <1>
    24 00000ADB 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 00000AE4 6B6579207768656E20- <1>
    24 00000AED 7265616479202E202E- <1>
    24 00000AF6 202E2024            <1>
    25 00000AFA 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 00000B03 6172616D657465720D- <1>
    25 00000B0C 0A24                <1>
    26                              <1> 
    27 00000B0E 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 00000B17 576564546875467269- <1>
    27 00000B20 536174              <1>
    28 00000B23 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 00000B2C 206461746524        <1>
    29 00000B32 43757272656E742064- <1> curDate db  "Current date is $"
    29 00000B3B 6174652069732024    <1>
    30 00000B43 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 00000B4C 657720646174652024  <1>
    31 00000B55 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 00000B5E 293A2024            <1>
    32 00000B62 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 00000B6B 293A2024            <1>
    33 00000B6F 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 00000B78 293A2024            <1>
    34 00000B7C 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 00000B85 2074696D6524        <1>
    35 00000B8B 43757272656E742074- <1> curTime db  "Current time is $"
    35 00000B94 696D652069732024    <1>
    36 00000B9C 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 00000BA5 65772074696D653A20- <1>
    36 00000BAE 24                  <1>
    37                              <1> 
    38 00000BAF 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000BB8 7572652028592F4E29- <1>
    38 00000BC1 3F2024              <1>
    39                              <1> 
    40 00000BC4 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000BCD 56657273696F6E2024  <1>
    41                              <1> 
    42 00000BD6 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000BDF 6E2064726976652024  <1>
    43 00000BE8 2069732024          <1> volOk   db " is $"
    44 00000BED 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000BF6 6162656C24          <1>
    45                              <1> 
    46 00000BFB 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000C04 69726563746F72790D- <1>
    46 00000C0D 0A24                <1>
    47 00000C0F 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000C18 206372656174652064- <1>
    47 00000C21 69726563746F72790D- <1>
    47 00000C2A 0A24                <1>
    48 00000C2C 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000C35 6174682C206E6F7420- <1>
    48 00000C3E 6469726563746F7279- <1>
    48 00000C47 2C0D0A              <1>
    49 00000C4A 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000C53 6F7279206E6F742065- <1>
    49 00000C5C 6D7074790D0A24      <1>
    50 00000C63 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000C6C 79206F66202024      <1>
    51 00000C73 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000C7C 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    52 00000C85 6E6965640D0A24      <1>
    53 00000C8C 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    53 00000C95 72697665206973206E- <1>
    53 00000C9E 6F206C6F6E67657220- <1>
    53 00000CA7 76616C696424        <1>
    54                              <1> ;badDrvSrch  db "Invalid drive in search path",CR,LF,"$"        ;MAY REMOVE
    55 00000CAD 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    55 00000CB6 65766963650D0A24    <1>
    56 00000CBE 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    56 00000CC7 20666F756E640D0A24  <1>
    57 00000CD0 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    57 00000CD9 726F720D0A24        <1>
    58 00000CDF 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    58 00000CE8 6F74206265206E6573- <1>
    58 00000CF1 7465640D0A24        <1>
    59 00000CF7 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    59 00000D00 6174652066696C6520- <1>
    59 00000D09 6572726F7220647572- <1>
    59 00000D12 696E6720706970650D- <1>
    59 00000D1B 0A24                <1>
    60 00000D1D 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    60 00000D26 2062696E6172792072- <1>
    60 00000D2F 656164732066726F6D- <1>
    60 00000D38 206120646576696365- <1>
    60 00000D41 0D0A24              <1>
    61 00000D44 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    62 00000D4A 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    63 00000D4F 425245414B20697320- <1> breakIs db "BREAK is $"
    63 00000D58 24                  <1>
    64 00000D59 564552494659206973- <1> verifyIs    db "VERIFY is $"
    64 00000D62 2024                <1>
    65 00000D64 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    66 00000D6D 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    66 00000D76 617468206F72206669- <1>
    66 00000D7F 6C65206E616D650D0A- <1>
    66 00000D88 24                  <1>
    67 00000D89 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    67 00000D92 756D626572206F6620- <1>
    67 00000D9B 706172616D65746572- <1>
    67 00000DA4 730D0A24            <1>
    68 00000DA8 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    68 00000DB1 74696E6720746F2064- <1>
    68 00000DBA 6576696365          <1>
    69 00000DBF 08200800            <1> backSpace   db BSP," ",BSP,NUL
    70                              <1> 
    71 00000DC3 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    71 00000DCC 20202020202020546F- <1>
    71 00000DD5 74616C207379737465- <1>
    71 00000DDE 6D206D656D6F72793A- <1>
    71 00000DE7 2024                <1>
    72 00000DE9 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    72 00000DF2 20202020202020204D- <1>
    72 00000DFB 656D6F727920757365- <1>
    72 00000E04 6420627920444F533A- <1>
    72 00000E0D 2024                <1>
    73 00000E0F 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    73 00000E18 656D6F727920757365- <1>
    73 00000E21 64206279206170706C- <1>
    73 00000E2A 69636174696F6E733A- <1>
    73 00000E33 2024                <1>
    74 00000E35 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    74 00000E3E 656D6F727920726573- <1>
    74 00000E47 657276656420627920- <1>
    74 00000E50 68617264776172653A- <1>
    74 00000E59 2024                <1>
    75 00000E5B 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    75 00000E64 202020202020202020- <1>
    75 00000E6D 2020202020204D656D- <1>
    75 00000E76 6F727920667265653A- <1>
    75 00000E7F 2024                <1>
    76 00000E81 20627974657324      <1> memByte db " bytes$"
    77 00000E88 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    77 00000E91 6F7420417373657274- <1>
    77 00000E9A 61696E20444F532045- <1>
    77 00000EA3 6E74727920506F696E- <1>
    77 00000EAC 7424                <1>
    78 00000EAE 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    78 00000EB7 416C6C6F636174696F- <1>
    78 00000EC0 6E204572726F7224    <1>
    79 00000EC8 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    79 00000ED1 4572726F7224        <1>
    80 00000ED7 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    80 00000EE0 68616C74656424      <1>
    81                              <1> 
    82 00000EE7 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    82 00000EF0 206372656174652070- <1>
    82 00000EF9 6970650D0A          <1>
    83                              <1> pipeErrMsgL equ $ - pipeErrMsg
    84 00000EFE 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    84 00000F07 6F6E206572726F720D- <1>
    84 00000F10 0A                  <1>
    85                              <1> redirErrMsgL   equ $ - redirErrMsg
    86                              <1> 
    87 00000F11 1B5B324A            <1> ansiCls  db ESC,"[2J" ;ANSI CLS sequence, 4 chars long
    88 00000F15 2020202024          <1> fourSpc  db "    $"
    89 00000F1A 20202024            <1> threeSpc db "   $"
    90 00000F1E 202024              <1> twoSpc   db "  $"
    91                              <1> 
    92 00000F21 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    92 00000F2A 696679204F4E206F72- <1>
    92 00000F33 204F46460D0A24      <1>
    93                              <1> 
    94 00000F3A 50524F4D50543D0D    <1> promptEVar  db "PROMPT=",CR     ;Must be CR terminated!
    95 00000F42 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
    96                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    97                              <1> ; handles and reopen CON
    98 00000F4B 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:
     3                              <1> ;This is copied into an MCB to be used as the environment!
     4                              <1> comspecEvar:
     5 00000F4F 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 00000F57 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0  ;Part of the comspec!
     7 00000F60 442E434F4D00        <1>
     8                              <1> pathEVar:
     9 00000F66 504154483D0000      <1>     db "PATH=",0,0  ;End of default environment strings
    10                              <1> menv_len equ $ - masterEnv
    11                              <1> ;Master environment doesnt contain the "program name string"
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00000F6D 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00000F70 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00000F74 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 00000F77 B44A                <1>     mov ah, 4Ah ;Realloc
     9 00000F79 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00000F7C CD21                <1>     int 21h
    11                              <1> commandMain:
    12 00000F7E 488B2580F0FFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    13 00000F85 FC                  <1>     cld ;Ensure stringops are done the right way
    14 00000F86 C60525F2FFFF7F      <1>     mov byte [inBuffer], inBufferL      ;Reset the buffer length
    15 00000F8D C605A0F2FFFF7F      <1>     mov byte [cpyBuffer], inBufferL     ;Reset the buffer length
    16 00000F94 C6051BF3FFFF7F      <1>     mov byte [cmdBuffer], inBufferL     ;Reset the buffer length
    17                              <1> .inputMain:         ;Only reset once per line!
    18 00000F9B E8A3250000          <1>     call printCRLF  ;Command complete, indicate with new line!
    19 00000FA0 B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    20 00000FA5 CD21                <1>     int 21h
    21 00000FA7 B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    22 00000FAC BA01000000          <1>     mov edx, 1      ;Start new print job
    23 00000FB1 CD21                <1>     int 21h
    24                              <1> .inputGetAgain:
    25 00000FB3 E80D280000          <1>     call clearCommandLineState  ;Cleans all handles 5->MAX
    26 00000FB8 F605F1F0FFFFFF      <1>     test byte [batFlag], -1 ;If batch on, get the next line to execute
    27 00000FBF 0F85B3080000        <1>     jnz batNextLine
    28                              <1> .inputGetCmdlineAgain:
    29 00000FC5 E8E0240000          <1>     call printPrompt    ;Ok we are gonna get more input, output prompt
    30 00000FCA 488D15E1F1FFFF      <1>     lea rdx, inBuffer
    31 00000FD1 B8000A0000          <1>     mov eax, 0A00h      ;Do Buffered input
    32 00000FD6 CD21                <1>     int 21h
    33 00000FD8 E866250000          <1>     call printCRLF  ;Note we have accepted input
    34                              <1> ;First check we had something typed in of length greater than 0
    35 00000FDD 803DCFF1FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    36 00000FE4 74DF                <1>     je .inputGetCmdlineAgain  ;If not, keep looping input
    37                              <1>     ;Copy over the input text
    38 00000FE6 488D35C5F1FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    39                              <1> .batCopy:               ;Jump here to copy the batch input line 
    40 00000FED 488D3D40F2FFFF      <1>     lea rdi, cpyBuffer
    41 00000FF4 B982000000          <1>     mov ecx, cmdBufferL     ;Copy the buffer over to manipulate
    42 00000FF9 F3A4                <1>     rep movsb
    43 00000FFB E870000000          <1>     call makeCmdBuffer      ;Preprocess the redir, make cmd buffer
    44                              <1>     ;Now check we aren't starting with a pipe or <CR> and treat differently
    45 00001000 488D35B1F2FFFF      <1>     lea rsi, cmdBuffer + 2
    46 00001007 E887270000          <1>     call skipDelimiters
    47 0000100C 803E0D              <1>     cmp byte [rsi], CR      ;If the first non-delim is a CR, reject input!
    48 0000100F 74A2                <1>     je .inputGetAgain       ;Wipe redir flags and reobtain input!
    49 00001011 803E7C              <1>     cmp byte [rsi], "|"     ;If the first non-delim is a pipe, syntax error!
    50 00001014 0F845F030000        <1>     je hardSynErr
    51                              <1> .pipeLoop:
    52 0000101A 4C8B05EEEFFFFF      <1>     mov r8, qword [pspPtr]  ;Point back to home segment
    53 00001021 E8A4000000          <1>     call makeCmdString      ;Makes the CR delimited command in psp
    54                              <1>     ;ZF here indicates if we are at the end of the command or nots
    55 00001026 E89A060000          <1>     call setupRedirandPipes ;Setup/advance pipes and redir as appropriate
    56 0000102B E8F3000000          <1>     call analyseCmdline     ;Setup cmdName and fcb for cmdBuffer portion
    57 00001030 E89F010000          <1>     call doCommandLine      ;This preps and executes the command portion.
    58 00001035 E890040000          <1>     call advanceRedir       ;Now advance and end redir if needed
    59 0000103A F6055EF0FFFFFF      <1>     test byte [pipeFlag], -1    ;If no pipes, reset state, accept new input
    60 00001041 0F8454FFFFFF        <1>     jz .inputMain
    61                              <1>     ;Now we pull the commandline forwards. 
    62 00001047 E87E000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    63 0000104C 488D3D65F2FFFF      <1>     lea rdi, cmdBuffer + 2
    64 00001053 4889F1              <1>     mov rcx, rsi
    65 00001056 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    66 00001059 280D58F2FFFF        <1>     sub byte [cmdBuffer + 1], cl    ;And erase from the count
    67 0000105F 8A0D52F2FFFF        <1>     mov cl, byte [cmdBuffer + 1]
    68 00001065 FFC1                <1>     inc ecx     ;One more for the terminating char
    69 00001067 F3A4                <1>     rep movsb   ;Move the chars over    
    70 00001069 E846270000          <1>     call clearCommandState  ;Else, clear the command state and start again
    71 0000106E EBAA                <1>     jmp short .pipeLoop     ;Doesn't close handles above 5 until end of pipe!
    72                              <1> 
    73                              <1> makeCmdBuffer:
    74                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    75                              <1> ; copy buffer. Called only once in a cycle.
    76                              <1> ;Throughout: CL has char count, CH has quote count
    77 00001070 488D35BFF1FFFF      <1>     lea rsi, [cpyBuffer + 2]    ;Goto copy buffer + 2
    78 00001077 31C9                <1>     xor ecx, ecx
    79 00001079 4889F7              <1>     mov rdi, rsi    ;Save the pointer
    80                              <1> .countQuotes:
    81 0000107C AC                  <1>     lodsb
    82 0000107D 3C22                <1>     cmp al, '"'
    83 0000107F 7507                <1>     jne .notQuoteToCount
    84 00001081 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
    85 00001083 E9F4FFFFFF          <1>     jmp .countQuotes
    86                              <1> .notQuoteToCount:
    87 00001088 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
    88 0000108A 75F0                <1>     jne .countQuotes
    89 0000108C 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
    90 0000108F 488D3D22F2FFFF      <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
    91                              <1> .getChar:
    92 00001096 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
    93 00001097 3C22                <1>     cmp al, '"'     ;Is char a quote?
    94 00001099 750E                <1>     jne .notQuote
    95 0000109B FECD                <1>     dec ch          ;We have a quote, now decrement
    96 0000109D 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
    97                              <1> .searchForClosingQuote:
    98                              <1>     ;Char was quote, now directly store all chars until we hit closing char
    99 0000109F AA                  <1>     stosb   ;Store char and inc rdi
   100 000010A0 FEC1                <1>     inc cl
   101 000010A2 AC                  <1>     lodsb   ;Get next char
   102 000010A3 3C22                <1>     cmp al, '"'
   103 000010A5 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   104 000010A7 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   105                              <1> .notQuote:
   106 000010A9 E8B6050000          <1>     call peelRedir      ;Intervene redir if needed
   107 000010AE 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   108 000010B0 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   109 000010B2 EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   110                              <1> .pipeHandle:
   111                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   112 000010B4 0F84BF020000        <1>     jz hardSynErr ;We had double pipe symbol, syntax error and reset!
   113                              <1> .notRedir:
   114 000010BA AA                  <1>     stosb       ;Store char and advance rdi
   115 000010BB 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   116 000010BD 7404                <1>     je .exit
   117 000010BF FEC1                <1>     inc cl      ;Increment char count
   118 000010C1 EBD3                <1>     jmp short .getChar    ;If not, get next char
   119                              <1> .exit:
   120 000010C3 880DEEF1FFFF        <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   121                              <1>     return
    13                              <2> %%_ret:
    14 000010C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   122                              <1> 
   123                              <1> makeCmdString:
   124                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   125                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   126                              <1> ; Copies into the psp.
   127                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   128 000010CA 488D35E7F1FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   129 000010D1 31C9                <1>     xor ecx, ecx
   130 000010D3 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   131                              <1> .countQuotes:
   132 000010D6 AC                  <1>     lodsb
   133 000010D7 3C22                <1>     cmp al, '"'
   134 000010D9 7507                <1>     jne .notQuoteToCount
   135 000010DB FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   136 000010DD E9F4FFFFFF          <1>     jmp .countQuotes
   137                              <1> .notQuoteToCount:
   138 000010E2 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   139 000010E4 75F0                <1>     jne .countQuotes
   140 000010E6 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   141 000010E9 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   142                              <1> .getChar:
   143 000010F0 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   144 000010F1 3C22                <1>     cmp al, '"'     ;Is char a quote?
   145 000010F3 750E                <1>     jne .notQuote
   146 000010F5 FECD                <1>     dec ch          ;We have a quote, now decrement
   147 000010F7 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   148                              <1> .searchForClosingQuote:
   149                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   150 000010F9 AA                  <1>     stosb   ;Store char and inc rdi
   151 000010FA FEC1                <1>     inc cl
   152 000010FC AC                  <1>     lodsb   ;Get next char
   153 000010FD 3C22                <1>     cmp al, '"'
   154 000010FF 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   155 00001101 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   156                              <1> .notQuote:
   157 00001103 3C7C                <1>     cmp al, "|"
   158 00001105 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   159 00001107 B00D                <1>     mov al, CR          ;Store the pipe char
   160 00001109 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   161                              <1> .notPipe:
   162 0000110C AA                  <1>     stosb       ;Store char and advance rdi
   163 0000110D 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   164 0000110F 7404                <1>     je .exit
   165 00001111 FEC1                <1>     inc cl      ;Increment char count
   166 00001113 EBDB                <1>     jmp short .getChar    ;If not, get next char
   167                              <1> .exit:
   168 00001115 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   169 00001118 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   170 0000111F 803E0D              <1>     cmp byte [rsi], CR  
   171                              <1>     return
    13                              <2> %%_ret:
    14 00001122 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   172                              <1> 
   173                              <1> analyseCmdline:
   174                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   175                              <1> ; processes the command name into the FCB.  
   176 00001123 C6055DF2FFFF00      <1>     mov byte [cmdName], 0   ;Init this field to indicate no cmd
   177 0000112A 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   178 00001131 4889F3              <1>     mov rbx, rsi            ;Save this ptr in rbx
   179 00001134 E85A260000          <1>     call skipDelimiters     ;Skip any preceeding separators
   180 00001139 803E0D              <1>     cmp byte [rsi], CR      ;We have no command? Return!
   181                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000113C 74(22)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   182 0000113E 488D3DF3F1FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   183 00001145 E87A270000          <1>     call cpDelimPathToBufz  ;Moves rsi to the first char past the delim char
   184 0000114A 48FFCE              <1>     dec rsi ;Point it back to the delim char
   185 0000114D E879000000          <1>     call .skipAndCheckCR
   186 00001152 7439                <1>     je .setupCmdVars
   187 00001154 C6054FEFFFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   188 0000115B 4889F0              <1>     mov rax, rsi
   189 0000115E 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   190 00001161 880544EFFFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   191                              <1> .skipArg:
   192 00001167 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   193 00001168 3C0D                <1>     cmp al, CR
   194 0000116A 7421                <1>     je .setupCmdVars
   195 0000116C E830260000          <1>     call isALdelimiter
   196 00001171 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   197 00001173 E853000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   198 00001178 7413                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   199 0000117A C6052CEFFFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   200 00001181 4889F0              <1>     mov rax, rsi            
   201 00001184 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   202 00001187 880521EFFFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   203                              <1> .setupCmdVars:
   204                              <1> ;Before returning, we copy the command name to cmdName 
   205 0000118D 488D3DA4F1FFFF      <1>     lea rdi, cmdPathSpec
   206 00001194 E8B1260000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   207 00001199 E8D9250000          <1>     call strlen ;Get the length of the final path componant
   208 0000119E 81F90C000000        <1>     cmp ecx, 11 + 1 ;Extra char for the ext separator (dot)
   209 000011A4 771D                <1>     ja .exitBad     ;Return error
   210 000011A6 4889FE              <1>     mov rsi, rdi
   211 000011A9 488D3DD7F1FFFF      <1>     lea rdi, cmdName
   212 000011B0 FFC9                <1>     dec ecx ;Minus the terminating null
   213 000011B2 880F                <1>     mov byte [rdi], cl ;Store the length here
   214 000011B4 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   215                              <1> .cpCmdName:
   216 000011B7 AC                  <1>     lodsb
   217 000011B8 E8C4250000          <1>     call ucChar ;Uppercase the char
   218 000011BD AA                  <1>     stosb
   219 000011BE FFC9                <1>     dec ecx
   220 000011C0 75F5                <1>     jnz .cpCmdName
   221                              <1>     return
    13                              <2> %%_ret:
    14 000011C2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   222                              <1> .exitBad:
   223 000011C3 C605BDF1FFFFFF      <1>     mov byte [cmdName], -1 ;Store -1 to indicate error
   224                              <1>     return
    13                              <2> %%_ret:
    14 000011CA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   225                              <1> .skipAndCheckCR:
   226                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   227 000011CB E8C3250000          <1>     call skipDelimiters ;Go to the next char in the input line
   228 000011D0 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   229                              <1>     return
    13                              <2> %%_ret:
    14 000011D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   230                              <1> 
   231                              <1> doCommandLine:
   232                              <1>     ;The following check accounts for the end of a piped command
   233 000011D4 803DACF1FFFF00      <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, syntax error!
   234 000011DB 0F8498010000        <1>     je hardSynErr   ;This now should never be hit, earmark for removal!
   235 000011E1 803D9FF1FFFFFF      <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   236 000011E8 0F849B070000        <1>     je badCmdError
   237 000011EE 488D3543F1FFFF      <1>     lea rsi, cmdPathSpec
   238 000011F5 488D3D5BEFFFFF      <1>     lea rdi, cmdFcb
   239 000011FC B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
   240 00001201 CD21                <1>     int 21h
   241 00001203 0FB71D2EF1FFFF      <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   242 0000120A 80FF3A              <1>     cmp bh, ":"
   243 0000120D 752D                <1>     jne .noDriveSpecified
   244 0000120F 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   245 00001211 E86B250000          <1>     call ucChar     ;Uppercase al
   246 00001216 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   247 00001218 80FBFF              <1>     cmp bl, -1      ;Int 21h returns AL = -1 if bad drive specified
   248 0000121B 7412                <1>     je .badDrive
   249                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   250 0000121D 803D63F1FFFF02      <1>     cmp byte [cmdName], 2
   251 00001224 7516                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   252 00001226 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   253 00001228 E820250000          <1>     call setDrive
   254                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000122D 74(D3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   255                              <1> .badDrive:
   256 0000122F 488D1587F8FFFF      <1>     lea rdx, badDrv
   257 00001236 B409                <1>     mov ah, 09h
   258 00001238 CD21                <1>     int 21h
   259 0000123A F9                  <1>     stc
   260                              <1>     return
    13                              <2> %%_ret:
    14 0000123B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   261                              <1> .noDriveSpecified:
   262                              <1> ;Now we set the two FCB's in the command line
   263 0000123C F60567EEFFFFFF      <1>     test byte [arg1Flg], -1
   264 00001243 744D                <1>     jz .fcbArgsDone
   265 00001245 0FB6055FEEFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   266 0000124C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   267 00001253 4801C6              <1>     add rsi, rax    ;Point to first argument
   268 00001256 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   269 0000125A B801290000          <1>     mov eax, 2901h
   270 0000125F CD21                <1>     int 21h
   271 00001261 880545EEFFFF        <1>     mov byte [arg1FCBret], al
   272 00001267 F6053FEEFFFFFF      <1>     test byte [arg2Flg], -1
   273 0000126E 7422                <1>     jz .fcbArgsDone
   274 00001270 0FB60537EEFFFF      <1>     movzx eax, byte [arg2Off]
   275 00001277 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   276 0000127E 4801C6              <1>     add rsi, rax    ;Point to first argument
   277 00001281 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   278 00001285 B801290000          <1>     mov eax, 2901h
   279 0000128A CD21                <1>     int 21h
   280 0000128C 88051DEEFFFF        <1>     mov byte [arg2FCBret], al
   281                              <1> .fcbArgsDone:
   282                              <1> ;rbx is writable UP TO THE FIRST PIPE OR CR (non-inclusive)
   283 00001292 488D1D1DF0FFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer
   284 00001299 488D35E7F0FFFF      <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   285 000012A0 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   286 000012A5 BAFFFF0000          <1>     mov edx, 0FFFFh
   287 000012AA B5FF                <1>     mov ch, -1
   288 000012AC CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   289 000012AE B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   290 000012B3 BAFFFF0000          <1>     mov edx, 0FFFFh
   291 000012B8 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   292 000012BA CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   293                              <1>             ;        al = 0  if the command should be executed as usual
   294 000012BC 84C0                <1>     test al, al
   295 000012BE 7444                <1>     jz .executeInternal
   296                              <1>     ;Here we execute externally and return to the prompt
   297                              <1>     ; as if it was an internal execution. rbx is not to be relied on here!
   298 000012C0 498D9880000000      <1>     lea rbx, qword [r8 + cmdTail]
   299 000012C7 488D35B9F0FFFF      <1>     lea rsi, cmdName        
   300 000012CE B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   301 000012D3 BAFFFF0000          <1>     mov edx, 0FFFFh
   302 000012D8 B5FF                <1>     mov ch, -1
   303 000012DA CD2F                <1>     int 2Fh
   304 000012DC 803DA4F0FFFF00      <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   305                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000012E3 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000012E5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   306                              <1>     ;We need to copy over to cmdPathSpec in the event this command
   307                              <1>     ; is an external command that is in the CD or in the PATH.
   308                              <1>     ;Should not be used for this purpose but it is here...
   309 000012E6 E843050000          <1>     call pullCommandline    ;Pull the tail down with the original name
   310 000012EB 488D3595F0FFFF      <1>     lea rsi, cmdName        ;Now make the new cmd the new cmdspec!
   311 000012F2 AC                  <1>     lodsb                   ;Get the name length
   312 000012F3 0FB6C8              <1>     movzx ecx, al
   313 000012F6 488D3D3BF0FFFF      <1>     lea rdi, cmdPathSpec    ;Overwrite the original specified command
   314 000012FD F3A4                <1>     rep movsb   
   315 000012FF 31C0                <1>     xor eax, eax
   316 00001301 AA                  <1>     stosb   ;Store null terminator
   317 00001302 EB1F                <1>     jmp short .executeInternal2 ;Skip the equivalent for non-ae cases
   318                              <1> .executeInternal:
   319 00001304 E825050000          <1>     call pullCommandline    ;Now pull the tail down
   320 00001309 488D3D28F0FFFF      <1>     lea rdi, cmdPathSpec
   321 00001310 E862240000          <1>     call strlen ;Get the length of the input command
   322 00001315 FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   323 00001317 380D6AF0FFFF        <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   324 0000131D 0F852D1A0000        <1>     jne launchChild     ;If not, a path was specified, exit!
   325                              <1> .executeInternal2:
   326                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   327 00001323 488D1D2AF5FFFF      <1>     lea rbx, functionTable
   328                              <1> .nextEntry:
   329 0000132A 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   330 0000132D 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   331 00001330 0F841A1A0000        <1>     je launchChild      ;If so, check externally now
   332 00001336 380D4BF0FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   333 0000133C 752F                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   334                              <1>     ;Here they have the same length so lets see if the name is the same
   335 0000133E 56                  <1>     push rsi
   336                              <1>     ;ecx has the length to compare
   337 0000133F 51                  <1>     push rcx
   338 00001340 488D7301            <1>     lea rsi, qword [rbx + 1]
   339 00001344 488D3D3DF0FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   340 0000134B F3A6                <1>     rep cmpsb   ;Check the strings are equal
   341 0000134D 59                  <1>     pop rcx
   342 0000134E 5E                  <1>     pop rsi
   343 0000134F 751C                <1>     jne .gotoNextEntry
   344                              <1>     ;Here it was found both strings are equal
   345 00001351 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   346 00001356 480FB71F            <1>     movzx rbx, word [rdi]
   347 0000135A 488D3D9FECFFFF      <1>     lea rdi, startLbl
   348 00001361 4801FB              <1>     add rbx, rdi
   349 00001364 C605A2ECFFFF00      <1>     mov byte [returnCode], 0 ;Reset the retcode before executing function!
   350 0000136B FFE3                <1>     jmp rbx    ;Jump to this function and return a level up!
   351                              <1> .gotoNextEntry:
   352 0000136D 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   353 00001374 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   354 00001377 EBB1                <1>     jmp short .nextEntry
   355                              <1> 
   356                              <1> hardSynErr:
   357                              <1> ;Hard syntax error in cmd line. Delete pipe files and reset completely!
   358 00001379 E89E050000          <1>     call badSyntaxError         ;Output bad syntax if empty command found
   359 0000137E E926000000          <1>     jmp redirPipeFailureCommon.noPrint  ;This closes pipes and resets stack
   360                              <1> redirFailure:
   361 00001383 488D1574FBFFFF      <1>     lea rdx, redirErrMsg
   362 0000138A B913000000          <1>     mov ecx, redirErrMsgL
   363 0000138F EB0C                <1>     jmp short redirPipeFailureCommon
   364                              <1> pipeFailure:
   365 00001391 488D154FFBFFFF      <1>     lea rdx, pipeErrMsg
   366 00001398 B917000000          <1>     mov ecx, pipeErrMsgL
   367                              <1> redirPipeFailureCommon:
   368                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   369                              <1> ;This routine tries to close whatever handles are not -1 and delete
   370                              <1> ; pipe files if the pipe count is not 0.
   371                              <1> ;It resets all variables and jumps to reset the stack!
   372 0000139D B800400000          <1>     mov eax, 4000h  ;Write handle
   373 000013A2 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   374 000013A7 CD21                <1>     int 21h
   375                              <1> .noPrint:
   376 000013A9 0FB705F6ECFFFF      <1>     movzx eax, word [redirSTDIN]
   377 000013B0 0FB715E9ECFFFF      <1>     movzx edx, word [pipeSTDIN]
   378 000013B7 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   379 000013B9 E8D1000000          <1>     call .closeAndReplace
   380 000013BE 0FB705E3ECFFFF      <1>     movzx eax, word [redirSTDOUT]
   381 000013C5 0FB715D6ECFFFF      <1>     movzx edx, word [pipeSTDOUT]
   382 000013CC FFC3                <1>     inc ebx         ;Select STDOUT for closing
   383 000013CE E8BC000000          <1>     call .closeAndReplace
   384 000013D3 66C705C8ECFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   385 000013DC 0FB71DC3ECFFFF      <1>     movzx ebx, word [redirSTDIN]
   386 000013E3 E896000000          <1>     call .closeHandle
   387                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   388 000013E8 66C705B5ECFFFFFFFF  <1>     mov word [redirSTDIN], -1
   389 000013F1 0FB71DB0ECFFFF      <1>     movzx ebx, word [redirSTDOUT]
   390 000013F8 E881000000          <1>     call .closeHandle
   391 000013FD 66C705A2ECFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   392 00001406 0FB71D93ECFFFF      <1>     movzx ebx, word [pipeSTDIN]
   393 0000140D E86C000000          <1>     call .closeHandle
   394 00001412 66C70585ECFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   395 0000141B 0FB71D80ECFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   396 00001422 E857000000          <1>     call .closeHandle
   397 00001427 66C70572ECFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   398 00001430 C60568ECFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   399 00001437 488D15F5EFFFFF      <1>     lea rdx, qword [pipe1Filespec]
   400 0000143E 803A00              <1>     cmp byte [rdx], 0
   401 00001441 7407                <1>     jz .checkOld
   402 00001443 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   403 00001448 CD21                <1>     int 21h
   404                              <1> .checkOld:
   405 0000144A 488D1531F0FFFF      <1>     lea rdx, qword [pipe2Filespec]
   406 00001451 803A00              <1>     cmp byte [rdx],0
   407 00001454 7407                <1>     jz .pipeNamesComplete
   408 00001456 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   409 0000145B CD21                <1>     int 21h
   410                              <1> .pipeNamesComplete:
   411 0000145D 31C0                <1>     xor eax, eax
   412                              <1>     ;Invalidate the pointers and the paths too
   413 0000145F 4889056BF0FFFF      <1>     mov qword [newPipe], rax
   414 00001466 4889056CF0FFFF      <1>     mov qword [oldPipe], rax
   415 0000146D 8905C0EFFFFF        <1>     mov dword [pipe1Filespec], eax
   416 00001473 890509F0FFFF        <1>     mov dword [pipe2Filespec], eax
   417                              <1> 
   418 00001479 E900FBFFFF          <1>     jmp commandMain ;Retake input from the command line
   419                              <1> .closeHandle:
   420 0000147E 81FBFFFFFFFF        <1>     cmp ebx, -1
   421                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001484 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001486 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   422 00001487 B8003E0000          <1>     mov eax, 3E00h
   423 0000148C CD21                <1>     int 21h
   424                              <1>     return
    13                              <2> %%_ret:
    14 0000148E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   425                              <1> .closeAndReplace:
   426                              <1> ;Input: ax = one possible handle, dx = second possible handle
   427                              <1> ;       bx = handle to close and copy ax/dx into
   428                              <1> ;Output: Handle intervened on. bx preserved
   429 0000148F C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   430 00001492 09D0                <1>     or eax, edx     ;Form packed
   431 00001494 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   432                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001499 74(8E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   433 0000149B E8DEFFFFFF          <1>     call .closeHandle
   434 000014A0 663DFFFF            <1>     cmp ax, -1      
   435 000014A4 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   436 000014A8 53                  <1>     push rbx
   437 000014A9 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   438 000014AC B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   439 000014B1 CD21                <1>     int 21h
   440 000014B3 5B                  <1>     pop rbx
   441                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000014B4 73(8E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   442                              <1>     ;Else we now try to force con to open!
   443 000014B6 E8C3FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   444 000014BB B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   445 000014C0 488D1584FAFFFF      <1>     lea rdx, conName
   446 000014C7 CD21                <1>     int 21h
   447                              <1>     return
    13                              <2> %%_ret:
    14 000014C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   448                              <1> 
   449                              <1> advanceRedir:
   450                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   451                              <1> ;Close stdin redir then stdout redir. 
   452 000014CA F605D3EBFFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   453 000014D1 0F8585000000        <1>     jnz .redirIn
   454 000014D7 F605C1EBFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   455 000014DE 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   456 000014E4 0FBF05B5EBFFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   457 000014EB 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   458 000014F0 0F84EB000000        <1>     je .pipeOut              
   459                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   460 000014F6 0FB71DA3EBFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   461 000014FD 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   462 000014FF B800460000          <1>     mov eax, 4600h
   463 00001504 CD21                <1>     int 21h
   464 00001506 0F8285FEFFFF        <1>     jc pipeFailure
   465 0000150C B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   466 00001511 CD21                <1>     int 21h
   467 00001513 0F8278FEFFFF        <1>     jc pipeFailure
   468 00001519 488B15B9EFFFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   469 00001520 B800410000          <1>     mov eax, 4100h  ;Delete the file!
   470 00001525 CD21                <1>     int 21h
   471 00001527 0F8264FEFFFF        <1>     jc pipeFailure
   472 0000152D C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   473 00001530 66C70567EBFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   474                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   475                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   476                              <1>     ;Else exit!
   477 00001539 0FBF0562EBFFFF      <1>     movsx eax, word [pipeSTDOUT]
   478 00001540 3DFFFFFFFF          <1>     cmp eax, -1
   479 00001545 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   480 0000154B C6054DEBFFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   481 00001552 F6054CEBFFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   482 00001559 753D                <1>     jnz .redirOut               ;Go for it if so!
   483                              <1>     return
    13                              <2> %%_ret:
    14 0000155B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   484                              <1> .redirIn:
   485                              <1> ;Here we clean redirIn
   486 0000155C 0FB71D43EBFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   487 00001563 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   488 00001565 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   489 0000156A CD21                <1>     int 21h
   490 0000156C 0F8211FEFFFF        <1>     jc redirFailure
   491 00001572 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   492 00001577 CD21                <1>     int 21h
   493 00001579 0F8204FEFFFF        <1>     jc redirFailure
   494 0000157F 66C7051EEBFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   495 00001588 C60515EBFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   496 0000158F F60509EBFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   497 00001596 7549                <1>     jnz .pipeOut
   498                              <1> .redirOut:
   499 00001598 F60506EBFFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   500                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000159F 74(5B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   501                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   502 000015A1 F605F7EAFFFFFF      <1>     test byte [pipeFlag], -1
   503 000015A8 7537                <1>     jnz short .pipeOut
   504 000015AA 0FB71DF7EAFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   505 000015B1 B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   506 000015B6 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   507 000015BB CD21                <1>     int 21h
   508 000015BD 0F82C0FDFFFF        <1>     jc redirFailure
   509 000015C3 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   510 000015C8 CD21                <1>     int 21h
   511 000015CA 0F82B3FDFFFF        <1>     jc redirFailure
   512 000015D0 66C705CFEAFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   513 000015D9 C605C5EAFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   514                              <1>     return
    13                              <2> %%_ret:
    14 000015E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   515                              <1> .pipeOut:
   516                              <1> ;Duplicate STDIN to save across pipe
   517 000015E1 0FBF05BAEAFFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   518 000015E8 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   519                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000015ED 74(E0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   520 000015EF B800450000          <1>     mov eax, 4500h
   521 000015F4 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   522 000015F6 CD21                <1>     int 21h
   523 000015F8 0F8293FDFFFF        <1>     jc pipeFailure
   524 000015FE 6689059BEAFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   525                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   526 00001605 B800460000          <1>     mov eax, 4600h
   527 0000160A 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   528 0000160C FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   529 0000160E CD21                <1>     int 21h
   530 00001610 0F827BFDFFFF        <1>     jc pipeFailure
   531                              <1> ;Now return the original stdout to stdout
   532 00001616 89D9                <1>     mov ecx, ebx
   533 00001618 0FB71D83EAFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   534 0000161F B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   535 00001624 CD21                <1>     int 21h
   536 00001626 0F8265FDFFFF        <1>     jc pipeFailure
   537                              <1> ;Now close the DUP'ed STDOUT
   538 0000162C B8003E0000          <1>     mov eax, 3E00h
   539 00001631 CD21                <1>     int 21h
   540 00001633 0F8258FDFFFF        <1>     jc pipeFailure
   541                              <1> ;Finally unwind STDIN to the beginning of the file
   542 00001639 B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   543 0000163E 31DB                <1>     xor ebx, ebx    ;STDIN handle
   544 00001640 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   545 00001642 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   546 00001644 CD21                <1>     int 21h
   547 00001646 0F8245FDFFFF        <1>     jc pipeFailure  ;This should never happen
   548 0000164C 488B157EEEFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   549 00001653 4889157FEEFFFF      <1>     mov qword [oldPipe], rdx
   550 0000165A 66C7053FEAFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   551                              <1>     return
    13                              <2> %%_ret:
    14 00001663 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   552                              <1> 
   553                              <1> 
   554                              <1> peelRedir:
   555                              <1> ;Checks and sets up redir as appropriate
   556                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   557                              <1> ;       rsi points to the first char after the char in al in cpyBuffer
   558                              <1> ;Output: ZF=NZ => No redir
   559                              <1> ;        ZF=ZY => Redir
   560                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   561                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   562 00001664 51                  <1>     push rcx
   563 00001665 57                  <1>     push rdi
   564 00001666 3C3C                <1>     cmp al, "<"
   565 00001668 740C                <1>     je .inputRedir
   566 0000166A 3C3E                <1>     cmp al, ">"
   567 0000166C 7427                <1>     je .outputRedir
   568 0000166E 3C7C                <1>     cmp al, "|"
   569 00001670 7441                <1>     je .pipeSetup
   570 00001672 F8                  <1>     clc
   571                              <1> .redirExit:
   572 00001673 5F                  <1>     pop rdi
   573 00001674 59                  <1>     pop rcx
   574                              <1>     return
    13                              <2> %%_ret:
    14 00001675 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   575                              <1> .inputRedir:
   576 00001676 C60527EAFFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   577 0000167D 488D3D11EDFFFF      <1>     lea rdi, rdrInFilespec
   578                              <1> .redirCommon:
   579 00001684 E80A210000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   580 00001689 E836220000          <1>     call cpDelimPathToBufz
   581 0000168E 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   582 00001691 30C0                <1>     xor al, al  ;Clear the ZF flag
   583 00001693 EBDE                <1>     jmp short .redirExit
   584                              <1> .outputRedir:
   585 00001695 C60509EAFFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   586 0000169C 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   587 0000169F 7509                <1>     jne .notDouble
   588 000016A1 FE05FEE9FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   589 000016A7 48FFC6              <1>     inc rsi ;Go past it too
   590                              <1> .notDouble:
   591 000016AA 488D3D33EDFFFF      <1>     lea rdi, rdrOutFilespec
   592 000016B1 EBD1                <1>     jmp short .redirCommon
   593                              <1> .pipeSetup:
   594 000016B3 56                  <1>     push rsi    ;Save rsi pointing to char past |
   595 000016B4 E8DA200000          <1>     call skipDelimiters ;Check if this is effectively a double || or |<CR>
   596 000016B9 803E7C              <1>     cmp byte [rsi], "|" 
   597 000016BC 7403                <1>     je .badFnd
   598 000016BE 803E0D              <1>     cmp byte [rsi], CR
   599                              <1> .badFnd:
   600 000016C1 5E                  <1>     pop rsi
   601 000016C2 F9                  <1>     stc
   602 000016C3 EBAE                <1>     jmp short .redirExit
   603                              <1> 
   604                              <1> setupRedirandPipes:
   605                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   606                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   607 000016C5 0F8484000000        <1>     jz .redirIn
   608 000016CB 488D1561EDFFFF      <1>     lea rdx, pipe1Filespec
   609 000016D2 803A00              <1>     cmp byte [rdx], 0
   610 000016D5 7410                <1>     jz .pathFound
   611 000016D7 488D15A4EDFFFF      <1>     lea rdx, pipe2Filespec
   612 000016DE 803A00              <1>     cmp byte [rdx], 0
   613 000016E1 0F85AAFCFFFF        <1>     jnz pipeFailure
   614                              <1> .pathFound:
   615 000016E7 488915E3EDFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   616 000016EE B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   617 000016F3 BB01000000          <1>     mov ebx, 1
   618 000016F8 CD21                <1>     int 21h
   619 000016FA 0F8291FCFFFF        <1>     jc pipeFailure
   620 00001700 6689059BE9FFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   621 00001707 E84D200000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   622 0000170C 0441                <1>     add al, "A"
   623 0000170E BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   624 00001713 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   625 00001715 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   626 00001717 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   627 00001719 B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   628 0000171E CD21                <1>     int 21h
   629 00001720 0F826BFCFFFF        <1>     jc pipeFailure
   630                              <1>     ;AX has the handle for this file now, this will become STDOUT
   631                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   632 00001726 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   633 00001729 B901000000          <1>     mov ecx, 1
   634 0000172E B800460000          <1>     mov eax, 4600h
   635 00001733 CD21                <1>     int 21h
   636 00001735 0F8256FCFFFF        <1>     jc pipeFailure
   637 0000173B B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   638 00001740 CD21                <1>     int 21h
   639 00001742 0F8249FCFFFF        <1>     jc pipeFailure
   640 00001748 C60550E9FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   641                              <1> .redirIn:
   642                              <1> ;Now check if any other redir needs to be setup
   643                              <1> ;Checks and sets up redir as appropriate.
   644                              <1>     ;Setup the redir here for STDIN
   645 0000174F F6054EE9FFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   646 00001756 7449                <1>     jz .redirOut
   647 00001758 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   648 0000175A B800450000          <1>     mov eax, 4500h
   649 0000175F CD21                <1>     int 21h
   650 00001761 0F821CFCFFFF        <1>     jc redirFailure
   651 00001767 66890538E9FFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   652 0000176E 488D1520ECFFFF      <1>     lea rdx, rdrInFilespec
   653 00001775 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   654 0000177A CD21                <1>     int 21h
   655 0000177C 0F8201FCFFFF        <1>     jc redirFailure
   656 00001782 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   657 00001784 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   658 00001787 B800460000          <1>     mov eax, 4600h
   659 0000178C CD21                <1>     int 21h
   660 0000178E 0F82EFFBFFFF        <1>     jc redirFailure
   661 00001794 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   662 00001799 CD21                <1>     int 21h
   663 0000179B 0F82E2FBFFFF        <1>     jc redirFailure
   664                              <1> .redirOut:
   665 000017A1 F605FDE8FFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   666                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000017A8 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000017AA C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   667 000017AB 803DF0E8FFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   668                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000017B2 75(AA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   669                              <1>     ;Else setup the redir here for STDOUT
   670 000017B4 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   671 000017B9 B800450000          <1>     mov eax, 4500h
   672 000017BE CD21                <1>     int 21h
   673 000017C0 0F82BDFBFFFF        <1>     jc redirFailure
   674 000017C6 668905DBE8FFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   675 000017CD 488D1510ECFFFF      <1>     lea rdx, rdrOutFilespec
   676 000017D4 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   677 000017D9 CD21                <1>     int 21h
   678 000017DB 730F                <1>     jnc .fileExists
   679 000017DD B8003C0000          <1>     mov eax, 3C00h
   680 000017E2 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   681 000017E4 CD21                <1>     int 21h
   682 000017E6 0F8297FBFFFF        <1>     jc redirFailure
   683                              <1> .fileExists:
   684 000017EC B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   685 000017F1 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   686 000017F4 B800460000          <1>     mov eax, 4600h  ;DUP2
   687 000017F9 CD21                <1>     int 21h
   688 000017FB 0F8282FBFFFF        <1>     jc redirFailure
   689 00001801 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   690 00001806 CD21                <1>     int 21h
   691 00001808 0F8275FBFFFF        <1>     jc redirFailure
   692 0000180E 803D90E8FFFF01      <1>     cmp byte [redirOut], 1
   693                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001815 74(AA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   694                              <1>     ;Here we move the file pointer to the end of the file
   695 00001817 31D2                <1>     xor edx, edx    ;Low order 32 bits
   696 00001819 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   697 0000181B BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   698 00001820 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   699 00001825 CD21                <1>     int 21h
   700 00001827 0F8256FBFFFF        <1>     jc redirFailure
   701                              <1>     return
    13                              <2> %%_ret:
    14 0000182D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   702                              <1> 
   703                              <1> 
   704                              <1> pullCommandline:
   705                              <1> ;This command pulls the command tail down, removing the whole launch command
   706 0000182E 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   707                              <1> ;Skip leading separators
   708                              <1> .pctSkipLeading:
   709 00001835 AC                  <1>     lodsb   ;Get first char
   710 00001836 E8661F0000          <1>     call isALdelimiter
   711 0000183B 74F8                <1>     je .pctSkipLeading
   712 0000183D 48FFCE              <1>     dec rsi
   713                              <1>     ;rsi points to the start of the command
   714 00001840 488D3DF1EAFFFF      <1>     lea rdi, cmdPathSpec
   715 00001847 E82B1F0000          <1>     call strlen ;Get the length of the command
   716 0000184C FFC9                <1>     dec ecx ;Minus the terminating null
   717 0000184E 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   718 00001851 280D54E8FFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   719 00001857 280D51E8FFFF        <1>     sub byte [arg2Off], cl
   720 0000185D 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   721 0000185F 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   722                              <1> .pctPullChars:
   723 00001866 AC                  <1>     lodsb
   724 00001867 AA                  <1>     stosb
   725 00001868 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   726 0000186A 7404                <1>     je .pctExit
   727 0000186C FFC1                <1>     inc ecx     ;Increment count
   728 0000186E EBF6                <1>     jmp short .pctPullChars 
   729                              <1> .pctExit:
   730 00001870 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   731                              <1>     return
    13                              <2> %%_ret:
    14 00001877 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   732                              <1> 
   733                              <1> batNextLine:
   734                              <1> ;Not yet implemented, if this is set to 1, print error and reset!
   735 00001878 488D1513000000      <1>     lea rdx, .l1
   736 0000187F B800090000          <1>     mov eax, 0900h
   737 00001884 CD21                <1>     int 21h
   738 00001886 C60523E8FFFF00      <1>     mov byte [batFlag], 0
   739 0000188D E9ECF6FFFF          <1>     jmp commandMain
   740 00001892 4261746368206D6F64- <1> .l1 db "Batch mode... wait, what? How did you do that?",CR,LF,"$"
   740 0000189B 652E2E2E2077616974- <1>
   740 000018A4 2C20776861743F2048- <1>
   740 000018AD 6F772064696420796F- <1>
   740 000018B6 7520646F2074686174- <1>
   740 000018BF 3F0D0A24            <1>
   741                              <1> 
   742                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   743                              <1> ;Input: rsi points to the count byte of a command line
   744 000018C3 4150                <1>     push r8
   745 000018C5 4151                <1>     push r9
   746 000018C7 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   747 000018C9 CD21                <1>     int 21h
   748 000018CB 52                  <1>     push rdx    ;Save on the stack
   749 000018CC 488D1D2DE6FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   750 000018D3 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   751 000018D5 CD21                <1>     int 21h
   752 000018D7 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   753 000018DA 4989D9              <1>     mov r9, rbx
   754 000018DD 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   755 000018E4 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   756 000018E9 F348A5              <1>     rep movsq   ;Copy command line over
   757                              <1>     ;call doCommandLine
   758 000018EC 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   759 000018ED B450                <1>     mov ah, 50h ;Set Current PSP
   760 000018EF CD21                <1>     int 21h
   761 000018F1 4159                <1>     pop r9
   762 000018F3 4158                <1>     pop r8
   763 000018F5 48CF                <1>     iretq
    17                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badDiskFull:
     7                              <1> ;This is a different error return, as this closes handles and prints
     8                              <1> ; disk full error and resets the command line!
     9 000018F7 488D15F3F0FFFF      <1>     lea rdx, noSpace
    10 000018FE 488D0DF2F3FFFF      <1>     lea rcx, pipeErr
    11 00001905 F60593E7FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the flag set
    12 0000190C 746F                <1>     jz short badCmn ;If its just disk full, dont go through pipe clean
    13 0000190E 480F45D1            <1>     cmovnz rdx, rcx ;Swap error messages if pipe flag is on
    14 00001912 E866000000          <1>     call badCmn     ;Print the string
    15 00001917 E98DFAFFFF          <1>     jmp redirPipeFailureCommon.noPrint  ;Now close pipes and fully reset!
    16                              <1> badSyntaxError:
    17 0000191C 488D15ADF3FFFF      <1>     lea rdx, syntaxErr
    18 00001923 EB58                <1>     jmp short badCmn
    19                              <1> badEnvSpaceError:
    20 00001925 488D15DFF0FFFF      <1>     lea rdx, noEnvSpace
    21 0000192C EB4F                <1>     jmp short badCmn
    22                              <1> badAccError:
    23 0000192E 488D1547F3FFFF      <1>     lea rdx, accDenMsg
    24 00001935 EB46                <1>     jmp short badCmn
    25                              <1> noSelfCopyError:
    26 00001937 488D15FEF0FFFF      <1>     lea rdx, noSelfCopy
    27 0000193E EB3D                <1>     jmp short badCmn
    28                              <1> badParamError:
    29 00001940 488D15B3F1FFFF      <1>     lea rdx, badParm
    30 00001947 EB34                <1>     jmp short badCmn
    31                              <1> badDriveError:
    32 00001949 488D156DF1FFFF      <1>     lea rdx, badDrv
    33 00001950 EB2B                <1>     jmp short badCmn
    34                              <1> badArgError:
    35 00001952 488D1530F4FFFF      <1>     lea rdx, badArgs
    36 00001959 EB22                <1>     jmp short badCmn
    37                              <1> badFileError:
    38 0000195B 488D150BF4FFFF      <1>     lea rdx, badSpec
    39 00001962 EB19                <1>     jmp short badCmn
    40                              <1> badDupFnf:
    41                              <1> ;Hybrid error message
    42 00001964 488D155EF0FFFF      <1>     lea rdx, dupName
    43 0000196B EB10                <1>     jmp short badCmn
    44                              <1> badFnf:
    45 0000196D 488D156CF0FFFF      <1>     lea rdx, fnfMsg
    46 00001974 EB07                <1>     jmp short badCmn
    47                              <1> badDirError:
    48 00001976 488D157EF2FFFF      <1>     lea rdx, badDir
    49                              <1> badCmn:
    50 0000197D C60589E6FFFFFF      <1>     mov byte [returnCode], -1    ;Return code defaults to -1 if error (for now!)
    51 00001984 E9C11B0000          <1>     jmp printString     ;This will be made nuanced later, to agree with DOS
    52                              <1> badCmdError:
    53 00001989 488D151EF0FFFF      <1>     lea rdx, badCmd
    54 00001990 EBEB                <1>     jmp short badCmn
    55                              <1> dir:
    56                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    57 00001992 C6054CECFFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    58 00001999 C60546ECFFFF00      <1>     mov byte [dirLineCtr], 0
    59 000019A0 C60540ECFFFF00      <1>     mov byte [dirFileCtr], 0
    60 000019A7 C6053BECFFFF00      <1>     mov byte [dirSrchDir], 0
    61 000019AE 66C7052AEBFFFF0000  <1>     mov word [searchSpec], 0
    62 000019B7 488D3DADECFFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    63 000019BE C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    64 000019C1 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    64 000019CA 3F                  <1>
    65 000019CB 48894701            <1>     mov qword [rdi + fcb.filename], rax
    66 000019CF C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    67                              <1>     ;Start by scanning for the switches
    68 000019D6 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    69 000019DD 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    70                              <1> .scanNew:
    71 000019E0 E8AE1D0000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    72 000019E5 AC                  <1>     lodsb   ;Get this char
    73 000019E6 3C0D                <1>     cmp al, CR
    74 000019E8 744D                <1>     je .scanDone
    75 000019EA 3A053AE6FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    76 000019F0 7524                <1>     jne .notSwitch
    77 000019F2 AC                  <1>     lodsb   ;Get the next char
    78 000019F3 E8891D0000          <1>     call ucChar
    79 000019F8 3C57                <1>     cmp al, "W"
    80 000019FA 7509                <1>     jne .notWide
    81 000019FC 800DE2EBFFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    82 00001A03 EBDB                <1>     jmp short .scanNew
    83                              <1> .notWide:
    84 00001A05 3C50                <1>     cmp al, "P"
    85 00001A07 0F8533FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    86 00001A0D 800DD1EBFFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    87 00001A14 EBCA                <1>     jmp short .scanNew
    88                              <1> .notSwitch:
    89 00001A16 F605C8EBFFFF04      <1>     test byte [dirFlags], dirFileType
    90 00001A1D 0F851DFFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    91                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    92 00001A23 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    93 00001A26 E8F41E0000          <1>     call copyArgumentToSearchSpec   
    94 00001A2B 48FFCE              <1>     dec rsi ;Point back to the terminator char
    95 00001A2E 800DB0EBFFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    96 00001A35 EBA9                <1>     jmp short .scanNew
    97                              <1> .scanDone:
    98 00001A37 F605A7EBFFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    99 00001A3E 7438                <1>     jz .currentDrv
   100                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   101 00001A40 488D359AEAFFFF      <1>     lea rsi, searchSpec
   102 00001A47 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   103 00001A4B 752B                <1>     jne .currentDrv
   104                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   105 00001A4D 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   106 00001A52 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   107 00001A56 B801290000          <1>     mov eax, 2901h   ;Parse filename
   108 00001A5B CD21                <1>     int 21h
   109 00001A5D 3CFF                <1>     cmp al, -1
   110 00001A5F 0F84E4FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   111                              <1>     ;Else the drive in the fcb is valid
   112 00001A65 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   113 00001A6A 84C0                <1>     test al, al
   114 00001A6C 740A                <1>     jz .currentDrv
   115 00001A6E FEC8                <1>     dec al  ;Convert to 0 based drive number
   116 00001A70 880572EBFFFF        <1>     mov byte [dirDrv], al
   117 00001A76 EB0B                <1>     jmp short .dirPrintVol
   118                              <1> .currentDrv:
   119 00001A78 E8DC1C0000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   120 00001A7D 880565EBFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   121                              <1> .dirPrintVol:
   122 00001A83 488D3557EAFFFF      <1>     lea rsi, searchSpec
   123                              <1> ;Now construct the path on dirSrchDir.
   124 00001A8A 488D3D58EBFFFF      <1>     lea rdi, dirSrchDir
   125 00001A91 0FB60550EBFFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   126 00001A98 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   127 00001A9A 0441                <1>     add al, "A" ;Turn into a letter
   128 00001A9C B43A                <1>     mov ah, ":"
   129 00001A9E 66AB                <1>     stosw   ;Store X: into the search path
   130 00001AA0 B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   131 00001AA5 CD2F                <1>     int 2fh
   132 00001AA7 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   133 00001AA9 0F849AFEFFFF        <1>     je badDriveError
   134                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   135 00001AAF 8A0574E5FFFF        <1>     mov al, byte [pathSep]
   136 00001AB5 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   137 00001AB7 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   138 00001AB9 AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   139 00001ABA FEC2                <1>     inc dl  ;Increment by 1
   140 00001ABC 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   141 00001ABF B800470000          <1>     mov eax, 4700h  ;Print current working directory
   142 00001AC4 CD21                <1>     int 21h
   143 00001AC6 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   144                              <1>     ;rsi points to the first char in the provided path.
   145                              <1>     ;rdi points to the first char of the cwd.
   146 00001AC9 31C0                <1>     xor eax, eax
   147                              <1> .goToEndOfCwd:
   148                              <1> ;Move to the end of the string, could use repne?
   149 00001ACB 3807                <1>     cmp byte [rdi], al
   150 00001ACD 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   151 00001ACF 48FFC7              <1>     inc rdi
   152 00001AD2 EBF7                <1>     jmp short .goToEndOfCwd
   153                              <1> .prepCopy:
   154 00001AD4 8A054FE5FFFF        <1>     mov al, byte [pathSep]
   155 00001ADA 3806                <1>     cmp byte [rsi], al
   156 00001ADC 7412                <1>     je .copyPathLoop
   157 00001ADE B43A                <1>     mov ah, ":"
   158 00001AE0 86C4                <1>     xchg al, ah
   159 00001AE2 663947FE            <1>     cmp word [rdi - 2], ax
   160 00001AE6 7408                <1>     je .copyPathLoop
   161 00001AE8 88E0                <1>     mov al, ah
   162 00001AEA 3847FF              <1>     cmp byte [rdi - 1], al
   163 00001AED 7401                <1>     je .copyPathLoop
   164 00001AEF AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   165                              <1> .copyPathLoop:
   166 00001AF0 AC                  <1>     lodsb
   167 00001AF1 3A0532E5FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   168 00001AF7 7509                <1>     jne .checkDot  ;If not, store it
   169                              <1> .lpPathseps:
   170 00001AF9 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   171 00001AFB 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   172 00001AFD 48FFC6              <1>     inc rsi
   173 00001B00 EBF7                <1>     jmp short .lpPathseps
   174                              <1> .checkDot:
   175 00001B02 3C2E                <1>     cmp al, "."
   176 00001B04 7407                <1>     je .dots
   177                              <1> .store:
   178 00001B06 AA                  <1>     stosb
   179 00001B07 84C0                <1>     test al, al ;Was the char we just copied a null?
   180 00001B09 7472                <1>     jz .exitPathCopy
   181 00001B0B EBE3                <1>     jmp short .copyPathLoop
   182                              <1> .dots:
   183                              <1>     ;Here handle dot and dot dot
   184                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   185                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   186                              <1>     ; by 1. If it is null, go to top of loop.
   187                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   188 00001B0D 8A2516E5FFFF        <1>     mov ah, byte [pathSep]
   189 00001B13 3867FF              <1>     cmp byte [rdi - 1], ah  
   190 00001B16 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   191 00001B18 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   192 00001B1A 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   193 00001B1D 7413                <1>     je .twoDot
   194                              <1>     ;This is only a "current dir" when next char is pathsep or null
   195 00001B1F 3A2504E5FFFF        <1>     cmp ah, byte [pathSep]
   196 00001B25 7406                <1>     je .skipThisPathsep
   197 00001B27 84E4                <1>     test ah, ah
   198 00001B29 74C5                <1>     jz .copyPathLoop
   199 00001B2B EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   200                              <1> .skipThisPathsep:
   201                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   202 00001B2D 48FFC6              <1>     inc rsi ;Point to the pathsep
   203 00001B30 EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   204                              <1> .twoDot:
   205                              <1>     ;Woohoo, this works!
   206 00001B32 48FFC6              <1>     inc rsi ;Move past the second dot
   207 00001B35 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   208 00001B37 3A25ECE4FFFF        <1>     cmp ah, byte [pathSep]
   209 00001B3D 7408                <1>     je .tdOk
   210 00001B3F 84E4                <1>     test ah, ah
   211 00001B41 0F85F9FDFFFF        <1>     jne badParamError
   212                              <1> .tdOk:
   213 00001B47 8A05DCE4FFFF        <1>     mov al, byte byte [pathSep]
   214 00001B4D 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   215 00001B51 0F84E9FDFFFF        <1>     je badParamError
   216 00001B57 4881EF02000000      <1>     sub rdi, 2
   217 00001B5E 31C9                <1>     xor ecx, ecx
   218 00001B60 FFC9                <1>     dec ecx
   219 00001B62 FD                  <1>     std
   220 00001B63 F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   221 00001B65 FC                  <1>     cld
   222 00001B66 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   223 00001B6D 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   224 00001B6F 0F847BFFFFFF        <1>     jz .copyPathLoop
   225 00001B75 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   226 00001B78 E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   227                              <1> .exitPathCopy:
   228                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   229 00001B7D 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   230 00001B84 8A059FE4FFFF        <1>     mov al, byte [pathSep]
   231 00001B8A B43A                <1>     mov ah, ":"
   232 00001B8C 86C4                <1>     xchg al, ah
   233 00001B8E 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   234 00001B92 7409                <1>     je .skipOverwrite
   235 00001B94 88E0                <1>     mov al, ah
   236 00001B96 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   237 00001B98 7503                <1>     jne .skipOverwrite
   238 00001B9A C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   239                              <1> .skipOverwrite:
   240 00001B9D 488D3545EAFFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   241 00001BA4 4889F7              <1>     mov rdi, rsi
   242 00001BA7 B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   243 00001BAC CD2F                <1>     int 2fh
   244 00001BAE E8791D0000          <1>     call scanForWildcards
   245 00001BB3 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   246 00001BB5 4889F2              <1>     mov rdx, rsi
   247 00001BB8 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   248 00001BBC 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   249                              <1> .notNull:
   250 00001BBE E8301E0000          <1>     call setDTA ;Set the DTA
   251 00001BC3 B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   252 00001BC8 B8004E0000          <1>     mov eax, 4E00h ;Find first
   253 00001BCD CD21                <1>     int 21h
   254 00001BCF 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   255                              <1> ;Now we have searched for the file, is a directory?
   256 00001BD1 F605A4E5FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   257 00001BD8 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   258                              <1>     ;Here we are searching IN a directory. Default search pattern!
   259 00001BDA 31C0                <1>     xor eax, eax
   260 00001BDC 31C9                <1>     xor ecx, ecx
   261 00001BDE FFC9                <1>     dec ecx
   262 00001BE0 F2AE                <1>     repne scasb
   263 00001BE2 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   264 00001BE5 EB40                <1>     jmp short .wcDefaultSearch
   265                              <1> .wcSearchPattern:
   266                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   267                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   268 00001BE7 31C0                <1>     xor eax, eax
   269 00001BE9 31C9                <1>     xor ecx, ecx
   270 00001BEB FFC9                <1>     dec ecx
   271 00001BED F2AE                <1>     repne scasb ;Scan forwards
   272                              <1>     ;Here rdi points past the null at the end
   273 00001BEF 8A0534E4FFFF        <1>     mov al, byte [pathSep]
   274 00001BF5 31C9                <1>     xor ecx, ecx
   275 00001BF7 FFC9                <1>     dec ecx
   276 00001BF9 FD                  <1>     std ;Search backwards
   277 00001BFA F2AE                <1>     repne scasb
   278 00001BFC FC                  <1>     cld ;Search forwards again
   279 00001BFD 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   280 00001C00 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   281 00001C04 7503                <1>     jne .wcsp1
   282 00001C06 48FFC7              <1>     inc rdi ;Go one char forwards
   283                              <1> .wcsp1:
   284                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   285 00001C09 57                  <1>     push rdi
   286 00001C0A 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   287 00001C0C 7503                <1>     jne .wcsp2
   288 00001C0E 48FFC7              <1>     inc rdi
   289                              <1> .wcsp2:
   290 00001C11 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   291 00001C14 488D3D50EAFFFF      <1>     lea rdi, dirSrchFCB
   292 00001C1B B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   293 00001C20 CD21                <1>     int 21h
   294 00001C22 5F                  <1>     pop rdi
   295 00001C23 31C0                <1>     xor eax, eax
   296 00001C25 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   297                              <1> .wcDefaultSearch:
   298 00001C27 0FB605BAE9FFFF      <1>     movzx eax, byte [dirDrv] 
   299 00001C2E E8350E0000          <1>     call volume.dirEP
   300 00001C33 488D1529F0FFFF      <1>     lea rdx, dirMain    ;Print message intro
   301 00001C3A B409                <1>     mov ah, 09h
   302 00001C3C CD21                <1>     int 21h
   303 00001C3E C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   304 00001C41 488D15A1E9FFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   305 00001C48 B409                <1>     mov ah, 09h
   306 00001C4A CD21                <1>     int 21h
   307 00001C4C C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   308 00001C4F 488D15FEECFFFF      <1>     lea rdx, crlf2
   309 00001C56 B409                <1>     mov ah, 09h
   310 00001C58 CD21                <1>     int 21h
   311                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   312                              <1> ;rdi points to the terminating null
   313 00001C5A 8A05C9E3FFFF        <1>     mov al, byte [pathSep]
   314 00001C60 3847FF              <1>     cmp byte [rdi - 1], al
   315 00001C63 7403                <1>     je .root
   316 00001C65 48FFC7              <1>     inc rdi
   317                              <1> .root:
   318 00001C68 48FFCF              <1>     dec rdi ;Point back to the pathsep
   319 00001C6B AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   320 00001C6C 488D35F9E9FFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   321 00001C73 E8F61B0000          <1>     call FCBToAsciiz    ;Terminates for free
   322 00001C78 E801000000          <1>     call .searchForFile
   323                              <1>     return
    13                              <2> %%_ret:
    14 00001C7D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   324                              <1> 
   325                              <1> .searchForFile:
   326 00001C7E E8701D0000          <1>     call setDTA
   327 00001C83 B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   328 00001C88 488D155AE9FFFF      <1>     lea rdx, dirSrchDir
   329 00001C8F B8004E0000          <1>     mov eax, 4E00h ;Find first
   330 00001C94 CD21                <1>     int 21h
   331 00001C96 720B                <1>     jc .dirNoMoreFiles
   332                              <1> .findNext:
   333 00001C98 E878000000          <1>     call .dirPrintFileData  ;Print the file information
   334 00001C9D B44F                <1>     mov ah, 4Fh
   335 00001C9F CD21                <1>     int 21h
   336 00001CA1 73F5                <1>     jnc .findNext 
   337                              <1> .dirNoMoreFiles:
   338 00001CA3 F6053BE9FFFF01      <1>     test byte [dirFlags], dirWideType
   339 00001CAA 740B                <1>     jz .dirNoEndNewLine
   340 00001CAC 488D159EECFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   341 00001CB3 B409                <1>     mov ah, 09h
   342 00001CB5 CD21                <1>     int 21h
   343                              <1> .dirNoEndNewLine:
   344                              <1>     ;Now we print the number of files and the number of bytes on the disk
   345 00001CB7 488D1557F2FFFF      <1>     lea rdx, fourSpc
   346 00001CBE B409                <1>     mov ah, 09h
   347 00001CC0 CD21                <1>     int 21h
   348 00001CC2 B409                <1>     mov ah, 09h ;Print four Spaces twice
   349 00001CC4 CD21                <1>     int 21h
   350 00001CC6 0FB6051AE9FFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   351 00001CCD E86E1C0000          <1>     call printDecimalWord
   352 00001CD2 488D15C3EDFFFF      <1>     lea rdx, dirOk
   353 00001CD9 B409                <1>     mov ah, 09h
   354 00001CDB CD21                <1>     int 21h
   355 00001CDD 488D1536F2FFFF      <1>     lea rdx, threeSpc
   356 00001CE4 B409                <1>     mov ah, 09h
   357 00001CE6 CD21                <1>     int 21h
   358 00001CE8 B800360000          <1>     mov eax, 3600h ;Get disk info
   359 00001CED 8A15F5E8FFFF        <1>     mov dl, byte [dirDrv]
   360 00001CF3 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   361 00001CF5 CD21                <1>     int 21h ;Get disk free space info
   362 00001CF7 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   363 00001CFA 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   364 00001CFD 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   365 00001CFF F7E1                <1>     mul ecx ;Get bytes per cluster
   366 00001D01 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   367                              <1>     ;rax now has the number of free bytes on the disk
   368 00001D04 E8371C0000          <1>     call printDecimalWord
   369 00001D09 488D1596EDFFFF      <1>     lea rdx, bytesOk
   370 00001D10 B409                <1>     mov ah, 09h
   371 00001D12 CD21                <1>     int 21h
   372                              <1>     return
    13                              <2> %%_ret:
    14 00001D14 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   373                              <1> 
   374                              <1> .dirPrintFileData:
   375                              <1> ;Use cmdFcb to build the file name with space
   376                              <1> ;Start by print the name (same for both cases)
   377                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   378 00001D15 F60560E4FFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   379                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001D1C 75(14)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   380 00001D1E 488D3560E4FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   381 00001D25 488D3D2BE4FFFF      <1>     lea rdi, cmdFcb
   382 00001D2C E8CF1A0000          <1>     call asciiFilenameToFCB
   383 00001D31 488D151FE4FFFF      <1>     lea rdx, cmdFcb
   384 00001D38 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   385 00001D3D BB01000000          <1>     mov ebx, 1  ;STDOUT
   386 00001D42 B440                <1>     mov ah, 40h ;Write handle
   387 00001D44 CD21                <1>     int 21h
   388 00001D46 52                  <1>     push rdx
   389 00001D47 B220                <1>     mov dl, " "
   390 00001D49 B402                <1>     mov ah, 02h ;Print char
   391 00001D4B CD21                <1>     int 21h
   392 00001D4D 5A                  <1>     pop rdx
   393 00001D4E 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   394 00001D55 B903000000          <1>     mov ecx, 3  ;Print three chars
   395 00001D5A BB01000000          <1>     mov ebx, 1  ;STDOUT
   396 00001D5F B440                <1>     mov ah, 40h ;Write handle
   397 00001D61 CD21                <1>     int 21h
   398 00001D63 F6057BE8FFFF01      <1>     test byte [dirFlags], dirWideType
   399 00001D6A 0F85A8000000        <1>     jnz .widePrint
   400                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   401                              <1>     ;Now check if a DIR
   402 00001D70 F60505E4FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   403 00001D77 7418                <1>     jz .dirPrintNotDir
   404 00001D79 488D1534EDFFFF      <1>     lea rdx, dirLbl
   405 00001D80 B409                <1>     mov ah, 09h
   406 00001D82 CD21                <1>     int 21h
   407 00001D84 488D158FF1FFFF      <1>     lea rdx, threeSpc
   408 00001D8B B409                <1>     mov ah, 09h
   409 00001D8D CD21                <1>     int 21h
   410 00001D8F EB4F                <1>     jmp short .dirPrintFileDT
   411                              <1> .dirPrintNotDir:
   412                              <1> ;Here we print the file size
   413 00001D91 B220                <1>     mov dl, " "
   414 00001D93 B402                <1>     mov ah, 02h
   415 00001D95 CD21                <1>     int 21h
   416 00001D97 8B05E4E3FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   417 00001D9D E80F1C0000          <1>     call getDecimalWord
   418 00001DA2 4889CB              <1>     mov rbx, rcx
   419 00001DA5 51                  <1>     push rcx
   420 00001DA6 480FCB              <1>     bswap rbx
   421 00001DA9 B908000000          <1>     mov ecx, 8
   422                              <1> .dirPrintFileSizePrep:
   423 00001DAE 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   424 00001DB0 7514                <1>     jne .dirPrintFileSize
   425 00001DB2 B402                <1>     mov ah, 02h
   426 00001DB4 B220                <1>     mov dl, " "
   427 00001DB6 CD21                <1>     int 21h
   428 00001DB8 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   429 00001DBC FFC9                <1>     dec ecx
   430 00001DBE 81F901000000        <1>     cmp ecx, 1
   431 00001DC4 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   432                              <1> .dirPrintFileSize:
   433 00001DC6 5B                  <1>     pop rbx
   434                              <1> .dirPrintFileSizeLoop:
   435 00001DC7 88DA                <1>     mov dl, bl
   436 00001DC9 B402                <1>     mov ah, 02h
   437 00001DCB CD21                <1>     int 21h
   438 00001DCD 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   439 00001DD1 FFC9                <1>     dec ecx
   440 00001DD3 75F2                <1>     jnz .dirPrintFileSizeLoop
   441 00001DD5 488D1542F1FFFF      <1>     lea rdx, twoSpc
   442 00001DDC B409                <1>     mov ah, 09h
   443 00001DDE CD21                <1>     int 21h
   444                              <1> .dirPrintFileDT:
   445 00001DE0 B220                <1>     mov dl, " "
   446 00001DE2 B402                <1>     mov ah, 02h
   447 00001DE4 CD21                <1>     int 21h
   448 00001DE6 0FB70592E3FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   449 00001DED 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   450 00001DEF E806150000          <1>     call printDate
   451 00001DF4 488D1523F1FFFF      <1>     lea rdx, twoSpc
   452 00001DFB B409                <1>     mov ah, 09h
   453 00001DFD CD21                <1>     int 21h
   454 00001DFF 0FB70577E3FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   455 00001E06 E811160000          <1>     call printTime
   456 00001E0B 488D153FEBFFFF      <1>     lea rdx, crlf
   457 00001E12 B409                <1>     mov ah, 09h
   458 00001E14 CD21                <1>     int 21h
   459 00001E16 EB0B                <1>     jmp short .dirPrintNameExit
   460                              <1> .widePrint:
   461                              <1> ;If /W, print name space ext space space space space
   462 00001E18 488D15F6F0FFFF      <1>     lea rdx, fourSpc
   463 00001E1F B409                <1>     mov ah, 09h ;Print string
   464 00001E21 CD21                <1>     int 21h
   465                              <1> .dirPrintNameExit:
   466 00001E23 FE05BEE7FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   467 00001E29 FE05B7E7FFFF        <1>     inc byte [dirLineCtr]
   468 00001E2F 803DB0E7FFFF17      <1>     cmp byte [dirLineCtr], 23
   469                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001E36 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001E38 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   470 00001E39 488D159BECFFFF      <1>     lea rdx, pauseMes
   471 00001E40 B409                <1>     mov ah, 09h
   472 00001E42 CD21                <1>     int 21h
   473 00001E44 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   474 00001E46 CD21                <1>     int 21h
   475 00001E48 C60597E7FFFF00      <1>     mov byte [dirLineCtr], 0
   476 00001E4F 488D15FBEAFFFF      <1>     lea rdx, crlf   ;Force new line
   477 00001E56 B409                <1>     mov ah, 09h
   478 00001E58 CD21                <1>     int 21h
   479                              <1>     return
    13                              <2> %%_ret:
    14 00001E5A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   480                              <1> 
   481                              <1> chdir:
   482 00001E5B F60548E2FFFFFF      <1>     test byte [arg1Flg], -1
   483 00001E62 754D                <1>     jnz .changeDir
   484                              <1>     ;Print CWD
   485                              <1> .printCWD:
   486 00001E64 E856170000          <1>     call putCWDInPrompt ;Exactly the same procedure
   487 00001E69 E8D5160000          <1>     call printCRLF
   488                              <1>     return
    13                              <2> %%_ret:
    14 00001E6E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   489                              <1> .printDiskCWD:
   490                              <1> ;Print CWD for a specified drive
   491 00001E6F 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   492 00001E73 88D0                <1>     mov al, dl
   493 00001E75 0440                <1>     add al, "@" ;Get the UC letter
   494 00001E77 B43A                <1>     mov ah, ":"
   495 00001E79 488D3D61E6FFFF      <1>     lea rdi, searchSpec
   496 00001E80 66AB                <1>     stosw   ;Store X:, rdi+=2
   497 00001E82 8A05A1E1FFFF        <1>     mov al, byte [pathSep]
   498 00001E88 AA                  <1>     stosb   ;Store pathSep, inc rdi
   499 00001E89 B447                <1>     mov ah, 47h ;Get Current Working Directory
   500 00001E8B 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   501 00001E8E CD21                <1>     int 21h
   502 00001E90 E8E2180000          <1>     call strlen
   503 00001E95 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   504 00001E9B B440                <1>     mov ah, 40h ;Write to handle
   505 00001E9D BB01000000          <1>     mov ebx, 1  ;STDOUT
   506 00001EA2 488D1538E6FFFF      <1>     lea rdx, searchSpec
   507 00001EA9 CD21                <1>     int 21h
   508 00001EAB E893160000          <1>     call printCRLF
   509                              <1>     return
    13                              <2> %%_ret:
    14 00001EB0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   510                              <1> .changeDir:
   511 00001EB1 8A05F5E1FFFF        <1>     mov al, byte [arg1FCBret]
   512 00001EB7 3CFF                <1>     cmp al, -1 
   513 00001EB9 0F848AFAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   514 00001EBF E8431A0000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   515 00001EC4 488D1516E6FFFF      <1>     lea rdx, searchSpec
   516 00001ECB B43B                <1>     mov ah, 3Bh ;CHDIR
   517 00001ECD CD21                <1>     int 21h
   518 00001ECF 0F82A1FAFFFF        <1>     jc badDirError
   519                              <1>     return
    13                              <2> %%_ret:
    14 00001ED5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   520                              <1> 
   521                              <1> mkdir:
   522 00001ED6 F605CDE1FFFFFF      <1>     test byte [arg1Flg], -1
   523 00001EDD 0F846FFAFFFF        <1>     jz badArgError
   524 00001EE3 F605C3E1FFFFFF      <1>     test byte [arg2Flg], -1
   525 00001EEA 0F8562FAFFFF        <1>     jnz badArgError
   526                              <1>     ;We have exactly one argument
   527 00001EF0 8A05B6E1FFFF        <1>     mov al, byte [arg1FCBret]
   528 00001EF6 3CFF                <1>     cmp al, -1 
   529 00001EF8 0F844BFAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   530 00001EFE E8041A0000          <1>     call buildCommandPath
   531 00001F03 488D15D7E5FFFF      <1>     lea rdx, searchSpec
   532 00001F0A B800390000          <1>     mov eax, 3900h  ;MKDIR
   533 00001F0F CD21                <1>     int 21h
   534                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001F11 73(D5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   535                              <1> .badMake:   ;Else, bad make
   536 00001F13 488D15F5ECFFFF      <1>     lea rdx, badMD
   537 00001F1A E92B160000          <1>     jmp printString
   538                              <1> 
   539                              <1> rmdir:
   540 00001F1F F60584E1FFFFFF      <1>     test byte [arg1Flg], -1
   541 00001F26 0F8426FAFFFF        <1>     jz badArgError
   542 00001F2C F6057AE1FFFFFF      <1>     test byte [arg2Flg], -1
   543 00001F33 0F8519FAFFFF        <1>     jnz badArgError
   544                              <1>     ;We have exactly one argument
   545 00001F39 8A056DE1FFFF        <1>     mov al, byte [arg1FCBret]
   546 00001F3F 3CFF                <1>     cmp al, -1 
   547 00001F41 0F8402FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   548 00001F47 E8BB190000          <1>     call buildCommandPath
   549 00001F4C 488D158EE5FFFF      <1>     lea rdx, searchSpec
   550 00001F53 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   551 00001F58 CD21                <1>     int 21h
   552                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001F5A 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001F5C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   553                              <1> .badRemove:   ;Else, bad make
   554 00001F5D 488D15C8ECFFFF      <1>     lea rdx, badRD
   555 00001F64 E9E1150000          <1>     jmp printString
   556                              <1> 
   557                              <1> copy:
   558 00001F69 F6053AE1FFFFFF      <1>     test byte [arg1Flg], -1
   559 00001F70 0F84DCF9FFFF        <1>     jz badArgError
   560 00001F76 F60530E1FFFFFF      <1>     test byte [arg2Flg], -1
   561 00001F7D 0F84CFF9FFFF        <1>     jz badArgError
   562 00001F83 0FB60521E1FFFF      <1>     movzx eax, byte [arg1Off]
   563 00001F8A 4C8B057EE0FFFF      <1>     mov r8, [pspPtr]
   564 00001F91 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   565 00001F98 4889F3              <1>     mov rbx, rsi    ;Save the ptr to the start of the string in rbx
   566 00001F9B 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   567 00001F9E 488D3D06E7FFFF      <1>     lea rdi, srcSpec
   568 00001FA5 E81A190000          <1>     call cpDelimPathToBufz    
   569 00001FAA 0FB605FDE0FFFF      <1>     movzx eax, byte [arg2Off]
   570 00001FB1 4889DE              <1>     mov rsi, rbx    ;Get back the start of the ptr
   571 00001FB4 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   572 00001FB7 488D3D6FE7FFFF      <1>     lea rdi, destSpec
   573 00001FBE E801190000          <1>     call cpDelimPathToBufz   
   574                              <1> ;Before we open, we check if the two filenames are equal
   575                              <1> ; If so, crap out.
   576 00001FC3 488D35E1E6FFFF      <1>     lea rsi, srcSpec
   577 00001FCA 488D3D5CE7FFFF      <1>     lea rdi, destSpec
   578 00001FD1 B81E120000          <1>     mov eax, 121Eh
   579 00001FD6 CD2F                <1>     int 2Fh
   580 00001FD8 0F84D3000000        <1>     jz .sameFilename
   581                              <1>     ;Open source with read permission
   582                              <1>     ;Open destination with write permission
   583 00001FDE 488D15C6E6FFFF      <1>     lea rdx, srcSpec
   584 00001FE5 B8003D0000          <1>     mov eax, 3D00h  ;Read open
   585 00001FEA CD21                <1>     int 21h
   586 00001FEC 0F824EF9FFFF        <1>     jc badParamError
   587 00001FF2 668905D1E7FFFF      <1>     mov word [sourceHdl], ax
   588                              <1> 
   589 00001FF9 0FB7D8              <1>     movzx ebx, ax   ;For bx
   590 00001FFC B800440000          <1>     mov eax, 4400h  ;Get device info in dx
   591 00002001 CD21                <1>     int 21h
   592 00002003 668915C4E7FFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
   593                              <1> 
   594 0000200A 488D151CE7FFFF      <1>     lea rdx, destSpec
   595 00002011 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   596 00002016 31C9                <1>     xor ecx, ecx    ;No file attributes
   597 00002018 CD21                <1>     int 21h
   598 0000201A 0F82B8000000        <1>     jc .badExit
   599 00002020 668905A5E7FFFF      <1>     mov word [destHdl], ax
   600 00002027 31F6                <1>     xor esi, esi
   601 00002029 488D15A0E7FFFF      <1>     lea rdx, copyBuffer
   602                              <1> .copyLoop:
   603 00002030 B980000000          <1>     mov ecx, 128
   604 00002035 0FB71D8EE7FFFF      <1>     movzx ebx, word [sourceHdl]
   605 0000203C B43F                <1>     mov ah, 3Fh ;Read
   606 0000203E CD21                <1>     int 21h
   607 00002040 0F8292000000        <1>     jc .badExit
   608 00002046 85C0                <1>     test eax, eax
   609 00002048 743A                <1>     jz .okExit
   610 0000204A 01C6                <1>     add esi, eax
   611 0000204C 89C1                <1>     mov ecx, eax
   612 0000204E 0FB71D77E7FFFF      <1>     movzx ebx, word [destHdl]
   613 00002055 B440                <1>     mov ah, 40h ;Write
   614 00002057 CD21                <1>     int 21h
   615 00002059 727D                <1>     jc .badExit
   616 0000205B 3D80000000          <1>     cmp eax, 128    ;Did we read 128 chars?
   617 00002060 74CE                <1>     je .copyLoop
   618                              <1>     ;If not char dev, exit
   619 00002062 66F70563E7FFFF8000  <1>     test word [srcHdlInfo], 80h ;Char dev bit set?
   620 0000206B 7417                <1>     jz .okExit
   621                              <1>     ;Is handle in cooked or binary mode?
   622 0000206D 66F70558E7FFFF2000  <1>     test word [srcHdlInfo], 20h
   623 00002076 750C                <1>     jnz .okExit
   624                              <1>     ;Here the char dev must be in cooked mode. Check if the last char was ^Z
   625 00002078 09C0                <1>     or eax, eax ;Clear upper bits in eax
   626 0000207A 488D7C02FF          <1>     lea rdi, qword [rdx + rax - 1]  ;Point to the last char in the buffer
   627 0000207F 803F1A              <1>     cmp byte [rdi], EOF ;Was this EOF?
   628 00002082 75AC                <1>     jne .copyLoop   ;Jump if not
   629                              <1> .okExit:
   630 00002084 E832000000          <1>     call .leaveCopyClose
   631 00002089 488D15C1E8FFFF      <1>     lea rdx, crlf
   632 00002090 B409                <1>     mov ah, 09h
   633 00002092 CD21                <1>     int 21h
   634 00002094 488D157AEEFFFF      <1>     lea rdx, fourSpc
   635 0000209B B409                <1>     mov ah, 09h
   636 0000209D CD21                <1>     int 21h
   637 0000209F B402                <1>     mov ah, 02h
   638 000020A1 B231                <1>     mov dl, "1" ;1 File(s) copied
   639 000020A3 CD21                <1>     int 21h
   640 000020A5 488D15DEE9FFFF      <1>     lea rdx, copyOk
   641 000020AC B409                <1>     mov ah, 09h
   642 000020AE CD21                <1>     int 21h
   643                              <1>     return
    13                              <2> %%_ret:
    14 000020B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   644                              <1> .sameFilename:
   645 000020B1 E805000000          <1>     call .leaveCopyClose ;Close the handles
   646 000020B6 E97CF8FFFF          <1>     jmp noSelfCopyError
   647                              <1> .leaveCopyClose:
   648 000020BB 668B1D08E7FFFF      <1>     mov bx, word [sourceHdl]
   649 000020C2 B8003E0000          <1>     mov eax, 3E00h
   650 000020C7 CD21                <1>     int 21h
   651 000020C9 668B1DFCE6FFFF      <1>     mov bx, word [destHdl]
   652 000020D0 B8003E0000          <1>     mov eax, 3E00h
   653 000020D5 CD21                <1>     int 21h
   654                              <1>     return
    13                              <2> %%_ret:
    14 000020D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   655                              <1> .badExit:
   656                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   657 000020D8 668B1DEBE6FFFF      <1>     mov bx, word [sourceHdl]
   658 000020DF 6681FBFFFF          <1>     cmp bx, -1
   659 000020E4 7407                <1>     je .skipSource
   660 000020E6 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   661 000020EB CD21                <1>     int 21h
   662                              <1> .skipSource:
   663 000020ED 668B1DD8E6FFFF      <1>     mov bx, word [destHdl]
   664 000020F4 6681FBFFFF          <1>     cmp bx, -1
   665 000020F9 0F8441F8FFFF        <1>     je badParamError
   666 000020FF B8003E0000          <1>     mov eax, 3E00h
   667 00002104 CD21                <1>     int 21h
   668 00002106 E935F8FFFF          <1>     jmp badParamError
   669                              <1> 
   670                              <1> erase:
   671 0000210B F60598DFFFFFFF      <1>     test byte [arg1Flg], -1
   672 00002112 0F843AF8FFFF        <1>     jz badArgError
   673 00002118 E8D6180000          <1>     call setDTA     ;Start by resetting the DTA
   674 0000211D E8E5170000          <1>     call buildCommandPath   ;Get the relative path to the file
   675                              <1> .dirLp:
   676 00002122 488D3DB8E3FFFF      <1>     lea rdi, searchSpec
   677 00002129 E81C170000          <1>     call findLastPathComponant
   678 0000212E 4889FE              <1>     mov rsi, rdi    ;Save this as the source
   679 00002131 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
   680 00002135 B03F                <1>     mov al, "?"
   681                              <1>     ;Store question marks in the name field
   682 00002137 57                  <1>     push rdi
   683 00002138 48FFC7              <1>     inc rdi ;Goto the first char
   684 0000213B B90B000000          <1>     mov ecx, 11
   685 00002140 F3AA                <1>     rep stosb
   686 00002142 5F                  <1>     pop rdi
   687 00002143 4889F2              <1>     mov rdx, rsi    ;Save the ptr
   688 00002146 B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
   689 0000214B CD21                <1>     int 21h
   690 0000214D 3C01                <1>     cmp al, 1
   691 0000214F 0F859C000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
   692                              <1>     ;Else, we now copy back the search pattern over the last componant!
   693                              <1>     ;No dirs to handle in here
   694 00002155 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
   695 00002159 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
   696 0000215C E80D170000          <1>     call FCBToAsciiz    ;Null terminates for free
   697                              <1>     ;Count the number of ?'s, if 11, we print the message
   698 00002161 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
   699 00002165 31C9                <1>     xor ecx, ecx
   700                              <1> .wcScan:
   701 00002167 AC                  <1>     lodsb
   702 00002168 3C3F                <1>     cmp al, "?"
   703 0000216A 752F                <1>     jne .endCount
   704 0000216C FFC1                <1>     inc ecx
   705 0000216E 81F90B000000        <1>     cmp ecx, 11
   706 00002174 75F1                <1>     jne .wcScan
   707                              <1> .ynmsg:
   708 00002176 488D1532EAFFFF      <1>     lea rdx, ynMes
   709 0000217D E8C8130000          <1>     call printString
   710 00002182 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   711 00002184 CD21                <1>     int 21h ;Get char in al
   712 00002186 E8F6150000          <1>     call ucChar ;Uppercase the char
   713 0000218B 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
   714 0000218D 7407                <1>     je .endCount1
   715 0000218F 3C4E                <1>     cmp al, "N"
   716                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002191 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002193 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   717 00002194 EBE0                <1>     jmp short .ynmsg    ;Else, tell me what you want!!!
   718                              <1> .endCount1:
   719 00002196 E8A8130000          <1>     call printCRLF
   720                              <1> .endCount:
   721                              <1>     ;Now we copy our search template pathstring to delPath
   722 0000219B 488D3D09E5FFFF      <1>     lea rdi, delPath
   723 000021A2 488D3538E3FFFF      <1>     lea rsi, searchSpec ;Source the chars from here
   724 000021A9 E8BF150000          <1>     call strcpy2         ;Copy the string over to delPath
   725                              <1> .findFile:
   726                              <1>     ;Now we find first/find next our way through the files
   727 000021AE 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
   728 000021B1 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
   729 000021B3 B8004E0000          <1>     mov eax, 4E00h  ;Find first
   730 000021B8 CD21                <1>     int 21h
   731 000021BA 0F82ADF7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   732                              <1>     ;Now the file was found, we copy the name over, delete and keep going
   733 000021C0 E885160000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
   734 000021C5 488D35B9DFFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   735                              <1> .delNextFile:
   736                              <1> ;rsi and rdi dont move here
   737 000021CC E89C150000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
   738 000021D1 488D15D3E4FFFF      <1>     lea rdx, delPath
   739 000021D8 B800410000          <1>     mov eax, 4100h  ;Delete File 
   740 000021DD CD21                <1>     int 21h         ;If this fails to delete it, fail silently
   741 000021DF 488D15FBE2FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
   742 000021E6 B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
   743 000021EB CD21                <1>     int 21h
   744 000021ED 73DD                <1>     jnc .delNextFile    
   745 000021EF F8                  <1>     clc ;Clear carry to indicate success
   746                              <1>     return
    13                              <2> %%_ret:
    14 000021F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   747                              <1> .noWildcard:
   748                              <1>     ;Here we just check that the file was not a directory. If it was, we add
   749                              <1>     ; a \*.*<NUL> over the null terminator
   750 000021F1 488D15E9E2FFFF      <1>     lea rdx, searchSpec
   751 000021F8 B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
   752 000021FD B8004E0000          <1>     mov eax, 4E00h  ;Find first
   753 00002202 CD21                <1>     int 21h
   754 00002204 0F8263F7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   755 0000220A F6056BDFFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   756 00002211 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
   757                              <1>     ;Else, we are dealing with a dir
   758 00002213 4889D7              <1>     mov rdi, rdx
   759 00002216 31C9                <1>     xor ecx, ecx
   760 00002218 FFC9                <1>     dec ecx
   761 0000221A F2AE                <1>     repne scasb ;Go to the end of the line!
   762 0000221C 48FFCF              <1>     dec rdi
   763 0000221F 0FB60503DEFFFF      <1>     movzx eax, byte [pathSep]
   764 00002226 AA                  <1>     stosb
   765 00002227 B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
   766 0000222C AB                  <1>     stosd
   767 0000222D E9F0FEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
   768                              <1> .delMain:   ;Call with rdx -> buffer!
   769 00002232 B800410000          <1>     mov eax, 4100h  ;Delete File 
   770 00002237 CD21                <1>     int 21h
   771                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002239 73(F0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   772 0000223B 3C05                <1>     cmp al, errAccDen
   773 0000223D 0F84EBF6FFFF        <1>     je badAccError ;If the file is RO, fail!
   774 00002243 E913F7FFFF          <1>     jmp badFileError
   775                              <1>     return
    13                              <2> %%_ret:
    14 00002248 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   776                              <1> date:
   777 00002249 488D15E2E8FFFF      <1>     lea rdx, curDate
   778 00002250 B409                <1>     mov ah, 09h
   779 00002252 CD21                <1>     int 21h
   780 00002254 E81A140000          <1>     call printFmtDate
   781                              <1> 
   782 00002259 488D15E3E8FFFF      <1>     lea rdx, newDate
   783 00002260 B409                <1>     mov ah, 09h
   784 00002262 CD21                <1>     int 21h
   785 00002264 488D15F7E8FFFF      <1>     lea rdx, ukDate
   786 0000226B 488D05E3E8FFFF      <1>     lea rax, usDate
   787 00002272 488D1DF6E8FFFF      <1>     lea rbx, jpDate
   788 00002279 803DB4DDFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   789 00002280 480F47D3            <1>     cmova rdx, rbx
   790 00002284 480F42D0            <1>     cmovb rdx, rax
   791 00002288 B409                <1>     mov ah, 09h
   792 0000228A CD21                <1>     int 21h
   793                              <1> 
   794 0000228C 488D151FDFFFFF      <1>     lea rdx, inBuffer
   795 00002293 C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
   796 00002296 B40A                <1>     mov ah, 0Ah
   797 00002298 CD21                <1>     int 21h
   798 0000229A 52                  <1>     push rdx
   799 0000229B 488D15AFE6FFFF      <1>     lea rdx, crlf
   800 000022A2 B409                <1>     mov ah, 09h
   801 000022A4 CD21                <1>     int 21h
   802 000022A6 5A                  <1>     pop rdx
   803 000022A7 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   804                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000022AB 74(48)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   805                              <1>     return
    13                              <2> %%_ret:
    14 000022AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   806                              <1> 
   807                              <1> time:
   808 000022AE 488D15D6E8FFFF      <1>     lea rdx, curTime
   809 000022B5 B409                <1>     mov ah, 09h
   810 000022B7 CD21                <1>     int 21h
   811                              <1> 
   812 000022B9 E852130000          <1>     call printFmtTime
   813                              <1> 
   814 000022BE 488D15D7E8FFFF      <1>     lea rdx, newTime
   815 000022C5 B409                <1>     mov ah, 09h
   816 000022C7 CD21                <1>     int 21h
   817                              <1> 
   818 000022C9 488D15E2DEFFFF      <1>     lea rdx, inBuffer
   819 000022D0 C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
   820 000022D3 B40A                <1>     mov ah, 0Ah
   821 000022D5 CD21                <1>     int 21h
   822 000022D7 52                  <1>     push rdx
   823 000022D8 488D1572E6FFFF      <1>     lea rdx, crlf
   824 000022DF B409                <1>     mov ah, 09h
   825 000022E1 CD21                <1>     int 21h
   826 000022E3 5A                  <1>     pop rdx
   827 000022E4 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   828                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000022E8 74(AD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   829                              <1>     return
    13                              <2> %%_ret:
    14 000022EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   830                              <1> ctty:
   831 000022EB F605B8DDFFFFFF      <1>     test byte [arg1Flg], -1
   832 000022F2 0F845AF6FFFF        <1>     jz badArgError
   833 000022F8 F605AEDDFFFFFF      <1>     test byte [arg2Flg], -1
   834 000022FF 0F854DF6FFFF        <1>     jnz badArgError
   835 00002305 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   836 0000230C 0FB60598DDFFFF      <1>     movzx eax, byte [arg1Off]
   837 00002313 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   838 00002316 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   839 0000231A 750F                <1>     jne .noDrive
   840 0000231C 0FB60589DDFFFF      <1>     movzx eax, byte [arg1FCBret]
   841 00002323 3CFF                <1>     cmp al, -1
   842 00002325 0F841EF6FFFF        <1>     je badDriveError
   843                              <1> .noDrive:
   844                              <1>     ;Now we open the provided file
   845 0000232B E8EF150000          <1>     call copyArgumentToSearchSpec
   846 00002330 488D15AAE1FFFF      <1>     lea rdx, searchSpec
   847 00002337 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   848 0000233C CD21                <1>     int 21h
   849 0000233E 0F8217F6FFFF        <1>     jc badFileError
   850 00002344 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   851 00002347 B800440000          <1>     mov eax, 4400h  ;Get device word
   852 0000234C CD21                <1>     int 21h
   853 0000234E F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   854 00002351 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   855                              <1>     ;Now we set this handle to be STDIO
   856 00002353 80CA03              <1>     or dl, 3    ;Set STDIO bits
   857 00002356 30F6                <1>     xor dh, dh
   858 00002358 B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   859 0000235D CD21                <1>     int 21h
   860                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   861 0000235F 31C9                <1>     xor ecx, ecx    ;STDIN
   862 00002361 B446                <1>     mov ah, 46h
   863 00002363 CD21                <1>     int 21h
   864 00002365 FFC1                <1>     inc ecx         ;STDOUT
   865 00002367 B446                <1>     mov ah, 46h
   866 00002369 CD21                <1>     int 21h
   867 0000236B FFC1                <1>     inc ecx         ;STDERR
   868 0000236D B446                <1>     mov ah, 46h
   869 0000236F CD21                <1>     int 21h
   870 00002371 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   871 00002373 CD21                <1>     int 21h
   872                              <1>     return
    13                              <2> %%_ret:
    14 00002375 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   873                              <1> .badCharDev:
   874 00002376 488D1530E9FFFF      <1>     lea rdx, badDev
   875 0000237D B409                <1>     mov ah, 09h
   876 0000237F CD21                <1>     int 21h
   877 00002381 B43E                <1>     mov ah, 3Eh ;Close opened handle
   878 00002383 CD21                <1>     int 21h
   879                              <1>     return
    13                              <2> %%_ret:
    14 00002385 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   880                              <1> 
   881                              <1> cls:  
   882 00002386 B800440000          <1>     mov eax, 4400h  ;Get device info
   883 0000238B BB01000000          <1>     mov ebx, 1      ;for handle 1
   884 00002390 CD21                <1>     int 21h         ;in dx
   885 00002392 F7C280000000        <1>     test edx, devCharDev
   886 00002398 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   887 0000239A F7C210000000        <1>     test edx, charDevFastOut
   888 000023A0 743E                <1>     jz .doAnsi
   889                              <1>     ;Test if Int 29h uses Int 30h
   890                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   891                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
   892 000023A2 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
   893 000023A7 CD21                <1>     int 21h
   894                              <1> .biosCheck:
   895 000023A9 66813BCD30          <1>     cmp word [rbx], 30CDh
   896 000023AE 740C                <1>     je .biosConfirmed
   897 000023B0 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   898 000023B5 7429                <1>     je .doAnsi
   899 000023B7 48FFC3              <1>     inc rbx
   900 000023BA EBED                <1>     jmp short .biosCheck
   901                              <1> .biosConfirmed:
   902                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   903 000023BC B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   904 000023BE 31DB                <1>     xor ebx, ebx
   905 000023C0 CD30                <1>     int 30h
   906 000023C2 B40F                <1>     mov ah, 0Fh ;Get screen mode
   907 000023C4 CD30                <1>     int 30h
   908 000023C6 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   909 000023C9 FECA                <1>     dec dl
   910 000023CB B619                <1>     mov dh, 25  ;Number of rows is standard
   911 000023CD 31C0                <1>     xor eax, eax
   912 000023CF 89C1                <1>     mov ecx, eax
   913 000023D1 B707                <1>     mov bh, 7   ;Screen attributes
   914 000023D3 B406                <1>     mov ah, 6   ;Scroll
   915 000023D5 CD30                <1>     int 30h
   916 000023D7 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   917 000023D9 B700                <1>     mov bh, 0   ;Page 0
   918 000023DB B402                <1>     mov ah, 2
   919 000023DD CD30                <1>     int 30h
   920                              <1>     return
    13                              <2> %%_ret:
    14 000023DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   921                              <1> .doAnsi:
   922                              <1> ;4 chars in the ansi routine
   923                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   924                              <1> ; understand ANSI codes
   925 000023E0 488D352AEBFFFF      <1>     lea rsi, ansiCls
   926 000023E7 B904000000          <1>     mov ecx, 4
   927 000023EC B406                <1>     mov ah, 06h ;Raw char output
   928                              <1> .ansiLp:
   929 000023EE AC                  <1>     lodsb   ;Get the char in 
   930 000023EF 88C2                <1>     mov dl, al
   931 000023F1 CD21                <1>     int 21h
   932 000023F3 FFC9                <1>     dec ecx
   933 000023F5 75F7                <1>     jnz .ansiLp
   934                              <1>     return
    13                              <2> %%_ret:
    14 000023F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   935                              <1> 
   936                              <1> break:
   937 000023F8 F605ABDCFFFFFF      <1>     test byte [arg1Flg], -1
   938 000023FF 752D                <1>     jnz .argumentProvided
   939                              <1>     ;Here we just get the status of break
   940 00002401 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   941 00002406 CD21                <1>     int 21h
   942 00002408 88D3                <1>     mov bl, dl
   943 0000240A 488D153EE9FFFF      <1>     lea rdx, breakIs
   944 00002411 B409                <1>     mov ah, 09h
   945 00002413 CD21                <1>     int 21h
   946 00002415 488D152EE9FFFF      <1>     lea rdx, onMes
   947 0000241C 488D0D21E9FFFF      <1>     lea rcx, offMes
   948 00002423 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   949 00002425 480F44D1            <1>     cmovz rdx, rcx
   950 00002429 B409                <1>     mov ah, 09h
   951 0000242B CD21                <1>     int 21h
   952                              <1>     return
    13                              <2> %%_ret:
    14 0000242D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   953                              <1> .argumentProvided:
   954 0000242E 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   955 00002432 AD                  <1>     lodsd   ;Read the word
   956 00002433 89C3                <1>     mov ebx, eax
   957 00002435 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   958 0000243A C1EB10              <1>     shr ebx, 10h     ;Get high word low
   959 0000243D 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   960 00002442 7416                <1>     je .maybeOn
   961 00002444 663D4F46            <1>     cmp ax, "OF"
   962 00002448 7523                <1>     jne .badOnOff
   963 0000244A 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   964 0000244F 6681FB4620          <1>     cmp bx, "F "
   965 00002454 7517                <1>     jne .badOnOff
   966                              <1>     ;Set off
   967 00002456 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   968 00002458 EB0B                <1>     jmp short .setBreak
   969                              <1> .maybeOn:
   970 0000245A 663D4F4E            <1>     cmp ax, "ON"
   971 0000245E 750D                <1>     jne .badOnOff
   972                              <1>     ;Set on
   973 00002460 BA01000000          <1>     mov edx, 1
   974                              <1> .setBreak:
   975 00002465 B801330000          <1>     mov eax, 3301h  ;Set break
   976 0000246A CD21                <1>     int 21h
   977                              <1>     return
    13                              <2> %%_ret:
    14 0000246C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   978                              <1> .badOnOff:
   979 0000246D 488D15ADEAFFFF      <1>     lea rdx, badOnOff
   980 00002474 B409                <1>     mov ah, 09h
   981 00002476 CD21                <1>     int 21h
   982                              <1>     return
    13                              <2> %%_ret:
    14 00002478 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   983                              <1> 
   984                              <1> verify:
   985 00002479 F6052ADCFFFFFF      <1>     test byte [arg1Flg], -1
   986 00002480 752D                <1>     jnz .argumentProvided
   987                              <1>     ;Here we just get the status of break
   988 00002482 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   989 00002487 CD21                <1>     int 21h
   990 00002489 88C3                <1>     mov bl, al
   991 0000248B 488D15C7E8FFFF      <1>     lea rdx, verifyIs
   992 00002492 B409                <1>     mov ah, 09h
   993 00002494 CD21                <1>     int 21h
   994 00002496 488D15ADE8FFFF      <1>     lea rdx, onMes
   995 0000249D 488D0DA0E8FFFF      <1>     lea rcx, offMes
   996 000024A4 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   997 000024A6 480F44D1            <1>     cmovz rdx, rcx
   998 000024AA B409                <1>     mov ah, 09h
   999 000024AC CD21                <1>     int 21h
  1000                              <1>     return
    13                              <2> %%_ret:
    14 000024AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1001                              <1> .argumentProvided:
  1002 000024AF 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1003 000024B3 AD                  <1>     lodsd   ;Read the word
  1004 000024B4 89C3                <1>     mov ebx, eax
  1005 000024B6 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1006 000024BB C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1007 000024BE 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1008 000024C3 7416                <1>     je .maybeOn
  1009 000024C5 663D4F46            <1>     cmp ax, "OF"
  1010 000024C9 751F                <1>     jne .badOnOff
  1011 000024CB 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1012 000024D0 6681FB4620          <1>     cmp bx, "F "
  1013 000024D5 7513                <1>     jne .badOnOff
  1014                              <1>     ;Set off
  1015 000024D7 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1016 000024D9 EB0A                <1>     jmp short .setVerify
  1017                              <1> .maybeOn:
  1018 000024DB 663D4F4E            <1>     cmp ax, "ON"
  1019 000024DF 7509                <1>     jne .badOnOff
  1020                              <1>     ;Set on
  1021 000024E1 31C0                <1>     xor eax, eax
  1022 000024E3 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1023                              <1> .setVerify:
  1024 000024E5 B42E                <1>     mov ah, 2Eh  ;Set Verify
  1025 000024E7 CD21                <1>     int 21h
  1026                              <1>     return
    13                              <2> %%_ret:
    14 000024E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1027                              <1> .badOnOff:
  1028 000024EA 488D1530EAFFFF      <1>     lea rdx, badOnOff
  1029 000024F1 B409                <1>     mov ah, 09h
  1030 000024F3 CD21                <1>     int 21h
  1031                              <1>     return
    13                              <2> %%_ret:
    14 000024F5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1032                              <1> 
  1033                              <1> rename:
  1034 000024F6 F605ADDBFFFFFF      <1>     test byte [arg1Flg], -1
  1035 000024FD 0F844FF4FFFF        <1>     jz badArgError
  1036 00002503 F605A3DBFFFFFF      <1>     test byte [arg2Flg], -1
  1037 0000250A 0F8442F4FFFF        <1>     jz badArgError    
  1038                              <1>     ;Initialise the variables!
  1039 00002510 488D3594E1FFFF      <1>     lea rsi, srcSpec
  1040 00002517 48893591E2FFFF      <1>     mov qword [srcPtr], rsi
  1041 0000251E 488D3508E2FFFF      <1>     lea rsi, destSpec
  1042 00002525 4889358BE2FFFF      <1>     mov qword [destPtr], rsi
  1043                              <1>     ;Check the second path is just a filename!
  1044 0000252C 0FB6057BDBFFFF      <1>     movzx eax, byte [arg2Off]
  1045 00002533 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1046 0000253A 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1047 0000253D 488D3D9DDFFFFF      <1>     lea rdi, searchSpec
  1048 00002544 57                  <1>     push rdi
  1049 00002545 E87A130000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1050 0000254A 5F                  <1>     pop rdi
  1051 0000254B 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1052 0000254F 0F84FDF3FFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1053 00002555 4889FE              <1>     mov rsi, rdi
  1054                              <1> .destScan:
  1055 00002558 AC                  <1>     lodsb   ;Get the char
  1056 00002559 3A05CADAFFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1057 0000255F 0F84EDF3FFFF        <1>     je badArgError
  1058 00002565 84C0                <1>     test al, al
  1059 00002567 75EF                <1>     jnz .destScan
  1060                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1061 00002569 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1062 0000256D 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1062 00002576 3F                  <1>
  1063 00002577 B903000000          <1>     mov ecx, 3  ;24 bytes
  1064 0000257C F348AB              <1>     rep stosq
  1065 0000257F AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1066 00002580 488D355ADFFFFF      <1>     lea rsi, searchSpec
  1067 00002587 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1068 0000258B B80D290000          <1>     mov eax, 290Dh
  1069 00002590 CD21                <1>     int 21h     
  1070 00002592 50                  <1>     push rax    ;Save the WC signature
  1071 00002593 E86F130000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1072 00002598 488D3D42DFFFFF      <1>     lea rdi, searchSpec
  1073 0000259F E8A6120000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1074 000025A4 4889FE              <1>     mov rsi, rdi
  1075 000025A7 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1076 000025AA 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1077 000025AE B80D290000          <1>     mov eax, 290Dh
  1078 000025B3 CD21                <1>     int 21h
  1079 000025B5 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1080 000025B6 88CC                <1>     mov ah, cl
  1081 000025B8 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1082 000025BB 0F84EC000000        <1>     jz .noWC
  1083 000025C1 488D3519DFFFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1084                              <1>     ;Now we check if we have a path to actually handle
  1085 000025C8 4839F3              <1>     cmp rbx, rsi
  1086 000025CB 7444                <1>     je .noPath
  1087 000025CD C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1088 000025D1 488D3509DFFFFF      <1>     lea rsi, searchSpec
  1089 000025D8 488D3DCCE0FFFF      <1>     lea rdi, srcSpec
  1090 000025DF 56                  <1>     push rsi
  1091 000025E0 E879110000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1092 000025E5 5E                  <1>     pop rsi
  1093 000025E6 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1094 000025E9 8A053ADAFFFF        <1>     mov al, byte [pathSep]
  1095 000025EF AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1096 000025F0 48893DB8E1FFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1097 000025F7 488D3D2FE1FFFF      <1>     lea rdi, destSpec
  1098 000025FE E85B110000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1099 00002603 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1100 00002606 AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1101 00002607 48893DA9E1FFFF      <1>     mov qword [destPtr], rdi
  1102 0000260E 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1103                              <1> .noPath:
  1104                              <1>     ;Now we have where to copy the files to, we can start our work!
  1105 00002611 E8DD130000          <1>     call setDTA
  1106 00002616 488D15C4DEFFFF      <1>     lea rdx, searchSpec
  1107 0000261D 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1108 0000261F B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1109 00002624 CD21                <1>     int 21h
  1110 00002626 0F8238F3FFFF        <1>     jc badDupFnf    ;If no file was found!
  1111                              <1> .wcLoop:
  1112                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1113 0000262C 488D3552DBFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1114 00002633 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1115 00002637 B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1116 0000263C CD21                <1>     int 21h 
  1117                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1118 0000263E 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1119 00002642 488D3D76E1FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1120 00002649 57                  <1>     push rdi
  1121 0000264A 48A5                <1>     movsq
  1122 0000264C 66A5                <1>     movsw
  1123 0000264E A4                  <1>     movsb
  1124 0000264F 5F                  <1>     pop rdi
  1125 00002650 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1126 00002654 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1127                              <1> .wcNameMake:
  1128 00002659 AC                  <1>     lodsb   ;Get the char from the source string
  1129 0000265A 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1130 0000265D 7502                <1>     jne .noStore    ;Dont store the char there
  1131 0000265F 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1132                              <1> .noStore:
  1133 00002661 48FFC7              <1>     inc rdi ;Goto next char position
  1134 00002664 FFC9                <1>     dec ecx
  1135 00002666 75F1                <1>     jnz .wcNameMake
  1136                              <1> ;renName now has the FCB name for the file we wish to make!
  1137                              <1> ;Now make the two paths!
  1138 00002668 488D3516DBFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1139 0000266F 488B3D39E1FFFF      <1>     mov rdi, qword [srcPtr]
  1140 00002676 E8E3100000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1141 0000267B 488D353DE1FFFF      <1>     lea rsi, renName
  1142 00002682 488B3D2EE1FFFF      <1>     mov rdi, qword [destPtr]
  1143 00002689 E8E0110000          <1>     call FCBToAsciiz
  1144 0000268E 488D1516E0FFFF      <1>     lea rdx, srcSpec
  1145 00002695 488D3D91E0FFFF      <1>     lea rdi, destSpec
  1146 0000269C B800560000          <1>     mov eax, 5600h
  1147 000026A1 CD21                <1>     int 21h     ;Fail silently on wildcard rename
  1148 000026A3 B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1149 000026A8 CD21                <1>     int 21h
  1150 000026AA 7380                <1>     jnc .wcLoop     ;And process it too!
  1151                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 000026AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1152                              <1> .noWC:
  1153 000026AD E855120000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1154 000026B2 0FB605F5D9FFFF      <1>     movzx eax, byte [arg2Off]
  1155 000026B9 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1156 000026C0 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1157 000026C3 488D3D63E0FFFF      <1>     lea rdi, destSpec
  1158 000026CA 57                  <1>     push rdi
  1159 000026CB E8F4110000          <1>     call cpDelimPathToBufz
  1160 000026D0 5F                  <1>     pop rdi
  1161 000026D1 488D1509DEFFFF      <1>     lea rdx, searchSpec
  1162 000026D8 B800560000          <1>     mov eax, 5600h
  1163 000026DD CD21                <1>     int 21h
  1164                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000026DF 73(AC)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1165 000026E1 E97EF2FFFF          <1>     jmp badDupFnf   ;Always just return this
  1166                              <1> 
  1167                              <1> 
  1168                              <1> touch:
  1169                              <1> ;Temporarily used to create files
  1170 000026E6 F605BDD9FFFFFF      <1>     test byte [arg1Flg], -1
  1171 000026ED 0F845FF2FFFF        <1>     jz badArgError
  1172 000026F3 E80F120000          <1>     call buildCommandPath
  1173 000026F8 488D15E2DDFFFF      <1>     lea rdx, searchSpec
  1174 000026FF B8005B0000          <1>     mov eax, 5B00h  ;Create unique file 
  1175 00002704 31C9                <1>     xor ecx, ecx
  1176 00002706 CD21                <1>     int 21h
  1177 00002708 721D                <1>     jc .touch1
  1178                              <1> .touchClose:
  1179 0000270A 0FB7D8              <1>     movzx ebx, ax   ;Save the handle here
  1180 0000270D B80D120000          <1>     mov eax, 120Dh  ;Get date/time words from the DOS
  1181 00002712 CD2F                <1>     int 2fh
  1182 00002714 89C1                <1>     mov ecx, eax    ;Move the time here
  1183 00002716 87D1                <1>     xchg edx, ecx   ;Get them in the right place
  1184 00002718 B801570000          <1>     mov eax, 5701h  ;Set the date/time for bx
  1185 0000271D CD21                <1>     int 21h
  1186 0000271F B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1187 00002724 CD21                <1>     int 21h
  1188                              <1>     return
    13                              <2> %%_ret:
    14 00002726 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1189                              <1> .touch1:
  1190 00002727 3C50                <1>     cmp al, errFilExist ;Does the file exist?
  1191 00002729 7509                <1>     jne .touchError ;If not, this is a proper error!
  1192 0000272B B8003D0000          <1>     mov eax, 3D00h  ;R/O open instead to update the access time!!
  1193 00002730 CD21                <1>     int 21h
  1194 00002732 73D6                <1>     jnc .touchClose ;If this worked, close the handle immediately
  1195                              <1> .touchError:
  1196 00002734 3C03                <1>     cmp al, errPnf
  1197 00002736 0F8416F2FFFF        <1>     je badArgError
  1198 0000273C 3C02                <1>     cmp al, errFnf
  1199 0000273E 0F8429F2FFFF        <1>     je badFnf
  1200 00002744 E9E5F1FFFF          <1>     jmp badAccError
  1201                              <1>     
  1202                              <1> 
  1203                              <1> join:
  1204                              <1> ;Mock join command, to test join. Make an external command.
  1205                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1206 00002749 F605AF000000FF      <1>     test byte [.joinOn], -1
  1207 00002750 743D                <1>     jz .okJoin
  1208                              <1> .joindisable:
  1209 00002752 B800520000          <1>     mov eax, 5200h  
  1210 00002757 CD21                <1>     int 21h
  1211                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1212 00002759 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1213 0000275E CD2A                <1>     int 2Ah
  1214 00002760 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1215 00002764 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1216 00002768 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1217 0000276E C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1218 00002771 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1219 00002775 FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1220 00002778 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1221 0000277D CD2A                <1>     int 2Ah
  1222 0000277F C6057900000000      <1>     mov byte [.joinOn], 0
  1223 00002786 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1224 0000278D EB45                <1>     jmp short .joinExit
  1225                              <1> .okJoin:
  1226 0000278F C60569000000FF      <1>     mov byte [.joinOn], -1
  1227 00002796 B800520000          <1>     mov eax, 5200h  
  1228 0000279B CD21                <1>     int 21h
  1229 0000279D 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1230 000027A1 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1231                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1232 000027A5 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1233 000027AA CD2A                <1>     int 2Ah
  1234 000027AC 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1235 000027B2 4889DF              <1>     mov rdi, rbx
  1236 000027B5 488D3544000000      <1>     lea rsi, .joinPath
  1237 000027BC B90C000000          <1>     mov ecx, .joinPathL
  1238 000027C1 F3A4                <1>     rep movsb   ;Copy chars over
  1239 000027C3 FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1240 000027C6 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1241 000027CB CD2A                <1>     int 2Ah
  1242 000027CD 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1243                              <1> .joinExit:
  1244 000027D4 B800090000          <1>     mov eax, 0900h
  1245 000027D9 CD21                <1>     int 21h
  1246                              <1>     return
    13                              <2> %%_ret:
    14 000027DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1247 000027DC 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1247 000027E5 61626C65640D0A24    <1>
  1248 000027ED 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1248 000027F6 7361626C65640D0A24  <1>
  1249 000027FF 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1250 00002800 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1250 00002809 535400              <1>
  1251                              <1> .joinPathL  equ $ - .joinPath 
  1252                              <1> 
  1253                              <1> subst:
  1254                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1255                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1256 0000280C F605D3000000FF      <1>     test byte [.substOn], -1
  1257 00002813 7443                <1>     jz .okSubst
  1258                              <1> .substdisable:
  1259 00002815 B800520000          <1>     mov eax, 5200h  
  1260 0000281A CD21                <1>     int 21h
  1261                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1262 0000281C B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1263 00002821 CD2A                <1>     int 2Ah
  1264 00002823 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1265 00002827 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1266 0000282E 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1267 00002834 C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1268 00002837 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1269 0000283B 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1270 00002841 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1271 00002846 CD2A                <1>     int 2Ah
  1272 00002848 C6059700000000      <1>     mov byte [.substOn], 0
  1273 0000284F 488D157D000000      <1>     lea rdx, .substDisableMsg
  1274 00002856 EB61                <1>     jmp short .substExit
  1275                              <1> .okSubst:
  1276 00002858 C60587000000FF      <1>     mov byte [.substOn], -1
  1277 0000285F B800520000          <1>     mov eax, 5200h  
  1278 00002864 CD21                <1>     int 21h
  1279 00002866 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1280 0000286B CD2A                <1>     int 2Ah
  1281 0000286D 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1282 00002871 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1283 00002878 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1284 0000287C 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1285 00002883 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1286 00002887 C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1287                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1288 0000288E 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1289 00002894 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1290 0000289A 4889DF              <1>     mov rdi, rbx
  1291 0000289D 488D3543000000      <1>     lea rsi, .substPath
  1292 000028A4 B90C000000          <1>     mov ecx, .substPathL
  1293 000028A9 F3A4                <1>     rep movsb   ;Copy chars over
  1294 000028AB B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1295 000028B0 CD2A                <1>     int 2Ah
  1296 000028B2 488D1508000000      <1>     lea rdx, .substEnableMsg
  1297                              <1> .substExit:
  1298 000028B9 B800090000          <1>     mov eax, 0900h
  1299 000028BE CD21                <1>     int 21h
  1300                              <1>     return
    13                              <2> %%_ret:
    14 000028C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1301 000028C1 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1301 000028CA 6E61626C65640D0A24  <1>
  1302 000028D3 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1302 000028DC 697361626C65640D0A- <1>
  1302 000028E5 24                  <1>
  1303 000028E6 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1304 000028E7 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1304 000028F0 535400              <1>
  1305                              <1> .substPathL  equ $ - .substPath 
  1306                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1307                              <1> truename:
  1308 000028F3 F605B0D7FFFFFF      <1>     test byte [arg1Flg], -1
  1309 000028FA 0F8452F0FFFF        <1>     jz badArgError
  1310 00002900 E802100000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1311 00002905 488D35D5DBFFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1312 0000290C 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1313 0000290F B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1314 00002914 CD21                <1>     int 21h
  1315 00002916 730D                <1>     jnc .writePath
  1316 00002918 3C02                <1>     cmp al, errFnf
  1317 0000291A 0F843BF0FFFF        <1>     je badFileError
  1318 00002920 E91BF0FFFF          <1>     jmp badParamError
  1319                              <1> .writePath:
  1320 00002925 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1321 00002928 B9FFFFFFFF          <1>     mov ecx, -1
  1322 0000292D 30C0                <1>     xor al, al
  1323 0000292F F2AE                <1>     repne scasb     ;Get the new len
  1324 00002931 F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1325 00002933 FFC9                <1>     dec ecx
  1326 00002935 BB01000000          <1>     mov ebx, 01
  1327 0000293A B440                <1>     mov ah, 40h
  1328 0000293C CD21                <1>     int 21h
  1329 0000293E E8000C0000          <1>     call printCRLF
  1330                              <1>     return
    13                              <2> %%_ret:
    14 00002943 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1331                              <1> 
  1332                              <1> label:
  1333                              <1> ;Displays/Changes/Deletes the file label
  1334 00002944 488D1508000000      <1>     lea rdx, .l1
  1335 0000294B B800090000          <1>     mov eax, 0900h
  1336 00002950 CD21                <1>     int 21h
  1337                              <1>     return
    13                              <2> %%_ret:
    14 00002952 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1338 00002953 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  1338 0000295C 6E20756E696D706C65- <1>
  1338 00002965 6D656E7465640D0A24  <1>
  1339                              <1> 
  1340                              <1> mklbl:
  1341                              <1>     ;lea rdx, .l1
  1342                              <1>     ;mov cx, 08h ;Make a label
  1343                              <1>     ;mov eax, 3C00h
  1344                              <1>     ;int 21h
  1345                              <1> 
  1346                              <1>     ;mov ebx, eax
  1347                              <1>     ;mov eax, 3E00h  ;Close the handle
  1348                              <1>     ;int 21h
  1349                              <1>     ;return
  1350                              <1> 
  1351                              <1> ;.l1: db "TESTLABEL",0
  1352 0000296E 488D1508000000      <1>     lea rdx, .l1
  1353 00002975 B800160000          <1>     mov eax, 1600h  ;Create FCB
  1354 0000297A CD21                <1>     int 21h
  1355                              <1>     return
    13                              <2> %%_ret:
    14 0000297C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1356                              <1> .l1:
  1357                              <1>     istruc exFcb
  1358 0000297D FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1359 0000297E 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1360 00002984 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1361 00002985 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  1362 0000298D 4C2020              <1>     at exFcb.fileext,   db "L  "
  1363 00002990 00000000            <1>     at exFcb.curBlock,  dd 0
  1364 00002994 00<rep 15h>         <1>     iend 
  1365                              <1> rmlbl:
  1366 000029A9 488D1508000000      <1>     lea rdx, .l1
  1367 000029B0 B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  1368 000029B5 CD21                <1>     int 21h
  1369                              <1>     return
    13                              <2> %%_ret:
    14 000029B7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1370                              <1> .l1:    ;FCB to volume label
  1371                              <1>     istruc exFcb
  1372 000029B8 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1373 000029B9 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1374 000029BF 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1375 000029C0 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  1376 000029C8 3F3F3F              <1>     at exFcb.fileext,   db "???"
  1377 000029CB 00000000            <1>     at exFcb.curBlock,  dd 0
  1378 000029CF 00<rep 15h>         <1>     iend 
  1379                              <1> 
  1380                              <1> rnlbl:
  1381 000029E4 488D1508000000      <1>     lea rdx, .l1
  1382 000029EB B800170000          <1>     mov eax, 1700h
  1383 000029F0 CD21                <1>     int 21h
  1384                              <1>     return
    13                              <2> %%_ret:
    14 000029F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1385                              <1> .l1:
  1386                              <1>     istruc exRenFcb
  1387 000029F3 FF                  <1>     at exRenFcb.extSig,     db -1
  1388 000029F4 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  1389 000029FA 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  1390 000029FB 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  1391 00002A03 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  1392 00002A06 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  1392 00002A0F 4C414245            <1>
  1393 00002A13 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  1394 00002A16 00<rep 4h>          <1>     iend
  1395                              <1> volume:
  1396                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  1397 00002A1A F6058CD6FFFFFF      <1>     test byte [arg2Flg], -1
  1398 00002A21 0F852BEFFFFF        <1>     jnz badArgError
  1399 00002A27 F6057CD6FFFFFF      <1>     test byte [arg1Flg], -1
  1400 00002A2E 7507                <1>     jnz .notCurrentDrive
  1401 00002A30 E8240D0000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1402 00002A35 EB31                <1>     jmp short .dirEP
  1403                              <1> .notCurrentDrive:
  1404 00002A37 E8CB0E0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1405 00002A3C 488D359EDAFFFF      <1>     lea rsi, searchSpec
  1406 00002A43 E84B0D0000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  1407 00002A48 66AD                <1>     lodsw                   ;Get this word
  1408 00002A4A 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  1409 00002A4D 0F85FFEEFFFF        <1>     jne badArgError
  1410 00002A53 8A0553D6FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1411 00002A59 A8FF                <1>     test al, -1
  1412 00002A5B 0F85E8EEFFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1413 00002A61 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1414 00002A66 FFC8                <1>     dec eax ;Convert to 0 based number
  1415                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  1416 00002A68 E8860F0000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  1417 00002A6D 488D1507DCFFFF      <1>     lea rdx, volFcb
  1418 00002A74 FFC0                <1>     inc eax ;Get 1 based drive number
  1419 00002A76 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1420 00002A78 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1421 00002A7B B800110000          <1>     mov eax, 1100h ;Find first FCB
  1422 00002A80 CD21                <1>     int 21h
  1423 00002A82 50                  <1>     push rax
  1424                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  1425 00002A83 488D15C7DEFFFF      <1>     lea rdx, crlf
  1426 00002A8A B409                <1>     mov ah, 09h
  1427 00002A8C CD21                <1>     int 21h
  1428 00002A8E 488D1541E1FFFF      <1>     lea rdx, volMes
  1429 00002A95 B409                <1>     mov ah, 09h
  1430 00002A97 CD21                <1>     int 21h
  1431 00002A99 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  1432 00002A9B 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  1433 00002A9E B402                <1>     mov ah, 02h
  1434 00002AA0 CD21                <1>     int 21h
  1435 00002AA2 58                  <1>     pop rax
  1436 00002AA3 84C0                <1>     test al, al ;If this is zero, the call succeeded
  1437 00002AA5 7409                <1>     jz .volIDOk
  1438 00002AA7 488D153FE1FFFF      <1>     lea rdx, volNo
  1439 00002AAE EB19                <1>     jmp short .volEndPrint
  1440                              <1> .volIDOk:
  1441 00002AB0 488D1531E1FFFF      <1>     lea rdx, volOk
  1442 00002AB7 B409                <1>     mov ah, 09h
  1443 00002AB9 CD21                <1>     int 21h
  1444 00002ABB C605B8D6FFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  1445 00002AC2 488D15A6D6FFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  1446                              <1> .volEndPrint:
  1447 00002AC9 B409                <1>     mov ah, 09h
  1448 00002ACB CD21                <1>     int 21h
  1449 00002ACD 488D157DDEFFFF      <1>     lea rdx, crlf
  1450 00002AD4 B409                <1>     mov ah, 09h
  1451 00002AD6 CD21                <1>     int 21h
  1452                              <1>     return
    13                              <2> %%_ret:
    14 00002AD8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1453                              <1> 
  1454                              <1> version:
  1455 00002AD9 488D1571DEFFFF      <1>     lea rdx, crlf
  1456 00002AE0 B409                <1>     mov ah, 09h
  1457 00002AE2 CD21                <1>     int 21h
  1458 00002AE4 488D15D9E0FFFF      <1>     lea rdx, dosVer
  1459 00002AEB B409                <1>     mov ah, 09h
  1460 00002AED CD21                <1>     int 21h
  1461 00002AEF E80C000000          <1>     call .printVersionNumber
  1462 00002AF4 488D1556DEFFFF      <1>     lea rdx, crlf
  1463 00002AFB B409                <1>     mov ah, 09h
  1464 00002AFD CD21                <1>     int 21h
  1465                              <1>     return
    13                              <2> %%_ret:
    14 00002AFF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1466                              <1> .printVersionNumber:
  1467 00002B00 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1468 00002B02 CD21                <1>     int 21h
  1469 00002B04 50                  <1>     push rax
  1470 00002B05 0FB6C0              <1>     movzx eax, al
  1471 00002B08 E8330E0000          <1>     call printDecimalWord
  1472 00002B0D B22E                <1>     mov dl, "."
  1473 00002B0F B402                <1>     mov ah, 02h
  1474 00002B11 CD21                <1>     int 21h
  1475 00002B13 58                  <1>     pop rax
  1476 00002B14 0FB6C4              <1>     movzx eax, ah
  1477 00002B17 E8240E0000          <1>     call printDecimalWord
  1478                              <1>     return
    13                              <2> %%_ret:
    14 00002B1C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1479                              <1> 
  1480                              <1> 
  1481                              <1> memory:
  1482 00002B1D 488B1DFBD4FFFF      <1>     mov rbx, qword [sysVars]
  1483 00002B24 4885DB              <1>     test rbx, rbx
  1484 00002B27 7510                <1>     jnz .sysvarsOK
  1485 00002B29 488D1558E3FFFF      <1>     lea rdx, memBad0
  1486 00002B30 B409                <1>     mov ah, 09h
  1487 00002B32 CD21                <1>     int 21h
  1488 00002B34 E9AA0E0000          <1>     jmp freezePC.altEP
  1489                              <1> .sysvarsOK:
  1490                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1491                              <1>     ; and rcx to store Application memory
  1492 00002B39 31F6                <1>     xor esi, esi
  1493 00002B3B 31FF                <1>     xor edi, edi
  1494 00002B3D 31ED                <1>     xor ebp, ebp
  1495 00002B3F 31C9                <1>     xor ecx, ecx
  1496 00002B41 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1497 00002B45 488B1B              <1>     mov rbx, qword [rbx]
  1498                              <1> .memLp:
  1499 00002B48 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1500 00002B4B 7409                <1>     je .validMCB
  1501 00002B4D 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1502 00002B50 0F8501010000        <1>     jne .badMCBFound
  1503                              <1> .validMCB:
  1504 00002B56 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1505 00002B59 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1506 00002B5D 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1507 00002B65 7505                <1>     jne .notDOS
  1508 00002B67 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1509 00002B6A EB21                <1>     jmp short .gotoNext
  1510                              <1> .notDOS:
  1511 00002B6C 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1512 00002B74 7505                <1>     jne .notFree
  1513 00002B76 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1514 00002B79 EB12                <1>     jmp short .gotoNext
  1515                              <1> .notFree:
  1516 00002B7B 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1517 00002B83 7505                <1>     jne .notHole
  1518 00002B85 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1519 00002B88 EB03                <1>     jmp short .gotoNext
  1520                              <1> .notHole:
  1521 00002B8A 4801C1              <1>     add rcx, rax    ;Add to Application count
  1522                              <1> .gotoNext:
  1523 00002B8D 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1524 00002B90 7407                <1>     je .endOfWalk
  1525 00002B92 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1526 00002B97 EBAF                <1>     jmp short .memLp
  1527                              <1> .endOfWalk:
  1528                              <1>     
  1529 00002B99 488D1549E2FFFF      <1>     lea rdx, memDOS
  1530 00002BA0 B409                <1>     mov ah, 09h
  1531 00002BA2 CD21                <1>     int 21h
  1532 00002BA4 4889F0              <1>     mov rax, rsi
  1533 00002BA7 E89D000000          <1>     call .mcbPrintAmount
  1534 00002BAC 488D15CEE2FFFF      <1>     lea rdx, memByte
  1535 00002BB3 B409                <1>     mov ah, 09h
  1536 00002BB5 CD21                <1>     int 21h
  1537                              <1> 
  1538 00002BB7 4885ED              <1>     test rbp, rbp
  1539 00002BBA 741E                <1>     jz .skipHole
  1540 00002BBC 488D1572E2FFFF      <1>     lea rdx, memHole
  1541 00002BC3 B409                <1>     mov ah, 09h
  1542 00002BC5 CD21                <1>     int 21h
  1543 00002BC7 4889E8              <1>     mov rax, rbp
  1544 00002BCA E87A000000          <1>     call .mcbPrintAmount
  1545 00002BCF 488D15ABE2FFFF      <1>     lea rdx, memByte
  1546 00002BD6 B409                <1>     mov ah, 09h
  1547 00002BD8 CD21                <1>     int 21h
  1548                              <1> .skipHole:
  1549                              <1> 
  1550 00002BDA 488D152EE2FFFF      <1>     lea rdx, memApp
  1551 00002BE1 B409                <1>     mov ah, 09h
  1552 00002BE3 CD21                <1>     int 21h
  1553 00002BE5 4889C8              <1>     mov rax, rcx
  1554 00002BE8 E85C000000          <1>     call .mcbPrintAmount
  1555 00002BED 488D158DE2FFFF      <1>     lea rdx, memByte
  1556 00002BF4 B409                <1>     mov ah, 09h
  1557 00002BF6 CD21                <1>     int 21h
  1558                              <1> 
  1559 00002BF8 488D155CE2FFFF      <1>     lea rdx, memFree
  1560 00002BFF B409                <1>     mov ah, 09h
  1561 00002C01 CD21                <1>     int 21h
  1562 00002C03 4889F8              <1>     mov rax, rdi
  1563 00002C06 E83E000000          <1>     call .mcbPrintAmount
  1564 00002C0B 488D156FE2FFFF      <1>     lea rdx, memByte
  1565 00002C12 B409                <1>     mov ah, 09h
  1566 00002C14 CD21                <1>     int 21h
  1567                              <1> 
  1568 00002C16 488D15A6E1FFFF      <1>     lea rdx, memSys
  1569 00002C1D B409                <1>     mov ah, 09h
  1570 00002C1F CD21                <1>     int 21h
  1571 00002C21 4889F0              <1>     mov rax, rsi
  1572 00002C24 4801F8              <1>     add rax, rdi
  1573 00002C27 4801C8              <1>     add rax, rcx
  1574 00002C2A 4801E8              <1>     add rax, rbp
  1575 00002C2D E817000000          <1>     call .mcbPrintAmount
  1576 00002C32 488D1548E2FFFF      <1>     lea rdx, memByte
  1577 00002C39 B409                <1>     mov ah, 09h
  1578 00002C3B CD21                <1>     int 21h
  1579                              <1> 
  1580 00002C3D 488D150DDDFFFF      <1>     lea rdx, crlf
  1581 00002C44 B409                <1>     mov ah, 09h
  1582 00002C46 CD21                <1>     int 21h
  1583                              <1>     return
    13                              <2> %%_ret:
    14 00002C48 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1584                              <1> 
  1585                              <1> .mcbPrintAmount:
  1586 00002C49 51                  <1>     push rcx
  1587 00002C4A 56                  <1>     push rsi
  1588 00002C4B 57                  <1>     push rdi
  1589 00002C4C 55                  <1>     push rbp
  1590 00002C4D E8EE0C0000          <1>     call printDecimalWord
  1591 00002C52 5D                  <1>     pop rbp
  1592 00002C53 5F                  <1>     pop rdi
  1593 00002C54 5E                  <1>     pop rsi
  1594 00002C55 59                  <1>     pop rcx
  1595                              <1>     return
    13                              <2> %%_ret:
    14 00002C56 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1596                              <1> .badMCBFound:
  1597 00002C57 488D156AE2FFFF      <1>     lea rdx, memBad2
  1598 00002C5E B409                <1>     mov ah, 09h
  1599 00002C60 CD21                <1>     int 21h
  1600 00002C62 E97C0D0000          <1>     jmp freezePC.altEP
  1601                              <1> 
  1602                              <1> type:
  1603 00002C67 F6053CD4FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1604 00002C6E 0F84DEECFFFF        <1>     jz badArgError
  1605 00002C74 F60532D4FFFFFF      <1>     test byte [arg2Flg], -1
  1606 00002C7B 0F85D1ECFFFF        <1>     jnz badArgError         ;If this set, error
  1607 00002C81 4C8B0587D3FFFF      <1>     mov r8, [pspPtr]
  1608 00002C88 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1609 00002C8F 0FB60515D4FFFF      <1>     movzx eax, byte [arg1Off]
  1610 00002C96 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1611 00002C99 803E0D              <1>     cmp byte [rsi], CR
  1612 00002C9C 0F84B0ECFFFF        <1>     je badArgError
  1613 00002CA2 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1614 00002CA6 750F                <1>     jne .noDrive
  1615 00002CA8 0FB605FDD3FFFF      <1>     movzx eax, byte [arg1FCBret]
  1616 00002CAF 3CFF                <1>     cmp al, -1
  1617 00002CB1 0F8492ECFFFF        <1>     je badDriveError
  1618                              <1> .noDrive:
  1619                              <1>     ;Now we open the provided file
  1620 00002CB7 E84B0C0000          <1>     call buildCommandPath
  1621 00002CBC 488D151ED8FFFF      <1>     lea rdx, searchSpec
  1622 00002CC3 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1623 00002CC8 CD21                <1>     int 21h
  1624 00002CCA 0F828BECFFFF        <1>     jc badFileError
  1625 00002CD0 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1626 00002CD7 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1627                              <1> .lp:
  1628 00002CDA B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1629 00002CDF B43F                <1>     mov ah, 3Fh ;Read handle
  1630 00002CE1 CD21                <1>     int 21h
  1631 00002CE3 89C1                <1>     mov ecx, eax
  1632 00002CE5 67E317              <1>     jecxz .exit
  1633 00002CE8 53                  <1>     push rbx    ;Save the original in handle
  1634 00002CE9 BB01000000          <1>     mov ebx, 1  ;STDOUT
  1635 00002CEE B440                <1>     mov ah, 40h
  1636 00002CF0 CD21                <1>     int 21h
  1637 00002CF2 5B                  <1>     pop rbx ;Get back the original read handle
  1638 00002CF3 720F                <1>     jc .exitBad
  1639 00002CF5 39C8                <1>     cmp eax, ecx
  1640 00002CF7 74E1                <1>     je .lp
  1641 00002CF9 FFC9                <1>     dec ecx ;One less for a ^Z
  1642 00002CFB 39C8                <1>     cmp eax, ecx
  1643 00002CFD 7505                <1>     jne .exitBad
  1644                              <1> .exit:
  1645 00002CFF B43E                <1>     mov ah, 3Eh ;Close handle
  1646 00002D01 CD21                <1>     int 21h
  1647                              <1>     return
    13                              <2> %%_ret:
    14 00002D03 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1648                              <1> .exitBad:
  1649                              <1>     ;If it is a char device, don't print an error
  1650 00002D04 B800440000          <1>     mov eax, 4400h  ;Get IOCTL mode 
  1651 00002D09 BB01000000          <1>     mov ebx, 1
  1652 00002D0E CD21                <1>     int 21h
  1653 00002D10 F6C280              <1>     test dl, devCharDev
  1654                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D13 75(03)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1655 00002D15 E9DDEBFFFF          <1>     jmp badDiskFull
  1656                              <1> 
  1657                              <1> exit:
  1658 00002D1A F6050AD3FFFFFF      <1>     test byte [permaSwitch], -1
  1659                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D21 75(03)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1660 00002D23 488B05EDD2FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1661 00002D2A 483DFFFFFFFF        <1>     cmp rax, -1
  1662                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D30 74(03)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1663 00002D32 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1664                              <1> 
  1665 00002D36 488B15EFD2FFFF      <1>     mov rdx, qword [parentInt22]
  1666 00002D3D 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  1667 00002D41 B822250000          <1>     mov eax, 2522h
  1668 00002D46 CD21                <1>     int 21h
  1669                              <1> 
  1670 00002D48 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1671 00002D4D CD21                <1>     int 21h
  1672                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00002D4F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1673                              <1> 
  1674                              <1> launchChild:
  1675                              <1>     ;We execute an external command here.
  1676                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  1677                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  1678                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  1679                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  1680                              <1>     ;We know the drive we are on is valid so no need to double check that!
  1681 00002D50 E89E0C0000          <1>     call setDTA         
  1682                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
  1683 00002D55 488D3DDCD5FFFF      <1>     lea rdi, cmdPathSpec
  1684 00002D5C 4889FE              <1>     mov rsi, rdi
  1685 00002D5F B811120000          <1>     mov eax, 1211h  ;Normalise this path first
  1686 00002D64 CD2F                <1>     int 2fh
  1687 00002D66 E8DF0A0000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  1688 00002D6B 4889FE              <1>     mov rsi, rdi    ;Source here
  1689 00002D6E 488D3DE2D3FFFF      <1>     lea rdi, cmdFcb
  1690 00002D75 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  1691 00002D7A CD21                <1>     int 21h
  1692 00002D7C 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  1693 00002D7E 0F8505ECFFFF        <1>     jnz badCmdError
  1694 00002D84 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  1695                              <1> .pathLoop:
  1696 00002D87 488D35D2D3FFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  1697 00002D8E 488D3DADE1FFFF      <1>     lea rdi, extStr
  1698 00002D95 BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  1699                              <1> .extLp:
  1700 00002D9A 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  1701 00002D9B B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  1702 00002DA0 F3A6                <1>     rep cmpsb   ;Compare the two strings
  1703 00002DA2 5E                  <1>     pop rsi
  1704 00002DA3 85C9                <1>     test ecx, ecx
  1705 00002DA5 7455                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  1706 00002DA7 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  1707 00002DAA FFCA                <1>     dec edx         ;Else one less extension type to check
  1708 00002DAC 75EC                <1>     jnz .extLp
  1709                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  1710                              <1>     ;If not, error.
  1711 00002DAE B903000000          <1>     mov ecx, 3
  1712 00002DB3 4889F7              <1>     mov rdi, rsi
  1713 00002DB6 B020                <1>     mov al, SPC
  1714 00002DB8 F3AE                <1>     rep scasb   
  1715 00002DBA 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  1716 00002DBC 0F85C7EBFFFF        <1>     jnz badCmdError    ;If not, error!
  1717                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  1718 00002DC2 488D3579E1FFFF      <1>     lea rsi, extStr
  1719 00002DC9 BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  1720                              <1> .extSrchLp:
  1721 00002DCE 488D3D8BD3FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1722 00002DD5 B903000000          <1>     mov ecx, 3
  1723 00002DDA F3A4                <1>     rep movsb   ;Copy the extension over!
  1724 00002DDC E892010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  1725 00002DE1 7324                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  1726 00002DE3 FFCB                <1>     dec ebx                 ;Decrement extension counter
  1727 00002DE5 75E7                <1>     jnz .extSrchLp
  1728                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  1729                              <1> ; we start prepending path componants and trying again. To do this, we reset
  1730                              <1> ; by setting the fcb extension back to all spaces.
  1731 00002DE7 488D3D72D3FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1732 00002DEE B903000000          <1>     mov ecx, 3
  1733 00002DF3 B020                <1>     mov al, SPC
  1734 00002DF5 F3AA                <1>     rep stosb   ;Store back the empty extension!
  1735 00002DF7 E9B9000000          <1>     jmp .pathHandle
  1736                              <1> .extFnd:
  1737                              <1> ;Here if the file had the right extension.
  1738 00002DFC E872010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  1739 00002E01 0F82AE000000        <1>     jc .pathHandle
  1740                              <1> .extSrchFnd:
  1741                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  1742                              <1> ; a BAT. If it is, separate handling!
  1743 00002E07 803D52D3FFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  1744 00002E0E 0F84F8030000        <1>     je batLaunch
  1745 00002E14 488D1D77D3FFFF      <1>     lea rbx, launchBlock
  1746 00002E1B 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  1747 00002E1F 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  1748 00002E22 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  1749 00002E29 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1750 00002E2D 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1751 00002E31 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1752 00002E35 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1753 00002E39 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1754 00002E3D 488D15F4D4FFFF      <1>     lea rdx, cmdPathSpec
  1755 00002E44 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1756 00002E49 CD21                <1>     int 21h
  1757                              <1> ;If the program failed to start, verify why!
  1758 00002E4B B800590000          <1>     mov eax, 5900h      ;Get extended error
  1759 00002E50 31DB                <1>     xor ebx, ebx
  1760 00002E52 CD21                <1>     int 21h
  1761 00002E54 668905B2D1FFFF      <1>     mov word [returnCode], ax   ;Error code from EXEC
  1762 00002E5B 3C05                <1>     cmp al, errAccDen   ;Access denied?
  1763 00002E5D 0F84CBEAFFFF        <1>     je badAccError
  1764 00002E63 3C07                <1>     cmp al, errMCBbad   ;If MCB bad error, freeze PC
  1765 00002E65 0F846D0B0000        <1>     je freezePC
  1766 00002E6B E919EBFFFF          <1>     jmp badCmdError     ;If something goes wrong, error out
  1767                              <1> .appRet:  ;Return point from a task
  1768 00002E70 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
  1769 00002E75 CD21                <1>     int 21h
  1770 00002E77 6689058FD1FFFF      <1>     mov word [returnCode], ax
  1771                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
  1772 00002E7E 488D15EA0C0000      <1>     lea rdx, critErrorHandler
  1773 00002E85 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
  1774 00002E89 B824250000          <1>     mov eax, 2524h
  1775 00002E8E CD21                <1>     int 21h
  1776 00002E90 488D15730F0000      <1>     lea rdx, int23h
  1777 00002E97 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
  1778 00002E9B B823250000          <1>     mov eax, 2523h
  1779 00002EA0 CD21                <1>     int 21h
  1780 00002EA2 488D15C7FFFFFF      <1>     lea rdx, .appRet
  1781 00002EA9 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  1782 00002EAD B822250000          <1>     mov eax, 2522h
  1783 00002EB2 CD21                <1>     int 21h
  1784                              <1>     return  ;Now return to main loop
    13                              <2> %%_ret:
    14 00002EB4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1785                              <1> .pathHandle:        
  1786                              <1> ;First check if rbp is null. If it is, its a first time entry. 
  1787                              <1> ;al has error code!
  1788 00002EB5 4885ED              <1>     test rbp, rbp
  1789 00002EB8 0F85A3000000        <1>     jnz .pathReentry
  1790                              <1> ;Now check if the command we recieved included an absolute path.
  1791                              <1> ;If so, we don't do path substitution and just fail at this point
  1792 00002EBE 488D3573D4FFFF      <1>     lea rsi, cmdPathSpec
  1793 00002EC5 66AD                <1>     lodsw   ;Get the first two chars
  1794 00002EC7 3A055CD1FFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  1795 00002ECD 0F84B6EAFFFF        <1>     je badCmdError  ;Therefore, exit bad!
  1796 00002ED3 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  1797 00002ED5 7412                <1>     je .pathGetEnv
  1798 00002ED7 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  1799 00002EDA 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  1800 00002EDC AC                  <1>     lodsb   ;Get the third char
  1801 00002EDD 3A0546D1FFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  1802 00002EE3 0F84A0EAFFFF        <1>     je badCmdError  ;Therefore, exit bad!
  1803                              <1> .pathGetEnv:
  1804                              <1> ;Now get a pointer to the environment and search for PATH=
  1805                              <1> ;We only take the final portion of the path and add it to each path componant
  1806                              <1> ;This agrees with DOS 3.3
  1807 00002EE9 E83B0B0000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  1808 00002EEE 0F8495EAFFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  1809                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  1810                              <1>     ;Now we know we dont have to keep track of chars!!
  1811 00002EF4 488D3D6BE0FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  1812 00002EFB E8830B0000          <1>     call searchForEnvVar
  1813 00002F00 0F8283EAFFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
  1814 00002F06 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
  1815 00002F09 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
  1816                              <1> .pathRejoin:
  1817 00002F10 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  1818 00002F13 0F8470EAFFFF        <1>     je badCmdError      ;Empty or no more path? Error!
  1819 00002F19 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
  1820 00002F1C 488D3DBED5FFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  1821                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
  1822                              <1>     ;SHOULD CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
  1823                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
  1824                              <1>     ;This is impossible to do if env edited by COMMAND.COM
  1825 00002F23 E886090000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
  1826 00002F28 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  1827 00002F2B 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  1828 00002F2E 48FFCF              <1>     dec rdi ;Point to the null terminator
  1829 00002F31 8A05F2D0FFFF        <1>     mov al, byte [pathSep]
  1830 00002F37 3847FF              <1>     cmp byte [rdi - 1], al
  1831 00002F3A 7401                <1>     je .skipPathsep ;Need for rootdir as a double slash start is a netpath
  1832 00002F3C AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  1833                              <1> .skipPathsep: ;Affects double slashes in path (but thats ok)
  1834 00002F3D 488D3514D2FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  1835 00002F44 E825090000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  1836 00002F49 488D3591D5FFFF      <1>     lea rsi, searchSpec 
  1837 00002F50 488D3DE1D3FFFF      <1>     lea rdi, cmdPathSpec
  1838 00002F57 E802080000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  1839 00002F5C E926FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  1840                              <1> .pathReentry:
  1841 00002F61 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  1842 00002F65 0F841EEAFFFF        <1>     je badCmdError
  1843                              <1> ;Currently, because we dont swap drives, we wont print this message.
  1844                              <1> ;Not really a big deal...
  1845                              <1>     ;cmp al, errBadDrv
  1846                              <1>     ;jne .pathDrvOk
  1847                              <1>     ;lea rdx, badDrvSrch ;Print the drive was invalid!
  1848                              <1>     ;mov eax, 0900h
  1849                              <1>     ;int 21h
  1850                              <1> ;.pathDrvOk:
  1851 00002F6B 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  1852 00002F6E 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  1853 00002F71 EB9D                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  1854                              <1> 
  1855                              <1> .prepAndSearch:
  1856                              <1> ;Copies over the name and extension in UC to the last componant of the 
  1857                              <1> ;cmdPathSpec and null terminates. 
  1858                              <1> ;Input: cmdFcb name + ext setup. 
  1859                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  1860                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
  1861 00002F73 51                  <1>     push rcx
  1862 00002F74 56                  <1>     push rsi
  1863 00002F75 57                  <1>     push rdi
  1864 00002F76 488D3DBBD3FFFF      <1>     lea rdi, cmdPathSpec 
  1865 00002F7D 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  1866 00002F80 E8C5080000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  1867 00002F85 488D35CCD1FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  1868 00002F8C E8DD080000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  1869 00002F91 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1870 00002F96 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  1871 00002F98 CD21                <1>     int 21h
  1872 00002F9A 5F                  <1>     pop rdi
  1873 00002F9B 5E                  <1>     pop rsi
  1874 00002F9C 59                  <1>     pop rcx
  1875                              <1>     return
    13                              <2> %%_ret:
    14 00002F9D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1876                              <1> 
  1877                              <1> set:
  1878 00002F9E F60505D1FFFFFF      <1>     test byte [arg1Flg], -1
  1879 00002FA5 7539                <1>     jnz .editEnv
  1880                              <1>     ;Here we just print the environment.
  1881 00002FA7 E87D0A0000          <1>     call checkEnvGoodAndGet 
  1882 00002FAC 0F8473E9FFFF        <1>     jz badEnvSpaceError
  1883                              <1>     ;We know this is a good env so keep going! env ptr in rsi
  1884 00002FB2 4889F7              <1>     mov rdi, rsi
  1885 00002FB5 4889F2              <1>     mov rdx, rsi
  1886                              <1> .findLp:
  1887 00002FB8 B9FFFFFFFF          <1>     mov ecx, -1
  1888 00002FBD 31C0                <1>     xor eax, eax
  1889                              <1> .scanLp:
  1890 00002FBF F2AE                <1>     repne scasb
  1891 00002FC1 75FC                <1>     jne .scanLp
  1892 00002FC3 F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
  1893                              <1>     ;Else, we now print this environment variable and CRLF it
  1894                              <1>     ;rdx points to the start of the string aleady
  1895                              <1>     ;ecx has the bytes to print
  1896 00002FC5 BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
  1897 00002FCA B800400000          <1>     mov eax, 4000h  ;Print to handle
  1898 00002FCF CD21                <1>     int 21h
  1899 00002FD1 E86D050000          <1>     call printCRLF
  1900 00002FD6 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
  1901                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002FD9 74(9D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1902 00002FDB 4889FA              <1>     mov rdx, rdi   
  1903 00002FDE EBD8                <1>     jmp short .findLp
  1904                              <1> .editEnv:
  1905 00002FE0 E8440A0000          <1>     call checkEnvGoodAndGet
  1906 00002FE5 0F843AE9FFFF        <1>     jz badEnvSpaceError
  1907 00002FEB 0FB605B9D0FFFF      <1>     movzx eax, byte [arg1Off]
  1908 00002FF2 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1909 00002FF9 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
  1910                              <1> .altEp:
  1911 00002FFC 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
  1912 00002FFF B00D                <1>     mov al, CR              ;Search for the CR
  1913 00003001 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
  1914 00003009 89CB                <1>     mov ebx, ecx            ;Save this count 
  1915 0000300B 53                  <1>     push rbx                ;Save this count on the stack too!
  1916 0000300C F2AE                <1>     repne scasb             ;Now get the length of this env string
  1917 0000300E 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
  1918 00003010 66891D39D8FFFF      <1>     mov word [envVarSz], bx ;Store the count
  1919 00003017 59                  <1>     pop rcx                 ;Get the char count back!
  1920 00003018 89CB                <1>     mov ebx, ecx            
  1921 0000301A 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
  1922 0000301D B03D                <1>     mov al, "="             ;Scan for an equals sign
  1923 0000301F F2AE                <1>     repne scasb
  1924 00003021 0F85F5E8FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
  1925 00003027 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
  1926 00003029 66891D22D8FFFF      <1>     mov word [envVarNamSz], bx
  1927 00003030 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
  1928 00003033 7477                <1>     je .delEnvVar           ;Free the envvar and return
  1929 00003035 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
  1930 00003036 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  1931 00003039 E8450A0000          <1>     call searchForEnvVar    ;Look for the environment variable
  1932 0000303E 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
  1933 00003040 E86C0A0000          <1>     call envFree            ;Free the var in rsi
  1934                              <1> .editNewEnv:
  1935 00003045 E8A00A0000          <1>     call getFreeSpace       ;Get the free space in env in ecx
  1936 0000304A E8C00A0000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
  1937 0000304F 5E                  <1>     pop rsi                 ;Get back the ptr to the string
  1938 00003050 31C0                <1>     xor eax, eax            ;Prepare null length!
  1939 00003052 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
  1940 00003058 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
  1941 0000305B 720B                <1>     jb .reallocTry          ;Try to reallocate!
  1942 0000305D FFC9                <1>     dec ecx                 ;Save a byte for end magic null
  1943 0000305F 663B0DEAD7FFFF      <1>     cmp cx, word [envVarSz] ;Do we have enough space?
  1944 00003066 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
  1945                              <1> .reallocTry:
  1946                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
  1947                              <1>     ; we proceed with the environment size.
  1948 00003068 E8B70A0000          <1>     call growEnvBlock   ;Attempt to grow the environment
  1949 0000306D 7319                <1>     jnc .reallocOk
  1950 0000306F 0F84B0E8FFFF        <1>     jz badEnvSpaceError    ;Max environment space
  1951                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
  1952                              <1>     ; partially the variable into the env. If so we do that. If the name
  1953                              <1>     ; cannot fit, we don't bother
  1954                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
  1955 00003075 663B0DD6D7FFFF      <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
  1956                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000307C 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000307E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1957 0000307F E8A1E8FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
  1958 00003084 FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
  1959 00003086 EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
  1960                              <1> .reallocOk:
  1961                              <1>     ;Here we have all the space to just copy the full path
  1962 00003088 0FB70DC1D7FFFF      <1>     movzx ecx, word [envVarSz]
  1963                              <1> .nameCp:
  1964                              <1> ;Now copy over the env var, ecx = #ofchars to copy
  1965                              <1> ;Always enough memory for name= here
  1966 0000308F AC                  <1>     lodsb
  1967 00003090 E8EC060000          <1>     call ucChar
  1968 00003095 AA                  <1>     stosb
  1969 00003096 66FFC9              <1>     dec cx      ;Always decrement this count
  1970 00003099 3C3D                <1>     cmp al, "="
  1971 0000309B 75F2                <1>     jne .nameCp
  1972                              <1> .exitNameCp:
  1973 0000309D AC                  <1>     lodsb
  1974 0000309E 3C0D                <1>     cmp al, CR
  1975 000030A0 7405                <1>     je .exitCp
  1976 000030A2 AA                  <1>     stosb
  1977 000030A3 FFC9                <1>     dec ecx
  1978 000030A5 75F6                <1>     jnz .exitNameCp
  1979                              <1> .exitCp:
  1980 000030A7 31C0                <1>     xor eax, eax
  1981 000030A9 66AB                <1>     stosw   ;Store the final null word
  1982                              <1>     return
    13                              <2> %%_ret:
    14 000030AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1983                              <1> .delEnvVar:
  1984                              <1>     ;rsi -> Start of the envvar name in user buffer
  1985 000030AC 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  1986 000030AF E8CF090000          <1>     call searchForEnvVar    ;Look for the environment variable
  1987 000030B4 7205                <1>     jc .delEnvVarSkip
  1988 000030B6 E8F6090000          <1>     call envFree    ;Free the env var at rsi
  1989                              <1> .delEnvVarSkip:
  1990 000030BB F8                  <1>     clc             ;Clear CF if the var doesnt exist
  1991                              <1>     return
    13                              <2> %%_ret:
    14 000030BC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1992                              <1> 
  1993                              <1> pathEdit:
  1994                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
  1995                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
  1996                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
  1997                              <1> ; end there. Error with too many arguments error!
  1998                              <1> ;If after the equals sign there is nothing, we just print the path!
  1999                              <1> ;Gotta process the command line ourselves first
  2000 000030BD E867090000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2001 000030C2 0F845DE8FFFF        <1>     jz badEnvSpaceError
  2002                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2003 000030C8 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2004 000030CF E8AD000000          <1>     call .skipPathDelimiters
  2005 000030D4 3C0D                <1>     cmp al, CR
  2006 000030D6 7466                <1>     je .printPath
  2007                              <1> ;Else use the set command to setup the path in the searchSpec.
  2008 000030D8 56                  <1>     push rsi    ;Save the first char of the command line string
  2009 000030D9 488D3586DEFFFF      <1>     lea rsi, pathEVar
  2010 000030E0 488D3DFAD3FFFF      <1>     lea rdi, searchSpec
  2011 000030E7 E872060000          <1>     call strcpy
  2012 000030EC 48FFCF              <1>     dec rdi     ;Point to the terminating null
  2013 000030EF 5E                  <1>     pop rsi     ;Get back the first char of the pathstring
  2014 000030F0 31C9                <1>     xor ecx, ecx    ;Make a count of chars
  2015                              <1> .cpLp:
  2016 000030F2 AC                  <1>     lodsb
  2017 000030F3 3C0D                <1>     cmp al, CR
  2018 000030F5 7411                <1>     je .cpLpExit
  2019 000030F7 E891000000          <1>     call .isALPathDelimiter ;Any path delims now are exit conditions!
  2020 000030FC 740A                <1>     je .cpLpExit
  2021 000030FE E87E060000          <1>     call ucChar ;Uppercase the char
  2022 00003103 AA                  <1>     stosb       ;Store it
  2023 00003104 FFC1                <1>     inc ecx     ;Inc the count, CR not inclusive!
  2024 00003106 EBEA                <1>     jmp short .cpLp
  2025                              <1> .cpLpExit:
  2026                              <1>     ;Remove trailing semicolons
  2027 00003108 807FFF3B            <1>     cmp byte [rdi - 1], ";" ;Check back a char
  2028 0000310C 7507                <1>     jne .cpLpNoIntervene
  2029 0000310E FFC9                <1>     dec ecx     ;Reduce the count by one
  2030 00003110 48FFCF              <1>     dec rdi     ;Go back a char
  2031 00003113 EBF3                <1>     jmp short .cpLpExit ;Keep removing
  2032                              <1> .cpLpNoIntervene:
  2033 00003115 B00D                <1>     mov al, CR  ;Now we store the terminator!
  2034 00003117 AA                  <1>     stosb       ;Store it!
  2035 00003118 81C105000000        <1>     add ecx, 5  ;PATH= is 5 chars
  2036 0000311E 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count
  2037 00003125 FFC1                <1>     inc ecx     ;Add the CR for copying over
  2038 00003127 488D35B3D3FFFF      <1>     lea rsi, searchSpec
  2039 0000312E 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2040 00003135 57                  <1>     push rdi
  2041 00003136 F3A4                <1>     rep movsb
  2042 00003138 5E                  <1>     pop rsi         ;Get the ptr to the cmdline in rsi
  2043 00003139 E9BEFEFFFF          <1>     jmp set.altEp   ;We've now set the string up, lets go!
  2044                              <1> .printPath:
  2045 0000313E 488D3D21DEFFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
  2046 00003145 E839090000          <1>     call searchForEnvVar    ;Returns ptr to env var in rsi
  2047 0000314A 7221                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
  2048 0000314C 4889F7              <1>     mov rdi, rsi        
  2049 0000314F E823060000          <1>     call strlen         ;Get the length of the path in rdi
  2050 00003154 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
  2051 0000315A 7411                <1>     je .noPathPrnt      ;Print no path!
  2052 0000315C FFC9                <1>     dec ecx             ;Drop the terminating null from the count
  2053 0000315E 4889FA              <1>     mov rdx, rdi        ;Set path ptr for printing
  2054 00003161 BB01000000          <1>     mov ebx, 1          ;STDOUT
  2055 00003166 B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
  2056 0000316B EB0C                <1>     jmp short .pathExit
  2057                              <1> .noPathPrnt:
  2058 0000316D 488D15FFDAFFFF      <1>     lea rdx, noPath
  2059 00003174 B800090000          <1>     mov eax, 0900h
  2060                              <1> .pathExit:
  2061 00003179 CD21                <1>     int 21h
  2062 0000317B E8C3030000          <1>     call printCRLF      ;Print a crlf at the end
  2063                              <1>     return
    13                              <2> %%_ret:
    14 00003180 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2064                              <1> .skipPathDelimiters:
  2065                              <1> ;Input: rsi -> Start of string to parse
  2066                              <1> ;Output: rsi -> First non-delimiter char of string
  2067                              <1> ;        al = First non delim char
  2068 00003181 AC                  <1>     lodsb
  2069 00003182 E806000000          <1>     call .isALPathDelimiter
  2070 00003187 74F8                <1>     je .skipPathDelimiters
  2071 00003189 48FFCE              <1>     dec rsi
  2072                              <1>     return
    13                              <2> %%_ret:
    14 0000318C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2073                              <1> .isALPathDelimiter:
  2074                              <1> ;Same as before without semicolon
  2075 0000318D 3C20                <1>     cmp al, SPC
  2076                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000318F 74(8C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2077 00003191 3C09                <1>     cmp al, TAB
  2078                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003193 74(8C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2079 00003195 3C2C                <1>     cmp al, ","
  2080                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003197 74(8C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2081 00003199 3C3D                <1>     cmp al, "="
  2082                              <1>     return
    13                              <2> %%_ret:
    14 0000319B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2083                              <1> 
  2084                              <1> prompt:
  2085 0000319C E888080000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2086 000031A1 0F847EE7FFFF        <1>     jz badEnvSpaceError
  2087                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2088 000031A7 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2089 000031AE E8E0050000          <1>     call skipDelimiters ;Points rsi to the first non-delimiter char
  2090 000031B3 803E0D              <1>     cmp byte [rsi], CR  ;Is the first non-delim a CR?
  2091 000031B6 742C                <1>     je .reset   ;Reset if so
  2092 000031B8 56                  <1>     push rsi    ;Save ptr to the start of the user typed line
  2093 000031B9 488D357ADDFFFF      <1>     lea rsi, promptEVar ;Copy the PROMPT= prefix to searchspec
  2094 000031C0 488D3D1AD3FFFF      <1>     lea rdi, searchSpec
  2095 000031C7 B907000000          <1>     mov ecx, 7  ;Copy without <CR>
  2096 000031CC F3A4                <1>     rep movsb
  2097 000031CE 5E                  <1>     pop rsi ;Get back ptr to the user typed line
  2098 000031CF 31C9                <1>     xor ecx, ecx    ;Get char count
  2099                              <1> .cp:    ;Now copy the user string over
  2100 000031D1 AC                  <1>     lodsb
  2101 000031D2 AA                  <1>     stosb 
  2102 000031D3 3C0D                <1>     cmp al, CR
  2103 000031D5 7404                <1>     je .cpOk
  2104 000031D7 FFC1                <1>     inc ecx ;Increment count if non CR char copied over
  2105 000031D9 EBF6                <1>     jmp short .cp
  2106                              <1> .cpOk:
  2107 000031DB 488D35FFD2FFFF      <1>     lea rsi, searchSpec ;Source the string from here
  2108 000031E2 EB09                <1>     jmp short .goSet    ;Got the CR-less count
  2109                              <1> .reset:
  2110                              <1> ;Delete the environment variable!
  2111 000031E4 488D354FDDFFFF      <1>     lea rsi, promptEVar 
  2112 000031EB 31C9                <1>     xor ecx, ecx    ;No chars to write to the envstring
  2113                              <1> .goSet:
  2114 000031ED 81C107000000        <1>     add ecx, 7  ;Add the chars for the prompt= string too
  2115 000031F3 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl 
  2116 000031FA FFC1                <1>     inc ecx     ;Include CR in copy
  2117 000031FC 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2118 00003203 57                  <1>     push rdi
  2119 00003204 F3A4                <1>     rep movsb
  2120 00003206 5E                  <1>     pop rsi
  2121 00003207 E9F0FDFFFF          <1>     jmp set.altEp
  2122                              <1> 
  2123                              <1> batLaunch:
  2124                              <1> ;Preps and launches a batch file!
  2125 0000320C 488D1505000000      <1>     lea rdx, .batMsg
  2126 00003213 E932030000          <1>     jmp printString
  2127 00003218 424154434820707265- <1> .batMsg db "BATCH preprocessor not implemented",CR,LF,"$"
  2127 00003221 70726F636573736F72- <1>
  2127 0000322A 206E6F7420696D706C- <1>
  2127 00003233 656D656E7465640D0A- <1>
  2127 0000323C 24                  <1>
  2128                              <1> 
  2129                              <1> echo:
  2130 0000323D F60566CEFFFFFF      <1>     test byte [arg1Flg], -1 ;If no argument, display if on or off
  2131 00003244 752A                <1>     jnz .argGiven
  2132 00003246 488D1517DBFFFF      <1>     lea rdx, echoIs
  2133 0000324D E8F8020000          <1>     call printString
  2134 00003252 488D15F1DAFFFF      <1>     lea rdx, onMes
  2135 00003259 488D0DE4DAFFFF      <1>     lea rcx, offMes
  2136 00003260 F60537CEFFFFFF      <1>     test byte [echoFlg], -1
  2137 00003267 480F44D1            <1>     cmovz rdx, rcx
  2138 0000326B E9DA020000          <1>     jmp printString
  2139                              <1> .argGiven:
  2140 00003270 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2141 00003277 0FB6052DCEFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the offset
  2142 0000327E 4801C6              <1>     add rsi, rax
  2143 00003281 AC                  <1>     lodsb   ;Get this char
  2144 00003282 48FFCE              <1>     dec rsi ;And go back to the start of the string
  2145 00003285 E8F7040000          <1>     call ucChar
  2146 0000328A 3C4F                <1>     cmp al, "O" ;Was it an O? If not, direct copy
  2147 0000328C 755A                <1>     jne .directEcho
  2148 0000328E 8A4601              <1>     mov al, byte [rsi + 1]  ;Get the next char
  2149 00003291 E8EB040000          <1>     call ucChar
  2150 00003296 3C4E                <1>     cmp al, "N" ;If its N, check its the last char on the string
  2151 00003298 751B                <1>     jne .checkOff
  2152 0000329A 56                  <1>     push rsi
  2153 0000329B 4881C602000000      <1>     add rsi, 2  ;Go past on string
  2154 000032A2 E8EC040000          <1>     call skipDelimiters
  2155 000032A7 803E0D              <1>     cmp byte [rsi], CR
  2156 000032AA 5E                  <1>     pop rsi
  2157 000032AB 753B                <1>     jne .directEcho ;If its not, just echo the string
  2158 000032AD C605EACDFFFFFF      <1>     mov byte [echoFlg], -1
  2159                              <1>     return
    13                              <2> %%_ret:
    14 000032B4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2160                              <1> .checkOff:
  2161 000032B5 8A4601              <1>     mov al, byte [rsi + 1]  ;Get first char past O
  2162 000032B8 E8C4040000          <1>     call ucChar
  2163 000032BD 3C46                <1>     cmp al, "F" ;Is it an F?
  2164 000032BF 7527                <1>     jne .directEcho ;No, just direct echo
  2165 000032C1 8A4602              <1>     mov al, byte [rsi + 2]
  2166 000032C4 E8B8040000          <1>     call ucChar
  2167 000032C9 3C46                <1>     cmp al, "F"
  2168 000032CB 751B                <1>     jne .directEcho
  2169 000032CD 56                  <1>     push rsi
  2170 000032CE 4881C603000000      <1>     add rsi, 3
  2171 000032D5 E8B9040000          <1>     call skipDelimiters
  2172 000032DA 803E0D              <1>     cmp byte [rsi], CR
  2173 000032DD 5E                  <1>     pop rsi
  2174 000032DE 7508                <1>     jne .directEcho
  2175 000032E0 C605B7CDFFFF00      <1>     mov byte [echoFlg], 0
  2176                              <1>     return
    13                              <2> %%_ret:
    14 000032E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2177                              <1> .directEcho: 
  2178 000032E8 AC                  <1>     lodsb
  2179 000032E9 3C0D                <1>     cmp al, CR
  2180 000032EB 0F8452020000        <1>     je printCRLF    ;Prints a crlf and returns
  2181 000032F1 88C2                <1>     mov dl, al
  2182 000032F3 E8C2020000          <1>     call outChar
  2183 000032F8 EBEE                <1>     jmp short .directEcho
    18                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printDate:
     4                              <1> ;Input: eax = Packed Date
     5                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
     6                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
     7                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
     8                              <1> ;       ebx = 0 => Print two digit year
     9                              <1> ;       ebx = 1 => Print four digit year
    10 000032FA 53                  <1>     push rbx
    11 000032FB 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    12 000032FD 803D30CDFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    13 00003304 7240                <1>     jb .usDate
    14 00003306 777C                <1>     ja .jpnDate
    15                              <1> ;European: DD/MM/YY
    16 00003308 251F000000          <1>     and eax, 1Fh    ;Save day bits
    17 0000330D E8B0000000          <1>     call .printFirst
    18 00003312 8A1527CDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    19 00003318 B402                <1>     mov ah, 02h
    20 0000331A CD21                <1>     int 21h
    21                              <1> 
    22 0000331C 89C8                <1>     mov eax, ecx
    23 0000331E 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    24 00003323 C1E805              <1>     shr eax, 5
    25 00003326 E8B3000000          <1>     call .printSecond
    26                              <1> 
    27 0000332B 8A150ECDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    28 00003331 B402                <1>     mov ah, 02h
    29 00003333 CD21                <1>     int 21h
    30                              <1> 
    31 00003335 89C8                <1>     mov eax, ecx
    32 00003337 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    33 0000333C C1E809              <1>     shr eax, 9
    34 0000333F 5B                  <1>     pop rbx ;Get the year signature back
    35 00003340 E8A9000000          <1>     call .printYear
    36                              <1>     return
    13                              <2> %%_ret:
    14 00003345 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                              <1> .usDate:
    38                              <1> ;US: MM/DD/YY
    39 00003346 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    40 0000334B C1E805              <1>     shr eax, 5
    41 0000334E E86F000000          <1>     call .printFirst
    42                              <1> 
    43 00003353 8A15E6CCFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    44 00003359 B402                <1>     mov ah, 02h
    45 0000335B CD21                <1>     int 21h
    46                              <1> 
    47 0000335D 89C8                <1>     mov eax, ecx
    48 0000335F 251F000000          <1>     and eax, 1Fh    ;Save day bits
    49 00003364 E875000000          <1>     call .printSecond
    50                              <1> 
    51 00003369 8A15D0CCFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 0000336F B402                <1>     mov ah, 02h
    53 00003371 CD21                <1>     int 21h
    54                              <1> 
    55 00003373 89C8                <1>     mov eax, ecx
    56 00003375 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 0000337A C1E809              <1>     shr eax, 9
    58 0000337D 5B                  <1>     pop rbx ;Get the year signature back
    59 0000337E E86B000000          <1>     call .printYear
    60                              <1>     return
    13                              <2> %%_ret:
    14 00003383 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> .jpnDate:
    62                              <1> ;Japan: YY/MM/DD
    63 00003384 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 00003389 C1E809              <1>     shr eax, 9
    65 0000338C 5B                  <1>     pop rbx ;Get the year signature back
    66 0000338D E85C000000          <1>     call .printYear
    67                              <1> 
    68 00003392 8A15A7CCFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    69 00003398 B402                <1>     mov ah, 02h
    70 0000339A CD21                <1>     int 21h
    71                              <1> 
    72 0000339C 89C8                <1>     mov eax, ecx
    73 0000339E 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    74 000033A3 C1E805              <1>     shr eax, 5
    75 000033A6 E833000000          <1>     call .printSecond
    76                              <1> 
    77 000033AB 8A158ECCFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    78 000033B1 B402                <1>     mov ah, 02h
    79 000033B3 CD21                <1>     int 21h
    80                              <1> 
    81 000033B5 89C8                <1>     mov eax, ecx
    82 000033B7 251F000000          <1>     and eax, 1Fh    ;Save day bits
    83 000033BC E81D000000          <1>     call .printSecond
    84                              <1>     return
    13                              <2> %%_ret:
    14 000033C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> ;Each of these require eax setup correctly
    87                              <1> .printFirst:
    88 000033C2 51                  <1>     push rcx
    89 000033C3 E8E9050000          <1>     call getDecimalWord
    90 000033C8 84ED                <1>     test ch, ch ;Do we have an upper digit?
    91 000033CA 7504                <1>     jnz .skipSpace
    92 000033CC 88CD                <1>     mov ch, cl
    93 000033CE B120                <1>     mov cl, " "
    94                              <1> .skipSpace:
    95 000033D0 88CA                <1>     mov dl, cl
    96 000033D2 B402                <1>     mov ah, 02h
    97 000033D4 CD21                <1>     int 21h
    98 000033D6 88EA                <1>     mov dl, ch
    99 000033D8 B402                <1>     mov ah, 02h
   100 000033DA CD21                <1>     int 21h
   101 000033DC 59                  <1>     pop rcx
   102                              <1>     return
    13                              <2> %%_ret:
    14 000033DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .printSecond:
   104 000033DE 51                  <1>     push rcx
   105 000033DF E8CD050000          <1>     call getDecimalWord
   106 000033E4 84ED                <1>     test ch, ch ;Do we have an upper digit?
   107 000033E6 75E8                <1>     jnz .skipSpace
   108 000033E8 88CD                <1>     mov ch, cl
   109 000033EA B130                <1>     mov cl, "0"
   110 000033EC EBE2                <1>     jmp short .skipSpace
   111                              <1> .printYear:
   112 000033EE 05BC070000          <1>     add eax, 1980
   113 000033F3 51                  <1>     push rcx
   114 000033F4 53                  <1>     push rbx
   115 000033F5 E8B7050000          <1>     call getDecimalWord ;Get unpacked in rcx
   116 000033FA 5B                  <1>     pop rbx
   117 000033FB 84DB                <1>     test bl, bl
   118 000033FD 740C                <1>     jz .twoDigitYear
   119 000033FF 88CA                <1>     mov dl, cl  ;Print the first digit
   120 00003401 B402                <1>     mov ah, 02h
   121 00003403 CD21                <1>     int 21h
   122 00003405 88EA                <1>     mov dl, ch  ;Print the second digit
   123 00003407 B402                <1>     mov ah, 02h
   124 00003409 CD21                <1>     int 21h
   125                              <1> .twoDigitYear:
   126 0000340B C1E910              <1>     shr ecx, 10h    ;Get high word low
   127 0000340E 88CA                <1>     mov dl, cl  ;Print the upper digit
   128 00003410 B402                <1>     mov ah, 02h
   129 00003412 CD21                <1>     int 21h
   130 00003414 88EA                <1>     mov dl, ch  ;Print the lower digit
   131 00003416 B402                <1>     mov ah, 02h
   132 00003418 CD21                <1>     int 21h
   133 0000341A 59                  <1>     pop rcx
   134                              <1>     return
    13                              <2> %%_ret:
    14 0000341B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> 
   137                              <1> printTime:
   138                              <1> ;Input: eax = Packed Time
   139                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   140                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   141 0000341C 89C1                <1>     mov ecx, eax
   142 0000341E 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   143 00003423 C1E80B              <1>     shr eax, 11
   144 00003426 803D18CCFFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   145 0000342D 750B                <1>     jne .ampm
   146 0000342F E85A000000          <1>     call .printHours
   147 00003434 E831000000          <1>     call .printMinutes
   148                              <1>     return
    13                              <2> %%_ret:
    14 00003439 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> .ampm:
   150 0000343A 3D0C000000          <1>     cmp eax, 12
   151 0000343F 7713                <1>     ja .pm
   152 00003441 7416                <1>     je .pm2
   153 00003443 E846000000          <1>     call .printHours
   154 00003448 E81D000000          <1>     call .printMinutes
   155 0000344D B261                <1>     mov dl, "a"
   156 0000344F B402                <1>     mov ah, 02h
   157 00003451 CD21                <1>     int 21h
   158                              <1>     return
    13                              <2> %%_ret:
    14 00003453 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> .pm:
   160 00003454 2D0C000000          <1>     sub eax, 12
   161                              <1> .pm2:
   162 00003459 E830000000          <1>     call .printHours
   163 0000345E E807000000          <1>     call .printMinutes
   164 00003463 B270                <1>     mov dl, "p"
   165 00003465 B402                <1>     mov ah, 02h
   166 00003467 CD21                <1>     int 21h
   167                              <1>     return
    13                              <2> %%_ret:
    14 00003469 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   168                              <1> .printMinutes:
   169 0000346A 8A15D1CBFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   170 00003470 B402                <1>     mov ah, 02h
   171 00003472 CD21                <1>     int 21h
   172                              <1> 
   173 00003474 89C8                <1>     mov eax, ecx
   174 00003476 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   175 0000347B C1E805              <1>     shr eax, 5
   176                              <1> .printMinutesAlt:
   177 0000347E 51                  <1>     push rcx
   178 0000347F E82D050000          <1>     call getDecimalWord
   179 00003484 84ED                <1>     test ch, ch ;Do we have an upper digit?
   180 00003486 7514                <1>     jnz .skipSpace
   181 00003488 88CD                <1>     mov ch, cl
   182 0000348A B130                <1>     mov cl, "0"
   183 0000348C EB0E                <1>     jmp short .skipSpace
   184                              <1> .printHours:
   185 0000348E 51                  <1>     push rcx
   186 0000348F E81D050000          <1>     call getDecimalWord
   187 00003494 84ED                <1>     test ch, ch ;Do we have an upper digit?
   188 00003496 7504                <1>     jnz .skipSpace
   189 00003498 88CD                <1>     mov ch, cl
   190 0000349A B120                <1>     mov cl, " "
   191                              <1> .skipSpace:
   192 0000349C 88CA                <1>     mov dl, cl
   193 0000349E B402                <1>     mov ah, 02h
   194 000034A0 CD21                <1>     int 21h
   195 000034A2 88EA                <1>     mov dl, ch
   196 000034A4 B402                <1>     mov ah, 02h
   197 000034A6 CD21                <1>     int 21h
   198 000034A8 59                  <1>     pop rcx
   199                              <1>     return
    13                              <2> %%_ret:
    14 000034A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printPrompt:
   202 000034AA F605EDCBFFFFFF      <1>     test byte [echoFlg], -1 ;If echo off, no prompt!
   203                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000034B1 74(A9)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 000034B3 488D3D80DAFFFF      <1>     lea rdi, promptEVar   ;Find the prompt var
   205 000034BA E8C4050000          <1>     call searchForEnvVar
   206 000034BF 730B                <1>     jnc .validPrompt
   207                              <1>     ;Here we print the default prompt
   208 000034C1 E8F9000000          <1>     call putCWDInPrompt
   209 000034C6 E8C5000000          <1>     call putGTinPrompt
   210                              <1>     return
    13                              <2> %%_ret:
    14 000034CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> .validPrompt:
   212                              <1> ;rsi points to the prompt
   213 000034CC 4881C607000000      <1>     add rsi, 7  ;Go past the prompt= string
   214                              <1> .promptLp:
   215 000034D3 AC                  <1>     lodsb   ;Get the char
   216 000034D4 84C0                <1>     test al, al
   217                              <1>     retz    ;Return when al is 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000034D6 74(CB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   218 000034D8 3C24                <1>     cmp al, "$"
   219 000034DA 7409                <1>     je .escapeChar
   220 000034DC 88C2                <1>     mov dl, al
   221 000034DE E8D7000000          <1>     call outChar    ;Prints the char in dl
   222 000034E3 EBEE                <1>     jmp short .promptLp
   223                              <1> .escapeChar:
   224 000034E5 AC                  <1>     lodsb       ;Get the next char now that we are escaping
   225 000034E6 E896020000          <1>     call ucChar ;Uppercase this char in al
   226 000034EB 488D1D2A000000      <1>     lea rbx, .pTbl
   227 000034F2 B90D000000          <1>     mov ecx, pTblL / 3  ;3 bytes per entry
   228                              <1> .escapeLp:
   229 000034F7 3803                <1>     cmp byte [rbx], al  ;Are we at the right entry?
   230 000034F9 740D                <1>     je .escapeFnd
   231 000034FB 4881C303000000      <1>     add rbx, 3  ;Go to next entry
   232 00003502 FFC9                <1>     dec ecx
   233 00003504 75F1                <1>     jnz .escapeLp
   234 00003506 EBCB                <1>     jmp short .promptLp  ;Output nothing if invalid
   235                              <1> .escapeFnd:
   236 00003508 488D050D000000      <1>     lea rax, .pTbl              ;Get the table addr
   237 0000350F 0FB75B01            <1>     movzx ebx, word [rbx + 1]   ;Get the word offset from the table
   238 00003513 4801D8              <1>     add rax, rbx                ;Add these
   239 00003516 56                  <1>     push rsi    ;Ensure rsi remains unchanged
   240 00003517 FFD0                <1>     call rax    ;Call indirectly the function to output the chars
   241 00003519 5E                  <1>     pop rsi
   242 0000351A EBB7                <1>     jmp short .promptLp
   243                              <1> 
   244                              <1> ;Easy table to use, 13 entries, 3 bytes per entry
   245                              <1> .pTbl:
   246 0000351C 42                  <1>     db "B", 
   247 0000351D 7000                <1>     dw putPipeInPrompt - .pTbl     ;Pipe char
   248 0000351F 44                  <1>     db "D", 
   249 00003520 5701                <1>     dw printFmtDate - .pTbl        ;Current date
   250 00003522 45                  <1>     db "E", 
   251 00003523 6400                <1>     dw putEscInPrompt - .pTbl      ;ANSI Escape char
   252 00003525 47                  <1>     db "G", 
   253 00003526 7400                <1>     dw putGTinPrompt - .pTbl       ;Greater than char
   254 00003528 48                  <1>     db "H", 
   255 00003529 7C00                <1>     dw putBSPinPrompt - .pTbl      ;Backspace
   256 0000352B 4C                  <1>     db "L", 
   257 0000352C 7800                <1>     dw putLTinPrompt - .pTbl       ;Less than char
   258 0000352E 4E                  <1>     db "N", 
   259 0000352F 9500                <1>     dw putDriveInPrompt - .pTbl    ;Current drive letter
   260 00003531 50                  <1>     db "P", 
   261 00003532 A300                <1>     dw putCWDInPrompt - .pTbl      ;Current drive and path
   262 00003534 51                  <1>     db "Q", 
   263 00003535 6C00                <1>     dw putEquInPrompt - .pTbl      ;Equals char
   264 00003537 54                  <1>     db "T", 
   265 00003538 F400                <1>     dw printFmtTime - .pTbl        ;Current time in hh:mm:ss.hh fmt
   266 0000353A 56                  <1>     db "V", 
   267 0000353B 3600                <1>     dw putVersionInPrompt - .pTbl  ;DOS version number
   268 0000353D 5F                  <1>     db "_", 
   269 0000353E 2700                <1>     dw printCRLF - .pTbl           ;CRLF pair
   270 00003540 24                  <1>     db "$", 
   271 00003541 6800                <1>     dw putMoneyInPrompt - .pTbl    ;Dollar sign
   272                              <1> pTblL equ $ - .pTbl
   273                              <1> 
   274                              <1> printCRLF:
   275 00003543 488D1507D4FFFF      <1>     lea rdx, crlf
   276                              <1> printString:
   277 0000354A B800090000          <1>     mov eax, 0900h  ;Print string
   278 0000354F CD21                <1>     int 21h
   279                              <1>     return
    13                              <2> %%_ret:
    14 00003551 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   280                              <1> 
   281                              <1> putVersionInPrompt:
   282 00003552 488D156BD6FFFF      <1>     lea rdx, dosVer
   283 00003559 B409                <1>     mov ah, 09h ;Print String
   284 0000355B CD21                <1>     int 21h
   285 0000355D B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   286 0000355F CD21                <1>     int 21h
   287 00003561 50                  <1>     push rax    ;Save minor version
   288 00003562 E89D010000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   289 00003567 E8B5010000          <1>     call printPackedBCD ;Print al
   290 0000356C B22E                <1>     mov dl, "."
   291 0000356E B402                <1>     mov ah, 02h
   292 00003570 CD21                <1>     int 21h
   293 00003572 58                  <1>     pop rax
   294 00003573 88E0                <1>     mov al, ah  ;Get the minor version low
   295 00003575 E88A010000          <1>     call hexToBCD
   296 0000357A E8A2010000          <1>     call printPackedBCD
   297                              <1>     return
    13                              <2> %%_ret:
    14 0000357F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   298                              <1> putEscInPrompt:
   299 00003580 B21B                <1>     mov dl, ESC
   300 00003582 EB36                <1>     jmp short outChar
   301                              <1> 
   302                              <1> putMoneyInPrompt:
   303 00003584 B224                <1>     mov dl, "$"
   304 00003586 EB32                <1>     jmp short outChar
   305                              <1> 
   306                              <1> putEquInPrompt:
   307 00003588 B23D                <1>     mov dl, "="
   308 0000358A EB2E                <1>     jmp short outChar
   309                              <1> 
   310                              <1> putPipeInPrompt:
   311 0000358C B27C                <1>     mov dl, "|"
   312 0000358E EB2A                <1>     jmp short outChar
   313                              <1> 
   314                              <1> putGTinPrompt:
   315 00003590 B23E                <1>     mov dl, ">"
   316 00003592 EB26                <1>     jmp short outChar
   317                              <1> 
   318                              <1> putLTinPrompt:
   319 00003594 B23C                <1>     mov dl, "<"
   320 00003596 EB22                <1>     jmp short outChar
   321                              <1> 
   322                              <1> putBSPinPrompt:
   323 00003598 488D1520D8FFFF      <1>     lea rdx, backSpace
   324 0000359F B903000000          <1>     mov ecx, 3
   325 000035A4 BB01000000          <1>     mov ebx, 1
   326 000035A9 B800400000          <1>     mov eax, 4000h  ;Output the backspace!
   327 000035AE CD21                <1>     int 21h
   328                              <1>     return
    13                              <2> %%_ret:
    14 000035B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   329                              <1> 
   330                              <1> putDriveInPrompt:
   331 000035B1 E8A3010000          <1>     call getCurrentDrive
   332 000035B6 0441                <1>     add al, "A" ;Convert to letter
   333 000035B8 88C2                <1>     mov dl, al
   334                              <1> outChar:
   335 000035BA B402                <1>     mov ah, 02h ;Echo to STDOUT
   336 000035BC CD21                <1>     int 21h
   337                              <1>     return
    13                              <2> %%_ret:
    14 000035BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   338                              <1> putCWDInPrompt:
   339 000035BF E895010000          <1>     call getCurrentDrive
   340 000035C4 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   341 000035C6 FEC2                <1>     inc dl
   342 000035C8 0441                <1>     add al, "A" ;Convert to letter
   343 000035CA B43A                <1>     mov ah, ":"
   344 000035CC 488D3D87CAFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   345 000035D3 66AB                <1>     stosw   ;Store X:, rdi+=2
   346 000035D5 8A054ECAFFFF        <1>     mov al, byte [pathSep]
   347 000035DB AA                  <1>     stosb   ;Store pathSep, inc rdi
   348 000035DC B447                <1>     mov ah, 47h ;Get Current Working Directory
   349 000035DE 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   350 000035E1 CD21                <1>     int 21h
   351 000035E3 721F                <1>     jc .badDrive
   352 000035E5 E88D010000          <1>     call strlen
   353 000035EA 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   354                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   355 000035F0 B800400000          <1>     mov eax, 4000h ;Write to handle
   356 000035F5 BB01000000          <1>     mov ebx, 1  ;STDOUT
   357 000035FA 488D1559CAFFFF      <1>     lea rdx, currDirStr
   358 00003601 CD21                <1>     int 21h
   359                              <1>     return
    13                              <2> %%_ret:
    14 00003603 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> .badDrive:
   361                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   362 00003604 488D1581D6FFFF      <1>     lea rdx, badDrvMsg
   363 0000360B E93AFFFFFF          <1>     jmp printString
   364                              <1> printFmtTime:
   365                              <1> ;Outputs the formatted time
   366 00003610 B42C                <1>     mov ah, 2Ch ;DOS get time
   367 00003612 CD21                <1>     int 21h
   368                              <1>     ;CH = hour (0-23)
   369                              <1> 	;CL = minutes (0-59)
   370                              <1> 	;DH = seconds (0-59)
   371                              <1> 	;DL = hundredths (0-99)
   372 00003614 880D8DD0FFFF        <1>     mov byte [td1], cl
   373 0000361A 882D88D0FFFF        <1>     mov byte [td2], ch
   374 00003620 881583D0FFFF        <1>     mov byte [td3], dl
   375 00003626 88357ED0FFFF        <1>     mov byte [td4], dh
   376 0000362C 0FB6C5              <1>     movzx eax, ch
   377 0000362F E85AFEFFFF          <1>     call printTime.printHours
   378 00003634 8A1507CAFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   379 0000363A B402                <1>     mov ah, 02h
   380 0000363C CD21                <1>     int 21h
   381 0000363E 0FB60562D0FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   382 00003645 E834FEFFFF          <1>     call printTime.printMinutesAlt
   383 0000364A 8A15F1C9FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   384 00003650 B402                <1>     mov ah, 02h
   385 00003652 CD21                <1>     int 21h
   386 00003654 0FB6054FD0FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   387 0000365B E81EFEFFFF          <1>     call printTime.printMinutesAlt
   388 00003660 B22E                <1>     mov dl, "."
   389 00003662 B402                <1>     mov ah, 02h
   390 00003664 CD21                <1>     int 21h
   391 00003666 0FB6053CD0FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   392 0000366D E80CFEFFFF          <1>     call printTime.printMinutesAlt
   393                              <1>     return
    13                              <2> %%_ret:
    14 00003672 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   394                              <1> 
   395                              <1> printFmtDate:
   396                              <1> ;Outputs the formatted date
   397 00003673 B8002A0000          <1>     mov eax, 2A00h ;DOS get date
   398 00003678 CD21                <1>     int 21h
   399                              <1> 	;AL = day of the week (0=Sunday)
   400                              <1> 	;CX = year (1980-2099)
   401                              <1> 	;DH = month (1-12)
   402                              <1> 	;DL = day (1-31)
   403 0000367A 66890D26D0FFFF      <1>     mov word [td1], cx
   404 00003681 881522D0FFFF        <1>     mov byte [td3], dl
   405 00003687 88351DD0FFFF        <1>     mov byte [td4], dh
   406 0000368D 0FB6C0              <1>     movzx eax, al
   407 00003690 89C3                <1>     mov ebx, eax
   408 00003692 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   409 00003694 01D8                <1>     add eax, ebx ;Make it 3 times 
   410 00003696 488D1571D4FFFF      <1>     lea rdx, dayName
   411 0000369D 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   412 000036A1 B903000000          <1>     mov ecx, 3  ;Print three chars
   413 000036A6 BB01000000          <1>     mov ebx, 1  ;STDOUT
   414 000036AB B440                <1>     mov ah, 40h ;Write to handle
   415 000036AD CD21                <1>     int 21h
   416 000036AF B220                <1>     mov dl, " "
   417 000036B1 E804FFFFFF          <1>     call outChar
   418 000036B6 E8FFFEFFFF          <1>     call outChar
   419                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   420                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   421                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   422 000036BB 0FB705E5CFFFFF      <1>     movzx eax, word [td1]   ;Get this word
   423 000036C2 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   424 000036C5 0FB61DDECFFFFF      <1>     movzx ebx, byte [td4]
   425 000036CC C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   426 000036CF 09D8                <1>     or eax, ebx ;Add this date to eax
   427 000036D1 0FB61DD1CFFFFF      <1>     movzx ebx, byte [td3]
   428 000036D8 09D8                <1>     or eax, ebx
   429 000036DA BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   430 000036DF E816FCFFFF          <1>     call printDate
   431                              <1>     return
    13                              <2> %%_ret:
    14 000036E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   432                              <1> 
   433                              <1> BCDtoHex:
   434                              <1> ;Converts a BCD value to a Hex byte
   435                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   436 000036E5 51                  <1>     push rcx
   437 000036E6 0FB6C0              <1>     movzx eax, al   ;Zero extend
   438 000036E9 89C1                <1>     mov ecx, eax    ;Save al in ecx
   439 000036EB 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   440 000036F0 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   441 000036F6 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   442                              <1> .bth:
   443 000036F9 050A000000          <1>     add eax, 10
   444 000036FE FFC9                <1>     dec ecx
   445 00003700 75F7                <1>     jnz .bth
   446 00003702 59                  <1>     pop rcx
   447 00003703 C3                  <1>     ret
   448                              <1> 
   449                              <1> hexToBCD:
   450                              <1> ;Converts a Hex byte into two BCD digits
   451                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   452 00003704 51                  <1>     push rcx
   453 00003705 0FB6C0              <1>     movzx eax, al   ;Zero extend
   454 00003708 31C9                <1>     xor ecx, ecx
   455                              <1> .htb0:
   456 0000370A 3D0A000000          <1>     cmp eax, 10
   457 0000370F 7209                <1>     jb .htb1
   458 00003711 2D0A000000          <1>     sub eax, 10
   459 00003716 FFC1                <1>     inc ecx
   460 00003718 EBF0                <1>     jmp short .htb0
   461                              <1> .htb1:
   462 0000371A C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   463 0000371D 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   464 0000371F 59                  <1>     pop rcx
   465 00003720 C3                  <1>     ret
   466                              <1> 
   467                              <1> printPackedBCD:
   468                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   469                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   470                              <1> ;Preserves all registers
   471 00003721 50                  <1>     push rax
   472 00003722 52                  <1>     push rdx
   473 00003723 88C4                <1>     mov ah, al
   474 00003725 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   475 00003727 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   476 0000372A 7508                <1>     jnz .upperNybble
   477 0000372C B220                <1>     mov dl, " "
   478 0000372E B402                <1>     mov ah, 02h
   479 00003730 CD21                <1>     int 21h
   480 00003732 EB0E                <1>     jmp short .lowerNybble
   481                              <1> .upperNybble:
   482 00003734 50                  <1>     push rax
   483 00003735 C0EC04              <1>     shr ah, 4
   484 00003738 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   485 0000373B 88E2                <1>     mov dl, ah
   486 0000373D B402                <1>     mov ah, 02h ;Print DL
   487 0000373F CD21                <1>     int 21h
   488 00003741 58                  <1>     pop rax
   489                              <1> .lowerNybble:
   490 00003742 0430                <1>     add al, "0"
   491 00003744 88C2                <1>     mov dl, al
   492 00003746 B402                <1>     mov ah, 02h ;Print DL
   493 00003748 CD21                <1>     int 21h
   494 0000374A 5A                  <1>     pop rdx
   495 0000374B 58                  <1>     pop rax
   496                              <1>     return
    13                              <2> %%_ret:
    14 0000374C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   497                              <1> 
   498                              <1> setDrive:
   499                              <1> ;Input: dl = 0 based Drive number to set to
   500                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   501                              <1> ;AX trashed.
   502 0000374D B40E                <1>     mov ah, 0Eh ;Set drive to dl
   503 0000374F CD21                <1>     int 21h 
   504 00003751 E803000000          <1>     call getCurrentDrive
   505 00003756 38D0                <1>     cmp al, dl  ;Is this the same drive?
   506                              <1>     return
    13                              <2> %%_ret:
    14 00003758 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   507                              <1> getCurrentDrive:
   508                              <1> ;Returns the 0 based current drive in al
   509 00003759 B419                <1>     mov ah, 19h
   510 0000375B CD21                <1>     int 21h
   511                              <1>     return
    13                              <2> %%_ret:
    14 0000375D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   512                              <1> 
   513                              <1> strcpy:
   514                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   515                              <1> ;rsi -> Source
   516                              <1> ;rdi -> Destination
   517 0000375E 51                  <1>     push rcx
   518 0000375F 57                  <1>     push rdi
   519 00003760 4889F7              <1>     mov rdi, rsi
   520 00003763 E80F000000          <1>     call strlen ;Get the length of the string in rsi
   521 00003768 5F                  <1>     pop rdi
   522 00003769 F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   523 0000376B 59                  <1>     pop rcx
   524                              <1>     return
    13                              <2> %%_ret:
    14 0000376C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   525                              <1> 
   526                              <1> strcpy2:
   527                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   528                              <1> ;rsi -> Source
   529                              <1> ;rdi -> Destination
   530 0000376D 56                  <1>     push rsi
   531 0000376E 57                  <1>     push rdi
   532 0000376F E8EAFFFFFF          <1>     call strcpy 
   533 00003774 5F                  <1>     pop rdi
   534 00003775 5E                  <1>     pop rsi
   535                              <1>     return
    13                              <2> %%_ret:
    14 00003776 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   536                              <1> 
   537                              <1> strlen:
   538                              <1> ;Gets the length of a ASCIIZ string
   539                              <1> ;Input: rdi = Source buffer
   540                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   541 00003777 50                  <1>     push rax
   542 00003778 B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   543 0000377D CD2F                <1>     int 2fh
   544 0000377F 58                  <1>     pop rax
   545                              <1>     return
    13                              <2> %%_ret:
    14 00003780 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   546                              <1> 
   547                              <1> ucChar:
   548                              <1> ;Input: al = Char to uppercase
   549                              <1> ;Output: al = Adjusted char 
   550 00003781 53                  <1>     push rbx
   551 00003782 4889E3              <1>     mov rbx, rsp    ;Save the stack ptr
   552 00003785 50                  <1>     push rax    ;Push the char twice on the stack
   553 00003786 50                  <1>     push rax
   554 00003787 B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   555 0000378C CD2F                <1>     int 2fh         ;Returns the processed char in al
   556 0000378E 4889DC              <1>     mov rsp, rbx    ;Return the stack ptr to where it was
   557 00003791 5B                  <1>     pop rbx
   558                              <1>     return
    13                              <2> %%_ret:
    14 00003792 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   559                              <1> 
   560                              <1> skipDelimiters:
   561                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   562                              <1> ; command delimiters but a subset thereof. 
   563                              <1> ;These are the same across all codepages.
   564                              <1> ;Input: rsi must point to the start of the data string
   565                              <1> ;Output: rsi points to the first non-delimiter char
   566 00003793 50                  <1>     push rax
   567                              <1> .l1:
   568 00003794 AC                  <1>     lodsb
   569 00003795 E807000000          <1>     call isALdelimiter
   570 0000379A 74F8                <1>     jz .l1
   571                              <1> .exit:
   572 0000379C 58                  <1>     pop rax
   573 0000379D 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   574                              <1>     return
    13                              <2> %%_ret:
    14 000037A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   575                              <1> 
   576                              <1> isALdelimiter:
   577                              <1> ;Returns: ZF=NZ if al is not a command separator 
   578                              <1> ;         ZF=ZE if al is a command separator
   579 000037A1 3C20                <1>     cmp al, " "
   580                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000037A3 74(A0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   581 000037A5 3C3B                <1>     cmp al, ";"
   582                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000037A7 74(A0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   583 000037A9 3C3D                <1>     cmp al, "="
   584                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000037AB 74(A0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   585 000037AD 3C2C                <1>     cmp al, ","
   586                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000037AF 74(A0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   587 000037B1 3C09                <1>     cmp al, TAB
   588                              <1>     return
    13                              <2> %%_ret:
    14 000037B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   589                              <1> 
   590                              <1> clearCommandState:
   591                              <1> ;Clears the command state
   592 000037B4 488D3DEFC8FFFF      <1>     lea rdi, cmdStatePtr
   593 000037BB B906000000          <1>     mov ecx, cmdStateL
   594 000037C0 31C0                <1>     xor eax, eax
   595 000037C2 F3AA                <1>     rep stosb
   596                              <1>     return
    13                              <2> %%_ret:
    14 000037C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   597                              <1> 
   598                              <1> clearCommandLineState:
   599                              <1> ;Clears the command line state after a 0Dh encountered
   600 000037C5 488D3DD3C8FFFF      <1>     lea rdi, cmdLineStatePtr
   601 000037CC B911000000          <1>     mov ecx, cmdLineStateL
   602 000037D1 31C0                <1>     xor eax, eax
   603 000037D3 F3AA                <1>     rep stosb
   604 000037D5 C705C1C8FFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   604 000037DE FF                  <1>
   605 000037DF C705BDC8FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   605 000037E8 FF                  <1>
   606                              <1> ;Close all handles from 5->MAX
   607 000037E9 0FB70D37C8FFFF      <1>     movzx ecx, word [numHdls]
   608 000037F0 BB05000000          <1>     mov ebx, 5
   609                              <1> .lp:
   610 000037F5 B43E                <1>     mov ah, 3Eh ;File close
   611 000037F7 CD21                <1>     int 21h
   612 000037F9 FFC3                <1>     inc ebx ;Goto next file
   613 000037FB 39CB                <1>     cmp ebx, ecx
   614 000037FD 76F6                <1>     jbe .lp    ;Keep looping whilst below or equal
   615                              <1>     return
    13                              <2> %%_ret:
    14 000037FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   616                              <1> 
   617                              <1> asciiFilenameToFCB:
   618                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   619                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   620                              <1> ;Also doesn't check if chars are valid
   621                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   622                              <1> ;Name is space padded.
   623                              <1> ;Input: rsi = ASCII string buffer
   624                              <1> ;       rdi = FCB name buffer
   625                              <1> ;Output: al = Char that terminated the source string 
   626 00003800 53                  <1>     push rbx    
   627 00003801 57                  <1>     push rdi
   628 00003802 B90B000000          <1>     mov ecx, 11
   629 00003807 B020                <1>     mov al, " "
   630 00003809 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   631 0000380B 5F                  <1>     pop rdi
   632 0000380C 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   633                              <1>     ;Preprocess for Dir Searches
   634 0000380F 803E2E              <1>     cmp byte [rsi], "."
   635 00003812 7509                <1>     jne .processName
   636 00003814 A4                  <1>     movsb   ;Store the first dot
   637 00003815 803E2E              <1>     cmp byte [rsi], "."
   638 00003818 752C                <1>     jne .exitBadChar
   639 0000381A A4                  <1>     movsb
   640 0000381B EB29                <1>     jmp short .exitBadChar
   641                              <1> .processName:
   642 0000381D AC                  <1>     lodsb   ;Get the char in al
   643 0000381E 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   644 00003820 7426                <1>     jz .exit
   645 00003822 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   646 00003824 7407                <1>     je .extSpace
   647 00003826 3C2E                <1>     cmp al, "."
   648 00003828 740C                <1>     je .ext
   649 0000382A AA                  <1>     stosb   ;Store the char
   650 0000382B EBF0                <1>     jmp short .processName
   651                              <1> .extSpace:
   652                              <1> ;Now we scan for a period in the name
   653 0000382D AC                  <1>     lodsb   ;Get a char and increase rsi
   654 0000382E 84C0                <1>     test al, al
   655 00003830 7416                <1>     jz .exit
   656 00003832 3C2E                <1>     cmp al, "."     ;If al is not a period...
   657 00003834 75F7                <1>     jne .extSpace   ; keep searching
   658                              <1> .ext:
   659 00003836 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   660                              <1> .processExt:
   661 0000383A AC                  <1>     lodsb
   662 0000383B 84C0                <1>     test al, al
   663 0000383D 7409                <1>     jz .exit
   664 0000383F 3C20                <1>     cmp al, " "
   665 00003841 7405                <1>     je .exit
   666 00003843 AA                  <1>     stosb
   667 00003844 EBF4                <1>     jmp short .processExt
   668                              <1> .exitBadChar:
   669 00003846 30C0                <1>     xor al, al  ;Return a null terminator
   670                              <1> .exit:
   671 00003848 5B                  <1>     pop rbx
   672                              <1>     return
    13                              <2> %%_ret:
    14 00003849 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   673                              <1> 
   674                              <1> findLastPathComponant:
   675                              <1> ;Finds the last path componant of an ASCIIZ path string
   676                              <1> ;Input: rdi -> Head of the path to find last componant on
   677                              <1> ;Output: rdi -> Start of the last componant
   678 0000384A 50                  <1>     push rax
   679 0000384B 51                  <1>     push rcx
   680 0000384C 31C9                <1>     xor ecx, ecx
   681 0000384E FFC9                <1>     dec ecx
   682 00003850 31C0                <1>     xor eax, eax
   683 00003852 F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   684 00003854 F7D1                <1>     not ecx     ;This gets the count of chars  
   685 00003856 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   686 00003859 8A05CAC7FFFF        <1>     mov al, byte [pathSep]
   687 0000385F FD                  <1>     std
   688 00003860 F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   689 00003862 FC                  <1>     cld
   690 00003863 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   691 00003865 48FFC7              <1>     inc rdi     ;Point at pathsep
   692                              <1> .exit:
   693 00003868 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   694 0000386B 59                  <1>     pop rcx
   695 0000386C 58                  <1>     pop rax
   696                              <1>     return
    13                              <2> %%_ret:
    14 0000386D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   697                              <1> 
   698                              <1> FCBToAsciiz:
   699                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   700                              <1> ;Name is space padded too
   701                              <1> ;Input: rsi = FCB name buffer
   702                              <1> ;       rdi = ASCIIZ string buffer
   703 0000386E B908000000          <1>     mov ecx, 8
   704 00003873 F3A4                <1>     rep movsb   ;Move the name over
   705                              <1> .scanNameSpace:
   706 00003875 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   707 00003879 750D                <1>     jne .ext
   708 0000387B 48FFCF              <1>     dec rdi
   709 0000387E FFC1                <1>     inc ecx
   710 00003880 81F908000000        <1>     cmp ecx, 8
   711 00003886 72ED                <1>     jb .scanNameSpace
   712                              <1> .ext:
   713 00003888 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   714 0000388D 7506                <1>     jne .validExt
   715 0000388F 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   716 00003893 7415                <1>     je .exit
   717                              <1> .validExt:
   718 00003895 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   719 00003897 AA                  <1>     stosb
   720 00003898 B903000000          <1>     mov ecx, 3
   721 0000389D F3A4                <1>     rep movsb   ;Move the three extension chars over
   722                              <1> .scanExtSpace:
   723 0000389F 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   724 000038A3 7505                <1>     jne .exit
   725 000038A5 48FFCF              <1>     dec rdi
   726 000038A8 EBF5                <1>     jmp short .scanExtSpace
   727                              <1> .exit:
   728 000038AA 31C0                <1>     xor eax, eax
   729 000038AC AA                  <1>     stosb   ;Store a null at the end
   730                              <1>     return
    13                              <2> %%_ret:
    14 000038AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   731                              <1> 
   732                              <1> cpDelimOrCtrlStringToBufz:
   733                              <1> ;Copy a delimited or control char terminated string to a buffer
   734                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   735                              <1> ;       rdi -> Buffer to store null terminated string in
   736                              <1> ;Output: rsi -> First char past string end
   737                              <1> ;       rdi -> One char past null terminator on string buffer
   738 000038AE C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   739                              <1> .lp:
   740 000038B1 AC                  <1>     lodsb
   741 000038B2 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here. CR included!
   742 000038B4 760A                <1>     jbe .exit
   743 000038B6 E8E6FEFFFF          <1>     call isALdelimiter
   744 000038BB 7403                <1>     je .exit
   745 000038BD AA                  <1>     stosb
   746 000038BE EBF1                <1>     jmp short .lp
   747                              <1> .exit:
   748 000038C0 31C0                <1>     xor eax, eax
   749 000038C2 AA                  <1>     stosb   ;Store a null terminator
   750                              <1>     return
    13                              <2> %%_ret:
    14 000038C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   751                              <1> 
   752                              <1> 
   753                              <1> cpDelimPathToBufz:
   754                              <1> ;Copy a delimited path into buffer and null terminate.
   755                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   756                              <1> ;       rdi -> Buffer to store null terminated path in
   757                              <1> ;Output: rsi -> First char past pathname delimiter
   758                              <1> ;       rdi -> One char past null terminator on pathname buffer
   759 000038C4 53                  <1>     push rbx
   760 000038C5 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   761 000038C8 C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   762                              <1> .lp:
   763 000038CB AC                  <1>     lodsb   ;Get the char
   764 000038CC 3C0D                <1>     cmp al, CR
   765 000038CE 7412                <1>     je .gotRedirPath
   766 000038D0 E8CCFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   767 000038D5 740B                <1>     jz .gotRedirPath 
   768 000038D7 3A054DC7FFFF        <1>     cmp al, byte [switchChar]
   769 000038DD 7403                <1>     je .gotRedirPath
   770 000038DF AA                  <1>     stosb   ;Store this char and loop next char
   771 000038E0 EBE9                <1>     jmp short .lp
   772                              <1> .gotRedirPath:
   773 000038E2 50                  <1>     push rax    ;Save the char on stack
   774 000038E3 30C0                <1>     xor al, al  ;Get null terminator char
   775 000038E5 4829FB              <1>     sub rbx, rdi
   776 000038E8 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   777 000038EF 7412                <1>     je .notColon
   778 000038F1 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   779 000038F8 7409                <1>     je .notColon
   780 000038FA 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   781 000038FE 7503                <1>     jne .notColon
   782 00003900 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   783                              <1> .notColon:
   784 00003903 AA                  <1>     stosb   ;Store the null terminator for the redir path
   785 00003904 58                  <1>     pop rax ;Get back the char in al
   786 00003905 5B                  <1>     pop rbx
   787                              <1>     return
    13                              <2> %%_ret:
    14 00003906 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   788                              <1> 
   789                              <1> buildCommandPath:
   790                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   791 00003907 0FB6059DC7FFFF      <1>     movzx eax, byte [arg1Off]
   792 0000390E 4C8B05FAC6FFFF      <1>     mov r8, [pspPtr]
   793 00003915 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   794 0000391C 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   795                              <1> copyArgumentToSearchSpec:
   796                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   797                              <1> ; and null terminates
   798 0000391F 488D3DBBCBFFFF      <1>     lea rdi, searchSpec
   799 00003926 E899FFFFFF          <1>     call cpDelimPathToBufz
   800                              <1>     return
    13                              <2> %%_ret:
    14 0000392B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   801                              <1> 
   802                              <1> scanForWildcards:
   803                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   804                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   805 0000392C 50                  <1>     push rax
   806 0000392D 56                  <1>     push rsi
   807                              <1> .lp:
   808 0000392E AC                  <1>     lodsb
   809 0000392F 3C3F                <1>     cmp al, "?"
   810 00003931 740A                <1>     je .exit
   811 00003933 3C2A                <1>     cmp al, "*"
   812 00003935 7406                <1>     je .exit
   813 00003937 84C0                <1>     test al, al
   814 00003939 75F3                <1>     jnz .lp
   815 0000393B FEC0                <1>     inc al  ;This will clear the ZF
   816                              <1> .exit:
   817 0000393D 5E                  <1>     pop rsi
   818 0000393E 58                  <1>     pop rax
   819                              <1>     return
    13                              <2> %%_ret:
    14 0000393F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   820                              <1> 
   821                              <1> printDecimalWord:
   822                              <1> ;Takes qword in rax and print it's decimal representation
   823                              <1> ;Takes the qword in eax and prints its decimal representation
   824 00003940 31C9                <1>     xor ecx, ecx
   825 00003942 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   826 00003944 85C0                <1>     test eax, eax
   827 00003946 750C                <1>     jnz .notZero
   828 00003948 B930000000          <1>     mov ecx, "0"
   829 0000394D BD01000000          <1>     mov ebp, 1  ;Print one digit
   830 00003952 EB3E                <1>     jmp short .dpfb2
   831                              <1> .notZero:
   832 00003954 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   833 00003956 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   834                              <1> .dpfb0:
   835 0000395B FFC5                <1>     inc ebp
   836 0000395D 81FD08000000        <1>     cmp ebp, 8
   837 00003963 7206                <1>     jb .dpfb00
   838 00003965 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   839 00003969 EB04                <1>     jmp short .dpfb01
   840                              <1> .dpfb00:
   841 0000396B 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   842                              <1> .dpfb01:
   843 0000396F 31D2                <1>     xor edx, edx
   844 00003971 48F7F6              <1>     div rsi
   845 00003974 80C230              <1>     add dl, '0'
   846 00003977 80FA39              <1>     cmp dl, '9'
   847 0000397A 7603                <1>     jbe .dpfb1
   848 0000397C 80C207              <1>     add dl, 'A'-'0'-10
   849                              <1> .dpfb1:
   850 0000397F 81FD08000000        <1>     cmp ebp, 8
   851 00003985 7204                <1>     jb .dpfb10
   852 00003987 88D3                <1>     mov bl, dl ;Add the bottom bits
   853 00003989 EB02                <1>     jmp short .dpfb11
   854                              <1> .dpfb10:
   855 0000398B 88D1                <1>     mov cl, dl    ;Save remainder byte
   856                              <1> .dpfb11:
   857 0000398D 4885C0              <1>     test rax, rax
   858 00003990 75C9                <1>     jnz .dpfb0
   859                              <1> .dpfb2:
   860 00003992 81FD08000000        <1>     cmp ebp, 8
   861 00003998 7208                <1>     jb .dpfb20
   862 0000399A 88DA                <1>     mov dl, bl
   863 0000399C 48C1EB08            <1>     shr rbx, 8
   864 000039A0 EB06                <1>     jmp short .dpfb21
   865                              <1> .dpfb20:
   866 000039A2 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   867 000039A4 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   868                              <1> .dpfb21:
   869 000039A8 B402                <1>     mov ah, 02h
   870 000039AA CD21                <1>     int 21h
   871 000039AC FFCD                <1>     dec ebp
   872 000039AE 75E2                <1>     jnz .dpfb2
   873                              <1>     return
    13                              <2> %%_ret:
    14 000039B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   874                              <1> 
   875                              <1> getDecimalWord:
   876                              <1> ;Works on MAX A dword in eax
   877                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   878 000039B1 31C9                <1>     xor ecx, ecx
   879 000039B3 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   880 000039B5 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   881                              <1> .dpfb0:
   882 000039BA FFC5                <1>     inc ebp
   883 000039BC 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   884 000039C0 31D2                <1>     xor edx, edx
   885 000039C2 48F7F3              <1>     div rbx
   886 000039C5 80C230              <1>     add dl, '0'
   887 000039C8 80FA39              <1>     cmp dl, '9'
   888 000039CB 7603                <1>     jbe .dpfb1
   889 000039CD 80C207              <1>     add dl, 'A'-'0'-10
   890                              <1> .dpfb1:
   891 000039D0 88D1                <1>     mov cl, dl    ;Save remainder byte
   892 000039D2 4885C0              <1>     test rax, rax
   893 000039D5 75E3                <1>     jnz .dpfb0
   894                              <1>     return
    13                              <2> %%_ret:
    14 000039D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   895                              <1> 
   896                              <1> freezePC:
   897 000039D8 488D15CFD4FFFF      <1>     lea rdx, memBad1
   898 000039DF B409                <1>     mov ah, 09h
   899 000039E1 CD21                <1>     int 21h
   900                              <1> .altEP:
   901 000039E3 488D15EDD4FFFF      <1>     lea rdx, memBad3
   902 000039EA B409                <1>     mov ah, 09h
   903 000039EC CD21                <1>     int 21h
   904                              <1> .lp:
   905 000039EE F390                <1>     pause
   906 000039F0 F4                  <1>     hlt
   907 000039F1 EBFB                <1>     jmp short .lp
   908                              <1> 
   909                              <1> setDTA:
   910 000039F3 50                  <1>     push rax
   911 000039F4 52                  <1>     push rdx
   912 000039F5 488D156BC7FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   913 000039FC B8001A0000          <1>     mov eax, 1A00h
   914 00003A01 CD21                <1>     int 21h
   915 00003A03 5A                  <1>     pop rdx
   916 00003A04 58                  <1>     pop rax
   917                              <1>     return
    13                              <2> %%_ret:
    14 00003A05 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   918                              <1> 
   919                              <1> getDTA:
   920 00003A06 488D155AC7FFFF      <1>     lea rdx, cmdFFBlock
   921                              <1>     return
    13                              <2> %%_ret:
    14 00003A0D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   922                              <1> 
   923                              <1> ;-------------------------------
   924                              <1> ; Environment utility functions
   925                              <1> ;-------------------------------
   926                              <1> 
   927                              <1> cmpEnvVar:
   928                              <1> ;Checks that we have found the environment variable we are looking for.
   929                              <1> ;Input: rsi -> Environment var to verify the name of
   930                              <1> ;       rdi -> Environment var name to compare against
   931                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
   932 00003A0E 56                  <1>     push rsi
   933 00003A0F 57                  <1>     push rdi
   934 00003A10 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs
   935                              <1> .lp:
   936 00003A13 AC                  <1>     lodsb               ;Pick up from user string
   937 00003A14 E868FDFFFF          <1>     call ucChar         ;Upper case it!
   938 00003A19 3807                <1>     cmp byte [rdi], al  
   939 00003A1B 7509                <1>     jne .exit
   940 00003A1D 3C3D                <1>     cmp al, "="         ;Are we at the end?
   941 00003A1F 7405                <1>     je .exit
   942 00003A21 48FFC7              <1>     inc rdi
   943 00003A24 EBED                <1>     jmp short .lp
   944                              <1> .exit:
   945 00003A26 5F                  <1>     pop rdi
   946 00003A27 5E                  <1>     pop rsi
   947                              <1>     return
    13                              <2> %%_ret:
    14 00003A28 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   948                              <1> 
   949                              <1> checkEnvGoodAndGet:
   950                              <1> ;Gets the env ptr and checks that it is double null terminated.
   951                              <1> ;Output:
   952                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
   953                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
   954                              <1> ;           rsi -> Environment pointer
   955 00003A29 50                  <1>     push rax
   956 00003A2A 51                  <1>     push rcx
   957 00003A2B 57                  <1>     push rdi
   958 00003A2C 4150                <1>     push r8
   959 00003A2E 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
   960 00003A32 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
   961 00003A35 741A                <1>     jz .badExit
   962 00003A37 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
   963 00003A3A C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
   964                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
   965 00003A3D 31C0                <1>     xor eax, eax
   966                              <1> .pathNulScan:
   967 00003A3F F2AE                <1>     repne scasb
   968 00003A41 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
   969 00003A43 740C                <1>     jz .badExit
   970 00003A45 3807                <1>     cmp byte [rdi], al  ;Is char two null?
   971 00003A47 75F6                <1>     jne .pathNulScan    ;If not, keep searching
   972 00003A49 31C0                <1>     xor eax, eax
   973 00003A4B FFC0                <1>     inc eax ;Clear the ZF
   974 00003A4D 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
   975                              <1> .badExit:
   976 00003A51 4158                <1>     pop r8
   977 00003A53 5F                  <1>     pop rdi
   978 00003A54 59                  <1>     pop rcx
   979 00003A55 58                  <1>     pop rax
   980                              <1>     return
    13                              <2> %%_ret:
    14 00003A56 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   981                              <1> 
   982                              <1> 
   983                              <1> findEnvSpace:
   984                              <1> ;Searches the environment for space, returns a pointer to the start of the 
   985                              <1> ; free space in the pointer and a count of free space in the environment.
   986                              <1> ;If count is zero, pointer is not to be used.
   987                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
   988 00003A57 31C9                <1>     xor ecx, ecx
   989 00003A59 31C0                <1>     xor eax, eax    ;Clear eax too
   990 00003A5B 51                  <1>     push rcx
   991 00003A5C E8C8FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
   992 00003A61 59                  <1>     pop rcx
   993                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003A62 74(56)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   994 00003A64 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
   995 00003A68 FFC9                <1>     dec ecx ;Make into a large counter
   996 00003A6A 4889F7              <1>     mov rdi, rsi    
   997                              <1> .endsearch:
   998 00003A6D F2AE                <1>     repne scasb ;Scan
   999 00003A6F 803F00              <1>     cmp byte [rdi], 0
  1000 00003A72 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
  1001                              <1>     ;Here we are at the end of the environment
  1002 00003A74 F7D9                <1>     neg ecx
  1003 00003A76 FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
  1004 00003A78 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
  1005 00003A7B 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
  1006 00003A7E 29C8                <1>     sub eax, ecx
  1007 00003A80 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
  1008                              <1>     return
    13                              <2> %%_ret:
    14 00003A82 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1009                              <1> 
  1010                              <1> searchForEnvVar:
  1011                              <1> ;Gets the environment, and scans it for a string with the var specified.
  1012                              <1> ;Input: rdi -> Var name to look for.
  1013                              <1> ;Returns: CF=NC: rsi -> Env var in env.
  1014 00003A83 57                  <1>     push rdi
  1015 00003A84 51                  <1>     push rcx
  1016 00003A85 52                  <1>     push rdx
  1017 00003A86 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1018 00003A8A 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
  1019                              <1> .varLp:
  1020 00003A8D 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
  1021 00003A90 E879FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1022 00003A95 7416                <1>     je .varFound
  1023 00003A97 31C0                <1>     xor eax, eax        ;Search for a null
  1024 00003A99 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1025 00003A9C B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1026 00003AA1 F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1027 00003AA3 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1028 00003AA5 7405                <1>     je .varNotFound     ;If second null, no more env to search!
  1029 00003AA7 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1030 00003AAA EBE1                <1>     jmp short .varLp    ;And scan again!
  1031                              <1> .varNotFound:
  1032 00003AAC F9                  <1>     stc
  1033                              <1> .varFound:
  1034 00003AAD 59                  <1>     pop rcx
  1035 00003AAE 5A                  <1>     pop rdx
  1036 00003AAF 5F                  <1>     pop rdi
  1037                              <1>     return
    13                              <2> %%_ret:
    14 00003AB0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1038                              <1> 
  1039                              <1> envFree:
  1040                              <1> ;Frees a variable from the environment, pulls the strings behind it up
  1041                              <1> ; zeros the rest of the environment, and returns a pointer to the first
  1042                              <1> ; free byte of the environment!
  1043                              <1> ;Input: rsi -> Variable to free.
  1044                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
  1045                              <1> ;        ecx = Number of free bytes in env
  1046 00003AB1 4889F7              <1>     mov rdi, rsi
  1047 00003AB4 31C0                <1>     xor eax, eax
  1048                              <1> .freeLp:
  1049 00003AB6 803F00              <1>     cmp byte [rdi], 0
  1050 00003AB9 7403                <1>     je .exitLp
  1051 00003ABB AA                  <1>     stosb
  1052 00003ABC EBF8                <1>     jmp short .freeLp
  1053                              <1> .exitLp:
  1054                              <1> ;rdi points to the terminating null of the var we just deleted
  1055                              <1> ;rsi points to the start of the free space
  1056 00003ABE 4887F7              <1>     xchg rsi, rdi   ;Swap em!
  1057 00003AC1 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
  1058 00003AC6 7504                <1>     jne .prepPullup
  1059 00003AC8 31C0                <1>     xor eax, eax
  1060 00003ACA EB0E                <1>     jmp short .cleanEnv
  1061                              <1> .prepPullup:
  1062 00003ACC 48FFC6              <1>     inc rsi         ;Go past the terminating null!
  1063                              <1> .pullUp:
  1064 00003ACF AC                  <1>     lodsb
  1065 00003AD0 AA                  <1>     stosb
  1066 00003AD1 84C0                <1>     test al, al ;Did we pick up a zero
  1067 00003AD3 75FA                <1>     jne .pullUp ;If not, keep copying
  1068 00003AD5 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
  1069 00003AD8 75F5                <1>     jne .pullUp
  1070                              <1> ;We are at the end of the copy!
  1071                              <1> .cleanEnv:
  1072 00003ADA AA                  <1>     stosb   ;Store the famous second null
  1073 00003ADB 48FFCF              <1>     dec rdi ;without incrementing it!!
  1074 00003ADE E807000000          <1>     call getFreeSpace
  1075 00003AE3 31C0                <1>     xor eax, eax
  1076 00003AE5 51                  <1>     push rcx
  1077 00003AE6 F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
  1078 00003AE8 59                  <1>     pop rcx
  1079                              <1>     return
    13                              <2> %%_ret:
    14 00003AE9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1080                              <1> 
  1081                              <1> getFreeSpace:
  1082                              <1> ;Output: ecx = Number of free bytes in the environment block
  1083 00003AEA 56                  <1>     push rsi
  1084 00003AEB 57                  <1>     push rdi
  1085 00003AEC E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
  1086 00003AF1 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1087 00003AF5 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
  1088 00003AF8 E805000000          <1>     call getEnvSize ;Get total block size
  1089 00003AFD 29F9                <1>     sub ecx, edi    ;Get difference!
  1090 00003AFF 5F                  <1>     pop rdi
  1091 00003B00 5E                  <1>     pop rsi
  1092                              <1>     return
    13                              <2> %%_ret:
    14 00003B01 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1093                              <1> 
  1094                              <1> getEnvSize:
  1095                              <1> ;Gets the number of bytes in the environment allocation
  1096                              <1> ;Output: ecx = Number of bytes in the environment!
  1097 00003B02 53                  <1>     push rbx
  1098 00003B03 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
  1099 00003B07 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
  1100 00003B0A C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
  1101 00003B0D 5B                  <1>     pop rbx
  1102                              <1>     return
    13                              <2> %%_ret:
    14 00003B0E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1103                              <1> 
  1104                              <1> getPtrToEndOfEnv:
  1105                              <1> ;Gets ptr to end of the environment
  1106                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
  1107 00003B0F 50                  <1>     push rax
  1108 00003B10 51                  <1>     push rcx
  1109 00003B11 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
  1110 00003B15 31C0                <1>     xor eax, eax
  1111 00003B17 31C9                <1>     xor ecx, ecx
  1112 00003B19 FFC9                <1>     dec ecx
  1113                              <1> .lp:
  1114 00003B1B F2AE                <1>     repne scasb
  1115 00003B1D 3807                <1>     cmp byte [rdi], al
  1116 00003B1F 75FA                <1>     jne .lp
  1117 00003B21 59                  <1>     pop rcx
  1118 00003B22 58                  <1>     pop rax
  1119                              <1>     return
    13                              <2> %%_ret:
    14 00003B23 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1120                              <1> 
  1121                              <1> growEnvBlock:
  1122                              <1> ;Attempts to grow the environment to store the new string. Will clean the
  1123                              <1> ; newly allocated 160 byte block of the environment.
  1124                              <1> ;Returns:   CF=NC - Environment grown ok!
  1125                              <1> ;           CF=CY & ZF=ZE - Environment at max size
  1126                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
  1127 00003B24 50                  <1>     push rax
  1128 00003B25 53                  <1>     push rbx
  1129 00003B26 51                  <1>     push rcx
  1130 00003B27 56                  <1>     push rsi
  1131 00003B28 57                  <1>     push rdi
  1132 00003B29 E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
  1133 00003B2E E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
  1134 00003B33 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1135 00003B37 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
  1136 00003B3A 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
  1137 00003B40 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
  1138 00003B46 7321                <1>     jae .tooLarge
  1139                              <1>     ;Here ZF must be NZ.
  1140 00003B48 4150                <1>     push r8
  1141 00003B4A 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
  1142 00003B4E B8004A0000          <1>     mov eax, 4A00h
  1143 00003B53 CD21                <1>     int 21h
  1144 00003B55 4158                <1>     pop r8
  1145 00003B57 720A                <1>     jc .exit
  1146                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1147                              <1>     ; so we add 160 zeros to the count of bytes
  1148 00003B59 81C1A0000000        <1>     add ecx, 0A0h
  1149 00003B5F 31C0                <1>     xor eax, eax
  1150 00003B61 F3AA                <1>     rep stosb
  1151                              <1> .exit:
  1152 00003B63 5F                  <1>     pop rdi
  1153 00003B64 5E                  <1>     pop rsi
  1154 00003B65 59                  <1>     pop rcx
  1155 00003B66 5B                  <1>     pop rbx
  1156 00003B67 58                  <1>     pop rax
  1157                              <1>     return
    13                              <2> %%_ret:
    14 00003B68 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1158                              <1> .tooLarge:
  1159 00003B69 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1160 00003B6C F9                  <1>     stc             ;Set CF
  1161 00003B6D EBF4                <1>     jmp short .exit
    19                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00003B6F 53                  <1>     push rbx
    25 00003B70 51                  <1>     push rcx
    26 00003B71 52                  <1>     push rdx
    27 00003B72 57                  <1>     push rdi
    28 00003B73 56                  <1>     push rsi
    29 00003B74 FC                  <1>     cld         ;Make String ops go forward
    30                              <1> 
    31 00003B75 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00003B78 488D15D2CDFFFF      <1>     lea rdx, crlf
    33 00003B7F E8C6F9FFFF          <1>     call printString
    34                              <1> 
    35 00003B84 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    36 00003B8A B90C000000          <1>     mov ecx, 0Ch
    37 00003B8F 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    38 00003B91 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    39 00003B94 480FB7FF            <1>     movzx rdi, di
    40 00003B98 4889FA              <1>     mov rdx, rdi    ;Copy error code
    41 00003B9B 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    42 00003B9F 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    43 00003BA2 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    44 00003BA5 488D152D010000      <1>     lea rdx, qword [.errorMsgTable]
    45 00003BAC 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    46 00003BB0 E895F9FFFF          <1>     call printString     ;Call DOS to print first part of message
    47                              <1> 
    48 00003BB5 488D150E020000      <1>     lea rdx, qword [.readmsg]
    49 00003BBC 488D3D16020000      <1>     lea rdi, qword [.writemsg]
    50 00003BC3 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    51 00003BC6 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    52 00003BCA E87BF9FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
    53                              <1> 
    54 00003BCF F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    55 00003BD2 0F85E7000000        <1>     jnz .charError
    56                              <1> ;Disk error continues here
    57 00003BD8 488D15E4010000      <1>     lea rdx, qword [.drive] ;Drive message
    58 00003BDF E866F9FFFF          <1>     call printString
    59 00003BE4 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    60 00003BE6 80C241              <1>     add dl, "A" ;Add ASCII code
    61 00003BE9 B402                <1>     mov ah, 02h ;Print char in dl
    62 00003BEB CD21                <1>     int 21h
    63                              <1> .userInput:
    64 00003BED E851F9FFFF          <1>     call printCRLF  ;Print new line
    65                              <1> ;Abort, Retry, Ignore, Fail is word order
    66                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    67                              <1> .userAbort:
    68                              <1> ;Abort is always an option
    69 00003BF2 488D15EF010000      <1>     lea rdx, qword [.abortmsg]
    70 00003BF9 E84CF9FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
    71                              <1> .userRetry:
    72 00003BFE F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    73 00003C01 7418                <1>     jz .userIgnore    ;If clear, dont print message
    74 00003C03 488D15F6010000      <1>     lea rdx, qword [.betweenMsg]
    75 00003C0A E83BF9FFFF          <1>     call printString
    76 00003C0F 488D15DF010000      <1>     lea rdx, qword [.retrymsg]
    77 00003C16 E82FF9FFFF          <1>     call printString
    78                              <1> .userIgnore:
    79 00003C1B F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    80 00003C1E 7418                <1>     jz .userFail
    81 00003C20 488D15D9010000      <1>     lea rdx, qword [.betweenMsg]
    82 00003C27 E81EF9FFFF          <1>     call printString
    83 00003C2C 488D15BB010000      <1>     lea rdx, qword [.ignoremsg]
    84 00003C33 E812F9FFFF          <1>     call printString
    85                              <1> .userFail:
    86 00003C38 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    87 00003C3B 7418                <1>     jz .userMsgEnd
    88 00003C3D 488D15BC010000      <1>     lea rdx, qword [.betweenMsg]
    89 00003C44 E801F9FFFF          <1>     call printString
    90 00003C49 488D15AB010000      <1>     lea rdx, qword [.failmsg]
    91 00003C50 E8F5F8FFFF          <1>     call printString
    92                              <1> .userMsgEnd:
    93 00003C55 488D15A7010000      <1>     lea rdx, qword [.endMsg]
    94 00003C5C E8E9F8FFFF          <1>     call printString
    95                              <1> ;Get user input now 
    96 00003C61 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
    97 00003C63 488D3D9C010000      <1>     lea rdi, qword [.responses] ;Go to start of string
    98 00003C6A B401                <1>     mov ah, 01h ;STDIN without Console Echo
    99 00003C6C CD21                <1>     int 21h ;Get char in al
   100 00003C6E 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   101 00003C70 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   102 00003C72 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   103                              <1> .uip1:
   104 00003C74 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   105 00003C75 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   106 00003C77 FFC1                <1>     inc ecx
   107 00003C79 81F904000000        <1>     cmp ecx, 4
   108 00003C7F 75F3                <1>     jne .uip1
   109 00003C81 E967FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   110                              <1> .validInput:
   111 00003C86 E8B8F8FFFF          <1>     call printCRLF   ;Note the input was accepted
   112 00003C8B 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   113                              <1> ;Now check if the input is permitted
   114 00003C8D 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   115 00003C8F 7427                <1>     je .cehExit
   116 00003C91 84C0                <1>     test al, al ;Check if 0 => Ignore
   117 00003C93 740F                <1>     je .viIgnore
   118 00003C95 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   119 00003C97 7416                <1>     je .viRetry
   120                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   121 00003C99 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   122 00003C9C 0F844BFFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   123 00003CA2 EB14                <1>     jmp short .cehExit
   124                              <1> .viIgnore:
   125 00003CA4 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   126 00003CA7 0F8440FFFFFF        <1>     jz .userInput
   127 00003CAD EB09                <1>     jmp short .cehExit
   128                              <1> .viRetry:
   129 00003CAF F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   130 00003CB2 0F8435FFFFFF        <1>     jz .userInput
   131                              <1> .cehExit:
   132 00003CB8 5E                  <1>     pop rsi
   133 00003CB9 5F                  <1>     pop rdi
   134 00003CBA 5A                  <1>     pop rdx
   135 00003CBB 59                  <1>     pop rcx
   136 00003CBC 5B                  <1>     pop rbx
   137 00003CBD 48CF                <1>     iretq
   138                              <1> .charError:
   139 00003CBF B908000000          <1>     mov ecx, 8  ;8 chars in device name
   140 00003CC4 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   141                              <1> .ce1:
   142 00003CCB AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   143 00003CCC 88C2                <1>     mov dl, al  ;Move char into dl
   144 00003CCE B402                <1>     mov ah, 02h
   145 00003CD0 CD21                <1>     int 21h ;Print char
   146 00003CD2 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   147 00003CD4 E914FFFFFF          <1>     jmp .userInput
   148                              <1> 
   149                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   150 00003CD9 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   150 00003CE2 746563742024202020  <1>
   151 00003CEB 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   151 00003CF4 6E6974202420202020  <1>
   152 00003CFD 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   152 00003D06 202420202020202020  <1>
   153 00003D0F 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   153 00003D18 6F6D6D616E64202420  <1>
   154 00003D21 446174612024202020- <1>             db "Data $            "       ;Error 4
   154 00003D2A 202020202020202020  <1>
   155 00003D33 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   155 00003D3C 737420242020202020  <1>
   156 00003D45 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   156 00003D4E 202020202020202020  <1>
   157 00003D57 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   157 00003D60 656469612024202020  <1>
   158 00003D69 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   158 00003D72 7420466F756E642024  <1>
   159 00003D7B 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   159 00003D84 706572202420202020  <1>
   160 00003D8D 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   160 00003D96 6C7420242020202020  <1>
   161 00003D9F 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   161 00003DA8 742024202020202020  <1>
   162 00003DB1 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   162 00003DBA 61696C757265202420  <1>
   163                              <1> 
   164 00003DC3 64726976652024      <1> .drive      db "drive $"
   165 00003DCA 6572726F7220726561- <1> .readmsg    db "error reading $"
   165 00003DD3 64696E672024        <1>
   166 00003DD9 6572726F7220777269- <1> .writemsg   db "error writing $"
   166 00003DE2 74696E672024        <1>
   167 00003DE8 41626F727424        <1> .abortmsg   db "Abort$" 
   168 00003DEE 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   169 00003DF5 526574727924        <1> .retrymsg   db "Retry$"
   170 00003DFB 4661696C24          <1> .failmsg    db "Fail$"
   171 00003E00 2C2024              <1> .betweenMsg db ", $"
   172 00003E03 3F2024              <1> .endMsg     db "? $"
   173 00003E06 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   174                              <1> 
   175                              <1> int23h:
   176 00003E0A F6051AC2FFFFFF      <1>     test byte [permaSwitch], -1
   177 00003E11 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   178                              <1>     ;Else, we juggle parent PSP's
   179 00003E13 50                  <1>     push rax
   180 00003E14 53                  <1>     push rbx
   181 00003E15 488B05FBC1FFFF      <1>     mov rax, qword [realParent]
   182 00003E1C 488B1DECC1FFFF      <1>     mov rbx, qword [pspPtr]
   183 00003E23 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   184 00003E27 5B                  <1>     pop rbx
   185 00003E28 58                  <1>     pop rax
   186                              <1> .exit:
   187 00003E29 F9                  <1>     stc     ;Set CF to kill the task
   188 00003E2A C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    20                                  endOfAlloc: ;End of alloc
    21                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    22                                  Segment transient align=1 follows=.data
    23                                  ;This segment always gets ejected post load
    24                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D1508020000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    15 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    16 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    17 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    18                              <1> ;Setup Int 22h, Int 23h and Int 24h
    19 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    20 0000002F 488905(2C000000)    <1>     mov qword [parentInt22], rax
    21                              <1> 
    22 00000036 488D15(6F3B0000)    <1>     lea rdx, critErrorHandler
    23 0000003D 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    24 00000041 B824250000          <1>     mov eax, 2524h
    25 00000046 CD21                <1>     int 21h
    26 00000048 488D15(0A3E0000)    <1>     lea rdx, int23h
    27 0000004F 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    28 00000053 B823250000          <1>     mov eax, 2523h
    29 00000058 CD21                <1>     int 21h
    30 0000005A 488D15(702E0000)    <1>     lea rdx, launchChild.appRet
    31 00000061 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    32 00000065 B822250000          <1>     mov eax, 2522h
    33 0000006A CD21                <1>     int 21h
    34                              <1> ;Get a pointer to DOS Sysvars
    35 0000006C B452                <1>     mov ah, 52h ;Get sysvars
    36 0000006E CD21                <1>     int 21h
    37 00000070 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    38                              <1> ;Call for simple internationalisation data
    39 00000077 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    40 0000007C CD21                <1>     int 21h
    41 0000007E 3CFF                <1>     cmp al, -1
    42 00000080 7412                <1>     je .skipSwitch
    43 00000082 8815(2A000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    44 00000088 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    45 0000008B 7507                <1>     jne .skipSwitch
    46 0000008D C605(29000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    47                              <1> .skipSwitch:
    48 00000094 B800380000          <1>     mov eax, 3800h  ;Get current country data
    49 00000099 488D15(34000000)    <1>     lea rdx, ctryData
    50 000000A0 CD21                <1>     int 21h ;Write the data to the internal country table
    51                              <1> ;Now determine if this is the master copy of COMMAND.COM
    52                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    53 000000A2 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    54 000000A7 CD21                <1>     int 21h
    55 000000A9 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    56 000000AC B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    57 000000B1 CD21                <1>     int 21h
    58 000000B3 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    59 000000B6 7574                <1>     jne .skipMaster
    60                              <1> ;Ok so we are master command.com
    61                              <1> ;Now make myself the real parent
    62 000000B8 C605(2B000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    63 000000BF 4C8905(17000000)    <1>     mov qword [realParent], r8
    64                              <1> ;Set current Drive in COMSPEC
    65 000000C6 B800190000          <1>     mov eax, 1900h ;Get current Drive
    66 000000CB CD21                <1>     int 21h
    67 000000CD 0441                <1>     add al, "A"
    68 000000CF 8805(570F0000)      <1>     mov byte [comspecEvar.cspec], al
    69                              <1> ;Set Int 2Eh up
    70 000000D5 488D15(C3180000)    <1>     lea rdx, int2Eh
    71 000000DC B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    72 000000E1 CD21                <1>     int 21h
    73                              <1> ;Now, open and parse AUTOEXEC.BAT. Build new Master Environment here.
    74                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    75 000000E3 BB0A000000          <1>     mov ebx, 10 ;Allocate 160 bytes
    76 000000E8 B800480000          <1>     mov eax, 4800h
    77 000000ED CD21                <1>     int 21h
    78 000000EF 0F821EFFFFFF        <1>     jc .exitBad
    79                              <1> ;Set master environment as mine
    80 000000F5 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    81 000000F9 488D35(4F0F0000)    <1>     lea rsi, masterEnv
    82 00000100 4889C7              <1>     mov rdi, rax
    83 00000103 B91E000000          <1>     mov ecx, menv_len
    84 00000108 F3A4                <1>     rep movsb   ;Copy the chars over!
    85                              <1> 
    86 0000010A 488D15(51090000)    <1>     lea rdx, crlf
    87 00000111 B409                <1>     mov ah, 09h
    88 00000113 CD21                <1>     int 21h
    89 00000115 E8(AE220000)        <1>     call time
    90 0000011A E8(49220000)        <1>     call date
    91 0000011F 488D15(51090000)    <1>     lea rdx, crlf
    92 00000126 B409                <1>     mov ah, 09h
    93 00000128 CD21                <1>     int 21h
    94 0000012A EB2E                <1>     jmp short .printInit
    95                              <1> .skipMaster:    
    96                              <1> ;We now search for the master environment!!
    97                              <1>     ;Walk the parentPSP chain until we find a PSP which is its own
    98                              <1>     ; parent. This is the previous master command interpreter! This means
    99                              <1>     ; that non-master COMMAND.COM instances are not their own parents! We 
   100                              <1>     ; then set our environment ptr in the PSP to the master environment.
   101 0000012C 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
   102 00000133 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
   103 0000013B 0FB605(2A000000)    <1>     movzx eax, byte [switchChar]
   104 00000142 F2AE                <1>     repne scasb
   105 00000144 67E313              <1>     jecxz .printInit
   106 00000147 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
   107 0000014A E8(81370000)        <1>     call ucChar
   108 0000014F 3C50                <1>     cmp al, "P" ;Is it permanent switch?
   109 00000151 7507                <1>     jne .printInit
   110 00000153 C605(2B000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
   111                              <1> .printInit:
   112 0000015A 488D1D(2D3E0000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
   113                              <1> ;Finish by printing INIT string.
   114 00000161 53                  <1>     push rbx
   115 00000162 488D153A000000      <1>     lea rdx, initString
   116 00000169 B409                <1>     mov ah, 09h
   117 0000016B CD21                <1>     int 21h ;Print init string
   118 0000016D E8(002B0000)        <1>     call version.printVersionNumber
   119 00000172 488D1560000000      <1>     lea rdx, initString2
   120 00000179 B409                <1>     mov ah, 09h
   121 0000017B CD21                <1>     int 21h ;Print init string
   122 0000017D 5B                  <1>     pop rbx
   123                              <1>     ;Now we add the stack to the alloc and paragraph align
   124 0000017E 4881C340060000      <1>     add rbx, stackSize
   125 00000185 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   126 0000018C 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   127 00000190 48C1E304            <1>     shl rbx, 4
   128 00000194 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   129 00000197 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   130 0000019E E9(6D0F0000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   131                              <1> ;Loader Data here
   132                              <1> initString: 
   133 000001A3 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   133 000001AC 66696320436F6D7075- <1>
   133 000001B5 746572205265736561- <1>
   133 000001BE 726368285229205343- <1>
   133 000001C7 502F444F5328522920- <1>
   133 000001D0 56657273696F6E2024  <1>
   134                              <1> initString2:
   135 000001D9 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",CR,LF,"$"
   135 000001E2 202020284329436F70- <1>
   135 000001EB 797269676874205363- <1>
   135 000001F4 69656E746966696320- <1>
   135 000001FD 436F6D707574657220- <1>
   135 00000206 526573656172636820- <1>
   135 0000020F 323032342E0D0A24    <1>
   136 00000217 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   136 00000220 20444F532076657273- <1>
   136 00000229 696F6E0D0A24        <1>
    25                                  
    26                                  stackSize equ 200*8    ;200 QWORD stack
    26          ------------------       info: assembly required 1+4+2 passes

