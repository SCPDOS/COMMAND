     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (41h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> netFCBShare     equ 70h
   160                              <1> noInherit       equ 80h
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> 
   163                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 24h on disk full.
   164                              <1> ;Buffering on writes
   165                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   167                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1> readOnlyFile    equ 1h
   170                              <1> hiddenFile      equ 2h
   171                              <1> systemFile      equ 4h
   172                              <1> volumeLabel     equ 8h
   173                              <1> directoryFile   equ 10h ;Directory entry
   174                              <1> archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1> charDevFastOut  equ 10h ;If set, device supports Int 29h
   182                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   183                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   185                              <1> devCharDev      equ 80h ;If set, it is a char device!
   186                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   190                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1>  
   192                              <1> ;------------------------------------------------------------------------;
   193                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   194                              <1> ; to an internal buffer, and then copying it to the specified location
   195                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   196                              <1> ; another request for the same sector from the same device is made, so 
   197                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   198                              <1> ; size, selected according to the largest detected sector size during 
   199                              <1> ; the initial loadup.
   200                              <1> ;
   201                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   202                              <1> ;
   203                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   204                              <1> ;------------------------------------------------------------------------;
   205                              <1> 
   206                              <1> struc bufferHdr
   207 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   208 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   209 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   210 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   211 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   212 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   213 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   214 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   215 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   216                              <1>     .dataarea:             ;Points to the start of the data area
   217                              <1> endstruc
   218                              <1> ;Buffer Flag equates
   219                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   220                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   221                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   222                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   223                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   224                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   225                              <1> ;Note! A buffer is marked as referenced only when the application 
   226                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   227                              <1> ;------------------------------------------------------------------------;
   228                              <1> ; Memory control block for each memory arena
   229                              <1> ;------------------------------------------------------------------------;
   230                              <1> struc mcb
   231 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   232 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   233 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   234 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   235                              <1>     .program:
   236                              <1> endstruc
   237                              <1> ;MCB equates
   238                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   239                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   240                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   241                              <1> mcbMarkCtn      equ "M"
   242                              <1> mcbMarkEnd      equ "Z"
   243                              <1> 
   244                              <1> memFirstFit     equ 0   ;First free block goes to application
   245                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   246                              <1> memLastFit      equ 2   ;Last free block goes to application
   247                              <1> 
   248                              <1> ;Owner = Para aligned address => Owning application PSP
   249                              <1> ;...To consider...
   250                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   251                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   252                              <1> ;------------------------------------------------------------------------;
   253                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   254                              <1> ; following order, thus allowing for return values to be placed in the 
   255                              <1> ; registers by accessing the caller register stack frame.
   256                              <1> ;------------------------------------------------------------------------;
   257                              <1> struc callerFrame
   258 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   259 00000008 ????????????????    <1>     .rbx    resq 1    
   260 00000010 ????????????????    <1>     .rcx    resq 1
   261 00000018 ????????????????    <1>     .rdx    resq 1
   262 00000020 ????????????????    <1>     .rsi    resq 1
   263 00000028 ????????????????    <1>     .rdi    resq 1
   264 00000030 ????????????????    <1>     .rbp    resq 1
   265 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   266 00000040 ????????????????    <1>     .r9     resq 1
   267                              <1> ;Pushed by Processor when invoked via Interrupt
   268 00000048 ????????????????    <1>     .rip    resq 1
   269 00000050 ????????????????    <1>     .cs     resq 1
   270 00000058 ????????????????    <1>     .flags  resq 1
   271                              <1> endstruc
   272                              <1> 
   273                              <1> struc dpl
   274                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   275                              <1> ; server calls
   276 00000000 ????????????????    <1>     .rax    resq 1
   277 00000008 ????????????????    <1>     .rbx    resq 1
   278 00000010 ????????????????    <1>     .rcx    resq 1
   279 00000018 ????????????????    <1>     .rdx    resq 1
   280 00000020 ????????????????    <1>     .rsi    resq 1
   281 00000028 ????????????????    <1>     .rdi    resq 1
   282 00000030 ????????????????    <1>     .r8     resq 1
   283 00000038 ????????????????    <1>     .r9     resq 1
   284 00000040 ????????????????    <1>     .align  resq 1
   285 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   286 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   287                              <1> endstruc
   288                              <1> 
   289                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   290 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   291 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   292 00000010 ????????????????    <1>     .newSFTVal      resq 1
   293 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   294 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   295 00000028 ????????????????    <1>     .newLastdrive   resq 1
   296 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   297 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   298 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   299 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   300 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   301 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   302 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc filename
   306                              <1> ;8.3 File name struct
   307 00000000 ????????????????    <1>     .fName  resb 8
   308 00000008 ??????              <1>     .fExt   resb 3
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   312 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   313 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   314 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   315 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   316 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   317 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   318 00000016 ????                <1>     .fileTime   resw 1  ;File time
   319 00000018 ????                <1>     .fileDate   resw 1  ;File date
   320 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   321 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc psp
   325 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   326 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   327 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   328 0000000A ????????????????    <1>     .oldInt22h  resq 1  ;Int 22h pointer on overlay load
   329 00000012 ????????????????    <1>     .oldInt23h  resq 1  ;Int 23h pointer on overlay load
   330 0000001A ????????????????    <1>     .oldInt24h  resq 1  ;Int 24h pointer on overlay load
   331 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   332                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   333 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   334 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   335 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 21h
   336 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   337 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   338 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   339 0000005B ??                  <1>                 resb 1  ;Reserved byte
   340                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   341                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   342                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   343                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   344                              <1> ; always used and xtraHdlSz.
   345                              <1> ;Will need to add two SYSCALLS for future expansion:
   346                              <1> ;       1) Get Program Environment Pointer
   347                              <1> ;       2) Get Command Line arguments pointer
   348                              <1> ;The below are in the same place as in DOS.
   349                              <1>     .cmdLineArgPtr: ;Symbol for future use
   350 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   351 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   352                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   353 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   354 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   355                              <1> endstruc
   356                              <1> 
   357                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   358                              <1> 
   359                              <1> struc clkStruc
   360 00000000 ????                <1>     .dateWord   resw 1
   361 00000002 ??                  <1>     .minutes    resb 1
   362 00000003 ??                  <1>     .hours      resb 1
   363 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   364 00000005 ??                  <1>     .seconds    resb 1
   365                              <1> endstruc
   366                              <1> 
   367                              <1> struc countryStruc
   368 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   369                              <1>                         ;0 = month day year hh:mm:ss
   370                              <1>                         ;1 = day month year hh:mm:ss
   371                              <1>                         ;2 = year month day hh:mm:ss
   372 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   373 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   374 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   375 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   376 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   377 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   378                              <1>                         ;0 = Symbol leads, without space
   379                              <1>                         ;1 = Symbol follows, without space
   380                              <1>                         ;2 = Symbol leads, one space
   381                              <1>                         ;3 = Symbol follows, one space
   382                              <1>                         ;4 = Symbol replace decimal separator
   383 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   384 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   385 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   386 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   387 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   388                              <1> endstruc
   389                              <1> 
   390                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   391                              <1> ;for a space of 64Gb
   392                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   393                              <1> dosLowBase  equ 600h    ;Low load address
   394                              <1> 
   395                              <1> ;Critical Error AH bitfield equates
   396                              <1> critRead    equ 0h
   397                              <1> critWrite   equ 1h
   398                              <1> critDOS     equ 0h
   399                              <1> critFAT     equ 2h
   400                              <1> critDir     equ 4h
   401                              <1> critData    equ 6h
   402                              <1> critFailOK  equ 8h
   403                              <1> critRetryOK equ 10h
   404                              <1> critIgnorOK equ 20h
   405                              <1> critCharDev equ 80h
   406                              <1> 
   407                              <1> critIgnore  equ 0
   408                              <1> critRetry   equ 1
   409                              <1> critAbort   equ 2
   410                              <1> critFail    equ 3
   411                              <1> 
   412                              <1> ;MISC ASCII control chars
   413                              <1> NUL equ 00h ;^@         | ASCII Null
   414                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   415                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   416                              <1> BEL equ 07h ;^G         | ASCII Bell
   417                              <1> BSP equ 08h ;^H         | ASCII Backspace
   418                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   419                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   420                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   421                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   422                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   423                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   424                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   425                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   426                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   427                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   428                              <1> SPC equ 20h ;Printable  | ASCII Space
   429                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   430                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   431                              <1> 
   432                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   433                              <1> ;Extended Ascii Codes
   434                              <1> eF1     equ 3Bh ;F1 second byte
   435                              <1> eF2     equ 3Ch ;F2 second byte
   436                              <1> eF3     equ 3Dh ;F3 second byte
   437                              <1> eF4     equ 3Eh ;F4 second byte
   438                              <1> eF5     equ 3Fh ;F5 second byte
   439                              <1> eF6     equ 40h ;F6 second byte
   440                              <1> eF7     equ 41h ;F7 second byte
   441                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   442                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   443                              <1> eIns    equ 52h ;Insert second byte
   444                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   445                              <1> 
   446                              <1> ;Default Configuration for the system
   447                              <1> 
   448                              <1> buffersDefault  equ 30
   449                              <1> filesDefault    equ 20
   450                              <1> fcbsDefault     equ 4
   451                              <1> safeFcbsDeflt   equ 0
   452                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       resb 5  
    66 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   resb 1
    68 00000008 ????????????????    <1>     .filename   resb 8
    69 00000010 ??????              <1>     .fileext    resb 3
    70 00000013 ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    resb 8
    73 00000020 ??????              <1>     .newExt     resb 3
    74 00000023 ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    25 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    26 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    27 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    28 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    29 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    30                              <1> endstruc
    31                              <1> 
    32                              <1> struc execProg  ;For use with EXEC-ing a child task
    33 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    34 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    35 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    36 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    37                              <1> endstruc
    38                              <1> 
    39                              <1> ;Directory attribute equates
    40                              <1>     dirReadOnly     equ 01h
    41                              <1>     dirHidden       equ 02h
    42                              <1>     dirSystem       equ 04h
    43                              <1>     dirVolumeID     equ 08h
    44                              <1>     dirDirectory    equ 10h
    45                              <1>     dirArchive      equ 20h
    46                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    47                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    48                              <1>     ;If any of the three bits are set, then ALL three bits are set
    49                              <1>     ; in addition to whatever the user passed to search for.
    50                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    51                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    11 0000002B 5C                  <1> pathSep     db "\"  ;Default path sep
    12 0000002C 2F                  <1> switchChar  db "/"  ;Default switch char
    13 0000002D 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    14 0000002E 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    15                              <1> ;Static strings, not used in command line parsing
    16 00000036 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    16 0000003F 000000000000000000- <1>
    16 00000048 000000000000000000- <1>
    16 00000051 000000000000000000- <1>
    16 0000005A 0000                <1>
    17 0000005C 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    17 00000065 000000000000000000- <1>
    17 0000006E 000000000000000000- <1>
    17 00000077 000000000000000000- <1>
    17 00000080 000000000000000000- <1>
    17 00000089 000000000000000000- <1>
    17 00000092 000000000000000000- <1>
    17 0000009B 00000000            <1>
    18                              <1> 
    19                              <1> 
    20                              <1> cmdLineStatePtr:
    21 0000009F 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    22 000000A0 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    23 000000A2 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    24                              <1> ;These variables are valid for a SINGLE command in a command line
    25                              <1> ;Next two bytes, if set to -1, flags error
    26 000000A4 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    27 000000A5 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    28                              <1> ;                    If 2, we are redirecting output to a file, by appending
    29 000000A6 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    30 000000A8 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    31                              <1> 
    32                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    33 000000AA 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    34 000000AB 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    35 000000AC 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    36                              <1> 
    37 000000AD 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    38 000000AE 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    39 000000AF 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    40                              <1> 
    41                              <1> cmdStateL equ $ - cmdStatePtr
    42                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    43                              <1> 
    44                              <1> ;Batch state variables. Batch changes current dir to dir of batch file!
    45 000000B0 00                  <1> batFlag     db 0    ;Batch mode flag. Set to -1 if batch mode on
    46 000000B1 0000000000000000    <1> batBlockPtr dq 0    ;Ptr to the batch block
    47 000000B9 000000000000000000- <1> batOgCD     db fileSpecZL dup (0)   ;Original current dir for batch
    47 000000C2 000000000000000000- <1>
    47 000000CB 000000000000000000- <1>
    47 000000D4 000000000000000000- <1>
    47 000000DD 000000000000000000- <1>
    47 000000E6 000000000000000000- <1>
    47 000000EF 000000000000000000- <1>
    47 000000F8 000000000000000000- <1>
    47 00000101 00000000000000      <1>
    48 00000108 000000000000000000- <1> batFile     db fileSpecZL dup (0)   ;Path to bat to execute. Qual with path!
    48 00000111 000000000000000000- <1>
    48 0000011A 000000000000000000- <1>
    48 00000123 000000000000000000- <1>
    48 0000012C 000000000000000000- <1>
    48 00000135 000000000000000000- <1>
    48 0000013E 000000000000000000- <1>
    48 00000147 000000000000000000- <1>
    48 00000150 00000000000000      <1>
    49                              <1> ;batCallPtr  dq 0    ;Ptr to the call state block
    50                              <1> 
    51                              <1> ;Structs and strings
    52                              <1> 
    53 00000157 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    53 00000160 00000000000000      <1>
    54 00000167 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    54 00000170 000000000000000000- <1>
    54 00000179 000000000000000000- <1>
    54 00000182 000000000000000000- <1>
    54 0000018B 00000000000000      <1>
    55                              <1> 
    56 00000192 000000000000000000- <1> launchBlock db execProg_size dup (0)
    56 0000019B 000000000000000000- <1>
    56 000001A4 000000000000000000- <1>
    56 000001AD 0000000000          <1>
    57                              <1> 
    58 000001B2 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    58 000001BB 000000000000000000- <1>
    58 000001C4 000000000000000000- <1>
    58 000001CD 000000000000000000- <1>
    58 000001D6 000000000000000000- <1>
    58 000001DF 000000000000000000- <1>
    58 000001E8 000000000000000000- <1>
    58 000001F1 000000000000000000- <1>
    58 000001FA 000000000000000000- <1>
    58 00000203 000000000000000000- <1>
    58 0000020C 000000000000000000- <1>
    58 00000215 000000000000000000- <1>
    58 0000021E 000000000000000000- <1>
    58 00000227 000000000000000000- <1>
    58 00000230 00000000            <1>
    59                              <1> inBufferL   equ 127 ;127 chars so we can copy to PSP with terminating CR
    60 00000234 000000000000000000- <1> cpyBuffer   db cmdBufferL dup (0)   ;Copied input for processing
    60 0000023D 000000000000000000- <1>
    60 00000246 000000000000000000- <1>
    60 0000024F 000000000000000000- <1>
    60 00000258 000000000000000000- <1>
    60 00000261 000000000000000000- <1>
    60 0000026A 000000000000000000- <1>
    60 00000273 000000000000000000- <1>
    60 0000027C 000000000000000000- <1>
    60 00000285 000000000000000000- <1>
    60 0000028E 000000000000000000- <1>
    60 00000297 000000000000000000- <1>
    60 000002A0 000000000000000000- <1>
    60 000002A9 000000000000000000- <1>
    60 000002B2 00000000            <1>
    61 000002B6 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)   ;Buffer with the command pipeline
    61 000002BF 000000000000000000- <1>
    61 000002C8 000000000000000000- <1>
    61 000002D1 000000000000000000- <1>
    61 000002DA 000000000000000000- <1>
    61 000002E3 000000000000000000- <1>
    61 000002EC 000000000000000000- <1>
    61 000002F5 000000000000000000- <1>
    61 000002FE 000000000000000000- <1>
    61 00000307 000000000000000000- <1>
    61 00000310 000000000000000000- <1>
    61 00000319 000000000000000000- <1>
    61 00000322 000000000000000000- <1>
    61 0000032B 000000000000000000- <1>
    61 00000334 00000000            <1>
    62 00000338 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)   ;Space for full path to a ext cmd
    62 00000341 000000000000000000- <1>
    62 0000034A 000000000000000000- <1>
    62 00000353 000000000000000000- <1>
    62 0000035C 000000000000000000- <1>
    62 00000365 000000000000000000- <1>
    62 0000036E 000000000000000000- <1>
    62 00000377 000000000000000000- <1>
    62 00000380 00000000000000      <1>
    63 00000387 000000000000000000- <1> cmdName     db cmdNameL dup (0)     ;Cmd name prefixed by length 
    63 00000390 0000000000          <1>
    64                              <1> 
    65 00000395 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    65 0000039E 000000000000000000- <1>
    65 000003A7 000000000000000000- <1>
    65 000003B0 000000000000000000- <1>
    65 000003B9 000000000000000000- <1>
    65 000003C2 000000000000000000- <1>
    65 000003CB 000000000000000000- <1>
    65 000003D4 000000000000000000- <1>
    65 000003DD 00000000000000      <1>
    66 000003E4 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    66 000003ED 000000000000000000- <1>
    66 000003F6 000000000000000000- <1>
    66 000003FF 000000000000000000- <1>
    66 00000408 000000000000000000- <1>
    66 00000411 000000000000000000- <1>
    66 0000041A 000000000000000000- <1>
    66 00000423 000000000000000000- <1>
    66 0000042C 00000000000000      <1>
    67                              <1> 
    68                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    69 00000433 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    69 0000043C 000000000000000000- <1>
    69 00000445 000000000000000000- <1>
    69 0000044E 000000000000000000- <1>
    69 00000457 000000000000000000- <1>
    69 00000460 000000000000000000- <1>
    69 00000469 000000000000000000- <1>
    69 00000472 000000000000000000- <1>
    69 0000047B 00000000000000      <1>
    70 00000482 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    70 0000048B 000000000000000000- <1>
    70 00000494 000000000000000000- <1>
    70 0000049D 000000000000000000- <1>
    70 000004A6 000000000000000000- <1>
    70 000004AF 000000000000000000- <1>
    70 000004B8 000000000000000000- <1>
    70 000004C1 000000000000000000- <1>
    70 000004CA 00000000000000      <1>
    71                              <1> 
    72 000004D1 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    73 000004D9 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    74                              <1> 
    75 000004E1 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Main scratch buffer for forming paths!
    75 000004EA 000000000000000000- <1>
    75 000004F3 000000000000000000- <1>
    75 000004FC 000000000000000000- <1>
    75 00000505 000000000000000000- <1>
    75 0000050E 000000000000000000- <1>
    75 00000517 000000000000000000- <1>
    75 00000520 000000000000000000- <1>
    75 00000529 000000000000000000- <1>
    75 00000532 000000000000000000- <1>
    75 0000053B 000000000000000000- <1>
    75 00000544 000000000000000000- <1>
    75 0000054D 000000000000000000- <1>
    75 00000556 000000000000000000- <1>
    75 0000055F 00000000            <1>
    76                              <1> ;The above is slightly larger than is needed/supported by DOS to allow for 
    77                              <1> ; users overtyping
    78                              <1> 
    79                              <1> ;Internal Function vars
    80                              <1> ;Dir Vars
    81 00000563 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    82                              <1> ;                                   Bit[1] set => /P or /p specified
    83                              <1> ;                                   Bit[2] set => A file/path specified
    84 00000564 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    85 00000565 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    86 00000566 00                  <1> dirDrv      db 0    ;0 based drive number to use
    87 00000567 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
    87 00000570 000000000000000000- <1>
    87 00000579 000000000000000000- <1>
    87 00000582 000000000000000000- <1>
    87 0000058B 000000000000000000- <1>
    87 00000594 000000000000000000- <1>
    87 0000059D 000000000000000000- <1>
    87 000005A6 000000000000000000- <1>
    87 000005AF 000000000000000000- <1>
    87 000005B8 000000000000000000- <1>
    87 000005C1 000000000000000000- <1>
    87 000005CA 000000000000000000- <1>
    87 000005D3 000000000000000000- <1>
    87 000005DC 000000000000000000- <1>
    87 000005E5 00000000            <1>
    88 000005E9 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
    88 000005F2 3F3F3F3F3F3F3F      <1>
    89                              <1> dirWideType equ 1
    90                              <1> dirPageType equ 2
    91                              <1> dirFileType equ 4
    92                              <1> ;Volume Vars
    93                              <1> volFcb:
    94                              <1>     istruc exFcb
    95 000005F9 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    96 000005FA 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    97 00000600 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
    98 00000601 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
    99 00000609 3F3F3F              <1>     at exFcb.fileext,   db "???"
   100 0000060C 00000000            <1>     at exFcb.curBlock,  dd 0
   101 00000610 00<rep 15h>         <1>     iend 
   102                              <1> 
   103                              <1> ;Time/Date vars
   104 00000625 00                  <1> td1 db 0    ;Minutes/Year
   105 00000626 00                  <1> td2 db 0    ;Hours/Zero
   106 00000627 00                  <1> td3 db 0    ;Hundredths/Day
   107 00000628 00                  <1> td4 db 0    ;Seconds/Month
   108                              <1> 
   109                              <1> ;Rename/Copy/Delete Buffers
   110                              <1> delPath:
   111 00000629 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   111 00000632 000000000000000000- <1>
   111 0000063B 000000000000000000- <1>
   111 00000644 000000000000000000- <1>
   111 0000064D 000000000000000000- <1>
   111 00000656 000000000000000000- <1>
   111 0000065F 000000000000000000- <1>
   111 00000668 000000000000000000- <1>
   111 00000671 000000000000000000- <1>
   111 0000067A 000000000000000000- <1>
   111 00000683 000000000000000000- <1>
   111 0000068C 000000000000000000- <1>
   111 00000695 000000000000000000- <1>
   111 0000069E 000000000000000000- <1>
   111 000006A7 00000000            <1>
   112 000006AB 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   112 000006B4 000000000000000000- <1>
   112 000006BD 000000000000000000- <1>
   112 000006C6 000000000000000000- <1>
   112 000006CF 000000000000000000- <1>
   112 000006D8 000000000000000000- <1>
   112 000006E1 000000000000000000- <1>
   112 000006EA 000000000000000000- <1>
   112 000006F3 000000000000000000- <1>
   112 000006FC 000000000000000000- <1>
   112 00000705 000000000000000000- <1>
   112 0000070E 000000000000000000- <1>
   112 00000717 000000000000000000- <1>
   112 00000720 000000000000000000- <1>
   112 00000729 00000000            <1>
   113 0000072D 0000000000000000    <1> srcPtr      dq 0    ;Where to copy the pattern to
   114 00000735 0000000000000000    <1> destPtr     dq 0    ;Where to copy the pattern to
   115 0000073D 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   115 00000746 2020                <1>
   116                              <1> ;Copy Handles
   117 00000748 FFFF                <1> sourceHdl   dw -1
   118 0000074A FFFF                <1> destHdl     dw -1
   119 0000074C 0000                <1> srcHdlInfo  dw 0 ;Used to save the handle device info (bit 7 Set -> Char dev)
   120 0000074E 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   120 00000757 000000000000000000- <1>
   120 00000760 000000000000000000- <1>
   120 00000769 000000000000000000- <1>
   120 00000772 000000000000000000- <1>
   120 0000077B 000000000000000000- <1>
   120 00000784 000000000000000000- <1>
   120 0000078D 000000000000000000- <1>
   120 00000796 000000000000000000- <1>
   120 0000079F 000000000000000000- <1>
   120 000007A8 000000000000000000- <1>
   120 000007B1 000000000000000000- <1>
   120 000007BA 000000000000000000- <1>
   120 000007C3 000000000000000000- <1>
   120 000007CC 0000                <1>
   121                              <1> 
   122                              <1> ;Environment manipulation vars
   123 000007CE 0000                <1> envVarSz        dw 0    ;Env var size
   124 000007D0 0000                <1> envVarNamSz     dw 0    ;Env var "name="" length
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 000007D2 03444952            <1>     db 3, "DIR"
     8 000007D6 2419                <1>     dw dir - startLbl
     9                              <1> 
    10 000007D8 024344              <1>     db 2, "CD"
    11 000007DB ED1D                <1>     dw chdir - startLbl
    12                              <1> 
    13 000007DD 054348444952        <1>     db 5, "CHDIR"
    14 000007E3 ED1D                <1>     dw chdir - startLbl
    15                              <1> 
    16 000007E5 024D44              <1>     db 2, "MD"
    17 000007E8 681E                <1>     dw mkdir - startLbl
    18                              <1> 
    19 000007EA 054D4B444952        <1>     db 5, "MKDIR"
    20 000007F0 681E                <1>     dw mkdir - startLbl
    21                              <1> 
    22 000007F2 025244              <1>     db 2, "RD"
    23 000007F5 B41E                <1>     dw rmdir - startLbl
    24                              <1> 
    25 000007F7 05524D444952        <1>     db 5, "RMDIR"
    26 000007FD B41E                <1>     dw rmdir - startLbl
    27                              <1> 
    28 000007FF 0344454C            <1>     db 3, "DEL"
    29 00000803 A220                <1>     dw erase - startLbl
    30                              <1> 
    31 00000805 054552415345        <1>     db 5, "ERASE"
    32 0000080B A220                <1>     dw erase - startLbl
    33                              <1> 
    34 0000080D 0444415445          <1>     db 4, "DATE"
    35 00000812 E021                <1>     dw date - startLbl
    36                              <1> 
    37 00000814 0454494D45          <1>     db 4, "TIME"
    38 00000819 A922                <1>     dw time - startLbl
    39                              <1> 
    40 0000081B 04434F5059          <1>     db 4, "COPY"
    41 00000820 001F                <1>     dw copy - startLbl
    42                              <1> 
    43 00000822 0443545459          <1>     db 4, "CTTY"
    44 00000827 4423                <1>     dw ctty - startLbl
    45                              <1> 
    46 00000829 03434C53            <1>     db 3, "CLS"
    47 0000082D DF23                <1>     dw cls - startLbl
    48                              <1> 
    49 0000082F 05425245414B        <1>     db 5, "BREAK"
    50 00000835 5124                <1>     dw break - startLbl
    51                              <1> 
    52 00000837 06564552494659      <1>     db 6, "VERIFY"
    53 0000083E D224                <1>     dw verify - startLbl
    54                              <1> 
    55 00000840 0652454E414D45      <1>     db 6, "RENAME"
    56 00000847 4F25                <1>     dw rename - startLbl
    57                              <1> 
    58 00000849 0352454E            <1>     db 3, "REN"
    59 0000084D 4F25                <1>     dw rename - startLbl
    60                              <1>     
    61 0000084F 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 00000858 5329                <1>     dw truename - startLbl
    63                              <1> 
    64 0000085A 03564552            <1>     db 3, "VER"
    65 0000085E 392B                <1>     dw version - startLbl
    66                              <1> 
    67 00000860 03564F4C            <1>     db 3, "VOL"
    68 00000864 7A2A                <1>     dw volume - startLbl
    69                              <1> 
    70 00000866 034D454D            <1>     db 3, "MEM"
    71 0000086A 7D2B                <1>     dw memory - startLbl
    72                              <1> 
    73 0000086C 0445584954          <1>     db 4, "EXIT"
    74 00000871 662D                <1>     dw exit - startLbl
    75                              <1> 
    76 00000873 0454595045          <1>     db 4, "TYPE"
    77 00000878 C72C                <1>     dw type - startLbl
    78                              <1> 
    79 0000087A 054C4142454C        <1>     db 5, "LABEL"
    80 00000880 A429                <1>     dw label - startLbl
    81                              <1> 
    82 00000882 0450415448          <1>     db 4, "PATH"
    83 00000887 DE30                <1>     dw pathEdit - startLbl
    84                              <1> 
    85 00000889 03534554            <1>     db 3, "SET"
    86 0000088D BF2F                <1>     dw set - startLbl
    87                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    88 0000088F 054D4B4C424C        <1>     db 5, "MKLBL"
    89 00000895 CE29                <1>     dw mklbl - startLbl
    90                              <1> 
    91 00000897 05524D4C424C        <1>     db 5, "RMLBL"
    92 0000089D 092A                <1>     dw rmlbl - startLbl
    93                              <1> 
    94 0000089F 05524E4C424C        <1>     db 5, "RNLBL"
    95 000008A5 442A                <1>     dw rnlbl - startLbl
    96                              <1> 
    97 000008A7 05544F554348        <1>     db 5, "TOUCH"
    98 000008AD 4627                <1>     dw touch - startLbl
    99                              <1> 
   100 000008AF 044A4F494E          <1>     db 4, "JOIN"
   101 000008B4 A927                <1>     dw join - startLbl
   102                              <1> 
   103 000008B6 055355425354        <1>     db 5, "SUBST"
   104 000008BC 6C28                <1>     dw subst - startLbl
   105                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   106 000008BE FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 000008BF 0D0A24              <1> crlf    db  CR,LF,"$"
     3 000008C2 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 000008C7 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 000008D0 696C65206D69737369- <1>
     4 000008D9 6E670D0A24          <1>
     5 000008DE 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 000008E7 6469736B2077697468- <1>
     5 000008F0 206261746368206669- <1>
     5 000008F9 6C65                <1>
     6 000008FB 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 00000904 737320616E79206B65- <1>
     6 0000090D 79207768656E207265- <1>
     6 00000916 6164790D0A24        <1>
     7 0000091C 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 00000925 6E64206F722066696C- <1>
     7 0000092E 65206E616D650D0A24  <1>
     8 00000937 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 00000940 2066696C65206E616D- <1>
     8 00000949 65206F7220          <1>
     9 0000094E 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 00000957 666F756E640D0A24    <1>
    10 0000095F 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full. On copy only!
    10 00000968 656E74206469736B20- <1>
    10 00000971 73706163650D0A24    <1>
    11 00000979 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 00000982 7669726F6E6D656E74- <1>
    11 0000098B 2073706163650D0A24  <1>
    12 00000994 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 0000099D 74696F6E206572726F- <1>
    12 000009A6 720D0A24            <1>
    13 000009AA 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 000009B3 6F7420626520636F70- <1>
    13 000009BC 696564206F6E746F20- <1>
    13 000009C5 697473656C660D0A24  <1>
    14 000009CE 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 000009D7 662064657374696E61- <1>
    14 000009E0 74696F6E206C6F7374- <1>
    14 000009E9 206265666F72652063- <1>
    14 000009F2 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 000009F8 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 00000A01 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 00000A0A 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 00000A13 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 00000A14 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 00000A1D 65650D0A24          <1>
    21 00000A22 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 00000A2B 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 00000A34 726976652073706563- <1>
    23 00000A3D 696669636174696F6E- <1>
    23 00000A46 0D0A24              <1>
    24 00000A49 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 00000A52 6B6579207768656E20- <1>
    24 00000A5B 7265616479202E202E- <1>
    24 00000A64 202E2024            <1>
    25 00000A68 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 00000A71 6172616D657465720D- <1>
    25 00000A7A 0A24                <1>
    26                              <1> 
    27 00000A7C 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 00000A85 576564546875467269- <1>
    27 00000A8E 536174              <1>
    28 00000A91 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 00000A9A 206461746524        <1>
    29 00000AA0 43757272656E742064- <1> curDate db  "Current date is $"
    29 00000AA9 6174652069732024    <1>
    30 00000AB1 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 00000ABA 657720646174652024  <1>
    31 00000AC3 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 00000ACC 293A2024            <1>
    32 00000AD0 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 00000AD9 293A2024            <1>
    33 00000ADD 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 00000AE6 293A2024            <1>
    34 00000AEA 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 00000AF3 2074696D6524        <1>
    35 00000AF9 43757272656E742074- <1> curTime db  "Current time is $"
    35 00000B02 696D652069732024    <1>
    36 00000B0A 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 00000B13 65772074696D653A20- <1>
    36 00000B1C 24                  <1>
    37                              <1> 
    38 00000B1D 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000B26 7572652028592F4E29- <1>
    38 00000B2F 3F2024              <1>
    39                              <1> 
    40 00000B32 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000B3B 56657273696F6E2024  <1>
    41                              <1> 
    42 00000B44 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000B4D 6E2064726976652024  <1>
    43 00000B56 2069732024          <1> volOk   db " is $"
    44 00000B5B 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000B64 6162656C24          <1>
    45                              <1> 
    46 00000B69 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000B72 69726563746F72790D- <1>
    46 00000B7B 0A24                <1>
    47 00000B7D 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000B86 206372656174652064- <1>
    47 00000B8F 69726563746F72790D- <1>
    47 00000B98 0A24                <1>
    48 00000B9A 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000BA3 6174682C206E6F7420- <1>
    48 00000BAC 6469726563746F7279- <1>
    48 00000BB5 2C0D0A              <1>
    49 00000BB8 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000BC1 6F7279206E6F742065- <1>
    49 00000BCA 6D7074790D0A24      <1>
    50 00000BD1 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000BDA 79206F66202024      <1>
    51 00000BE1 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000BEA 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    52 00000BF3 6E6965640D0A24      <1>
    53 00000BFA 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    53 00000C03 72697665206973206E- <1>
    53 00000C0C 6F206C6F6E67657220- <1>
    53 00000C15 76616C696424        <1>
    54 00000C1B 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    54 00000C24 7269766520696E2073- <1>
    54 00000C2D 656172636820706174- <1>
    54 00000C36 680D0A24            <1>
    55 00000C3A 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    55 00000C43 65766963650D0A24    <1>
    56 00000C4B 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    56 00000C54 20666F756E640D0A24  <1>
    57 00000C5D 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    57 00000C66 726F720D0A24        <1>
    58 00000C6C 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    58 00000C75 6F74206265206E6573- <1>
    58 00000C7E 7465640D0A24        <1>
    59 00000C84 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    59 00000C8D 6174652066696C6520- <1>
    59 00000C96 6572726F7220647572- <1>
    59 00000C9F 696E6720706970650D- <1>
    59 00000CA8 0A24                <1>
    60 00000CAA 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    60 00000CB3 2062696E6172792072- <1>
    60 00000CBC 656164732066726F6D- <1>
    60 00000CC5 206120646576696365- <1>
    60 00000CCE 0D0A24              <1>
    61 00000CD1 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    62 00000CD7 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    63 00000CDC 425245414B20697320- <1> breakIs db "BREAK is $"
    63 00000CE5 24                  <1>
    64 00000CE6 564552494659206973- <1> verifyIs    db "VERIFY is $"
    64 00000CEF 2024                <1>
    65 00000CF1 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    66 00000CFA 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    66 00000D03 617468206F72206669- <1>
    66 00000D0C 6C65206E616D650D0A- <1>
    66 00000D15 24                  <1>
    67 00000D16 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    67 00000D1F 756D626572206F6620- <1>
    67 00000D28 706172616D65746572- <1>
    67 00000D31 730D0A24            <1>
    68 00000D35 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    68 00000D3E 74696E6720746F2064- <1>
    68 00000D47 6576696365          <1>
    69 00000D4C 08200800            <1> backSpace   db BSP," ",BSP,NUL
    70                              <1> 
    71 00000D50 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    71 00000D59 20202020202020546F- <1>
    71 00000D62 74616C207379737465- <1>
    71 00000D6B 6D206D656D6F72793A- <1>
    71 00000D74 2024                <1>
    72 00000D76 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    72 00000D7F 20202020202020204D- <1>
    72 00000D88 656D6F727920757365- <1>
    72 00000D91 6420627920444F533A- <1>
    72 00000D9A 2024                <1>
    73 00000D9C 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    73 00000DA5 656D6F727920757365- <1>
    73 00000DAE 64206279206170706C- <1>
    73 00000DB7 69636174696F6E733A- <1>
    73 00000DC0 2024                <1>
    74 00000DC2 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    74 00000DCB 656D6F727920726573- <1>
    74 00000DD4 657276656420627920- <1>
    74 00000DDD 68617264776172653A- <1>
    74 00000DE6 2024                <1>
    75 00000DE8 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    75 00000DF1 202020202020202020- <1>
    75 00000DFA 2020202020204D656D- <1>
    75 00000E03 6F727920667265653A- <1>
    75 00000E0C 2024                <1>
    76 00000E0E 20627974657324      <1> memByte db " bytes$"
    77 00000E15 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    77 00000E1E 6F7420417373657274- <1>
    77 00000E27 61696E20444F532045- <1>
    77 00000E30 6E74727920506F696E- <1>
    77 00000E39 7424                <1>
    78 00000E3B 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    78 00000E44 416C6C6F636174696F- <1>
    78 00000E4D 6E204572726F7224    <1>
    79 00000E55 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    79 00000E5E 4572726F7224        <1>
    80 00000E64 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    80 00000E6D 68616C74656424      <1>
    81                              <1> 
    82 00000E74 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    82 00000E7D 206372656174652070- <1>
    82 00000E86 6970650D0A          <1>
    83                              <1> pipeErrMsgL equ $ - pipeErrMsg
    84 00000E8B 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    84 00000E94 6F6E206572726F720D- <1>
    84 00000E9D 0A                  <1>
    85                              <1> redirErrMsgL   equ $ - redirErrMsg
    86                              <1> 
    87 00000E9E 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    88 00000EA2 2020202024          <1> fourSpc  db "    $"
    89 00000EA7 20202024            <1> threeSpc db "   $"
    90 00000EAB 202024              <1> twoSpc   db "  $"
    91                              <1> 
    92 00000EAE 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    92 00000EB7 696679204F4E206F72- <1>
    92 00000EC0 204F46460D0A24      <1>
    93                              <1> 
    94 00000EC7 50524F4D50543D      <1> promptEVar  db "PROMPT="
    95 00000ECE 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
    96                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    97                              <1> ; handles and reopen CON
    98 00000ED7 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:
     3                              <1> ;This is copied into an MCB to be used as the environment!
     4                              <1> comspecEvar:
     5 00000EDB 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 00000EE3 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0  ;Part of the comspec!
     7 00000EEC 442E434F4D00        <1>
     8                              <1> pathEVar:
     9 00000EF2 504154483D0000      <1>     db "PATH=",0,0  ;End of default environment strings
    10                              <1> menv_len equ $ - masterEnv
    11                              <1> ;Master environment doesnt contain the "program name string"
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00000EF9 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00000EFC 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00000F00 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 00000F03 B44A                <1>     mov ah, 4Ah ;Realloc
     9 00000F05 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00000F08 CD21                <1>     int 21h
    11 00000F0A EB6C                <1>     jmp short commandMain
    12                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    13 00000F0C B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    14 00000F11 CD21                <1>     int 21h
    15 00000F13 668905F3F0FFFF      <1>     mov word [returnCode], ax
    16                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    17 00000F1A 488D1543290000      <1>     lea rdx, critErrorHandler
    18 00000F21 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    19 00000F25 B824250000          <1>     mov eax, 2524h
    20 00000F2A CD21                <1>     int 21h
    21 00000F2C 488D15CC2B0000      <1>     lea rdx, int23h
    22 00000F33 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    23 00000F37 B823250000          <1>     mov eax, 2523h
    24 00000F3C CD21                <1>     int 21h
    25 00000F3E 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    26 00000F45 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    27 00000F49 B822250000          <1>     mov eax, 2522h
    28 00000F4E CD21                <1>     int 21h
    29 00000F50 F60548F1FFFFFF      <1>     test byte [pipeFlag], -1
    30 00000F57 0F85B8000000        <1>     jnz commandMain.pipeProceed ;Skip the handle closing when pipe active
    31 00000F5D E820050000          <1>     call advanceRedir   ;Clean up redirection once we are done
    32                              <1> ;Close all handles from 5->MAX
    33 00000F62 0FB70DBEF0FFFF      <1>     movzx ecx, word [numHdls]
    34 00000F69 BB05000000          <1>     mov ebx, 5
    35                              <1> .handleClose:
    36 00000F6E B43E                <1>     mov ah, 3Eh ;File close
    37 00000F70 CD21                <1>     int 21h
    38 00000F72 FFC3                <1>     inc ebx ;Goto next file
    39 00000F74 39CB                <1>     cmp ebx, ecx
    40 00000F76 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    41                              <1> commandMain:
    42 00000F78 488B2586F0FFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    43 00000F7F FC                  <1>     cld ;Ensure stringops are done the right way
    44 00000F80 C6052BF2FFFF7F      <1>     mov byte [inBuffer], inBufferL      ;Reset the buffer length
    45 00000F87 C605A6F2FFFF7F      <1>     mov byte [cpyBuffer], inBufferL     ;Reset the buffer length
    46 00000F8E C60521F3FFFF7F      <1>     mov byte [cmdBuffer], inBufferL     ;Reset the buffer length
    47                              <1> .inputMain:
    48 00000F95 E8D3210000          <1>     call printCRLF
    49                              <1> .inputMain2:
    50 00000F9A F6050FF1FFFFFF      <1>     test byte [batFlag], -1 ;If batch on, go here
    51 00000FA1 0F8584080000        <1>     jnz batNextLine
    52 00000FA7 E81D250000          <1>     call clearCommandLineState
    53 00000FAC E8F0240000          <1>     call printPrompt
    54                              <1> 
    55 00000FB1 B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    56 00000FB6 CD21                <1>     int 21h
    57 00000FB8 B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    58 00000FBD BA01000000          <1>     mov edx, 1      ;Start new print job
    59 00000FC2 CD21                <1>     int 21h
    60 00000FC4 488D15E7F1FFFF      <1>     lea rdx, inBuffer
    61 00000FCB B8000A0000          <1>     mov eax, 0A00h  ;Do Buffered input
    62 00000FD0 CD21                <1>     int 21h
    63 00000FD2 E896210000          <1>     call printCRLF  ;Note we have accepted input
    64                              <1> ;First check we had something typed in of length greater than 0
    65 00000FD7 803DD5F1FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    66 00000FDE 74BA                <1>     je .inputMain2
    67                              <1>     ;Copy over the input text
    68 00000FE0 488D35CBF1FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    69                              <1> .copyPoint: ;Copy over commandline here
    70 00000FE7 488D3D46F2FFFF      <1>     lea rdi, cpyBuffer
    71 00000FEE B982000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    72 00000FF3 F3A4                <1>     rep movsb
    73 00000FF5 E85C000000          <1>     call makeCmdBuffer   ;Preprocess the redir, make cmd buffer
    74                              <1> .pipeLoop:
    75 00000FFA 4C8B050EF0FFFF      <1>     mov r8, qword [pspPtr]  ;Point back to home segment
    76 00001001 E8AA000000          <1>     call makeCmdString      ;Now make the command string in the psp
    77 00001006 E86D060000          <1>     call setupRedirandPipes ;Setup pipes and redir if appropriate
    78 0000100B E8F9000000          <1>     call analyseCmdline
    79 00001010 E8A0010000          <1>     call doCommandLine  ;This analyses and does the command line!
    80                              <1> .pipeProceed:
    81 00001015 E868040000          <1>     call advanceRedir
    82 0000101A F6057EF0FFFFFF      <1>     test byte [pipeFlag], -1  ;If we have any pipes active, we proceed here
    83 00001021 0F846EFFFFFF        <1>     jz .inputMain
    84                              <1>     ;Now we pull the commandline forwards. 
    85 00001027 E884000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    86 0000102C 0F8463FFFFFF        <1>     jz .inputMain       ;We are pointing to a CR, no pipe!
    87 00001032 488D3D7FF2FFFF      <1>     lea rdi, cmdBuffer + 2
    88 00001039 4889F1              <1>     mov rcx, rsi
    89 0000103C 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    90 0000103F 280D72F2FFFF        <1>     sub byte [cmdBuffer + 1], cl    ;And rease from the count
    91 00001045 8A0D6CF2FFFF        <1>     mov cl, byte [cmdBuffer + 1]
    92 0000104B FFC1                <1>     inc ecx     ;One more for the terminating char
    93 0000104D F3A4                <1>     rep movsb   ;Move the chars over    
    94 0000104F E864240000          <1>     call clearCommandState  ;Else, clear the command state and start again
    95 00001054 EBA4                <1>     jmp short .pipeLoop
    96                              <1> 
    97                              <1> makeCmdBuffer:
    98                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    99                              <1> ; copy buffer. Called only once in a cycle.
   100                              <1> ;Throughout: CL has char count, CH has quote count
   101 00001056 488D35D9F1FFFF      <1>     lea rsi, [cpyBuffer + 2]    ;Goto copy buffer + 2
   102 0000105D 31C9                <1>     xor ecx, ecx
   103 0000105F 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   104                              <1> .countQuotes:
   105 00001062 AC                  <1>     lodsb
   106 00001063 3C22                <1>     cmp al, '"'
   107 00001065 7507                <1>     jne .notQuoteToCount
   108 00001067 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   109 00001069 E9F4FFFFFF          <1>     jmp .countQuotes
   110                              <1> .notQuoteToCount:
   111 0000106E 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   112 00001070 75F0                <1>     jne .countQuotes
   113 00001072 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   114 00001075 488D3D3CF2FFFF      <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
   115                              <1> .getChar:
   116 0000107C AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   117 0000107D 3C22                <1>     cmp al, '"'     ;Is char a quote?
   118 0000107F 750E                <1>     jne .notQuote
   119 00001081 FECD                <1>     dec ch          ;We have a quote, now decrement
   120 00001083 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   121                              <1> .searchForClosingQuote:
   122                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   123 00001085 AA                  <1>     stosb   ;Store char and inc rdi
   124 00001086 FEC1                <1>     inc cl
   125 00001088 AC                  <1>     lodsb   ;Get next char
   126 00001089 3C22                <1>     cmp al, '"'
   127 0000108B 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   128 0000108D FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   129                              <1> .notQuote:
   130 0000108F E888050000          <1>     call peelRedir      ;Intervene redir if needed
   131 00001094 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   132 00001096 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   133 00001098 EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   134                              <1> .pipeHandle:
   135                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   136 0000109A 0F84A9020000        <1>     jz pipeFailure ;We had double pipe symbol, reset!
   137                              <1> .notRedir:
   138 000010A0 AA                  <1>     stosb       ;Store char and advance rdi
   139 000010A1 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   140 000010A3 7404                <1>     je .exit
   141 000010A5 FEC1                <1>     inc cl      ;Increment char count
   142 000010A7 EBD3                <1>     jmp short .getChar    ;If not, get next char
   143                              <1> .exit:
   144 000010A9 880D08F2FFFF        <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   145                              <1>     return
    13                              <2> %%_ret:
    14 000010AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   146                              <1> 
   147                              <1> makeCmdString:
   148                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   149                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   150                              <1> ; Copies into the psp.
   151                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   152 000010B0 488D3501F2FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   153 000010B7 31C9                <1>     xor ecx, ecx
   154 000010B9 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   155                              <1> .countQuotes:
   156 000010BC AC                  <1>     lodsb
   157 000010BD 3C22                <1>     cmp al, '"'
   158 000010BF 7507                <1>     jne .notQuoteToCount
   159 000010C1 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   160 000010C3 E9F4FFFFFF          <1>     jmp .countQuotes
   161                              <1> .notQuoteToCount:
   162 000010C8 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   163 000010CA 75F0                <1>     jne .countQuotes
   164 000010CC 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   165 000010CF 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   166                              <1> .getChar:
   167 000010D6 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   168 000010D7 3C22                <1>     cmp al, '"'     ;Is char a quote?
   169 000010D9 750E                <1>     jne .notQuote
   170 000010DB FECD                <1>     dec ch          ;We have a quote, now decrement
   171 000010DD 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   172                              <1> .searchForClosingQuote:
   173                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   174 000010DF AA                  <1>     stosb   ;Store char and inc rdi
   175 000010E0 FEC1                <1>     inc cl
   176 000010E2 AC                  <1>     lodsb   ;Get next char
   177 000010E3 3C22                <1>     cmp al, '"'
   178 000010E5 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   179 000010E7 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   180                              <1> .notQuote:
   181 000010E9 3C7C                <1>     cmp al, "|"
   182 000010EB 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   183 000010ED B00D                <1>     mov al, CR          ;Store the pipe char
   184 000010EF 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   185                              <1> .notPipe:
   186 000010F2 AA                  <1>     stosb       ;Store char and advance rdi
   187 000010F3 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   188 000010F5 7404                <1>     je .exit
   189 000010F7 FEC1                <1>     inc cl      ;Increment char count
   190 000010F9 EBDB                <1>     jmp short .getChar    ;If not, get next char
   191                              <1> .exit:
   192 000010FB 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   193 000010FE 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   194 00001105 803E0D              <1>     cmp byte [rsi], CR  
   195                              <1>     return
    13                              <2> %%_ret:
    14 00001108 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   196                              <1> 
   197                              <1> analyseCmdline:
   198                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   199                              <1> ; processes the command name into the FCB.  
   200 00001109 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   201 00001110 4889F3              <1>     mov rbx, rsi            ;Save this ptr in rbx
   202 00001113 E868230000          <1>     call skipDelimiters     ;Skip any preceeding separators
   203 00001118 488D3D19F2FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   204 0000111F E88E240000          <1>     call cpDelimPathToBufz  ;Moves rsi to the first char past the delim char
   205 00001124 48FFCE              <1>     dec rsi ;Point it back to the delim char
   206 00001127 E880000000          <1>     call .skipAndCheckCR
   207 0000112C 7439                <1>     je .setupCmdVars
   208 0000112E C60575EFFFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   209 00001135 4889F0              <1>     mov rax, rsi
   210 00001138 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   211 0000113B 88056AEFFFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   212                              <1> .skipArg:
   213 00001141 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   214 00001142 3C0D                <1>     cmp al, CR
   215 00001144 7421                <1>     je .setupCmdVars
   216 00001146 E843230000          <1>     call isALdelimiter
   217 0000114B 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   218 0000114D E85A000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   219 00001152 7413                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   220 00001154 C60552EFFFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   221 0000115B 4889F0              <1>     mov rax, rsi            
   222 0000115E 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   223 00001161 880547EFFFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   224                              <1> .setupCmdVars:
   225                              <1> ;Before returning, we copy the command name to cmdName 
   226 00001167 C60519F2FFFF00      <1>     mov byte [cmdName], 0   ;Initialise this field to indicate no cmd
   227 0000116E 488D3DC3F1FFFF      <1>     lea rdi, cmdPathSpec
   228 00001175 E8BE230000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   229 0000117A E8E5220000          <1>     call strlen ;Get the length of the final path componant
   230 0000117F 81F90C000000        <1>     cmp ecx, 11 + 1 ;Extra char for the ext separator (dot)
   231 00001185 771D                <1>     ja .exitBad     ;Return error
   232 00001187 4889FE              <1>     mov rsi, rdi
   233 0000118A 488D3DF6F1FFFF      <1>     lea rdi, cmdName
   234 00001191 FFC9                <1>     dec ecx ;Minus the terminating null
   235 00001193 880F                <1>     mov byte [rdi], cl ;Store the length here
   236 00001195 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   237                              <1> .cpCmdName:
   238 00001198 AC                  <1>     lodsb
   239 00001199 E8D0220000          <1>     call ucChar ;Uppercase the char
   240 0000119E AA                  <1>     stosb
   241 0000119F FFC9                <1>     dec ecx
   242 000011A1 75F5                <1>     jnz .cpCmdName
   243                              <1>     return
    13                              <2> %%_ret:
    14 000011A3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   244                              <1> .exitBad:
   245 000011A4 C605DCF1FFFFFF      <1>     mov byte [cmdName], -1 ;Store -1 to indicate error
   246                              <1>     return
    13                              <2> %%_ret:
    14 000011AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   247                              <1> .skipAndCheckCR:
   248                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   249 000011AC E8CF220000          <1>     call skipDelimiters ;Go to the next char in the input line
   250 000011B1 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   251                              <1>     return
    13                              <2> %%_ret:
    14 000011B4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   252                              <1> 
   253                              <1> doCommandLine:
   254 000011B5 488D357CF1FFFF      <1>     lea rsi, cmdPathSpec
   255                              <1>     ;The following check accounts for the end of a piped command
   256 000011BC 803DC4F1FFFF00      <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, fail!
   257                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000011C3 74(B4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   258 000011C5 803DBBF1FFFFFF      <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   259 000011CC 0F8449070000        <1>     je badCmdError
   260 000011D2 488D3D7EEFFFFF      <1>     lea rdi, cmdFcb
   261 000011D9 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
   262 000011DE CD21                <1>     int 21h
   263 000011E0 0FB71D51F1FFFF      <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   264 000011E7 80FF3A              <1>     cmp bh, ":"
   265 000011EA 752D                <1>     jne .noDriveSpecified
   266 000011EC 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   267 000011EE E87B220000          <1>     call ucChar     ;Uppercase al
   268 000011F3 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   269 000011F5 80FBFF              <1>     cmp bl, -1      ;Int 21h returns AL = -1 if bad drive specified
   270 000011F8 7412                <1>     je .badDrive
   271                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   272 000011FA 803D86F1FFFF02      <1>     cmp byte [cmdName], 2
   273 00001201 7516                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   274 00001203 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   275 00001205 E830220000          <1>     call setDrive
   276                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000120A 74(B4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   277                              <1> .badDrive:
   278 0000120C 488D1518F8FFFF      <1>     lea rdx, badDrv
   279 00001213 B409                <1>     mov ah, 09h
   280 00001215 CD21                <1>     int 21h
   281 00001217 F9                  <1>     stc
   282                              <1>     return
    13                              <2> %%_ret:
    14 00001218 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   283                              <1> .noDriveSpecified:
   284                              <1> ;Now we set the two FCB's in the command line
   285 00001219 F6058AEEFFFFFF      <1>     test byte [arg1Flg], -1
   286 00001220 744D                <1>     jz .fcbArgsDone
   287 00001222 0FB60582EEFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   288 00001229 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   289 00001230 4801C6              <1>     add rsi, rax    ;Point to first argument
   290 00001233 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   291 00001237 B801290000          <1>     mov eax, 2901h
   292 0000123C CD21                <1>     int 21h
   293 0000123E 880568EEFFFF        <1>     mov byte [arg1FCBret], al
   294 00001244 F60562EEFFFFFF      <1>     test byte [arg2Flg], -1
   295 0000124B 7422                <1>     jz .fcbArgsDone
   296 0000124D 0FB6055AEEFFFF      <1>     movzx eax, byte [arg2Off]
   297 00001254 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   298 0000125B 4801C6              <1>     add rsi, rax    ;Point to first argument
   299 0000125E 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   300 00001262 B801290000          <1>     mov eax, 2901h
   301 00001267 CD21                <1>     int 21h
   302 00001269 880540EEFFFF        <1>     mov byte [arg2FCBret], al
   303                              <1> .fcbArgsDone:
   304 0000126F 488D1D40F0FFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer, ergh
   305 00001276 488D350AF1FFFF      <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   306 0000127D B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   307 00001282 BAFFFF0000          <1>     mov edx, 0FFFFh
   308 00001287 B5FF                <1>     mov ch, -1
   309 00001289 CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   310 0000128B B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   311 00001290 BAFFFF0000          <1>     mov edx, 0FFFFh
   312 00001295 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   313 00001297 CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   314                              <1>             ;        al = 0  if the command should be executed as usual
   315 00001299 84C0                <1>     test al, al
   316 0000129B 7426                <1>     jz .executeInternal
   317                              <1>     ;Here we execute externally and return to the prompt
   318                              <1>     ; as if it was an internal execution
   319 0000129D 488D1D12F0FFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer, ergh
   320 000012A4 488D35DCF0FFFF      <1>     lea rsi, cmdName        
   321 000012AB B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   322 000012B0 BAFFFF0000          <1>     mov edx, 0FFFFh
   323 000012B5 B5FF                <1>     mov ch, -1
   324 000012B7 CD2F                <1>     int 2Fh
   325 000012B9 803DC7F0FFFF00      <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   326                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000012C0 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000012C2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   327                              <1>     ;Else, we restart the command from scratch.
   328                              <1> .executeInternal:
   329                              <1> ;Now we check if the cmdName is equal to the length of the cmdPathSpec.
   330                              <1> ;If not, then its immediately an external program!
   331 000012C3 E819050000          <1>     call pullCommandline    ;Now pull the tail down
   332 000012C8 488D3D69F0FFFF      <1>     lea rdi, cmdPathSpec
   333 000012CF E890210000          <1>     call strlen ;Get the length of the input command
   334 000012D4 FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   335 000012D6 380DABF0FFFF        <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   336 000012DC 0F85BA1A0000        <1>     jne launchChild     ;If not, a path was specified, exit!
   337                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   338 000012E2 488D1DE9F4FFFF      <1>     lea rbx, functionTable
   339                              <1> .nextEntry:
   340 000012E9 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   341 000012EC 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   342 000012EF 0F84A71A0000        <1>     je launchChild      ;If so, check externally now
   343 000012F5 380D8CF0FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   344 000012FB 7532                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   345                              <1>     ;Here they have the same length so lets see if the name is the same
   346 000012FD 56                  <1>     push rsi
   347                              <1>     ;ecx has the length to compare
   348 000012FE 51                  <1>     push rcx
   349 000012FF 488D7301            <1>     lea rsi, qword [rbx + 1]
   350 00001303 488D3D7EF0FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   351 0000130A F3A6                <1>     rep cmpsb   ;Check the strings are equal
   352 0000130C 59                  <1>     pop rcx
   353 0000130D 5E                  <1>     pop rsi
   354 0000130E 751F                <1>     jne .gotoNextEntry
   355                              <1>     ;Here it was found both strings are equal
   356 00001310 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   357 00001315 480FB71F            <1>     movzx rbx, word [rdi]
   358 00001319 488D3DE0ECFFFF      <1>     lea rdi, startLbl
   359 00001320 4801FB              <1>     add rbx, rdi
   360 00001323 FFD3                <1>     call rbx    ;Call this function...
   361                              <1>     retc    ;Always return with CF=CY on error. Error code set to -1
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001325 72(C2)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   362 00001327 C605DFECFFFF00      <1>     mov byte [returnCode], 0 ;Set the retcode to 0 if ok!
   363                              <1>     return  ;... and return
    13                              <2> %%_ret:
    14 0000132E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   364                              <1> .gotoNextEntry:
   365 0000132F 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   366 00001336 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   367 00001339 EBAE                <1>     jmp short .nextEntry
   368                              <1> 
   369                              <1> redirFailure:
   370 0000133B 488D1549FBFFFF      <1>     lea rdx, redirErrMsg
   371 00001342 B913000000          <1>     mov ecx, redirErrMsgL
   372 00001347 EB0C                <1>     jmp short redirPipeFailureCommon
   373                              <1> pipeFailure:
   374 00001349 488D1524FBFFFF      <1>     lea rdx, pipeErrMsg
   375 00001350 B917000000          <1>     mov ecx, pipeErrMsgL
   376                              <1> redirPipeFailureCommon:
   377                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   378                              <1> ;This routine tries to close whatever handles are not -1 and delete
   379                              <1> ; pipe files if the pipe count is not 0.
   380                              <1> ;It resets all variables and jumps to reset the stack!
   381 00001355 B800400000          <1>     mov eax, 4000h  ;Write handle
   382 0000135A BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   383 0000135F CD21                <1>     int 21h
   384 00001361 0FB7053EEDFFFF      <1>     movzx eax, word [redirSTDIN]
   385 00001368 0FB71531EDFFFF      <1>     movzx edx, word [pipeSTDIN]
   386 0000136F 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   387 00001371 E8D1000000          <1>     call .closeAndReplace
   388 00001376 0FB7052BEDFFFF      <1>     movzx eax, word [redirSTDOUT]
   389 0000137D 0FB7151EEDFFFF      <1>     movzx edx, word [pipeSTDOUT]
   390 00001384 FFC3                <1>     inc ebx         ;Select STDOUT for closing
   391 00001386 E8BC000000          <1>     call .closeAndReplace
   392 0000138B 66C70510EDFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   393 00001394 0FB71D0BEDFFFF      <1>     movzx ebx, word [redirSTDIN]
   394 0000139B E896000000          <1>     call .closeHandle
   395                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   396 000013A0 66C705FDECFFFFFFFF  <1>     mov word [redirSTDIN], -1
   397 000013A9 0FB71DF8ECFFFF      <1>     movzx ebx, word [redirSTDOUT]
   398 000013B0 E881000000          <1>     call .closeHandle
   399 000013B5 66C705EAECFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   400 000013BE 0FB71DDBECFFFF      <1>     movzx ebx, word [pipeSTDIN]
   401 000013C5 E86C000000          <1>     call .closeHandle
   402 000013CA 66C705CDECFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   403 000013D3 0FB71DC8ECFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   404 000013DA E857000000          <1>     call .closeHandle
   405 000013DF 66C705BAECFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   406 000013E8 C605B0ECFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   407 000013EF 488D153DF0FFFF      <1>     lea rdx, qword [pipe1Filespec]
   408 000013F6 803A00              <1>     cmp byte [rdx], 0
   409 000013F9 7407                <1>     jz .checkOld
   410 000013FB B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   411 00001400 CD21                <1>     int 21h
   412                              <1> .checkOld:
   413 00001402 488D1579F0FFFF      <1>     lea rdx, qword [pipe2Filespec]
   414 00001409 803A00              <1>     cmp byte [rdx],0
   415 0000140C 7407                <1>     jz .pipeNamesComplete
   416 0000140E B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   417 00001413 CD21                <1>     int 21h
   418                              <1> .pipeNamesComplete:
   419 00001415 31C0                <1>     xor eax, eax
   420                              <1>     ;Invalidate the pointers and the paths too
   421 00001417 488905B3F0FFFF      <1>     mov qword [newPipe], rax
   422 0000141E 488905B4F0FFFF      <1>     mov qword [oldPipe], rax
   423 00001425 890508F0FFFF        <1>     mov dword [pipe1Filespec], eax
   424 0000142B 890551F0FFFF        <1>     mov dword [pipe2Filespec], eax
   425                              <1> 
   426 00001431 E942FBFFFF          <1>     jmp commandMain ;Retake input from the command line
   427                              <1> .closeHandle:
   428 00001436 81FBFFFFFFFF        <1>     cmp ebx, -1
   429                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000143C 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000143E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   430 0000143F B8003E0000          <1>     mov eax, 3E00h
   431 00001444 CD21                <1>     int 21h
   432                              <1>     return
    13                              <2> %%_ret:
    14 00001446 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   433                              <1> .closeAndReplace:
   434                              <1> ;Input: ax = one possible handle, dx = second possible handle
   435                              <1> ;       bx = handle to close and copy ax/dx into
   436                              <1> ;Output: Handle intervened on. bx preserved
   437 00001447 C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   438 0000144A 09D0                <1>     or eax, edx     ;Form packed
   439 0000144C 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   440                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001451 74(46)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   441 00001453 E8DEFFFFFF          <1>     call .closeHandle
   442 00001458 663DFFFF            <1>     cmp ax, -1      
   443 0000145C 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   444 00001460 53                  <1>     push rbx
   445 00001461 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   446 00001464 B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   447 00001469 CD21                <1>     int 21h
   448 0000146B 5B                  <1>     pop rbx
   449                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000146C 73(46)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   450                              <1>     ;Else we now try to force con to open!
   451 0000146E E8C3FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   452 00001473 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   453 00001478 488D1558FAFFFF      <1>     lea rdx, conName
   454 0000147F CD21                <1>     int 21h
   455                              <1>     return
    13                              <2> %%_ret:
    14 00001481 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   456                              <1> 
   457                              <1> advanceRedir:
   458                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   459                              <1> ;Close stdin redir then stdout redir. 
   460 00001482 F6051BECFFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   461 00001489 0F8585000000        <1>     jnz .redirIn
   462 0000148F F60509ECFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   463 00001496 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   464 0000149C 0FBF05FDEBFFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   465 000014A3 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   466 000014A8 0F84EB000000        <1>     je .pipeOut              
   467                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   468 000014AE 0FB71DEBEBFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   469 000014B5 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   470 000014B7 B800460000          <1>     mov eax, 4600h
   471 000014BC CD21                <1>     int 21h
   472 000014BE 0F8285FEFFFF        <1>     jc pipeFailure
   473 000014C4 B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   474 000014C9 CD21                <1>     int 21h
   475 000014CB 0F8278FEFFFF        <1>     jc pipeFailure
   476 000014D1 488B1501F0FFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   477 000014D8 B800410000          <1>     mov eax, 4100h  ;Delete the file!
   478 000014DD CD21                <1>     int 21h
   479 000014DF 0F8264FEFFFF        <1>     jc pipeFailure
   480 000014E5 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   481 000014E8 66C705AFEBFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   482                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   483                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   484                              <1>     ;Else exit!
   485 000014F1 0FBF05AAEBFFFF      <1>     movsx eax, word [pipeSTDOUT]
   486 000014F8 3DFFFFFFFF          <1>     cmp eax, -1
   487 000014FD 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   488 00001503 C60595EBFFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   489 0000150A F60594EBFFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   490 00001511 753D                <1>     jnz .redirOut               ;Go for it if so!
   491                              <1>     return
    13                              <2> %%_ret:
    14 00001513 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   492                              <1> .redirIn:
   493                              <1> ;Here we clean redirIn
   494 00001514 0FB71D8BEBFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   495 0000151B 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   496 0000151D B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   497 00001522 CD21                <1>     int 21h
   498 00001524 0F8211FEFFFF        <1>     jc redirFailure
   499 0000152A B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   500 0000152F CD21                <1>     int 21h
   501 00001531 0F8204FEFFFF        <1>     jc redirFailure
   502 00001537 66C70566EBFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   503 00001540 C6055DEBFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   504 00001547 F60551EBFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   505 0000154E 7549                <1>     jnz .pipeOut
   506                              <1> .redirOut:
   507 00001550 F6054EEBFFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   508                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001557 74(13)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   509                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   510 00001559 F6053FEBFFFFFF      <1>     test byte [pipeFlag], -1
   511 00001560 7537                <1>     jnz short .pipeOut
   512 00001562 0FB71D3FEBFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   513 00001569 B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   514 0000156E B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   515 00001573 CD21                <1>     int 21h
   516 00001575 0F82C0FDFFFF        <1>     jc redirFailure
   517 0000157B B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   518 00001580 CD21                <1>     int 21h
   519 00001582 0F82B3FDFFFF        <1>     jc redirFailure
   520 00001588 66C70517EBFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   521 00001591 C6050DEBFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   522                              <1>     return
    13                              <2> %%_ret:
    14 00001598 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   523                              <1> .pipeOut:
   524                              <1> ;Duplicate STDIN to save across pipe
   525 00001599 0FBF0502EBFFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   526 000015A0 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   527                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000015A5 74(98)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   528 000015A7 B800450000          <1>     mov eax, 4500h
   529 000015AC 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   530 000015AE CD21                <1>     int 21h
   531 000015B0 0F8293FDFFFF        <1>     jc pipeFailure
   532 000015B6 668905E3EAFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   533                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   534 000015BD B800460000          <1>     mov eax, 4600h
   535 000015C2 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   536 000015C4 FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   537 000015C6 CD21                <1>     int 21h
   538 000015C8 0F827BFDFFFF        <1>     jc pipeFailure
   539                              <1> ;Now return the original stdout to stdout
   540 000015CE 89D9                <1>     mov ecx, ebx
   541 000015D0 0FB71DCBEAFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   542 000015D7 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   543 000015DC CD21                <1>     int 21h
   544 000015DE 0F8265FDFFFF        <1>     jc pipeFailure
   545                              <1> ;Now close the DUP'ed STDOUT
   546 000015E4 B8003E0000          <1>     mov eax, 3E00h
   547 000015E9 CD21                <1>     int 21h
   548 000015EB 0F8258FDFFFF        <1>     jc pipeFailure
   549                              <1> ;Finally unwind STDIN to the beginning of the file
   550 000015F1 B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   551 000015F6 31DB                <1>     xor ebx, ebx    ;STDIN handle
   552 000015F8 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   553 000015FA 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   554 000015FC CD21                <1>     int 21h
   555 000015FE 0F8245FDFFFF        <1>     jc pipeFailure  ;This should never happen
   556 00001604 488B15C6EEFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   557 0000160B 488915C7EEFFFF      <1>     mov qword [oldPipe], rdx
   558 00001612 66C70587EAFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   559                              <1>     return
    13                              <2> %%_ret:
    14 0000161B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   560                              <1> 
   561                              <1> 
   562                              <1> peelRedir:
   563                              <1> ;Checks and sets up redir as appropriate
   564                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   565                              <1> ;       rsi points to the first char after the char in al in cpyBuffer
   566                              <1> ;Output: ZF=NZ => No redir
   567                              <1> ;        ZF=ZY => Redir
   568                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   569                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   570 0000161C 51                  <1>     push rcx
   571 0000161D 57                  <1>     push rdi
   572 0000161E 3C3C                <1>     cmp al, "<"
   573 00001620 740C                <1>     je .inputRedir
   574 00001622 3C3E                <1>     cmp al, ">"
   575 00001624 7427                <1>     je .outputRedir
   576 00001626 3C7C                <1>     cmp al, "|"
   577 00001628 7441                <1>     je .pipeSetup
   578 0000162A F8                  <1>     clc
   579                              <1> .redirExit:
   580 0000162B 5F                  <1>     pop rdi
   581 0000162C 59                  <1>     pop rcx
   582                              <1>     return
    13                              <2> %%_ret:
    14 0000162D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   583                              <1> .inputRedir:
   584 0000162E C6056FEAFFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   585 00001635 488D3D59EDFFFF      <1>     lea rdi, rdrInFilespec
   586                              <1> .redirCommon:
   587 0000163C E83F1E0000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   588 00001641 E86C1F0000          <1>     call cpDelimPathToBufz
   589 00001646 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   590 00001649 30C0                <1>     xor al, al  ;Clear the ZF flag
   591 0000164B EBDE                <1>     jmp short .redirExit
   592                              <1> .outputRedir:
   593 0000164D C60551EAFFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   594 00001654 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   595 00001657 7509                <1>     jne .notDouble
   596 00001659 FE0546EAFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   597 0000165F 48FFC6              <1>     inc rsi ;Go past it too
   598                              <1> .notDouble:
   599 00001662 488D3D7BEDFFFF      <1>     lea rdi, rdrOutFilespec
   600 00001669 EBD1                <1>     jmp short .redirCommon
   601                              <1> .pipeSetup:
   602 0000166B 56                  <1>     push rsi    ;Save rsi pointing to char past |
   603 0000166C E80F1E0000          <1>     call skipDelimiters ;Check if this is a double ||
   604 00001671 803E7C              <1>     cmp byte [rsi], "|" 
   605 00001674 5E                  <1>     pop rsi
   606 00001675 F9                  <1>     stc
   607 00001676 EBB3                <1>     jmp short .redirExit
   608                              <1> 
   609                              <1> setupRedirandPipes:
   610                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   611                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   612 00001678 0F8484000000        <1>     jz .redirIn
   613 0000167E 488D15AEEDFFFF      <1>     lea rdx, pipe1Filespec
   614 00001685 803A00              <1>     cmp byte [rdx], 0
   615 00001688 7410                <1>     jz .pathFound
   616 0000168A 488D15F1EDFFFF      <1>     lea rdx, pipe2Filespec
   617 00001691 803A00              <1>     cmp byte [rdx], 0
   618 00001694 0F85AFFCFFFF        <1>     jnz pipeFailure
   619                              <1> .pathFound:
   620 0000169A 48891530EEFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   621 000016A1 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   622 000016A6 BB01000000          <1>     mov ebx, 1
   623 000016AB CD21                <1>     int 21h
   624 000016AD 0F8296FCFFFF        <1>     jc pipeFailure
   625 000016B3 668905E8E9FFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   626 000016BA E8871D0000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   627 000016BF 0441                <1>     add al, "A"
   628 000016C1 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   629 000016C6 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   630 000016C8 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   631 000016CA 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   632 000016CC B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   633 000016D1 CD21                <1>     int 21h
   634 000016D3 0F8270FCFFFF        <1>     jc pipeFailure
   635                              <1>     ;AX has the handle for this file now, this will become STDOUT
   636                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   637 000016D9 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   638 000016DC B901000000          <1>     mov ecx, 1
   639 000016E1 B800460000          <1>     mov eax, 4600h
   640 000016E6 CD21                <1>     int 21h
   641 000016E8 0F825BFCFFFF        <1>     jc pipeFailure
   642 000016EE B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   643 000016F3 CD21                <1>     int 21h
   644 000016F5 0F824EFCFFFF        <1>     jc pipeFailure
   645 000016FB C6059DE9FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   646                              <1> .redirIn:
   647                              <1> ;Now check if any other redir needs to be setup
   648                              <1> ;Checks and sets up redir as appropriate.
   649                              <1>     ;Setup the redir here for STDIN
   650 00001702 F6059BE9FFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   651 00001709 7449                <1>     jz .redirOut
   652 0000170B 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   653 0000170D B800450000          <1>     mov eax, 4500h
   654 00001712 CD21                <1>     int 21h
   655 00001714 0F8221FCFFFF        <1>     jc redirFailure
   656 0000171A 66890585E9FFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   657 00001721 488D156DECFFFF      <1>     lea rdx, rdrInFilespec
   658 00001728 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   659 0000172D CD21                <1>     int 21h
   660 0000172F 0F8206FCFFFF        <1>     jc redirFailure
   661 00001735 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   662 00001737 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   663 0000173A B800460000          <1>     mov eax, 4600h
   664 0000173F CD21                <1>     int 21h
   665 00001741 0F82F4FBFFFF        <1>     jc redirFailure
   666 00001747 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   667 0000174C CD21                <1>     int 21h
   668 0000174E 0F82E7FBFFFF        <1>     jc redirFailure
   669                              <1> .redirOut:
   670 00001754 F6054AE9FFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   671                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000175B 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000175D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   672 0000175E 803D3DE9FFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   673                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001765 75(5D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   674                              <1>     ;Else setup the redir here for STDOUT
   675 00001767 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   676 0000176C B800450000          <1>     mov eax, 4500h
   677 00001771 CD21                <1>     int 21h
   678 00001773 0F82C2FBFFFF        <1>     jc redirFailure
   679 00001779 66890528E9FFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   680 00001780 488D155DECFFFF      <1>     lea rdx, rdrOutFilespec
   681 00001787 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   682 0000178C CD21                <1>     int 21h
   683 0000178E 730F                <1>     jnc .fileExists
   684 00001790 B8003C0000          <1>     mov eax, 3C00h
   685 00001795 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   686 00001797 CD21                <1>     int 21h
   687 00001799 0F829CFBFFFF        <1>     jc redirFailure
   688                              <1> .fileExists:
   689 0000179F B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   690 000017A4 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   691 000017A7 B800460000          <1>     mov eax, 4600h  ;DUP2
   692 000017AC CD21                <1>     int 21h
   693 000017AE 0F8287FBFFFF        <1>     jc redirFailure
   694 000017B4 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   695 000017B9 CD21                <1>     int 21h
   696 000017BB 0F827AFBFFFF        <1>     jc redirFailure
   697 000017C1 803DDDE8FFFF01      <1>     cmp byte [redirOut], 1
   698                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000017C8 74(5D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   699                              <1>     ;Here we move the file pointer to the end of the file
   700 000017CA 31D2                <1>     xor edx, edx    ;Low order 32 bits
   701 000017CC 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   702 000017CE BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   703 000017D3 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   704 000017D8 CD21                <1>     int 21h
   705 000017DA 0F825BFBFFFF        <1>     jc redirFailure
   706                              <1>     return
    13                              <2> %%_ret:
    14 000017E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   707                              <1> 
   708                              <1> 
   709                              <1> pullCommandline:
   710                              <1> ;This command pulls the command tail down, removing the whole launch command
   711 000017E1 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;rbx points to the de-redired command line 
   712                              <1> ;Skip leading separators
   713                              <1> .pctSkipLeading:
   714 000017E8 AC                  <1>     lodsb   ;Get first char
   715 000017E9 E8A01C0000          <1>     call isALdelimiter
   716 000017EE 74F8                <1>     je .pctSkipLeading
   717 000017F0 48FFCE              <1>     dec rsi
   718                              <1>     ;rsi points to the start of the command
   719 000017F3 488D3D3EEBFFFF      <1>     lea rdi, cmdPathSpec
   720 000017FA E8651C0000          <1>     call strlen ;Get the length of the command
   721 000017FF FFC9                <1>     dec ecx ;Minus the terminating null
   722 00001801 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   723 00001804 280DA1E8FFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   724 0000180A 280D9EE8FFFF        <1>     sub byte [arg2Off], cl
   725 00001810 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   726 00001812 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   727                              <1> .pctPullChars:
   728 00001819 AC                  <1>     lodsb
   729 0000181A AA                  <1>     stosb
   730 0000181B 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   731 0000181D 7404                <1>     je .pctExit
   732 0000181F FFC1                <1>     inc ecx     ;Increment count
   733 00001821 EBF6                <1>     jmp short .pctPullChars 
   734                              <1> .pctExit:
   735 00001823 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   736                              <1>     return
    13                              <2> %%_ret:
    14 0000182A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   737                              <1> 
   738                              <1> batNextLine:
   739                              <1> ;Not yet implemented, if this is set to 1, print error and reset!
   740 0000182B 488D1513000000      <1>     lea rdx, .l1
   741 00001832 B800090000          <1>     mov eax, 0900h
   742 00001837 CD21                <1>     int 21h
   743 00001839 C60570E8FFFF00      <1>     mov byte [batFlag], 0
   744 00001840 E933F7FFFF          <1>     jmp commandMain
   745 00001845 4261746368206D6F64- <1> .l1 db "Batch mode... wait, what? How did you do that?",CR,LF,"$"
   745 0000184E 652E2E2E2077616974- <1>
   745 00001857 2C20776861743F2048- <1>
   745 00001860 6F772064696420796F- <1>
   745 00001869 7520646F2074686174- <1>
   745 00001872 3F0D0A24            <1>
   746                              <1> 
   747                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   748                              <1> ;Input: rsi points to the count byte of a command line
   749 00001876 4150                <1>     push r8
   750 00001878 4151                <1>     push r9
   751 0000187A B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   752 0000187C CD21                <1>     int 21h
   753 0000187E 52                  <1>     push rdx    ;Save on the stack
   754 0000187F 488D1D7AE6FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   755 00001886 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   756 00001888 CD21                <1>     int 21h
   757 0000188A 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   758 0000188D 4989D9              <1>     mov r9, rbx
   759 00001890 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   760 00001897 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   761 0000189C F348A5              <1>     rep movsq   ;Copy command line over
   762                              <1>     ;call doCommandLine
   763 0000189F 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   764 000018A0 B450                <1>     mov ah, 50h ;Set Current PSP
   765 000018A2 CD21                <1>     int 21h
   766 000018A4 4159                <1>     pop r9
   767 000018A6 4158                <1>     pop r8
   768 000018A8 48CF                <1>     iretq
    17                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badSyntaxError:
     7 000018AA 488D15ACF3FFFF      <1>     lea rdx, syntaxErr
     8 000018B1 EB58                <1>     jmp short badCmn
     9                              <1> badEnvSpaceError:
    10 000018B3 488D15BFF0FFFF      <1>     lea rdx, noEnvSpace
    11 000018BA EB4F                <1>     jmp short badCmn
    12                              <1> badAccError:
    13 000018BC 488D1527F3FFFF      <1>     lea rdx, accDenMsg
    14 000018C3 EB46                <1>     jmp short badCmn
    15                              <1> noSelfCopyError:
    16 000018C5 488D15DEF0FFFF      <1>     lea rdx, noSelfCopy
    17 000018CC EB3D                <1>     jmp short badCmn
    18                              <1> badParamError:
    19 000018CE 488D1593F1FFFF      <1>     lea rdx, badParm
    20 000018D5 EB34                <1>     jmp short badCmn
    21                              <1> badDriveError:
    22 000018D7 488D154DF1FFFF      <1>     lea rdx, badDrv
    23 000018DE EB2B                <1>     jmp short badCmn
    24                              <1> badArgError:
    25 000018E0 488D152FF4FFFF      <1>     lea rdx, badArgs
    26 000018E7 EB22                <1>     jmp short badCmn
    27                              <1> badFileError:
    28 000018E9 488D150AF4FFFF      <1>     lea rdx, badSpec
    29 000018F0 EB19                <1>     jmp short badCmn
    30                              <1> badDupFnf:
    31                              <1> ;Hybrid error message
    32 000018F2 488D153EF0FFFF      <1>     lea rdx, dupName
    33 000018F9 EB10                <1>     jmp short badCmn
    34                              <1> badFnf:
    35 000018FB 488D154CF0FFFF      <1>     lea rdx, fnfMsg
    36 00001902 EB07                <1>     jmp short badCmn
    37                              <1> badDirError:
    38 00001904 488D155EF2FFFF      <1>     lea rdx, badDir
    39                              <1> badCmn:
    40 0000190B C605FBE6FFFFFF      <1>     mov byte [returnCode], -1    ;Return code defaults to -1 if error (for now!)
    41 00001912 B800090000          <1>     mov eax, 0900h
    42 00001917 CD21                <1>     int 21h
    43 00001919 F9                  <1>     stc ;Return with CY => Error occured
    44                              <1>     return  ;This will be made nuanced later, to agree with DOS behaviour
    13                              <2> %%_ret:
    14 0000191A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    45                              <1> badCmdError:
    46 0000191B 488D15FAEFFFFF      <1>     lea rdx, badCmd
    47 00001922 EBE7                <1>     jmp short badCmn
    48                              <1> dir:
    49                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    50 00001924 C60538ECFFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    51 0000192B C60532ECFFFF00      <1>     mov byte [dirLineCtr], 0
    52 00001932 C6052CECFFFF00      <1>     mov byte [dirFileCtr], 0
    53 00001939 C60527ECFFFF00      <1>     mov byte [dirSrchDir], 0
    54 00001940 66C70598EBFFFF0000  <1>     mov word [searchSpec], 0
    55 00001949 488D3D99ECFFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    56 00001950 C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    57 00001953 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    57 0000195C 3F                  <1>
    58 0000195D 48894701            <1>     mov qword [rdi + fcb.filename], rax
    59 00001961 C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    60                              <1>     ;Start by scanning for the switches
    61 00001968 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    62 0000196F 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    63                              <1>     ;call skipDelimiters ;Skip leading delimiters
    64                              <1>     ;add rsi, 3  ;Go past the DIR
    65                              <1> .scanNew:
    66 00001972 E8091B0000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    67 00001977 AC                  <1>     lodsb   ;Get this char
    68 00001978 3C0D                <1>     cmp al, CR
    69 0000197A 744D                <1>     je .scanDone
    70 0000197C 3A05AAE6FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    71 00001982 7524                <1>     jne .notSwitch
    72 00001984 AC                  <1>     lodsb   ;Get the next char
    73 00001985 E8E41A0000          <1>     call ucChar
    74 0000198A 3C57                <1>     cmp al, "W"
    75 0000198C 7509                <1>     jne .notWide
    76 0000198E 800DCEEBFFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    77 00001995 EBDB                <1>     jmp short .scanNew
    78                              <1> .notWide:
    79 00001997 3C50                <1>     cmp al, "P"
    80 00001999 0F852FFFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    81 0000199F 800DBDEBFFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    82 000019A6 EBCA                <1>     jmp short .scanNew
    83                              <1> .notSwitch:
    84 000019A8 F605B4EBFFFF04      <1>     test byte [dirFlags], dirFileType
    85 000019AF 0F8519FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    86                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    87 000019B5 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    88 000019B8 E8501C0000          <1>     call copyArgumentToSearchSpec   
    89 000019BD 48FFCE              <1>     dec rsi ;Point back to the terminator char
    90 000019C0 800D9CEBFFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    91 000019C7 EBA9                <1>     jmp short .scanNew
    92                              <1> .scanDone:
    93 000019C9 F60593EBFFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    94 000019D0 7438                <1>     jz .currentDrv
    95                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
    96 000019D2 488D3508EBFFFF      <1>     lea rsi, searchSpec
    97 000019D9 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
    98 000019DD 752B                <1>     jne .currentDrv
    99                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   100 000019DF 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   101 000019E4 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   102 000019E8 B801290000          <1>     mov eax, 2901h   ;Parse filename
   103 000019ED CD21                <1>     int 21h
   104 000019EF 3CFF                <1>     cmp al, -1
   105 000019F1 0F84E0FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   106                              <1>     ;Else the drive in the fcb is valid
   107 000019F7 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   108 000019FC 84C0                <1>     test al, al
   109 000019FE 740A                <1>     jz .currentDrv
   110 00001A00 FEC8                <1>     dec al  ;Convert to 0 based drive number
   111 00001A02 88055EEBFFFF        <1>     mov byte [dirDrv], al
   112 00001A08 EB0B                <1>     jmp short .dirPrintVol
   113                              <1> .currentDrv:
   114 00001A0A E8371A0000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   115 00001A0F 880551EBFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   116                              <1> .dirPrintVol:
   117 00001A15 488D35C5EAFFFF      <1>     lea rsi, searchSpec
   118                              <1> ;Now construct the path on dirSrchDir.
   119 00001A1C 488D3D44EBFFFF      <1>     lea rdi, dirSrchDir
   120 00001A23 0FB6053CEBFFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   121 00001A2A 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   122 00001A2C 0441                <1>     add al, "A" ;Turn into a letter
   123 00001A2E B43A                <1>     mov ah, ":"
   124 00001A30 66AB                <1>     stosw   ;Store X: into the search path
   125 00001A32 B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   126 00001A37 CD2F                <1>     int 2fh
   127 00001A39 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   128 00001A3B 0F8496FEFFFF        <1>     je badDriveError
   129                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   130 00001A41 8A05E4E5FFFF        <1>     mov al, byte [pathSep]
   131 00001A47 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   132 00001A49 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   133 00001A4B AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   134 00001A4C FEC2                <1>     inc dl  ;Increment by 1
   135 00001A4E 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   136 00001A51 B800470000          <1>     mov eax, 4700h  ;Print current working directory
   137 00001A56 CD21                <1>     int 21h
   138 00001A58 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   139                              <1>     ;rsi points to the first char in the provided path.
   140                              <1>     ;rdi points to the first char of the cwd.
   141 00001A5B 31C0                <1>     xor eax, eax
   142                              <1> .goToEndOfCwd:
   143                              <1> ;Move to the end of the string, could use repne?
   144 00001A5D 3807                <1>     cmp byte [rdi], al
   145 00001A5F 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   146 00001A61 48FFC7              <1>     inc rdi
   147 00001A64 EBF7                <1>     jmp short .goToEndOfCwd
   148                              <1> .prepCopy:
   149 00001A66 8A05BFE5FFFF        <1>     mov al, byte [pathSep]
   150 00001A6C 3806                <1>     cmp byte [rsi], al
   151 00001A6E 7412                <1>     je .copyPathLoop
   152 00001A70 B43A                <1>     mov ah, ":"
   153 00001A72 86C4                <1>     xchg al, ah
   154 00001A74 663947FE            <1>     cmp word [rdi - 2], ax
   155 00001A78 7408                <1>     je .copyPathLoop
   156 00001A7A 88E0                <1>     mov al, ah
   157 00001A7C 3847FF              <1>     cmp byte [rdi - 1], al
   158 00001A7F 7401                <1>     je .copyPathLoop
   159 00001A81 AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   160                              <1> .copyPathLoop:
   161 00001A82 AC                  <1>     lodsb
   162 00001A83 3A05A2E5FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   163 00001A89 7509                <1>     jne .checkDot  ;If not, store it
   164                              <1> .lpPathseps:
   165 00001A8B 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   166 00001A8D 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   167 00001A8F 48FFC6              <1>     inc rsi
   168 00001A92 EBF7                <1>     jmp short .lpPathseps
   169                              <1> .checkDot:
   170 00001A94 3C2E                <1>     cmp al, "."
   171 00001A96 7407                <1>     je .dots
   172                              <1> .store:
   173 00001A98 AA                  <1>     stosb
   174 00001A99 84C0                <1>     test al, al ;Was the char we just copied a null?
   175 00001A9B 7472                <1>     jz .exitPathCopy
   176 00001A9D EBE3                <1>     jmp short .copyPathLoop
   177                              <1> .dots:
   178                              <1>     ;Here handle dot and dot dot
   179                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   180                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   181                              <1>     ; by 1. If it is null, go to top of loop.
   182                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   183 00001A9F 8A2586E5FFFF        <1>     mov ah, byte [pathSep]
   184 00001AA5 3867FF              <1>     cmp byte [rdi - 1], ah  
   185 00001AA8 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   186 00001AAA 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   187 00001AAC 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   188 00001AAF 7413                <1>     je .twoDot
   189                              <1>     ;This is only a "current dir" when next char is pathsep or null
   190 00001AB1 3A2574E5FFFF        <1>     cmp ah, byte [pathSep]
   191 00001AB7 7406                <1>     je .skipThisPathsep
   192 00001AB9 84E4                <1>     test ah, ah
   193 00001ABB 74C5                <1>     jz .copyPathLoop
   194 00001ABD EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   195                              <1> .skipThisPathsep:
   196                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   197 00001ABF 48FFC6              <1>     inc rsi ;Point to the pathsep
   198 00001AC2 EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   199                              <1> .twoDot:
   200                              <1>     ;Woohoo, this works!
   201 00001AC4 48FFC6              <1>     inc rsi ;Move past the second dot
   202 00001AC7 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   203 00001AC9 3A255CE5FFFF        <1>     cmp ah, byte [pathSep]
   204 00001ACF 7408                <1>     je .tdOk
   205 00001AD1 84E4                <1>     test ah, ah
   206 00001AD3 0F85F5FDFFFF        <1>     jne badParamError
   207                              <1> .tdOk:
   208 00001AD9 8A054CE5FFFF        <1>     mov al, byte byte [pathSep]
   209 00001ADF 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   210 00001AE3 0F84E5FDFFFF        <1>     je badParamError
   211 00001AE9 4881EF02000000      <1>     sub rdi, 2
   212 00001AF0 31C9                <1>     xor ecx, ecx
   213 00001AF2 FFC9                <1>     dec ecx
   214 00001AF4 FD                  <1>     std
   215 00001AF5 F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   216 00001AF7 FC                  <1>     cld
   217 00001AF8 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   218 00001AFF 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   219 00001B01 0F847BFFFFFF        <1>     jz .copyPathLoop
   220 00001B07 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   221 00001B0A E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   222                              <1> .exitPathCopy:
   223                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   224 00001B0F 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   225 00001B16 8A050FE5FFFF        <1>     mov al, byte [pathSep]
   226 00001B1C B43A                <1>     mov ah, ":"
   227 00001B1E 86C4                <1>     xchg al, ah
   228 00001B20 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   229 00001B24 7409                <1>     je .skipOverwrite
   230 00001B26 88E0                <1>     mov al, ah
   231 00001B28 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   232 00001B2A 7503                <1>     jne .skipOverwrite
   233 00001B2C C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   234                              <1> .skipOverwrite:
   235 00001B2F 488D3531EAFFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   236 00001B36 4889F7              <1>     mov rdi, rsi
   237 00001B39 B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   238 00001B3E CD2F                <1>     int 2fh
   239 00001B40 E8D51A0000          <1>     call scanForWildcards
   240 00001B45 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   241 00001B47 4889F2              <1>     mov rdx, rsi
   242 00001B4A 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   243 00001B4E 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   244                              <1> .notNull:
   245 00001B50 E88C1B0000          <1>     call setDTA ;Set the DTA
   246 00001B55 B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   247 00001B5A B8004E0000          <1>     mov eax, 4E00h ;Find first
   248 00001B5F CD21                <1>     int 21h
   249 00001B61 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   250                              <1> ;Now we have searched for the file, is a directory?
   251 00001B63 F60512E6FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   252 00001B6A 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   253                              <1>     ;Here we are searching IN a directory. Default search pattern!
   254 00001B6C 31C0                <1>     xor eax, eax
   255 00001B6E 31C9                <1>     xor ecx, ecx
   256 00001B70 FFC9                <1>     dec ecx
   257 00001B72 F2AE                <1>     repne scasb
   258 00001B74 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   259 00001B77 EB40                <1>     jmp short .wcDefaultSearch
   260                              <1> .wcSearchPattern:
   261                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   262                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   263 00001B79 31C0                <1>     xor eax, eax
   264 00001B7B 31C9                <1>     xor ecx, ecx
   265 00001B7D FFC9                <1>     dec ecx
   266 00001B7F F2AE                <1>     repne scasb ;Scan forwards
   267                              <1>     ;Here rdi points past the null at the end
   268 00001B81 8A05A4E4FFFF        <1>     mov al, byte [pathSep]
   269 00001B87 31C9                <1>     xor ecx, ecx
   270 00001B89 FFC9                <1>     dec ecx
   271 00001B8B FD                  <1>     std ;Search backwards
   272 00001B8C F2AE                <1>     repne scasb
   273 00001B8E FC                  <1>     cld ;Search forwards again
   274 00001B8F 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   275 00001B92 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   276 00001B96 7503                <1>     jne .wcsp1
   277 00001B98 48FFC7              <1>     inc rdi ;Go one char forwards
   278                              <1> .wcsp1:
   279                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   280 00001B9B 57                  <1>     push rdi
   281 00001B9C 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   282 00001B9E 7503                <1>     jne .wcsp2
   283 00001BA0 48FFC7              <1>     inc rdi
   284                              <1> .wcsp2:
   285 00001BA3 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   286 00001BA6 488D3D3CEAFFFF      <1>     lea rdi, dirSrchFCB
   287 00001BAD B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   288 00001BB2 CD21                <1>     int 21h
   289 00001BB4 5F                  <1>     pop rdi
   290 00001BB5 31C0                <1>     xor eax, eax
   291 00001BB7 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   292                              <1> .wcDefaultSearch:
   293 00001BB9 0FB605A6E9FFFF      <1>     movzx eax, byte [dirDrv] 
   294 00001BC0 E8030F0000          <1>     call volume.dirEP
   295 00001BC5 488D1505F0FFFF      <1>     lea rdx, dirMain    ;Print message intro
   296 00001BCC B409                <1>     mov ah, 09h
   297 00001BCE CD21                <1>     int 21h
   298 00001BD0 C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   299 00001BD3 488D158DE9FFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   300 00001BDA B409                <1>     mov ah, 09h
   301 00001BDC CD21                <1>     int 21h
   302 00001BDE C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   303 00001BE1 488D15DAECFFFF      <1>     lea rdx, crlf2
   304 00001BE8 B409                <1>     mov ah, 09h
   305 00001BEA CD21                <1>     int 21h
   306                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   307                              <1> ;rdi points to the terminating null
   308 00001BEC 8A0539E4FFFF        <1>     mov al, byte [pathSep]
   309 00001BF2 3847FF              <1>     cmp byte [rdi - 1], al
   310 00001BF5 7403                <1>     je .root
   311 00001BF7 48FFC7              <1>     inc rdi
   312                              <1> .root:
   313 00001BFA 48FFCF              <1>     dec rdi ;Point back to the pathsep
   314 00001BFD AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   315 00001BFE 488D35E5E9FFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   316 00001C05 E852190000          <1>     call FCBToAsciiz    ;Terminates for free
   317 00001C0A E801000000          <1>     call .searchForFile
   318                              <1>     return
    13                              <2> %%_ret:
    14 00001C0F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   319                              <1> 
   320                              <1> .searchForFile:
   321 00001C10 E8CC1A0000          <1>     call setDTA
   322 00001C15 B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   323 00001C1A 488D1546E9FFFF      <1>     lea rdx, dirSrchDir
   324 00001C21 B8004E0000          <1>     mov eax, 4E00h ;Find first
   325 00001C26 CD21                <1>     int 21h
   326 00001C28 720B                <1>     jc .dirNoMoreFiles
   327                              <1> .findNext:
   328 00001C2A E878000000          <1>     call .dirPrintFileData  ;Print the file information
   329 00001C2F B44F                <1>     mov ah, 4Fh
   330 00001C31 CD21                <1>     int 21h
   331 00001C33 73F5                <1>     jnc .findNext 
   332                              <1> .dirNoMoreFiles:
   333 00001C35 F60527E9FFFF01      <1>     test byte [dirFlags], dirWideType
   334 00001C3C 740B                <1>     jz .dirNoEndNewLine
   335 00001C3E 488D157AECFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   336 00001C45 B409                <1>     mov ah, 09h
   337 00001C47 CD21                <1>     int 21h
   338                              <1> .dirNoEndNewLine:
   339                              <1>     ;Now we print the number of files and the number of bytes on the disk
   340 00001C49 488D1552F2FFFF      <1>     lea rdx, fourSpc
   341 00001C50 B409                <1>     mov ah, 09h
   342 00001C52 CD21                <1>     int 21h
   343 00001C54 B409                <1>     mov ah, 09h ;Print four Spaces twice
   344 00001C56 CD21                <1>     int 21h
   345 00001C58 0FB60506E9FFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   346 00001C5F E8CA190000          <1>     call printDecimalWord
   347 00001C64 488D159FEDFFFF      <1>     lea rdx, dirOk
   348 00001C6B B409                <1>     mov ah, 09h
   349 00001C6D CD21                <1>     int 21h
   350 00001C6F 488D1531F2FFFF      <1>     lea rdx, threeSpc
   351 00001C76 B409                <1>     mov ah, 09h
   352 00001C78 CD21                <1>     int 21h
   353 00001C7A B800360000          <1>     mov eax, 3600h ;Get disk info
   354 00001C7F 8A15E1E8FFFF        <1>     mov dl, byte [dirDrv]
   355 00001C85 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   356 00001C87 CD21                <1>     int 21h ;Get disk free space info
   357 00001C89 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   358 00001C8C 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   359 00001C8F 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   360 00001C91 F7E1                <1>     mul ecx ;Get bytes per cluster
   361 00001C93 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   362                              <1>     ;rax now has the number of free bytes on the disk
   363 00001C96 E893190000          <1>     call printDecimalWord
   364 00001C9B 488D1572EDFFFF      <1>     lea rdx, bytesOk
   365 00001CA2 B409                <1>     mov ah, 09h
   366 00001CA4 CD21                <1>     int 21h
   367                              <1>     return
    13                              <2> %%_ret:
    14 00001CA6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   368                              <1> 
   369                              <1> .dirPrintFileData:
   370                              <1> ;Use cmdFcb to build the file name with space
   371                              <1> ;Start by print the name (same for both cases)
   372                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   373 00001CA7 F605CEE4FFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   374                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001CAE 75(A6)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   375 00001CB0 488D35CEE4FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   376 00001CB7 488D3D99E4FFFF      <1>     lea rdi, cmdFcb
   377 00001CBE E82B180000          <1>     call asciiFilenameToFCB
   378 00001CC3 488D158DE4FFFF      <1>     lea rdx, cmdFcb
   379 00001CCA B908000000          <1>     mov ecx, 8  ;Print 8 chars
   380 00001CCF BB01000000          <1>     mov ebx, 1  ;STDOUT
   381 00001CD4 B440                <1>     mov ah, 40h ;Write handle
   382 00001CD6 CD21                <1>     int 21h
   383 00001CD8 52                  <1>     push rdx
   384 00001CD9 B220                <1>     mov dl, " "
   385 00001CDB B402                <1>     mov ah, 02h ;Print char
   386 00001CDD CD21                <1>     int 21h
   387 00001CDF 5A                  <1>     pop rdx
   388 00001CE0 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   389 00001CE7 B903000000          <1>     mov ecx, 3  ;Print three chars
   390 00001CEC BB01000000          <1>     mov ebx, 1  ;STDOUT
   391 00001CF1 B440                <1>     mov ah, 40h ;Write handle
   392 00001CF3 CD21                <1>     int 21h
   393 00001CF5 F60567E8FFFF01      <1>     test byte [dirFlags], dirWideType
   394 00001CFC 0F85A8000000        <1>     jnz .widePrint
   395                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   396                              <1>     ;Now check if a DIR
   397 00001D02 F60573E4FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   398 00001D09 7418                <1>     jz .dirPrintNotDir
   399 00001D0B 488D1510EDFFFF      <1>     lea rdx, dirLbl
   400 00001D12 B409                <1>     mov ah, 09h
   401 00001D14 CD21                <1>     int 21h
   402 00001D16 488D158AF1FFFF      <1>     lea rdx, threeSpc
   403 00001D1D B409                <1>     mov ah, 09h
   404 00001D1F CD21                <1>     int 21h
   405 00001D21 EB4F                <1>     jmp short .dirPrintFileDT
   406                              <1> .dirPrintNotDir:
   407                              <1> ;Here we print the file size
   408 00001D23 B220                <1>     mov dl, " "
   409 00001D25 B402                <1>     mov ah, 02h
   410 00001D27 CD21                <1>     int 21h
   411 00001D29 8B0552E4FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   412 00001D2F E86B190000          <1>     call getDecimalWord
   413 00001D34 4889CB              <1>     mov rbx, rcx
   414 00001D37 51                  <1>     push rcx
   415 00001D38 480FCB              <1>     bswap rbx
   416 00001D3B B908000000          <1>     mov ecx, 8
   417                              <1> .dirPrintFileSizePrep:
   418 00001D40 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   419 00001D42 7514                <1>     jne .dirPrintFileSize
   420 00001D44 B402                <1>     mov ah, 02h
   421 00001D46 B220                <1>     mov dl, " "
   422 00001D48 CD21                <1>     int 21h
   423 00001D4A 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   424 00001D4E FFC9                <1>     dec ecx
   425 00001D50 81F901000000        <1>     cmp ecx, 1
   426 00001D56 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   427                              <1> .dirPrintFileSize:
   428 00001D58 5B                  <1>     pop rbx
   429                              <1> .dirPrintFileSizeLoop:
   430 00001D59 88DA                <1>     mov dl, bl
   431 00001D5B B402                <1>     mov ah, 02h
   432 00001D5D CD21                <1>     int 21h
   433 00001D5F 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   434 00001D63 FFC9                <1>     dec ecx
   435 00001D65 75F2                <1>     jnz .dirPrintFileSizeLoop
   436 00001D67 488D153DF1FFFF      <1>     lea rdx, twoSpc
   437 00001D6E B409                <1>     mov ah, 09h
   438 00001D70 CD21                <1>     int 21h
   439                              <1> .dirPrintFileDT:
   440 00001D72 B220                <1>     mov dl, " "
   441 00001D74 B402                <1>     mov ah, 02h
   442 00001D76 CD21                <1>     int 21h
   443 00001D78 0FB70500E4FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   444 00001D7F 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   445 00001D81 E8F6130000          <1>     call printDate
   446 00001D86 488D151EF1FFFF      <1>     lea rdx, twoSpc
   447 00001D8D B409                <1>     mov ah, 09h
   448 00001D8F CD21                <1>     int 21h
   449 00001D91 0FB705E5E3FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   450 00001D98 E801150000          <1>     call printTime
   451 00001D9D 488D151BEBFFFF      <1>     lea rdx, crlf
   452 00001DA4 B409                <1>     mov ah, 09h
   453 00001DA6 CD21                <1>     int 21h
   454 00001DA8 EB0B                <1>     jmp short .dirPrintNameExit
   455                              <1> .widePrint:
   456                              <1> ;If /W, print name space ext space space space space
   457 00001DAA 488D15F1F0FFFF      <1>     lea rdx, fourSpc
   458 00001DB1 B409                <1>     mov ah, 09h ;Print string
   459 00001DB3 CD21                <1>     int 21h
   460                              <1> .dirPrintNameExit:
   461 00001DB5 FE05AAE7FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   462 00001DBB FE05A3E7FFFF        <1>     inc byte [dirLineCtr]
   463 00001DC1 803D9CE7FFFF17      <1>     cmp byte [dirLineCtr], 23
   464                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001DC8 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001DCA C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   465 00001DCB 488D1577ECFFFF      <1>     lea rdx, pauseMes
   466 00001DD2 B409                <1>     mov ah, 09h
   467 00001DD4 CD21                <1>     int 21h
   468 00001DD6 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   469 00001DD8 CD21                <1>     int 21h
   470 00001DDA C60583E7FFFF00      <1>     mov byte [dirLineCtr], 0
   471 00001DE1 488D15D7EAFFFF      <1>     lea rdx, crlf   ;Force new line
   472 00001DE8 B409                <1>     mov ah, 09h
   473 00001DEA CD21                <1>     int 21h
   474                              <1>     return
    13                              <2> %%_ret:
    14 00001DEC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   475                              <1> 
   476                              <1> chdir:
   477 00001DED F605B6E2FFFFFF      <1>     test byte [arg1Flg], -1
   478 00001DF4 754D                <1>     jnz .changeDir
   479                              <1>     ;Print CWD
   480                              <1> .printCWD:
   481 00001DF6 E885150000          <1>     call putCWDInPrompt ;Exactly the same procedure
   482 00001DFB E86D130000          <1>     call printCRLF
   483                              <1>     return
    13                              <2> %%_ret:
    14 00001E00 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   484                              <1> .printDiskCWD:
   485                              <1> ;Print CWD for a specified drive
   486 00001E01 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   487 00001E05 88D0                <1>     mov al, dl
   488 00001E07 0440                <1>     add al, "@" ;Get the UC letter
   489 00001E09 B43A                <1>     mov ah, ":"
   490 00001E0B 488D3DCFE6FFFF      <1>     lea rdi, searchSpec
   491 00001E12 66AB                <1>     stosw   ;Store X:, rdi+=2
   492 00001E14 8A0511E2FFFF        <1>     mov al, byte [pathSep]
   493 00001E1A AA                  <1>     stosb   ;Store pathSep, inc rdi
   494 00001E1B B447                <1>     mov ah, 47h ;Get Current Working Directory
   495 00001E1D 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   496 00001E20 CD21                <1>     int 21h
   497 00001E22 E83D160000          <1>     call strlen
   498 00001E27 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   499 00001E2D B440                <1>     mov ah, 40h ;Write to handle
   500 00001E2F BB01000000          <1>     mov ebx, 1  ;STDOUT
   501 00001E34 488D15A6E6FFFF      <1>     lea rdx, searchSpec
   502 00001E3B CD21                <1>     int 21h
   503 00001E3D E82B130000          <1>     call printCRLF
   504                              <1>     return
    13                              <2> %%_ret:
    14 00001E42 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   505                              <1> .changeDir:
   506 00001E43 8A0563E2FFFF        <1>     mov al, byte [arg1FCBret]
   507 00001E49 3CFF                <1>     cmp al, -1 
   508 00001E4B 0F8486FAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   509 00001E51 E89F170000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   510 00001E56 488D1584E6FFFF      <1>     lea rdx, searchSpec
   511 00001E5D B43B                <1>     mov ah, 3Bh ;CHDIR
   512 00001E5F CD21                <1>     int 21h
   513 00001E61 0F829DFAFFFF        <1>     jc badDirError
   514                              <1>     return
    13                              <2> %%_ret:
    14 00001E67 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   515                              <1> 
   516                              <1> mkdir:
   517 00001E68 F6053BE2FFFFFF      <1>     test byte [arg1Flg], -1
   518 00001E6F 0F846BFAFFFF        <1>     jz badArgError
   519 00001E75 F60531E2FFFFFF      <1>     test byte [arg2Flg], -1
   520 00001E7C 0F855EFAFFFF        <1>     jnz badArgError
   521                              <1>     ;We have exactly one argument
   522 00001E82 8A0524E2FFFF        <1>     mov al, byte [arg1FCBret]
   523 00001E88 3CFF                <1>     cmp al, -1 
   524 00001E8A 0F8447FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   525 00001E90 E860170000          <1>     call buildCommandPath
   526 00001E95 488D1545E6FFFF      <1>     lea rdx, searchSpec
   527 00001E9C B800390000          <1>     mov eax, 3900h  ;MKDIR
   528 00001EA1 CD21                <1>     int 21h
   529                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001EA3 73(67)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   530                              <1> .badMake:   ;Else, bad make
   531 00001EA5 488D15D1ECFFFF      <1>     lea rdx, badMD
   532 00001EAC B800090000          <1>     mov eax, 0900h
   533 00001EB1 CD21                <1>     int 21h
   534                              <1>     return
    13                              <2> %%_ret:
    14 00001EB3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   535                              <1> 
   536                              <1> rmdir:
   537 00001EB4 F605EFE1FFFFFF      <1>     test byte [arg1Flg], -1
   538 00001EBB 0F841FFAFFFF        <1>     jz badArgError
   539 00001EC1 F605E5E1FFFFFF      <1>     test byte [arg2Flg], -1
   540 00001EC8 0F8512FAFFFF        <1>     jnz badArgError
   541                              <1>     ;We have exactly one argument
   542 00001ECE 8A05D8E1FFFF        <1>     mov al, byte [arg1FCBret]
   543 00001ED4 3CFF                <1>     cmp al, -1 
   544 00001ED6 0F84FBF9FFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   545 00001EDC E814170000          <1>     call buildCommandPath
   546 00001EE1 488D15F9E5FFFF      <1>     lea rdx, searchSpec
   547 00001EE8 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   548 00001EED CD21                <1>     int 21h
   549                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001EEF 73(B3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   550                              <1> .badRemove:   ;Else, bad make
   551 00001EF1 488D15A2ECFFFF      <1>     lea rdx, badRD
   552 00001EF8 B800090000          <1>     mov eax, 0900h
   553 00001EFD CD21                <1>     int 21h
   554                              <1>     return
    13                              <2> %%_ret:
    14 00001EFF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   555                              <1> 
   556                              <1> copy:
   557 00001F00 F605A3E1FFFFFF      <1>     test byte [arg1Flg], -1
   558 00001F07 0F84D3F9FFFF        <1>     jz badArgError
   559 00001F0D F60599E1FFFFFF      <1>     test byte [arg2Flg], -1
   560 00001F14 0F84C6F9FFFF        <1>     jz badArgError
   561 00001F1A 0FB6058AE1FFFF      <1>     movzx eax, byte [arg1Off]
   562 00001F21 4C8B05E7E0FFFF      <1>     mov r8, [pspPtr]
   563 00001F28 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   564 00001F2F 4889F3              <1>     mov rbx, rsi    ;Save the ptr to the start of the string in rbx
   565 00001F32 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   566 00001F35 488D3DEDE6FFFF      <1>     lea rdi, srcSpec
   567 00001F3C E871160000          <1>     call cpDelimPathToBufz    
   568 00001F41 0FB60566E1FFFF      <1>     movzx eax, byte [arg2Off]
   569 00001F48 4889DE              <1>     mov rsi, rbx    ;Get back the start of the ptr
   570 00001F4B 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   571 00001F4E 488D3D56E7FFFF      <1>     lea rdi, destSpec
   572 00001F55 E858160000          <1>     call cpDelimPathToBufz   
   573                              <1> ;Before we open, we check if the two filenames are equal
   574                              <1> ; If so, crap out.
   575 00001F5A 488D35C8E6FFFF      <1>     lea rsi, srcSpec
   576 00001F61 488D3D43E7FFFF      <1>     lea rdi, destSpec
   577 00001F68 B81E120000          <1>     mov eax, 121Eh
   578 00001F6D CD2F                <1>     int 2Fh
   579 00001F6F 0F84D3000000        <1>     jz .sameFilename
   580                              <1>     ;Open source with read permission
   581                              <1>     ;Open destination with write permission
   582 00001F75 488D15ADE6FFFF      <1>     lea rdx, srcSpec
   583 00001F7C B8003D0000          <1>     mov eax, 3D00h  ;Read open
   584 00001F81 CD21                <1>     int 21h
   585 00001F83 0F8245F9FFFF        <1>     jc badParamError
   586 00001F89 668905B8E7FFFF      <1>     mov word [sourceHdl], ax
   587                              <1> 
   588 00001F90 0FB7D8              <1>     movzx ebx, ax   ;For bx
   589 00001F93 B800440000          <1>     mov eax, 4400h  ;Get device info in dx
   590 00001F98 CD21                <1>     int 21h
   591 00001F9A 668915ABE7FFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
   592                              <1> 
   593 00001FA1 488D1503E7FFFF      <1>     lea rdx, destSpec
   594 00001FA8 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   595 00001FAD 31C9                <1>     xor ecx, ecx    ;No file attributes
   596 00001FAF CD21                <1>     int 21h
   597 00001FB1 0F82B8000000        <1>     jc .badExit
   598 00001FB7 6689058CE7FFFF      <1>     mov word [destHdl], ax
   599 00001FBE 31F6                <1>     xor esi, esi
   600 00001FC0 488D1587E7FFFF      <1>     lea rdx, copyBuffer
   601                              <1> .copyLoop:
   602 00001FC7 B980000000          <1>     mov ecx, 128
   603 00001FCC 0FB71D75E7FFFF      <1>     movzx ebx, word [sourceHdl]
   604 00001FD3 B43F                <1>     mov ah, 3Fh ;Read
   605 00001FD5 CD21                <1>     int 21h
   606 00001FD7 0F8292000000        <1>     jc .badExit
   607 00001FDD 85C0                <1>     test eax, eax
   608 00001FDF 743A                <1>     jz .okExit
   609 00001FE1 01C6                <1>     add esi, eax
   610 00001FE3 89C1                <1>     mov ecx, eax
   611 00001FE5 0FB71D5EE7FFFF      <1>     movzx ebx, word [destHdl]
   612 00001FEC B440                <1>     mov ah, 40h ;Write
   613 00001FEE CD21                <1>     int 21h
   614 00001FF0 727D                <1>     jc .badExit
   615 00001FF2 3D80000000          <1>     cmp eax, 128    ;Did we read 128 chars?
   616 00001FF7 74CE                <1>     je .copyLoop
   617                              <1>     ;If not char dev, exit
   618 00001FF9 66F7054AE7FFFF8000  <1>     test word [srcHdlInfo], 80h ;Char dev bit set?
   619 00002002 7417                <1>     jz .okExit
   620                              <1>     ;Is handle in cooked or binary mode?
   621 00002004 66F7053FE7FFFF2000  <1>     test word [srcHdlInfo], 20h
   622 0000200D 750C                <1>     jnz .okExit
   623                              <1>     ;Here the char dev must be in cooked mode. Check if the last char was ^Z
   624 0000200F 09C0                <1>     or eax, eax ;Clear upper bits in eax
   625 00002011 488D7C02FF          <1>     lea rdi, qword [rdx + rax - 1]  ;Point to the last char in the buffer
   626 00002016 803F1A              <1>     cmp byte [rdi], EOF ;Was this EOF?
   627 00002019 75AC                <1>     jne .copyLoop   ;Jump if not
   628                              <1> .okExit:
   629 0000201B E832000000          <1>     call .leaveCopyClose
   630 00002020 488D1598E8FFFF      <1>     lea rdx, crlf
   631 00002027 B409                <1>     mov ah, 09h
   632 00002029 CD21                <1>     int 21h
   633 0000202B 488D1570EEFFFF      <1>     lea rdx, fourSpc
   634 00002032 B409                <1>     mov ah, 09h
   635 00002034 CD21                <1>     int 21h
   636 00002036 B402                <1>     mov ah, 02h
   637 00002038 B231                <1>     mov dl, "1" ;1 File(s) copied
   638 0000203A CD21                <1>     int 21h
   639 0000203C 488D15B5E9FFFF      <1>     lea rdx, copyOk
   640 00002043 B409                <1>     mov ah, 09h
   641 00002045 CD21                <1>     int 21h
   642                              <1>     return
    13                              <2> %%_ret:
    14 00002047 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   643                              <1> .sameFilename:
   644 00002048 E805000000          <1>     call .leaveCopyClose ;Close the handles
   645 0000204D E973F8FFFF          <1>     jmp noSelfCopyError
   646                              <1> .leaveCopyClose:
   647 00002052 668B1DEFE6FFFF      <1>     mov bx, word [sourceHdl]
   648 00002059 B8003E0000          <1>     mov eax, 3E00h
   649 0000205E CD21                <1>     int 21h
   650 00002060 668B1DE3E6FFFF      <1>     mov bx, word [destHdl]
   651 00002067 B8003E0000          <1>     mov eax, 3E00h
   652 0000206C CD21                <1>     int 21h
   653                              <1>     return
    13                              <2> %%_ret:
    14 0000206E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   654                              <1> .badExit:
   655                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   656 0000206F 668B1DD2E6FFFF      <1>     mov bx, word [sourceHdl]
   657 00002076 6681FBFFFF          <1>     cmp bx, -1
   658 0000207B 7407                <1>     je .skipSource
   659 0000207D B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   660 00002082 CD21                <1>     int 21h
   661                              <1> .skipSource:
   662 00002084 668B1DBFE6FFFF      <1>     mov bx, word [destHdl]
   663 0000208B 6681FBFFFF          <1>     cmp bx, -1
   664 00002090 0F8438F8FFFF        <1>     je badParamError
   665 00002096 B8003E0000          <1>     mov eax, 3E00h
   666 0000209B CD21                <1>     int 21h
   667 0000209D E92CF8FFFF          <1>     jmp badParamError
   668                              <1> 
   669                              <1> erase:
   670 000020A2 F60501E0FFFFFF      <1>     test byte [arg1Flg], -1
   671 000020A9 0F8431F8FFFF        <1>     jz badArgError
   672 000020AF E82D160000          <1>     call setDTA     ;Start by resetting the DTA
   673 000020B4 E83C150000          <1>     call buildCommandPath   ;Get the relative path to the file
   674                              <1> .dirLp:
   675 000020B9 488D3D21E4FFFF      <1>     lea rdi, searchSpec
   676 000020C0 E873140000          <1>     call findLastPathComponant
   677 000020C5 4889FE              <1>     mov rsi, rdi    ;Save this as the source
   678 000020C8 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
   679 000020CC B03F                <1>     mov al, "?"
   680                              <1>     ;Store question marks in the name field
   681 000020CE 57                  <1>     push rdi
   682 000020CF 48FFC7              <1>     inc rdi ;Goto the first char
   683 000020D2 B90B000000          <1>     mov ecx, 11
   684 000020D7 F3AA                <1>     rep stosb
   685 000020D9 5F                  <1>     pop rdi
   686 000020DA 4889F2              <1>     mov rdx, rsi    ;Save the ptr
   687 000020DD B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
   688 000020E2 CD21                <1>     int 21h
   689 000020E4 3C01                <1>     cmp al, 1
   690 000020E6 0F859C000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
   691                              <1>     ;Else, we now copy back the search pattern over the last componant!
   692                              <1>     ;No dirs to handle in here
   693 000020EC 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
   694 000020F0 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
   695 000020F3 E864140000          <1>     call FCBToAsciiz    ;Null terminates for free
   696                              <1>     ;Count the number of ?'s, if 11, we print the message
   697 000020F8 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
   698 000020FC 31C9                <1>     xor ecx, ecx
   699                              <1> .wcScan:
   700 000020FE AC                  <1>     lodsb
   701 000020FF 3C3F                <1>     cmp al, "?"
   702 00002101 752F                <1>     jne .endCount
   703 00002103 FFC1                <1>     inc ecx
   704 00002105 81F90B000000        <1>     cmp ecx, 11
   705 0000210B 75F1                <1>     jne .wcScan
   706                              <1> .ynmsg:
   707 0000210D 488D1509EAFFFF      <1>     lea rdx, ynMes
   708 00002114 E85B100000          <1>     call printString
   709 00002119 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   710 0000211B CD21                <1>     int 21h ;Get char in al
   711 0000211D E84C130000          <1>     call ucChar ;Uppercase the char
   712 00002122 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
   713 00002124 7407                <1>     je .endCount1
   714 00002126 3C4E                <1>     cmp al, "N"
   715                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002128 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000212A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   716 0000212B EBE0                <1>     jmp short .ynmsg    ;Else, tell me what you want!!!
   717                              <1> .endCount1:
   718 0000212D E83B100000          <1>     call printCRLF
   719                              <1> .endCount:
   720                              <1>     ;Now we copy our search template pathstring to delPath
   721 00002132 488D3DF0E4FFFF      <1>     lea rdi, delPath
   722 00002139 488D35A1E3FFFF      <1>     lea rsi, searchSpec ;Source the chars from here
   723 00002140 E815130000          <1>     call strcpy2         ;Copy the string over to delPath
   724                              <1> .findFile:
   725                              <1>     ;Now we find first/find next our way through the files
   726 00002145 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
   727 00002148 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
   728 0000214A B8004E0000          <1>     mov eax, 4E00h  ;Find first
   729 0000214F CD21                <1>     int 21h
   730 00002151 0F82A4F7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   731                              <1>     ;Now the file was found, we copy the name over, delete and keep going
   732 00002157 E8DC130000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
   733 0000215C 488D3522E0FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   734                              <1> .delNextFile:
   735                              <1> ;rsi and rdi dont move here
   736 00002163 E8F2120000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
   737 00002168 488D15BAE4FFFF      <1>     lea rdx, delPath
   738 0000216F B800410000          <1>     mov eax, 4100h  ;Delete File 
   739 00002174 CD21                <1>     int 21h         ;If this fails to delete it, fail silently
   740 00002176 488D1564E3FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
   741 0000217D B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
   742 00002182 CD21                <1>     int 21h
   743 00002184 73DD                <1>     jnc .delNextFile    
   744 00002186 F8                  <1>     clc ;Clear carry to indicate success
   745                              <1>     return
    13                              <2> %%_ret:
    14 00002187 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   746                              <1> .noWildcard:
   747                              <1>     ;Here we just check that the file was not a directory. If it was, we add
   748                              <1>     ; a \*.*<NUL> over the null terminator
   749 00002188 488D1552E3FFFF      <1>     lea rdx, searchSpec
   750 0000218F B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
   751 00002194 B8004E0000          <1>     mov eax, 4E00h  ;Find first
   752 00002199 CD21                <1>     int 21h
   753 0000219B 0F825AF7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   754 000021A1 F605D4DFFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   755 000021A8 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
   756                              <1>     ;Else, we are dealing with a dir
   757 000021AA 4889D7              <1>     mov rdi, rdx
   758 000021AD 31C9                <1>     xor ecx, ecx
   759 000021AF FFC9                <1>     dec ecx
   760 000021B1 F2AE                <1>     repne scasb ;Go to the end of the line!
   761 000021B3 48FFCF              <1>     dec rdi
   762 000021B6 0FB6056EDEFFFF      <1>     movzx eax, byte [pathSep]
   763 000021BD AA                  <1>     stosb
   764 000021BE B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
   765 000021C3 AB                  <1>     stosd
   766 000021C4 E9F0FEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
   767                              <1> .delMain:   ;Call with rdx -> buffer!
   768 000021C9 B800410000          <1>     mov eax, 4100h  ;Delete File 
   769 000021CE CD21                <1>     int 21h
   770                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000021D0 73(87)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   771 000021D2 3C05                <1>     cmp al, errAccDen
   772 000021D4 0F84E2F6FFFF        <1>     je badAccError ;If the file is RO, fail!
   773 000021DA E90AF7FFFF          <1>     jmp badFileError
   774                              <1>     return
    13                              <2> %%_ret:
    14 000021DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   775                              <1> date:
   776 000021E0 488D15B9E8FFFF      <1>     lea rdx, curDate
   777 000021E7 B409                <1>     mov ah, 09h
   778 000021E9 CD21                <1>     int 21h
   779 000021EB B42A                <1>     mov ah, 2Ah ;DOS get date
   780 000021ED CD21                <1>     int 21h
   781                              <1> 	;AL = day of the week (0=Sunday)
   782                              <1> 	;CX = year (1980-2099)
   783                              <1> 	;DH = month (1-12)
   784                              <1> 	;DL = day (1-31)
   785 000021EF 66890D2FE4FFFF      <1>     mov word [td1], cx
   786 000021F6 88152BE4FFFF        <1>     mov byte [td3], dl
   787 000021FC 883526E4FFFF        <1>     mov byte [td4], dh
   788 00002202 0FB6C0              <1>     movzx eax, al
   789 00002205 89C3                <1>     mov ebx, eax
   790 00002207 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   791 00002209 01D8                <1>     add eax, ebx ;Make it 3 times 
   792 0000220B 488D156AE8FFFF      <1>     lea rdx, dayName
   793 00002212 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   794 00002216 B903000000          <1>     mov ecx, 3  ;Print three chars
   795 0000221B BB01000000          <1>     mov ebx, 1  ;STDOUT
   796 00002220 B440                <1>     mov ah, 40h ;Write to handle
   797 00002222 CD21                <1>     int 21h
   798 00002224 B220                <1>     mov dl, " "
   799 00002226 B402                <1>     mov ah, 02h
   800 00002228 CD21                <1>     int 21h
   801                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   802                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   803                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   804 0000222A 0FB705F4E3FFFF      <1>     movzx eax, word [td1]   ;Get this word
   805 00002231 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   806 00002234 0FB61DEDE3FFFF      <1>     movzx ebx, byte [td4]
   807 0000223B C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   808 0000223E 09D8                <1>     or eax, ebx ;Add this date to eax
   809 00002240 0FB61DE0E3FFFF      <1>     movzx ebx, byte [td3]
   810 00002247 09D8                <1>     or eax, ebx
   811 00002249 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   812 0000224E E8290F0000          <1>     call printDate
   813                              <1> 
   814 00002253 488D1557E8FFFF      <1>     lea rdx, newDate
   815 0000225A B409                <1>     mov ah, 09h
   816 0000225C CD21                <1>     int 21h
   817 0000225E 488D156BE8FFFF      <1>     lea rdx, ukDate
   818 00002265 488D0557E8FFFF      <1>     lea rax, usDate
   819 0000226C 488D1D6AE8FFFF      <1>     lea rbx, jpDate
   820 00002273 803DBCDDFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   821 0000227A 480F47D3            <1>     cmova rdx, rbx
   822 0000227E 480F42D0            <1>     cmovb rdx, rax
   823 00002282 B409                <1>     mov ah, 09h
   824 00002284 CD21                <1>     int 21h
   825                              <1> 
   826 00002286 488D1525DFFFFF      <1>     lea rdx, inBuffer
   827 0000228D C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
   828 00002290 B40A                <1>     mov ah, 0Ah
   829 00002292 CD21                <1>     int 21h
   830 00002294 52                  <1>     push rdx
   831 00002295 488D1523E6FFFF      <1>     lea rdx, crlf
   832 0000229C B409                <1>     mov ah, 09h
   833 0000229E CD21                <1>     int 21h
   834 000022A0 5A                  <1>     pop rdx
   835 000022A1 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   836                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000022A5 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000022A7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   837                              <1>     return
    13                              <2> %%_ret:
    14 000022A8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   838                              <1> 
   839                              <1> time:
   840 000022A9 488D1549E8FFFF      <1>     lea rdx, curTime
   841 000022B0 B409                <1>     mov ah, 09h
   842 000022B2 CD21                <1>     int 21h
   843 000022B4 B42C                <1>     mov ah, 2Ch ;DOS get time
   844 000022B6 CD21                <1>     int 21h
   845                              <1>     ;CH = hour (0-23)
   846                              <1> 	;CL = minutes (0-59)
   847                              <1> 	;DH = seconds (0-59)
   848                              <1> 	;DL = hundredths (0-99)
   849 000022B8 880D67E3FFFF        <1>     mov byte [td1], cl
   850 000022BE 882D62E3FFFF        <1>     mov byte [td2], ch
   851 000022C4 88155DE3FFFF        <1>     mov byte [td3], dl
   852 000022CA 883558E3FFFF        <1>     mov byte [td4], dh
   853 000022D0 0FB6C5              <1>     movzx eax, ch
   854 000022D3 E838100000          <1>     call printTime.printHours
   855                              <1> 
   856 000022D8 8A1565DDFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   857 000022DE B402                <1>     mov ah, 02h
   858 000022E0 CD21                <1>     int 21h
   859                              <1> 
   860 000022E2 0FB6053CE3FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   861 000022E9 E812100000          <1>     call printTime.printMinutesAlt
   862                              <1> 
   863 000022EE 8A154FDDFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   864 000022F4 B402                <1>     mov ah, 02h
   865 000022F6 CD21                <1>     int 21h
   866                              <1> 
   867 000022F8 0FB60529E3FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   868 000022FF E8FC0F0000          <1>     call printTime.printMinutesAlt
   869                              <1> 
   870 00002304 B22E                <1>     mov dl, "."
   871 00002306 B402                <1>     mov ah, 02h
   872 00002308 CD21                <1>     int 21h
   873                              <1> 
   874 0000230A 0FB60516E3FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   875 00002311 E8EA0F0000          <1>     call printTime.printMinutesAlt
   876                              <1> 
   877 00002316 488D15EDE7FFFF      <1>     lea rdx, newTime
   878 0000231D B409                <1>     mov ah, 09h
   879 0000231F CD21                <1>     int 21h
   880                              <1> 
   881 00002321 488D158ADEFFFF      <1>     lea rdx, inBuffer
   882 00002328 C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
   883 0000232B B40A                <1>     mov ah, 0Ah
   884 0000232D CD21                <1>     int 21h
   885 0000232F 52                  <1>     push rdx
   886 00002330 488D1588E5FFFF      <1>     lea rdx, crlf
   887 00002337 B409                <1>     mov ah, 09h
   888 00002339 CD21                <1>     int 21h
   889 0000233B 5A                  <1>     pop rdx
   890 0000233C 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   891                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002340 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002342 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   892                              <1>     return
    13                              <2> %%_ret:
    14 00002343 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   893                              <1> ctty:
   894 00002344 F6055FDDFFFFFF      <1>     test byte [arg1Flg], -1
   895 0000234B 0F848FF5FFFF        <1>     jz badArgError
   896 00002351 F60555DDFFFFFF      <1>     test byte [arg2Flg], -1
   897 00002358 0F8582F5FFFF        <1>     jnz badArgError
   898 0000235E 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   899 00002365 0FB6053FDDFFFF      <1>     movzx eax, byte [arg1Off]
   900 0000236C 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   901 0000236F 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   902 00002373 750F                <1>     jne .noDrive
   903 00002375 0FB60530DDFFFF      <1>     movzx eax, byte [arg1FCBret]
   904 0000237C 3CFF                <1>     cmp al, -1
   905 0000237E 0F8453F5FFFF        <1>     je badDriveError
   906                              <1> .noDrive:
   907                              <1>     ;Now we open the provided file
   908 00002384 E884120000          <1>     call copyArgumentToSearchSpec
   909 00002389 488D1551E1FFFF      <1>     lea rdx, searchSpec
   910 00002390 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   911 00002395 CD21                <1>     int 21h
   912 00002397 0F824CF5FFFF        <1>     jc badFileError
   913 0000239D 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   914 000023A0 B800440000          <1>     mov eax, 4400h  ;Get device word
   915 000023A5 CD21                <1>     int 21h
   916 000023A7 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   917 000023AA 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   918                              <1>     ;Now we set this handle to be STDIO
   919 000023AC 80CA03              <1>     or dl, 3    ;Set STDIO bits
   920 000023AF 30F6                <1>     xor dh, dh
   921 000023B1 B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   922 000023B6 CD21                <1>     int 21h
   923                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   924 000023B8 31C9                <1>     xor ecx, ecx    ;STDIN
   925 000023BA B446                <1>     mov ah, 46h
   926 000023BC CD21                <1>     int 21h
   927 000023BE FFC1                <1>     inc ecx         ;STDOUT
   928 000023C0 B446                <1>     mov ah, 46h
   929 000023C2 CD21                <1>     int 21h
   930 000023C4 FFC1                <1>     inc ecx         ;STDERR
   931 000023C6 B446                <1>     mov ah, 46h
   932 000023C8 CD21                <1>     int 21h
   933 000023CA B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   934 000023CC CD21                <1>     int 21h
   935                              <1>     return
    13                              <2> %%_ret:
    14 000023CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   936                              <1> .badCharDev:
   937 000023CF 488D1564E8FFFF      <1>     lea rdx, badDev
   938 000023D6 B409                <1>     mov ah, 09h
   939 000023D8 CD21                <1>     int 21h
   940 000023DA B43E                <1>     mov ah, 3Eh ;Close opened handle
   941 000023DC CD21                <1>     int 21h
   942                              <1>     return
    13                              <2> %%_ret:
    14 000023DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   943                              <1> 
   944                              <1> cls:  
   945 000023DF B800440000          <1>     mov eax, 4400h  ;Get device info
   946 000023E4 BB01000000          <1>     mov ebx, 1      ;for handle 1
   947 000023E9 CD21                <1>     int 21h         ;in dx
   948 000023EB F7C280000000        <1>     test edx, devCharDev
   949 000023F1 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   950 000023F3 F7C210000000        <1>     test edx, charDevFastOut
   951 000023F9 743E                <1>     jz .doAnsi
   952                              <1>     ;Test if Int 29h uses Int 30h
   953                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   954                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
   955 000023FB B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
   956 00002400 CD21                <1>     int 21h
   957                              <1> .biosCheck:
   958 00002402 66813BCD30          <1>     cmp word [rbx], 30CDh
   959 00002407 740C                <1>     je .biosConfirmed
   960 00002409 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   961 0000240E 7429                <1>     je .doAnsi
   962 00002410 48FFC3              <1>     inc rbx
   963 00002413 EBED                <1>     jmp short .biosCheck
   964                              <1> .biosConfirmed:
   965                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   966 00002415 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   967 00002417 31DB                <1>     xor ebx, ebx
   968 00002419 CD30                <1>     int 30h
   969 0000241B B40F                <1>     mov ah, 0Fh ;Get screen mode
   970 0000241D CD30                <1>     int 30h
   971 0000241F 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   972 00002422 FECA                <1>     dec dl
   973 00002424 B619                <1>     mov dh, 25  ;Number of rows is standard
   974 00002426 31C0                <1>     xor eax, eax
   975 00002428 89C1                <1>     mov ecx, eax
   976 0000242A B707                <1>     mov bh, 7   ;Screen attributes
   977 0000242C B406                <1>     mov ah, 6   ;Scroll
   978 0000242E CD30                <1>     int 30h
   979 00002430 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   980 00002432 B700                <1>     mov bh, 0   ;Page 0
   981 00002434 B402                <1>     mov ah, 2
   982 00002436 CD30                <1>     int 30h
   983                              <1>     return
    13                              <2> %%_ret:
    14 00002438 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   984                              <1> .doAnsi:
   985                              <1> ;4 chars in the ansi routine
   986                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   987                              <1> ; understand ANSI codes
   988 00002439 488D355EEAFFFF      <1>     lea rsi, ansiCls
   989 00002440 B904000000          <1>     mov ecx, 4
   990 00002445 B406                <1>     mov ah, 06h ;Raw char output
   991                              <1> .ansiLp:
   992 00002447 AC                  <1>     lodsb   ;Get the char in 
   993 00002448 88C2                <1>     mov dl, al
   994 0000244A CD21                <1>     int 21h
   995 0000244C FFC9                <1>     dec ecx
   996 0000244E 75F7                <1>     jnz .ansiLp
   997                              <1>     return
    13                              <2> %%_ret:
    14 00002450 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   998                              <1> 
   999                              <1> break:
  1000 00002451 F60552DCFFFFFF      <1>     test byte [arg1Flg], -1
  1001 00002458 752D                <1>     jnz .argumentProvided
  1002                              <1>     ;Here we just get the status of break
  1003 0000245A B800330000          <1>     mov eax, 3300h  ;Get break status in dl
  1004 0000245F CD21                <1>     int 21h
  1005 00002461 88D3                <1>     mov bl, dl
  1006 00002463 488D1572E8FFFF      <1>     lea rdx, breakIs
  1007 0000246A B409                <1>     mov ah, 09h
  1008 0000246C CD21                <1>     int 21h
  1009 0000246E 488D1562E8FFFF      <1>     lea rdx, onMes
  1010 00002475 488D0D55E8FFFF      <1>     lea rcx, offMes
  1011 0000247C 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1012 0000247E 480F44D1            <1>     cmovz rdx, rcx
  1013 00002482 B409                <1>     mov ah, 09h
  1014 00002484 CD21                <1>     int 21h
  1015                              <1>     return
    13                              <2> %%_ret:
    14 00002486 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1016                              <1> .argumentProvided:
  1017 00002487 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1018 0000248B AD                  <1>     lodsd   ;Read the word
  1019 0000248C 89C3                <1>     mov ebx, eax
  1020 0000248E 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1021 00002493 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1022 00002496 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1023 0000249B 7416                <1>     je .maybeOn
  1024 0000249D 663D4F46            <1>     cmp ax, "OF"
  1025 000024A1 7523                <1>     jne .badOnOff
  1026 000024A3 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1027 000024A8 6681FB4620          <1>     cmp bx, "F "
  1028 000024AD 7517                <1>     jne .badOnOff
  1029                              <1>     ;Set off
  1030 000024AF 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1031 000024B1 EB0B                <1>     jmp short .setBreak
  1032                              <1> .maybeOn:
  1033 000024B3 663D4F4E            <1>     cmp ax, "ON"
  1034 000024B7 750D                <1>     jne .badOnOff
  1035                              <1>     ;Set on
  1036 000024B9 BA01000000          <1>     mov edx, 1
  1037                              <1> .setBreak:
  1038 000024BE B801330000          <1>     mov eax, 3301h  ;Set break
  1039 000024C3 CD21                <1>     int 21h
  1040                              <1>     return
    13                              <2> %%_ret:
    14 000024C5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1041                              <1> .badOnOff:
  1042 000024C6 488D15E1E9FFFF      <1>     lea rdx, badOnOff
  1043 000024CD B409                <1>     mov ah, 09h
  1044 000024CF CD21                <1>     int 21h
  1045                              <1>     return
    13                              <2> %%_ret:
    14 000024D1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1046                              <1> 
  1047                              <1> verify:
  1048 000024D2 F605D1DBFFFFFF      <1>     test byte [arg1Flg], -1
  1049 000024D9 752D                <1>     jnz .argumentProvided
  1050                              <1>     ;Here we just get the status of break
  1051 000024DB B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1052 000024E0 CD21                <1>     int 21h
  1053 000024E2 88C3                <1>     mov bl, al
  1054 000024E4 488D15FBE7FFFF      <1>     lea rdx, verifyIs
  1055 000024EB B409                <1>     mov ah, 09h
  1056 000024ED CD21                <1>     int 21h
  1057 000024EF 488D15E1E7FFFF      <1>     lea rdx, onMes
  1058 000024F6 488D0DD4E7FFFF      <1>     lea rcx, offMes
  1059 000024FD 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1060 000024FF 480F44D1            <1>     cmovz rdx, rcx
  1061 00002503 B409                <1>     mov ah, 09h
  1062 00002505 CD21                <1>     int 21h
  1063                              <1>     return
    13                              <2> %%_ret:
    14 00002507 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1064                              <1> .argumentProvided:
  1065 00002508 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1066 0000250C AD                  <1>     lodsd   ;Read the word
  1067 0000250D 89C3                <1>     mov ebx, eax
  1068 0000250F 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1069 00002514 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1070 00002517 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1071 0000251C 7416                <1>     je .maybeOn
  1072 0000251E 663D4F46            <1>     cmp ax, "OF"
  1073 00002522 751F                <1>     jne .badOnOff
  1074 00002524 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1075 00002529 6681FB4620          <1>     cmp bx, "F "
  1076 0000252E 7513                <1>     jne .badOnOff
  1077                              <1>     ;Set off
  1078 00002530 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1079 00002532 EB0A                <1>     jmp short .setVerify
  1080                              <1> .maybeOn:
  1081 00002534 663D4F4E            <1>     cmp ax, "ON"
  1082 00002538 7509                <1>     jne .badOnOff
  1083                              <1>     ;Set on
  1084 0000253A 31C0                <1>     xor eax, eax
  1085 0000253C FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1086                              <1> .setVerify:
  1087 0000253E B42E                <1>     mov ah, 2Eh  ;Set Verify
  1088 00002540 CD21                <1>     int 21h
  1089                              <1>     return
    13                              <2> %%_ret:
    14 00002542 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1090                              <1> .badOnOff:
  1091 00002543 488D1564E9FFFF      <1>     lea rdx, badOnOff
  1092 0000254A B409                <1>     mov ah, 09h
  1093 0000254C CD21                <1>     int 21h
  1094                              <1>     return
    13                              <2> %%_ret:
    14 0000254E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1095                              <1> 
  1096                              <1> rename:
  1097 0000254F F60554DBFFFFFF      <1>     test byte [arg1Flg], -1
  1098 00002556 0F8484F3FFFF        <1>     jz badArgError
  1099 0000255C F6054ADBFFFFFF      <1>     test byte [arg2Flg], -1
  1100 00002563 0F8477F3FFFF        <1>     jz badArgError    
  1101                              <1>     ;Initialise the variables!
  1102 00002569 488D35B9E0FFFF      <1>     lea rsi, srcSpec
  1103 00002570 488935B6E1FFFF      <1>     mov qword [srcPtr], rsi
  1104 00002577 488D352DE1FFFF      <1>     lea rsi, destSpec
  1105 0000257E 488935B0E1FFFF      <1>     mov qword [destPtr], rsi
  1106                              <1>     ;Check the second path is just a filename!
  1107 00002585 0FB60522DBFFFF      <1>     movzx eax, byte [arg2Off]
  1108 0000258C 4C8B057CDAFFFF      <1>     mov r8, qword [pspPtr]
  1109 00002593 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1110 0000259A 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1111 0000259D 488D3D3DDFFFFF      <1>     lea rdi, searchSpec
  1112 000025A4 57                  <1>     push rdi
  1113 000025A5 E808100000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1114 000025AA 5F                  <1>     pop rdi
  1115 000025AB 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1116 000025AF 0F842BF3FFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1117 000025B5 4889FE              <1>     mov rsi, rdi
  1118                              <1> .destScan:
  1119 000025B8 AC                  <1>     lodsb   ;Get the char
  1120 000025B9 3A056CDAFFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1121 000025BF 0F841BF3FFFF        <1>     je badArgError
  1122 000025C5 84C0                <1>     test al, al
  1123 000025C7 75EF                <1>     jnz .destScan
  1124                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1125 000025C9 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1126 000025CD 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1126 000025D6 3F                  <1>
  1127 000025D7 B903000000          <1>     mov ecx, 3  ;24 bytes
  1128 000025DC F348AB              <1>     rep stosq
  1129 000025DF AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1130 000025E0 488D35FADEFFFF      <1>     lea rsi, searchSpec
  1131 000025E7 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1132 000025EB B80D290000          <1>     mov eax, 290Dh
  1133 000025F0 CD21                <1>     int 21h     
  1134 000025F2 50                  <1>     push rax    ;Save the WC signature
  1135 000025F3 E8FD0F0000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1136 000025F8 488D3DE2DEFFFF      <1>     lea rdi, searchSpec
  1137 000025FF E8340F0000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1138 00002604 4889FE              <1>     mov rsi, rdi
  1139 00002607 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1140 0000260A 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1141 0000260E B80D290000          <1>     mov eax, 290Dh
  1142 00002613 CD21                <1>     int 21h
  1143 00002615 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1144 00002616 88CC                <1>     mov ah, cl
  1145 00002618 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1146 0000261B 0F84EC000000        <1>     jz .noWC
  1147 00002621 488D35B9DEFFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1148                              <1>     ;Now we check if we have a path to actually handle
  1149 00002628 4839F3              <1>     cmp rbx, rsi
  1150 0000262B 7444                <1>     je .noPath
  1151 0000262D C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1152 00002631 488D35A9DEFFFF      <1>     lea rsi, searchSpec
  1153 00002638 488D3DEADFFFFF      <1>     lea rdi, srcSpec
  1154 0000263F 56                  <1>     push rsi
  1155 00002640 E8060E0000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1156 00002645 5E                  <1>     pop rsi
  1157 00002646 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1158 00002649 8A05DCD9FFFF        <1>     mov al, byte [pathSep]
  1159 0000264F AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1160 00002650 48893DD6E0FFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1161 00002657 488D3D4DE0FFFF      <1>     lea rdi, destSpec
  1162 0000265E E8E80D0000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1163 00002663 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1164 00002666 AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1165 00002667 48893DC7E0FFFF      <1>     mov qword [destPtr], rdi
  1166 0000266E 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1167                              <1> .noPath:
  1168                              <1>     ;Now we have where to copy the files to, we can start our work!
  1169 00002671 E86B100000          <1>     call setDTA
  1170 00002676 488D1564DEFFFF      <1>     lea rdx, searchSpec
  1171 0000267D 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1172 0000267F B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1173 00002684 CD21                <1>     int 21h
  1174 00002686 0F8266F2FFFF        <1>     jc badDupFnf    ;If no file was found!
  1175                              <1> .wcLoop:
  1176                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1177 0000268C 488D35F2DAFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1178 00002693 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1179 00002697 B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1180 0000269C CD21                <1>     int 21h 
  1181                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1182 0000269E 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1183 000026A2 488D3D94E0FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1184 000026A9 57                  <1>     push rdi
  1185 000026AA 48A5                <1>     movsq
  1186 000026AC 66A5                <1>     movsw
  1187 000026AE A4                  <1>     movsb
  1188 000026AF 5F                  <1>     pop rdi
  1189 000026B0 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1190 000026B4 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1191                              <1> .wcNameMake:
  1192 000026B9 AC                  <1>     lodsb   ;Get the char from the source string
  1193 000026BA 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1194 000026BD 7502                <1>     jne .noStore    ;Dont store the char there
  1195 000026BF 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1196                              <1> .noStore:
  1197 000026C1 48FFC7              <1>     inc rdi ;Goto next char position
  1198 000026C4 FFC9                <1>     dec ecx
  1199 000026C6 75F1                <1>     jnz .wcNameMake
  1200                              <1> ;renName now has the FCB name for the file we wish to make!
  1201                              <1> ;Now make the two paths!
  1202 000026C8 488D35B6DAFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1203 000026CF 488B3D57E0FFFF      <1>     mov rdi, qword [srcPtr]
  1204 000026D6 E8700D0000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1205 000026DB 488D355BE0FFFF      <1>     lea rsi, renName
  1206 000026E2 488B3D4CE0FFFF      <1>     mov rdi, qword [destPtr]
  1207 000026E9 E86E0E0000          <1>     call FCBToAsciiz
  1208 000026EE 488D1534DFFFFF      <1>     lea rdx, srcSpec
  1209 000026F5 488D3DAFDFFFFF      <1>     lea rdi, destSpec
  1210 000026FC B800560000          <1>     mov eax, 5600h
  1211 00002701 CD21                <1>     int 21h     ;Fail silently on wildcard rename
  1212 00002703 B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1213 00002708 CD21                <1>     int 21h
  1214 0000270A 7380                <1>     jnc .wcLoop     ;And process it too!
  1215                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 0000270C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1216                              <1> .noWC:
  1217 0000270D E8E30E0000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1218 00002712 0FB60595D9FFFF      <1>     movzx eax, byte [arg2Off]
  1219 00002719 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1220 00002720 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1221 00002723 488D3D81DFFFFF      <1>     lea rdi, destSpec
  1222 0000272A 57                  <1>     push rdi
  1223 0000272B E8820E0000          <1>     call cpDelimPathToBufz
  1224 00002730 5F                  <1>     pop rdi
  1225 00002731 488D15A9DDFFFF      <1>     lea rdx, searchSpec
  1226 00002738 B800560000          <1>     mov eax, 5600h
  1227 0000273D CD21                <1>     int 21h
  1228                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000273F 73(0C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1229 00002741 E9ACF1FFFF          <1>     jmp badDupFnf   ;Always just return this
  1230                              <1> 
  1231                              <1> 
  1232                              <1> touch:
  1233                              <1> ;Temporarily used to create files
  1234 00002746 F6055DD9FFFFFF      <1>     test byte [arg1Flg], -1
  1235 0000274D 0F848DF1FFFF        <1>     jz badArgError
  1236 00002753 E89D0E0000          <1>     call buildCommandPath
  1237 00002758 488D1582DDFFFF      <1>     lea rdx, searchSpec
  1238 0000275F B8005B0000          <1>     mov eax, 5B00h  ;Create unique file 
  1239 00002764 31C9                <1>     xor ecx, ecx
  1240 00002766 CD21                <1>     int 21h
  1241 00002768 721D                <1>     jc .touch1
  1242                              <1> .touchClose:
  1243 0000276A 0FB7D8              <1>     movzx ebx, ax   ;Save the handle here
  1244 0000276D B80D120000          <1>     mov eax, 120Dh  ;Get date/time words from the DOS
  1245 00002772 CD2F                <1>     int 2fh
  1246 00002774 89C1                <1>     mov ecx, eax    ;Move the time here
  1247 00002776 87D1                <1>     xchg edx, ecx   ;Get them in the right place
  1248 00002778 B801570000          <1>     mov eax, 5701h  ;Set the date/time for bx
  1249 0000277D CD21                <1>     int 21h
  1250 0000277F B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1251 00002784 CD21                <1>     int 21h
  1252                              <1>     return
    13                              <2> %%_ret:
    14 00002786 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1253                              <1> .touch1:
  1254 00002787 3C50                <1>     cmp al, errFilExist ;Does the file exist?
  1255 00002789 7509                <1>     jne .touchError ;If not, this is a proper error!
  1256 0000278B B8003D0000          <1>     mov eax, 3D00h  ;R/O open instead to update the access time!!
  1257 00002790 CD21                <1>     int 21h
  1258 00002792 73D6                <1>     jnc .touchClose ;If this worked, close the handle immediately
  1259                              <1> .touchError:
  1260 00002794 3C03                <1>     cmp al, errPnf
  1261 00002796 0F8444F1FFFF        <1>     je badArgError
  1262 0000279C 3C02                <1>     cmp al, errFnf
  1263 0000279E 0F8457F1FFFF        <1>     je badFnf
  1264 000027A4 E913F1FFFF          <1>     jmp badAccError
  1265                              <1>     
  1266                              <1> 
  1267                              <1> join:
  1268                              <1> ;Mock join command, to test join. Make an external command.
  1269                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1270 000027A9 F605AF000000FF      <1>     test byte [.joinOn], -1
  1271 000027B0 743D                <1>     jz .okJoin
  1272                              <1> .joindisable:
  1273 000027B2 B800520000          <1>     mov eax, 5200h  
  1274 000027B7 CD21                <1>     int 21h
  1275                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1276 000027B9 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1277 000027BE CD2A                <1>     int 2Ah
  1278 000027C0 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1279 000027C4 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1280 000027C8 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1281 000027CE C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1282 000027D1 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1283 000027D5 FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1284 000027D8 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1285 000027DD CD2A                <1>     int 2Ah
  1286 000027DF C6057900000000      <1>     mov byte [.joinOn], 0
  1287 000027E6 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1288 000027ED EB45                <1>     jmp short .joinExit
  1289                              <1> .okJoin:
  1290 000027EF C60569000000FF      <1>     mov byte [.joinOn], -1
  1291 000027F6 B800520000          <1>     mov eax, 5200h  
  1292 000027FB CD21                <1>     int 21h
  1293 000027FD 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1294 00002801 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1295                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1296 00002805 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1297 0000280A CD2A                <1>     int 2Ah
  1298 0000280C 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1299 00002812 4889DF              <1>     mov rdi, rbx
  1300 00002815 488D3544000000      <1>     lea rsi, .joinPath
  1301 0000281C B90C000000          <1>     mov ecx, .joinPathL
  1302 00002821 F3A4                <1>     rep movsb   ;Copy chars over
  1303 00002823 FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1304 00002826 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1305 0000282B CD2A                <1>     int 2Ah
  1306 0000282D 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1307                              <1> .joinExit:
  1308 00002834 B800090000          <1>     mov eax, 0900h
  1309 00002839 CD21                <1>     int 21h
  1310                              <1>     return
    13                              <2> %%_ret:
    14 0000283B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1311 0000283C 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1311 00002845 61626C65640D0A24    <1>
  1312 0000284D 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1312 00002856 7361626C65640D0A24  <1>
  1313 0000285F 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1314 00002860 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1314 00002869 535400              <1>
  1315                              <1> .joinPathL  equ $ - .joinPath 
  1316                              <1> 
  1317                              <1> subst:
  1318                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1319                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1320 0000286C F605D3000000FF      <1>     test byte [.substOn], -1
  1321 00002873 7443                <1>     jz .okSubst
  1322                              <1> .substdisable:
  1323 00002875 B800520000          <1>     mov eax, 5200h  
  1324 0000287A CD21                <1>     int 21h
  1325                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1326 0000287C B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1327 00002881 CD2A                <1>     int 2Ah
  1328 00002883 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1329 00002887 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1330 0000288E 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1331 00002894 C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1332 00002897 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1333 0000289B 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1334 000028A1 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1335 000028A6 CD2A                <1>     int 2Ah
  1336 000028A8 C6059700000000      <1>     mov byte [.substOn], 0
  1337 000028AF 488D157D000000      <1>     lea rdx, .substDisableMsg
  1338 000028B6 EB61                <1>     jmp short .substExit
  1339                              <1> .okSubst:
  1340 000028B8 C60587000000FF      <1>     mov byte [.substOn], -1
  1341 000028BF B800520000          <1>     mov eax, 5200h  
  1342 000028C4 CD21                <1>     int 21h
  1343 000028C6 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1344 000028CB CD2A                <1>     int 2Ah
  1345 000028CD 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1346 000028D1 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1347 000028D8 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1348 000028DC 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1349 000028E3 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1350 000028E7 C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1351                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1352 000028EE 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1353 000028F4 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1354 000028FA 4889DF              <1>     mov rdi, rbx
  1355 000028FD 488D3543000000      <1>     lea rsi, .substPath
  1356 00002904 B90C000000          <1>     mov ecx, .substPathL
  1357 00002909 F3A4                <1>     rep movsb   ;Copy chars over
  1358 0000290B B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1359 00002910 CD2A                <1>     int 2Ah
  1360 00002912 488D1508000000      <1>     lea rdx, .substEnableMsg
  1361                              <1> .substExit:
  1362 00002919 B800090000          <1>     mov eax, 0900h
  1363 0000291E CD21                <1>     int 21h
  1364                              <1>     return
    13                              <2> %%_ret:
    14 00002920 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1365 00002921 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1365 0000292A 6E61626C65640D0A24  <1>
  1366 00002933 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1366 0000293C 697361626C65640D0A- <1>
  1366 00002945 24                  <1>
  1367 00002946 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1368 00002947 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1368 00002950 535400              <1>
  1369                              <1> .substPathL  equ $ - .substPath 
  1370                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1371                              <1> truename:
  1372 00002953 F60550D7FFFFFF      <1>     test byte [arg1Flg], -1
  1373 0000295A 0F8480EFFFFF        <1>     jz badArgError
  1374 00002960 E8900C0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1375 00002965 488D3575DBFFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1376 0000296C 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1377 0000296F B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1378 00002974 CD21                <1>     int 21h
  1379 00002976 730D                <1>     jnc .writePath
  1380 00002978 3C02                <1>     cmp al, errFnf
  1381 0000297A 0F8469EFFFFF        <1>     je badFileError
  1382 00002980 E949EFFFFF          <1>     jmp badParamError
  1383                              <1> .writePath:
  1384 00002985 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1385 00002988 B9FFFFFFFF          <1>     mov ecx, -1
  1386 0000298D 30C0                <1>     xor al, al
  1387 0000298F F2AE                <1>     repne scasb     ;Get the new len
  1388 00002991 F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1389 00002993 FFC9                <1>     dec ecx
  1390 00002995 BB01000000          <1>     mov ebx, 01
  1391 0000299A B440                <1>     mov ah, 40h
  1392 0000299C CD21                <1>     int 21h
  1393 0000299E E8CA070000          <1>     call printCRLF
  1394                              <1>     return
    13                              <2> %%_ret:
    14 000029A3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1395                              <1> 
  1396                              <1> label:
  1397                              <1> ;Displays/Changes/Deletes the file label
  1398 000029A4 488D1508000000      <1>     lea rdx, .l1
  1399 000029AB B800090000          <1>     mov eax, 0900h
  1400 000029B0 CD21                <1>     int 21h
  1401                              <1>     return
    13                              <2> %%_ret:
    14 000029B2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1402 000029B3 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  1402 000029BC 6E20756E696D706C65- <1>
  1402 000029C5 6D656E7465640D0A24  <1>
  1403                              <1> 
  1404                              <1> mklbl:
  1405                              <1>     ;lea rdx, .l1
  1406                              <1>     ;mov cx, 08h ;Make a label
  1407                              <1>     ;mov eax, 3C00h
  1408                              <1>     ;int 21h
  1409                              <1> 
  1410                              <1>     ;mov ebx, eax
  1411                              <1>     ;mov eax, 3E00h  ;Close the handle
  1412                              <1>     ;int 21h
  1413                              <1>     ;return
  1414                              <1> 
  1415                              <1> ;.l1: db "TESTLABEL",0
  1416 000029CE 488D1508000000      <1>     lea rdx, .l1
  1417 000029D5 B800160000          <1>     mov eax, 1600h  ;Create FCB
  1418 000029DA CD21                <1>     int 21h
  1419                              <1>     return
    13                              <2> %%_ret:
    14 000029DC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1420                              <1> .l1:
  1421                              <1>     istruc exFcb
  1422 000029DD FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1423 000029DE 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1424 000029E4 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1425 000029E5 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  1426 000029ED 4C2020              <1>     at exFcb.fileext,   db "L  "
  1427 000029F0 00000000            <1>     at exFcb.curBlock,  dd 0
  1428 000029F4 00<rep 15h>         <1>     iend 
  1429                              <1> rmlbl:
  1430 00002A09 488D1508000000      <1>     lea rdx, .l1
  1431 00002A10 B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  1432 00002A15 CD21                <1>     int 21h
  1433                              <1>     return
    13                              <2> %%_ret:
    14 00002A17 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1434                              <1> .l1:    ;FCB to volume label
  1435                              <1>     istruc exFcb
  1436 00002A18 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1437 00002A19 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1438 00002A1F 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1439 00002A20 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  1440 00002A28 3F3F3F              <1>     at exFcb.fileext,   db "???"
  1441 00002A2B 00000000            <1>     at exFcb.curBlock,  dd 0
  1442 00002A2F 00<rep 15h>         <1>     iend 
  1443                              <1> 
  1444                              <1> rnlbl:
  1445 00002A44 488D1508000000      <1>     lea rdx, .l1
  1446 00002A4B B800170000          <1>     mov eax, 1700h
  1447 00002A50 CD21                <1>     int 21h
  1448                              <1>     return
    13                              <2> %%_ret:
    14 00002A52 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1449                              <1> .l1:
  1450                              <1>     istruc exRenFcb
  1451 00002A53 FF                  <1>     at exRenFcb.extSig,     db -1
  1452 00002A54 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  1453 00002A5A 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  1454 00002A5B 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  1455 00002A63 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  1456 00002A66 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  1456 00002A6F 4C414245            <1>
  1457 00002A73 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  1458 00002A76 00<rep 4h>          <1>     iend
  1459                              <1> volume:
  1460                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  1461 00002A7A F6052CD6FFFFFF      <1>     test byte [arg2Flg], -1
  1462 00002A81 0F8559EEFFFF        <1>     jnz badArgError
  1463 00002A87 F6051CD6FFFFFF      <1>     test byte [arg1Flg], -1
  1464 00002A8E 7507                <1>     jnz .notCurrentDrive
  1465 00002A90 E8B1090000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1466 00002A95 EB31                <1>     jmp short .dirEP
  1467                              <1> .notCurrentDrive:
  1468 00002A97 E8590B0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1469 00002A9C 488D353EDAFFFF      <1>     lea rsi, searchSpec
  1470 00002AA3 E8D8090000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  1471 00002AA8 66AD                <1>     lodsw                   ;Get this word
  1472 00002AAA 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  1473 00002AAD 0F852DEEFFFF        <1>     jne badArgError
  1474 00002AB3 8A05F3D5FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1475 00002AB9 A8FF                <1>     test al, -1
  1476 00002ABB 0F8516EEFFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1477 00002AC1 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1478 00002AC6 FFC8                <1>     dec eax ;Convert to 0 based number
  1479                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  1480 00002AC8 E8140C0000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  1481 00002ACD 488D1525DBFFFF      <1>     lea rdx, volFcb
  1482 00002AD4 FFC0                <1>     inc eax ;Get 1 based drive number
  1483 00002AD6 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1484 00002AD8 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1485 00002ADB B800110000          <1>     mov eax, 1100h ;Find first FCB
  1486 00002AE0 CD21                <1>     int 21h
  1487 00002AE2 50                  <1>     push rax
  1488                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  1489 00002AE3 488D15D5DDFFFF      <1>     lea rdx, crlf
  1490 00002AEA B409                <1>     mov ah, 09h
  1491 00002AEC CD21                <1>     int 21h
  1492 00002AEE 488D154FE0FFFF      <1>     lea rdx, volMes
  1493 00002AF5 B409                <1>     mov ah, 09h
  1494 00002AF7 CD21                <1>     int 21h
  1495 00002AF9 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  1496 00002AFB 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  1497 00002AFE B402                <1>     mov ah, 02h
  1498 00002B00 CD21                <1>     int 21h
  1499 00002B02 58                  <1>     pop rax
  1500 00002B03 84C0                <1>     test al, al ;If this is zero, the call succeeded
  1501 00002B05 7409                <1>     jz .volIDOk
  1502 00002B07 488D154DE0FFFF      <1>     lea rdx, volNo
  1503 00002B0E EB19                <1>     jmp short .volEndPrint
  1504                              <1> .volIDOk:
  1505 00002B10 488D153FE0FFFF      <1>     lea rdx, volOk
  1506 00002B17 B409                <1>     mov ah, 09h
  1507 00002B19 CD21                <1>     int 21h
  1508 00002B1B C60558D6FFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  1509 00002B22 488D1546D6FFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  1510                              <1> .volEndPrint:
  1511 00002B29 B409                <1>     mov ah, 09h
  1512 00002B2B CD21                <1>     int 21h
  1513 00002B2D 488D158BDDFFFF      <1>     lea rdx, crlf
  1514 00002B34 B409                <1>     mov ah, 09h
  1515 00002B36 CD21                <1>     int 21h
  1516                              <1>     return
    13                              <2> %%_ret:
    14 00002B38 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1517                              <1> 
  1518                              <1> version:
  1519 00002B39 488D157FDDFFFF      <1>     lea rdx, crlf
  1520 00002B40 B409                <1>     mov ah, 09h
  1521 00002B42 CD21                <1>     int 21h
  1522 00002B44 488D15E7DFFFFF      <1>     lea rdx, dosVer
  1523 00002B4B B409                <1>     mov ah, 09h
  1524 00002B4D CD21                <1>     int 21h
  1525 00002B4F E80C000000          <1>     call .printVersionNumber
  1526 00002B54 488D1564DDFFFF      <1>     lea rdx, crlf
  1527 00002B5B B409                <1>     mov ah, 09h
  1528 00002B5D CD21                <1>     int 21h
  1529                              <1>     return
    13                              <2> %%_ret:
    14 00002B5F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1530                              <1> .printVersionNumber:
  1531 00002B60 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1532 00002B62 CD21                <1>     int 21h
  1533 00002B64 50                  <1>     push rax
  1534 00002B65 0FB6C0              <1>     movzx eax, al
  1535 00002B68 E8C10A0000          <1>     call printDecimalWord
  1536 00002B6D B22E                <1>     mov dl, "."
  1537 00002B6F B402                <1>     mov ah, 02h
  1538 00002B71 CD21                <1>     int 21h
  1539 00002B73 58                  <1>     pop rax
  1540 00002B74 0FB6C4              <1>     movzx eax, ah
  1541 00002B77 E8B20A0000          <1>     call printDecimalWord
  1542                              <1>     return
    13                              <2> %%_ret:
    14 00002B7C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1543                              <1> 
  1544                              <1> 
  1545                              <1> memory:
  1546 00002B7D 488B1D9BD4FFFF      <1>     mov rbx, qword [sysVars]
  1547 00002B84 4885DB              <1>     test rbx, rbx
  1548 00002B87 7510                <1>     jnz .sysvarsOK
  1549 00002B89 488D1585E2FFFF      <1>     lea rdx, memBad0
  1550 00002B90 B409                <1>     mov ah, 09h
  1551 00002B92 CD21                <1>     int 21h
  1552 00002B94 E9380B0000          <1>     jmp freezePC.altEP
  1553                              <1> .sysvarsOK:
  1554                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1555                              <1>     ; and rcx to store Application memory
  1556 00002B99 31F6                <1>     xor esi, esi
  1557 00002B9B 31FF                <1>     xor edi, edi
  1558 00002B9D 31ED                <1>     xor ebp, ebp
  1559 00002B9F 31C9                <1>     xor ecx, ecx
  1560 00002BA1 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1561 00002BA5 488B1B              <1>     mov rbx, qword [rbx]
  1562                              <1> .memLp:
  1563 00002BA8 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1564 00002BAB 7409                <1>     je .validMCB
  1565 00002BAD 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1566 00002BB0 0F8501010000        <1>     jne .badMCBFound
  1567                              <1> .validMCB:
  1568 00002BB6 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1569 00002BB9 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1570 00002BBD 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1571 00002BC5 7505                <1>     jne .notDOS
  1572 00002BC7 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1573 00002BCA EB21                <1>     jmp short .gotoNext
  1574                              <1> .notDOS:
  1575 00002BCC 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1576 00002BD4 7505                <1>     jne .notFree
  1577 00002BD6 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1578 00002BD9 EB12                <1>     jmp short .gotoNext
  1579                              <1> .notFree:
  1580 00002BDB 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1581 00002BE3 7505                <1>     jne .notHole
  1582 00002BE5 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1583 00002BE8 EB03                <1>     jmp short .gotoNext
  1584                              <1> .notHole:
  1585 00002BEA 4801C1              <1>     add rcx, rax    ;Add to Application count
  1586                              <1> .gotoNext:
  1587 00002BED 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1588 00002BF0 7407                <1>     je .endOfWalk
  1589 00002BF2 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1590 00002BF7 EBAF                <1>     jmp short .memLp
  1591                              <1> .endOfWalk:
  1592                              <1>     
  1593 00002BF9 488D1576E1FFFF      <1>     lea rdx, memDOS
  1594 00002C00 B409                <1>     mov ah, 09h
  1595 00002C02 CD21                <1>     int 21h
  1596 00002C04 4889F0              <1>     mov rax, rsi
  1597 00002C07 E89D000000          <1>     call .mcbPrintAmount
  1598 00002C0C 488D15FBE1FFFF      <1>     lea rdx, memByte
  1599 00002C13 B409                <1>     mov ah, 09h
  1600 00002C15 CD21                <1>     int 21h
  1601                              <1> 
  1602 00002C17 4885ED              <1>     test rbp, rbp
  1603 00002C1A 741E                <1>     jz .skipHole
  1604 00002C1C 488D159FE1FFFF      <1>     lea rdx, memHole
  1605 00002C23 B409                <1>     mov ah, 09h
  1606 00002C25 CD21                <1>     int 21h
  1607 00002C27 4889E8              <1>     mov rax, rbp
  1608 00002C2A E87A000000          <1>     call .mcbPrintAmount
  1609 00002C2F 488D15D8E1FFFF      <1>     lea rdx, memByte
  1610 00002C36 B409                <1>     mov ah, 09h
  1611 00002C38 CD21                <1>     int 21h
  1612                              <1> .skipHole:
  1613                              <1> 
  1614 00002C3A 488D155BE1FFFF      <1>     lea rdx, memApp
  1615 00002C41 B409                <1>     mov ah, 09h
  1616 00002C43 CD21                <1>     int 21h
  1617 00002C45 4889C8              <1>     mov rax, rcx
  1618 00002C48 E85C000000          <1>     call .mcbPrintAmount
  1619 00002C4D 488D15BAE1FFFF      <1>     lea rdx, memByte
  1620 00002C54 B409                <1>     mov ah, 09h
  1621 00002C56 CD21                <1>     int 21h
  1622                              <1> 
  1623 00002C58 488D1589E1FFFF      <1>     lea rdx, memFree
  1624 00002C5F B409                <1>     mov ah, 09h
  1625 00002C61 CD21                <1>     int 21h
  1626 00002C63 4889F8              <1>     mov rax, rdi
  1627 00002C66 E83E000000          <1>     call .mcbPrintAmount
  1628 00002C6B 488D159CE1FFFF      <1>     lea rdx, memByte
  1629 00002C72 B409                <1>     mov ah, 09h
  1630 00002C74 CD21                <1>     int 21h
  1631                              <1> 
  1632 00002C76 488D15D3E0FFFF      <1>     lea rdx, memSys
  1633 00002C7D B409                <1>     mov ah, 09h
  1634 00002C7F CD21                <1>     int 21h
  1635 00002C81 4889F0              <1>     mov rax, rsi
  1636 00002C84 4801F8              <1>     add rax, rdi
  1637 00002C87 4801C8              <1>     add rax, rcx
  1638 00002C8A 4801E8              <1>     add rax, rbp
  1639 00002C8D E817000000          <1>     call .mcbPrintAmount
  1640 00002C92 488D1575E1FFFF      <1>     lea rdx, memByte
  1641 00002C99 B409                <1>     mov ah, 09h
  1642 00002C9B CD21                <1>     int 21h
  1643                              <1> 
  1644 00002C9D 488D151BDCFFFF      <1>     lea rdx, crlf
  1645 00002CA4 B409                <1>     mov ah, 09h
  1646 00002CA6 CD21                <1>     int 21h
  1647                              <1>     return
    13                              <2> %%_ret:
    14 00002CA8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1648                              <1> 
  1649                              <1> .mcbPrintAmount:
  1650 00002CA9 51                  <1>     push rcx
  1651 00002CAA 56                  <1>     push rsi
  1652 00002CAB 57                  <1>     push rdi
  1653 00002CAC 55                  <1>     push rbp
  1654 00002CAD E87C090000          <1>     call printDecimalWord
  1655 00002CB2 5D                  <1>     pop rbp
  1656 00002CB3 5F                  <1>     pop rdi
  1657 00002CB4 5E                  <1>     pop rsi
  1658 00002CB5 59                  <1>     pop rcx
  1659                              <1>     return
    13                              <2> %%_ret:
    14 00002CB6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1660                              <1> .badMCBFound:
  1661 00002CB7 488D1597E1FFFF      <1>     lea rdx, memBad2
  1662 00002CBE B409                <1>     mov ah, 09h
  1663 00002CC0 CD21                <1>     int 21h
  1664 00002CC2 E90A0A0000          <1>     jmp freezePC.altEP
  1665                              <1> 
  1666                              <1> type:
  1667 00002CC7 F605DCD3FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1668 00002CCE 0F840CECFFFF        <1>     jz badArgError
  1669 00002CD4 F605D2D3FFFFFF      <1>     test byte [arg2Flg], -1
  1670 00002CDB 0F85FFEBFFFF        <1>     jnz badArgError         ;If this set, error
  1671 00002CE1 4C8B0527D3FFFF      <1>     mov r8, [pspPtr]
  1672 00002CE8 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1673 00002CEF 0FB605B5D3FFFF      <1>     movzx eax, byte [arg1Off]
  1674 00002CF6 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1675 00002CF9 803E0D              <1>     cmp byte [rsi], CR
  1676 00002CFC 0F84DEEBFFFF        <1>     je badArgError
  1677 00002D02 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1678 00002D06 750F                <1>     jne .noDrive
  1679 00002D08 0FB6059DD3FFFF      <1>     movzx eax, byte [arg1FCBret]
  1680 00002D0F 3CFF                <1>     cmp al, -1
  1681 00002D11 0F84C0EBFFFF        <1>     je badDriveError
  1682                              <1> .noDrive:
  1683                              <1>     ;Now we open the provided file
  1684 00002D17 E8D9080000          <1>     call buildCommandPath
  1685 00002D1C 488D15BED7FFFF      <1>     lea rdx, searchSpec
  1686 00002D23 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1687 00002D28 CD21                <1>     int 21h
  1688 00002D2A 0F82B9EBFFFF        <1>     jc badFileError
  1689 00002D30 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1690 00002D37 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1691                              <1> .lp:
  1692 00002D3A B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1693 00002D3F B43F                <1>     mov ah, 3Fh ;Read handle
  1694 00002D41 CD21                <1>     int 21h
  1695 00002D43 89C1                <1>     mov ecx, eax
  1696 00002D45 67E317              <1>     jecxz .exit
  1697 00002D48 53                  <1>     push rbx    ;Save the original in handle
  1698 00002D49 BB01000000          <1>     mov ebx, 1  ;STDOUT
  1699 00002D4E B440                <1>     mov ah, 40h
  1700 00002D50 CD21                <1>     int 21h
  1701 00002D52 5B                  <1>     pop rbx ;Get back the original read handle
  1702 00002D53 720F                <1>     jc .exitBad
  1703 00002D55 39C8                <1>     cmp eax, ecx
  1704 00002D57 74E1                <1>     je .lp
  1705 00002D59 FFC9                <1>     dec ecx ;One less for a ^Z
  1706 00002D5B 39C8                <1>     cmp eax, ecx
  1707 00002D5D 7505                <1>     jne .exitBad
  1708                              <1> .exit:
  1709 00002D5F B43E                <1>     mov ah, 3Eh ;Close handle
  1710 00002D61 CD21                <1>     int 21h
  1711                              <1>     return
    13                              <2> %%_ret:
    14 00002D63 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1712                              <1> .exitBad:
  1713                              <1>     ;Print a disk error message... use a table to build the message but for
  1714                              <1>     ; now, just exit
  1715                              <1>     ;If it is a char device, don't print a error
  1716 00002D64 EBF9                <1>     jmp short .exit
  1717                              <1> 
  1718                              <1> exit:
  1719 00002D66 F605C0D2FFFFFF      <1>     test byte [permaSwitch], -1
  1720                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D6D 75(63)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1721 00002D6F 488B05A1D2FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1722 00002D76 483DFFFFFFFF        <1>     cmp rax, -1
  1723                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D7C 74(63)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1724 00002D7E 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1725                              <1> 
  1726 00002D82 488B15A5D2FFFF      <1>     mov rdx, qword [parentInt22]
  1727 00002D89 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  1728 00002D8D B822250000          <1>     mov eax, 2522h
  1729 00002D92 CD21                <1>     int 21h
  1730                              <1> 
  1731 00002D94 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1732 00002D99 CD21                <1>     int 21h
  1733                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00002D9B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1734                              <1> 
  1735                              <1> launchChild:
  1736                              <1>     ;We execute an external command here.
  1737                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  1738                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  1739                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  1740                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  1741                              <1>     ;We know the drive we are on is valid so no need to double check that!
  1742 00002D9C E840090000          <1>     call setDTA         
  1743                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
  1744 00002DA1 488D3D90D5FFFF      <1>     lea rdi, cmdPathSpec
  1745 00002DA8 4889FE              <1>     mov rsi, rdi
  1746 00002DAB B811120000          <1>     mov eax, 1211h  ;Normalise this path first
  1747 00002DB0 CD2F                <1>     int 2fh
  1748 00002DB2 E881070000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  1749 00002DB7 4889FE              <1>     mov rsi, rdi    ;Source here
  1750 00002DBA 488D3D96D3FFFF      <1>     lea rdi, cmdFcb
  1751 00002DC1 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  1752 00002DC6 CD21                <1>     int 21h
  1753 00002DC8 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  1754 00002DCA 0F854BEBFFFF        <1>     jnz badCmdError
  1755 00002DD0 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  1756                              <1> .pathLoop:
  1757 00002DD3 488D3586D3FFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  1758 00002DDA 488D3DEDE0FFFF      <1>     lea rdi, extStr
  1759 00002DE1 BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  1760                              <1> .extLp:
  1761 00002DE6 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  1762 00002DE7 B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  1763 00002DEC F3A6                <1>     rep cmpsb   ;Compare the two strings
  1764 00002DEE 5E                  <1>     pop rsi
  1765 00002DEF 85C9                <1>     test ecx, ecx
  1766 00002DF1 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  1767 00002DF3 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  1768 00002DF6 FFCA                <1>     dec edx         ;Else one less extension type to check
  1769 00002DF8 75EC                <1>     jnz .extLp
  1770                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  1771                              <1>     ;If not, error.
  1772 00002DFA B903000000          <1>     mov ecx, 3
  1773 00002DFF 4889F7              <1>     mov rdi, rsi
  1774 00002E02 B020                <1>     mov al, SPC
  1775 00002E04 F3AE                <1>     rep scasb   
  1776 00002E06 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  1777 00002E08 0F850DEBFFFF        <1>     jnz badCmdError    ;If not, error!
  1778                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  1779 00002E0E 488D35B9E0FFFF      <1>     lea rsi, extStr
  1780 00002E15 BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  1781                              <1> .extSrchLp:
  1782 00002E1A 488D3D3FD3FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1783 00002E21 B903000000          <1>     mov ecx, 3
  1784 00002E26 F3A4                <1>     rep movsb   ;Copy the extension over!
  1785 00002E28 E867010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  1786 00002E2D 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  1787 00002E2F FFCB                <1>     dec ebx                 ;Decrement extension counter
  1788 00002E31 75E7                <1>     jnz .extSrchLp
  1789                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  1790                              <1> ; we start prepending path componants and trying again. To do this, we reset
  1791                              <1> ; by setting the fcb extension back to all spaces.
  1792 00002E33 488D3D26D3FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1793 00002E3A B903000000          <1>     mov ecx, 3
  1794 00002E3F B020                <1>     mov al, SPC
  1795 00002E41 F3AA                <1>     rep stosb   ;Store back the empty extension!
  1796 00002E43 EB50                <1>     jmp short .pathHandle
  1797                              <1> .extFnd:
  1798                              <1> ;Here if the file had the right extension.
  1799 00002E45 E84A010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  1800 00002E4A 7249                <1>     jc .pathHandle
  1801                              <1> .extSrchFnd:
  1802                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  1803                              <1> ; a BAT. If it is, separate handling!
  1804 00002E4C 803D0DD3FFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  1805 00002E53 0F8407010000        <1>     je .batLaunch
  1806 00002E59 488D1D32D3FFFF      <1>     lea rbx, launchBlock
  1807 00002E60 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  1808 00002E64 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  1809 00002E67 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  1810 00002E6E 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1811 00002E72 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1812 00002E76 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1813 00002E7A 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1814 00002E7E 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1815 00002E82 488D15AFD4FFFF      <1>     lea rdx, cmdPathSpec
  1816 00002E89 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1817 00002E8E CD21                <1>     int 21h
  1818 00002E90 E986EAFFFF          <1>     jmp badCmdError    ;If something goes wrong, error out
  1819                              <1> .pathHandle:        
  1820                              <1> ;First check if rbp is null. If it is, its a first time entry. 
  1821                              <1> ;al has error code!
  1822 00002E95 4885ED              <1>     test rbp, rbp
  1823 00002E98 0F859E000000        <1>     jnz .pathReentry
  1824                              <1> ;Now check if the command we recieved included an absolute path.
  1825                              <1> ;If so, we don't do path substitution and just fail at this point
  1826 00002E9E 488D3593D4FFFF      <1>     lea rsi, cmdPathSpec
  1827 00002EA5 66AD                <1>     lodsw   ;Get the first two chars
  1828 00002EA7 3A057ED1FFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  1829 00002EAD 0F8468EAFFFF        <1>     je badCmdError  ;Therefore, exit bad!
  1830 00002EB3 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  1831 00002EB5 7412                <1>     je .pathGetEnv
  1832 00002EB7 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  1833 00002EBA 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  1834 00002EBC AC                  <1>     lodsb   ;Get the third char
  1835 00002EBD 3A0568D1FFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  1836 00002EC3 0F8452EAFFFF        <1>     je badCmdError  ;Therefore, exit bad!
  1837                              <1> .pathGetEnv:
  1838                              <1> ;Now get a pointer to the environment and search for PATH=
  1839                              <1> ;We only take the final portion of the path and add it to each path componant
  1840                              <1> ;This agrees with DOS 3.3
  1841 00002EC9 E849080000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  1842 00002ECE 0F8447EAFFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  1843                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  1844                              <1>     ;Now we know we dont have to keep track of chars!!
  1845 00002ED4 488D3D17E0FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  1846 00002EDB E898080000          <1>     call searchForEnvVar
  1847 00002EE0 0F8235EAFFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
  1848 00002EE6 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
  1849 00002EE9 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
  1850                              <1> .pathRejoin:
  1851 00002EF0 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  1852 00002EF3 0F8422EAFFFF        <1>     je badCmdError      ;Empty or no more path? Error!
  1853 00002EF9 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
  1854 00002EFC 488D3DDED5FFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  1855                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
  1856                              <1>     ; MUST CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
  1857                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
  1858 00002F03 E894060000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
  1859 00002F08 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  1860 00002F0B 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  1861 00002F0E 48FFCF              <1>     dec rdi ;Point to the null terminator
  1862 00002F11 8A0514D1FFFF        <1>     mov al, byte [pathSep]
  1863 00002F17 AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  1864 00002F18 488D3539D2FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  1865 00002F1F E838060000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  1866 00002F24 488D35B6D5FFFF      <1>     lea rsi, searchSpec 
  1867 00002F2B 488D3D06D4FFFF      <1>     lea rdi, cmdPathSpec
  1868 00002F32 E814050000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  1869 00002F37 E997FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  1870                              <1> .pathReentry:
  1871 00002F3C 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  1872 00002F40 0F84D5E9FFFF        <1>     je badCmdError
  1873 00002F46 3C0F                <1>     cmp al, errBadDrv
  1874 00002F48 750E                <1>     jne .pathDrvOk
  1875 00002F4A 488D15CADCFFFF      <1>     lea rdx, badDrvSrch ;Print the drive was invalid!
  1876 00002F51 B800090000          <1>     mov eax, 0900h
  1877 00002F56 CD21                <1>     int 21h
  1878                              <1> .pathDrvOk:
  1879 00002F58 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  1880 00002F5B 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  1881 00002F5E EB90                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  1882                              <1> 
  1883                              <1> .batLaunch:
  1884 00002F60 488D1508000000      <1>     lea rdx, .batMsg
  1885 00002F67 B800090000          <1>     mov eax, 0900h
  1886 00002F6C CD21                <1>     int 21h
  1887                              <1>     return
    13                              <2> %%_ret:
    14 00002F6E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1888 00002F6F 424154434820707265- <1> .batMsg db "BATCH preprocessor not implemented",CR,LF,"$"
  1888 00002F78 70726F636573736F72- <1>
  1888 00002F81 206E6F7420696D706C- <1>
  1888 00002F8A 656D656E7465640D0A- <1>
  1888 00002F93 24                  <1>
  1889                              <1> 
  1890                              <1> .prepAndSearch:
  1891                              <1> ;Copies over the name and extension in UC to the last componant of the 
  1892                              <1> ;cmdPathSpec and null terminates. 
  1893                              <1> ;Input: cmdFcb name + ext setup. 
  1894                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  1895                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
  1896 00002F94 51                  <1>     push rcx
  1897 00002F95 56                  <1>     push rsi
  1898 00002F96 57                  <1>     push rdi
  1899 00002F97 488D3D9AD3FFFF      <1>     lea rdi, cmdPathSpec 
  1900 00002F9E 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  1901 00002FA1 E892050000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  1902 00002FA6 488D35ABD1FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  1903 00002FAD E8AA050000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  1904 00002FB2 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1905 00002FB7 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  1906 00002FB9 CD21                <1>     int 21h
  1907 00002FBB 5F                  <1>     pop rdi
  1908 00002FBC 5E                  <1>     pop rsi
  1909 00002FBD 59                  <1>     pop rcx
  1910                              <1>     return
    13                              <2> %%_ret:
    14 00002FBE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1911                              <1> 
  1912                              <1> set:
  1913 00002FBF F605E4D0FFFFFF      <1>     test byte [arg1Flg], -1
  1914 00002FC6 7539                <1>     jnz .editEnv
  1915                              <1>     ;Here we just print the environment.
  1916 00002FC8 E84A070000          <1>     call checkEnvGoodAndGet 
  1917 00002FCD 0F84E0E8FFFF        <1>     jz badEnvSpaceError
  1918                              <1>     ;We know this is a good env so keep going! env ptr in rsi
  1919 00002FD3 4889F7              <1>     mov rdi, rsi
  1920 00002FD6 4889F2              <1>     mov rdx, rsi
  1921                              <1> .findLp:
  1922 00002FD9 B9FFFFFFFF          <1>     mov ecx, -1
  1923 00002FDE 31C0                <1>     xor eax, eax
  1924                              <1> .scanLp:
  1925 00002FE0 F2AE                <1>     repne scasb
  1926 00002FE2 75FC                <1>     jne .scanLp
  1927 00002FE4 F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
  1928                              <1>     ;Else, we now print this environment variable and CRLF it
  1929                              <1>     ;rdx points to the start of the string aleady
  1930                              <1>     ;ecx has the bytes to print
  1931 00002FE6 BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
  1932 00002FEB B800400000          <1>     mov eax, 4000h  ;Print to handle
  1933 00002FF0 CD21                <1>     int 21h
  1934 00002FF2 E876010000          <1>     call printCRLF
  1935 00002FF7 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
  1936                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002FFA 74(BE)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1937 00002FFC 4889FA              <1>     mov rdx, rdi   
  1938 00002FFF EBD8                <1>     jmp short .findLp
  1939                              <1> .editEnv:
  1940 00003001 E811070000          <1>     call checkEnvGoodAndGet
  1941 00003006 0F84A7E8FFFF        <1>     jz badEnvSpaceError
  1942 0000300C 0FB60598D0FFFF      <1>     movzx eax, byte [arg1Off]
  1943 00003013 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1944 0000301A 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
  1945 0000301D 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
  1946 00003020 B00D                <1>     mov al, CR              ;Search for the CR
  1947 00003022 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
  1948 0000302A 89CB                <1>     mov ebx, ecx            ;Save this count 
  1949 0000302C 53                  <1>     push rbx                ;Save this count on the stack too!
  1950 0000302D F2AE                <1>     repne scasb             ;Now get the length of this env string
  1951 0000302F 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
  1952 00003031 66891D96D7FFFF      <1>     mov word [envVarSz], bx ;Store the count
  1953 00003038 59                  <1>     pop rcx                 ;Get the char count back!
  1954 00003039 89CB                <1>     mov ebx, ecx            
  1955 0000303B 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
  1956 0000303E B03D                <1>     mov al, "="             ;Scan for an equals sign
  1957 00003040 F2AE                <1>     repne scasb
  1958 00003042 0F8562E8FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
  1959 00003048 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
  1960 0000304A 66891D7FD7FFFF      <1>     mov word [envVarNamSz], bx
  1961 00003051 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
  1962 00003054 7477                <1>     je .delEnvVar           ;Free the envvar and return
  1963 00003056 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
  1964 00003057 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  1965 0000305A E819070000          <1>     call searchForEnvVar    ;Look for the environment variable
  1966 0000305F 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
  1967 00003061 E840070000          <1>     call envFree            ;Free the var in rsi
  1968                              <1> .editNewEnv:
  1969 00003066 E874070000          <1>     call getFreeSpace       ;Get the free space in env in ecx
  1970 0000306B E894070000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
  1971 00003070 5E                  <1>     pop rsi                 ;Get back the ptr to the string
  1972 00003071 31C0                <1>     xor eax, eax            ;Prepare null length!
  1973 00003073 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
  1974 00003079 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
  1975 0000307C 720B                <1>     jb .reallocTry          ;Try to reallocate!
  1976 0000307E FFC9                <1>     dec ecx                 ;Save a byte for end magic null
  1977 00003080 663B0D47D7FFFF      <1>     cmp cx, word [envVarSz] ;Do we have enough space?
  1978 00003087 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
  1979                              <1> .reallocTry:
  1980                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
  1981                              <1>     ; we proceed with the environment size.
  1982 00003089 E88B070000          <1>     call growEnvBlock   ;Attempt to grow the environment
  1983 0000308E 7319                <1>     jnc .reallocOk
  1984 00003090 0F841DE8FFFF        <1>     jz badEnvSpaceError    ;Max environment space
  1985                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
  1986                              <1>     ; partially the variable into the env. If so we do that. If the name
  1987                              <1>     ; cannot fit, we don't bother
  1988                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
  1989 00003096 663B0D33D7FFFF      <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
  1990                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000309D 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000309F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1991 000030A0 E80EE8FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
  1992 000030A5 FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
  1993 000030A7 EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
  1994                              <1> .reallocOk:
  1995                              <1>     ;Here we have all the space to just copy the full path
  1996 000030A9 0FB70D1ED7FFFF      <1>     movzx ecx, word [envVarSz]
  1997                              <1> .nameCp:
  1998                              <1> ;Now copy over the env var, ecx = #ofchars to copy
  1999                              <1> ;Always enough memory for name= here
  2000 000030B0 AC                  <1>     lodsb
  2001 000030B1 E8B8030000          <1>     call ucChar
  2002 000030B6 AA                  <1>     stosb
  2003 000030B7 66FFC9              <1>     dec cx      ;Always decrement this count
  2004 000030BA 3C3D                <1>     cmp al, "="
  2005 000030BC 75F2                <1>     jne .nameCp
  2006                              <1> .exitNameCp:
  2007 000030BE AC                  <1>     lodsb
  2008 000030BF 3C0D                <1>     cmp al, CR
  2009 000030C1 7405                <1>     je .exitCp
  2010 000030C3 AA                  <1>     stosb
  2011 000030C4 FFC9                <1>     dec ecx
  2012 000030C6 75F6                <1>     jnz .exitNameCp
  2013                              <1> .exitCp:
  2014 000030C8 31C0                <1>     xor eax, eax
  2015 000030CA 66AB                <1>     stosw   ;Store the final null word
  2016                              <1>     return
    13                              <2> %%_ret:
    14 000030CC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2017                              <1> .delEnvVar:
  2018                              <1>     ;rsi -> Start of the envvar name in user buffer
  2019 000030CD 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2020 000030D0 E8A3060000          <1>     call searchForEnvVar    ;Look for the environment variable
  2021 000030D5 7205                <1>     jc .delEnvVarSkip
  2022 000030D7 E8CA060000          <1>     call envFree    ;Free the env var at rsi
  2023                              <1> .delEnvVarSkip:
  2024 000030DC F8                  <1>     clc             ;Clear CF if the var doesnt exist
  2025                              <1>     return
    13                              <2> %%_ret:
    14 000030DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2026                              <1> 
  2027                              <1> pathEdit:
  2028                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
  2029                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
  2030                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
  2031                              <1> ; end there. Error with too many arguments error!
  2032                              <1> ;If after the equals sign there is nothing, we just print the path!
  2033 000030DE E834060000          <1>     call checkEnvGoodAndGet
  2034 000030E3 0F84CAE7FFFF        <1>     jz badEnvSpaceError ;rsi has the ptr to the environment
  2035 000030E9 488D3D02DEFFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
  2036 000030F0 E883060000          <1>     call searchForEnvVar
  2037 000030F5 7262                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
  2038                              <1>     breakpoint
    81 000030F7 6687DB              <2> xchg bx, bx
  2039 000030FA 4889F2              <1>     mov rdx, rsi        ;Save the ptr to the start of the PATH= string
  2040 000030FD 4889F7              <1>     mov rdi, rsi
  2041 00003100 E85F030000          <1>     call strlen         ;Get the path length in cx with PATH= 
  2042 00003105 F6059ECFFFFFFF      <1>     test byte [arg1Flg], -1
  2043 0000310C 7435                <1>     jz .printPath
  2044 0000310E 488D1507000000      <1>     lea rdx, .l1
  2045 00003115 B800090000          <1>     mov eax, 0900h
  2046 0000311A EB49                <1>     jmp short .pathExit
  2047 0000311C 444952454354205041- <1> .l1 db "DIRECT PATH EDIT NOT IMPLEMENTED YET",CR,LF,"$"
  2047 00003125 54482045444954204E- <1>
  2047 0000312E 4F5420494D504C454D- <1>
  2047 00003137 454E54454420594554- <1>
  2047 00003140 0D0A24              <1>
  2048                              <1> .printPath:
  2049 00003143 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
  2050 00003149 740E                <1>     je .noPathPrnt      ;Print no path!
  2051 0000314B FFC9                <1>     dec ecx             ;Drop the terminating null from the count
  2052 0000314D BB01000000          <1>     mov ebx, 1          ;STDOUT
  2053 00003152 B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
  2054 00003157 EB0C                <1>     jmp short .pathExit
  2055                              <1> .noPathPrnt:
  2056 00003159 488D1581DAFFFF      <1>     lea rdx, noPath
  2057 00003160 B800090000          <1>     mov eax, 0900h
  2058                              <1> .pathExit:
  2059 00003165 CD21                <1>     int 21h
  2060 00003167 E801000000          <1>     call printCRLF      ;Print a crlf at the end
  2061                              <1>     return
    13                              <2> %%_ret:
    14 0000316C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printCRLF:
     4 0000316D 488D154BD7FFFF      <1>     lea rdx, crlf
     5                              <1> printString:
     6 00003174 B800090000          <1>     mov eax, 0900h  ;Print string
     7 00003179 CD21                <1>     int 21h
     8                              <1>     return
    13                              <2> %%_ret:
    14 0000317B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> printDate:
    10                              <1> ;Input: eax = Packed Date
    11                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    12                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    13                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    14                              <1> ;       ebx = 0 => Print two digit year
    15                              <1> ;       ebx = 1 => Print four digit year
    16 0000317C 53                  <1>     push rbx
    17 0000317D 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    18 0000317F 803DB0CEFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    19 00003186 7240                <1>     jb .usDate
    20 00003188 777C                <1>     ja .jpnDate
    21                              <1> ;European: DD/MM/YY
    22 0000318A 251F000000          <1>     and eax, 1Fh    ;Save day bits
    23 0000318F E8B0000000          <1>     call .printFirst
    24 00003194 8A15A7CEFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    25 0000319A B402                <1>     mov ah, 02h
    26 0000319C CD21                <1>     int 21h
    27                              <1> 
    28 0000319E 89C8                <1>     mov eax, ecx
    29 000031A0 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    30 000031A5 C1E805              <1>     shr eax, 5
    31 000031A8 E8B3000000          <1>     call .printSecond
    32                              <1> 
    33 000031AD 8A158ECEFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    34 000031B3 B402                <1>     mov ah, 02h
    35 000031B5 CD21                <1>     int 21h
    36                              <1> 
    37 000031B7 89C8                <1>     mov eax, ecx
    38 000031B9 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    39 000031BE C1E809              <1>     shr eax, 9
    40 000031C1 5B                  <1>     pop rbx ;Get the year signature back
    41 000031C2 E8A9000000          <1>     call .printYear
    42                              <1>     return
    13                              <2> %%_ret:
    14 000031C7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    43                              <1> .usDate:
    44                              <1> ;US: MM/DD/YY
    45 000031C8 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    46 000031CD C1E805              <1>     shr eax, 5
    47 000031D0 E86F000000          <1>     call .printFirst
    48                              <1> 
    49 000031D5 8A1566CEFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    50 000031DB B402                <1>     mov ah, 02h
    51 000031DD CD21                <1>     int 21h
    52                              <1> 
    53 000031DF 89C8                <1>     mov eax, ecx
    54 000031E1 251F000000          <1>     and eax, 1Fh    ;Save day bits
    55 000031E6 E875000000          <1>     call .printSecond
    56                              <1> 
    57 000031EB 8A1550CEFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    58 000031F1 B402                <1>     mov ah, 02h
    59 000031F3 CD21                <1>     int 21h
    60                              <1> 
    61 000031F5 89C8                <1>     mov eax, ecx
    62 000031F7 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    63 000031FC C1E809              <1>     shr eax, 9
    64 000031FF 5B                  <1>     pop rbx ;Get the year signature back
    65 00003200 E86B000000          <1>     call .printYear
    66                              <1>     return
    13                              <2> %%_ret:
    14 00003205 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    67                              <1> .jpnDate:
    68                              <1> ;Japan: YY/MM/DD
    69 00003206 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    70 0000320B C1E809              <1>     shr eax, 9
    71 0000320E 5B                  <1>     pop rbx ;Get the year signature back
    72 0000320F E85C000000          <1>     call .printYear
    73                              <1> 
    74 00003214 8A1527CEFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    75 0000321A B402                <1>     mov ah, 02h
    76 0000321C CD21                <1>     int 21h
    77                              <1> 
    78 0000321E 89C8                <1>     mov eax, ecx
    79 00003220 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    80 00003225 C1E805              <1>     shr eax, 5
    81 00003228 E833000000          <1>     call .printSecond
    82                              <1> 
    83 0000322D 8A150ECEFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    84 00003233 B402                <1>     mov ah, 02h
    85 00003235 CD21                <1>     int 21h
    86                              <1> 
    87 00003237 89C8                <1>     mov eax, ecx
    88 00003239 251F000000          <1>     and eax, 1Fh    ;Save day bits
    89 0000323E E81D000000          <1>     call .printSecond
    90                              <1>     return
    13                              <2> %%_ret:
    14 00003243 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    91                              <1> 
    92                              <1> ;Each of these require eax setup correctly
    93                              <1> .printFirst:
    94 00003244 51                  <1>     push rcx
    95 00003245 E855040000          <1>     call getDecimalWord
    96 0000324A 84ED                <1>     test ch, ch ;Do we have an upper digit?
    97 0000324C 7504                <1>     jnz .skipSpace
    98 0000324E 88CD                <1>     mov ch, cl
    99 00003250 B120                <1>     mov cl, " "
   100                              <1> .skipSpace:
   101 00003252 88CA                <1>     mov dl, cl
   102 00003254 B402                <1>     mov ah, 02h
   103 00003256 CD21                <1>     int 21h
   104 00003258 88EA                <1>     mov dl, ch
   105 0000325A B402                <1>     mov ah, 02h
   106 0000325C CD21                <1>     int 21h
   107 0000325E 59                  <1>     pop rcx
   108                              <1>     return
    13                              <2> %%_ret:
    14 0000325F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   109                              <1> .printSecond:
   110 00003260 51                  <1>     push rcx
   111 00003261 E839040000          <1>     call getDecimalWord
   112 00003266 84ED                <1>     test ch, ch ;Do we have an upper digit?
   113 00003268 75E8                <1>     jnz .skipSpace
   114 0000326A 88CD                <1>     mov ch, cl
   115 0000326C B130                <1>     mov cl, "0"
   116 0000326E EBE2                <1>     jmp short .skipSpace
   117                              <1> .printYear:
   118 00003270 05BC070000          <1>     add eax, 1980
   119 00003275 51                  <1>     push rcx
   120 00003276 53                  <1>     push rbx
   121 00003277 E823040000          <1>     call getDecimalWord ;Get unpacked in rcx
   122 0000327C 5B                  <1>     pop rbx
   123 0000327D 84DB                <1>     test bl, bl
   124 0000327F 740C                <1>     jz .twoDigitYear
   125 00003281 88CA                <1>     mov dl, cl  ;Print the first digit
   126 00003283 B402                <1>     mov ah, 02h
   127 00003285 CD21                <1>     int 21h
   128 00003287 88EA                <1>     mov dl, ch  ;Print the second digit
   129 00003289 B402                <1>     mov ah, 02h
   130 0000328B CD21                <1>     int 21h
   131                              <1> .twoDigitYear:
   132 0000328D C1E910              <1>     shr ecx, 10h    ;Get high word low
   133 00003290 88CA                <1>     mov dl, cl  ;Print the upper digit
   134 00003292 B402                <1>     mov ah, 02h
   135 00003294 CD21                <1>     int 21h
   136 00003296 88EA                <1>     mov dl, ch  ;Print the lower digit
   137 00003298 B402                <1>     mov ah, 02h
   138 0000329A CD21                <1>     int 21h
   139 0000329C 59                  <1>     pop rcx
   140                              <1>     return
    13                              <2> %%_ret:
    14 0000329D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> 
   142                              <1> 
   143                              <1> printTime:
   144                              <1> ;Input: eax = Packed Time
   145                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   146                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   147 0000329E 89C1                <1>     mov ecx, eax
   148 000032A0 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   149 000032A5 C1E80B              <1>     shr eax, 11
   150 000032A8 803D98CDFFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   151 000032AF 750B                <1>     jne .ampm
   152 000032B1 E85A000000          <1>     call .printHours
   153 000032B6 E831000000          <1>     call .printMinutes
   154                              <1>     return
    13                              <2> %%_ret:
    14 000032BB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   155                              <1> .ampm:
   156 000032BC 3D0C000000          <1>     cmp eax, 12
   157 000032C1 7713                <1>     ja .pm
   158 000032C3 7416                <1>     je .pm2
   159 000032C5 E846000000          <1>     call .printHours
   160 000032CA E81D000000          <1>     call .printMinutes
   161 000032CF B261                <1>     mov dl, "a"
   162 000032D1 B402                <1>     mov ah, 02h
   163 000032D3 CD21                <1>     int 21h
   164                              <1>     return
    13                              <2> %%_ret:
    14 000032D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1> .pm:
   166 000032D6 2D0C000000          <1>     sub eax, 12
   167                              <1> .pm2:
   168 000032DB E830000000          <1>     call .printHours
   169 000032E0 E807000000          <1>     call .printMinutes
   170 000032E5 B270                <1>     mov dl, "p"
   171 000032E7 B402                <1>     mov ah, 02h
   172 000032E9 CD21                <1>     int 21h
   173                              <1>     return
    13                              <2> %%_ret:
    14 000032EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   174                              <1> .printMinutes:
   175 000032EC 8A1551CDFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   176 000032F2 B402                <1>     mov ah, 02h
   177 000032F4 CD21                <1>     int 21h
   178                              <1> 
   179 000032F6 89C8                <1>     mov eax, ecx
   180 000032F8 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   181 000032FD C1E805              <1>     shr eax, 5
   182                              <1> .printMinutesAlt:
   183 00003300 51                  <1>     push rcx
   184 00003301 E899030000          <1>     call getDecimalWord
   185 00003306 84ED                <1>     test ch, ch ;Do we have an upper digit?
   186 00003308 7514                <1>     jnz .skipSpace
   187 0000330A 88CD                <1>     mov ch, cl
   188 0000330C B130                <1>     mov cl, "0"
   189 0000330E EB0E                <1>     jmp short .skipSpace
   190                              <1> .printHours:
   191 00003310 51                  <1>     push rcx
   192 00003311 E889030000          <1>     call getDecimalWord
   193 00003316 84ED                <1>     test ch, ch ;Do we have an upper digit?
   194 00003318 7504                <1>     jnz .skipSpace
   195 0000331A 88CD                <1>     mov ch, cl
   196 0000331C B120                <1>     mov cl, " "
   197                              <1> .skipSpace:
   198 0000331E 88CA                <1>     mov dl, cl
   199 00003320 B402                <1>     mov ah, 02h
   200 00003322 CD21                <1>     int 21h
   201 00003324 88EA                <1>     mov dl, ch
   202 00003326 B402                <1>     mov ah, 02h
   203 00003328 CD21                <1>     int 21h
   204 0000332A 59                  <1>     pop rcx
   205                              <1>     return
    13                              <2> %%_ret:
    14 0000332B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   206                              <1> 
   207                              <1> 
   208                              <1> putVersionInPrompt:
   209 0000332C 488D15FFD7FFFF      <1>     lea rdx, dosVer
   210 00003333 B409                <1>     mov ah, 09h ;Print String
   211 00003335 CD21                <1>     int 21h
   212 00003337 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   213 00003339 CD21                <1>     int 21h
   214 0000333B 50                  <1>     push rax    ;Save minor version
   215 0000333C E8B0000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   216 00003341 E8C8000000          <1>     call printPackedBCD ;Print al
   217 00003346 B22E                <1>     mov dl, "."
   218 00003348 B402                <1>     mov ah, 02h
   219 0000334A CD21                <1>     int 21h
   220 0000334C 58                  <1>     pop rax
   221 0000334D 88E0                <1>     mov al, ah  ;Get the minor version low
   222 0000334F E89D000000          <1>     call hexToBCD
   223 00003354 E8B5000000          <1>     call printPackedBCD
   224                              <1>     return
    13                              <2> %%_ret:
    14 00003359 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   225                              <1> putEscInPrompt:
   226 0000335A B21B                <1>     mov dl, ESC
   227 0000335C EB1D                <1>     jmp short outChar
   228                              <1> 
   229                              <1> putMoneyInPrompt:
   230 0000335E B224                <1>     mov dl, "$"
   231 00003360 EB19                <1>     jmp short outChar
   232                              <1> 
   233                              <1> putEquInPrompt:
   234 00003362 B23D                <1>     mov dl, "="
   235 00003364 EB15                <1>     jmp short outChar
   236                              <1> 
   237                              <1> putPipeInPrompt:
   238 00003366 B27C                <1>     mov dl, "|"
   239 00003368 EB11                <1>     jmp short outChar
   240                              <1> 
   241                              <1> putGTinPrompt:
   242 0000336A B23E                <1>     mov dl, ">"
   243 0000336C EB0D                <1>     jmp short outChar
   244                              <1> 
   245                              <1> putLTinPrompt:
   246 0000336E B23C                <1>     mov dl, "<"
   247 00003370 EB09                <1>     jmp short outChar
   248                              <1> 
   249                              <1> putDriveInPrompt:
   250 00003372 E8CF000000          <1>     call getCurrentDrive
   251 00003377 0441                <1>     add al, "A" ;Convert to letter
   252 00003379 88C2                <1>     mov dl, al
   253                              <1> outChar:
   254 0000337B B402                <1>     mov ah, 02h ;Echo to STDOUT
   255 0000337D CD21                <1>     int 21h
   256                              <1>     return
    13                              <2> %%_ret:
    14 0000337F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   257                              <1> putCWDInPrompt:
   258 00003380 E8C1000000          <1>     call getCurrentDrive
   259 00003385 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   260 00003387 FEC2                <1>     inc dl
   261 00003389 0441                <1>     add al, "A" ;Convert to letter
   262 0000338B B43A                <1>     mov ah, ":"
   263 0000338D 488D3DC8CCFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   264 00003394 66AB                <1>     stosw   ;Store X:, rdi+=2
   265 00003396 8A058FCCFFFF        <1>     mov al, byte [pathSep]
   266 0000339C AA                  <1>     stosb   ;Store pathSep, inc rdi
   267 0000339D B447                <1>     mov ah, 47h ;Get Current Working Directory
   268 0000339F 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   269 000033A2 CD21                <1>     int 21h
   270 000033A4 721F                <1>     jc .badDrive
   271 000033A6 E8B9000000          <1>     call strlen
   272 000033AB 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   273                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   274 000033B1 B800400000          <1>     mov eax, 4000h ;Write to handle
   275 000033B6 BB01000000          <1>     mov ebx, 1  ;STDOUT
   276 000033BB 488D159ACCFFFF      <1>     lea rdx, currDirStr
   277 000033C2 CD21                <1>     int 21h
   278                              <1>     return
    13                              <2> %%_ret:
    14 000033C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   279                              <1> .badDrive:
   280                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   281 000033C5 488D152ED8FFFF      <1>     lea rdx, badDrvMsg
   282 000033CC E8A3FDFFFF          <1>     call printString
   283                              <1>     return
    13                              <2> %%_ret:
    14 000033D1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   284                              <1> 
   285                              <1> BCDtoHex:
   286                              <1> ;Converts a BCD value to a Hex byte
   287                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   288 000033D2 51                  <1>     push rcx
   289 000033D3 0FB6C0              <1>     movzx eax, al   ;Zero extend
   290 000033D6 89C1                <1>     mov ecx, eax    ;Save al in ecx
   291 000033D8 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   292 000033DD 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   293 000033E3 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   294                              <1> .bth:
   295 000033E6 050A000000          <1>     add eax, 10
   296 000033EB FFC9                <1>     dec ecx
   297 000033ED 75F7                <1>     jnz .bth
   298 000033EF 59                  <1>     pop rcx
   299 000033F0 C3                  <1>     ret
   300                              <1> 
   301                              <1> hexToBCD:
   302                              <1> ;Converts a Hex byte into two BCD digits
   303                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   304 000033F1 51                  <1>     push rcx
   305 000033F2 0FB6C0              <1>     movzx eax, al   ;Zero extend
   306 000033F5 31C9                <1>     xor ecx, ecx
   307                              <1> .htb0:
   308 000033F7 3D0A000000          <1>     cmp eax, 10
   309 000033FC 7209                <1>     jb .htb1
   310 000033FE 2D0A000000          <1>     sub eax, 10
   311 00003403 FFC1                <1>     inc ecx
   312 00003405 EBF0                <1>     jmp short .htb0
   313                              <1> .htb1:
   314 00003407 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   315 0000340A 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   316 0000340C 59                  <1>     pop rcx
   317 0000340D C3                  <1>     ret
   318                              <1> 
   319                              <1> printPackedBCD:
   320                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   321                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   322                              <1> ;Preserves all registers
   323 0000340E 50                  <1>     push rax
   324 0000340F 52                  <1>     push rdx
   325 00003410 88C4                <1>     mov ah, al
   326 00003412 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   327 00003414 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   328 00003417 7508                <1>     jnz .upperNybble
   329 00003419 B220                <1>     mov dl, " "
   330 0000341B B402                <1>     mov ah, 02h
   331 0000341D CD21                <1>     int 21h
   332 0000341F EB0E                <1>     jmp short .lowerNybble
   333                              <1> .upperNybble:
   334 00003421 50                  <1>     push rax
   335 00003422 C0EC04              <1>     shr ah, 4
   336 00003425 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   337 00003428 88E2                <1>     mov dl, ah
   338 0000342A B402                <1>     mov ah, 02h ;Print DL
   339 0000342C CD21                <1>     int 21h
   340 0000342E 58                  <1>     pop rax
   341                              <1> .lowerNybble:
   342 0000342F 0430                <1>     add al, "0"
   343 00003431 88C2                <1>     mov dl, al
   344 00003433 B402                <1>     mov ah, 02h ;Print DL
   345 00003435 CD21                <1>     int 21h
   346 00003437 5A                  <1>     pop rdx
   347 00003438 58                  <1>     pop rax
   348                              <1>     return
    13                              <2> %%_ret:
    14 00003439 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   349                              <1> 
   350                              <1> setDrive:
   351                              <1> ;Input: dl = 0 based Drive number to set to
   352                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   353                              <1> ;AX trashed.
   354 0000343A B40E                <1>     mov ah, 0Eh ;Set drive to dl
   355 0000343C CD21                <1>     int 21h 
   356 0000343E E803000000          <1>     call getCurrentDrive
   357 00003443 38D0                <1>     cmp al, dl  ;Is this the same drive?
   358                              <1>     return
    13                              <2> %%_ret:
    14 00003445 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   359                              <1> getCurrentDrive:
   360                              <1> ;Returns the 0 based current drive in al
   361 00003446 B419                <1>     mov ah, 19h
   362 00003448 CD21                <1>     int 21h
   363                              <1>     return
    13                              <2> %%_ret:
    14 0000344A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   364                              <1> 
   365                              <1> strcpy:
   366                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   367                              <1> ;rsi -> Source
   368                              <1> ;rdi -> Destination
   369 0000344B 51                  <1>     push rcx
   370 0000344C 57                  <1>     push rdi
   371 0000344D 4889F7              <1>     mov rdi, rsi
   372 00003450 E80F000000          <1>     call strlen ;Get the length of the string in rsi
   373 00003455 5F                  <1>     pop rdi
   374 00003456 F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   375 00003458 59                  <1>     pop rcx
   376                              <1>     return
    13                              <2> %%_ret:
    14 00003459 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   377                              <1> 
   378                              <1> strcpy2:
   379                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   380                              <1> ;rsi -> Source
   381                              <1> ;rdi -> Destination
   382 0000345A 56                  <1>     push rsi
   383 0000345B 57                  <1>     push rdi
   384 0000345C E8EAFFFFFF          <1>     call strcpy 
   385 00003461 5F                  <1>     pop rdi
   386 00003462 5E                  <1>     pop rsi
   387                              <1>     return
    13                              <2> %%_ret:
    14 00003463 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   388                              <1> 
   389                              <1> strlen:
   390                              <1> ;Gets the length of a ASCIIZ string
   391                              <1> ;Input: rdi = Source buffer
   392                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   393 00003464 50                  <1>     push rax
   394 00003465 B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   395 0000346A CD2F                <1>     int 2fh
   396 0000346C 58                  <1>     pop rax
   397                              <1>     return
    13                              <2> %%_ret:
    14 0000346D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> ucChar:
   400                              <1> ;Input: al = Char to uppercase
   401                              <1> ;Output: al = Adjusted char 
   402 0000346E 53                  <1>     push rbx
   403 0000346F 4889E3              <1>     mov rbx, rsp    ;Save the stack ptr
   404 00003472 50                  <1>     push rax    ;Push the char twice on the stack
   405 00003473 50                  <1>     push rax
   406 00003474 B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   407 00003479 CD2F                <1>     int 2fh         ;Returns the processed char in al
   408 0000347B 4889DC              <1>     mov rsp, rbx    ;Return the stack ptr to where it was
   409 0000347E 5B                  <1>     pop rbx
   410                              <1>     return
    13                              <2> %%_ret:
    14 0000347F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   411                              <1> 
   412                              <1> skipDelimiters:
   413                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   414                              <1> ; command delimiters but a subset thereof. 
   415                              <1> ;These are the same across all codepages.
   416                              <1> ;Input: rsi must point to the start of the data string
   417                              <1> ;Output: rsi points to the first non-delimiter char
   418 00003480 50                  <1>     push rax
   419                              <1> .l1:
   420 00003481 AC                  <1>     lodsb
   421 00003482 E807000000          <1>     call isALdelimiter
   422 00003487 74F8                <1>     jz .l1
   423                              <1> .exit:
   424 00003489 58                  <1>     pop rax
   425 0000348A 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   426                              <1>     return
    13                              <2> %%_ret:
    14 0000348D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   427                              <1> 
   428                              <1> isALdelimiter:
   429                              <1> ;Returns: ZF=NZ if al is not a command separator 
   430                              <1> ;         ZF=ZE if al is a command separator
   431 0000348E 3C20                <1>     cmp al, " "
   432                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003490 74(8D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   433 00003492 3C3B                <1>     cmp al, ";"
   434                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003494 74(8D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   435 00003496 3C3D                <1>     cmp al, "="
   436                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003498 74(8D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   437 0000349A 3C2C                <1>     cmp al, ","
   438                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000349C 74(8D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   439 0000349E 3C09                <1>     cmp al, TAB
   440                              <1>     return
    13                              <2> %%_ret:
    14 000034A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   441                              <1> 
   442                              <1> printPrompt:
   443 000034A1 66813D7FCBFFFFFFFF  <1>     cmp word [promptPtr], -1
   444 000034AA 750B                <1>     jne .validPrompt
   445                              <1>     ;Here we print the default prompt
   446 000034AC E8CFFEFFFF          <1>     call putCWDInPrompt
   447 000034B1 E8B4FEFFFF          <1>     call putGTinPrompt
   448                              <1>     return
    13                              <2> %%_ret:
    14 000034B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   449                              <1> .validPrompt:
   450                              <1>     return
    13                              <2> %%_ret:
    14 000034B7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   451                              <1> 
   452                              <1> clearCommandState:
   453                              <1> ;Clears the command state
   454 000034B8 488D3DEBCBFFFF      <1>     lea rdi, cmdStatePtr
   455 000034BF B906000000          <1>     mov ecx, cmdStateL
   456 000034C4 31C0                <1>     xor eax, eax
   457 000034C6 F3AA                <1>     rep stosb
   458                              <1>     return
    13                              <2> %%_ret:
    14 000034C8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   459                              <1> 
   460                              <1> clearCommandLineState:
   461                              <1> ;Clears the command line state after a 0Dh encountered
   462 000034C9 488D3DCFCBFFFF      <1>     lea rdi, cmdLineStatePtr
   463 000034D0 B911000000          <1>     mov ecx, cmdLineStateL
   464 000034D5 31C0                <1>     xor eax, eax
   465 000034D7 F3AA                <1>     rep stosb
   466 000034D9 C705BDCBFFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   466 000034E2 FF                  <1>
   467 000034E3 C705B9CBFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   467 000034EC FF                  <1>
   468                              <1>     return
    13                              <2> %%_ret:
    14 000034ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   469                              <1> 
   470                              <1> asciiFilenameToFCB:
   471                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   472                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   473                              <1> ;Also doesn't check if chars are valid
   474                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   475                              <1> ;Name is space padded.
   476                              <1> ;Input: rsi = ASCII string buffer
   477                              <1> ;       rdi = FCB name buffer
   478                              <1> ;Output: al = Char that terminated the source string 
   479 000034EE 53                  <1>     push rbx    
   480 000034EF 57                  <1>     push rdi
   481 000034F0 B90B000000          <1>     mov ecx, 11
   482 000034F5 B020                <1>     mov al, " "
   483 000034F7 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   484 000034F9 5F                  <1>     pop rdi
   485 000034FA 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   486                              <1>     ;Preprocess for Dir Searches
   487 000034FD 803E2E              <1>     cmp byte [rsi], "."
   488 00003500 7509                <1>     jne .processName
   489 00003502 A4                  <1>     movsb   ;Store the first dot
   490 00003503 803E2E              <1>     cmp byte [rsi], "."
   491 00003506 752C                <1>     jne .exitBadChar
   492 00003508 A4                  <1>     movsb
   493 00003509 EB29                <1>     jmp short .exitBadChar
   494                              <1> .processName:
   495 0000350B AC                  <1>     lodsb   ;Get the char in al
   496 0000350C 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   497 0000350E 7426                <1>     jz .exit
   498 00003510 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   499 00003512 7407                <1>     je .extSpace
   500 00003514 3C2E                <1>     cmp al, "."
   501 00003516 740C                <1>     je .ext
   502 00003518 AA                  <1>     stosb   ;Store the char
   503 00003519 EBF0                <1>     jmp short .processName
   504                              <1> .extSpace:
   505                              <1> ;Now we scan for a period in the name
   506 0000351B AC                  <1>     lodsb   ;Get a char and increase rsi
   507 0000351C 84C0                <1>     test al, al
   508 0000351E 7416                <1>     jz .exit
   509 00003520 3C2E                <1>     cmp al, "."     ;If al is not a period...
   510 00003522 75F7                <1>     jne .extSpace   ; keep searching
   511                              <1> .ext:
   512 00003524 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   513                              <1> .processExt:
   514 00003528 AC                  <1>     lodsb
   515 00003529 84C0                <1>     test al, al
   516 0000352B 7409                <1>     jz .exit
   517 0000352D 3C20                <1>     cmp al, " "
   518 0000352F 7405                <1>     je .exit
   519 00003531 AA                  <1>     stosb
   520 00003532 EBF4                <1>     jmp short .processExt
   521                              <1> .exitBadChar:
   522 00003534 30C0                <1>     xor al, al  ;Return a null terminator
   523                              <1> .exit:
   524 00003536 5B                  <1>     pop rbx
   525                              <1>     return
    13                              <2> %%_ret:
    14 00003537 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   526                              <1> 
   527                              <1> findLastPathComponant:
   528                              <1> ;Finds the last path componant of an ASCIIZ path string
   529                              <1> ;Input: rdi -> Head of the path to find last componant on
   530                              <1> ;Output: rdi -> Start of the last componant
   531 00003538 50                  <1>     push rax
   532 00003539 51                  <1>     push rcx
   533 0000353A 31C9                <1>     xor ecx, ecx
   534 0000353C FFC9                <1>     dec ecx
   535 0000353E 31C0                <1>     xor eax, eax
   536 00003540 F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   537 00003542 F7D1                <1>     not ecx     ;This gets the count of chars  
   538 00003544 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   539 00003547 8A05DECAFFFF        <1>     mov al, byte [pathSep]
   540 0000354D FD                  <1>     std
   541 0000354E F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   542 00003550 FC                  <1>     cld
   543 00003551 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   544 00003553 48FFC7              <1>     inc rdi     ;Point at pathsep
   545                              <1> .exit:
   546 00003556 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   547 00003559 59                  <1>     pop rcx
   548 0000355A 58                  <1>     pop rax
   549                              <1>     return
    13                              <2> %%_ret:
    14 0000355B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   550                              <1> 
   551                              <1> FCBToAsciiz:
   552                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   553                              <1> ;Name is space padded too
   554                              <1> ;Input: rsi = FCB name buffer
   555                              <1> ;       rdi = ASCIIZ string buffer
   556 0000355C B908000000          <1>     mov ecx, 8
   557 00003561 F3A4                <1>     rep movsb   ;Move the name over
   558                              <1> .scanNameSpace:
   559 00003563 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   560 00003567 750D                <1>     jne .ext
   561 00003569 48FFCF              <1>     dec rdi
   562 0000356C FFC1                <1>     inc ecx
   563 0000356E 81F908000000        <1>     cmp ecx, 8
   564 00003574 72ED                <1>     jb .scanNameSpace
   565                              <1> .ext:
   566 00003576 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   567 0000357B 7506                <1>     jne .validExt
   568 0000357D 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   569 00003581 7415                <1>     je .exit
   570                              <1> .validExt:
   571 00003583 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   572 00003585 AA                  <1>     stosb
   573 00003586 B903000000          <1>     mov ecx, 3
   574 0000358B F3A4                <1>     rep movsb   ;Move the three extension chars over
   575                              <1> .scanExtSpace:
   576 0000358D 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   577 00003591 7505                <1>     jne .exit
   578 00003593 48FFCF              <1>     dec rdi
   579 00003596 EBF5                <1>     jmp short .scanExtSpace
   580                              <1> .exit:
   581 00003598 31C0                <1>     xor eax, eax
   582 0000359A AA                  <1>     stosb   ;Store a null at the end
   583                              <1>     return
    13                              <2> %%_ret:
    14 0000359B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   584                              <1> 
   585                              <1> cpDelimOrCtrlStringToBufz:
   586                              <1> ;Copy a delimited or control char terminated string to a buffer
   587                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   588                              <1> ;       rdi -> Buffer to store null terminated string in
   589                              <1> ;Output: rsi -> First char past string end
   590                              <1> ;       rdi -> One char past null terminator on string buffer
   591 0000359C C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   592                              <1> .lp:
   593 0000359F AC                  <1>     lodsb
   594 000035A0 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here
   595 000035A2 760A                <1>     jbe .exit
   596 000035A4 E8E5FEFFFF          <1>     call isALdelimiter
   597 000035A9 7403                <1>     je .exit
   598 000035AB AA                  <1>     stosb
   599 000035AC EBF1                <1>     jmp short .lp
   600                              <1> .exit:
   601 000035AE 31C0                <1>     xor eax, eax
   602 000035B0 AA                  <1>     stosb   ;Store a null terminator
   603                              <1>     return
    13                              <2> %%_ret:
    14 000035B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   604                              <1> 
   605                              <1> 
   606                              <1> cpDelimPathToBufz:
   607                              <1> ;Copy a delimited path into buffer and null terminate.
   608                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   609                              <1> ;       rdi -> Buffer to store null terminated path in
   610                              <1> ;Output: rsi -> First char past pathname delimiter
   611                              <1> ;       rdi -> One char past null terminator on pathname buffer
   612 000035B2 53                  <1>     push rbx
   613 000035B3 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   614 000035B6 C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   615                              <1> .lp:
   616 000035B9 AC                  <1>     lodsb   ;Get the char
   617 000035BA 3C0D                <1>     cmp al, CR
   618 000035BC 7412                <1>     je .gotRedirPath
   619 000035BE E8CBFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   620 000035C3 740B                <1>     jz .gotRedirPath 
   621 000035C5 3A0561CAFFFF        <1>     cmp al, byte [switchChar]
   622 000035CB 7403                <1>     je .gotRedirPath
   623 000035CD AA                  <1>     stosb   ;Store this char and loop next char
   624 000035CE EBE9                <1>     jmp short .lp
   625                              <1> .gotRedirPath:
   626 000035D0 50                  <1>     push rax    ;Save the char on stack
   627 000035D1 30C0                <1>     xor al, al  ;Get null terminator char
   628 000035D3 4829FB              <1>     sub rbx, rdi
   629 000035D6 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   630 000035DD 7412                <1>     je .notColon
   631 000035DF 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   632 000035E6 7409                <1>     je .notColon
   633 000035E8 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   634 000035EC 7503                <1>     jne .notColon
   635 000035EE 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   636                              <1> .notColon:
   637 000035F1 AA                  <1>     stosb   ;Store the null terminator for the redir path
   638 000035F2 58                  <1>     pop rax ;Get back the char in al
   639 000035F3 5B                  <1>     pop rbx
   640                              <1>     return
    13                              <2> %%_ret:
    14 000035F4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   641                              <1> 
   642                              <1> buildCommandPath:
   643                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   644 000035F5 0FB605AFCAFFFF      <1>     movzx eax, byte [arg1Off]
   645 000035FC 4C8B050CCAFFFF      <1>     mov r8, [pspPtr]
   646 00003603 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   647 0000360A 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   648                              <1> copyArgumentToSearchSpec:
   649                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   650                              <1> ; and null terminates
   651 0000360D 488D3DCDCEFFFF      <1>     lea rdi, searchSpec
   652 00003614 E899FFFFFF          <1>     call cpDelimPathToBufz
   653                              <1>     return
    13                              <2> %%_ret:
    14 00003619 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   654                              <1> 
   655                              <1> scanForWildcards:
   656                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   657                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   658 0000361A 50                  <1>     push rax
   659 0000361B 56                  <1>     push rsi
   660                              <1> .lp:
   661 0000361C AC                  <1>     lodsb
   662 0000361D 3C3F                <1>     cmp al, "?"
   663 0000361F 740A                <1>     je .exit
   664 00003621 3C2A                <1>     cmp al, "*"
   665 00003623 7406                <1>     je .exit
   666 00003625 84C0                <1>     test al, al
   667 00003627 75F3                <1>     jnz .lp
   668 00003629 FEC0                <1>     inc al  ;This will clear the ZF
   669                              <1> .exit:
   670 0000362B 5E                  <1>     pop rsi
   671 0000362C 58                  <1>     pop rax
   672                              <1>     return
    13                              <2> %%_ret:
    14 0000362D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   673                              <1> 
   674                              <1> printDecimalWord:
   675                              <1> ;Takes qword in rax and print it's decimal representation
   676                              <1> ;Takes the qword in eax and prints its decimal representation
   677 0000362E 31C9                <1>     xor ecx, ecx
   678 00003630 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   679 00003632 85C0                <1>     test eax, eax
   680 00003634 750C                <1>     jnz .notZero
   681 00003636 B930000000          <1>     mov ecx, "0"
   682 0000363B BD01000000          <1>     mov ebp, 1  ;Print one digit
   683 00003640 EB3E                <1>     jmp short .dpfb2
   684                              <1> .notZero:
   685 00003642 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   686 00003644 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   687                              <1> .dpfb0:
   688 00003649 FFC5                <1>     inc ebp
   689 0000364B 81FD08000000        <1>     cmp ebp, 8
   690 00003651 7206                <1>     jb .dpfb00
   691 00003653 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   692 00003657 EB04                <1>     jmp short .dpfb01
   693                              <1> .dpfb00:
   694 00003659 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   695                              <1> .dpfb01:
   696 0000365D 31D2                <1>     xor edx, edx
   697 0000365F 48F7F6              <1>     div rsi
   698 00003662 80C230              <1>     add dl, '0'
   699 00003665 80FA39              <1>     cmp dl, '9'
   700 00003668 7603                <1>     jbe .dpfb1
   701 0000366A 80C207              <1>     add dl, 'A'-'0'-10
   702                              <1> .dpfb1:
   703 0000366D 81FD08000000        <1>     cmp ebp, 8
   704 00003673 7204                <1>     jb .dpfb10
   705 00003675 88D3                <1>     mov bl, dl ;Add the bottom bits
   706 00003677 EB02                <1>     jmp short .dpfb11
   707                              <1> .dpfb10:
   708 00003679 88D1                <1>     mov cl, dl    ;Save remainder byte
   709                              <1> .dpfb11:
   710 0000367B 4885C0              <1>     test rax, rax
   711 0000367E 75C9                <1>     jnz .dpfb0
   712                              <1> .dpfb2:
   713 00003680 81FD08000000        <1>     cmp ebp, 8
   714 00003686 7208                <1>     jb .dpfb20
   715 00003688 88DA                <1>     mov dl, bl
   716 0000368A 48C1EB08            <1>     shr rbx, 8
   717 0000368E EB06                <1>     jmp short .dpfb21
   718                              <1> .dpfb20:
   719 00003690 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   720 00003692 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   721                              <1> .dpfb21:
   722 00003696 B402                <1>     mov ah, 02h
   723 00003698 CD21                <1>     int 21h
   724 0000369A FFCD                <1>     dec ebp
   725 0000369C 75E2                <1>     jnz .dpfb2
   726                              <1>     return
    13                              <2> %%_ret:
    14 0000369E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   727                              <1> 
   728                              <1> getDecimalWord:
   729                              <1> ;Works on MAX A dword in eax
   730                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   731 0000369F 31C9                <1>     xor ecx, ecx
   732 000036A1 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   733 000036A3 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   734                              <1> .dpfb0:
   735 000036A8 FFC5                <1>     inc ebp
   736 000036AA 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   737 000036AE 31D2                <1>     xor edx, edx
   738 000036B0 48F7F3              <1>     div rbx
   739 000036B3 80C230              <1>     add dl, '0'
   740 000036B6 80FA39              <1>     cmp dl, '9'
   741 000036B9 7603                <1>     jbe .dpfb1
   742 000036BB 80C207              <1>     add dl, 'A'-'0'-10
   743                              <1> .dpfb1:
   744 000036BE 88D1                <1>     mov cl, dl    ;Save remainder byte
   745 000036C0 4885C0              <1>     test rax, rax
   746 000036C3 75E3                <1>     jnz .dpfb0
   747                              <1>     return
    13                              <2> %%_ret:
    14 000036C5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   748                              <1> 
   749                              <1> freezePC:
   750 000036C6 488D156ED7FFFF      <1>     lea rdx, memBad1
   751 000036CD B409                <1>     mov ah, 09h
   752 000036CF CD21                <1>     int 21h
   753                              <1> .altEP:
   754 000036D1 488D158CD7FFFF      <1>     lea rdx, memBad3
   755 000036D8 B409                <1>     mov ah, 09h
   756 000036DA CD21                <1>     int 21h
   757                              <1> .lp:
   758 000036DC F390                <1>     pause
   759 000036DE F4                  <1>     hlt
   760 000036DF EBFB                <1>     jmp short .lp
   761                              <1> 
   762                              <1> setDTA:
   763 000036E1 50                  <1>     push rax
   764 000036E2 52                  <1>     push rdx
   765 000036E3 488D157DCAFFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   766 000036EA B8001A0000          <1>     mov eax, 1A00h
   767 000036EF CD21                <1>     int 21h
   768 000036F1 5A                  <1>     pop rdx
   769 000036F2 58                  <1>     pop rax
   770                              <1>     return
    13                              <2> %%_ret:
    14 000036F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   771                              <1> 
   772                              <1> getDTA:
   773 000036F4 488D156CCAFFFF      <1>     lea rdx, cmdFFBlock
   774                              <1>     return
    13                              <2> %%_ret:
    14 000036FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   775                              <1> 
   776                              <1> ;-------------------------------
   777                              <1> ; Environment utility functions
   778                              <1> ;-------------------------------
   779                              <1> 
   780                              <1> cmpEnvVar:
   781                              <1> ;Checks that we have found the environment variable we are looking for.
   782                              <1> ;Input: rsi -> Environment var to verify the name of
   783                              <1> ;       rdi -> Environment var name to compare against
   784                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
   785 000036FC 56                  <1>     push rsi
   786 000036FD 57                  <1>     push rdi
   787 000036FE 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs
   788                              <1> .lp:
   789 00003701 AC                  <1>     lodsb               ;Pick up from user string
   790 00003702 E867FDFFFF          <1>     call ucChar         ;Upper case it!
   791 00003707 3807                <1>     cmp byte [rdi], al  
   792 00003709 7509                <1>     jne .exit
   793 0000370B 3C3D                <1>     cmp al, "="         ;Are we at the end?
   794 0000370D 7405                <1>     je .exit
   795 0000370F 48FFC7              <1>     inc rdi
   796 00003712 EBED                <1>     jmp short .lp
   797                              <1> .exit:
   798 00003714 5F                  <1>     pop rdi
   799 00003715 5E                  <1>     pop rsi
   800                              <1>     return
    13                              <2> %%_ret:
    14 00003716 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   801                              <1> 
   802                              <1> checkEnvGoodAndGet:
   803                              <1> ;Gets the env ptr and checks that it is double null terminated.
   804                              <1> ;Output:
   805                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
   806                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
   807                              <1> ;           rsi -> Environment pointer
   808 00003717 50                  <1>     push rax
   809 00003718 51                  <1>     push rcx
   810 00003719 57                  <1>     push rdi
   811 0000371A 4150                <1>     push r8
   812 0000371C 4C8B05ECC8FFFF      <1>     mov r8, qword [pspPtr]
   813 00003723 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
   814 00003727 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
   815 0000372A 741A                <1>     jz .badExit
   816 0000372C 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
   817 0000372F C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
   818                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
   819 00003732 31C0                <1>     xor eax, eax
   820                              <1> .pathNulScan:
   821 00003734 F2AE                <1>     repne scasb
   822 00003736 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
   823 00003738 740C                <1>     jz .badExit
   824 0000373A 3807                <1>     cmp byte [rdi], al  ;Is char two null?
   825 0000373C 75F6                <1>     jne .pathNulScan    ;If not, keep searching
   826 0000373E 31C0                <1>     xor eax, eax
   827 00003740 FFC0                <1>     inc eax ;Clear the ZF
   828 00003742 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
   829                              <1> .badExit:
   830 00003746 4158                <1>     pop r8
   831 00003748 5F                  <1>     pop rdi
   832 00003749 59                  <1>     pop rcx
   833 0000374A 58                  <1>     pop rax
   834                              <1>     return
    13                              <2> %%_ret:
    14 0000374B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   835                              <1> 
   836                              <1> 
   837                              <1> findEnvSpace:
   838                              <1> ;Searches the environment for space, returns a pointer to the start of the 
   839                              <1> ; free space in the pointer and a count of free space in the environment.
   840                              <1> ;If count is zero, pointer is not to be used.
   841                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
   842 0000374C 31C9                <1>     xor ecx, ecx
   843 0000374E 31C0                <1>     xor eax, eax    ;Clear eax too
   844 00003750 51                  <1>     push rcx
   845 00003751 E8C1FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
   846 00003756 59                  <1>     pop rcx
   847                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003757 74(4B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   848 00003759 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
   849 0000375D FFC9                <1>     dec ecx ;Make into a large counter
   850 0000375F 4889F7              <1>     mov rdi, rsi    
   851                              <1> .endsearch:
   852 00003762 F2AE                <1>     repne scasb ;Scan
   853 00003764 803F00              <1>     cmp byte [rdi], 0
   854 00003767 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
   855                              <1>     ;Here we are at the end of the environment
   856 00003769 F7D9                <1>     neg ecx
   857 0000376B FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
   858 0000376D 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
   859 00003770 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
   860 00003773 29C8                <1>     sub eax, ecx
   861 00003775 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
   862                              <1>     return
    13                              <2> %%_ret:
    14 00003777 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   863                              <1> 
   864                              <1> searchForEnvVar:
   865                              <1> ;Gets the environment, and scans it for a string with the var specified.
   866                              <1> ;Input: rdi -> Var name to look for.
   867                              <1> ;Returns: CF=NC: rsi -> Env var in env.
   868 00003778 57                  <1>     push rdi
   869 00003779 51                  <1>     push rcx
   870 0000377A 52                  <1>     push rdx
   871 0000377B 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
   872 0000377F 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
   873                              <1> .varLp:
   874 00003782 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
   875 00003785 E872FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
   876 0000378A 7416                <1>     je .varFound
   877 0000378C 31C0                <1>     xor eax, eax        ;Search for a null
   878 0000378E 4889F7              <1>     mov rdi, rsi        ;Scan the environment
   879 00003791 B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
   880 00003796 F2AE                <1>     repne scasb         ;Now scan for the terminating null
   881 00003798 3807                <1>     cmp byte [rdi], al  ;Now check the second char
   882 0000379A 7405                <1>     je .varNotFound     ;If second null, no more env to search!
   883 0000379C 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
   884 0000379F EBE1                <1>     jmp short .varLp    ;And scan again!
   885                              <1> .varNotFound:
   886 000037A1 F9                  <1>     stc
   887                              <1> .varFound:
   888 000037A2 59                  <1>     pop rcx
   889 000037A3 5A                  <1>     pop rdx
   890 000037A4 5F                  <1>     pop rdi
   891                              <1>     return
    13                              <2> %%_ret:
    14 000037A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   892                              <1> 
   893                              <1> envFree:
   894                              <1> ;Frees a variable from the environment, pulls the strings behind it up
   895                              <1> ; zeros the rest of the environment, and returns a pointer to the first
   896                              <1> ; free byte of the environment!
   897                              <1> ;Input: rsi -> Variable to free.
   898                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
   899                              <1> ;        ecx = Number of free bytes in env
   900 000037A6 4889F7              <1>     mov rdi, rsi
   901 000037A9 31C0                <1>     xor eax, eax
   902                              <1> .freeLp:
   903 000037AB 803F00              <1>     cmp byte [rdi], 0
   904 000037AE 7403                <1>     je .exitLp
   905 000037B0 AA                  <1>     stosb
   906 000037B1 EBF8                <1>     jmp short .freeLp
   907                              <1> .exitLp:
   908                              <1> ;rdi points to the terminating null of the var we just deleted
   909                              <1> ;rsi points to the start of the free space
   910 000037B3 4887F7              <1>     xchg rsi, rdi   ;Swap em!
   911 000037B6 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
   912 000037BB 7504                <1>     jne .prepPullup
   913 000037BD 31C0                <1>     xor eax, eax
   914 000037BF EB0E                <1>     jmp short .cleanEnv
   915                              <1> .prepPullup:
   916 000037C1 48FFC6              <1>     inc rsi         ;Go past the terminating null!
   917                              <1> .pullUp:
   918 000037C4 AC                  <1>     lodsb
   919 000037C5 AA                  <1>     stosb
   920 000037C6 84C0                <1>     test al, al ;Did we pick up a zero
   921 000037C8 75FA                <1>     jne .pullUp ;If not, keep copying
   922 000037CA 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
   923 000037CD 75F5                <1>     jne .pullUp
   924                              <1> ;We are at the end of the copy!
   925                              <1> .cleanEnv:
   926 000037CF AA                  <1>     stosb   ;Store the famous second null
   927 000037D0 48FFCF              <1>     dec rdi ;without incrementing it!!
   928 000037D3 E807000000          <1>     call getFreeSpace
   929 000037D8 31C0                <1>     xor eax, eax
   930 000037DA 51                  <1>     push rcx
   931 000037DB F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
   932 000037DD 59                  <1>     pop rcx
   933                              <1>     return
    13                              <2> %%_ret:
    14 000037DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   934                              <1> 
   935                              <1> getFreeSpace:
   936                              <1> ;Output: ecx = Number of free bytes in the environment block
   937 000037DF 56                  <1>     push rsi
   938 000037E0 57                  <1>     push rdi
   939 000037E1 E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
   940 000037E6 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
   941 000037EA 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
   942 000037ED E805000000          <1>     call getEnvSize ;Get total block size
   943 000037F2 29F9                <1>     sub ecx, edi    ;Get difference!
   944 000037F4 5F                  <1>     pop rdi
   945 000037F5 5E                  <1>     pop rsi
   946                              <1>     return
    13                              <2> %%_ret:
    14 000037F6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   947                              <1> 
   948                              <1> getEnvSize:
   949                              <1> ;Gets the number of bytes in the environment allocation
   950                              <1> ;Output: ecx = Number of bytes in the environment!
   951 000037F7 53                  <1>     push rbx
   952 000037F8 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
   953 000037FC 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
   954 000037FF C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
   955 00003802 5B                  <1>     pop rbx
   956                              <1>     return
    13                              <2> %%_ret:
    14 00003803 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   957                              <1> 
   958                              <1> getPtrToEndOfEnv:
   959                              <1> ;Gets ptr to end of the environment
   960                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
   961 00003804 50                  <1>     push rax
   962 00003805 51                  <1>     push rcx
   963 00003806 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
   964 0000380A 31C0                <1>     xor eax, eax
   965 0000380C 31C9                <1>     xor ecx, ecx
   966 0000380E FFC9                <1>     dec ecx
   967                              <1> .lp:
   968 00003810 F2AE                <1>     repne scasb
   969 00003812 3807                <1>     cmp byte [rdi], al
   970 00003814 75FA                <1>     jne .lp
   971 00003816 59                  <1>     pop rcx
   972 00003817 58                  <1>     pop rax
   973                              <1>     return
    13                              <2> %%_ret:
    14 00003818 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   974                              <1> 
   975                              <1> growEnvBlock:
   976                              <1> ;Attempts to grow the environment to store the new string. Will clean the
   977                              <1> ; newly allocated 160 byte block of the environment.
   978                              <1> ;Returns:   CF=NC - Environment grown ok!
   979                              <1> ;           CF=CY & ZF=ZE - Environment at max size
   980                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
   981 00003819 50                  <1>     push rax
   982 0000381A 53                  <1>     push rbx
   983 0000381B 51                  <1>     push rcx
   984 0000381C 56                  <1>     push rsi
   985 0000381D 57                  <1>     push rdi
   986 0000381E E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
   987 00003823 E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
   988 00003828 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
   989 0000382C 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
   990 0000382F 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
   991 00003835 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
   992 0000383B 7321                <1>     jae .tooLarge
   993                              <1>     ;Here ZF must be NZ.
   994 0000383D 4150                <1>     push r8
   995 0000383F 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
   996 00003843 B8004A0000          <1>     mov eax, 4A00h
   997 00003848 CD21                <1>     int 21h
   998 0000384A 4158                <1>     pop r8
   999 0000384C 720A                <1>     jc .exit
  1000                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1001                              <1>     ; so we add 160 zeros to the count of bytes
  1002 0000384E 81C1A0000000        <1>     add ecx, 0A0h
  1003 00003854 31C0                <1>     xor eax, eax
  1004 00003856 F3AA                <1>     rep stosb
  1005                              <1> .exit:
  1006 00003858 5F                  <1>     pop rdi
  1007 00003859 5E                  <1>     pop rsi
  1008 0000385A 59                  <1>     pop rcx
  1009 0000385B 5B                  <1>     pop rbx
  1010 0000385C 58                  <1>     pop rax
  1011                              <1>     return
    13                              <2> %%_ret:
    14 0000385D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1012                              <1> .tooLarge:
  1013 0000385E 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1014 00003861 F9                  <1>     stc             ;Set CF
  1015 00003862 EBF4                <1>     jmp short .exit
    19                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00003864 53                  <1>     push rbx
    25 00003865 51                  <1>     push rcx
    26 00003866 52                  <1>     push rdx
    27 00003867 57                  <1>     push rdi
    28 00003868 56                  <1>     push rsi
    29 00003869 FC                  <1>     cld         ;Make String ops go forward
    30                              <1> 
    31 0000386A 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 0000386D 488D154BD0FFFF      <1>     lea rdx, crlf
    33 00003874 E8FBF8FFFF          <1>     call printString
    34                              <1> 
    35 00003879 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    36 0000387F B90C000000          <1>     mov ecx, 0Ch
    37 00003884 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    38 00003886 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    39 00003889 480FB7FF            <1>     movzx rdi, di
    40 0000388D 4889FA              <1>     mov rdx, rdi    ;Copy error code
    41 00003890 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    42 00003894 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    43 00003897 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    44 0000389A 488D152D010000      <1>     lea rdx, qword [.errorMsgTable]
    45 000038A1 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    46 000038A5 E8CAF8FFFF          <1>     call printString     ;Call DOS to print first part of message
    47                              <1> 
    48 000038AA 488D150E020000      <1>     lea rdx, qword [.readmsg]
    49 000038B1 488D3D16020000      <1>     lea rdi, qword [.writemsg]
    50 000038B8 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    51 000038BB 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    52 000038BF E8B0F8FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
    53                              <1> 
    54 000038C4 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    55 000038C7 0F85E7000000        <1>     jnz .charError
    56                              <1> ;Disk error continues here
    57 000038CD 488D15E4010000      <1>     lea rdx, qword [.drive] ;Drive message
    58 000038D4 E89BF8FFFF          <1>     call printString
    59 000038D9 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    60 000038DB 80C241              <1>     add dl, "A" ;Add ASCII code
    61 000038DE B402                <1>     mov ah, 02h ;Print char in dl
    62 000038E0 CD21                <1>     int 21h
    63                              <1> .userInput:
    64 000038E2 E886F8FFFF          <1>     call printCRLF  ;Print new line
    65                              <1> ;Abort, Retry, Ignore, Fail is word order
    66                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    67                              <1> .userAbort:
    68                              <1> ;Abort is always an option
    69 000038E7 488D15EF010000      <1>     lea rdx, qword [.abortmsg]
    70 000038EE E881F8FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
    71                              <1> .userRetry:
    72 000038F3 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    73 000038F6 7418                <1>     jz .userIgnore    ;If clear, dont print message
    74 000038F8 488D15F6010000      <1>     lea rdx, qword [.betweenMsg]
    75 000038FF E870F8FFFF          <1>     call printString
    76 00003904 488D15DF010000      <1>     lea rdx, qword [.retrymsg]
    77 0000390B E864F8FFFF          <1>     call printString
    78                              <1> .userIgnore:
    79 00003910 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    80 00003913 7418                <1>     jz .userFail
    81 00003915 488D15D9010000      <1>     lea rdx, qword [.betweenMsg]
    82 0000391C E853F8FFFF          <1>     call printString
    83 00003921 488D15BB010000      <1>     lea rdx, qword [.ignoremsg]
    84 00003928 E847F8FFFF          <1>     call printString
    85                              <1> .userFail:
    86 0000392D F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    87 00003930 7418                <1>     jz .userMsgEnd
    88 00003932 488D15BC010000      <1>     lea rdx, qword [.betweenMsg]
    89 00003939 E836F8FFFF          <1>     call printString
    90 0000393E 488D15AB010000      <1>     lea rdx, qword [.failmsg]
    91 00003945 E82AF8FFFF          <1>     call printString
    92                              <1> .userMsgEnd:
    93 0000394A 488D15A7010000      <1>     lea rdx, qword [.endMsg]
    94 00003951 E81EF8FFFF          <1>     call printString
    95                              <1> ;Get user input now 
    96 00003956 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
    97 00003958 488D3D9C010000      <1>     lea rdi, qword [.responses] ;Go to start of string
    98 0000395F B401                <1>     mov ah, 01h ;STDIN without Console Echo
    99 00003961 CD21                <1>     int 21h ;Get char in al
   100 00003963 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   101 00003965 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   102 00003967 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   103                              <1> .uip1:
   104 00003969 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   105 0000396A 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   106 0000396C FFC1                <1>     inc ecx
   107 0000396E 81F904000000        <1>     cmp ecx, 4
   108 00003974 75F3                <1>     jne .uip1
   109 00003976 E967FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   110                              <1> .validInput:
   111 0000397B E8EDF7FFFF          <1>     call printCRLF   ;Note the input was accepted
   112 00003980 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   113                              <1> ;Now check if the input is permitted
   114 00003982 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   115 00003984 7427                <1>     je .cehExit
   116 00003986 84C0                <1>     test al, al ;Check if 0 => Ignore
   117 00003988 740F                <1>     je .viIgnore
   118 0000398A 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   119 0000398C 7416                <1>     je .viRetry
   120                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   121 0000398E F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   122 00003991 0F844BFFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   123 00003997 EB14                <1>     jmp short .cehExit
   124                              <1> .viIgnore:
   125 00003999 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   126 0000399C 0F8440FFFFFF        <1>     jz .userInput
   127 000039A2 EB09                <1>     jmp short .cehExit
   128                              <1> .viRetry:
   129 000039A4 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   130 000039A7 0F8435FFFFFF        <1>     jz .userInput
   131                              <1> .cehExit:
   132 000039AD 5E                  <1>     pop rsi
   133 000039AE 5F                  <1>     pop rdi
   134 000039AF 5A                  <1>     pop rdx
   135 000039B0 59                  <1>     pop rcx
   136 000039B1 5B                  <1>     pop rbx
   137 000039B2 48CF                <1>     iretq
   138                              <1> .charError:
   139 000039B4 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   140 000039B9 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   141                              <1> .ce1:
   142 000039C0 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   143 000039C1 88C2                <1>     mov dl, al  ;Move char into dl
   144 000039C3 B402                <1>     mov ah, 02h
   145 000039C5 CD21                <1>     int 21h ;Print char
   146 000039C7 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   147 000039C9 E914FFFFFF          <1>     jmp .userInput
   148                              <1> 
   149                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   150 000039CE 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   150 000039D7 746563742024202020  <1>
   151 000039E0 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   151 000039E9 6E6974202420202020  <1>
   152 000039F2 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   152 000039FB 202420202020202020  <1>
   153 00003A04 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   153 00003A0D 6F6D6D616E64202420  <1>
   154 00003A16 446174612024202020- <1>             db "Data $            "       ;Error 4
   154 00003A1F 202020202020202020  <1>
   155 00003A28 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   155 00003A31 737420242020202020  <1>
   156 00003A3A 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   156 00003A43 202020202020202020  <1>
   157 00003A4C 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   157 00003A55 656469612024202020  <1>
   158 00003A5E 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   158 00003A67 7420466F756E642024  <1>
   159 00003A70 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   159 00003A79 706572202420202020  <1>
   160 00003A82 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   160 00003A8B 6C7420242020202020  <1>
   161 00003A94 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   161 00003A9D 742024202020202020  <1>
   162 00003AA6 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   162 00003AAF 61696C757265202420  <1>
   163                              <1> 
   164 00003AB8 64726976652024      <1> .drive      db "drive $"
   165 00003ABF 6572726F7220726561- <1> .readmsg    db "error reading $"
   165 00003AC8 64696E672024        <1>
   166 00003ACE 6572726F7220777269- <1> .writemsg   db "error writing $"
   166 00003AD7 74696E672024        <1>
   167 00003ADD 41626F727424        <1> .abortmsg   db "Abort$" 
   168 00003AE3 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   169 00003AEA 526574727924        <1> .retrymsg   db "Retry$"
   170 00003AF0 4661696C24          <1> .failmsg    db "Fail$"
   171 00003AF5 2C2024              <1> .betweenMsg db ", $"
   172 00003AF8 3F2024              <1> .endMsg     db "? $"
   173 00003AFB 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   174                              <1> 
   175                              <1> int23h:
   176 00003AFF F60527C5FFFFFF      <1>     test byte [permaSwitch], -1
   177 00003B06 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   178                              <1>     ;Else, we juggle parent PSP's
   179 00003B08 50                  <1>     push rax
   180 00003B09 53                  <1>     push rbx
   181 00003B0A 488B0506C5FFFF      <1>     mov rax, qword [realParent]
   182 00003B11 488B1DF7C4FFFF      <1>     mov rbx, qword [pspPtr]
   183 00003B18 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   184 00003B1C 5B                  <1>     pop rbx
   185 00003B1D 58                  <1>     pop rax
   186                              <1> .exit:
   187 00003B1E F9                  <1>     stc     ;Set CF to kill the task
   188 00003B1F C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    20                                  endOfAlloc: ;End of alloc
    21                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    22                                  Segment transient align=1 follows=.data
    23                                  ;This segment always gets ejected post load
    24                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D1508020000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    15 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    16 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    17 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    18                              <1> ;Setup Int 22h, Int 23h and Int 24h
    19 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    20 0000002F 488905(2E000000)    <1>     mov qword [parentInt22], rax
    21                              <1> 
    22 00000036 488D15(64380000)    <1>     lea rdx, critErrorHandler
    23 0000003D 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    24 00000041 B824250000          <1>     mov eax, 2524h
    25 00000046 CD21                <1>     int 21h
    26 00000048 488D15(FF3A0000)    <1>     lea rdx, int23h
    27 0000004F 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    28 00000053 B823250000          <1>     mov eax, 2523h
    29 00000058 CD21                <1>     int 21h
    30 0000005A 488D15(0C0F0000)    <1>     lea rdx, applicationReturn
    31 00000061 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    32 00000065 B822250000          <1>     mov eax, 2522h
    33 0000006A CD21                <1>     int 21h
    34                              <1> ;Get a pointer to DOS Sysvars
    35 0000006C B452                <1>     mov ah, 52h ;Get sysvars
    36 0000006E CD21                <1>     int 21h
    37 00000070 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    38                              <1> ;Call for simple internationalisation data
    39 00000077 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    40 0000007C CD21                <1>     int 21h
    41 0000007E 3CFF                <1>     cmp al, -1
    42 00000080 7412                <1>     je .skipSwitch
    43 00000082 8815(2C000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    44 00000088 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    45 0000008B 7507                <1>     jne .skipSwitch
    46 0000008D C605(2B000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    47                              <1> .skipSwitch:
    48 00000094 B800380000          <1>     mov eax, 3800h  ;Get current country data
    49 00000099 488D15(36000000)    <1>     lea rdx, ctryData
    50 000000A0 CD21                <1>     int 21h ;Write the data to the internal country table
    51                              <1> ;Now determine if this is the master copy of COMMAND.COM
    52                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    53 000000A2 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    54 000000A7 CD21                <1>     int 21h
    55 000000A9 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    56 000000AC B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    57 000000B1 CD21                <1>     int 21h
    58 000000B3 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    59 000000B6 7574                <1>     jne .skipMaster
    60                              <1> ;Ok so we are master command.com
    61                              <1> ;Now make myself the real parent
    62 000000B8 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    63 000000BF 4C8905(17000000)    <1>     mov qword [realParent], r8
    64                              <1> ;Set current Drive in COMSPEC
    65 000000C6 B800190000          <1>     mov eax, 1900h ;Get current Drive
    66 000000CB CD21                <1>     int 21h
    67 000000CD 0441                <1>     add al, "A"
    68 000000CF 8805(E30E0000)      <1>     mov byte [comspecEvar.cspec], al
    69                              <1> ;Set Int 2Eh up
    70 000000D5 488D15(76180000)    <1>     lea rdx, int2Eh
    71 000000DC B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    72 000000E1 CD21                <1>     int 21h
    73                              <1> ;Now, open and parse AUTOEXEC.BAT. Build new Master Environment here.
    74                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    75 000000E3 BB0A000000          <1>     mov ebx, 10 ;Allocate 160 bytes
    76 000000E8 B800480000          <1>     mov eax, 4800h
    77 000000ED CD21                <1>     int 21h
    78 000000EF 0F821EFFFFFF        <1>     jc .exitBad
    79                              <1> ;Set master environment as mine
    80 000000F5 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    81 000000F9 488D35(DB0E0000)    <1>     lea rsi, masterEnv
    82 00000100 4889C7              <1>     mov rdi, rax
    83 00000103 B91E000000          <1>     mov ecx, menv_len
    84 00000108 F3A4                <1>     rep movsb   ;Copy the chars over!
    85                              <1> 
    86 0000010A 488D15(BF080000)    <1>     lea rdx, crlf
    87 00000111 B409                <1>     mov ah, 09h
    88 00000113 CD21                <1>     int 21h
    89 00000115 E8(A9220000)        <1>     call time
    90 0000011A E8(E0210000)        <1>     call date
    91 0000011F 488D15(BF080000)    <1>     lea rdx, crlf
    92 00000126 B409                <1>     mov ah, 09h
    93 00000128 CD21                <1>     int 21h
    94 0000012A EB2E                <1>     jmp short .printInit
    95                              <1> .skipMaster:    
    96                              <1> ;We now search for the master environment!!
    97                              <1>     ;Walk the parentPSP chain until we find a PSP which is its own
    98                              <1>     ; parent. This is the previous master command interpreter! This means
    99                              <1>     ; that non-master COMMAND.COM instances are not their own parents! We 
   100                              <1>     ; then set our environment ptr in the PSP to the master environment.
   101 0000012C 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
   102 00000133 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
   103 0000013B 0FB605(2C000000)    <1>     movzx eax, byte [switchChar]
   104 00000142 F2AE                <1>     repne scasb
   105 00000144 67E313              <1>     jecxz .printInit
   106 00000147 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
   107 0000014A E8(6E340000)        <1>     call ucChar
   108 0000014F 3C50                <1>     cmp al, "P" ;Is it permanent switch?
   109 00000151 7507                <1>     jne .printInit
   110 00000153 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
   111                              <1> .printInit:
   112 0000015A 488D1D(223B0000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
   113                              <1> ;Finish by printing INIT string.
   114 00000161 53                  <1>     push rbx
   115 00000162 488D153A000000      <1>     lea rdx, initString
   116 00000169 B409                <1>     mov ah, 09h
   117 0000016B CD21                <1>     int 21h ;Print init string
   118 0000016D E8(602B0000)        <1>     call version.printVersionNumber
   119 00000172 488D1560000000      <1>     lea rdx, initString2
   120 00000179 B409                <1>     mov ah, 09h
   121 0000017B CD21                <1>     int 21h ;Print init string
   122 0000017D 5B                  <1>     pop rbx
   123                              <1>     ;Now we add the stack to the alloc and paragraph align
   124 0000017E 4881C340060000      <1>     add rbx, stackSize
   125 00000185 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   126 0000018C 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   127 00000190 48C1E304            <1>     shl rbx, 4
   128 00000194 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   129 00000197 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   130 0000019E E9(F90E0000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   131                              <1> ;Loader Data here
   132                              <1> initString: 
   133 000001A3 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   133 000001AC 66696320436F6D7075- <1>
   133 000001B5 746572205265736561- <1>
   133 000001BE 726368285229205343- <1>
   133 000001C7 502F444F5328522920- <1>
   133 000001D0 56657273696F6E2024  <1>
   134                              <1> initString2:
   135 000001D9 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",CR,LF,"$"
   135 000001E2 202020284329436F70- <1>
   135 000001EB 797269676874205363- <1>
   135 000001F4 69656E746966696320- <1>
   135 000001FD 436F6D707574657220- <1>
   135 00000206 526573656172636820- <1>
   135 0000020F 323032342E0D0A24    <1>
   136 00000217 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   136 00000220 20444F532076657273- <1>
   136 00000229 696F6E0D0A24        <1>
    25                                  
    26                                  stackSize equ 200*8    ;200 QWORD stack
    26          ------------------       info: assembly required 1+4+2 passes

