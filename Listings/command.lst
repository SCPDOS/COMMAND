     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (41h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> netFCBShare     equ 70h
   160                              <1> noInherit       equ 80h
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> 
   163                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 24h on disk full.
   164                              <1> ;Buffering on writes
   165                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   167                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1> readOnlyFile    equ 1h
   170                              <1> hiddenFile      equ 2h
   171                              <1> systemFile      equ 4h
   172                              <1> volumeLabel     equ 8h
   173                              <1> directoryFile   equ 10h ;Directory entry
   174                              <1> archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1> charDevFastOut  equ 10h ;If set, device supports Int 29h
   182                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   183                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   185                              <1> devCharDev      equ 80h ;If set, it is a char device!
   186                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   190                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1>  
   192                              <1> ;------------------------------------------------------------------------;
   193                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   194                              <1> ; to an internal buffer, and then copying it to the specified location
   195                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   196                              <1> ; another request for the same sector from the same device is made, so 
   197                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   198                              <1> ; size, selected according to the largest detected sector size during 
   199                              <1> ; the initial loadup.
   200                              <1> ;
   201                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   202                              <1> ;
   203                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   204                              <1> ;------------------------------------------------------------------------;
   205                              <1> 
   206                              <1> struc bufferHdr
   207 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   208 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   209 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   210 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   211 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   212 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   213 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   214 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   215 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   216                              <1>     .dataarea:             ;Points to the start of the data area
   217                              <1> endstruc
   218                              <1> ;Buffer Flag equates
   219                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   220                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   221                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   222                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   223                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   224                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   225                              <1> ;Note! A buffer is marked as referenced only when the application 
   226                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   227                              <1> ;------------------------------------------------------------------------;
   228                              <1> ; Memory control block for each memory arena
   229                              <1> ;------------------------------------------------------------------------;
   230                              <1> struc mcb
   231 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   232 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   233 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   234 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   235                              <1>     .program:
   236                              <1> endstruc
   237                              <1> ;MCB equates
   238                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   239                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   240                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   241                              <1> mcbMarkCtn      equ "M"
   242                              <1> mcbMarkEnd      equ "Z"
   243                              <1> 
   244                              <1> memFirstFit     equ 0   ;First free block goes to application
   245                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   246                              <1> memLastFit      equ 2   ;Last free block goes to application
   247                              <1> 
   248                              <1> ;Owner = Para aligned address => Owning application PSP
   249                              <1> ;...To consider...
   250                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   251                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   252                              <1> ;------------------------------------------------------------------------;
   253                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   254                              <1> ; following order, thus allowing for return values to be placed in the 
   255                              <1> ; registers by accessing the caller register stack frame.
   256                              <1> ;------------------------------------------------------------------------;
   257                              <1> struc callerFrame
   258 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   259 00000008 ????????????????    <1>     .rbx    resq 1    
   260 00000010 ????????????????    <1>     .rcx    resq 1
   261 00000018 ????????????????    <1>     .rdx    resq 1
   262 00000020 ????????????????    <1>     .rsi    resq 1
   263 00000028 ????????????????    <1>     .rdi    resq 1
   264 00000030 ????????????????    <1>     .rbp    resq 1
   265 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   266 00000040 ????????????????    <1>     .r9     resq 1
   267                              <1> ;Pushed by Processor when invoked via Interrupt
   268 00000048 ????????????????    <1>     .rip    resq 1
   269 00000050 ????????????????    <1>     .cs     resq 1
   270 00000058 ????????????????    <1>     .flags  resq 1
   271                              <1> endstruc
   272                              <1> 
   273                              <1> struc dpl
   274                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   275                              <1> ; server calls
   276 00000000 ????????????????    <1>     .rax    resq 1
   277 00000008 ????????????????    <1>     .rbx    resq 1
   278 00000010 ????????????????    <1>     .rcx    resq 1
   279 00000018 ????????????????    <1>     .rdx    resq 1
   280 00000020 ????????????????    <1>     .rsi    resq 1
   281 00000028 ????????????????    <1>     .rdi    resq 1
   282 00000030 ????????????????    <1>     .r8     resq 1
   283 00000038 ????????????????    <1>     .r9     resq 1
   284 00000040 ????????????????    <1>     .align  resq 1
   285 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   286 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   287                              <1> endstruc
   288                              <1> 
   289                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   290 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   291 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   292 00000010 ????????????????    <1>     .newSFTVal      resq 1
   293 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   294 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   295 00000028 ????????????????    <1>     .newLastdrive   resq 1
   296 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   297 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   298 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   299 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   300 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   301 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   302 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc filename
   306                              <1> ;8.3 File name struct
   307 00000000 ????????????????    <1>     .fName  resb 8
   308 00000008 ??????              <1>     .fExt   resb 3
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   312 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   313 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   314 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   315 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   316 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   317 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   318 00000016 ????                <1>     .fileTime   resw 1  ;File time
   319 00000018 ????                <1>     .fileDate   resw 1  ;File date
   320 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   321 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc psp
   325 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   326 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   327 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   328 0000000A ????????????????    <1>     .oldInt22h  resq 1  ;Int 22h pointer on overlay load
   329 00000012 ????????????????    <1>     .oldInt23h  resq 1  ;Int 23h pointer on overlay load
   330 0000001A ????????????????    <1>     .oldInt24h  resq 1  ;Int 24h pointer on overlay load
   331 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   332                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   333 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   334 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   335 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 21h
   336 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   337 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   338 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   339 0000005B ??                  <1>                 resb 1  ;Reserved byte
   340                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   341                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   342                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   343                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   344                              <1> ; always used and xtraHdlSz.
   345                              <1> ;Will need to add two SYSCALLS for future expansion:
   346                              <1> ;       1) Get Program Environment Pointer
   347                              <1> ;       2) Get Command Line arguments pointer
   348                              <1> ;The below are in the same place as in DOS.
   349                              <1>     .cmdLineArgPtr: ;Symbol for future use
   350 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   351 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   352                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   353 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   354 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   355                              <1> endstruc
   356                              <1> 
   357                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   358                              <1> 
   359                              <1> struc clkStruc
   360 00000000 ????                <1>     .dateWord   resw 1
   361 00000002 ??                  <1>     .minutes    resb 1
   362 00000003 ??                  <1>     .hours      resb 1
   363 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   364 00000005 ??                  <1>     .seconds    resb 1
   365                              <1> endstruc
   366                              <1> 
   367                              <1> struc countryStruc
   368 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   369                              <1>                         ;0 = month day year hh:mm:ss
   370                              <1>                         ;1 = day month year hh:mm:ss
   371                              <1>                         ;2 = year month day hh:mm:ss
   372 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   373 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   374 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   375 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   376 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   377 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   378                              <1>                         ;0 = Symbol leads, without space
   379                              <1>                         ;1 = Symbol follows, without space
   380                              <1>                         ;2 = Symbol leads, one space
   381                              <1>                         ;3 = Symbol follows, one space
   382                              <1>                         ;4 = Symbol replace decimal separator
   383 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   384 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   385 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   386 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   387 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   388                              <1> endstruc
   389                              <1> 
   390                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   391                              <1> ;for a space of 64Gb
   392                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   393                              <1> dosLowBase  equ 600h    ;Low load address
   394                              <1> 
   395                              <1> ;Critical Error AH bitfield equates
   396                              <1> critRead    equ 0h
   397                              <1> critWrite   equ 1h
   398                              <1> critDOS     equ 0h
   399                              <1> critFAT     equ 2h
   400                              <1> critDir     equ 4h
   401                              <1> critData    equ 6h
   402                              <1> critFailOK  equ 8h
   403                              <1> critRetryOK equ 10h
   404                              <1> critIgnorOK equ 20h
   405                              <1> critCharDev equ 80h
   406                              <1> 
   407                              <1> critIgnore  equ 0
   408                              <1> critRetry   equ 1
   409                              <1> critAbort   equ 2
   410                              <1> critFail    equ 3
   411                              <1> 
   412                              <1> ;MISC ASCII control chars
   413                              <1> NUL equ 00h ;^@         | ASCII Null
   414                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   415                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   416                              <1> BEL equ 07h ;^G         | ASCII Bell
   417                              <1> BSP equ 08h ;^H         | ASCII Backspace
   418                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   419                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   420                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   421                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   422                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   423                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   424                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   425                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   426                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   427                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   428                              <1> SPC equ 20h ;Printable  | ASCII Space
   429                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   430                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   431                              <1> 
   432                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   433                              <1> ;Extended Ascii Codes
   434                              <1> eF1     equ 3Bh ;F1 second byte
   435                              <1> eF2     equ 3Ch ;F2 second byte
   436                              <1> eF3     equ 3Dh ;F3 second byte
   437                              <1> eF4     equ 3Eh ;F4 second byte
   438                              <1> eF5     equ 3Fh ;F5 second byte
   439                              <1> eF6     equ 40h ;F6 second byte
   440                              <1> eF7     equ 41h ;F7 second byte
   441                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   442                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   443                              <1> eIns    equ 52h ;Insert second byte
   444                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   445                              <1> 
   446                              <1> ;Default Configuration for the system
   447                              <1> 
   448                              <1> buffersDefault  equ 30
   449                              <1> filesDefault    equ 20
   450                              <1> fcbsDefault     equ 4
   451                              <1> safeFcbsDeflt   equ 0
   452                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       resb 5  
    66 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   resb 1
    68 00000008 ????????????????    <1>     .filename   resb 8
    69 00000010 ??????              <1>     .fileext    resb 3
    70 00000013 ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    resb 8
    73 00000020 ??????              <1>     .newExt     resb 3
    74 00000023 ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdLineCnt  equ psp.parmList
    19                              <1> cmdLine     equ psp.progTail
    20                              <1> 
    21                              <1> 
    22                              <1> ;Struct Declarations
    23                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    24 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    25 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    26 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    27 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    28 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc execProg  ;For use with EXEC-ing a child task
    32 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    33 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    34 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    35 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    36                              <1> endstruc
    37                              <1> 
    38                              <1> ;Directory attribute equates
    39                              <1>     dirReadOnly     equ 01h
    40                              <1>     dirHidden       equ 02h
    41                              <1>     dirSystem       equ 04h
    42                              <1>     dirVolumeID     equ 08h
    43                              <1>     dirDirectory    equ 10h
    44                              <1>     dirArchive      equ 20h
    45                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    46                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    47                              <1>     ;If any of the three bits are set, then ALL three bits are set
    48                              <1>     ; in addition to whatever the user passed to search for.
    49                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    50                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    11 0000002B 5C                  <1> pathSep     db "\"  ;Default path sep
    12 0000002C 2F                  <1> switchChar  db "/"  ;Default switch char
    13 0000002D 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    14 0000002E 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    15                              <1> ;Static strings, not used in command line parsing
    16 00000036 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    16 0000003F 000000000000000000- <1>
    16 00000048 000000000000000000- <1>
    16 00000051 000000000000000000- <1>
    16 0000005A 0000                <1>
    17 0000005C 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    17 00000065 000000000000000000- <1>
    17 0000006E 000000000000000000- <1>
    17 00000077 000000000000000000- <1>
    17 00000080 000000000000000000- <1>
    17 00000089 000000000000000000- <1>
    17 00000092 000000000000000000- <1>
    17 0000009B 00000000            <1>
    18                              <1> 
    19                              <1> 
    20                              <1> cmdLineStatePtr:
    21 0000009F 0000000000000000    <1> cmdStartPtr dq 0    ;Ptr to the first char for this command (may be a space)
    22 000000A7 0000000000000000    <1> cmdEndPtr   dq 0    ;Ptr to the terminating char for this command (0Dh or |)
    23 000000AF 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    24 000000B0 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    25 000000B2 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    26                              <1> 
    27                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    28                              <1> ;These variables are valid for a SINGLE command in a command line
    29                              <1> ;Next two bytes, if set to -1, flags error
    30 000000B4 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    31 000000B5 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    32                              <1> ;                    If 2, we are redirecting output to a file, by appending
    33 000000B6 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    34 000000B8 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    35                              <1> 
    36 000000BA 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    37 000000BB 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    38 000000BC 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    39                              <1> 
    40 000000BD 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    41 000000BE 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    42 000000BF 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    43                              <1> 
    44                              <1> cmdStateL equ $ - cmdStatePtr
    45                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    46                              <1> 
    47                              <1> ;Structs and strings
    48                              <1> 
    49 000000C0 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    49 000000C9 00000000000000      <1>
    50 000000D0 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    50 000000D9 000000000000000000- <1>
    50 000000E2 000000000000000000- <1>
    50 000000EB 000000000000000000- <1>
    50 000000F4 00000000000000      <1>
    51                              <1> 
    52 000000FB 000000000000000000- <1> launchBlock db execProg_size dup (0)
    52 00000104 000000000000000000- <1>
    52 0000010D 000000000000000000- <1>
    52 00000116 0000000000          <1>
    53 0000011B 000000000000000000- <1> cmdTail     db cmdBufferL dup (0)   ;This is the tail that is passed to EXEC
    53 00000124 000000000000000000- <1>
    53 0000012D 000000000000000000- <1>
    53 00000136 000000000000000000- <1>
    53 0000013F 000000000000000000- <1>
    53 00000148 000000000000000000- <1>
    53 00000151 000000000000000000- <1>
    53 0000015A 000000000000000000- <1>
    53 00000163 000000000000000000- <1>
    53 0000016C 000000000000000000- <1>
    53 00000175 000000000000000000- <1>
    53 0000017E 000000000000000000- <1>
    53 00000187 000000000000000000- <1>
    53 00000190 000000000000000000- <1>
    53 00000199 00000000            <1>
    54                              <1> 
    55 0000019D 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    55 000001A6 000000000000000000- <1>
    55 000001AF 000000000000000000- <1>
    55 000001B8 000000000000000000- <1>
    55 000001C1 000000000000000000- <1>
    55 000001CA 000000000000000000- <1>
    55 000001D3 000000000000000000- <1>
    55 000001DC 000000000000000000- <1>
    55 000001E5 000000000000000000- <1>
    55 000001EE 000000000000000000- <1>
    55 000001F7 000000000000000000- <1>
    55 00000200 000000000000000000- <1>
    55 00000209 000000000000000000- <1>
    55 00000212 000000000000000000- <1>
    55 0000021B 00000000            <1>
    56 0000021F 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    56 00000228 000000000000000000- <1>
    56 00000231 000000000000000000- <1>
    56 0000023A 000000000000000000- <1>
    56 00000243 000000000000000000- <1>
    56 0000024C 000000000000000000- <1>
    56 00000255 000000000000000000- <1>
    56 0000025E 000000000000000000- <1>
    56 00000267 000000000000000000- <1>
    56 00000270 000000000000000000- <1>
    56 00000279 000000000000000000- <1>
    56 00000282 000000000000000000- <1>
    56 0000028B 000000000000000000- <1>
    56 00000294 000000000000000000- <1>
    56 0000029D 00000000            <1>
    57 000002A1 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    57 000002AA 000000000000000000- <1>
    57 000002B3 000000000000000000- <1>
    57 000002BC 000000000000000000- <1>
    57 000002C5 000000000000000000- <1>
    57 000002CE 000000000000000000- <1>
    57 000002D7 000000000000000000- <1>
    57 000002E0 000000000000000000- <1>
    57 000002E9 00000000000000      <1>
    58                              <1> 
    59 000002F0 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    59 000002F9 0000                <1>
    60 000002FB 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    60 00000304 00000000            <1>
    61 00000308 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    61 00000311 0000000000          <1>
    62                              <1> 
    63 00000316 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    63 0000031F 000000000000000000- <1>
    63 00000328 000000000000000000- <1>
    63 00000331 000000000000000000- <1>
    63 0000033A 000000000000000000- <1>
    63 00000343 000000000000000000- <1>
    63 0000034C 000000000000000000- <1>
    63 00000355 000000000000000000- <1>
    63 0000035E 00000000000000      <1>
    64 00000365 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    64 0000036E 000000000000000000- <1>
    64 00000377 000000000000000000- <1>
    64 00000380 000000000000000000- <1>
    64 00000389 000000000000000000- <1>
    64 00000392 000000000000000000- <1>
    64 0000039B 000000000000000000- <1>
    64 000003A4 000000000000000000- <1>
    64 000003AD 00000000000000      <1>
    65                              <1> 
    66                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    67 000003B4 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    67 000003BD 000000000000000000- <1>
    67 000003C6 000000000000000000- <1>
    67 000003CF 000000000000000000- <1>
    67 000003D8 000000000000000000- <1>
    67 000003E1 000000000000000000- <1>
    67 000003EA 000000000000000000- <1>
    67 000003F3 000000000000000000- <1>
    67 000003FC 00000000000000      <1>
    68 00000403 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    68 0000040C 000000000000000000- <1>
    68 00000415 000000000000000000- <1>
    68 0000041E 000000000000000000- <1>
    68 00000427 000000000000000000- <1>
    68 00000430 000000000000000000- <1>
    68 00000439 000000000000000000- <1>
    68 00000442 000000000000000000- <1>
    68 0000044B 00000000000000      <1>
    69                              <1> 
    70 00000452 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    71 0000045A 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    72                              <1> 
    73 00000462 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    73 0000046B 000000000000000000- <1>
    73 00000474 000000000000000000- <1>
    73 0000047D 000000000000000000- <1>
    73 00000486 000000000000000000- <1>
    73 0000048F 000000000000000000- <1>
    73 00000498 000000000000000000- <1>
    73 000004A1 000000000000000000- <1>
    73 000004AA 000000000000000000- <1>
    73 000004B3 000000000000000000- <1>
    73 000004BC 000000000000000000- <1>
    73 000004C5 000000000000000000- <1>
    73 000004CE 000000000000000000- <1>
    73 000004D7 000000000000000000- <1>
    73 000004E0 00000000            <1>
    74                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    75                              <1> ; users overtyping
    76                              <1> 
    77                              <1> ;Internal Function vars
    78                              <1> ;Dir Vars
    79 000004E4 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    80                              <1> ;                                   Bit[1] set => /P or /p specified
    81                              <1> ;                                   Bit[2] set => A file/path specified
    82 000004E5 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    83 000004E6 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    84 000004E7 00                  <1> dirDrv      db 0    ;0 based drive number to use
    85 000004E8 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
    85 000004F1 000000000000000000- <1>
    85 000004FA 000000000000000000- <1>
    85 00000503 000000000000000000- <1>
    85 0000050C 000000000000000000- <1>
    85 00000515 000000000000000000- <1>
    85 0000051E 000000000000000000- <1>
    85 00000527 000000000000000000- <1>
    85 00000530 000000000000000000- <1>
    85 00000539 000000000000000000- <1>
    85 00000542 000000000000000000- <1>
    85 0000054B 000000000000000000- <1>
    85 00000554 000000000000000000- <1>
    85 0000055D 000000000000000000- <1>
    85 00000566 00000000            <1>
    86 0000056A 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
    86 00000573 3F3F3F3F3F3F3F      <1>
    87                              <1> dirWideType equ 1
    88                              <1> dirPageType equ 2
    89                              <1> dirFileType equ 4
    90                              <1> ;Volume Vars
    91                              <1> volFcb:
    92                              <1>     istruc exFcb
    93 0000057A FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    94 0000057B 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    95 00000581 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
    96 00000582 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
    97 0000058A 3F3F3F              <1>     at exFcb.fileext,   db "???"
    98 0000058D 00000000            <1>     at exFcb.curBlock,  dd 0
    99 00000591 00<rep 15h>         <1>     iend 
   100                              <1> 
   101                              <1> ;Time/Date vars
   102 000005A6 00                  <1> td1 db 0    ;Minutes/Year
   103 000005A7 00                  <1> td2 db 0    ;Hours/Zero
   104 000005A8 00                  <1> td3 db 0    ;Hundredths/Day
   105 000005A9 00                  <1> td4 db 0    ;Seconds/Month
   106                              <1> 
   107                              <1> ;Rename/Copy Buffers
   108 000005AA 000000000000000000- <1> sourcePath  db cmdBufferL dup (0)
   108 000005B3 000000000000000000- <1>
   108 000005BC 000000000000000000- <1>
   108 000005C5 000000000000000000- <1>
   108 000005CE 000000000000000000- <1>
   108 000005D7 000000000000000000- <1>
   108 000005E0 000000000000000000- <1>
   108 000005E9 000000000000000000- <1>
   108 000005F2 000000000000000000- <1>
   108 000005FB 000000000000000000- <1>
   108 00000604 000000000000000000- <1>
   108 0000060D 000000000000000000- <1>
   108 00000616 000000000000000000- <1>
   108 0000061F 000000000000000000- <1>
   108 00000628 00000000            <1>
   109 0000062C 000000000000000000- <1> destPath    db cmdBufferL dup (0)
   109 00000635 000000000000000000- <1>
   109 0000063E 000000000000000000- <1>
   109 00000647 000000000000000000- <1>
   109 00000650 000000000000000000- <1>
   109 00000659 000000000000000000- <1>
   109 00000662 000000000000000000- <1>
   109 0000066B 000000000000000000- <1>
   109 00000674 000000000000000000- <1>
   109 0000067D 000000000000000000- <1>
   109 00000686 000000000000000000- <1>
   109 0000068F 000000000000000000- <1>
   109 00000698 000000000000000000- <1>
   109 000006A1 000000000000000000- <1>
   109 000006AA 00000000            <1>
   110                              <1> ;Copy Handles
   111 000006AE FFFF                <1> sourceHdl   dw -1
   112 000006B0 FFFF                <1> destHdl     dw -1
   113 000006B2 0000                <1> srcHdlInfo  dw 0 ;Used to save the handle device info (bit 7 Set -> Char dev)
   114                              <1> 
   115 000006B4 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   115 000006BD 000000000000000000- <1>
   115 000006C6 000000000000000000- <1>
   115 000006CF 000000000000000000- <1>
   115 000006D8 000000000000000000- <1>
   115 000006E1 000000000000000000- <1>
   115 000006EA 000000000000000000- <1>
   115 000006F3 000000000000000000- <1>
   115 000006FC 000000000000000000- <1>
   115 00000705 000000000000000000- <1>
   115 0000070E 000000000000000000- <1>
   115 00000717 000000000000000000- <1>
   115 00000720 000000000000000000- <1>
   115 00000729 000000000000000000- <1>
   115 00000732 0000                <1>
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 00000734 03444952            <1>     db 3, "DIR"
     8 00000738 0117                <1>     dw dir - startLbl
     9                              <1> 
    10 0000073A 024344              <1>     db 2, "CD"
    11 0000073D D71B                <1>     dw chdir - startLbl
    12                              <1> 
    13 0000073F 054348444952        <1>     db 5, "CHDIR"
    14 00000745 D71B                <1>     dw chdir - startLbl
    15                              <1> 
    16 00000747 024D44              <1>     db 2, "MD"
    17 0000074A 521C                <1>     dw mkdir - startLbl
    18                              <1> 
    19 0000074C 054D4B444952        <1>     db 5, "MKDIR"
    20 00000752 521C                <1>     dw mkdir - startLbl
    21                              <1> 
    22 00000754 025244              <1>     db 2, "RD"
    23 00000757 9E1C                <1>     dw rmdir - startLbl
    24                              <1> 
    25 00000759 05524D444952        <1>     db 5, "RMDIR"
    26 0000075F 9E1C                <1>     dw rmdir - startLbl
    27                              <1> 
    28 00000761 0344454C            <1>     db 3, "DEL"
    29 00000765 8C1E                <1>     dw erase - startLbl
    30                              <1> 
    31 00000767 054552415345        <1>     db 5, "ERASE"
    32 0000076D 8C1E                <1>     dw erase - startLbl
    33                              <1> 
    34 0000076F 0444415445          <1>     db 4, "DATE"
    35 00000774 B51E                <1>     dw date - startLbl
    36                              <1> 
    37 00000776 0454494D45          <1>     db 4, "TIME"
    38 0000077B 7E1F                <1>     dw time - startLbl
    39                              <1> 
    40 0000077D 04434F5059          <1>     db 4, "COPY"
    41 00000782 EA1C                <1>     dw copy - startLbl
    42                              <1> 
    43 00000784 0443545459          <1>     db 4, "CTTY"
    44 00000789 1920                <1>     dw ctty - startLbl
    45                              <1> 
    46 0000078B 03434C53            <1>     db 3, "CLS"
    47 0000078F B420                <1>     dw cls - startLbl
    48                              <1> 
    49 00000791 05425245414B        <1>     db 5, "BREAK"
    50 00000797 2621                <1>     dw break - startLbl
    51                              <1> 
    52 00000799 06564552494659      <1>     db 6, "VERIFY"
    53 000007A0 A721                <1>     dw verify - startLbl
    54                              <1> 
    55 000007A2 0652454E414D45      <1>     db 6, "RENAME"
    56 000007A9 2422                <1>     dw rename - startLbl
    57                              <1> 
    58 000007AB 044D4F5645          <1>     db 4, "MOVE"
    59 000007B0 2422                <1>     dw rename - startLbl
    60                              <1>     
    61 000007B2 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 000007BB 9724                <1>     dw truename - startLbl
    63                              <1> 
    64 000007BD 03564552            <1>     db 3, "VER"
    65 000007C1 7D26                <1>     dw version - startLbl
    66                              <1> 
    67 000007C3 03564F4C            <1>     db 3, "VOL"
    68 000007C7 BE25                <1>     dw volume - startLbl
    69                              <1> 
    70 000007C9 034D454D            <1>     db 3, "MEM"
    71 000007CD C126                <1>     dw memory - startLbl
    72                              <1> 
    73 000007CF 0445584954          <1>     db 4, "EXIT"
    74 000007D4 AA28                <1>     dw exit - startLbl
    75                              <1> 
    76 000007D6 0454595045          <1>     db 4, "TYPE"
    77 000007DB 0B28                <1>     dw type - startLbl
    78                              <1> 
    79 000007DD 054C4142454C        <1>     db 5, "LABEL"
    80 000007E3 E824                <1>     dw label - startLbl
    81                              <1> 
    82                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    83 000007E5 054D4B4C424C        <1>     db 5, "MKLBL"
    84 000007EB 1225                <1>     dw mklbl - startLbl
    85                              <1> 
    86 000007ED 05524D4C424C        <1>     db 5, "RMLBL"
    87 000007F3 4D25                <1>     dw rmlbl - startLbl
    88                              <1> 
    89 000007F5 05524E4C424C        <1>     db 5, "RNLBL"
    90 000007FB 8825                <1>     dw rnlbl - startLbl
    91                              <1> 
    92 000007FD 05544F554348        <1>     db 5, "TOUCH"
    93 00000803 B222                <1>     dw touch - startLbl
    94                              <1> 
    95 00000805 044A4F494E          <1>     db 4, "JOIN"
    96 0000080A ED22                <1>     dw join - startLbl
    97                              <1> 
    98 0000080C 055355425354        <1>     db 5, "SUBST"
    99 00000812 B023                <1>     dw subst - startLbl
   100                              <1> 
   101                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   102 00000814 FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 00000815 0D0A24              <1> crlf    db  CR,LF,"$"
     3 00000818 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 0000081D 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 00000826 696C65206D69737369- <1>
     4 0000082F 6E670D0A24          <1>
     5 00000834 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 0000083D 6469736B2077697468- <1>
     5 00000846 206261746368206669- <1>
     5 0000084F 6C65                <1>
     6 00000851 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 0000085A 737320616E79206B65- <1>
     6 00000863 79207768656E207265- <1>
     6 0000086C 6164790D0A24        <1>
     7 00000872 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 0000087B 6E64206F722066696C- <1>
     7 00000884 65206E616D650D0A24  <1>
     8 0000088D 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 00000896 2066696C65206E616D- <1>
     8 0000089F 65206F7220          <1>
     9 000008A4 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 000008AD 666F756E640D0A24    <1>
    10 000008B5 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    10 000008BE 656E74206469736B20- <1>
    10 000008C7 73706163650D0A24    <1>
    11 000008CF 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 000008D8 7669726F6E6D656E74- <1>
    11 000008E1 2073706163650D0A24  <1>
    12 000008EA 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 000008F3 74696F6E206572726F- <1>
    12 000008FC 720D0A24            <1>
    13 00000900 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 00000909 6F7420626520636F70- <1>
    13 00000912 696564206F6E746F20- <1>
    13 0000091B 697473656C660D0A24  <1>
    14 00000924 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 0000092D 662064657374696E61- <1>
    14 00000936 74696F6E206C6F7374- <1>
    14 0000093F 206265666F72652063- <1>
    14 00000948 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 0000094E 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 00000957 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 00000960 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 00000969 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 0000096A 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 00000973 65650D0A24          <1>
    21 00000978 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 00000981 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 0000098A 726976652073706563- <1>
    23 00000993 696669636174696F6E- <1>
    23 0000099C 0D0A24              <1>
    24 0000099F 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 000009A8 6B6579207768656E20- <1>
    24 000009B1 7265616479202E202E- <1>
    24 000009BA 202E2024            <1>
    25 000009BE 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 000009C7 6172616D657465720D- <1>
    25 000009D0 0A24                <1>
    26                              <1> 
    27 000009D2 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 000009DB 576564546875467269- <1>
    27 000009E4 536174              <1>
    28 000009E7 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 000009F0 206461746524        <1>
    29 000009F6 43757272656E742064- <1> curDate db  "Current date is $"
    29 000009FF 6174652069732024    <1>
    30 00000A07 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 00000A10 657720646174652024  <1>
    31 00000A19 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 00000A22 293A2024            <1>
    32 00000A26 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 00000A2F 293A2024            <1>
    33 00000A33 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 00000A3C 293A2024            <1>
    34 00000A40 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 00000A49 2074696D6524        <1>
    35 00000A4F 43757272656E742074- <1> curTime db  "Current time is $"
    35 00000A58 696D652069732024    <1>
    36 00000A60 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 00000A69 65772074696D653A20- <1>
    36 00000A72 24                  <1>
    37                              <1> 
    38 00000A73 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000A7C 7572652028592F4E29- <1>
    38 00000A85 3F2024              <1>
    39                              <1> 
    40 00000A88 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000A91 56657273696F6E2024  <1>
    41                              <1> 
    42 00000A9A 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000AA3 6E2064726976652024  <1>
    43 00000AAC 2069732024          <1> volOk   db " is $"
    44 00000AB1 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000ABA 6162656C24          <1>
    45                              <1> 
    46 00000ABF 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000AC8 69726563746F72790D- <1>
    46 00000AD1 0A24                <1>
    47 00000AD3 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000ADC 206372656174652064- <1>
    47 00000AE5 69726563746F72790D- <1>
    47 00000AEE 0A24                <1>
    48 00000AF0 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000AF9 6174682C206E6F7420- <1>
    48 00000B02 6469726563746F7279- <1>
    48 00000B0B 2C0D0A              <1>
    49 00000B0E 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000B17 6F7279206E6F742065- <1>
    49 00000B20 6D7074790D0A24      <1>
    50 00000B27 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000B30 79206F66202024      <1>
    51 00000B37 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000B40 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    52 00000B49 72697665206973206E- <1>
    52 00000B52 6F206C6F6E67657220- <1>
    52 00000B5B 76616C696424        <1>
    53 00000B61 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    53 00000B6A 7269766520696E2073- <1>
    53 00000B73 656172636820706174- <1>
    53 00000B7C 680D0A24            <1>
    54 00000B80 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    54 00000B89 65766963650D0A24    <1>
    55 00000B91 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    55 00000B9A 20666F756E640D0A24  <1>
    56 00000BA3 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    56 00000BAC 726F720D0A24        <1>
    57 00000BB2 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    57 00000BBB 6F74206265206E6573- <1>
    57 00000BC4 7465640D0A24        <1>
    58 00000BCA 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    58 00000BD3 6174652066696C6520- <1>
    58 00000BDC 6572726F7220647572- <1>
    58 00000BE5 696E6720706970650D- <1>
    58 00000BEE 0A24                <1>
    59 00000BF0 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    59 00000BF9 2062696E6172792072- <1>
    59 00000C02 656164732066726F6D- <1>
    59 00000C0B 206120646576696365- <1>
    59 00000C14 0D0A24              <1>
    60 00000C17 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    61 00000C1D 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    62 00000C22 425245414B20697320- <1> breakIs db "BREAK is $"
    62 00000C2B 24                  <1>
    63 00000C2C 564552494659206973- <1> verifyIs    db "VERIFY is $"
    63 00000C35 2024                <1>
    64 00000C37 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    65 00000C40 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    65 00000C49 617468206F72206669- <1>
    65 00000C52 6C65206E616D650D0A- <1>
    65 00000C5B 24                  <1>
    66 00000C5C 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    66 00000C65 756D626572206F6620- <1>
    66 00000C6E 706172616D65746572- <1>
    66 00000C77 730D0A24            <1>
    67 00000C7B 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    67 00000C84 74696E6720746F2064- <1>
    67 00000C8D 6576696365          <1>
    68 00000C92 08200800            <1> backSpace   db BSP," ",BSP,NUL
    69                              <1> 
    70 00000C96 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    70 00000C9F 20202020202020546F- <1>
    70 00000CA8 74616C207379737465- <1>
    70 00000CB1 6D206D656D6F72793A- <1>
    70 00000CBA 2024                <1>
    71 00000CBC 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    71 00000CC5 20202020202020204D- <1>
    71 00000CCE 656D6F727920757365- <1>
    71 00000CD7 6420627920444F533A- <1>
    71 00000CE0 2024                <1>
    72 00000CE2 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    72 00000CEB 656D6F727920757365- <1>
    72 00000CF4 64206279206170706C- <1>
    72 00000CFD 69636174696F6E733A- <1>
    72 00000D06 2024                <1>
    73 00000D08 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    73 00000D11 656D6F727920726573- <1>
    73 00000D1A 657276656420627920- <1>
    73 00000D23 68617264776172653A- <1>
    73 00000D2C 2024                <1>
    74 00000D2E 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    74 00000D37 202020202020202020- <1>
    74 00000D40 2020202020204D656D- <1>
    74 00000D49 6F727920667265653A- <1>
    74 00000D52 2024                <1>
    75 00000D54 20627974657324      <1> memByte db " bytes$"
    76 00000D5B 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    76 00000D64 6F7420417373657274- <1>
    76 00000D6D 61696E20444F532045- <1>
    76 00000D76 6E74727920506F696E- <1>
    76 00000D7F 7424                <1>
    77 00000D81 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    77 00000D8A 416C6C6F636174696F- <1>
    77 00000D93 6E204572726F7224    <1>
    78 00000D9B 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    78 00000DA4 4572726F7224        <1>
    79 00000DAA 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    79 00000DB3 68616C74656424      <1>
    80                              <1> 
    81 00000DBA 556E61626C6520746F- <1> touchErr db "Unable to create file",CR,LF,"$"
    81 00000DC3 206372656174652066- <1>
    81 00000DCC 696C650D0A24        <1>
    82 00000DD2 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    82 00000DDB 206372656174652070- <1>
    82 00000DE4 6970650D0A          <1>
    83                              <1> pipeErrMsgL equ $ - pipeErrMsg
    84 00000DE9 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    84 00000DF2 6F6E206572726F720D- <1>
    84 00000DFB 0A                  <1>
    85                              <1> redirErrMsgL   equ $ - redirErrMsg
    86                              <1> 
    87 00000DFC 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    88 00000E00 2020202024          <1> fourSpc  db "    $"
    89 00000E05 20202024            <1> threeSpc db "   $"
    90 00000E09 202024              <1> twoSpc   db "  $"
    91                              <1> 
    92 00000E0C 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    92 00000E15 696679204F4E206F72- <1>
    92 00000E1E 204F46460D0A24      <1>
    93 00000E25 504154483D          <1> pathEVar db "PATH="
    94 00000E2A 50524F4D50543D      <1> promptEVar  db "PROMPT="
    95                              <1> 
    96                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    97                              <1> ; handles and reopen CON
    98 00000E31 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00000E35 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00000E38 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00000E3C C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 00000E3F B44A                <1>     mov ah, 4Ah ;Realloc
     9 00000E41 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00000E44 CD21                <1>     int 21h
    11 00000E46 EB6C                <1>     jmp short commandMain
    12                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    13 00000E48 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    14 00000E4D CD21                <1>     int 21h
    15 00000E4F 668905B7F1FFFF      <1>     mov word [returnCode], ax
    16                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    17 00000E56 488D156B210000      <1>     lea rdx, critErrorHandler
    18 00000E5D 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    19 00000E61 B824250000          <1>     mov eax, 2524h
    20 00000E66 CD21                <1>     int 21h
    21 00000E68 488D15F4230000      <1>     lea rdx, int23h
    22 00000E6F 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    23 00000E73 B823250000          <1>     mov eax, 2523h
    24 00000E78 CD21                <1>     int 21h
    25 00000E7A 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    26 00000E81 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    27 00000E85 B822250000          <1>     mov eax, 2522h
    28 00000E8A CD21                <1>     int 21h
    29 00000E8C F6051CF2FFFFFF      <1>     test byte [pipeFlag], -1
    30 00000E93 0F858C000000        <1>     jnz commandMain.pipeProceed ;Skip the handle closing when pipe active
    31 00000E99 E8B6040000          <1>     call cleanUpRedir   ;Clean up redirection once we are done
    32                              <1> ;Close all handles from 5->MAX
    33 00000E9E 0FB70D82F1FFFF      <1>     movzx ecx, word [numHdls]
    34 00000EA5 BB05000000          <1>     mov ebx, 5
    35                              <1> .handleClose:
    36 00000EAA B43E                <1>     mov ah, 3Eh ;File close
    37 00000EAC CD21                <1>     int 21h
    38 00000EAE FFC3                <1>     inc ebx ;Goto next file
    39 00000EB0 39CB                <1>     cmp ebx, ecx
    40 00000EB2 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    41                              <1> commandMain:
    42                              <1> ;Setup Commandline. First check if batch mode is active, then fall.
    43                              <1> ;=========================
    44                              <1> ;   BATCH HANDLING HERE
    45                              <1> ;=========================
    46 00000EB4 488B254AF1FFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    47 00000EBB FC                  <1>     cld ;Ensure stringops are done the right way
    48 00000EBC C605DAF2FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    49                              <1> .inputMain:
    50 00000EC3 E8A61B0000          <1>     call printCRLF
    51                              <1> .inputMain2:
    52 00000EC8 E8F31E0000          <1>     call clearCommandLineState
    53 00000ECD E8BC1E0000          <1>     call printPrompt
    54                              <1> 
    55 00000ED2 B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    56 00000ED7 CD21                <1>     int 21h
    57 00000ED9 B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    58 00000EDE BA01000000          <1>     mov edx, 1      ;Start new print job
    59 00000EE3 CD21                <1>     int 21h
    60 00000EE5 488D15B1F2FFFF      <1>     lea rdx, inBuffer
    61 00000EEC B8000A0000          <1>     mov eax, 0A00h  ;Do Buffered input
    62 00000EF1 CD21                <1>     int 21h
    63 00000EF3 E8761B0000          <1>     call printCRLF  ;Note we have accepted input
    64                              <1> ;First check we had something typed in of length greater than 0
    65                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    66 00000EF8 803D9FF2FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    67 00000EFF 74C7                <1>     je .inputMain2
    68                              <1>     ;Copy over the input text
    69 00000F01 488D3595F2FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    70 00000F08 488D3D10F3FFFF      <1>     lea rdi, cmdBuffer
    71 00000F0F B982000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    72 00000F14 F3A4                <1>     rep movsb
    73                              <1> .pipeLoop:
    74 00000F16 E846000000          <1>     call preProcessBuffer
    75 00000F1B E8BC000000          <1>     call analyseCmdline
    76 00000F20 E8B3010000          <1>     call doCommandLine
    77                              <1> .pipeProceed:
    78 00000F25 E82A040000          <1>     call cleanUpRedir
    79 00000F2A 488B0576F1FFFF      <1>     mov rax, qword [cmdEndPtr]
    80 00000F31 48890567F1FFFF      <1>     mov qword [cmdStartPtr], rax
    81 00000F38 F60570F1FFFFFF      <1>     test byte [pipeFlag], -1  ;If we have any pipes active, we proceed here
    82 00000F3F 7482                <1>     jz .inputMain
    83 00000F41 80380D              <1>     cmp byte [rax], CR  ;Are we done?
    84 00000F44 0F8479FFFFFF        <1>     je .inputMain
    85 00000F4A E8561E0000          <1>     call clearCommandState  ;Else, clear the command state and start again
    86 00000F4F EBC5                <1>     jmp short .pipeLoop
    87                              <1> .dfltErrExit:
    88 00000F51 488D151AF9FFFF      <1>     lea rdx, badCmd
    89 00000F58 B409                <1>     mov ah, 09h
    90 00000F5A CD21                <1>     int 21h
    91 00000F5C E962FFFFFF          <1>     jmp .inputMain
    92                              <1> 
    93                              <1> preProcessBuffer:
    94                              <1> ;Start by preprocessing the path, escape quotes and handle redirections.
    95                              <1> ;Each normal char gets copied over to psp.dta + 1 except for those special chars.
    96                              <1> ;Places the count of chars save CR in byte 0 of psp.dta.
    97                              <1> ;Places the ptr to the first byte past pipe or CR in cmdEndPtr
    98                              <1> ;Throughout: CL has char count, CH has number of quotes.
    99 00000F61 31C9                <1>     xor ecx, ecx
   100 00000F63 4C8B05A5F0FFFF      <1>     mov r8, qword [pspPtr]  ;Ensure we have our pspPtr pointing to the right place
   101 00000F6A 488B352EF1FFFF      <1>     mov rsi, qword [cmdStartPtr]
   102 00000F71 4885F6              <1>     test rsi, rsi
   103 00000F74 7507                <1>     jnz .notNewCmd
   104 00000F76 488D35A4F2FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto command buffer + 2
   105                              <1> .notNewCmd:
   106 00000F7D 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   107                              <1> .countQuotes:
   108 00000F80 AC                  <1>     lodsb
   109 00000F81 3C22                <1>     cmp al, '"'
   110 00000F83 7507                <1>     jne .notQuoteToCount
   111 00000F85 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   112 00000F87 E9F4FFFFFF          <1>     jmp .countQuotes
   113                              <1> .notQuoteToCount:
   114 00000F8C 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   115 00000F8E 75F0                <1>     jne .countQuotes
   116 00000F90 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   117 00000F93 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We store this nicely formatted string in psp
   118                              <1> .getChar:
   119 00000F9A AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   120 00000F9B 3C22                <1>     cmp al, '"'     ;Is char a quote?
   121 00000F9D 750E                <1>     jne .notQuote
   122 00000F9F FECD                <1>     dec ch          ;We have a quote, now decrement
   123 00000FA1 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   124                              <1> .searchForClosingQuote:
   125                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   126 00000FA3 AA                  <1>     stosb   ;Store char and inc rdi
   127 00000FA4 FEC1                <1>     inc cl
   128 00000FA6 AC                  <1>     lodsb   ;Get next char
   129 00000FA7 3C22                <1>     cmp al, '"'
   130 00000FA9 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   131 00000FAB FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   132                              <1> .notQuote:
   133 00000FAD 51                  <1>     push rcx    ;Save counts, if anything goes wrong, stack is jiggled properly
   134 00000FAE E811050000          <1>     call checkAndSetupRedir ;Intervene redir
   135 00000FB3 59                  <1>     pop rcx
   136 00000FB4 7509                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   137 00000FB6 7202                <1>     jc .pipeHandle      ;Store a CR in the buffer if a pipe
   138 00000FB8 EBE0                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   139                              <1> .pipeHandle:
   140 00000FBA B00D                <1>     mov al, CR  ;Now store a Carriage return 
   141 00000FBC 48FFC6              <1>     inc rsi ;Ensure we remain one char past the pipe
   142                              <1> .notRedir:
   143 00000FBF AA                  <1>     stosb       ;Store char and advance rdi
   144 00000FC0 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   145 00000FC2 7404                <1>     je .exit
   146 00000FC4 FEC1                <1>     inc cl      ;Increment char count
   147 00000FC6 EBD2                <1>     jmp short .getChar    ;If not, get next char
   148                              <1> .exit:
   149 00000FC8 48FFCE              <1>     dec rsi ;move rsi to point back to terminator or one past | 
   150 00000FCB 488935D5F0FFFF      <1>     mov qword [cmdEndPtr], rsi  ;Store rsi pointing to the first char past CR or |
   151 00000FD2 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   152 00000FD9 880F                <1>     mov byte [rdi], cl  ;Store the count of chars in the psp buffer
   153                              <1>     return
    13                              <2> %%_ret:
    14 00000FDB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   154                              <1> 
   155                              <1> analyseCmdline:
   156                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   157                              <1> ; processes the command name into the FCB.  
   158 00000FDC 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   159 00000FE3 4889F3              <1>     mov rbx, rsi            ;Save this ptr in rbx
   160 00000FE6 E8821D0000          <1>     call skipDelimiters     ;Skip any preceeding separators
   161 00000FEB 488D3DAFF2FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   162 00000FF2 E8891E0000          <1>     call cpDelimPathToBufz  ;Moves rsi to the first char past the delim char
   163 00000FF7 48FFCE              <1>     dec rsi ;Point it back to the delim char
   164 00000FFA E8D0000000          <1>     call .skipAndCheckCR
   165 00000FFF 7439                <1>     je .exit
   166 00001001 C605B2F0FFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   167 00001008 4889F0              <1>     mov rax, rsi
   168 0000100B 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   169 0000100E 8805A7F0FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   170                              <1> .skipArg:
   171 00001014 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   172 00001015 3C0D                <1>     cmp al, CR
   173 00001017 7421                <1>     je .exit
   174 00001019 E85D1D0000          <1>     call isALdelimiter
   175 0000101E 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   176 00001020 E8AA000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   177 00001025 7413                <1>     je .exit            ;If ZF set, this we encountered a CR
   178 00001027 C6058FF0FFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   179 0000102E 4889F0              <1>     mov rax, rsi            
   180 00001031 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   181 00001034 880584F0FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   182                              <1> .exit:
   183                              <1> ;Before returning, we copy the command name to cmdName and make it useful
   184 0000103A 488D3D60F2FFFF      <1>     lea rdi, cmdPathSpec
   185 00001041 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   186 00001044 30C0                <1>     xor al, al  ;Search for the terminating null
   187 00001046 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   188 0000104B F2AE                <1>     repne scasb
   189 0000104D 48FFCF              <1>     dec rdi ;Go to the last char in the command
   190 00001050 4889FE              <1>     mov rsi, rdi
   191 00001053 FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   192                              <1> .keepSearching:
   193 00001054 AC                  <1>     lodsb
   194 00001055 3A05D0EFFFFF        <1>     cmp al, byte [pathSep]
   195 0000105B 740B                <1>     je .cmdStartFnd
   196 0000105D 4839DE              <1>     cmp rsi, rbx
   197 00001060 75F2                <1>     jne .keepSearching
   198 00001062 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   199 00001065 48FFCE              <1>     dec rsi
   200                              <1> .cmdStartFnd:
   201 00001068 48FFC6              <1>     inc rsi
   202 0000106B 48FFC6              <1>     inc rsi ;Go past the pathsep
   203 0000106E FC                  <1>     cld ;Go the sane way again
   204 0000106F 488D3D93F2FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   205 00001076 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   206 00001077 B90E000000          <1>     mov ecx, cmdNameL
   207 0000107C 30C0                <1>     xor al, al
   208 0000107E F3AA                <1>     rep stosb
   209 00001080 5F                  <1>     pop rdi
   210 00001081 31C9                <1>     xor ecx, ecx
   211 00001083 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   212                              <1> .cmdGetChar:
   213 00001084 AC                  <1>     lodsb
   214 00001085 84C0                <1>     test al, al ;Did we find the terminating null?
   215 00001087 7414                <1>     jz .nameLenFnd
   216 00001089 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   217 0000108B 7410                <1>     je .nameLenFnd
   218 0000108D E8C91C0000          <1>     call ucChar ;Else uppercase char
   219 00001092 AA                  <1>     stosb   ;and store it
   220 00001093 FFC1                <1>     inc ecx
   221 00001095 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   222 0000109B 72E7                <1>     jb .cmdGetChar
   223                              <1> .nameLenFnd:
   224 0000109D 880D65F2FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   225                              <1>     ;Now finally, create a FCB filespec
   226 000010A3 488D3D46F2FFFF      <1>     lea rdi, fcbCmdSpec
   227 000010AA 57                  <1>     push rdi
   228 000010AB B90B000000          <1>     mov ecx, fcbNameL
   229 000010B0 B020                <1>     mov al, " " ;Fill with spaces
   230 000010B2 F3AA                <1>     rep stosb
   231 000010B4 5F                  <1>     pop rdi
   232 000010B5 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   233 000010B6 E82A1D0000          <1>     call asciiToFCB
   234 000010BB 488D352EF2FFFF      <1>     lea rsi, fcbCmdSpec
   235 000010C2 488D3D32F2FFFF      <1>     lea rdi, cmdSpec
   236 000010C9 E8721D0000          <1>     call FCBToAsciiz
   237                              <1>     return
    13                              <2> %%_ret:
    14 000010CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   238                              <1> .skipAndCheckCR:
   239                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   240 000010CF E8991C0000          <1>     call skipDelimiters ;Go to the next char in the input line
   241 000010D4 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   242                              <1>     return
    13                              <2> %%_ret:
    14 000010D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   243                              <1> 
   244                              <1> doCommandLine:
   245 000010D8 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   246                              <1>     ;The following check accounts for the end of a piped command
   247 000010DF 803E0D              <1>     cmp byte [rsi], CR  ;If the first char is a CR, exit the pipe loop
   248                              <1>     rete    ;Do not attempt to execute if the first char is a CR
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000010E2 74(D7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   249 000010E4 488D3DD5EFFFFF      <1>     lea rdi, cmdFcb
   250 000010EB B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   251 000010F0 CD21                <1>     int 21h
   252 000010F2 410FB79881000000    <1>     movzx ebx, word [r8 + cmdLine]    ;Get the drive specifier
   253 000010FA 80FF3A              <1>     cmp bh, ":"
   254 000010FD 7529                <1>     jne .noDriveSpecified
   255 000010FF 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   256 00001101 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   257 00001104 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   258 00001107 3CFF                <1>     cmp al, -1  ;Int 21h returns AL = -1 if bad drive specified
   259 00001109 7410                <1>     je .badDrive
   260                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   261 0000110B 803DF6F1FFFF02      <1>     cmp byte [cmdName], 2
   262 00001112 7514                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   263 00001114 E81F1C0000          <1>     call setDrive
   264                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001119 74(D7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   265                              <1> .badDrive:
   266 0000111B 488D155FF8FFFF      <1>     lea rdx, badDrv
   267 00001122 B409                <1>     mov ah, 09h
   268 00001124 CD21                <1>     int 21h
   269 00001126 F9                  <1>     stc
   270                              <1>     return
    13                              <2> %%_ret:
    14 00001127 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   271                              <1> .noDriveSpecified:
   272                              <1> ;Now we set the two FCB's in the command line
   273 00001128 F6058BEFFFFFFF      <1>     test byte [arg1Flg], -1
   274 0000112F 744D                <1>     jz .fcbArgsDone
   275 00001131 0FB60583EFFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   276 00001138 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   277 0000113F 4801C6              <1>     add rsi, rax    ;Point to first argument
   278 00001142 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   279 00001146 B801290000          <1>     mov eax, 2901h
   280 0000114B CD21                <1>     int 21h
   281 0000114D 880569EFFFFF        <1>     mov byte [arg1FCBret], al
   282 00001153 F60563EFFFFFFF      <1>     test byte [arg2Flg], -1
   283 0000115A 7422                <1>     jz .fcbArgsDone
   284 0000115C 0FB6055BEFFFFF      <1>     movzx eax, byte [arg2Off]
   285 00001163 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   286 0000116A 4801C6              <1>     add rsi, rax    ;Point to first argument
   287 0000116D 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   288 00001171 B801290000          <1>     mov eax, 2901h
   289 00001176 CD21                <1>     int 21h
   290 00001178 880541EFFFFF        <1>     mov byte [arg2FCBret], al
   291                              <1> .fcbArgsDone:
   292 0000117E 498D9881000000      <1>     lea rbx, [r8 + cmdLine]
   293 00001185 488D357CF1FFFF      <1>     lea rsi, cmdName
   294 0000118C B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   295 00001191 BAFFFF0000          <1>     mov edx, 0FFFFh
   296 00001196 B5FF                <1>     mov ch, -1
   297 00001198 CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   298 0000119A B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   299 0000119F BAFFFF0000          <1>     mov edx, 0FFFFh
   300 000011A4 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   301 000011A6 CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   302                              <1>             ;        al = 0  if the command should be executed as usual
   303 000011A8 84C0                <1>     test al, al
   304 000011AA 741D                <1>     jz .executeInternal
   305                              <1>     ;Here we execute externally and return to the prompt
   306                              <1>     ; as if it was an internal execution
   307 000011AC 488D35EAEFFFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   308 000011B3 488D1D06EFFFFF      <1>     lea rbx, cmdFcb
   309 000011BA B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   310 000011BF BAFFFF0000          <1>     mov edx, 0FFFFh
   311 000011C4 B5FF                <1>     mov ch, -1
   312 000011C6 CD2F                <1>     int 2Fh 
   313                              <1>     return
    13                              <2> %%_ret:
    14 000011C8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   314                              <1> .executeInternal:
   315                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   316                              <1> ;rsi points after the command terminator in the command tail
   317 000011C9 488D1D64F5FFFF      <1>     lea rbx, functionTable
   318                              <1> .nextEntry:
   319 000011D0 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   320 000011D3 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   321 000011D6 0F8404170000        <1>     je launchChild      ;If so, check externally now
   322 000011DC 380D26F1FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   323 000011E2 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   324                              <1>     ;Here they have the same length so lets see if the name is the same
   325 000011E4 56                  <1>     push rsi
   326                              <1>     ;ecx has the length to compare
   327 000011E5 51                  <1>     push rcx
   328 000011E6 488D7301            <1>     lea rsi, qword [rbx + 1]
   329 000011EA 488D3D18F1FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   330 000011F1 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   331 000011F3 59                  <1>     pop rcx
   332 000011F4 5E                  <1>     pop rsi
   333 000011F5 7516                <1>     jne .gotoNextEntry
   334                              <1>     ;Here it was found both strings are equal
   335 000011F7 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   336 000011FC 480FB71F            <1>     movzx rbx, word [rdi]
   337 00001200 488D3DF9EDFFFF      <1>     lea rdi, startLbl
   338 00001207 4801FB              <1>     add rbx, rdi
   339 0000120A FFD3                <1>     call rbx    ;Call this function...
   340                              <1>     return  ;... and return
    13                              <2> %%_ret:
    14 0000120C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   341                              <1> .gotoNextEntry:
   342 0000120D 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   343 00001214 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   344 00001217 EBB7                <1>     jmp short .nextEntry
   345                              <1> .dfltErrExit:
   346 00001219 488D1552F6FFFF      <1>     lea rdx, badCmd
   347 00001220 B409                <1>     mov ah, 09h
   348 00001222 CD21                <1>     int 21h
   349                              <1>     return
    13                              <2> %%_ret:
    14 00001224 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   350                              <1> 
   351                              <1> 
   352                              <1> checkExtensionExec:
   353                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   354                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   355                              <1> ;         If ZF=ZE and CF=CY => Batch file
   356 00001225 8B059EEEFFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   357 0000122B 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   358 00001230 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   359 00001235 25DFDFDFFF          <1>     and eax, 0FFDFDFDFh ;Uppercase the three letters
   360 0000123A 3D434F4D20          <1>     cmp eax, "COM "
   361                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000123F 74(24)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   362 00001241 3D45584520          <1>     cmp eax, "EXE "
   363                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001246 74(24)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   364 00001248 3D42415420          <1>     cmp eax, "BAT "
   365                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000124D 75(24)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   366 0000124F F9                  <1>     stc
   367                              <1>     return
    13                              <2> %%_ret:
    14 00001250 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   368                              <1> 
   369                              <1> redirFailure:
   370 00001251 488D1591FBFFFF      <1>     lea rdx, redirErrMsg
   371 00001258 B913000000          <1>     mov ecx, redirErrMsgL
   372 0000125D EB0C                <1>     jmp short redirPipeFailureCommon
   373                              <1> pipeFailure:
   374 0000125F 488D156CFBFFFF      <1>     lea rdx, pipeErrMsg
   375 00001266 B917000000          <1>     mov ecx, pipeErrMsgL
   376                              <1> redirPipeFailureCommon:
   377                              <1> ;This routine is called if any problems happen during 
   378                              <1> ;This routine tries to close whatever handles are not -1 and delete
   379                              <1> ; pipe files if the pipe count is not 0
   380                              <1> ;It resets all variables and proceeds.
   381 0000126B B800400000          <1>     mov eax, 4000h  ;Write handle
   382 00001270 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   383 00001275 CD21                <1>     int 21h
   384 00001277 31DB                <1>     xor ebx, ebx    ;Select STDIN
   385 00001279 E8C6000000          <1>     call .closeHandle
   386 0000127E FFC3                <1>     inc ebx         ;Select STDOUT
   387 00001280 E8BF000000          <1>     call .closeHandle
   388 00001285 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   389 0000128A 488D15A0FBFFFF      <1>     lea rdx, conName
   390 00001291 CD21                <1>     int 21h
   391 00001293 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
   392 00001295 B800450000          <1>     mov eax, 4500h  ;DUP
   393 0000129A CD21                <1>     int 21h
   394 0000129C 66C7050FEEFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   395 000012A5 0FB71D0AEEFFFF      <1>     movzx ebx, word [redirSTDIN]
   396 000012AC E893000000          <1>     call .closeHandle
   397                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   398 000012B1 66C705FCEDFFFFFFFF  <1>     mov word [redirSTDIN], -1
   399 000012BA 0FB71DF7EDFFFF      <1>     movzx ebx, word [redirSTDOUT]
   400 000012C1 E87E000000          <1>     call .closeHandle
   401 000012C6 66C705E9EDFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   402 000012CF 0FB71DDAEDFFFF      <1>     movzx ebx, word [pipeSTDIN]
   403 000012D6 E869000000          <1>     call .closeHandle
   404 000012DB 66C705CCEDFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   405 000012E4 0FB71DC7EDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   406 000012EB E854000000          <1>     call .closeHandle
   407 000012F0 66C705B9EDFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   408 000012F9 C605AFEDFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   409 00001300 488D15ADF0FFFF      <1>     lea rdx, qword [pipe1Filespec]
   410 00001307 803A00              <1>     cmp byte [rdx], 0
   411 0000130A 7407                <1>     jz .checkOld
   412 0000130C B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   413 00001311 CD21                <1>     int 21h
   414                              <1> .checkOld:
   415 00001313 488D15E9F0FFFF      <1>     lea rdx, qword [pipe2Filespec]
   416 0000131A 803A00              <1>     cmp byte [rdx],0
   417 0000131D 7407                <1>     jz .pipeNamesComplete
   418 0000131F B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   419 00001324 CD21                <1>     int 21h
   420                              <1> .pipeNamesComplete:
   421 00001326 31C0                <1>     xor eax, eax
   422                              <1>     ;Invalidate the pointers and the paths too
   423 00001328 48890523F1FFFF      <1>     mov qword [newPipe], rax
   424 0000132F 48890524F1FFFF      <1>     mov qword [oldPipe], rax
   425 00001336 890578F0FFFF        <1>     mov dword [pipe1Filespec], eax
   426 0000133C 8905C1F0FFFF        <1>     mov dword [pipe2Filespec], eax
   427 00001342 F9                  <1>     stc
   428                              <1>     return
    13                              <2> %%_ret:
    14 00001343 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   429                              <1> .closeHandle:
   430 00001344 81FBFFFFFFFF        <1>     cmp ebx, -1
   431                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000134A 74(43)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   432 0000134C B8003E0000          <1>     mov eax, 3E00h
   433 00001351 CD21                <1>     int 21h
   434                              <1>     return
    13                              <2> %%_ret:
    14 00001353 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   435                              <1> 
   436                              <1> cleanUpRedir:
   437                              <1> ;Cleans up the redir stuff after we are done.
   438 00001354 0FB70555EDFFFF      <1>     movzx eax, word [pipeSTDIN]
   439 0000135B 0FB71D50EDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   440 00001362 C1E310              <1>     shl ebx, 10h
   441 00001365 09D8                <1>     or eax, ebx
   442 00001367 3DFFFFFFFF          <1>     cmp eax, -1
   443 0000136C 750C                <1>     jne .pipe
   444 0000136E C6053AEDFFFF00      <1>     mov byte [pipeFlag], 0  ;Clear the flag
   445 00001375 E9CD000000          <1>     jmp .redirInClear   ;If no piping, skip
   446                              <1> .pipe:
   447                              <1> ;Pipe processing here
   448                              <1> ;We handle stdin, closing the redir if it is and deleting
   449                              <1> ; the redir file.
   450                              <1> ;Then we handle stdout, moving the redir to stdin.
   451 0000137A 66813D2DEDFFFFFFFF  <1>     cmp word [pipeSTDIN], -1
   452 00001383 7443                <1>     je .pipeNostdin
   453                              <1>     ;We close the handle first and delete the file.
   454 00001385 0FB71D24EDFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   455 0000138C 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   456 0000138E B800460000          <1>     mov eax, 4600h
   457 00001393 CD21                <1>     int 21h
   458 00001395 0F82C4FEFFFF        <1>     jc pipeFailure
   459 0000139B B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   460 000013A0 CD21                <1>     int 21h
   461 000013A2 0F82B7FEFFFF        <1>     jc pipeFailure
   462 000013A8 488B15ABF0FFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   463 000013AF B800410000          <1>     mov eax, 4100h  ;Delete the file!
   464 000013B4 CD21                <1>     int 21h
   465 000013B6 0F82A3FEFFFF        <1>     jc pipeFailure
   466 000013BC C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   467 000013BF 66C705E8ECFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   468                              <1> .pipeNostdin:
   469 000013C8 66813DE1ECFFFFFFFF  <1>     cmp word [pipeSTDOUT], -1   ;If no stdout redir, exit now
   470 000013D1 7474                <1>     je .redirInClear
   471                              <1> ;Duplicate STDIN to save across pipe
   472 000013D3 B800450000          <1>     mov eax, 4500h
   473 000013D8 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   474 000013DA CD21                <1>     int 21h
   475 000013DC 0F827DFEFFFF        <1>     jc pipeFailure
   476 000013E2 668905C7ECFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   477                              <1> 
   478                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   479 000013E9 B800460000          <1>     mov eax, 4600h
   480 000013EE 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   481 000013F0 FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   482 000013F2 CD21                <1>     int 21h
   483 000013F4 0F8265FEFFFF        <1>     jc pipeFailure
   484                              <1> 
   485                              <1> ;Now return the original stdout to stdout
   486 000013FA 89D9                <1>     mov ecx, ebx
   487 000013FC 0FB71DAFECFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   488 00001403 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   489 00001408 CD21                <1>     int 21h
   490 0000140A 0F824FFEFFFF        <1>     jc pipeFailure
   491                              <1> 
   492                              <1> ;Now close the DUP'ed STDOUT
   493 00001410 B8003E0000          <1>     mov eax, 3E00h
   494 00001415 CD21                <1>     int 21h
   495 00001417 0F8242FEFFFF        <1>     jc pipeFailure
   496                              <1> 
   497                              <1> ;Finally unwind STDIN to the beginning of the file
   498 0000141D B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   499 00001422 31DB                <1>     xor ebx, ebx    ;STDIN handle
   500 00001424 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   501 00001426 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   502 00001428 CD21                <1>     int 21h
   503 0000142A 0F822FFEFFFF        <1>     jc pipeFailure  ;This should never happen
   504                              <1> 
   505 00001430 488B151BF0FFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   506 00001437 4889151CF0FFFF      <1>     mov qword [oldPipe], rdx
   507 0000143E 66C7056BECFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   508                              <1> .redirInClear:
   509                              <1> ;Check redir in
   510 00001447 F60566ECFFFFFF      <1>     test byte [redirIn], -1
   511 0000144E 7433                <1>     jz .redirOutClear
   512                              <1> 
   513 00001450 0FB71D5FECFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   514 00001457 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   515 00001459 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   516 0000145E CD21                <1>     int 21h
   517 00001460 0F82EBFDFFFF        <1>     jc redirFailure
   518 00001466 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   519 0000146B CD21                <1>     int 21h
   520 0000146D 0F82DEFDFFFF        <1>     jc redirFailure
   521 00001473 66C7053AECFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   522 0000147C C60531ECFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   523                              <1> .redirOutClear:
   524                              <1> ;Now check Redir Out
   525 00001483 F6052BECFFFFFF      <1>     test byte [redirOut], -1
   526                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000148A 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000148C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   527                              <1> 
   528 0000148D 0FB71D24ECFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   529 00001494 B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   530 00001499 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   531 0000149E CD21                <1>     int 21h
   532 000014A0 0F82ABFDFFFF        <1>     jc redirFailure
   533 000014A6 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   534 000014AB CD21                <1>     int 21h
   535 000014AD 0F829EFDFFFF        <1>     jc redirFailure
   536 000014B3 66C705FCEBFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   537 000014BC C605F2EBFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   538                              <1>     return
    13                              <2> %%_ret:
    14 000014C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   539                              <1> 
   540                              <1> checkAndSetupRedir:
   541                              <1> ;Checks and sets up redir as appropriate
   542                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   543                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   544                              <1> ;Output: ZF=NZ => No redir
   545                              <1> ;        ZF=ZY => Redir
   546                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   547                              <1> ;CF=CY if pipe set or an embedded CR found. rsi points to first char past it!
   548 000014C4 57                  <1>     push rdi
   549 000014C5 3C3C                <1>     cmp al, "<"
   550 000014C7 740F                <1>     je .inputRedir
   551 000014C9 3C3E                <1>     cmp al, ">"
   552 000014CB 7473                <1>     je .outputRedir
   553 000014CD 3C7C                <1>     cmp al, "|"
   554 000014CF 0F841B010000        <1>     je .pipeSetup
   555 000014D5 F8                  <1>     clc
   556                              <1> .redirExit:
   557 000014D6 5F                  <1>     pop rdi
   558                              <1>     return
    13                              <2> %%_ret:
    14 000014D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   559                              <1> .inputRedir:
   560 000014D8 C605D5EBFFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   561 000014DF 488D3D30EEFFFF      <1>     lea rdi, rdrInFilespec
   562 000014E6 E882180000          <1>     call skipDelimiters ;Skip spaces between < and the filespec
   563 000014EB E890190000          <1>     call cpDelimPathToBufz
   564 000014F0 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char as 
   565                              <1>     ;Setup the redir here for STDIN
   566 000014F3 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   567 000014F5 B800450000          <1>     mov eax, 4500h
   568 000014FA CD21                <1>     int 21h
   569 000014FC 0F827A010000        <1>     jc .redirError
   570 00001502 668905ADEBFFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   571 00001509 488D1506EEFFFF      <1>     lea rdx, rdrInFilespec
   572 00001510 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   573 00001515 CD21                <1>     int 21h
   574 00001517 0F825F010000        <1>     jc .redirError
   575 0000151D 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   576 0000151F 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   577 00001522 B800460000          <1>     mov eax, 4600h
   578 00001527 CD21                <1>     int 21h
   579 00001529 0F824D010000        <1>     jc .redirError
   580 0000152F B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   581 00001534 CD21                <1>     int 21h
   582 00001536 0F8240010000        <1>     jc .redirError
   583 0000153C 30C0                <1>     xor al, al
   584 0000153E EB96                <1>     jmp short .redirExit
   585                              <1> .outputRedir:
   586 00001540 C6056EEBFFFF01      <1>     mov byte [redirOut], 1
   587 00001547 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   588 0000154A 7509                <1>     jne .notDouble
   589 0000154C FE0563EBFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   590 00001552 48FFC6              <1>     inc rsi ;Go past it too
   591                              <1> .notDouble:
   592 00001555 488D3D09EEFFFF      <1>     lea rdi, rdrOutFilespec
   593 0000155C E80C180000          <1>     call skipDelimiters
   594 00001561 E81A190000          <1>     call cpDelimPathToBufz
   595 00001566 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char as 
   596                              <1>     ;Setup the redir here for STDOUT
   597 00001569 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   598 0000156E B800450000          <1>     mov eax, 4500h
   599 00001573 CD21                <1>     int 21h
   600 00001575 0F8201010000        <1>     jc .redirError
   601 0000157B 66890536EBFFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   602 00001582 488D15DCEDFFFF      <1>     lea rdx, rdrOutFilespec
   603 00001589 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   604 0000158E CD21                <1>     int 21h
   605 00001590 730F                <1>     jnc .fileExists
   606 00001592 B8003C0000          <1>     mov eax, 3C00h
   607 00001597 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   608 00001599 CD21                <1>     int 21h
   609 0000159B 0F82DB000000        <1>     jc .redirError
   610                              <1> .fileExists:
   611 000015A1 B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   612 000015A6 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   613 000015A9 B800460000          <1>     mov eax, 4600h  ;DUP2
   614 000015AE CD21                <1>     int 21h
   615 000015B0 0F82C6000000        <1>     jc .redirError
   616 000015B6 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   617 000015BB CD21                <1>     int 21h
   618 000015BD 0F82B9000000        <1>     jc .redirError
   619 000015C3 803DEBEAFFFF01      <1>     cmp byte [redirOut], 1
   620 000015CA 7416                <1>     je .dontAppend
   621                              <1>     ;Here we move the file pointer to the end of the file
   622 000015CC 31D2                <1>     xor edx, edx    ;Low order 32 bits
   623 000015CE 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   624 000015D0 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   625 000015D5 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   626 000015DA CD21                <1>     int 21h
   627 000015DC 0F829A000000        <1>     jc .redirError
   628                              <1> .dontAppend:
   629 000015E2 C605CCEAFFFFFF      <1>     mov byte [redirOut], -1
   630 000015E9 30C0                <1>     xor al, al
   631 000015EB E9E6FEFFFF          <1>     jmp .redirExit
   632                              <1> .pipeSetup:
   633                              <1> ;We only need to setup STDOUT redirection to the pipe file
   634 000015F0 56                  <1>     push rsi    ;Save rsi pointing to char past |
   635 000015F1 E877170000          <1>     call skipDelimiters ;Check if this is a double ||
   636 000015F6 803E7C              <1>     cmp byte [rsi], "|" 
   637 000015F9 5E                  <1>     pop rsi
   638 000015FA 7475                <1>     je .pipeError
   639 000015FC 488D15B1EDFFFF      <1>     lea rdx, pipe1Filespec
   640 00001603 803A00              <1>     cmp byte [rdx], 0
   641 00001606 740C                <1>     jz .pathFound
   642 00001608 488D15F4EDFFFF      <1>     lea rdx, pipe2Filespec
   643 0000160F 803A00              <1>     cmp byte [rdx], 0
   644 00001612 755D                <1>     jnz .pipeError
   645                              <1> .pathFound:
   646 00001614 48891537EEFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   647 0000161B B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   648 00001620 BB01000000          <1>     mov ebx, 1
   649 00001625 CD21                <1>     int 21h
   650 00001627 7248                <1>     jc .pipeError
   651 00001629 66890582EAFFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   652 00001630 E80F170000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   653 00001635 0441                <1>     add al, "A"
   654 00001637 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   655 0000163C 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   656 0000163E 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   657 00001640 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   658 00001642 B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   659 00001647 CD21                <1>     int 21h
   660 00001649 7226                <1>     jc .pipeError
   661                              <1>     ;AX has the handle for this file now, this will become STDOUT
   662                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   663 0000164B 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   664 0000164E B901000000          <1>     mov ecx, 1
   665 00001653 B800460000          <1>     mov eax, 4600h
   666 00001658 CD21                <1>     int 21h
   667 0000165A 7215                <1>     jc .pipeError
   668 0000165C B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   669 00001661 CD21                <1>     int 21h
   670 00001663 720C                <1>     jc .pipeError
   671 00001665 C60543EAFFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   672 0000166C 30C0                <1>     xor al, al  ;Set ZF
   673 0000166E F9                  <1>     stc         ;But also CF to indicate pipe!
   674 0000166F 5F                  <1>     pop rdi
   675                              <1>     return
    13                              <2> %%_ret:
    14 00001670 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   676                              <1> .pipeError:
   677 00001671 5F                  <1>     pop rdi 
   678 00001672 E8E8FBFFFF          <1>     call pipeFailure
   679 00001677 E938F8FFFF          <1>     jmp commandMain ;Fully reset the state if a pipe failure occurs.
   680                              <1> .redirError:
   681 0000167C 5F                  <1>     pop rdi 
   682 0000167D E8CFFBFFFF          <1>     call redirFailure
   683 00001682 E92DF8FFFF          <1>     jmp commandMain ;Fully reset the state if a redir failure occurs.
   684                              <1> 
   685                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   686                              <1> ;Input: rsi points to the count byte of a command line
   687 00001687 4150                <1>     push r8
   688 00001689 4151                <1>     push r9
   689 0000168B B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   690 0000168D CD21                <1>     int 21h
   691 0000168F 52                  <1>     push rdx    ;Save on the stack
   692 00001690 488D1D69E8FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   693 00001697 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   694 00001699 CD21                <1>     int 21h
   695 0000169B 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   696 0000169E 4989D9              <1>     mov r9, rbx
   697 000016A1 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   698 000016A8 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   699 000016AD F348A5              <1>     rep movsq   ;Copy command line over
   700                              <1>     ;call doCommandLine
   701 000016B0 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   702 000016B1 B450                <1>     mov ah, 50h ;Set Current PSP
   703 000016B3 CD21                <1>     int 21h
   704 000016B5 4159                <1>     pop r9
   705 000016B7 4158                <1>     pop r8
   706 000016B9 48CF                <1>     iretq
    16                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> noSelfCopyError:
     7 000016BB 488D153EF2FFFF      <1>     lea rdx, noSelfCopy
     8 000016C2 EB34                <1>     jmp short badCmn
     9                              <1> badParamError:
    10 000016C4 488D15F3F2FFFF      <1>     lea rdx, badParm
    11 000016CB EB2B                <1>     jmp short badCmn
    12                              <1> badDriveError:
    13 000016CD 488D15ADF2FFFF      <1>     lea rdx, badDrv
    14 000016D4 EB22                <1>     jmp short badCmn
    15                              <1> badArgError:
    16 000016D6 488D157FF5FFFF      <1>     lea rdx, badArgs
    17 000016DD EB19                <1>     jmp short badCmn
    18                              <1> badFileError:
    19 000016DF 488D155AF5FFFF      <1>     lea rdx, badSpec
    20 000016E6 EB10                <1>     jmp short badCmn
    21                              <1> badDupFnf:
    22                              <1> ;Hybrid error message
    23 000016E8 488D159EF1FFFF      <1>     lea rdx, dupName
    24 000016EF EB07                <1>     jmp short badCmn
    25                              <1> badDirError:
    26 000016F1 488D15C7F3FFFF      <1>     lea rdx, badDir
    27                              <1> badCmn:
    28 000016F8 B800090000          <1>     mov eax, 0900h
    29 000016FD CD21                <1>     int 21h
    30 000016FF F9                  <1>     stc ;Return with CY => Error occured
    31                              <1>     return
    13                              <2> %%_ret:
    14 00001700 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> 
    33                              <1> dir:
    34                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    35 00001701 C605DCEDFFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    36 00001708 C605D6EDFFFF00      <1>     mov byte [dirLineCtr], 0
    37 0000170F C605D0EDFFFF00      <1>     mov byte [dirFileCtr], 0
    38 00001716 C605CBEDFFFF00      <1>     mov byte [dirSrchDir], 0
    39 0000171D 66C7053CEDFFFF0000  <1>     mov word [searchSpec], 0
    40 00001726 488D3D3DEEFFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    41 0000172D C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    42 00001730 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    42 00001739 3F                  <1>
    43 0000173A 48894701            <1>     mov qword [rdi + fcb.filename], rax
    44 0000173E C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    45                              <1>     ;Start by scanning for the switches
    46 00001745 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    47 0000174C 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    48 0000174F E819160000          <1>     call skipDelimiters ;Skip leading delimiters
    49 00001754 4881C603000000      <1>     add rsi, 3  ;Go past the DIR
    50                              <1> .scanNew:
    51 0000175B E80D160000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    52 00001760 AC                  <1>     lodsb   ;Get this char
    53 00001761 3C0D                <1>     cmp al, CR
    54 00001763 744D                <1>     je .scanDone
    55 00001765 3A05C1E8FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    56 0000176B 7524                <1>     jne .notSwitch
    57 0000176D AC                  <1>     lodsb   ;Get the next char
    58 0000176E E8E8150000          <1>     call ucChar
    59 00001773 3C57                <1>     cmp al, "W"
    60 00001775 7509                <1>     jne .notWide
    61 00001777 800D66EDFFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    62 0000177E EBDB                <1>     jmp short .scanNew
    63                              <1> .notWide:
    64 00001780 3C50                <1>     cmp al, "P"
    65 00001782 0F853CFFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    66 00001788 800D55EDFFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    67 0000178F EBCA                <1>     jmp short .scanNew
    68                              <1> .notSwitch:
    69 00001791 F6054CEDFFFF04      <1>     test byte [dirFlags], dirFileType
    70 00001798 0F8526FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    71                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    72 0000179E 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    73 000017A1 E832170000          <1>     call copyArgumentToSearchSpec   
    74 000017A6 48FFCE              <1>     dec rsi ;Point back to the terminator char
    75 000017A9 800D34EDFFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    76 000017B0 EBA9                <1>     jmp short .scanNew
    77                              <1> .scanDone:
    78 000017B2 F6052BEDFFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    79 000017B9 7438                <1>     jz .currentDrv
    80                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
    81 000017BB 488D35A0ECFFFF      <1>     lea rsi, searchSpec
    82 000017C2 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
    83 000017C6 752B                <1>     jne .currentDrv
    84                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
    85 000017C8 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
    86 000017CD 498D785C            <1>     lea rdi, qword [r8 + fcb1]
    87 000017D1 B801290000          <1>     mov eax, 2901h   ;Parse filename
    88 000017D6 CD21                <1>     int 21h
    89 000017D8 3CFF                <1>     cmp al, -1
    90 000017DA 0F84EDFEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
    91                              <1>     ;Else the drive in the fcb is valid
    92 000017E0 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
    93 000017E5 84C0                <1>     test al, al
    94 000017E7 740A                <1>     jz .currentDrv
    95 000017E9 FEC8                <1>     dec al  ;Convert to 0 based drive number
    96 000017EB 8805F6ECFFFF        <1>     mov byte [dirDrv], al
    97 000017F1 EB0B                <1>     jmp short .dirPrintVol
    98                              <1> .currentDrv:
    99 000017F3 E84C150000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   100 000017F8 8805E9ECFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   101                              <1> .dirPrintVol:
   102 000017FE 488D355DECFFFF      <1>     lea rsi, searchSpec
   103                              <1> ;Now construct the path on dirSrchDir.
   104 00001805 488D3DDCECFFFF      <1>     lea rdi, dirSrchDir
   105 0000180C 0FB605D4ECFFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   106 00001813 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   107 00001815 0441                <1>     add al, "A" ;Turn into a letter
   108 00001817 B43A                <1>     mov ah, ":"
   109 00001819 66AB                <1>     stosw   ;Store X: into the search path
   110 0000181B B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   111 00001820 CD2F                <1>     int 2fh
   112 00001822 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   113 00001824 0F84A3FEFFFF        <1>     je badDriveError
   114                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   115 0000182A 8A05FBE7FFFF        <1>     mov al, byte [pathSep]
   116 00001830 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   117 00001832 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   118 00001834 AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   119 00001835 FEC2                <1>     inc dl  ;Increment by 1
   120 00001837 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   121 0000183A B800470000          <1>     mov eax, 4700h  ;Print current working directory
   122 0000183F CD21                <1>     int 21h
   123 00001841 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   124                              <1>     ;rsi points to the first char in the provided path.
   125                              <1>     ;rdi points to the first char of the cwd.
   126 00001844 31C0                <1>     xor eax, eax
   127                              <1> .goToEndOfCwd:
   128                              <1> ;Move to the end of the string, could use repne?
   129 00001846 3807                <1>     cmp byte [rdi], al
   130 00001848 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   131 0000184A 48FFC7              <1>     inc rdi
   132 0000184D EBF7                <1>     jmp short .goToEndOfCwd
   133                              <1> .prepCopy:
   134 0000184F 8A05D6E7FFFF        <1>     mov al, byte [pathSep]
   135 00001855 3806                <1>     cmp byte [rsi], al
   136 00001857 7412                <1>     je .copyPathLoop
   137 00001859 B43A                <1>     mov ah, ":"
   138 0000185B 86C4                <1>     xchg al, ah
   139 0000185D 663947FE            <1>     cmp word [rdi - 2], ax
   140 00001861 7408                <1>     je .copyPathLoop
   141 00001863 88E0                <1>     mov al, ah
   142 00001865 3847FF              <1>     cmp byte [rdi - 1], al
   143 00001868 7401                <1>     je .copyPathLoop
   144 0000186A AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   145                              <1> .copyPathLoop:
   146 0000186B AC                  <1>     lodsb
   147 0000186C 3A05B9E7FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   148 00001872 7509                <1>     jne .checkDot  ;If not, store it
   149                              <1> .lpPathseps:
   150 00001874 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   151 00001876 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   152 00001878 48FFC6              <1>     inc rsi
   153 0000187B EBF7                <1>     jmp short .lpPathseps
   154                              <1> .checkDot:
   155 0000187D 3C2E                <1>     cmp al, "."
   156 0000187F 7407                <1>     je .dots
   157                              <1> .store:
   158 00001881 AA                  <1>     stosb
   159 00001882 84C0                <1>     test al, al ;Was the char we just copied a null?
   160 00001884 7472                <1>     jz .exitPathCopy
   161 00001886 EBE3                <1>     jmp short .copyPathLoop
   162                              <1> .dots:
   163                              <1>     ;Here handle dot and dot dot
   164                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   165                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   166                              <1>     ; by 1. If it is null, go to top of loop.
   167                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   168 00001888 8A259DE7FFFF        <1>     mov ah, byte [pathSep]
   169 0000188E 3867FF              <1>     cmp byte [rdi - 1], ah  
   170 00001891 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   171 00001893 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   172 00001895 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   173 00001898 7413                <1>     je .twoDot
   174                              <1>     ;This is only a "current dir" when next char is pathsep or null
   175 0000189A 3A258BE7FFFF        <1>     cmp ah, byte [pathSep]
   176 000018A0 7406                <1>     je .skipThisPathsep
   177 000018A2 84E4                <1>     test ah, ah
   178 000018A4 74C5                <1>     jz .copyPathLoop
   179 000018A6 EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   180                              <1> .skipThisPathsep:
   181                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   182 000018A8 48FFC6              <1>     inc rsi ;Point to the pathsep
   183 000018AB EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   184                              <1> .twoDot:
   185                              <1>     ;Woohoo, this works!
   186 000018AD 48FFC6              <1>     inc rsi ;Move past the second dot
   187 000018B0 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   188 000018B2 3A2573E7FFFF        <1>     cmp ah, byte [pathSep]
   189 000018B8 7408                <1>     je .tdOk
   190 000018BA 84E4                <1>     test ah, ah
   191 000018BC 0F8502FEFFFF        <1>     jne badParamError
   192                              <1> .tdOk:
   193 000018C2 8A0563E7FFFF        <1>     mov al, byte byte [pathSep]
   194 000018C8 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   195 000018CC 0F84F2FDFFFF        <1>     je badParamError
   196 000018D2 4881EF02000000      <1>     sub rdi, 2
   197 000018D9 31C9                <1>     xor ecx, ecx
   198 000018DB FFC9                <1>     dec ecx
   199 000018DD FD                  <1>     std
   200 000018DE F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   201 000018E0 FC                  <1>     cld
   202 000018E1 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   203 000018E8 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   204 000018EA 0F847BFFFFFF        <1>     jz .copyPathLoop
   205 000018F0 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   206 000018F3 E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   207                              <1> .exitPathCopy:
   208                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   209 000018F8 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   210 000018FF 8A0526E7FFFF        <1>     mov al, byte [pathSep]
   211 00001905 B43A                <1>     mov ah, ":"
   212 00001907 86C4                <1>     xchg al, ah
   213 00001909 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   214 0000190D 7409                <1>     je .skipOverwrite
   215 0000190F 88E0                <1>     mov al, ah
   216 00001911 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   217 00001913 7503                <1>     jne .skipOverwrite
   218 00001915 C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   219                              <1> .skipOverwrite:
   220 00001918 488D35C9EBFFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   221 0000191F 4889F7              <1>     mov rdi, rsi
   222 00001922 B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   223 00001927 CD2F                <1>     int 2fh
   224 00001929 E8C0150000          <1>     call scanForWildcards
   225 0000192E 742F                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   226 00001930 4889F2              <1>     mov rdx, rsi
   227 00001933 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   228 00001937 7426                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   229                              <1> .notNull:
   230 00001939 E877160000          <1>     call setDTA ;Set the DTA
   231 0000193E B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   232 00001943 B44E                <1>     mov ah, 4Eh ;Find first
   233 00001945 CD21                <1>     int 21h
   234 00001947 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   235                              <1> ;Now we have searched for the file, is a directory?
   236 00001949 F60595E7FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   237 00001950 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   238                              <1>     ;Here we are searching IN a directory. Default search pattern!
   239 00001952 31C0                <1>     xor eax, eax
   240 00001954 31C9                <1>     xor ecx, ecx
   241 00001956 FFC9                <1>     dec ecx
   242 00001958 F2AE                <1>     repne scasb
   243 0000195A 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   244 0000195D EB40                <1>     jmp short .wcDefaultSearch
   245                              <1> .wcSearchPattern:
   246                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   247                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   248 0000195F 31C0                <1>     xor eax, eax
   249 00001961 31C9                <1>     xor ecx, ecx
   250 00001963 FFC9                <1>     dec ecx
   251 00001965 F2AE                <1>     repne scasb ;Scan forwards
   252                              <1>     ;Here rdi points past the null at the end
   253 00001967 8A05BEE6FFFF        <1>     mov al, byte [pathSep]
   254 0000196D 31C9                <1>     xor ecx, ecx
   255 0000196F FFC9                <1>     dec ecx
   256 00001971 FD                  <1>     std ;Search backwards
   257 00001972 F2AE                <1>     repne scasb
   258 00001974 FC                  <1>     cld ;Search forwards again
   259 00001975 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   260 00001978 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   261 0000197C 7503                <1>     jne .wcsp1
   262 0000197E 48FFC7              <1>     inc rdi ;Go one char forwards
   263                              <1> .wcsp1:
   264                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   265 00001981 57                  <1>     push rdi
   266 00001982 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   267 00001984 7503                <1>     jne .wcsp2
   268 00001986 48FFC7              <1>     inc rdi
   269                              <1> .wcsp2:
   270 00001989 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   271 0000198C 488D3DD7EBFFFF      <1>     lea rdi, dirSrchFCB
   272 00001993 B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   273 00001998 CD21                <1>     int 21h
   274 0000199A 5F                  <1>     pop rdi
   275 0000199B 31C0                <1>     xor eax, eax
   276 0000199D 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   277                              <1> .wcDefaultSearch:
   278 0000199F 0FB60541EBFFFF      <1>     movzx eax, byte [dirDrv] 
   279 000019A6 E8610C0000          <1>     call volume.dirEP
   280 000019AB 488D1575F1FFFF      <1>     lea rdx, dirMain    ;Print message intro
   281 000019B2 B409                <1>     mov ah, 09h
   282 000019B4 CD21                <1>     int 21h
   283 000019B6 C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   284 000019B9 488D1528EBFFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   285 000019C0 B409                <1>     mov ah, 09h
   286 000019C2 CD21                <1>     int 21h
   287 000019C4 C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   288 000019C7 488D154AEEFFFF      <1>     lea rdx, crlf2
   289 000019CE B409                <1>     mov ah, 09h
   290 000019D0 CD21                <1>     int 21h
   291                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   292                              <1> ;rdi points to the terminating null
   293 000019D2 8A0553E6FFFF        <1>     mov al, byte [pathSep]
   294 000019D8 3847FF              <1>     cmp byte [rdi - 1], al
   295 000019DB 7403                <1>     je .root
   296 000019DD 48FFC7              <1>     inc rdi
   297                              <1> .root:
   298 000019E0 48FFCF              <1>     dec rdi ;Point back to the pathsep
   299 000019E3 AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   300 000019E4 488D3580EBFFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   301 000019EB E850140000          <1>     call FCBToAsciiz    ;Terminates for free
   302 000019F0 E801000000          <1>     call .searchForFile
   303                              <1>     return
    13                              <2> %%_ret:
    14 000019F5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   304                              <1> 
   305                              <1> .searchForFile:
   306 000019F6 E8BA150000          <1>     call setDTA
   307 000019FB 4C8D15CEE6FFFF      <1>     lea r10, cmdFFBlock
   308 00001A02 B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   309 00001A07 488D15DAEAFFFF      <1>     lea rdx, dirSrchDir
   310 00001A0E B44E                <1>     mov ah, 4Eh ;Find first
   311 00001A10 CD21                <1>     int 21h
   312 00001A12 720B                <1>     jc .dirNoMoreFiles
   313                              <1> .findNext:
   314 00001A14 E878000000          <1>     call .dirPrintFileData  ;Print the file information
   315 00001A19 B44F                <1>     mov ah, 4Fh
   316 00001A1B CD21                <1>     int 21h
   317 00001A1D 73F5                <1>     jnc .findNext 
   318                              <1> .dirNoMoreFiles:
   319 00001A1F F605BEEAFFFF01      <1>     test byte [dirFlags], dirWideType
   320 00001A26 740B                <1>     jz .dirNoEndNewLine
   321 00001A28 488D15E6EDFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   322 00001A2F B409                <1>     mov ah, 09h
   323 00001A31 CD21                <1>     int 21h
   324                              <1> .dirNoEndNewLine:
   325                              <1>     ;Now we print the number of files and the number of bytes on the disk
   326 00001A33 488D15C6F3FFFF      <1>     lea rdx, fourSpc
   327 00001A3A B409                <1>     mov ah, 09h
   328 00001A3C CD21                <1>     int 21h
   329 00001A3E B409                <1>     mov ah, 09h ;Print four Spaces twice
   330 00001A40 CD21                <1>     int 21h
   331 00001A42 0FB6059DEAFFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   332 00001A49 E8B4140000          <1>     call printDecimalWord
   333 00001A4E 488D150BEFFFFF      <1>     lea rdx, dirOk
   334 00001A55 B409                <1>     mov ah, 09h
   335 00001A57 CD21                <1>     int 21h
   336 00001A59 488D15A5F3FFFF      <1>     lea rdx, threeSpc
   337 00001A60 B409                <1>     mov ah, 09h
   338 00001A62 CD21                <1>     int 21h
   339 00001A64 B800360000          <1>     mov eax, 3600h ;Get disk info
   340 00001A69 8A1578EAFFFF        <1>     mov dl, byte [dirDrv]
   341 00001A6F FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   342 00001A71 CD21                <1>     int 21h ;Get disk free space info
   343 00001A73 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   344 00001A76 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   345 00001A79 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   346 00001A7B F7E1                <1>     mul ecx ;Get bytes per cluster
   347 00001A7D 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   348                              <1>     ;rax now has the number of free bytes on the disk
   349 00001A80 E87D140000          <1>     call printDecimalWord
   350 00001A85 488D15DEEEFFFF      <1>     lea rdx, bytesOk
   351 00001A8C B409                <1>     mov ah, 09h
   352 00001A8E CD21                <1>     int 21h
   353                              <1>     return
    13                              <2> %%_ret:
    14 00001A90 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   354                              <1> 
   355                              <1> .dirPrintFileData:
   356                              <1> ;Use fcbCmdSpec to build the file name with space
   357                              <1> ;Start by print the name (same for both cases)
   358                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   359 00001A91 F6054DE6FFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   360                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001A98 75(90)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   361 00001A9A 488D354DE6FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   362 00001AA1 488D3D48E8FFFF      <1>     lea rdi, fcbCmdSpec
   363 00001AA8 E849130000          <1>     call asciiFilenameToFCB
   364 00001AAD 488D153CE8FFFF      <1>     lea rdx, fcbCmdSpec
   365 00001AB4 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   366 00001AB9 BB01000000          <1>     mov ebx, 1  ;STDOUT
   367 00001ABE B440                <1>     mov ah, 40h ;Write handle
   368 00001AC0 CD21                <1>     int 21h
   369 00001AC2 52                  <1>     push rdx
   370 00001AC3 B220                <1>     mov dl, " "
   371 00001AC5 B402                <1>     mov ah, 02h ;Print char
   372 00001AC7 CD21                <1>     int 21h
   373 00001AC9 5A                  <1>     pop rdx
   374 00001ACA 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   375 00001AD1 B903000000          <1>     mov ecx, 3  ;Print three chars
   376 00001AD6 BB01000000          <1>     mov ebx, 1  ;STDOUT
   377 00001ADB B440                <1>     mov ah, 40h ;Write handle
   378 00001ADD CD21                <1>     int 21h
   379 00001ADF F605FEE9FFFF01      <1>     test byte [dirFlags], dirWideType
   380 00001AE6 0F85A8000000        <1>     jnz .widePrint
   381                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   382                              <1>     ;Now check if a DIR
   383 00001AEC F605F2E5FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   384 00001AF3 7418                <1>     jz .dirPrintNotDir
   385 00001AF5 488D157CEEFFFF      <1>     lea rdx, dirLbl
   386 00001AFC B409                <1>     mov ah, 09h
   387 00001AFE CD21                <1>     int 21h
   388 00001B00 488D15FEF2FFFF      <1>     lea rdx, threeSpc
   389 00001B07 B409                <1>     mov ah, 09h
   390 00001B09 CD21                <1>     int 21h
   391 00001B0B EB4F                <1>     jmp short .dirPrintFileDT
   392                              <1> .dirPrintNotDir:
   393                              <1> ;Here we print the file size
   394 00001B0D B220                <1>     mov dl, " "
   395 00001B0F B402                <1>     mov ah, 02h
   396 00001B11 CD21                <1>     int 21h
   397 00001B13 8B05D1E5FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   398 00001B19 E855140000          <1>     call getDecimalWord
   399 00001B1E 4889CB              <1>     mov rbx, rcx
   400 00001B21 51                  <1>     push rcx
   401 00001B22 480FCB              <1>     bswap rbx
   402 00001B25 B908000000          <1>     mov ecx, 8
   403                              <1> .dirPrintFileSizePrep:
   404 00001B2A 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   405 00001B2C 7514                <1>     jne .dirPrintFileSize
   406 00001B2E B402                <1>     mov ah, 02h
   407 00001B30 B220                <1>     mov dl, " "
   408 00001B32 CD21                <1>     int 21h
   409 00001B34 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   410 00001B38 FFC9                <1>     dec ecx
   411 00001B3A 81F901000000        <1>     cmp ecx, 1
   412 00001B40 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   413                              <1> .dirPrintFileSize:
   414 00001B42 5B                  <1>     pop rbx
   415                              <1> .dirPrintFileSizeLoop:
   416 00001B43 88DA                <1>     mov dl, bl
   417 00001B45 B402                <1>     mov ah, 02h
   418 00001B47 CD21                <1>     int 21h
   419 00001B49 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   420 00001B4D FFC9                <1>     dec ecx
   421 00001B4F 75F2                <1>     jnz .dirPrintFileSizeLoop
   422 00001B51 488D15B1F2FFFF      <1>     lea rdx, twoSpc
   423 00001B58 B409                <1>     mov ah, 09h
   424 00001B5A CD21                <1>     int 21h
   425                              <1> .dirPrintFileDT:
   426 00001B5C B220                <1>     mov dl, " "
   427 00001B5E B402                <1>     mov ah, 02h
   428 00001B60 CD21                <1>     int 21h
   429 00001B62 0FB7057FE5FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   430 00001B69 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   431 00001B6B E80D0F0000          <1>     call printDate
   432 00001B70 488D1592F2FFFF      <1>     lea rdx, twoSpc
   433 00001B77 B409                <1>     mov ah, 09h
   434 00001B79 CD21                <1>     int 21h
   435 00001B7B 0FB70564E5FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   436 00001B82 E818100000          <1>     call printTime
   437 00001B87 488D1587ECFFFF      <1>     lea rdx, crlf
   438 00001B8E B409                <1>     mov ah, 09h
   439 00001B90 CD21                <1>     int 21h
   440 00001B92 EB0B                <1>     jmp short .dirPrintNameExit
   441                              <1> .widePrint:
   442                              <1> ;If /W, print name space ext space space space space
   443 00001B94 488D1565F2FFFF      <1>     lea rdx, fourSpc
   444 00001B9B B409                <1>     mov ah, 09h ;Print string
   445 00001B9D CD21                <1>     int 21h
   446                              <1> .dirPrintNameExit:
   447 00001B9F FE0541E9FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   448 00001BA5 FE053AE9FFFF        <1>     inc byte [dirLineCtr]
   449 00001BAB 803D33E9FFFF17      <1>     cmp byte [dirLineCtr], 23
   450                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001BB2 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001BB4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   451 00001BB5 488D15E3EDFFFF      <1>     lea rdx, pauseMes
   452 00001BBC B409                <1>     mov ah, 09h
   453 00001BBE CD21                <1>     int 21h
   454 00001BC0 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   455 00001BC2 CD21                <1>     int 21h
   456 00001BC4 C6051AE9FFFF00      <1>     mov byte [dirLineCtr], 0
   457 00001BCB 488D1543ECFFFF      <1>     lea rdx, crlf   ;Force new line
   458 00001BD2 B409                <1>     mov ah, 09h
   459 00001BD4 CD21                <1>     int 21h
   460                              <1>     return
    13                              <2> %%_ret:
    14 00001BD6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   461                              <1> 
   462                              <1> chdir:
   463 00001BD7 F605DCE4FFFFFF      <1>     test byte [arg1Flg], -1
   464 00001BDE 754D                <1>     jnz .changeDir
   465                              <1>     ;Print CWD
   466                              <1> .printCWD:
   467 00001BE0 E89C100000          <1>     call putCWDInPrompt ;Exactly the same procedure
   468 00001BE5 E8840E0000          <1>     call printCRLF
   469                              <1>     return
    13                              <2> %%_ret:
    14 00001BEA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   470                              <1> .printDiskCWD:
   471                              <1> ;Print CWD for a specified drive
   472 00001BEB 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   473 00001BEF 88D0                <1>     mov al, dl
   474 00001BF1 0440                <1>     add al, "@" ;Get the UC letter
   475 00001BF3 B43A                <1>     mov ah, ":"
   476 00001BF5 488D3D66E8FFFF      <1>     lea rdi, searchSpec
   477 00001BFC 66AB                <1>     stosw   ;Store X:, rdi+=2
   478 00001BFE 8A0527E4FFFF        <1>     mov al, byte [pathSep]
   479 00001C04 AA                  <1>     stosb   ;Store pathSep, inc rdi
   480 00001C05 B447                <1>     mov ah, 47h ;Get Current Working Directory
   481 00001C07 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   482 00001C0A CD21                <1>     int 21h
   483 00001C0C E838110000          <1>     call strlen
   484 00001C11 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   485 00001C17 B440                <1>     mov ah, 40h ;Write to handle
   486 00001C19 BB01000000          <1>     mov ebx, 1  ;STDOUT
   487 00001C1E 488D153DE8FFFF      <1>     lea rdx, searchSpec
   488 00001C25 CD21                <1>     int 21h
   489 00001C27 E8420E0000          <1>     call printCRLF
   490                              <1>     return
    13                              <2> %%_ret:
    14 00001C2C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   491                              <1> .changeDir:
   492 00001C2D 8A0589E4FFFF        <1>     mov al, byte [arg1FCBret]
   493 00001C33 3CFF                <1>     cmp al, -1 
   494 00001C35 0F8492FAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   495 00001C3B E880120000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   496 00001C40 488D151BE8FFFF      <1>     lea rdx, searchSpec
   497 00001C47 B43B                <1>     mov ah, 3Bh ;CHDIR
   498 00001C49 CD21                <1>     int 21h
   499 00001C4B 0F82A0FAFFFF        <1>     jc badDirError
   500                              <1>     return
    13                              <2> %%_ret:
    14 00001C51 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   501                              <1> 
   502                              <1> mkdir:
   503 00001C52 F60561E4FFFFFF      <1>     test byte [arg1Flg], -1
   504 00001C59 0F8477FAFFFF        <1>     jz badArgError
   505 00001C5F F60557E4FFFFFF      <1>     test byte [arg2Flg], -1
   506 00001C66 0F856AFAFFFF        <1>     jnz badArgError
   507                              <1>     ;We have exactly one argument
   508 00001C6C 8A054AE4FFFF        <1>     mov al, byte [arg1FCBret]
   509 00001C72 3CFF                <1>     cmp al, -1 
   510 00001C74 0F8453FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   511 00001C7A E841120000          <1>     call buildCommandPath
   512 00001C7F 488D15DCE7FFFF      <1>     lea rdx, searchSpec
   513 00001C86 B800390000          <1>     mov eax, 3900h  ;MKDIR
   514 00001C8B CD21                <1>     int 21h
   515                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001C8D 73(51)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   516                              <1> .badMake:   ;Else, bad make
   517 00001C8F 488D153DEEFFFF      <1>     lea rdx, badMD
   518 00001C96 B800090000          <1>     mov eax, 0900h
   519 00001C9B CD21                <1>     int 21h
   520                              <1>     return
    13                              <2> %%_ret:
    14 00001C9D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   521                              <1> 
   522                              <1> rmdir:
   523 00001C9E F60515E4FFFFFF      <1>     test byte [arg1Flg], -1
   524 00001CA5 0F842BFAFFFF        <1>     jz badArgError
   525 00001CAB F6050BE4FFFFFF      <1>     test byte [arg2Flg], -1
   526 00001CB2 0F851EFAFFFF        <1>     jnz badArgError
   527                              <1>     ;We have exactly one argument
   528 00001CB8 8A05FEE3FFFF        <1>     mov al, byte [arg1FCBret]
   529 00001CBE 3CFF                <1>     cmp al, -1 
   530 00001CC0 0F8407FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   531 00001CC6 E8F5110000          <1>     call buildCommandPath
   532 00001CCB 488D1590E7FFFF      <1>     lea rdx, searchSpec
   533 00001CD2 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   534 00001CD7 CD21                <1>     int 21h
   535                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001CD9 73(9D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   536                              <1> .badRemove:   ;Else, bad make
   537 00001CDB 488D150EEEFFFF      <1>     lea rdx, badRD
   538 00001CE2 B800090000          <1>     mov eax, 0900h
   539 00001CE7 CD21                <1>     int 21h
   540                              <1>     return
    13                              <2> %%_ret:
    14 00001CE9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   541                              <1> 
   542                              <1> copy:
   543 00001CEA F605C9E3FFFFFF      <1>     test byte [arg1Flg], -1
   544 00001CF1 0F84DFF9FFFF        <1>     jz badArgError
   545 00001CF7 F605BFE3FFFFFF      <1>     test byte [arg2Flg], -1
   546 00001CFE 0F84D2F9FFFF        <1>     jz badArgError
   547 00001D04 0FB605B0E3FFFF      <1>     movzx eax, byte [arg1Off]
   548 00001D0B 4C8B05FDE2FFFF      <1>     mov r8, [pspPtr]
   549 00001D12 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   550 00001D19 4889F3              <1>     mov rbx, rsi    ;Save the ptr to the start of the string in rbx
   551 00001D1C 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   552 00001D1F 488D3D84E8FFFF      <1>     lea rdi, sourcePath
   553 00001D26 E855110000          <1>     call cpDelimPathToBufz    
   554 00001D2B 0FB6058CE3FFFF      <1>     movzx eax, byte [arg2Off]
   555 00001D32 4889DE              <1>     mov rsi, rbx    ;Get back the start of the ptr
   556 00001D35 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   557 00001D38 488D3DEDE8FFFF      <1>     lea rdi, destPath
   558 00001D3F E83C110000          <1>     call cpDelimPathToBufz   
   559                              <1> ;Before we open, we check if the two filenames are equal
   560                              <1> ; If so, crap out.
   561 00001D44 488D355FE8FFFF      <1>     lea rsi, sourcePath
   562 00001D4B 488D3DDAE8FFFF      <1>     lea rdi, destPath
   563 00001D52 B81E120000          <1>     mov eax, 121Eh
   564 00001D57 CD2F                <1>     int 2Fh
   565 00001D59 0F84D3000000        <1>     jz .sameFilename
   566                              <1>     ;Open source with read permission
   567                              <1>     ;Open destination with write permission
   568 00001D5F 488D1544E8FFFF      <1>     lea rdx, sourcePath
   569 00001D66 B8003D0000          <1>     mov eax, 3D00h  ;Read open
   570 00001D6B CD21                <1>     int 21h
   571 00001D6D 0F8251F9FFFF        <1>     jc badParamError
   572 00001D73 66890534E9FFFF      <1>     mov word [sourceHdl], ax
   573                              <1> 
   574 00001D7A 0FB7D8              <1>     movzx ebx, ax   ;For bx
   575 00001D7D B800440000          <1>     mov eax, 4400h  ;Get device info in dx
   576 00001D82 CD21                <1>     int 21h
   577 00001D84 66891527E9FFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
   578                              <1> 
   579 00001D8B 488D159AE8FFFF      <1>     lea rdx, destPath
   580 00001D92 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   581 00001D97 31C9                <1>     xor ecx, ecx    ;No file attributes
   582 00001D99 CD21                <1>     int 21h
   583 00001D9B 0F82B8000000        <1>     jc .badExit
   584 00001DA1 66890508E9FFFF      <1>     mov word [destHdl], ax
   585 00001DA8 31F6                <1>     xor esi, esi
   586 00001DAA 488D1503E9FFFF      <1>     lea rdx, copyBuffer
   587                              <1> .copyLoop:
   588 00001DB1 B980000000          <1>     mov ecx, 128
   589 00001DB6 0FB71DF1E8FFFF      <1>     movzx ebx, word [sourceHdl]
   590 00001DBD B43F                <1>     mov ah, 3Fh ;Read
   591 00001DBF CD21                <1>     int 21h
   592 00001DC1 0F8292000000        <1>     jc .badExit
   593 00001DC7 85C0                <1>     test eax, eax
   594 00001DC9 743A                <1>     jz .okExit
   595 00001DCB 01C6                <1>     add esi, eax
   596 00001DCD 89C1                <1>     mov ecx, eax
   597 00001DCF 0FB71DDAE8FFFF      <1>     movzx ebx, word [destHdl]
   598 00001DD6 B440                <1>     mov ah, 40h ;Write
   599 00001DD8 CD21                <1>     int 21h
   600 00001DDA 727D                <1>     jc .badExit
   601 00001DDC 3D80000000          <1>     cmp eax, 128    ;Did we read 128 chars?
   602 00001DE1 74CE                <1>     je .copyLoop
   603                              <1>     ;If not char dev, exit
   604 00001DE3 66F705C6E8FFFF8000  <1>     test word [srcHdlInfo], 80h ;Char dev bit set?
   605 00001DEC 7417                <1>     jz .okExit
   606                              <1>     ;Is handle in cooked or binary mode?
   607 00001DEE 66F705BBE8FFFF2000  <1>     test word [srcHdlInfo], 20h
   608 00001DF7 750C                <1>     jnz .okExit
   609                              <1>     ;Here the char dev must be in cooked mode. Check if the last char was ^Z
   610 00001DF9 09C0                <1>     or eax, eax ;Clear upper bits in eax
   611 00001DFB 488D7C02FF          <1>     lea rdi, qword [rdx + rax - 1]  ;Point to the last char in the buffer
   612 00001E00 803F1A              <1>     cmp byte [rdi], EOF ;Was this EOF?
   613 00001E03 75AC                <1>     jne .copyLoop   ;Jump if not
   614                              <1> .okExit:
   615 00001E05 E832000000          <1>     call .leaveCopyClose
   616 00001E0A 488D1504EAFFFF      <1>     lea rdx, crlf
   617 00001E11 B409                <1>     mov ah, 09h
   618 00001E13 CD21                <1>     int 21h
   619 00001E15 488D15E4EFFFFF      <1>     lea rdx, fourSpc
   620 00001E1C B409                <1>     mov ah, 09h
   621 00001E1E CD21                <1>     int 21h
   622 00001E20 B402                <1>     mov ah, 02h
   623 00001E22 B231                <1>     mov dl, "1" ;1 File(s) copied
   624 00001E24 CD21                <1>     int 21h
   625 00001E26 488D1521EBFFFF      <1>     lea rdx, copyOk
   626 00001E2D B409                <1>     mov ah, 09h
   627 00001E2F CD21                <1>     int 21h
   628                              <1>     return
    13                              <2> %%_ret:
    14 00001E31 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   629                              <1> .sameFilename:
   630 00001E32 E805000000          <1>     call .leaveCopyClose ;Close the handles
   631 00001E37 E97FF8FFFF          <1>     jmp noSelfCopyError
   632                              <1> .leaveCopyClose:
   633 00001E3C 668B1D6BE8FFFF      <1>     mov bx, word [sourceHdl]
   634 00001E43 B8003E0000          <1>     mov eax, 3E00h
   635 00001E48 CD21                <1>     int 21h
   636 00001E4A 668B1D5FE8FFFF      <1>     mov bx, word [destHdl]
   637 00001E51 B8003E0000          <1>     mov eax, 3E00h
   638 00001E56 CD21                <1>     int 21h
   639                              <1>     return
    13                              <2> %%_ret:
    14 00001E58 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   640                              <1> .badExit:
   641                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   642 00001E59 668B1D4EE8FFFF      <1>     mov bx, word [sourceHdl]
   643 00001E60 6681FBFFFF          <1>     cmp bx, -1
   644 00001E65 7407                <1>     je .skipSource
   645 00001E67 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   646 00001E6C CD21                <1>     int 21h
   647                              <1> .skipSource:
   648 00001E6E 668B1D3BE8FFFF      <1>     mov bx, word [destHdl]
   649 00001E75 6681FBFFFF          <1>     cmp bx, -1
   650 00001E7A 0F8444F8FFFF        <1>     je badParamError
   651 00001E80 B8003E0000          <1>     mov eax, 3E00h
   652 00001E85 CD21                <1>     int 21h
   653 00001E87 E938F8FFFF          <1>     jmp badParamError
   654                              <1> 
   655                              <1> erase:
   656 00001E8C F60527E2FFFFFF      <1>     test byte [arg1Flg], -1
   657 00001E93 0F843DF8FFFF        <1>     jz badArgError
   658 00001E99 E822100000          <1>     call buildCommandPath
   659 00001E9E 488D15BDE5FFFF      <1>     lea rdx, searchSpec
   660 00001EA5 B800410000          <1>     mov eax, 4100h  ;Delete File 
   661 00001EAA 31C9                <1>     xor ecx, ecx
   662 00001EAC CD21                <1>     int 21h
   663 00001EAE 0F8222F8FFFF        <1>     jc badArgError
   664                              <1>     return
    13                              <2> %%_ret:
    14 00001EB4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   665                              <1> date:
   666 00001EB5 488D153AEBFFFF      <1>     lea rdx, curDate
   667 00001EBC B409                <1>     mov ah, 09h
   668 00001EBE CD21                <1>     int 21h
   669 00001EC0 B42A                <1>     mov ah, 2Ah ;DOS get date
   670 00001EC2 CD21                <1>     int 21h
   671                              <1> 	;AL = day of the week (0=Sunday)
   672                              <1> 	;CX = year (1980-2099)
   673                              <1> 	;DH = month (1-12)
   674                              <1> 	;DL = day (1-31)
   675 00001EC4 66890DDBE6FFFF      <1>     mov word [td1], cx
   676 00001ECB 8815D7E6FFFF        <1>     mov byte [td3], dl
   677 00001ED1 8835D2E6FFFF        <1>     mov byte [td4], dh
   678 00001ED7 0FB6C0              <1>     movzx eax, al
   679 00001EDA 89C3                <1>     mov ebx, eax
   680 00001EDC D1E3                <1>     shl ebx, 1   ;Multiply by 2
   681 00001EDE 01D8                <1>     add eax, ebx ;Make it 3 times 
   682 00001EE0 488D15EBEAFFFF      <1>     lea rdx, dayName
   683 00001EE7 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   684 00001EEB B903000000          <1>     mov ecx, 3  ;Print three chars
   685 00001EF0 BB01000000          <1>     mov ebx, 1  ;STDOUT
   686 00001EF5 B440                <1>     mov ah, 40h ;Write to handle
   687 00001EF7 CD21                <1>     int 21h
   688 00001EF9 B220                <1>     mov dl, " "
   689 00001EFB B402                <1>     mov ah, 02h
   690 00001EFD CD21                <1>     int 21h
   691                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   692                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   693                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   694 00001EFF 0FB705A0E6FFFF      <1>     movzx eax, word [td1]   ;Get this word
   695 00001F06 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   696 00001F09 0FB61D99E6FFFF      <1>     movzx ebx, byte [td4]
   697 00001F10 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   698 00001F13 09D8                <1>     or eax, ebx ;Add this date to eax
   699 00001F15 0FB61D8CE6FFFF      <1>     movzx ebx, byte [td3]
   700 00001F1C 09D8                <1>     or eax, ebx
   701 00001F1E BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   702 00001F23 E8550B0000          <1>     call printDate
   703                              <1> 
   704 00001F28 488D15D8EAFFFF      <1>     lea rdx, newDate
   705 00001F2F B409                <1>     mov ah, 09h
   706 00001F31 CD21                <1>     int 21h
   707 00001F33 488D15ECEAFFFF      <1>     lea rdx, ukDate
   708 00001F3A 488D05D8EAFFFF      <1>     lea rax, usDate
   709 00001F41 488D1DEBEAFFFF      <1>     lea rbx, jpDate
   710 00001F48 803DE7E0FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   711 00001F4F 480F47D3            <1>     cmova rdx, rbx
   712 00001F53 480F42D0            <1>     cmovb rdx, rax
   713 00001F57 B409                <1>     mov ah, 09h
   714 00001F59 CD21                <1>     int 21h
   715                              <1> 
   716 00001F5B 488D153BE2FFFF      <1>     lea rdx, inBuffer
   717 00001F62 C6027E              <1>     mov byte [rdx], 126 ;Enter a string of up to 126 chars in length
   718 00001F65 B40A                <1>     mov ah, 0Ah
   719 00001F67 CD21                <1>     int 21h
   720 00001F69 52                  <1>     push rdx
   721 00001F6A 488D15A4E8FFFF      <1>     lea rdx, crlf
   722 00001F71 B409                <1>     mov ah, 09h
   723 00001F73 CD21                <1>     int 21h
   724 00001F75 5A                  <1>     pop rdx
   725 00001F76 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   726                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001F7A 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001F7C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   727                              <1>     return
    13                              <2> %%_ret:
    14 00001F7D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   728                              <1> 
   729                              <1> time:
   730 00001F7E 488D15CAEAFFFF      <1>     lea rdx, curTime
   731 00001F85 B409                <1>     mov ah, 09h
   732 00001F87 CD21                <1>     int 21h
   733 00001F89 B42C                <1>     mov ah, 2Ch ;DOS get time
   734 00001F8B CD21                <1>     int 21h
   735                              <1>     ;CH = hour (0-23)
   736                              <1> 	;CL = minutes (0-59)
   737                              <1> 	;DH = seconds (0-59)
   738                              <1> 	;DL = hundredths (0-99)
   739 00001F8D 880D13E6FFFF        <1>     mov byte [td1], cl
   740 00001F93 882D0EE6FFFF        <1>     mov byte [td2], ch
   741 00001F99 881509E6FFFF        <1>     mov byte [td3], dl
   742 00001F9F 883504E6FFFF        <1>     mov byte [td4], dh
   743 00001FA5 0FB6C5              <1>     movzx eax, ch
   744 00001FA8 E8640C0000          <1>     call printTime.printHours
   745                              <1> 
   746 00001FAD 8A1590E0FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   747 00001FB3 B402                <1>     mov ah, 02h
   748 00001FB5 CD21                <1>     int 21h
   749                              <1> 
   750 00001FB7 0FB605E8E5FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   751 00001FBE E83E0C0000          <1>     call printTime.printMinutesAlt
   752                              <1> 
   753 00001FC3 8A157AE0FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   754 00001FC9 B402                <1>     mov ah, 02h
   755 00001FCB CD21                <1>     int 21h
   756                              <1> 
   757 00001FCD 0FB605D5E5FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   758 00001FD4 E8280C0000          <1>     call printTime.printMinutesAlt
   759                              <1> 
   760 00001FD9 B22E                <1>     mov dl, "."
   761 00001FDB B402                <1>     mov ah, 02h
   762 00001FDD CD21                <1>     int 21h
   763                              <1> 
   764 00001FDF 0FB605C2E5FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   765 00001FE6 E8160C0000          <1>     call printTime.printMinutesAlt
   766                              <1> 
   767 00001FEB 488D156EEAFFFF      <1>     lea rdx, newTime
   768 00001FF2 B409                <1>     mov ah, 09h
   769 00001FF4 CD21                <1>     int 21h
   770                              <1> 
   771 00001FF6 488D15A0E1FFFF      <1>     lea rdx, inBuffer
   772 00001FFD C6027E              <1>     mov byte [rdx], 126 ;Enter a string of up to 126 chars in length
   773 00002000 B40A                <1>     mov ah, 0Ah
   774 00002002 CD21                <1>     int 21h
   775 00002004 52                  <1>     push rdx
   776 00002005 488D1509E8FFFF      <1>     lea rdx, crlf
   777 0000200C B409                <1>     mov ah, 09h
   778 0000200E CD21                <1>     int 21h
   779 00002010 5A                  <1>     pop rdx
   780 00002011 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   781                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002015 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002017 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   782                              <1>     return
    13                              <2> %%_ret:
    14 00002018 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   783                              <1> ctty:
   784 00002019 F6059AE0FFFFFF      <1>     test byte [arg1Flg], -1
   785 00002020 0F84B0F6FFFF        <1>     jz badArgError
   786 00002026 F60590E0FFFFFF      <1>     test byte [arg2Flg], -1
   787 0000202D 0F85A3F6FFFF        <1>     jnz badArgError
   788 00002033 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   789 0000203A 0FB6057AE0FFFF      <1>     movzx eax, byte [arg1Off]
   790 00002041 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   791 00002044 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   792 00002048 750F                <1>     jne .noDrive
   793 0000204A 0FB6056BE0FFFF      <1>     movzx eax, byte [arg1FCBret]
   794 00002051 3CFF                <1>     cmp al, -1
   795 00002053 0F8474F6FFFF        <1>     je badDriveError
   796                              <1> .noDrive:
   797                              <1>     ;Now we open the provided file
   798 00002059 E87A0E0000          <1>     call copyArgumentToSearchSpec
   799 0000205E 488D15FDE3FFFF      <1>     lea rdx, searchSpec
   800 00002065 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   801 0000206A CD21                <1>     int 21h
   802 0000206C 0F826DF6FFFF        <1>     jc badFileError
   803 00002072 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   804 00002075 B800440000          <1>     mov eax, 4400h  ;Get device word
   805 0000207A CD21                <1>     int 21h
   806 0000207C F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   807 0000207F 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   808                              <1>     ;Now we set this handle to be STDIO
   809 00002081 80CA03              <1>     or dl, 3    ;Set STDIO bits
   810 00002084 30F6                <1>     xor dh, dh
   811 00002086 B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   812 0000208B CD21                <1>     int 21h
   813                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   814 0000208D 31C9                <1>     xor ecx, ecx    ;STDIN
   815 0000208F B446                <1>     mov ah, 46h
   816 00002091 CD21                <1>     int 21h
   817 00002093 FFC1                <1>     inc ecx         ;STDOUT
   818 00002095 B446                <1>     mov ah, 46h
   819 00002097 CD21                <1>     int 21h
   820 00002099 FFC1                <1>     inc ecx         ;STDERR
   821 0000209B B446                <1>     mov ah, 46h
   822 0000209D CD21                <1>     int 21h
   823 0000209F B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   824 000020A1 CD21                <1>     int 21h
   825                              <1>     return
    13                              <2> %%_ret:
    14 000020A3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   826                              <1> .badCharDev:
   827 000020A4 488D15D5EAFFFF      <1>     lea rdx, badDev
   828 000020AB B409                <1>     mov ah, 09h
   829 000020AD CD21                <1>     int 21h
   830 000020AF B43E                <1>     mov ah, 3Eh ;Close opened handle
   831 000020B1 CD21                <1>     int 21h
   832                              <1>     return
    13                              <2> %%_ret:
    14 000020B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   833                              <1> 
   834                              <1> cls:  
   835 000020B4 B800440000          <1>     mov eax, 4400h  ;Get device info
   836 000020B9 BB01000000          <1>     mov ebx, 1      ;for handle 1
   837 000020BE CD21                <1>     int 21h         ;in dx
   838 000020C0 F7C280000000        <1>     test edx, devCharDev
   839 000020C6 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   840 000020C8 F7C210000000        <1>     test edx, charDevFastOut
   841 000020CE 743E                <1>     jz .doAnsi
   842                              <1>     ;Test if Int 29h uses Int 30h
   843                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   844                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
   845 000020D0 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
   846 000020D5 CD21                <1>     int 21h
   847                              <1> .biosCheck:
   848 000020D7 66813BCD30          <1>     cmp word [rbx], 30CDh
   849 000020DC 740C                <1>     je .biosConfirmed
   850 000020DE 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   851 000020E3 7429                <1>     je .doAnsi
   852 000020E5 48FFC3              <1>     inc rbx
   853 000020E8 EBED                <1>     jmp short .biosCheck
   854                              <1> .biosConfirmed:
   855                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   856 000020EA B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   857 000020EC 31DB                <1>     xor ebx, ebx
   858 000020EE CD30                <1>     int 30h
   859 000020F0 B40F                <1>     mov ah, 0Fh ;Get screen mode
   860 000020F2 CD30                <1>     int 30h
   861 000020F4 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   862 000020F7 FECA                <1>     dec dl
   863 000020F9 B619                <1>     mov dh, 25  ;Number of rows is standard
   864 000020FB 31C0                <1>     xor eax, eax
   865 000020FD 89C1                <1>     mov ecx, eax
   866 000020FF B707                <1>     mov bh, 7   ;Screen attributes
   867 00002101 B406                <1>     mov ah, 6   ;Scroll
   868 00002103 CD30                <1>     int 30h
   869 00002105 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   870 00002107 B700                <1>     mov bh, 0   ;Page 0
   871 00002109 B402                <1>     mov ah, 2
   872 0000210B CD30                <1>     int 30h
   873                              <1>     return
    13                              <2> %%_ret:
    14 0000210D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   874                              <1> .doAnsi:
   875                              <1> ;4 chars in the ansi routine
   876                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   877                              <1> ; understand ANSI codes
   878 0000210E 488D35E7ECFFFF      <1>     lea rsi, ansiCls
   879 00002115 B904000000          <1>     mov ecx, 4
   880 0000211A B406                <1>     mov ah, 06h ;Raw char output
   881                              <1> .ansiLp:
   882 0000211C AC                  <1>     lodsb   ;Get the char in 
   883 0000211D 88C2                <1>     mov dl, al
   884 0000211F CD21                <1>     int 21h
   885 00002121 FFC9                <1>     dec ecx
   886 00002123 75F7                <1>     jnz .ansiLp
   887                              <1>     return
    13                              <2> %%_ret:
    14 00002125 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   888                              <1> 
   889                              <1> break:
   890 00002126 F6058DDFFFFFFF      <1>     test byte [arg1Flg], -1
   891 0000212D 752D                <1>     jnz .argumentProvided
   892                              <1>     ;Here we just get the status of break
   893 0000212F B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   894 00002134 CD21                <1>     int 21h
   895 00002136 88D3                <1>     mov bl, dl
   896 00002138 488D15E3EAFFFF      <1>     lea rdx, breakIs
   897 0000213F B409                <1>     mov ah, 09h
   898 00002141 CD21                <1>     int 21h
   899 00002143 488D15D3EAFFFF      <1>     lea rdx, onMes
   900 0000214A 488D0DC6EAFFFF      <1>     lea rcx, offMes
   901 00002151 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   902 00002153 480F44D1            <1>     cmovz rdx, rcx
   903 00002157 B409                <1>     mov ah, 09h
   904 00002159 CD21                <1>     int 21h
   905                              <1>     return
    13                              <2> %%_ret:
    14 0000215B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   906                              <1> .argumentProvided:
   907 0000215C 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   908 00002160 AD                  <1>     lodsd   ;Read the word
   909 00002161 89C3                <1>     mov ebx, eax
   910 00002163 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   911 00002168 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   912 0000216B 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   913 00002170 7416                <1>     je .maybeOn
   914 00002172 663D4F46            <1>     cmp ax, "OF"
   915 00002176 7523                <1>     jne .badOnOff
   916 00002178 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   917 0000217D 6681FB4620          <1>     cmp bx, "F "
   918 00002182 7517                <1>     jne .badOnOff
   919                              <1>     ;Set off
   920 00002184 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   921 00002186 EB0B                <1>     jmp short .setBreak
   922                              <1> .maybeOn:
   923 00002188 663D4F4E            <1>     cmp ax, "ON"
   924 0000218C 750D                <1>     jne .badOnOff
   925                              <1>     ;Set on
   926 0000218E BA01000000          <1>     mov edx, 1
   927                              <1> .setBreak:
   928 00002193 B801330000          <1>     mov eax, 3301h  ;Set break
   929 00002198 CD21                <1>     int 21h
   930                              <1>     return
    13                              <2> %%_ret:
    14 0000219A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   931                              <1> .badOnOff:
   932 0000219B 488D156AECFFFF      <1>     lea rdx, badOnOff
   933 000021A2 B409                <1>     mov ah, 09h
   934 000021A4 CD21                <1>     int 21h
   935                              <1>     return
    13                              <2> %%_ret:
    14 000021A6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   936                              <1> 
   937                              <1> verify:
   938 000021A7 F6050CDFFFFFFF      <1>     test byte [arg1Flg], -1
   939 000021AE 752D                <1>     jnz .argumentProvided
   940                              <1>     ;Here we just get the status of break
   941 000021B0 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   942 000021B5 CD21                <1>     int 21h
   943 000021B7 88C3                <1>     mov bl, al
   944 000021B9 488D156CEAFFFF      <1>     lea rdx, verifyIs
   945 000021C0 B409                <1>     mov ah, 09h
   946 000021C2 CD21                <1>     int 21h
   947 000021C4 488D1552EAFFFF      <1>     lea rdx, onMes
   948 000021CB 488D0D45EAFFFF      <1>     lea rcx, offMes
   949 000021D2 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   950 000021D4 480F44D1            <1>     cmovz rdx, rcx
   951 000021D8 B409                <1>     mov ah, 09h
   952 000021DA CD21                <1>     int 21h
   953                              <1>     return
    13                              <2> %%_ret:
    14 000021DC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   954                              <1> .argumentProvided:
   955 000021DD 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   956 000021E1 AD                  <1>     lodsd   ;Read the word
   957 000021E2 89C3                <1>     mov ebx, eax
   958 000021E4 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   959 000021E9 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   960 000021EC 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   961 000021F1 7416                <1>     je .maybeOn
   962 000021F3 663D4F46            <1>     cmp ax, "OF"
   963 000021F7 751F                <1>     jne .badOnOff
   964 000021F9 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   965 000021FE 6681FB4620          <1>     cmp bx, "F "
   966 00002203 7513                <1>     jne .badOnOff
   967                              <1>     ;Set off
   968 00002205 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   969 00002207 EB0A                <1>     jmp short .setVerify
   970                              <1> .maybeOn:
   971 00002209 663D4F4E            <1>     cmp ax, "ON"
   972 0000220D 7509                <1>     jne .badOnOff
   973                              <1>     ;Set on
   974 0000220F 31C0                <1>     xor eax, eax
   975 00002211 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   976                              <1> .setVerify:
   977 00002213 B42E                <1>     mov ah, 2Eh  ;Set Verify
   978 00002215 CD21                <1>     int 21h
   979                              <1>     return
    13                              <2> %%_ret:
    14 00002217 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   980                              <1> .badOnOff:
   981 00002218 488D15EDEBFFFF      <1>     lea rdx, badOnOff
   982 0000221F B409                <1>     mov ah, 09h
   983 00002221 CD21                <1>     int 21h
   984                              <1>     return
    13                              <2> %%_ret:
    14 00002223 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   985                              <1> 
   986                              <1> rename:
   987 00002224 F6058FDEFFFFFF      <1>     test byte [arg1Flg], -1
   988 0000222B 0F84A5F4FFFF        <1>     jz badArgError
   989 00002231 F60585DEFFFFFF      <1>     test byte [arg2Flg], -1
   990 00002238 0F8498F4FFFF        <1>     jz badArgError
   991 0000223E 0FB60576DEFFFF      <1>     movzx eax, byte [arg1Off]
   992 00002245 4C8B05C3DDFFFF      <1>     mov r8, [pspPtr]
   993 0000224C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   994 00002253 4889F3              <1>     mov rbx, rsi    ;Save the ptr to the start of the string in rbx
   995 00002256 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   996 00002259 488D3D4AE3FFFF      <1>     lea rdi, sourcePath
   997 00002260 E81B0C0000          <1>     call cpDelimPathToBufz    
   998 00002265 0FB60552DEFFFF      <1>     movzx eax, byte [arg2Off]
   999 0000226C 4889DE              <1>     mov rsi, rbx    ;Get back the start of the ptr
  1000 0000226F 4801C6              <1>     add rsi, rax    ;Go to the start of the command
  1001 00002272 488D3DB3E3FFFF      <1>     lea rdi, destPath
  1002 00002279 E8020C0000          <1>     call cpDelimPathToBufz   
  1003 0000227E 488D1525E3FFFF      <1>     lea rdx, sourcePath
  1004 00002285 488D3DA0E3FFFF      <1>     lea rdi, destPath
  1005 0000228C B800560000          <1>     mov eax, 5600h
  1006 00002291 CD21                <1>     int 21h
  1007                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002293 73(23)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1008 00002295 3C0F                <1>     cmp al, errBadDrv
  1009 00002297 0F8430F4FFFF        <1>     je badDriveError
  1010 0000229D 3C0B                <1>     cmp al, errBadFmt
  1011 0000229F 0F844CF4FFFF        <1>     je badDirError
  1012 000022A5 3C11                <1>     cmp al, errDevUnk
  1013 000022A7 0F8417F4FFFF        <1>     je badParamError
  1014 000022AD E936F4FFFF          <1>     jmp badDupFnf
  1015                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1016                              <1> touch:
  1017                              <1> ;Temporarily used to create files
  1018 000022B2 F60501DEFFFFFF      <1>     test byte [arg1Flg], -1
  1019 000022B9 0F8417F4FFFF        <1>     jz badArgError
  1020 000022BF E8FC0B0000          <1>     call buildCommandPath
  1021 000022C4 488D1597E1FFFF      <1>     lea rdx, searchSpec
  1022 000022CB B8003C0000          <1>     mov eax, 3C00h  ;Create file 
  1023 000022D0 31C9                <1>     xor ecx, ecx
  1024 000022D2 CD21                <1>     int 21h
  1025 000022D4 720B                <1>     jc .touchError
  1026 000022D6 0FB7D8              <1>     movzx ebx, ax
  1027 000022D9 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1028 000022DE CD21                <1>     int 21h
  1029                              <1>     return
    13                              <2> %%_ret:
    14 000022E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1030                              <1> .touchError:
  1031 000022E1 488D15D2EAFFFF      <1>     lea rdx, touchErr
  1032 000022E8 E90BF4FFFF          <1>     jmp badCmn
  1033                              <1> 
  1034                              <1> join:
  1035                              <1> ;Mock join command, to test join. Make an external command.
  1036                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1037 000022ED F605AF000000FF      <1>     test byte [.joinOn], -1
  1038 000022F4 743D                <1>     jz .okJoin
  1039                              <1> .joindisable:
  1040 000022F6 B800520000          <1>     mov eax, 5200h  
  1041 000022FB CD21                <1>     int 21h
  1042                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1043 000022FD B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1044 00002302 CD2A                <1>     int 2Ah
  1045 00002304 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1046 00002308 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1047 0000230C 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1048 00002312 C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1049 00002315 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1050 00002319 FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1051 0000231C B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1052 00002321 CD2A                <1>     int 2Ah
  1053 00002323 C6057900000000      <1>     mov byte [.joinOn], 0
  1054 0000232A 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1055 00002331 EB45                <1>     jmp short .joinExit
  1056                              <1> .okJoin:
  1057 00002333 C60569000000FF      <1>     mov byte [.joinOn], -1
  1058 0000233A B800520000          <1>     mov eax, 5200h  
  1059 0000233F CD21                <1>     int 21h
  1060 00002341 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1061 00002345 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1062                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1063 00002349 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1064 0000234E CD2A                <1>     int 2Ah
  1065 00002350 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1066 00002356 4889DF              <1>     mov rdi, rbx
  1067 00002359 488D3544000000      <1>     lea rsi, .joinPath
  1068 00002360 B90C000000          <1>     mov ecx, .joinPathL
  1069 00002365 F3A4                <1>     rep movsb   ;Copy chars over
  1070 00002367 FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1071 0000236A B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1072 0000236F CD2A                <1>     int 2Ah
  1073 00002371 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1074                              <1> .joinExit:
  1075 00002378 B800090000          <1>     mov eax, 0900h
  1076 0000237D CD21                <1>     int 21h
  1077                              <1>     return
    13                              <2> %%_ret:
    14 0000237F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1078 00002380 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1078 00002389 61626C65640D0A24    <1>
  1079 00002391 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1079 0000239A 7361626C65640D0A24  <1>
  1080 000023A3 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1081 000023A4 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1081 000023AD 535400              <1>
  1082                              <1> .joinPathL  equ $ - .joinPath 
  1083                              <1> 
  1084                              <1> subst:
  1085                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1086                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1087 000023B0 F605D3000000FF      <1>     test byte [.substOn], -1
  1088 000023B7 7443                <1>     jz .okSubst
  1089                              <1> .substdisable:
  1090 000023B9 B800520000          <1>     mov eax, 5200h  
  1091 000023BE CD21                <1>     int 21h
  1092                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1093 000023C0 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1094 000023C5 CD2A                <1>     int 2Ah
  1095 000023C7 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1096 000023CB 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1097 000023D2 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1098 000023D8 C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1099 000023DB C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1100 000023DF 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1101 000023E5 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1102 000023EA CD2A                <1>     int 2Ah
  1103 000023EC C6059700000000      <1>     mov byte [.substOn], 0
  1104 000023F3 488D157D000000      <1>     lea rdx, .substDisableMsg
  1105 000023FA EB61                <1>     jmp short .substExit
  1106                              <1> .okSubst:
  1107 000023FC C60587000000FF      <1>     mov byte [.substOn], -1
  1108 00002403 B800520000          <1>     mov eax, 5200h  
  1109 00002408 CD21                <1>     int 21h
  1110 0000240A B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1111 0000240F CD2A                <1>     int 2Ah
  1112 00002411 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1113 00002415 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1114 0000241C 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1115 00002420 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1116 00002427 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1117 0000242B C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1118                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1119 00002432 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1120 00002438 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1121 0000243E 4889DF              <1>     mov rdi, rbx
  1122 00002441 488D3543000000      <1>     lea rsi, .substPath
  1123 00002448 B90C000000          <1>     mov ecx, .substPathL
  1124 0000244D F3A4                <1>     rep movsb   ;Copy chars over
  1125 0000244F B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1126 00002454 CD2A                <1>     int 2Ah
  1127 00002456 488D1508000000      <1>     lea rdx, .substEnableMsg
  1128                              <1> .substExit:
  1129 0000245D B800090000          <1>     mov eax, 0900h
  1130 00002462 CD21                <1>     int 21h
  1131                              <1>     return
    13                              <2> %%_ret:
    14 00002464 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1132 00002465 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1132 0000246E 6E61626C65640D0A24  <1>
  1133 00002477 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1133 00002480 697361626C65640D0A- <1>
  1133 00002489 24                  <1>
  1134 0000248A 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1135 0000248B 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1135 00002494 535400              <1>
  1136                              <1> .substPathL  equ $ - .substPath 
  1137                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1138                              <1> truename:
  1139 00002497 F6051CDCFFFFFF      <1>     test byte [arg1Flg], -1
  1140 0000249E 0F8432F2FFFF        <1>     jz badArgError
  1141 000024A4 E8170A0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1142 000024A9 488D35B2DFFFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1143 000024B0 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1144 000024B3 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1145 000024B8 CD21                <1>     int 21h
  1146 000024BA 730D                <1>     jnc .writePath
  1147 000024BC 3C02                <1>     cmp al, errFnf
  1148 000024BE 0F841BF2FFFF        <1>     je badFileError
  1149 000024C4 E9FBF1FFFF          <1>     jmp badParamError
  1150                              <1> .writePath:
  1151 000024C9 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1152 000024CC B9FFFFFFFF          <1>     mov ecx, -1
  1153 000024D1 30C0                <1>     xor al, al
  1154 000024D3 F2AE                <1>     repne scasb     ;Get the new len
  1155 000024D5 F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1156 000024D7 FFC9                <1>     dec ecx
  1157 000024D9 BB01000000          <1>     mov ebx, 01
  1158 000024DE B440                <1>     mov ah, 40h
  1159 000024E0 CD21                <1>     int 21h
  1160 000024E2 E887050000          <1>     call printCRLF
  1161                              <1>     return
    13                              <2> %%_ret:
    14 000024E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1162                              <1> 
  1163                              <1> label:
  1164                              <1> ;Displays/Changes/Deletes the file label
  1165 000024E8 488D1508000000      <1>     lea rdx, .l1
  1166 000024EF B800090000          <1>     mov eax, 0900h
  1167 000024F4 CD21                <1>     int 21h
  1168                              <1>     return
    13                              <2> %%_ret:
    14 000024F6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1169 000024F7 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  1169 00002500 6E20756E696D706C65- <1>
  1169 00002509 6D656E7465640D0A24  <1>
  1170                              <1> 
  1171                              <1> mklbl:
  1172                              <1>     ;lea rdx, .l1
  1173                              <1>     ;mov cx, 08h ;Make a label
  1174                              <1>     ;mov eax, 3C00h
  1175                              <1>     ;int 21h
  1176                              <1> 
  1177                              <1>     ;mov ebx, eax
  1178                              <1>     ;mov eax, 3E00h  ;Close the handle
  1179                              <1>     ;int 21h
  1180                              <1>     ;return
  1181                              <1> 
  1182                              <1> ;.l1: db "TESTLABEL",0
  1183 00002512 488D1508000000      <1>     lea rdx, .l1
  1184 00002519 B800160000          <1>     mov eax, 1600h  ;Create FCB
  1185 0000251E CD21                <1>     int 21h
  1186                              <1>     return
    13                              <2> %%_ret:
    14 00002520 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1187                              <1> .l1:
  1188                              <1>     istruc exFcb
  1189 00002521 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1190 00002522 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1191 00002528 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1192 00002529 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  1193 00002531 4C2020              <1>     at exFcb.fileext,   db "L  "
  1194 00002534 00000000            <1>     at exFcb.curBlock,  dd 0
  1195 00002538 00<rep 15h>         <1>     iend 
  1196                              <1> rmlbl:
  1197 0000254D 488D1508000000      <1>     lea rdx, .l1
  1198 00002554 B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  1199 00002559 CD21                <1>     int 21h
  1200                              <1>     return
    13                              <2> %%_ret:
    14 0000255B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1201                              <1> .l1:    ;FCB to volume label
  1202                              <1>     istruc exFcb
  1203 0000255C FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1204 0000255D 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1205 00002563 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1206 00002564 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  1207 0000256C 3F3F3F              <1>     at exFcb.fileext,   db "???"
  1208 0000256F 00000000            <1>     at exFcb.curBlock,  dd 0
  1209 00002573 00<rep 15h>         <1>     iend 
  1210                              <1> 
  1211                              <1> rnlbl:
  1212 00002588 488D1508000000      <1>     lea rdx, .l1
  1213 0000258F B800170000          <1>     mov eax, 1700h
  1214 00002594 CD21                <1>     int 21h
  1215                              <1>     return
    13                              <2> %%_ret:
    14 00002596 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1216                              <1> .l1:
  1217                              <1>     istruc exRenFcb
  1218 00002597 FF                  <1>     at exRenFcb.extSig,     db -1
  1219 00002598 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  1220 0000259E 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  1221 0000259F 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  1222 000025A7 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  1223 000025AA 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  1223 000025B3 4C414245            <1>
  1224 000025B7 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  1225 000025BA 00<rep 4h>          <1>     iend
  1226                              <1> volume:
  1227                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  1228 000025BE F605F8DAFFFFFF      <1>     test byte [arg2Flg], -1
  1229 000025C5 0F850BF1FFFF        <1>     jnz badArgError
  1230 000025CB F605E8DAFFFFFF      <1>     test byte [arg1Flg], -1
  1231 000025D2 7507                <1>     jnz .notCurrentDrive
  1232 000025D4 E86B070000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1233 000025D9 EB31                <1>     jmp short .dirEP
  1234                              <1> .notCurrentDrive:
  1235 000025DB E8E0080000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1236 000025E0 488D357BDEFFFF      <1>     lea rsi, searchSpec
  1237 000025E7 E881070000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  1238 000025EC 66AD                <1>     lodsw                   ;Get this word
  1239 000025EE 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  1240 000025F1 0F85DFF0FFFF        <1>     jne badArgError
  1241 000025F7 8A05BFDAFFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1242 000025FD A8FF                <1>     test al, -1
  1243 000025FF 0F85C8F0FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1244 00002605 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1245 0000260A FFC8                <1>     dec eax ;Convert to 0 based number
  1246                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  1247 0000260C E8A4090000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  1248 00002611 488D1562DFFFFF      <1>     lea rdx, volFcb
  1249 00002618 FFC0                <1>     inc eax ;Get 1 based drive number
  1250 0000261A 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1251 0000261C 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1252 0000261F B800110000          <1>     mov eax, 1100h ;Find first FCB
  1253 00002624 CD21                <1>     int 21h
  1254 00002626 50                  <1>     push rax
  1255                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  1256 00002627 488D15E7E1FFFF      <1>     lea rdx, crlf
  1257 0000262E B409                <1>     mov ah, 09h
  1258 00002630 CD21                <1>     int 21h
  1259 00002632 488D1561E4FFFF      <1>     lea rdx, volMes
  1260 00002639 B409                <1>     mov ah, 09h
  1261 0000263B CD21                <1>     int 21h
  1262 0000263D 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  1263 0000263F 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  1264 00002642 B402                <1>     mov ah, 02h
  1265 00002644 CD21                <1>     int 21h
  1266 00002646 58                  <1>     pop rax
  1267 00002647 84C0                <1>     test al, al ;If this is zero, the call succeeded
  1268 00002649 7409                <1>     jz .volIDOk
  1269 0000264B 488D155FE4FFFF      <1>     lea rdx, volNo
  1270 00002652 EB19                <1>     jmp short .volEndPrint
  1271                              <1> .volIDOk:
  1272 00002654 488D1551E4FFFF      <1>     lea rdx, volOk
  1273 0000265B B409                <1>     mov ah, 09h
  1274 0000265D CD21                <1>     int 21h
  1275 0000265F C6057DDAFFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  1276 00002666 488D156BDAFFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  1277                              <1> .volEndPrint:
  1278 0000266D B409                <1>     mov ah, 09h
  1279 0000266F CD21                <1>     int 21h
  1280 00002671 488D159DE1FFFF      <1>     lea rdx, crlf
  1281 00002678 B409                <1>     mov ah, 09h
  1282 0000267A CD21                <1>     int 21h
  1283                              <1>     return
    13                              <2> %%_ret:
    14 0000267C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1284                              <1> 
  1285                              <1> version:
  1286 0000267D 488D1591E1FFFF      <1>     lea rdx, crlf
  1287 00002684 B409                <1>     mov ah, 09h
  1288 00002686 CD21                <1>     int 21h
  1289 00002688 488D15F9E3FFFF      <1>     lea rdx, dosVer
  1290 0000268F B409                <1>     mov ah, 09h
  1291 00002691 CD21                <1>     int 21h
  1292 00002693 E80C000000          <1>     call .printVersionNumber
  1293 00002698 488D1576E1FFFF      <1>     lea rdx, crlf
  1294 0000269F B409                <1>     mov ah, 09h
  1295 000026A1 CD21                <1>     int 21h
  1296                              <1>     return
    13                              <2> %%_ret:
    14 000026A3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1297                              <1> .printVersionNumber:
  1298 000026A4 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1299 000026A6 CD21                <1>     int 21h
  1300 000026A8 50                  <1>     push rax
  1301 000026A9 0FB6C0              <1>     movzx eax, al
  1302 000026AC E851080000          <1>     call printDecimalWord
  1303 000026B1 B22E                <1>     mov dl, "."
  1304 000026B3 B402                <1>     mov ah, 02h
  1305 000026B5 CD21                <1>     int 21h
  1306 000026B7 58                  <1>     pop rax
  1307 000026B8 0FB6C4              <1>     movzx eax, ah
  1308 000026BB E842080000          <1>     call printDecimalWord
  1309                              <1>     return
    13                              <2> %%_ret:
    14 000026C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1310                              <1> 
  1311                              <1> 
  1312                              <1> memory:
  1313 000026C1 488B1D57D9FFFF      <1>     mov rbx, qword [sysVars]
  1314 000026C8 4885DB              <1>     test rbx, rbx
  1315 000026CB 7510                <1>     jnz .sysvarsOK
  1316 000026CD 488D1587E6FFFF      <1>     lea rdx, memBad0
  1317 000026D4 B409                <1>     mov ah, 09h
  1318 000026D6 CD21                <1>     int 21h
  1319 000026D8 E9C8080000          <1>     jmp freezePC.altEP
  1320                              <1> .sysvarsOK:
  1321                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1322                              <1>     ; and rcx to store Application memory
  1323 000026DD 31F6                <1>     xor esi, esi
  1324 000026DF 31FF                <1>     xor edi, edi
  1325 000026E1 31ED                <1>     xor ebp, ebp
  1326 000026E3 31C9                <1>     xor ecx, ecx
  1327 000026E5 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1328 000026E9 488B1B              <1>     mov rbx, qword [rbx]
  1329                              <1> .memLp:
  1330 000026EC 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1331 000026EF 7409                <1>     je .validMCB
  1332 000026F1 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1333 000026F4 0F8501010000        <1>     jne .badMCBFound
  1334                              <1> .validMCB:
  1335 000026FA 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1336 000026FD 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1337 00002701 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1338 00002709 7505                <1>     jne .notDOS
  1339 0000270B 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1340 0000270E EB21                <1>     jmp short .gotoNext
  1341                              <1> .notDOS:
  1342 00002710 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1343 00002718 7505                <1>     jne .notFree
  1344 0000271A 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1345 0000271D EB12                <1>     jmp short .gotoNext
  1346                              <1> .notFree:
  1347 0000271F 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1348 00002727 7505                <1>     jne .notHole
  1349 00002729 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1350 0000272C EB03                <1>     jmp short .gotoNext
  1351                              <1> .notHole:
  1352 0000272E 4801C1              <1>     add rcx, rax    ;Add to Application count
  1353                              <1> .gotoNext:
  1354 00002731 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1355 00002734 7407                <1>     je .endOfWalk
  1356 00002736 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1357 0000273B EBAF                <1>     jmp short .memLp
  1358                              <1> .endOfWalk:
  1359                              <1>     
  1360 0000273D 488D1578E5FFFF      <1>     lea rdx, memDOS
  1361 00002744 B409                <1>     mov ah, 09h
  1362 00002746 CD21                <1>     int 21h
  1363 00002748 4889F0              <1>     mov rax, rsi
  1364 0000274B E89D000000          <1>     call .mcbPrintAmount
  1365 00002750 488D15FDE5FFFF      <1>     lea rdx, memByte
  1366 00002757 B409                <1>     mov ah, 09h
  1367 00002759 CD21                <1>     int 21h
  1368                              <1> 
  1369 0000275B 4885ED              <1>     test rbp, rbp
  1370 0000275E 741E                <1>     jz .skipHole
  1371 00002760 488D15A1E5FFFF      <1>     lea rdx, memHole
  1372 00002767 B409                <1>     mov ah, 09h
  1373 00002769 CD21                <1>     int 21h
  1374 0000276B 4889E8              <1>     mov rax, rbp
  1375 0000276E E87A000000          <1>     call .mcbPrintAmount
  1376 00002773 488D15DAE5FFFF      <1>     lea rdx, memByte
  1377 0000277A B409                <1>     mov ah, 09h
  1378 0000277C CD21                <1>     int 21h
  1379                              <1> .skipHole:
  1380                              <1> 
  1381 0000277E 488D155DE5FFFF      <1>     lea rdx, memApp
  1382 00002785 B409                <1>     mov ah, 09h
  1383 00002787 CD21                <1>     int 21h
  1384 00002789 4889C8              <1>     mov rax, rcx
  1385 0000278C E85C000000          <1>     call .mcbPrintAmount
  1386 00002791 488D15BCE5FFFF      <1>     lea rdx, memByte
  1387 00002798 B409                <1>     mov ah, 09h
  1388 0000279A CD21                <1>     int 21h
  1389                              <1> 
  1390 0000279C 488D158BE5FFFF      <1>     lea rdx, memFree
  1391 000027A3 B409                <1>     mov ah, 09h
  1392 000027A5 CD21                <1>     int 21h
  1393 000027A7 4889F8              <1>     mov rax, rdi
  1394 000027AA E83E000000          <1>     call .mcbPrintAmount
  1395 000027AF 488D159EE5FFFF      <1>     lea rdx, memByte
  1396 000027B6 B409                <1>     mov ah, 09h
  1397 000027B8 CD21                <1>     int 21h
  1398                              <1> 
  1399 000027BA 488D15D5E4FFFF      <1>     lea rdx, memSys
  1400 000027C1 B409                <1>     mov ah, 09h
  1401 000027C3 CD21                <1>     int 21h
  1402 000027C5 4889F0              <1>     mov rax, rsi
  1403 000027C8 4801F8              <1>     add rax, rdi
  1404 000027CB 4801C8              <1>     add rax, rcx
  1405 000027CE 4801E8              <1>     add rax, rbp
  1406 000027D1 E817000000          <1>     call .mcbPrintAmount
  1407 000027D6 488D1577E5FFFF      <1>     lea rdx, memByte
  1408 000027DD B409                <1>     mov ah, 09h
  1409 000027DF CD21                <1>     int 21h
  1410                              <1> 
  1411 000027E1 488D152DE0FFFF      <1>     lea rdx, crlf
  1412 000027E8 B409                <1>     mov ah, 09h
  1413 000027EA CD21                <1>     int 21h
  1414                              <1>     return
    13                              <2> %%_ret:
    14 000027EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1415                              <1> 
  1416                              <1> .mcbPrintAmount:
  1417 000027ED 51                  <1>     push rcx
  1418 000027EE 56                  <1>     push rsi
  1419 000027EF 57                  <1>     push rdi
  1420 000027F0 55                  <1>     push rbp
  1421 000027F1 E80C070000          <1>     call printDecimalWord
  1422 000027F6 5D                  <1>     pop rbp
  1423 000027F7 5F                  <1>     pop rdi
  1424 000027F8 5E                  <1>     pop rsi
  1425 000027F9 59                  <1>     pop rcx
  1426                              <1>     return
    13                              <2> %%_ret:
    14 000027FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1427                              <1> .badMCBFound:
  1428 000027FB 488D1599E5FFFF      <1>     lea rdx, memBad2
  1429 00002802 B409                <1>     mov ah, 09h
  1430 00002804 CD21                <1>     int 21h
  1431 00002806 E99A070000          <1>     jmp freezePC.altEP
  1432                              <1> 
  1433                              <1> type:
  1434 0000280B F605A8D8FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1435 00002812 0F84BEEEFFFF        <1>     jz badArgError
  1436 00002818 F6059ED8FFFFFF      <1>     test byte [arg2Flg], -1
  1437 0000281F 0F85B1EEFFFF        <1>     jnz badArgError         ;If this set, error
  1438 00002825 4C8B05E3D7FFFF      <1>     mov r8, [pspPtr]
  1439 0000282C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1440 00002833 0FB60581D8FFFF      <1>     movzx eax, byte [arg1Off]
  1441 0000283A 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1442 0000283D 803E0D              <1>     cmp byte [rsi], CR
  1443 00002840 0F8490EEFFFF        <1>     je badArgError
  1444 00002846 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1445 0000284A 750F                <1>     jne .noDrive
  1446 0000284C 0FB60569D8FFFF      <1>     movzx eax, byte [arg1FCBret]
  1447 00002853 3CFF                <1>     cmp al, -1
  1448 00002855 0F8472EEFFFF        <1>     je badDriveError
  1449                              <1> .noDrive:
  1450                              <1>     ;Now we open the provided file
  1451 0000285B E860060000          <1>     call buildCommandPath
  1452 00002860 488D15FBDBFFFF      <1>     lea rdx, searchSpec
  1453 00002867 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1454 0000286C CD21                <1>     int 21h
  1455 0000286E 0F826BEEFFFF        <1>     jc badFileError
  1456 00002874 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1457 0000287B 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1458                              <1> .lp:
  1459 0000287E B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1460 00002883 B43F                <1>     mov ah, 3Fh ;Read handle
  1461 00002885 CD21                <1>     int 21h
  1462 00002887 89C1                <1>     mov ecx, eax
  1463 00002889 67E317              <1>     jecxz .exit
  1464 0000288C 53                  <1>     push rbx    ;Save the original in handle
  1465 0000288D BB01000000          <1>     mov ebx, 1  ;STDOUT
  1466 00002892 B440                <1>     mov ah, 40h
  1467 00002894 CD21                <1>     int 21h
  1468 00002896 5B                  <1>     pop rbx ;Get back the original read handle
  1469 00002897 720F                <1>     jc .exitBad
  1470 00002899 39C8                <1>     cmp eax, ecx
  1471 0000289B 74E1                <1>     je .lp
  1472 0000289D FFC9                <1>     dec ecx ;One less for a ^Z
  1473 0000289F 39C8                <1>     cmp eax, ecx
  1474 000028A1 7505                <1>     jne .exitBad
  1475                              <1> .exit:
  1476 000028A3 B43E                <1>     mov ah, 3Eh ;Close handle
  1477 000028A5 CD21                <1>     int 21h
  1478                              <1>     return
    13                              <2> %%_ret:
    14 000028A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1479                              <1> .exitBad:
  1480                              <1>     ;Print a disk error message... use a table to build the message but for
  1481                              <1>     ; now, just exit
  1482                              <1>     ;If it is a char device, don't print a error
  1483 000028A8 EBF9                <1>     jmp short .exit
  1484                              <1> 
  1485                              <1> exit:
  1486 000028AA F6057CD7FFFFFF      <1>     test byte [permaSwitch], -1
  1487                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000028B1 75(A7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1488 000028B3 488B055DD7FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1489 000028BA 483DFFFFFFFF        <1>     cmp rax, -1
  1490                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000028C0 74(A7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1491 000028C2 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1492                              <1> 
  1493 000028C6 488B1561D7FFFF      <1>     mov rdx, qword [parentInt22]
  1494 000028CD 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  1495 000028D1 B822250000          <1>     mov eax, 2522h
  1496 000028D6 CD21                <1>     int 21h
  1497                              <1> 
  1498 000028D8 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1499 000028DD CD21                <1>     int 21h
  1500                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 000028DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1501                              <1> 
  1502                              <1> launchChild:
  1503                              <1> ;We run EXEC on this and the child task will return via applicationReturn
  1504                              <1> ;Here we must search the CWD or all path componants before failing
  1505                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
  1506 000028E0 E8D0060000          <1>     call setDTA
  1507                              <1> 
  1508 000028E5 8B05DED7FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
  1509 000028EB 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1510 000028F0 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1511 000028F5 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
  1512 000028FA 741D                <1>     je .noExt
  1513 000028FC E824E9FFFF          <1>     call checkExtensionExec ;ZF=ZE => Executable
  1514 00002901 0F855B010000        <1>     jnz .dfltErrExit
  1515                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1516 00002907 0F8255010000        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
  1517                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1518                              <1>     ;So it is a com or exe that we are searching for for now
  1519 0000290D 488D3D8DD9FFFF      <1>     lea rdi, cmdPathSpec
  1520 00002914 4889FA              <1>     mov rdx, rdi
  1521 00002917 EB24                <1>     jmp short .search
  1522                              <1> .noExt:
  1523                              <1>     ;If the filename has no extension, append a .*
  1524                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
  1525 00002919 31DB                <1>     xor ebx, ebx
  1526 0000291B 488D3D7FD9FFFF      <1>     lea rdi, cmdPathSpec
  1527 00002922 4889FA              <1>     mov rdx, rdi
  1528 00002925 31C0                <1>     xor eax, eax
  1529 00002927 B9FFFFFFFF          <1>     mov ecx, -1
  1530 0000292C F2AE                <1>     repne scasb
  1531 0000292E 48FFCF              <1>     dec rdi ;Point to the terminating null
  1532 00002931 4889FD              <1>     mov rbp, rdi    ;Temporarily store the ptr to the . in rbp
  1533 00002934 66B82E2A            <1>     mov ax, ".*"
  1534 00002938 66AB                <1>     stosw
  1535 0000293A 30C0                <1>     xor al, al  ;Store terminating null
  1536 0000293C AA                  <1>     stosb
  1537                              <1> .search:
  1538 0000293D B906000000          <1>     mov ecx, dirIncFiles
  1539 00002942 B44E                <1>     mov ah, 4Eh ;Find First File
  1540 00002944 CD21                <1>     int 21h
  1541 00002946 0F8216010000        <1>     jc .dfltErrExit
  1542 0000294C E8C4000000          <1>     call .noExtCheckExt
  1543                              <1> .moreSearch:
  1544 00002951 B44F                <1>     mov ah, 4Fh
  1545 00002953 CD21                <1>     int 21h
  1546 00002955 7207                <1>     jc .noMoreFiles
  1547 00002957 E8B9000000          <1>     call .noExtCheckExt
  1548 0000295C EBF3                <1>     jmp short .moreSearch
  1549                              <1> .noMoreFiles:
  1550 0000295E 85DB                <1>     test ebx, ebx
  1551 00002960 0F84FC000000        <1>     jz .dfltErrExit
  1552                              <1> ;So we have a valid executable
  1553 00002966 4889EF              <1>     mov rdi, rbp    ;Get back ptr to the .*,0
  1554 00002969 F7C301000000        <1>     test ebx, 1
  1555 0000296F 7407                <1>     jz .launchexebat
  1556 00002971 B82E434F4D          <1>     mov eax, ".COM"
  1557 00002976 EB14                <1>     jmp short .buildTail
  1558                              <1> .launchexebat:
  1559 00002978 F7C302000000        <1>     test ebx, 2
  1560 0000297E 7407                <1>     jz .launchbat
  1561 00002980 B82E455845          <1>     mov eax, ".EXE"
  1562 00002985 EB05                <1>     jmp short .buildTail
  1563                              <1> .launchbat:
  1564                              <1> ;Temporary For BAT
  1565 00002987 E9D6000000          <1>     jmp .dfltErrExit
  1566                              <1> .buildTail:
  1567 0000298C AB                  <1>     stosd
  1568 0000298D 31C0                <1>     xor eax, eax
  1569 0000298F AA                  <1>     stosb   ;Store the terminating null
  1570                              <1> ;Now we build the cmdtail properly
  1571 00002990 488D3D84D7FFFF      <1>     lea rdi, cmdTail
  1572 00002997 4889FA              <1>     mov rdx, rdi    ;Use rdx as the anchor pointer for cmdline
  1573 0000299A B910000000          <1>     mov ecx, 128/8
  1574 0000299F F348AB              <1>     rep stosq   ;Clear the buffer with nulls
  1575 000029A2 488D7A01            <1>     lea rdi, qword [rdx + 1]    ;Mov rdi to start of cmdtail (not count)
  1576 000029A6 498DB080000000      <1>     lea rsi, qword [r8 + cmdLineCnt]
  1577 000029AD AC                  <1>     lodsb   ;Get into al the number of chars and move rsi to the tail proper
  1578 000029AE 88C4                <1>     mov ah, al  ;Move the number into ah
  1579 000029B0 31C9                <1>     xor ecx, ecx    ;Use ch for number of chars read, cl for chars copied
  1580                              <1>     ;Skip the parsed command name
  1581                              <1> .passName:
  1582 000029B2 AC                  <1>     lodsb   ;Get the char in al
  1583 000029B3 FEC5                <1>     inc ch
  1584 000029B5 80FD7F              <1>     cmp ch, 127     ;Exit condition (bad case)
  1585 000029B8 741D                <1>     je short .finishBuildingTailNoCR
  1586 000029BA 3C0D                <1>     cmp al, CR      ;If we get to the CR after name, no tail
  1587 000029BC 7418                <1>     je short .finishBuildingTail
  1588 000029BE 3C20                <1>     cmp al, SPC
  1589 000029C0 75F0                <1>     jne short .passName
  1590                              <1>     ;Now we copy the name 
  1591 000029C2 E8A6030000          <1>     call skipDelimiters ;Start by skipping spaces (there are no embedded tabs)
  1592                              <1>     ;rsi points to the first non-space char
  1593                              <1> .copyTail:
  1594 000029C7 AC                  <1>     lodsb
  1595 000029C8 3C0D                <1>     cmp al, CR
  1596 000029CA 740A                <1>     je short .finishBuildingTail
  1597 000029CC AA                  <1>     stosb
  1598 000029CD FEC1                <1>     inc cl
  1599 000029CF 80F97F              <1>     cmp cl, 127 ;Exit condition
  1600 000029D2 75F3                <1>     jne .copyTail
  1601 000029D4 EB01                <1>     jmp short .finishBuildingTailNoCR
  1602                              <1> .finishBuildingTail:
  1603 000029D6 AA                  <1>     stosb   ;Store the CR
  1604                              <1> .finishBuildingTailNoCR:
  1605 000029D7 880A                <1>     mov byte [rdx], cl  ;Finish by placing count 
  1606                              <1> .launch:
  1607 000029D9 488D1D1BD7FFFF      <1>     lea rbx, launchBlock
  1608 000029E0 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  1609 000029E4 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  1610 000029E7 488D052DD7FFFF      <1>     lea rax, cmdTail
  1611 000029EE 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1612 000029F2 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1613 000029F6 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1614 000029FA 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1615 000029FE 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1616 00002A02 488D1598D8FFFF      <1>     lea rdx, cmdPathSpec
  1617 00002A09 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1618 00002A0E CD21                <1>     int 21h
  1619 00002A10 E94D000000          <1>     jmp .dfltErrExit    ;If something goes wrong, error out
  1620                              <1> .noExtCheckExt:
  1621                              <1>     ;mov eax, dword [cmdFFBlock + ffBlock.asciizName + filename.fExt]
  1622 00002A15 488D35D2D6FFFF      <1>     lea rsi, dword [cmdFFBlock + ffBlock.asciizName]
  1623 00002A1C 488D3DCDD8FFFF      <1>     lea rdi, fcbCmdSpec
  1624 00002A23 E8CE030000          <1>     call asciiFilenameToFCB
  1625 00002A28 8B05CAD8FFFF        <1>     mov eax, dword [fcbCmdSpec + filename.fExt]
  1626 00002A2E 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1627 00002A33 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1628 00002A38 3D434F4D20          <1>     cmp eax, "COM "
  1629 00002A3D 7507                <1>     jne .neceexe
  1630 00002A3F 81CB01000000        <1>     or ebx, 1
  1631                              <1>     return
    13                              <2> %%_ret:
    14 00002A45 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1632                              <1> .neceexe:
  1633 00002A46 3D45584520          <1>     cmp eax, "EXE "
  1634 00002A4B 7507                <1>     jne .necebat
  1635 00002A4D 81CB02000000        <1>     or ebx, 2
  1636                              <1>     return
    13                              <2> %%_ret:
    14 00002A53 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1637                              <1> .necebat:
  1638 00002A54 3D42415420          <1>     cmp eax, "BAT "
  1639                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A59 75(53)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1640 00002A5B 81CB04000000        <1>     or ebx, 4
  1641                              <1>     return
    13                              <2> %%_ret:
    14 00002A61 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1642                              <1> 
  1643                              <1> .dfltErrExit:
  1644 00002A62 488D1509DEFFFF      <1>     lea rdx, badCmd
  1645 00002A69 B409                <1>     mov ah, 09h
  1646 00002A6B CD21                <1>     int 21h
  1647                              <1>     return
    13                              <2> %%_ret:
    14 00002A6D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printCRLF:
     4 00002A6E 488D15A0DDFFFF      <1>     lea rdx, crlf
     5                              <1> printString:
     6 00002A75 B800090000          <1>     mov eax, 0900h  ;Print string
     7 00002A7A CD21                <1>     int 21h
     8                              <1>     return
    13                              <2> %%_ret:
    14 00002A7C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> printDate:
    10                              <1> ;Input: eax = Packed Date
    11                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    12                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    13                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    14                              <1> ;       ebx = 0 => Print two digit year
    15                              <1> ;       ebx = 1 => Print four digit year
    16 00002A7D 53                  <1>     push rbx
    17 00002A7E 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    18 00002A80 803DAFD5FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    19 00002A87 7240                <1>     jb .usDate
    20 00002A89 777C                <1>     ja .jpnDate
    21                              <1> ;European: DD/MM/YY
    22 00002A8B 251F000000          <1>     and eax, 1Fh    ;Save day bits
    23 00002A90 E8B0000000          <1>     call .printFirst
    24 00002A95 8A15A6D5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    25 00002A9B B402                <1>     mov ah, 02h
    26 00002A9D CD21                <1>     int 21h
    27                              <1> 
    28 00002A9F 89C8                <1>     mov eax, ecx
    29 00002AA1 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    30 00002AA6 C1E805              <1>     shr eax, 5
    31 00002AA9 E8B3000000          <1>     call .printSecond
    32                              <1> 
    33 00002AAE 8A158DD5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    34 00002AB4 B402                <1>     mov ah, 02h
    35 00002AB6 CD21                <1>     int 21h
    36                              <1> 
    37 00002AB8 89C8                <1>     mov eax, ecx
    38 00002ABA 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    39 00002ABF C1E809              <1>     shr eax, 9
    40 00002AC2 5B                  <1>     pop rbx ;Get the year signature back
    41 00002AC3 E8A9000000          <1>     call .printYear
    42                              <1>     return
    13                              <2> %%_ret:
    14 00002AC8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    43                              <1> .usDate:
    44                              <1> ;US: MM/DD/YY
    45 00002AC9 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    46 00002ACE C1E805              <1>     shr eax, 5
    47 00002AD1 E86F000000          <1>     call .printFirst
    48                              <1> 
    49 00002AD6 8A1565D5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    50 00002ADC B402                <1>     mov ah, 02h
    51 00002ADE CD21                <1>     int 21h
    52                              <1> 
    53 00002AE0 89C8                <1>     mov eax, ecx
    54 00002AE2 251F000000          <1>     and eax, 1Fh    ;Save day bits
    55 00002AE7 E875000000          <1>     call .printSecond
    56                              <1> 
    57 00002AEC 8A154FD5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    58 00002AF2 B402                <1>     mov ah, 02h
    59 00002AF4 CD21                <1>     int 21h
    60                              <1> 
    61 00002AF6 89C8                <1>     mov eax, ecx
    62 00002AF8 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    63 00002AFD C1E809              <1>     shr eax, 9
    64 00002B00 5B                  <1>     pop rbx ;Get the year signature back
    65 00002B01 E86B000000          <1>     call .printYear
    66                              <1>     return
    13                              <2> %%_ret:
    14 00002B06 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    67                              <1> .jpnDate:
    68                              <1> ;Japan: YY/MM/DD
    69 00002B07 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    70 00002B0C C1E809              <1>     shr eax, 9
    71 00002B0F 5B                  <1>     pop rbx ;Get the year signature back
    72 00002B10 E85C000000          <1>     call .printYear
    73                              <1> 
    74 00002B15 8A1526D5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    75 00002B1B B402                <1>     mov ah, 02h
    76 00002B1D CD21                <1>     int 21h
    77                              <1> 
    78 00002B1F 89C8                <1>     mov eax, ecx
    79 00002B21 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    80 00002B26 C1E805              <1>     shr eax, 5
    81 00002B29 E833000000          <1>     call .printSecond
    82                              <1> 
    83 00002B2E 8A150DD5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    84 00002B34 B402                <1>     mov ah, 02h
    85 00002B36 CD21                <1>     int 21h
    86                              <1> 
    87 00002B38 89C8                <1>     mov eax, ecx
    88 00002B3A 251F000000          <1>     and eax, 1Fh    ;Save day bits
    89 00002B3F E81D000000          <1>     call .printSecond
    90                              <1>     return
    13                              <2> %%_ret:
    14 00002B44 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    91                              <1> 
    92                              <1> ;Each of these require eax setup correctly
    93                              <1> .printFirst:
    94 00002B45 51                  <1>     push rcx
    95 00002B46 E828040000          <1>     call getDecimalWord
    96 00002B4B 84ED                <1>     test ch, ch ;Do we have an upper digit?
    97 00002B4D 7504                <1>     jnz .skipSpace
    98 00002B4F 88CD                <1>     mov ch, cl
    99 00002B51 B120                <1>     mov cl, " "
   100                              <1> .skipSpace:
   101 00002B53 88CA                <1>     mov dl, cl
   102 00002B55 B402                <1>     mov ah, 02h
   103 00002B57 CD21                <1>     int 21h
   104 00002B59 88EA                <1>     mov dl, ch
   105 00002B5B B402                <1>     mov ah, 02h
   106 00002B5D CD21                <1>     int 21h
   107 00002B5F 59                  <1>     pop rcx
   108                              <1>     return
    13                              <2> %%_ret:
    14 00002B60 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   109                              <1> .printSecond:
   110 00002B61 51                  <1>     push rcx
   111 00002B62 E80C040000          <1>     call getDecimalWord
   112 00002B67 84ED                <1>     test ch, ch ;Do we have an upper digit?
   113 00002B69 75E8                <1>     jnz .skipSpace
   114 00002B6B 88CD                <1>     mov ch, cl
   115 00002B6D B130                <1>     mov cl, "0"
   116 00002B6F EBE2                <1>     jmp short .skipSpace
   117                              <1> .printYear:
   118 00002B71 05BC070000          <1>     add eax, 1980
   119 00002B76 51                  <1>     push rcx
   120 00002B77 53                  <1>     push rbx
   121 00002B78 E8F6030000          <1>     call getDecimalWord ;Get unpacked in rcx
   122 00002B7D 5B                  <1>     pop rbx
   123 00002B7E 84DB                <1>     test bl, bl
   124 00002B80 740C                <1>     jz .twoDigitYear
   125 00002B82 88CA                <1>     mov dl, cl  ;Print the first digit
   126 00002B84 B402                <1>     mov ah, 02h
   127 00002B86 CD21                <1>     int 21h
   128 00002B88 88EA                <1>     mov dl, ch  ;Print the second digit
   129 00002B8A B402                <1>     mov ah, 02h
   130 00002B8C CD21                <1>     int 21h
   131                              <1> .twoDigitYear:
   132 00002B8E C1E910              <1>     shr ecx, 10h    ;Get high word low
   133 00002B91 88CA                <1>     mov dl, cl  ;Print the upper digit
   134 00002B93 B402                <1>     mov ah, 02h
   135 00002B95 CD21                <1>     int 21h
   136 00002B97 88EA                <1>     mov dl, ch  ;Print the lower digit
   137 00002B99 B402                <1>     mov ah, 02h
   138 00002B9B CD21                <1>     int 21h
   139 00002B9D 59                  <1>     pop rcx
   140                              <1>     return
    13                              <2> %%_ret:
    14 00002B9E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> 
   142                              <1> 
   143                              <1> printTime:
   144                              <1> ;Input: eax = Packed Time
   145                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   146                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   147 00002B9F 89C1                <1>     mov ecx, eax
   148 00002BA1 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   149 00002BA6 C1E80B              <1>     shr eax, 11
   150 00002BA9 803D97D4FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   151 00002BB0 750B                <1>     jne .ampm
   152 00002BB2 E85A000000          <1>     call .printHours
   153 00002BB7 E831000000          <1>     call .printMinutes
   154                              <1>     return
    13                              <2> %%_ret:
    14 00002BBC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   155                              <1> .ampm:
   156 00002BBD 3D0C000000          <1>     cmp eax, 12
   157 00002BC2 7713                <1>     ja .pm
   158 00002BC4 7416                <1>     je .pm2
   159 00002BC6 E846000000          <1>     call .printHours
   160 00002BCB E81D000000          <1>     call .printMinutes
   161 00002BD0 B261                <1>     mov dl, "a"
   162 00002BD2 B402                <1>     mov ah, 02h
   163 00002BD4 CD21                <1>     int 21h
   164                              <1>     return
    13                              <2> %%_ret:
    14 00002BD6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1> .pm:
   166 00002BD7 2D0C000000          <1>     sub eax, 12
   167                              <1> .pm2:
   168 00002BDC E830000000          <1>     call .printHours
   169 00002BE1 E807000000          <1>     call .printMinutes
   170 00002BE6 B270                <1>     mov dl, "p"
   171 00002BE8 B402                <1>     mov ah, 02h
   172 00002BEA CD21                <1>     int 21h
   173                              <1>     return
    13                              <2> %%_ret:
    14 00002BEC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   174                              <1> .printMinutes:
   175 00002BED 8A1550D4FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   176 00002BF3 B402                <1>     mov ah, 02h
   177 00002BF5 CD21                <1>     int 21h
   178                              <1> 
   179 00002BF7 89C8                <1>     mov eax, ecx
   180 00002BF9 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   181 00002BFE C1E805              <1>     shr eax, 5
   182                              <1> .printMinutesAlt:
   183 00002C01 51                  <1>     push rcx
   184 00002C02 E86C030000          <1>     call getDecimalWord
   185 00002C07 84ED                <1>     test ch, ch ;Do we have an upper digit?
   186 00002C09 7514                <1>     jnz .skipSpace
   187 00002C0B 88CD                <1>     mov ch, cl
   188 00002C0D B130                <1>     mov cl, "0"
   189 00002C0F EB0E                <1>     jmp short .skipSpace
   190                              <1> .printHours:
   191 00002C11 51                  <1>     push rcx
   192 00002C12 E85C030000          <1>     call getDecimalWord
   193 00002C17 84ED                <1>     test ch, ch ;Do we have an upper digit?
   194 00002C19 7504                <1>     jnz .skipSpace
   195 00002C1B 88CD                <1>     mov ch, cl
   196 00002C1D B120                <1>     mov cl, " "
   197                              <1> .skipSpace:
   198 00002C1F 88CA                <1>     mov dl, cl
   199 00002C21 B402                <1>     mov ah, 02h
   200 00002C23 CD21                <1>     int 21h
   201 00002C25 88EA                <1>     mov dl, ch
   202 00002C27 B402                <1>     mov ah, 02h
   203 00002C29 CD21                <1>     int 21h
   204 00002C2B 59                  <1>     pop rcx
   205                              <1>     return
    13                              <2> %%_ret:
    14 00002C2C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   206                              <1> 
   207                              <1> 
   208                              <1> putVersionInPrompt:
   209 00002C2D 488D1554DEFFFF      <1>     lea rdx, dosVer
   210 00002C34 B409                <1>     mov ah, 09h ;Print String
   211 00002C36 CD21                <1>     int 21h
   212 00002C38 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   213 00002C3A CD21                <1>     int 21h
   214 00002C3C 50                  <1>     push rax    ;Save minor version
   215 00002C3D E8AD000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   216 00002C42 E8C5000000          <1>     call printPackedBCD ;Print al
   217 00002C47 B22E                <1>     mov dl, "."
   218 00002C49 B402                <1>     mov ah, 02h
   219 00002C4B CD21                <1>     int 21h
   220 00002C4D 58                  <1>     pop rax
   221 00002C4E 88E0                <1>     mov al, ah  ;Get the minor version low
   222 00002C50 E89A000000          <1>     call hexToBCD
   223 00002C55 E8B2000000          <1>     call printPackedBCD
   224                              <1>     return
    13                              <2> %%_ret:
    14 00002C5A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   225                              <1> putEscInPrompt:
   226 00002C5B B21B                <1>     mov dl, ESC
   227 00002C5D EB1D                <1>     jmp short outChar
   228                              <1> 
   229                              <1> putMoneyInPrompt:
   230 00002C5F B224                <1>     mov dl, "$"
   231 00002C61 EB19                <1>     jmp short outChar
   232                              <1> 
   233                              <1> putEquInPrompt:
   234 00002C63 B23D                <1>     mov dl, "="
   235 00002C65 EB15                <1>     jmp short outChar
   236                              <1> 
   237                              <1> putPipeInPrompt:
   238 00002C67 B27C                <1>     mov dl, "|"
   239 00002C69 EB11                <1>     jmp short outChar
   240                              <1> 
   241                              <1> putGTinPrompt:
   242 00002C6B B23E                <1>     mov dl, ">"
   243 00002C6D EB0D                <1>     jmp short outChar
   244                              <1> 
   245                              <1> putLTinPrompt:
   246 00002C6F B23C                <1>     mov dl, "<"
   247 00002C71 EB09                <1>     jmp short outChar
   248                              <1> 
   249                              <1> putDriveInPrompt:
   250 00002C73 E8CC000000          <1>     call getCurrentDrive
   251 00002C78 0441                <1>     add al, "A" ;Convert to letter
   252 00002C7A 88C2                <1>     mov dl, al
   253                              <1> outChar:
   254 00002C7C B402                <1>     mov ah, 02h ;Echo to STDOUT
   255 00002C7E CD21                <1>     int 21h
   256                              <1>     return
    13                              <2> %%_ret:
    14 00002C80 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   257                              <1> putCWDInPrompt:
   258 00002C81 E8BE000000          <1>     call getCurrentDrive
   259 00002C86 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   260 00002C88 FEC2                <1>     inc dl
   261 00002C8A 0441                <1>     add al, "A" ;Convert to letter
   262 00002C8C B43A                <1>     mov ah, ":"
   263 00002C8E 488D3DC7D3FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   264 00002C95 66AB                <1>     stosw   ;Store X:, rdi+=2
   265 00002C97 8A058ED3FFFF        <1>     mov al, byte [pathSep]
   266 00002C9D AA                  <1>     stosb   ;Store pathSep, inc rdi
   267 00002C9E B447                <1>     mov ah, 47h ;Get Current Working Directory
   268 00002CA0 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   269 00002CA3 CD21                <1>     int 21h
   270 00002CA5 721C                <1>     jc .badDrive
   271 00002CA7 E89D000000          <1>     call strlen
   272 00002CAC 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   273                              <1>     ;We use the fact that strlen counts the NULL to account for "\"
   274 00002CB2 B440                <1>     mov ah, 40h ;Write to handle
   275 00002CB4 BB01000000          <1>     mov ebx, 1  ;STDOUT
   276 00002CB9 488D159CD3FFFF      <1>     lea rdx, currDirStr
   277 00002CC0 CD21                <1>     int 21h
   278                              <1>     return
    13                              <2> %%_ret:
    14 00002CC2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   279                              <1> .badDrive:
   280                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   281 00002CC3 488D1576DEFFFF      <1>     lea rdx, badDrvMsg
   282 00002CCA E8A6FDFFFF          <1>     call printString
   283                              <1>     return
    13                              <2> %%_ret:
    14 00002CCF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   284                              <1> 
   285                              <1> BCDtoHex:
   286                              <1> ;Converts a BCD value to a Hex byte
   287                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   288 00002CD0 51                  <1>     push rcx
   289 00002CD1 0FB6C0              <1>     movzx eax, al   ;Zero extend
   290 00002CD4 89C1                <1>     mov ecx, eax    ;Save al in ecx
   291 00002CD6 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   292 00002CDB 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   293 00002CE1 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   294                              <1> .bth:
   295 00002CE4 050A000000          <1>     add eax, 10
   296 00002CE9 FFC9                <1>     dec ecx
   297 00002CEB 75F7                <1>     jnz .bth
   298 00002CED 59                  <1>     pop rcx
   299 00002CEE C3                  <1>     ret
   300                              <1> 
   301                              <1> hexToBCD:
   302                              <1> ;Converts a Hex byte into two BCD digits
   303                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   304 00002CEF 51                  <1>     push rcx
   305 00002CF0 0FB6C0              <1>     movzx eax, al   ;Zero extend
   306 00002CF3 31C9                <1>     xor ecx, ecx
   307                              <1> .htb0:
   308 00002CF5 3D0A000000          <1>     cmp eax, 10
   309 00002CFA 7209                <1>     jb .htb1
   310 00002CFC 2D0A000000          <1>     sub eax, 10
   311 00002D01 FFC1                <1>     inc ecx
   312 00002D03 EBF0                <1>     jmp short .htb0
   313                              <1> .htb1:
   314 00002D05 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   315 00002D08 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   316 00002D0A 59                  <1>     pop rcx
   317 00002D0B C3                  <1>     ret
   318                              <1> 
   319                              <1> printPackedBCD:
   320                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   321                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   322                              <1> ;Preserves all registers
   323 00002D0C 50                  <1>     push rax
   324 00002D0D 52                  <1>     push rdx
   325 00002D0E 88C4                <1>     mov ah, al
   326 00002D10 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   327 00002D12 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   328 00002D15 7508                <1>     jnz .upperNybble
   329 00002D17 B220                <1>     mov dl, " "
   330 00002D19 B402                <1>     mov ah, 02h
   331 00002D1B CD21                <1>     int 21h
   332 00002D1D EB0E                <1>     jmp short .lowerNybble
   333                              <1> .upperNybble:
   334 00002D1F 50                  <1>     push rax
   335 00002D20 C0EC04              <1>     shr ah, 4
   336 00002D23 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   337 00002D26 88E2                <1>     mov dl, ah
   338 00002D28 B402                <1>     mov ah, 02h ;Print DL
   339 00002D2A CD21                <1>     int 21h
   340 00002D2C 58                  <1>     pop rax
   341                              <1> .lowerNybble:
   342 00002D2D 0430                <1>     add al, "0"
   343 00002D2F 88C2                <1>     mov dl, al
   344 00002D31 B402                <1>     mov ah, 02h ;Print DL
   345 00002D33 CD21                <1>     int 21h
   346 00002D35 5A                  <1>     pop rdx
   347 00002D36 58                  <1>     pop rax
   348                              <1>     return
    13                              <2> %%_ret:
    14 00002D37 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   349                              <1> 
   350                              <1> setDrive:
   351                              <1> ;Input: dl = 0 based Drive number to set to
   352                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   353                              <1> ;AX trashed.
   354 00002D38 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   355 00002D3A CD21                <1>     int 21h 
   356 00002D3C E803000000          <1>     call getCurrentDrive
   357 00002D41 38D0                <1>     cmp al, dl  ;Is this the same drive?
   358                              <1>     return
    13                              <2> %%_ret:
    14 00002D43 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   359                              <1> getCurrentDrive:
   360                              <1> ;Returns the 0 based current drive in al
   361 00002D44 B419                <1>     mov ah, 19h
   362 00002D46 CD21                <1>     int 21h
   363                              <1>     return
    13                              <2> %%_ret:
    14 00002D48 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   364                              <1> 
   365                              <1> strlen:
   366                              <1> ;Gets the length of a ASCIIZ string
   367                              <1> ;Input: rdi = Source buffer
   368                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   369 00002D49 53                  <1>     push rbx
   370 00002D4A 4889E3              <1>     mov rbx, rsp
   371 00002D4D 50                  <1>     push rax    
   372 00002D4E 50                  <1>     push rax
   373 00002D4F B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS
   374 00002D54 CD2F                <1>     int 2fh
   375 00002D56 4889DC              <1>     mov rsp, rbx
   376 00002D59 5B                  <1>     pop rbx
   377                              <1>     return
    13                              <2> %%_ret:
    14 00002D5A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   378                              <1> 
   379                              <1> ucChar:
   380                              <1> ;Input: al = Char to uppercase
   381                              <1> ;Output: al = Adjusted char 
   382 00002D5B 53                  <1>     push rbx
   383 00002D5C 4889E3              <1>     mov rbx, rsp    ;Save the stack ptr
   384 00002D5F 50                  <1>     push rax    ;Push the char twice on the stack
   385 00002D60 50                  <1>     push rax
   386 00002D61 B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   387 00002D66 CD2F                <1>     int 2fh         ;Returns the processed char in al
   388 00002D68 4889DC              <1>     mov rsp, rbx    ;Return the stack ptr to where it was
   389 00002D6B 5B                  <1>     pop rbx
   390                              <1>     return
    13                              <2> %%_ret:
    14 00002D6C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   391                              <1> 
   392                              <1> skipDelimiters:
   393                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   394                              <1> ; command delimiters but a subset thereof. 
   395                              <1> ;These are the same across all codepages.
   396                              <1> ;Input: rsi must point to the start of the data string
   397                              <1> ;Output: rsi points to the first non-delimiter char
   398 00002D6D 50                  <1>     push rax
   399                              <1> .l1:
   400 00002D6E AC                  <1>     lodsb
   401 00002D6F E807000000          <1>     call isALdelimiter
   402 00002D74 74F8                <1>     jz .l1
   403                              <1> .exit:
   404 00002D76 58                  <1>     pop rax
   405 00002D77 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   406                              <1>     return
    13                              <2> %%_ret:
    14 00002D7A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   407                              <1> 
   408                              <1> isALdelimiter:
   409                              <1> ;Returns: ZF=NZ if al is not a command separator 
   410                              <1> ;         ZF=ZE if al is a command separator
   411 00002D7B 3C20                <1>     cmp al, " "
   412                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D7D 74(7A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   413 00002D7F 3C3B                <1>     cmp al, ";"
   414                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D81 74(7A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   415 00002D83 3C3D                <1>     cmp al, "="
   416                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D85 74(7A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   417 00002D87 3C2C                <1>     cmp al, ","
   418                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D89 74(7A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   419 00002D8B 3C09                <1>     cmp al, TAB
   420                              <1>     return
    13                              <2> %%_ret:
    14 00002D8D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   421                              <1> 
   422                              <1> printPrompt:
   423 00002D8E 66813D92D2FFFFFFFF  <1>     cmp word [promptPtr], -1
   424 00002D97 750B                <1>     jne .validPrompt
   425                              <1>     ;Here we print the default prompt
   426 00002D99 E8E3FEFFFF          <1>     call putCWDInPrompt
   427 00002D9E E8C8FEFFFF          <1>     call putGTinPrompt
   428                              <1>     return
    13                              <2> %%_ret:
    14 00002DA3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   429                              <1> .validPrompt:
   430                              <1>     return
    13                              <2> %%_ret:
    14 00002DA4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   431                              <1> 
   432                              <1> clearCommandState:
   433                              <1> ;Clears the command state
   434 00002DA5 488D3D08D3FFFF      <1>     lea rdi, cmdStatePtr
   435 00002DAC B90C000000          <1>     mov ecx, cmdStateL
   436 00002DB1 31C0                <1>     xor eax, eax
   437 00002DB3 F3AA                <1>     rep stosb
   438 00002DB5 C705F7D2FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   438 00002DBE FF                  <1>
   439                              <1>     return
    13                              <2> %%_ret:
    14 00002DBF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   440                              <1> 
   441                              <1> clearCommandLineState:
   442                              <1> ;Clears the command line state after a 0Dh encountered
   443 00002DC0 488D3DD8D2FFFF      <1>     lea rdi, cmdLineStatePtr
   444 00002DC7 B921000000          <1>     mov ecx, cmdLineStateL
   445 00002DCC 31C0                <1>     xor eax, eax
   446 00002DCE F3AA                <1>     rep stosb
   447 00002DD0 C705D6D2FFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   447 00002DD9 FF                  <1>
   448 00002DDA C705D2D2FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   448 00002DE3 FF                  <1>
   449                              <1>     return
    13                              <2> %%_ret:
    14 00002DE4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   450                              <1> 
   451                              <1> asciiToFCB:
   452                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   453                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   454                              <1> ;Also doesn't check if chars are valid
   455                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   456                              <1> ;Name is space padded.
   457                              <1> ;Input: rsi = ASCII string buffer
   458                              <1> ;       rdi = FCB name buffer
   459                              <1> ;Output: al = Char that terminated the source string 
   460 00002DE5 53                  <1>     push rbx    
   461 00002DE6 57                  <1>     push rdi
   462 00002DE7 B90B000000          <1>     mov ecx, 11
   463 00002DEC B020                <1>     mov al, " "
   464 00002DEE F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   465 00002DF0 5F                  <1>     pop rdi
   466 00002DF1 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   467 00002DF4 EB1D                <1>     jmp short asciiFilenameToFCB.processName
   468                              <1> asciiFilenameToFCB:
   469                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   470                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   471                              <1> ;Also doesn't check if chars are valid
   472                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   473                              <1> ;Name is space padded.
   474                              <1> ;Input: rsi = ASCII string buffer
   475                              <1> ;       rdi = FCB name buffer
   476                              <1> ;Output: al = Char that terminated the source string 
   477 00002DF6 53                  <1>     push rbx    
   478 00002DF7 57                  <1>     push rdi
   479 00002DF8 B90B000000          <1>     mov ecx, 11
   480 00002DFD B020                <1>     mov al, " "
   481 00002DFF F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   482 00002E01 5F                  <1>     pop rdi
   483 00002E02 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   484                              <1>     ;Preprocess for Dir Searches
   485 00002E05 803E2E              <1>     cmp byte [rsi], "."
   486 00002E08 7509                <1>     jne .processName
   487 00002E0A A4                  <1>     movsb   ;Store the first dot
   488 00002E0B 803E2E              <1>     cmp byte [rsi], "."
   489 00002E0E 752C                <1>     jne .exitBadChar
   490 00002E10 A4                  <1>     movsb
   491 00002E11 EB29                <1>     jmp short .exitBadChar
   492                              <1> .processName:
   493 00002E13 AC                  <1>     lodsb   ;Get the char in al
   494 00002E14 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   495 00002E16 7426                <1>     jz .exit
   496 00002E18 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   497 00002E1A 7407                <1>     je .extSpace
   498 00002E1C 3C2E                <1>     cmp al, "."
   499 00002E1E 740C                <1>     je .ext
   500 00002E20 AA                  <1>     stosb   ;Store the char
   501 00002E21 EBF0                <1>     jmp short .processName
   502                              <1> .extSpace:
   503                              <1> ;Now we scan for a period in the name
   504 00002E23 AC                  <1>     lodsb   ;Get a char and increase rsi
   505 00002E24 84C0                <1>     test al, al
   506 00002E26 7416                <1>     jz .exit
   507 00002E28 3C2E                <1>     cmp al, "."     ;If al is not a period...
   508 00002E2A 75F7                <1>     jne .extSpace   ; keep searching
   509                              <1> .ext:
   510 00002E2C 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   511                              <1> .processExt:
   512 00002E30 AC                  <1>     lodsb
   513 00002E31 84C0                <1>     test al, al
   514 00002E33 7409                <1>     jz .exit
   515 00002E35 3C20                <1>     cmp al, " "
   516 00002E37 7405                <1>     je .exit
   517 00002E39 AA                  <1>     stosb
   518 00002E3A EBF4                <1>     jmp short .processExt
   519                              <1> .exitBadChar:
   520 00002E3C 30C0                <1>     xor al, al  ;Return a null terminator
   521                              <1> .exit:
   522 00002E3E 5B                  <1>     pop rbx
   523                              <1>     return
    13                              <2> %%_ret:
    14 00002E3F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> FCBToAsciiz:
   526                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   527                              <1> ;Name is space padded too
   528                              <1> ;Input: rsi = FCB name buffer
   529                              <1> ;       rdi = ASCIIZ string buffer
   530 00002E40 B908000000          <1>     mov ecx, 8
   531 00002E45 F3A4                <1>     rep movsb   ;Move the name over
   532                              <1> .scanNameSpace:
   533 00002E47 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   534 00002E4B 750D                <1>     jne .ext
   535 00002E4D 48FFCF              <1>     dec rdi
   536 00002E50 FFC1                <1>     inc ecx
   537 00002E52 81F908000000        <1>     cmp ecx, 8
   538 00002E58 72ED                <1>     jb .scanNameSpace
   539                              <1> .ext:
   540 00002E5A 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   541 00002E5F 7506                <1>     jne .validExt
   542 00002E61 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   543 00002E65 7415                <1>     je .exit
   544                              <1> .validExt:
   545 00002E67 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   546 00002E69 AA                  <1>     stosb
   547 00002E6A B903000000          <1>     mov ecx, 3
   548 00002E6F F3A4                <1>     rep movsb   ;Move the three extension chars over
   549                              <1> .scanExtSpace:
   550 00002E71 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   551 00002E75 7505                <1>     jne .exit
   552 00002E77 48FFCF              <1>     dec rdi
   553 00002E7A EBF5                <1>     jmp short .scanExtSpace
   554                              <1> .exit:
   555 00002E7C 31C0                <1>     xor eax, eax
   556 00002E7E AA                  <1>     stosb   ;Store a null at the end
   557                              <1>     return
    13                              <2> %%_ret:
    14 00002E7F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   558                              <1>     
   559                              <1> cpDelimPathToBufz:
   560                              <1> ;Copy a delimited path into buffer and null terminate.
   561                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   562                              <1> ;       rdi -> Buffer to store null terminated path in
   563                              <1> ;Output: rsi -> First char past pathname delimiter
   564                              <1> ;       rdi -> One char past null terminator on pathname buffer
   565 00002E80 53                  <1>     push rbx
   566 00002E81 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   567                              <1> .lp:
   568 00002E84 AC                  <1>     lodsb   ;Get the char
   569 00002E85 3C0D                <1>     cmp al, CR
   570 00002E87 7412                <1>     je .gotRedirPath
   571 00002E89 E8EDFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   572 00002E8E 740B                <1>     jz .gotRedirPath 
   573 00002E90 3A0596D1FFFF        <1>     cmp al, byte [switchChar]
   574 00002E96 7403                <1>     je .gotRedirPath
   575 00002E98 AA                  <1>     stosb   ;Store this char and loop next char
   576 00002E99 EBE9                <1>     jmp short .lp
   577                              <1> .gotRedirPath:
   578 00002E9B 50                  <1>     push rax    ;Save the char on stack
   579 00002E9C 30C0                <1>     xor al, al  ;Get null terminator char
   580 00002E9E 4829FB              <1>     sub rbx, rdi
   581 00002EA1 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   582 00002EA8 7412                <1>     je .notColon
   583 00002EAA 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   584 00002EB1 7409                <1>     je .notColon
   585 00002EB3 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   586 00002EB7 7503                <1>     jne .notColon
   587 00002EB9 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   588                              <1> .notColon:
   589 00002EBC AA                  <1>     stosb   ;Store the null terminator for the redir path
   590 00002EBD 58                  <1>     pop rax ;Get back the char in al
   591 00002EBE 5B                  <1>     pop rbx
   592                              <1>     return
    13                              <2> %%_ret:
    14 00002EBF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   593                              <1> 
   594                              <1> buildCommandPath:
   595                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   596 00002EC0 0FB605F4D1FFFF      <1>     movzx eax, byte [arg1Off]
   597 00002EC7 4C8B0541D1FFFF      <1>     mov r8, [pspPtr]
   598 00002ECE 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   599 00002ED5 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   600                              <1> copyArgumentToSearchSpec:
   601                              <1> ;Copies an arbitrary delimited path pointed to by rsi into rdi and null terminates.
   602 00002ED8 66C70581D5FFFF0000  <1>     mov word [searchSpec], 0    ;Make sure we clean up search spec first!
   603 00002EE1 488D3D7AD5FFFF      <1>     lea rdi, searchSpec
   604 00002EE8 E893FFFFFF          <1>     call cpDelimPathToBufz
   605                              <1>     return
    13                              <2> %%_ret:
    14 00002EED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   606                              <1> 
   607                              <1> scanForWildcards:
   608                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   609                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   610 00002EEE 50                  <1>     push rax
   611 00002EEF 56                  <1>     push rsi
   612                              <1> .lp:
   613 00002EF0 AC                  <1>     lodsb
   614 00002EF1 3C3F                <1>     cmp al, "?"
   615 00002EF3 740A                <1>     je .exit
   616 00002EF5 3C2A                <1>     cmp al, "*"
   617 00002EF7 7406                <1>     je .exit
   618 00002EF9 84C0                <1>     test al, al
   619 00002EFB 75F3                <1>     jnz .lp
   620 00002EFD FEC0                <1>     inc al  ;This will clear the ZF
   621                              <1> .exit:
   622 00002EFF 5E                  <1>     pop rsi
   623 00002F00 58                  <1>     pop rax
   624                              <1>     return
    13                              <2> %%_ret:
    14 00002F01 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   625                              <1> 
   626                              <1> printDecimalWord:
   627                              <1> ;Takes qword in rax and print it's decimal representation
   628                              <1> ;Takes the qword in eax and prints its decimal representation
   629 00002F02 31C9                <1>     xor ecx, ecx
   630 00002F04 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   631 00002F06 85C0                <1>     test eax, eax
   632 00002F08 750C                <1>     jnz .notZero
   633 00002F0A B930000000          <1>     mov ecx, "0"
   634 00002F0F BD01000000          <1>     mov ebp, 1  ;Print one digit
   635 00002F14 EB3E                <1>     jmp short .dpfb2
   636                              <1> .notZero:
   637 00002F16 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   638 00002F18 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   639                              <1> .dpfb0:
   640 00002F1D FFC5                <1>     inc ebp
   641 00002F1F 81FD08000000        <1>     cmp ebp, 8
   642 00002F25 7206                <1>     jb .dpfb00
   643 00002F27 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   644 00002F2B EB04                <1>     jmp short .dpfb01
   645                              <1> .dpfb00:
   646 00002F2D 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   647                              <1> .dpfb01:
   648 00002F31 31D2                <1>     xor edx, edx
   649 00002F33 48F7F6              <1>     div rsi
   650 00002F36 80C230              <1>     add dl, '0'
   651 00002F39 80FA39              <1>     cmp dl, '9'
   652 00002F3C 7603                <1>     jbe .dpfb1
   653 00002F3E 80C207              <1>     add dl, 'A'-'0'-10
   654                              <1> .dpfb1:
   655 00002F41 81FD08000000        <1>     cmp ebp, 8
   656 00002F47 7204                <1>     jb .dpfb10
   657 00002F49 88D3                <1>     mov bl, dl ;Add the bottom bits
   658 00002F4B EB02                <1>     jmp short .dpfb11
   659                              <1> .dpfb10:
   660 00002F4D 88D1                <1>     mov cl, dl    ;Save remainder byte
   661                              <1> .dpfb11:
   662 00002F4F 4885C0              <1>     test rax, rax
   663 00002F52 75C9                <1>     jnz .dpfb0
   664                              <1> .dpfb2:
   665 00002F54 81FD08000000        <1>     cmp ebp, 8
   666 00002F5A 7208                <1>     jb .dpfb20
   667 00002F5C 88DA                <1>     mov dl, bl
   668 00002F5E 48C1EB08            <1>     shr rbx, 8
   669 00002F62 EB06                <1>     jmp short .dpfb21
   670                              <1> .dpfb20:
   671 00002F64 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   672 00002F66 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   673                              <1> .dpfb21:
   674 00002F6A B402                <1>     mov ah, 02h
   675 00002F6C CD21                <1>     int 21h
   676 00002F6E FFCD                <1>     dec ebp
   677 00002F70 75E2                <1>     jnz .dpfb2
   678                              <1>     return
    13                              <2> %%_ret:
    14 00002F72 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   679                              <1> 
   680                              <1> getDecimalWord:
   681                              <1> ;Works on MAX A dword in eax
   682                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   683 00002F73 31C9                <1>     xor ecx, ecx
   684 00002F75 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   685 00002F77 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   686                              <1> .dpfb0:
   687 00002F7C FFC5                <1>     inc ebp
   688 00002F7E 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   689 00002F82 31D2                <1>     xor edx, edx
   690 00002F84 48F7F3              <1>     div rbx
   691 00002F87 80C230              <1>     add dl, '0'
   692 00002F8A 80FA39              <1>     cmp dl, '9'
   693 00002F8D 7603                <1>     jbe .dpfb1
   694 00002F8F 80C207              <1>     add dl, 'A'-'0'-10
   695                              <1> .dpfb1:
   696 00002F92 88D1                <1>     mov cl, dl    ;Save remainder byte
   697 00002F94 4885C0              <1>     test rax, rax
   698 00002F97 75E3                <1>     jnz .dpfb0
   699                              <1>     return
    13                              <2> %%_ret:
    14 00002F99 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   700                              <1> 
   701                              <1> freezePC:
   702 00002F9A 488D15E0DDFFFF      <1>     lea rdx, memBad1
   703 00002FA1 B409                <1>     mov ah, 09h
   704 00002FA3 CD21                <1>     int 21h
   705                              <1> .altEP:
   706 00002FA5 488D15FEDDFFFF      <1>     lea rdx, memBad3
   707 00002FAC B409                <1>     mov ah, 09h
   708 00002FAE CD21                <1>     int 21h
   709                              <1> .lp:
   710 00002FB0 F390                <1>     pause
   711 00002FB2 F4                  <1>     hlt
   712 00002FB3 EBFB                <1>     jmp short .lp
   713                              <1> 
   714                              <1> setDTA:
   715 00002FB5 50                  <1>     push rax
   716 00002FB6 52                  <1>     push rdx
   717 00002FB7 488D1512D1FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   718 00002FBE B8001A0000          <1>     mov eax, 1A00h
   719 00002FC3 CD21                <1>     int 21h
   720 00002FC5 5A                  <1>     pop rdx
   721 00002FC6 58                  <1>     pop rax
   722                              <1>     return
    13                              <2> %%_ret:
    14 00002FC7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00002FC8 53                  <1>     push rbx
    25 00002FC9 51                  <1>     push rcx
    26 00002FCA 52                  <1>     push rdx
    27 00002FCB 57                  <1>     push rdi
    28 00002FCC 56                  <1>     push rsi
    29 00002FCD FC                  <1>     cld         ;Make String ops go forward
    30                              <1> 
    31 00002FCE 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00002FD1 488D153DD8FFFF      <1>     lea rdx, crlf
    33 00002FD8 E898FAFFFF          <1>     call printString
    34                              <1> 
    35 00002FDD 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    36 00002FE3 B90C000000          <1>     mov ecx, 0Ch
    37 00002FE8 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    38 00002FEA 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    39 00002FED 480FB7FF            <1>     movzx rdi, di
    40 00002FF1 4889FA              <1>     mov rdx, rdi    ;Copy error code
    41 00002FF4 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    42 00002FF8 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    43 00002FFB 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    44 00002FFE 488D152D010000      <1>     lea rdx, qword [.errorMsgTable]
    45 00003005 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    46 00003009 E867FAFFFF          <1>     call printString     ;Call DOS to print first part of message
    47                              <1> 
    48 0000300E 488D150E020000      <1>     lea rdx, qword [.readmsg]
    49 00003015 488D3D16020000      <1>     lea rdi, qword [.writemsg]
    50 0000301C F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    51 0000301F 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    52 00003023 E84DFAFFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
    53                              <1> 
    54 00003028 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    55 0000302B 0F85E7000000        <1>     jnz .charError
    56                              <1> ;Disk error continues here
    57 00003031 488D15E4010000      <1>     lea rdx, qword [.drive] ;Drive message
    58 00003038 E838FAFFFF          <1>     call printString
    59 0000303D 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    60 0000303F 80C241              <1>     add dl, "A" ;Add ASCII code
    61 00003042 B402                <1>     mov ah, 02h ;Print char in dl
    62 00003044 CD21                <1>     int 21h
    63                              <1> .userInput:
    64 00003046 E823FAFFFF          <1>     call printCRLF  ;Print new line
    65                              <1> ;Abort, Retry, Ignore, Fail is word order
    66                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    67                              <1> .userAbort:
    68                              <1> ;Abort is always an option
    69 0000304B 488D15EF010000      <1>     lea rdx, qword [.abortmsg]
    70 00003052 E81EFAFFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
    71                              <1> .userRetry:
    72 00003057 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    73 0000305A 7418                <1>     jz .userIgnore    ;If clear, dont print message
    74 0000305C 488D15F6010000      <1>     lea rdx, qword [.betweenMsg]
    75 00003063 E80DFAFFFF          <1>     call printString
    76 00003068 488D15DF010000      <1>     lea rdx, qword [.retrymsg]
    77 0000306F E801FAFFFF          <1>     call printString
    78                              <1> .userIgnore:
    79 00003074 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    80 00003077 7418                <1>     jz .userFail
    81 00003079 488D15D9010000      <1>     lea rdx, qword [.betweenMsg]
    82 00003080 E8F0F9FFFF          <1>     call printString
    83 00003085 488D15BB010000      <1>     lea rdx, qword [.ignoremsg]
    84 0000308C E8E4F9FFFF          <1>     call printString
    85                              <1> .userFail:
    86 00003091 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    87 00003094 7418                <1>     jz .userMsgEnd
    88 00003096 488D15BC010000      <1>     lea rdx, qword [.betweenMsg]
    89 0000309D E8D3F9FFFF          <1>     call printString
    90 000030A2 488D15AB010000      <1>     lea rdx, qword [.failmsg]
    91 000030A9 E8C7F9FFFF          <1>     call printString
    92                              <1> .userMsgEnd:
    93 000030AE 488D15A7010000      <1>     lea rdx, qword [.endMsg]
    94 000030B5 E8BBF9FFFF          <1>     call printString
    95                              <1> ;Get user input now 
    96 000030BA 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
    97 000030BC 488D3D9C010000      <1>     lea rdi, qword [.responses] ;Go to start of string
    98 000030C3 B401                <1>     mov ah, 01h ;STDIN without Console Echo
    99 000030C5 CD21                <1>     int 21h ;Get char in al
   100 000030C7 3C61                <1>     cmp al, "a" ;Chack if lowercase
   101 000030C9 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   102 000030CB 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   103                              <1> .uip1:
   104 000030CD AE                  <1>     scasb   ;Compare char to list, offset gives return code
   105 000030CE 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   106 000030D0 FFC1                <1>     inc ecx
   107 000030D2 81F904000000        <1>     cmp ecx, 4
   108 000030D8 75F3                <1>     jne .uip1
   109 000030DA E967FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   110                              <1> .validInput:
   111 000030DF E88AF9FFFF          <1>     call printCRLF   ;Note the input was accepted
   112 000030E4 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   113                              <1> ;Now check if the input is permitted
   114 000030E6 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   115 000030E8 7427                <1>     je .cehExit
   116 000030EA 84C0                <1>     test al, al ;Check if 0 => Ignore
   117 000030EC 740F                <1>     je .viIgnore
   118 000030EE 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   119 000030F0 7416                <1>     je .viRetry
   120                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   121 000030F2 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   122 000030F5 0F844BFFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   123 000030FB EB14                <1>     jmp short .cehExit
   124                              <1> .viIgnore:
   125 000030FD F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   126 00003100 0F8440FFFFFF        <1>     jz .userInput
   127 00003106 EB09                <1>     jmp short .cehExit
   128                              <1> .viRetry:
   129 00003108 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   130 0000310B 0F8435FFFFFF        <1>     jz .userInput
   131                              <1> .cehExit:
   132 00003111 5E                  <1>     pop rsi
   133 00003112 5F                  <1>     pop rdi
   134 00003113 5A                  <1>     pop rdx
   135 00003114 59                  <1>     pop rcx
   136 00003115 5B                  <1>     pop rbx
   137 00003116 48CF                <1>     iretq
   138                              <1> .charError:
   139 00003118 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   140 0000311D 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   141                              <1> .ce1:
   142 00003124 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   143 00003125 88C2                <1>     mov dl, al  ;Move char into dl
   144 00003127 B402                <1>     mov ah, 02h
   145 00003129 CD21                <1>     int 21h ;Print char
   146 0000312B E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   147 0000312D E914FFFFFF          <1>     jmp .userInput
   148                              <1> 
   149                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   150 00003132 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   150 0000313B 746563742024202020  <1>
   151 00003144 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   151 0000314D 6E6974202420202020  <1>
   152 00003156 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   152 0000315F 202420202020202020  <1>
   153 00003168 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   153 00003171 6F6D6D616E64202420  <1>
   154 0000317A 446174612024202020- <1>             db "Data $            "       ;Error 4
   154 00003183 202020202020202020  <1>
   155 0000318C 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   155 00003195 737420242020202020  <1>
   156 0000319E 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   156 000031A7 202020202020202020  <1>
   157 000031B0 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   157 000031B9 656469612024202020  <1>
   158 000031C2 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   158 000031CB 7420466F756E642024  <1>
   159 000031D4 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   159 000031DD 706572202420202020  <1>
   160 000031E6 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   160 000031EF 6C7420242020202020  <1>
   161 000031F8 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   161 00003201 742024202020202020  <1>
   162 0000320A 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   162 00003213 61696C757265202420  <1>
   163                              <1> 
   164 0000321C 64726976652024      <1> .drive      db "drive $"
   165 00003223 6572726F7220726561- <1> .readmsg    db "error reading $"
   165 0000322C 64696E672024        <1>
   166 00003232 6572726F7220777269- <1> .writemsg   db "error writing $"
   166 0000323B 74696E672024        <1>
   167 00003241 41626F727424        <1> .abortmsg   db "Abort$" 
   168 00003247 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   169 0000324E 526574727924        <1> .retrymsg   db "Retry$"
   170 00003254 4661696C24          <1> .failmsg    db "Fail$"
   171 00003259 2C2024              <1> .betweenMsg db ", $"
   172 0000325C 3F2024              <1> .endMsg     db "? $"
   173 0000325F 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   174                              <1> 
   175                              <1> int23h:
   176 00003263 F605C3CDFFFFFF      <1>     test byte [permaSwitch], -1
   177 0000326A 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   178                              <1>     ;Else, we juggle parent PSP's
   179 0000326C 50                  <1>     push rax
   180 0000326D 53                  <1>     push rbx
   181 0000326E 488B05A2CDFFFF      <1>     mov rax, qword [realParent]
   182 00003275 488B1D93CDFFFF      <1>     mov rbx, qword [pspPtr]
   183 0000327C 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   184 00003280 5B                  <1>     pop rbx
   185 00003281 58                  <1>     pop rax
   186                              <1> .exit:
   187 00003282 F9                  <1>     stc     ;Set CF to kill the task
   188 00003283 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    19                                  
    20                                  endOfAllocNoMaster: ;End of alloc if not the master cmd
    21                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:  ;Yeet this is this is a child command processor, length 168 chars!
     3                              <1> ;Note this environment DOES NOT contain the full path to the program being launched
     4 00003286 504154483D00        <1>     db "PATH=",0
     5 0000328C 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 00003294 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0
     7 0000329D 442E434F4D00        <1>
     8 000032A3 202020202020202020- <1>     db (165 - ($ - masterEnv)) dup (" ")    ;Pad the environment with spaces
     8 000032AC 202020202020202020- <1>
     8 000032B5 202020202020202020- <1>
     8 000032BE 202020202020202020- <1>
     8 000032C7 202020202020202020- <1>
     8 000032D0 202020202020202020- <1>
     8 000032D9 202020202020202020- <1>
     8 000032E2 202020202020202020- <1>
     8 000032EB 202020202020202020- <1>
     8 000032F4 202020202020202020- <1>
     8 000032FD 202020202020202020- <1>
     8 00003306 202020202020202020- <1>
     8 0000330F 202020202020202020- <1>
     8 00003318 202020202020202020- <1>
     8 00003321 202020202020202020- <1>
     8 0000332A 20                  <1>
     9 0000332B 0000                <1>     dw 0    ;End of environment marker
    22                                  endOfAlloc: ;End of alloc if the master cmd
    23                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    24                                  Segment transient align=1 follows=.data
    25                                  ;This segment always gets ejected post load
    26                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D15ED010000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    11                              <1> .okVersion:
    12                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    13 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    14 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    15 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    16 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    17                              <1> ;Setup Int 22h, Int 23h and Int 24h
    18 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    19 0000002F 488905(2E000000)    <1>     mov qword [parentInt22], rax
    20                              <1> 
    21 00000036 488D15(C82F0000)    <1>     lea rdx, critErrorHandler
    22 0000003D 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    23 00000041 B824250000          <1>     mov eax, 2524h
    24 00000046 CD21                <1>     int 21h
    25 00000048 488D15(63320000)    <1>     lea rdx, int23h
    26 0000004F 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    27 00000053 B823250000          <1>     mov eax, 2523h
    28 00000058 CD21                <1>     int 21h
    29 0000005A 488D15(480E0000)    <1>     lea rdx, applicationReturn
    30 00000061 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    31 00000065 B822250000          <1>     mov eax, 2522h
    32 0000006A CD21                <1>     int 21h
    33                              <1> ;Get a pointer to DOS Sysvars
    34 0000006C B452                <1>     mov ah, 52h ;Get sysvars
    35 0000006E CD21                <1>     int 21h
    36 00000070 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    37                              <1> ;Call for simple internationalisation data
    38 00000077 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    39 0000007C CD21                <1>     int 21h
    40 0000007E 3CFF                <1>     cmp al, -1
    41 00000080 7412                <1>     je .skipSwitch
    42 00000082 8815(2C000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    43 00000088 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    44 0000008B 7507                <1>     jne .skipSwitch
    45 0000008D C605(2B000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    46                              <1> .skipSwitch:
    47 00000094 B800380000          <1>     mov eax, 3800h  ;Get current country data
    48 00000099 488D15(36000000)    <1>     lea rdx, ctryData
    49 000000A0 CD21                <1>     int 21h ;Write the data to the internal country table
    50                              <1> ;Now determine if this is the master copy of COMMAND.COM
    51                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    52 000000A2 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    53 000000A7 CD21                <1>     int 21h
    54 000000A9 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    55 000000AC B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    56 000000B1 CD21                <1>     int 21h
    57 000000B3 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    58 000000B6 755C                <1>     jne .skipMaster
    59                              <1> ;Ok so we are master command.com
    60                              <1> ;Now make myself the real parent
    61 000000B8 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    62 000000BF 4C8905(17000000)    <1>     mov qword [realParent], r8
    63                              <1> ;Set master environment as mine
    64 000000C6 488D05(86320000)    <1>     lea rax, masterEnv
    65 000000CD 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    66                              <1> ;Set current Drive in COMSPEC
    67 000000D1 B019                <1>     mov al, 19h ;Get current Drive
    68 000000D3 CD21                <1>     int 21h
    69 000000D5 0441                <1>     add al, "A"
    70 000000D7 8805(94320000)      <1>     mov byte [masterEnv.cspec], al
    71                              <1> ;Set Int 2Eh up
    72 000000DD 488D15(87160000)    <1>     lea rdx, int2Eh
    73 000000E4 B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    74 000000E9 CD21                <1>     int 21h
    75                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    76                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    77 000000EB 488D15(15080000)    <1>     lea rdx, crlf
    78 000000F2 B409                <1>     mov ah, 09h
    79 000000F4 CD21                <1>     int 21h
    80 000000F6 E8(7E1F0000)        <1>     call time
    81 000000FB E8(B51E0000)        <1>     call date
    82 00000100 488D15(15080000)    <1>     lea rdx, crlf
    83 00000107 B409                <1>     mov ah, 09h
    84 00000109 CD21                <1>     int 21h
    85 0000010B 488D1D(2D330000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
    86 00000112 EB32                <1>     jmp short .printInit
    87                              <1> .skipMaster:
    88 00000114 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
    89 0000011B 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
    90 00000123 0FB605(2C000000)    <1>     movzx eax, byte [switchChar]
    91 0000012A F2AE                <1>     repne scasb
    92 0000012C 67E310              <1>     jecxz .noSwitches
    93 0000012F 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
    94 00000132 24DF                <1>     and al, 0DFh    ;Convert to UC
    95 00000134 3C50                <1>     cmp al, "P" ;Is it permanent switch?
    96 00000136 7507                <1>     jne .noSwitches
    97 00000138 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    98                              <1> .noSwitches:
    99 0000013F 488D1D(86320000)    <1>     lea rbx, endOfAllocNoMaster  ;This is the base address to jettison
   100                              <1> .printInit:
   101                              <1> ;Finish by printing INIT string.
   102 00000146 53                  <1>     push rbx
   103 00000147 488D153A000000      <1>     lea rdx, initString
   104 0000014E B409                <1>     mov ah, 09h
   105 00000150 CD21                <1>     int 21h ;Print init string
   106 00000152 E8(A4260000)        <1>     call version.printVersionNumber
   107 00000157 488D1560000000      <1>     lea rdx, initString2
   108 0000015E B409                <1>     mov ah, 09h
   109 00000160 CD21                <1>     int 21h ;Print init string
   110 00000162 5B                  <1>     pop rbx
   111                              <1>     ;Now we add the stack to the alloc and paragraph align
   112 00000163 4881C340060000      <1>     add rbx, stackSize
   113 0000016A 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   114 00000171 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   115 00000175 48C1E304            <1>     shl rbx, 4
   116 00000179 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   117 0000017C 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   118 00000183 E9(350E0000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   119                              <1> ;Loader Data here
   120                              <1> initString: 
   121 00000188 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   121 00000191 66696320436F6D7075- <1>
   121 0000019A 746572205265736561- <1>
   121 000001A3 726368285229205343- <1>
   121 000001AC 502F444F5328522920- <1>
   121 000001B5 56657273696F6E2024  <1>
   122                              <1> initString2:
   123 000001BE 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",CR,LF,"$"
   123 000001C7 202020284329436F70- <1>
   123 000001D0 797269676874205363- <1>
   123 000001D9 69656E746966696320- <1>
   123 000001E2 436F6D707574657220- <1>
   123 000001EB 526573656172636820- <1>
   123 000001F4 323032342E0D0A24    <1>
   124 000001FC 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   124 00000205 20444F532076657273- <1>
   124 0000020E 696F6E0D0A24        <1>
    27                                  
    28                                  stackSize equ 200*8    ;200 QWORD stack
    28          ------------------       info: assembly required 1+3+2 passes

