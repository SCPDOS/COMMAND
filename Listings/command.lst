     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  stackSize equ 200*8    ;200 QWORD stacks always
     7                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     8                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber             db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector         dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster     db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSectorsPerClusterShift db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset              dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs           db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries   dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset      dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dClusterCount           dd ?  ;Total number of clusters in data area
    27 00000013 ????????            <1>     .dFATlength              dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor        db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag             db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr             dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?  ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?  ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?  ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?  ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?  ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?  ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?  ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?  ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?  ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?  ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> struc psp
   344 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   345 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   346 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   347 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   348 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   349 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   350 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   351                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   352                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   353                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   354                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   355                              <1> ; always used and jftSize.
   356                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   357 0000002A <res 14h>           <1>     .jobFileTbl resb dfltJFTsize ;Main File handle array, JFT
   358 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   359 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   360 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   361 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   362 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   363 0000005B ??                  <1>                 db ?  ;Reserved byte
   364                              <1> ;The below are in the same place as in DOS.
   365                              <1>     .cmdLineArgPtr: ;Symbol for future use
   366 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   367 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   368                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   369 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   370 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   371                              <1> endstruc
   372                              <1> 
   373                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   374                              <1> 
   375                              <1> struc clkStruc
   376 00000000 ????                <1>     .dateWord   dw ?
   377 00000002 ??                  <1>     .minutes    db ?
   378 00000003 ??                  <1>     .hours      db ?
   379 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   380 00000005 ??                  <1>     .seconds    db ?
   381                              <1> endstruc
   382                              <1> 
   383                              <1> 
   384                              <1> struc extCtryStruc
   385 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   386 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   387 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   388 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   389 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   390                              <1>                         ;0 = month day year hh:mm:ss
   391                              <1>                         ;1 = day month year hh:mm:ss
   392                              <1>                         ;2 = year month day hh:mm:ss
   393 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   394 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   395 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   396 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   397 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   398 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   399                              <1>                         ;0 = Symbol leads, without space
   400                              <1>                         ;1 = Symbol follows, without space
   401                              <1>                         ;2 = Symbol leads, one space
   402                              <1>                         ;3 = Symbol follows, one space
   403                              <1>                         ;4 = Symbol replace decimal separator
   404 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   405 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   406 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   407 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   408 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   409                              <1> endstruc
   410                              <1> 
   411                              <1> struc countryStruc
   412 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   413                              <1>                         ;0 = month day year hh:mm:ss
   414                              <1>                         ;1 = day month year hh:mm:ss
   415                              <1>                         ;2 = year month day hh:mm:ss
   416 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   417 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   418 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   419 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   420 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   421 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   422                              <1>                         ;0 = Symbol leads, without space
   423                              <1>                         ;1 = Symbol follows, without space
   424                              <1>                         ;2 = Symbol leads, one space
   425                              <1>                         ;3 = Symbol follows, one space
   426                              <1>                         ;4 = Symbol replace decimal separator
   427 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   428 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   429 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   430 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   431 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   432                              <1> endstruc
   433                              <1> 
   434                              <1> ;Critical Error AH bitfield equates
   435                              <1> critRead    equ 0h
   436                              <1> critWrite   equ 1h
   437                              <1> critDOS     equ 0h
   438                              <1> critFAT     equ 2h
   439                              <1> critDir     equ 4h
   440                              <1> critData    equ 6h
   441                              <1> critFailOK  equ 8h
   442                              <1> critRetryOK equ 10h
   443                              <1> critIgnorOK equ 20h
   444                              <1> critCharDev equ 80h
   445                              <1> 
   446                              <1> critIgnore  equ 0
   447                              <1> critRetry   equ 1
   448                              <1> critAbort   equ 2
   449                              <1> critFail    equ 3
   450                              <1> 
   451                              <1> ;MISC ASCII control chars
   452                              <1> NUL equ 00h ;^@         | ASCII Null
   453                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   454                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   455                              <1> BEL equ 07h ;^G         | ASCII Bell
   456                              <1> BSP equ 08h ;^H         | ASCII Backspace
   457                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   458                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   459                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   460                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   461                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   462                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   463                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   464                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   465                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   466                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   467                              <1> SPC equ 20h ;Printable  | ASCII Space
   468                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   469                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   470                              <1> 
   471                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   472                              <1> ;Extended Ascii Codes
   473                              <1> eF1     equ 3Bh ;F1 second byte
   474                              <1> eF2     equ 3Ch ;F2 second byte
   475                              <1> eF3     equ 3Dh ;F3 second byte
   476                              <1> eF4     equ 3Eh ;F4 second byte
   477                              <1> eF5     equ 3Fh ;F5 second byte
   478                              <1> eF6     equ 40h ;F6 second byte
   479                              <1> eF7     equ 41h ;F7 second byte
   480                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   481                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   482                              <1> eIns    equ 52h ;Insert second byte
   483                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   484                              <1> 
   485                              <1> ;Default Configuration for the system
   486                              <1> 
   487                              <1> buffersDefault  equ 30
   488                              <1> filesDefault    equ 20
   489                              <1> fcbsDefault     equ 4
   490                              <1> safeFcbsDeflt   equ 0
   491                              <1> lastDriveDeflt  equ 5   
   492                              <1> 
   493                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   494                              <1> ; then the char has this property.
   495                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   496                              <1> termChar    equ 2   ;Terminator char type
   497                              <1> sepChar     equ 4   ;Separator char type
   498                              <1> badFCBChar  equ 8   ;FCB filename char
     9                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   db ?  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   dq ?
     8 00000009 ??????              <1>     .fileext    db 3 dup (?)
     9 0000000C ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize dw ?  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   dw ?  ;Standard date format
    14 00000016 ????                <1>     .fileTime   dw ?  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  db ?  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   db 5 dup (?)  
    28 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   db ?  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   dq ?
    31 00000010 ??????              <1>     .fileext    db 3 dup (?)
    32 00000013 ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize dw ?  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   dw ?  ;Standard date format
    37 0000001D ????                <1>     .fileTime   dw ?  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  db ?  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   db ?
    52 00000001 ????????????????    <1>     .filename   dq ?
    53 00000009 ??????              <1>     .fileext    db 3 dup (?)
    54 0000000C ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    dq ?
    57 00000019 ??????              <1>     .newExt     db 3 dup (?)
    58 0000001C ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       db 5 dup (?)  
    66 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   db ?
    68 00000008 ????????????????    <1>     .filename   dq ?
    69 00000010 ??????              <1>     .fileext    db 3 dup (?)
    70 00000013 ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    dq ?
    73 00000020 ??????              <1>     .newExt     db 3 dup (?)
    74 00000023 ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord db ?  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust dw ?  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    dw ?  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   db ?  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  dw ?  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   dw ?  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   dw ?  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    dw ?  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   dw ?  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   dw ?  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
    10                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI24     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ 1 + fileNameZL  ;1 for the count prefix
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> ;In batch, for pointers, 0 means NULL.
    25                              <1> ;FOR/CALL not priorities for implementation right now.
    26                              <1> struc batBlockHdr
    27 00000000 ??                  <1>     .zero       db ?    ;Always null
    28 00000001 ??                  <1>     .bEchoFlg   db ?    ;Echo flag on entry to batch. 1 if echo on!
    29 00000002 ????????????????    <1>     .pCallBlk   dq ?    ;Pointer to the previous batch block when CALLed
    30 0000000A ????????????????    <1>     .pForBlk    dq ?    ;Pointer to the active FOR block
    31 00000012 ??                  <1>     .bBatFlg    db ?    ;Indicates type of command currently active
    32 00000013 ????????            <1>     .dBatOffLo  dd ?    ;LSEEK Low dword of the batch offset
    33 00000017 ????????            <1>     .dBatOffHi  dd ?    ;LSEEK High dword of the batch offset (0 unless net FS)
    34 0000001B <res 14h>           <1>     .wArgs      dw 10 dup (?) ;Offsets of parameters %0-%9. -1 means no param
    35                              <1>     .cmdLine:   ;0 terminated path (%0) followed by cmd line params.
    36                              <1>     ;We include terminating CR. Add null at the end to mean end of params.
    37                              <1> endstruc
    38                              <1> bbNoParam   equ -1
    39                              <1> bbNull      equ 0
    40                              <1> bbEchoOn    equ 1
    41                              <1> bbEchoOff   equ 0
    42                              <1> bbMaxAlloc  equ batBlockHdr_size + cmdBufferL + 1 ;Add 1 for good measure :)
    43                              <1> batNoEchoChar   equ "@" ;If a line starts with this, no echo!
    44                              <1> 
    45                              <1> 
    46                              <1> 
    47                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    48 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    49 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    50 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    51 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    52 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    53                              <1> endstruc
    54                              <1> 
    55                              <1> struc execProg  ;For use with EXEC-ing a child task
    56 00000000 ????????????????    <1>     .pEnv       dq ?  ;Ptr to environment block (or 0 => copy parent env)
    57 00000008 ????????????????    <1>     .pCmdLine   dq ?  ;Ptr to the command line to be placed at PSP + 80h
    58 00000010 ????????????????    <1>     .pfcb1      dq ?  ;Ptr to the first FCB (parsed argument 1)
    59 00000018 ????????????????    <1>     .pfcb2      dq ?  ;Ptr to the second FCB  (parsed argument 2)
    60                              <1> endstruc
    61                              <1> 
    62                              <1> ;Directory attribute equates
    63                              <1>     dirReadOnly     equ 01h
    64                              <1>     dirHidden       equ 02h
    65                              <1>     dirSystem       equ 04h
    66                              <1>     dirVolumeID     equ 08h
    67                              <1>     dirDirectory    equ 10h
    68                              <1>     dirArchive      equ 20h
    69                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    70                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    71                              <1>     ;If any of the three bits are set, then ALL three bits are set
    72                              <1>     ; in addition to whatever the user passed to search for.
    73                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    74                              <1>     dirIncFiles     equ dirHidden | dirSystem
    12                                  Segment cmd align=1 valign=1
    13                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9204D0000          <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 0000000000000000    <1> int2Epsp    dq 0    ;
     8 0000001F 0000000000000000    <1> int2Ersp    dq 0    ;Save the far Int 2E entry stack pointer!
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 5C                  <1> pathSep     db "\"  ;Default path sep
    11 0000002A 2F                  <1> switchChar  db "/"  ;Default switch char
    12                              <1> ;Static strings, not used in command line parsing
    13 0000002B 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    13 00000034 000000000000000000- <1>
    13 0000003D 000000000000000000- <1>
    13 00000046 000000000000000000- <1>
    13 0000004F 0000                <1>
    14 00000051 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    14 0000005A 000000000000000000- <1>
    14 00000063 000000000000000000- <1>
    14 0000006C 000000000000000000- <1>
    14 00000075 000000000000000000- <1>
    14 0000007E 000000000000000000- <1>
    14 00000087 000000000000000000- <1>
    14 00000090 00000000            <1>
    15                              <1> ;=============================================================
    16 00000094 00                  <1> statFlg1    db 0    ;Flags 1 for the command interpreter
    17                              <1> ;=============================================================
    18                              <1> permaShell  equ 1   ;Up if we are a permanent command interpreter
    19                              <1> inCtrlC     equ 2   ;Up if we are processing int 23h
    20                              <1> inSingle    equ 4   ;Up if processing a single command (/C mode)
    21                              <1> inBatch     equ 8   ;Up if processing a batch file
    22                              <1> batchEOF    equ 10h ;Set to indicate we have reached the end of the batch file
    23                              <1> inCritical  equ 20h ;Up if processing a command.
    24                              <1> inLdrDT     equ 40h ;Up if in the Date / Time part of Loader
    25                              <1> inLdr       equ 80h ;Up if in loader
    26 00000095 FF                  <1> failDrv     db -1   ;0 based drive number. Used to identify if drv bad
    27 00000096 01                  <1> echoFlg     db 1    ;Global Echo flag, starts up! 1 means on
    28 00000097 FFFF                <1> errHdls     dw -1   ;Set to the STDIO handles. Non -1 => Handles swapped
    29                              <1> 
    30                              <1> cmdLineStatePtr:
    31 00000099 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    32 0000009A FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    33 0000009C FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    34                              <1> ;These variables are valid for a SINGLE command in a command line
    35                              <1> ;Next two bytes, if set to -1, flags error
    36 0000009E 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    37 0000009F 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    38                              <1> ;                    If 2, we are redirecting output to a file, by appending
    39 000000A0 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    40 000000A2 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    41                              <1> 
    42                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    43 000000A4 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    44 000000A5 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    45 000000A6 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    46                              <1> 
    47 000000A7 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    48 000000A8 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    49 000000A9 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    50                              <1> 
    51 000000AA 00                  <1> switchFnd   db 0    ;Set if a switch char is found
    52                              <1> cmdStateL equ $ - cmdStatePtr
    53                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    54                              <1> 
    55                              <1> ;Batch state variables. Batch changes current dir to dir of batch file!
    56 000000AB 0000000000000000    <1> bbPtr       dq 0    ;Ptr to the batch block
    57 000000B3 000000000000000000- <1> batFile     db fileSpecZL dup (0)   ;Path to bat to execute. Qual with path!
    57 000000BC 000000000000000000- <1>
    57 000000C5 000000000000000000- <1>
    57 000000CE 000000000000000000- <1>
    57 000000D7 000000000000000000- <1>
    57 000000E0 000000000000000000- <1>
    57 000000E9 000000000000000000- <1>
    57 000000F2 000000000000000000- <1>
    57 000000FB 00000000000000      <1>
    58 00000102 0201200D            <1> batYNstr    db 2,1," ",CR           ;String for buffered Y/N input
    59                              <1> ;batCallPtr  dq 0    ;Ptr to the call state block
    60                              <1> 
    61                              <1> ;Structs and strings
    62                              <1> 
    63 00000106 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    63 0000010F 00000000000000      <1>
    64 00000116 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    64 0000011F 000000000000000000- <1>
    64 00000128 000000000000000000- <1>
    64 00000131 000000000000000000- <1>
    64 0000013A 00000000000000      <1>
    65                              <1> 
    66 00000141 000000000000000000- <1> launchBlock db execProg_size dup (0)
    66 0000014A 000000000000000000- <1>
    66 00000153 000000000000000000- <1>
    66 0000015C 0000000000          <1>
    67                              <1> 
    68                              <1> ;Use the below figure for the buffer "length" (byte 0) as this will allow 
    69                              <1> ; for us to type 127 characters plus a mandatory terminating 128th <CR>. 
    70                              <1> ; This will always be ok for copying to the PSP as on the PSP we have space for
    71                              <1> ; 127 chars. If we type 128 chars with terminating <CR>, the command name must be 
    72                              <1> ; at least 1 character long. The tail is formed of the remaining chars, so there
    73                              <1> ; will be at least 127 chars left. Thus we always have enough space.
    74                              <1> inBufferL   equ 128 
    75 00000161 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Original input from user! 128 chars max! 
    75 0000016A 000000000000000000- <1>
    75 00000173 000000000000000000- <1>
    75 0000017C 000000000000000000- <1>
    75 00000185 000000000000000000- <1>
    75 0000018E 000000000000000000- <1>
    75 00000197 000000000000000000- <1>
    75 000001A0 000000000000000000- <1>
    75 000001A9 000000000000000000- <1>
    75 000001B2 000000000000000000- <1>
    75 000001BB 000000000000000000- <1>
    75 000001C4 000000000000000000- <1>
    75 000001CD 000000000000000000- <1>
    75 000001D6 000000000000000000- <1>
    75 000001DF 00000000            <1>
    76 000001E3 000000000000000000- <1> cpyBuffer   db cmdBufferL dup (0)   ;Copied input for processing
    76 000001EC 000000000000000000- <1>
    76 000001F5 000000000000000000- <1>
    76 000001FE 000000000000000000- <1>
    76 00000207 000000000000000000- <1>
    76 00000210 000000000000000000- <1>
    76 00000219 000000000000000000- <1>
    76 00000222 000000000000000000- <1>
    76 0000022B 000000000000000000- <1>
    76 00000234 000000000000000000- <1>
    76 0000023D 000000000000000000- <1>
    76 00000246 000000000000000000- <1>
    76 0000024F 000000000000000000- <1>
    76 00000258 000000000000000000- <1>
    76 00000261 00000000            <1>
    77 00000265 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)   ;Buffer with the command pipeline
    77 0000026E 000000000000000000- <1>
    77 00000277 000000000000000000- <1>
    77 00000280 000000000000000000- <1>
    77 00000289 000000000000000000- <1>
    77 00000292 000000000000000000- <1>
    77 0000029B 000000000000000000- <1>
    77 000002A4 000000000000000000- <1>
    77 000002AD 000000000000000000- <1>
    77 000002B6 000000000000000000- <1>
    77 000002BF 000000000000000000- <1>
    77 000002C8 000000000000000000- <1>
    77 000002D1 000000000000000000- <1>
    77 000002DA 000000000000000000- <1>
    77 000002E3 00000000            <1>
    78 000002E7 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)   ;Space for full path to a ext cmd
    78 000002F0 000000000000000000- <1>
    78 000002F9 000000000000000000- <1>
    78 00000302 000000000000000000- <1>
    78 0000030B 000000000000000000- <1>
    78 00000314 000000000000000000- <1>
    78 0000031D 000000000000000000- <1>
    78 00000326 000000000000000000- <1>
    78 0000032F 00000000000000      <1>
    79 00000336 000000000000000000- <1> cmdName     db cmdNameL dup (0)     ;Cmd name prefixed by length 
    79 0000033F 0000000000          <1>
    80                              <1> 
    81 00000344 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    81 0000034D 000000000000000000- <1>
    81 00000356 000000000000000000- <1>
    81 0000035F 000000000000000000- <1>
    81 00000368 000000000000000000- <1>
    81 00000371 000000000000000000- <1>
    81 0000037A 000000000000000000- <1>
    81 00000383 000000000000000000- <1>
    81 0000038C 00000000000000      <1>
    82 00000393 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    82 0000039C 000000000000000000- <1>
    82 000003A5 000000000000000000- <1>
    82 000003AE 000000000000000000- <1>
    82 000003B7 000000000000000000- <1>
    82 000003C0 000000000000000000- <1>
    82 000003C9 000000000000000000- <1>
    82 000003D2 000000000000000000- <1>
    82 000003DB 00000000000000      <1>
    83                              <1> 
    84                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    85 000003E2 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    85 000003EB 000000000000000000- <1>
    85 000003F4 000000000000000000- <1>
    85 000003FD 000000000000000000- <1>
    85 00000406 000000000000000000- <1>
    85 0000040F 000000000000000000- <1>
    85 00000418 000000000000000000- <1>
    85 00000421 000000000000000000- <1>
    85 0000042A 00000000000000      <1>
    86 00000431 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    86 0000043A 000000000000000000- <1>
    86 00000443 000000000000000000- <1>
    86 0000044C 000000000000000000- <1>
    86 00000455 000000000000000000- <1>
    86 0000045E 000000000000000000- <1>
    86 00000467 000000000000000000- <1>
    86 00000470 000000000000000000- <1>
    86 00000479 00000000000000      <1>
    87                              <1> 
    88 00000480 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    89 00000488 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    90                              <1> 
    91                              <1> ;Main scratch buffer for forming paths! Needs to be large enough to splice
    92                              <1> ; a really long invalid DOS path for PATH to work properly.
    93 00000490 000000000000000000- <1> searchSpec  db 2*cmdBufferL dup (0)   
    93 00000499 000000000000000000- <1>
    93 000004A2 000000000000000000- <1>
    93 000004AB 000000000000000000- <1>
    93 000004B4 000000000000000000- <1>
    93 000004BD 000000000000000000- <1>
    93 000004C6 000000000000000000- <1>
    93 000004CF 000000000000000000- <1>
    93 000004D8 000000000000000000- <1>
    93 000004E1 000000000000000000- <1>
    93 000004EA 000000000000000000- <1>
    93 000004F3 000000000000000000- <1>
    93 000004FC 000000000000000000- <1>
    93 00000505 000000000000000000- <1>
    93 0000050E 000000000000000000- <1>
    93 00000517 000000000000000000- <1>
    93 00000520 000000000000000000- <1>
    93 00000529 000000000000000000- <1>
    93 00000532 000000000000000000- <1>
    93 0000053B 000000000000000000- <1>
    93 00000544 000000000000000000- <1>
    93 0000054D 000000000000000000- <1>
    93 00000556 000000000000000000- <1>
    93 0000055F 000000000000000000- <1>
    93 00000568 000000000000000000- <1>
    93 00000571 000000000000000000- <1>
    93 0000057A 000000000000000000- <1>
    93 00000583 000000000000000000- <1>
    93 0000058C 0000000000000000    <1>
    94                              <1> 
    95                              <1> ;Internal Function vars
    96                              <1> ;Dir Vars
    97 00000594 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    98                              <1> ;                                   Bit[1] set => /P or /p specified
    99                              <1> ;                                   Bit[2] set => A file/path specified
   100 00000595 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
   101 00000596 00000000            <1> dirFileCtr  dd 0    ;Used in /W mode, rollover after 5
   102 0000059A 00                  <1> dirDrv      db 0    ;0 based drive number to use
   103 0000059B 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
   103 000005A4 000000000000000000- <1>
   103 000005AD 000000000000000000- <1>
   103 000005B6 000000000000000000- <1>
   103 000005BF 000000000000000000- <1>
   103 000005C8 000000000000000000- <1>
   103 000005D1 000000000000000000- <1>
   103 000005DA 000000000000000000- <1>
   103 000005E3 000000000000000000- <1>
   103 000005EC 000000000000000000- <1>
   103 000005F5 000000000000000000- <1>
   103 000005FE 000000000000000000- <1>
   103 00000607 000000000000000000- <1>
   103 00000610 000000000000000000- <1>
   103 00000619 00000000            <1>
   104 0000061D 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
   104 00000626 3F3F3F3F3F3F3F      <1>
   105                              <1> dirWideType equ 1
   106                              <1> dirPageType equ 2
   107                              <1> dirFileType equ 4
   108                              <1> ;Volume Vars
   109                              <1> volFcb:
   110                              <1>     istruc exFcb
   111 0000062D FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
   112 0000062E 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
   113 00000634 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
   114 00000635 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
   115 0000063D 3F3F3F              <1>     at exFcb.fileext,   db "???"
   116 00000640 00000000            <1>     at exFcb.curBlock,  dd 0
   117 00000644 00<rep 15h>         <1>     iend 
   118                              <1> 
   119                              <1> ;Time/Date vars
   120 00000659 00                  <1> td1 db 0    ;Minutes/Year
   121 0000065A 00                  <1> td2 db 0    ;Hours/Zero
   122 0000065B 00                  <1> td3 db 0    ;Hundredths/Day
   123 0000065C 00                  <1> td4 db 0    ;Seconds/Month
   124                              <1> 
   125                              <1> ;Rename/Copy/Delete Buffers
   126                              <1> delPath:
   127                              <1> comspecDir:    ;Used to store the directory passed during startup
   128 0000065D 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   128 00000666 000000000000000000- <1>
   128 0000066F 000000000000000000- <1>
   128 00000678 000000000000000000- <1>
   128 00000681 000000000000000000- <1>
   128 0000068A 000000000000000000- <1>
   128 00000693 000000000000000000- <1>
   128 0000069C 000000000000000000- <1>
   128 000006A5 000000000000000000- <1>
   128 000006AE 000000000000000000- <1>
   128 000006B7 000000000000000000- <1>
   128 000006C0 000000000000000000- <1>
   128 000006C9 000000000000000000- <1>
   128 000006D2 000000000000000000- <1>
   128 000006DB 00000000            <1>
   129 000006DF 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   129 000006E8 000000000000000000- <1>
   129 000006F1 000000000000000000- <1>
   129 000006FA 000000000000000000- <1>
   129 00000703 000000000000000000- <1>
   129 0000070C 000000000000000000- <1>
   129 00000715 000000000000000000- <1>
   129 0000071E 000000000000000000- <1>
   129 00000727 000000000000000000- <1>
   129 00000730 000000000000000000- <1>
   129 00000739 000000000000000000- <1>
   129 00000742 000000000000000000- <1>
   129 0000074B 000000000000000000- <1>
   129 00000754 000000000000000000- <1>
   129 0000075D 00000000            <1>
   130 00000761 0000000000000000    <1> srcPtr      dq 0    ;Where to copy pattern to in src path
   131 00000769 0000000000000000    <1> destPtr     dq 0    ;Where to copy pattern to in dest path
   132 00000771 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   132 0000077A 2020                <1>
   133                              <1> ;Copy vars
   134 0000077C 00                  <1> verifyFlg   db 0    ;Set if verify on before copy
   135 0000077D FFFF                <1> sourceHdl   dw -1
   136 0000077F FFFF                <1> destHdl     dw -1
   137 00000781 0000                <1> srcHdlInfo  dw 0    ;Save the hdl device info (bit 7 Set -> Char dev)
   138 00000783 0000000000000000    <1> cpBufPtr    dq 0    ;Ptr to the xfr arena
   139 0000078B 0000                <1> wCpBufSz    dw 0    ;Copy Buffer size, max 4096 bytes
   140 0000078D 00000000            <1> dCpCnt      dd 0    ;Number of files we have copied
   141 00000791 00                  <1> bCpFlg      db 0    ;Copy state flag
   142                              <1> 
   143                              <1> ascSrc      equ 1   ;Set if ascii copy for this source file.
   144                              <1> binSrc      equ 2   ;Set if last encountered src file flag was binary
   145                              <1> ascDes      equ 4   ;Set if add ^Z at end of file. Clear if not!
   146                              <1> wcSrc       equ 8   ;Set if wc's in source pattern. Display source file names.
   147                              <1> oneDest     equ 10h ;Single destination, not dir 
   148                              <1> mod1Cpy     equ 20h ;Set if copying files to new dir with same names
   149                              <1> mod2Cpy     equ 40h ;Set if copying files with new names
   150                              <1> mod3Cpy     equ 80h ;Set if dflt cat ASCII files to a single destination
   151                              <1> 
   152                              <1> ;Environment manipulation vars
   153 00000792 0000                <1> envVarSz        dw 0    ;Env var size
   154 00000794 0000                <1> envVarNamSz     dw 0    ;Env var "name="" length
    14                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 00000796 03444952            <1>     db 3, "DIR"
     8 0000079A 191F                <1>     dw dir - startLbl
     9                              <1> 
    10 0000079C 024344              <1>     db 2, "CD"
    11 0000079F 0924                <1>     dw chdir - startLbl
    12                              <1> 
    13 000007A1 054348444952        <1>     db 5, "CHDIR"
    14 000007A7 0924                <1>     dw chdir - startLbl
    15                              <1> 
    16 000007A9 024D44              <1>     db 2, "MD"
    17 000007AC 8424                <1>     dw mkdir - startLbl
    18                              <1> 
    19 000007AE 054D4B444952        <1>     db 5, "MKDIR"
    20 000007B4 8424                <1>     dw mkdir - startLbl
    21                              <1> 
    22 000007B6 025244              <1>     db 2, "RD"
    23 000007B9 CD24                <1>     dw rmdir - startLbl
    24                              <1> 
    25 000007BB 05524D444952        <1>     db 5, "RMDIR"
    26 000007C1 CD24                <1>     dw rmdir - startLbl
    27                              <1> 
    28 000007C3 0344454C            <1>     db 3, "DEL"
    29 000007C7 902C                <1>     dw erase - startLbl
    30                              <1> 
    31 000007C9 054552415345        <1>     db 5, "ERASE"
    32 000007CF 902C                <1>     dw erase - startLbl
    33                              <1> 
    34 000007D1 0444415445          <1>     db 4, "DATE"
    35 000007D6 D32D                <1>     dw date - startLbl
    36                              <1> 
    37 000007D8 0454494D45          <1>     db 4, "TIME"
    38 000007DD 812F                <1>     dw time - startLbl
    39                              <1> 
    40 000007DF 04434F5059          <1>     db 4, "COPY"
    41 000007E4 1725                <1>     dw copy - startLbl
    42                              <1> 
    43 000007E6 0443545459          <1>     db 4, "CTTY"
    44 000007EB AA30                <1>     dw ctty - startLbl
    45                              <1> 
    46 000007ED 03434C53            <1>     db 3, "CLS"
    47 000007F1 5131                <1>     dw cls - startLbl
    48                              <1> 
    49 000007F3 05425245414B        <1>     db 5, "BREAK"
    50 000007F9 C331                <1>     dw break - startLbl
    51                              <1> 
    52 000007FB 06564552494659      <1>     db 6, "VERIFY"
    53 00000802 4432                <1>     dw verify - startLbl
    54                              <1> 
    55 00000804 0652454E414D45      <1>     db 6, "RENAME"
    56 0000080B C132                <1>     dw rename - startLbl
    57                              <1> 
    58 0000080D 0352454E            <1>     db 3, "REN"
    59 00000811 C132                <1>     dw rename - startLbl
    60                              <1>     
    61 00000813 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 0000081C 0A37                <1>     dw truename - startLbl
    63                              <1> 
    64 0000081E 03564552            <1>     db 3, "VER"
    65 00000822 F038                <1>     dw version - startLbl
    66                              <1> 
    67 00000824 03564F4C            <1>     db 3, "VOL"
    68 00000828 3138                <1>     dw volume - startLbl
    69                              <1> 
    70 0000082A 034D454D            <1>     db 3, "MEM"
    71 0000082E 3439                <1>     dw memory - startLbl
    72                              <1> 
    73 00000830 0445584954          <1>     db 4, "EXIT"
    74 00000835 313B                <1>     dw exit - startLbl
    75                              <1> 
    76 00000837 0454595045          <1>     db 4, "TYPE"
    77 0000083C 7E3A                <1>     dw type - startLbl
    78                              <1> 
    79 0000083E 054C4142454C        <1>     db 5, "LABEL"
    80 00000844 5B37                <1>     dw label - startLbl
    81                              <1> 
    82 00000846 0450415448          <1>     db 4, "PATH"
    83 0000084B 7E3E                <1>     dw pathEdit - startLbl
    84                              <1> 
    85 0000084D 03534554            <1>     db 3, "SET"
    86 00000851 5F3D                <1>     dw set - startLbl
    87                              <1> 
    88 00000853 0650524F4D5054      <1>     db 6, "PROMPT"
    89 0000085A 5D3F                <1>     dw prompt - startLbl
    90                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    91 0000085C 054D4B4C424C        <1>     db 5, "MKLBL"
    92 00000862 8537                <1>     dw mklbl - startLbl
    93                              <1> 
    94 00000864 05524D4C424C        <1>     db 5, "RMLBL"
    95 0000086A C037                <1>     dw rmlbl - startLbl
    96                              <1> 
    97 0000086C 05524E4C424C        <1>     db 5, "RNLBL"
    98 00000872 FB37                <1>     dw rnlbl - startLbl
    99                              <1> 
   100 00000874 05544F554348        <1>     db 5, "TOUCH"
   101 0000087A FD34                <1>     dw touch - startLbl
   102                              <1> 
   103 0000087C 044A4F494E          <1>     db 4, "JOIN"
   104 00000881 6035                <1>     dw join - startLbl
   105                              <1> 
   106 00000883 055355425354        <1>     db 5, "SUBST"
   107 00000889 2336                <1>     dw subst - startLbl
   108                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   109                              <1> 
   110                              <1> ;BATCH ORIENTED COMMANDS HERE
   111 0000088B 044543484F          <1>     db 4, "ECHO"
   112 00000890 CD3F                <1>     dw echo - startLbl
   113                              <1> 
   114 00000892 055041555345        <1>     db 5, "PAUSE"
   115 00000898 A940                <1>     dw pauza - startLbl
   116                              <1> 
   117 0000089A 0352454D            <1>     db 3, "REM"
   118 0000089E F240                <1>     dw remark - startLbl
   119 000008A0 FF                  <1>     db -1   ;End of table
    15                                  %include "./Data/cmdStr.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 000008A1 0D0A24              <1> crlf    db  CR,LF,"$"
     3 000008A4 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 000008A9 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 000008B2 696C65206D69737369- <1>
     4 000008BB 6E670D0A24          <1>
     5 000008C0 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 000008C9 6469736B2077697468- <1>
     5 000008D2 206261746368206669- <1>
     5 000008DB 6C65                <1>
     6 000008DD 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 000008E6 737320616E79206B65- <1>
     6 000008EF 79207768656E207265- <1>
     6 000008F8 6164790D0A24        <1>
     7 000008FE 0D0A5465726D696E61- <1> batFail db  CR,LF,"Terminate batch job (Y/N)? $"
     7 00000907 746520626174636820- <1>
     7 00000910 6A6F622028592F4E29- <1>
     7 00000919 3F2024              <1>
     8 0000091C 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     8 00000925 6E64206F722066696C- <1>
     8 0000092E 65206E616D650D0A24  <1>
     9 00000937 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     9 00000940 2066696C65206E616D- <1>
     9 00000949 65206F7220          <1>
    10 0000094E 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    10 00000957 666F756E640D0A24    <1>
    11 0000095F 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full.
    11 00000968 656E74206469736B20- <1>
    11 00000971 73706163650D0A24    <1>
    12 00000979 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    12 00000982 7669726F6E6D656E74- <1>
    12 0000098B 2073706163650D0A24  <1>
    13 00000994 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    13 0000099D 74696F6E206572726F- <1>
    13 000009A6 720D0A24            <1>
    14 000009AA 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    14 000009B3 6F7420626520636F70- <1>
    14 000009BC 696564206F6E746F20- <1>
    14 000009C5 697473656C660D0A24  <1>
    15 000009CE 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    15 000009D7 662064657374696E61- <1>
    15 000009E0 74696F6E206C6F7374- <1>
    15 000009E9 206265666F72652063- <1>
    15 000009F2 6F70790D0A24        <1>
    16                              <1> ;Copy end message. First write # files copied then this message 
    17 000009F8 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    17 00000A01 636F706965640D0A24  <1>
    18 00000A0A 4E6F7420656E6F7567- <1> cpNoMem db  "Not enough memory for COPY",CR,LF,"$"      ;Never should happen
    18 00000A13 68206D656D6F727920- <1>
    18 00000A1C 666F7220434F50590D- <1>
    18 00000A25 0A24                <1>
    19                              <1> ;Dir end1 msg. First write # files in dir then this
    20 00000A27 2046696C6528732920- <1> dirOk   db  " File(s) $"
    20 00000A30 24                  <1>
    21                              <1> ;Dir end2 msg. First write # bytes free then this message
    22 00000A31 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    22 00000A3A 65650D0A24          <1>
    23 00000A3F 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    24                              <1> 
    25 00000A48 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    25 00000A51 726976652073706563- <1>
    25 00000A5A 696669636174696F6E- <1>
    25 00000A63 0D0A24              <1>
    26 00000A66 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    26 00000A6F 6B6579207768656E20- <1>
    26 00000A78 7265616479202E202E- <1>
    26 00000A81 202E2024            <1>
    27 00000A85 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    27 00000A8E 6172616D657465720D- <1>
    27 00000A97 0A24                <1>
    28                              <1> 
    29 00000A99 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    29 00000AA2 576564546875467269- <1>
    29 00000AAB 536174              <1>
    30 00000AAE 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    30 00000AB7 206461746524        <1>
    31 00000ABD 43757272656E742064- <1> curDate db  "Current date is $"
    31 00000AC6 6174652069732024    <1>
    32 00000ACE 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    32 00000AD7 657720646174652024  <1>
    33 00000AE0 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    33 00000AE9 293A2024            <1>
    34 00000AED 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    34 00000AF6 293A2024            <1>
    35 00000AFA 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    35 00000B03 293A2024            <1>
    36 00000B07 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    36 00000B10 2074696D6524        <1>
    37 00000B16 43757272656E742074- <1> curTime db  "Current time is $"
    37 00000B1F 696D652069732024    <1>
    38 00000B27 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    38 00000B30 65772074696D653A20- <1>
    38 00000B39 24                  <1>
    39                              <1> 
    40 00000B3A 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    40 00000B43 7572652028592F4E29- <1>
    40 00000B4C 3F2024              <1>
    41                              <1> 
    42 00000B4F 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    42 00000B58 56657273696F6E2024  <1>
    43                              <1> 
    44 00000B61 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    44 00000B6A 6E2064726976652024  <1>
    45 00000B73 2069732024          <1> volOk   db " is $"
    46 00000B78 20686173206E6F206C- <1> volNo   db " has no label$"
    46 00000B81 6162656C24          <1>
    47                              <1> 
    48 00000B86 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    48 00000B8F 69726563746F72790D- <1>
    48 00000B98 0A24                <1>
    49 00000B9A 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    49 00000BA3 206372656174652064- <1>
    49 00000BAC 69726563746F72790D- <1>
    49 00000BB5 0A24                <1>
    50 00000BB7 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    50 00000BC0 6174682C206E6F7420- <1>
    50 00000BC9 6469726563746F7279- <1>
    50 00000BD2 2C0D0A              <1>
    51 00000BD5 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    51 00000BDE 6F7279206E6F742065- <1>
    51 00000BE7 6D7074790D0A24      <1>
    52 00000BEE 204469726563746F72- <1> dirMain db " Directory of  $"
    52 00000BF7 79206F66202024      <1>
    53 00000BFE 4E6F20506174682024  <1> noPath  db "No Path $"
    54 00000C07 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    54 00000C10 6E6965640D0A24      <1>
    55 00000C17 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    55 00000C20 72697665206973206E- <1>
    55 00000C29 6F206C6F6E67657220- <1>
    55 00000C32 76616C696424        <1>
    56                              <1> ;badDrvSrch  db "Invalid drive in search path",CR,LF,"$"        ;MAY REMOVE
    57 00000C38 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    57 00000C41 65766963650D0A24    <1>
    58 00000C49 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    58 00000C52 20666F756E640D0A24  <1>
    59 00000C5B 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    59 00000C64 726F720D0A24        <1>
    60 00000C6A 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    60 00000C73 6F74206265206E6573- <1>
    60 00000C7C 7465640D0A24        <1>
    61 00000C82 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    61 00000C8B 6174652066696C6520- <1>
    61 00000C94 6572726F7220647572- <1>
    61 00000C9D 696E6720706970650D- <1>
    61 00000CA6 0A24                <1>
    62 00000CA8 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    62 00000CB1 2062696E6172792072- <1>
    62 00000CBA 656164732066726F6D- <1>
    62 00000CC3 206120646576696365- <1>
    62 00000CCC 0D0A24              <1>
    63 00000CCF 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    64 00000CD5 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    65 00000CDA 425245414B20697320- <1> breakIs db "BREAK is $"
    65 00000CE3 24                  <1>
    66 00000CE4 564552494659206973- <1> verifyIs    db "VERIFY is $"
    66 00000CED 2024                <1>
    67 00000CEF 4543484F2069732024  <1> echoIs  db "ECHO is $"  
    68 00000CF8 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    68 00000D01 617468206F72206669- <1>
    68 00000D0A 6C65206E616D650D0A- <1>
    68 00000D13 24                  <1>
    69 00000D14 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    69 00000D1D 756D626572206F6620- <1>
    69 00000D26 706172616D65746572- <1>
    69 00000D2F 730D0A24            <1>
    70 00000D33 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    70 00000D3C 74696E6720746F2064- <1>
    70 00000D45 6576696365          <1>
    71 00000D4A 08200800            <1> backSpace   db BSP," ",BSP,NUL
    72 00000D4E 50726F6772616D2074- <1> noMemMsg  db "Program too big to fit in memory",CR,LF,"$"
    72 00000D57 6F6F2062696720746F- <1>
    72 00000D60 2066697420696E206D- <1>
    72 00000D69 656D6F72790D0A24    <1>
    73                              <1> 
    74                              <1> 
    75 00000D71 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    75 00000D7A 20202020202020546F- <1>
    75 00000D83 74616C207379737465- <1>
    75 00000D8C 6D206D656D6F72793A- <1>
    75 00000D95 2024                <1>
    76 00000D97 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    76 00000DA0 20202020202020204D- <1>
    76 00000DA9 656D6F727920757365- <1>
    76 00000DB2 6420627920444F533A- <1>
    76 00000DBB 2024                <1>
    77 00000DBD 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    77 00000DC6 656D6F727920757365- <1>
    77 00000DCF 64206279206170706C- <1>
    77 00000DD8 69636174696F6E733A- <1>
    77 00000DE1 2024                <1>
    78 00000DE3 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    78 00000DEC 656D6F727920726573- <1>
    78 00000DF5 657276656420627920- <1>
    78 00000DFE 68617264776172653A- <1>
    78 00000E07 2024                <1>
    79 00000E09 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    79 00000E12 202020202020202020- <1>
    79 00000E1B 2020202020204D656D- <1>
    79 00000E24 6F727920667265653A- <1>
    79 00000E2D 2024                <1>
    80 00000E2F 20627974657324      <1> memByte db " bytes$"
    81 00000E36 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    81 00000E3F 6F7420417373657274- <1>
    81 00000E48 61696E20444F532045- <1>
    81 00000E51 6E74727920506F696E- <1>
    81 00000E5A 7424                <1>
    82 00000E5C 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    82 00000E65 416C6C6F636174696F- <1>
    82 00000E6E 6E204572726F7224    <1>
    83 00000E76 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    83 00000E7F 4572726F7224        <1>
    84 00000E85 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    84 00000E8E 68616C74656424      <1>
    85                              <1> 
    86 00000E95 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    86 00000E9E 206372656174652070- <1>
    86 00000EA7 6970650D0A          <1>
    87                              <1> pipeErrMsgL equ $ - pipeErrMsg
    88 00000EAC 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    88 00000EB5 6F6E206572726F720D- <1>
    88 00000EBE 0A                  <1>
    89                              <1> redirErrMsgL   equ $ - redirErrMsg
    90                              <1> 
    91 00000EBF 1B5B324A            <1> ansiCls  db ESC,"[2J" ;ANSI CLS sequence, 4 chars long
    92 00000EC3 2020202024          <1> fourSpc  db "    $"
    93 00000EC8 20202024            <1> threeSpc db "   $"
    94 00000ECC 202024              <1> twoSpc   db "  $"
    95                              <1> 
    96 00000ECF 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    96 00000ED8 696679204F4E206F72- <1>
    96 00000EE1 204F46460D0A24      <1>
    97                              <1> 
    98 00000EE8 50524F4D50543D0D    <1> promptEVar  db "PROMPT=",CR     ;Must be CR terminated!
    99 00000EF0 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
   100                              <1> ;If anything goes wrong with piping or redirecting just close first two 
   101                              <1> ; handles and reopen this device. Defaults to CON
   102 00000EF9 434F4E000000000000  <1> devName db "CON", 6 dup (0) ;8 chars + space for null terminator
   103 00000F02 5F3A5C4155544F4558- <1> autoSpec    db "_:\AUTOEXEC.BAT",0
   103 00000F0B 45432E42415400      <1>
   104                              <1> autoSpecL equ $ - autoSpec
   105 00000F12 504154483D00        <1> pathEVar    db "PATH=",0
   106 00000F18 434F4D535045433D00  <1> comspecEVar db "COMSPEC=",0
   107 00000F21 434F4D4D414E442E43- <1> cspec   db "COMMAND.COM", 0
   107 00000F2A 4F4D00              <1>
   108                              <1> 
   109                              <1> ;Int 24h strings
   110                              <1> errMsgPtrTbl:
   111 00000F2D 2400                <1>     dw errorMsgTbl.0 - errMsgPtrTbl
   112 00000F2F 3400                <1>     dw errorMsgTbl.1 - errMsgPtrTbl
   113 00000F31 4200                <1>     dw errorMsgTbl.2 - errMsgPtrTbl
   114 00000F33 4D00                <1>     dw errorMsgTbl.3 - errMsgPtrTbl
   115 00000F35 5E00                <1>     dw errorMsgTbl.4 - errMsgPtrTbl
   116 00000F37 6400                <1>     dw errorMsgTbl.5 - errMsgPtrTbl
   117 00000F39 7100                <1>     dw errorMsgTbl.6 - errMsgPtrTbl
   118 00000F3B 7700                <1>     dw errorMsgTbl.7 - errMsgPtrTbl
   119 00000F3D 8600                <1>     dw errorMsgTbl.8 - errMsgPtrTbl
   120 00000F3F 9800                <1>     dw errorMsgTbl.9 - errMsgPtrTbl
   121 00000F41 A600                <1>     dw errorMsgTbl.A - errMsgPtrTbl
   122 00000F43 B300                <1>     dw errorMsgTbl.B - errMsgPtrTbl
   123 00000F45 BF00                <1>     dw errorMsgTbl.C - errMsgPtrTbl
   124 00000F47 D000                <1>     dw errorMsgTbl.D - errMsgPtrTbl
   125 00000F49 E300                <1>     dw errorMsgTbl.E - errMsgPtrTbl
   126 00000F4B F300                <1>     dw errorMsgTbl.F - errMsgPtrTbl
   127 00000F4D 1401                <1>     dw errorMsgTbl.10 - errMsgPtrTbl
   128 00000F4F 2501                <1>     dw errorMsgTbl.11 - errMsgPtrTbl
   129                              <1> errorMsgTbl:
   130 00000F51 57726974652050726F- <1> .0: db "Write Proctect $"       ;Driver Error 0 / DOS Error 013h
   130 00000F5A 63746563742024      <1>
   131 00000F61 556E6B6E6F776E2055- <1> .1: db "Unknown Unit $"         ;Driver Error 1 / DOS Error 014h
   131 00000F6A 6E69742024          <1>
   132 00000F6F 4E6F74205265616479- <1> .2: db "Not Ready $"            ;Driver Error 2 / DOS Error 015h
   132 00000F78 2024                <1>
   133 00000F7A 556E6B6E6F776E2043- <1> .3: db "Unknown Command $"      ;Driver Error 3 / DOS Error 016h
   133 00000F83 6F6D6D616E642024    <1>
   134 00000F8B 446174612024        <1> .4: db "Data $"                 ;Driver Error 4 / DOS Error 017h
   135 00000F91 426164205265717565- <1> .5: db "Bad Request $"          ;Driver Error 5 / DOS Error 018h
   135 00000F9A 73742024            <1>
   136 00000F9E 5365656B2024        <1> .6: db "Seek $"                 ;Driver Error 6 / DOS Error 019h
   137 00000FA4 556E6B6E6F776E204D- <1> .7: db "Unknown Media $"        ;Driver Error 7 / DOS Error 01Ah
   137 00000FAD 656469612024        <1>
   138 00000FB3 536563746F72204E6F- <1> .8: db "Sector Not Found $"     ;Driver Error 8 / DOS Error 01Bh
   138 00000FBC 7420466F756E642024  <1>
   139 00000FC5 4F7574204F66205061- <1> .9: db "Out Of Paper $"         ;Driver Error 9 / DOS Error 01Ch
   139 00000FCE 7065722024          <1>
   140 00000FD3 577269746520466175- <1> .A: db "Write Fault $"          ;Driver Error A / DOS Error 01Dh
   140 00000FDC 6C742024            <1>
   141 00000FE0 52656164204661756C- <1> .B: db "Read Fault $"           ;Driver Error B / DOS Error 01Eh
   141 00000FE9 742024              <1>
   142 00000FEC 47656E6572616C2046- <1> .C: db "General Failure $"      ;Driver Error C / DOS Error 01Fh
   142 00000FF5 61696C7572652024    <1>
   143 00000FFD 53686172696E672076- <1> .D: db "Sharing violation $"    ;SHARE Error / DOS Error 020h
   143 00001006 696F6C6174696F6E20- <1>
   143 0000100F 24                  <1>
   144 00001010 4C6F636B2076696F6C- <1> .E: db "Lock violation $"       ;SHARE Error / DOS Error 021h
   144 00001019 6174696F6E2024      <1>
   145 00001020 506C6561736520496E- <1> .F: db "Please Insert disk "    ;Driver Error F / DOS Error 022h
   145 00001029 73657274206469736B- <1>
   145 00001032 20                  <1>
   146 00001033 202020202020202020- <1> .FVol:  db 11 dup (" ")         ; Volume name for disk. Setup before print
   146 0000103C 2020                <1>
   147 0000103E 0D0A24              <1>         db CR,LF,"$"
   148                              <1> ;Next two strings dont print any more information, such as reading/writing etc
   149 00001041 46434220756E617661- <1> .10:    db "FCB unavailable $"      ;FCB Error / DOS Error 023h - RESERVED
   149 0000104A 696C61626C652024    <1>
   150 00001052 53686172696E672062- <1> .11:    db "Sharing buffer error $" ;SHARE Error / Error 024h
   150 0000105B 756666657220657272- <1>
   150 00001064 6F722024            <1>
   151                              <1> 
   152                              <1> ;Anything above this is a generic network error.
   153 00001068 47656E6572616C204E- <1> genNetErr   db "General Network Error $"    ;All NET errors codes [32h, 58h]
   153 00001071 6574776F726B204572- <1>
   153 0000107A 726F722024          <1>
   154                              <1> 
   155                              <1> ;Rest of the Int 24h error messages go here
   156 0000107F 64726976652024      <1> drvMsg      db "drive $"
   157 00001086 6572726F7220726561- <1> readMsg     db "error reading $"
   157 0000108F 64696E672024        <1>
   158 00001095 6572726F7220777269- <1> writeMsg    db "error writing $"
   158 0000109E 74696E672024        <1>
   159 000010A4 41626F727424        <1> abortMsg    db "Abort$" 
   160 000010AA 49676E6F726524      <1> ignoreMsg   db "Ignore$"
   161 000010B1 526574727924        <1> retryMsg    db "Retry$"
   162 000010B7 4661696C24          <1> failMsg     db "Fail$"
   163 000010BC 2C2024              <1> betweenMsg  db ", $"
   164 000010BF 3F2024              <1> endMsg      db "? $"
   165 000010C2 49524146            <1> i24Resp     db "IRAF"   ;Abort Retry Ignore Fail
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1> ;Jumped to with edx=0 means no autoexec. edx=-1 means autoexec.
     3                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     4                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     5                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     6 000010C6 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     7 000010C9 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     8 000010CD C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     9 000010D0 B44A                <1>     mov ah, 4Ah ;Realloc
    10 000010D2 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    11 000010D5 CD21                <1>     int 21h
    12 000010D7 85D2                <1>     test edx, edx   ;If zero, no autoexec or single command
    13 000010D9 7432                <1>     jz commandMain
    14 000010DB E8E4090000          <1>     call getSetMainState    ;Ensure the buffers are ready to be used 
    15                              <1> ;If inSingle is set, cmd already in buffer and ready for processing  
    16 000010E0 F605ADEFFFFF04      <1>     test byte [statFlg1], inSingle
    17 000010E7 0F8584000000        <1>     jnz commandMain.goSingle 
    18                              <1>     ;Only enter here if we are autoexec :)
    19 000010ED C6056EF0FFFF0F      <1>     mov byte [inBuffer + 1], autoSpecL - 1  ;Drop one from the count for CR
    20 000010F4 488D3507FEFFFF      <1>     lea rsi, autoSpec
    21 000010FB 488D3D61F0FFFF      <1>     lea rdi, inBuffer + 2
    22 00001102 E849340000          <1>     call strcpy
    23 00001107 C647FF0D            <1>     mov byte [rdi - 1], CR  ;Store a CR over the terminating null
    24 0000110B EB56                <1>     jmp short commandMain.batProceed
    25                              <1> commandMain:
    26 0000110D 488B25F1EEFFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    27 00001114 E8AB090000          <1>     call getSetMainState
    28                              <1> .inputMain:         ;Only reset once per line!
    29 00001119 F60574EFFFFF04      <1>     test byte [statFlg1], inSingle   ;If we here in single mode, time to exit
    30 00001120 0F850B2A0000        <1>     jnz exit
    31 00001126 E811320000          <1>     call printCRLF  ;Command complete, indicate with new line!
    32 0000112B B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    33 00001130 CD21                <1>     int 21h
    34 00001132 B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    35 00001137 BA01000000          <1>     mov edx, 1      ;Start new print job
    36 0000113C CD21                <1>     int 21h
    37                              <1> .inputGetAgain:
    38 0000113E E87D340000          <1>     call clearCommandLineState      ;Cleans all handles 5->MAX
    39                              <1> .inputGetCmdlineAgain:
    40 00001143 E85B310000          <1>     call printPrompt    ;Ok we are gonna get more input, output prompt
    41 00001148 F60545EFFFFF08      <1>     test byte [statFlg1], inBatch   ;If batch on, get the next line to execute
    42 0000114F 0F85CB0B0000        <1>     jnz batNextLine
    43 00001155 488D1505F0FFFF      <1>     lea rdx, inBuffer
    44 0000115C B8000A0000          <1>     mov eax, 0A00h      ;Do Buffered input
    45 00001161 CD21                <1>     int 21h
    46                              <1> .batProceed:            ;Jump here to copy the batch input line 
    47 00001163 E8D4310000          <1>     call printCRLF  ;Note we have accepted input
    48                              <1> ;First check we had something typed in of length greater than 0
    49 00001168 803DF3EFFFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    50 0000116F 74D2                <1>     je .inputGetCmdlineAgain  ;If not, keep looping input
    51                              <1>     ;Copy over the input text
    52                              <1> .goSingle:
    53 00001171 488D35E9EFFFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    54 00001178 488D3D64F0FFFF      <1>     lea rdi, cpyBuffer
    55 0000117F B982000000          <1>     mov ecx, cmdBufferL     ;Copy the buffer over to manipulate
    56 00001184 F3A4                <1>     rep movsb
    57 00001186 E870000000          <1>     call makeCmdBuffer      ;Preprocess the redir, make cmd buffer
    58                              <1>     ;Now check we aren't starting with a pipe or <CR> and treat differently
    59 0000118B 488D35D5F0FFFF      <1>     lea rsi, cmdBuffer + 2
    60 00001192 E8F7330000          <1>     call skipDelimiters
    61 00001197 803E0D              <1>     cmp byte [rsi], CR      ;If the first non-delim is a CR, reject input!
    62 0000119A 74A2                <1>     je .inputGetAgain       ;Wipe redir flags and reobtain input!
    63 0000119C 803E7C              <1>     cmp byte [rsi], "|"     ;If the first non-delim is a pipe, syntax error!
    64 0000119F 0F84D4030000        <1>     je hardSynErr
    65                              <1> .pipeLoop:
    66 000011A5 4C8B0563EEFFFF      <1>     mov r8, qword [pspPtr]  ;Point back to home segment
    67 000011AC E8A4000000          <1>     call makeCmdString      ;Makes the CR delimited command in psp
    68                              <1>     ;ZF here indicates if we are at the end of the command or nots
    69 000011B1 E85B070000          <1>     call setupRedirandPipes ;Setup/advance pipes and redir as appropriate
    70 000011B6 E8F3000000          <1>     call analyseCmdline     ;Setup cmdName and fcb for cmdBuffer portion
    71 000011BB E845020000          <1>     call doCommandLine      ;This preps and executes the command portion.
    72                              <1> .okRet:                     ;Normal return point for processing
    73 000011C0 E851050000          <1>     call advanceRedir       ;Now advance and end redir if needed
    74 000011C5 F605CDEEFFFFFF      <1>     test byte [pipeFlag], -1    ;If no pipes, reset state, accept new input
    75 000011CC 0F8447FFFFFF        <1>     jz .inputMain
    76                              <1>     ;Now we pull the commandline forwards. 
    77 000011D2 E87E000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    78 000011D7 488D3D89F0FFFF      <1>     lea rdi, cmdBuffer + 2
    79 000011DE 4889F1              <1>     mov rcx, rsi
    80 000011E1 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    81 000011E4 280D7CF0FFFF        <1>     sub byte [cmdBuffer + 1], cl    ;And erase from the count
    82 000011EA 8A0D76F0FFFF        <1>     mov cl, byte [cmdBuffer + 1]
    83 000011F0 FFC1                <1>     inc ecx     ;One more for the terminating char
    84 000011F2 F3A4                <1>     rep movsb   ;Move the chars over    
    85 000011F4 E8B6330000          <1>     call clearCommandState  ;Else, clear the command state and start again
    86 000011F9 EBAA                <1>     jmp short .pipeLoop     ;Doesn't close handles above 5 until end of pipe!
    87                              <1> 
    88                              <1> makeCmdBuffer:
    89                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    90                              <1> ; copy buffer. Called only once in a cycle.
    91                              <1> ;Throughout: CL has char count, CH has quote count
    92 000011FB 488D35E3EFFFFF      <1>     lea rsi, [cpyBuffer + 2]    ;Goto copy buffer + 2
    93 00001202 31C9                <1>     xor ecx, ecx
    94 00001204 4889F7              <1>     mov rdi, rsi    ;Save the pointer
    95                              <1> .countQuotes:
    96 00001207 AC                  <1>     lodsb
    97 00001208 3C22                <1>     cmp al, '"'
    98 0000120A 7507                <1>     jne .notQuoteToCount
    99 0000120C FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   100 0000120E E9F4FFFFFF          <1>     jmp .countQuotes
   101                              <1> .notQuoteToCount:
   102 00001213 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   103 00001215 75F0                <1>     jne .countQuotes
   104 00001217 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   105 0000121A 488D3D46F0FFFF      <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
   106                              <1> .getChar:
   107 00001221 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   108 00001222 3C22                <1>     cmp al, '"'     ;Is char a quote?
   109 00001224 750E                <1>     jne .notQuote
   110 00001226 FECD                <1>     dec ch          ;We have a quote, now decrement
   111 00001228 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   112                              <1> .searchForClosingQuote:
   113                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   114 0000122A AA                  <1>     stosb   ;Store char and inc rdi
   115 0000122B FEC1                <1>     inc cl
   116 0000122D AC                  <1>     lodsb   ;Get next char
   117 0000122E 3C22                <1>     cmp al, '"'
   118 00001230 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   119 00001232 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   120                              <1> .notQuote:
   121 00001234 E877060000          <1>     call peelRedir      ;Intervene redir if needed
   122 00001239 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   123 0000123B 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   124 0000123D EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   125                              <1> .pipeHandle:
   126                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   127 0000123F 0F8434030000        <1>     jz hardSynErr ;We had double pipe symbol, syntax error and reset!
   128                              <1> .notRedir:
   129 00001245 AA                  <1>     stosb       ;Store char and advance rdi
   130 00001246 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   131 00001248 7404                <1>     je .exit
   132 0000124A FEC1                <1>     inc cl      ;Increment char count
   133 0000124C EBD3                <1>     jmp short .getChar    ;If not, get next char
   134                              <1> .exit:
   135 0000124E 880D12F0FFFF        <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   136                              <1>     return
    13                              <2> %%_ret:
    14 00001254 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   137                              <1> 
   138                              <1> makeCmdString:
   139                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   140                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   141                              <1> ; Copies into the psp.
   142                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   143 00001255 488D350BF0FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   144 0000125C 31C9                <1>     xor ecx, ecx
   145 0000125E 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   146                              <1> .countQuotes:
   147 00001261 AC                  <1>     lodsb
   148 00001262 3C22                <1>     cmp al, '"'
   149 00001264 7507                <1>     jne .notQuoteToCount
   150 00001266 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   151 00001268 E9F4FFFFFF          <1>     jmp .countQuotes
   152                              <1> .notQuoteToCount:
   153 0000126D 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   154 0000126F 75F0                <1>     jne .countQuotes
   155 00001271 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   156 00001274 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   157                              <1> .getChar:
   158 0000127B AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   159 0000127C 3C22                <1>     cmp al, '"'     ;Is char a quote?
   160 0000127E 750E                <1>     jne .notQuote
   161 00001280 FECD                <1>     dec ch          ;We have a quote, now decrement
   162 00001282 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   163                              <1> .searchForClosingQuote:
   164                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   165 00001284 AA                  <1>     stosb   ;Store char and inc rdi
   166 00001285 FEC1                <1>     inc cl
   167 00001287 AC                  <1>     lodsb   ;Get next char
   168 00001288 3C22                <1>     cmp al, '"'
   169 0000128A 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   170 0000128C FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   171                              <1> .notQuote:
   172 0000128E 3C7C                <1>     cmp al, "|"
   173 00001290 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   174 00001292 B00D                <1>     mov al, CR          ;Store the pipe char
   175 00001294 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   176                              <1> .notPipe:
   177 00001297 AA                  <1>     stosb       ;Store char and advance rdi
   178 00001298 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   179 0000129A 7404                <1>     je .exit
   180 0000129C FEC1                <1>     inc cl      ;Increment char count
   181 0000129E EBDB                <1>     jmp short .getChar    ;If not, get next char
   182                              <1> .exit:
   183 000012A0 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   184 000012A3 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   185 000012AA 803E0D              <1>     cmp byte [rsi], CR  
   186                              <1>     return
    13                              <2> %%_ret:
    14 000012AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   187                              <1> 
   188                              <1> analyseCmdline:
   189                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   190                              <1> ; processes the command name into the FCB.  
   191 000012AE C60581F0FFFF00      <1>     mov byte [cmdName], 0   ;Init this field to indicate no cmd
   192                              <1> ;Start by searching for any switch chars! Set byte if switch chars fnd!!
   193 000012B5 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   194 000012BC 4889FE              <1>     mov rsi, rdi                    ;Prep rsi here too
   195 000012BF 0FB64FFF            <1>     movzx ecx, byte [rdi - 1]       ;Get the count byte
   196 000012C3 8A0561EDFFFF        <1>     mov al, byte [switchChar]
   197 000012C9 F2AE                <1>     repne scasb                     ;Scan for the switch char
   198 000012CB 7506                <1>     jne .noSwitchFnd
   199 000012CD F615D7EDFFFF        <1>     not byte [switchFnd]            ;Set switch char fnd on!
   200                              <1> .noSwitchFnd:
   201 000012D3 E8B6320000          <1>     call skipDelimiters     ;Skip any preceeding separators from rsi
   202 000012D8 803E0D              <1>     cmp byte [rsi], CR      ;We have no command? Return!
   203                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000012DB 74(AD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 000012DD 4889F3              <1>     mov rbx, rsi            ;Save the start of the text in rbx
   205                              <1> .plp:
   206 000012E0 488D3D1FEEFFFF      <1>     lea rdi, cmdFcb         ;Loop on the commandFCB
   207 000012E7 B801290000          <1>     mov eax, 2901h
   208 000012EC CD21                <1>     int 21h
   209 000012EE 3CFF                <1>     cmp al, -1  ;If DOS returns -1, we have a bad drive specified, fail!
   210 000012F0 0F8402010000        <1>     je .exitBadDrv
   211                              <1> .trailingDotLp:
   212                              <1> ;Reverse along trailing dots!
   213 000012F6 807EFF2E            <1>     cmp byte [rsi - 1], "." ;Is this a dot?
   214 000012FA 7505                <1>     jne .noTrailingDots
   215 000012FC 48FFCE              <1>     dec rsi
   216 000012FF EBF5                <1>     jmp short .trailingDotLp
   217                              <1> .noTrailingDots:
   218 00001301 8A0522EDFFFF        <1>     mov al, byte [pathSep]  
   219 00001307 3806                <1>     cmp byte [rsi], al      ;Is the terminator a pathsep?
   220 00001309 7525                <1>     jne .notPs
   221 0000130B 48FFC6              <1>     inc rsi ;Go to the char after the pathsep
   222 0000130E AC                  <1>     lodsb   ;Get this char
   223 0000130F 48FFCE              <1>     dec rsi ;And move rsi back to where we were
   224 00001312 3C20                <1>     cmp al, 20h     ;Is this char below 32?
   225 00001314 7217                <1>     jb .delimfnd    ;Also a delimiter
   226 00001316 3C5C                <1>     cmp al, "\"     ;If this is a second pathsep, we are done
   227 00001318 7413                <1>     je .delimfnd
   228 0000131A 3C2F                <1>     cmp al, "/"     ;Or an alt pathsep?
   229 0000131C 740F                <1>     je .delimfnd
   230 0000131E 3C2E                <1>     cmp al, byte "."
   231 00001320 740B                <1>     je .delimfnd
   232 00001322 3C22                <1>     cmp al, byte '"'
   233 00001324 7407                <1>     je .delimfnd
   234 00001326 E871320000          <1>     call isALdelimiter  ;Is this a delim char?
   235 0000132B 75B3                <1>     jne .plp            ;If not, we loop again
   236                              <1> .delimfnd:
   237 0000132D 48FFCE              <1>     dec rsi             ;Point rsi to end of the command
   238                              <1> .notPs:
   239                              <1> ;Now we have reached the end of the command, rsi points to the first char
   240                              <1> ; after the command, whether a delimiter or not.
   241 00001330 4889F1              <1>     mov rcx, rsi
   242 00001333 4829D9              <1>     sub rcx, rbx    ;Get the number of chars in the command ONLY
   243 00001336 4887DE              <1>     xchg rbx, rsi   ;Swap the start and end of the commands!!!
   244 00001339 488D3DA7EFFFFF      <1>     lea rdi, cmdPathSpec
   245 00001340 F3A4                <1>     rep movsb
   246 00001342 30C0                <1>     xor al, al
   247 00001344 AA                  <1>     stosb   ;Store a terminating null
   248 00001345 4887DE              <1>     xchg rbx, rsi
   249                              <1> ;Now we build FCBs for the arguments!
   250 00001348 498D9881000000      <1>     lea rbx, qword [r8 + cmdLine]   ;Now we measure from the start of the buf!
   251 0000134F E893000000          <1>     call .skipAndCheckCR
   252 00001354 745B                <1>     je .setupCmdVars
   253 00001356 C60547EDFFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   254 0000135D 4889F0              <1>     mov rax, rsi
   255 00001360 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   256 00001363 88053CEDFFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   257 00001369 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   258 0000136D B801290000          <1>     mov eax, 2901h
   259 00001372 CD21                <1>     int 21h
   260 00001374 88052CEDFFFF        <1>     mov byte [arg1FCBret], al
   261                              <1> .skipArg:
   262 0000137A AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   263 0000137B 3C0D                <1>     cmp al, CR
   264 0000137D 7432                <1>     je .setupCmdVars
   265 0000137F E818320000          <1>     call isALdelimiter
   266 00001384 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   267 00001386 E85C000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   268 0000138B 7424                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   269 0000138D C60513EDFFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   270 00001394 4889F0              <1>     mov rax, rsi            
   271 00001397 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   272 0000139A 880508EDFFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   273 000013A0 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   274 000013A4 B801290000          <1>     mov eax, 2901h
   275 000013A9 CD21                <1>     int 21h
   276 000013AB 8805F8ECFFFF        <1>     mov byte [arg2FCBret], al
   277                              <1> .setupCmdVars:
   278                              <1> ;Before returning, we copy the command name to cmdName 
   279 000013B1 488D3D2FEFFFFF      <1>     lea rdi, cmdPathSpec
   280 000013B8 E888320000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   281 000013BD E8A7310000          <1>     call strlen ;Get the length of the null terminated final path componant
   282 000013C2 81F90D000000        <1>     cmp ecx, fileNameZL ;11 chars + ext sep + null terminator
   283 000013C8 7726                <1>     ja .exitBad     ;Return error
   284 000013CA 4889FE              <1>     mov rsi, rdi
   285 000013CD 488D3D62EFFFFF      <1>     lea rdi, cmdName
   286 000013D4 FFC9                <1>     dec ecx ;Minus the terminating null
   287 000013D6 880F                <1>     mov byte [rdi], cl ;Store the length here
   288 000013D8 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   289                              <1> .cpCmdName:
   290 000013DB AC                  <1>     lodsb
   291 000013DC E892310000          <1>     call ucChar ;Uppercase the char
   292 000013E1 AA                  <1>     stosb
   293 000013E2 FFC9                <1>     dec ecx
   294 000013E4 75F5                <1>     jnz .cpCmdName
   295                              <1>     return
    13                              <2> %%_ret:
    14 000013E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   296                              <1> .skipAndCheckCR:
   297                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   298 000013E7 E8A2310000          <1>     call skipDelimiters ;Go to the next char in the input line
   299 000013EC 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   300                              <1>     return
    13                              <2> %%_ret:
    14 000013EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   301                              <1> .exitBad:
   302 000013F0 C6053FEFFFFFFF      <1>     mov byte [cmdName], -1  ;Store -1 to indicate error
   303                              <1>     return
    13                              <2> %%_ret:
    14 000013F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   304                              <1> .exitBadDrv:
   305 000013F8 C60537EFFFFFFE      <1>     mov byte [cmdName], -2  ;Indicate a bad drive specified
   306 000013FF E8D30A0000          <1>     call badDriveError
   307                              <1>     return
    13                              <2> %%_ret:
    14 00001404 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   308                              <1> 
   309                              <1> doCommandLine:
   310                              <1>     ;The following check accounts for the end of a piped command
   311 00001405 803D2AEFFFFF00      <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, syntax error!
   312 0000140C 0F8467010000        <1>     je hardSynErr   ;This now should never be hit, earmark for removal!
   313 00001412 803D1DEFFFFFFF      <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   314 00001419 0F84F10A0000        <1>     je badCmdError
   315 0000141F 803D10EFFFFFFE      <1>     cmp byte [cmdName], -2  ;Bad drive specified, nop
   316                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001426 74(04)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   317 00001428 488D35B8EEFFFF      <1>     lea rsi, cmdPathSpec
   318 0000142F 0FB71DB1EEFFFF      <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   319 00001436 80FF3A              <1>     cmp bh, ":"
   320 00001439 7520                <1>     jne .noDriveSpecified
   321 0000143B 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   322 0000143D E831310000          <1>     call ucChar     ;Uppercase al
   323 00001442 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   324                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   325 00001444 803DEBEEFFFF02      <1>     cmp byte [cmdName], 2
   326 0000144B 750E                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   327 0000144D 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   328 0000144F E8EB300000          <1>     call setDrive
   329                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001454 74(04)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   330 00001456 E97C0A0000          <1>     jmp badDriveError
   331                              <1> .noDriveSpecified:
   332                              <1> ;rbx is writable UP TO THE FIRST PIPE OR CR (non-inclusive)
   333 0000145B 488D1D03EEFFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer
   334 00001462 488D35CDEEFFFF      <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   335 00001469 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   336 0000146E BAFFFF0000          <1>     mov edx, 0FFFFh
   337 00001473 B5FF                <1>     mov ch, -1
   338 00001475 CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   339 00001477 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   340 0000147C BAFFFF0000          <1>     mov edx, 0FFFFh
   341 00001481 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   342 00001483 CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   343                              <1>             ;        al = 0  if the command should be executed as usual
   344 00001485 84C0                <1>     test al, al
   345 00001487 7444                <1>     jz .executeInternal
   346                              <1>     ;Here we execute externally and return to the prompt
   347                              <1>     ; as if it was an internal execution. rbx is not to be relied on here!
   348 00001489 498D9880000000      <1>     lea rbx, qword [r8 + cmdTail]
   349 00001490 488D359FEEFFFF      <1>     lea rsi, cmdName        
   350 00001497 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   351 0000149C BAFFFF0000          <1>     mov edx, 0FFFFh
   352 000014A1 B5FF                <1>     mov ch, -1
   353 000014A3 CD2F                <1>     int 2Fh
   354 000014A5 803D8AEEFFFF00      <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   355                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000014AC 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000014AE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   356                              <1>     ;We need to copy over to cmdPathSpec in the event this command
   357                              <1>     ; is an external command that is in the CD or in the PATH.
   358                              <1>     ;Should not be used for this purpose but it is here...
   359 000014AF E8C6050000          <1>     call pullCommandline    ;Pull the tail down with the original name
   360 000014B4 488D357BEEFFFF      <1>     lea rsi, cmdName        ;Now make the new cmd the new cmdspec!
   361 000014BB AC                  <1>     lodsb                   ;Get the name length
   362 000014BC 0FB6C8              <1>     movzx ecx, al
   363 000014BF 488D3D21EEFFFF      <1>     lea rdi, cmdPathSpec    ;Overwrite the original specified command
   364 000014C6 F3A4                <1>     rep movsb   
   365 000014C8 31C0                <1>     xor eax, eax
   366 000014CA AA                  <1>     stosb   ;Store null terminator
   367 000014CB EB1F                <1>     jmp short .executeInternal2 ;Skip the equivalent for non-ae cases
   368                              <1> .executeInternal:
   369 000014CD E8A8050000          <1>     call pullCommandline    ;Now pull the tail down
   370 000014D2 488D3D0EEEFFFF      <1>     lea rdi, cmdPathSpec
   371 000014D9 E88B300000          <1>     call strlen ;Get the length of the input command
   372 000014DE FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   373 000014E0 380D50EEFFFF        <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   374 000014E6 0F8564260000        <1>     jne launchChild     ;If not, a path was specified, exit!
   375                              <1> .executeInternal2:
   376                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   377 000014EC 488D1DA3F2FFFF      <1>     lea rbx, functionTable
   378                              <1> .nextEntry:
   379 000014F3 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   380 000014F6 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   381 000014F9 0F8451260000        <1>     je launchChild      ;If so, check externally now
   382 000014FF 380D31EEFFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   383 00001505 7531                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   384                              <1>     ;Here they have the same length so lets see if the name is the same
   385 00001507 56                  <1>     push rsi
   386                              <1>     ;ecx has the length to compare
   387 00001508 51                  <1>     push rcx
   388 00001509 488D7301            <1>     lea rsi, qword [rbx + 1]
   389 0000150D 488D3D23EEFFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   390 00001514 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   391 00001516 59                  <1>     pop rcx
   392 00001517 5E                  <1>     pop rsi
   393 00001518 751E                <1>     jne .gotoNextEntry
   394                              <1>     ;Here it was found both strings are equal
   395 0000151A 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   396 0000151F 480FB71F            <1>     movzx rbx, word [rdi]
   397 00001523 488D3DD6EAFFFF      <1>     lea rdi, startLbl
   398 0000152A 4801FB              <1>     add rbx, rdi
   399 0000152D C605D9EAFFFF00      <1>     mov byte [returnCode], 0 ;Reset the retcode before executing function!
   400 00001534 FFD3                <1>     call rbx        ;Call the internal function!
   401 00001536 EB0C                <1>     jmp short appRet    ;Now once we are done, goto appRet!
   402                              <1> .gotoNextEntry:
   403 00001538 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   404 0000153F 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   405 00001542 EBAF                <1>     jmp short .nextEntry
   406                              <1> 
   407                              <1> appRet:  ;Return point from a task, jumped to from internal functions
   408                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled.
   409                              <1> ;Can depend on RSP here because I fixed DOS.
   410 00001544 488B25BAEAFFFF      <1>     mov rsp, qword [stackTop]   ;Reset stack ptr
   411 0000154B E8F6320000          <1>     call resetIDTentries
   412 00001550 B8004D0000          <1>     mov eax, 4D00h              ;Get retcode, will be 0 for internal commands
   413 00001555 CD21                <1>     int 21h
   414 00001557 668905AFEAFFFF      <1>     mov word [returnCode], ax
   415 0000155E 84E4                <1>     test ah, ah     ;Regular exit
   416 00001560 0F845AFCFFFF        <1>     jz commandMain.okRet
   417 00001566 80FC03              <1>     cmp ah, 3       ;TSR exit
   418 00001569 0F8451FCFFFF        <1>     je commandMain.okRet
   419                              <1>     ;Clean redirs and fully reset! This allows for safe returning if an error
   420                              <1>     ; occured when invoked on Int 2Eh! Doesnt matter for normal single command
   421                              <1>     ; as we always close the COMMAND.COM instance at this point.
   422 0000156F E83F000000          <1>     call cleanupRedirs
   423 00001574 E994FBFFFF          <1>     jmp commandMain
   424                              <1> 
   425                              <1> hardSynErr:
   426                              <1> ;Hard syntax error in cmd line. Delete pipe files and reset completely!
   427 00001579 E835090000          <1>     call badSyntaxError         ;Output bad syntax if empty command found
   428 0000157E E926000000          <1>     jmp redirPipeFailureCommon.noPrint  ;This closes pipes and resets stack
   429                              <1> redirFailure:
   430 00001583 488D1522F9FFFF      <1>     lea rdx, redirErrMsg
   431 0000158A B913000000          <1>     mov ecx, redirErrMsgL
   432 0000158F EB0C                <1>     jmp short redirPipeFailureCommon
   433                              <1> pipeFailure:
   434 00001591 488D15FDF8FFFF      <1>     lea rdx, pipeErrMsg
   435 00001598 B917000000          <1>     mov ecx, pipeErrMsgL
   436                              <1> redirPipeFailureCommon:
   437                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   438                              <1> ;This routine tries to close whatever handles are not -1 and delete
   439                              <1> ; pipe files if the pipe count is not 0.
   440                              <1> ;It resets all variables and jumps to reset the stack!
   441 0000159D B800400000          <1>     mov eax, 4000h  ;Write handle
   442 000015A2 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   443 000015A7 CD21                <1>     int 21h
   444                              <1> .noPrint:
   445 000015A9 E805000000          <1>     call cleanupRedirs  ;Cleans the redirections 
   446 000015AE E95AFBFFFF          <1>     jmp commandMain ;Retake input from the command line
   447                              <1> 
   448                              <1> cleanupRedirs:
   449                              <1> ;Cleans all active redirections, returning to the saved state.
   450                              <1> ;Deletes any pipe files, leaves any redir out files.
   451                              <1> ;Resets the internal vars
   452 000015B3 0FB705E6EAFFFF      <1>     movzx eax, word [redirSTDIN]
   453 000015BA 0FB715D9EAFFFF      <1>     movzx edx, word [pipeSTDIN]
   454 000015C1 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   455 000015C3 E8CC000000          <1>     call .closeAndReplace
   456 000015C8 0FB705D3EAFFFF      <1>     movzx eax, word [redirSTDOUT]
   457 000015CF 0FB715C6EAFFFF      <1>     movzx edx, word [pipeSTDOUT]
   458 000015D6 FFC3                <1>     inc ebx         ;Select STDOUT for closing
   459 000015D8 E8B7000000          <1>     call .closeAndReplace
   460 000015DD 66C705B8EAFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   461 000015E6 0FB71DB3EAFFFF      <1>     movzx ebx, word [redirSTDIN]
   462 000015ED E892000000          <1>     call .closeHandle
   463                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   464 000015F2 66C705A5EAFFFFFFFF  <1>     mov word [redirSTDIN], -1
   465 000015FB 0FB71DA0EAFFFF      <1>     movzx ebx, word [redirSTDOUT]
   466 00001602 E87D000000          <1>     call .closeHandle
   467 00001607 66C70592EAFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   468 00001610 0FB71D83EAFFFF      <1>     movzx ebx, word [pipeSTDIN]
   469 00001617 E868000000          <1>     call .closeHandle
   470 0000161C 66C70575EAFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   471 00001625 0FB71D70EAFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   472 0000162C E853000000          <1>     call .closeHandle
   473 00001631 66C70562EAFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   474 0000163A C60558EAFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   475 00001641 488D159AEDFFFF      <1>     lea rdx, qword [pipe1Filespec]
   476 00001648 803A00              <1>     cmp byte [rdx], 0
   477 0000164B 7407                <1>     jz .checkOld
   478 0000164D B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   479 00001652 CD21                <1>     int 21h
   480                              <1> .checkOld:
   481 00001654 488D15D6EDFFFF      <1>     lea rdx, qword [pipe2Filespec]
   482 0000165B 803A00              <1>     cmp byte [rdx],0
   483 0000165E 7407                <1>     jz .pipeNamesComplete
   484 00001660 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   485 00001665 CD21                <1>     int 21h
   486                              <1> .pipeNamesComplete:
   487 00001667 31C0                <1>     xor eax, eax
   488                              <1>     ;Invalidate the pointers and the paths too
   489 00001669 48890510EEFFFF      <1>     mov qword [newPipe], rax
   490 00001670 48890511EEFFFF      <1>     mov qword [oldPipe], rax
   491 00001677 890565EDFFFF        <1>     mov dword [pipe1Filespec], eax
   492 0000167D 8905AEEDFFFF        <1>     mov dword [pipe2Filespec], eax
   493                              <1>     return
    13                              <2> %%_ret:
    14 00001683 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   494                              <1> 
   495                              <1> .closeHandle:
   496 00001684 81FBFFFFFFFF        <1>     cmp ebx, -1
   497                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000168A 74(83)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   498 0000168C B8003E0000          <1>     mov eax, 3E00h
   499 00001691 CD21                <1>     int 21h
   500                              <1>     return
    13                              <2> %%_ret:
    14 00001693 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   501                              <1> .closeAndReplace:
   502                              <1> ;Input: ax = one possible handle, dx = second possible handle
   503                              <1> ;       bx = handle to close and copy ax/dx into
   504                              <1> ;Output: Handle intervened on. bx preserved
   505 00001694 C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   506 00001697 09D0                <1>     or eax, edx     ;Form packed
   507 00001699 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   508                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000169E 74(93)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   509 000016A0 E8DFFFFFFF          <1>     call .closeHandle
   510 000016A5 663DFFFF            <1>     cmp ax, -1      
   511 000016A9 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   512 000016AD 53                  <1>     push rbx
   513 000016AE 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   514 000016B1 B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   515 000016B6 CD21                <1>     int 21h
   516 000016B8 5B                  <1>     pop rbx
   517                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000016B9 73(93)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   518                              <1>     ;Else we now try to force default device to open!
   519 000016BB E8C4FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   520 000016C0 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   521 000016C5 488D152DF8FFFF      <1>     lea rdx, devName
   522 000016CC CD21                <1>     int 21h
   523                              <1>     return
    13                              <2> %%_ret:
    14 000016CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> cleanRedirOut:
   526                              <1> ;Used to oust any stdout redir if necessary. This is different to the above in 
   527                              <1> ; that it deletes the redir out file. Therefore, this is only called in 
   528                              <1> ; particular cases like launching bat files which needs special handling in 
   529                              <1> ; that all redirs need to be completely removed.
   530 000016CF 66813DCAE9FFFFFFFF  <1>     cmp word [redirSTDOUT], -1  ;Do we have > xyzzy.fil?
   531                              <1>     rete  ;Return if no stdout redir! We are ok!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000016D8 74(CE)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   532 000016DA 0FB71DC1E9FFFF      <1>     movzx ebx, word [redirSTDOUT]
   533 000016E1 B901000000          <1>     mov ecx, 1      ;STDOUT
   534 000016E6 B800460000          <1>     mov eax, 4600h  ;DUP this into STDOUT closing redirout
   535 000016EB CD21                <1>     int 21h
   536 000016ED 0FB71DAEE9FFFF      <1>     movzx ebx, word [redirSTDOUT]   ;Kill the duplicate now
   537 000016F4 B8003E0000          <1>     mov eax, 3E00h  
   538 000016F9 CD21                <1>     int 21h
   539 000016FB 66C7059EE9FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Set default value back
   540 00001704 488D1588ECFFFF      <1>     lea rdx, rdrOutFilespec
   541 0000170B B800410000          <1>     mov eax, 4100h      ;Del stdout file
   542 00001710 CD21                <1>     int 21h
   543 00001712 C60200              <1>     mov byte [rdx], 0   ;Ensure this is a clear path (not necessary)
   544                              <1>     ;Ignore any errors in this procedures. Errors mean either sharing problems
   545                              <1>     ; or the file doesnt exist, which in either case, is fine to leave it be!
   546                              <1>     return
    13                              <2> %%_ret:
    14 00001715 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   547                              <1> 
   548                              <1> advanceRedir:
   549                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   550                              <1> ;Close stdin redir then stdout redir. 
   551 00001716 F60581E9FFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   552 0000171D 0F8585000000        <1>     jnz .redirIn
   553 00001723 F6056FE9FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   554 0000172A 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   555 00001730 0FBF0563E9FFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   556 00001737 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   557 0000173C 0F84EB000000        <1>     je .pipeOut              
   558                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   559 00001742 0FB71D51E9FFFF      <1>     movzx ebx, word [pipeSTDIN] 
   560 00001749 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   561 0000174B B800460000          <1>     mov eax, 4600h
   562 00001750 CD21                <1>     int 21h
   563 00001752 0F8239FEFFFF        <1>     jc pipeFailure
   564 00001758 B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   565 0000175D CD21                <1>     int 21h
   566 0000175F 0F822CFEFFFF        <1>     jc pipeFailure
   567 00001765 488B151CEDFFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   568 0000176C B800410000          <1>     mov eax, 4100h  ;Delete the file!
   569 00001771 CD21                <1>     int 21h
   570 00001773 0F8218FEFFFF        <1>     jc pipeFailure
   571 00001779 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   572 0000177C 66C70515E9FFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   573                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   574                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   575                              <1>     ;Else exit!
   576 00001785 0FBF0510E9FFFF      <1>     movsx eax, word [pipeSTDOUT]
   577 0000178C 3DFFFFFFFF          <1>     cmp eax, -1
   578 00001791 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   579 00001797 C605FBE8FFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   580 0000179E F605FAE8FFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   581 000017A5 753D                <1>     jnz .redirOut               ;Go for it if so!
   582                              <1>     return
    13                              <2> %%_ret:
    14 000017A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   583                              <1> .redirIn:
   584                              <1> ;Here we clean redirIn
   585 000017A8 0FB71DF1E8FFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   586 000017AF 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   587 000017B1 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   588 000017B6 CD21                <1>     int 21h
   589 000017B8 0F82C5FDFFFF        <1>     jc redirFailure
   590 000017BE B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   591 000017C3 CD21                <1>     int 21h
   592 000017C5 0F82B8FDFFFF        <1>     jc redirFailure
   593 000017CB 66C705CCE8FFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   594 000017D4 C605C3E8FFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   595 000017DB F605B7E8FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   596 000017E2 7549                <1>     jnz .pipeOut
   597                              <1> .redirOut:
   598 000017E4 F605B4E8FFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   599                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000017EB 74(A7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   600                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   601 000017ED F605A5E8FFFFFF      <1>     test byte [pipeFlag], -1
   602 000017F4 7537                <1>     jnz short .pipeOut
   603 000017F6 0FB71DA5E8FFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   604 000017FD B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   605 00001802 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   606 00001807 CD21                <1>     int 21h
   607 00001809 0F8274FDFFFF        <1>     jc redirFailure
   608 0000180F B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   609 00001814 CD21                <1>     int 21h
   610 00001816 0F8267FDFFFF        <1>     jc redirFailure
   611 0000181C 66C7057DE8FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   612 00001825 C60573E8FFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   613                              <1>     return
    13                              <2> %%_ret:
    14 0000182C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   614                              <1> .pipeOut:
   615                              <1> ;Duplicate STDIN to save across pipe
   616 0000182D 0FBF0568E8FFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   617 00001834 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   618                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001839 74(2C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   619 0000183B B800450000          <1>     mov eax, 4500h
   620 00001840 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   621 00001842 CD21                <1>     int 21h
   622 00001844 0F8247FDFFFF        <1>     jc pipeFailure
   623 0000184A 66890549E8FFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   624                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   625 00001851 B800460000          <1>     mov eax, 4600h
   626 00001856 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   627 00001858 FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   628 0000185A CD21                <1>     int 21h
   629 0000185C 0F822FFDFFFF        <1>     jc pipeFailure
   630                              <1> ;Now return the original stdout to stdout
   631 00001862 89D9                <1>     mov ecx, ebx
   632 00001864 0FB71D31E8FFFF      <1>     movzx ebx, word [pipeSTDOUT]
   633 0000186B B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   634 00001870 CD21                <1>     int 21h
   635 00001872 0F8219FDFFFF        <1>     jc pipeFailure
   636                              <1> ;Now close the DUP'ed STDOUT
   637 00001878 B8003E0000          <1>     mov eax, 3E00h
   638 0000187D CD21                <1>     int 21h
   639 0000187F 0F820CFDFFFF        <1>     jc pipeFailure
   640                              <1> ;Finally unwind STDIN to the beginning of the file
   641 00001885 B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   642 0000188A 31DB                <1>     xor ebx, ebx    ;STDIN handle
   643 0000188C 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   644 0000188E 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   645 00001890 CD21                <1>     int 21h
   646 00001892 0F82F9FCFFFF        <1>     jc pipeFailure  ;This should never happen
   647 00001898 488B15E1EBFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   648 0000189F 488915E2EBFFFF      <1>     mov qword [oldPipe], rdx
   649 000018A6 66C705EDE7FFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   650                              <1>     return
    13                              <2> %%_ret:
    14 000018AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   651                              <1> 
   652                              <1> 
   653                              <1> peelRedir:
   654                              <1> ;Checks and sets up redir as appropriate
   655                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   656                              <1> ;       rsi points to the first char after the char in al in cpyBuffer
   657                              <1> ;Output: ZF=NZ => No redir
   658                              <1> ;        ZF=ZY => Redir
   659                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   660                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   661 000018B0 51                  <1>     push rcx
   662 000018B1 57                  <1>     push rdi
   663 000018B2 3C3C                <1>     cmp al, "<"
   664 000018B4 740C                <1>     je .inputRedir
   665 000018B6 3C3E                <1>     cmp al, ">"
   666 000018B8 7427                <1>     je .outputRedir
   667 000018BA 3C7C                <1>     cmp al, "|"
   668 000018BC 7441                <1>     je .pipeSetup
   669 000018BE F8                  <1>     clc
   670                              <1> .redirExit:
   671 000018BF 5F                  <1>     pop rdi
   672 000018C0 59                  <1>     pop rcx
   673                              <1>     return
    13                              <2> %%_ret:
    14 000018C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   674                              <1> .inputRedir:
   675 000018C2 C605D5E7FFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   676 000018C9 488D3D74EAFFFF      <1>     lea rdi, rdrInFilespec
   677                              <1> .redirCommon:
   678 000018D0 E8B92C0000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   679 000018D5 E8E52D0000          <1>     call cpDelimPathToBufz
   680 000018DA 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   681 000018DD 30C0                <1>     xor al, al  ;Clear the ZF flag
   682 000018DF EBDE                <1>     jmp short .redirExit
   683                              <1> .outputRedir:
   684 000018E1 C605B7E7FFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   685 000018E8 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   686 000018EB 7509                <1>     jne .notDouble
   687 000018ED FE05ACE7FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   688 000018F3 48FFC6              <1>     inc rsi ;Go past it too
   689                              <1> .notDouble:
   690 000018F6 488D3D96EAFFFF      <1>     lea rdi, rdrOutFilespec
   691 000018FD EBD1                <1>     jmp short .redirCommon
   692                              <1> .pipeSetup:
   693 000018FF 56                  <1>     push rsi    ;Save rsi pointing to char past |
   694 00001900 E8892C0000          <1>     call skipDelimiters ;Check if this is effectively a double || or |<CR>
   695 00001905 803E7C              <1>     cmp byte [rsi], "|" 
   696 00001908 7403                <1>     je .badFnd
   697 0000190A 803E0D              <1>     cmp byte [rsi], CR
   698                              <1> .badFnd:
   699 0000190D 5E                  <1>     pop rsi
   700 0000190E F9                  <1>     stc
   701 0000190F EBAE                <1>     jmp short .redirExit
   702                              <1> 
   703                              <1> setupRedirandPipes:
   704                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   705                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   706 00001911 0F8484000000        <1>     jz .redirIn
   707 00001917 488D15C4EAFFFF      <1>     lea rdx, pipe1Filespec
   708 0000191E 803A00              <1>     cmp byte [rdx], 0
   709 00001921 7410                <1>     jz .pathFound
   710 00001923 488D1507EBFFFF      <1>     lea rdx, pipe2Filespec
   711 0000192A 803A00              <1>     cmp byte [rdx], 0
   712 0000192D 0F855EFCFFFF        <1>     jnz pipeFailure
   713                              <1> .pathFound:
   714 00001933 48891546EBFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   715 0000193A B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   716 0000193F BB01000000          <1>     mov ebx, 1
   717 00001944 CD21                <1>     int 21h
   718 00001946 0F8245FCFFFF        <1>     jc pipeFailure
   719 0000194C 66890549E7FFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   720 00001953 E8F32B0000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   721 00001958 0441                <1>     add al, "A"
   722 0000195A BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   723 0000195F 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   724 00001961 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   725 00001963 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   726 00001965 B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   727 0000196A CD21                <1>     int 21h
   728 0000196C 0F821FFCFFFF        <1>     jc pipeFailure
   729                              <1>     ;AX has the handle for this file now, this will become STDOUT
   730                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   731 00001972 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   732 00001975 B901000000          <1>     mov ecx, 1
   733 0000197A B800460000          <1>     mov eax, 4600h
   734 0000197F CD21                <1>     int 21h
   735 00001981 0F820AFCFFFF        <1>     jc pipeFailure
   736 00001987 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   737 0000198C CD21                <1>     int 21h
   738 0000198E 0F82FDFBFFFF        <1>     jc pipeFailure
   739 00001994 C605FEE6FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   740                              <1> .redirIn:
   741                              <1> ;Now check if any other redir needs to be setup
   742                              <1> ;Checks and sets up redir as appropriate.
   743                              <1>     ;Setup the redir here for STDIN
   744 0000199B F605FCE6FFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   745 000019A2 7449                <1>     jz .redirOut
   746 000019A4 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   747 000019A6 B800450000          <1>     mov eax, 4500h
   748 000019AB CD21                <1>     int 21h
   749 000019AD 0F82D0FBFFFF        <1>     jc redirFailure
   750 000019B3 668905E6E6FFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   751 000019BA 488D1583E9FFFF      <1>     lea rdx, rdrInFilespec
   752 000019C1 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   753 000019C6 CD21                <1>     int 21h
   754 000019C8 0F82B5FBFFFF        <1>     jc redirFailure
   755 000019CE 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   756 000019D0 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   757 000019D3 B800460000          <1>     mov eax, 4600h
   758 000019D8 CD21                <1>     int 21h
   759 000019DA 0F82A3FBFFFF        <1>     jc redirFailure
   760 000019E0 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   761 000019E5 CD21                <1>     int 21h
   762 000019E7 0F8296FBFFFF        <1>     jc redirFailure
   763                              <1> .redirOut:
   764 000019ED F605ABE6FFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   765                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000019F4 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000019F6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   766 000019F7 803D9EE6FFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   767                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000019FE 75(F6)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   768                              <1>     ;Else setup the redir here for STDOUT
   769 00001A00 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   770 00001A05 B800450000          <1>     mov eax, 4500h
   771 00001A0A CD21                <1>     int 21h
   772 00001A0C 0F8271FBFFFF        <1>     jc redirFailure
   773 00001A12 66890589E6FFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   774 00001A19 488D1573E9FFFF      <1>     lea rdx, rdrOutFilespec
   775 00001A20 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   776 00001A25 CD21                <1>     int 21h
   777 00001A27 730F                <1>     jnc .fileExists
   778 00001A29 B8003C0000          <1>     mov eax, 3C00h
   779 00001A2E 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   780 00001A30 CD21                <1>     int 21h
   781 00001A32 0F824BFBFFFF        <1>     jc redirFailure
   782                              <1> .fileExists:
   783 00001A38 B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   784 00001A3D 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   785 00001A40 B800460000          <1>     mov eax, 4600h  ;DUP2
   786 00001A45 CD21                <1>     int 21h
   787 00001A47 0F8236FBFFFF        <1>     jc redirFailure
   788 00001A4D B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   789 00001A52 CD21                <1>     int 21h
   790 00001A54 0F8229FBFFFF        <1>     jc redirFailure
   791 00001A5A 803D3EE6FFFF01      <1>     cmp byte [redirOut], 1
   792                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001A61 74(F6)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   793                              <1>     ;Here we move the file pointer to the end of the file
   794 00001A63 31D2                <1>     xor edx, edx    ;Low order 32 bits
   795 00001A65 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   796 00001A67 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   797 00001A6C B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   798 00001A71 CD21                <1>     int 21h
   799 00001A73 0F820AFBFFFF        <1>     jc redirFailure
   800                              <1>     return
    13                              <2> %%_ret:
    14 00001A79 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   801                              <1> 
   802                              <1> 
   803                              <1> pullCommandline:
   804                              <1> ;This command pulls the command tail down, removing the whole launch command
   805 00001A7A 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   806                              <1> ;Skip leading separators
   807                              <1> .pctSkipLeading:
   808 00001A81 AC                  <1>     lodsb   ;Get first char
   809 00001A82 E8152B0000          <1>     call isALdelimiter
   810 00001A87 74F8                <1>     je .pctSkipLeading
   811 00001A89 48FFCE              <1>     dec rsi
   812                              <1>     ;rsi points to the start of the command
   813 00001A8C 488D3D54E8FFFF      <1>     lea rdi, cmdPathSpec
   814 00001A93 E8D12A0000          <1>     call strlen ;Get the length of the command
   815 00001A98 FFC9                <1>     dec ecx ;Minus the terminating null
   816 00001A9A 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   817 00001A9D 280D02E6FFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   818 00001AA3 280DFFE5FFFF        <1>     sub byte [arg2Off], cl
   819 00001AA9 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   820 00001AAB 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   821                              <1> .pctPullChars:
   822 00001AB2 AC                  <1>     lodsb
   823 00001AB3 AA                  <1>     stosb
   824 00001AB4 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   825 00001AB6 7404                <1>     je .pctExit
   826 00001AB8 FFC1                <1>     inc ecx     ;Increment count
   827 00001ABA EBF6                <1>     jmp short .pctPullChars 
   828                              <1> .pctExit:
   829 00001ABC 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   830                              <1>     return
    13                              <2> %%_ret:
    14 00001AC3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   831                              <1> 
   832                              <1> getSetMainState:
   833                              <1> ;Resets the buffers lengths, sets stringops and gets the pspptr in r8
   834 00001AC4 FC                  <1>     cld ;Ensure stringops are done the right way
   835 00001AC5 C60595E6FFFF80      <1>     mov byte [inBuffer], inBufferL      ;Reset the buffer length
   836 00001ACC C60510E7FFFF80      <1>     mov byte [cpyBuffer], inBufferL     ;Reset the buffer length
   837 00001AD3 C6058BE7FFFF80      <1>     mov byte [cmdBuffer], inBufferL     ;Reset the buffer length
   838 00001ADA 4C8B052EE5FFFF      <1>     mov r8, qword [pspPtr]              ;Reset the pspPtr
   839                              <1>     return
    13                              <2> %%_ret:
    14 00001AE1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   840                              <1> 
   841                              <1> 
   842                              <1> int2Eh: 
   843                              <1> ;Very sucky interface for passing command lines to be processed by the 
   844                              <1> ; current top level command interpreter. Will slowly try to patch to make it
   845                              <1> ; more reliable with a critical section flag. Currently, if we are already
   846                              <1> ; processing an Int 2Eh request, this will not process the command.
   847                              <1> ;
   848                              <1> ;Need to add further safeguards for when pipes are also setup and
   849                              <1> ; batchmode is on!
   850                              <1> ;
   851                              <1> ;Input: rsi points to the count byte of a command line.
   852                              <1> ;       Max number of chars is 128 (127 + count byte)
   853                              <1> ;Output:
   854                              <1> ;       CF=NC: Command was processed. ax = Retcode
   855                              <1> ;       CF=CY: Command was not processed.
   856 00001AE2 80642410FE          <1>     and byte [rsp + 2*8], ~1    ;Clear CF on entry
   857 00001AE7 F605A6E5FFFF04      <1>     test byte [statFlg1], inSingle
   858 00001AEE 0F8584000000        <1>     jnz int2EcheckReentry 
   859                              <1> .multiJoin:
   860 00001AF4 800D99E5FFFF04      <1>     or byte [statFlg1], inSingle ;Set the bits! Gets the lock!
   861 00001AFB 4889251DE5FFFF      <1>     mov qword [int2Ersp], rsp   ;Save the far stack pointer 
   862 00001B02 488B25FCE4FFFF      <1>     mov rsp, qword [stackTop]    ;Set to use the internal stack
   863 00001B09 B800510000          <1>     mov eax, 5100h ;Get Current PSP in rdx
   864 00001B0E CD21                <1>     int 21h
   865 00001B10 48891D00E5FFFF      <1>     mov qword [int2Epsp], rbx
   866 00001B17 52                  <1>     push rdx    ;Save on the stack
   867 00001B18 488B1DF0E4FFFF      <1>     mov rbx, qword [pspPtr] ;Get the psp for this COMMAND.COM
   868 00001B1F B800500000          <1>     mov eax, 5000h ;Set this version of COMMAND.COM as the current PSP
   869 00001B24 CD21                <1>     int 21h
   870 00001B26 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   871 00001B29 4989D9              <1>     mov r9, rbx
   872 00001B2C 488D3D2FE6FFFF      <1>     lea rdi, inBuffer + 1
   873 00001B33 B910000000          <1>     mov ecx, 10h    ;80h/8
   874 00001B38 FC                  <1>     cld
   875 00001B39 F348A5              <1>     rep movsq   ;Zoom zoom copy command line over
   876 00001B3C E883FFFFFF          <1>     call getSetMainState    ;Ensure the buffers have their lengths set
   877 00001B41 803D1AE6FFFF00      <1>     cmp byte [inBuffer + 1], 0
   878 00001B48 0F8523F6FFFF        <1>     jne commandMain.goSingle    ;Proceed if we have anything to execute
   879                              <1> int2ERet:
   880 00001B4E E86D2A0000          <1>     call clearCommandLineState  ;Be a good citizen, leave it as we found it!
   881 00001B53 488B25C5E4FFFF      <1>     mov rsp, qword [int2Ersp]
   882 00001B5A 488B1DB6E4FFFF      <1>     mov rbx, qword [int2Epsp] ;Get Old current PSP in rbx
   883 00001B61 B800500000          <1>     mov eax, 5000h ;Set Current PSP
   884 00001B66 CD21                <1>     int 21h
   885 00001B68 0FB7059EE4FFFF      <1>     movzx eax, word [returnCode]    ;Get the return code in eax
   886 00001B6F 80251EE5FFFFFB      <1>     and byte [statFlg1], ~inSingle  ;Clear that we are in single mode
   887 00001B76 48CF                <1>     iretq
   888                              <1> 
   889                              <1> int2EcheckReentry:
   890                              <1> ;Now we check if we DOSMGR is installed. If so, put task on ice
   891                              <1> ; else, return with CF=CY.
   892 00001B78 B800520000          <1>     mov eax, 5200h  ;Get sysvars
   893 00001B7D CD21                <1>     int 21h
   894 00001B7F F64363FF            <1>     test byte [rbx + 63h], -1   ;check the sysVars.dosMgrPresent byte
   895 00001B83 7512                <1>     jnz short .multifnd
   896 00001B85 B800030000          <1>     mov eax, 0300h   ;Are we here check on Int 2Fh
   897 00001B8A CD2F                <1>     int 2Fh
   898 00001B8C 84C0                <1>     test al, al ;This must still be zero, else something installed
   899 00001B8E 7507                <1>     jnz .multifnd
   900 00001B90 804C241001          <1>     or byte [rsp + 2*8], 1  ;Else return with CF=CY, already processing
   901 00001B95 48CF                <1>     iretq   
   902                              <1> .multifnd:
   903                              <1> ;Recognised multitasker present, we now spinlock until flag is clear!
   904 00001B97 F390                <1>     pause
   905 00001B99 F605F4E4FFFF04      <1>     test byte [statFlg1], inSingle   ;Is this bit set?
   906 00001BA0 75F5                <1>     jnz .multifnd
   907 00001BA2 E94DFFFFFF          <1>     jmp int2Eh.multiJoin            ;Rejoin the norm now
    17                                  %include "./Source/cmdBat.asm"
     1                              <1> ;Main Batch processing routines go here!
     2                              <1> 
     3                              <1> batLaunch:
     4                              <1> ;Preps and launches a batch file! Called with rdx pointing to the filespec :)
     5 00001BA7 BB200B0000          <1>     mov ebx, bbMaxAlloc << 4    ;Convert to paragraphs
     6 00001BAC B800480000          <1>     mov eax, 4800h
     7 00001BB1 CD21                <1>     int 21h
     8 00001BB3 730A                <1>     jnc .bbAlloced
     9 00001BB5 E8F0020000          <1>     call badNoMemError  ;Print not enough mem error
    10 00001BBA E9EAF9FFFF          <1>     jmp  redirPipeFailureCommon.noPrint ;Clean up all redir and ret to cmdline
    11                              <1> .bbAlloced:
    12 00001BBF 488905E5E4FFFF      <1>     mov qword [bbPtr], rax  ;Save the ptr here!
    13 00001BC6 4889C3              <1>     mov rbx, rax
    14 00001BC9 4889DF              <1>     mov rdi, rbx
    15 00001BCC 31C0                <1>     xor eax, eax
    16 00001BCE B9B2000000          <1>     mov ecx, bbMaxAlloc     
    17 00001BD3 F3AA                <1>     rep stosb               ;Clean the arena
    18 00001BD5 4889DF              <1>     mov rdi, rbx            ;Point back to the head
    19 00001BD8 8A05B8E4FFFF        <1>     mov al, byte [echoFlg]
    20 00001BDE 884301              <1>     mov byte [rbx + batBlockHdr.bEchoFlg], al
    21 00001BE1 B8FFFFFFFF          <1>     mov eax, -1
    22 00001BE6 B905000000          <1>     mov ecx, 5
    23 00001BEB 488D7B1B            <1>     lea rdi, qword [rbx + batBlockHdr.wArgs]    ;Init the wArgs to no params!
    24 00001BEF F3AB                <1>     rep stosd   ;Store in dwords for speed. Leave rdi pointing at .cmdLine
    25 00001BF1 66C7431B0000        <1>     mov word [rbx + batBlockHdr.wArgs], 0   ;Arg %0 starts at offset 0!
    26 00001BF7 488D35E9E6FFFF      <1>     lea rsi, cmdPathSpec
    27 00001BFE E84D290000          <1>     call strcpy     ;Leave rdi past the terminating null
    28 00001C03 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get char cnt for copy
    29 00001C0B 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get copy source
    30 00001C12 57                  <1>     push rdi    ;Save the ptr to the start of cmd tail in batblock
    31 00001C13 F3A4                <1>     rep movsb   ;Copy the command tail over
    32                              <1>     ;Since this copy is shorter than the space we have, we already have a free
    33                              <1>     ; terminating null. All good!
    34 00001C15 5E                  <1>     pop rsi 
    35                              <1>     ;Now analyse the command line to get the word offsets. Get at most 10
    36 00001C16 B901000000          <1>     mov ecx, 1  ;Start with argument 1
    37                              <1> .bbFndLp:
    38 00001C1B E86E290000          <1>     call skipDelimiters ;Skip leading delimiters, leave rsi at char1
    39 00001C20 E8E7000000          <1>     call .bbCheckEndOfCmdLine   ;Is this the end of the command?
    40 00001C25 7428                <1>     je .bbArgsDone      ;Yes
    41                              <1>     ;Add the entry to the table!
    42 00001C27 4889F0              <1>     mov rax, rsi
    43 00001C2A 488D532F            <1>     lea rdx, qword [rbx + batBlockHdr.cmdLine]  ;Get addr of start of cmdline
    44 00001C2E 4829D0              <1>     sub rax, rdx    ;Now get the difference in ax
    45 00001C31 6689440B1B          <1>     mov word [rbx + batBlockHdr.wArgs + rcx], ax    ;Store this offset here
    46                              <1>     
    47 00001C36 FFC1                <1>     inc ecx
    48 00001C38 81F90A000000        <1>     cmp ecx, 10         ;Did we just process %9?
    49 00001C3E 740F                <1>     je .bbArgsDone
    50                              <1> .bbFndLp2:
    51 00001C40 AC                  <1>     lodsb   ;Getch
    52 00001C41 E856290000          <1>     call isALdelimiter  ;If this is a delimiter, we are at the end of the command
    53 00001C46 74D3                <1>     je .bbFndLp
    54 00001C48 E8BF000000          <1>     call .bbCheckEndOfCmdLine
    55 00001C4D 75F1                <1>     jne .bbFndLp2   ;If not end of cmdline, see if next char delim
    56                              <1> .bbArgsDone:
    57                              <1> ;Now copy the batch name, need to figure the full path to it.
    58 00001C4F 488D3591E6FFFF      <1>     lea rsi, cmdPathSpec
    59 00001C56 488D3D56E4FFFF      <1>     lea rdi, batFile
    60 00001C5D 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
    61 00001C60 80FC3A              <1>     cmp ah, ":"
    62 00001C63 746D                <1>     je .bbdrvGiven
    63 00001C65 3A05BEE3FFFF        <1>     cmp al, byte [pathSep]  ;Is the first char a pathsep?
    64 00001C6B 7458                <1>     je .bbCDrvAbs
    65                              <1> ;Current drive relative
    66 00001C6D E8D9280000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
    67 00001C72 0441                <1>     add al, "A"
    68 00001C74 B43A                <1>     mov ah, ":"
    69 00001C76 66AB                <1>     stosw   ;Store these two chars, adv rdi
    70                              <1> .bbRelPath:
    71 00001C78 8A05ABE3FFFF        <1>     mov al, byte [pathSep]  
    72 00001C7E AA                  <1>     stosb   ;Store the pathsep
    73 00001C7F 8A052EE4FFFF        <1>     mov al, byte [batFile]  ;Now get the drive letter into al
    74 00001C85 E8E9280000          <1>     call ucChar             ;UC it
    75 00001C8A 880523E4FFFF        <1>     mov byte [batFile], al  ;and overwrite it :)
    76 00001C90 2C40                <1>     sub al, "@"             ;Convert into a 1 based drive number
    77 00001C92 88C2                <1>     mov dl, al
    78 00001C94 56                  <1>     push rsi        ;Save remaining char source
    79 00001C95 4889FE              <1>     mov rsi, rdi    ;rdi is where we want to store the file name
    80 00001C98 B800470000          <1>     mov eax, 4700h  ;Get Current Directory
    81 00001C9D CD21                <1>     int 21h
    82 00001C9F 5E                  <1>     pop rsi
    83 00001CA0 7311                <1>     jnc .bbRelPathOk
    84 00001CA2 488D1500ECFFFF      <1>     lea rdx, badBat
    85 00001CA9 E895260000          <1>     call printString
    86 00001CAE E963000000          <1>     jmp batFinish   ;Now clean up the batch stuff we've setup
    87                              <1> .bbRelPathOk:
    88                              <1> ;Now move rdi to the terminating null   
    89 00001CB3 31C0                <1>     xor eax, eax
    90 00001CB5 31C9                <1>     xor ecx, ecx
    91 00001CB7 F2AE                <1>     repne scasb ;Find the terminating null
    92 00001CB9 48FFCF              <1>     dec rdi ;Now point to the terminating null
    93 00001CBC 8A0567E3FFFF        <1>     mov al, byte [pathSep]
    94 00001CC2 AA                  <1>     stosb   ;Store this pathsep over the original null
    95                              <1>     ;Now we are ready to copy the command line passed to us by the user
    96                              <1>     ; to rdi. rsi points to where to source the rest of the chars
    97 00001CC3 EB1B                <1>     jmp short .bbCpName
    98                              <1> .bbCDrvAbs:
    99                              <1> ;Current drive absolute. Get current drive into buffer
   100 00001CC5 E881280000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
   101 00001CCA 0441                <1>     add al, "A"
   102 00001CCC B43A                <1>     mov ah, ":"
   103 00001CCE 66AB                <1>     stosw   ;Store these two chars
   104                              <1>     ;Now we are ready to copy the command line passed to us by the user
   105                              <1>     ; to rdi. rsi points to where to source the rest of the chars
   106 00001CD0 EB0E                <1>     jmp short .bbCpName
   107                              <1> .bbdrvGiven:
   108                              <1> ;Drive given X:
   109 00001CD2 66A5                <1>     movsw   ;Move over the X:, point rsi to the first new char
   110 00001CD4 AC                  <1>     lodsb
   111 00001CD5 48FFCE              <1>     dec rsi ;Get the char and point back to it
   112 00001CD8 3A054BE3FFFF        <1>     cmp al, byte [pathSep]  ;Is char three a pathsep?
   113 00001CDE 7598                <1>     jne .bbRelPath
   114                              <1> .bbCpName:
   115 00001CE0 E86B280000          <1>     call strcpy ;Copy the remaining portion
   116 00001CE5 488D35C7E3FFFF      <1>     lea rsi, batFile
   117 00001CEC 4889F7              <1>     mov rdi, rsi
   118 00001CEF B811120000          <1>     mov eax, 1211h  ;Normalise the path :)
   119 00001CF4 CD2F                <1>     int 2fh
   120                              <1> ;Now deactivate any redirs. Do redir out as cleanupRedirs somewhat ignores it.
   121                              <1> ;Do the handle close as deleting the file without closing the handle is asking 
   122                              <1> ; for SHARING trouble...
   123 00001CF6 E8D4F9FFFF          <1>     call cleanRedirOut      ;Liquidates redirout if needed
   124 00001CFB E8B3F8FFFF          <1>     call cleanupRedirs      ;Now liquidate remaining redirs and pipes
   125 00001D00 800D8DE3FFFF08      <1>     or byte [statFlg1], inBatch ;Fire up the batch processor!
   126 00001D07 E901F4FFFF          <1>     jmp commandMain         ;Now we start reading the batch file!
   127                              <1> 
   128                              <1> .bbCheckEndOfCmdLine:
   129                              <1> ;Input: rsi -> Char to check 
   130                              <1> ;Output: ZF=ZE if we hit a CR or a <NUL>
   131 00001D0C 803E00              <1>     cmp byte [rsi], 0
   132                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001D0F 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001D11 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   133 00001D12 803E0D              <1>     cmp byte [rsi], CR
   134                              <1>     return
    13                              <2> %%_ret:
    14 00001D15 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> batFinish:
   137                              <1> ;This is the procedure called after we've processed the last batch line
   138 00001D16 E834010000          <1>     call batCleanup     ;Cleanup the batch and batch state vars etc etc
   139 00001D1B E9EDF3FFFF          <1>     jmp commandMain     ;And start again :)
   140                              <1> batNextLine:
   141                              <1> ;Read the next line from the file and sets if we are done with copying
   142 00001D20 F6056DE3FFFF10      <1>     test byte [statFlg1], batchEOF ;Did we hit EOF?
   143 00001D27 75ED                <1>     jnz batFinish
   144 00001D29 488D1583E3FFFF      <1>     lea rdx, batFile
   145                              <1> .batOpen:
   146 00001D30 B8003D0000          <1>     mov eax, 3D00h  ;Open for read only
   147 00001D35 CD21                <1>     int 21h
   148 00001D37 7315                <1>     jnc .batOpened
   149 00001D39 488D1580EBFFFF      <1>     lea rdx, needBat
   150 00001D40 E8FE250000          <1>     call printString
   151 00001D45 B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Allows for triggering ^C
   152 00001D4A CD21                <1>     int 21h
   153 00001D4C EBE2                <1>     jmp short .batOpen
   154                              <1> .batOpened:
   155 00001D4E 89C3                <1>     mov ebx, eax            ;Move the handle into ebx
   156 00001D50 488B3554E3FFFF      <1>     mov rsi, qword [bbPtr]  ;Get the batch block ptr
   157 00001D57 8B5613              <1>     mov edx, dword [rsi + batBlockHdr.dBatOffLo]
   158 00001D5A 8B4E17              <1>     mov ecx, dword [rsi + batBlockHdr.dBatOffHi]
   159 00001D5D B800420000          <1>     mov eax, 4200h          ;LSEEK to where we left off previously
   160 00001D62 CD21                <1>     int 21h
   161 00001D64 C605F7E3FFFF00      <1>     mov byte [inBuffer + 1], 0  ;Reset the buffer count
   162 00001D6B 488D15F1E3FFFF      <1>     lea rdx, inBuffer + 2   ;Start read pos
   163 00001D72 31FF                <1>     xor edi, edi            ;Use edi as the char counter
   164                              <1> .readlp:
   165 00001D74 E8BD000000          <1>     call .readChar          ;Read the char
   166 00001D79 85C0                <1>     test eax, eax
   167 00001D7B 7425                <1>     jz .endOfBatAddCr
   168 00001D7D FFC7                <1>     inc edi                 ;We read a char, woohoo!
   169 00001D7F 803A1A              <1>     cmp byte [rdx], EOF     ;Did we read a ^Z char?
   170 00001D82 741E                <1>     je .endOfBatAddCr
   171 00001D84 803A0D              <1>     cmp byte [rdx], CR      ;End of line?
   172 00001D87 7436                <1>     je .endOfLineCr
   173 00001D89 803A0A              <1>     cmp byte [rdx], LF      ;End of line UNIX?
   174 00001D8C 7441                <1>     je .endOfLineLf
   175 00001D8E FE05CEE3FFFF        <1>     inc byte [inBuffer + 1] ;Inc our char count
   176 00001D94 48FFC2              <1>     inc rdx                 ;Store the next char in the next position
   177 00001D97 803DC4E3FFFF80      <1>     cmp byte [inBuffer + 1], 128    ;Are we 128 chars w/o CR?
   178 00001D9E 75D4                <1>     jne .readlp             ;Get next char if not
   179 00001DA0 EB30                <1>     jmp short .endOfLine    ;The user typed too many chars on a line, EOL
   180                              <1> .endOfBatAddCr:
   181 00001DA2 C6020D              <1>     mov byte [rdx], CR  ;Store a terminating CR on the line!
   182                              <1> .endOfBat:
   183 00001DA5 800DE8E2FFFF10      <1>     or byte [statFlg1], batchEOF    ;Set if we encounter a ^Z terminator
   184 00001DAC 803DAFE3FFFF00      <1>     cmp byte [inBuffer + 1], 0      ;If we formally read 0 chars, exit!
   185 00001DB3 751D                <1>     jne .endOfLine
   186 00001DB5 E874000000          <1>     call .closeBat                  ;Close the hdl! This is why this is here!
   187 00001DBA E957FFFFFF          <1>     jmp batFinish
   188                              <1> .endOfLineCr:   ;Now get the next char, to possibly eliminate a trailing LF
   189 00001DBF E872000000          <1>     call .readChar  ;Get the LF over the CR
   190 00001DC4 85C0                <1>     test eax, eax   ;Did we read nothing?
   191 00001DC6 74DD                <1>     jz .endOfBat    ;That CR was last char, check if empty buffer, else exec
   192 00001DC8 803A0A              <1>     cmp byte [rdx], LF  ;Did we read a LF?
   193 00001DCB 7502                <1>     jne .endOfLineLf    ;Reread this char if not LF
   194 00001DCD FFC7                <1>     inc edi             ;Else add to the count
   195                              <1> .endOfLineLf:
   196 00001DCF C6020D              <1>     mov byte [rdx], CR  ;Now place the CR over the last char
   197                              <1> .endOfLine:
   198                              <1> ;Close the file, update the batch block file pointer, then proceed.
   199                              <1> ;rsi -> Batch block.
   200 00001DD2 E857000000          <1>     call .closeBat
   201                              <1>     ;Imagine someone gives us a 2+Gb Batch file... some server magik lmao
   202 00001DD7 017E13              <1>     add dword [rsi + batBlockHdr.dBatOffLo], edi    ;Add lo dword to chars 
   203 00001DDA 81561700000000      <1>     adc dword [rsi + batBlockHdr.dBatOffHi], 0      ;Add CF if needed!
   204                              <1> ;Now we echo the line to the console unless the first char is @ or 
   205                              <1> ; the echo flag is off
   206 00001DE1 488D157BE3FFFF      <1>     lea rdx, inBuffer + 2
   207 00001DE8 803A40              <1>     cmp byte [rdx], batNoEchoChar
   208 00001DEB 7421                <1>     je .noEchoPull       
   209 00001DED F605A2E2FFFFFF      <1>     test byte [echoFlg], -1         
   210 00001DF4 7413                <1>     jz .noEcho
   211 00001DF6 0FB60D65E3FFFF      <1>     movzx ecx, byte [inBuffer + 1]    ;Get the number of chars to print
   212 00001DFD BB01000000          <1>     mov ebx, 1  ;STDOUT
   213 00001E02 B800400000          <1>     mov eax, 4000h  ;Write woo!
   214 00001E07 CD21                <1>     int 21h
   215                              <1> .noEcho:
   216 00001E09 E955F3FFFF          <1>     jmp commandMain.batProceed
   217                              <1> .noEchoPull:
   218 00001E0E FE0D4EE3FFFF        <1>     dec byte [inBuffer + 1]     ;Eliminate the @ char
   219 00001E14 0F8406FFFFFF        <1>     jz batNextLine    ;If this was just a @<CR><LF>, get next line
   220 00001E1A 4889D7              <1>     mov rdi, rdx
   221 00001E1D 488D7201            <1>     lea rsi, qword [rdx + 1]    ;Start from the char afterwards
   222 00001E21 0FB60D3AE3FFFF      <1>     movzx ecx, byte [inBuffer + 1]  ;Get the remaining count to copy
   223 00001E28 FFC1                <1>     inc ecx                         ;Want to copy over the terminating CR too
   224 00001E2A F3A4                <1>     rep movsb 
   225 00001E2C EBDB                <1>     jmp short .noEcho   ;Now proceed normally
   226                              <1>     
   227                              <1> .closeBat:
   228                              <1> ;Close the handle in rbx
   229 00001E2E B8003E0000          <1>     mov eax, 3E00h  ;Close the file pointer in ebx
   230 00001E33 CD21                <1>     int 21h         ;We ignore errors here... dont hurt me SHARE pls
   231                              <1>     return
    13                              <2> %%_ret:
    14 00001E35 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   232                              <1> .readChar:
   233                              <1> ;Reads a char. If no chars read, sets the EOF flag!
   234 00001E36 B901000000          <1>     mov ecx, 1
   235 00001E3B B8003F0000          <1>     mov eax, 3F00h
   236 00001E40 CD21                <1>     int 21h  
   237 00001E42 85C0                <1>     test eax, eax
   238                              <1>     retnz   ;If a char read, return
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001E44 75(35)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   239 00001E46 800D47E2FFFF10      <1>     or byte [statFlg1], batchEOF    ;Set the end of file reached flag!
   240                              <1>     return
    13                              <2> %%_ret:
    14 00001E4D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   241                              <1> 
   242                              <1> 
   243                              <1> batExpandVar:
   244                              <1> ;Input: rsi -> Char after the % sign that triggered this call.
   245                              <1> ;       rdi -> Position to place the substitution string
   246                              <1> ;Output: CF=NC: Substitution string is placed in buffer
   247                              <1> ;        CF=CY: No substitution string found
   248                              <1>     return
    13                              <2> %%_ret:
    14 00001E4E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   249                              <1>     ;cmp byte [rsi], "%"
   250                              <1> 
   251                              <1> batCleanup:
   252                              <1> ;This function is called after the last line has been processed by the 
   253                              <1> ; batch interpreter! Cleans up all the batch resources. Also called if 
   254                              <1> ; CTRLC called during a batch job and the user wants to kill the batch.
   255 00001E4F 488B1D55E2FFFF      <1>     mov rbx, qword [bbPtr]
   256 00001E56 8A4301              <1>     mov al, byte [rbx + batBlockHdr.bEchoFlg]   ;Reset the echo flag
   257 00001E59 880537E2FFFF        <1>     mov byte [echoFlg], al
   258                              <1> ;-----------------------------------------------------------------------
   259                              <1> ;===Now free the FOR and CALL blocks... oops havent implemented yet!!===
   260                              <1> ; FOR blocks are generally cleaned up by the FOR command. CALL too. 
   261                              <1> ; But since this is the routine called by the error handler too, it 
   262                              <1> ; needs to check for these things. Not a big deal as normally we'll 
   263                              <1> ; just have a null pointer.
   264                              <1> ;-----------------------------------------------------------------------
   265                              <1> ;Finally free this batch header
   266 00001E5F 4150                <1>     push r8
   267 00001E61 4989D8              <1>     mov r8, rbx
   268 00001E64 B800490000          <1>     mov eax, 4900h
   269 00001E69 CD21                <1>     int 21h
   270 00001E6B 4158                <1>     pop r8
   271 00001E6D E841F7FFFF          <1>     call cleanupRedirs  ;Clean up all redirections, close files etc
   272 00001E72 48C7052EE2FFFF0000- <1>     mov qword [bbPtr], 0    
   272 00001E7B 0000                <1>
   273 00001E7D 802510E2FFFFE7      <1>     and byte [statFlg1], ~(inBatch|batchEOF)   ;Oh bye bye batch mode!
   274                              <1>     return
    13                              <2> %%_ret:
    14 00001E84 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badDiskFull:
     7                              <1> ;This is a different error return, as this closes handles and prints
     8                              <1> ; disk full error and resets the command line!
     9 00001E85 488D15D3EAFFFF      <1>     lea rdx, noSpace
    10 00001E8C 488D0DEFEDFFFF      <1>     lea rcx, pipeErr
    11 00001E93 F605FFE1FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the flag set
    12 00001E9A 746F                <1>     jz short badCmn ;If its just disk full, dont go through pipe clean
    13 00001E9C 480F45D1            <1>     cmovnz rdx, rcx ;Swap error messages if pipe flag is on
    14 00001EA0 E866000000          <1>     call badCmn     ;Print the string
    15 00001EA5 E9FFF6FFFF          <1>     jmp redirPipeFailureCommon.noPrint  ;Now close pipes and fully reset!
    16                              <1> badNoMemError:
    17 00001EAA 488D159DEEFFFF      <1>     lea rdx, noMemMsg
    18 00001EB1 EB58                <1>     jmp short badCmn
    19                              <1> badSyntaxError:
    20 00001EB3 488D15A1EDFFFF      <1>     lea rdx, syntaxErr
    21 00001EBA EB4F                <1>     jmp short badCmn
    22                              <1> badEnvSpaceError:
    23 00001EBC 488D15B6EAFFFF      <1>     lea rdx, noEnvSpace
    24 00001EC3 EB46                <1>     jmp short badCmn
    25                              <1> badAccError:
    26 00001EC5 488D153BEDFFFF      <1>     lea rdx, accDenMsg
    27 00001ECC EB3D                <1>     jmp short badCmn
    28                              <1> badParamError:
    29 00001ECE 488D15B0EBFFFF      <1>     lea rdx, badParm
    30 00001ED5 EB34                <1>     jmp short badCmn
    31                              <1> badDriveError:
    32 00001ED7 488D156AEBFFFF      <1>     lea rdx, badDrv
    33 00001EDE EB2B                <1>     jmp short badCmn
    34                              <1> badArgError:
    35 00001EE0 488D152DEEFFFF      <1>     lea rdx, badArgs
    36 00001EE7 EB22                <1>     jmp short badCmn
    37                              <1> badFileError:
    38 00001EE9 488D1508EEFFFF      <1>     lea rdx, badSpec
    39 00001EF0 EB19                <1>     jmp short badCmn
    40                              <1> badDupFnf:
    41                              <1> ;Hybrid error message
    42 00001EF2 488D153EEAFFFF      <1>     lea rdx, dupName
    43 00001EF9 EB10                <1>     jmp short badCmn
    44                              <1> badFnf:
    45 00001EFB 488D154CEAFFFF      <1>     lea rdx, fnfMsg
    46 00001F02 EB07                <1>     jmp short badCmn
    47                              <1> badDirError:
    48 00001F04 488D157BECFFFF      <1>     lea rdx, badDir
    49                              <1> badCmn:
    50 00001F0B E933240000          <1>     jmp printString     ;This will be made nuanced later, to agree with DOS
    51                              <1> badCmdError:
    52 00001F10 488D1505EAFFFF      <1>     lea rdx, badCmd
    53 00001F17 EBF2                <1>     jmp short badCmn
    54                              <1> dir:
    55                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    56 00001F19 C60574E6FFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    57 00001F20 C6056EE6FFFF00      <1>     mov byte [dirLineCtr], 0
    58 00001F27 C70565E6FFFF000000- <1>     mov dword [dirFileCtr], 0
    58 00001F30 00                  <1>
    59 00001F31 C60563E6FFFF00      <1>     mov byte [dirSrchDir], 0
    60 00001F38 66C7054FE5FFFF0000  <1>     mov word [searchSpec], 0
    61 00001F41 488D3DD5E6FFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    62 00001F48 C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    63 00001F4B 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    63 00001F54 3F                  <1>
    64 00001F55 48894701            <1>     mov qword [rdi + fcb.filename], rax
    65 00001F59 C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    66                              <1>     ;Start by scanning for the switches
    67 00001F60 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    68 00001F67 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    69                              <1> .scanNew:
    70 00001F6A E81F260000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    71 00001F6F AC                  <1>     lodsb   ;Get this char
    72 00001F70 3C0D                <1>     cmp al, CR
    73 00001F72 744D                <1>     je .scanDone
    74 00001F74 3A05B0E0FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    75 00001F7A 7524                <1>     jne .notSwitch
    76 00001F7C AC                  <1>     lodsb   ;Get the next char
    77 00001F7D E8F1250000          <1>     call ucChar
    78 00001F82 3C57                <1>     cmp al, "W"
    79 00001F84 7509                <1>     jne .notWide
    80 00001F86 800D07E6FFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    81 00001F8D EBDB                <1>     jmp short .scanNew
    82                              <1> .notWide:
    83 00001F8F 3C50                <1>     cmp al, "P"
    84 00001F91 0F8537FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    85 00001F97 800DF6E5FFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    86 00001F9E EBCA                <1>     jmp short .scanNew
    87                              <1> .notSwitch:
    88 00001FA0 F605EDE5FFFF04      <1>     test byte [dirFlags], dirFileType
    89 00001FA7 0F8521FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    90                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    91 00001FAD 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    92 00001FB0 E865270000          <1>     call copyArgumentToSearchSpec   
    93 00001FB5 48FFCE              <1>     dec rsi ;Point back to the terminator char
    94 00001FB8 800DD5E5FFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    95 00001FBF EBA9                <1>     jmp short .scanNew
    96                              <1> .scanDone:
    97 00001FC1 F605CCE5FFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    98 00001FC8 7438                <1>     jz .currentDrv
    99                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   100 00001FCA 488D35BFE4FFFF      <1>     lea rsi, searchSpec
   101 00001FD1 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   102 00001FD5 752B                <1>     jne .currentDrv
   103                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   104 00001FD7 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   105 00001FDC 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   106 00001FE0 B801290000          <1>     mov eax, 2901h   ;Parse filename
   107 00001FE5 CD21                <1>     int 21h
   108 00001FE7 3CFF                <1>     cmp al, -1
   109 00001FE9 0F84E8FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   110                              <1>     ;Else the drive in the fcb is valid
   111 00001FEF 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   112 00001FF4 84C0                <1>     test al, al
   113 00001FF6 740A                <1>     jz .currentDrv
   114 00001FF8 FEC8                <1>     dec al  ;Convert to 0 based drive number
   115 00001FFA 88059AE5FFFF        <1>     mov byte [dirDrv], al
   116 00002000 EB0B                <1>     jmp short .dirPrintVol
   117                              <1> .currentDrv:
   118 00002002 E844250000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   119 00002007 88058DE5FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   120                              <1> .dirPrintVol:
   121 0000200D 488D357CE4FFFF      <1>     lea rsi, searchSpec
   122                              <1> ;Now construct the path on dirSrchDir.
   123 00002014 488D3D80E5FFFF      <1>     lea rdi, dirSrchDir
   124 0000201B 0FB60578E5FFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   125 00002022 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   126 00002024 0441                <1>     add al, "A" ;Turn into a letter
   127 00002026 B43A                <1>     mov ah, ":"
   128 00002028 66AB                <1>     stosw   ;Store X: into the search path
   129 0000202A B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   130 0000202F CD2F                <1>     int 2fh
   131 00002031 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   132 00002033 0F849EFEFFFF        <1>     je badDriveError
   133                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   134 00002039 8A05EADFFFFF        <1>     mov al, byte [pathSep]
   135 0000203F 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   136 00002041 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   137 00002043 AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   138 00002044 FEC2                <1>     inc dl  ;Increment by 1
   139 00002046 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   140 00002049 B800470000          <1>     mov eax, 4700h  ;Print current working directory
   141 0000204E CD21                <1>     int 21h
   142 00002050 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   143                              <1>     ;rsi points to the first char in the provided path.
   144                              <1>     ;rdi points to the first char of the cwd.
   145 00002053 31C0                <1>     xor eax, eax
   146                              <1> .goToEndOfCwd:
   147                              <1> ;Move to the end of the string, could use repne?
   148 00002055 3807                <1>     cmp byte [rdi], al
   149 00002057 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   150 00002059 48FFC7              <1>     inc rdi
   151 0000205C EBF7                <1>     jmp short .goToEndOfCwd
   152                              <1> .prepCopy:
   153 0000205E 8A05C5DFFFFF        <1>     mov al, byte [pathSep]
   154 00002064 3806                <1>     cmp byte [rsi], al
   155 00002066 7412                <1>     je .copyPathLoop
   156 00002068 B43A                <1>     mov ah, ":"
   157 0000206A 86C4                <1>     xchg al, ah
   158 0000206C 663947FE            <1>     cmp word [rdi - 2], ax
   159 00002070 7408                <1>     je .copyPathLoop
   160 00002072 88E0                <1>     mov al, ah
   161 00002074 3847FF              <1>     cmp byte [rdi - 1], al
   162 00002077 7401                <1>     je .copyPathLoop
   163 00002079 AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   164                              <1> .copyPathLoop:
   165 0000207A AC                  <1>     lodsb
   166 0000207B 3A05A8DFFFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   167 00002081 7509                <1>     jne .checkDot  ;If not, store it
   168                              <1> .lpPathseps:
   169 00002083 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   170 00002085 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   171 00002087 48FFC6              <1>     inc rsi
   172 0000208A EBF7                <1>     jmp short .lpPathseps
   173                              <1> .checkDot:
   174 0000208C 3C2E                <1>     cmp al, "."
   175 0000208E 7407                <1>     je .dots
   176                              <1> .store:
   177 00002090 AA                  <1>     stosb
   178 00002091 84C0                <1>     test al, al ;Was the char we just copied a null?
   179 00002093 7472                <1>     jz .exitPathCopy
   180 00002095 EBE3                <1>     jmp short .copyPathLoop
   181                              <1> .dots:
   182                              <1>     ;Here handle dot and dot dot
   183                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   184                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   185                              <1>     ; by 1. If it is null, go to top of loop.
   186                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   187 00002097 8A258CDFFFFF        <1>     mov ah, byte [pathSep]
   188 0000209D 3867FF              <1>     cmp byte [rdi - 1], ah  
   189 000020A0 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   190 000020A2 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   191 000020A4 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   192 000020A7 7413                <1>     je .twoDot
   193                              <1>     ;This is only a "current dir" when next char is pathsep or null
   194 000020A9 3A257ADFFFFF        <1>     cmp ah, byte [pathSep]
   195 000020AF 7406                <1>     je .skipThisPathsep
   196 000020B1 84E4                <1>     test ah, ah
   197 000020B3 74C5                <1>     jz .copyPathLoop
   198 000020B5 EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   199                              <1> .skipThisPathsep:
   200                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   201 000020B7 48FFC6              <1>     inc rsi ;Point to the pathsep
   202 000020BA EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   203                              <1> .twoDot:
   204                              <1>     ;Woohoo, this works!
   205 000020BC 48FFC6              <1>     inc rsi ;Move past the second dot
   206 000020BF 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   207 000020C1 3A2562DFFFFF        <1>     cmp ah, byte [pathSep]
   208 000020C7 7408                <1>     je .tdOk
   209 000020C9 84E4                <1>     test ah, ah
   210 000020CB 0F85FDFDFFFF        <1>     jne badParamError
   211                              <1> .tdOk:
   212 000020D1 8A0552DFFFFF        <1>     mov al, byte byte [pathSep]
   213 000020D7 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   214 000020DB 0F84EDFDFFFF        <1>     je badParamError
   215 000020E1 4881EF02000000      <1>     sub rdi, 2
   216 000020E8 31C9                <1>     xor ecx, ecx
   217 000020EA FFC9                <1>     dec ecx
   218 000020EC FD                  <1>     std
   219 000020ED F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   220 000020EF FC                  <1>     cld
   221 000020F0 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   222 000020F7 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   223 000020F9 0F847BFFFFFF        <1>     jz .copyPathLoop
   224 000020FF 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   225 00002102 E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   226                              <1> .exitPathCopy:
   227                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   228 00002107 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   229 0000210E 8A0515DFFFFF        <1>     mov al, byte [pathSep]
   230 00002114 B43A                <1>     mov ah, ":"
   231 00002116 86C4                <1>     xchg al, ah
   232 00002118 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   233 0000211C 7409                <1>     je .skipOverwrite
   234 0000211E 88E0                <1>     mov al, ah
   235 00002120 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   236 00002122 7503                <1>     jne .skipOverwrite
   237 00002124 C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   238                              <1> .skipOverwrite:
   239 00002127 488D356DE4FFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   240 0000212E 4889F7              <1>     mov rdi, rsi
   241 00002131 B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   242 00002136 CD2F                <1>     int 2fh
   243 00002138 E8EA250000          <1>     call scanForWildcards
   244 0000213D 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   245 0000213F 4889F2              <1>     mov rdx, rsi
   246 00002142 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   247 00002146 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   248                              <1> .notNull:
   249 00002148 E8DE260000          <1>     call setDTA ;Set the DTA
   250 0000214D B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   251 00002152 B8004E0000          <1>     mov eax, 4E00h ;Find first
   252 00002157 CD21                <1>     int 21h
   253 00002159 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   254                              <1> ;Now we have searched for the file, is a directory?
   255 0000215B F605C9DFFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   256 00002162 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   257                              <1>     ;Here we are searching IN a directory. Default search pattern!
   258 00002164 31C0                <1>     xor eax, eax
   259 00002166 31C9                <1>     xor ecx, ecx
   260 00002168 FFC9                <1>     dec ecx
   261 0000216A F2AE                <1>     repne scasb
   262 0000216C 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   263 0000216F EB40                <1>     jmp short .wcDefaultSearch
   264                              <1> .wcSearchPattern:
   265                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   266                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   267 00002171 31C0                <1>     xor eax, eax
   268 00002173 31C9                <1>     xor ecx, ecx
   269 00002175 FFC9                <1>     dec ecx
   270 00002177 F2AE                <1>     repne scasb ;Scan forwards
   271                              <1>     ;Here rdi points past the null at the end
   272 00002179 8A05AADEFFFF        <1>     mov al, byte [pathSep]
   273 0000217F 31C9                <1>     xor ecx, ecx
   274 00002181 FFC9                <1>     dec ecx
   275 00002183 FD                  <1>     std ;Search backwards
   276 00002184 F2AE                <1>     repne scasb
   277 00002186 FC                  <1>     cld ;Search forwards again
   278 00002187 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   279 0000218A 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   280 0000218E 7503                <1>     jne .wcsp1
   281 00002190 48FFC7              <1>     inc rdi ;Go one char forwards
   282                              <1> .wcsp1:
   283                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   284 00002193 57                  <1>     push rdi
   285 00002194 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   286 00002196 7503                <1>     jne .wcsp2
   287 00002198 48FFC7              <1>     inc rdi
   288                              <1> .wcsp2:
   289 0000219B 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   290 0000219E 488D3D78E4FFFF      <1>     lea rdi, dirSrchFCB
   291 000021A5 B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   292 000021AA CD21                <1>     int 21h
   293 000021AC 5F                  <1>     pop rdi
   294 000021AD 31C0                <1>     xor eax, eax
   295 000021AF 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   296                              <1> .wcDefaultSearch:
   297 000021B1 0FB605E2E3FFFF      <1>     movzx eax, byte [dirDrv] 
   298 000021B8 E8C2160000          <1>     call volume.dirEP
   299 000021BD 488D152AEAFFFF      <1>     lea rdx, dirMain    ;Print message intro
   300 000021C4 B409                <1>     mov ah, 09h
   301 000021C6 CD21                <1>     int 21h
   302 000021C8 C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   303 000021CB 488D15C9E3FFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   304 000021D2 B409                <1>     mov ah, 09h
   305 000021D4 CD21                <1>     int 21h
   306 000021D6 C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   307 000021D9 488D15C4E6FFFF      <1>     lea rdx, crlf2
   308 000021E0 B409                <1>     mov ah, 09h
   309 000021E2 CD21                <1>     int 21h
   310                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   311                              <1> ;rdi points to the terminating null
   312 000021E4 8A053FDEFFFF        <1>     mov al, byte [pathSep]
   313 000021EA 3847FF              <1>     cmp byte [rdi - 1], al
   314 000021ED 7403                <1>     je .root
   315 000021EF 48FFC7              <1>     inc rdi
   316                              <1> .root:
   317 000021F2 48FFCF              <1>     dec rdi ;Point back to the pathsep
   318 000021F5 AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   319 000021F6 488D3521E4FFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   320 000021FD E867240000          <1>     call FCBToAsciiz    ;Terminates for free
   321 00002202 E801000000          <1>     call .searchForFile
   322                              <1>     return
    13                              <2> %%_ret:
    14 00002207 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   323                              <1> 
   324                              <1> .searchForFile:
   325 00002208 E81E260000          <1>     call setDTA
   326 0000220D B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   327 00002212 488D1582E3FFFF      <1>     lea rdx, dirSrchDir
   328 00002219 B8004E0000          <1>     mov eax, 4E00h ;Find first
   329 0000221E CD21                <1>     int 21h
   330 00002220 720B                <1>     jc .dirNoMoreFiles
   331                              <1> .findNext:
   332 00002222 E890000000          <1>     call .dirPrintFileData  ;Print the file information
   333 00002227 B44F                <1>     mov ah, 4Fh
   334 00002229 CD21                <1>     int 21h
   335 0000222B 73F5                <1>     jnc .findNext 
   336                              <1> .dirNoMoreFiles:
   337 0000222D F60560E3FFFF01      <1>     test byte [dirFlags], dirWideType
   338 00002234 740B                <1>     jz .dirNoEndNewLine
   339 00002236 488D1564E6FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   340 0000223D B409                <1>     mov ah, 09h
   341 0000223F CD21                <1>     int 21h
   342                              <1> .dirNoEndNewLine:
   343                              <1>     ;Now we print the number of files and the number of bytes on the disk
   344 00002241 F7054BE3FFFFFFFFFF- <1>     test dword [dirFileCtr], -1
   344 0000224A FF                  <1>
   345 0000224B 750D                <1>     jnz .filesFound
   346                              <1>     ;Else print File not found and exit!
   347 0000224D 488D15FAE6FFFF      <1>     lea rdx, fnfMsg
   348 00002254 E8EA200000          <1>     call printString
   349                              <1>     return
    13                              <2> %%_ret:
    14 00002259 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   350                              <1> .filesFound:
   351 0000225A 488D1562ECFFFF      <1>     lea rdx, fourSpc
   352 00002261 B409                <1>     mov ah, 09h
   353 00002263 CD21                <1>     int 21h
   354 00002265 B409                <1>     mov ah, 09h ;Print four Spaces twice
   355 00002267 CD21                <1>     int 21h
   356 00002269 8B0527E3FFFF        <1>     mov eax, dword [dirFileCtr]   ;Get number of files
   357 0000226F E8C7240000          <1>     call printDecimalWord
   358 00002274 488D15ACE7FFFF      <1>     lea rdx, dirOk
   359 0000227B B409                <1>     mov ah, 09h
   360 0000227D CD21                <1>     int 21h
   361 0000227F 488D1542ECFFFF      <1>     lea rdx, threeSpc
   362 00002286 B409                <1>     mov ah, 09h
   363 00002288 CD21                <1>     int 21h
   364 0000228A B800360000          <1>     mov eax, 3600h ;Get disk info
   365 0000228F 8A1505E3FFFF        <1>     mov dl, byte [dirDrv]
   366 00002295 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   367 00002297 CD21                <1>     int 21h ;Get disk free space info
   368 00002299 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   369 0000229C 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   370 0000229F 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   371 000022A1 F7E1                <1>     mul ecx ;Get bytes per cluster
   372 000022A3 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   373                              <1>     ;rax now has the number of free bytes on the disk
   374 000022A6 E890240000          <1>     call printDecimalWord
   375 000022AB 488D157FE7FFFF      <1>     lea rdx, bytesOk
   376 000022B2 B409                <1>     mov ah, 09h
   377 000022B4 CD21                <1>     int 21h
   378                              <1>     return
    13                              <2> %%_ret:
    14 000022B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   379                              <1> 
   380                              <1> .dirPrintFileData:
   381                              <1> ;Use cmdFcb to build the file name with space
   382                              <1> ;Start by print the name (same for both cases)
   383                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   384 000022B7 F6056DDEFFFF46      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles | dirCharDev
   385                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000022BE 75(B6)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   386 000022C0 488D356DDEFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   387 000022C7 488D3D38DEFFFF      <1>     lea rdi, cmdFcb
   388 000022CE E828230000          <1>     call asciiFilenameToFCB
   389 000022D3 488D152CDEFFFF      <1>     lea rdx, cmdFcb
   390 000022DA B908000000          <1>     mov ecx, 8  ;Print 8 chars
   391 000022DF BB01000000          <1>     mov ebx, 1  ;STDOUT
   392 000022E4 B440                <1>     mov ah, 40h ;Write handle
   393 000022E6 CD21                <1>     int 21h
   394 000022E8 52                  <1>     push rdx
   395 000022E9 B220                <1>     mov dl, " "
   396 000022EB B402                <1>     mov ah, 02h ;Print char
   397 000022ED CD21                <1>     int 21h
   398 000022EF 5A                  <1>     pop rdx
   399 000022F0 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   400 000022F7 B903000000          <1>     mov ecx, 3  ;Print three chars
   401 000022FC BB01000000          <1>     mov ebx, 1  ;STDOUT
   402 00002301 B440                <1>     mov ah, 40h ;Write handle
   403 00002303 CD21                <1>     int 21h
   404 00002305 F60588E2FFFF01      <1>     test byte [dirFlags], dirWideType
   405 0000230C 0F85AA000000        <1>     jnz .widePrint
   406                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   407                              <1>     ;Now check if a DIR
   408 00002312 F60512DEFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   409 00002319 7418                <1>     jz .dirPrintNotDir
   410 0000231B 488D151DE7FFFF      <1>     lea rdx, dirLbl
   411 00002322 B409                <1>     mov ah, 09h
   412 00002324 CD21                <1>     int 21h
   413 00002326 488D159BEBFFFF      <1>     lea rdx, threeSpc
   414 0000232D B409                <1>     mov ah, 09h
   415 0000232F CD21                <1>     int 21h
   416 00002331 EB4F                <1>     jmp short .dirPrintFileDT
   417                              <1> .dirPrintNotDir:
   418                              <1> ;Here we print the file size
   419 00002333 B220                <1>     mov dl, " "
   420 00002335 B402                <1>     mov ah, 02h
   421 00002337 CD21                <1>     int 21h
   422 00002339 8B05F1DDFFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   423 0000233F E868240000          <1>     call getDecimalWord
   424 00002344 4889CB              <1>     mov rbx, rcx
   425 00002347 51                  <1>     push rcx
   426 00002348 480FCB              <1>     bswap rbx
   427 0000234B B908000000          <1>     mov ecx, 8
   428                              <1> .dirPrintFileSizePrep:
   429 00002350 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   430 00002352 7514                <1>     jne .dirPrintFileSize
   431 00002354 B402                <1>     mov ah, 02h
   432 00002356 B220                <1>     mov dl, " "
   433 00002358 CD21                <1>     int 21h
   434 0000235A 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   435 0000235E FFC9                <1>     dec ecx
   436 00002360 81F901000000        <1>     cmp ecx, 1
   437 00002366 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   438                              <1> .dirPrintFileSize:
   439 00002368 5B                  <1>     pop rbx
   440                              <1> .dirPrintFileSizeLoop:
   441 00002369 88DA                <1>     mov dl, bl
   442 0000236B B402                <1>     mov ah, 02h
   443 0000236D CD21                <1>     int 21h
   444 0000236F 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   445 00002373 FFC9                <1>     dec ecx
   446 00002375 75F2                <1>     jnz .dirPrintFileSizeLoop
   447 00002377 488D154EEBFFFF      <1>     lea rdx, twoSpc
   448 0000237E B409                <1>     mov ah, 09h
   449 00002380 CD21                <1>     int 21h
   450                              <1> .dirPrintFileDT:
   451 00002382 B220                <1>     mov dl, " "
   452 00002384 B402                <1>     mov ah, 02h
   453 00002386 CD21                <1>     int 21h
   454 00002388 0FB7059FDDFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   455 0000238F 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   456 00002391 E85D1D0000          <1>     call printDate
   457 00002396 488D152FEBFFFF      <1>     lea rdx, twoSpc
   458 0000239D B409                <1>     mov ah, 09h
   459 0000239F CD21                <1>     int 21h
   460 000023A1 0FB70584DDFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   461 000023A8 E8681E0000          <1>     call printTime
   462 000023AD 488D15EDE4FFFF      <1>     lea rdx, crlf
   463 000023B4 B409                <1>     mov ah, 09h
   464 000023B6 CD21                <1>     int 21h
   465 000023B8 B017                <1>     mov al, 23  ;23 lines... for the next bit
   466 000023BA EB0D                <1>     jmp short .dirPrintNameExit
   467                              <1> .widePrint:
   468                              <1> ;If /W, print name space ext space space space space
   469 000023BC 488D1500EBFFFF      <1>     lea rdx, fourSpc
   470 000023C3 B409                <1>     mov ah, 09h ;Print string
   471 000023C5 CD21                <1>     int 21h
   472 000023C7 B073                <1>     mov al, 5*23    ;5 entries per line...
   473                              <1> .dirPrintNameExit:
   474 000023C9 FF05C7E1FFFF        <1>     inc dword [dirFileCtr]   ;Increment file counter
   475 000023CF FE05C0E1FFFF        <1>     inc byte [dirLineCtr]
   476 000023D5 3805BAE1FFFF        <1>     cmp byte [dirLineCtr], al
   477                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000023DB 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000023DD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   478 000023DE F605AFE1FFFF02      <1>     test byte [dirFlags], dirPageType
   479 000023E5 741A                <1>     jz .dirPrnNoPag
   480 000023E7 488D1578E6FFFF      <1>     lea rdx, pauseMes
   481 000023EE B409                <1>     mov ah, 09h
   482 000023F0 CD21                <1>     int 21h
   483 000023F2 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   484 000023F4 CD21                <1>     int 21h
   485 000023F6 488D15A4E4FFFF      <1>     lea rdx, crlf   ;Force new line
   486 000023FD B409                <1>     mov ah, 09h
   487 000023FF CD21                <1>     int 21h
   488                              <1> .dirPrnNoPag:
   489 00002401 C6058DE1FFFF00      <1>     mov byte [dirLineCtr], 0
   490                              <1>     return
    13                              <2> %%_ret:
    14 00002408 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   491                              <1> 
   492                              <1> chdir:
   493 00002409 F60594DCFFFFFF      <1>     test byte [arg1Flg], -1
   494 00002410 754D                <1>     jnz .changeDir
   495                              <1>     ;Print CWD
   496                              <1> .printCWD:
   497 00002412 E8A11F0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   498 00002417 E8201F0000          <1>     call printCRLF
   499                              <1>     return
    13                              <2> %%_ret:
    14 0000241C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> .printDiskCWD:
   501                              <1> ;Print CWD for a specified drive
   502 0000241D 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   503 00002421 88D0                <1>     mov al, dl
   504 00002423 0440                <1>     add al, "@" ;Get the UC letter
   505 00002425 B43A                <1>     mov ah, ":"
   506 00002427 488D3D62E0FFFF      <1>     lea rdi, searchSpec
   507 0000242E 66AB                <1>     stosw   ;Store X:, rdi+=2
   508 00002430 8A05F3DBFFFF        <1>     mov al, byte [pathSep]
   509 00002436 AA                  <1>     stosb   ;Store pathSep, inc rdi
   510 00002437 B447                <1>     mov ah, 47h ;Get Current Working Directory
   511 00002439 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   512 0000243C CD21                <1>     int 21h
   513 0000243E E826210000          <1>     call strlen
   514 00002443 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   515 00002449 B440                <1>     mov ah, 40h ;Write to handle
   516 0000244B BB01000000          <1>     mov ebx, 1  ;STDOUT
   517 00002450 488D1539E0FFFF      <1>     lea rdx, searchSpec
   518 00002457 CD21                <1>     int 21h
   519 00002459 E8DE1E0000          <1>     call printCRLF
   520                              <1>     return
    13                              <2> %%_ret:
    14 0000245E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   521                              <1> .changeDir:
   522 0000245F 8A0541DCFFFF        <1>     mov al, byte [arg1FCBret]
   523 00002465 3CFF                <1>     cmp al, -1 
   524 00002467 0F846AFAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   525 0000246D E890220000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   526 00002472 488D1517E0FFFF      <1>     lea rdx, searchSpec
   527 00002479 B43B                <1>     mov ah, 3Bh ;CHDIR
   528 0000247B CD21                <1>     int 21h
   529 0000247D 0F8281FAFFFF        <1>     jc badDirError
   530                              <1>     return
    13                              <2> %%_ret:
    14 00002483 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   531                              <1> 
   532                              <1> mkdir:
   533 00002484 F60519DCFFFFFF      <1>     test byte [arg1Flg], -1
   534 0000248B 0F844FFAFFFF        <1>     jz badArgError
   535 00002491 F6050FDCFFFFFF      <1>     test byte [arg2Flg], -1
   536 00002498 0F8542FAFFFF        <1>     jnz badArgError
   537                              <1>     ;We have exactly one argument
   538 0000249E 8A0502DCFFFF        <1>     mov al, byte [arg1FCBret]
   539 000024A4 3CFF                <1>     cmp al, -1 
   540 000024A6 0F842BFAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   541 000024AC E851220000          <1>     call buildCommandPath
   542 000024B1 488D15D8DFFFFF      <1>     lea rdx, searchSpec
   543 000024B8 B800390000          <1>     mov eax, 3900h  ;MKDIR
   544 000024BD CD21                <1>     int 21h
   545                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000024BF 73(83)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   546                              <1> .badMake:   ;Else, bad make
   547 000024C1 488D15D2E6FFFF      <1>     lea rdx, badMD
   548 000024C8 E9761E0000          <1>     jmp printString
   549                              <1> 
   550                              <1> rmdir:
   551 000024CD F605D0DBFFFFFF      <1>     test byte [arg1Flg], -1
   552 000024D4 0F8406FAFFFF        <1>     jz badArgError
   553 000024DA F605C6DBFFFFFF      <1>     test byte [arg2Flg], -1
   554 000024E1 0F85F9F9FFFF        <1>     jnz badArgError
   555                              <1>     ;We have exactly one argument
   556 000024E7 8A05B9DBFFFF        <1>     mov al, byte [arg1FCBret]
   557 000024ED 3CFF                <1>     cmp al, -1 
   558 000024EF 0F84E2F9FFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   559 000024F5 E808220000          <1>     call buildCommandPath
   560 000024FA 488D158FDFFFFF      <1>     lea rdx, searchSpec
   561 00002501 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   562 00002506 CD21                <1>     int 21h
   563                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002508 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000250A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   564                              <1> .badRemove:   ;Else, bad make
   565 0000250B 488D15A5E6FFFF      <1>     lea rdx, badRD
   566 00002512 E92C1E0000          <1>     jmp printString
   567                              <1> 
   568                              <1> copy:
   569 00002517 66C7055DE2FFFFFFFF  <1>     mov word [sourceHdl], -1
   570 00002520 66C70556E2FFFFFFFF  <1>     mov word [destHdl], -1
   571 00002529 66C7054FE2FFFFFFFF  <1>     mov word [srcHdlInfo], -1
   572 00002532 C60558E2FFFF00      <1>     mov byte [bCpFlg], 0    ;State flag!
   573 00002539 48C7053FE2FFFF0000- <1>     mov qword [cpBufPtr], 0 ;Init to null ptr!
   573 00002542 0000                <1>
   574 00002544 66C7053EE2FFFF0000  <1>     mov word [wCpBufSz], 0  ;Clear buffer count        
   575 0000254D C70536E2FFFF000000- <1>     mov dword [dCpCnt], 0   ;Clear file count
   575 00002556 00                  <1>
   576 00002557 C605FFE0FFFF00      <1>     mov byte [srcSpec], 0   ;Clear first bytes of the buffers
   577 0000255E C6057AE1FFFF00      <1>     mov byte [destSpec], 0
   578 00002565 48C705F1E1FFFF0000- <1>     mov qword [srcPtr], 0
   578 0000256E 0000                <1>
   579 00002570 48C705EEE1FFFF0000- <1>     mov qword [destPtr], 0
   579 00002579 0000                <1>
   580 0000257B E8AB220000          <1>     call setDTA
   581 00002580 B800540000          <1>     mov eax, 5400h  ;Get verify flag
   582 00002585 CD21                <1>     int 21h
   583 00002587 8805EFE1FFFF        <1>     mov byte [verifyFlg], al    ;Save verify flag!
   584                              <1> ;Start with getting a disk buffer, of the size of the internal disk buffers. 
   585                              <1> ;If we cant allocate full diskbuffer, get as much as we can
   586                              <1> ;Diskbuffer as thats the best optimisation for IO buffers
   587 0000258D B800520000          <1>     mov eax, 5200h
   588 00002592 CD21                <1>     int 21h ;Get in rbx ptr to sysvars
   589 00002594 0FB74B20            <1>     movzx ecx, word [rbx + 20h] ;Get the internal buffer size in ecx!
   590 00002598 89CB                <1>     mov ebx, ecx
   591 0000259A C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs, save bytes in ecx
   592 0000259D B800480000          <1>     mov eax, 4800h
   593 000025A2 CD21                <1>     int 21h
   594 000025A4 731E                <1>     jnc .bufOk
   595 000025A6 85DB                <1>     test ebx, ebx       ;Cannot allocate? Yikes...
   596 000025A8 750C                <1>     jnz .okSize
   597                              <1> .badAlloc:
   598                              <1> ;Not enough memory error!
   599 000025AA 488D1559E4FFFF      <1>     lea rdx, cpNoMem
   600 000025B1 E955F9FFFF          <1>     jmp badCmn  ;Print the string and return!
   601                              <1> .okSize:
   602 000025B6 89D9                <1>     mov ecx, ebx    
   603 000025B8 C1E104              <1>     shl ecx, 4  ;Convert into bytes from paragraphs
   604 000025BB B800480000          <1>     mov eax, 4800h
   605 000025C0 CD21                <1>     int 21h
   606 000025C2 72E6                <1>     jc .badAlloc
   607                              <1> .bufOk:
   608 000025C4 488905B8E1FFFF      <1>     mov qword [cpBufPtr], rax   ;Save ptr to xfr area
   609 000025CB 66890DB9E1FFFF      <1>     mov word [wCpBufSz], cx     ;Save buffer size
   610                              <1> ;Go to the end of the cmd line and search backwards for the destination first
   611 000025D2 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   612 000025D9 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]
   613 000025E1 FFC9                <1>     dec ecx ;Turn into offset
   614 000025E3 4801CE              <1>     add rsi, rcx
   615 000025E6 31D2                <1>     xor edx, edx    ;Use edx as a counter for number of destination switches
   616 000025E8 FD                  <1>     std ;Go in reverse
   617                              <1> .sd:    ;At this point, any switch chars affect destination!
   618 000025E9 E8A01F0000          <1>     call skipDelimiters ;skipDelimiters in reverse!
   619 000025EE 8A0536DAFFFF        <1>     mov al, byte [switchChar]
   620 000025F4 384601              <1>     cmp byte [rsi + 1], al  ;Did we hit a switch?
   621 000025F7 7509                <1>     jne .noSwitch
   622                              <1>     ;Here we hit a switchchar! Process it! rsi points to char before switchchar
   623 000025F9 0FB64602            <1>     movzx eax, byte [rsi + 2]   ;Get the char
   624 000025FD 50                  <1>     push rax        ;Push the switchchar
   625 000025FE FFC2                <1>     inc edx         ;Inc the counter
   626 00002600 EBE7                <1>     jmp short .sd   ;Now go back to skipping delimiters again!
   627                              <1> .noSwitch:
   628                              <1> ;Ok so we hit a path. Now set the flags based on the stack!
   629 00002602 85D2                <1>     test edx, edx
   630 00002604 7412                <1>     jz .noDestSwitch
   631                              <1> .ns1:
   632 00002606 58                  <1>     pop rax ;Pop the switch char
   633 00002607 B304                <1>     mov bl, ascDes
   634 00002609 E809040000          <1>     call .doSwitchRev
   635 0000260E 0F8574040000        <1>     jnz .badExit    ;Invalid switch, abort procedure!    
   636 00002614 FFCA                <1>     dec edx
   637 00002616 75EE                <1>     jnz .ns1
   638                              <1> .noDestSwitch:
   639                              <1> ;Now search for the starting delimiter or start of line
   640 00002618 48FFC6              <1>     inc rsi ;Go to the last char in the path
   641                              <1> .noSwitchLp:
   642 0000261B AC                  <1>     lodsb   ;Get char at rsi, go back a char
   643 0000261C E87B1F0000          <1>     call isALdelimiter
   644 00002621 7412                <1>     je .destFnd
   645 00002623 8A0501DAFFFF        <1>     mov al, byte [switchChar]
   646 00002629 3846FF              <1>     cmp byte [rsi - 1], al  ;Peek if an embedded switch?
   647 0000262C 7404                <1>     je .se  ;Jump if so!
   648 0000262E FFC9                <1>     dec ecx ;One less char left to search
   649 00002630 EBE9                <1>     jmp short .noSwitchLp
   650                              <1> .se:
   651 00002632 48FFCE              <1>     dec rsi     ;Dec to make the below work!
   652                              <1> .destFnd:
   653 00002635 4881C602000000      <1>     add rsi, 2  ;Go back to the first char past the delimiter
   654 0000263C FC                  <1>     cld 
   655 0000263D 4889F5              <1>     mov rbp, rsi    ;Save this ptr in rbp temporarily
   656 00002640 488D3D98E0FFFF      <1>     lea rdi, destSpec
   657 00002647 57                  <1>     push rdi
   658 00002648 E872200000          <1>     call cpDelimPathToBufz ;Copy this over!   
   659 0000264D 5F                  <1>     pop rdi
   660 0000264E E8F21F0000          <1>     call findLastPathComponant  ;Get last path componant in rdi
   661 00002653 48893D0FE1FFFF      <1>     mov qword [destPtr], rdi
   662 0000265A 807F013A            <1>     cmp byte [rdi + 1], ":" ;Is this a colon?
   663 0000265E 7517                <1>     jne .destEnd    ;Dont worry
   664 00002660 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   665 00002662 E80C1F0000          <1>     call ucChar             ;Make sure we UC the drive letter
   666 00002667 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   667 00002669 4881C702000000      <1>     add rdi, 2              ;Point to this null
   668 00002670 48893DF2E0FFFF      <1>     mov qword [destPtr], rdi    ;Store chars over the null
   669                              <1> .destEnd:
   670                              <1> ;Now start with source processing!! Clear the binSrc bit in bCpFlg
   671 00002677 802513E1FFFFFD      <1>     and byte [bCpFlg], ~binSrc  ;Mightve been accidentally set by dest flags
   672 0000267E 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   673                              <1> .srcLp:
   674 00002685 E8041F0000          <1>     call skipDelimiters 
   675 0000268A 8A059AD9FFFF        <1>     mov al, byte [switchChar]
   676 00002690 3806                <1>     cmp byte [rsi], al
   677 00002692 7516                <1>     jne .noSrcSw    ;Not switch! Must be filename start!
   678                              <1>     ;rsi points to switch after switchchar
   679 00002694 B301                <1>     mov bl, ascSrc
   680 00002696 E876030000          <1>     call .doSwitch
   681 0000269B 0F85E7030000        <1>     jnz .badExit
   682 000026A1 4881C602000000      <1>     add rsi, 2
   683 000026A8 EBDB                <1>     jmp short .srcLp    ;Now keep searching for start of filename
   684                              <1> .noSrcSw:
   685 000026AA 4839F5              <1>     cmp rbp, rsi
   686 000026AD 7527                <1>     jne .noSameSrcDest
   687                              <1>     ;Here if the destination we specified earlier is the same as the source
   688                              <1>     ;This means, the actual destination is the current default drive
   689                              <1>     ; on the current directory. Pass to DOS X:FILENAME.EXT<NUL> string.
   690 000026AF E8971E0000          <1>     call getCurrentDrive    ;Get current drive
   691 000026B4 0441                <1>     add al, "A"             ;Turn into a drive letter
   692 000026B6 B43A                <1>     mov ah, ":"
   693 000026B8 0FB7C0              <1>     movzx eax, ax
   694 000026BB 89051EE0FFFF        <1>     mov dword [destSpec], eax   ;Add a default null terminator
   695 000026C1 488D3D19E0FFFF      <1>     lea rdi, destSpec+2         ;Point to the null after the colon
   696 000026C8 48893D9AE0FFFF      <1>     mov qword [destPtr], rdi    ;Copy the filenames here
   697 000026CF 800DBBE0FFFF20      <1>     or byte [bCpFlg], mod1Cpy   ;Copy to curdir in cur drive
   698                              <1> .noSameSrcDest:
   699 000026D6 488D3D80DFFFFF      <1>     lea rdi, srcSpec            ;rsi now goes into the source spec!
   700 000026DD 57                  <1>     push rdi
   701 000026DE E8DC1F0000          <1>     call cpDelimPathToBufz      ;Copy this over! rsi points past delimiter
   702 000026E3 5F                  <1>     pop rdi
   703                              <1>     ;Now go forwards and pick up any more switches.
   704                              <1>     ;Also any "+" signs here!!
   705 000026E4 48FFCE              <1>     dec rsi ;Point back to the first delimiter
   706                              <1> .swSrcSwPost:
   707 000026E7 E8A21E0000          <1>     call skipDelimiters ;Skips trailing delimiters
   708 000026EC 8A0538D9FFFF        <1>     mov al, byte [switchChar]
   709 000026F2 3806                <1>     cmp byte [rsi], al
   710 000026F4 7516                <1>     jne .swSrcSwPostExit
   711                              <1>     ;rsi points to switch after switchchar
   712 000026F6 B301                <1>     mov bl, ascSrc
   713 000026F8 E814030000          <1>     call .doSwitch  ;Puts us at the char past the switch itself
   714 000026FD 0F8585030000        <1>     jnz .badExit
   715 00002703 4881C602000000      <1>     add rsi, 2      ;Go past the switch
   716 0000270A EBDB                <1>     jmp short .swSrcSwPost
   717                              <1> .swSrcSwPostExit:
   718 0000270C 4889FE              <1>     mov rsi, rdi
   719 0000270F E813200000          <1>     call scanForWildcards   ;Find if we have a WC in this source!
   720 00002714 7507                <1>     jnz .oneCp
   721 00002716 800D74E0FFFF08      <1>     or byte [bCpFlg], wcSrc ;We are copying many files. Disp names
   722                              <1> .oneCp:
   723 0000271D E8231F0000          <1>     call findLastPathComponant  ;Get last componant of src in rdi
   724 00002722 48893D38E0FFFF      <1>     mov qword [srcPtr], rdi     ;Now save the last componant
   725 00002729 807F013A            <1>     cmp byte [rdi + 1], ":"     ;Is this a colon?
   726 0000272D 7517                <1>     jne .srcEnd             ;Dont worry
   727 0000272F 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   728 00002731 E83D1E0000          <1>     call ucChar             ;Make sure we UC the drive letter
   729 00002736 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   730 00002738 4881C702000000      <1>     add rdi, 2              ;Point after the colon
   731 0000273F 48893D1BE0FFFF      <1>     mov qword [srcPtr], rdi ;Store chars past the colon
   732                              <1> .srcEnd:
   733                              <1> ;Now uppercase both paths
   734 00002746 488D3510DFFFFF      <1>     lea rsi, srcSpec
   735 0000274D E82D1E0000          <1>     call normalisePath
   736 00002752 488D3D86DFFFFF      <1>     lea rdi, destSpec
   737 00002759 E8211E0000          <1>     call normalisePath
   738                              <1> ;Now establish if the source is a directory or not!
   739 0000275E F6052CE0FFFF08      <1>     test byte [bCpFlg], wcSrc
   740 00002765 7577                <1>     jnz .checkDestDir   ;Skip check if source has wildcards
   741 00002767 488D15EFDEFFFF      <1>     lea rdx, srcSpec
   742 0000276E 4889D6              <1>     mov rsi, rdx
   743 00002771 66AD                <1>     lodsw   ;Get the first two chars, is it "X:" style
   744 00002773 80FC3A              <1>     cmp ah, ":"
   745 00002776 7522                <1>     jne .isSrcDir   ;If not, check explicitly
   746 00002778 AC                  <1>     lodsb           ;Get char past :
   747 00002779 84C0                <1>     test al, al     ;Is byte three nul?
   748 0000277B 740D                <1>     jz .srcStorWc   ;If so, we have "X:<NUL>"
   749 0000277D 3A05A6D8FFFF        <1>     cmp al, byte [pathSep]  ;If char past : isnt pathsep, check manually
   750 00002783 7515                <1>     jne .isSrcDir
   751 00002785 AC                  <1>     lodsb           ;Get char past char past "X:\"
   752 00002786 84C0                <1>     test al, al     
   753 00002788 7510                <1>     jnz .isSrcDir   ;Fall thru is "X:\<NUL>"
   754                              <1> .srcStorWc:
   755                              <1> ;rsi points past the char to store the WC at
   756 0000278A C746FF2A2E2A00      <1>     mov dword [rsi - 1], "*.*"  ;Store with terminating null!
   757 00002791 800DF9DFFFFF08      <1>     or byte [bCpFlg], wcSrc     ;We're adding the wildcard to the source!
   758 00002798 EB44                <1>     jmp short .checkDestDir
   759                              <1> .isSrcDir:
   760 0000279A B910000000          <1>     mov ecx, dirDirectory
   761 0000279F B8004E0000          <1>     mov eax, 4E00h
   762 000027A4 CD21                <1>     int 21h
   763 000027A6 7236                <1>     jc .checkDestDir    ;Wasn't a dir!
   764                              <1>     ;Was the file we found actually a directory?
   765 000027A8 803D7CD9FFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   766 000027AF 752D                <1>     jne .checkDestDir   ;Wasn't a dir
   767 000027B1 4889D7              <1>     mov rdi, rdx
   768 000027B4 E8B01D0000          <1>     call strlen
   769 000027B9 FFC9                <1>     dec ecx
   770 000027BB 4801CF              <1>     add rdi, rcx    ;Move rdi to the terminating null
   771 000027BE 8A0565D8FFFF        <1>     mov al, byte [pathSep]
   772 000027C4 3847FF              <1>     cmp byte [rdi - 1], al  ;Do we have a trailing pathsep?
   773 000027C7 7401                <1>     je .srctpsp
   774 000027C9 AA                  <1>     stosb   ;Store the pathsep over the null, inc rdi
   775                              <1> .srctpsp:
   776 000027CA 48893D90DFFFFF      <1>     mov qword [srcPtr], rdi ;Update the srcPtr
   777 000027D1 B82A2E2A00          <1>     mov eax, "*.*"
   778 000027D6 AB                  <1>     stosd   ;Store the WC with terminating nul!
   779 000027D7 800DB3DFFFFF08      <1>     or byte [bCpFlg], wcSrc ;We're adding the wildcard to the source!
   780                              <1> .checkDestDir:
   781                              <1> ;Now establish if destination is a directory or not!
   782 000027DE F605ACDFFFFF20      <1>     test byte [bCpFlg], mod1Cpy ;If we already know its mod1, skip
   783 000027E5 0F855E010000        <1>     jnz .mod1
   784 000027EB 488D35EDDEFFFF      <1>     lea rsi, destSpec
   785 000027F2 66AD                <1>     lodsw   ;Get the first word, i.e. candidate "X:"
   786 000027F4 80FC3A              <1>     cmp ah, ":"
   787 000027F7 751A                <1>     jne .isDestDir
   788 000027F9 66AD                <1>     lodsw   ;Get second word, i.e. candidate "\<NUL>" or "<NUL>"
   789 000027FB 84C0                <1>     test al, al ;Is byte three nul?
   790 000027FD 0F8446010000        <1>     jz .mod1    ;If so, it was a X:<NUL>
   791 00002803 84E4                <1>     test ah, ah ;Is byte four nul?
   792 00002805 750C                <1>     jnz .isDestDir  ;If not, check if destination is a directory
   793 00002807 3A051CD8FFFF        <1>     cmp al, byte [pathSep]  ;Else, check if byte 3 was a pathsep!
   794 0000280D 0F8436010000        <1>     je .mod1    ;If it is, then it was a X:\<NUL>
   795                              <1> .isDestDir:
   796                              <1> ;Only here if we suspect the destination pathspec is a path, not file!
   797 00002813 488D15C5DEFFFF      <1>     lea rdx, destSpec
   798 0000281A B910000000          <1>     mov ecx, dirDirectory
   799 0000281F B8004E0000          <1>     mov eax, 4E00h
   800 00002824 CD21                <1>     int 21h
   801 00002826 7237                <1>     jc .mod2
   802                              <1>     ;Was the file we found actually a directory?
   803 00002828 803DFCD8FFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   804 0000282F 752E                <1>     jne .mod2
   805                              <1>     ;Here we just check if we have a terminating slash on the destination path.
   806                              <1>     ;If not, we need to place one there!
   807 00002831 4889D7              <1>     mov rdi, rdx    ;Move destSpec
   808 00002834 E8301D0000          <1>     call strlen
   809 00002839 FFC9                <1>     dec ecx         ;Lose the null terminator, zero upper bits
   810 0000283B 4801CF              <1>     add rdi, rcx    ;Go to null terminator
   811 0000283E 0FB605E4D7FFFF      <1>     movzx eax, byte [pathSep]
   812 00002845 3847FF              <1>     cmp byte [rdi - 1], al  ;Is the char before the null a pathsep?
   813 00002848 0F84FB000000        <1>     je .mod1        ;If so, skip adding another one!
   814 0000284E 66AB                <1>     stosw           ;Else, store the pathsep and null!
   815 00002850 48FFCF              <1>     dec rdi         ;Point back to null
   816 00002853 48893D0FDFFFFF      <1>     mov qword [destPtr], rdi    ;Save this pointer
   817 0000285A E9EA000000          <1>     jmp .mod1
   818                              <1> .mod2:
   819                              <1> ;Here we are copying files(s) to file(s)! Filenames are copied according 
   820                              <1> ; to rename wildcard semantics. Always run through this as the destination
   821                              <1> ; name may have wildcards in it! But we don't add any.
   822 0000285F 800D2BDFFFFF40      <1>     or byte [bCpFlg], mod2Cpy   ;Set to remind us what we are doing!
   823 00002866 488D3572DEFFFF      <1>     lea rsi, destSpec
   824 0000286D E8B51E0000          <1>     call scanForWildcards   ;ZF=ZE if WC cound
   825 00002872 7407                <1>     jz .m2Wc
   826 00002874 800D16DFFFFF10      <1>     or byte [bCpFlg], oneDest   ;The destination is a single file!
   827                              <1> .m2Wc:
   828                              <1> ;Search for the source file
   829 0000287B 488D15DBDDFFFF      <1>     lea rdx, srcSpec
   830 00002882 31C9                <1>     xor ecx, ecx    ;Normal and RO files pls
   831 00002884 B8004E0000          <1>     mov eax, 4E00h
   832 00002889 CD21                <1>     int 21h
   833 0000288B 0F82ED010000        <1>     jc .badSrcFile
   834 00002891 488B35D1DEFFFF      <1>     mov rsi, qword [destPtr]
   835 00002898 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Create the permanent destination pattern
   836 0000289C B801290000          <1>     mov eax, 2901h
   837 000028A1 CD21                <1>     int 21h
   838                              <1> .md2Lp:
   839 000028A3 488D358AD8FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   840 000028AA 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Create the source pattern
   841 000028AE B801290000          <1>     mov eax, 2901h
   842 000028B3 CD21                <1>     int 21h  
   843                              <1> ;Now depending on source and dest patterns, build a filename in renName
   844 000028B5 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
   845 000028B9 488D3DB1DEFFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
   846 000028C0 57                  <1>     push rdi
   847 000028C1 48A5                <1>     movsq
   848 000028C3 66A5                <1>     movsw
   849 000028C5 A4                  <1>     movsb
   850 000028C6 5F                  <1>     pop rdi
   851 000028C7 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
   852 000028CB B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
   853                              <1> .md2NameMake:
   854 000028D0 AC                  <1>     lodsb   ;Get the char from the source string
   855 000028D1 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
   856 000028D4 7502                <1>     jne .noStore    ;Dont store the char there
   857 000028D6 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
   858                              <1> .noStore:
   859 000028D8 48FFC7              <1>     inc rdi ;Goto next char position
   860 000028DB FFC9                <1>     dec ecx
   861 000028DD 75F1                <1>     jnz .md2NameMake
   862 000028DF 488D354ED8FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   863 000028E6 488B3D74DEFFFF      <1>     mov rdi, qword [srcPtr]
   864 000028ED E85E1C0000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
   865 000028F2 488D3578DEFFFF      <1>     lea rsi, renName
   866 000028F9 488B3D69DEFFFF      <1>     mov rdi, qword [destPtr]
   867 00002900 E8641D0000          <1>     call FCBToAsciiz
   868 00002905 E8DB000000          <1>     call .prntFilespec  ;Prints the source filename
   869 0000290A E8AE010000          <1>     call copyMain       ;And copy it!
   870 0000290F 731D                <1>     jnc .md2Ok
   871                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   872                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   873 00002911 3CFD                <1>     cmp al, -3
   874 00002913 0F8442010000        <1>     je .badBinCdevErr
   875 00002919 3CFE                <1>     cmp al, -2
   876 0000291B 0F8443010000        <1>     je .rootDirFull
   877 00002921 3CFF                <1>     cmp al, -1      ;Source and destination same?
   878 00002923 0F8444010000        <1>     je .badSameFile 
   879 00002929 E95A010000          <1>     jmp .badExit    ;Else generic error message
   880                              <1> .md2Ok:
   881 0000292E F6055CDEFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   882 00002935 0F8485000000        <1>     jz .copyDone        ;Copy complete!
   883 0000293B B8004F0000          <1>     mov eax, 4F00h      ;Else, find Next File
   884 00002940 CD21                <1>     int 21h
   885 00002942 727C                <1>     jc .copyDone        ;If no more files, we are done!
   886 00002944 E95AFFFFFF          <1>     jmp .md2Lp    ;Else, now build a new source and destination!
   887                              <1> .mod1:
   888                              <1> ;Here we are copying file(s) into a directory. Filenames are copied verbatum.
   889 00002949 800D41DEFFFF20      <1>     or byte [bCpFlg], mod1Cpy   ;Ensure this bit is set!
   890 00002950 488D1506DDFFFF      <1>     lea rdx, srcSpec
   891 00002957 31C9                <1>     xor ecx, ecx    ;Normal and read only files pls!!
   892 00002959 B8004E0000          <1>     mov eax, 4E00h
   893 0000295E CD21                <1>     int 21h
   894 00002960 0F8218010000        <1>     jc .badSrcFile  ;File not found error!!
   895                              <1> .mod1Lp:
   896 00002966 488D35C7D7FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   897 0000296D 488B3DEDDDFFFF      <1>     mov rdi, qword [srcPtr]
   898 00002974 E8E61B0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   899 00002979 488B3DE9DDFFFF      <1>     mov rdi, qword [destPtr]
   900 00002980 E8DA1B0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   901 00002985 E85B000000          <1>     call .prntFilespec
   902 0000298A E82E010000          <1>     call copyMain   ;And copy it!
   903 0000298F 731D                <1>     jnc .mod1Ok
   904                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   905                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   906 00002991 3CFD                <1>     cmp al, -3
   907 00002993 0F84C2000000        <1>     je .badBinCdevErr
   908 00002999 3CFE                <1>     cmp al, -2
   909 0000299B 0F84C3000000        <1>     je .rootDirFull
   910 000029A1 3CFF                <1>     cmp al, -1      ;Source and destination same?
   911 000029A3 0F84C4000000        <1>     je .badSameFile 
   912 000029A9 E9DA000000          <1>     jmp .badExit    ;Else generic error message
   913                              <1> .mod1Ok:
   914 000029AE F605DCDDFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   915 000029B5 7409                <1>     jz .copyDone
   916 000029B7 B8004F0000          <1>     mov eax, 4F00h      ;Find Next File
   917 000029BC CD21                <1>     int 21h
   918 000029BE 73A6                <1>     jnc .mod1Lp         ;If no more files, we are done! Fall thru!
   919                              <1> 
   920                              <1> .copyDone:
   921 000029C0 E8CD000000          <1>     call .copyCleanup   ;Clean up resources!
   922 000029C5 B800020000          <1>     mov eax, 0200h      ;Beep a TAB out :)
   923 000029CA B209                <1>     mov dl, TAB
   924 000029CC CD21                <1>     int 21h
   925 000029CE 8B05B9DDFFFF        <1>     mov eax, dword [dCpCnt] ;Get number of files copied
   926 000029D4 E8621D0000          <1>     call printDecimalWord   ;n File(s) copied
   927 000029D9 488D1518E0FFFF      <1>     lea rdx, copyOk
   928 000029E0 B409                <1>     mov ah, 09h
   929 000029E2 CD21                <1>     int 21h    
   930                              <1>     return
    13                              <2> %%_ret:
    14 000029E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   931                              <1> 
   932                              <1> .prntFilespec:
   933                              <1> ;Prints the filespec to STDOUT. If the path is 
   934 000029E5 F605A5DDFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no wildcard, then don't print name
   935                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000029EC 74(E4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   936 000029EE 488D1568DCFFFF      <1>     lea rdx, srcSpec
   937 000029F5 4889D7              <1>     mov rdi, rdx
   938 000029F8 E86C1B0000          <1>     call strlen
   939 000029FD FFC9                <1>     dec ecx     ;Drop terminating null
   940 000029FF BB01000000          <1>     mov ebx, 1  ;STDOUT
   941 00002A04 B800400000          <1>     mov eax, 4000h  ;Write
   942 00002A09 CD21                <1>     int 21h
   943 00002A0B E82C190000          <1>     call printCRLF
   944                              <1>     return
    13                              <2> %%_ret:
    14 00002A10 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   945                              <1> .doSwitch:
   946                              <1> ;Since switches can come before or after a name, handle them here!
   947                              <1> ;If invalid switch char, returns ZF=NZ.
   948                              <1> ;Input: bl = ASCII bit to set (either 1 or 2) 
   949                              <1> ;       rsi -> Switchchar
   950 00002A11 56                  <1>     push rsi
   951 00002A12 48FFC6              <1>     inc rsi ;Point to char past switchchar
   952 00002A15 AC                  <1>     lodsb   ;Get this char, goto next char
   953 00002A16 5E                  <1>     pop rsi
   954                              <1> .doSwitchRev:
   955 00002A17 E8571B0000          <1>     call ucChar
   956 00002A1C 3C41                <1>     cmp al, "A"
   957 00002A1E 7510                <1>     jne .cB
   958 00002A20 081D6BDDFFFF        <1>     or byte [bCpFlg], bl    ;Set the ASCII bit
   959 00002A26 802564DDFFFFFD      <1>     and byte [bCpFlg], ~binSrc  ;ASCII flag clears this
   960                              <1> .cExit:
   961 00002A2D 31DB                <1>     xor ebx, ebx    ;Clear ZF 
   962                              <1>     return
    13                              <2> %%_ret:
    14 00002A2F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   963                              <1> .cB:
   964 00002A30 3C42                <1>     cmp al, "B"
   965 00002A32 7511                <1>     jne .cV
   966 00002A34 F6D3                <1>     not bl  ;Reverse bits
   967 00002A36 201D55DDFFFF        <1>     and byte [bCpFlg], bl   ;Clear the ASCII bit.
   968 00002A3C 800D4EDDFFFF02      <1>     or byte [bCpFlg], binSrc    ;This was explicitly set
   969 00002A43 EBE8                <1>     jmp short .cExit
   970                              <1> .cV:
   971 00002A45 3C56                <1>     cmp al, "V"
   972                              <1>     retne   ;Exit w/o clearing ZF
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A47 75(2F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   973 00002A49 F6052CDDFFFFFF      <1>     test byte [verifyFlg], -1   ;If verify flag set, do nothing
   974 00002A50 75DB                <1>     jnz .cExit                  ;If not zero, flag already set!
   975                              <1>     ;Else, set it. We return it at the end!
   976 00002A52 B8012E0000          <1>     mov eax, 2E01h  ;Set Verify Flag
   977 00002A57 CD21                <1>     int 21h
   978 00002A59 EBD2                <1>     jmp short .cExit
   979                              <1> 
   980                              <1> ;COPY Bad Exits!!
   981                              <1> .badBinCdevErr:
   982 00002A5B 488D1546E2FFFF      <1>     lea rdx, binDevErr
   983 00002A62 EB10                <1>     jmp short .badExitCmn
   984                              <1> .rootDirFull:
   985 00002A64 488D1529DFFFFF      <1>     lea rdx, fulRootDir
   986 00002A6B EB07                <1>     jmp short .badExitCmn
   987                              <1> .badSameFile:
   988 00002A6D 488D1536DFFFFF      <1>     lea rdx, noSelfCopy
   989                              <1> .badExitCmn:
   990 00002A74 E892F4FFFF          <1>     call badCmn     ;Print error message
   991 00002A79 E942FFFFFF          <1>     jmp .copyDone   ;Clean resources
   992                              <1> .badSrcFile:
   993 00002A7E E878F4FFFF          <1>     call badFnf  ;File not found!!
   994 00002A83 E938FFFFFF          <1>     jmp .copyDone
   995                              <1> .badExit:
   996 00002A88 E841F4FFFF          <1>     call badParamError
   997 00002A8D E92EFFFFFF          <1>     jmp .copyDone
   998                              <1> 
   999                              <1> .copyCleanup:
  1000                              <1> ;Clean all resources!! Reset verify and free copy buffer. 
  1001                              <1> ;Handles are never open in this process!
  1002 00002A92 B8002E0000          <1>     mov eax, 2E00h
  1003 00002A97 8A05DFDCFFFF        <1>     mov al, byte [verifyFlg]
  1004 00002A9D CD21                <1>     int 21h
  1005 00002A9F 4150                <1>     push r8
  1006 00002AA1 4C8B05DBDCFFFF      <1>     mov r8, qword [cpBufPtr]
  1007 00002AA8 4D85C0              <1>     test r8, r8 ;Check zero, clear CF
  1008 00002AAB 7407                <1>     jz .skipFree
  1009 00002AAD B800490000          <1>     mov eax, 4900h
  1010 00002AB2 CD21                <1>     int 21h
  1011                              <1> .skipFree:
  1012 00002AB4 4158                <1>     pop r8
  1013 00002AB6 0F82541D0000        <1>     jc freezePC ;If free fails, man....
  1014                              <1>     return
    13                              <2> %%_ret:
    14 00002ABC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1015                              <1> 
  1016                              <1> copyMain:
  1017                              <1> ;This is the main copying procedure! 
  1018                              <1> ;Start by checking the two files are not the same. If so, complain!
  1019                              <1> ;If returns CF=CY, error code in al. 
  1020                              <1> ;   If al = -1, same filename error!
  1021                              <1> ;   If al = -2, Root Dir full (couldn't create file)
  1022                              <1> ;   If al = -3, attempted binary read from a device
  1023                              <1> ;If returns CF=NC, file copied successfully.
  1024                              <1> ;Check the two files are not the same using truename in searchspec
  1025 00002ABD 488D3599DBFFFF      <1>     lea rsi, srcSpec
  1026 00002AC4 488D3DC5D9FFFF      <1>     lea rdi, searchSpec
  1027 00002ACB B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1028 00002AD0 CD21                <1>     int 21h 
  1029 00002AD2 57                  <1>     push rdi    ;Save this searchSpec
  1030 00002AD3 488D3505DCFFFF      <1>     lea rsi, destSpec
  1031 00002ADA 488D3D31DAFFFF      <1>     lea rdi, searchSpec + cmdBufferL ;Use the latter half to store this bit
  1032 00002AE1 B800600000          <1>     mov eax, 6000h
  1033 00002AE6 CD21                <1>     int 21h
  1034 00002AE8 5E                  <1>     pop rsi     ;Get this ptr back
  1035 00002AE9 B81E120000          <1>     mov eax, 121Eh  ;Cmpr ASCII strings
  1036 00002AEE CD2F                <1>     int 2Fh
  1037 00002AF0 750F                <1>     jnz .notSameFile
  1038 00002AF2 B0FF                <1>     mov al, -1  ;Same filename error!
  1039                              <1> .badExit:
  1040 00002AF4 50                  <1>     push rax
  1041 00002AF5 E8B0000000          <1>     call .exitCleanup
  1042 00002AFA 58                  <1>     pop rax
  1043 00002AFB F9                  <1>     stc
  1044                              <1>     return
    13                              <2> %%_ret:
    14 00002AFC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1045                              <1> .badExitNoSpace:
  1046 00002AFD B0FE                <1>     mov al, -2  ;Access denied from Create happens if Root Dir full!
  1047 00002AFF EBF3                <1>     jmp short .badExit
  1048                              <1> .notSameFile:
  1049                              <1> ;Open source with read permission
  1050                              <1> ;Open destination with write permission
  1051 00002B01 488D1555DBFFFF      <1>     lea rdx, srcSpec
  1052 00002B08 B8003D0000          <1>     mov eax, 3D00h  ;Read open
  1053 00002B0D CD21                <1>     int 21h
  1054 00002B0F 72E3                <1>     jc .badExit
  1055 00002B11 66890565DCFFFF      <1>     mov word [sourceHdl], ax
  1056 00002B18 0FB7D8              <1>     movzx ebx, ax   ;For bx
  1057                              <1> 
  1058 00002B1B B800440000          <1>     mov eax, 4400h  ;Get device info for file in bx in dx
  1059 00002B20 CD21                <1>     int 21h
  1060 00002B22 66891558DCFFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
  1061 00002B29 F6C280              <1>     test dl, 80h    ;Is this a chardev?
  1062 00002B2C 7412                <1>     jz .prepCopy
  1063                              <1> ;Check the binary flag was not set on this source filespec
  1064 00002B2E B0FD                <1>     mov al, -3  ;Prep the error code
  1065 00002B30 F6055ADCFFFF02      <1>     test byte [bCpFlg], binSrc
  1066 00002B37 75BB                <1>     jnz .badExit    ;Return with the error code in al
  1067 00002B39 800D51DCFFFF01      <1>     or byte [bCpFlg], ascSrc    ;Set the ascii read bit for later!
  1068                              <1> .prepCopy:
  1069 00002B40 31F6                <1>     xor esi, esi                ;Flag if ASCII copy done after write!
  1070 00002B42 488B153ADCFFFF      <1>     mov rdx, qword [cpBufPtr]   ;Get the buffer pointer
  1071                              <1> .copyLoop:
  1072                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1073                              <1> ; CONSIDER MODIFYING THIS ROUTINE SO THAT ASCII READS ONLY WRITE AFTER       !
  1074                              <1> ; FINDING A ^Z, OR FILLING THE BUFFER. CURRENTLY, WRITES HAPPEN ON EACH LINE.!
  1075                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1076 00002B49 0FB70D3BDCFFFF      <1>     movzx ecx, word [wCpBufSz]
  1077 00002B50 0FB71D26DCFFFF      <1>     movzx ebx, word [sourceHdl]
  1078 00002B57 B8003F0000          <1>     mov eax, 3F00h ;Read
  1079 00002B5C CD21                <1>     int 21h
  1080 00002B5E 7294                <1>     jc .badExit
  1081 00002B60 89C1                <1>     mov ecx, eax    ;Save the binary # of bytes read
  1082 00002B62 F60528DCFFFF01      <1>     test byte [bCpFlg], ascSrc  ;Are we copying in ascii mode
  1083 00002B69 7413                <1>     jz .notAscii
  1084                              <1> ;Now scan the buffer for a EOF. If we find, we stop the copy at that char
  1085 00002B6B 50                  <1>     push rax        ;Save the original char count
  1086 00002B6C 4889D7              <1>     mov rdi, rdx    ;rdx keeps the buffer ptr
  1087 00002B6F B01A                <1>     mov al, EOF
  1088 00002B71 F2AE                <1>     repne scasb     ;Loop thru now!
  1089 00002B73 89C8                <1>     mov eax, ecx    ;Move the offset into the buffer in eax
  1090 00002B75 59                  <1>     pop rcx         ;Get the original read count into ecx
  1091 00002B76 7506                <1>     jne .notAscii   ;If EOF not found, ecx has the full buffer size to write
  1092                              <1> ;Here if EOF found.
  1093 00002B78 FFC0                <1>     inc eax         ;Drop one for the EOF char itself
  1094 00002B7A 29C1                <1>     sub ecx, eax    ;Get difference for # of chars to write
  1095 00002B7C FFCE                <1>     dec esi         ;Set to -1 to indicate we are done with ASCII copy!
  1096                              <1> .notAscii:
  1097 00002B7E 85C9                <1>     test ecx, ecx   ;If no bytes were read, exit!
  1098 00002B80 7428                <1>     jz .exitCleanup
  1099 00002B82 51                  <1>     push rcx    ;Save the number of bytes to write
  1100 00002B83 52                  <1>     push rdx    ;Save the buffer ptr
  1101 00002B84 E88D000000          <1>     call .getWriteHandle    ;Gets hdl in bx. Inc file ctr on create/open
  1102 00002B89 5A                  <1>     pop rdx
  1103 00002B8A 59                  <1>     pop rcx
  1104 00002B8B 0F826CFFFFFF        <1>     jc .badExitNoSpace
  1105 00002B91 B800400000          <1>     mov eax, 4000h ;Write to handle in bx, to buffer in rdx
  1106 00002B96 CD21                <1>     int 21h
  1107 00002B98 0F8256FFFFFF        <1>     jc .badExit
  1108 00002B9E 39C1                <1>     cmp ecx, eax            ;ecx=bytes to write, eax=bytes written
  1109 00002BA0 0F8557FFFFFF        <1>     jne .badExitNoSpace     ;Disk must be full!!
  1110 00002BA6 85F6                <1>     test esi, esi           ;Always clear in Binary mode
  1111 00002BA8 749F                <1>     jz .copyLoop            ;Set possible in ASCII mode
  1112                              <1> .exitCleanup:
  1113                              <1> ;Add a terminating EOF if we have been asked to. Else, skip!
  1114 00002BAA F605E0DBFFFF04      <1>     test byte [bCpFlg], ascDes
  1115 00002BB1 7425                <1>     jz .ecNoEOF
  1116 00002BB3 0FBF1DC5DBFFFF      <1>     movsx ebx, word [destHdl]
  1117 00002BBA 81FBFFFFFFFF        <1>     cmp ebx, -1 ;If this hdl is closed, skip this!
  1118 00002BC0 7416                <1>     je .ecNoEOF
  1119 00002BC2 488B15BADBFFFF      <1>     mov rdx, qword [cpBufPtr]
  1120 00002BC9 C6021A              <1>     mov byte [rdx], EOF
  1121 00002BCC B901000000          <1>     mov ecx, 1
  1122 00002BD1 B800400000          <1>     mov eax, 4000h  ;Write and ignore any errors that come from this!
  1123 00002BD6 CD21                <1>     int 21h
  1124                              <1> .ecNoEOF:
  1125                              <1> ;Now close copy handles!
  1126 00002BD8 668B1D9EDBFFFF      <1>     mov bx, word [sourceHdl]
  1127 00002BDF 6681FBFFFF          <1>     cmp bx, -1
  1128 00002BE4 7410                <1>     je .beSkipSource
  1129 00002BE6 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
  1130 00002BEB CD21                <1>     int 21h
  1131 00002BED 66C70587DBFFFFFFFF  <1>     mov word [sourceHdl], -1    ;Reset the var
  1132                              <1> .beSkipSource:
  1133 00002BF6 668B1D82DBFFFF      <1>     mov bx, word [destHdl]
  1134 00002BFD 6681FBFFFF          <1>     cmp bx, -1
  1135                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002C02 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002C04 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1136 00002C05 B8003E0000          <1>     mov eax, 3E00h  ;Close this one too!
  1137 00002C0A CD21                <1>     int 21h
  1138 00002C0C 66C7056ADBFFFFFFFF  <1>     mov word [destHdl], -1  ;Reset the var
  1139                              <1>     return
    13                              <2> %%_ret:
    14 00002C15 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1140                              <1> 
  1141                              <1> .getWriteHandle:
  1142                              <1> ;Returns in bx the handle to the destination file. If the file has not 
  1143                              <1> ; yet been opened, creates/opens the destination file as appropriate.
  1144                              <1> ;Input: Nothing
  1145                              <1> ;Output: CF=NC: bx = Handle to the file
  1146                              <1> ;        CF=CY: File failed to open/create. 
  1147 00002C16 0FB71D62DBFFFF      <1>     movzx ebx, word [destHdl]
  1148 00002C1D 6681FBFFFF          <1>     cmp bx, -1
  1149 00002C22 7402                <1>     je .gwHProceed
  1150 00002C24 F8                  <1>     clc     ;Clear the CF
  1151                              <1>     return
    13                              <2> %%_ret:
    14 00002C25 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1152                              <1> .gwHProceed:
  1153                              <1> ;Here if the destination has not been opened yet!
  1154 00002C26 488D15B2DAFFFF      <1>     lea rdx, destSpec   ;Prepare rdx to the destination
  1155                              <1> ;Now we create/reopen the file here!
  1156 00002C2D F6055DDBFFFF10      <1>     test byte [bCpFlg], oneDest ;If single destination, concatenate
  1157 00002C34 743E                <1>     jz .createFile
  1158                              <1> ;Now we first try to open this file. If this is file 0, we create.
  1159                              <1> ;If this is more than file 0, we open
  1160 00002C36 813D4DDBFFFF000000- <1>     cmp dword [dCpCnt], 0
  1160 00002C3F 00                  <1>
  1161 00002C40 7432                <1>     je .createFile
  1162                              <1>     ;Now we open the file instead and append to the end
  1163 00002C42 B8023D0000          <1>     mov eax, 3D02h  ;Open the file in exclusive read/write mode
  1164 00002C47 CD21                <1>     int 21h
  1165                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002C49 72(25)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1166 00002C4B FF053CDBFFFF        <1>     inc dword [dCpCnt]  ;We've opened the file for writing!
  1167 00002C51 66890527DBFFFF      <1>     mov word [destHdl], ax
  1168 00002C58 0FB7D8              <1>     movzx ebx, ax
  1169 00002C5B 31C9                <1>     xor ecx, ecx
  1170 00002C5D 31D2                <1>     xor edx, edx
  1171 00002C5F F6052BDBFFFF04      <1>     test byte [bCpFlg], ascDes  ;Did we write a terminating ^Z before?
  1172 00002C66 7404                <1>     jz .gwHNoAscii
  1173 00002C68 FFCA                <1>     dec edx                     ;Overwrite the ^Z
  1174 00002C6A FFC9                <1>     dec ecx                     ;PASS A SIGNED -1 !!!!
  1175                              <1> .gwHNoAscii:
  1176 00002C6C B802420000          <1>     mov eax, 4202h  ;LSEEK from the end
  1177 00002C71 CD21                <1>     int 21h
  1178                              <1>     return
    13                              <2> %%_ret:
    14 00002C73 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1179                              <1> .createFile:
  1180 00002C74 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
  1181 00002C79 31C9                <1>     xor ecx, ecx    ;No file attributes
  1182 00002C7B CD21                <1>     int 21h
  1183                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002C7D 72(73)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1184 00002C7F FF0508DBFFFF        <1>     inc dword [dCpCnt]  ;File created for writing!
  1185 00002C85 668905F3DAFFFF      <1>     mov word [destHdl], ax
  1186 00002C8C 0FB7D8              <1>     movzx ebx, ax
  1187                              <1>     return
    13                              <2> %%_ret:
    14 00002C8F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1188                              <1> 
  1189                              <1> erase:
  1190 00002C90 F6050DD4FFFFFF      <1>     test byte [arg1Flg], -1
  1191 00002C97 0F8443F2FFFF        <1>     jz badArgError
  1192 00002C9D E8891B0000          <1>     call setDTA     ;Start by resetting the DTA
  1193 00002CA2 E85B1A0000          <1>     call buildCommandPath   ;Get the relative path to the file
  1194                              <1> .dirLp:
  1195 00002CA7 488D3DE2D7FFFF      <1>     lea rdi, searchSpec
  1196 00002CAE E892190000          <1>     call findLastPathComponant
  1197 00002CB3 4889FE              <1>     mov rsi, rdi    ;Save this as the source
  1198 00002CB6 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1199 00002CBA B03F                <1>     mov al, "?"
  1200                              <1>     ;Store question marks in the name field
  1201 00002CBC 57                  <1>     push rdi
  1202 00002CBD 48FFC7              <1>     inc rdi ;Goto the first char
  1203 00002CC0 B90B000000          <1>     mov ecx, 11
  1204 00002CC5 F3AA                <1>     rep stosb
  1205 00002CC7 5F                  <1>     pop rdi
  1206 00002CC8 4889F2              <1>     mov rdx, rsi    ;Save the ptr
  1207 00002CCB B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
  1208 00002CD0 CD21                <1>     int 21h
  1209 00002CD2 3C01                <1>     cmp al, 1
  1210 00002CD4 0F85A1000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
  1211                              <1>     ;Else, we now copy back the search pattern over the last componant!
  1212                              <1>     ;No dirs to handle in here
  1213 00002CDA 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
  1214 00002CDE 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
  1215 00002CE1 E883190000          <1>     call FCBToAsciiz    ;Null terminates for free
  1216                              <1>     ;Count the number of ?'s, if 11, we print the message
  1217 00002CE6 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
  1218 00002CEA 31C9                <1>     xor ecx, ecx
  1219                              <1> .wcScan:
  1220 00002CEC AC                  <1>     lodsb
  1221 00002CED 3C3F                <1>     cmp al, "?"
  1222 00002CEF 7534                <1>     jne .endCount
  1223 00002CF1 FFC1                <1>     inc ecx
  1224 00002CF3 81F90B000000        <1>     cmp ecx, 11
  1225 00002CF9 75F1                <1>     jne .wcScan
  1226                              <1> .ynmsg:
  1227 00002CFB 488D1538DEFFFF      <1>     lea rdx, ynMes
  1228 00002D02 E83C160000          <1>     call printString
  1229 00002D07 B401                <1>     mov ah, 01h ;STDIN without Console Echo
  1230 00002D09 CD21                <1>     int 21h ;Get char in al
  1231 00002D0B E863180000          <1>     call ucChar ;Uppercase the char
  1232 00002D10 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
  1233 00002D12 740C                <1>     je .endCount1
  1234 00002D14 3C4E                <1>     cmp al, "N"
  1235                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002D16 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002D18 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1236 00002D19 E81E160000          <1>     call printCRLF      ;Else, tell me what you want!!!
  1237 00002D1E EBDB                <1>     jmp short .ynmsg    
  1238                              <1> .endCount1:
  1239 00002D20 E817160000          <1>     call printCRLF
  1240                              <1> .endCount:
  1241                              <1>     ;Now we copy our search template pathstring to delPath
  1242 00002D25 488D3D31D9FFFF      <1>     lea rdi, delPath
  1243 00002D2C 488D355DD7FFFF      <1>     lea rsi, searchSpec ;Source the chars from here
  1244 00002D33 E827180000          <1>     call strcpy2         ;Copy the string over to delPath
  1245                              <1> .findFile:
  1246                              <1>     ;Now we find first/find next our way through the files
  1247 00002D38 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
  1248 00002D3B 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
  1249 00002D3D B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1250 00002D42 CD21                <1>     int 21h
  1251 00002D44 0F82B1F1FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1252                              <1>     ;Now the file was found, we copy the name over, delete and keep going
  1253 00002D4A E8F6180000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
  1254 00002D4F 488D35DED3FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1255                              <1> .delNextFile:
  1256                              <1> ;rsi and rdi dont move here
  1257 00002D56 E804180000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
  1258 00002D5B 488D15FBD8FFFF      <1>     lea rdx, delPath
  1259 00002D62 B800410000          <1>     mov eax, 4100h  ;Delete File 
  1260 00002D67 CD21                <1>     int 21h         ;If this fails to delete it, fail silently
  1261 00002D69 488D1520D7FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
  1262 00002D70 B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
  1263 00002D75 CD21                <1>     int 21h
  1264 00002D77 73DD                <1>     jnc .delNextFile    
  1265 00002D79 F8                  <1>     clc ;Clear carry to indicate success
  1266                              <1>     return
    13                              <2> %%_ret:
    14 00002D7A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1267                              <1> .noWildcard:
  1268                              <1>     ;Here we just check that the file was not a directory. If it was, we add
  1269                              <1>     ; a \*.*<NUL> over the null terminator
  1270 00002D7B 488D150ED7FFFF      <1>     lea rdx, searchSpec
  1271 00002D82 B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
  1272 00002D87 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1273 00002D8C CD21                <1>     int 21h
  1274 00002D8E 0F8267F1FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1275 00002D94 F60590D3FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
  1276 00002D9B 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
  1277                              <1>     ;Else, we are dealing with a dir
  1278 00002D9D 4889D7              <1>     mov rdi, rdx
  1279 00002DA0 31C9                <1>     xor ecx, ecx
  1280 00002DA2 FFC9                <1>     dec ecx
  1281 00002DA4 F2AE                <1>     repne scasb ;Go to the end of the line!
  1282 00002DA6 48FFCF              <1>     dec rdi
  1283 00002DA9 0FB60579D2FFFF      <1>     movzx eax, byte [pathSep]
  1284 00002DB0 AA                  <1>     stosb
  1285 00002DB1 B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
  1286 00002DB6 AB                  <1>     stosd
  1287 00002DB7 E9EBFEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
  1288                              <1> .delMain:   ;Call with rdx -> buffer!
  1289 00002DBC B800410000          <1>     mov eax, 4100h  ;Delete File 
  1290 00002DC1 CD21                <1>     int 21h
  1291                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002DC3 73(7A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1292 00002DC5 3C05                <1>     cmp al, errAccDen
  1293 00002DC7 0F84F8F0FFFF        <1>     je badAccError ;If the file is RO, fail!
  1294 00002DCD E917F1FFFF          <1>     jmp badFileError
  1295                              <1>     return
    13                              <2> %%_ret:
    14 00002DD2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1296                              <1> 
  1297                              <1> date:
  1298 00002DD3 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1299 00002DDA E8AF170000          <1>     call skipDelimiters
  1300 00002DDF 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1301 00002DE2 7562                <1>     jne .goDate  ;Else rsi is pointing to something possibly a date. Try it!
  1302                              <1>     ;Else, we do interactive mode!
  1303 00002DE4 488D15D2DCFFFF      <1>     lea rdx, curDate
  1304 00002DEB B409                <1>     mov ah, 09h
  1305 00002DED CD21                <1>     int 21h
  1306 00002DEF E890160000          <1>     call printFmtDate
  1307                              <1> .noCur:
  1308 00002DF4 488D15D3DCFFFF      <1>     lea rdx, newDate
  1309 00002DFB B409                <1>     mov ah, 09h
  1310 00002DFD CD21                <1>     int 21h
  1311 00002DFF 488D15E7DCFFFF      <1>     lea rdx, ukDate
  1312 00002E06 488D05D3DCFFFF      <1>     lea rax, usDate
  1313 00002E0D 488D1DE6DCFFFF      <1>     lea rbx, jpDate
  1314 00002E14 803D10D2FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1315 00002E1B 480F47D3            <1>     cmova rdx, rbx
  1316 00002E1F 480F42D0            <1>     cmovb rdx, rax
  1317 00002E23 B409                <1>     mov ah, 09h
  1318 00002E25 CD21                <1>     int 21h
  1319                              <1> 
  1320 00002E27 488D15B5D3FFFF      <1>     lea rdx, cpyBuffer
  1321 00002E2E C60280              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
  1322 00002E31 B40A                <1>     mov ah, 0Ah
  1323 00002E33 CD21                <1>     int 21h
  1324 00002E35 52                  <1>     push rdx
  1325 00002E36 E801150000          <1>     call printCRLF
  1326 00002E3B 5A                  <1>     pop rdx
  1327 00002E3C 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1328                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002E40 74(D2)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1329                              <1>     ;No spaces anywhere, separator chars allowed are / . - only
  1330 00002E42 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1331                              <1> .goDate:
  1332 00002E46 31C0                <1>     xor eax, eax    
  1333 00002E48 803DDCD1FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1334 00002E4F 727B                <1>     jb .us
  1335 00002E51 0F87B7000000        <1>     ja .jpn
  1336                              <1>     ;Here for UK style dates
  1337 00002E57 E877190000          <1>     call getByte
  1338 00002E5C 725D                <1>     jc .badDate
  1339 00002E5E 8805F7D7FFFF        <1>     mov byte [td3], al  ;Store the day
  1340 00002E64 E80C010000          <1>     call .validSep
  1341 00002E69 7550                <1>     jne .badDate
  1342 00002E6B E863190000          <1>     call getByte
  1343 00002E70 7249                <1>     jc .badDate
  1344 00002E72 8805E4D7FFFF        <1>     mov byte [td4], al  ;Store month
  1345 00002E78 E8F8000000          <1>     call .validSep
  1346 00002E7D 753C                <1>     jne .badDate
  1347 00002E7F E85B190000          <1>     call getNum
  1348 00002E84 E8CF000000          <1>     call .doYear    ;Adjusts the year if necessary
  1349 00002E89 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1350 00002E8E 732B                <1>     jae .badDate
  1351 00002E90 668905C2D7FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1352                              <1> .writeDate:
  1353 00002E97 E8F2160000          <1>     call skipDelimiters
  1354 00002E9C 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1355 00002E9F 751A                <1>     jne .badDate
  1356 00002EA1 0FB70DB1D7FFFF      <1>     movzx ecx, word [td1]   ;Get the year
  1357 00002EA8 668B15ACD7FFFF      <1>     mov dx, word [td3]      ;Read time and date together!
  1358 00002EAF B8002B0000          <1>     mov eax, 2B00h
  1359 00002EB4 CD21                <1>     int 21h
  1360 00002EB6 84C0                <1>     test al, al
  1361                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002EB8 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002EBA C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1362                              <1> .badDate:
  1363 00002EBB 488D15ECDBFFFF      <1>     lea rdx, badDate
  1364 00002EC2 E87C140000          <1>     call printString
  1365 00002EC7 E928FFFFFF          <1>     jmp date.noCur
  1366                              <1> .us:
  1367 00002ECC E802190000          <1>     call getByte
  1368 00002ED1 72E8                <1>     jc .badDate
  1369 00002ED3 880583D7FFFF        <1>     mov byte [td4], al  ;Store the month
  1370 00002ED9 E897000000          <1>     call .validSep
  1371 00002EDE 75DB                <1>     jne .badDate
  1372 00002EE0 E8EE180000          <1>     call getByte
  1373 00002EE5 72D4                <1>     jc .badDate
  1374 00002EE7 88056ED7FFFF        <1>     mov byte [td3], al  ;Store day
  1375 00002EED E883000000          <1>     call .validSep
  1376 00002EF2 75C7                <1>     jne .badDate
  1377 00002EF4 E8E6180000          <1>     call getNum
  1378 00002EF9 E85A000000          <1>     call .doYear    ;Adjusts the year if necessary
  1379 00002EFE 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1380 00002F03 73B6                <1>     jae .badDate
  1381 00002F05 6689054DD7FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1382                              <1> .writeHop:
  1383 00002F0C EB89                <1>     jmp short .writeDate
  1384                              <1> .jpn:
  1385 00002F0E E8CC180000          <1>     call getNum
  1386 00002F13 E840000000          <1>     call .doYear    ;Adjusts the year if necessary
  1387 00002F18 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1388 00002F1D 739C                <1>     jae .badDate
  1389 00002F1F 66890533D7FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1390 00002F26 E84A000000          <1>     call .validSep
  1391 00002F2B 758E                <1>     jne .badDate
  1392 00002F2D E8A1180000          <1>     call getByte
  1393 00002F32 7287                <1>     jc .badDate
  1394 00002F34 880521D7FFFF        <1>     mov byte [td3], al  ;Store the day
  1395 00002F3A E836000000          <1>     call .validSep
  1396 00002F3F 0F8576FFFFFF        <1>     jne .badDate
  1397 00002F45 E889180000          <1>     call getByte
  1398 00002F4A 0F826BFFFFFF        <1>     jc .badDate
  1399 00002F50 880506D7FFFF        <1>     mov byte [td4], al  ;Store month
  1400 00002F56 EBB4                <1>     jmp short .writeHop
  1401                              <1> .doYear:
  1402 00002F58 3D77000000          <1>     cmp eax, 119    ;If this is larger than 119, return assuming valid
  1403                              <1>     reta
    73                              <2> cret a
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002F5D 7601                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002F5F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1404                              <1> ;If the user specifies 80-99 it means 1980-1999
  1405                              <1> ;If the user specifies 00-79 it means 2000-2079
  1406 00002F60 BBD0070000          <1>     mov ebx, 2000
  1407 00002F65 B96C070000          <1>     mov ecx, 1900
  1408 00002F6A 3D50000000          <1>     cmp eax, 80     
  1409 00002F6F 0F42CB              <1>     cmovb ecx, ebx
  1410 00002F72 01C8                <1>     add eax, ecx
  1411                              <1>     return
    13                              <2> %%_ret:
    14 00002F74 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1412                              <1> .validSep:
  1413 00002F75 AC                  <1>     lodsb           ;Get the char and return
  1414 00002F76 3C2E                <1>     cmp al, "."
  1415                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002F78 74(74)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1416 00002F7A 3C2F                <1>     cmp al, "/"
  1417                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002F7C 74(74)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1418 00002F7E 3C2D                <1>     cmp al, "-"
  1419                              <1>     return
    13                              <2> %%_ret:
    14 00002F80 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1420                              <1> 
  1421                              <1> time:
  1422 00002F81 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1423 00002F88 E801160000          <1>     call skipDelimiters
  1424 00002F8D 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1425 00002F90 7540                <1>     jne .goTime  ;Else rsi is pointing to something possibly a time. Try it!
  1426 00002F92 488D157DDBFFFF      <1>     lea rdx, curTime
  1427 00002F99 B409                <1>     mov ah, 09h
  1428 00002F9B CD21                <1>     int 21h
  1429 00002F9D E879140000          <1>     call printFmtTime
  1430                              <1> .noCur:
  1431 00002FA2 488D157EDBFFFF      <1>     lea rdx, newTime
  1432 00002FA9 B409                <1>     mov ah, 09h
  1433 00002FAB CD21                <1>     int 21h
  1434                              <1> 
  1435 00002FAD 488D15ADD1FFFF      <1>     lea rdx, inBuffer
  1436 00002FB4 C60280              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
  1437 00002FB7 B40A                <1>     mov ah, 0Ah
  1438 00002FB9 CD21                <1>     int 21h
  1439 00002FBB 52                  <1>     push rdx
  1440 00002FBC 488D15DED8FFFF      <1>     lea rdx, crlf
  1441 00002FC3 B409                <1>     mov ah, 09h
  1442 00002FC5 CD21                <1>     int 21h
  1443 00002FC7 5A                  <1>     pop rdx
  1444 00002FC8 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1445                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002FCC 74(80)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1446 00002FCE 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1447                              <1> .goTime:
  1448 00002FD2 C7057DD6FFFF000000- <1>     mov dword [td1], 0          ;Set all fields to 0
  1448 00002FDB 00                  <1>
  1449 00002FDC 31C0                <1>     xor eax, eax   
  1450 00002FDE E8F0170000          <1>     call getByte
  1451 00002FE3 0F8294000000        <1>     jc .badTime         ;Get the number in eax
  1452 00002FE9 88056BD6FFFF        <1>     mov byte [td2], al  ;Save hours
  1453 00002FEF E89A000000          <1>     call .validsep
  1454 00002FF4 0F8583000000        <1>     jne .badTime
  1455 00002FFA E8D4170000          <1>     call getByte
  1456 00002FFF 727C                <1>     jc .badTime
  1457 00003001 880552D6FFFF        <1>     mov byte [td1], al  ;Save minutes
  1458 00003007 E882000000          <1>     call .validsep
  1459 0000300C 740F                <1>     je .goSec
  1460 0000300E 48FFCE              <1>     dec rsi ;Go back a char
  1461 00003011 E878150000          <1>     call skipDelimiters ;Skip any delimiters
  1462 00003016 803E0D              <1>     cmp byte [rsi], CR
  1463 00003019 743E                <1>     je .setTime
  1464 0000301B EB60                <1>     jmp short .badTime
  1465                              <1> .goSec:
  1466 0000301D E878000000          <1>     call .checkNum
  1467 00003022 7259                <1>     jc .badTime
  1468 00003024 E8AA170000          <1>     call getByte
  1469 00003029 7252                <1>     jc .badTime
  1470 0000302B 88052BD6FFFF        <1>     mov byte [td4], al  ;Save seconds
  1471 00003031 AC                  <1>     lodsb       ;Move rsi forwards
  1472 00003032 3C2E                <1>     cmp al, "." ;Now we dont allow for colon now, only dot!
  1473 00003034 740F                <1>     je .goMsec
  1474 00003036 48FFCE              <1>     dec rsi ;Go back a char
  1475 00003039 E850150000          <1>     call skipDelimiters ;Skip any delimiters
  1476 0000303E 803E0D              <1>     cmp byte [rsi], CR
  1477 00003041 7416                <1>     je .setTime
  1478 00003043 EB38                <1>     jmp short .badTime
  1479                              <1> .goMsec:
  1480 00003045 E850000000          <1>     call .checkNum
  1481 0000304A 7231                <1>     jc .badTime
  1482 0000304C E882170000          <1>     call getByte
  1483 00003051 722A                <1>     jc .badTime
  1484 00003053 880502D6FFFF        <1>     mov byte [td3], al  ;Save miliseconds
  1485                              <1> .setTime:
  1486 00003059 E830150000          <1>     call skipDelimiters
  1487 0000305E 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1488 00003061 751A                <1>     jne .badTime
  1489 00003063 0FB70DEFD5FFFF      <1>     movzx ecx, word [td1]   ;Get hour/minutes
  1490 0000306A 0FB715EAD5FFFF      <1>     movzx edx, word [td3]   ;Get seconds/miliseconds
  1491 00003071 B8002D0000          <1>     mov eax, 2D00h      ;Set time
  1492 00003076 CD21                <1>     int 21h
  1493 00003078 A8FF                <1>     test al, -1
  1494                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000307A 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000307C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1495                              <1> .badTime:
  1496 0000307D 488D1583DAFFFF      <1>     lea rdx, badTime
  1497 00003084 E8BA120000          <1>     call printString
  1498 00003089 E914FFFFFF          <1>     jmp time.noCur
  1499                              <1> .validsep:
  1500 0000308E AC                  <1>     lodsb
  1501 0000308F 3A05A3CFFFFF        <1>     cmp al, byte [ctryData + countryStruc.timeSep]  ;Usually a colon
  1502                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003095 74(7C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1503 00003097 3C2E                <1>     cmp al, "."
  1504                              <1>     return
    13                              <2> %%_ret:
    14 00003099 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1505                              <1> .checkNum:
  1506 0000309A AC                  <1>     lodsb   ;Now ensure the first char past the delim is a number
  1507 0000309B 48FFCE              <1>     dec rsi
  1508 0000309E 3C30                <1>     cmp al, "0"
  1509 000030A0 7206                <1>     jb .cnbad
  1510 000030A2 3C39                <1>     cmp al, "9"
  1511 000030A4 7702                <1>     ja .cnbad
  1512 000030A6 F8                  <1>     clc
  1513                              <1>     return
    13                              <2> %%_ret:
    14 000030A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1514                              <1> .cnbad:
  1515 000030A8 F9                  <1>     stc
  1516                              <1>     return
    13                              <2> %%_ret:
    14 000030A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1517                              <1> ctty:
  1518 000030AA F605F3CFFFFFFF      <1>     test byte [arg1Flg], -1
  1519 000030B1 0F8429EEFFFF        <1>     jz badArgError
  1520 000030B7 F605E9CFFFFFFF      <1>     test byte [arg2Flg], -1
  1521 000030BE 0F851CEEFFFF        <1>     jnz badArgError
  1522 000030C4 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1523 000030CB 0FB605D3CFFFFF      <1>     movzx eax, byte [arg1Off]
  1524 000030D2 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
  1525 000030D5 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1526 000030D9 750F                <1>     jne .noDrive
  1527 000030DB 0FB605C4CFFFFF      <1>     movzx eax, byte [arg1FCBret]
  1528 000030E2 3CFF                <1>     cmp al, -1
  1529 000030E4 0F84EDEDFFFF        <1>     je badDriveError
  1530                              <1> .noDrive:
  1531                              <1>     ;Now we open the provided file
  1532 000030EA E82B160000          <1>     call copyArgumentToSearchSpec
  1533 000030EF 488D159AD3FFFF      <1>     lea rdx, searchSpec
  1534                              <1> .loadSwap:
  1535 000030F6 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
  1536 000030FB CD21                <1>     int 21h
  1537 000030FD 0F82E6EDFFFF        <1>     jc badFileError
  1538 00003103 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
  1539 00003106 B800440000          <1>     mov eax, 4400h  ;Get device word
  1540 0000310B CD21                <1>     int 21h
  1541 0000310D F6C280              <1>     test dl, 80h    ;Test if this device is a char device
  1542 00003110 742F                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
  1543                              <1>     ;Now we set this handle to be STDIO
  1544 00003112 80CA03              <1>     or dl, 3    ;Set STDIO bits
  1545 00003115 30F6                <1>     xor dh, dh
  1546 00003117 B801440000          <1>     mov eax, 4401h  ;Now we set the device word
  1547 0000311C CD21                <1>     int 21h
  1548                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
  1549 0000311E 31C9                <1>     xor ecx, ecx    ;STDIN
  1550 00003120 B800460000          <1>     mov eax, 4600h
  1551 00003125 CD21                <1>     int 21h
  1552 00003127 FFC1                <1>     inc ecx         ;STDOUT
  1553 00003129 B800460000          <1>     mov eax, 4600h
  1554 0000312E CD21                <1>     int 21h
  1555 00003130 FFC1                <1>     inc ecx         ;STDERR
  1556 00003132 B800460000          <1>     mov eax, 4600h
  1557 00003137 CD21                <1>     int 21h
  1558 00003139 B8003E0000          <1>     mov eax, 3E00h ;Now we close the original handle
  1559 0000313E CD21                <1>     int 21h
  1560                              <1>     return
    13                              <2> %%_ret:
    14 00003140 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1561                              <1> .badCharDev:
  1562 00003141 488D15F0DAFFFF      <1>     lea rdx, badDev
  1563 00003148 B409                <1>     mov ah, 09h
  1564 0000314A CD21                <1>     int 21h
  1565 0000314C B43E                <1>     mov ah, 3Eh ;Close opened handle
  1566 0000314E CD21                <1>     int 21h
  1567                              <1>     return
    13                              <2> %%_ret:
    14 00003150 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1568                              <1> 
  1569                              <1> cls:  
  1570 00003151 B800440000          <1>     mov eax, 4400h  ;Get device info
  1571 00003156 BB01000000          <1>     mov ebx, 1      ;for handle 1
  1572 0000315B CD21                <1>     int 21h         ;in dx
  1573 0000315D F7C280000000        <1>     test edx, devCharDev
  1574 00003163 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
  1575 00003165 F7C210000000        <1>     test edx, charDevFastOut
  1576 0000316B 743E                <1>     jz .doAnsi
  1577                              <1>     ;Test if Int 29h uses Int 30h
  1578                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
  1579                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
  1580 0000316D B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
  1581 00003172 CD21                <1>     int 21h
  1582                              <1> .biosCheck:
  1583 00003174 66813BCD30          <1>     cmp word [rbx], 30CDh
  1584 00003179 740C                <1>     je .biosConfirmed
  1585 0000317B 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
  1586 00003180 7429                <1>     je .doAnsi
  1587 00003182 48FFC3              <1>     inc rbx
  1588 00003185 EBED                <1>     jmp short .biosCheck
  1589                              <1> .biosConfirmed:
  1590                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
  1591 00003187 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
  1592 00003189 31DB                <1>     xor ebx, ebx
  1593 0000318B CD30                <1>     int 30h
  1594 0000318D B40F                <1>     mov ah, 0Fh ;Get screen mode
  1595 0000318F CD30                <1>     int 30h
  1596 00003191 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
  1597 00003194 FECA                <1>     dec dl
  1598 00003196 B619                <1>     mov dh, 25  ;Number of rows is standard
  1599 00003198 31C0                <1>     xor eax, eax
  1600 0000319A 89C1                <1>     mov ecx, eax
  1601 0000319C B707                <1>     mov bh, 7   ;Screen attributes
  1602 0000319E B406                <1>     mov ah, 6   ;Scroll
  1603 000031A0 CD30                <1>     int 30h
  1604 000031A2 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
  1605 000031A4 B700                <1>     mov bh, 0   ;Page 0
  1606 000031A6 B402                <1>     mov ah, 2
  1607 000031A8 CD30                <1>     int 30h
  1608                              <1>     return
    13                              <2> %%_ret:
    14 000031AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1609                              <1> .doAnsi:
  1610                              <1> ;4 chars in the ansi routine
  1611                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
  1612                              <1> ; understand ANSI codes
  1613 000031AB 488D350DDDFFFF      <1>     lea rsi, ansiCls
  1614 000031B2 B904000000          <1>     mov ecx, 4
  1615 000031B7 B406                <1>     mov ah, 06h ;Raw char output
  1616                              <1> .ansiLp:
  1617 000031B9 AC                  <1>     lodsb   ;Get the char in 
  1618 000031BA 88C2                <1>     mov dl, al
  1619 000031BC CD21                <1>     int 21h
  1620 000031BE FFC9                <1>     dec ecx
  1621 000031C0 75F7                <1>     jnz .ansiLp
  1622                              <1>     return
    13                              <2> %%_ret:
    14 000031C2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1623                              <1> 
  1624                              <1> break:
  1625 000031C3 F605DACEFFFFFF      <1>     test byte [arg1Flg], -1
  1626 000031CA 752D                <1>     jnz .argumentProvided
  1627                              <1>     ;Here we just get the status of break
  1628 000031CC B800330000          <1>     mov eax, 3300h  ;Get break status in dl
  1629 000031D1 CD21                <1>     int 21h
  1630 000031D3 88D3                <1>     mov bl, dl
  1631 000031D5 488D15FEDAFFFF      <1>     lea rdx, breakIs
  1632 000031DC B409                <1>     mov ah, 09h
  1633 000031DE CD21                <1>     int 21h
  1634 000031E0 488D15EEDAFFFF      <1>     lea rdx, onMes
  1635 000031E7 488D0DE1DAFFFF      <1>     lea rcx, offMes
  1636 000031EE 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1637 000031F0 480F44D1            <1>     cmovz rdx, rcx
  1638 000031F4 B409                <1>     mov ah, 09h
  1639 000031F6 CD21                <1>     int 21h
  1640                              <1>     return
    13                              <2> %%_ret:
    14 000031F8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1641                              <1> .argumentProvided:
  1642 000031F9 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1643 000031FD AD                  <1>     lodsd   ;Read the word
  1644 000031FE 89C3                <1>     mov ebx, eax
  1645 00003200 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1646 00003205 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1647 00003208 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1648 0000320D 7416                <1>     je .maybeOn
  1649 0000320F 663D4F46            <1>     cmp ax, "OF"
  1650 00003213 7523                <1>     jne .badOnOff
  1651 00003215 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1652 0000321A 6681FB4620          <1>     cmp bx, "F "
  1653 0000321F 7517                <1>     jne .badOnOff
  1654                              <1>     ;Set off
  1655 00003221 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1656 00003223 EB0B                <1>     jmp short .setBreak
  1657                              <1> .maybeOn:
  1658 00003225 663D4F4E            <1>     cmp ax, "ON"
  1659 00003229 750D                <1>     jne .badOnOff
  1660                              <1>     ;Set on
  1661 0000322B BA01000000          <1>     mov edx, 1
  1662                              <1> .setBreak:
  1663 00003230 B801330000          <1>     mov eax, 3301h  ;Set break
  1664 00003235 CD21                <1>     int 21h
  1665                              <1>     return
    13                              <2> %%_ret:
    14 00003237 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1666                              <1> .badOnOff:
  1667 00003238 488D1590DCFFFF      <1>     lea rdx, badOnOff
  1668 0000323F B409                <1>     mov ah, 09h
  1669 00003241 CD21                <1>     int 21h
  1670                              <1>     return
    13                              <2> %%_ret:
    14 00003243 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1671                              <1> 
  1672                              <1> verify:
  1673 00003244 F60559CEFFFFFF      <1>     test byte [arg1Flg], -1
  1674 0000324B 752D                <1>     jnz .argumentProvided
  1675                              <1>     ;Here we just get the status of break
  1676 0000324D B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1677 00003252 CD21                <1>     int 21h
  1678 00003254 88C3                <1>     mov bl, al
  1679 00003256 488D1587DAFFFF      <1>     lea rdx, verifyIs
  1680 0000325D B409                <1>     mov ah, 09h
  1681 0000325F CD21                <1>     int 21h
  1682 00003261 488D156DDAFFFF      <1>     lea rdx, onMes
  1683 00003268 488D0D60DAFFFF      <1>     lea rcx, offMes
  1684 0000326F 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1685 00003271 480F44D1            <1>     cmovz rdx, rcx
  1686 00003275 B409                <1>     mov ah, 09h
  1687 00003277 CD21                <1>     int 21h
  1688                              <1>     return
    13                              <2> %%_ret:
    14 00003279 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1689                              <1> .argumentProvided:
  1690 0000327A 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1691 0000327E AD                  <1>     lodsd   ;Read the word
  1692 0000327F 89C3                <1>     mov ebx, eax
  1693 00003281 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1694 00003286 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1695 00003289 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1696 0000328E 7416                <1>     je .maybeOn
  1697 00003290 663D4F46            <1>     cmp ax, "OF"
  1698 00003294 751F                <1>     jne .badOnOff
  1699 00003296 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1700 0000329B 6681FB4620          <1>     cmp bx, "F "
  1701 000032A0 7513                <1>     jne .badOnOff
  1702                              <1>     ;Set off
  1703 000032A2 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1704 000032A4 EB0A                <1>     jmp short .setVerify
  1705                              <1> .maybeOn:
  1706 000032A6 663D4F4E            <1>     cmp ax, "ON"
  1707 000032AA 7509                <1>     jne .badOnOff
  1708                              <1>     ;Set on
  1709 000032AC 31C0                <1>     xor eax, eax
  1710 000032AE FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1711                              <1> .setVerify:
  1712 000032B0 B42E                <1>     mov ah, 2Eh  ;Set Verify
  1713 000032B2 CD21                <1>     int 21h
  1714                              <1>     return
    13                              <2> %%_ret:
    14 000032B4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1715                              <1> .badOnOff:
  1716 000032B5 488D1513DCFFFF      <1>     lea rdx, badOnOff
  1717 000032BC B409                <1>     mov ah, 09h
  1718 000032BE CD21                <1>     int 21h
  1719                              <1>     return
    13                              <2> %%_ret:
    14 000032C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1720                              <1> 
  1721                              <1> rename:
  1722 000032C1 F605DCCDFFFFFF      <1>     test byte [arg1Flg], -1
  1723 000032C8 0F8412ECFFFF        <1>     jz badArgError
  1724 000032CE F605D2CDFFFFFF      <1>     test byte [arg2Flg], -1
  1725 000032D5 0F8405ECFFFF        <1>     jz badArgError    
  1726                              <1>     ;Initialise the variables!
  1727 000032DB 488D357BD3FFFF      <1>     lea rsi, srcSpec
  1728 000032E2 48893578D4FFFF      <1>     mov qword [srcPtr], rsi
  1729 000032E9 488D35EFD3FFFF      <1>     lea rsi, destSpec
  1730 000032F0 48893572D4FFFF      <1>     mov qword [destPtr], rsi
  1731                              <1>     ;Check the second path is just a filename!
  1732 000032F7 0FB605AACDFFFF      <1>     movzx eax, byte [arg2Off]
  1733 000032FE 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1734 00003305 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1735 00003308 488D3D81D1FFFF      <1>     lea rdi, searchSpec
  1736 0000330F 57                  <1>     push rdi
  1737 00003310 E8AA130000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1738 00003315 5F                  <1>     pop rdi
  1739 00003316 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1740 0000331A 0F84C0EBFFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1741                              <1> ;Check if a drive specifier has been given
  1742 00003320 0FB6057ECDFFFF      <1>     movzx eax, byte [arg1Off]
  1743 00003327 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1744 0000332E 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1745 00003331 66AD                <1>     lodsw   ;Get the first two chars
  1746 00003333 80FC3A              <1>     cmp ah, ":" ;If not, current drive
  1747 00003336 752A                <1>     jne .curDrvSrc
  1748                              <1> ;Else, copy over the drive letter from the source path, if one exists!
  1749 00003338 488B3522D4FFFF      <1>     mov rsi, qword [srcPtr]
  1750 0000333F 668906              <1>     mov word [rsi], ax
  1751 00003342 48810514D4FFFF0200- <1>     add qword [srcPtr], 2   
  1751 0000334B 0000                <1>
  1752 0000334D 488B3515D4FFFF      <1>     mov rsi, qword [destPtr]
  1753 00003354 668906              <1>     mov word [rsi], ax
  1754 00003357 48810507D4FFFF0200- <1>     add qword [destPtr], 2  ;Advance the pointer, to copy to after this ptr
  1754 00003360 0000                <1>
  1755                              <1> .curDrvSrc:
  1756 00003362 4889FE              <1>     mov rsi, rdi
  1757                              <1> .destScan:
  1758 00003365 AC                  <1>     lodsb   ;Get the char
  1759 00003366 3A05BDCCFFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1760 0000336C 0F846EEBFFFF        <1>     je badArgError
  1761 00003372 84C0                <1>     test al, al
  1762 00003374 75EF                <1>     jnz .destScan
  1763                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1764 00003376 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1765 0000337A 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1765 00003383 3F                  <1>
  1766 00003384 B903000000          <1>     mov ecx, 3  ;24 bytes
  1767 00003389 F348AB              <1>     rep stosq
  1768 0000338C AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1769 0000338D 488D35FCD0FFFF      <1>     lea rsi, searchSpec
  1770 00003394 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1771 00003398 B80D290000          <1>     mov eax, 290Dh
  1772 0000339D CD21                <1>     int 21h     
  1773 0000339F 50                  <1>     push rax    ;Save the WC signature
  1774 000033A0 E85D130000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1775 000033A5 488D3DE4D0FFFF      <1>     lea rdi, searchSpec
  1776 000033AC E894120000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1777 000033B1 4889FE              <1>     mov rsi, rdi
  1778 000033B4 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1779 000033B7 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1780 000033BB B80D290000          <1>     mov eax, 290Dh
  1781 000033C0 CD21                <1>     int 21h
  1782 000033C2 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1783 000033C3 88CC                <1>     mov ah, cl
  1784 000033C5 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1785 000033C8 0F84EB000000        <1>     jz .noWC
  1786 000033CE 3CFF                <1>     cmp al, -1  ;Is the source drive bad?
  1787 000033D0 0F840AEBFFFF        <1>     je badArgError
  1788 000033D6 488D35B3D0FFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1789                              <1>     ;Now we check if we have a path to actually handle
  1790 000033DD 4839F3              <1>     cmp rbx, rsi
  1791 000033E0 7444                <1>     je .noPath
  1792 000033E2 C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1793 000033E6 488D35A3D0FFFF      <1>     lea rsi, searchSpec
  1794 000033ED 488B3D69D2FFFF      <1>     mov rdi, qword [srcSpec]
  1795 000033F4 56                  <1>     push rsi
  1796 000033F5 E856110000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1797 000033FA 5E                  <1>     pop rsi
  1798 000033FB 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1799 000033FE 8A0525CCFFFF        <1>     mov al, byte [pathSep]
  1800 00003404 AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1801 00003405 48893D55D3FFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1802 0000340C 488B3D56D3FFFF      <1>     mov rdi, qword [destPtr]    ;Get the ptr (if it was advanced)
  1803 00003413 E838110000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1804 00003418 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1805 0000341B AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1806 0000341C 48893D46D3FFFF      <1>     mov qword [destPtr], rdi
  1807 00003423 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1808                              <1> .noPath:
  1809                              <1>     ;Now we have where to copy the files to, we can start our work!
  1810 00003426 E800140000          <1>     call setDTA
  1811 0000342B 488D155ED0FFFF      <1>     lea rdx, searchSpec
  1812 00003432 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1813 00003434 B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1814 00003439 CD21                <1>     int 21h
  1815 0000343B 0F82B1EAFFFF        <1>     jc badDupFnf    ;If no file was found!
  1816                              <1> .wcLoop:
  1817                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1818 00003441 488D35ECCCFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1819 00003448 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1820 0000344C B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1821 00003451 CD21                <1>     int 21h 
  1822                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1823 00003453 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1824 00003457 488D3D13D3FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1825 0000345E 57                  <1>     push rdi
  1826 0000345F 48A5                <1>     movsq
  1827 00003461 66A5                <1>     movsw
  1828 00003463 A4                  <1>     movsb
  1829 00003464 5F                  <1>     pop rdi
  1830 00003465 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1831 00003469 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1832                              <1> .wcNameMake:
  1833 0000346E AC                  <1>     lodsb   ;Get the char from the source string
  1834 0000346F 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1835 00003472 7502                <1>     jne .noStore    ;Dont store the char there
  1836 00003474 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1837                              <1> .noStore:
  1838 00003476 48FFC7              <1>     inc rdi ;Goto next char position
  1839 00003479 FFC9                <1>     dec ecx
  1840 0000347B 75F1                <1>     jnz .wcNameMake
  1841                              <1> ;renName now has the FCB name for the file we wish to make!
  1842                              <1> ;Now make the two paths!
  1843 0000347D 488D35B0CCFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1844 00003484 488B3DD6D2FFFF      <1>     mov rdi, qword [srcPtr]
  1845 0000348B E8C0100000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1846 00003490 488D35DAD2FFFF      <1>     lea rsi, renName
  1847 00003497 488B3DCBD2FFFF      <1>     mov rdi, qword [destPtr]
  1848 0000349E E8C6110000          <1>     call FCBToAsciiz
  1849 000034A3 488D15B3D1FFFF      <1>     lea rdx, srcSpec
  1850 000034AA E83F000000          <1>     call .ren   ;Fail silently on wildcard rename
  1851 000034AF B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1852 000034B4 CD21                <1>     int 21h
  1853 000034B6 7389                <1>     jnc .wcLoop     ;And process it too!
  1854                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 000034B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1855                              <1> .noWC:
  1856 000034B9 E844120000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1857 000034BE 0FB605E3CBFFFF      <1>     movzx eax, byte [arg2Off]
  1858 000034C5 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1859 000034CC 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1860 000034CF 488B3D93D2FFFF      <1>     mov rdi, qword [destPtr]    
  1861 000034D6 E8E4110000          <1>     call cpDelimPathToBufz
  1862 000034DB 488D15AECFFFFF      <1>     lea rdx, searchSpec
  1863 000034E2 E807000000          <1>     call .ren
  1864                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000034E7 73(B8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1865 000034E9 E904EAFFFF          <1>     jmp badDupFnf   ;Always just return this
  1866                              <1> .ren:
  1867 000034EE 488D3DEAD1FFFF      <1>     lea rdi, destSpec
  1868 000034F5 B800560000          <1>     mov eax, 5600h
  1869 000034FA CD21                <1>     int 21h
  1870                              <1>     return
    13                              <2> %%_ret:
    14 000034FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1871                              <1> 
  1872                              <1> touch:
  1873                              <1> ;Temporarily used to create files
  1874 000034FD F605A0CBFFFFFF      <1>     test byte [arg1Flg], -1
  1875 00003504 0F84D6E9FFFF        <1>     jz badArgError
  1876 0000350A E8F3110000          <1>     call buildCommandPath
  1877 0000350F 488D157ACFFFFF      <1>     lea rdx, searchSpec
  1878 00003516 B8005B0000          <1>     mov eax, 5B00h  ;Create unique file 
  1879 0000351B 31C9                <1>     xor ecx, ecx
  1880 0000351D CD21                <1>     int 21h
  1881 0000351F 721D                <1>     jc .touch1
  1882                              <1> .touchClose:
  1883 00003521 0FB7D8              <1>     movzx ebx, ax   ;Save the handle here
  1884 00003524 B80D120000          <1>     mov eax, 120Dh  ;Get date/time words from the DOS
  1885 00003529 CD2F                <1>     int 2fh
  1886 0000352B 89C1                <1>     mov ecx, eax    ;Move the time here
  1887 0000352D 87D1                <1>     xchg edx, ecx   ;Get them in the right place
  1888 0000352F B801570000          <1>     mov eax, 5701h  ;Set the date/time for bx
  1889 00003534 CD21                <1>     int 21h
  1890 00003536 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1891 0000353B CD21                <1>     int 21h
  1892                              <1>     return
    13                              <2> %%_ret:
    14 0000353D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1893                              <1> .touch1:
  1894 0000353E 3C50                <1>     cmp al, errFilExist ;Does the file exist?
  1895 00003540 7509                <1>     jne .touchError ;If not, this is a proper error!
  1896 00003542 B8003D0000          <1>     mov eax, 3D00h  ;R/O open instead to update the access time!!
  1897 00003547 CD21                <1>     int 21h
  1898 00003549 73D6                <1>     jnc .touchClose ;If this worked, close the handle immediately
  1899                              <1> .touchError:
  1900 0000354B 3C03                <1>     cmp al, errPnf
  1901 0000354D 0F848DE9FFFF        <1>     je badArgError
  1902 00003553 3C02                <1>     cmp al, errFnf
  1903 00003555 0F84A0E9FFFF        <1>     je badFnf
  1904 0000355B E965E9FFFF          <1>     jmp badAccError
  1905                              <1>     
  1906                              <1> 
  1907                              <1> join:
  1908                              <1> ;Mock join command, to test join. Make an external command.
  1909                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1910 00003560 F605AF000000FF      <1>     test byte [.joinOn], -1
  1911 00003567 743D                <1>     jz .okJoin
  1912                              <1> .joindisable:
  1913 00003569 B800520000          <1>     mov eax, 5200h  
  1914 0000356E CD21                <1>     int 21h
  1915                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1916 00003570 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1917 00003575 CD2A                <1>     int 2Ah
  1918 00003577 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1919 0000357B 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1920 0000357F 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1921 00003585 C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1922 00003588 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1923 0000358C FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1924 0000358F B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1925 00003594 CD2A                <1>     int 2Ah
  1926 00003596 C6057900000000      <1>     mov byte [.joinOn], 0
  1927 0000359D 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1928 000035A4 EB45                <1>     jmp short .joinExit
  1929                              <1> .okJoin:
  1930 000035A6 C60569000000FF      <1>     mov byte [.joinOn], -1
  1931 000035AD B800520000          <1>     mov eax, 5200h  
  1932 000035B2 CD21                <1>     int 21h
  1933 000035B4 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1934 000035B8 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1935                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1936 000035BC B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1937 000035C1 CD2A                <1>     int 2Ah
  1938 000035C3 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1939 000035C9 4889DF              <1>     mov rdi, rbx
  1940 000035CC 488D3544000000      <1>     lea rsi, .joinPath
  1941 000035D3 B90C000000          <1>     mov ecx, .joinPathL
  1942 000035D8 F3A4                <1>     rep movsb   ;Copy chars over
  1943 000035DA FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1944 000035DD B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1945 000035E2 CD2A                <1>     int 2Ah
  1946 000035E4 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1947                              <1> .joinExit:
  1948 000035EB B800090000          <1>     mov eax, 0900h
  1949 000035F0 CD21                <1>     int 21h
  1950                              <1>     return
    13                              <2> %%_ret:
    14 000035F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1951 000035F3 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1951 000035FC 61626C65640D0A24    <1>
  1952 00003604 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1952 0000360D 7361626C65640D0A24  <1>
  1953 00003616 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1954 00003617 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1954 00003620 535400              <1>
  1955                              <1> .joinPathL  equ $ - .joinPath 
  1956                              <1> 
  1957                              <1> subst:
  1958                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1959                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1960 00003623 F605D3000000FF      <1>     test byte [.substOn], -1
  1961 0000362A 7443                <1>     jz .okSubst
  1962                              <1> .substdisable:
  1963 0000362C B800520000          <1>     mov eax, 5200h  
  1964 00003631 CD21                <1>     int 21h
  1965                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1966 00003633 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1967 00003638 CD2A                <1>     int 2Ah
  1968 0000363A 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1969 0000363E 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1970 00003645 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1971 0000364B C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1972 0000364E C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1973 00003652 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1974 00003658 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1975 0000365D CD2A                <1>     int 2Ah
  1976 0000365F C6059700000000      <1>     mov byte [.substOn], 0
  1977 00003666 488D157D000000      <1>     lea rdx, .substDisableMsg
  1978 0000366D EB61                <1>     jmp short .substExit
  1979                              <1> .okSubst:
  1980 0000366F C60587000000FF      <1>     mov byte [.substOn], -1
  1981 00003676 B800520000          <1>     mov eax, 5200h  
  1982 0000367B CD21                <1>     int 21h
  1983 0000367D B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1984 00003682 CD2A                <1>     int 2Ah
  1985 00003684 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1986 00003688 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1987 0000368F 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1988 00003693 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1989 0000369A 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1990 0000369E C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1991                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1992 000036A5 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1993 000036AB 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1994 000036B1 4889DF              <1>     mov rdi, rbx
  1995 000036B4 488D3543000000      <1>     lea rsi, .substPath
  1996 000036BB B90C000000          <1>     mov ecx, .substPathL
  1997 000036C0 F3A4                <1>     rep movsb   ;Copy chars over
  1998 000036C2 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1999 000036C7 CD2A                <1>     int 2Ah
  2000 000036C9 488D1508000000      <1>     lea rdx, .substEnableMsg
  2001                              <1> .substExit:
  2002 000036D0 B800090000          <1>     mov eax, 0900h
  2003 000036D5 CD21                <1>     int 21h
  2004                              <1>     return
    13                              <2> %%_ret:
    14 000036D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2005 000036D8 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  2005 000036E1 6E61626C65640D0A24  <1>
  2006 000036EA 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  2006 000036F3 697361626C65640D0A- <1>
  2006 000036FC 24                  <1>
  2007 000036FD 00                  <1> .substOn: db 0    ;Var to indicate we are on
  2008 000036FE 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  2008 00003707 535400              <1>
  2009                              <1> .substPathL  equ $ - .substPath 
  2010                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  2011                              <1> truename:
  2012 0000370A F60593C9FFFFFF      <1>     test byte [arg1Flg], -1
  2013 00003711 0F84C9E7FFFF        <1>     jz badArgError
  2014 00003717 E8E60F0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  2015 0000371C 488D356DCDFFFF      <1>     lea rsi, searchSpec     ;Store the path here
  2016 00003723 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  2017 00003726 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  2018 0000372B CD21                <1>     int 21h
  2019 0000372D 730D                <1>     jnc .writePath
  2020 0000372F 3C02                <1>     cmp al, errFnf
  2021 00003731 0F84B2E7FFFF        <1>     je badFileError
  2022 00003737 E992E7FFFF          <1>     jmp badParamError
  2023                              <1> .writePath:
  2024 0000373C 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  2025 0000373F B9FFFFFFFF          <1>     mov ecx, -1
  2026 00003744 30C0                <1>     xor al, al
  2027 00003746 F2AE                <1>     repne scasb     ;Get the new len
  2028 00003748 F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  2029 0000374A FFC9                <1>     dec ecx
  2030 0000374C BB01000000          <1>     mov ebx, 01
  2031 00003751 B440                <1>     mov ah, 40h
  2032 00003753 CD21                <1>     int 21h
  2033 00003755 E8E20B0000          <1>     call printCRLF
  2034                              <1>     return
    13                              <2> %%_ret:
    14 0000375A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2035                              <1> 
  2036                              <1> label:
  2037                              <1> ;Displays/Changes/Deletes the file label
  2038 0000375B 488D1508000000      <1>     lea rdx, .l1
  2039 00003762 B800090000          <1>     mov eax, 0900h
  2040 00003767 CD21                <1>     int 21h
  2041                              <1>     return
    13                              <2> %%_ret:
    14 00003769 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2042 0000376A 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  2042 00003773 6E20756E696D706C65- <1>
  2042 0000377C 6D656E7465640D0A24  <1>
  2043                              <1> 
  2044                              <1> mklbl:
  2045                              <1>     ;lea rdx, .l1
  2046                              <1>     ;mov cx, 08h ;Make a label
  2047                              <1>     ;mov eax, 3C00h
  2048                              <1>     ;int 21h
  2049                              <1> 
  2050                              <1>     ;mov ebx, eax
  2051                              <1>     ;mov eax, 3E00h  ;Close the handle
  2052                              <1>     ;int 21h
  2053                              <1>     ;return
  2054                              <1> 
  2055                              <1> ;.l1: db "TESTLABEL",0
  2056 00003785 488D1508000000      <1>     lea rdx, .l1
  2057 0000378C B800160000          <1>     mov eax, 1600h  ;Create FCB
  2058 00003791 CD21                <1>     int 21h
  2059                              <1>     return
    13                              <2> %%_ret:
    14 00003793 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2060                              <1> .l1:
  2061                              <1>     istruc exFcb
  2062 00003794 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  2063 00003795 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  2064 0000379B 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  2065 0000379C 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  2066 000037A4 4C2020              <1>     at exFcb.fileext,   db "L  "
  2067 000037A7 00000000            <1>     at exFcb.curBlock,  dd 0
  2068 000037AB 00<rep 15h>         <1>     iend 
  2069                              <1> rmlbl:
  2070 000037C0 488D1508000000      <1>     lea rdx, .l1
  2071 000037C7 B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  2072 000037CC CD21                <1>     int 21h
  2073                              <1>     return
    13                              <2> %%_ret:
    14 000037CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2074                              <1> .l1:    ;FCB to volume label
  2075                              <1>     istruc exFcb
  2076 000037CF FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  2077 000037D0 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  2078 000037D6 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  2079 000037D7 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  2080 000037DF 3F3F3F              <1>     at exFcb.fileext,   db "???"
  2081 000037E2 00000000            <1>     at exFcb.curBlock,  dd 0
  2082 000037E6 00<rep 15h>         <1>     iend 
  2083                              <1> 
  2084                              <1> rnlbl:
  2085 000037FB 488D1508000000      <1>     lea rdx, .l1
  2086 00003802 B800170000          <1>     mov eax, 1700h
  2087 00003807 CD21                <1>     int 21h
  2088                              <1>     return
    13                              <2> %%_ret:
    14 00003809 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2089                              <1> .l1:
  2090                              <1>     istruc exRenFcb
  2091 0000380A FF                  <1>     at exRenFcb.extSig,     db -1
  2092 0000380B 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  2093 00003811 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  2094 00003812 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  2095 0000381A 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  2096 0000381D 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  2096 00003826 4C414245            <1>
  2097 0000382A 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  2098 0000382D 00<rep 4h>          <1>     iend
  2099                              <1> volume:
  2100                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  2101 00003831 F6056FC8FFFFFF      <1>     test byte [arg2Flg], -1
  2102 00003838 0F85A2E6FFFF        <1>     jnz badArgError
  2103 0000383E F6055FC8FFFFFF      <1>     test byte [arg1Flg], -1
  2104 00003845 7507                <1>     jnz .notCurrentDrive
  2105 00003847 E8FF0C0000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  2106 0000384C EB31                <1>     jmp short .dirEP
  2107                              <1> .notCurrentDrive:
  2108 0000384E E8AF0E0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  2109 00003853 488D3536CCFFFF      <1>     lea rsi, searchSpec
  2110 0000385A E82F0D0000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  2111 0000385F 66AD                <1>     lodsw                   ;Get this word
  2112 00003861 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  2113 00003864 0F8576E6FFFF        <1>     jne badArgError
  2114 0000386A 8A0536C8FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  2115 00003870 A8FF                <1>     test al, -1
  2116 00003872 0F855FE6FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  2117 00003878 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  2118 0000387D FFC8                <1>     dec eax ;Convert to 0 based number
  2119                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  2120 0000387F E8A70F0000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  2121 00003884 488D15A2CDFFFF      <1>     lea rdx, volFcb
  2122 0000388B FFC0                <1>     inc eax ;Get 1 based drive number
  2123 0000388D 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  2124 0000388F 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  2125 00003892 B800110000          <1>     mov eax, 1100h ;Find first FCB
  2126 00003897 CD21                <1>     int 21h
  2127 00003899 50                  <1>     push rax
  2128                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  2129 0000389A 488D1500D0FFFF      <1>     lea rdx, crlf
  2130 000038A1 B409                <1>     mov ah, 09h
  2131 000038A3 CD21                <1>     int 21h
  2132 000038A5 488D15B5D2FFFF      <1>     lea rdx, volMes
  2133 000038AC B409                <1>     mov ah, 09h
  2134 000038AE CD21                <1>     int 21h
  2135 000038B0 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  2136 000038B2 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  2137 000038B5 B402                <1>     mov ah, 02h
  2138 000038B7 CD21                <1>     int 21h
  2139 000038B9 58                  <1>     pop rax
  2140 000038BA 84C0                <1>     test al, al ;If this is zero, the call succeeded
  2141 000038BC 7409                <1>     jz .volIDOk
  2142 000038BE 488D15B3D2FFFF      <1>     lea rdx, volNo
  2143 000038C5 EB19                <1>     jmp short .volEndPrint
  2144                              <1> .volIDOk:
  2145 000038C7 488D15A5D2FFFF      <1>     lea rdx, volOk
  2146 000038CE B409                <1>     mov ah, 09h
  2147 000038D0 CD21                <1>     int 21h
  2148 000038D2 C60550C8FFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  2149 000038D9 488D153EC8FFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  2150                              <1> .volEndPrint:
  2151 000038E0 B409                <1>     mov ah, 09h
  2152 000038E2 CD21                <1>     int 21h
  2153 000038E4 488D15B6CFFFFF      <1>     lea rdx, crlf
  2154 000038EB B409                <1>     mov ah, 09h
  2155 000038ED CD21                <1>     int 21h
  2156                              <1>     return
    13                              <2> %%_ret:
    14 000038EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2157                              <1> 
  2158                              <1> version:
  2159 000038F0 488D15AACFFFFF      <1>     lea rdx, crlf
  2160 000038F7 B409                <1>     mov ah, 09h
  2161 000038F9 CD21                <1>     int 21h
  2162 000038FB 488D154DD2FFFF      <1>     lea rdx, dosVer
  2163 00003902 B409                <1>     mov ah, 09h
  2164 00003904 CD21                <1>     int 21h
  2165 00003906 E80C000000          <1>     call .printVersionNumber
  2166 0000390B 488D158FCFFFFF      <1>     lea rdx, crlf
  2167 00003912 B409                <1>     mov ah, 09h
  2168 00003914 CD21                <1>     int 21h
  2169                              <1>     return
    13                              <2> %%_ret:
    14 00003916 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2170                              <1> .printVersionNumber:
  2171 00003917 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  2172 00003919 CD21                <1>     int 21h
  2173 0000391B 50                  <1>     push rax
  2174 0000391C 0FB6C0              <1>     movzx eax, al
  2175 0000391F E8170E0000          <1>     call printDecimalWord
  2176 00003924 B22E                <1>     mov dl, "."
  2177 00003926 B402                <1>     mov ah, 02h
  2178 00003928 CD21                <1>     int 21h
  2179 0000392A 58                  <1>     pop rax
  2180 0000392B 0FB6C4              <1>     movzx eax, ah
  2181 0000392E E8080E0000          <1>     call printDecimalWord
  2182                              <1>     return
    13                              <2> %%_ret:
    14 00003933 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2183                              <1> 
  2184                              <1> 
  2185                              <1> memory:
  2186 00003934 B800520000          <1>     mov eax, 5200h  ;Get Sysvars :)
  2187 00003939 CD21                <1>     int 21h
  2188 0000393B 4885DB              <1>     test rbx, rbx
  2189 0000393E 7510                <1>     jnz .sysvarsOK
  2190 00003940 488D15EFD4FFFF      <1>     lea rdx, memBad0
  2191 00003947 B409                <1>     mov ah, 09h
  2192 00003949 CD21                <1>     int 21h
  2193 0000394B E9CB0E0000          <1>     jmp freezePC.altEP
  2194                              <1> .sysvarsOK:
  2195                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  2196                              <1>     ; and rcx to store Application memory
  2197 00003950 31F6                <1>     xor esi, esi
  2198 00003952 31FF                <1>     xor edi, edi
  2199 00003954 31ED                <1>     xor ebp, ebp
  2200 00003956 31C9                <1>     xor ecx, ecx
  2201 00003958 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  2202 0000395C 488B1B              <1>     mov rbx, qword [rbx]
  2203                              <1> .memLp:
  2204 0000395F 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  2205 00003962 7409                <1>     je .validMCB
  2206 00003964 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2207 00003967 0F8501010000        <1>     jne .badMCBFound
  2208                              <1> .validMCB:
  2209 0000396D 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  2210 00003970 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  2211 00003974 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  2212 0000397C 7505                <1>     jne .notDOS
  2213 0000397E 4801C6              <1>     add rsi, rax    ;Add to DOS count
  2214 00003981 EB21                <1>     jmp short .gotoNext
  2215                              <1> .notDOS:
  2216 00003983 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  2217 0000398B 7505                <1>     jne .notFree
  2218 0000398D 4801C7              <1>     add rdi, rax    ;Add to Free space count
  2219 00003990 EB12                <1>     jmp short .gotoNext
  2220                              <1> .notFree:
  2221 00003992 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  2222 0000399A 7505                <1>     jne .notHole
  2223 0000399C 4801C5              <1>     add rbp, rax    ;Add to Hole count
  2224 0000399F EB03                <1>     jmp short .gotoNext
  2225                              <1> .notHole:
  2226 000039A1 4801C1              <1>     add rcx, rax    ;Add to Application count
  2227                              <1> .gotoNext:
  2228 000039A4 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2229 000039A7 7407                <1>     je .endOfWalk
  2230 000039A9 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  2231 000039AE EBAF                <1>     jmp short .memLp
  2232                              <1> .endOfWalk:
  2233                              <1>     
  2234 000039B0 488D15E0D3FFFF      <1>     lea rdx, memDOS
  2235 000039B7 B409                <1>     mov ah, 09h
  2236 000039B9 CD21                <1>     int 21h
  2237 000039BB 4889F0              <1>     mov rax, rsi
  2238 000039BE E89D000000          <1>     call .mcbPrintAmount
  2239 000039C3 488D1565D4FFFF      <1>     lea rdx, memByte
  2240 000039CA B409                <1>     mov ah, 09h
  2241 000039CC CD21                <1>     int 21h
  2242                              <1> 
  2243 000039CE 4885ED              <1>     test rbp, rbp
  2244 000039D1 741E                <1>     jz .skipHole
  2245 000039D3 488D1509D4FFFF      <1>     lea rdx, memHole
  2246 000039DA B409                <1>     mov ah, 09h
  2247 000039DC CD21                <1>     int 21h
  2248 000039DE 4889E8              <1>     mov rax, rbp
  2249 000039E1 E87A000000          <1>     call .mcbPrintAmount
  2250 000039E6 488D1542D4FFFF      <1>     lea rdx, memByte
  2251 000039ED B409                <1>     mov ah, 09h
  2252 000039EF CD21                <1>     int 21h
  2253                              <1> .skipHole:
  2254                              <1> 
  2255 000039F1 488D15C5D3FFFF      <1>     lea rdx, memApp
  2256 000039F8 B409                <1>     mov ah, 09h
  2257 000039FA CD21                <1>     int 21h
  2258 000039FC 4889C8              <1>     mov rax, rcx
  2259 000039FF E85C000000          <1>     call .mcbPrintAmount
  2260 00003A04 488D1524D4FFFF      <1>     lea rdx, memByte
  2261 00003A0B B409                <1>     mov ah, 09h
  2262 00003A0D CD21                <1>     int 21h
  2263                              <1> 
  2264 00003A0F 488D15F3D3FFFF      <1>     lea rdx, memFree
  2265 00003A16 B409                <1>     mov ah, 09h
  2266 00003A18 CD21                <1>     int 21h
  2267 00003A1A 4889F8              <1>     mov rax, rdi
  2268 00003A1D E83E000000          <1>     call .mcbPrintAmount
  2269 00003A22 488D1506D4FFFF      <1>     lea rdx, memByte
  2270 00003A29 B409                <1>     mov ah, 09h
  2271 00003A2B CD21                <1>     int 21h
  2272                              <1> 
  2273 00003A2D 488D153DD3FFFF      <1>     lea rdx, memSys
  2274 00003A34 B409                <1>     mov ah, 09h
  2275 00003A36 CD21                <1>     int 21h
  2276 00003A38 4889F0              <1>     mov rax, rsi
  2277 00003A3B 4801F8              <1>     add rax, rdi
  2278 00003A3E 4801C8              <1>     add rax, rcx
  2279 00003A41 4801E8              <1>     add rax, rbp
  2280 00003A44 E817000000          <1>     call .mcbPrintAmount
  2281 00003A49 488D15DFD3FFFF      <1>     lea rdx, memByte
  2282 00003A50 B409                <1>     mov ah, 09h
  2283 00003A52 CD21                <1>     int 21h
  2284                              <1> 
  2285 00003A54 488D1546CEFFFF      <1>     lea rdx, crlf
  2286 00003A5B B409                <1>     mov ah, 09h
  2287 00003A5D CD21                <1>     int 21h
  2288                              <1>     return
    13                              <2> %%_ret:
    14 00003A5F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2289                              <1> 
  2290                              <1> .mcbPrintAmount:
  2291 00003A60 51                  <1>     push rcx
  2292 00003A61 56                  <1>     push rsi
  2293 00003A62 57                  <1>     push rdi
  2294 00003A63 55                  <1>     push rbp
  2295 00003A64 E8D20C0000          <1>     call printDecimalWord
  2296 00003A69 5D                  <1>     pop rbp
  2297 00003A6A 5F                  <1>     pop rdi
  2298 00003A6B 5E                  <1>     pop rsi
  2299 00003A6C 59                  <1>     pop rcx
  2300                              <1>     return
    13                              <2> %%_ret:
    14 00003A6D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2301                              <1> .badMCBFound:
  2302 00003A6E 488D1501D4FFFF      <1>     lea rdx, memBad2
  2303 00003A75 B409                <1>     mov ah, 09h
  2304 00003A77 CD21                <1>     int 21h
  2305 00003A79 E99D0D0000          <1>     jmp freezePC.altEP
  2306                              <1> 
  2307                              <1> type:
  2308 00003A7E F6051FC6FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  2309 00003A85 0F8455E4FFFF        <1>     jz badArgError
  2310 00003A8B F60515C6FFFFFF      <1>     test byte [arg2Flg], -1
  2311 00003A92 0F8548E4FFFF        <1>     jnz badArgError         ;If this set, error
  2312 00003A98 4C8B0570C5FFFF      <1>     mov r8, [pspPtr]
  2313 00003A9F 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2314 00003AA6 0FB605F8C5FFFF      <1>     movzx eax, byte [arg1Off]
  2315 00003AAD 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  2316 00003AB0 803E0D              <1>     cmp byte [rsi], CR
  2317 00003AB3 0F8427E4FFFF        <1>     je badArgError
  2318 00003AB9 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  2319 00003ABD 750F                <1>     jne .noDrive
  2320 00003ABF 0FB605E0C5FFFF      <1>     movzx eax, byte [arg1FCBret]
  2321 00003AC6 3CFF                <1>     cmp al, -1
  2322 00003AC8 0F8409E4FFFF        <1>     je badDriveError
  2323                              <1> .noDrive:
  2324                              <1>     ;Now we open the provided file
  2325 00003ACE E82F0C0000          <1>     call buildCommandPath
  2326 00003AD3 488D15B6C9FFFF      <1>     lea rdx, searchSpec
  2327 00003ADA B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  2328 00003ADF CD21                <1>     int 21h
  2329 00003AE1 0F8202E4FFFF        <1>     jc badFileError
  2330 00003AE7 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  2331 00003AEE 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  2332                              <1> .lp:
  2333 00003AF1 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  2334 00003AF6 B43F                <1>     mov ah, 3Fh ;Read handle
  2335 00003AF8 CD21                <1>     int 21h
  2336 00003AFA 89C1                <1>     mov ecx, eax
  2337 00003AFC 67E317              <1>     jecxz .exit
  2338 00003AFF 53                  <1>     push rbx    ;Save the original in handle
  2339 00003B00 BB01000000          <1>     mov ebx, 1  ;STDOUT
  2340 00003B05 B440                <1>     mov ah, 40h
  2341 00003B07 CD21                <1>     int 21h
  2342 00003B09 5B                  <1>     pop rbx ;Get back the original read handle
  2343 00003B0A 720F                <1>     jc .exitBad
  2344 00003B0C 39C8                <1>     cmp eax, ecx
  2345 00003B0E 74E1                <1>     je .lp
  2346 00003B10 FFC9                <1>     dec ecx ;One less for a ^Z
  2347 00003B12 39C8                <1>     cmp eax, ecx
  2348 00003B14 7505                <1>     jne .exitBad
  2349                              <1> .exit:
  2350 00003B16 B43E                <1>     mov ah, 3Eh ;Close handle
  2351 00003B18 CD21                <1>     int 21h
  2352                              <1>     return
    13                              <2> %%_ret:
    14 00003B1A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2353                              <1> .exitBad:
  2354                              <1>     ;If it is a char device, don't print an error
  2355 00003B1B B800440000          <1>     mov eax, 4400h  ;Get IOCTL mode 
  2356 00003B20 BB01000000          <1>     mov ebx, 1
  2357 00003B25 CD21                <1>     int 21h
  2358 00003B27 F6C280              <1>     test dl, devCharDev
  2359                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003B2A 75(1A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2360 00003B2C E954E3FFFF          <1>     jmp badDiskFull
  2361                              <1> 
  2362                              <1> exit:
  2363 00003B31 F6055CC5FFFF01      <1>     test byte [statFlg1], permaShell
  2364 00003B38 740E                <1>     jz .ouch        ;If not permashell, time to EXIT
  2365 00003B3A F60553C5FFFF04      <1>     test byte [statFlg1], inSingle  ;If perma and single command
  2366 00003B41 0F8507E0FFFF        <1>     jnz int2ERet    ;We are Int 2Eh, exit through the handler
  2367                              <1>     return  ;Else, permashell just returns
    13                              <2> %%_ret:
    14 00003B47 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2368                              <1> .ouch:
  2369 00003B48 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  2370 00003B4D CD21                <1>     int 21h
  2371                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00003B4F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2372                              <1> 
  2373                              <1> launchChild:
  2374                              <1>     ;We execute an external command here.
  2375                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  2376                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  2377                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  2378                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  2379                              <1>     ;We know the drive we are on is valid so no need to double check that!
  2380 00003B50 E8D60C0000          <1>     call setDTA         
  2381                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
  2382 00003B55 488D3D8BC7FFFF      <1>     lea rdi, cmdPathSpec
  2383 00003B5C 4889FE              <1>     mov rsi, rdi
  2384 00003B5F B811120000          <1>     mov eax, 1211h  ;Normalise this path first
  2385 00003B64 CD2F                <1>     int 2fh
  2386 00003B66 E8DA0A0000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  2387 00003B6B 4889FE              <1>     mov rsi, rdi    ;Source here
  2388 00003B6E 488D3D91C5FFFF      <1>     lea rdi, cmdFcb
  2389 00003B75 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  2390 00003B7A CD21                <1>     int 21h
  2391 00003B7C 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  2392 00003B7E 0F858CE3FFFF        <1>     jnz badCmdError
  2393 00003B84 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  2394                              <1> .pathLoop:
  2395 00003B87 488D3581C5FFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  2396 00003B8E 488D3D5BD3FFFF      <1>     lea rdi, extStr
  2397 00003B95 BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  2398                              <1> .extLp:
  2399 00003B9A 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  2400 00003B9B B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  2401 00003BA0 F3A6                <1>     rep cmpsb   ;Compare the two strings
  2402 00003BA2 5E                  <1>     pop rsi
  2403 00003BA3 85C9                <1>     test ecx, ecx
  2404 00003BA5 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  2405 00003BA7 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  2406 00003BAA FFCA                <1>     dec edx         ;Else one less extension type to check
  2407 00003BAC 75EC                <1>     jnz .extLp
  2408                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  2409                              <1>     ;If not, error.
  2410 00003BAE B903000000          <1>     mov ecx, 3
  2411 00003BB3 4889F7              <1>     mov rdi, rsi
  2412 00003BB6 B020                <1>     mov al, SPC
  2413 00003BB8 F3AE                <1>     rep scasb   
  2414 00003BBA 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  2415 00003BBC 0F854EE3FFFF        <1>     jnz badCmdError    ;If not, error!
  2416                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  2417 00003BC2 488D3527D3FFFF      <1>     lea rsi, extStr
  2418 00003BC9 BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  2419                              <1> .extSrchLp:
  2420 00003BCE 488D3D3AC5FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2421 00003BD5 B903000000          <1>     mov ecx, 3
  2422 00003BDA F3A4                <1>     rep movsb   ;Copy the extension over!
  2423 00003BDC E846010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  2424 00003BE1 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  2425 00003BE3 FFCB                <1>     dec ebx                 ;Decrement extension counter
  2426 00003BE5 75E7                <1>     jnz .extSrchLp
  2427                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  2428                              <1> ; we start prepending path componants and trying again. To do this, we reset
  2429                              <1> ; by setting the fcb extension back to all spaces.
  2430 00003BE7 488D3D21C5FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2431 00003BEE B903000000          <1>     mov ecx, 3
  2432 00003BF3 B020                <1>     mov al, SPC
  2433 00003BF5 F3AA                <1>     rep stosb   ;Store back the empty extension!
  2434 00003BF7 EB70                <1>     jmp short .pathHandle
  2435                              <1> .extFnd:
  2436                              <1> ;Here if the file had the right extension.
  2437 00003BF9 E829010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  2438 00003BFE 7269                <1>     jc .pathHandle
  2439                              <1> .extSrchFnd:
  2440                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  2441                              <1> ; a BAT. If it is, separate handling!
  2442 00003C00 803D08C5FFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  2443 00003C07 0F849ADFFFFF        <1>     je batLaunch
  2444 00003C0D 488D1D2DC5FFFF      <1>     lea rbx, launchBlock
  2445 00003C14 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  2446 00003C18 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  2447 00003C1B 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  2448 00003C22 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  2449 00003C26 498D405C            <1>     lea rax, qword [r8 + fcb1]
  2450 00003C2A 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  2451 00003C2E 498D406C            <1>     lea rax, qword [r8 + fcb2]
  2452 00003C32 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  2453 00003C36 488D15AAC6FFFF      <1>     lea rdx, cmdPathSpec
  2454 00003C3D B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  2455 00003C42 CD21                <1>     int 21h
  2456                              <1> ;If the program failed to start, verify why!
  2457 00003C44 B800590000          <1>     mov eax, 5900h      ;Get extended error
  2458 00003C49 31DB                <1>     xor ebx, ebx
  2459 00003C4B CD21                <1>     int 21h
  2460 00003C4D 668905B9C3FFFF      <1>     mov word [returnCode], ax   ;Error code from EXEC
  2461 00003C54 3C05                <1>     cmp al, errAccDen   ;Access denied?
  2462 00003C56 0F8469E2FFFF        <1>     je badAccError
  2463 00003C5C 3C07                <1>     cmp al, errMCBbad   ;If MCB bad error, freeze PC
  2464 00003C5E 0F84AC0B0000        <1>     je freezePC
  2465 00003C64 E9A7E2FFFF          <1>     jmp badCmdError     ;If something goes wrong, error out
  2466                              <1> .pathHandle:        
  2467                              <1> ;First check if rbp is null. If it is, its a first time entry. 
  2468                              <1> ;al has error code!
  2469 00003C69 4885ED              <1>     test rbp, rbp
  2470 00003C6C 0F85A3000000        <1>     jnz .pathReentry
  2471                              <1> ;Now check if the command we recieved included an absolute path.
  2472                              <1> ;If so, we don't do path substitution and just fail at this point
  2473 00003C72 488D356EC6FFFF      <1>     lea rsi, cmdPathSpec
  2474 00003C79 66AD                <1>     lodsw   ;Get the first two chars
  2475 00003C7B 3A05A8C3FFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  2476 00003C81 0F8489E2FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2477 00003C87 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  2478 00003C89 7412                <1>     je .pathGetEnv
  2479 00003C8B 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  2480 00003C8E 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  2481 00003C90 AC                  <1>     lodsb   ;Get the third char
  2482 00003C91 3A0592C3FFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  2483 00003C97 0F8473E2FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2484                              <1> .pathGetEnv:
  2485                              <1> ;Now get a pointer to the environment and search for PATH=
  2486                              <1> ;We only take the final portion of the path and add it to each path componant
  2487                              <1> ;This agrees with DOS 3.3
  2488 00003C9D E8EA0B0000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  2489 00003CA2 0F8468E2FFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  2490                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  2491                              <1>     ;Now we know we dont have to keep track of chars!!
  2492 00003CA8 488D3D63D2FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  2493 00003CAF E8320C0000          <1>     call searchForEnvVar
  2494 00003CB4 0F8256E2FFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
  2495 00003CBA 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
  2496 00003CBD 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
  2497                              <1> .pathRejoin:
  2498 00003CC4 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  2499 00003CC7 0F8443E2FFFF        <1>     je badCmdError      ;Empty or no more path? Error!
  2500 00003CCD 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
  2501 00003CD0 488D3DB9C7FFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  2502                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
  2503                              <1>     ;SHOULD CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
  2504                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
  2505                              <1>     ;This is impossible to do if env edited by COMMAND.COM
  2506 00003CD7 E8CD090000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
  2507 00003CDC 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  2508 00003CDF 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  2509 00003CE2 48FFCF              <1>     dec rdi ;Point to the null terminator
  2510 00003CE5 8A053EC3FFFF        <1>     mov al, byte [pathSep]
  2511 00003CEB 3847FF              <1>     cmp byte [rdi - 1], al
  2512 00003CEE 7401                <1>     je .skipPathsep ;Need for rootdir as a double slash start is a netpath
  2513 00003CF0 AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  2514                              <1> .skipPathsep: ;Affects double slashes in path (but thats ok)
  2515 00003CF1 488D350FC4FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2516 00003CF8 E86C090000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  2517 00003CFD 488D358CC7FFFF      <1>     lea rsi, searchSpec 
  2518 00003D04 488D3DDCC5FFFF      <1>     lea rdi, cmdPathSpec
  2519 00003D0B E840080000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  2520 00003D10 E972FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  2521                              <1> .pathReentry:
  2522 00003D15 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  2523 00003D19 0F84F1E1FFFF        <1>     je badCmdError
  2524                              <1> ;Currently, because we dont swap drives, we wont print this message.
  2525                              <1> ;Not really a big deal...
  2526                              <1>     ;cmp al, errBadDrv
  2527                              <1>     ;jne .pathDrvOk
  2528                              <1>     ;lea rdx, badDrvSrch ;Print the drive was invalid!
  2529                              <1>     ;mov eax, 0900h
  2530                              <1>     ;int 21h
  2531                              <1> ;.pathDrvOk:
  2532 00003D1F 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  2533 00003D22 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  2534 00003D25 EB9D                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  2535                              <1> 
  2536                              <1> .prepAndSearch:
  2537                              <1> ;Copies over the name and extension in UC to the last componant of the 
  2538                              <1> ;cmdPathSpec and null terminates. 
  2539                              <1> ;Input: cmdFcb name + ext setup. 
  2540                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  2541                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
  2542 00003D27 51                  <1>     push rcx
  2543 00003D28 56                  <1>     push rsi
  2544 00003D29 57                  <1>     push rdi
  2545 00003D2A 488D3DB6C5FFFF      <1>     lea rdi, cmdPathSpec 
  2546 00003D31 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  2547 00003D34 E80C090000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  2548 00003D39 807F013A            <1>     cmp byte [rdi + 1], ":"
  2549 00003D3D 7507                <1>     jne .notdriveRel
  2550 00003D3F 4881C702000000      <1>     add rdi, 2  ;Go past the drive specifier, but keep it!
  2551                              <1> .notdriveRel:
  2552 00003D46 488D35BAC3FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2553 00003D4D E817090000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  2554 00003D52 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  2555 00003D57 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  2556 00003D59 CD21                <1>     int 21h
  2557 00003D5B 5F                  <1>     pop rdi
  2558 00003D5C 5E                  <1>     pop rsi
  2559 00003D5D 59                  <1>     pop rcx
  2560                              <1>     return
    13                              <2> %%_ret:
    14 00003D5E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2561                              <1> 
  2562                              <1> set:
  2563 00003D5F F6053EC3FFFFFF      <1>     test byte [arg1Flg], -1
  2564 00003D66 7539                <1>     jnz .editEnv
  2565                              <1>     ;Here we just print the environment.
  2566 00003D68 E81F0B0000          <1>     call checkEnvGoodAndGet 
  2567 00003D6D 0F8449E1FFFF        <1>     jz badEnvSpaceError
  2568                              <1>     ;We know this is a good env so keep going! env ptr in rsi
  2569 00003D73 4889F7              <1>     mov rdi, rsi
  2570 00003D76 4889F2              <1>     mov rdx, rsi
  2571                              <1> .findLp:
  2572 00003D79 B9FFFFFFFF          <1>     mov ecx, -1
  2573 00003D7E 31C0                <1>     xor eax, eax
  2574                              <1> .scanLp:
  2575 00003D80 F2AE                <1>     repne scasb
  2576 00003D82 75FC                <1>     jne .scanLp
  2577 00003D84 F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
  2578                              <1>     ;Else, we now print this environment variable and CRLF it
  2579                              <1>     ;rdx points to the start of the string aleady
  2580                              <1>     ;ecx has the bytes to print
  2581 00003D86 BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
  2582 00003D8B B800400000          <1>     mov eax, 4000h  ;Print to handle
  2583 00003D90 CD21                <1>     int 21h
  2584 00003D92 E8A5050000          <1>     call printCRLF
  2585 00003D97 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
  2586                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003D9A 74(5E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2587 00003D9C 4889FA              <1>     mov rdx, rdi   
  2588 00003D9F EBD8                <1>     jmp short .findLp
  2589                              <1> .editEnv:
  2590 00003DA1 E8E60A0000          <1>     call checkEnvGoodAndGet
  2591 00003DA6 0F8410E1FFFF        <1>     jz badEnvSpaceError
  2592 00003DAC 0FB605F2C2FFFF      <1>     movzx eax, byte [arg1Off]
  2593 00003DB3 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2594 00003DBA 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
  2595                              <1> .altEp:
  2596 00003DBD 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
  2597 00003DC0 B00D                <1>     mov al, CR              ;Search for the CR
  2598 00003DC2 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
  2599 00003DCA 89CB                <1>     mov ebx, ecx            ;Save this count 
  2600 00003DCC 53                  <1>     push rbx                ;Save this count on the stack too!
  2601 00003DCD F2AE                <1>     repne scasb             ;Now get the length of this env string
  2602 00003DCF 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
  2603 00003DD1 66891DBAC9FFFF      <1>     mov word [envVarSz], bx ;Store the count
  2604 00003DD8 59                  <1>     pop rcx                 ;Get the char count back!
  2605 00003DD9 89CB                <1>     mov ebx, ecx            
  2606 00003DDB 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
  2607 00003DDE B03D                <1>     mov al, "="             ;Scan for an equals sign
  2608 00003DE0 F2AE                <1>     repne scasb
  2609 00003DE2 0F85CBE0FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
  2610 00003DE8 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
  2611 00003DEA 66891DA3C9FFFF      <1>     mov word [envVarNamSz], bx
  2612 00003DF1 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
  2613 00003DF4 7477                <1>     je .delEnvVar           ;Free the envvar and return
  2614 00003DF6 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
  2615 00003DF7 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2616 00003DFA E8E70A0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2617 00003DFF 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
  2618 00003E01 E80E0B0000          <1>     call envFree            ;Free the var in rsi
  2619                              <1> .editNewEnv:
  2620 00003E06 E8420B0000          <1>     call getFreeSpace       ;Get the free space in env in ecx
  2621 00003E0B E8620B0000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
  2622 00003E10 5E                  <1>     pop rsi                 ;Get back the ptr to the string
  2623 00003E11 31C0                <1>     xor eax, eax            ;Prepare null length!
  2624 00003E13 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
  2625 00003E19 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
  2626 00003E1C 720B                <1>     jb .reallocTry          ;Try to reallocate!
  2627 00003E1E FFC9                <1>     dec ecx                 ;Save a byte for end magic null
  2628 00003E20 663B0D6BC9FFFF      <1>     cmp cx, word [envVarSz] ;Do we have enough space?
  2629 00003E27 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
  2630                              <1> .reallocTry:
  2631                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
  2632                              <1>     ; we proceed with the environment size.
  2633 00003E29 E8590B0000          <1>     call growEnvBlock   ;Attempt to grow the environment
  2634 00003E2E 7319                <1>     jnc .reallocOk
  2635 00003E30 0F8486E0FFFF        <1>     jz badEnvSpaceError    ;Max environment space
  2636                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
  2637                              <1>     ; partially the variable into the env. If so we do that. If the name
  2638                              <1>     ; cannot fit, we don't bother
  2639                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
  2640 00003E36 663B0D57C9FFFF      <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
  2641                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00003E3D 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00003E3F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2642 00003E40 E877E0FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
  2643 00003E45 FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
  2644 00003E47 EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
  2645                              <1> .reallocOk:
  2646                              <1>     ;Here we have all the space to just copy the full path
  2647 00003E49 0FB70D42C9FFFF      <1>     movzx ecx, word [envVarSz]
  2648                              <1> .nameCp:
  2649                              <1> ;Now copy over the env var, ecx = #ofchars to copy
  2650                              <1> ;Always enough memory for name= here
  2651 00003E50 AC                  <1>     lodsb
  2652 00003E51 E81D070000          <1>     call ucChar
  2653 00003E56 AA                  <1>     stosb
  2654 00003E57 66FFC9              <1>     dec cx      ;Always decrement this count
  2655 00003E5A 3C3D                <1>     cmp al, "="
  2656 00003E5C 75F2                <1>     jne .nameCp
  2657                              <1> .exitNameCp:
  2658 00003E5E AC                  <1>     lodsb
  2659 00003E5F 3C0D                <1>     cmp al, CR
  2660 00003E61 7405                <1>     je .exitCp
  2661 00003E63 AA                  <1>     stosb
  2662 00003E64 FFC9                <1>     dec ecx
  2663 00003E66 75F6                <1>     jnz .exitNameCp
  2664                              <1> .exitCp:
  2665 00003E68 31C0                <1>     xor eax, eax
  2666 00003E6A 66AB                <1>     stosw   ;Store the final null word
  2667                              <1>     return
    13                              <2> %%_ret:
    14 00003E6C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2668                              <1> .delEnvVar:
  2669                              <1>     ;rsi -> Start of the envvar name in user buffer
  2670 00003E6D 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2671 00003E70 E8710A0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2672 00003E75 7205                <1>     jc .delEnvVarSkip
  2673 00003E77 E8980A0000          <1>     call envFree    ;Free the env var at rsi
  2674                              <1> .delEnvVarSkip:
  2675 00003E7C F8                  <1>     clc             ;Clear CF if the var doesnt exist
  2676                              <1>     return
    13                              <2> %%_ret:
    14 00003E7D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2677                              <1> 
  2678                              <1> pathEdit:
  2679                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
  2680                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
  2681                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
  2682                              <1> ; end there. Error with too many arguments error!
  2683                              <1> ;If after the equals sign there is nothing, we just print the path!
  2684                              <1> ;Gotta process the command line ourselves first
  2685 00003E7E E8090A0000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2686 00003E83 0F8433E0FFFF        <1>     jz badEnvSpaceError
  2687                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2688 00003E89 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2689 00003E90 E8AD000000          <1>     call .skipPathDelimiters
  2690 00003E95 3C0D                <1>     cmp al, CR
  2691 00003E97 7466                <1>     je .printPath
  2692                              <1> ;Else use the set command to setup the path in the searchSpec.
  2693 00003E99 56                  <1>     push rsi    ;Save the first char of the command line string
  2694 00003E9A 488D3571D0FFFF      <1>     lea rsi, pathEVar
  2695 00003EA1 488D3DE8C5FFFF      <1>     lea rdi, searchSpec
  2696 00003EA8 E8A3060000          <1>     call strcpy
  2697 00003EAD 48FFCF              <1>     dec rdi     ;Point to the terminating null
  2698 00003EB0 5E                  <1>     pop rsi     ;Get back the first char of the pathstring
  2699 00003EB1 31C9                <1>     xor ecx, ecx    ;Make a count of chars
  2700                              <1> .cpLp:
  2701 00003EB3 AC                  <1>     lodsb
  2702 00003EB4 3C0D                <1>     cmp al, CR
  2703 00003EB6 7411                <1>     je .cpLpExit
  2704 00003EB8 E891000000          <1>     call .isALPathDelimiter ;Any path delims now are exit conditions!
  2705 00003EBD 740A                <1>     je .cpLpExit
  2706 00003EBF E8AF060000          <1>     call ucChar ;Uppercase the char
  2707 00003EC4 AA                  <1>     stosb       ;Store it
  2708 00003EC5 FFC1                <1>     inc ecx     ;Inc the count, CR not inclusive!
  2709 00003EC7 EBEA                <1>     jmp short .cpLp
  2710                              <1> .cpLpExit:
  2711                              <1>     ;Remove trailing semicolons
  2712 00003EC9 807FFF3B            <1>     cmp byte [rdi - 1], ";" ;Check back a char
  2713 00003ECD 7507                <1>     jne .cpLpNoIntervene
  2714 00003ECF FFC9                <1>     dec ecx     ;Reduce the count by one
  2715 00003ED1 48FFCF              <1>     dec rdi     ;Go back a char
  2716 00003ED4 EBF3                <1>     jmp short .cpLpExit ;Keep removing
  2717                              <1> .cpLpNoIntervene:
  2718 00003ED6 B00D                <1>     mov al, CR  ;Now we store the terminator!
  2719 00003ED8 AA                  <1>     stosb       ;Store it!
  2720 00003ED9 81C105000000        <1>     add ecx, 5  ;PATH= is 5 chars
  2721 00003EDF 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count
  2722 00003EE6 FFC1                <1>     inc ecx     ;Add the CR for copying over
  2723 00003EE8 488D35A1C5FFFF      <1>     lea rsi, searchSpec
  2724 00003EEF 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2725 00003EF6 57                  <1>     push rdi
  2726 00003EF7 F3A4                <1>     rep movsb
  2727 00003EF9 5E                  <1>     pop rsi         ;Get the ptr to the cmdline in rsi
  2728 00003EFA E9BEFEFFFF          <1>     jmp set.altEp   ;We've now set the string up, lets go!
  2729                              <1> .printPath:
  2730 00003EFF 488D3D0CD0FFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
  2731 00003F06 E8DB090000          <1>     call searchForEnvVar    ;Returns ptr to env var in rsi
  2732 00003F0B 7221                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
  2733 00003F0D 4889F7              <1>     mov rdi, rsi        
  2734 00003F10 E854060000          <1>     call strlen         ;Get the length of the path in rdi
  2735 00003F15 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
  2736 00003F1B 7411                <1>     je .noPathPrnt      ;Print no path!
  2737 00003F1D FFC9                <1>     dec ecx             ;Drop the terminating null from the count
  2738 00003F1F 4889FA              <1>     mov rdx, rdi        ;Set path ptr for printing
  2739 00003F22 BB01000000          <1>     mov ebx, 1          ;STDOUT
  2740 00003F27 B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
  2741 00003F2C EB0C                <1>     jmp short .pathExit
  2742                              <1> .noPathPrnt:
  2743 00003F2E 488D15C9CCFFFF      <1>     lea rdx, noPath
  2744 00003F35 B800090000          <1>     mov eax, 0900h
  2745                              <1> .pathExit:
  2746 00003F3A CD21                <1>     int 21h
  2747 00003F3C E8FB030000          <1>     call printCRLF      ;Print a crlf at the end
  2748                              <1>     return
    13                              <2> %%_ret:
    14 00003F41 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2749                              <1> .skipPathDelimiters:
  2750                              <1> ;Input: rsi -> Start of string to parse
  2751                              <1> ;Output: rsi -> First non-delimiter char of string
  2752                              <1> ;        al = First non delim char
  2753 00003F42 AC                  <1>     lodsb
  2754 00003F43 E806000000          <1>     call .isALPathDelimiter
  2755 00003F48 74F8                <1>     je .skipPathDelimiters
  2756 00003F4A 48FFCE              <1>     dec rsi
  2757                              <1>     return
    13                              <2> %%_ret:
    14 00003F4D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2758                              <1> .isALPathDelimiter:
  2759                              <1> ;Same as before without semicolon
  2760 00003F4E 3C20                <1>     cmp al, SPC
  2761                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003F50 74(4D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2762 00003F52 3C09                <1>     cmp al, TAB
  2763                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003F54 74(4D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2764 00003F56 3C2C                <1>     cmp al, ","
  2765                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003F58 74(4D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2766 00003F5A 3C3D                <1>     cmp al, "="
  2767                              <1>     return
    13                              <2> %%_ret:
    14 00003F5C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2768                              <1> 
  2769                              <1> prompt:
  2770 00003F5D E82A090000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2771 00003F62 0F8454DFFFFF        <1>     jz badEnvSpaceError
  2772                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2773 00003F68 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2774 00003F6F E81A060000          <1>     call skipDelimiters ;Points rsi to the first non-delimiter char
  2775 00003F74 803E0D              <1>     cmp byte [rsi], CR  ;Is the first non-delim a CR?
  2776 00003F77 742C                <1>     je .reset   ;Reset if so
  2777 00003F79 56                  <1>     push rsi    ;Save ptr to the start of the user typed line
  2778 00003F7A 488D3567CFFFFF      <1>     lea rsi, promptEVar ;Copy the PROMPT= prefix to searchspec
  2779 00003F81 488D3D08C5FFFF      <1>     lea rdi, searchSpec
  2780 00003F88 B907000000          <1>     mov ecx, 7  ;Copy without <CR>
  2781 00003F8D F3A4                <1>     rep movsb
  2782 00003F8F 5E                  <1>     pop rsi ;Get back ptr to the user typed line
  2783 00003F90 31C9                <1>     xor ecx, ecx    ;Get char count
  2784                              <1> .cp:    ;Now copy the user string over
  2785 00003F92 AC                  <1>     lodsb
  2786 00003F93 AA                  <1>     stosb 
  2787 00003F94 3C0D                <1>     cmp al, CR
  2788 00003F96 7404                <1>     je .cpOk
  2789 00003F98 FFC1                <1>     inc ecx ;Increment count if non CR char copied over
  2790 00003F9A EBF6                <1>     jmp short .cp
  2791                              <1> .cpOk:
  2792 00003F9C 488D35EDC4FFFF      <1>     lea rsi, searchSpec ;Source the string from here
  2793 00003FA3 EB09                <1>     jmp short .goSet    ;Got the CR-less count
  2794                              <1> .reset:
  2795                              <1> ;Delete the environment variable!
  2796 00003FA5 488D353CCFFFFF      <1>     lea rsi, promptEVar 
  2797 00003FAC 31C9                <1>     xor ecx, ecx    ;No chars to write to the envstring
  2798                              <1> .goSet:
  2799 00003FAE 81C107000000        <1>     add ecx, 7  ;Add the chars for the prompt= string too
  2800 00003FB4 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl 
  2801 00003FBB FFC1                <1>     inc ecx     ;Include CR in copy
  2802 00003FBD 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2803 00003FC4 57                  <1>     push rdi
  2804 00003FC5 F3A4                <1>     rep movsb
  2805 00003FC7 5E                  <1>     pop rsi
  2806 00003FC8 E9F0FDFFFF          <1>     jmp set.altEp
  2807                              <1> 
  2808                              <1> echo:
  2809 00003FCD F605D0C0FFFFFF      <1>     test byte [arg1Flg], -1 ;If no argument, display if on or off
  2810 00003FD4 752A                <1>     jnz .argGiven
  2811 00003FD6 488D1512CDFFFF      <1>     lea rdx, echoIs
  2812 00003FDD E861030000          <1>     call printString
  2813 00003FE2 488D15ECCCFFFF      <1>     lea rdx, onMes
  2814 00003FE9 488D0DDFCCFFFF      <1>     lea rcx, offMes
  2815 00003FF0 F6059FC0FFFFFF      <1>     test byte [echoFlg], -1
  2816 00003FF7 480F44D1            <1>     cmovz rdx, rcx
  2817 00003FFB E943030000          <1>     jmp printString
  2818                              <1> .argGiven:
  2819 00004000 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2820 00004007 0FB60597C0FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the offset
  2821 0000400E 4801C6              <1>     add rsi, rax
  2822 00004011 AC                  <1>     lodsb   ;Get this char
  2823 00004012 48FFCE              <1>     dec rsi ;And go back to the start of the string
  2824 00004015 E859050000          <1>     call ucChar
  2825 0000401A 3C4F                <1>     cmp al, "O" ;Was it an O? If not, direct copy
  2826 0000401C 755A                <1>     jne .directEcho
  2827 0000401E 8A4601              <1>     mov al, byte [rsi + 1]  ;Get the next char
  2828 00004021 E84D050000          <1>     call ucChar
  2829 00004026 3C4E                <1>     cmp al, "N" ;If its N, check its the last char on the string
  2830 00004028 751B                <1>     jne .checkOff
  2831 0000402A 56                  <1>     push rsi
  2832 0000402B 4881C602000000      <1>     add rsi, 2  ;Go past on string
  2833 00004032 E857050000          <1>     call skipDelimiters
  2834 00004037 803E0D              <1>     cmp byte [rsi], CR
  2835 0000403A 5E                  <1>     pop rsi
  2836 0000403B 753B                <1>     jne .directEcho ;If its not, just echo the string
  2837 0000403D C60552C0FFFF01      <1>     mov byte [echoFlg], 1   ;Set to 1 if on
  2838                              <1>     return
    13                              <2> %%_ret:
    14 00004044 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2839                              <1> .checkOff:
  2840 00004045 8A4601              <1>     mov al, byte [rsi + 1]  ;Get first char past O
  2841 00004048 E826050000          <1>     call ucChar
  2842 0000404D 3C46                <1>     cmp al, "F" ;Is it an F?
  2843 0000404F 7527                <1>     jne .directEcho ;No, just direct echo
  2844 00004051 8A4602              <1>     mov al, byte [rsi + 2]
  2845 00004054 E81A050000          <1>     call ucChar
  2846 00004059 3C46                <1>     cmp al, "F"
  2847 0000405B 751B                <1>     jne .directEcho
  2848 0000405D 56                  <1>     push rsi
  2849 0000405E 4881C603000000      <1>     add rsi, 3
  2850 00004065 E824050000          <1>     call skipDelimiters
  2851 0000406A 803E0D              <1>     cmp byte [rsi], CR
  2852 0000406D 5E                  <1>     pop rsi
  2853 0000406E 7508                <1>     jne .directEcho
  2854 00004070 C6051FC0FFFF00      <1>     mov byte [echoFlg], 0
  2855                              <1>     return
    13                              <2> %%_ret:
    14 00004077 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2856                              <1> .directEcho: 
  2857 00004078 498D9081000000      <1>     lea rdx, qword [r8 + cmdLine]
  2858 0000407F 4889F3              <1>     mov rbx, rsi    
  2859 00004082 4829D3              <1>     sub rbx, rdx
  2860 00004085 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get original char count
  2861 0000408D 29D9                <1>     sub ecx, ebx    ;Get the remaining chars
  2862 0000408F 0F82A7020000        <1>     jc printCRLF    ;If something weird, echo nothing
  2863 00004095 4889F2              <1>     mov rdx, rsi
  2864 00004098 BB01000000          <1>     mov ebx, 1
  2865 0000409D B800400000          <1>     mov eax, 4000h
  2866 000040A2 CD21                <1>     int 21h
  2867 000040A4 E993020000          <1>     jmp printCRLF
  2868                              <1> 
  2869                              <1> 
  2870                              <1> pauza:  ;Well... pause is an instruction in english 0:)
  2871                              <1> ;Thank you authors of MSDOS Encyclopedia for confusing an argument to this command
  2872                              <1> ; with just... the actual command tail being echoed with the command -_-
  2873 000040A9 F605E6BFFFFFFF      <1>     test byte [echoFlg], -1
  2874 000040B0 7528                <1>     jnz .echoTail
  2875                              <1> ;Since we havent echoed the command out, type the tail out manually
  2876 000040B2 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
  2877 000040B9 E8D0040000          <1>     call skipDelimiters ;Skip leading delims
  2878 000040BE 4889F2              <1>     mov rdx, rsi
  2879 000040C1 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get the count
  2880 000040C9 BB01000000          <1>     mov ebx, 1  ;Echo to STDOUT 
  2881 000040CE B800400000          <1>     mov eax, 4000h  ;Write
  2882 000040D3 CD21                <1>     int 21h
  2883 000040D5 E862020000          <1>     call printCRLF
  2884                              <1> .echoTail:
  2885 000040DA 488D1585C9FFFF      <1>     lea rdx, pauseMes
  2886 000040E1 E85D020000          <1>     call printString
  2887 000040E6 B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Triggers ^C
  2888 000040EB CD21                <1>     int 21h
  2889 000040ED E84A020000          <1>     call printCRLF
  2890                              <1> remark:
  2891                              <1>     return
    13                              <2> %%_ret:
    14 000040F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printDate:
     4                              <1> ;Input: eax = Packed Date
     5                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
     6                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
     7                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
     8                              <1> ;       ebx = 0 => Print two digit year
     9                              <1> ;       ebx = 1 => Print four digit year
    10 000040F3 53                  <1>     push rbx
    11 000040F4 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    12 000040F6 803D2EBFFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    13 000040FD 7240                <1>     jb .usDate
    14 000040FF 777C                <1>     ja .jpnDate
    15                              <1> ;European: DD/MM/YY
    16 00004101 251F000000          <1>     and eax, 1Fh    ;Save day bits
    17 00004106 E8B0000000          <1>     call .printFirst
    18 0000410B 8A1525BFFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    19 00004111 B402                <1>     mov ah, 02h
    20 00004113 CD21                <1>     int 21h
    21                              <1> 
    22 00004115 89C8                <1>     mov eax, ecx
    23 00004117 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    24 0000411C C1E805              <1>     shr eax, 5
    25 0000411F E8B3000000          <1>     call .printSecond
    26                              <1> 
    27 00004124 8A150CBFFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    28 0000412A B402                <1>     mov ah, 02h
    29 0000412C CD21                <1>     int 21h
    30                              <1> 
    31 0000412E 89C8                <1>     mov eax, ecx
    32 00004130 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    33 00004135 C1E809              <1>     shr eax, 9
    34 00004138 5B                  <1>     pop rbx ;Get the year signature back
    35 00004139 E8A9000000          <1>     call .printYear
    36                              <1>     return
    13                              <2> %%_ret:
    14 0000413E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                              <1> .usDate:
    38                              <1> ;US: MM/DD/YY
    39 0000413F 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    40 00004144 C1E805              <1>     shr eax, 5
    41 00004147 E86F000000          <1>     call .printFirst
    42                              <1> 
    43 0000414C 8A15E4BEFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    44 00004152 B402                <1>     mov ah, 02h
    45 00004154 CD21                <1>     int 21h
    46                              <1> 
    47 00004156 89C8                <1>     mov eax, ecx
    48 00004158 251F000000          <1>     and eax, 1Fh    ;Save day bits
    49 0000415D E875000000          <1>     call .printSecond
    50                              <1> 
    51 00004162 8A15CEBEFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 00004168 B402                <1>     mov ah, 02h
    53 0000416A CD21                <1>     int 21h
    54                              <1> 
    55 0000416C 89C8                <1>     mov eax, ecx
    56 0000416E 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 00004173 C1E809              <1>     shr eax, 9
    58 00004176 5B                  <1>     pop rbx ;Get the year signature back
    59 00004177 E86B000000          <1>     call .printYear
    60                              <1>     return
    13                              <2> %%_ret:
    14 0000417C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> .jpnDate:
    62                              <1> ;Japan: YY/MM/DD
    63 0000417D 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 00004182 C1E809              <1>     shr eax, 9
    65 00004185 5B                  <1>     pop rbx ;Get the year signature back
    66 00004186 E85C000000          <1>     call .printYear
    67                              <1> 
    68 0000418B 8A15A5BEFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    69 00004191 B402                <1>     mov ah, 02h
    70 00004193 CD21                <1>     int 21h
    71                              <1> 
    72 00004195 89C8                <1>     mov eax, ecx
    73 00004197 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    74 0000419C C1E805              <1>     shr eax, 5
    75 0000419F E833000000          <1>     call .printSecond
    76                              <1> 
    77 000041A4 8A158CBEFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    78 000041AA B402                <1>     mov ah, 02h
    79 000041AC CD21                <1>     int 21h
    80                              <1> 
    81 000041AE 89C8                <1>     mov eax, ecx
    82 000041B0 251F000000          <1>     and eax, 1Fh    ;Save day bits
    83 000041B5 E81D000000          <1>     call .printSecond
    84                              <1>     return
    13                              <2> %%_ret:
    14 000041BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> ;Each of these require eax setup correctly
    87                              <1> .printFirst:
    88 000041BB 51                  <1>     push rcx
    89 000041BC E8EB050000          <1>     call getDecimalWord
    90 000041C1 84ED                <1>     test ch, ch ;Do we have an upper digit?
    91 000041C3 7504                <1>     jnz .skipSpace
    92 000041C5 88CD                <1>     mov ch, cl
    93 000041C7 B120                <1>     mov cl, " "
    94                              <1> .skipSpace:
    95 000041C9 88CA                <1>     mov dl, cl
    96 000041CB B402                <1>     mov ah, 02h
    97 000041CD CD21                <1>     int 21h
    98 000041CF 88EA                <1>     mov dl, ch
    99 000041D1 B402                <1>     mov ah, 02h
   100 000041D3 CD21                <1>     int 21h
   101 000041D5 59                  <1>     pop rcx
   102                              <1>     return
    13                              <2> %%_ret:
    14 000041D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .printSecond:
   104 000041D7 51                  <1>     push rcx
   105 000041D8 E8CF050000          <1>     call getDecimalWord
   106 000041DD 84ED                <1>     test ch, ch ;Do we have an upper digit?
   107 000041DF 75E8                <1>     jnz .skipSpace
   108 000041E1 88CD                <1>     mov ch, cl
   109 000041E3 B130                <1>     mov cl, "0"
   110 000041E5 EBE2                <1>     jmp short .skipSpace
   111                              <1> .printYear:
   112 000041E7 05BC070000          <1>     add eax, 1980
   113 000041EC 51                  <1>     push rcx
   114 000041ED 53                  <1>     push rbx
   115 000041EE E8B9050000          <1>     call getDecimalWord ;Get unpacked in rcx
   116 000041F3 5B                  <1>     pop rbx
   117 000041F4 84DB                <1>     test bl, bl
   118 000041F6 740C                <1>     jz .twoDigitYear
   119 000041F8 88CA                <1>     mov dl, cl  ;Print the first digit
   120 000041FA B402                <1>     mov ah, 02h
   121 000041FC CD21                <1>     int 21h
   122 000041FE 88EA                <1>     mov dl, ch  ;Print the second digit
   123 00004200 B402                <1>     mov ah, 02h
   124 00004202 CD21                <1>     int 21h
   125                              <1> .twoDigitYear:
   126 00004204 C1E910              <1>     shr ecx, 10h    ;Get high word low
   127 00004207 88CA                <1>     mov dl, cl  ;Print the upper digit
   128 00004209 B402                <1>     mov ah, 02h
   129 0000420B CD21                <1>     int 21h
   130 0000420D 88EA                <1>     mov dl, ch  ;Print the lower digit
   131 0000420F B402                <1>     mov ah, 02h
   132 00004211 CD21                <1>     int 21h
   133 00004213 59                  <1>     pop rcx
   134                              <1>     return
    13                              <2> %%_ret:
    14 00004214 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> 
   137                              <1> printTime:
   138                              <1> ;Input: eax = Packed Time
   139                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   140                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   141 00004215 89C1                <1>     mov ecx, eax
   142 00004217 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   143 0000421C C1E80B              <1>     shr eax, 11
   144 0000421F 803D16BEFFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   145 00004226 750B                <1>     jne .ampm
   146 00004228 E85A000000          <1>     call .printHours
   147 0000422D E831000000          <1>     call .printMinutes
   148                              <1>     return
    13                              <2> %%_ret:
    14 00004232 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> .ampm:
   150 00004233 3D0C000000          <1>     cmp eax, 12
   151 00004238 7713                <1>     ja .pm
   152 0000423A 7416                <1>     je .pm2
   153 0000423C E846000000          <1>     call .printHours
   154 00004241 E81D000000          <1>     call .printMinutes
   155 00004246 B261                <1>     mov dl, "a"
   156 00004248 B402                <1>     mov ah, 02h
   157 0000424A CD21                <1>     int 21h
   158                              <1>     return
    13                              <2> %%_ret:
    14 0000424C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> .pm:
   160 0000424D 2D0C000000          <1>     sub eax, 12
   161                              <1> .pm2:
   162 00004252 E830000000          <1>     call .printHours
   163 00004257 E807000000          <1>     call .printMinutes
   164 0000425C B270                <1>     mov dl, "p"
   165 0000425E B402                <1>     mov ah, 02h
   166 00004260 CD21                <1>     int 21h
   167                              <1>     return
    13                              <2> %%_ret:
    14 00004262 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   168                              <1> .printMinutes:
   169 00004263 8A15CFBDFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   170 00004269 B402                <1>     mov ah, 02h
   171 0000426B CD21                <1>     int 21h
   172                              <1> 
   173 0000426D 89C8                <1>     mov eax, ecx
   174 0000426F 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   175 00004274 C1E805              <1>     shr eax, 5
   176                              <1> .printMinutesAlt:
   177 00004277 51                  <1>     push rcx
   178 00004278 E82F050000          <1>     call getDecimalWord
   179 0000427D 84ED                <1>     test ch, ch ;Do we have an upper digit?
   180 0000427F 7514                <1>     jnz .skipSpace
   181 00004281 88CD                <1>     mov ch, cl
   182 00004283 B130                <1>     mov cl, "0"
   183 00004285 EB0E                <1>     jmp short .skipSpace
   184                              <1> .printHours:
   185 00004287 51                  <1>     push rcx
   186 00004288 E81F050000          <1>     call getDecimalWord
   187 0000428D 84ED                <1>     test ch, ch ;Do we have an upper digit?
   188 0000428F 7504                <1>     jnz .skipSpace
   189 00004291 88CD                <1>     mov ch, cl
   190 00004293 B120                <1>     mov cl, " "
   191                              <1> .skipSpace:
   192 00004295 88CA                <1>     mov dl, cl
   193 00004297 B402                <1>     mov ah, 02h
   194 00004299 CD21                <1>     int 21h
   195 0000429B 88EA                <1>     mov dl, ch
   196 0000429D B402                <1>     mov ah, 02h
   197 0000429F CD21                <1>     int 21h
   198 000042A1 59                  <1>     pop rcx
   199                              <1>     return
    13                              <2> %%_ret:
    14 000042A2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printPrompt:
   202 000042A3 F605ECBDFFFFFF      <1>     test byte [echoFlg], -1 ;If echo off, no prompt!
   203                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000042AA 74(A2)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 000042AC 488D3D35CCFFFF      <1>     lea rdi, promptEVar   ;Find the prompt var
   205 000042B3 E82E060000          <1>     call searchForEnvVar
   206 000042B8 730B                <1>     jnc .validPrompt
   207                              <1>     ;Here we print the default prompt
   208 000042BA E8F9000000          <1>     call putCWDInPrompt
   209 000042BF E8C5000000          <1>     call putGTinPrompt
   210                              <1>     return
    13                              <2> %%_ret:
    14 000042C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> .validPrompt:
   212                              <1> ;rsi points to the prompt
   213 000042C5 4881C607000000      <1>     add rsi, 7  ;Go past the prompt= string
   214                              <1> .promptLp:
   215 000042CC AC                  <1>     lodsb   ;Get the char
   216 000042CD 84C0                <1>     test al, al
   217                              <1>     retz    ;Return when al is 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000042CF 74(C4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   218 000042D1 3C24                <1>     cmp al, "$"
   219 000042D3 7409                <1>     je .escapeChar
   220 000042D5 88C2                <1>     mov dl, al
   221 000042D7 E8D7000000          <1>     call outChar    ;Prints the char in dl
   222 000042DC EBEE                <1>     jmp short .promptLp
   223                              <1> .escapeChar:
   224 000042DE AC                  <1>     lodsb       ;Get the next char now that we are escaping
   225 000042DF E88F020000          <1>     call ucChar ;Uppercase this char in al
   226 000042E4 488D1D2A000000      <1>     lea rbx, .pTbl
   227 000042EB B90D000000          <1>     mov ecx, pTblL / 3  ;3 bytes per entry
   228                              <1> .escapeLp:
   229 000042F0 3803                <1>     cmp byte [rbx], al  ;Are we at the right entry?
   230 000042F2 740D                <1>     je .escapeFnd
   231 000042F4 4881C303000000      <1>     add rbx, 3  ;Go to next entry
   232 000042FB FFC9                <1>     dec ecx
   233 000042FD 75F1                <1>     jnz .escapeLp
   234 000042FF EBCB                <1>     jmp short .promptLp  ;Output nothing if invalid
   235                              <1> .escapeFnd:
   236 00004301 488D050D000000      <1>     lea rax, .pTbl              ;Get the table addr
   237 00004308 0FB75B01            <1>     movzx ebx, word [rbx + 1]   ;Get the word offset from the table
   238 0000430C 4801D8              <1>     add rax, rbx                ;Add these
   239 0000430F 56                  <1>     push rsi    ;Ensure rsi remains unchanged
   240 00004310 FFD0                <1>     call rax    ;Call indirectly the function to output the chars
   241 00004312 5E                  <1>     pop rsi
   242 00004313 EBB7                <1>     jmp short .promptLp
   243                              <1> 
   244                              <1> ;Easy table to use, 13 entries, 3 bytes per entry
   245                              <1> .pTbl:
   246 00004315 42                  <1>     db "B", 
   247 00004316 7000                <1>     dw putPipeInPrompt - .pTbl     ;Pipe char
   248 00004318 44                  <1>     db "D", 
   249 00004319 6F01                <1>     dw printFmtDate - .pTbl        ;Current date
   250 0000431B 45                  <1>     db "E", 
   251 0000431C 6400                <1>     dw putEscInPrompt - .pTbl      ;ANSI Escape char
   252 0000431E 47                  <1>     db "G", 
   253 0000431F 7400                <1>     dw putGTinPrompt - .pTbl       ;Greater than char
   254 00004321 48                  <1>     db "H", 
   255 00004322 7C00                <1>     dw putBSPinPrompt - .pTbl      ;Backspace
   256 00004324 4C                  <1>     db "L", 
   257 00004325 7800                <1>     dw putLTinPrompt - .pTbl       ;Less than char
   258 00004327 4E                  <1>     db "N", 
   259 00004328 9500                <1>     dw putDriveInPrompt - .pTbl    ;Current drive letter
   260 0000432A 50                  <1>     db "P", 
   261 0000432B A300                <1>     dw putCWDInPrompt - .pTbl      ;Current drive and path
   262 0000432D 51                  <1>     db "Q", 
   263 0000432E 6C00                <1>     dw putEquInPrompt - .pTbl      ;Equals char
   264 00004330 54                  <1>     db "T", 
   265 00004331 0601                <1>     dw printFmtTime - .pTbl        ;Current time in hh:mm:ss.hh fmt
   266 00004333 56                  <1>     db "V", 
   267 00004334 3600                <1>     dw putVersionInPrompt - .pTbl  ;DOS version number
   268 00004336 5F                  <1>     db "_", 
   269 00004337 2700                <1>     dw printCRLF - .pTbl           ;CRLF pair
   270 00004339 24                  <1>     db "$", 
   271 0000433A 6800                <1>     dw putMoneyInPrompt - .pTbl    ;Dollar sign
   272                              <1> pTblL equ $ - .pTbl
   273                              <1> 
   274                              <1> printCRLF:
   275 0000433C 488D155EC5FFFF      <1>     lea rdx, crlf
   276                              <1> printString:
   277 00004343 B800090000          <1>     mov eax, 0900h  ;Print string
   278 00004348 CD21                <1>     int 21h
   279                              <1>     return
    13                              <2> %%_ret:
    14 0000434A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   280                              <1> 
   281                              <1> putVersionInPrompt:
   282 0000434B 488D15FDC7FFFF      <1>     lea rdx, dosVer
   283 00004352 B409                <1>     mov ah, 09h ;Print String
   284 00004354 CD21                <1>     int 21h
   285 00004356 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   286 00004358 CD21                <1>     int 21h
   287 0000435A 50                  <1>     push rax    ;Save minor version
   288 0000435B E896010000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   289 00004360 E8AE010000          <1>     call printPackedBCD ;Print al
   290 00004365 B22E                <1>     mov dl, "."
   291 00004367 B402                <1>     mov ah, 02h
   292 00004369 CD21                <1>     int 21h
   293 0000436B 58                  <1>     pop rax
   294 0000436C 88E0                <1>     mov al, ah  ;Get the minor version low
   295 0000436E E883010000          <1>     call hexToBCD
   296 00004373 E89B010000          <1>     call printPackedBCD
   297                              <1>     return
    13                              <2> %%_ret:
    14 00004378 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   298                              <1> putEscInPrompt:
   299 00004379 B21B                <1>     mov dl, ESC
   300 0000437B EB36                <1>     jmp short outChar
   301                              <1> 
   302                              <1> putMoneyInPrompt:
   303 0000437D B224                <1>     mov dl, "$"
   304 0000437F EB32                <1>     jmp short outChar
   305                              <1> 
   306                              <1> putEquInPrompt:
   307 00004381 B23D                <1>     mov dl, "="
   308 00004383 EB2E                <1>     jmp short outChar
   309                              <1> 
   310                              <1> putPipeInPrompt:
   311 00004385 B27C                <1>     mov dl, "|"
   312 00004387 EB2A                <1>     jmp short outChar
   313                              <1> 
   314                              <1> putGTinPrompt:
   315 00004389 B23E                <1>     mov dl, ">"
   316 0000438B EB26                <1>     jmp short outChar
   317                              <1> 
   318                              <1> putLTinPrompt:
   319 0000438D B23C                <1>     mov dl, "<"
   320 0000438F EB22                <1>     jmp short outChar
   321                              <1> 
   322                              <1> putBSPinPrompt:
   323 00004391 488D15B2C9FFFF      <1>     lea rdx, backSpace
   324 00004398 B903000000          <1>     mov ecx, 3
   325 0000439D BB01000000          <1>     mov ebx, 1
   326 000043A2 B800400000          <1>     mov eax, 4000h  ;Output the backspace!
   327 000043A7 CD21                <1>     int 21h
   328                              <1>     return
    13                              <2> %%_ret:
    14 000043A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   329                              <1> 
   330                              <1> putDriveInPrompt:
   331 000043AA E89C010000          <1>     call getCurrentDrive
   332 000043AF 0441                <1>     add al, "A" ;Convert to letter
   333 000043B1 88C2                <1>     mov dl, al
   334                              <1> outChar:
   335 000043B3 B402                <1>     mov ah, 02h ;Echo to STDOUT
   336 000043B5 CD21                <1>     int 21h
   337                              <1>     return
    13                              <2> %%_ret:
    14 000043B7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   338                              <1> putCWDInPrompt:
   339 000043B8 E88E010000          <1>     call getCurrentDrive
   340 000043BD 3805D2BCFFFF        <1>     cmp byte [failDrv], al  ;If these are equal, badDrive
   341 000043C3 C605CBBCFFFFFF      <1>     mov byte [failDrv], -1  ;Reset on read
   342 000043CA 7443                <1>     je .badDrive 
   343 000043CC 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   344 000043CE FEC2                <1>     inc dl
   345 000043D0 0441                <1>     add al, "A" ;Convert to letter
   346 000043D2 B43A                <1>     mov ah, ":"
   347 000043D4 488D3D76BCFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   348 000043DB 66AB                <1>     stosw   ;Store X:, rdi+=2
   349 000043DD 8A0546BCFFFF        <1>     mov al, byte [pathSep]
   350 000043E3 AA                  <1>     stosb   ;Store pathSep, inc rdi
   351 000043E4 B800470000          <1>     mov eax, 4700h  ;Get Current Working Directory
   352 000043E9 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   353 000043EC CD21                <1>     int 21h
   354 000043EE 721F                <1>     jc .badDrive
   355 000043F0 E874010000          <1>     call strlen
   356 000043F5 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   357                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   358 000043FB B800400000          <1>     mov eax, 4000h ;Write to handle
   359 00004400 BB01000000          <1>     mov ebx, 1  ;STDOUT
   360 00004405 488D1545BCFFFF      <1>     lea rdx, currDirStr
   361 0000440C CD21                <1>     int 21h
   362                              <1>     return
    13                              <2> %%_ret:
    14 0000440E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   363                              <1> .badDrive:
   364                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   365 0000440F 488D1501C8FFFF      <1>     lea rdx, badDrvMsg
   366 00004416 E928FFFFFF          <1>     jmp printString
   367                              <1> printFmtTime:
   368                              <1> ;Outputs the formatted time
   369 0000441B E847000000          <1>     call getTime
   370 00004420 0FB6C5              <1>     movzx eax, ch
   371 00004423 E85FFEFFFF          <1>     call printTime.printHours
   372 00004428 8A150ABCFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   373 0000442E B402                <1>     mov ah, 02h
   374 00004430 CD21                <1>     int 21h
   375 00004432 0FB60520C2FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   376 00004439 E839FEFFFF          <1>     call printTime.printMinutesAlt
   377 0000443E 8A15F4BBFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   378 00004444 B402                <1>     mov ah, 02h
   379 00004446 CD21                <1>     int 21h
   380 00004448 0FB6050DC2FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   381 0000444F E823FEFFFF          <1>     call printTime.printMinutesAlt
   382 00004454 B22E                <1>     mov dl, "."
   383 00004456 B402                <1>     mov ah, 02h
   384 00004458 CD21                <1>     int 21h
   385 0000445A 0FB605FAC1FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   386 00004461 E811FEFFFF          <1>     call printTime.printMinutesAlt
   387                              <1>     return
    13                              <2> %%_ret:
    14 00004466 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   388                              <1> getTime:
   389 00004467 B42C                <1>     mov ah, 2Ch ;DOS get time
   390 00004469 CD21                <1>     int 21h
   391                              <1>     ;CH = hour (0-23)
   392                              <1> 	;CL = minutes (0-59)
   393                              <1> 	;DH = seconds (0-59)
   394                              <1> 	;DL = hundredths (0-99)
   395 0000446B 880DE8C1FFFF        <1>     mov byte [td1], cl
   396 00004471 882DE3C1FFFF        <1>     mov byte [td2], ch
   397 00004477 8815DEC1FFFF        <1>     mov byte [td3], dl
   398 0000447D 8835D9C1FFFF        <1>     mov byte [td4], dh
   399                              <1>     return
    13                              <2> %%_ret:
    14 00004483 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   400                              <1> 
   401                              <1> printFmtDate:
   402                              <1> ;Outputs the formatted date
   403 00004484 B8002A0000          <1>     mov eax, 2A00h ;DOS get date
   404 00004489 CD21                <1>     int 21h
   405                              <1> 	;AL = day of the week (0=Sunday)
   406                              <1> 	;CX = year (1980-2099)
   407                              <1> 	;DH = month (1-12)
   408                              <1> 	;DL = day (1-31)
   409 0000448B 6681E9BC07          <1>     sub cx, 1980    ;Subtract 1980 from cx
   410 00004490 66890DC2C1FFFF      <1>     mov word [td1], cx
   411 00004497 8815BEC1FFFF        <1>     mov byte [td3], dl
   412 0000449D 8835B9C1FFFF        <1>     mov byte [td4], dh
   413 000044A3 0FB6C0              <1>     movzx eax, al
   414 000044A6 89C3                <1>     mov ebx, eax
   415 000044A8 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   416 000044AA 01D8                <1>     add eax, ebx ;Make it 3 times 
   417 000044AC 488D15E6C5FFFF      <1>     lea rdx, dayName
   418 000044B3 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   419 000044B7 B903000000          <1>     mov ecx, 3  ;Print three chars
   420 000044BC BB01000000          <1>     mov ebx, 1  ;STDOUT
   421 000044C1 B440                <1>     mov ah, 40h ;Write to handle
   422 000044C3 CD21                <1>     int 21h
   423 000044C5 B220                <1>     mov dl, " "
   424 000044C7 E8E7FEFFFF          <1>     call outChar
   425                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   426                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   427                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   428 000044CC 0FB70586C1FFFF      <1>     movzx eax, word [td1]   ;Get this word
   429 000044D3 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   430 000044D6 0FB61D7FC1FFFF      <1>     movzx ebx, byte [td4]
   431 000044DD C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   432 000044E0 09D8                <1>     or eax, ebx ;Add this date to eax
   433 000044E2 0FB61D72C1FFFF      <1>     movzx ebx, byte [td3]
   434 000044E9 09D8                <1>     or eax, ebx
   435 000044EB BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   436 000044F0 E8FEFBFFFF          <1>     call printDate
   437                              <1>     return
    13                              <2> %%_ret:
    14 000044F5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   438                              <1> 
   439                              <1> 
   440                              <1> hexToBCD:
   441                              <1> ;Converts a Hex byte into two BCD digits
   442                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   443 000044F6 51                  <1>     push rcx
   444 000044F7 0FB6C0              <1>     movzx eax, al   ;Zero extend
   445 000044FA 31C9                <1>     xor ecx, ecx
   446                              <1> .htb0:
   447 000044FC 3D0A000000          <1>     cmp eax, 10
   448 00004501 7209                <1>     jb .htb1
   449 00004503 2D0A000000          <1>     sub eax, 10
   450 00004508 FFC1                <1>     inc ecx
   451 0000450A EBF0                <1>     jmp short .htb0
   452                              <1> .htb1:
   453 0000450C C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   454 0000450F 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   455 00004511 59                  <1>     pop rcx
   456 00004512 C3                  <1>     ret
   457                              <1> 
   458                              <1> printPackedBCD:
   459                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   460                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   461                              <1> ;Preserves all registers
   462 00004513 50                  <1>     push rax
   463 00004514 52                  <1>     push rdx
   464 00004515 88C4                <1>     mov ah, al
   465 00004517 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   466 00004519 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   467 0000451C 7508                <1>     jnz .upperNybble
   468 0000451E B220                <1>     mov dl, " "
   469 00004520 B402                <1>     mov ah, 02h
   470 00004522 CD21                <1>     int 21h
   471 00004524 EB0E                <1>     jmp short .lowerNybble
   472                              <1> .upperNybble:
   473 00004526 50                  <1>     push rax
   474 00004527 C0EC04              <1>     shr ah, 4
   475 0000452A 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   476 0000452D 88E2                <1>     mov dl, ah
   477 0000452F B402                <1>     mov ah, 02h ;Print DL
   478 00004531 CD21                <1>     int 21h
   479 00004533 58                  <1>     pop rax
   480                              <1> .lowerNybble:
   481 00004534 0430                <1>     add al, "0"
   482 00004536 88C2                <1>     mov dl, al
   483 00004538 B402                <1>     mov ah, 02h ;Print DL
   484 0000453A CD21                <1>     int 21h
   485 0000453C 5A                  <1>     pop rdx
   486 0000453D 58                  <1>     pop rax
   487                              <1>     return
    13                              <2> %%_ret:
    14 0000453E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   488                              <1> 
   489                              <1> setDrive:
   490                              <1> ;Input: dl = 0 based Drive number to set to
   491                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   492                              <1> ;AX trashed.
   493 0000453F B40E                <1>     mov ah, 0Eh ;Set drive to dl
   494 00004541 CD21                <1>     int 21h 
   495 00004543 E803000000          <1>     call getCurrentDrive
   496 00004548 38D0                <1>     cmp al, dl  ;Is this the same drive?
   497                              <1>     return
    13                              <2> %%_ret:
    14 0000454A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   498                              <1> getCurrentDrive:
   499                              <1> ;Returns the 0 based current drive in al
   500 0000454B B419                <1>     mov ah, 19h
   501 0000454D CD21                <1>     int 21h
   502                              <1>     return
    13                              <2> %%_ret:
    14 0000454F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   503                              <1> 
   504                              <1> strcpy:
   505                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   506                              <1> ;rsi -> Source
   507                              <1> ;rdi -> Destination
   508 00004550 51                  <1>     push rcx
   509 00004551 57                  <1>     push rdi
   510 00004552 4889F7              <1>     mov rdi, rsi
   511 00004555 E80F000000          <1>     call strlen ;Get the length of the string in rsi
   512 0000455A 5F                  <1>     pop rdi
   513 0000455B F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   514 0000455D 59                  <1>     pop rcx
   515                              <1>     return
    13                              <2> %%_ret:
    14 0000455E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   516                              <1> 
   517                              <1> strcpy2:
   518                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   519                              <1> ;rsi -> Source
   520                              <1> ;rdi -> Destination
   521 0000455F 56                  <1>     push rsi
   522 00004560 57                  <1>     push rdi
   523 00004561 E8EAFFFFFF          <1>     call strcpy 
   524 00004566 5F                  <1>     pop rdi
   525 00004567 5E                  <1>     pop rsi
   526                              <1>     return
    13                              <2> %%_ret:
    14 00004568 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   527                              <1> 
   528                              <1> strlen:
   529                              <1> ;Gets the length of a ASCIIZ string
   530                              <1> ;Input: rdi = Source buffer
   531                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   532 00004569 50                  <1>     push rax
   533 0000456A B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   534 0000456F CD2F                <1>     int 2fh
   535 00004571 58                  <1>     pop rax
   536                              <1>     return
    13                              <2> %%_ret:
    14 00004572 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   537                              <1> 
   538                              <1> ucChar:
   539                              <1> ;Input: al = Char to uppercase
   540                              <1> ;Output: al = Adjusted char 
   541 00004573 53                  <1>     push rbx
   542 00004574 50                  <1>     push rax    ;Push the char twice on the stack
   543 00004575 B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   544 0000457A CD2F                <1>     int 2fh         ;Returns the processed char in al
   545 0000457C 5B                  <1>     pop rbx         ;Pop the old word off the stack
   546 0000457D 5B                  <1>     pop rbx
   547                              <1>     return
    13                              <2> %%_ret:
    14 0000457E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   548                              <1> 
   549                              <1> normalisePath:
   550                              <1> ;Uppercases chars and flips pathseps
   551                              <1> ;Input: rsi -> Path to normalise
   552 0000457F 50                  <1>     push rax
   553 00004580 57                  <1>     push rdi
   554 00004581 4889F7              <1>     mov rdi, rsi
   555 00004584 B811120000          <1>     mov eax, 1211h
   556 00004589 CD2F                <1>     int 2fh
   557 0000458B 5F                  <1>     pop rdi
   558 0000458C 58                  <1>     pop rax
   559                              <1>     return
    13                              <2> %%_ret:
    14 0000458D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   560                              <1> 
   561                              <1> skipDelimiters:
   562                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   563                              <1> ; command delimiters but a subset thereof. 
   564                              <1> ;These are the same across all codepages.
   565                              <1> ;Input: rsi must point to the start of the data string
   566                              <1> ;Output: rsi points to the first non-delimiter char
   567 0000458E 50                  <1>     push rax
   568                              <1> .l1:
   569 0000458F AC                  <1>     lodsb
   570 00004590 E807000000          <1>     call isALdelimiter
   571 00004595 74F8                <1>     jz .l1
   572                              <1> .exit:
   573 00004597 58                  <1>     pop rax
   574 00004598 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   575                              <1>     return
    13                              <2> %%_ret:
    14 0000459B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   576                              <1> 
   577                              <1> isALdelimiter:
   578                              <1> ;Returns: ZF=NZ if al is not a command separator 
   579                              <1> ;         ZF=ZE if al is a command separator
   580 0000459C 3C20                <1>     cmp al, " "
   581                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000459E 74(9B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   582 000045A0 3C3B                <1>     cmp al, ";"
   583                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000045A2 74(9B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   584 000045A4 3C3D                <1>     cmp al, "="
   585                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000045A6 74(9B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   586 000045A8 3C2C                <1>     cmp al, ","
   587                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000045AA 74(9B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   588 000045AC 3C09                <1>     cmp al, TAB
   589                              <1>     return
    13                              <2> %%_ret:
    14 000045AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   590                              <1> 
   591                              <1> clearCommandState:
   592                              <1> ;Clears the command state
   593 000045AF 488D3DEEBAFFFF      <1>     lea rdi, cmdStatePtr
   594 000045B6 B907000000          <1>     mov ecx, cmdStateL
   595 000045BB 31C0                <1>     xor eax, eax
   596 000045BD F3AA                <1>     rep stosb
   597                              <1>     return
    13                              <2> %%_ret:
    14 000045BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   598                              <1> 
   599                              <1> clearCommandLineState:
   600                              <1> ;Clears the command line state after a 0Dh encountered
   601 000045C0 488D3DD2BAFFFF      <1>     lea rdi, cmdLineStatePtr
   602 000045C7 B912000000          <1>     mov ecx, cmdLineStateL
   603 000045CC 31C0                <1>     xor eax, eax
   604 000045CE F3AA                <1>     rep stosb
   605 000045D0 C705C0BAFFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   605 000045D9 FF                  <1>
   606 000045DA C705BCBAFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   606 000045E3 FF                  <1>
   607                              <1> ;Close all handles from 5->MAX
   608 000045E4 0FB70D3CBAFFFF      <1>     movzx ecx, word [numHdls]
   609 000045EB BB05000000          <1>     mov ebx, 5
   610                              <1> .lp:
   611 000045F0 B43E                <1>     mov ah, 3Eh ;File close
   612 000045F2 CD21                <1>     int 21h
   613 000045F4 FFC3                <1>     inc ebx ;Goto next file
   614 000045F6 39CB                <1>     cmp ebx, ecx
   615 000045F8 76F6                <1>     jbe .lp    ;Keep looping whilst below or equal
   616                              <1>     return
    13                              <2> %%_ret:
    14 000045FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   617                              <1> 
   618                              <1> asciiFilenameToFCB:
   619                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   620                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   621                              <1> ;Also doesn't check if chars are valid
   622                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   623                              <1> ;Name is space padded.
   624                              <1> ;Input: rsi = ASCII string buffer
   625                              <1> ;       rdi = FCB name buffer
   626                              <1> ;Output: al = Char that terminated the source string 
   627 000045FB 53                  <1>     push rbx    
   628 000045FC 57                  <1>     push rdi
   629 000045FD B90B000000          <1>     mov ecx, 11
   630 00004602 B020                <1>     mov al, " "
   631 00004604 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   632 00004606 5F                  <1>     pop rdi
   633 00004607 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   634                              <1>     ;Preprocess for Dir Searches
   635 0000460A 803E2E              <1>     cmp byte [rsi], "."
   636 0000460D 7509                <1>     jne .processName
   637 0000460F A4                  <1>     movsb   ;Store the first dot
   638 00004610 803E2E              <1>     cmp byte [rsi], "."
   639 00004613 752C                <1>     jne .exitBadChar
   640 00004615 A4                  <1>     movsb
   641 00004616 EB29                <1>     jmp short .exitBadChar
   642                              <1> .processName:
   643 00004618 AC                  <1>     lodsb   ;Get the char in al
   644 00004619 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   645 0000461B 7426                <1>     jz .exit
   646 0000461D 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   647 0000461F 7407                <1>     je .extSpace
   648 00004621 3C2E                <1>     cmp al, "."
   649 00004623 740C                <1>     je .ext
   650 00004625 AA                  <1>     stosb   ;Store the char
   651 00004626 EBF0                <1>     jmp short .processName
   652                              <1> .extSpace:
   653                              <1> ;Now we scan for a period in the name
   654 00004628 AC                  <1>     lodsb   ;Get a char and increase rsi
   655 00004629 84C0                <1>     test al, al
   656 0000462B 7416                <1>     jz .exit
   657 0000462D 3C2E                <1>     cmp al, "."     ;If al is not a period...
   658 0000462F 75F7                <1>     jne .extSpace   ; keep searching
   659                              <1> .ext:
   660 00004631 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   661                              <1> .processExt:
   662 00004635 AC                  <1>     lodsb
   663 00004636 84C0                <1>     test al, al
   664 00004638 7409                <1>     jz .exit
   665 0000463A 3C20                <1>     cmp al, " "
   666 0000463C 7405                <1>     je .exit
   667 0000463E AA                  <1>     stosb
   668 0000463F EBF4                <1>     jmp short .processExt
   669                              <1> .exitBadChar:
   670 00004641 30C0                <1>     xor al, al  ;Return a null terminator
   671                              <1> .exit:
   672 00004643 5B                  <1>     pop rbx
   673                              <1>     return
    13                              <2> %%_ret:
    14 00004644 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   674                              <1> 
   675                              <1> findLastPathComponant:
   676                              <1> ;Finds the last path componant of an ASCIIZ path string
   677                              <1> ;Input: rdi -> Head of the path to find last componant on
   678                              <1> ;Output: rdi -> Start of the last componant
   679 00004645 50                  <1>     push rax
   680 00004646 51                  <1>     push rcx
   681 00004647 31C9                <1>     xor ecx, ecx
   682 00004649 FFC9                <1>     dec ecx
   683 0000464B 31C0                <1>     xor eax, eax
   684 0000464D F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   685 0000464F F7D1                <1>     not ecx     ;This gets the count of chars  
   686 00004651 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   687 00004654 8A05CFB9FFFF        <1>     mov al, byte [pathSep]
   688 0000465A FD                  <1>     std
   689 0000465B F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   690 0000465D FC                  <1>     cld
   691 0000465E 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   692 00004660 48FFC7              <1>     inc rdi     ;Point at pathsep
   693                              <1> .exit:
   694 00004663 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   695 00004666 59                  <1>     pop rcx
   696 00004667 58                  <1>     pop rax
   697                              <1>     return
    13                              <2> %%_ret:
    14 00004668 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   698                              <1> 
   699                              <1> FCBToAsciiz:
   700                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   701                              <1> ;Name is space padded too
   702                              <1> ;Input: rsi = FCB name buffer
   703                              <1> ;       rdi = ASCIIZ string buffer
   704 00004669 B908000000          <1>     mov ecx, 8
   705 0000466E F3A4                <1>     rep movsb   ;Move the name over
   706                              <1> .scanNameSpace:
   707 00004670 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   708 00004674 750D                <1>     jne .ext
   709 00004676 48FFCF              <1>     dec rdi
   710 00004679 FFC1                <1>     inc ecx
   711 0000467B 81F908000000        <1>     cmp ecx, 8
   712 00004681 72ED                <1>     jb .scanNameSpace
   713                              <1> .ext:
   714 00004683 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   715 00004688 7506                <1>     jne .validExt
   716 0000468A 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   717 0000468E 7415                <1>     je .exit
   718                              <1> .validExt:
   719 00004690 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   720 00004692 AA                  <1>     stosb
   721 00004693 B903000000          <1>     mov ecx, 3
   722 00004698 F3A4                <1>     rep movsb   ;Move the three extension chars over
   723                              <1> .scanExtSpace:
   724 0000469A 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   725 0000469E 7505                <1>     jne .exit
   726 000046A0 48FFCF              <1>     dec rdi
   727 000046A3 EBF5                <1>     jmp short .scanExtSpace
   728                              <1> .exit:
   729 000046A5 31C0                <1>     xor eax, eax
   730 000046A7 AA                  <1>     stosb   ;Store a null at the end
   731                              <1>     return
    13                              <2> %%_ret:
    14 000046A8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   732                              <1> 
   733                              <1> cpDelimOrCtrlStringToBufz:
   734                              <1> ;Copy a delimited or control char terminated string to a buffer
   735                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   736                              <1> ;       rdi -> Buffer to store null terminated string in
   737                              <1> ;Output: rsi -> First char past string end
   738                              <1> ;       rdi -> One char past null terminator on string buffer
   739 000046A9 C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   740                              <1> .lp:
   741 000046AC AC                  <1>     lodsb
   742 000046AD 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here. CR included!
   743 000046AF 760A                <1>     jbe .exit
   744 000046B1 E8E6FEFFFF          <1>     call isALdelimiter
   745 000046B6 7403                <1>     je .exit
   746 000046B8 AA                  <1>     stosb
   747 000046B9 EBF1                <1>     jmp short .lp
   748                              <1> .exit:
   749 000046BB 31C0                <1>     xor eax, eax
   750 000046BD AA                  <1>     stosb   ;Store a null terminator
   751                              <1>     return
    13                              <2> %%_ret:
    14 000046BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   752                              <1> 
   753                              <1> 
   754                              <1> cpDelimPathToBufz:
   755                              <1> ;Copy a delimited path into buffer and null terminate.
   756                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   757                              <1> ;       rdi -> Buffer to store null terminated path in
   758                              <1> ;Output: rsi -> First char past pathname delimiter
   759                              <1> ;       rdi -> One char past null terminator on pathname buffer
   760 000046BF 53                  <1>     push rbx
   761 000046C0 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   762 000046C3 C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   763                              <1> .lp:
   764 000046C6 AC                  <1>     lodsb   ;Get the char
   765 000046C7 3C0D                <1>     cmp al, CR
   766 000046C9 7412                <1>     je .gotRedirPath
   767 000046CB E8CCFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   768 000046D0 740B                <1>     jz .gotRedirPath 
   769 000046D2 3A0552B9FFFF        <1>     cmp al, byte [switchChar]
   770 000046D8 7403                <1>     je .gotRedirPath
   771 000046DA AA                  <1>     stosb   ;Store this char and loop next char
   772 000046DB EBE9                <1>     jmp short .lp
   773                              <1> .gotRedirPath:
   774 000046DD 50                  <1>     push rax    ;Save the char on stack
   775 000046DE 30C0                <1>     xor al, al  ;Get null terminator char
   776 000046E0 4829FB              <1>     sub rbx, rdi
   777 000046E3 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   778 000046EA 7412                <1>     je .notColon
   779 000046EC 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   780 000046F3 7409                <1>     je .notColon
   781 000046F5 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   782 000046F9 7503                <1>     jne .notColon
   783 000046FB 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   784                              <1> .notColon:
   785 000046FE AA                  <1>     stosb   ;Store the null terminator for the redir path
   786 000046FF 58                  <1>     pop rax ;Get back the char in al
   787 00004700 5B                  <1>     pop rbx
   788                              <1>     return
    13                              <2> %%_ret:
    14 00004701 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   789                              <1> 
   790                              <1> buildCommandPath:
   791                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   792 00004702 0FB6059CB9FFFF      <1>     movzx eax, byte [arg1Off]
   793 00004709 4C8B05FFB8FFFF      <1>     mov r8, [pspPtr]
   794 00004710 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   795 00004717 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   796                              <1> copyArgumentToSearchSpec:
   797                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   798                              <1> ; and null terminates
   799 0000471A 488D3D6FBDFFFF      <1>     lea rdi, searchSpec
   800 00004721 E899FFFFFF          <1>     call cpDelimPathToBufz
   801                              <1>     return
    13                              <2> %%_ret:
    14 00004726 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   802                              <1> 
   803                              <1> scanForWildcards:
   804                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   805                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   806 00004727 50                  <1>     push rax
   807 00004728 56                  <1>     push rsi
   808                              <1> .lp:
   809 00004729 AC                  <1>     lodsb
   810 0000472A 3C3F                <1>     cmp al, "?"
   811 0000472C 740A                <1>     je .exit
   812 0000472E 3C2A                <1>     cmp al, "*"
   813 00004730 7406                <1>     je .exit
   814 00004732 84C0                <1>     test al, al
   815 00004734 75F3                <1>     jnz .lp
   816 00004736 FEC0                <1>     inc al  ;This will clear the ZF
   817                              <1> .exit:
   818 00004738 5E                  <1>     pop rsi
   819 00004739 58                  <1>     pop rax
   820                              <1>     return
    13                              <2> %%_ret:
    14 0000473A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   821                              <1> 
   822                              <1> printDecimalWord:
   823                              <1> ;Takes qword in rax and print it's decimal representation
   824                              <1> ;Takes the qword in eax and prints its decimal representation
   825 0000473B 31C9                <1>     xor ecx, ecx
   826 0000473D 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   827 0000473F 85C0                <1>     test eax, eax
   828 00004741 750C                <1>     jnz .notZero
   829 00004743 B930000000          <1>     mov ecx, "0"
   830 00004748 BD01000000          <1>     mov ebp, 1  ;Print one digit
   831 0000474D EB3E                <1>     jmp short .dpfb2
   832                              <1> .notZero:
   833 0000474F 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   834 00004751 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   835                              <1> .dpfb0:
   836 00004756 FFC5                <1>     inc ebp
   837 00004758 81FD08000000        <1>     cmp ebp, 8
   838 0000475E 7206                <1>     jb .dpfb00
   839 00004760 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   840 00004764 EB04                <1>     jmp short .dpfb01
   841                              <1> .dpfb00:
   842 00004766 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   843                              <1> .dpfb01:
   844 0000476A 31D2                <1>     xor edx, edx
   845 0000476C 48F7F6              <1>     div rsi
   846 0000476F 80C230              <1>     add dl, '0'
   847 00004772 80FA39              <1>     cmp dl, '9'
   848 00004775 7603                <1>     jbe .dpfb1
   849 00004777 80C207              <1>     add dl, 'A'-'0'-10
   850                              <1> .dpfb1:
   851 0000477A 81FD08000000        <1>     cmp ebp, 8
   852 00004780 7204                <1>     jb .dpfb10
   853 00004782 88D3                <1>     mov bl, dl ;Add the bottom bits
   854 00004784 EB02                <1>     jmp short .dpfb11
   855                              <1> .dpfb10:
   856 00004786 88D1                <1>     mov cl, dl    ;Save remainder byte
   857                              <1> .dpfb11:
   858 00004788 4885C0              <1>     test rax, rax
   859 0000478B 75C9                <1>     jnz .dpfb0
   860                              <1> .dpfb2:
   861 0000478D 81FD08000000        <1>     cmp ebp, 8
   862 00004793 7208                <1>     jb .dpfb20
   863 00004795 88DA                <1>     mov dl, bl
   864 00004797 48C1EB08            <1>     shr rbx, 8
   865 0000479B EB06                <1>     jmp short .dpfb21
   866                              <1> .dpfb20:
   867 0000479D 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   868 0000479F 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   869                              <1> .dpfb21:
   870 000047A3 B402                <1>     mov ah, 02h
   871 000047A5 CD21                <1>     int 21h
   872 000047A7 FFCD                <1>     dec ebp
   873 000047A9 75E2                <1>     jnz .dpfb2
   874                              <1>     return
    13                              <2> %%_ret:
    14 000047AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   875                              <1> 
   876                              <1> getDecimalWord:
   877                              <1> ;Works on MAX A dword in eax
   878                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   879 000047AC 31C9                <1>     xor ecx, ecx
   880 000047AE 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   881 000047B0 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   882                              <1> .dpfb0:
   883 000047B5 FFC5                <1>     inc ebp
   884 000047B7 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   885 000047BB 31D2                <1>     xor edx, edx
   886 000047BD 48F7F3              <1>     div rbx
   887 000047C0 80C230              <1>     add dl, '0'
   888 000047C3 80FA39              <1>     cmp dl, '9'
   889 000047C6 7603                <1>     jbe .dpfb1
   890 000047C8 80C207              <1>     add dl, 'A'-'0'-10
   891                              <1> .dpfb1:
   892 000047CB 88D1                <1>     mov cl, dl    ;Save remainder byte
   893 000047CD 4885C0              <1>     test rax, rax
   894 000047D0 75E3                <1>     jnz .dpfb0
   895                              <1>     return
    13                              <2> %%_ret:
    14 000047D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   896                              <1> getByte:
   897                              <1> ;Indicates if the number obtained is larger than a byte by setting CF
   898 000047D3 E807000000          <1>     call getNum
   899 000047D8 3D00010000          <1>     cmp eax, 100h
   900 000047DD F5                  <1>     cmc
   901                              <1>     return
    13                              <2> %%_ret:
    14 000047DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   902                              <1> getNum:
   903                              <1> ;Gets a number from a command line.
   904                              <1> ;Input: rsi -> String to get number from
   905                              <1> ;Output: rsi -> Char which terminated the accumulation
   906                              <1> ;        eax = Value of the string. May overflow if we read more than 9 chars...
   907                              <1> ;If an overflow, CF=CY. eax=Undefined. rsi-> Char 9
   908 000047DF 51                  <1>     push rcx
   909 000047E0 53                  <1>     push rbx
   910 000047E1 31DB                <1>     xor ebx, ebx
   911 000047E3 31C9                <1>     xor ecx, ecx    ;Start with a value of zero
   912 000047E5 31C0                <1>     xor eax, eax    
   913                              <1> .lp:
   914 000047E7 AC                  <1>     lodsb
   915 000047E8 3C30                <1>     cmp al, "0"
   916 000047EA 721B                <1>     jb .exit
   917 000047EC 3C39                <1>     cmp al, "9"
   918 000047EE 7717                <1>     ja .exit
   919 000047F0 2C30                <1>     sub al, "0"                     ;Convert to binary 
   920 000047F2 678D0C89            <1>     lea ecx, qword [4*ecx + ecx]    ;5*rcx
   921 000047F6 D1E1                <1>     shl ecx, 1                      ;2*(5*rcx)
   922 000047F8 01C1                <1>     add ecx, eax
   923 000047FA FFC3                <1>     inc ebx
   924 000047FC 81FB09000000        <1>     cmp ebx, 9
   925 00004802 75E3                <1>     jne short .lp   ;Get next digit
   926 00004804 F9                  <1>     stc             ;Yikesaroony
   927 00004805 EB01                <1>     jmp short .exitBad
   928                              <1> .exit:
   929 00004807 F8                  <1>     clc             ;Clear CF
   930                              <1> .exitBad:
   931 00004808 89C8                <1>     mov eax, ecx
   932 0000480A 5B                  <1>     pop rbx
   933 0000480B 59                  <1>     pop rcx
   934 0000480C 48FFCE              <1>     dec rsi         ;dec doesnt affect CF 
   935                              <1>     return
    13                              <2> %%_ret:
    14 0000480F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   936                              <1> 
   937                              <1> 
   938                              <1> freezePC:
   939 00004810 488D1545C6FFFF      <1>     lea rdx, memBad1
   940 00004817 B409                <1>     mov ah, 09h
   941 00004819 CD21                <1>     int 21h
   942                              <1> .altEP:
   943 0000481B 488D1563C6FFFF      <1>     lea rdx, memBad3
   944 00004822 B409                <1>     mov ah, 09h
   945 00004824 CD21                <1>     int 21h
   946                              <1> .lp:
   947 00004826 F390                <1>     pause
   948 00004828 F4                  <1>     hlt
   949 00004829 EBFB                <1>     jmp short .lp
   950                              <1> 
   951                              <1> setDTA:
   952 0000482B 50                  <1>     push rax
   953 0000482C 52                  <1>     push rdx
   954 0000482D 488D15E2B8FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   955 00004834 B8001A0000          <1>     mov eax, 1A00h
   956 00004839 CD21                <1>     int 21h
   957 0000483B 5A                  <1>     pop rdx
   958 0000483C 58                  <1>     pop rax
   959                              <1>     return
    13                              <2> %%_ret:
    14 0000483D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   960                              <1> 
   961                              <1> getDTA:
   962 0000483E 488D15D1B8FFFF      <1>     lea rdx, cmdFFBlock
   963                              <1>     return
    13                              <2> %%_ret:
    14 00004845 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   964                              <1> 
   965                              <1> resetIDTentries:
   966                              <1> ;Resets the IDT entries if they were changed by dead child process
   967 00004846 488D1571020000      <1>     lea rdx, critErrorHandler
   968 0000484D B824250000          <1>     mov eax, 2524h
   969 00004852 CD21                <1>     int 21h
   970 00004854 488D1577010000      <1>     lea rdx, ctrlCHandler
   971 0000485B B823250000          <1>     mov eax, 2523h
   972 00004860 CD21                <1>     int 21h
   973 00004862 488D15DBCCFFFF      <1>     lea rdx, appRet
   974 00004869 B822250000          <1>     mov eax, 2522h
   975 0000486E CD21                <1>     int 21h
   976                              <1>     return
    13                              <2> %%_ret:
    14 00004870 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   977                              <1> 
   978                              <1> ;-------------------------------
   979                              <1> ; Environment utility functions
   980                              <1> ;-------------------------------
   981                              <1> 
   982                              <1> cmpEnvVar:
   983                              <1> ;Checks that we have found the environment variable we are looking for.
   984                              <1> ;Input: rsi -> Environment var to verify the name of
   985                              <1> ;       rdi -> Environment var name to compare against
   986                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
   987 00004871 56                  <1>     push rsi
   988 00004872 57                  <1>     push rdi
   989 00004873 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs
   990                              <1> .lp:
   991 00004876 AC                  <1>     lodsb               ;Pick up from user string
   992 00004877 E8F7FCFFFF          <1>     call ucChar         ;Upper case it!
   993 0000487C 3807                <1>     cmp byte [rdi], al  
   994 0000487E 7509                <1>     jne .exit
   995 00004880 3C3D                <1>     cmp al, "="         ;Are we at the end?
   996 00004882 7405                <1>     je .exit
   997 00004884 48FFC7              <1>     inc rdi
   998 00004887 EBED                <1>     jmp short .lp
   999                              <1> .exit:
  1000 00004889 5F                  <1>     pop rdi
  1001 0000488A 5E                  <1>     pop rsi
  1002                              <1>     return
    13                              <2> %%_ret:
    14 0000488B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1003                              <1> 
  1004                              <1> checkEnvGoodAndGet:
  1005                              <1> ;Gets the env ptr and checks that it is double null terminated.
  1006                              <1> ;Output:
  1007                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
  1008                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
  1009                              <1> ;           rsi -> Environment pointer
  1010 0000488C 50                  <1>     push rax
  1011 0000488D 51                  <1>     push rcx
  1012 0000488E 57                  <1>     push rdi
  1013 0000488F 4150                <1>     push r8
  1014 00004891 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
  1015 00004895 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
  1016 00004898 741A                <1>     jz .badExit
  1017 0000489A 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
  1018 0000489D C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
  1019                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
  1020 000048A0 31C0                <1>     xor eax, eax
  1021                              <1> .pathNulScan:
  1022 000048A2 F2AE                <1>     repne scasb
  1023 000048A4 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
  1024 000048A6 740C                <1>     jz .badExit
  1025 000048A8 3807                <1>     cmp byte [rdi], al  ;Is char two null?
  1026 000048AA 75F6                <1>     jne .pathNulScan    ;If not, keep searching
  1027 000048AC 31C0                <1>     xor eax, eax
  1028 000048AE FFC0                <1>     inc eax ;Clear the ZF
  1029 000048B0 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
  1030                              <1> .badExit:
  1031 000048B4 4158                <1>     pop r8
  1032 000048B6 5F                  <1>     pop rdi
  1033 000048B7 59                  <1>     pop rcx
  1034 000048B8 58                  <1>     pop rax
  1035                              <1>     return
    13                              <2> %%_ret:
    14 000048B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1036                              <1> 
  1037                              <1> 
  1038                              <1> findEnvSpace:
  1039                              <1> ;Searches the environment for space, returns a pointer to the start of the 
  1040                              <1> ; free space in the pointer and a count of free space in the environment.
  1041                              <1> ;If count is zero, pointer is not to be used.
  1042                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
  1043 000048BA 31C9                <1>     xor ecx, ecx
  1044 000048BC 31C0                <1>     xor eax, eax    ;Clear eax too
  1045 000048BE 51                  <1>     push rcx
  1046 000048BF E8C8FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
  1047 000048C4 59                  <1>     pop rcx
  1048                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000048C5 74(B9)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1049 000048C7 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
  1050 000048CB FFC9                <1>     dec ecx ;Make into a large counter
  1051 000048CD 4889F7              <1>     mov rdi, rsi    
  1052                              <1> .endsearch:
  1053 000048D0 F2AE                <1>     repne scasb ;Scan
  1054 000048D2 803F00              <1>     cmp byte [rdi], 0
  1055 000048D5 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
  1056                              <1>     ;Here we are at the end of the environment
  1057 000048D7 F7D9                <1>     neg ecx
  1058 000048D9 FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
  1059 000048DB 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
  1060 000048DE 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
  1061 000048E1 29C8                <1>     sub eax, ecx
  1062 000048E3 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
  1063                              <1>     return
    13                              <2> %%_ret:
    14 000048E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1064                              <1> 
  1065                              <1> searchForEnvVar:
  1066                              <1> ;Gets the environment, and scans it for a string with the var specified.
  1067                              <1> ;Input: rdi -> Var name to look for.
  1068                              <1> ;Returns: CF=NC: rsi -> Env var in env.
  1069 000048E6 57                  <1>     push rdi
  1070 000048E7 51                  <1>     push rcx
  1071 000048E8 52                  <1>     push rdx
  1072 000048E9 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1073 000048ED 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
  1074                              <1> .varLp:
  1075 000048F0 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
  1076 000048F3 E879FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1077 000048F8 7416                <1>     je .varFound
  1078 000048FA 31C0                <1>     xor eax, eax        ;Search for a null
  1079 000048FC 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1080 000048FF B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1081 00004904 F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1082 00004906 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1083 00004908 7405                <1>     je .varNotFound     ;If second null, no more env to search!
  1084 0000490A 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1085 0000490D EBE1                <1>     jmp short .varLp    ;And scan again!
  1086                              <1> .varNotFound:
  1087 0000490F F9                  <1>     stc
  1088                              <1> .varFound:
  1089 00004910 59                  <1>     pop rcx
  1090 00004911 5A                  <1>     pop rdx
  1091 00004912 5F                  <1>     pop rdi
  1092                              <1>     return
    13                              <2> %%_ret:
    14 00004913 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1093                              <1> 
  1094                              <1> envFree:
  1095                              <1> ;Frees a variable from the environment, pulls the strings behind it up
  1096                              <1> ; zeros the rest of the environment, and returns a pointer to the first
  1097                              <1> ; free byte of the environment!
  1098                              <1> ;Input: rsi -> Variable to free.
  1099                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
  1100                              <1> ;        ecx = Number of free bytes in env
  1101 00004914 4889F7              <1>     mov rdi, rsi
  1102 00004917 31C0                <1>     xor eax, eax
  1103                              <1> .freeLp:
  1104 00004919 803F00              <1>     cmp byte [rdi], 0
  1105 0000491C 7403                <1>     je .exitLp
  1106 0000491E AA                  <1>     stosb
  1107 0000491F EBF8                <1>     jmp short .freeLp
  1108                              <1> .exitLp:
  1109                              <1> ;rdi points to the terminating null of the var we just deleted
  1110                              <1> ;rsi points to the start of the free space
  1111 00004921 4887F7              <1>     xchg rsi, rdi   ;Swap em!
  1112 00004924 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
  1113 00004929 7504                <1>     jne .prepPullup
  1114 0000492B 31C0                <1>     xor eax, eax
  1115 0000492D EB0E                <1>     jmp short .cleanEnv
  1116                              <1> .prepPullup:
  1117 0000492F 48FFC6              <1>     inc rsi         ;Go past the terminating null!
  1118                              <1> .pullUp:
  1119 00004932 AC                  <1>     lodsb
  1120 00004933 AA                  <1>     stosb
  1121 00004934 84C0                <1>     test al, al ;Did we pick up a zero
  1122 00004936 75FA                <1>     jne .pullUp ;If not, keep copying
  1123 00004938 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
  1124 0000493B 75F5                <1>     jne .pullUp
  1125                              <1> ;We are at the end of the copy!
  1126                              <1> .cleanEnv:
  1127 0000493D AA                  <1>     stosb   ;Store the famous second null
  1128 0000493E 48FFCF              <1>     dec rdi ;without incrementing it!!
  1129 00004941 E807000000          <1>     call getFreeSpace
  1130 00004946 31C0                <1>     xor eax, eax
  1131 00004948 51                  <1>     push rcx
  1132 00004949 F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
  1133 0000494B 59                  <1>     pop rcx
  1134                              <1>     return
    13                              <2> %%_ret:
    14 0000494C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1135                              <1> 
  1136                              <1> getFreeSpace:
  1137                              <1> ;Output: ecx = Number of free bytes in the environment block
  1138 0000494D 56                  <1>     push rsi
  1139 0000494E 57                  <1>     push rdi
  1140 0000494F E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
  1141 00004954 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1142 00004958 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
  1143 0000495B E805000000          <1>     call getEnvSize ;Get total block size
  1144 00004960 29F9                <1>     sub ecx, edi    ;Get difference!
  1145 00004962 5F                  <1>     pop rdi
  1146 00004963 5E                  <1>     pop rsi
  1147                              <1>     return
    13                              <2> %%_ret:
    14 00004964 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1148                              <1> 
  1149                              <1> getEnvSize:
  1150                              <1> ;Gets the number of bytes in the environment allocation
  1151                              <1> ;Output: ecx = Number of bytes in the environment!
  1152 00004965 53                  <1>     push rbx
  1153 00004966 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
  1154 0000496A 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
  1155 0000496D C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
  1156 00004970 5B                  <1>     pop rbx
  1157                              <1>     return
    13                              <2> %%_ret:
    14 00004971 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1158                              <1> 
  1159                              <1> getPtrToEndOfEnv:
  1160                              <1> ;Gets ptr to end of the environment
  1161                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
  1162 00004972 50                  <1>     push rax
  1163 00004973 51                  <1>     push rcx
  1164 00004974 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
  1165 00004978 31C0                <1>     xor eax, eax
  1166 0000497A 31C9                <1>     xor ecx, ecx
  1167 0000497C FFC9                <1>     dec ecx
  1168                              <1> .lp:
  1169 0000497E F2AE                <1>     repne scasb
  1170 00004980 3807                <1>     cmp byte [rdi], al
  1171 00004982 75FA                <1>     jne .lp
  1172 00004984 59                  <1>     pop rcx
  1173 00004985 58                  <1>     pop rax
  1174                              <1>     return
    13                              <2> %%_ret:
    14 00004986 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1175                              <1> 
  1176                              <1> growEnvBlock:
  1177                              <1> ;Attempts to grow the environment to store the new string. Will clean the
  1178                              <1> ; newly allocated 160 byte block of the environment.
  1179                              <1> ;Returns:   CF=NC - Environment grown ok!
  1180                              <1> ;           CF=CY & ZF=ZE - Environment at max size
  1181                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
  1182 00004987 50                  <1>     push rax
  1183 00004988 53                  <1>     push rbx
  1184 00004989 51                  <1>     push rcx
  1185 0000498A 56                  <1>     push rsi
  1186 0000498B 57                  <1>     push rdi
  1187 0000498C E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
  1188 00004991 E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
  1189 00004996 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1190 0000499A 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
  1191 0000499D 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
  1192 000049A3 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
  1193 000049A9 7321                <1>     jae .tooLarge
  1194                              <1>     ;Here ZF must be NZ.
  1195 000049AB 4150                <1>     push r8
  1196 000049AD 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
  1197 000049B1 B8004A0000          <1>     mov eax, 4A00h
  1198 000049B6 CD21                <1>     int 21h
  1199 000049B8 4158                <1>     pop r8
  1200 000049BA 720A                <1>     jc .exit
  1201                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1202                              <1>     ; so we add 160 zeros to the count of bytes
  1203 000049BC 81C1A0000000        <1>     add ecx, 0A0h
  1204 000049C2 31C0                <1>     xor eax, eax
  1205 000049C4 F3AA                <1>     rep stosb
  1206                              <1> .exit:
  1207 000049C6 5F                  <1>     pop rdi
  1208 000049C7 5E                  <1>     pop rsi
  1209 000049C8 59                  <1>     pop rcx
  1210 000049C9 5B                  <1>     pop rbx
  1211 000049CA 58                  <1>     pop rax
  1212                              <1>     return
    13                              <2> %%_ret:
    14 000049CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1213                              <1> .tooLarge:
  1214 000049CC 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1215 000049CF F9                  <1>     stc             ;Set CF
  1216 000049D0 EBF4                <1>     jmp short .exit
    20                                  %include "./Source/int23h.asm"
     1                              <1> ctrlCHandler:
     2 000049D2 F605BBB6FFFF80      <1>     test byte [statFlg1], inLdr     ;Are we loading?
     3 000049D9 7411                <1>     jz .notLoading
     4 000049DB F605B2B6FFFF40      <1>     test byte [statFlg1], inLdrDT   ;Are we in date/time?
     5 000049E2 7439                <1>     jz  .inInt23                    ;IRETQ if not.
     6                              <1>     ;Else, we pretend nothing was typed in and proceed.
     7 000049E4 66C74201000D        <1>     mov word [rdx + 1], 0D00h       ;Place a 0 chars cnt and CR in the buffer
     8 000049EA EB12                <1>     jmp short .retFromDosCall       ;And return directly to DOS
     9                              <1> .notLoading:
    10 000049EC F605A1B6FFFF02      <1>     test byte [statFlg1], inCtrlC   ;In this handler already?
    11 000049F3 742A                <1>     jz .notNested                   ;If not, handle!
    12                              <1> ;We are in this CTRL+C, check the system call that we are interrupting...
    13                              <1> ;If a CON call, we are in Terminate Batch Job msg. Set CF to indicate
    14                              <1> ; to US that the user CTRL+C'd the Terminate Batch Job message! Return
    15                              <1> ; from DOS directly, do not reenter CON call.
    16 000049F5 84E4                <1>     test ah, ah
    17 000049F7 7424                <1>     jz .inInt23 
    18 000049F9 80FC0C              <1>     cmp ah, 0Ch
    19 000049FC 771F                <1>     ja .inInt23
    20                              <1> .retFromDosCall:
    21                              <1> ;Go past the Int 23h stack frame to the entry to Int 21h stack frame
    22 000049FE 50                  <1>     push rax
    23 000049FF 488D0512000000      <1>     lea rax, .i23Bounce
    24 00004A06 4889442408          <1>     mov qword [rsp + 8], rax        ;Store as ret add
    25 00004A0B 31C0                <1>     xor eax, eax
    26 00004A0D 668CC8              <1>     mov ax, cs
    27 00004A10 4889442410          <1>     mov qword [rsp + 2*8], rax      ;Store the segment too
    28 00004A15 58                  <1>     pop rax
    29 00004A16 48CF                <1>     iretq   ;Iretq to the next instruction instead of DOS :)
    30                              <1> .i23Bounce:
    31 00004A18 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on stack frame flags!
    32                              <1> .inInt23:
    33 00004A1D 48CF                <1>     iretq
    34                              <1> .notNested:
    35                              <1> ;Main body of the CRTL+C handler! 
    36 00004A1F 800D6EB6FFFF02      <1>     or byte [statFlg1], inCtrlC     ;Set that we are in CTRL+C
    37 00004A26 F60567B6FFFF04      <1>     test byte [statFlg1], inSingle  ;Are we in single command mode?
    38 00004A2D 7509                <1>     jnz .skipReset                  
    39                              <1>     ;Now reset the disk subsystem to flush buffers appropriately,
    40                              <1>     ; in case of open files and/or we are hooked by someone who doesn't
    41                              <1>     ; want to return thru dos.
    42 00004A2F 50                  <1>     push rax
    43 00004A30 B8000D0000          <1>     mov eax, 0D00h  ;Reset Disk system!
    44 00004A35 CD21                <1>     int 21h
    45 00004A37 58                  <1>     pop rax
    46                              <1> .skipReset:
    47 00004A38 F60555B6FFFF08      <1>     test byte [statFlg1], inBatch   ;Are we processing a batch file?
    48 00004A3F 7462                <1>     jz .notBat
    49 00004A41 F6054CB6FFFF04      <1>     test byte [statFlg1], inSingle  ;Batch in a single command?
    50 00004A48 7559                <1>     jnz .notBat                     ;No batch cleanup, kill ourselves!
    51                              <1> ;CTRLC in a batch file will always abort the current command being 
    52                              <1> ; executed. CTRLC in a batch file is only for checking if we want to 
    53                              <1> ; terminate the whole batch procedure or not!
    54 00004A4A E881020000          <1>     call errSwapHdls    ;Swap STDIO back ONLY ON BATCH Error
    55                              <1> .ynLp:
    56 00004A4F 488D15A8BEFFFF      <1>     lea rdx, batFail
    57 00004A56 E8E8F8FFFF          <1>     call printString
    58 00004A5B 488D15A0B6FFFF      <1>     lea rdx, batYNstr
    59 00004A62 66C74202200D        <1>     mov word [rdx + 2], 0D20h   ;Space and a CR char
    60 00004A68 B80A0C0000          <1>     mov eax, 0C0Ah      ;Get clean buffered input!
    61 00004A6D CD21                <1>     int 21h
    62 00004A6F 7221                <1>     jc .nestKill         ;If we CTRL+C during this call, kill batch!
    63 00004A71 8A4202              <1>     mov al, byte [rdx + 2]
    64 00004A74 E8FAFAFFFF          <1>     call ucChar         ;UC using DOS
    65 00004A79 3C59                <1>     cmp al, "Y"
    66 00004A7B 740E                <1>     je .killBat
    67 00004A7D 3C4E                <1>     cmp al, "N"
    68 00004A7F 75CE                <1>     jne .ynLp
    69                              <1> .endBat:
    70                              <1> ;Tries to abort the Command interpreter, fails and 
    71                              <1> ; our internal state will proceed with batch processing. Doing this 
    72                              <1> ; ensures the command being interrupted is cancelled.
    73 00004A81 E8B6F8FFFF          <1>     call printCRLF
    74 00004A86 E923000000          <1>     jmp .exitBat    ;Clears errRetHdls and in ctrlc flag and exits!
    75                              <1> .killBat:   ;Now we need to terminate the batch file too.
    76 00004A8B E8BFD3FFFF          <1>     call batCleanup
    77 00004A90 EBEF                <1>     jmp short .endBat   ;Now CRLF and exit!
    78                              <1> .nestKill:
    79 00004A92 E8B8D3FFFF          <1>     call batCleanup
    80 00004A97 8025F6B5FFFFFD      <1>     and byte [statFlg1], ~inCtrlC   
    81 00004A9E E95BFFFFFF          <1>     jmp .retFromDosCall ;Nested kill needs to be handled like other nestings
    82                              <1> .notBat:
    83 00004AA3 66813DEBB5FFFFFFFF  <1>     cmp word [errHdls], -1  ;If these are not -1, return to normal!
    84 00004AAC 7405                <1>     je .exit
    85                              <1> .exitBat:
    86 00004AAE E83A020000          <1>     call errRetHdls 
    87                              <1> .exit:
    88 00004AB3 8025DAB5FFFFFD      <1>     and byte [statFlg1], ~inCtrlC
    89                              <1> .exitIn:
    90 00004ABA F9                  <1>     stc     ;Set CF to kill the task
    91 00004ABB C20800              <1>     ret 8   ;Return and adjust rsp stack to indicate we wanna kill task
    92                              <1> ;All we need is that the stack pointer is not at the address we had it
    93                              <1> ; at when we entered DOS to trigger a CF check! So anything from ret 8 to
    94                              <1> ; ret 4*8 to remove CS, RFLAGS, SS, RSP is acceptable and safe!
    21                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00004ABE 53                  <1>     push rbx
    25 00004ABF 51                  <1>     push rcx
    26 00004AC0 52                  <1>     push rdx
    27 00004AC1 57                  <1>     push rdi
    28 00004AC2 56                  <1>     push rsi
    29 00004AC3 E808020000          <1>     call errSwapHdls
    30 00004AC8 FC                  <1>     cld         ;Make String ops go forward
    31 00004AC9 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00004ACC 488D15CEBDFFFF      <1>     lea rdx, crlf
    33 00004AD3 E86BF8FFFF          <1>     call printString    ;Trashes ax
    34 00004AD8 0FB7FF              <1>     movzx edi, di                   ;Clear the upper word.
    35                              <1> 
    36 00004ADB 53                  <1>     push rbx        ;Save the action bitfield
    37 00004ADC 56                  <1>     push rsi        ;Save the driver pointer
    38 00004ADD B800590000          <1>     mov eax, 5900h  ;Get Extended Error
    39 00004AE2 CD21                <1>     int 21h
    40                              <1> ;DOS placed the following values in the following regs:
    41                              <1> ;ax = word [errorExCde]
    42                              <1> ;ch = byte [errorLocus]
    43                              <1> ;bh = byte [errorClass]
    44                              <1> ;bl = byte [errorAction]
    45                              <1> ;rdi = qword [errorVolLbl]
    46 00004AE4 488D3548C5FFFF      <1>     lea rsi, errorMsgTbl.FVol
    47 00004AEB 4887FE              <1>     xchg rdi, rsi   ;Swap the pointers
    48 00004AEE 48A5                <1>     movsq   ;Move over the 11 chars :)
    49 00004AF0 66A5                <1>     movsw
    50 00004AF2 A4                  <1>     movsb
    51 00004AF3 0FB7F8              <1>     movzx edi, ax  ;Move the error code into di
    52 00004AF6 5E                  <1>     pop rsi
    53 00004AF7 5B                  <1>     pop rbx
    54 00004AF8 81FF1F000000        <1>     cmp edi, errGF      ;Is this a normal driver error?
    55 00004AFE 7655                <1>     jbe .driverErr
    56                              <1> ;Now we split the driver from sharing and networking errors. Sharing doesnt go 
    57                              <1> ; thru the redir
    58 00004B00 81FF24000000        <1>     cmp edi, errShrFul
    59 00004B06 763F                <1>     jbe .shareErr
    60                              <1> ;Ok so this is a net error. Check to see if an installed message!
    61                              <1> ;di has the error code still
    62 00004B08 B800050000          <1>     mov eax, 0500h      ;Install check!
    63 00004B0D CD21                <1>     int 21h
    64 00004B0F 3CFF                <1>     cmp al, -1
    65 00004B11 752B                <1>     jne .redirDefault   ;No redir, print default net error
    66 00004B13 89F8                <1>     mov eax, edi        ;Else, move the error code into 
    67 00004B15 B405                <1>     mov ah, 05h         ;Get the string we need
    68 00004B17 CD21                <1>     int 21h
    69 00004B19 7223                <1>     jc .redirDefault    ;If no message installed for this code, generic!
    70                              <1>     ;Returned if CF=NC:
    71                              <1>     ; al = 0 => Print rest of message
    72                              <1>     ; al = 1 => Immediately prompt ARIF
    73                              <1>     ; rdi -> ASCIIZ string to print
    74 00004B1B 4889FA              <1>     mov rdx, rdi        
    75 00004B1E 50                  <1>     push rax            
    76 00004B1F 31C0                <1>     xor eax, eax
    77 00004B21 89C1                <1>     mov ecx, eax
    78 00004B23 FFC9                <1>     dec ecx
    79 00004B25 F2AE                <1>     repne scasb         ;Search for the terminating null
    80 00004B27 C647FF24            <1>     mov byte [rdi - 1], "$" ;Replace with dos string terminator
    81 00004B2B E813F8FFFF          <1>     call printString 
    82 00004B30 C647FF00            <1>     mov byte [rdi - 1], 0   ;Replace with sane string terminator
    83 00004B34 58                  <1>     pop rax
    84 00004B35 84C0                <1>     test al, al ;Is this zero?
    85 00004B37 7450                <1>     jz .proceedNormalWrite  ;Now print reading/writing etc
    86 00004B39 E99E000000          <1>     jmp .userInput    ;Else, print crlf and proceed to get input
    87                              <1> .redirDefault:
    88                              <1> ;Always jumped to with rdi in the error code. Thus, this will print only
    89                              <1> ; this line with no reading/writing etc. rdi is above errShrFul here
    90                              <1> ; and also not a table offset so definitely wont accidentally try print
    91                              <1> ; additional information
    92 00004B3E 488D1523C5FFFF      <1>     lea rdx, genNetErr  ;Set the generic network error message
    93 00004B45 EB35                <1>     jmp short .redirDefProceed
    94                              <1> .shareErr:
    95                              <1> ;Now ensure our error code is in the table, set to GF error if not.
    96 00004B47 BA1F000000          <1>     mov edx, errGF
    97 00004B4C 81FF24000000        <1>     cmp edi, errShrFul
    98 00004B52 0F47FA              <1>     cmova edi, edx
    99                              <1> .driverErr:
   100 00004B55 BA1F000000          <1>     mov edx, errGF      ;If we have an error below Driver Error 0, Gen. Err.
   101 00004B5A 81FF13000000        <1>     cmp edi, drvErrShft
   102 00004B60 0F42FA              <1>     cmovb edi, edx
   103 00004B63 81EF13000000        <1>     sub edi, drvErrShft ;Now reduce the error code to be a table offset
   104 00004B69 57                  <1>     push rdi    ;Save the error code for checking
   105 00004B6A 488D15BCC3FFFF      <1>     lea rdx, errMsgPtrTbl
   106 00004B71 4887FA              <1>     xchg rdi, rdx   ;Swap error code and table base
   107 00004B74 0FB71457            <1>     movzx edx, word [rdi + 2*rdx]   ;Get the word offset in rdx
   108 00004B78 4801FA              <1>     add rdx, rdi            ;Now add the table base!
   109 00004B7B 5F                  <1>     pop rdi
   110                              <1> .redirDefProceed:
   111 00004B7C E8C2F7FFFF          <1>     call printString        ;Call DOS to print first part of message
   112                              <1>     ;Now we handle any codes above errNoFCB - drvErrShft as 
   113                              <1>     ; to not print anything other than the string in the table!
   114                              <1>     ;cmp edi, errNoFCB - drvErrShft
   115 00004B81 81FF0F000000        <1>     cmp edi, errIDC - drvErrShft
   116 00004B87 7353                <1>     jae .userInput  ;IDC also triggers this skip
   117                              <1> .proceedNormalWrite:
   118 00004B89 488D15F6C4FFFF      <1>     lea rdx, readMsg
   119 00004B90 488D3DFEC4FFFF      <1>     lea rdi, writeMsg
   120 00004B97 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
   121 00004B9A 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
   122 00004B9E E8A0F7FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
   123                              <1> 
   124 00004BA3 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
   125 00004BA6 0F850A010000        <1>     jnz .charError
   126                              <1> ;Disk error continues here
   127 00004BAC 488D15CCC4FFFF      <1>     lea rdx, drvMsg ;Drive message
   128 00004BB3 E88BF7FFFF          <1>     call printString
   129 00004BB8 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   130 00004BBA 8815D5B4FFFF        <1>     mov byte [failDrv], dl  ;Setup the failing drive
   131 00004BC0 80C241              <1>     add dl, "A" ;Add ASCII code
   132 00004BC3 B402                <1>     mov ah, 02h ;Print char in dl
   133 00004BC5 CD21                <1>     int 21h
   134                              <1>     
   135 00004BC7 89D8                <1>     mov eax, ebx    ;Get bh into ah
   136 00004BC9 2500060000          <1>     and eax, 600h   ;Mask off bits 1 and 2 of bh
   137 00004BCE 3D00020000          <1>     cmp eax, 200h   ;Was this a FAT buffer?
   138 00004BD3 7507                <1>     jne .userInput  ;If not proceed as normal.
   139                              <1>     ;Else, abort! Application cannot proceed if FAT is breaking apart...
   140 00004BD5 B002                <1>     mov al, 2   ;Abort! Lose that FAT buffer
   141 00004BD7 E9CE000000          <1>     jmp .cehExit
   142                              <1> .userInput:
   143 00004BDC E85BF7FFFF          <1>     call printCRLF  ;Print new line
   144                              <1> ;Abort, Retry, Ignore, Fail is word order
   145                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   146                              <1> .userAbort:
   147                              <1> ;Abort is always an option
   148 00004BE1 488D15BCC4FFFF      <1>     lea rdx, abortMsg
   149 00004BE8 E856F7FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
   150                              <1> .userRetry:
   151 00004BED F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   152 00004BF0 7418                <1>     jz .userIgnore    ;If clear, dont print message
   153 00004BF2 488D15C3C4FFFF      <1>     lea rdx, betweenMsg
   154 00004BF9 E845F7FFFF          <1>     call printString
   155 00004BFE 488D15ACC4FFFF      <1>     lea rdx, retryMsg
   156 00004C05 E839F7FFFF          <1>     call printString
   157                              <1> .userIgnore:
   158 00004C0A F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   159 00004C0D 7418                <1>     jz .userFail
   160 00004C0F 488D15A6C4FFFF      <1>     lea rdx, betweenMsg
   161 00004C16 E828F7FFFF          <1>     call printString
   162 00004C1B 488D1588C4FFFF      <1>     lea rdx, ignoreMsg
   163 00004C22 E81CF7FFFF          <1>     call printString
   164                              <1> .userFail:
   165 00004C27 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   166 00004C2A 7418                <1>     jz .userMsgEnd
   167 00004C2C 488D1589C4FFFF      <1>     lea rdx, betweenMsg
   168 00004C33 E80BF7FFFF          <1>     call printString
   169 00004C38 488D1578C4FFFF      <1>     lea rdx, failMsg
   170 00004C3F E8FFF6FFFF          <1>     call printString
   171                              <1> .userMsgEnd:
   172 00004C44 488D1574C4FFFF      <1>     lea rdx, endMsg
   173 00004C4B E8F3F6FFFF          <1>     call printString
   174                              <1> ;Get user input now 
   175 00004C50 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   176 00004C52 488D3D69C4FFFF      <1>     lea rdi, i24Resp ;Go to start of string
   177 00004C59 B8010C0000          <1>     mov eax, 0C01h ;Flush and get STDIN without Console Echo
   178 00004C5E CD21                <1>     int 21h ;Get char in al
   179 00004C60 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   180 00004C62 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   181 00004C64 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   182                              <1> .uip1:
   183 00004C66 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   184 00004C67 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   185 00004C69 FFC1                <1>     inc ecx
   186 00004C6B 81F904000000        <1>     cmp ecx, 4
   187 00004C71 75F3                <1>     jne .uip1
   188 00004C73 E964FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   189                              <1> .validInput:
   190 00004C78 E8BFF6FFFF          <1>     call printCRLF   ;Note the input was accepted
   191 00004C7D 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   192                              <1> ;Now check if the input is permitted
   193 00004C7F 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   194 00004C81 7427                <1>     je .cehExit
   195 00004C83 84C0                <1>     test al, al ;Check if 0 => Ignore
   196 00004C85 740F                <1>     je .viIgnore
   197 00004C87 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   198 00004C89 7416                <1>     je .viRetry
   199                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   200 00004C8B F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   201 00004C8E 0F8448FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   202 00004C94 EB14                <1>     jmp short .cehExit
   203                              <1> .viIgnore:
   204 00004C96 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   205 00004C99 0F843DFFFFFF        <1>     jz .userInput
   206 00004C9F EB09                <1>     jmp short .cehExit
   207                              <1> .viRetry:
   208 00004CA1 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   209 00004CA4 0F8432FFFFFF        <1>     jz .userInput
   210                              <1> .cehExit:
   211 00004CAA E83E000000          <1>     call errRetHdls
   212 00004CAF 5E                  <1>     pop rsi
   213 00004CB0 5F                  <1>     pop rdi
   214 00004CB1 5A                  <1>     pop rdx
   215 00004CB2 59                  <1>     pop rcx
   216 00004CB3 5B                  <1>     pop rbx
   217 00004CB4 48CF                <1>     iretq
   218                              <1> .charError:
   219 00004CB6 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   220 00004CBB 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   221                              <1> .ce1:
   222 00004CC2 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   223 00004CC3 88C2                <1>     mov dl, al  ;Move char into dl
   224 00004CC5 B402                <1>     mov ah, 02h
   225 00004CC7 CD21                <1>     int 21h ;Print char
   226 00004CC9 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   227 00004CCB E90CFFFFFF          <1>     jmp .userInput
   228                              <1> 
   229                              <1> 
   230                              <1> errSwapHdls:
   231                              <1> ;Swaps STDIO to STDERR
   232                              <1> ;Start by tmporarily moving the stderr handler into stdio
   233                              <1> ;In principle dangerous, but since we cannot exit our routine, its oki.
   234 00004CD0 50                  <1>     push rax
   235 00004CD1 53                  <1>     push rbx
   236 00004CD2 E833000000          <1>     call getJftPtr  ;Get the jft pointer into rbx. Saves rax
   237 00004CD7 0FB703              <1>     movzx eax, word [rbx]       ;Get STDIO into ax
   238 00004CDA 668905B6B3FFFF      <1>     mov word [errHdls], ax      ;Save em
   239 00004CE1 0FB64302            <1>     movzx eax, byte [rbx + 2]   ;Now get the STDERR SFTndx in al
   240 00004CE5 88C4                <1>     mov ah, al                  ;Move STDERR hdl into ah too 
   241 00004CE7 668903              <1>     mov word [rbx], ax          ;And set STDIO to STDERR
   242 00004CEA 5B                  <1>     pop rbx
   243 00004CEB 58                  <1>     pop rax
   244                              <1>     return
    13                              <2> %%_ret:
    14 00004CEC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   245                              <1> 
   246                              <1> errRetHdls:
   247                              <1> ;Returns STDIO from STDERR.
   248 00004CED 50                  <1>     push rax
   249 00004CEE 53                  <1>     push rbx
   250 00004CEF E816000000          <1>     call getJftPtr  ;Get ptr in rbx. Preserves rax.
   251 00004CF4 0FB7059CB3FFFF      <1>     movzx eax, word [errHdls]
   252 00004CFB 66C70593B3FFFFFFFF  <1>     mov word [errHdls], -1  ;Reset values
   253 00004D04 668903              <1>     mov word [rbx], ax      ;Store the handle word back
   254 00004D07 5B                  <1>     pop rbx
   255 00004D08 58                  <1>     pop rax
   256                              <1>     return
    13                              <2> %%_ret:
    14 00004D09 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   257                              <1> 
   258                              <1> getJftPtr:
   259                              <1> ;Preserves all registers except rbx.
   260                              <1> ;Output: rbx -> JFT of current task
   261 00004D0A 50                  <1>     push rax        ;Save rax
   262 00004D0B B800510000          <1>     mov eax, 5100h  ;Get current PSP in rbx
   263 00004D10 CD21                <1>     int 21h
   264 00004D12 58                  <1>     pop rax
   265 00004D13 66817B4E1400        <1>     cmp word [rbx + psp.jftSize], 20    ;If >20, pspjft is ptr to real jft
   266 00004D19 7605                <1>     jbe .pspJftExit
   267 00004D1B 488B5B2A            <1>     mov rbx, qword [rbx + psp.externalJFTPtr]   ;Get ptr to jft from the psp
   268                              <1>     return
    13                              <2> %%_ret:
    14 00004D1F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   269                              <1> .pspJftExit:
   270 00004D20 488D5B2A            <1>     lea rbx, qword [rbx + psp.jobFileTbl]       ;Make into a ptr to jft in psp
   271                              <1>     return
    13                              <2> %%_ret:
    14 00004D24 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                                  endOfAlloc: ;End of alloc
    23                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00004D25 B430                <1>     mov ah, 30h
     4 00004D27 CD21                <1>     int 21h
     5 00004D29 3C01                <1>     cmp al, 01h ;Version 1
     6 00004D2B 760D                <1>     jbe .okVersion
     7 00004D2D 488D1534050000      <1>     lea rdx, badVerStr
     8 00004D34 B409                <1>     mov ah, 09h
     9 00004D36 CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00004D38 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00004D3A 800D53B3FFFF80      <1>     or byte [statFlg1], inLdr   ;Ok now we start our special work
    15 00004D41 4C8905C7B2FFFF      <1>     mov qword [pspPtr], r8      ;Store PSP ptr in internal var 
    16                              <1> ;Call for simple internationalisation data
    17 00004D48 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    18 00004D4D CD21                <1>     int 21h
    19 00004D4F 3CFF                <1>     cmp al, -1
    20 00004D51 7412                <1>     je .skipSwitch
    21 00004D53 8815D1B2FFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    22 00004D59 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    23 00004D5C 7507                <1>     jne .skipSwitch
    24 00004D5E C605C4B2FFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    25                              <1> .skipSwitch:
    26 00004D65 B800380000          <1>     mov eax, 3800h  ;Get current country data
    27 00004D6A 488D15BAB2FFFF      <1>     lea rdx, ctryData
    28 00004D71 CD21                <1>     int 21h ;Write the data to the internal country table 
    29                              <1> ;Now eject all the unneeded space, to make space for allocating.
    30                              <1> ;Thus the allocations in the parsing should never fail (but still may)
    31 00004D73 488D25(00320000)    <1>     lea rsp, initEoA
    32 00004D7A 4889E3              <1>     mov rbx, rsp
    33 00004D7D 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    34 00004D80 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
    35 00004D84 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    36 00004D87 B8004A0000          <1>     mov eax, 4A00h ;Realloc
    37 00004D8C 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    38 00004D8F CD21                <1>     int 21h
    39 00004D91 72A5                <1>     jc .exitBad 
    40                              <1> ;Now space has been made, time to parse the command tail
    41 00004D93 E819010000          <1>     call parseCmdLine   ;Now parse the command tail.
    42 00004D98 E84A030000          <1>     call doEnv          ;Now enact the command tail actions
    43 00004D9D E8A4FAFFFF          <1>     call resetIDTentries    ;Setup IDT entries now. 
    44 00004DA2 F605EBB2FFFF01      <1>     test byte [statFlg1], permaShell ;Are we perma?
    45 00004DA9 0F8490000000        <1>     jz .notMaster   ;Jump if not!
    46                              <1> ;Ok so we are master COMMAND.COM
    47                              <1> ;Now make myself my own parent task. We already are the current psp
    48 00004DAF 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8
    49                              <1> ;Setup Int 2Eh and the addresses in my psp to terminate back to
    50 00004DB3 488D1504FDFFFF      <1>     lea rdx, critErrorHandler
    51 00004DBA 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    52 00004DBE 488D150DFCFFFF      <1>     lea rdx, ctrlCHandler
    53 00004DC5 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    54 00004DC9 488D1574C7FFFF      <1>     lea rdx, appRet
    55 00004DD0 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    56 00004DD4 488D1507CDFFFF      <1>     lea rdx, int2Eh
    57 00004DDB B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    58 00004DE0 CD21                <1>     int 21h
    59                              <1> ;Always get the Autoexec from the root dir we are booting into
    60 00004DE2 E864F7FFFF          <1>     call getCurrentDrive    ;Get 0 based drive number in al
    61 00004DE7 0441                <1>     add al, "A"
    62 00004DE9 880513C1FFFF        <1>     mov byte [autoSpec], al ;
    63                              <1> ;Now, open AUTOEXEC.BAT. 
    64 00004DEF 488D150CC1FFFF      <1>     lea rdx, autoSpec
    65 00004DF6 B8003D0000          <1>     mov eax, 3D00h  ;Open file
    66 00004DFB CD21                <1>     int 21h
    67 00004DFD 7212                <1>     jc .noAutoexec
    68                              <1>     ;Ok, we know the file exists, close it and finish init through it, ignoring 
    69                              <1>     ; the normal hello there! string
    70 00004DFF 89C3                <1>     mov ebx, eax
    71 00004E01 B8003E0000          <1>     mov eax, 3E00h  ;Close file
    72 00004E06 CD21                <1>     int 21h
    73                              <1> ;Now we do the same as at the end, prepping for jettisoning
    74 00004E08 31D2                <1>     xor edx, edx
    75 00004E0A FFCA                <1>     dec edx             ;Setup that we want to process Autoexec
    76 00004E0C E954000000          <1>     jmp .prepStart
    77                              <1> .noAutoexec:
    78                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    79 00004E11 488D1589BAFFFF      <1>     lea rdx, crlf
    80 00004E18 B409                <1>     mov ah, 09h
    81 00004E1A CD21                <1>     int 21h
    82 00004E1C 800D71B2FFFF40      <1>     or byte [statFlg1], inLdrDT
    83 00004E23 E859E1FFFF          <1>     call time
    84 00004E28 E8A6DFFFFF          <1>     call date
    85 00004E2D 802560B2FFFFBF      <1>     and byte [statFlg1], ~inLdrDT
    86 00004E34 488D1566BAFFFF      <1>     lea rdx, crlf
    87 00004E3B B409                <1>     mov ah, 09h
    88 00004E3D CD21                <1>     int 21h
    89                              <1>     ;Now fall thru.
    90                              <1> .notMaster:    
    91                              <1> ;Finish by printing INIT string.
    92 00004E3F F6054EB2FFFF04      <1>     test byte [statFlg1], inSingle  ;Are we in single mode?
    93 00004E46 7531                <1>     jnz .singleCom
    94 00004E48 488D15A5030000      <1>     lea rdx, initString
    95 00004E4F B409                <1>     mov ah, 09h
    96 00004E51 CD21                <1>     int 21h ;Print init string
    97 00004E53 E8BFEAFFFF          <1>     call version.printVersionNumber
    98 00004E58 488D15CB030000      <1>     lea rdx, initString2
    99 00004E5F B409                <1>     mov ah, 09h
   100 00004E61 CD21                <1>     int 21h ;Print init string
   101 00004E63 31D2                <1>     xor edx, edx        ;Indicate we DONT want to do Autoexec processing
   102                              <1> .prepStart:
   103 00004E65 E822000000          <1>     call computeStackPtr    ;Returns the stack ptr in rbx and var
   104 00004E6A 4889DC              <1>     mov rsp, rbx        ;Move the stack pointer to this address
   105 00004E6D 802520B2FFFF7F      <1>     and byte [statFlg1], ~inLdr    ;Special work complete :-)
   106 00004E74 E94DC2FFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   107                              <1> .singleCom:
   108                              <1> ;In single command mode, check the length of the input string was not 0.
   109                              <1> ; If it was, exit, else proceed
   110 00004E79 803DE2B2FFFF00      <1>     cmp byte [inBuffer + 1], 0
   111 00004E80 0F84ABECFFFF        <1>     je exit
   112 00004E86 31D2                <1>     xor edx, edx
   113 00004E88 FFCA                <1>     dec edx             ;Pretend that we want to process Autoexec
   114 00004E8A EBD9                <1>     jmp short .prepStart
   115                              <1> 
   116                              <1> computeStackPtr:
   117                              <1>     ;Now we add the stack to the alloc and paragraph align
   118 00004E8C 488D1D92FEFFFF      <1>     lea rbx, endOfAlloc
   119 00004E93 4881C340060000      <1>     add rbx, stackSize
   120 00004E9A 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   121 00004EA1 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   122 00004EA5 48C1E304            <1>     shl rbx, 4
   123 00004EA9 48891D55B1FFFF      <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   124                              <1>     return
    13                              <2> %%_ret:
    14 00004EB0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   125                              <1> 
   126                              <1> parseCmdLine:
   127                              <1> ;COMMAND [drive:][path][device][/E:n][/P][/C string]
   128                              <1> ;[drive:] gives the default drive for COMSPEC. Default is default drive.
   129                              <1> ;[path] gives the search path to search for when searching for COMSPEC.
   130                              <1> ;   Default is root directory. Hence default COMSPEC is _:\COMMAND.COM
   131                              <1> ;[device] gives the default device to set STDIO to and reset to if we error
   132                              <1> ;           MAX 8 chars long name ([device] can be colon terminated).
   133                              <1> ;           Default is CON
   134                              <1> ;[/C string] means execute the string as a command and terminate immediately
   135                              <1> ;   This is single command mode, sets inSingle bit. Similar to int 2Eh.
   136                              <1> ;[/P] means make the instance of COMMAND.COM permanent.
   137                              <1> ;[/E:n] where n is a base 10 value between 160-32768, giving the size of the 
   138                              <1> ; environment to allocate in bytes. Only works if COMMAND.COM is to be 
   139                              <1> ; permanent. Needs a colon after E. 
   140                              <1> ;
   141                              <1> ;Start by setting up the default comspec dir, null terminated
   142 00004EB1 E895F6FFFF          <1>     call getCurrentDrive    ;Get 0 based drive number in al
   143 00004EB6 0441                <1>     add al, "A"
   144 00004EB8 B43A                <1>     mov ah, ":"
   145 00004EBA 488D3D9CB7FFFF      <1>     lea rdi, comspecDir
   146 00004EC1 66AB                <1>     stosw   ;Store drive specifier
   147 00004EC3 0FB6055FB1FFFF      <1>     movzx eax, byte [pathSep]
   148 00004ECA 66AB                <1>     stosw   ;Store the pathsep and a terminating <NUL>
   149                              <1> 
   150 00004ECC E85AF9FFFF          <1>     call setDTA                     ;Ensure any searches dont trample on the tail!
   151 00004ED1 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the start of tail chars
   152                              <1> .parseLp:
   153 00004ED8 E8B1F6FFFF          <1>     call skipDelimiters             ;Strip delims
   154 00004EDD AC                  <1>     lodsb
   155 00004EDE 48FFCE              <1>     dec rsi ;Point to first non-delimiter char
   156 00004EE1 3C0D                <1>     cmp al, CR
   157 00004EE3 0F8469010000        <1>     je .endScan
   158 00004EE9 3A053BB1FFFF        <1>     cmp al, byte [switchChar]       ;Is this a switchchar?
   159 00004EEF 752D                <1>     jne .file
   160                              <1> .switch:
   161 00004EF1 48FFC6              <1>     inc rsi ;Go past the switch char
   162 00004EF4 AC                  <1>     lodsb   ;Get first char past switch, advance rsi
   163 00004EF5 E879F6FFFF          <1>     call ucChar
   164 00004EFA 3C43                <1>     cmp al, "C"
   165 00004EFC 0F841C010000        <1>     je .switchStr
   166 00004F02 3C50                <1>     cmp al, "P"
   167 00004F04 0F84F8000000        <1>     je .switchPerma
   168 00004F0A 3C45                <1>     cmp al, "E"
   169 00004F0C 0F84A5000000        <1>     je .switchEnv
   170 00004F12 48FFCE              <1>     dec rsi ;Now point rsi back to this char
   171                              <1> .badparm:
   172 00004F15 488D1569BBFFFF      <1>     lea rdx, badParm
   173 00004F1C EBBA                <1>     jmp short .parseLp
   174                              <1> ;-----------------------------------------------------------------
   175                              <1> ;Search for the filespec
   176                              <1> .file:
   177 00004F1E E8F7F7FFFF          <1>     call copyArgumentToSearchSpec   ;Moves rsi to char past the delimiter
   178 00004F23 48FFCE              <1>     dec rsi ;Point to the delimiter itself
   179 00004F26 488D1563B5FFFF      <1>     lea rdx, searchSpec
   180 00004F2D B8004E0000          <1>     mov eax, 4E00h  ;Find First
   181 00004F32 B910000000          <1>     mov ecx, dirDirectory   ;Return Normal, RO, Dir or Char
   182 00004F37 CD21                <1>     int 21h
   183 00004F39 730E                <1>     jnc .charOrDir
   184                              <1> .badSpec:
   185                              <1> ;rsi has been moved past the argument so we can keep proceeding with processing
   186 00004F3B 488D153E030000      <1>     lea rdx, badCmdDir
   187                              <1> .bs0:
   188 00004F42 E8FCF3FFFF          <1>     call printString
   189                              <1> .plhop:
   190 00004F47 EB8F                <1>     jmp short .parseLp
   191                              <1> ;-----------------------------------------------------------------
   192                              <1> ;Check if a char or directory here
   193                              <1> .charOrDir:
   194 00004F49 8A05DCB1FFFF        <1>     mov al, byte [cmdFFBlock + ffBlock.attribFnd]
   195 00004F4F 2450                <1>     and al, dirCharDev | dirDirectory
   196 00004F51 74E8                <1>     jz .badSpec
   197 00004F53 A840                <1>     test al, dirCharDev
   198 00004F55 7525                <1>     jnz .charDev
   199                              <1> ;Here if a directory. Save it null terminated in comspecDir.
   200 00004F57 56                  <1>     push rsi
   201 00004F58 488D3531B5FFFF      <1>     lea rsi, searchSpec 
   202 00004F5F 488D3DF7B6FFFF      <1>     lea rdi, comspecDir
   203 00004F66 E8F4F5FFFF          <1>     call strcpy2
   204 00004F6B B811120000          <1>     mov eax, 1211h  ;Uppercase the pathspec
   205 00004F70 CD2F                <1>     int 2Fh         ;DOS 3.3 does't do this hehe 0:-)
   206 00004F72 5E                  <1>     pop rsi
   207 00004F73 C60580030000FF      <1>     mov byte [initNewSpec], -1  ;Set, we have a new comspec
   208 00004F7A EBCB                <1>     jmp short .plhop
   209                              <1> ;-----------------------------------------------------------------
   210                              <1> ;Handle char dev here
   211                              <1> .charDev:
   212                              <1> ;Check the name is max 8 chars in length
   213 00004F7C 488D3D0DB5FFFF      <1>     lea rdi, searchSpec
   214 00004F83 E8E1F5FFFF          <1>     call strlen ;Get len plus <NUL> in ecx. Cant be more than 8+1 for <NUL>
   215 00004F88 81F909000000        <1>     cmp ecx, 9  ;This can literally never happen but never hurts to be safe :)
   216 00004F8E 771E                <1>     ja .badChar
   217 00004F90 56                  <1>     push rsi    ;Save offset into cmdTail on stack
   218 00004F91 488D35F8B4FFFF      <1>     lea rsi, searchSpec
   219 00004F98 488D3D5ABFFFFF      <1>     lea rdi, devName
   220 00004F9F E8ACF5FFFF          <1>     call strcpy ;Copy this string over
   221 00004FA4 5E                  <1>     pop rsi
   222 00004FA5 C6054F030000FF      <1>     mov byte [initNewDev], -1   ;Set this byte now we have a new dev!
   223                              <1> .plhop1:
   224 00004FAC EB99                <1>     jmp short .plhop    ;parseLp
   225                              <1> .badChar:
   226 00004FAE 488D1583BCFFFF      <1>     lea rdx, badDev
   227                              <1> .bs1:
   228 00004FB5 EB8B                <1>     jmp short .bs0
   229                              <1> ;-----------------------------------------------------------------
   230                              <1> .switchEnv:
   231 00004FB7 AC                  <1>     lodsb
   232 00004FB8 48FFCE              <1>     dec rsi
   233 00004FBB 3C3A                <1>     cmp al, ":"
   234 00004FBD 0F8552FFFFFF        <1>     jne .badparm
   235 00004FC3 48FFC6              <1>     inc rsi ;Now point past teh colon, skip any delimiters
   236 00004FC6 E8C3F5FFFF          <1>     call skipDelimiters
   237 00004FCB AC                  <1>     lodsb       ;Get the first non-delimiter
   238 00004FCC 48FFCE              <1>     dec rsi     ;Point back at it
   239 00004FCF 3C0D                <1>     cmp al, CR
   240 00004FD1 0F843EFFFFFF        <1>     je .badparm     ;Print bad arg, rsi positioned to terminate parsing now
   241                              <1>     ;Else, rsi now pointing at the first number. Do maths :)
   242 00004FD7 E803F8FFFF          <1>     call getNum ;Move rsi to first non digit/9th digit if too many digits
   243 00004FDC 0F8233FFFFFF        <1>     jc .badparm    ;Bad parameter error!
   244 00004FE2 3D00800000          <1>     cmp eax, 8000h
   245 00004FE7 7710                <1>     ja .badEnv
   246 00004FE9 3DA0000000          <1>     cmp eax, 0A0h
   247 00004FEE 7209                <1>     jb .badEnv
   248 00004FF0 66890505030000      <1>     mov word [initEnvSz], ax    ;Store the allocated size here
   249                              <1> .plhop2:
   250 00004FF7 EBB3                <1>     jmp short .plhop1  ;parseLp
   251                              <1> .badEnv:
   252 00004FF9 488D15DF020000      <1>     lea rdx, badEnvSz
   253 00005000 EBB3                <1>     jmp short .bs1
   254                              <1> ;-----------------------------------------------------------------
   255                              <1> .switchPerma:
   256 00005002 AC                  <1>     lodsb   ;Get the second char after the P
   257 00005003 48FFCE              <1>     dec rsi ;Point back at it
   258 00005006 3C0D                <1>     cmp al, CR
   259 00005008 740B                <1>     je .spEmbCr ;Allow CR after the P
   260 0000500A E88DF5FFFF          <1>     call isALdelimiter
   261 0000500F 0F8500FFFFFF        <1>     jne .badparm
   262                              <1> .spEmbCr:
   263 00005015 800D78B0FFFF01      <1>     or byte [statFlg1], permaShell  ;Set the bit
   264 0000501C EBD9                <1>     jmp short .plhop2  ;parseLp
   265                              <1> ;-----------------------------------------------------------------
   266                              <1> .switchStr:
   267 0000501E AC                  <1>     lodsb       ;Get the char after the C
   268 0000501F 48FFCE              <1>     dec rsi     ;Point back at it
   269 00005022 3C0D                <1>     cmp al, CR
   270 00005024 740B                <1>     je .ssembCr         ;Embedded CR ok
   271 00005026 E871F5FFFF          <1>     call isALdelimiter  ;Char immediately after the C must be a delimiter
   272 0000502B 0F85E4FEFFFF        <1>     jne .badparm
   273                              <1> .ssembCr:
   274 00005031 E858F5FFFF          <1>     call skipDelimiters     ;Move rsi past the delimiters
   275 00005036 488D3D26B1FFFF      <1>     lea rdi, inBuffer + 2   ;Store the command in the inBuffer as if typed in
   276                              <1> .ssLp:
   277 0000503D AC                  <1>     lodsb
   278 0000503E AA                  <1>     stosb
   279 0000503F 3C0D                <1>     cmp al, CR
   280 00005041 7408                <1>     je .ssOk
   281 00005043 FE0519B1FFFF        <1>     inc byte [inBuffer + 1] ;Increment the char count
   282 00005049 EBF2                <1>     jmp short .ssLp
   283                              <1> .ssOk:
   284 0000504B 800D42B0FFFF04      <1>     or byte [statFlg1], inSingle    ;Set the single flag
   285                              <1> ;Now we fall through as we have processed the cmd line and set the flag
   286                              <1> ;-----------------------------------------------------------------
   287                              <1> .endScan:
   288                              <1> ;Now copy our name to the end of the dir specified
   289 00005052 488D3D04B6FFFF      <1>     lea rdi, comspecDir
   290 00005059 E80BF5FFFF          <1>     call strlen ;Get the length in ecx, preserve rdi
   291 0000505E FFC9                <1>     dec ecx ;Point to null terminator
   292 00005060 8A05C3AFFFFF        <1>     mov al, byte [pathSep]
   293 00005066 4801CF              <1>     add rdi, rcx    ;Now point to the null
   294 00005069 3847FF              <1>     cmp byte [rdi - 1], al
   295 0000506C 7401                <1>     je .esSkipPathsep
   296 0000506E AA                  <1>     stosb
   297                              <1> .esSkipPathsep:
   298 0000506F 488D35ABBEFFFF      <1>     lea rsi, cspec
   299 00005076 E8D5F4FFFF          <1>     call strcpy ;Now copy over the name of our beloved shell
   300                              <1> ;Now ensure the user hasnt specified /C on the master shell!
   301 0000507B E817000000          <1>     call .masterCheck
   302 00005080 E84D000000          <1>     call .replacestdio
   303                              <1> ;Ensure that on exit, if both inSingle bit and permaShell are set, inSingle 
   304                              <1> ; wins. Unless this is the first boot, in which case, we ignore it
   305 00005085 F60508B0FFFF04      <1>     test byte [statFlg1], inSingle
   306                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000508C 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000508E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   307 0000508F 8025FEAFFFFFFE      <1>     and byte [statFlg1], ~permaShell ;Else, ensure perma is deactivated
   308                              <1>     return
    13                              <2> %%_ret:
    14 00005096 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   309                              <1> .masterCheck:
   310                              <1> ;Before exiting, determine if this is the initial/master copy of
   311                              <1> ; COMMAND.COM by checking if Int 2Eh has the same address as Int 2Dh. 
   312                              <1> ;If so, we are master, set the permanent bit.
   313 00005097 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
   314 0000509C CD21                <1>     int 21h
   315 0000509E 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
   316 000050A1 B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
   317 000050A6 CD21                <1>     int 21h
   318 000050A8 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
   319                              <1>     retne   ;Else, we are done. Return
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000050AB 75(96)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   320 000050AD 800DE0AFFFFF01      <1>     or byte [statFlg1], permaShell
   321 000050B4 8A05DAAFFFFF        <1>     mov al, byte [statFlg1]
   322 000050BA 8025D3AFFFFFFB      <1>     and byte [statFlg1], ~inSingle  ;Ensure this bit is off
   323 000050C1 A804                <1>     test al, inSingle   ;Was the bit initially set?
   324                              <1>     retz                ;Return if not
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000050C3 74(96)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   325 000050C5 488D15DD010000      <1>     lea rdx, badCombo   ;Else, sorry buddy, please type in your command manually!
   326 000050CC E872F2FFFF          <1>     call printString
   327                              <1>     return
    13                              <2> %%_ret:
    14 000050D1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   328                              <1> .replacestdio:
   329 000050D2 F60522020000FF      <1>     test byte [initNewDev], -1
   330                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000050D9 74(D1)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   331 000050DB 488D1517BEFFFF      <1>     lea rdx, devName
   332 000050E2 E90FE0FFFF          <1>     jmp ctty.loadSwap  ;Return through the return instruction in ctty
   333                              <1> 
   334                              <1> doEnv:
   335                              <1> ;Will do the environment adjustments as needed
   336 000050E7 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
   337 000050EB 4885F6              <1>     test rsi, rsi
   338 000050EE 7447                <1>     jz .noInitEnv
   339 000050F0 66813D030200000000  <1>     cmp word [initEnvSz], 0 ;If an env exists and /E not specified, return!
   340                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000050F9 74(D1)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   341                              <1> ;Now if no new comspec has been given, we allocate a new block, 
   342                              <1> ;copy the environment from the master and free the original block.
   343                              <1> ;If the block we allocate is smaller than the original block, 
   344                              <1> ; print out of env space and stop there
   345                              <1> ;Else, we simply allocate and create a fresh new environment with the new 
   346                              <1> ; comspec. 
   347 000050FB F605F8010000FF      <1>     test byte [initNewSpec], -1  ;If we have a new comspec, create afresh
   348 00005102 752E                <1>     jnz .prepNewEnv
   349                              <1>     ;Else, we create new alloc and copy master into it
   350 00005104 E867000000          <1>     call .allocEnv
   351 00005109 4889C7              <1>     mov rdi, rax        ;Move pointer into rdi
   352 0000510C E8CC000000          <1>     call getMasterEnv   ;Get the current active master environment in rsi
   353 00005111 57                  <1>     push rdi            ;Save the start of the environment block
   354 00005112 E893000000          <1>     call .cpEnv         ;Copy the environment
   355 00005117 5F                  <1>     pop rdi
   356 00005118 E805000000          <1>     call .freeCurrentEnv
   357 0000511D 4989783E            <1>     mov qword [r8 + psp.envPtr], rdi    ;Now set us as the env ptr
   358                              <1>     return  
    13                              <2> %%_ret:
    14 00005121 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   359                              <1> .freeCurrentEnv:
   360 00005122 4150                <1>     push r8
   361 00005124 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the original envPtr to free
   362 00005128 B800490000          <1>     mov eax, 4900h
   363 0000512D CD21                <1>     int 21h
   364 0000512F 4158                <1>     pop r8
   365                              <1>     return
    13                              <2> %%_ret:
    14 00005131 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   366                              <1> .prepNewEnv:
   367 00005132 E8EBFFFFFF          <1>     call .freeCurrentEnv
   368                              <1> .noInitEnv:
   369                              <1> ;Build the initial block.
   370 00005137 E834000000          <1>     call .allocEnv
   371 0000513C 4889C7              <1>     mov rdi, rax        ;Move rdi to the environment
   372 0000513F 4989783E            <1>     mov qword [r8 + psp.envPtr], rdi    ;Now store this as the env pointer
   373 00005143 57                  <1>     push rdi            ;Save the environment ptr!
   374 00005144 488D35C7BDFFFF      <1>     lea rsi, pathEVar
   375 0000514B E800F4FFFF          <1>     call strcpy
   376 00005150 488D35C1BDFFFF      <1>     lea rsi, comspecEVar
   377 00005157 E8F4F3FFFF          <1>     call strcpy
   378 0000515C 48FFCF              <1>     dec rdi ;Write over the terminating null
   379 0000515F 488D35F7B4FFFF      <1>     lea rsi, comspecDir    ;Now copy the actual comspec! 
   380 00005166 E8E5F3FFFF          <1>     call strcpy 
   381 0000516B 30C0                <1>     xor al, al
   382 0000516D AA                  <1>     stosb   ;Store the second terminating null
   383 0000516E 5F                  <1>     pop rdi ;Get back the pointer to the start of the env
   384                              <1>     return
    13                              <2> %%_ret:
    14 0000516F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   385                              <1> 
   386                              <1> .allocEnv:
   387                              <1> ;Output: rax -> Ptr to the environment block. 
   388                              <1> ;   If anything goes wrong, error message and exit the shell!
   389 00005170 0FB71D85010000      <1>     movzx ebx, word [initEnvSz]
   390 00005177 85DB                <1>     test ebx, ebx   ;If this is 0, allocate 160 bytes
   391 00005179 750C                <1>     jnz .goAlloc
   392 0000517B BBA0000000          <1>     mov ebx, 0A0h    ;160 bytes
   393 00005180 66891D75010000      <1>     mov word [initEnvSz], bx    ;Overwrite
   394                              <1> .goAlloc:
   395 00005187 81C30F000000        <1>     add ebx, 0Fh
   396 0000518D C1EB04              <1>     shr ebx, 4  ;Round up and turn into paragraphs
   397 00005190 B800480000          <1>     mov eax, 4800h
   398 00005195 CD21                <1>     int 21h
   399                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00005197 73(6F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   400 00005199 488D15BCBCFFFF      <1>     lea rdx, memBad1
   401 000051A0 E89EF1FFFF          <1>     call printString
   402 000051A5 E99EE9FFFF          <1>     jmp exit.ouch 
   403                              <1> 
   404                              <1> .cpEnv:
   405                              <1> ;Copies the environment
   406                              <1> ;Input: rsi -> Source to copy from
   407                              <1> ;       rdi -> Destination to copy to
   408 000051AA 0FB70D4B010000      <1>     movzx ecx, word [initEnvSz]
   409                              <1> .lp:
   410 000051B1 AC                  <1>     lodsb
   411 000051B2 AA                  <1>     stosb
   412 000051B3 84C0                <1>     test al, al
   413 000051B5 750A                <1>     jnz .notNul
   414 000051B7 3806                <1>     cmp byte [rsi], al
   415 000051B9 7506                <1>     jnz .notNul
   416                              <1>     ;Here, we have encountered our double null!
   417 000051BB FFC9                <1>     dec ecx ;Now we check if we have space to store the second char
   418 000051BD 7406                <1>     jz .err ;If we dont have space for the last null kill last non-null char
   419 000051BF AA                  <1>     stosb
   420                              <1>     return
    13                              <2> %%_ret:
    14 000051C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   421                              <1> .notNul:
   422 000051C1 FFC9                <1>     dec ecx ;One less char to copy over
   423 000051C3 75EC                <1>     jnz .lp
   424                              <1> .err:
   425 000051C5 4881EF02000000      <1>     sub rdi, 2
   426 000051CC 488D15A6B7FFFF      <1>     lea rdx, noEnvSpace
   427 000051D3 E86BF1FFFF          <1>     call printString
   428 000051D8 31C0                <1>     xor eax, eax
   429 000051DA 66AB                <1>     stosw   ;Store 0 word
   430                              <1>     return
    13                              <2> %%_ret:
    14 000051DC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   431                              <1> 
   432                              <1> getMasterEnv:
   433                              <1> ;Walks the psp chain to the first self parent.
   434                              <1> ;Output: rsi -> Environment of the first self-parent program
   435 000051DD 4150                <1>     push r8
   436                              <1> .lp:
   437 000051DF 498B7022            <1>     mov rsi, qword [r8 + psp.parentPtr] ;Get the parent pointer
   438 000051E3 4C39C6              <1>     cmp rsi, r8 ;Are we a self parent?
   439 000051E6 7405                <1>     je .exit
   440 000051E8 4989F0              <1>     mov r8, rsi ;Make the current psp the parent
   441 000051EB EBF2                <1>     jmp short .lp
   442                              <1> .exit:
   443 000051ED 4158                <1>     pop r8
   444 000051EF 488B763E            <1>     mov rsi, qword [rsi + psp.envPtr]   ;Get the environment pointer
   445                              <1>     return
    13                              <2> %%_ret:
    14 000051F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   446                              <1> 
   447                              <1> 
   448                              <1> ;Loader Data here
   449                              <1> initString: 
   450 000051F4 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   450 000051FD 66696320436F6D7075- <1>
   450 00005206 746572205265736561- <1>
   450 0000520F 726368285229205343- <1>
   450 00005218 502F444F5328522920- <1>
   450 00005221 56657273696F6E2024  <1>
   451                              <1> initString2:
   452 0000522A 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",
   452 00005233 202020284329436F70- <1>
   452 0000523C 797269676874205363- <1>
   452 00005245 69656E746966696320- <1>
   452 0000524E 436F6D707574657220- <1>
   452 00005257 526573656172636820- <1>
   452 00005260 323032342E          <1>
   453 00005265 0D0A24              <1>     db CR,LF,"$"
   454 00005268 496E636F7272656374- <1> badVerStr:  db "Incorrect DOS version",CR,LF,"$"
   454 00005271 20444F532076657273- <1>
   454 0000527A 696F6E0D0A24        <1>
   455 00005280 537065636966696564- <1> badCmdDir:  db "Specified COMMAND search directory bad",CR,LF,"$"
   455 00005289 20434F4D4D414E4420- <1>
   455 00005292 736561726368206469- <1>
   455 0000529B 726563746F72792062- <1>
   455 000052A4 61640D0A24          <1>
   456 000052A9 43616E6E6F74207370- <1> badCombo:   db "Cannot specify /C on top level process. Ignoring...",CR,LF,"$"
   456 000052B2 6563696679202F4320- <1>
   456 000052BB 6F6E20746F70206C65- <1>
   456 000052C4 76656C2070726F6365- <1>
   456 000052CD 73732E2049676E6F72- <1>
   456 000052D6 696E672E2E2E0D0A24  <1>
   457 000052DF 496E76616C69642045- <1> badEnvSz:   db "Invalid Environment Size",CR,LF,"$"
   457 000052E8 6E7669726F6E6D656E- <1>
   457 000052F1 742053697A650D0A24  <1>
   458 000052FA 00                  <1> initNewSpec db 0    ;Set if a new comspec found and copied
   459 000052FB 00                  <1> initNewDev  db 0    ;Set if a new device found and copied
   460 000052FC 0000                <1> initEnvSz       dw 0  ;Max 7FFFh (32768) bytes. Default to 160. 0 means no /E:
    24                                  Segment stack1 nobits valign=16 vfollows=cmd
    25                                  ;This stack is only used during init of COMMAND.COM
    26 00000000 <res 3200h>                 dq stackSize dup (?)
    27                                  initEoA:    ;Initial end of allocation
    27          ------------------       info: assembly required 1+8+2 passes

