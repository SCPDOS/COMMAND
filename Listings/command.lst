     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (41h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> netFCBShare     equ 70h
   160                              <1> noInherit       equ 80h
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> 
   163                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 24h on disk full.
   164                              <1> ;Buffering on writes
   165                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   167                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1> readOnlyFile    equ 1h
   170                              <1> hiddenFile      equ 2h
   171                              <1> systemFile      equ 4h
   172                              <1> volumeLabel     equ 8h
   173                              <1> directoryFile   equ 10h ;Directory entry
   174                              <1> archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1> charDevFastOut  equ 10h ;If set, device supports Int 29h
   182                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   183                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   185                              <1> devCharDev      equ 80h ;If set, it is a char device!
   186                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   190                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1>  
   192                              <1> ;------------------------------------------------------------------------;
   193                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   194                              <1> ; to an internal buffer, and then copying it to the specified location
   195                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   196                              <1> ; another request for the same sector from the same device is made, so 
   197                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   198                              <1> ; size, selected according to the largest detected sector size during 
   199                              <1> ; the initial loadup.
   200                              <1> ;
   201                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   202                              <1> ;
   203                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   204                              <1> ;------------------------------------------------------------------------;
   205                              <1> 
   206                              <1> struc bufferHdr
   207 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   208 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   209 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   210 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   211 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   212 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   213 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   214 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   215 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   216                              <1>     .dataarea:             ;Points to the start of the data area
   217                              <1> endstruc
   218                              <1> ;Buffer Flag equates
   219                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   220                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   221                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   222                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   223                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   224                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   225                              <1> ;Note! A buffer is marked as referenced only when the application 
   226                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   227                              <1> ;------------------------------------------------------------------------;
   228                              <1> ; Memory control block for each memory arena
   229                              <1> ;------------------------------------------------------------------------;
   230                              <1> struc mcb
   231 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   232 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   233 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   234 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   235                              <1>     .program:
   236                              <1> endstruc
   237                              <1> ;MCB equates
   238                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   239                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   240                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   241                              <1> mcbMarkCtn      equ "M"
   242                              <1> mcbMarkEnd      equ "Z"
   243                              <1> 
   244                              <1> memFirstFit     equ 0   ;First free block goes to application
   245                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   246                              <1> memLastFit      equ 2   ;Last free block goes to application
   247                              <1> 
   248                              <1> ;Owner = Para aligned address => Owning application PSP
   249                              <1> ;...To consider...
   250                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   251                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   252                              <1> ;------------------------------------------------------------------------;
   253                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   254                              <1> ; following order, thus allowing for return values to be placed in the 
   255                              <1> ; registers by accessing the caller register stack frame.
   256                              <1> ;------------------------------------------------------------------------;
   257                              <1> struc callerFrame
   258 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   259 00000008 ????????????????    <1>     .rbx    resq 1    
   260 00000010 ????????????????    <1>     .rcx    resq 1
   261 00000018 ????????????????    <1>     .rdx    resq 1
   262 00000020 ????????????????    <1>     .rsi    resq 1
   263 00000028 ????????????????    <1>     .rdi    resq 1
   264 00000030 ????????????????    <1>     .rbp    resq 1
   265 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   266 00000040 ????????????????    <1>     .r9     resq 1
   267                              <1> ;Pushed by Processor when invoked via Interrupt
   268 00000048 ????????????????    <1>     .rip    resq 1
   269 00000050 ????????????????    <1>     .cs     resq 1
   270 00000058 ????????????????    <1>     .flags  resq 1
   271                              <1> endstruc
   272                              <1> 
   273                              <1> struc dpl
   274                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   275                              <1> ; server calls
   276 00000000 ????????????????    <1>     .rax    resq 1
   277 00000008 ????????????????    <1>     .rbx    resq 1
   278 00000010 ????????????????    <1>     .rcx    resq 1
   279 00000018 ????????????????    <1>     .rdx    resq 1
   280 00000020 ????????????????    <1>     .rsi    resq 1
   281 00000028 ????????????????    <1>     .rdi    resq 1
   282 00000030 ????????????????    <1>     .r8     resq 1
   283 00000038 ????????????????    <1>     .r9     resq 1
   284 00000040 ????????????????    <1>     .align  resq 1
   285 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   286 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   287                              <1> endstruc
   288                              <1> 
   289                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   290 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   291 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   292 00000010 ????????????????    <1>     .newSFTVal      resq 1
   293 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   294 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   295 00000028 ????????????????    <1>     .newLastdrive   resq 1
   296 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   297 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   298 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   299 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   300 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   301 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   302 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc filename
   306                              <1> ;8.3 File name struct
   307 00000000 ????????????????    <1>     .fName  resb 8
   308 00000008 ??????              <1>     .fExt   resb 3
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   312 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   313 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   314 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   315 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   316 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   317 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   318 00000016 ????                <1>     .fileTime   resw 1  ;File time
   319 00000018 ????                <1>     .fileDate   resw 1  ;File date
   320 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   321 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc psp
   325 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   326 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   327 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   328 0000000A ????????????????    <1>     .oldInt22h  resq 1  ;Int 22h pointer on overlay load
   329 00000012 ????????????????    <1>     .oldInt23h  resq 1  ;Int 23h pointer on overlay load
   330 0000001A ????????????????    <1>     .oldInt24h  resq 1  ;Int 24h pointer on overlay load
   331 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   332                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   333 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   334 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   335 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 21h
   336 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   337 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   338 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   339 0000005B ??                  <1>                 resb 1  ;Reserved byte
   340                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   341                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   342                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   343                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   344                              <1> ; always used and xtraHdlSz.
   345                              <1> ;Will need to add two SYSCALLS for future expansion:
   346                              <1> ;       1) Get Program Environment Pointer
   347                              <1> ;       2) Get Command Line arguments pointer
   348                              <1> ;The below are in the same place as in DOS.
   349                              <1>     .cmdLineArgPtr: ;Symbol for future use
   350 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   351 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   352                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   353 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   354 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   355                              <1> endstruc
   356                              <1> 
   357                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   358                              <1> 
   359                              <1> struc clkStruc
   360 00000000 ????                <1>     .dateWord   resw 1
   361 00000002 ??                  <1>     .minutes    resb 1
   362 00000003 ??                  <1>     .hours      resb 1
   363 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   364 00000005 ??                  <1>     .seconds    resb 1
   365                              <1> endstruc
   366                              <1> 
   367                              <1> struc countryStruc
   368 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   369                              <1>                         ;0 = month day year hh:mm:ss
   370                              <1>                         ;1 = day month year hh:mm:ss
   371                              <1>                         ;2 = year month day hh:mm:ss
   372 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   373 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   374 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   375 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   376 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   377 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   378                              <1>                         ;0 = Symbol leads, without space
   379                              <1>                         ;1 = Symbol follows, without space
   380                              <1>                         ;2 = Symbol leads, one space
   381                              <1>                         ;3 = Symbol follows, one space
   382                              <1>                         ;4 = Symbol replace decimal separator
   383 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   384 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   385 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   386 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   387 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   388                              <1> endstruc
   389                              <1> 
   390                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   391                              <1> ;for a space of 64Gb
   392                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   393                              <1> dosLowBase  equ 600h    ;Low load address
   394                              <1> 
   395                              <1> ;Critical Error AH bitfield equates
   396                              <1> critRead    equ 0h
   397                              <1> critWrite   equ 1h
   398                              <1> critDOS     equ 0h
   399                              <1> critFAT     equ 2h
   400                              <1> critDir     equ 4h
   401                              <1> critData    equ 6h
   402                              <1> critFailOK  equ 8h
   403                              <1> critRetryOK equ 10h
   404                              <1> critIgnorOK equ 20h
   405                              <1> critCharDev equ 80h
   406                              <1> 
   407                              <1> critIgnore  equ 0
   408                              <1> critRetry   equ 1
   409                              <1> critAbort   equ 2
   410                              <1> critFail    equ 3
   411                              <1> 
   412                              <1> ;MISC ASCII control chars
   413                              <1> NUL equ 00h ;^@         | ASCII Null
   414                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   415                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   416                              <1> BEL equ 07h ;^G         | ASCII Bell
   417                              <1> BSP equ 08h ;^H         | ASCII Backspace
   418                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   419                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   420                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   421                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   422                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   423                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   424                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   425                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   426                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   427                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   428                              <1> SPC equ 20h ;Printable  | ASCII Space
   429                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   430                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   431                              <1> 
   432                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   433                              <1> ;Extended Ascii Codes
   434                              <1> eF1     equ 3Bh ;F1 second byte
   435                              <1> eF2     equ 3Ch ;F2 second byte
   436                              <1> eF3     equ 3Dh ;F3 second byte
   437                              <1> eF4     equ 3Eh ;F4 second byte
   438                              <1> eF5     equ 3Fh ;F5 second byte
   439                              <1> eF6     equ 40h ;F6 second byte
   440                              <1> eF7     equ 41h ;F7 second byte
   441                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   442                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   443                              <1> eIns    equ 52h ;Insert second byte
   444                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   445                              <1> 
   446                              <1> ;Default Configuration for the system
   447                              <1> 
   448                              <1> buffersDefault  equ 30
   449                              <1> filesDefault    equ 20
   450                              <1> fcbsDefault     equ 4
   451                              <1> safeFcbsDeflt   equ 0
   452                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       resb 5  
    66 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   resb 1
    68 00000008 ????????????????    <1>     .filename   resb 8
    69 00000010 ??????              <1>     .fileext    resb 3
    70 00000013 ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    resb 8
    73 00000020 ??????              <1>     .newExt     resb 3
    74 00000023 ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    25 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    26 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    27 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    28 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    29 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    30                              <1> endstruc
    31                              <1> 
    32                              <1> struc execProg  ;For use with EXEC-ing a child task
    33 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    34 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    35 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    36 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    37                              <1> endstruc
    38                              <1> 
    39                              <1> ;Directory attribute equates
    40                              <1>     dirReadOnly     equ 01h
    41                              <1>     dirHidden       equ 02h
    42                              <1>     dirSystem       equ 04h
    43                              <1>     dirVolumeID     equ 08h
    44                              <1>     dirDirectory    equ 10h
    45                              <1>     dirArchive      equ 20h
    46                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    47                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    48                              <1>     ;If any of the three bits are set, then ALL three bits are set
    49                              <1>     ; in addition to whatever the user passed to search for.
    50                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    51                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    11 0000002B 5C                  <1> pathSep     db "\"  ;Default path sep
    12 0000002C 2F                  <1> switchChar  db "/"  ;Default switch char
    13 0000002D 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    14 0000002E 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    15                              <1> ;Static strings, not used in command line parsing
    16 00000036 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    16 0000003F 000000000000000000- <1>
    16 00000048 000000000000000000- <1>
    16 00000051 000000000000000000- <1>
    16 0000005A 0000                <1>
    17 0000005C 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    17 00000065 000000000000000000- <1>
    17 0000006E 000000000000000000- <1>
    17 00000077 000000000000000000- <1>
    17 00000080 000000000000000000- <1>
    17 00000089 000000000000000000- <1>
    17 00000092 000000000000000000- <1>
    17 0000009B 00000000            <1>
    18                              <1> 
    19                              <1> 
    20                              <1> cmdLineStatePtr:
    21 0000009F 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    22 000000A0 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    23 000000A2 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    24                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    25                              <1> ;These variables are valid for a SINGLE command in a command line
    26 000000A4 00                  <1> redirNull   db 0    ;Set if searching for a pipe post command!
    27                              <1> ;Next two bytes, if set to -1, flags error
    28 000000A5 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    29 000000A6 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    30                              <1> ;                    If 2, we are redirecting output to a file, by appending
    31 000000A7 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    32 000000A9 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    33                              <1> 
    34 000000AB 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    35 000000AC 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    36 000000AD 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    37                              <1> 
    38 000000AE 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    39 000000AF 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    40 000000B0 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    41                              <1> 
    42                              <1> cmdStateL equ $ - cmdStatePtr
    43                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    44                              <1> 
    45                              <1> ;Structs and strings
    46                              <1> 
    47 000000B1 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    47 000000BA 00000000000000      <1>
    48 000000C1 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    48 000000CA 000000000000000000- <1>
    48 000000D3 000000000000000000- <1>
    48 000000DC 000000000000000000- <1>
    48 000000E5 00000000000000      <1>
    49                              <1> 
    50 000000EC 000000000000000000- <1> launchBlock db execProg_size dup (0)
    50 000000F5 000000000000000000- <1>
    50 000000FE 000000000000000000- <1>
    50 00000107 0000000000          <1>
    51                              <1> 
    52 0000010C 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    52 00000115 000000000000000000- <1>
    52 0000011E 000000000000000000- <1>
    52 00000127 000000000000000000- <1>
    52 00000130 000000000000000000- <1>
    52 00000139 000000000000000000- <1>
    52 00000142 000000000000000000- <1>
    52 0000014B 000000000000000000- <1>
    52 00000154 000000000000000000- <1>
    52 0000015D 000000000000000000- <1>
    52 00000166 000000000000000000- <1>
    52 0000016F 000000000000000000- <1>
    52 00000178 000000000000000000- <1>
    52 00000181 000000000000000000- <1>
    52 0000018A 00000000            <1>
    53                              <1> inBufferL   equ 127 ;127 chars so we can copy to PSP with terminating CR
    54 0000018E 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)   ;Copied input for processing
    54 00000197 000000000000000000- <1>
    54 000001A0 000000000000000000- <1>
    54 000001A9 000000000000000000- <1>
    54 000001B2 000000000000000000- <1>
    54 000001BB 000000000000000000- <1>
    54 000001C4 000000000000000000- <1>
    54 000001CD 000000000000000000- <1>
    54 000001D6 000000000000000000- <1>
    54 000001DF 000000000000000000- <1>
    54 000001E8 000000000000000000- <1>
    54 000001F1 000000000000000000- <1>
    54 000001FA 000000000000000000- <1>
    54 00000203 000000000000000000- <1>
    54 0000020C 00000000            <1>
    55 00000210 000000000000000000- <1> aeBuffer    db cmdBufferL dup (0)   ;Buffer for AE (w/o redir, just pipes)
    55 00000219 000000000000000000- <1>
    55 00000222 000000000000000000- <1>
    55 0000022B 000000000000000000- <1>
    55 00000234 000000000000000000- <1>
    55 0000023D 000000000000000000- <1>
    55 00000246 000000000000000000- <1>
    55 0000024F 000000000000000000- <1>
    55 00000258 000000000000000000- <1>
    55 00000261 000000000000000000- <1>
    55 0000026A 000000000000000000- <1>
    55 00000273 000000000000000000- <1>
    55 0000027C 000000000000000000- <1>
    55 00000285 000000000000000000- <1>
    55 0000028E 00000000            <1>
    56 00000292 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)   ;Space for full path to a ext cmd
    56 0000029B 000000000000000000- <1>
    56 000002A4 000000000000000000- <1>
    56 000002AD 000000000000000000- <1>
    56 000002B6 000000000000000000- <1>
    56 000002BF 000000000000000000- <1>
    56 000002C8 000000000000000000- <1>
    56 000002D1 000000000000000000- <1>
    56 000002DA 00000000000000      <1>
    57 000002E1 000000000000000000- <1> cmdName     db cmdNameL dup (0)     ;Cmd name prefixed by length 
    57 000002EA 0000000000          <1>
    58                              <1> 
    59 000002EF 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    59 000002F8 000000000000000000- <1>
    59 00000301 000000000000000000- <1>
    59 0000030A 000000000000000000- <1>
    59 00000313 000000000000000000- <1>
    59 0000031C 000000000000000000- <1>
    59 00000325 000000000000000000- <1>
    59 0000032E 000000000000000000- <1>
    59 00000337 00000000000000      <1>
    60 0000033E 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    60 00000347 000000000000000000- <1>
    60 00000350 000000000000000000- <1>
    60 00000359 000000000000000000- <1>
    60 00000362 000000000000000000- <1>
    60 0000036B 000000000000000000- <1>
    60 00000374 000000000000000000- <1>
    60 0000037D 000000000000000000- <1>
    60 00000386 00000000000000      <1>
    61                              <1> 
    62                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    63 0000038D 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    63 00000396 000000000000000000- <1>
    63 0000039F 000000000000000000- <1>
    63 000003A8 000000000000000000- <1>
    63 000003B1 000000000000000000- <1>
    63 000003BA 000000000000000000- <1>
    63 000003C3 000000000000000000- <1>
    63 000003CC 000000000000000000- <1>
    63 000003D5 00000000000000      <1>
    64 000003DC 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    64 000003E5 000000000000000000- <1>
    64 000003EE 000000000000000000- <1>
    64 000003F7 000000000000000000- <1>
    64 00000400 000000000000000000- <1>
    64 00000409 000000000000000000- <1>
    64 00000412 000000000000000000- <1>
    64 0000041B 000000000000000000- <1>
    64 00000424 00000000000000      <1>
    65                              <1> 
    66 0000042B 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    67 00000433 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    68                              <1> 
    69 0000043B 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Main scratch buffer for forming paths!
    69 00000444 000000000000000000- <1>
    69 0000044D 000000000000000000- <1>
    69 00000456 000000000000000000- <1>
    69 0000045F 000000000000000000- <1>
    69 00000468 000000000000000000- <1>
    69 00000471 000000000000000000- <1>
    69 0000047A 000000000000000000- <1>
    69 00000483 000000000000000000- <1>
    69 0000048C 000000000000000000- <1>
    69 00000495 000000000000000000- <1>
    69 0000049E 000000000000000000- <1>
    69 000004A7 000000000000000000- <1>
    69 000004B0 000000000000000000- <1>
    69 000004B9 00000000            <1>
    70                              <1> ;The above is slightly larger than is needed/supported by DOS to allow for 
    71                              <1> ; users overtyping
    72                              <1> 
    73                              <1> ;Internal Function vars
    74                              <1> ;Dir Vars
    75 000004BD 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    76                              <1> ;                                   Bit[1] set => /P or /p specified
    77                              <1> ;                                   Bit[2] set => A file/path specified
    78 000004BE 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    79 000004BF 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    80 000004C0 00                  <1> dirDrv      db 0    ;0 based drive number to use
    81 000004C1 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
    81 000004CA 000000000000000000- <1>
    81 000004D3 000000000000000000- <1>
    81 000004DC 000000000000000000- <1>
    81 000004E5 000000000000000000- <1>
    81 000004EE 000000000000000000- <1>
    81 000004F7 000000000000000000- <1>
    81 00000500 000000000000000000- <1>
    81 00000509 000000000000000000- <1>
    81 00000512 000000000000000000- <1>
    81 0000051B 000000000000000000- <1>
    81 00000524 000000000000000000- <1>
    81 0000052D 000000000000000000- <1>
    81 00000536 000000000000000000- <1>
    81 0000053F 00000000            <1>
    82 00000543 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
    82 0000054C 3F3F3F3F3F3F3F      <1>
    83                              <1> dirWideType equ 1
    84                              <1> dirPageType equ 2
    85                              <1> dirFileType equ 4
    86                              <1> ;Volume Vars
    87                              <1> volFcb:
    88                              <1>     istruc exFcb
    89 00000553 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    90 00000554 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    91 0000055A 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
    92 0000055B 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
    93 00000563 3F3F3F              <1>     at exFcb.fileext,   db "???"
    94 00000566 00000000            <1>     at exFcb.curBlock,  dd 0
    95 0000056A 00<rep 15h>         <1>     iend 
    96                              <1> 
    97                              <1> ;Time/Date vars
    98 0000057F 00                  <1> td1 db 0    ;Minutes/Year
    99 00000580 00                  <1> td2 db 0    ;Hours/Zero
   100 00000581 00                  <1> td3 db 0    ;Hundredths/Day
   101 00000582 00                  <1> td4 db 0    ;Seconds/Month
   102                              <1> 
   103                              <1> ;Rename/Copy/Delete Buffers
   104                              <1> delPath:
   105 00000583 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   105 0000058C 000000000000000000- <1>
   105 00000595 000000000000000000- <1>
   105 0000059E 000000000000000000- <1>
   105 000005A7 000000000000000000- <1>
   105 000005B0 000000000000000000- <1>
   105 000005B9 000000000000000000- <1>
   105 000005C2 000000000000000000- <1>
   105 000005CB 000000000000000000- <1>
   105 000005D4 000000000000000000- <1>
   105 000005DD 000000000000000000- <1>
   105 000005E6 000000000000000000- <1>
   105 000005EF 000000000000000000- <1>
   105 000005F8 000000000000000000- <1>
   105 00000601 00000000            <1>
   106 00000605 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   106 0000060E 000000000000000000- <1>
   106 00000617 000000000000000000- <1>
   106 00000620 000000000000000000- <1>
   106 00000629 000000000000000000- <1>
   106 00000632 000000000000000000- <1>
   106 0000063B 000000000000000000- <1>
   106 00000644 000000000000000000- <1>
   106 0000064D 000000000000000000- <1>
   106 00000656 000000000000000000- <1>
   106 0000065F 000000000000000000- <1>
   106 00000668 000000000000000000- <1>
   106 00000671 000000000000000000- <1>
   106 0000067A 000000000000000000- <1>
   106 00000683 00000000            <1>
   107 00000687 0000000000000000    <1> srcPtr      dq 0    ;Where to copy the pattern to
   108 0000068F 0000000000000000    <1> destPtr     dq 0    ;Where to copy the pattern to
   109 00000697 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   109 000006A0 2020                <1>
   110                              <1> ;Copy Handles
   111 000006A2 FFFF                <1> sourceHdl   dw -1
   112 000006A4 FFFF                <1> destHdl     dw -1
   113 000006A6 0000                <1> srcHdlInfo  dw 0 ;Used to save the handle device info (bit 7 Set -> Char dev)
   114                              <1> 
   115 000006A8 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   115 000006B1 000000000000000000- <1>
   115 000006BA 000000000000000000- <1>
   115 000006C3 000000000000000000- <1>
   115 000006CC 000000000000000000- <1>
   115 000006D5 000000000000000000- <1>
   115 000006DE 000000000000000000- <1>
   115 000006E7 000000000000000000- <1>
   115 000006F0 000000000000000000- <1>
   115 000006F9 000000000000000000- <1>
   115 00000702 000000000000000000- <1>
   115 0000070B 000000000000000000- <1>
   115 00000714 000000000000000000- <1>
   115 0000071D 000000000000000000- <1>
   115 00000726 0000                <1>
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 00000728 03444952            <1>     db 3, "DIR"
     8 0000072C E117                <1>     dw dir - startLbl
     9                              <1> 
    10 0000072E 024344              <1>     db 2, "CD"
    11 00000731 B61C                <1>     dw chdir - startLbl
    12                              <1> 
    13 00000733 054348444952        <1>     db 5, "CHDIR"
    14 00000739 B61C                <1>     dw chdir - startLbl
    15                              <1> 
    16 0000073B 024D44              <1>     db 2, "MD"
    17 0000073E 311D                <1>     dw mkdir - startLbl
    18                              <1> 
    19 00000740 054D4B444952        <1>     db 5, "MKDIR"
    20 00000746 311D                <1>     dw mkdir - startLbl
    21                              <1> 
    22 00000748 025244              <1>     db 2, "RD"
    23 0000074B 7D1D                <1>     dw rmdir - startLbl
    24                              <1> 
    25 0000074D 05524D444952        <1>     db 5, "RMDIR"
    26 00000753 7D1D                <1>     dw rmdir - startLbl
    27                              <1> 
    28 00000755 0344454C            <1>     db 3, "DEL"
    29 00000759 6B1F                <1>     dw erase - startLbl
    30                              <1> 
    31 0000075B 054552415345        <1>     db 5, "ERASE"
    32 00000761 6B1F                <1>     dw erase - startLbl
    33                              <1> 
    34 00000763 0444415445          <1>     db 4, "DATE"
    35 00000768 A920                <1>     dw date - startLbl
    36                              <1> 
    37 0000076A 0454494D45          <1>     db 4, "TIME"
    38 0000076F 7221                <1>     dw time - startLbl
    39                              <1> 
    40 00000771 04434F5059          <1>     db 4, "COPY"
    41 00000776 C91D                <1>     dw copy - startLbl
    42                              <1> 
    43 00000778 0443545459          <1>     db 4, "CTTY"
    44 0000077D 0D22                <1>     dw ctty - startLbl
    45                              <1> 
    46 0000077F 03434C53            <1>     db 3, "CLS"
    47 00000783 A822                <1>     dw cls - startLbl
    48                              <1> 
    49 00000785 05425245414B        <1>     db 5, "BREAK"
    50 0000078B 1A23                <1>     dw break - startLbl
    51                              <1> 
    52 0000078D 06564552494659      <1>     db 6, "VERIFY"
    53 00000794 9B23                <1>     dw verify - startLbl
    54                              <1> 
    55 00000796 0652454E414D45      <1>     db 6, "RENAME"
    56 0000079D 1824                <1>     dw rename - startLbl
    57                              <1> 
    58 0000079F 0352454E            <1>     db 3, "REN"
    59 000007A3 1824                <1>     dw rename - startLbl
    60                              <1>     
    61 000007A5 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 000007AE 1C28                <1>     dw truename - startLbl
    63                              <1> 
    64 000007B0 03564552            <1>     db 3, "VER"
    65 000007B4 022A                <1>     dw version - startLbl
    66                              <1> 
    67 000007B6 03564F4C            <1>     db 3, "VOL"
    68 000007BA 4329                <1>     dw volume - startLbl
    69                              <1> 
    70 000007BC 034D454D            <1>     db 3, "MEM"
    71 000007C0 462A                <1>     dw memory - startLbl
    72                              <1> 
    73 000007C2 0445584954          <1>     db 4, "EXIT"
    74 000007C7 2F2C                <1>     dw exit - startLbl
    75                              <1> 
    76 000007C9 0454595045          <1>     db 4, "TYPE"
    77 000007CE 902B                <1>     dw type - startLbl
    78                              <1> 
    79 000007D0 054C4142454C        <1>     db 5, "LABEL"
    80 000007D6 6D28                <1>     dw label - startLbl
    81                              <1> 
    82 000007D8 0450415448          <1>     db 4, "PATH"
    83 000007DD E92E                <1>     dw pathEdit - startLbl
    84                              <1> 
    85 000007DF 03534554            <1>     db 3, "SET"
    86 000007E3 C42E                <1>     dw set - startLbl
    87                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    88 000007E5 054D4B4C424C        <1>     db 5, "MKLBL"
    89 000007EB 9728                <1>     dw mklbl - startLbl
    90                              <1> 
    91 000007ED 05524D4C424C        <1>     db 5, "RMLBL"
    92 000007F3 D228                <1>     dw rmlbl - startLbl
    93                              <1> 
    94 000007F5 05524E4C424C        <1>     db 5, "RNLBL"
    95 000007FB 0D29                <1>     dw rnlbl - startLbl
    96                              <1> 
    97 000007FD 05544F554348        <1>     db 5, "TOUCH"
    98 00000803 0F26                <1>     dw touch - startLbl
    99                              <1> 
   100 00000805 044A4F494E          <1>     db 4, "JOIN"
   101 0000080A 7226                <1>     dw join - startLbl
   102                              <1> 
   103 0000080C 055355425354        <1>     db 5, "SUBST"
   104 00000812 3527                <1>     dw subst - startLbl
   105                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   106 00000814 FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 00000815 0D0A24              <1> crlf    db  CR,LF,"$"
     3 00000818 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 0000081D 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 00000826 696C65206D69737369- <1>
     4 0000082F 6E670D0A24          <1>
     5 00000834 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 0000083D 6469736B2077697468- <1>
     5 00000846 206261746368206669- <1>
     5 0000084F 6C65                <1>
     6 00000851 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 0000085A 737320616E79206B65- <1>
     6 00000863 79207768656E207265- <1>
     6 0000086C 6164790D0A24        <1>
     7 00000872 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 0000087B 6E64206F722066696C- <1>
     7 00000884 65206E616D650D0A24  <1>
     8 0000088D 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 00000896 2066696C65206E616D- <1>
     8 0000089F 65206F7220          <1>
     9 000008A4 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 000008AD 666F756E640D0A24    <1>
    10 000008B5 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    10 000008BE 656E74206469736B20- <1>
    10 000008C7 73706163650D0A24    <1>
    11 000008CF 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 000008D8 7669726F6E6D656E74- <1>
    11 000008E1 2073706163650D0A24  <1>
    12 000008EA 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 000008F3 74696F6E206572726F- <1>
    12 000008FC 720D0A24            <1>
    13 00000900 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 00000909 6F7420626520636F70- <1>
    13 00000912 696564206F6E746F20- <1>
    13 0000091B 697473656C660D0A24  <1>
    14 00000924 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 0000092D 662064657374696E61- <1>
    14 00000936 74696F6E206C6F7374- <1>
    14 0000093F 206265666F72652063- <1>
    14 00000948 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 0000094E 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 00000957 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 00000960 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 00000969 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 0000096A 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 00000973 65650D0A24          <1>
    21 00000978 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 00000981 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 0000098A 726976652073706563- <1>
    23 00000993 696669636174696F6E- <1>
    23 0000099C 0D0A24              <1>
    24 0000099F 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 000009A8 6B6579207768656E20- <1>
    24 000009B1 7265616479202E202E- <1>
    24 000009BA 202E2024            <1>
    25 000009BE 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 000009C7 6172616D657465720D- <1>
    25 000009D0 0A24                <1>
    26                              <1> 
    27 000009D2 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 000009DB 576564546875467269- <1>
    27 000009E4 536174              <1>
    28 000009E7 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 000009F0 206461746524        <1>
    29 000009F6 43757272656E742064- <1> curDate db  "Current date is $"
    29 000009FF 6174652069732024    <1>
    30 00000A07 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 00000A10 657720646174652024  <1>
    31 00000A19 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 00000A22 293A2024            <1>
    32 00000A26 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 00000A2F 293A2024            <1>
    33 00000A33 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 00000A3C 293A2024            <1>
    34 00000A40 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 00000A49 2074696D6524        <1>
    35 00000A4F 43757272656E742074- <1> curTime db  "Current time is $"
    35 00000A58 696D652069732024    <1>
    36 00000A60 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 00000A69 65772074696D653A20- <1>
    36 00000A72 24                  <1>
    37                              <1> 
    38 00000A73 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000A7C 7572652028592F4E29- <1>
    38 00000A85 3F2024              <1>
    39                              <1> 
    40 00000A88 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000A91 56657273696F6E2024  <1>
    41                              <1> 
    42 00000A9A 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000AA3 6E2064726976652024  <1>
    43 00000AAC 2069732024          <1> volOk   db " is $"
    44 00000AB1 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000ABA 6162656C24          <1>
    45                              <1> 
    46 00000ABF 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000AC8 69726563746F72790D- <1>
    46 00000AD1 0A24                <1>
    47 00000AD3 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000ADC 206372656174652064- <1>
    47 00000AE5 69726563746F72790D- <1>
    47 00000AEE 0A24                <1>
    48 00000AF0 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000AF9 6174682C206E6F7420- <1>
    48 00000B02 6469726563746F7279- <1>
    48 00000B0B 2C0D0A              <1>
    49 00000B0E 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000B17 6F7279206E6F742065- <1>
    49 00000B20 6D7074790D0A24      <1>
    50 00000B27 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000B30 79206F66202024      <1>
    51 00000B37 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000B40 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    52 00000B49 6E6965640D0A24      <1>
    53 00000B50 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    53 00000B59 72697665206973206E- <1>
    53 00000B62 6F206C6F6E67657220- <1>
    53 00000B6B 76616C696424        <1>
    54 00000B71 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    54 00000B7A 7269766520696E2073- <1>
    54 00000B83 656172636820706174- <1>
    54 00000B8C 680D0A24            <1>
    55 00000B90 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    55 00000B99 65766963650D0A24    <1>
    56 00000BA1 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    56 00000BAA 20666F756E640D0A24  <1>
    57 00000BB3 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    57 00000BBC 726F720D0A24        <1>
    58 00000BC2 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    58 00000BCB 6F74206265206E6573- <1>
    58 00000BD4 7465640D0A24        <1>
    59 00000BDA 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    59 00000BE3 6174652066696C6520- <1>
    59 00000BEC 6572726F7220647572- <1>
    59 00000BF5 696E6720706970650D- <1>
    59 00000BFE 0A24                <1>
    60 00000C00 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    60 00000C09 2062696E6172792072- <1>
    60 00000C12 656164732066726F6D- <1>
    60 00000C1B 206120646576696365- <1>
    60 00000C24 0D0A24              <1>
    61 00000C27 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    62 00000C2D 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    63 00000C32 425245414B20697320- <1> breakIs db "BREAK is $"
    63 00000C3B 24                  <1>
    64 00000C3C 564552494659206973- <1> verifyIs    db "VERIFY is $"
    64 00000C45 2024                <1>
    65 00000C47 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    66 00000C50 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    66 00000C59 617468206F72206669- <1>
    66 00000C62 6C65206E616D650D0A- <1>
    66 00000C6B 24                  <1>
    67 00000C6C 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    67 00000C75 756D626572206F6620- <1>
    67 00000C7E 706172616D65746572- <1>
    67 00000C87 730D0A24            <1>
    68 00000C8B 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    68 00000C94 74696E6720746F2064- <1>
    68 00000C9D 6576696365          <1>
    69 00000CA2 08200800            <1> backSpace   db BSP," ",BSP,NUL
    70                              <1> 
    71 00000CA6 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    71 00000CAF 20202020202020546F- <1>
    71 00000CB8 74616C207379737465- <1>
    71 00000CC1 6D206D656D6F72793A- <1>
    71 00000CCA 2024                <1>
    72 00000CCC 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    72 00000CD5 20202020202020204D- <1>
    72 00000CDE 656D6F727920757365- <1>
    72 00000CE7 6420627920444F533A- <1>
    72 00000CF0 2024                <1>
    73 00000CF2 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    73 00000CFB 656D6F727920757365- <1>
    73 00000D04 64206279206170706C- <1>
    73 00000D0D 69636174696F6E733A- <1>
    73 00000D16 2024                <1>
    74 00000D18 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    74 00000D21 656D6F727920726573- <1>
    74 00000D2A 657276656420627920- <1>
    74 00000D33 68617264776172653A- <1>
    74 00000D3C 2024                <1>
    75 00000D3E 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    75 00000D47 202020202020202020- <1>
    75 00000D50 2020202020204D656D- <1>
    75 00000D59 6F727920667265653A- <1>
    75 00000D62 2024                <1>
    76 00000D64 20627974657324      <1> memByte db " bytes$"
    77 00000D6B 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    77 00000D74 6F7420417373657274- <1>
    77 00000D7D 61696E20444F532045- <1>
    77 00000D86 6E74727920506F696E- <1>
    77 00000D8F 7424                <1>
    78 00000D91 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    78 00000D9A 416C6C6F636174696F- <1>
    78 00000DA3 6E204572726F7224    <1>
    79 00000DAB 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    79 00000DB4 4572726F7224        <1>
    80 00000DBA 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    80 00000DC3 68616C74656424      <1>
    81                              <1> 
    82 00000DCA 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    82 00000DD3 206372656174652070- <1>
    82 00000DDC 6970650D0A          <1>
    83                              <1> pipeErrMsgL equ $ - pipeErrMsg
    84 00000DE1 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    84 00000DEA 6F6E206572726F720D- <1>
    84 00000DF3 0A                  <1>
    85                              <1> redirErrMsgL   equ $ - redirErrMsg
    86                              <1> 
    87 00000DF4 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    88 00000DF8 2020202024          <1> fourSpc  db "    $"
    89 00000DFD 20202024            <1> threeSpc db "   $"
    90 00000E01 202024              <1> twoSpc   db "  $"
    91                              <1> 
    92 00000E04 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    92 00000E0D 696679204F4E206F72- <1>
    92 00000E16 204F46460D0A24      <1>
    93                              <1> 
    94 00000E1D 50524F4D50543D      <1> promptEVar  db "PROMPT="
    95 00000E24 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
    96                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    97                              <1> ; handles and reopen CON
    98 00000E2D 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:
     3                              <1> ;This is copied into an MCB to be used as the environment!
     4                              <1> comspecEvar:
     5 00000E31 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 00000E39 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0  ;Part of the comspec!
     7 00000E42 442E434F4D00        <1>
     8                              <1> pathEVar:
     9 00000E48 504154483D0000      <1>     db "PATH=",0,0  ;End of default environment strings
    10                              <1> menv_len equ $ - masterEnv
    11                              <1> ;Master environment doesnt contain the "program name string"
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00000E4F 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00000E52 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00000E56 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 00000E59 B44A                <1>     mov ah, 4Ah ;Realloc
     9 00000E5B 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00000E5E CD21                <1>     int 21h
    11 00000E60 EB6C                <1>     jmp short commandMain
    12                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    13 00000E62 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    14 00000E67 CD21                <1>     int 21h
    15 00000E69 6689059DF1FFFF      <1>     mov word [returnCode], ax
    16                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    17 00000E70 488D1587260000      <1>     lea rdx, critErrorHandler
    18 00000E77 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    19 00000E7B B824250000          <1>     mov eax, 2524h
    20 00000E80 CD21                <1>     int 21h
    21 00000E82 488D1510290000      <1>     lea rdx, int23h
    22 00000E89 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    23 00000E8D B823250000          <1>     mov eax, 2523h
    24 00000E92 CD21                <1>     int 21h
    25 00000E94 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    26 00000E9B 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    27 00000E9F B822250000          <1>     mov eax, 2522h
    28 00000EA4 CD21                <1>     int 21h
    29 00000EA6 F605F2F1FFFFFF      <1>     test byte [pipeFlag], -1
    30 00000EAD 0F8593000000        <1>     jnz commandMain.pipeProceed ;Skip the handle closing when pipe active
    31 00000EB3 E8FA040000          <1>     call cleanUpRedir   ;Clean up redirection once we are done
    32                              <1> ;Close all handles from 5->MAX
    33 00000EB8 0FB70D68F1FFFF      <1>     movzx ecx, word [numHdls]
    34 00000EBF BB05000000          <1>     mov ebx, 5
    35                              <1> .handleClose:
    36 00000EC4 B43E                <1>     mov ah, 3Eh ;File close
    37 00000EC6 CD21                <1>     int 21h
    38 00000EC8 FFC3                <1>     inc ebx ;Goto next file
    39 00000ECA 39CB                <1>     cmp ebx, ecx
    40 00000ECC 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    41                              <1> commandMain:
    42 00000ECE 488B2530F1FFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    43 00000ED5 FC                  <1>     cld ;Ensure stringops are done the right way
    44 00000ED6 C6052FF2FFFF7F      <1>     mov byte [inBuffer], inBufferL    ;Reset the buffer length
    45                              <1> .inputMain:
    46 00000EDD E839200000          <1>     call printCRLF
    47                              <1> .inputMain2:
    48 00000EE2 E89A230000          <1>     call clearCommandLineState
    49 00000EE7 E863230000          <1>     call printPrompt
    50                              <1> 
    51 00000EEC B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    52 00000EF1 CD21                <1>     int 21h
    53 00000EF3 B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    54 00000EF8 BA01000000          <1>     mov edx, 1      ;Start new print job
    55 00000EFD CD21                <1>     int 21h
    56 00000EFF 488D1506F2FFFF      <1>     lea rdx, inBuffer
    57 00000F06 B8000A0000          <1>     mov eax, 0A00h  ;Do Buffered input
    58 00000F0B CD21                <1>     int 21h
    59 00000F0D E809200000          <1>     call printCRLF  ;Note we have accepted input
    60                              <1> ;First check we had something typed in of length greater than 0
    61                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    62 00000F12 803DF4F1FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    63 00000F19 74C7                <1>     je .inputMain2
    64                              <1>     ;Copy over the input text
    65 00000F1B 488D35EAF1FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    66                              <1> .copyPoint: ;Copy over commandline here
    67 00000F22 488D3D65F2FFFF      <1>     lea rdi, cmdBuffer
    68 00000F29 B982000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    69 00000F2E F3A4                <1>     rep movsb
    70                              <1> .pipeLoop:
    71 00000F30 4C8B05D8F0FFFF      <1>     mov r8, qword [pspPtr]  ;Ensure we have our pspPtr pointing to the right place
    72 00000F37 E861000000          <1>     call makeAEBuffer
    73 00000F3C E812010000          <1>     call analyseCmdline
    74 00000F41 E8BE010000          <1>     call doCommandLine
    75                              <1> .pipeProceed:
    76 00000F46 E867040000          <1>     call cleanUpRedir
    77 00000F4B F6054DF1FFFFFF      <1>     test byte [pipeFlag], -1  ;If we have any pipes active, we proceed here
    78 00000F52 7489                <1>     jz .inputMain
    79                              <1>     ;Now we pull the commandline forwards. 
    80 00000F54 C60549F1FFFFFF      <1>     mov byte [redirNull], -1    ;Cleared by both cmdstate handlers
    81 00000F5B E894000000          <1>     call preProcessBuffer       ;Now find the pipe again
    82 00000F60 803E0D              <1>     cmp byte [rsi], CR  ;If this is so, exit!
    83 00000F63 0F8474FFFFFF        <1>     je .inputMain  ;No more pipes found so we are done with piping!
    84                              <1>     ;rsi points to the start of the new string
    85                              <1>     ;ecx = number of chars left unscanned
    86                              <1>     ;rdi points to the command buffer
    87 00000F69 488D3D20F2FFFF      <1>     lea rdi, cmdBuffer + 2  ;Get the start of the data in buffer
    88 00000F70 4889F1              <1>     mov rcx, rsi
    89 00000F73 4829F9              <1>     sub rcx, rdi    ;Get the difference i.e. the number of chars to remove
    90 00000F76 280D13F2FFFF        <1>     sub byte [cmdBuffer + 1], cl    ;Minus from remaining chars
    91 00000F7C 8A0D0DF2FFFF        <1>     mov cl, byte [cmdBuffer + 1]    ;Get this value 
    92 00000F82 FFC1                <1>     inc ecx         ;One more for the terminating char
    93 00000F84 F3A4                <1>     rep movsb       ;Move the chars over
    94 00000F86 E8DB220000          <1>     call clearCommandState  ;Else, clear the command state and start again
    95 00000F8B EBA3                <1>     jmp short .pipeLoop
    96                              <1> .dfltErrExit:
    97 00000F8D 488D15DEF8FFFF      <1>     lea rdx, badCmd
    98 00000F94 B409                <1>     mov ah, 09h
    99 00000F96 CD21                <1>     int 21h
   100 00000F98 E940FFFFFF          <1>     jmp .inputMain
   101                              <1> 
   102                              <1> makeAEBuffer:
   103                              <1> ;Make the AE buffer. Do this before everything to avoid messing 
   104                              <1> ; up internal vars! Done on each command executed. Im not happy
   105                              <1> ; with the way all this is implemented, I need to rewrite so that
   106                              <1> ; the redirNull flag is unnecessary. This will be best done by 
   107                              <1> ; unbinding the creating of the pipes and the registering of
   108                              <1> ; the redirection as that is what this flag essentially does.
   109                              <1> ; Possibly then make the cmdline preprocessor use the ae buffer 
   110                              <1> ; as the flexibility currently afforded is not worth it.
   111                              <1> 
   112 00000F9D C60500F1FFFFFF      <1>     mov byte [redirNull], -1
   113 00000FA4 66C70563F2FFFF7F00  <1>     mov word [aeBuffer], inBufferL  ;Zero the number of chars in buffer
   114 00000FAD 488D3D5EF2FFFF      <1>     lea rdi, aeBuffer + 2
   115 00000FB4 57                  <1>     push rdi
   116 00000FB5 E83A000000          <1>     call preProcessBuffer   ;Move rsi to the CR or the char past a pipe
   117                              <1> .lp:
   118 00000FBA 5F                  <1>     pop rdi ;rdi points to where to copy the chars over to
   119 00000FBB 56                  <1>     push rsi    ;Preserve the terminator here!
   120 00000FBC 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   121 00000FC3 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get num of chars in buf here
   122 00000FCB 000D40F2FFFF        <1>     add byte [aeBuffer + 1], cl         ;Add num of chars copied here
   123 00000FD1 F3A4                <1>     rep movsb
   124 00000FD3 5E                  <1>     pop rsi
   125 00000FD4 803E0D              <1>     cmp byte [rsi], CR
   126 00000FD7 7411                <1>     je .done
   127 00000FD9 B07C                <1>     mov al, "|"
   128 00000FDB AA                  <1>     stosb   ;Store the pipe and advance the ptr
   129 00000FDC FE052FF2FFFF        <1>     inc byte [aeBuffer + 1] ;Add one more char!
   130 00000FE2 57                  <1>     push rdi
   131 00000FE3 E813000000          <1>     call preProcessBuffer.altEP ;Dont reset to the head of the buffer
   132 00000FE8 EBD0                <1>     jmp short .lp
   133                              <1> .done:
   134 00000FEA AC                  <1>     lodsb
   135 00000FEB AA                  <1>     stosb   ;Store the CR 
   136 00000FEC C605B1F0FFFF00      <1>     mov byte [redirNull], 0
   137                              <1>     return
    13                              <2> %%_ret:
    14 00000FF3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   138                              <1> 
   139                              <1> preProcessBuffer:
   140                              <1> ;Start by preprocessing the path, escape quotes and handle redirections.
   141                              <1> ;Each normal char gets copied over to psp.dta + 1 except for those special chars.
   142                              <1> ;Places the count of chars save CR in byte 0 of psp.dta.
   143                              <1> ;Places the ptr to the first byte past pipe or CR in cmdEndPtr
   144                              <1> ;Throughout: CL has char count, CH has number of quotes.
   145 00000FF4 488D3595F1FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto command buffer + 2
   146                              <1> .altEP:
   147 00000FFB 31C9                <1>     xor ecx, ecx
   148 00000FFD 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   149                              <1> .countQuotes:
   150 00001000 AC                  <1>     lodsb
   151 00001001 3C22                <1>     cmp al, '"'
   152 00001003 7507                <1>     jne .notQuoteToCount
   153 00001005 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   154 00001007 E9F4FFFFFF          <1>     jmp .countQuotes
   155                              <1> .notQuoteToCount:
   156 0000100C 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   157 0000100E 75F0                <1>     jne .countQuotes
   158 00001010 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   159 00001013 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We store this nicely formatted string in psp
   160                              <1> .getChar:
   161 0000101A AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   162 0000101B 3C22                <1>     cmp al, '"'     ;Is char a quote?
   163 0000101D 750E                <1>     jne .notQuote
   164 0000101F FECD                <1>     dec ch          ;We have a quote, now decrement
   165 00001021 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   166                              <1> .searchForClosingQuote:
   167                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   168 00001023 AA                  <1>     stosb   ;Store char and inc rdi
   169 00001024 FEC1                <1>     inc cl
   170 00001026 AC                  <1>     lodsb   ;Get next char
   171 00001027 3C22                <1>     cmp al, '"'
   172 00001029 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   173 0000102B FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   174                              <1> .notQuote:
   175 0000102D 51                  <1>     push rcx    ;Save counts, if anything goes wrong, stack is jiggled properly
   176 0000102E E8EF040000          <1>     call checkAndSetupRedir ;Intervene redir
   177 00001033 59                  <1>     pop rcx
   178 00001034 7509                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   179 00001036 7202                <1>     jc .pipeHandle      ;Store a CR in the buffer if a pipe
   180 00001038 EBE0                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   181                              <1> .pipeHandle:
   182 0000103A B00D                <1>     mov al, CR  ;Now store a Carriage return 
   183 0000103C 48FFC6              <1>     inc rsi ;Ensure we remain one char past the pipe
   184                              <1> .notRedir:
   185 0000103F AA                  <1>     stosb       ;Store char and advance rdi
   186 00001040 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   187 00001042 7404                <1>     je .exit
   188 00001044 FEC1                <1>     inc cl      ;Increment char count
   189 00001046 EBD2                <1>     jmp short .getChar    ;If not, get next char
   190                              <1> .exit:
   191 00001048 48FFCE              <1>     dec rsi ;Move back to the CR or the first char past the pipe
   192 0000104B 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars in the psp buffer
   193                              <1>     return  ;Returns rsi -> New path componant
    13                              <2> %%_ret:
    14 00001052 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   194                              <1> 
   195                              <1> analyseCmdline:
   196                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   197                              <1> ; processes the command name into the FCB.  
   198 00001053 E89CFFFFFF          <1>     call preProcessBuffer   ;Now preprocess and setup pipes!
   199 00001058 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   200 0000105F 4889F3              <1>     mov rbx, rsi            ;Save this ptr in rbx
   201 00001062 E8C7210000          <1>     call skipDelimiters     ;Skip any preceeding separators
   202 00001067 488D3D24F2FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   203 0000106E E8F7220000          <1>     call cpDelimPathToBufz  ;Moves rsi to the first char past the delim char
   204 00001073 48FFCE              <1>     dec rsi ;Point it back to the delim char
   205 00001076 E880000000          <1>     call .skipAndCheckCR
   206 0000107B 7439                <1>     je .setupCmdVars
   207 0000107D C60527F0FFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   208 00001084 4889F0              <1>     mov rax, rsi
   209 00001087 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   210 0000108A 88051CF0FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   211                              <1> .skipArg:
   212 00001090 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   213 00001091 3C0D                <1>     cmp al, CR
   214 00001093 7421                <1>     je .setupCmdVars
   215 00001095 E8A2210000          <1>     call isALdelimiter
   216 0000109A 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   217 0000109C E85A000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   218 000010A1 7413                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   219 000010A3 C60504F0FFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   220 000010AA 4889F0              <1>     mov rax, rsi            
   221 000010AD 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   222 000010B0 8805F9EFFFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   223                              <1> .setupCmdVars:
   224                              <1> ;Before returning, we copy the command name to cmdName 
   225 000010B6 C60524F2FFFF00      <1>     mov byte [cmdName], 0   ;Initialise this field to indicate no cmd
   226 000010BD 488D3DCEF1FFFF      <1>     lea rdi, cmdPathSpec
   227 000010C4 E827220000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   228 000010C9 E844210000          <1>     call strlen ;Get the length of the final path componant
   229 000010CE 81F90C000000        <1>     cmp ecx, 11 + 1 ;Extra char for the ext separator (dot)
   230 000010D4 771D                <1>     ja .exitBad     ;Return error
   231 000010D6 4889FE              <1>     mov rsi, rdi
   232 000010D9 488D3D01F2FFFF      <1>     lea rdi, cmdName
   233 000010E0 FFC9                <1>     dec ecx ;Minus the terminating null
   234 000010E2 880F                <1>     mov byte [rdi], cl ;Store the length here
   235 000010E4 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   236                              <1> .cpCmdName:
   237 000010E7 AC                  <1>     lodsb
   238 000010E8 E82F210000          <1>     call ucChar ;Uppercase the char
   239 000010ED AA                  <1>     stosb
   240 000010EE FFC9                <1>     dec ecx
   241 000010F0 75F5                <1>     jnz .cpCmdName
   242                              <1>     return
    13                              <2> %%_ret:
    14 000010F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   243                              <1> .exitBad:
   244 000010F3 C605E7F1FFFFFF      <1>     mov byte [cmdName], -1 ;Store -1 to indicate error
   245                              <1>     return
    13                              <2> %%_ret:
    14 000010FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   246                              <1> .skipAndCheckCR:
   247                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   248 000010FB E82E210000          <1>     call skipDelimiters ;Go to the next char in the input line
   249 00001100 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   250                              <1>     return
    13                              <2> %%_ret:
    14 00001103 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   251                              <1> 
   252                              <1> doCommandLine:
   253 00001104 4C8B0504EFFFFF      <1>     mov r8, qword [pspPtr]
   254 0000110B 488D3580F1FFFF      <1>     lea rsi, cmdPathSpec
   255                              <1>     ;The following check accounts for the end of a piped command
   256 00001112 803DC8F1FFFF00      <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, fail!
   257                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001119 74(03)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   258 0000111B 803DBFF1FFFFFF      <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   259 00001122 0F84B0060000        <1>     je badCmdError
   260 00001128 488D3D82EFFFFF      <1>     lea rdi, cmdFcb
   261 0000112F B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
   262 00001134 CD21                <1>     int 21h
   263 00001136 0FB71D55F1FFFF      <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   264 0000113D 80FF3A              <1>     cmp bh, ":"
   265 00001140 752D                <1>     jne .noDriveSpecified
   266 00001142 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   267 00001144 E8D3200000          <1>     call ucChar     ;Uppercase al
   268 00001149 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   269 0000114B 80FBFF              <1>     cmp bl, -1      ;Int 21h returns AL = -1 if bad drive specified
   270 0000114E 7412                <1>     je .badDrive
   271                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   272 00001150 803D8AF1FFFF02      <1>     cmp byte [cmdName], 2
   273 00001157 7516                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   274 00001159 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   275 0000115B E888200000          <1>     call setDrive
   276                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001160 74(03)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   277                              <1> .badDrive:
   278 00001162 488D1518F8FFFF      <1>     lea rdx, badDrv
   279 00001169 B409                <1>     mov ah, 09h
   280 0000116B CD21                <1>     int 21h
   281 0000116D F9                  <1>     stc
   282                              <1>     return
    13                              <2> %%_ret:
    14 0000116E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   283                              <1> .noDriveSpecified:
   284                              <1> ;Now we set the two FCB's in the command line
   285 0000116F F60535EFFFFFFF      <1>     test byte [arg1Flg], -1
   286 00001176 744D                <1>     jz .fcbArgsDone
   287 00001178 0FB6052DEFFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   288 0000117F 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   289 00001186 4801C6              <1>     add rsi, rax    ;Point to first argument
   290 00001189 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   291 0000118D B801290000          <1>     mov eax, 2901h
   292 00001192 CD21                <1>     int 21h
   293 00001194 880513EFFFFF        <1>     mov byte [arg1FCBret], al
   294 0000119A F6050DEFFFFFFF      <1>     test byte [arg2Flg], -1
   295 000011A1 7422                <1>     jz .fcbArgsDone
   296 000011A3 0FB60505EFFFFF      <1>     movzx eax, byte [arg2Off]
   297 000011AA 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   298 000011B1 4801C6              <1>     add rsi, rax    ;Point to first argument
   299 000011B4 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   300 000011B8 B801290000          <1>     mov eax, 2901h
   301 000011BD CD21                <1>     int 21h
   302 000011BF 8805EBEEFFFF        <1>     mov byte [arg2FCBret], al
   303                              <1> .fcbArgsDone:
   304 000011C5 488D1D44F0FFFF      <1>     lea rbx, aeBuffer       ;Take your buffer, ergh
   305 000011CC 488D350EF1FFFF      <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   306 000011D3 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   307 000011D8 BAFFFF0000          <1>     mov edx, 0FFFFh
   308 000011DD B5FF                <1>     mov ch, -1
   309 000011DF CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   310 000011E1 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   311 000011E6 BAFFFF0000          <1>     mov edx, 0FFFFh
   312 000011EB 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   313 000011ED CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   314                              <1>             ;        al = 0  if the command should be executed as usual
   315 000011EF 84C0                <1>     test al, al
   316 000011F1 743C                <1>     jz .executeInternal
   317                              <1>     ;Here we execute externally and return to the prompt
   318                              <1>     ; as if it was an internal execution
   319 000011F3 488D1D16F0FFFF      <1>     lea rbx, aeBuffer       ;Take your buffer, ergh
   320 000011FA 488D35E0F0FFFF      <1>     lea rsi, cmdName        
   321 00001201 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   322 00001206 BAFFFF0000          <1>     mov edx, 0FFFFh
   323 0000120B B5FF                <1>     mov ch, -1
   324 0000120D CD2F                <1>     int 2Fh
   325 0000120F 803D78EFFFFF00      <1>     cmp byte [cmdBuffer], 0 ;If this is non-zero, we execute internal
   326 00001216 7517                <1>     jnz .executeInternal
   327 00001218 E895010000          <1>     call cleanUpRedir       ;Close all redirs to reset!
   328 0000121D E85F200000          <1>     call clearCommandLineState  ;And reset the commandline
   329 00001222 5E                  <1>     pop rsi                 ;Pop the return address off the stack
   330 00001223 488D35E6EFFFFF      <1>     lea rsi, aeBuffer       ;Point rsi to the 
   331 0000122A E9F3FCFFFF          <1>     jmp commandMain.copyPoint   ;And copy the cmd over to execute!
   332                              <1> .executeInternal:
   333                              <1> ;Now we check if the cmdName is equal to the length of the cmdPathSpec.
   334                              <1> ;If not, then its immediately an external program!
   335 0000122F 488D3D5CF0FFFF      <1>     lea rdi, cmdPathSpec
   336 00001236 E8D71F0000          <1>     call strlen ;Get the length of the input command
   337 0000123B FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   338 0000123D 380D9EF0FFFF        <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   339 00001243 0F851C1A0000        <1>     jne launchChild     ;If not, a path was specified, exit!
   340                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   341 00001249 488D1DD8F4FFFF      <1>     lea rbx, functionTable
   342                              <1> .nextEntry:
   343 00001250 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   344 00001253 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   345 00001256 0F84091A0000        <1>     je launchChild      ;If so, check externally now
   346 0000125C 380D7FF0FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   347 00001262 7533                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   348                              <1>     ;Here they have the same length so lets see if the name is the same
   349 00001264 56                  <1>     push rsi
   350                              <1>     ;ecx has the length to compare
   351 00001265 51                  <1>     push rcx
   352 00001266 488D7301            <1>     lea rsi, qword [rbx + 1]
   353 0000126A 488D3D71F0FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   354 00001271 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   355 00001273 59                  <1>     pop rcx
   356 00001274 5E                  <1>     pop rsi
   357 00001275 7520                <1>     jne .gotoNextEntry
   358                              <1>     ;Here it was found both strings are equal
   359 00001277 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   360 0000127C 480FB71F            <1>     movzx rbx, word [rdi]
   361 00001280 488D3D79EDFFFF      <1>     lea rdi, startLbl
   362 00001287 4801FB              <1>     add rbx, rdi
   363 0000128A FFD3                <1>     call rbx    ;Call this function...
   364                              <1>     retc    ;Always return with CF=CY on error. Error code set to -1
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000128C 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000128E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   365 0000128F C60577EDFFFF00      <1>     mov byte [returnCode], 0 ;Set the retcode to 0 if ok!
   366                              <1>     return  ;... and return
    13                              <2> %%_ret:
    14 00001296 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   367                              <1> .gotoNextEntry:
   368 00001297 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   369 0000129E 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   370 000012A1 EBAD                <1>     jmp short .nextEntry
   371                              <1> .dfltErrExit:
   372 000012A3 488D15C8F5FFFF      <1>     lea rdx, badCmd
   373 000012AA B409                <1>     mov ah, 09h
   374 000012AC CD21                <1>     int 21h
   375                              <1>     return
    13                              <2> %%_ret:
    14 000012AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   376                              <1> 
   377                              <1> redirFailure:
   378 000012AF 488D152BFBFFFF      <1>     lea rdx, redirErrMsg
   379 000012B6 B913000000          <1>     mov ecx, redirErrMsgL
   380 000012BB EB0C                <1>     jmp short redirPipeFailureCommon
   381                              <1> pipeFailure:
   382 000012BD 488D1506FBFFFF      <1>     lea rdx, pipeErrMsg
   383 000012C4 B917000000          <1>     mov ecx, pipeErrMsgL
   384                              <1> redirPipeFailureCommon:
   385                              <1> ;This routine is called if any problems happen during 
   386                              <1> ;This routine tries to close whatever handles are not -1 and delete
   387                              <1> ; pipe files if the pipe count is not 0
   388                              <1> ;It resets all variables and proceeds.
   389 000012C9 B800400000          <1>     mov eax, 4000h  ;Write handle
   390 000012CE BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   391 000012D3 CD21                <1>     int 21h
   392 000012D5 31DB                <1>     xor ebx, ebx    ;Select STDIN
   393 000012D7 E8C6000000          <1>     call .closeHandle
   394 000012DC FFC3                <1>     inc ebx         ;Select STDOUT
   395 000012DE E8BF000000          <1>     call .closeHandle
   396 000012E3 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   397 000012E8 488D153EFBFFFF      <1>     lea rdx, conName
   398 000012EF CD21                <1>     int 21h
   399 000012F1 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
   400 000012F3 B800450000          <1>     mov eax, 4500h  ;DUP
   401 000012F8 CD21                <1>     int 21h
   402 000012FA 66C705A2EDFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   403 00001303 0FB71D9DEDFFFF      <1>     movzx ebx, word [redirSTDIN]
   404 0000130A E893000000          <1>     call .closeHandle
   405                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   406 0000130F 66C7058FEDFFFFFFFF  <1>     mov word [redirSTDIN], -1
   407 00001318 0FB71D8AEDFFFF      <1>     movzx ebx, word [redirSTDOUT]
   408 0000131F E87E000000          <1>     call .closeHandle
   409 00001324 66C7057CEDFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   410 0000132D 0FB71D6CEDFFFF      <1>     movzx ebx, word [pipeSTDIN]
   411 00001334 E869000000          <1>     call .closeHandle
   412 00001339 66C7055EEDFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   413 00001342 0FB71D59EDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   414 00001349 E854000000          <1>     call .closeHandle
   415 0000134E 66C7054BEDFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   416 00001357 C60541EDFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   417 0000135E 488D1528F0FFFF      <1>     lea rdx, qword [pipe1Filespec]
   418 00001365 803A00              <1>     cmp byte [rdx], 0
   419 00001368 7407                <1>     jz .checkOld
   420 0000136A B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   421 0000136F CD21                <1>     int 21h
   422                              <1> .checkOld:
   423 00001371 488D1564F0FFFF      <1>     lea rdx, qword [pipe2Filespec]
   424 00001378 803A00              <1>     cmp byte [rdx],0
   425 0000137B 7407                <1>     jz .pipeNamesComplete
   426 0000137D B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   427 00001382 CD21                <1>     int 21h
   428                              <1> .pipeNamesComplete:
   429 00001384 31C0                <1>     xor eax, eax
   430                              <1>     ;Invalidate the pointers and the paths too
   431 00001386 4889059EF0FFFF      <1>     mov qword [newPipe], rax
   432 0000138D 4889059FF0FFFF      <1>     mov qword [oldPipe], rax
   433 00001394 8905F3EFFFFF        <1>     mov dword [pipe1Filespec], eax
   434 0000139A 89053CF0FFFF        <1>     mov dword [pipe2Filespec], eax
   435 000013A0 F9                  <1>     stc
   436                              <1>     return
    13                              <2> %%_ret:
    14 000013A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   437                              <1> .closeHandle:
   438 000013A2 81FBFFFFFFFF        <1>     cmp ebx, -1
   439                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000013A8 74(A1)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   440 000013AA B8003E0000          <1>     mov eax, 3E00h
   441 000013AF CD21                <1>     int 21h
   442                              <1>     return
    13                              <2> %%_ret:
    14 000013B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   443                              <1> 
   444                              <1> cleanUpRedir:
   445                              <1> ;Cleans up the redir stuff after we are done.
   446 000013B2 0FB705E7ECFFFF      <1>     movzx eax, word [pipeSTDIN]
   447 000013B9 0FB71DE2ECFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   448 000013C0 C1E310              <1>     shl ebx, 10h
   449 000013C3 09D8                <1>     or eax, ebx
   450 000013C5 3DFFFFFFFF          <1>     cmp eax, -1
   451 000013CA 750C                <1>     jne .pipe
   452 000013CC C605CCECFFFF00      <1>     mov byte [pipeFlag], 0  ;Clear the flag
   453 000013D3 E9CD000000          <1>     jmp .redirInClear   ;If no piping, skip
   454                              <1> .pipe:
   455                              <1> ;Pipe processing here
   456                              <1> ;We handle stdin, closing the redir if it is and deleting
   457                              <1> ; the redir file.
   458                              <1> ;Then we handle stdout, moving the redir to stdin.
   459 000013D8 66813DBFECFFFFFFFF  <1>     cmp word [pipeSTDIN], -1
   460 000013E1 7443                <1>     je .pipeNostdin
   461                              <1>     ;We close the handle first and delete the file.
   462 000013E3 0FB71DB6ECFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   463 000013EA 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   464 000013EC B800460000          <1>     mov eax, 4600h
   465 000013F1 CD21                <1>     int 21h
   466 000013F3 0F82C4FEFFFF        <1>     jc pipeFailure
   467 000013F9 B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   468 000013FE CD21                <1>     int 21h
   469 00001400 0F82B7FEFFFF        <1>     jc pipeFailure
   470 00001406 488B1526F0FFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   471 0000140D B800410000          <1>     mov eax, 4100h  ;Delete the file!
   472 00001412 CD21                <1>     int 21h
   473 00001414 0F82A3FEFFFF        <1>     jc pipeFailure
   474 0000141A C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   475 0000141D 66C7057AECFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   476                              <1> .pipeNostdin:
   477 00001426 66813D73ECFFFFFFFF  <1>     cmp word [pipeSTDOUT], -1   ;If no stdout redir, exit now
   478 0000142F 7474                <1>     je .redirInClear
   479                              <1> ;Duplicate STDIN to save across pipe
   480 00001431 B800450000          <1>     mov eax, 4500h
   481 00001436 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   482 00001438 CD21                <1>     int 21h
   483 0000143A 0F827DFEFFFF        <1>     jc pipeFailure
   484 00001440 66890559ECFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   485                              <1> 
   486                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   487 00001447 B800460000          <1>     mov eax, 4600h
   488 0000144C 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   489 0000144E FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   490 00001450 CD21                <1>     int 21h
   491 00001452 0F8265FEFFFF        <1>     jc pipeFailure
   492                              <1> 
   493                              <1> ;Now return the original stdout to stdout
   494 00001458 89D9                <1>     mov ecx, ebx
   495 0000145A 0FB71D41ECFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   496 00001461 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   497 00001466 CD21                <1>     int 21h
   498 00001468 0F824FFEFFFF        <1>     jc pipeFailure
   499                              <1> 
   500                              <1> ;Now close the DUP'ed STDOUT
   501 0000146E B8003E0000          <1>     mov eax, 3E00h
   502 00001473 CD21                <1>     int 21h
   503 00001475 0F8242FEFFFF        <1>     jc pipeFailure
   504                              <1> 
   505                              <1> ;Finally unwind STDIN to the beginning of the file
   506 0000147B B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   507 00001480 31DB                <1>     xor ebx, ebx    ;STDIN handle
   508 00001482 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   509 00001484 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   510 00001486 CD21                <1>     int 21h
   511 00001488 0F822FFEFFFF        <1>     jc pipeFailure  ;This should never happen
   512                              <1> 
   513 0000148E 488B1596EFFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   514 00001495 48891597EFFFFF      <1>     mov qword [oldPipe], rdx
   515 0000149C 66C705FDEBFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   516                              <1> .redirInClear:
   517                              <1> ;Check redir in
   518 000014A5 F605F9EBFFFFFF      <1>     test byte [redirIn], -1
   519 000014AC 7433                <1>     jz .redirOutClear
   520                              <1> 
   521 000014AE 0FB71DF2EBFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   522 000014B5 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   523 000014B7 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   524 000014BC CD21                <1>     int 21h
   525 000014BE 0F82EBFDFFFF        <1>     jc redirFailure
   526 000014C4 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   527 000014C9 CD21                <1>     int 21h
   528 000014CB 0F82DEFDFFFF        <1>     jc redirFailure
   529 000014D1 66C705CDEBFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   530 000014DA C605C4EBFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   531                              <1> .redirOutClear:
   532                              <1> ;Now check Redir Out
   533 000014E1 F605BEEBFFFFFF      <1>     test byte [redirOut], -1
   534                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000014E8 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000014EA C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   535                              <1> 
   536 000014EB 0FB71DB7EBFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   537 000014F2 B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   538 000014F7 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   539 000014FC CD21                <1>     int 21h
   540 000014FE 0F82ABFDFFFF        <1>     jc redirFailure
   541 00001504 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   542 00001509 CD21                <1>     int 21h
   543 0000150B 0F829EFDFFFF        <1>     jc redirFailure
   544 00001511 66C7058FEBFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   545 0000151A C60585EBFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   546                              <1>     return
    13                              <2> %%_ret:
    14 00001521 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   547                              <1> 
   548                              <1> checkAndSetupRedir:
   549                              <1> ;Checks and sets up redir as appropriate
   550                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   551                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   552                              <1> ;Output: ZF=NZ => No redir
   553                              <1> ;        ZF=ZY => Redir
   554                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   555                              <1> ;CF=CY if pipe set or an embedded CR found. rsi points to first char past it!
   556 00001522 57                  <1>     push rdi
   557 00001523 3C3C                <1>     cmp al, "<"
   558 00001525 7413                <1>     je .inputRedir
   559 00001527 3C3E                <1>     cmp al, ">"
   560 00001529 0F8495000000        <1>     je .outputRedir
   561 0000152F 3C7C                <1>     cmp al, "|"
   562 00001531 0F845D010000        <1>     je .pipeSetup
   563 00001537 F8                  <1>     clc
   564                              <1> .redirExit:
   565 00001538 5F                  <1>     pop rdi
   566                              <1>     return
    13                              <2> %%_ret:
    14 00001539 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   567                              <1> .inputRedir:
   568 0000153A 488D3DAEEDFFFF      <1>     lea rdi, rdrInFilespec
   569 00001541 E8EE010000          <1>     call .ensureRightBuffer
   570 00001546 E8E31C0000          <1>     call skipDelimiters ;Skip spaces between < and the filespec
   571 0000154B E81A1E0000          <1>     call cpDelimPathToBufz
   572 00001550 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char as 
   573 00001553 F6054AEBFFFFFF      <1>     test byte [redirNull], -1   ;If redirNull set then dont act!
   574 0000155A 0F852D010000        <1>     jnz .redirNull
   575                              <1>     ;Setup the redir here for STDIN
   576 00001560 F6053EEBFFFFFF      <1>     test byte [redirIn], -1
   577 00001567 0F85BC010000        <1>     jnz .redirError
   578 0000156D C60531EBFFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   579 00001574 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   580 00001576 B800450000          <1>     mov eax, 4500h
   581 0000157B CD21                <1>     int 21h
   582 0000157D 0F82A6010000        <1>     jc .redirError
   583 00001583 6689051DEBFFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   584 0000158A 488D155EEDFFFF      <1>     lea rdx, rdrInFilespec
   585 00001591 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   586 00001596 CD21                <1>     int 21h
   587 00001598 0F828B010000        <1>     jc .redirError
   588 0000159E 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   589 000015A0 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   590 000015A3 B800460000          <1>     mov eax, 4600h
   591 000015A8 CD21                <1>     int 21h
   592 000015AA 0F8279010000        <1>     jc .redirError
   593 000015B0 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   594 000015B5 CD21                <1>     int 21h
   595 000015B7 0F826C010000        <1>     jc .redirError
   596 000015BD 30C0                <1>     xor al, al
   597 000015BF E974FFFFFF          <1>     jmp .redirExit
   598                              <1> .outputRedir:
   599 000015C4 BB01000000          <1>     mov ebx, 1  ;Set this as the flag
   600 000015C9 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   601 000015CC 7505                <1>     jne .notDouble
   602 000015CE FFC3                <1>     inc ebx ;Inc to make it 2
   603 000015D0 48FFC6              <1>     inc rsi ;Go past it too
   604                              <1> .notDouble:
   605 000015D3 488D3D64EDFFFF      <1>     lea rdi, rdrOutFilespec
   606 000015DA 53                  <1>     push rbx
   607 000015DB E854010000          <1>     call .ensureRightBuffer
   608 000015E0 E8491C0000          <1>     call skipDelimiters
   609 000015E5 E8801D0000          <1>     call cpDelimPathToBufz
   610 000015EA 5B                  <1>     pop rbx
   611 000015EB 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char as 
   612 000015EE F605AFEAFFFFFF      <1>     test byte [redirNull], -1   ;If redirNull set then dont act!
   613 000015F5 0F8592000000        <1>     jnz .redirNull
   614 000015FB 841DA5EAFFFF        <1>     test byte [redirOut], bl    ;If there is already an out, fail!
   615 00001601 0F8522010000        <1>     jnz .redirError 
   616 00001607 881D99EAFFFF        <1>     mov byte [redirOut], bl
   617                              <1>     ;Setup the redir here for STDOUT
   618 0000160D BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   619 00001612 B800450000          <1>     mov eax, 4500h
   620 00001617 CD21                <1>     int 21h
   621 00001619 0F820A010000        <1>     jc .redirError
   622 0000161F 66890583EAFFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   623 00001626 488D1511EDFFFF      <1>     lea rdx, rdrOutFilespec
   624 0000162D B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   625 00001632 CD21                <1>     int 21h
   626 00001634 730F                <1>     jnc .fileExists
   627 00001636 B8003C0000          <1>     mov eax, 3C00h
   628 0000163B 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   629 0000163D CD21                <1>     int 21h
   630 0000163F 0F82E4000000        <1>     jc .redirError
   631                              <1> .fileExists:
   632 00001645 B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   633 0000164A 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   634 0000164D B800460000          <1>     mov eax, 4600h  ;DUP2
   635 00001652 CD21                <1>     int 21h
   636 00001654 0F82CF000000        <1>     jc .redirError
   637 0000165A B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   638 0000165F CD21                <1>     int 21h
   639 00001661 0F82C2000000        <1>     jc .redirError
   640 00001667 803D38EAFFFF01      <1>     cmp byte [redirOut], 1
   641 0000166E 7416                <1>     je .dontAppend
   642                              <1>     ;Here we move the file pointer to the end of the file
   643 00001670 31D2                <1>     xor edx, edx    ;Low order 32 bits
   644 00001672 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   645 00001674 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   646 00001679 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   647 0000167E CD21                <1>     int 21h
   648 00001680 0F82A3000000        <1>     jc .redirError
   649                              <1> .dontAppend:
   650 00001686 C60519EAFFFFFF      <1>     mov byte [redirOut], -1
   651                              <1> .redirNull:
   652 0000168D 30C0                <1>     xor al, al
   653 0000168F E9A4FEFFFF          <1>     jmp .redirExit
   654                              <1> .pipeSetup:
   655                              <1> ;We only need to setup STDOUT redirection to the pipe file
   656 00001694 56                  <1>     push rsi    ;Save rsi pointing to char past |
   657 00001695 E8941B0000          <1>     call skipDelimiters ;Check if this is a double ||
   658 0000169A 803E7C              <1>     cmp byte [rsi], "|" 
   659 0000169D 5E                  <1>     pop rsi
   660 0000169E 747E                <1>     je .pipeError
   661 000016A0 F605FDE9FFFFFF      <1>     test byte [redirNull], -1   ;If redirNull set then dont act!
   662 000016A7 7570                <1>     jnz .pipeNull
   663 000016A9 488D15DDECFFFF      <1>     lea rdx, pipe1Filespec
   664 000016B0 803A00              <1>     cmp byte [rdx], 0
   665 000016B3 740C                <1>     jz .pathFound
   666 000016B5 488D1520EDFFFF      <1>     lea rdx, pipe2Filespec
   667 000016BC 803A00              <1>     cmp byte [rdx], 0
   668 000016BF 755D                <1>     jnz .pipeError
   669                              <1> .pathFound:
   670 000016C1 48891563EDFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   671 000016C8 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   672 000016CD BB01000000          <1>     mov ebx, 1
   673 000016D2 CD21                <1>     int 21h
   674 000016D4 7248                <1>     jc .pipeError
   675 000016D6 668905C5E9FFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   676 000016DD E8121B0000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   677 000016E2 0441                <1>     add al, "A"
   678 000016E4 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   679 000016E9 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   680 000016EB 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   681 000016ED 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   682 000016EF B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   683 000016F4 CD21                <1>     int 21h
   684 000016F6 7226                <1>     jc .pipeError
   685                              <1>     ;AX has the handle for this file now, this will become STDOUT
   686                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   687 000016F8 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   688 000016FB B901000000          <1>     mov ecx, 1
   689 00001700 B800460000          <1>     mov eax, 4600h
   690 00001705 CD21                <1>     int 21h
   691 00001707 7215                <1>     jc .pipeError
   692 00001709 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   693 0000170E CD21                <1>     int 21h
   694 00001710 720C                <1>     jc .pipeError
   695 00001712 C60586E9FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   696                              <1> .pipeNull:
   697 00001719 30C0                <1>     xor al, al  ;Set ZF
   698 0000171B F9                  <1>     stc         ;But also CF to indicate pipe!
   699 0000171C 5F                  <1>     pop rdi
   700                              <1>     return
    13                              <2> %%_ret:
    14 0000171D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   701                              <1> .pipeError:
   702 0000171E 5F                  <1>     pop rdi 
   703 0000171F E899FBFFFF          <1>     call pipeFailure
   704 00001724 E9A5F7FFFF          <1>     jmp commandMain ;Fully reset the state if a pipe failure occurs.
   705                              <1> .redirError:
   706 00001729 5F                  <1>     pop rdi 
   707 0000172A E880FBFFFF          <1>     call redirFailure
   708 0000172F E99AF7FFFF          <1>     jmp commandMain ;Fully reset the state if a redir failure occurs.
   709                              <1> .ensureRightBuffer:
   710 00001734 F60569E9FFFFFF      <1>     test byte [redirNull], -1   ;If redirNull not set then act!
   711                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000173B 74(1D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   712 0000173D 488D3DF7ECFFFF      <1>     lea rdi, searchSpec ;Use searchSpec as a nul instead
   713                              <1>     return
    13                              <2> %%_ret:
    14 00001744 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   714                              <1> 
   715                              <1> 
   716                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   717                              <1> ;Input: rsi points to the count byte of a command line
   718 00001745 4150                <1>     push r8
   719 00001747 4151                <1>     push r9
   720 00001749 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   721 0000174B CD21                <1>     int 21h
   722 0000174D 52                  <1>     push rdx    ;Save on the stack
   723 0000174E 488D1DABE7FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   724 00001755 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   725 00001757 CD21                <1>     int 21h
   726 00001759 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   727 0000175C 4989D9              <1>     mov r9, rbx
   728 0000175F 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   729 00001766 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   730 0000176B F348A5              <1>     rep movsq   ;Copy command line over
   731                              <1>     ;call doCommandLine
   732 0000176E 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   733 0000176F B450                <1>     mov ah, 50h ;Set Current PSP
   734 00001771 CD21                <1>     int 21h
   735 00001773 4159                <1>     pop r9
   736 00001775 4158                <1>     pop r8
   737 00001777 48CF                <1>     iretq
    17                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badAccError:
     7 00001779 488D15C0F3FFFF      <1>     lea rdx, accDenMsg
     8 00001780 EB46                <1>     jmp short badCmn
     9                              <1> noSelfCopyError:
    10 00001782 488D1577F1FFFF      <1>     lea rdx, noSelfCopy
    11 00001789 EB3D                <1>     jmp short badCmn
    12                              <1> badParamError:
    13 0000178B 488D152CF2FFFF      <1>     lea rdx, badParm
    14 00001792 EB34                <1>     jmp short badCmn
    15                              <1> badDriveError:
    16 00001794 488D15E6F1FFFF      <1>     lea rdx, badDrv
    17 0000179B EB2B                <1>     jmp short badCmn
    18                              <1> badArgError:
    19 0000179D 488D15C8F4FFFF      <1>     lea rdx, badArgs
    20 000017A4 EB22                <1>     jmp short badCmn
    21                              <1> badFileError:
    22 000017A6 488D15A3F4FFFF      <1>     lea rdx, badSpec
    23 000017AD EB19                <1>     jmp short badCmn
    24                              <1> badDupFnf:
    25                              <1> ;Hybrid error message
    26 000017AF 488D15D7F0FFFF      <1>     lea rdx, dupName
    27 000017B6 EB10                <1>     jmp short badCmn
    28                              <1> badFnf:
    29 000017B8 488D15E5F0FFFF      <1>     lea rdx, fnfMsg
    30 000017BF EB07                <1>     jmp short badCmn
    31                              <1> badDirError:
    32 000017C1 488D15F7F2FFFF      <1>     lea rdx, badDir
    33                              <1> badCmn:
    34 000017C8 C6053EE8FFFFFF      <1>     mov byte [returnCode], -1    ;Return code defaults to -1 if error (for now!)
    35 000017CF B800090000          <1>     mov eax, 0900h
    36 000017D4 CD21                <1>     int 21h
    37 000017D6 F9                  <1>     stc ;Return with CY => Error occured
    38                              <1>     return  ;This will be made nuanced later, to agree with DOS behaviour
    13                              <2> %%_ret:
    14 000017D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    39                              <1> badCmdError:
    40 000017D8 488D1593F0FFFF      <1>     lea rdx, badCmd
    41 000017DF EBE7                <1>     jmp short badCmn
    42                              <1> dir:
    43                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    44 000017E1 C605D5ECFFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    45 000017E8 C605CFECFFFF00      <1>     mov byte [dirLineCtr], 0
    46 000017EF C605C9ECFFFF00      <1>     mov byte [dirFileCtr], 0
    47 000017F6 C605C4ECFFFF00      <1>     mov byte [dirSrchDir], 0
    48 000017FD 66C70535ECFFFF0000  <1>     mov word [searchSpec], 0
    49 00001806 488D3D36EDFFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    50 0000180D C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    51 00001810 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    51 00001819 3F                  <1>
    52 0000181A 48894701            <1>     mov qword [rdi + fcb.filename], rax
    53 0000181E C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    54                              <1>     ;Start by scanning for the switches
    55 00001825 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    56 0000182C 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    57 0000182F E8FA190000          <1>     call skipDelimiters ;Skip leading delimiters
    58 00001834 4881C603000000      <1>     add rsi, 3  ;Go past the DIR
    59                              <1> .scanNew:
    60 0000183B E8EE190000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    61 00001840 AC                  <1>     lodsb   ;Get this char
    62 00001841 3C0D                <1>     cmp al, CR
    63 00001843 744D                <1>     je .scanDone
    64 00001845 3A05E1E7FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    65 0000184B 7524                <1>     jne .notSwitch
    66 0000184D AC                  <1>     lodsb   ;Get the next char
    67 0000184E E8C9190000          <1>     call ucChar
    68 00001853 3C57                <1>     cmp al, "W"
    69 00001855 7509                <1>     jne .notWide
    70 00001857 800D5FECFFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    71 0000185E EBDB                <1>     jmp short .scanNew
    72                              <1> .notWide:
    73 00001860 3C50                <1>     cmp al, "P"
    74 00001862 0F8523FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    75 00001868 800D4EECFFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    76 0000186F EBCA                <1>     jmp short .scanNew
    77                              <1> .notSwitch:
    78 00001871 F60545ECFFFF04      <1>     test byte [dirFlags], dirFileType
    79 00001878 0F850DFFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    80                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    81 0000187E 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    82 00001881 E83F1B0000          <1>     call copyArgumentToSearchSpec   
    83 00001886 48FFCE              <1>     dec rsi ;Point back to the terminator char
    84 00001889 800D2DECFFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    85 00001890 EBA9                <1>     jmp short .scanNew
    86                              <1> .scanDone:
    87 00001892 F60524ECFFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    88 00001899 7438                <1>     jz .currentDrv
    89                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
    90 0000189B 488D3599EBFFFF      <1>     lea rsi, searchSpec
    91 000018A2 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
    92 000018A6 752B                <1>     jne .currentDrv
    93                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
    94 000018A8 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
    95 000018AD 498D785C            <1>     lea rdi, qword [r8 + fcb1]
    96 000018B1 B801290000          <1>     mov eax, 2901h   ;Parse filename
    97 000018B6 CD21                <1>     int 21h
    98 000018B8 3CFF                <1>     cmp al, -1
    99 000018BA 0F84D4FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   100                              <1>     ;Else the drive in the fcb is valid
   101 000018C0 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   102 000018C5 84C0                <1>     test al, al
   103 000018C7 740A                <1>     jz .currentDrv
   104 000018C9 FEC8                <1>     dec al  ;Convert to 0 based drive number
   105 000018CB 8805EFEBFFFF        <1>     mov byte [dirDrv], al
   106 000018D1 EB0B                <1>     jmp short .dirPrintVol
   107                              <1> .currentDrv:
   108 000018D3 E81C190000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   109 000018D8 8805E2EBFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   110                              <1> .dirPrintVol:
   111 000018DE 488D3556EBFFFF      <1>     lea rsi, searchSpec
   112                              <1> ;Now construct the path on dirSrchDir.
   113 000018E5 488D3DD5EBFFFF      <1>     lea rdi, dirSrchDir
   114 000018EC 0FB605CDEBFFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   115 000018F3 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   116 000018F5 0441                <1>     add al, "A" ;Turn into a letter
   117 000018F7 B43A                <1>     mov ah, ":"
   118 000018F9 66AB                <1>     stosw   ;Store X: into the search path
   119 000018FB B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   120 00001900 CD2F                <1>     int 2fh
   121 00001902 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   122 00001904 0F848AFEFFFF        <1>     je badDriveError
   123                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   124 0000190A 8A051BE7FFFF        <1>     mov al, byte [pathSep]
   125 00001910 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   126 00001912 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   127 00001914 AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   128 00001915 FEC2                <1>     inc dl  ;Increment by 1
   129 00001917 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   130 0000191A B800470000          <1>     mov eax, 4700h  ;Print current working directory
   131 0000191F CD21                <1>     int 21h
   132 00001921 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   133                              <1>     ;rsi points to the first char in the provided path.
   134                              <1>     ;rdi points to the first char of the cwd.
   135 00001924 31C0                <1>     xor eax, eax
   136                              <1> .goToEndOfCwd:
   137                              <1> ;Move to the end of the string, could use repne?
   138 00001926 3807                <1>     cmp byte [rdi], al
   139 00001928 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   140 0000192A 48FFC7              <1>     inc rdi
   141 0000192D EBF7                <1>     jmp short .goToEndOfCwd
   142                              <1> .prepCopy:
   143 0000192F 8A05F6E6FFFF        <1>     mov al, byte [pathSep]
   144 00001935 3806                <1>     cmp byte [rsi], al
   145 00001937 7412                <1>     je .copyPathLoop
   146 00001939 B43A                <1>     mov ah, ":"
   147 0000193B 86C4                <1>     xchg al, ah
   148 0000193D 663947FE            <1>     cmp word [rdi - 2], ax
   149 00001941 7408                <1>     je .copyPathLoop
   150 00001943 88E0                <1>     mov al, ah
   151 00001945 3847FF              <1>     cmp byte [rdi - 1], al
   152 00001948 7401                <1>     je .copyPathLoop
   153 0000194A AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   154                              <1> .copyPathLoop:
   155 0000194B AC                  <1>     lodsb
   156 0000194C 3A05D9E6FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   157 00001952 7509                <1>     jne .checkDot  ;If not, store it
   158                              <1> .lpPathseps:
   159 00001954 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   160 00001956 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   161 00001958 48FFC6              <1>     inc rsi
   162 0000195B EBF7                <1>     jmp short .lpPathseps
   163                              <1> .checkDot:
   164 0000195D 3C2E                <1>     cmp al, "."
   165 0000195F 7407                <1>     je .dots
   166                              <1> .store:
   167 00001961 AA                  <1>     stosb
   168 00001962 84C0                <1>     test al, al ;Was the char we just copied a null?
   169 00001964 7472                <1>     jz .exitPathCopy
   170 00001966 EBE3                <1>     jmp short .copyPathLoop
   171                              <1> .dots:
   172                              <1>     ;Here handle dot and dot dot
   173                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   174                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   175                              <1>     ; by 1. If it is null, go to top of loop.
   176                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   177 00001968 8A25BDE6FFFF        <1>     mov ah, byte [pathSep]
   178 0000196E 3867FF              <1>     cmp byte [rdi - 1], ah  
   179 00001971 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   180 00001973 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   181 00001975 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   182 00001978 7413                <1>     je .twoDot
   183                              <1>     ;This is only a "current dir" when next char is pathsep or null
   184 0000197A 3A25ABE6FFFF        <1>     cmp ah, byte [pathSep]
   185 00001980 7406                <1>     je .skipThisPathsep
   186 00001982 84E4                <1>     test ah, ah
   187 00001984 74C5                <1>     jz .copyPathLoop
   188 00001986 EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   189                              <1> .skipThisPathsep:
   190                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   191 00001988 48FFC6              <1>     inc rsi ;Point to the pathsep
   192 0000198B EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   193                              <1> .twoDot:
   194                              <1>     ;Woohoo, this works!
   195 0000198D 48FFC6              <1>     inc rsi ;Move past the second dot
   196 00001990 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   197 00001992 3A2593E6FFFF        <1>     cmp ah, byte [pathSep]
   198 00001998 7408                <1>     je .tdOk
   199 0000199A 84E4                <1>     test ah, ah
   200 0000199C 0F85E9FDFFFF        <1>     jne badParamError
   201                              <1> .tdOk:
   202 000019A2 8A0583E6FFFF        <1>     mov al, byte byte [pathSep]
   203 000019A8 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   204 000019AC 0F84D9FDFFFF        <1>     je badParamError
   205 000019B2 4881EF02000000      <1>     sub rdi, 2
   206 000019B9 31C9                <1>     xor ecx, ecx
   207 000019BB FFC9                <1>     dec ecx
   208 000019BD FD                  <1>     std
   209 000019BE F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   210 000019C0 FC                  <1>     cld
   211 000019C1 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   212 000019C8 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   213 000019CA 0F847BFFFFFF        <1>     jz .copyPathLoop
   214 000019D0 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   215 000019D3 E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   216                              <1> .exitPathCopy:
   217                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   218 000019D8 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   219 000019DF 8A0546E6FFFF        <1>     mov al, byte [pathSep]
   220 000019E5 B43A                <1>     mov ah, ":"
   221 000019E7 86C4                <1>     xchg al, ah
   222 000019E9 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   223 000019ED 7409                <1>     je .skipOverwrite
   224 000019EF 88E0                <1>     mov al, ah
   225 000019F1 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   226 000019F3 7503                <1>     jne .skipOverwrite
   227 000019F5 C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   228                              <1> .skipOverwrite:
   229 000019F8 488D35C2EAFFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   230 000019FF 4889F7              <1>     mov rdi, rsi
   231 00001A02 B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   232 00001A07 CD2F                <1>     int 2fh
   233 00001A09 E8C4190000          <1>     call scanForWildcards
   234 00001A0E 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   235 00001A10 4889F2              <1>     mov rdx, rsi
   236 00001A13 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   237 00001A17 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   238                              <1> .notNull:
   239 00001A19 E87B1A0000          <1>     call setDTA ;Set the DTA
   240 00001A1E B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   241 00001A23 B8004E0000          <1>     mov eax, 4E00h ;Find first
   242 00001A28 CD21                <1>     int 21h
   243 00001A2A 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   244                              <1> ;Now we have searched for the file, is a directory?
   245 00001A2C F605A3E6FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   246 00001A33 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   247                              <1>     ;Here we are searching IN a directory. Default search pattern!
   248 00001A35 31C0                <1>     xor eax, eax
   249 00001A37 31C9                <1>     xor ecx, ecx
   250 00001A39 FFC9                <1>     dec ecx
   251 00001A3B F2AE                <1>     repne scasb
   252 00001A3D 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   253 00001A40 EB40                <1>     jmp short .wcDefaultSearch
   254                              <1> .wcSearchPattern:
   255                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   256                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   257 00001A42 31C0                <1>     xor eax, eax
   258 00001A44 31C9                <1>     xor ecx, ecx
   259 00001A46 FFC9                <1>     dec ecx
   260 00001A48 F2AE                <1>     repne scasb ;Scan forwards
   261                              <1>     ;Here rdi points past the null at the end
   262 00001A4A 8A05DBE5FFFF        <1>     mov al, byte [pathSep]
   263 00001A50 31C9                <1>     xor ecx, ecx
   264 00001A52 FFC9                <1>     dec ecx
   265 00001A54 FD                  <1>     std ;Search backwards
   266 00001A55 F2AE                <1>     repne scasb
   267 00001A57 FC                  <1>     cld ;Search forwards again
   268 00001A58 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   269 00001A5B 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   270 00001A5F 7503                <1>     jne .wcsp1
   271 00001A61 48FFC7              <1>     inc rdi ;Go one char forwards
   272                              <1> .wcsp1:
   273                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   274 00001A64 57                  <1>     push rdi
   275 00001A65 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   276 00001A67 7503                <1>     jne .wcsp2
   277 00001A69 48FFC7              <1>     inc rdi
   278                              <1> .wcsp2:
   279 00001A6C 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   280 00001A6F 488D3DCDEAFFFF      <1>     lea rdi, dirSrchFCB
   281 00001A76 B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   282 00001A7B CD21                <1>     int 21h
   283 00001A7D 5F                  <1>     pop rdi
   284 00001A7E 31C0                <1>     xor eax, eax
   285 00001A80 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   286                              <1> .wcDefaultSearch:
   287 00001A82 0FB60537EAFFFF      <1>     movzx eax, byte [dirDrv] 
   288 00001A89 E8030F0000          <1>     call volume.dirEP
   289 00001A8E 488D1592F0FFFF      <1>     lea rdx, dirMain    ;Print message intro
   290 00001A95 B409                <1>     mov ah, 09h
   291 00001A97 CD21                <1>     int 21h
   292 00001A99 C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   293 00001A9C 488D151EEAFFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   294 00001AA3 B409                <1>     mov ah, 09h
   295 00001AA5 CD21                <1>     int 21h
   296 00001AA7 C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   297 00001AAA 488D1567EDFFFF      <1>     lea rdx, crlf2
   298 00001AB1 B409                <1>     mov ah, 09h
   299 00001AB3 CD21                <1>     int 21h
   300                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   301                              <1> ;rdi points to the terminating null
   302 00001AB5 8A0570E5FFFF        <1>     mov al, byte [pathSep]
   303 00001ABB 3847FF              <1>     cmp byte [rdi - 1], al
   304 00001ABE 7403                <1>     je .root
   305 00001AC0 48FFC7              <1>     inc rdi
   306                              <1> .root:
   307 00001AC3 48FFCF              <1>     dec rdi ;Point back to the pathsep
   308 00001AC6 AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   309 00001AC7 488D3576EAFFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   310 00001ACE E841180000          <1>     call FCBToAsciiz    ;Terminates for free
   311 00001AD3 E801000000          <1>     call .searchForFile
   312                              <1>     return
    13                              <2> %%_ret:
    14 00001AD8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   313                              <1> 
   314                              <1> .searchForFile:
   315 00001AD9 E8BB190000          <1>     call setDTA
   316 00001ADE B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   317 00001AE3 488D15D7E9FFFF      <1>     lea rdx, dirSrchDir
   318 00001AEA B8004E0000          <1>     mov eax, 4E00h ;Find first
   319 00001AEF CD21                <1>     int 21h
   320 00001AF1 720B                <1>     jc .dirNoMoreFiles
   321                              <1> .findNext:
   322 00001AF3 E878000000          <1>     call .dirPrintFileData  ;Print the file information
   323 00001AF8 B44F                <1>     mov ah, 4Fh
   324 00001AFA CD21                <1>     int 21h
   325 00001AFC 73F5                <1>     jnc .findNext 
   326                              <1> .dirNoMoreFiles:
   327 00001AFE F605B8E9FFFF01      <1>     test byte [dirFlags], dirWideType
   328 00001B05 740B                <1>     jz .dirNoEndNewLine
   329 00001B07 488D1507EDFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   330 00001B0E B409                <1>     mov ah, 09h
   331 00001B10 CD21                <1>     int 21h
   332                              <1> .dirNoEndNewLine:
   333                              <1>     ;Now we print the number of files and the number of bytes on the disk
   334 00001B12 488D15DFF2FFFF      <1>     lea rdx, fourSpc
   335 00001B19 B409                <1>     mov ah, 09h
   336 00001B1B CD21                <1>     int 21h
   337 00001B1D B409                <1>     mov ah, 09h ;Print four Spaces twice
   338 00001B1F CD21                <1>     int 21h
   339 00001B21 0FB60597E9FFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   340 00001B28 E8B9180000          <1>     call printDecimalWord
   341 00001B2D 488D152CEEFFFF      <1>     lea rdx, dirOk
   342 00001B34 B409                <1>     mov ah, 09h
   343 00001B36 CD21                <1>     int 21h
   344 00001B38 488D15BEF2FFFF      <1>     lea rdx, threeSpc
   345 00001B3F B409                <1>     mov ah, 09h
   346 00001B41 CD21                <1>     int 21h
   347 00001B43 B800360000          <1>     mov eax, 3600h ;Get disk info
   348 00001B48 8A1572E9FFFF        <1>     mov dl, byte [dirDrv]
   349 00001B4E FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   350 00001B50 CD21                <1>     int 21h ;Get disk free space info
   351 00001B52 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   352 00001B55 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   353 00001B58 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   354 00001B5A F7E1                <1>     mul ecx ;Get bytes per cluster
   355 00001B5C 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   356                              <1>     ;rax now has the number of free bytes on the disk
   357 00001B5F E882180000          <1>     call printDecimalWord
   358 00001B64 488D15FFEDFFFF      <1>     lea rdx, bytesOk
   359 00001B6B B409                <1>     mov ah, 09h
   360 00001B6D CD21                <1>     int 21h
   361                              <1>     return
    13                              <2> %%_ret:
    14 00001B6F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   362                              <1> 
   363                              <1> .dirPrintFileData:
   364                              <1> ;Use cmdFcb to build the file name with space
   365                              <1> ;Start by print the name (same for both cases)
   366                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   367 00001B70 F6055FE5FFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   368                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001B77 75(6F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   369 00001B79 488D355FE5FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   370 00001B80 488D3D2AE5FFFF      <1>     lea rdi, cmdFcb
   371 00001B87 E81A170000          <1>     call asciiFilenameToFCB
   372 00001B8C 488D151EE5FFFF      <1>     lea rdx, cmdFcb
   373 00001B93 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   374 00001B98 BB01000000          <1>     mov ebx, 1  ;STDOUT
   375 00001B9D B440                <1>     mov ah, 40h ;Write handle
   376 00001B9F CD21                <1>     int 21h
   377 00001BA1 52                  <1>     push rdx
   378 00001BA2 B220                <1>     mov dl, " "
   379 00001BA4 B402                <1>     mov ah, 02h ;Print char
   380 00001BA6 CD21                <1>     int 21h
   381 00001BA8 5A                  <1>     pop rdx
   382 00001BA9 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   383 00001BB0 B903000000          <1>     mov ecx, 3  ;Print three chars
   384 00001BB5 BB01000000          <1>     mov ebx, 1  ;STDOUT
   385 00001BBA B440                <1>     mov ah, 40h ;Write handle
   386 00001BBC CD21                <1>     int 21h
   387 00001BBE F605F8E8FFFF01      <1>     test byte [dirFlags], dirWideType
   388 00001BC5 0F85A8000000        <1>     jnz .widePrint
   389                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   390                              <1>     ;Now check if a DIR
   391 00001BCB F60504E5FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   392 00001BD2 7418                <1>     jz .dirPrintNotDir
   393 00001BD4 488D159DEDFFFF      <1>     lea rdx, dirLbl
   394 00001BDB B409                <1>     mov ah, 09h
   395 00001BDD CD21                <1>     int 21h
   396 00001BDF 488D1517F2FFFF      <1>     lea rdx, threeSpc
   397 00001BE6 B409                <1>     mov ah, 09h
   398 00001BE8 CD21                <1>     int 21h
   399 00001BEA EB4F                <1>     jmp short .dirPrintFileDT
   400                              <1> .dirPrintNotDir:
   401                              <1> ;Here we print the file size
   402 00001BEC B220                <1>     mov dl, " "
   403 00001BEE B402                <1>     mov ah, 02h
   404 00001BF0 CD21                <1>     int 21h
   405 00001BF2 8B05E3E4FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   406 00001BF8 E85A180000          <1>     call getDecimalWord
   407 00001BFD 4889CB              <1>     mov rbx, rcx
   408 00001C00 51                  <1>     push rcx
   409 00001C01 480FCB              <1>     bswap rbx
   410 00001C04 B908000000          <1>     mov ecx, 8
   411                              <1> .dirPrintFileSizePrep:
   412 00001C09 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   413 00001C0B 7514                <1>     jne .dirPrintFileSize
   414 00001C0D B402                <1>     mov ah, 02h
   415 00001C0F B220                <1>     mov dl, " "
   416 00001C11 CD21                <1>     int 21h
   417 00001C13 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   418 00001C17 FFC9                <1>     dec ecx
   419 00001C19 81F901000000        <1>     cmp ecx, 1
   420 00001C1F 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   421                              <1> .dirPrintFileSize:
   422 00001C21 5B                  <1>     pop rbx
   423                              <1> .dirPrintFileSizeLoop:
   424 00001C22 88DA                <1>     mov dl, bl
   425 00001C24 B402                <1>     mov ah, 02h
   426 00001C26 CD21                <1>     int 21h
   427 00001C28 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   428 00001C2C FFC9                <1>     dec ecx
   429 00001C2E 75F2                <1>     jnz .dirPrintFileSizeLoop
   430 00001C30 488D15CAF1FFFF      <1>     lea rdx, twoSpc
   431 00001C37 B409                <1>     mov ah, 09h
   432 00001C39 CD21                <1>     int 21h
   433                              <1> .dirPrintFileDT:
   434 00001C3B B220                <1>     mov dl, " "
   435 00001C3D B402                <1>     mov ah, 02h
   436 00001C3F CD21                <1>     int 21h
   437 00001C41 0FB70591E4FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   438 00001C48 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   439 00001C4A E8DB120000          <1>     call printDate
   440 00001C4F 488D15ABF1FFFF      <1>     lea rdx, twoSpc
   441 00001C56 B409                <1>     mov ah, 09h
   442 00001C58 CD21                <1>     int 21h
   443 00001C5A 0FB70576E4FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   444 00001C61 E8E6130000          <1>     call printTime
   445 00001C66 488D15A8EBFFFF      <1>     lea rdx, crlf
   446 00001C6D B409                <1>     mov ah, 09h
   447 00001C6F CD21                <1>     int 21h
   448 00001C71 EB0B                <1>     jmp short .dirPrintNameExit
   449                              <1> .widePrint:
   450                              <1> ;If /W, print name space ext space space space space
   451 00001C73 488D157EF1FFFF      <1>     lea rdx, fourSpc
   452 00001C7A B409                <1>     mov ah, 09h ;Print string
   453 00001C7C CD21                <1>     int 21h
   454                              <1> .dirPrintNameExit:
   455 00001C7E FE053BE8FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   456 00001C84 FE0534E8FFFF        <1>     inc byte [dirLineCtr]
   457 00001C8A 803D2DE8FFFF17      <1>     cmp byte [dirLineCtr], 23
   458                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001C91 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001C93 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   459 00001C94 488D1504EDFFFF      <1>     lea rdx, pauseMes
   460 00001C9B B409                <1>     mov ah, 09h
   461 00001C9D CD21                <1>     int 21h
   462 00001C9F B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   463 00001CA1 CD21                <1>     int 21h
   464 00001CA3 C60514E8FFFF00      <1>     mov byte [dirLineCtr], 0
   465 00001CAA 488D1564EBFFFF      <1>     lea rdx, crlf   ;Force new line
   466 00001CB1 B409                <1>     mov ah, 09h
   467 00001CB3 CD21                <1>     int 21h
   468                              <1>     return
    13                              <2> %%_ret:
    14 00001CB5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   469                              <1> 
   470                              <1> chdir:
   471 00001CB6 F605EEE3FFFFFF      <1>     test byte [arg1Flg], -1
   472 00001CBD 754D                <1>     jnz .changeDir
   473                              <1>     ;Print CWD
   474                              <1> .printCWD:
   475 00001CBF E86A140000          <1>     call putCWDInPrompt ;Exactly the same procedure
   476 00001CC4 E852120000          <1>     call printCRLF
   477                              <1>     return
    13                              <2> %%_ret:
    14 00001CC9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   478                              <1> .printDiskCWD:
   479                              <1> ;Print CWD for a specified drive
   480 00001CCA 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   481 00001CCE 88D0                <1>     mov al, dl
   482 00001CD0 0440                <1>     add al, "@" ;Get the UC letter
   483 00001CD2 B43A                <1>     mov ah, ":"
   484 00001CD4 488D3D60E7FFFF      <1>     lea rdi, searchSpec
   485 00001CDB 66AB                <1>     stosw   ;Store X:, rdi+=2
   486 00001CDD 8A0548E3FFFF        <1>     mov al, byte [pathSep]
   487 00001CE3 AA                  <1>     stosb   ;Store pathSep, inc rdi
   488 00001CE4 B447                <1>     mov ah, 47h ;Get Current Working Directory
   489 00001CE6 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   490 00001CE9 CD21                <1>     int 21h
   491 00001CEB E822150000          <1>     call strlen
   492 00001CF0 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   493 00001CF6 B440                <1>     mov ah, 40h ;Write to handle
   494 00001CF8 BB01000000          <1>     mov ebx, 1  ;STDOUT
   495 00001CFD 488D1537E7FFFF      <1>     lea rdx, searchSpec
   496 00001D04 CD21                <1>     int 21h
   497 00001D06 E810120000          <1>     call printCRLF
   498                              <1>     return
    13                              <2> %%_ret:
    14 00001D0B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   499                              <1> .changeDir:
   500 00001D0C 8A059BE3FFFF        <1>     mov al, byte [arg1FCBret]
   501 00001D12 3CFF                <1>     cmp al, -1 
   502 00001D14 0F847AFAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   503 00001D1A E88E160000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   504 00001D1F 488D1515E7FFFF      <1>     lea rdx, searchSpec
   505 00001D26 B43B                <1>     mov ah, 3Bh ;CHDIR
   506 00001D28 CD21                <1>     int 21h
   507 00001D2A 0F8291FAFFFF        <1>     jc badDirError
   508                              <1>     return
    13                              <2> %%_ret:
    14 00001D30 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   509                              <1> 
   510                              <1> mkdir:
   511 00001D31 F60573E3FFFFFF      <1>     test byte [arg1Flg], -1
   512 00001D38 0F845FFAFFFF        <1>     jz badArgError
   513 00001D3E F60569E3FFFFFF      <1>     test byte [arg2Flg], -1
   514 00001D45 0F8552FAFFFF        <1>     jnz badArgError
   515                              <1>     ;We have exactly one argument
   516 00001D4B 8A055CE3FFFF        <1>     mov al, byte [arg1FCBret]
   517 00001D51 3CFF                <1>     cmp al, -1 
   518 00001D53 0F843BFAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   519 00001D59 E84F160000          <1>     call buildCommandPath
   520 00001D5E 488D15D6E6FFFF      <1>     lea rdx, searchSpec
   521 00001D65 B800390000          <1>     mov eax, 3900h  ;MKDIR
   522 00001D6A CD21                <1>     int 21h
   523                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001D6C 73(30)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   524                              <1> .badMake:   ;Else, bad make
   525 00001D6E 488D155EEDFFFF      <1>     lea rdx, badMD
   526 00001D75 B800090000          <1>     mov eax, 0900h
   527 00001D7A CD21                <1>     int 21h
   528                              <1>     return
    13                              <2> %%_ret:
    14 00001D7C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   529                              <1> 
   530                              <1> rmdir:
   531 00001D7D F60527E3FFFFFF      <1>     test byte [arg1Flg], -1
   532 00001D84 0F8413FAFFFF        <1>     jz badArgError
   533 00001D8A F6051DE3FFFFFF      <1>     test byte [arg2Flg], -1
   534 00001D91 0F8506FAFFFF        <1>     jnz badArgError
   535                              <1>     ;We have exactly one argument
   536 00001D97 8A0510E3FFFF        <1>     mov al, byte [arg1FCBret]
   537 00001D9D 3CFF                <1>     cmp al, -1 
   538 00001D9F 0F84EFF9FFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   539 00001DA5 E803160000          <1>     call buildCommandPath
   540 00001DAA 488D158AE6FFFF      <1>     lea rdx, searchSpec
   541 00001DB1 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   542 00001DB6 CD21                <1>     int 21h
   543                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001DB8 73(7C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   544                              <1> .badRemove:   ;Else, bad make
   545 00001DBA 488D152FEDFFFF      <1>     lea rdx, badRD
   546 00001DC1 B800090000          <1>     mov eax, 0900h
   547 00001DC6 CD21                <1>     int 21h
   548                              <1>     return
    13                              <2> %%_ret:
    14 00001DC8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   549                              <1> 
   550                              <1> copy:
   551 00001DC9 F605DBE2FFFFFF      <1>     test byte [arg1Flg], -1
   552 00001DD0 0F84C7F9FFFF        <1>     jz badArgError
   553 00001DD6 F605D1E2FFFFFF      <1>     test byte [arg2Flg], -1
   554 00001DDD 0F84BAF9FFFF        <1>     jz badArgError
   555 00001DE3 0FB605C2E2FFFF      <1>     movzx eax, byte [arg1Off]
   556 00001DEA 4C8B051EE2FFFF      <1>     mov r8, [pspPtr]
   557 00001DF1 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   558 00001DF8 4889F3              <1>     mov rbx, rsi    ;Save the ptr to the start of the string in rbx
   559 00001DFB 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   560 00001DFE 488D3D7EE7FFFF      <1>     lea rdi, srcSpec
   561 00001E05 E860150000          <1>     call cpDelimPathToBufz    
   562 00001E0A 0FB6059EE2FFFF      <1>     movzx eax, byte [arg2Off]
   563 00001E11 4889DE              <1>     mov rsi, rbx    ;Get back the start of the ptr
   564 00001E14 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   565 00001E17 488D3DE7E7FFFF      <1>     lea rdi, destSpec
   566 00001E1E E847150000          <1>     call cpDelimPathToBufz   
   567                              <1> ;Before we open, we check if the two filenames are equal
   568                              <1> ; If so, crap out.
   569 00001E23 488D3559E7FFFF      <1>     lea rsi, srcSpec
   570 00001E2A 488D3DD4E7FFFF      <1>     lea rdi, destSpec
   571 00001E31 B81E120000          <1>     mov eax, 121Eh
   572 00001E36 CD2F                <1>     int 2Fh
   573 00001E38 0F84D3000000        <1>     jz .sameFilename
   574                              <1>     ;Open source with read permission
   575                              <1>     ;Open destination with write permission
   576 00001E3E 488D153EE7FFFF      <1>     lea rdx, srcSpec
   577 00001E45 B8003D0000          <1>     mov eax, 3D00h  ;Read open
   578 00001E4A CD21                <1>     int 21h
   579 00001E4C 0F8239F9FFFF        <1>     jc badParamError
   580 00001E52 66890549E8FFFF      <1>     mov word [sourceHdl], ax
   581                              <1> 
   582 00001E59 0FB7D8              <1>     movzx ebx, ax   ;For bx
   583 00001E5C B800440000          <1>     mov eax, 4400h  ;Get device info in dx
   584 00001E61 CD21                <1>     int 21h
   585 00001E63 6689153CE8FFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
   586                              <1> 
   587 00001E6A 488D1594E7FFFF      <1>     lea rdx, destSpec
   588 00001E71 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   589 00001E76 31C9                <1>     xor ecx, ecx    ;No file attributes
   590 00001E78 CD21                <1>     int 21h
   591 00001E7A 0F82B8000000        <1>     jc .badExit
   592 00001E80 6689051DE8FFFF      <1>     mov word [destHdl], ax
   593 00001E87 31F6                <1>     xor esi, esi
   594 00001E89 488D1518E8FFFF      <1>     lea rdx, copyBuffer
   595                              <1> .copyLoop:
   596 00001E90 B980000000          <1>     mov ecx, 128
   597 00001E95 0FB71D06E8FFFF      <1>     movzx ebx, word [sourceHdl]
   598 00001E9C B43F                <1>     mov ah, 3Fh ;Read
   599 00001E9E CD21                <1>     int 21h
   600 00001EA0 0F8292000000        <1>     jc .badExit
   601 00001EA6 85C0                <1>     test eax, eax
   602 00001EA8 743A                <1>     jz .okExit
   603 00001EAA 01C6                <1>     add esi, eax
   604 00001EAC 89C1                <1>     mov ecx, eax
   605 00001EAE 0FB71DEFE7FFFF      <1>     movzx ebx, word [destHdl]
   606 00001EB5 B440                <1>     mov ah, 40h ;Write
   607 00001EB7 CD21                <1>     int 21h
   608 00001EB9 727D                <1>     jc .badExit
   609 00001EBB 3D80000000          <1>     cmp eax, 128    ;Did we read 128 chars?
   610 00001EC0 74CE                <1>     je .copyLoop
   611                              <1>     ;If not char dev, exit
   612 00001EC2 66F705DBE7FFFF8000  <1>     test word [srcHdlInfo], 80h ;Char dev bit set?
   613 00001ECB 7417                <1>     jz .okExit
   614                              <1>     ;Is handle in cooked or binary mode?
   615 00001ECD 66F705D0E7FFFF2000  <1>     test word [srcHdlInfo], 20h
   616 00001ED6 750C                <1>     jnz .okExit
   617                              <1>     ;Here the char dev must be in cooked mode. Check if the last char was ^Z
   618 00001ED8 09C0                <1>     or eax, eax ;Clear upper bits in eax
   619 00001EDA 488D7C02FF          <1>     lea rdi, qword [rdx + rax - 1]  ;Point to the last char in the buffer
   620 00001EDF 803F1A              <1>     cmp byte [rdi], EOF ;Was this EOF?
   621 00001EE2 75AC                <1>     jne .copyLoop   ;Jump if not
   622                              <1> .okExit:
   623 00001EE4 E832000000          <1>     call .leaveCopyClose
   624 00001EE9 488D1525E9FFFF      <1>     lea rdx, crlf
   625 00001EF0 B409                <1>     mov ah, 09h
   626 00001EF2 CD21                <1>     int 21h
   627 00001EF4 488D15FDEEFFFF      <1>     lea rdx, fourSpc
   628 00001EFB B409                <1>     mov ah, 09h
   629 00001EFD CD21                <1>     int 21h
   630 00001EFF B402                <1>     mov ah, 02h
   631 00001F01 B231                <1>     mov dl, "1" ;1 File(s) copied
   632 00001F03 CD21                <1>     int 21h
   633 00001F05 488D1542EAFFFF      <1>     lea rdx, copyOk
   634 00001F0C B409                <1>     mov ah, 09h
   635 00001F0E CD21                <1>     int 21h
   636                              <1>     return
    13                              <2> %%_ret:
    14 00001F10 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   637                              <1> .sameFilename:
   638 00001F11 E805000000          <1>     call .leaveCopyClose ;Close the handles
   639 00001F16 E967F8FFFF          <1>     jmp noSelfCopyError
   640                              <1> .leaveCopyClose:
   641 00001F1B 668B1D80E7FFFF      <1>     mov bx, word [sourceHdl]
   642 00001F22 B8003E0000          <1>     mov eax, 3E00h
   643 00001F27 CD21                <1>     int 21h
   644 00001F29 668B1D74E7FFFF      <1>     mov bx, word [destHdl]
   645 00001F30 B8003E0000          <1>     mov eax, 3E00h
   646 00001F35 CD21                <1>     int 21h
   647                              <1>     return
    13                              <2> %%_ret:
    14 00001F37 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   648                              <1> .badExit:
   649                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   650 00001F38 668B1D63E7FFFF      <1>     mov bx, word [sourceHdl]
   651 00001F3F 6681FBFFFF          <1>     cmp bx, -1
   652 00001F44 7407                <1>     je .skipSource
   653 00001F46 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   654 00001F4B CD21                <1>     int 21h
   655                              <1> .skipSource:
   656 00001F4D 668B1D50E7FFFF      <1>     mov bx, word [destHdl]
   657 00001F54 6681FBFFFF          <1>     cmp bx, -1
   658 00001F59 0F842CF8FFFF        <1>     je badParamError
   659 00001F5F B8003E0000          <1>     mov eax, 3E00h
   660 00001F64 CD21                <1>     int 21h
   661 00001F66 E920F8FFFF          <1>     jmp badParamError
   662                              <1> 
   663                              <1> erase:
   664 00001F6B F60539E1FFFFFF      <1>     test byte [arg1Flg], -1
   665 00001F72 0F8425F8FFFF        <1>     jz badArgError
   666 00001F78 E81C150000          <1>     call setDTA     ;Start by resetting the DTA
   667 00001F7D E82B140000          <1>     call buildCommandPath   ;Get the relative path to the file
   668                              <1> .dirLp:
   669 00001F82 488D3DB2E4FFFF      <1>     lea rdi, searchSpec
   670 00001F89 E862130000          <1>     call findLastPathComponant
   671 00001F8E 4889FE              <1>     mov rsi, rdi    ;Save this as the source
   672 00001F91 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
   673 00001F95 B03F                <1>     mov al, "?"
   674                              <1>     ;Store question marks in the name field
   675 00001F97 57                  <1>     push rdi
   676 00001F98 48FFC7              <1>     inc rdi ;Goto the first char
   677 00001F9B B90B000000          <1>     mov ecx, 11
   678 00001FA0 F3AA                <1>     rep stosb
   679 00001FA2 5F                  <1>     pop rdi
   680 00001FA3 4889F2              <1>     mov rdx, rsi    ;Save the ptr
   681 00001FA6 B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
   682 00001FAB CD21                <1>     int 21h
   683 00001FAD 3C01                <1>     cmp al, 1
   684 00001FAF 0F859C000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
   685                              <1>     ;Else, we now copy back the search pattern over the last componant!
   686                              <1>     ;No dirs to handle in here
   687 00001FB5 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
   688 00001FB9 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
   689 00001FBC E853130000          <1>     call FCBToAsciiz    ;Null terminates for free
   690                              <1>     ;Count the number of ?'s, if 11, we print the message
   691 00001FC1 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
   692 00001FC5 31C9                <1>     xor ecx, ecx
   693                              <1> .wcScan:
   694 00001FC7 AC                  <1>     lodsb
   695 00001FC8 3C3F                <1>     cmp al, "?"
   696 00001FCA 752F                <1>     jne .endCount
   697 00001FCC FFC1                <1>     inc ecx
   698 00001FCE 81F90B000000        <1>     cmp ecx, 11
   699 00001FD4 75F1                <1>     jne .wcScan
   700                              <1> .ynmsg:
   701 00001FD6 488D1596EAFFFF      <1>     lea rdx, ynMes
   702 00001FDD E8400F0000          <1>     call printString
   703 00001FE2 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   704 00001FE4 CD21                <1>     int 21h ;Get char in al
   705 00001FE6 E831120000          <1>     call ucChar ;Uppercase the char
   706 00001FEB 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
   707 00001FED 7407                <1>     je .endCount1
   708 00001FEF 3C4E                <1>     cmp al, "N"
   709                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001FF1 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001FF3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   710 00001FF4 EBE0                <1>     jmp short .ynmsg    ;Else, tell me what you want!!!
   711                              <1> .endCount1:
   712 00001FF6 E8200F0000          <1>     call printCRLF
   713                              <1> .endCount:
   714                              <1>     ;Now we copy our search template pathstring to delPath
   715 00001FFB 488D3D81E5FFFF      <1>     lea rdi, delPath
   716 00002002 488D3532E4FFFF      <1>     lea rsi, searchSpec ;Source the chars from here
   717 00002009 E8FA110000          <1>     call strcpy2         ;Copy the string over to delPath
   718                              <1> .findFile:
   719                              <1>     ;Now we find first/find next our way through the files
   720 0000200E 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
   721 00002011 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
   722 00002013 B8004E0000          <1>     mov eax, 4E00h  ;Find first
   723 00002018 CD21                <1>     int 21h
   724 0000201A 0F8298F7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   725                              <1>     ;Now the file was found, we copy the name over, delete and keep going
   726 00002020 E8CB120000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
   727 00002025 488D35B3E0FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   728                              <1> .delNextFile:
   729                              <1> ;rsi and rdi dont move here
   730 0000202C E8D7110000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
   731 00002031 488D154BE5FFFF      <1>     lea rdx, delPath
   732 00002038 B800410000          <1>     mov eax, 4100h  ;Delete File 
   733 0000203D CD21                <1>     int 21h         ;If this fails to delete it, fail silently
   734 0000203F 488D15F5E3FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
   735 00002046 B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
   736 0000204B CD21                <1>     int 21h
   737 0000204D 73DD                <1>     jnc .delNextFile    
   738 0000204F F8                  <1>     clc ;Clear carry to indicate success
   739                              <1>     return
    13                              <2> %%_ret:
    14 00002050 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   740                              <1> .noWildcard:
   741                              <1>     ;Here we just check that the file was not a directory. If it was, we add
   742                              <1>     ; a \*.*<NUL> over the null terminator
   743 00002051 488D15E3E3FFFF      <1>     lea rdx, searchSpec
   744 00002058 B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
   745 0000205D B8004E0000          <1>     mov eax, 4E00h  ;Find first
   746 00002062 CD21                <1>     int 21h
   747 00002064 0F824EF7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   748 0000206A F60565E0FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   749 00002071 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
   750                              <1>     ;Else, we are dealing with a dir
   751 00002073 4889D7              <1>     mov rdi, rdx
   752 00002076 31C9                <1>     xor ecx, ecx
   753 00002078 FFC9                <1>     dec ecx
   754 0000207A F2AE                <1>     repne scasb ;Go to the end of the line!
   755 0000207C 48FFCF              <1>     dec rdi
   756 0000207F 0FB605A5DFFFFF      <1>     movzx eax, byte [pathSep]
   757 00002086 AA                  <1>     stosb
   758 00002087 B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
   759 0000208C AB                  <1>     stosd
   760 0000208D E9F0FEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
   761                              <1> .delMain:   ;Call with rdx -> buffer!
   762 00002092 B800410000          <1>     mov eax, 4100h  ;Delete File 
   763 00002097 CD21                <1>     int 21h
   764                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002099 73(50)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   765 0000209B 3C05                <1>     cmp al, errAccDen
   766 0000209D 0F84D6F6FFFF        <1>     je badAccError ;If the file is RO, fail!
   767 000020A3 E9FEF6FFFF          <1>     jmp badFileError
   768                              <1>     return
    13                              <2> %%_ret:
    14 000020A8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   769                              <1> date:
   770 000020A9 488D1546E9FFFF      <1>     lea rdx, curDate
   771 000020B0 B409                <1>     mov ah, 09h
   772 000020B2 CD21                <1>     int 21h
   773 000020B4 B42A                <1>     mov ah, 2Ah ;DOS get date
   774 000020B6 CD21                <1>     int 21h
   775                              <1> 	;AL = day of the week (0=Sunday)
   776                              <1> 	;CX = year (1980-2099)
   777                              <1> 	;DH = month (1-12)
   778                              <1> 	;DL = day (1-31)
   779 000020B8 66890DC0E4FFFF      <1>     mov word [td1], cx
   780 000020BF 8815BCE4FFFF        <1>     mov byte [td3], dl
   781 000020C5 8835B7E4FFFF        <1>     mov byte [td4], dh
   782 000020CB 0FB6C0              <1>     movzx eax, al
   783 000020CE 89C3                <1>     mov ebx, eax
   784 000020D0 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   785 000020D2 01D8                <1>     add eax, ebx ;Make it 3 times 
   786 000020D4 488D15F7E8FFFF      <1>     lea rdx, dayName
   787 000020DB 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   788 000020DF B903000000          <1>     mov ecx, 3  ;Print three chars
   789 000020E4 BB01000000          <1>     mov ebx, 1  ;STDOUT
   790 000020E9 B440                <1>     mov ah, 40h ;Write to handle
   791 000020EB CD21                <1>     int 21h
   792 000020ED B220                <1>     mov dl, " "
   793 000020EF B402                <1>     mov ah, 02h
   794 000020F1 CD21                <1>     int 21h
   795                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   796                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   797                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   798 000020F3 0FB70585E4FFFF      <1>     movzx eax, word [td1]   ;Get this word
   799 000020FA C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   800 000020FD 0FB61D7EE4FFFF      <1>     movzx ebx, byte [td4]
   801 00002104 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   802 00002107 09D8                <1>     or eax, ebx ;Add this date to eax
   803 00002109 0FB61D71E4FFFF      <1>     movzx ebx, byte [td3]
   804 00002110 09D8                <1>     or eax, ebx
   805 00002112 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   806 00002117 E80E0E0000          <1>     call printDate
   807                              <1> 
   808 0000211C 488D15E4E8FFFF      <1>     lea rdx, newDate
   809 00002123 B409                <1>     mov ah, 09h
   810 00002125 CD21                <1>     int 21h
   811 00002127 488D15F8E8FFFF      <1>     lea rdx, ukDate
   812 0000212E 488D05E4E8FFFF      <1>     lea rax, usDate
   813 00002135 488D1DF7E8FFFF      <1>     lea rbx, jpDate
   814 0000213C 803DF3DEFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   815 00002143 480F47D3            <1>     cmova rdx, rbx
   816 00002147 480F42D0            <1>     cmovb rdx, rax
   817 0000214B B409                <1>     mov ah, 09h
   818 0000214D CD21                <1>     int 21h
   819                              <1> 
   820 0000214F 488D15B6DFFFFF      <1>     lea rdx, inBuffer
   821 00002156 C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
   822 00002159 B40A                <1>     mov ah, 0Ah
   823 0000215B CD21                <1>     int 21h
   824 0000215D 52                  <1>     push rdx
   825 0000215E 488D15B0E6FFFF      <1>     lea rdx, crlf
   826 00002165 B409                <1>     mov ah, 09h
   827 00002167 CD21                <1>     int 21h
   828 00002169 5A                  <1>     pop rdx
   829 0000216A 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   830                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000216E 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002170 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   831                              <1>     return
    13                              <2> %%_ret:
    14 00002171 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   832                              <1> 
   833                              <1> time:
   834 00002172 488D15D6E8FFFF      <1>     lea rdx, curTime
   835 00002179 B409                <1>     mov ah, 09h
   836 0000217B CD21                <1>     int 21h
   837 0000217D B42C                <1>     mov ah, 2Ch ;DOS get time
   838 0000217F CD21                <1>     int 21h
   839                              <1>     ;CH = hour (0-23)
   840                              <1> 	;CL = minutes (0-59)
   841                              <1> 	;DH = seconds (0-59)
   842                              <1> 	;DL = hundredths (0-99)
   843 00002181 880DF8E3FFFF        <1>     mov byte [td1], cl
   844 00002187 882DF3E3FFFF        <1>     mov byte [td2], ch
   845 0000218D 8815EEE3FFFF        <1>     mov byte [td3], dl
   846 00002193 8835E9E3FFFF        <1>     mov byte [td4], dh
   847 00002199 0FB6C5              <1>     movzx eax, ch
   848 0000219C E81D0F0000          <1>     call printTime.printHours
   849                              <1> 
   850 000021A1 8A159CDEFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   851 000021A7 B402                <1>     mov ah, 02h
   852 000021A9 CD21                <1>     int 21h
   853                              <1> 
   854 000021AB 0FB605CDE3FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   855 000021B2 E8F70E0000          <1>     call printTime.printMinutesAlt
   856                              <1> 
   857 000021B7 8A1586DEFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   858 000021BD B402                <1>     mov ah, 02h
   859 000021BF CD21                <1>     int 21h
   860                              <1> 
   861 000021C1 0FB605BAE3FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   862 000021C8 E8E10E0000          <1>     call printTime.printMinutesAlt
   863                              <1> 
   864 000021CD B22E                <1>     mov dl, "."
   865 000021CF B402                <1>     mov ah, 02h
   866 000021D1 CD21                <1>     int 21h
   867                              <1> 
   868 000021D3 0FB605A7E3FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   869 000021DA E8CF0E0000          <1>     call printTime.printMinutesAlt
   870                              <1> 
   871 000021DF 488D157AE8FFFF      <1>     lea rdx, newTime
   872 000021E6 B409                <1>     mov ah, 09h
   873 000021E8 CD21                <1>     int 21h
   874                              <1> 
   875 000021EA 488D151BDFFFFF      <1>     lea rdx, inBuffer
   876 000021F1 C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
   877 000021F4 B40A                <1>     mov ah, 0Ah
   878 000021F6 CD21                <1>     int 21h
   879 000021F8 52                  <1>     push rdx
   880 000021F9 488D1515E6FFFF      <1>     lea rdx, crlf
   881 00002200 B409                <1>     mov ah, 09h
   882 00002202 CD21                <1>     int 21h
   883 00002204 5A                  <1>     pop rdx
   884 00002205 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   885                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002209 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000220B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   886                              <1>     return
    13                              <2> %%_ret:
    14 0000220C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   887                              <1> ctty:
   888 0000220D F60597DEFFFFFF      <1>     test byte [arg1Flg], -1
   889 00002214 0F8483F5FFFF        <1>     jz badArgError
   890 0000221A F6058DDEFFFFFF      <1>     test byte [arg2Flg], -1
   891 00002221 0F8576F5FFFF        <1>     jnz badArgError
   892 00002227 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   893 0000222E 0FB60577DEFFFF      <1>     movzx eax, byte [arg1Off]
   894 00002235 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   895 00002238 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   896 0000223C 750F                <1>     jne .noDrive
   897 0000223E 0FB60568DEFFFF      <1>     movzx eax, byte [arg1FCBret]
   898 00002245 3CFF                <1>     cmp al, -1
   899 00002247 0F8447F5FFFF        <1>     je badDriveError
   900                              <1> .noDrive:
   901                              <1>     ;Now we open the provided file
   902 0000224D E873110000          <1>     call copyArgumentToSearchSpec
   903 00002252 488D15E2E1FFFF      <1>     lea rdx, searchSpec
   904 00002259 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   905 0000225E CD21                <1>     int 21h
   906 00002260 0F8240F5FFFF        <1>     jc badFileError
   907 00002266 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   908 00002269 B800440000          <1>     mov eax, 4400h  ;Get device word
   909 0000226E CD21                <1>     int 21h
   910 00002270 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   911 00002273 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   912                              <1>     ;Now we set this handle to be STDIO
   913 00002275 80CA03              <1>     or dl, 3    ;Set STDIO bits
   914 00002278 30F6                <1>     xor dh, dh
   915 0000227A B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   916 0000227F CD21                <1>     int 21h
   917                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   918 00002281 31C9                <1>     xor ecx, ecx    ;STDIN
   919 00002283 B446                <1>     mov ah, 46h
   920 00002285 CD21                <1>     int 21h
   921 00002287 FFC1                <1>     inc ecx         ;STDOUT
   922 00002289 B446                <1>     mov ah, 46h
   923 0000228B CD21                <1>     int 21h
   924 0000228D FFC1                <1>     inc ecx         ;STDERR
   925 0000228F B446                <1>     mov ah, 46h
   926 00002291 CD21                <1>     int 21h
   927 00002293 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   928 00002295 CD21                <1>     int 21h
   929                              <1>     return
    13                              <2> %%_ret:
    14 00002297 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   930                              <1> .badCharDev:
   931 00002298 488D15F1E8FFFF      <1>     lea rdx, badDev
   932 0000229F B409                <1>     mov ah, 09h
   933 000022A1 CD21                <1>     int 21h
   934 000022A3 B43E                <1>     mov ah, 3Eh ;Close opened handle
   935 000022A5 CD21                <1>     int 21h
   936                              <1>     return
    13                              <2> %%_ret:
    14 000022A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   937                              <1> 
   938                              <1> cls:  
   939 000022A8 B800440000          <1>     mov eax, 4400h  ;Get device info
   940 000022AD BB01000000          <1>     mov ebx, 1      ;for handle 1
   941 000022B2 CD21                <1>     int 21h         ;in dx
   942 000022B4 F7C280000000        <1>     test edx, devCharDev
   943 000022BA 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   944 000022BC F7C210000000        <1>     test edx, charDevFastOut
   945 000022C2 743E                <1>     jz .doAnsi
   946                              <1>     ;Test if Int 29h uses Int 30h
   947                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   948                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
   949 000022C4 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
   950 000022C9 CD21                <1>     int 21h
   951                              <1> .biosCheck:
   952 000022CB 66813BCD30          <1>     cmp word [rbx], 30CDh
   953 000022D0 740C                <1>     je .biosConfirmed
   954 000022D2 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   955 000022D7 7429                <1>     je .doAnsi
   956 000022D9 48FFC3              <1>     inc rbx
   957 000022DC EBED                <1>     jmp short .biosCheck
   958                              <1> .biosConfirmed:
   959                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   960 000022DE B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   961 000022E0 31DB                <1>     xor ebx, ebx
   962 000022E2 CD30                <1>     int 30h
   963 000022E4 B40F                <1>     mov ah, 0Fh ;Get screen mode
   964 000022E6 CD30                <1>     int 30h
   965 000022E8 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   966 000022EB FECA                <1>     dec dl
   967 000022ED B619                <1>     mov dh, 25  ;Number of rows is standard
   968 000022EF 31C0                <1>     xor eax, eax
   969 000022F1 89C1                <1>     mov ecx, eax
   970 000022F3 B707                <1>     mov bh, 7   ;Screen attributes
   971 000022F5 B406                <1>     mov ah, 6   ;Scroll
   972 000022F7 CD30                <1>     int 30h
   973 000022F9 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   974 000022FB B700                <1>     mov bh, 0   ;Page 0
   975 000022FD B402                <1>     mov ah, 2
   976 000022FF CD30                <1>     int 30h
   977                              <1>     return
    13                              <2> %%_ret:
    14 00002301 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   978                              <1> .doAnsi:
   979                              <1> ;4 chars in the ansi routine
   980                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   981                              <1> ; understand ANSI codes
   982 00002302 488D35EBEAFFFF      <1>     lea rsi, ansiCls
   983 00002309 B904000000          <1>     mov ecx, 4
   984 0000230E B406                <1>     mov ah, 06h ;Raw char output
   985                              <1> .ansiLp:
   986 00002310 AC                  <1>     lodsb   ;Get the char in 
   987 00002311 88C2                <1>     mov dl, al
   988 00002313 CD21                <1>     int 21h
   989 00002315 FFC9                <1>     dec ecx
   990 00002317 75F7                <1>     jnz .ansiLp
   991                              <1>     return
    13                              <2> %%_ret:
    14 00002319 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   992                              <1> 
   993                              <1> break:
   994 0000231A F6058ADDFFFFFF      <1>     test byte [arg1Flg], -1
   995 00002321 752D                <1>     jnz .argumentProvided
   996                              <1>     ;Here we just get the status of break
   997 00002323 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   998 00002328 CD21                <1>     int 21h
   999 0000232A 88D3                <1>     mov bl, dl
  1000 0000232C 488D15FFE8FFFF      <1>     lea rdx, breakIs
  1001 00002333 B409                <1>     mov ah, 09h
  1002 00002335 CD21                <1>     int 21h
  1003 00002337 488D15EFE8FFFF      <1>     lea rdx, onMes
  1004 0000233E 488D0DE2E8FFFF      <1>     lea rcx, offMes
  1005 00002345 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1006 00002347 480F44D1            <1>     cmovz rdx, rcx
  1007 0000234B B409                <1>     mov ah, 09h
  1008 0000234D CD21                <1>     int 21h
  1009                              <1>     return
    13                              <2> %%_ret:
    14 0000234F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1010                              <1> .argumentProvided:
  1011 00002350 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1012 00002354 AD                  <1>     lodsd   ;Read the word
  1013 00002355 89C3                <1>     mov ebx, eax
  1014 00002357 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1015 0000235C C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1016 0000235F 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1017 00002364 7416                <1>     je .maybeOn
  1018 00002366 663D4F46            <1>     cmp ax, "OF"
  1019 0000236A 7523                <1>     jne .badOnOff
  1020 0000236C 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1021 00002371 6681FB4620          <1>     cmp bx, "F "
  1022 00002376 7517                <1>     jne .badOnOff
  1023                              <1>     ;Set off
  1024 00002378 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1025 0000237A EB0B                <1>     jmp short .setBreak
  1026                              <1> .maybeOn:
  1027 0000237C 663D4F4E            <1>     cmp ax, "ON"
  1028 00002380 750D                <1>     jne .badOnOff
  1029                              <1>     ;Set on
  1030 00002382 BA01000000          <1>     mov edx, 1
  1031                              <1> .setBreak:
  1032 00002387 B801330000          <1>     mov eax, 3301h  ;Set break
  1033 0000238C CD21                <1>     int 21h
  1034                              <1>     return
    13                              <2> %%_ret:
    14 0000238E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1035                              <1> .badOnOff:
  1036 0000238F 488D156EEAFFFF      <1>     lea rdx, badOnOff
  1037 00002396 B409                <1>     mov ah, 09h
  1038 00002398 CD21                <1>     int 21h
  1039                              <1>     return
    13                              <2> %%_ret:
    14 0000239A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1040                              <1> 
  1041                              <1> verify:
  1042 0000239B F60509DDFFFFFF      <1>     test byte [arg1Flg], -1
  1043 000023A2 752D                <1>     jnz .argumentProvided
  1044                              <1>     ;Here we just get the status of break
  1045 000023A4 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1046 000023A9 CD21                <1>     int 21h
  1047 000023AB 88C3                <1>     mov bl, al
  1048 000023AD 488D1588E8FFFF      <1>     lea rdx, verifyIs
  1049 000023B4 B409                <1>     mov ah, 09h
  1050 000023B6 CD21                <1>     int 21h
  1051 000023B8 488D156EE8FFFF      <1>     lea rdx, onMes
  1052 000023BF 488D0D61E8FFFF      <1>     lea rcx, offMes
  1053 000023C6 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1054 000023C8 480F44D1            <1>     cmovz rdx, rcx
  1055 000023CC B409                <1>     mov ah, 09h
  1056 000023CE CD21                <1>     int 21h
  1057                              <1>     return
    13                              <2> %%_ret:
    14 000023D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1058                              <1> .argumentProvided:
  1059 000023D1 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1060 000023D5 AD                  <1>     lodsd   ;Read the word
  1061 000023D6 89C3                <1>     mov ebx, eax
  1062 000023D8 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1063 000023DD C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1064 000023E0 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1065 000023E5 7416                <1>     je .maybeOn
  1066 000023E7 663D4F46            <1>     cmp ax, "OF"
  1067 000023EB 751F                <1>     jne .badOnOff
  1068 000023ED 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1069 000023F2 6681FB4620          <1>     cmp bx, "F "
  1070 000023F7 7513                <1>     jne .badOnOff
  1071                              <1>     ;Set off
  1072 000023F9 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1073 000023FB EB0A                <1>     jmp short .setVerify
  1074                              <1> .maybeOn:
  1075 000023FD 663D4F4E            <1>     cmp ax, "ON"
  1076 00002401 7509                <1>     jne .badOnOff
  1077                              <1>     ;Set on
  1078 00002403 31C0                <1>     xor eax, eax
  1079 00002405 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1080                              <1> .setVerify:
  1081 00002407 B42E                <1>     mov ah, 2Eh  ;Set Verify
  1082 00002409 CD21                <1>     int 21h
  1083                              <1>     return
    13                              <2> %%_ret:
    14 0000240B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1084                              <1> .badOnOff:
  1085 0000240C 488D15F1E9FFFF      <1>     lea rdx, badOnOff
  1086 00002413 B409                <1>     mov ah, 09h
  1087 00002415 CD21                <1>     int 21h
  1088                              <1>     return
    13                              <2> %%_ret:
    14 00002417 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1089                              <1> 
  1090                              <1> rename:
  1091 00002418 F6058CDCFFFFFF      <1>     test byte [arg1Flg], -1
  1092 0000241F 0F8478F3FFFF        <1>     jz badArgError
  1093 00002425 F60582DCFFFFFF      <1>     test byte [arg2Flg], -1
  1094 0000242C 0F846BF3FFFF        <1>     jz badArgError    
  1095                              <1>     ;Initialise the variables!
  1096 00002432 488D354AE1FFFF      <1>     lea rsi, srcSpec
  1097 00002439 48893547E2FFFF      <1>     mov qword [srcPtr], rsi
  1098 00002440 488D35BEE1FFFF      <1>     lea rsi, destSpec
  1099 00002447 48893541E2FFFF      <1>     mov qword [destPtr], rsi
  1100                              <1>     ;Check the second path is just a filename!
  1101 0000244E 0FB6055ADCFFFF      <1>     movzx eax, byte [arg2Off]
  1102 00002455 4C8B05B3DBFFFF      <1>     mov r8, qword [pspPtr]
  1103 0000245C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1104 00002463 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1105 00002466 488D3DCEDFFFFF      <1>     lea rdi, searchSpec
  1106 0000246D 57                  <1>     push rdi
  1107 0000246E E8F70E0000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1108 00002473 5F                  <1>     pop rdi
  1109 00002474 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1110 00002478 0F841FF3FFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1111 0000247E 4889FE              <1>     mov rsi, rdi
  1112                              <1> .destScan:
  1113 00002481 AC                  <1>     lodsb   ;Get the char
  1114 00002482 3A05A3DBFFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1115 00002488 0F840FF3FFFF        <1>     je badArgError
  1116 0000248E 84C0                <1>     test al, al
  1117 00002490 75EF                <1>     jnz .destScan
  1118                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1119 00002492 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1120 00002496 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1120 0000249F 3F                  <1>
  1121 000024A0 B903000000          <1>     mov ecx, 3  ;24 bytes
  1122 000024A5 F348AB              <1>     rep stosq
  1123 000024A8 AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1124 000024A9 488D358BDFFFFF      <1>     lea rsi, searchSpec
  1125 000024B0 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1126 000024B4 B80D290000          <1>     mov eax, 290Dh
  1127 000024B9 CD21                <1>     int 21h     
  1128 000024BB 50                  <1>     push rax    ;Save the WC signature
  1129 000024BC E8EC0E0000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1130 000024C1 488D3D73DFFFFF      <1>     lea rdi, searchSpec
  1131 000024C8 E8230E0000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1132 000024CD 4889FE              <1>     mov rsi, rdi
  1133 000024D0 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1134 000024D3 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1135 000024D7 B80D290000          <1>     mov eax, 290Dh
  1136 000024DC CD21                <1>     int 21h
  1137 000024DE 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1138 000024DF 88CC                <1>     mov ah, cl
  1139 000024E1 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1140 000024E4 0F84EC000000        <1>     jz .noWC
  1141 000024EA 488D354ADFFFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1142                              <1>     ;Now we check if we have a path to actually handle
  1143 000024F1 4839F3              <1>     cmp rbx, rsi
  1144 000024F4 7444                <1>     je .noPath
  1145 000024F6 C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1146 000024FA 488D353ADFFFFF      <1>     lea rsi, searchSpec
  1147 00002501 488D3D7BE0FFFF      <1>     lea rdi, srcSpec
  1148 00002508 56                  <1>     push rsi
  1149 00002509 E8EB0C0000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1150 0000250E 5E                  <1>     pop rsi
  1151 0000250F 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1152 00002512 8A0513DBFFFF        <1>     mov al, byte [pathSep]
  1153 00002518 AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1154 00002519 48893D67E1FFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1155 00002520 488D3DDEE0FFFF      <1>     lea rdi, destSpec
  1156 00002527 E8CD0C0000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1157 0000252C 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1158 0000252F AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1159 00002530 48893D58E1FFFF      <1>     mov qword [destPtr], rdi
  1160 00002537 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1161                              <1> .noPath:
  1162                              <1>     ;Now we have where to copy the files to, we can start our work!
  1163 0000253A E85A0F0000          <1>     call setDTA
  1164 0000253F 488D15F5DEFFFF      <1>     lea rdx, searchSpec
  1165 00002546 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1166 00002548 B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1167 0000254D CD21                <1>     int 21h
  1168 0000254F 0F825AF2FFFF        <1>     jc badDupFnf    ;If no file was found!
  1169                              <1> .wcLoop:
  1170                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1171 00002555 488D3583DBFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1172 0000255C 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1173 00002560 B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1174 00002565 CD21                <1>     int 21h 
  1175                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1176 00002567 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1177 0000256B 488D3D25E1FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1178 00002572 57                  <1>     push rdi
  1179 00002573 48A5                <1>     movsq
  1180 00002575 66A5                <1>     movsw
  1181 00002577 A4                  <1>     movsb
  1182 00002578 5F                  <1>     pop rdi
  1183 00002579 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1184 0000257D B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1185                              <1> .wcNameMake:
  1186 00002582 AC                  <1>     lodsb   ;Get the char from the source string
  1187 00002583 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1188 00002586 7502                <1>     jne .noStore    ;Dont store the char there
  1189 00002588 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1190                              <1> .noStore:
  1191 0000258A 48FFC7              <1>     inc rdi ;Goto next char position
  1192 0000258D FFC9                <1>     dec ecx
  1193 0000258F 75F1                <1>     jnz .wcNameMake
  1194                              <1> ;renName now has the FCB name for the file we wish to make!
  1195                              <1> ;Now make the two paths!
  1196 00002591 488D3547DBFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1197 00002598 488B3DE8E0FFFF      <1>     mov rdi, qword [srcPtr]
  1198 0000259F E8550C0000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1199 000025A4 488D35ECE0FFFF      <1>     lea rsi, renName
  1200 000025AB 488B3DDDE0FFFF      <1>     mov rdi, qword [destPtr]
  1201 000025B2 E85D0D0000          <1>     call FCBToAsciiz
  1202 000025B7 488D15C5DFFFFF      <1>     lea rdx, srcSpec
  1203 000025BE 488D3D40E0FFFF      <1>     lea rdi, destSpec
  1204 000025C5 B800560000          <1>     mov eax, 5600h
  1205 000025CA CD21                <1>     int 21h     ;Fail silently on wildcard rename
  1206 000025CC B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1207 000025D1 CD21                <1>     int 21h
  1208 000025D3 7380                <1>     jnc .wcLoop     ;And process it too!
  1209                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 000025D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1210                              <1> .noWC:
  1211 000025D6 E8D20D0000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1212 000025DB 0FB605CDDAFFFF      <1>     movzx eax, byte [arg2Off]
  1213 000025E2 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1214 000025E9 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1215 000025EC 488D3D12E0FFFF      <1>     lea rdi, destSpec
  1216 000025F3 57                  <1>     push rdi
  1217 000025F4 E8710D0000          <1>     call cpDelimPathToBufz
  1218 000025F9 5F                  <1>     pop rdi
  1219 000025FA 488D153ADEFFFF      <1>     lea rdx, searchSpec
  1220 00002601 B800560000          <1>     mov eax, 5600h
  1221 00002606 CD21                <1>     int 21h
  1222                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002608 73(D5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1223 0000260A E9A0F1FFFF          <1>     jmp badDupFnf   ;Always just return this
  1224                              <1> 
  1225                              <1> 
  1226                              <1> touch:
  1227                              <1> ;Temporarily used to create files
  1228 0000260F F60595DAFFFFFF      <1>     test byte [arg1Flg], -1
  1229 00002616 0F8481F1FFFF        <1>     jz badArgError
  1230 0000261C E88C0D0000          <1>     call buildCommandPath
  1231 00002621 488D1513DEFFFF      <1>     lea rdx, searchSpec
  1232 00002628 B8005B0000          <1>     mov eax, 5B00h  ;Create unique file 
  1233 0000262D 31C9                <1>     xor ecx, ecx
  1234 0000262F CD21                <1>     int 21h
  1235 00002631 721D                <1>     jc .touch1
  1236                              <1> .touchClose:
  1237 00002633 0FB7D8              <1>     movzx ebx, ax   ;Save the handle here
  1238 00002636 B80D120000          <1>     mov eax, 120Dh  ;Get date/time words from the DOS
  1239 0000263B CD2F                <1>     int 2fh
  1240 0000263D 89C1                <1>     mov ecx, eax    ;Move the time here
  1241 0000263F 87D1                <1>     xchg edx, ecx   ;Get them in the right place
  1242 00002641 B801570000          <1>     mov eax, 5701h  ;Set the date/time for bx
  1243 00002646 CD21                <1>     int 21h
  1244 00002648 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1245 0000264D CD21                <1>     int 21h
  1246                              <1>     return
    13                              <2> %%_ret:
    14 0000264F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1247                              <1> .touch1:
  1248 00002650 3C50                <1>     cmp al, errFilExist ;Does the file exist?
  1249 00002652 7509                <1>     jne .touchError ;If not, this is a proper error!
  1250 00002654 B8003D0000          <1>     mov eax, 3D00h  ;R/O open instead to update the access time!!
  1251 00002659 CD21                <1>     int 21h
  1252 0000265B 73D6                <1>     jnc .touchClose ;If this worked, close the handle immediately
  1253                              <1> .touchError:
  1254 0000265D 3C03                <1>     cmp al, errPnf
  1255 0000265F 0F8438F1FFFF        <1>     je badArgError
  1256 00002665 3C02                <1>     cmp al, errFnf
  1257 00002667 0F844BF1FFFF        <1>     je badFnf
  1258 0000266D E907F1FFFF          <1>     jmp badAccError
  1259                              <1>     
  1260                              <1> 
  1261                              <1> join:
  1262                              <1> ;Mock join command, to test join. Make an external command.
  1263                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1264 00002672 F605AF000000FF      <1>     test byte [.joinOn], -1
  1265 00002679 743D                <1>     jz .okJoin
  1266                              <1> .joindisable:
  1267 0000267B B800520000          <1>     mov eax, 5200h  
  1268 00002680 CD21                <1>     int 21h
  1269                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1270 00002682 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1271 00002687 CD2A                <1>     int 2Ah
  1272 00002689 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1273 0000268D 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1274 00002691 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1275 00002697 C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1276 0000269A C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1277 0000269E FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1278 000026A1 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1279 000026A6 CD2A                <1>     int 2Ah
  1280 000026A8 C6057900000000      <1>     mov byte [.joinOn], 0
  1281 000026AF 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1282 000026B6 EB45                <1>     jmp short .joinExit
  1283                              <1> .okJoin:
  1284 000026B8 C60569000000FF      <1>     mov byte [.joinOn], -1
  1285 000026BF B800520000          <1>     mov eax, 5200h  
  1286 000026C4 CD21                <1>     int 21h
  1287 000026C6 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1288 000026CA 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1289                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1290 000026CE B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1291 000026D3 CD2A                <1>     int 2Ah
  1292 000026D5 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1293 000026DB 4889DF              <1>     mov rdi, rbx
  1294 000026DE 488D3544000000      <1>     lea rsi, .joinPath
  1295 000026E5 B90C000000          <1>     mov ecx, .joinPathL
  1296 000026EA F3A4                <1>     rep movsb   ;Copy chars over
  1297 000026EC FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1298 000026EF B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1299 000026F4 CD2A                <1>     int 2Ah
  1300 000026F6 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1301                              <1> .joinExit:
  1302 000026FD B800090000          <1>     mov eax, 0900h
  1303 00002702 CD21                <1>     int 21h
  1304                              <1>     return
    13                              <2> %%_ret:
    14 00002704 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1305 00002705 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1305 0000270E 61626C65640D0A24    <1>
  1306 00002716 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1306 0000271F 7361626C65640D0A24  <1>
  1307 00002728 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1308 00002729 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1308 00002732 535400              <1>
  1309                              <1> .joinPathL  equ $ - .joinPath 
  1310                              <1> 
  1311                              <1> subst:
  1312                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1313                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1314 00002735 F605D3000000FF      <1>     test byte [.substOn], -1
  1315 0000273C 7443                <1>     jz .okSubst
  1316                              <1> .substdisable:
  1317 0000273E B800520000          <1>     mov eax, 5200h  
  1318 00002743 CD21                <1>     int 21h
  1319                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1320 00002745 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1321 0000274A CD2A                <1>     int 2Ah
  1322 0000274C 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1323 00002750 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1324 00002757 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1325 0000275D C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1326 00002760 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1327 00002764 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1328 0000276A B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1329 0000276F CD2A                <1>     int 2Ah
  1330 00002771 C6059700000000      <1>     mov byte [.substOn], 0
  1331 00002778 488D157D000000      <1>     lea rdx, .substDisableMsg
  1332 0000277F EB61                <1>     jmp short .substExit
  1333                              <1> .okSubst:
  1334 00002781 C60587000000FF      <1>     mov byte [.substOn], -1
  1335 00002788 B800520000          <1>     mov eax, 5200h  
  1336 0000278D CD21                <1>     int 21h
  1337 0000278F B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1338 00002794 CD2A                <1>     int 2Ah
  1339 00002796 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1340 0000279A 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1341 000027A1 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1342 000027A5 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1343 000027AC 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1344 000027B0 C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1345                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1346 000027B7 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1347 000027BD 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1348 000027C3 4889DF              <1>     mov rdi, rbx
  1349 000027C6 488D3543000000      <1>     lea rsi, .substPath
  1350 000027CD B90C000000          <1>     mov ecx, .substPathL
  1351 000027D2 F3A4                <1>     rep movsb   ;Copy chars over
  1352 000027D4 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1353 000027D9 CD2A                <1>     int 2Ah
  1354 000027DB 488D1508000000      <1>     lea rdx, .substEnableMsg
  1355                              <1> .substExit:
  1356 000027E2 B800090000          <1>     mov eax, 0900h
  1357 000027E7 CD21                <1>     int 21h
  1358                              <1>     return
    13                              <2> %%_ret:
    14 000027E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1359 000027EA 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1359 000027F3 6E61626C65640D0A24  <1>
  1360 000027FC 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1360 00002805 697361626C65640D0A- <1>
  1360 0000280E 24                  <1>
  1361 0000280F 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1362 00002810 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1362 00002819 535400              <1>
  1363                              <1> .substPathL  equ $ - .substPath 
  1364                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1365                              <1> truename:
  1366 0000281C F60588D8FFFFFF      <1>     test byte [arg1Flg], -1
  1367 00002823 0F8474EFFFFF        <1>     jz badArgError
  1368 00002829 E87F0B0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1369 0000282E 488D3506DCFFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1370 00002835 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1371 00002838 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1372 0000283D CD21                <1>     int 21h
  1373 0000283F 730D                <1>     jnc .writePath
  1374 00002841 3C02                <1>     cmp al, errFnf
  1375 00002843 0F845DEFFFFF        <1>     je badFileError
  1376 00002849 E93DEFFFFF          <1>     jmp badParamError
  1377                              <1> .writePath:
  1378 0000284E 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1379 00002851 B9FFFFFFFF          <1>     mov ecx, -1
  1380 00002856 30C0                <1>     xor al, al
  1381 00002858 F2AE                <1>     repne scasb     ;Get the new len
  1382 0000285A F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1383 0000285C FFC9                <1>     dec ecx
  1384 0000285E BB01000000          <1>     mov ebx, 01
  1385 00002863 B440                <1>     mov ah, 40h
  1386 00002865 CD21                <1>     int 21h
  1387 00002867 E8AF060000          <1>     call printCRLF
  1388                              <1>     return
    13                              <2> %%_ret:
    14 0000286C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1389                              <1> 
  1390                              <1> label:
  1391                              <1> ;Displays/Changes/Deletes the file label
  1392 0000286D 488D1508000000      <1>     lea rdx, .l1
  1393 00002874 B800090000          <1>     mov eax, 0900h
  1394 00002879 CD21                <1>     int 21h
  1395                              <1>     return
    13                              <2> %%_ret:
    14 0000287B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1396 0000287C 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  1396 00002885 6E20756E696D706C65- <1>
  1396 0000288E 6D656E7465640D0A24  <1>
  1397                              <1> 
  1398                              <1> mklbl:
  1399                              <1>     ;lea rdx, .l1
  1400                              <1>     ;mov cx, 08h ;Make a label
  1401                              <1>     ;mov eax, 3C00h
  1402                              <1>     ;int 21h
  1403                              <1> 
  1404                              <1>     ;mov ebx, eax
  1405                              <1>     ;mov eax, 3E00h  ;Close the handle
  1406                              <1>     ;int 21h
  1407                              <1>     ;return
  1408                              <1> 
  1409                              <1> ;.l1: db "TESTLABEL",0
  1410 00002897 488D1508000000      <1>     lea rdx, .l1
  1411 0000289E B800160000          <1>     mov eax, 1600h  ;Create FCB
  1412 000028A3 CD21                <1>     int 21h
  1413                              <1>     return
    13                              <2> %%_ret:
    14 000028A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1414                              <1> .l1:
  1415                              <1>     istruc exFcb
  1416 000028A6 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1417 000028A7 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1418 000028AD 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1419 000028AE 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  1420 000028B6 4C2020              <1>     at exFcb.fileext,   db "L  "
  1421 000028B9 00000000            <1>     at exFcb.curBlock,  dd 0
  1422 000028BD 00<rep 15h>         <1>     iend 
  1423                              <1> rmlbl:
  1424 000028D2 488D1508000000      <1>     lea rdx, .l1
  1425 000028D9 B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  1426 000028DE CD21                <1>     int 21h
  1427                              <1>     return
    13                              <2> %%_ret:
    14 000028E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1428                              <1> .l1:    ;FCB to volume label
  1429                              <1>     istruc exFcb
  1430 000028E1 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1431 000028E2 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1432 000028E8 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1433 000028E9 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  1434 000028F1 3F3F3F              <1>     at exFcb.fileext,   db "???"
  1435 000028F4 00000000            <1>     at exFcb.curBlock,  dd 0
  1436 000028F8 00<rep 15h>         <1>     iend 
  1437                              <1> 
  1438                              <1> rnlbl:
  1439 0000290D 488D1508000000      <1>     lea rdx, .l1
  1440 00002914 B800170000          <1>     mov eax, 1700h
  1441 00002919 CD21                <1>     int 21h
  1442                              <1>     return
    13                              <2> %%_ret:
    14 0000291B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1443                              <1> .l1:
  1444                              <1>     istruc exRenFcb
  1445 0000291C FF                  <1>     at exRenFcb.extSig,     db -1
  1446 0000291D 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  1447 00002923 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  1448 00002924 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  1449 0000292C 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  1450 0000292F 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  1450 00002938 4C414245            <1>
  1451 0000293C 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  1452 0000293F 00<rep 4h>          <1>     iend
  1453                              <1> volume:
  1454                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  1455 00002943 F60564D7FFFFFF      <1>     test byte [arg2Flg], -1
  1456 0000294A 0F854DEEFFFF        <1>     jnz badArgError
  1457 00002950 F60554D7FFFFFF      <1>     test byte [arg1Flg], -1
  1458 00002957 7507                <1>     jnz .notCurrentDrive
  1459 00002959 E896080000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1460 0000295E EB31                <1>     jmp short .dirEP
  1461                              <1> .notCurrentDrive:
  1462 00002960 E8480A0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1463 00002965 488D35CFDAFFFF      <1>     lea rsi, searchSpec
  1464 0000296C E8BD080000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  1465 00002971 66AD                <1>     lodsw                   ;Get this word
  1466 00002973 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  1467 00002976 0F8521EEFFFF        <1>     jne badArgError
  1468 0000297C 8A052BD7FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1469 00002982 A8FF                <1>     test al, -1
  1470 00002984 0F850AEEFFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1471 0000298A 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1472 0000298F FFC8                <1>     dec eax ;Convert to 0 based number
  1473                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  1474 00002991 E8030B0000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  1475 00002996 488D15B6DBFFFF      <1>     lea rdx, volFcb
  1476 0000299D FFC0                <1>     inc eax ;Get 1 based drive number
  1477 0000299F 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1478 000029A1 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1479 000029A4 B800110000          <1>     mov eax, 1100h ;Find first FCB
  1480 000029A9 CD21                <1>     int 21h
  1481 000029AB 50                  <1>     push rax
  1482                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  1483 000029AC 488D1562DEFFFF      <1>     lea rdx, crlf
  1484 000029B3 B409                <1>     mov ah, 09h
  1485 000029B5 CD21                <1>     int 21h
  1486 000029B7 488D15DCE0FFFF      <1>     lea rdx, volMes
  1487 000029BE B409                <1>     mov ah, 09h
  1488 000029C0 CD21                <1>     int 21h
  1489 000029C2 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  1490 000029C4 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  1491 000029C7 B402                <1>     mov ah, 02h
  1492 000029C9 CD21                <1>     int 21h
  1493 000029CB 58                  <1>     pop rax
  1494 000029CC 84C0                <1>     test al, al ;If this is zero, the call succeeded
  1495 000029CE 7409                <1>     jz .volIDOk
  1496 000029D0 488D15DAE0FFFF      <1>     lea rdx, volNo
  1497 000029D7 EB19                <1>     jmp short .volEndPrint
  1498                              <1> .volIDOk:
  1499 000029D9 488D15CCE0FFFF      <1>     lea rdx, volOk
  1500 000029E0 B409                <1>     mov ah, 09h
  1501 000029E2 CD21                <1>     int 21h
  1502 000029E4 C605E9D6FFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  1503 000029EB 488D15D7D6FFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  1504                              <1> .volEndPrint:
  1505 000029F2 B409                <1>     mov ah, 09h
  1506 000029F4 CD21                <1>     int 21h
  1507 000029F6 488D1518DEFFFF      <1>     lea rdx, crlf
  1508 000029FD B409                <1>     mov ah, 09h
  1509 000029FF CD21                <1>     int 21h
  1510                              <1>     return
    13                              <2> %%_ret:
    14 00002A01 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1511                              <1> 
  1512                              <1> version:
  1513 00002A02 488D150CDEFFFF      <1>     lea rdx, crlf
  1514 00002A09 B409                <1>     mov ah, 09h
  1515 00002A0B CD21                <1>     int 21h
  1516 00002A0D 488D1574E0FFFF      <1>     lea rdx, dosVer
  1517 00002A14 B409                <1>     mov ah, 09h
  1518 00002A16 CD21                <1>     int 21h
  1519 00002A18 E80C000000          <1>     call .printVersionNumber
  1520 00002A1D 488D15F1DDFFFF      <1>     lea rdx, crlf
  1521 00002A24 B409                <1>     mov ah, 09h
  1522 00002A26 CD21                <1>     int 21h
  1523                              <1>     return
    13                              <2> %%_ret:
    14 00002A28 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1524                              <1> .printVersionNumber:
  1525 00002A29 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1526 00002A2B CD21                <1>     int 21h
  1527 00002A2D 50                  <1>     push rax
  1528 00002A2E 0FB6C0              <1>     movzx eax, al
  1529 00002A31 E8B0090000          <1>     call printDecimalWord
  1530 00002A36 B22E                <1>     mov dl, "."
  1531 00002A38 B402                <1>     mov ah, 02h
  1532 00002A3A CD21                <1>     int 21h
  1533 00002A3C 58                  <1>     pop rax
  1534 00002A3D 0FB6C4              <1>     movzx eax, ah
  1535 00002A40 E8A1090000          <1>     call printDecimalWord
  1536                              <1>     return
    13                              <2> %%_ret:
    14 00002A45 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1537                              <1> 
  1538                              <1> 
  1539                              <1> memory:
  1540 00002A46 488B1DD2D5FFFF      <1>     mov rbx, qword [sysVars]
  1541 00002A4D 4885DB              <1>     test rbx, rbx
  1542 00002A50 7510                <1>     jnz .sysvarsOK
  1543 00002A52 488D1512E3FFFF      <1>     lea rdx, memBad0
  1544 00002A59 B409                <1>     mov ah, 09h
  1545 00002A5B CD21                <1>     int 21h
  1546 00002A5D E9270A0000          <1>     jmp freezePC.altEP
  1547                              <1> .sysvarsOK:
  1548                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1549                              <1>     ; and rcx to store Application memory
  1550 00002A62 31F6                <1>     xor esi, esi
  1551 00002A64 31FF                <1>     xor edi, edi
  1552 00002A66 31ED                <1>     xor ebp, ebp
  1553 00002A68 31C9                <1>     xor ecx, ecx
  1554 00002A6A 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1555 00002A6E 488B1B              <1>     mov rbx, qword [rbx]
  1556                              <1> .memLp:
  1557 00002A71 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1558 00002A74 7409                <1>     je .validMCB
  1559 00002A76 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1560 00002A79 0F8501010000        <1>     jne .badMCBFound
  1561                              <1> .validMCB:
  1562 00002A7F 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1563 00002A82 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1564 00002A86 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1565 00002A8E 7505                <1>     jne .notDOS
  1566 00002A90 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1567 00002A93 EB21                <1>     jmp short .gotoNext
  1568                              <1> .notDOS:
  1569 00002A95 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1570 00002A9D 7505                <1>     jne .notFree
  1571 00002A9F 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1572 00002AA2 EB12                <1>     jmp short .gotoNext
  1573                              <1> .notFree:
  1574 00002AA4 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1575 00002AAC 7505                <1>     jne .notHole
  1576 00002AAE 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1577 00002AB1 EB03                <1>     jmp short .gotoNext
  1578                              <1> .notHole:
  1579 00002AB3 4801C1              <1>     add rcx, rax    ;Add to Application count
  1580                              <1> .gotoNext:
  1581 00002AB6 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1582 00002AB9 7407                <1>     je .endOfWalk
  1583 00002ABB 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1584 00002AC0 EBAF                <1>     jmp short .memLp
  1585                              <1> .endOfWalk:
  1586                              <1>     
  1587 00002AC2 488D1503E2FFFF      <1>     lea rdx, memDOS
  1588 00002AC9 B409                <1>     mov ah, 09h
  1589 00002ACB CD21                <1>     int 21h
  1590 00002ACD 4889F0              <1>     mov rax, rsi
  1591 00002AD0 E89D000000          <1>     call .mcbPrintAmount
  1592 00002AD5 488D1588E2FFFF      <1>     lea rdx, memByte
  1593 00002ADC B409                <1>     mov ah, 09h
  1594 00002ADE CD21                <1>     int 21h
  1595                              <1> 
  1596 00002AE0 4885ED              <1>     test rbp, rbp
  1597 00002AE3 741E                <1>     jz .skipHole
  1598 00002AE5 488D152CE2FFFF      <1>     lea rdx, memHole
  1599 00002AEC B409                <1>     mov ah, 09h
  1600 00002AEE CD21                <1>     int 21h
  1601 00002AF0 4889E8              <1>     mov rax, rbp
  1602 00002AF3 E87A000000          <1>     call .mcbPrintAmount
  1603 00002AF8 488D1565E2FFFF      <1>     lea rdx, memByte
  1604 00002AFF B409                <1>     mov ah, 09h
  1605 00002B01 CD21                <1>     int 21h
  1606                              <1> .skipHole:
  1607                              <1> 
  1608 00002B03 488D15E8E1FFFF      <1>     lea rdx, memApp
  1609 00002B0A B409                <1>     mov ah, 09h
  1610 00002B0C CD21                <1>     int 21h
  1611 00002B0E 4889C8              <1>     mov rax, rcx
  1612 00002B11 E85C000000          <1>     call .mcbPrintAmount
  1613 00002B16 488D1547E2FFFF      <1>     lea rdx, memByte
  1614 00002B1D B409                <1>     mov ah, 09h
  1615 00002B1F CD21                <1>     int 21h
  1616                              <1> 
  1617 00002B21 488D1516E2FFFF      <1>     lea rdx, memFree
  1618 00002B28 B409                <1>     mov ah, 09h
  1619 00002B2A CD21                <1>     int 21h
  1620 00002B2C 4889F8              <1>     mov rax, rdi
  1621 00002B2F E83E000000          <1>     call .mcbPrintAmount
  1622 00002B34 488D1529E2FFFF      <1>     lea rdx, memByte
  1623 00002B3B B409                <1>     mov ah, 09h
  1624 00002B3D CD21                <1>     int 21h
  1625                              <1> 
  1626 00002B3F 488D1560E1FFFF      <1>     lea rdx, memSys
  1627 00002B46 B409                <1>     mov ah, 09h
  1628 00002B48 CD21                <1>     int 21h
  1629 00002B4A 4889F0              <1>     mov rax, rsi
  1630 00002B4D 4801F8              <1>     add rax, rdi
  1631 00002B50 4801C8              <1>     add rax, rcx
  1632 00002B53 4801E8              <1>     add rax, rbp
  1633 00002B56 E817000000          <1>     call .mcbPrintAmount
  1634 00002B5B 488D1502E2FFFF      <1>     lea rdx, memByte
  1635 00002B62 B409                <1>     mov ah, 09h
  1636 00002B64 CD21                <1>     int 21h
  1637                              <1> 
  1638 00002B66 488D15A8DCFFFF      <1>     lea rdx, crlf
  1639 00002B6D B409                <1>     mov ah, 09h
  1640 00002B6F CD21                <1>     int 21h
  1641                              <1>     return
    13                              <2> %%_ret:
    14 00002B71 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1642                              <1> 
  1643                              <1> .mcbPrintAmount:
  1644 00002B72 51                  <1>     push rcx
  1645 00002B73 56                  <1>     push rsi
  1646 00002B74 57                  <1>     push rdi
  1647 00002B75 55                  <1>     push rbp
  1648 00002B76 E86B080000          <1>     call printDecimalWord
  1649 00002B7B 5D                  <1>     pop rbp
  1650 00002B7C 5F                  <1>     pop rdi
  1651 00002B7D 5E                  <1>     pop rsi
  1652 00002B7E 59                  <1>     pop rcx
  1653                              <1>     return
    13                              <2> %%_ret:
    14 00002B7F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1654                              <1> .badMCBFound:
  1655 00002B80 488D1524E2FFFF      <1>     lea rdx, memBad2
  1656 00002B87 B409                <1>     mov ah, 09h
  1657 00002B89 CD21                <1>     int 21h
  1658 00002B8B E9F9080000          <1>     jmp freezePC.altEP
  1659                              <1> 
  1660                              <1> type:
  1661 00002B90 F60514D5FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1662 00002B97 0F8400ECFFFF        <1>     jz badArgError
  1663 00002B9D F6050AD5FFFFFF      <1>     test byte [arg2Flg], -1
  1664 00002BA4 0F85F3EBFFFF        <1>     jnz badArgError         ;If this set, error
  1665 00002BAA 4C8B055ED4FFFF      <1>     mov r8, [pspPtr]
  1666 00002BB1 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1667 00002BB8 0FB605EDD4FFFF      <1>     movzx eax, byte [arg1Off]
  1668 00002BBF 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1669 00002BC2 803E0D              <1>     cmp byte [rsi], CR
  1670 00002BC5 0F84D2EBFFFF        <1>     je badArgError
  1671 00002BCB 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1672 00002BCF 750F                <1>     jne .noDrive
  1673 00002BD1 0FB605D5D4FFFF      <1>     movzx eax, byte [arg1FCBret]
  1674 00002BD8 3CFF                <1>     cmp al, -1
  1675 00002BDA 0F84B4EBFFFF        <1>     je badDriveError
  1676                              <1> .noDrive:
  1677                              <1>     ;Now we open the provided file
  1678 00002BE0 E8C8070000          <1>     call buildCommandPath
  1679 00002BE5 488D154FD8FFFF      <1>     lea rdx, searchSpec
  1680 00002BEC B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1681 00002BF1 CD21                <1>     int 21h
  1682 00002BF3 0F82ADEBFFFF        <1>     jc badFileError
  1683 00002BF9 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1684 00002C00 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1685                              <1> .lp:
  1686 00002C03 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1687 00002C08 B43F                <1>     mov ah, 3Fh ;Read handle
  1688 00002C0A CD21                <1>     int 21h
  1689 00002C0C 89C1                <1>     mov ecx, eax
  1690 00002C0E 67E317              <1>     jecxz .exit
  1691 00002C11 53                  <1>     push rbx    ;Save the original in handle
  1692 00002C12 BB01000000          <1>     mov ebx, 1  ;STDOUT
  1693 00002C17 B440                <1>     mov ah, 40h
  1694 00002C19 CD21                <1>     int 21h
  1695 00002C1B 5B                  <1>     pop rbx ;Get back the original read handle
  1696 00002C1C 720F                <1>     jc .exitBad
  1697 00002C1E 39C8                <1>     cmp eax, ecx
  1698 00002C20 74E1                <1>     je .lp
  1699 00002C22 FFC9                <1>     dec ecx ;One less for a ^Z
  1700 00002C24 39C8                <1>     cmp eax, ecx
  1701 00002C26 7505                <1>     jne .exitBad
  1702                              <1> .exit:
  1703 00002C28 B43E                <1>     mov ah, 3Eh ;Close handle
  1704 00002C2A CD21                <1>     int 21h
  1705                              <1>     return
    13                              <2> %%_ret:
    14 00002C2C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1706                              <1> .exitBad:
  1707                              <1>     ;Print a disk error message... use a table to build the message but for
  1708                              <1>     ; now, just exit
  1709                              <1>     ;If it is a char device, don't print a error
  1710 00002C2D EBF9                <1>     jmp short .exit
  1711                              <1> 
  1712                              <1> exit:
  1713 00002C2F F605F7D3FFFFFF      <1>     test byte [permaSwitch], -1
  1714                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002C36 75(2C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1715 00002C38 488B05D8D3FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1716 00002C3F 483DFFFFFFFF        <1>     cmp rax, -1
  1717                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002C45 74(2C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1718 00002C47 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1719                              <1> 
  1720 00002C4B 488B15DCD3FFFF      <1>     mov rdx, qword [parentInt22]
  1721 00002C52 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  1722 00002C56 B822250000          <1>     mov eax, 2522h
  1723 00002C5B CD21                <1>     int 21h
  1724                              <1> 
  1725 00002C5D B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1726 00002C62 CD21                <1>     int 21h
  1727                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00002C64 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1728                              <1> 
  1729                              <1> launchChild:
  1730                              <1>     ;We execute an external command here.
  1731                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  1732                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  1733                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  1734                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  1735                              <1>     ;We know the drive we are on is valid so no need to double check that!
  1736 00002C65 4C8B05A3D3FFFF      <1>     mov r8, qword [pspPtr]
  1737 00002C6C E828080000          <1>     call setDTA         
  1738                              <1>     ;Start by pulling the cmdline removing the cmd from the tail
  1739 00002C71 E810020000          <1>     call .pullCommandline    
  1740                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
  1741 00002C76 488D3D15D6FFFF      <1>     lea rdi, cmdPathSpec
  1742 00002C7D E86E060000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  1743 00002C82 4889FE              <1>     mov rsi, rdi    ;Source here
  1744 00002C85 488D3D25D4FFFF      <1>     lea rdi, cmdFcb
  1745 00002C8C B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  1746 00002C91 CD21                <1>     int 21h
  1747 00002C93 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  1748 00002C95 0F853DEBFFFF        <1>     jnz badCmdError
  1749 00002C9B 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  1750                              <1> .pathLoop:
  1751 00002C9E 488D3515D4FFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  1752 00002CA5 488D3D78E1FFFF      <1>     lea rdi, extStr
  1753 00002CAC BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  1754                              <1> .extLp:
  1755 00002CB1 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  1756 00002CB2 B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  1757 00002CB7 F3A6                <1>     rep cmpsb   ;Compare the two strings
  1758 00002CB9 5E                  <1>     pop rsi
  1759 00002CBA 85C9                <1>     test ecx, ecx
  1760 00002CBC 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  1761 00002CBE 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  1762 00002CC1 FFCA                <1>     dec edx         ;Else one less extension type to check
  1763 00002CC3 75EC                <1>     jnz .extLp
  1764                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  1765                              <1>     ;If not, error.
  1766 00002CC5 B903000000          <1>     mov ecx, 3
  1767 00002CCA 4889F7              <1>     mov rdi, rsi
  1768 00002CCD B020                <1>     mov al, SPC
  1769 00002CCF F3AE                <1>     rep scasb   
  1770 00002CD1 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  1771 00002CD3 0F85FFEAFFFF        <1>     jnz badCmdError    ;If not, error!
  1772                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  1773 00002CD9 488D3544E1FFFF      <1>     lea rsi, extStr
  1774 00002CE0 BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  1775                              <1> .extSrchLp:
  1776 00002CE5 488D3DCED3FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1777 00002CEC B903000000          <1>     mov ecx, 3
  1778 00002CF1 F3A4                <1>     rep movsb   ;Copy the extension over!
  1779 00002CF3 E861010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  1780 00002CF8 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  1781 00002CFA FFCB                <1>     dec ebx                 ;Decrement extension counter
  1782 00002CFC 75E7                <1>     jnz .extSrchLp
  1783                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  1784                              <1> ; we start prepending path componants and trying again. To do this, we reset
  1785                              <1> ; by setting the fcb extension back to all spaces.
  1786 00002CFE 488D3DB5D3FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1787 00002D05 B903000000          <1>     mov ecx, 3
  1788 00002D0A B020                <1>     mov al, SPC
  1789 00002D0C F3AA                <1>     rep stosb   ;Store back the empty extension!
  1790 00002D0E EB50                <1>     jmp short .pathHandle
  1791                              <1> .extFnd:
  1792                              <1> ;Here if the file had the right extension.
  1793 00002D10 E844010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  1794 00002D15 7249                <1>     jc .pathHandle
  1795                              <1> .extSrchFnd:
  1796                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  1797                              <1> ; a BAT. If it is, separate handling!
  1798 00002D17 803D9CD3FFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  1799 00002D1E 0F8401010000        <1>     je .batLaunch
  1800 00002D24 488D1DC1D3FFFF      <1>     lea rbx, launchBlock
  1801 00002D2B 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  1802 00002D2F 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  1803 00002D32 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  1804 00002D39 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1805 00002D3D 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1806 00002D41 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1807 00002D45 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1808 00002D49 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1809 00002D4D 488D153ED5FFFF      <1>     lea rdx, cmdPathSpec
  1810 00002D54 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1811 00002D59 CD21                <1>     int 21h
  1812 00002D5B E978EAFFFF          <1>     jmp badCmdError    ;If something goes wrong, error out
  1813                              <1> .pathHandle:        
  1814                              <1> ;First check if rbp is null. If it is, its a first time entry
  1815 00002D60 4885ED              <1>     test rbp, rbp
  1816 00002D63 0F85AA000000        <1>     jnz .pathReentry
  1817                              <1> ;Now check if the command we recieved included an absolute path.
  1818                              <1> ;If so, we don't do path substitution and just fail at this point
  1819 00002D69 488D3522D5FFFF      <1>     lea rsi, cmdPathSpec
  1820 00002D70 66AD                <1>     lodsw   ;Get the first two chars
  1821 00002D72 3A05B3D2FFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  1822 00002D78 0F845AEAFFFF        <1>     je badCmdError  ;Therefore, exit bad!
  1823 00002D7E 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  1824 00002D80 7412                <1>     je .pathGetEnv
  1825 00002D82 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  1826 00002D85 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  1827 00002D87 AC                  <1>     lodsb   ;Get the third char
  1828 00002D88 3A059DD2FFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  1829 00002D8E 0F8444EAFFFF        <1>     je badCmdError  ;Therefore, exit bad!
  1830                              <1> .pathGetEnv:
  1831                              <1> ;Now get a pointer to the environment and search for PATH=
  1832                              <1> ;We only take the final portion of the path and add it to each path componant
  1833                              <1> ;This agrees with DOS 3.3
  1834 00002D94 E824070000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  1835 00002D99 0F8439EAFFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  1836                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  1837                              <1>     ;Now we know we dont have to keep track of chars!!
  1838                              <1> .pathLp:
  1839 00002D9F 488D3DA2E0FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  1840 00002DA6 B905000000          <1>     mov ecx, 5          ;5 Chars in PATH=
  1841 00002DAB E804070000          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1842 00002DB0 7419                <1>     je .pathFound
  1843 00002DB2 31C0                <1>     xor eax, eax        ;Search for a null
  1844 00002DB4 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1845 00002DB7 B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1846 00002DBC F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1847 00002DBE 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1848 00002DC0 0F8412EAFFFF        <1>     je badCmdError      ;If second null, no more env to search!
  1849 00002DC6 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1850 00002DC9 EBD4                <1>     jmp short .pathLp   ;And scan again!
  1851                              <1> .pathFound:
  1852                              <1> ;Env var found!
  1853 00002DCB F3A6                <1>     repe cmpsb          ;Move rdi past the = sign!
  1854                              <1> .pathRejoin:
  1855 00002DCD 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  1856 00002DD0 4889FE              <1>     mov rsi, rdi        ;This is a ; delimited ASCII string
  1857 00002DD3 488D3D61D6FFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  1858 00002DDA E875050000          <1>     call cpDelimOrCtrlStringToBufz   
  1859 00002DDF 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  1860 00002DE2 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  1861 00002DE5 48FFCF              <1>     dec rdi ;Point to the null terminator
  1862 00002DE8 8A053DD2FFFF        <1>     mov al, byte [pathSep]
  1863 00002DEE AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  1864 00002DEF 488D35BCD2FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  1865 00002DF6 E819050000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  1866 00002DFB 488D3539D6FFFF      <1>     lea rsi, searchSpec 
  1867 00002E02 488D3D89D4FFFF      <1>     lea rdi, cmdPathSpec
  1868 00002E09 E8EB030000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  1869 00002E0E E98BFEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  1870                              <1> .pathReentry:
  1871 00002E13 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  1872 00002E17 0F84BBE9FFFF        <1>     je badCmdError
  1873 00002E1D 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  1874 00002E20 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  1875 00002E23 EBA8                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  1876                              <1> 
  1877                              <1> .batLaunch:
  1878 00002E25 488D1508000000      <1>     lea rdx, .batMsg
  1879 00002E2C B800090000          <1>     mov eax, 0900h
  1880 00002E31 CD21                <1>     int 21h
  1881                              <1>     return
    13                              <2> %%_ret:
    14 00002E33 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1882 00002E34 424154434820707265- <1> .batMsg db "BATCH preprocessor not implemented",CR,LF,"$"
  1882 00002E3D 70726F636573736F72- <1>
  1882 00002E46 206E6F7420696D706C- <1>
  1882 00002E4F 656D656E7465640D0A- <1>
  1882 00002E58 24                  <1>
  1883                              <1> 
  1884                              <1> .prepAndSearch:
  1885                              <1> ;Copies over the name and extension in UC to the last componant of the 
  1886                              <1> ;cmdPathSpec and null terminates. 
  1887                              <1> ;Input: cmdFcb name + ext setup. 
  1888                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  1889                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found!
  1890 00002E59 50                  <1>     push rax
  1891 00002E5A 51                  <1>     push rcx
  1892 00002E5B 56                  <1>     push rsi
  1893 00002E5C 57                  <1>     push rdi
  1894 00002E5D 488D3D2ED4FFFF      <1>     lea rdi, cmdPathSpec 
  1895 00002E64 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  1896 00002E67 E884040000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  1897 00002E6C 488D353FD2FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  1898 00002E73 E89C040000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  1899 00002E78 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1900 00002E7D 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  1901 00002E7F CD21                <1>     int 21h
  1902 00002E81 5F                  <1>     pop rdi
  1903 00002E82 5E                  <1>     pop rsi
  1904 00002E83 59                  <1>     pop rcx
  1905 00002E84 58                  <1>     pop rax
  1906                              <1>     return
    13                              <2> %%_ret:
    14 00002E85 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1907                              <1> 
  1908                              <1> .pullCommandline:
  1909                              <1> ;This command pulls the command tail down, removing the whole launch command
  1910 00002E86 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;rbx points to the de-redired command line 
  1911                              <1> ;Skip leading separators
  1912                              <1> .pctSkipLeading:
  1913 00002E8D AC                  <1>     lodsb   ;Get first char
  1914 00002E8E E8A9030000          <1>     call isALdelimiter
  1915 00002E93 74F8                <1>     je .pctSkipLeading
  1916 00002E95 48FFCE              <1>     dec rsi
  1917                              <1>     ;rsi points to the start of the command
  1918 00002E98 488D3DF3D3FFFF      <1>     lea rdi, cmdPathSpec
  1919 00002E9F E86E030000          <1>     call strlen ;Get the length of the command
  1920 00002EA4 FFC9                <1>     dec ecx ;Minus the terminating null
  1921 00002EA6 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
  1922 00002EA9 31C9                <1>     xor ecx, ecx    ;Use as a char counter
  1923 00002EAB 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
  1924                              <1> .pctPullChars:
  1925 00002EB2 AC                  <1>     lodsb
  1926 00002EB3 AA                  <1>     stosb
  1927 00002EB4 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
  1928 00002EB6 7404                <1>     je .pctExit
  1929 00002EB8 FFC1                <1>     inc ecx     ;Increment count
  1930 00002EBA EBF6                <1>     jmp short .pctPullChars 
  1931                              <1> .pctExit:
  1932 00002EBC 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
  1933                              <1>     return
    13                              <2> %%_ret:
    14 00002EC3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1934                              <1> 
  1935                              <1> set:
  1936 00002EC4 F605E0D1FFFFFF      <1>     test byte [arg1Flg], -1
  1937 00002ECB 0F84CCE8FFFF        <1>     jz badArgError  ;Need to give an argument!
  1938 00002ED1 0FB605D4D1FFFF      <1>     movzx eax, byte [arg1Off]
  1939 00002ED8 4C8B0530D1FFFF      <1>     mov r8, [pspPtr]
  1940 00002EDF 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1941 00002EE6 4801C6              <1>     add rsi, rax    ;Go to the start of the argument
  1942                              <1>     ;rsi -> EnvvarName=string;string;string<CR>
  1943                              <1> 
  1944                              <1> pathEdit:
  1945 00002EE9 488D1508000000      <1>     lea rdx, .pMsg
  1946 00002EF0 B800090000          <1>     mov eax, 0900h
  1947 00002EF5 CD21                <1>     int 21h
  1948                              <1>     return
    13                              <2> %%_ret:
    14 00002EF7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1949 00002EF8 504154482065646974- <1> .pMsg db "PATH editing not yet implemented",CR,LF,"$"
  1949 00002F01 696E67206E6F742079- <1>
  1949 00002F0A 657420696D706C656D- <1>
  1949 00002F13 656E7465640D0A24    <1>
    18                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printCRLF:
     4 00002F1B 488D15F3D8FFFF      <1>     lea rdx, crlf
     5                              <1> printString:
     6 00002F22 B800090000          <1>     mov eax, 0900h  ;Print string
     7 00002F27 CD21                <1>     int 21h
     8                              <1>     return
    13                              <2> %%_ret:
    14 00002F29 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> printDate:
    10                              <1> ;Input: eax = Packed Date
    11                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    12                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    13                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    14                              <1> ;       ebx = 0 => Print two digit year
    15                              <1> ;       ebx = 1 => Print four digit year
    16 00002F2A 53                  <1>     push rbx
    17 00002F2B 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    18 00002F2D 803D02D1FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    19 00002F34 7240                <1>     jb .usDate
    20 00002F36 777C                <1>     ja .jpnDate
    21                              <1> ;European: DD/MM/YY
    22 00002F38 251F000000          <1>     and eax, 1Fh    ;Save day bits
    23 00002F3D E8B0000000          <1>     call .printFirst
    24 00002F42 8A15F9D0FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    25 00002F48 B402                <1>     mov ah, 02h
    26 00002F4A CD21                <1>     int 21h
    27                              <1> 
    28 00002F4C 89C8                <1>     mov eax, ecx
    29 00002F4E 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    30 00002F53 C1E805              <1>     shr eax, 5
    31 00002F56 E8B3000000          <1>     call .printSecond
    32                              <1> 
    33 00002F5B 8A15E0D0FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    34 00002F61 B402                <1>     mov ah, 02h
    35 00002F63 CD21                <1>     int 21h
    36                              <1> 
    37 00002F65 89C8                <1>     mov eax, ecx
    38 00002F67 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    39 00002F6C C1E809              <1>     shr eax, 9
    40 00002F6F 5B                  <1>     pop rbx ;Get the year signature back
    41 00002F70 E8A9000000          <1>     call .printYear
    42                              <1>     return
    13                              <2> %%_ret:
    14 00002F75 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    43                              <1> .usDate:
    44                              <1> ;US: MM/DD/YY
    45 00002F76 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    46 00002F7B C1E805              <1>     shr eax, 5
    47 00002F7E E86F000000          <1>     call .printFirst
    48                              <1> 
    49 00002F83 8A15B8D0FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    50 00002F89 B402                <1>     mov ah, 02h
    51 00002F8B CD21                <1>     int 21h
    52                              <1> 
    53 00002F8D 89C8                <1>     mov eax, ecx
    54 00002F8F 251F000000          <1>     and eax, 1Fh    ;Save day bits
    55 00002F94 E875000000          <1>     call .printSecond
    56                              <1> 
    57 00002F99 8A15A2D0FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    58 00002F9F B402                <1>     mov ah, 02h
    59 00002FA1 CD21                <1>     int 21h
    60                              <1> 
    61 00002FA3 89C8                <1>     mov eax, ecx
    62 00002FA5 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    63 00002FAA C1E809              <1>     shr eax, 9
    64 00002FAD 5B                  <1>     pop rbx ;Get the year signature back
    65 00002FAE E86B000000          <1>     call .printYear
    66                              <1>     return
    13                              <2> %%_ret:
    14 00002FB3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    67                              <1> .jpnDate:
    68                              <1> ;Japan: YY/MM/DD
    69 00002FB4 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    70 00002FB9 C1E809              <1>     shr eax, 9
    71 00002FBC 5B                  <1>     pop rbx ;Get the year signature back
    72 00002FBD E85C000000          <1>     call .printYear
    73                              <1> 
    74 00002FC2 8A1579D0FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    75 00002FC8 B402                <1>     mov ah, 02h
    76 00002FCA CD21                <1>     int 21h
    77                              <1> 
    78 00002FCC 89C8                <1>     mov eax, ecx
    79 00002FCE 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    80 00002FD3 C1E805              <1>     shr eax, 5
    81 00002FD6 E833000000          <1>     call .printSecond
    82                              <1> 
    83 00002FDB 8A1560D0FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    84 00002FE1 B402                <1>     mov ah, 02h
    85 00002FE3 CD21                <1>     int 21h
    86                              <1> 
    87 00002FE5 89C8                <1>     mov eax, ecx
    88 00002FE7 251F000000          <1>     and eax, 1Fh    ;Save day bits
    89 00002FEC E81D000000          <1>     call .printSecond
    90                              <1>     return
    13                              <2> %%_ret:
    14 00002FF1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    91                              <1> 
    92                              <1> ;Each of these require eax setup correctly
    93                              <1> .printFirst:
    94 00002FF2 51                  <1>     push rcx
    95 00002FF3 E85F040000          <1>     call getDecimalWord
    96 00002FF8 84ED                <1>     test ch, ch ;Do we have an upper digit?
    97 00002FFA 7504                <1>     jnz .skipSpace
    98 00002FFC 88CD                <1>     mov ch, cl
    99 00002FFE B120                <1>     mov cl, " "
   100                              <1> .skipSpace:
   101 00003000 88CA                <1>     mov dl, cl
   102 00003002 B402                <1>     mov ah, 02h
   103 00003004 CD21                <1>     int 21h
   104 00003006 88EA                <1>     mov dl, ch
   105 00003008 B402                <1>     mov ah, 02h
   106 0000300A CD21                <1>     int 21h
   107 0000300C 59                  <1>     pop rcx
   108                              <1>     return
    13                              <2> %%_ret:
    14 0000300D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   109                              <1> .printSecond:
   110 0000300E 51                  <1>     push rcx
   111 0000300F E843040000          <1>     call getDecimalWord
   112 00003014 84ED                <1>     test ch, ch ;Do we have an upper digit?
   113 00003016 75E8                <1>     jnz .skipSpace
   114 00003018 88CD                <1>     mov ch, cl
   115 0000301A B130                <1>     mov cl, "0"
   116 0000301C EBE2                <1>     jmp short .skipSpace
   117                              <1> .printYear:
   118 0000301E 05BC070000          <1>     add eax, 1980
   119 00003023 51                  <1>     push rcx
   120 00003024 53                  <1>     push rbx
   121 00003025 E82D040000          <1>     call getDecimalWord ;Get unpacked in rcx
   122 0000302A 5B                  <1>     pop rbx
   123 0000302B 84DB                <1>     test bl, bl
   124 0000302D 740C                <1>     jz .twoDigitYear
   125 0000302F 88CA                <1>     mov dl, cl  ;Print the first digit
   126 00003031 B402                <1>     mov ah, 02h
   127 00003033 CD21                <1>     int 21h
   128 00003035 88EA                <1>     mov dl, ch  ;Print the second digit
   129 00003037 B402                <1>     mov ah, 02h
   130 00003039 CD21                <1>     int 21h
   131                              <1> .twoDigitYear:
   132 0000303B C1E910              <1>     shr ecx, 10h    ;Get high word low
   133 0000303E 88CA                <1>     mov dl, cl  ;Print the upper digit
   134 00003040 B402                <1>     mov ah, 02h
   135 00003042 CD21                <1>     int 21h
   136 00003044 88EA                <1>     mov dl, ch  ;Print the lower digit
   137 00003046 B402                <1>     mov ah, 02h
   138 00003048 CD21                <1>     int 21h
   139 0000304A 59                  <1>     pop rcx
   140                              <1>     return
    13                              <2> %%_ret:
    14 0000304B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> 
   142                              <1> 
   143                              <1> printTime:
   144                              <1> ;Input: eax = Packed Time
   145                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   146                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   147 0000304C 89C1                <1>     mov ecx, eax
   148 0000304E 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   149 00003053 C1E80B              <1>     shr eax, 11
   150 00003056 803DEACFFFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   151 0000305D 750B                <1>     jne .ampm
   152 0000305F E85A000000          <1>     call .printHours
   153 00003064 E831000000          <1>     call .printMinutes
   154                              <1>     return
    13                              <2> %%_ret:
    14 00003069 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   155                              <1> .ampm:
   156 0000306A 3D0C000000          <1>     cmp eax, 12
   157 0000306F 7713                <1>     ja .pm
   158 00003071 7416                <1>     je .pm2
   159 00003073 E846000000          <1>     call .printHours
   160 00003078 E81D000000          <1>     call .printMinutes
   161 0000307D B261                <1>     mov dl, "a"
   162 0000307F B402                <1>     mov ah, 02h
   163 00003081 CD21                <1>     int 21h
   164                              <1>     return
    13                              <2> %%_ret:
    14 00003083 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1> .pm:
   166 00003084 2D0C000000          <1>     sub eax, 12
   167                              <1> .pm2:
   168 00003089 E830000000          <1>     call .printHours
   169 0000308E E807000000          <1>     call .printMinutes
   170 00003093 B270                <1>     mov dl, "p"
   171 00003095 B402                <1>     mov ah, 02h
   172 00003097 CD21                <1>     int 21h
   173                              <1>     return
    13                              <2> %%_ret:
    14 00003099 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   174                              <1> .printMinutes:
   175 0000309A 8A15A3CFFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   176 000030A0 B402                <1>     mov ah, 02h
   177 000030A2 CD21                <1>     int 21h
   178                              <1> 
   179 000030A4 89C8                <1>     mov eax, ecx
   180 000030A6 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   181 000030AB C1E805              <1>     shr eax, 5
   182                              <1> .printMinutesAlt:
   183 000030AE 51                  <1>     push rcx
   184 000030AF E8A3030000          <1>     call getDecimalWord
   185 000030B4 84ED                <1>     test ch, ch ;Do we have an upper digit?
   186 000030B6 7514                <1>     jnz .skipSpace
   187 000030B8 88CD                <1>     mov ch, cl
   188 000030BA B130                <1>     mov cl, "0"
   189 000030BC EB0E                <1>     jmp short .skipSpace
   190                              <1> .printHours:
   191 000030BE 51                  <1>     push rcx
   192 000030BF E893030000          <1>     call getDecimalWord
   193 000030C4 84ED                <1>     test ch, ch ;Do we have an upper digit?
   194 000030C6 7504                <1>     jnz .skipSpace
   195 000030C8 88CD                <1>     mov ch, cl
   196 000030CA B120                <1>     mov cl, " "
   197                              <1> .skipSpace:
   198 000030CC 88CA                <1>     mov dl, cl
   199 000030CE B402                <1>     mov ah, 02h
   200 000030D0 CD21                <1>     int 21h
   201 000030D2 88EA                <1>     mov dl, ch
   202 000030D4 B402                <1>     mov ah, 02h
   203 000030D6 CD21                <1>     int 21h
   204 000030D8 59                  <1>     pop rcx
   205                              <1>     return
    13                              <2> %%_ret:
    14 000030D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   206                              <1> 
   207                              <1> 
   208                              <1> putVersionInPrompt:
   209 000030DA 488D15A7D9FFFF      <1>     lea rdx, dosVer
   210 000030E1 B409                <1>     mov ah, 09h ;Print String
   211 000030E3 CD21                <1>     int 21h
   212 000030E5 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   213 000030E7 CD21                <1>     int 21h
   214 000030E9 50                  <1>     push rax    ;Save minor version
   215 000030EA E8B0000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   216 000030EF E8C8000000          <1>     call printPackedBCD ;Print al
   217 000030F4 B22E                <1>     mov dl, "."
   218 000030F6 B402                <1>     mov ah, 02h
   219 000030F8 CD21                <1>     int 21h
   220 000030FA 58                  <1>     pop rax
   221 000030FB 88E0                <1>     mov al, ah  ;Get the minor version low
   222 000030FD E89D000000          <1>     call hexToBCD
   223 00003102 E8B5000000          <1>     call printPackedBCD
   224                              <1>     return
    13                              <2> %%_ret:
    14 00003107 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   225                              <1> putEscInPrompt:
   226 00003108 B21B                <1>     mov dl, ESC
   227 0000310A EB1D                <1>     jmp short outChar
   228                              <1> 
   229                              <1> putMoneyInPrompt:
   230 0000310C B224                <1>     mov dl, "$"
   231 0000310E EB19                <1>     jmp short outChar
   232                              <1> 
   233                              <1> putEquInPrompt:
   234 00003110 B23D                <1>     mov dl, "="
   235 00003112 EB15                <1>     jmp short outChar
   236                              <1> 
   237                              <1> putPipeInPrompt:
   238 00003114 B27C                <1>     mov dl, "|"
   239 00003116 EB11                <1>     jmp short outChar
   240                              <1> 
   241                              <1> putGTinPrompt:
   242 00003118 B23E                <1>     mov dl, ">"
   243 0000311A EB0D                <1>     jmp short outChar
   244                              <1> 
   245                              <1> putLTinPrompt:
   246 0000311C B23C                <1>     mov dl, "<"
   247 0000311E EB09                <1>     jmp short outChar
   248                              <1> 
   249                              <1> putDriveInPrompt:
   250 00003120 E8CF000000          <1>     call getCurrentDrive
   251 00003125 0441                <1>     add al, "A" ;Convert to letter
   252 00003127 88C2                <1>     mov dl, al
   253                              <1> outChar:
   254 00003129 B402                <1>     mov ah, 02h ;Echo to STDOUT
   255 0000312B CD21                <1>     int 21h
   256                              <1>     return
    13                              <2> %%_ret:
    14 0000312D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   257                              <1> putCWDInPrompt:
   258 0000312E E8C1000000          <1>     call getCurrentDrive
   259 00003133 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   260 00003135 FEC2                <1>     inc dl
   261 00003137 0441                <1>     add al, "A" ;Convert to letter
   262 00003139 B43A                <1>     mov ah, ":"
   263 0000313B 488D3D1ACFFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   264 00003142 66AB                <1>     stosw   ;Store X:, rdi+=2
   265 00003144 8A05E1CEFFFF        <1>     mov al, byte [pathSep]
   266 0000314A AA                  <1>     stosb   ;Store pathSep, inc rdi
   267 0000314B B447                <1>     mov ah, 47h ;Get Current Working Directory
   268 0000314D 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   269 00003150 CD21                <1>     int 21h
   270 00003152 721F                <1>     jc .badDrive
   271 00003154 E8B9000000          <1>     call strlen
   272 00003159 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   273                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   274 0000315F B800400000          <1>     mov eax, 4000h ;Write to handle
   275 00003164 BB01000000          <1>     mov ebx, 1  ;STDOUT
   276 00003169 488D15ECCEFFFF      <1>     lea rdx, currDirStr
   277 00003170 CD21                <1>     int 21h
   278                              <1>     return
    13                              <2> %%_ret:
    14 00003172 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   279                              <1> .badDrive:
   280                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   281 00003173 488D15D6D9FFFF      <1>     lea rdx, badDrvMsg
   282 0000317A E8A3FDFFFF          <1>     call printString
   283                              <1>     return
    13                              <2> %%_ret:
    14 0000317F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   284                              <1> 
   285                              <1> BCDtoHex:
   286                              <1> ;Converts a BCD value to a Hex byte
   287                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   288 00003180 51                  <1>     push rcx
   289 00003181 0FB6C0              <1>     movzx eax, al   ;Zero extend
   290 00003184 89C1                <1>     mov ecx, eax    ;Save al in ecx
   291 00003186 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   292 0000318B 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   293 00003191 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   294                              <1> .bth:
   295 00003194 050A000000          <1>     add eax, 10
   296 00003199 FFC9                <1>     dec ecx
   297 0000319B 75F7                <1>     jnz .bth
   298 0000319D 59                  <1>     pop rcx
   299 0000319E C3                  <1>     ret
   300                              <1> 
   301                              <1> hexToBCD:
   302                              <1> ;Converts a Hex byte into two BCD digits
   303                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   304 0000319F 51                  <1>     push rcx
   305 000031A0 0FB6C0              <1>     movzx eax, al   ;Zero extend
   306 000031A3 31C9                <1>     xor ecx, ecx
   307                              <1> .htb0:
   308 000031A5 3D0A000000          <1>     cmp eax, 10
   309 000031AA 7209                <1>     jb .htb1
   310 000031AC 2D0A000000          <1>     sub eax, 10
   311 000031B1 FFC1                <1>     inc ecx
   312 000031B3 EBF0                <1>     jmp short .htb0
   313                              <1> .htb1:
   314 000031B5 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   315 000031B8 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   316 000031BA 59                  <1>     pop rcx
   317 000031BB C3                  <1>     ret
   318                              <1> 
   319                              <1> printPackedBCD:
   320                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   321                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   322                              <1> ;Preserves all registers
   323 000031BC 50                  <1>     push rax
   324 000031BD 52                  <1>     push rdx
   325 000031BE 88C4                <1>     mov ah, al
   326 000031C0 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   327 000031C2 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   328 000031C5 7508                <1>     jnz .upperNybble
   329 000031C7 B220                <1>     mov dl, " "
   330 000031C9 B402                <1>     mov ah, 02h
   331 000031CB CD21                <1>     int 21h
   332 000031CD EB0E                <1>     jmp short .lowerNybble
   333                              <1> .upperNybble:
   334 000031CF 50                  <1>     push rax
   335 000031D0 C0EC04              <1>     shr ah, 4
   336 000031D3 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   337 000031D6 88E2                <1>     mov dl, ah
   338 000031D8 B402                <1>     mov ah, 02h ;Print DL
   339 000031DA CD21                <1>     int 21h
   340 000031DC 58                  <1>     pop rax
   341                              <1> .lowerNybble:
   342 000031DD 0430                <1>     add al, "0"
   343 000031DF 88C2                <1>     mov dl, al
   344 000031E1 B402                <1>     mov ah, 02h ;Print DL
   345 000031E3 CD21                <1>     int 21h
   346 000031E5 5A                  <1>     pop rdx
   347 000031E6 58                  <1>     pop rax
   348                              <1>     return
    13                              <2> %%_ret:
    14 000031E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   349                              <1> 
   350                              <1> setDrive:
   351                              <1> ;Input: dl = 0 based Drive number to set to
   352                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   353                              <1> ;AX trashed.
   354 000031E8 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   355 000031EA CD21                <1>     int 21h 
   356 000031EC E803000000          <1>     call getCurrentDrive
   357 000031F1 38D0                <1>     cmp al, dl  ;Is this the same drive?
   358                              <1>     return
    13                              <2> %%_ret:
    14 000031F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   359                              <1> getCurrentDrive:
   360                              <1> ;Returns the 0 based current drive in al
   361 000031F4 B419                <1>     mov ah, 19h
   362 000031F6 CD21                <1>     int 21h
   363                              <1>     return
    13                              <2> %%_ret:
    14 000031F8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   364                              <1> 
   365                              <1> strcpy:
   366                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   367                              <1> ;rsi -> Source
   368                              <1> ;rdi -> Destination
   369 000031F9 51                  <1>     push rcx
   370 000031FA 57                  <1>     push rdi
   371 000031FB 4889F7              <1>     mov rdi, rsi
   372 000031FE E80F000000          <1>     call strlen ;Get the length of the string in rsi
   373 00003203 5F                  <1>     pop rdi
   374 00003204 F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   375 00003206 59                  <1>     pop rcx
   376                              <1>     return
    13                              <2> %%_ret:
    14 00003207 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   377                              <1> 
   378                              <1> strcpy2:
   379                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   380                              <1> ;rsi -> Source
   381                              <1> ;rdi -> Destination
   382 00003208 56                  <1>     push rsi
   383 00003209 57                  <1>     push rdi
   384 0000320A E8EAFFFFFF          <1>     call strcpy 
   385 0000320F 5F                  <1>     pop rdi
   386 00003210 5E                  <1>     pop rsi
   387                              <1>     return
    13                              <2> %%_ret:
    14 00003211 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   388                              <1> 
   389                              <1> strlen:
   390                              <1> ;Gets the length of a ASCIIZ string
   391                              <1> ;Input: rdi = Source buffer
   392                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   393 00003212 50                  <1>     push rax
   394 00003213 B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   395 00003218 CD2F                <1>     int 2fh
   396 0000321A 58                  <1>     pop rax
   397                              <1>     return
    13                              <2> %%_ret:
    14 0000321B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> ucChar:
   400                              <1> ;Input: al = Char to uppercase
   401                              <1> ;Output: al = Adjusted char 
   402 0000321C 53                  <1>     push rbx
   403 0000321D 4889E3              <1>     mov rbx, rsp    ;Save the stack ptr
   404 00003220 50                  <1>     push rax    ;Push the char twice on the stack
   405 00003221 50                  <1>     push rax
   406 00003222 B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   407 00003227 CD2F                <1>     int 2fh         ;Returns the processed char in al
   408 00003229 4889DC              <1>     mov rsp, rbx    ;Return the stack ptr to where it was
   409 0000322C 5B                  <1>     pop rbx
   410                              <1>     return
    13                              <2> %%_ret:
    14 0000322D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   411                              <1> 
   412                              <1> skipDelimiters:
   413                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   414                              <1> ; command delimiters but a subset thereof. 
   415                              <1> ;These are the same across all codepages.
   416                              <1> ;Input: rsi must point to the start of the data string
   417                              <1> ;Output: rsi points to the first non-delimiter char
   418 0000322E 50                  <1>     push rax
   419                              <1> .l1:
   420 0000322F AC                  <1>     lodsb
   421 00003230 E807000000          <1>     call isALdelimiter
   422 00003235 74F8                <1>     jz .l1
   423                              <1> .exit:
   424 00003237 58                  <1>     pop rax
   425 00003238 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   426                              <1>     return
    13                              <2> %%_ret:
    14 0000323B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   427                              <1> 
   428                              <1> isALdelimiter:
   429                              <1> ;Returns: ZF=NZ if al is not a command separator 
   430                              <1> ;         ZF=ZE if al is a command separator
   431 0000323C 3C20                <1>     cmp al, " "
   432                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000323E 74(3B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   433 00003240 3C3B                <1>     cmp al, ";"
   434                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003242 74(3B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   435 00003244 3C3D                <1>     cmp al, "="
   436                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003246 74(3B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   437 00003248 3C2C                <1>     cmp al, ","
   438                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000324A 74(3B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   439 0000324C 3C09                <1>     cmp al, TAB
   440                              <1>     return
    13                              <2> %%_ret:
    14 0000324E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   441                              <1> 
   442                              <1> printPrompt:
   443 0000324F 66813DD1CDFFFFFFFF  <1>     cmp word [promptPtr], -1
   444 00003258 750B                <1>     jne .validPrompt
   445                              <1>     ;Here we print the default prompt
   446 0000325A E8CFFEFFFF          <1>     call putCWDInPrompt
   447 0000325F E8B4FEFFFF          <1>     call putGTinPrompt
   448                              <1>     return
    13                              <2> %%_ret:
    14 00003264 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   449                              <1> .validPrompt:
   450                              <1>     return
    13                              <2> %%_ret:
    14 00003265 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   451                              <1> 
   452                              <1> clearCommandState:
   453                              <1> ;Clears the command state
   454 00003266 488D3D37CEFFFF      <1>     lea rdi, cmdStatePtr
   455 0000326D B90D000000          <1>     mov ecx, cmdStateL
   456 00003272 31C0                <1>     xor eax, eax
   457 00003274 F3AA                <1>     rep stosb
   458 00003276 C70527CEFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   458 0000327F FF                  <1>
   459                              <1>     return
    13                              <2> %%_ret:
    14 00003280 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   460                              <1> 
   461                              <1> clearCommandLineState:
   462                              <1> ;Clears the command line state after a 0Dh encountered
   463 00003281 488D3D17CEFFFF      <1>     lea rdi, cmdLineStatePtr
   464 00003288 B912000000          <1>     mov ecx, cmdLineStateL
   465 0000328D 31C0                <1>     xor eax, eax
   466 0000328F F3AA                <1>     rep stosb
   467 00003291 C70505CEFFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   467 0000329A FF                  <1>
   468 0000329B C70502CEFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   468 000032A4 FF                  <1>
   469                              <1>     return
    13                              <2> %%_ret:
    14 000032A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   470                              <1> 
   471                              <1> asciiFilenameToFCB:
   472                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   473                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   474                              <1> ;Also doesn't check if chars are valid
   475                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   476                              <1> ;Name is space padded.
   477                              <1> ;Input: rsi = ASCII string buffer
   478                              <1> ;       rdi = FCB name buffer
   479                              <1> ;Output: al = Char that terminated the source string 
   480 000032A6 53                  <1>     push rbx    
   481 000032A7 57                  <1>     push rdi
   482 000032A8 B90B000000          <1>     mov ecx, 11
   483 000032AD B020                <1>     mov al, " "
   484 000032AF F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   485 000032B1 5F                  <1>     pop rdi
   486 000032B2 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   487                              <1>     ;Preprocess for Dir Searches
   488 000032B5 803E2E              <1>     cmp byte [rsi], "."
   489 000032B8 7509                <1>     jne .processName
   490 000032BA A4                  <1>     movsb   ;Store the first dot
   491 000032BB 803E2E              <1>     cmp byte [rsi], "."
   492 000032BE 752C                <1>     jne .exitBadChar
   493 000032C0 A4                  <1>     movsb
   494 000032C1 EB29                <1>     jmp short .exitBadChar
   495                              <1> .processName:
   496 000032C3 AC                  <1>     lodsb   ;Get the char in al
   497 000032C4 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   498 000032C6 7426                <1>     jz .exit
   499 000032C8 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   500 000032CA 7407                <1>     je .extSpace
   501 000032CC 3C2E                <1>     cmp al, "."
   502 000032CE 740C                <1>     je .ext
   503 000032D0 AA                  <1>     stosb   ;Store the char
   504 000032D1 EBF0                <1>     jmp short .processName
   505                              <1> .extSpace:
   506                              <1> ;Now we scan for a period in the name
   507 000032D3 AC                  <1>     lodsb   ;Get a char and increase rsi
   508 000032D4 84C0                <1>     test al, al
   509 000032D6 7416                <1>     jz .exit
   510 000032D8 3C2E                <1>     cmp al, "."     ;If al is not a period...
   511 000032DA 75F7                <1>     jne .extSpace   ; keep searching
   512                              <1> .ext:
   513 000032DC 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   514                              <1> .processExt:
   515 000032E0 AC                  <1>     lodsb
   516 000032E1 84C0                <1>     test al, al
   517 000032E3 7409                <1>     jz .exit
   518 000032E5 3C20                <1>     cmp al, " "
   519 000032E7 7405                <1>     je .exit
   520 000032E9 AA                  <1>     stosb
   521 000032EA EBF4                <1>     jmp short .processExt
   522                              <1> .exitBadChar:
   523 000032EC 30C0                <1>     xor al, al  ;Return a null terminator
   524                              <1> .exit:
   525 000032EE 5B                  <1>     pop rbx
   526                              <1>     return
    13                              <2> %%_ret:
    14 000032EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   527                              <1> 
   528                              <1> findLastPathComponant:
   529                              <1> ;Finds the last path componant of an ASCIIZ path string
   530                              <1> ;Input: rdi -> Head of the path to find last componant on
   531                              <1> ;Output: rdi -> Start of the last componant
   532 000032F0 50                  <1>     push rax
   533 000032F1 51                  <1>     push rcx
   534 000032F2 31C9                <1>     xor ecx, ecx
   535 000032F4 FFC9                <1>     dec ecx
   536 000032F6 31C0                <1>     xor eax, eax
   537 000032F8 F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   538 000032FA F7D1                <1>     not ecx     ;This gets the count of chars  
   539 000032FC 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   540 000032FF 8A0526CDFFFF        <1>     mov al, byte [pathSep]
   541 00003305 FD                  <1>     std
   542 00003306 F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   543 00003308 FC                  <1>     cld
   544 00003309 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   545 0000330B 48FFC7              <1>     inc rdi     ;Point at pathsep
   546                              <1> .exit:
   547 0000330E 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   548 00003311 59                  <1>     pop rcx
   549 00003312 58                  <1>     pop rax
   550                              <1>     return
    13                              <2> %%_ret:
    14 00003313 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   551                              <1> 
   552                              <1> FCBToAsciiz:
   553                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   554                              <1> ;Name is space padded too
   555                              <1> ;Input: rsi = FCB name buffer
   556                              <1> ;       rdi = ASCIIZ string buffer
   557 00003314 B908000000          <1>     mov ecx, 8
   558 00003319 F3A4                <1>     rep movsb   ;Move the name over
   559                              <1> .scanNameSpace:
   560 0000331B 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   561 0000331F 750D                <1>     jne .ext
   562 00003321 48FFCF              <1>     dec rdi
   563 00003324 FFC1                <1>     inc ecx
   564 00003326 81F908000000        <1>     cmp ecx, 8
   565 0000332C 72ED                <1>     jb .scanNameSpace
   566                              <1> .ext:
   567 0000332E 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   568 00003333 7506                <1>     jne .validExt
   569 00003335 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   570 00003339 7415                <1>     je .exit
   571                              <1> .validExt:
   572 0000333B B02E                <1>     mov al, "." ;We have a valid extension, store a period
   573 0000333D AA                  <1>     stosb
   574 0000333E B903000000          <1>     mov ecx, 3
   575 00003343 F3A4                <1>     rep movsb   ;Move the three extension chars over
   576                              <1> .scanExtSpace:
   577 00003345 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   578 00003349 7505                <1>     jne .exit
   579 0000334B 48FFCF              <1>     dec rdi
   580 0000334E EBF5                <1>     jmp short .scanExtSpace
   581                              <1> .exit:
   582 00003350 31C0                <1>     xor eax, eax
   583 00003352 AA                  <1>     stosb   ;Store a null at the end
   584                              <1>     return
    13                              <2> %%_ret:
    14 00003353 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   585                              <1> 
   586                              <1> cpDelimOrCtrlStringToBufz:
   587                              <1> ;Copy a delimited or control char terminated string to a buffer
   588                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   589                              <1> ;       rdi -> Buffer to store null terminated string in
   590                              <1> ;Output: rsi -> First char past string end
   591                              <1> ;       rdi -> One char past null terminator on string buffer
   592 00003354 C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   593                              <1> .lp:
   594 00003357 AC                  <1>     lodsb
   595 00003358 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here
   596 0000335A 760A                <1>     jbe .exit
   597 0000335C E8DBFEFFFF          <1>     call isALdelimiter
   598 00003361 7403                <1>     je .exit
   599 00003363 AA                  <1>     stosb
   600 00003364 EBF1                <1>     jmp short .lp
   601                              <1> .exit:
   602 00003366 31C0                <1>     xor eax, eax
   603 00003368 AA                  <1>     stosb   ;Store a null terminator
   604                              <1>     return
    13                              <2> %%_ret:
    14 00003369 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   605                              <1> 
   606                              <1> 
   607                              <1> cpDelimPathToBufz:
   608                              <1> ;Copy a delimited path into buffer and null terminate.
   609                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   610                              <1> ;       rdi -> Buffer to store null terminated path in
   611                              <1> ;Output: rsi -> First char past pathname delimiter
   612                              <1> ;       rdi -> One char past null terminator on pathname buffer
   613 0000336A 53                  <1>     push rbx
   614 0000336B 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   615 0000336E C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   616                              <1> .lp:
   617 00003371 AC                  <1>     lodsb   ;Get the char
   618 00003372 3C0D                <1>     cmp al, CR
   619 00003374 7412                <1>     je .gotRedirPath
   620 00003376 E8C1FEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   621 0000337B 740B                <1>     jz .gotRedirPath 
   622 0000337D 3A05A9CCFFFF        <1>     cmp al, byte [switchChar]
   623 00003383 7403                <1>     je .gotRedirPath
   624 00003385 AA                  <1>     stosb   ;Store this char and loop next char
   625 00003386 EBE9                <1>     jmp short .lp
   626                              <1> .gotRedirPath:
   627 00003388 50                  <1>     push rax    ;Save the char on stack
   628 00003389 30C0                <1>     xor al, al  ;Get null terminator char
   629 0000338B 4829FB              <1>     sub rbx, rdi
   630 0000338E 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   631 00003395 7412                <1>     je .notColon
   632 00003397 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   633 0000339E 7409                <1>     je .notColon
   634 000033A0 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   635 000033A4 7503                <1>     jne .notColon
   636 000033A6 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   637                              <1> .notColon:
   638 000033A9 AA                  <1>     stosb   ;Store the null terminator for the redir path
   639 000033AA 58                  <1>     pop rax ;Get back the char in al
   640 000033AB 5B                  <1>     pop rbx
   641                              <1>     return
    13                              <2> %%_ret:
    14 000033AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   642                              <1> 
   643                              <1> buildCommandPath:
   644                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   645 000033AD 0FB605F8CCFFFF      <1>     movzx eax, byte [arg1Off]
   646 000033B4 4C8B0554CCFFFF      <1>     mov r8, [pspPtr]
   647 000033BB 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   648 000033C2 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   649                              <1> copyArgumentToSearchSpec:
   650                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   651                              <1> ; and null terminates
   652 000033C5 488D3D6FD0FFFF      <1>     lea rdi, searchSpec
   653 000033CC E899FFFFFF          <1>     call cpDelimPathToBufz
   654                              <1>     return
    13                              <2> %%_ret:
    14 000033D1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   655                              <1> 
   656                              <1> scanForWildcards:
   657                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   658                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   659 000033D2 50                  <1>     push rax
   660 000033D3 56                  <1>     push rsi
   661                              <1> .lp:
   662 000033D4 AC                  <1>     lodsb
   663 000033D5 3C3F                <1>     cmp al, "?"
   664 000033D7 740A                <1>     je .exit
   665 000033D9 3C2A                <1>     cmp al, "*"
   666 000033DB 7406                <1>     je .exit
   667 000033DD 84C0                <1>     test al, al
   668 000033DF 75F3                <1>     jnz .lp
   669 000033E1 FEC0                <1>     inc al  ;This will clear the ZF
   670                              <1> .exit:
   671 000033E3 5E                  <1>     pop rsi
   672 000033E4 58                  <1>     pop rax
   673                              <1>     return
    13                              <2> %%_ret:
    14 000033E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   674                              <1> 
   675                              <1> printDecimalWord:
   676                              <1> ;Takes qword in rax and print it's decimal representation
   677                              <1> ;Takes the qword in eax and prints its decimal representation
   678 000033E6 31C9                <1>     xor ecx, ecx
   679 000033E8 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   680 000033EA 85C0                <1>     test eax, eax
   681 000033EC 750C                <1>     jnz .notZero
   682 000033EE B930000000          <1>     mov ecx, "0"
   683 000033F3 BD01000000          <1>     mov ebp, 1  ;Print one digit
   684 000033F8 EB3E                <1>     jmp short .dpfb2
   685                              <1> .notZero:
   686 000033FA 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   687 000033FC BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   688                              <1> .dpfb0:
   689 00003401 FFC5                <1>     inc ebp
   690 00003403 81FD08000000        <1>     cmp ebp, 8
   691 00003409 7206                <1>     jb .dpfb00
   692 0000340B 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   693 0000340F EB04                <1>     jmp short .dpfb01
   694                              <1> .dpfb00:
   695 00003411 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   696                              <1> .dpfb01:
   697 00003415 31D2                <1>     xor edx, edx
   698 00003417 48F7F6              <1>     div rsi
   699 0000341A 80C230              <1>     add dl, '0'
   700 0000341D 80FA39              <1>     cmp dl, '9'
   701 00003420 7603                <1>     jbe .dpfb1
   702 00003422 80C207              <1>     add dl, 'A'-'0'-10
   703                              <1> .dpfb1:
   704 00003425 81FD08000000        <1>     cmp ebp, 8
   705 0000342B 7204                <1>     jb .dpfb10
   706 0000342D 88D3                <1>     mov bl, dl ;Add the bottom bits
   707 0000342F EB02                <1>     jmp short .dpfb11
   708                              <1> .dpfb10:
   709 00003431 88D1                <1>     mov cl, dl    ;Save remainder byte
   710                              <1> .dpfb11:
   711 00003433 4885C0              <1>     test rax, rax
   712 00003436 75C9                <1>     jnz .dpfb0
   713                              <1> .dpfb2:
   714 00003438 81FD08000000        <1>     cmp ebp, 8
   715 0000343E 7208                <1>     jb .dpfb20
   716 00003440 88DA                <1>     mov dl, bl
   717 00003442 48C1EB08            <1>     shr rbx, 8
   718 00003446 EB06                <1>     jmp short .dpfb21
   719                              <1> .dpfb20:
   720 00003448 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   721 0000344A 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   722                              <1> .dpfb21:
   723 0000344E B402                <1>     mov ah, 02h
   724 00003450 CD21                <1>     int 21h
   725 00003452 FFCD                <1>     dec ebp
   726 00003454 75E2                <1>     jnz .dpfb2
   727                              <1>     return
    13                              <2> %%_ret:
    14 00003456 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   728                              <1> 
   729                              <1> getDecimalWord:
   730                              <1> ;Works on MAX A dword in eax
   731                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   732 00003457 31C9                <1>     xor ecx, ecx
   733 00003459 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   734 0000345B BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   735                              <1> .dpfb0:
   736 00003460 FFC5                <1>     inc ebp
   737 00003462 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   738 00003466 31D2                <1>     xor edx, edx
   739 00003468 48F7F3              <1>     div rbx
   740 0000346B 80C230              <1>     add dl, '0'
   741 0000346E 80FA39              <1>     cmp dl, '9'
   742 00003471 7603                <1>     jbe .dpfb1
   743 00003473 80C207              <1>     add dl, 'A'-'0'-10
   744                              <1> .dpfb1:
   745 00003476 88D1                <1>     mov cl, dl    ;Save remainder byte
   746 00003478 4885C0              <1>     test rax, rax
   747 0000347B 75E3                <1>     jnz .dpfb0
   748                              <1>     return
    13                              <2> %%_ret:
    14 0000347D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   749                              <1> 
   750                              <1> freezePC:
   751 0000347E 488D150CD9FFFF      <1>     lea rdx, memBad1
   752 00003485 B409                <1>     mov ah, 09h
   753 00003487 CD21                <1>     int 21h
   754                              <1> .altEP:
   755 00003489 488D152AD9FFFF      <1>     lea rdx, memBad3
   756 00003490 B409                <1>     mov ah, 09h
   757 00003492 CD21                <1>     int 21h
   758                              <1> .lp:
   759 00003494 F390                <1>     pause
   760 00003496 F4                  <1>     hlt
   761 00003497 EBFB                <1>     jmp short .lp
   762                              <1> 
   763                              <1> setDTA:
   764 00003499 50                  <1>     push rax
   765 0000349A 52                  <1>     push rdx
   766 0000349B 488D151FCCFFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   767 000034A2 B8001A0000          <1>     mov eax, 1A00h
   768 000034A7 CD21                <1>     int 21h
   769 000034A9 5A                  <1>     pop rdx
   770 000034AA 58                  <1>     pop rax
   771                              <1>     return
    13                              <2> %%_ret:
    14 000034AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   772                              <1> 
   773                              <1> getDTA:
   774 000034AC 488D150ECCFFFF      <1>     lea rdx, cmdFFBlock
   775                              <1>     return
    13                              <2> %%_ret:
    14 000034B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   776                              <1> 
   777                              <1> ;-------------------------------
   778                              <1> ; Environment utility functions
   779                              <1> ;-------------------------------
   780                              <1> 
   781                              <1> cmpEnvVar:
   782                              <1> ;Checks that we have found the environment variable we are looking for.
   783                              <1> ;Input: rsi -> Environment var to verify the name of
   784                              <1> ;       rdi -> Environment var name to compare against
   785                              <1> ;       ecx = Length of the environment variable
   786                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
   787 000034B4 56                  <1>     push rsi
   788 000034B5 57                  <1>     push rdi
   789 000034B6 51                  <1>     push rcx
   790 000034B7 F3A6                <1>     rep cmpsb
   791 000034B9 59                  <1>     pop rcx
   792 000034BA 5F                  <1>     pop rdi
   793 000034BB 5E                  <1>     pop rsi
   794                              <1>     return
    13                              <2> %%_ret:
    14 000034BC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   795                              <1> 
   796                              <1> checkEnvGoodAndGet:
   797                              <1> ;Gets the env ptr and checks that it is double null terminated.
   798                              <1> ;Output:
   799                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
   800                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
   801                              <1> ;           rsi -> Environment pointer
   802 000034BD 50                  <1>     push rax
   803 000034BE 51                  <1>     push rcx
   804 000034BF 57                  <1>     push rdi
   805 000034C0 4150                <1>     push r8
   806 000034C2 4C8B0546CBFFFF      <1>     mov r8, qword [pspPtr]
   807 000034C9 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
   808 000034CD 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
   809 000034D0 741A                <1>     jz .badExit
   810 000034D2 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
   811 000034D5 C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
   812                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
   813 000034D8 31C0                <1>     xor eax, eax
   814                              <1> .pathNulScan:
   815 000034DA F2AE                <1>     repne scasb
   816 000034DC 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
   817 000034DE 740C                <1>     jz .badExit
   818 000034E0 3807                <1>     cmp byte [rdi], al  ;Is char two null?
   819 000034E2 75F6                <1>     jne .pathNulScan    ;If not, keep searching
   820 000034E4 31C0                <1>     xor eax, eax
   821 000034E6 FFC0                <1>     inc eax ;Clear the ZF
   822 000034E8 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
   823                              <1> .badExit:
   824 000034EC 4158                <1>     pop r8
   825 000034EE 5F                  <1>     pop rdi
   826 000034EF 59                  <1>     pop rcx
   827 000034F0 58                  <1>     pop rax
   828                              <1>     return
    13                              <2> %%_ret:
    14 000034F1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   829                              <1> 
   830                              <1> allocEnv:
   831                              <1> ;Allocates space in the environment. Assumes environment is good.
   832                              <1> ;Input: ecx = Number of bytes to allocate
   833                              <1> ;Output: CF=NC: rsi -> Start of alloc region
   834                              <1> ;        CF=CY: Not enough space to alloc
   835                              <1> 
   836                              <1> freeEnv:
   837                              <1> ;Frees space in the environment by zeroing all allocated chars.
   838                              <1> ;Input: rdi -> Byte to start zeroing from.
   839                              <1> ;Output: All bytes from rdi to first null zero. rdi trashed.
   840 000034F2 50                  <1>     push rax
   841 000034F3 31C0                <1>     xor eax, eax
   842                              <1> .lp:
   843 000034F5 3807                <1>     cmp byte [rdi], al
   844 000034F7 7403                <1>     je .exit
   845 000034F9 AA                  <1>     stosb
   846 000034FA EBF9                <1>     jmp short .lp
   847                              <1> .exit:
   848 000034FC 58                  <1>     pop rax
   849                              <1>     return
    13                              <2> %%_ret:
    14 000034FD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   850                              <1> 
   851                              <1> findEnvSpace:
   852                              <1> ;Searches the environment for space
    19                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 000034FE 53                  <1>     push rbx
    25 000034FF 51                  <1>     push rcx
    26 00003500 52                  <1>     push rdx
    27 00003501 57                  <1>     push rdi
    28 00003502 56                  <1>     push rsi
    29 00003503 FC                  <1>     cld         ;Make String ops go forward
    30                              <1> 
    31 00003504 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00003507 488D1507D3FFFF      <1>     lea rdx, crlf
    33 0000350E E80FFAFFFF          <1>     call printString
    34                              <1> 
    35 00003513 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    36 00003519 B90C000000          <1>     mov ecx, 0Ch
    37 0000351E 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    38 00003520 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    39 00003523 480FB7FF            <1>     movzx rdi, di
    40 00003527 4889FA              <1>     mov rdx, rdi    ;Copy error code
    41 0000352A 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    42 0000352E 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    43 00003531 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    44 00003534 488D152D010000      <1>     lea rdx, qword [.errorMsgTable]
    45 0000353B 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    46 0000353F E8DEF9FFFF          <1>     call printString     ;Call DOS to print first part of message
    47                              <1> 
    48 00003544 488D150E020000      <1>     lea rdx, qword [.readmsg]
    49 0000354B 488D3D16020000      <1>     lea rdi, qword [.writemsg]
    50 00003552 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    51 00003555 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    52 00003559 E8C4F9FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
    53                              <1> 
    54 0000355E F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    55 00003561 0F85E7000000        <1>     jnz .charError
    56                              <1> ;Disk error continues here
    57 00003567 488D15E4010000      <1>     lea rdx, qword [.drive] ;Drive message
    58 0000356E E8AFF9FFFF          <1>     call printString
    59 00003573 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    60 00003575 80C241              <1>     add dl, "A" ;Add ASCII code
    61 00003578 B402                <1>     mov ah, 02h ;Print char in dl
    62 0000357A CD21                <1>     int 21h
    63                              <1> .userInput:
    64 0000357C E89AF9FFFF          <1>     call printCRLF  ;Print new line
    65                              <1> ;Abort, Retry, Ignore, Fail is word order
    66                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    67                              <1> .userAbort:
    68                              <1> ;Abort is always an option
    69 00003581 488D15EF010000      <1>     lea rdx, qword [.abortmsg]
    70 00003588 E895F9FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
    71                              <1> .userRetry:
    72 0000358D F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    73 00003590 7418                <1>     jz .userIgnore    ;If clear, dont print message
    74 00003592 488D15F6010000      <1>     lea rdx, qword [.betweenMsg]
    75 00003599 E884F9FFFF          <1>     call printString
    76 0000359E 488D15DF010000      <1>     lea rdx, qword [.retrymsg]
    77 000035A5 E878F9FFFF          <1>     call printString
    78                              <1> .userIgnore:
    79 000035AA F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    80 000035AD 7418                <1>     jz .userFail
    81 000035AF 488D15D9010000      <1>     lea rdx, qword [.betweenMsg]
    82 000035B6 E867F9FFFF          <1>     call printString
    83 000035BB 488D15BB010000      <1>     lea rdx, qword [.ignoremsg]
    84 000035C2 E85BF9FFFF          <1>     call printString
    85                              <1> .userFail:
    86 000035C7 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    87 000035CA 7418                <1>     jz .userMsgEnd
    88 000035CC 488D15BC010000      <1>     lea rdx, qword [.betweenMsg]
    89 000035D3 E84AF9FFFF          <1>     call printString
    90 000035D8 488D15AB010000      <1>     lea rdx, qword [.failmsg]
    91 000035DF E83EF9FFFF          <1>     call printString
    92                              <1> .userMsgEnd:
    93 000035E4 488D15A7010000      <1>     lea rdx, qword [.endMsg]
    94 000035EB E832F9FFFF          <1>     call printString
    95                              <1> ;Get user input now 
    96 000035F0 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
    97 000035F2 488D3D9C010000      <1>     lea rdi, qword [.responses] ;Go to start of string
    98 000035F9 B401                <1>     mov ah, 01h ;STDIN without Console Echo
    99 000035FB CD21                <1>     int 21h ;Get char in al
   100 000035FD 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   101 000035FF 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   102 00003601 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   103                              <1> .uip1:
   104 00003603 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   105 00003604 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   106 00003606 FFC1                <1>     inc ecx
   107 00003608 81F904000000        <1>     cmp ecx, 4
   108 0000360E 75F3                <1>     jne .uip1
   109 00003610 E967FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   110                              <1> .validInput:
   111 00003615 E801F9FFFF          <1>     call printCRLF   ;Note the input was accepted
   112 0000361A 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   113                              <1> ;Now check if the input is permitted
   114 0000361C 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   115 0000361E 7427                <1>     je .cehExit
   116 00003620 84C0                <1>     test al, al ;Check if 0 => Ignore
   117 00003622 740F                <1>     je .viIgnore
   118 00003624 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   119 00003626 7416                <1>     je .viRetry
   120                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   121 00003628 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   122 0000362B 0F844BFFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   123 00003631 EB14                <1>     jmp short .cehExit
   124                              <1> .viIgnore:
   125 00003633 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   126 00003636 0F8440FFFFFF        <1>     jz .userInput
   127 0000363C EB09                <1>     jmp short .cehExit
   128                              <1> .viRetry:
   129 0000363E F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   130 00003641 0F8435FFFFFF        <1>     jz .userInput
   131                              <1> .cehExit:
   132 00003647 5E                  <1>     pop rsi
   133 00003648 5F                  <1>     pop rdi
   134 00003649 5A                  <1>     pop rdx
   135 0000364A 59                  <1>     pop rcx
   136 0000364B 5B                  <1>     pop rbx
   137 0000364C 48CF                <1>     iretq
   138                              <1> .charError:
   139 0000364E B908000000          <1>     mov ecx, 8  ;8 chars in device name
   140 00003653 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   141                              <1> .ce1:
   142 0000365A AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   143 0000365B 88C2                <1>     mov dl, al  ;Move char into dl
   144 0000365D B402                <1>     mov ah, 02h
   145 0000365F CD21                <1>     int 21h ;Print char
   146 00003661 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   147 00003663 E914FFFFFF          <1>     jmp .userInput
   148                              <1> 
   149                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   150 00003668 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   150 00003671 746563742024202020  <1>
   151 0000367A 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   151 00003683 6E6974202420202020  <1>
   152 0000368C 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   152 00003695 202420202020202020  <1>
   153 0000369E 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   153 000036A7 6F6D6D616E64202420  <1>
   154 000036B0 446174612024202020- <1>             db "Data $            "       ;Error 4
   154 000036B9 202020202020202020  <1>
   155 000036C2 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   155 000036CB 737420242020202020  <1>
   156 000036D4 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   156 000036DD 202020202020202020  <1>
   157 000036E6 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   157 000036EF 656469612024202020  <1>
   158 000036F8 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   158 00003701 7420466F756E642024  <1>
   159 0000370A 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   159 00003713 706572202420202020  <1>
   160 0000371C 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   160 00003725 6C7420242020202020  <1>
   161 0000372E 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   161 00003737 742024202020202020  <1>
   162 00003740 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   162 00003749 61696C757265202420  <1>
   163                              <1> 
   164 00003752 64726976652024      <1> .drive      db "drive $"
   165 00003759 6572726F7220726561- <1> .readmsg    db "error reading $"
   165 00003762 64696E672024        <1>
   166 00003768 6572726F7220777269- <1> .writemsg   db "error writing $"
   166 00003771 74696E672024        <1>
   167 00003777 41626F727424        <1> .abortmsg   db "Abort$" 
   168 0000377D 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   169 00003784 526574727924        <1> .retrymsg   db "Retry$"
   170 0000378A 4661696C24          <1> .failmsg    db "Fail$"
   171 0000378F 2C2024              <1> .betweenMsg db ", $"
   172 00003792 3F2024              <1> .endMsg     db "? $"
   173 00003795 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   174                              <1> 
   175                              <1> int23h:
   176 00003799 F6058DC8FFFFFF      <1>     test byte [permaSwitch], -1
   177 000037A0 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   178                              <1>     ;Else, we juggle parent PSP's
   179 000037A2 50                  <1>     push rax
   180 000037A3 53                  <1>     push rbx
   181 000037A4 488B056CC8FFFF      <1>     mov rax, qword [realParent]
   182 000037AB 488B1D5DC8FFFF      <1>     mov rbx, qword [pspPtr]
   183 000037B2 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   184 000037B6 5B                  <1>     pop rbx
   185 000037B7 58                  <1>     pop rax
   186                              <1> .exit:
   187 000037B8 F9                  <1>     stc     ;Set CF to kill the task
   188 000037B9 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    20                                  endOfAlloc: ;End of alloc
    21                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    22                                  Segment transient align=1 follows=.data
    23                                  ;This segment always gets ejected post load
    24                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D1508020000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    15 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    16 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    17 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    18                              <1> ;Setup Int 22h, Int 23h and Int 24h
    19 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    20 0000002F 488905(2E000000)    <1>     mov qword [parentInt22], rax
    21                              <1> 
    22 00000036 488D15(FE340000)    <1>     lea rdx, critErrorHandler
    23 0000003D 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    24 00000041 B824250000          <1>     mov eax, 2524h
    25 00000046 CD21                <1>     int 21h
    26 00000048 488D15(99370000)    <1>     lea rdx, int23h
    27 0000004F 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    28 00000053 B823250000          <1>     mov eax, 2523h
    29 00000058 CD21                <1>     int 21h
    30 0000005A 488D15(620E0000)    <1>     lea rdx, applicationReturn
    31 00000061 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    32 00000065 B822250000          <1>     mov eax, 2522h
    33 0000006A CD21                <1>     int 21h
    34                              <1> ;Get a pointer to DOS Sysvars
    35 0000006C B452                <1>     mov ah, 52h ;Get sysvars
    36 0000006E CD21                <1>     int 21h
    37 00000070 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    38                              <1> ;Call for simple internationalisation data
    39 00000077 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    40 0000007C CD21                <1>     int 21h
    41 0000007E 3CFF                <1>     cmp al, -1
    42 00000080 7412                <1>     je .skipSwitch
    43 00000082 8815(2C000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    44 00000088 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    45 0000008B 7507                <1>     jne .skipSwitch
    46 0000008D C605(2B000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    47                              <1> .skipSwitch:
    48 00000094 B800380000          <1>     mov eax, 3800h  ;Get current country data
    49 00000099 488D15(36000000)    <1>     lea rdx, ctryData
    50 000000A0 CD21                <1>     int 21h ;Write the data to the internal country table
    51                              <1> ;Now determine if this is the master copy of COMMAND.COM
    52                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    53 000000A2 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    54 000000A7 CD21                <1>     int 21h
    55 000000A9 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    56 000000AC B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    57 000000B1 CD21                <1>     int 21h
    58 000000B3 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    59 000000B6 7574                <1>     jne .skipMaster
    60                              <1> ;Ok so we are master command.com
    61                              <1> ;Now make myself the real parent
    62 000000B8 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    63 000000BF 4C8905(17000000)    <1>     mov qword [realParent], r8
    64                              <1> ;Set current Drive in COMSPEC
    65 000000C6 B800190000          <1>     mov eax, 1900h ;Get current Drive
    66 000000CB CD21                <1>     int 21h
    67 000000CD 0441                <1>     add al, "A"
    68 000000CF 8805(390E0000)      <1>     mov byte [comspecEvar.cspec], al
    69                              <1> ;Set Int 2Eh up
    70 000000D5 488D15(45170000)    <1>     lea rdx, int2Eh
    71 000000DC B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    72 000000E1 CD21                <1>     int 21h
    73                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    74                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    75 000000E3 BB0A000000          <1>     mov ebx, 10 ;Allocate 160 bytes
    76 000000E8 B800480000          <1>     mov eax, 4800h
    77 000000ED CD21                <1>     int 21h
    78 000000EF 0F821EFFFFFF        <1>     jc .exitBad
    79                              <1> ;Set master environment as mine
    80 000000F5 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    81 000000F9 488D35(310E0000)    <1>     lea rsi, masterEnv
    82 00000100 4889C7              <1>     mov rdi, rax
    83 00000103 B91E000000          <1>     mov ecx, menv_len
    84 00000108 F3A4                <1>     rep movsb   ;Copy the chars over!
    85                              <1> 
    86 0000010A 488D15(15080000)    <1>     lea rdx, crlf
    87 00000111 B409                <1>     mov ah, 09h
    88 00000113 CD21                <1>     int 21h
    89 00000115 E8(72210000)        <1>     call time
    90 0000011A E8(A9200000)        <1>     call date
    91 0000011F 488D15(15080000)    <1>     lea rdx, crlf
    92 00000126 B409                <1>     mov ah, 09h
    93 00000128 CD21                <1>     int 21h
    94 0000012A EB2E                <1>     jmp short .printInit
    95                              <1> .skipMaster:
    96 0000012C 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
    97 00000133 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
    98 0000013B 0FB605(2C000000)    <1>     movzx eax, byte [switchChar]
    99 00000142 F2AE                <1>     repne scasb
   100 00000144 67E313              <1>     jecxz .printInit
   101 00000147 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
   102 0000014A E8(1C320000)        <1>     call ucChar
   103 0000014F 3C50                <1>     cmp al, "P" ;Is it permanent switch?
   104 00000151 7507                <1>     jne .printInit
   105 00000153 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
   106                              <1> .printInit:
   107 0000015A 488D1D(BC370000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
   108                              <1> ;Finish by printing INIT string.
   109 00000161 53                  <1>     push rbx
   110 00000162 488D153A000000      <1>     lea rdx, initString
   111 00000169 B409                <1>     mov ah, 09h
   112 0000016B CD21                <1>     int 21h ;Print init string
   113 0000016D E8(292A0000)        <1>     call version.printVersionNumber
   114 00000172 488D1560000000      <1>     lea rdx, initString2
   115 00000179 B409                <1>     mov ah, 09h
   116 0000017B CD21                <1>     int 21h ;Print init string
   117 0000017D 5B                  <1>     pop rbx
   118                              <1>     ;Now we add the stack to the alloc and paragraph align
   119 0000017E 4881C340060000      <1>     add rbx, stackSize
   120 00000185 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   121 0000018C 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   122 00000190 48C1E304            <1>     shl rbx, 4
   123 00000194 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   124 00000197 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   125 0000019E E9(4F0E0000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   126                              <1> ;Loader Data here
   127                              <1> initString: 
   128 000001A3 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   128 000001AC 66696320436F6D7075- <1>
   128 000001B5 746572205265736561- <1>
   128 000001BE 726368285229205343- <1>
   128 000001C7 502F444F5328522920- <1>
   128 000001D0 56657273696F6E2024  <1>
   129                              <1> initString2:
   130 000001D9 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",CR,LF,"$"
   130 000001E2 202020284329436F70- <1>
   130 000001EB 797269676874205363- <1>
   130 000001F4 69656E746966696320- <1>
   130 000001FD 436F6D707574657220- <1>
   130 00000206 526573656172636820- <1>
   130 0000020F 323032342E0D0A24    <1>
   131 00000217 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   131 00000220 20444F532076657273- <1>
   131 00000229 696F6E0D0A24        <1>
    25                                  
    26                                  stackSize equ 200*8    ;200 QWORD stack
    26          ------------------       info: assembly required 1+4+2 passes

