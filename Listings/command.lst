     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber             db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector         dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster     db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSectorsPerClusterShift db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset              dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs           db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries   dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset      dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dClusterCount           dd ?  ;Total number of clusters in data area
    27 00000013 ????????            <1>     .dFATlength              dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor        db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag             db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr             dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?  ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?  ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?  ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?  ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?  ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?  ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?  ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?  ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?  ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?  ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> struc psp
   344 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   345 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   346 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   347 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   348 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   349 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   350 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   351                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   352                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   353                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   354                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   355                              <1> ; always used and jftSize.
   356                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   357 0000002A <res 14h>           <1>     .jobFileTbl resb dfltJFTsize ;Main File handle array, JFT
   358 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   359 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   360 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   361 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   362 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   363 0000005B ??                  <1>                 db ?  ;Reserved byte
   364                              <1> ;The below are in the same place as in DOS.
   365                              <1>     .cmdLineArgPtr: ;Symbol for future use
   366 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   367 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   368                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   369 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   370 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   371                              <1> endstruc
   372                              <1> 
   373                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   374                              <1> 
   375                              <1> struc clkStruc
   376 00000000 ????                <1>     .dateWord   dw ?
   377 00000002 ??                  <1>     .minutes    db ?
   378 00000003 ??                  <1>     .hours      db ?
   379 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   380 00000005 ??                  <1>     .seconds    db ?
   381                              <1> endstruc
   382                              <1> 
   383                              <1> 
   384                              <1> struc extCtryStruc
   385 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   386 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   387 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   388 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   389 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   390                              <1>                         ;0 = month day year hh:mm:ss
   391                              <1>                         ;1 = day month year hh:mm:ss
   392                              <1>                         ;2 = year month day hh:mm:ss
   393 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   394 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   395 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   396 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   397 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   398 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   399                              <1>                         ;0 = Symbol leads, without space
   400                              <1>                         ;1 = Symbol follows, without space
   401                              <1>                         ;2 = Symbol leads, one space
   402                              <1>                         ;3 = Symbol follows, one space
   403                              <1>                         ;4 = Symbol replace decimal separator
   404 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   405 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   406 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   407 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   408 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   409                              <1> endstruc
   410                              <1> 
   411                              <1> struc countryStruc
   412 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   413                              <1>                         ;0 = month day year hh:mm:ss
   414                              <1>                         ;1 = day month year hh:mm:ss
   415                              <1>                         ;2 = year month day hh:mm:ss
   416 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   417 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   418 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   419 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   420 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   421 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   422                              <1>                         ;0 = Symbol leads, without space
   423                              <1>                         ;1 = Symbol follows, without space
   424                              <1>                         ;2 = Symbol leads, one space
   425                              <1>                         ;3 = Symbol follows, one space
   426                              <1>                         ;4 = Symbol replace decimal separator
   427 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   428 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   429 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   430 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   431 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   432                              <1> endstruc
   433                              <1> 
   434                              <1> ;Critical Error AH bitfield equates
   435                              <1> critRead    equ 0h
   436                              <1> critWrite   equ 1h
   437                              <1> critDOS     equ 0h
   438                              <1> critFAT     equ 2h
   439                              <1> critDir     equ 4h
   440                              <1> critData    equ 6h
   441                              <1> critFailOK  equ 8h
   442                              <1> critRetryOK equ 10h
   443                              <1> critIgnorOK equ 20h
   444                              <1> critCharDev equ 80h
   445                              <1> 
   446                              <1> critIgnore  equ 0
   447                              <1> critRetry   equ 1
   448                              <1> critAbort   equ 2
   449                              <1> critFail    equ 3
   450                              <1> 
   451                              <1> ;MISC ASCII control chars
   452                              <1> NUL equ 00h ;^@         | ASCII Null
   453                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   454                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   455                              <1> BEL equ 07h ;^G         | ASCII Bell
   456                              <1> BSP equ 08h ;^H         | ASCII Backspace
   457                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   458                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   459                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   460                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   461                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   462                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   463                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   464                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   465                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   466                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   467                              <1> SPC equ 20h ;Printable  | ASCII Space
   468                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   469                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   470                              <1> 
   471                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   472                              <1> ;Extended Ascii Codes
   473                              <1> eF1     equ 3Bh ;F1 second byte
   474                              <1> eF2     equ 3Ch ;F2 second byte
   475                              <1> eF3     equ 3Dh ;F3 second byte
   476                              <1> eF4     equ 3Eh ;F4 second byte
   477                              <1> eF5     equ 3Fh ;F5 second byte
   478                              <1> eF6     equ 40h ;F6 second byte
   479                              <1> eF7     equ 41h ;F7 second byte
   480                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   481                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   482                              <1> eIns    equ 52h ;Insert second byte
   483                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   484                              <1> 
   485                              <1> ;Default Configuration for the system
   486                              <1> 
   487                              <1> buffersDefault  equ 30
   488                              <1> filesDefault    equ 20
   489                              <1> fcbsDefault     equ 4
   490                              <1> safeFcbsDeflt   equ 0
   491                              <1> lastDriveDeflt  equ 5   
   492                              <1> 
   493                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   494                              <1> ; then the char has this property.
   495                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   496                              <1> termChar    equ 2   ;Terminator char type
   497                              <1> sepChar     equ 4   ;Separator char type
   498                              <1> badFCBChar  equ 8   ;FCB filename char
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       resb 5  
    66 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   resb 1
    68 00000008 ????????????????    <1>     .filename   resb 8
    69 00000010 ??????              <1>     .fileext    resb 3
    70 00000013 ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    resb 8
    73 00000020 ??????              <1>     .newExt     resb 3
    74 00000023 ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI24     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> ;In batch, for pointers, 0 means NULL.
    25                              <1> ;FOR/CALL not priorities for implementation right now.
    26                              <1> struc batBlockHdr
    27 00000000 ??                  <1>     .zero       db ?    ;Always null
    28 00000001 ??                  <1>     .bEchoFlg   db ?    ;Echo flag on entry to batch. 1 if echo on!
    29 00000002 ????????????????    <1>     .pCallBlk   dq ?    ;Pointer to the previous batch block when CALLed
    30 0000000A ????????????????    <1>     .pForBlk    dq ?    ;Pointer to the active FOR block
    31 00000012 ??                  <1>     .bBatFlg    db ?    ;Indicates type of command currently active
    32 00000013 ????????            <1>     .dBatOffLo  dd ?    ;LSEEK Low dword of the batch offset
    33 00000017 ????????            <1>     .dBatOffHi  dd ?    ;LSEEK High dword of the batch offset (0 unless net FS)
    34 0000001B <res 14h>           <1>     .wArgs      dw 10 dup (?) ;Offsets of parameters %0-%9. -1 means no param
    35                              <1>     .cmdLine:   ;0 terminated path (%0) followed by cmd line params.
    36                              <1>     ;We include terminating CR. Add null at the end to mean end of params.
    37                              <1> endstruc
    38                              <1> bbNoParam   equ -1
    39                              <1> bbNull      equ 0
    40                              <1> bbEchoOn    equ 1
    41                              <1> bbEchoOff   equ 0
    42                              <1> bbMaxAlloc  equ batBlockHdr_size + cmdBufferL + 1 ;Add 1 for good measure :)
    43                              <1> batNoEchoChar   equ "@" ;If a line starts with this, no echo!
    44                              <1> 
    45                              <1> 
    46                              <1> 
    47                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    48 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    49 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    50 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    51 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    52 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    53                              <1> endstruc
    54                              <1> 
    55                              <1> struc execProg  ;For use with EXEC-ing a child task
    56 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    57 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    58 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    59 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    60                              <1> endstruc
    61                              <1> 
    62                              <1> ;Directory attribute equates
    63                              <1>     dirReadOnly     equ 01h
    64                              <1>     dirHidden       equ 02h
    65                              <1>     dirSystem       equ 04h
    66                              <1>     dirVolumeID     equ 08h
    67                              <1>     dirDirectory    equ 10h
    68                              <1>     dirArchive      equ 20h
    69                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    70                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    71                              <1>     ;If any of the three bits are set, then ALL three bits are set
    72                              <1>     ; in addition to whatever the user passed to search for.
    73                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    74                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 5C                  <1> pathSep     db "\"  ;Default path sep
    11 0000002A 2F                  <1> switchChar  db "/"  ;Default switch char
    12 0000002B 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    13 0000002C 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    14                              <1> ;Static strings, not used in command line parsing
    15 00000034 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    15 0000003D 000000000000000000- <1>
    15 00000046 000000000000000000- <1>
    15 0000004F 000000000000000000- <1>
    15 00000058 0000                <1>
    16 0000005A 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    16 00000063 000000000000000000- <1>
    16 0000006C 000000000000000000- <1>
    16 00000075 000000000000000000- <1>
    16 0000007E 000000000000000000- <1>
    16 00000087 000000000000000000- <1>
    16 00000090 000000000000000000- <1>
    16 00000099 00000000            <1>
    17 0000009D 00                  <1> inCritical  db 0    ;Up if processing a command.
    18 0000009E FF                  <1> echoFlg     db -1   ;Global Echo flag, starts up!
    19 0000009F FFFF                <1> errHdls     dw -1   ;Set to the STDIO handles. Non -1 => Handles swapped
    20                              <1> 
    21                              <1> cmdLineStatePtr:
    22 000000A1 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    23 000000A2 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    24 000000A4 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    25                              <1> ;These variables are valid for a SINGLE command in a command line
    26                              <1> ;Next two bytes, if set to -1, flags error
    27 000000A6 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    28 000000A7 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    29                              <1> ;                    If 2, we are redirecting output to a file, by appending
    30 000000A8 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    31 000000AA FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    32                              <1> 
    33                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    34 000000AC 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    35 000000AD 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    36 000000AE 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    37                              <1> 
    38 000000AF 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    39 000000B0 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    40 000000B1 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    41                              <1> 
    42 000000B2 00                  <1> switchFnd   db 0    ;Set if a switch char is found
    43                              <1> cmdStateL equ $ - cmdStatePtr
    44                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    45                              <1> 
    46                              <1> ;Batch state variables. Batch changes current dir to dir of batch file!
    47 000000B3 00                  <1> batFlag     db 0    ;Batch mode flag. Set to -1 if batch mode on
    48 000000B4 0000000000000000    <1> bbPtr       dq 0    ;Ptr to the batch block
    49 000000BC 000000000000000000- <1> batFile     db fileSpecZL dup (0)   ;Path to bat to execute. Qual with path!
    49 000000C5 000000000000000000- <1>
    49 000000CE 000000000000000000- <1>
    49 000000D7 000000000000000000- <1>
    49 000000E0 000000000000000000- <1>
    49 000000E9 000000000000000000- <1>
    49 000000F2 000000000000000000- <1>
    49 000000FB 000000000000000000- <1>
    49 00000104 00000000000000      <1>
    50 0000010B 000000000000000000- <1> batCurDir   db fileSpecZL dup (0)   ;Get dir on bat drive and save here.
    50 00000114 000000000000000000- <1>
    50 0000011D 000000000000000000- <1>
    50 00000126 000000000000000000- <1>
    50 0000012F 000000000000000000- <1>
    50 00000138 000000000000000000- <1>
    50 00000141 000000000000000000- <1>
    50 0000014A 000000000000000000- <1>
    50 00000153 00000000000000      <1>
    51                              <1> ;batCallPtr  dq 0    ;Ptr to the call state block
    52                              <1> 
    53                              <1> ;Structs and strings
    54                              <1> 
    55 0000015A 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    55 00000163 00000000000000      <1>
    56 0000016A 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    56 00000173 000000000000000000- <1>
    56 0000017C 000000000000000000- <1>
    56 00000185 000000000000000000- <1>
    56 0000018E 00000000000000      <1>
    57                              <1> 
    58 00000195 000000000000000000- <1> launchBlock db execProg_size dup (0)
    58 0000019E 000000000000000000- <1>
    58 000001A7 000000000000000000- <1>
    58 000001B0 0000000000          <1>
    59                              <1> 
    60 000001B5 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    60 000001BE 000000000000000000- <1>
    60 000001C7 000000000000000000- <1>
    60 000001D0 000000000000000000- <1>
    60 000001D9 000000000000000000- <1>
    60 000001E2 000000000000000000- <1>
    60 000001EB 000000000000000000- <1>
    60 000001F4 000000000000000000- <1>
    60 000001FD 000000000000000000- <1>
    60 00000206 000000000000000000- <1>
    60 0000020F 000000000000000000- <1>
    60 00000218 000000000000000000- <1>
    60 00000221 000000000000000000- <1>
    60 0000022A 000000000000000000- <1>
    60 00000233 00000000            <1>
    61                              <1> inBufferL   equ 127 ;127 chars so to always copy to PSP with terminating CR
    62 00000237 000000000000000000- <1> cpyBuffer   db cmdBufferL dup (0)   ;Copied input for processing
    62 00000240 000000000000000000- <1>
    62 00000249 000000000000000000- <1>
    62 00000252 000000000000000000- <1>
    62 0000025B 000000000000000000- <1>
    62 00000264 000000000000000000- <1>
    62 0000026D 000000000000000000- <1>
    62 00000276 000000000000000000- <1>
    62 0000027F 000000000000000000- <1>
    62 00000288 000000000000000000- <1>
    62 00000291 000000000000000000- <1>
    62 0000029A 000000000000000000- <1>
    62 000002A3 000000000000000000- <1>
    62 000002AC 000000000000000000- <1>
    62 000002B5 00000000            <1>
    63 000002B9 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)   ;Buffer with the command pipeline
    63 000002C2 000000000000000000- <1>
    63 000002CB 000000000000000000- <1>
    63 000002D4 000000000000000000- <1>
    63 000002DD 000000000000000000- <1>
    63 000002E6 000000000000000000- <1>
    63 000002EF 000000000000000000- <1>
    63 000002F8 000000000000000000- <1>
    63 00000301 000000000000000000- <1>
    63 0000030A 000000000000000000- <1>
    63 00000313 000000000000000000- <1>
    63 0000031C 000000000000000000- <1>
    63 00000325 000000000000000000- <1>
    63 0000032E 000000000000000000- <1>
    63 00000337 00000000            <1>
    64 0000033B 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)   ;Space for full path to a ext cmd
    64 00000344 000000000000000000- <1>
    64 0000034D 000000000000000000- <1>
    64 00000356 000000000000000000- <1>
    64 0000035F 000000000000000000- <1>
    64 00000368 000000000000000000- <1>
    64 00000371 000000000000000000- <1>
    64 0000037A 000000000000000000- <1>
    64 00000383 00000000000000      <1>
    65 0000038A 000000000000000000- <1> cmdName     db cmdNameL dup (0)     ;Cmd name prefixed by length 
    65 00000393 0000000000          <1>
    66                              <1> 
    67 00000398 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    67 000003A1 000000000000000000- <1>
    67 000003AA 000000000000000000- <1>
    67 000003B3 000000000000000000- <1>
    67 000003BC 000000000000000000- <1>
    67 000003C5 000000000000000000- <1>
    67 000003CE 000000000000000000- <1>
    67 000003D7 000000000000000000- <1>
    67 000003E0 00000000000000      <1>
    68 000003E7 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    68 000003F0 000000000000000000- <1>
    68 000003F9 000000000000000000- <1>
    68 00000402 000000000000000000- <1>
    68 0000040B 000000000000000000- <1>
    68 00000414 000000000000000000- <1>
    68 0000041D 000000000000000000- <1>
    68 00000426 000000000000000000- <1>
    68 0000042F 00000000000000      <1>
    69                              <1> 
    70                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    71 00000436 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    71 0000043F 000000000000000000- <1>
    71 00000448 000000000000000000- <1>
    71 00000451 000000000000000000- <1>
    71 0000045A 000000000000000000- <1>
    71 00000463 000000000000000000- <1>
    71 0000046C 000000000000000000- <1>
    71 00000475 000000000000000000- <1>
    71 0000047E 00000000000000      <1>
    72 00000485 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    72 0000048E 000000000000000000- <1>
    72 00000497 000000000000000000- <1>
    72 000004A0 000000000000000000- <1>
    72 000004A9 000000000000000000- <1>
    72 000004B2 000000000000000000- <1>
    72 000004BB 000000000000000000- <1>
    72 000004C4 000000000000000000- <1>
    72 000004CD 00000000000000      <1>
    73                              <1> 
    74 000004D4 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    75 000004DC 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    76                              <1> 
    77                              <1> ;Main scratch buffer for forming paths! Needs to be large enough to splice
    78                              <1> ; a really long invalid DOS path for PATH to work properly.
    79 000004E4 000000000000000000- <1> searchSpec  db 2*cmdBufferL dup (0)   
    79 000004ED 000000000000000000- <1>
    79 000004F6 000000000000000000- <1>
    79 000004FF 000000000000000000- <1>
    79 00000508 000000000000000000- <1>
    79 00000511 000000000000000000- <1>
    79 0000051A 000000000000000000- <1>
    79 00000523 000000000000000000- <1>
    79 0000052C 000000000000000000- <1>
    79 00000535 000000000000000000- <1>
    79 0000053E 000000000000000000- <1>
    79 00000547 000000000000000000- <1>
    79 00000550 000000000000000000- <1>
    79 00000559 000000000000000000- <1>
    79 00000562 000000000000000000- <1>
    79 0000056B 000000000000000000- <1>
    79 00000574 000000000000000000- <1>
    79 0000057D 000000000000000000- <1>
    79 00000586 000000000000000000- <1>
    79 0000058F 000000000000000000- <1>
    79 00000598 000000000000000000- <1>
    79 000005A1 000000000000000000- <1>
    79 000005AA 000000000000000000- <1>
    79 000005B3 000000000000000000- <1>
    79 000005BC 000000000000000000- <1>
    79 000005C5 000000000000000000- <1>
    79 000005CE 000000000000000000- <1>
    79 000005D7 000000000000000000- <1>
    79 000005E0 0000000000000000    <1>
    80                              <1> 
    81                              <1> ;Internal Function vars
    82                              <1> ;Dir Vars
    83 000005E8 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    84                              <1> ;                                   Bit[1] set => /P or /p specified
    85                              <1> ;                                   Bit[2] set => A file/path specified
    86 000005E9 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    87 000005EA 00000000            <1> dirFileCtr  dd 0    ;Used in /W mode, rollover after 5
    88 000005EE 00                  <1> dirDrv      db 0    ;0 based drive number to use
    89 000005EF 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
    89 000005F8 000000000000000000- <1>
    89 00000601 000000000000000000- <1>
    89 0000060A 000000000000000000- <1>
    89 00000613 000000000000000000- <1>
    89 0000061C 000000000000000000- <1>
    89 00000625 000000000000000000- <1>
    89 0000062E 000000000000000000- <1>
    89 00000637 000000000000000000- <1>
    89 00000640 000000000000000000- <1>
    89 00000649 000000000000000000- <1>
    89 00000652 000000000000000000- <1>
    89 0000065B 000000000000000000- <1>
    89 00000664 000000000000000000- <1>
    89 0000066D 00000000            <1>
    90 00000671 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
    90 0000067A 3F3F3F3F3F3F3F      <1>
    91                              <1> dirWideType equ 1
    92                              <1> dirPageType equ 2
    93                              <1> dirFileType equ 4
    94                              <1> ;Volume Vars
    95                              <1> volFcb:
    96                              <1>     istruc exFcb
    97 00000681 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    98 00000682 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    99 00000688 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
   100 00000689 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
   101 00000691 3F3F3F              <1>     at exFcb.fileext,   db "???"
   102 00000694 00000000            <1>     at exFcb.curBlock,  dd 0
   103 00000698 00<rep 15h>         <1>     iend 
   104                              <1> 
   105                              <1> ;Time/Date vars
   106 000006AD 00                  <1> td1 db 0    ;Minutes/Year
   107 000006AE 00                  <1> td2 db 0    ;Hours/Zero
   108 000006AF 00                  <1> td3 db 0    ;Hundredths/Day
   109 000006B0 00                  <1> td4 db 0    ;Seconds/Month
   110                              <1> 
   111                              <1> ;Rename/Copy/Delete Buffers
   112                              <1> delPath:
   113 000006B1 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   113 000006BA 000000000000000000- <1>
   113 000006C3 000000000000000000- <1>
   113 000006CC 000000000000000000- <1>
   113 000006D5 000000000000000000- <1>
   113 000006DE 000000000000000000- <1>
   113 000006E7 000000000000000000- <1>
   113 000006F0 000000000000000000- <1>
   113 000006F9 000000000000000000- <1>
   113 00000702 000000000000000000- <1>
   113 0000070B 000000000000000000- <1>
   113 00000714 000000000000000000- <1>
   113 0000071D 000000000000000000- <1>
   113 00000726 000000000000000000- <1>
   113 0000072F 00000000            <1>
   114 00000733 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   114 0000073C 000000000000000000- <1>
   114 00000745 000000000000000000- <1>
   114 0000074E 000000000000000000- <1>
   114 00000757 000000000000000000- <1>
   114 00000760 000000000000000000- <1>
   114 00000769 000000000000000000- <1>
   114 00000772 000000000000000000- <1>
   114 0000077B 000000000000000000- <1>
   114 00000784 000000000000000000- <1>
   114 0000078D 000000000000000000- <1>
   114 00000796 000000000000000000- <1>
   114 0000079F 000000000000000000- <1>
   114 000007A8 000000000000000000- <1>
   114 000007B1 00000000            <1>
   115 000007B5 0000000000000000    <1> srcPtr      dq 0    ;Where to copy pattern to in src path
   116 000007BD 0000000000000000    <1> destPtr     dq 0    ;Where to copy pattern to in dest path
   117 000007C5 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   117 000007CE 2020                <1>
   118                              <1> ;Copy vars
   119 000007D0 00                  <1> verifyFlg   db 0    ;Set if verify on before copy
   120 000007D1 FFFF                <1> sourceHdl   dw -1
   121 000007D3 FFFF                <1> destHdl     dw -1
   122 000007D5 0000                <1> srcHdlInfo  dw 0    ;Save the hdl device info (bit 7 Set -> Char dev)
   123 000007D7 0000000000000000    <1> cpBufPtr    dq 0    ;Ptr to the xfr arena
   124 000007DF 0000                <1> wCpBufSz    dw 0    ;Copy Buffer size, max 4096 bytes
   125 000007E1 00000000            <1> dCpCnt      dd 0    ;Number of files we have copied
   126 000007E5 00                  <1> bCpFlg      db 0    ;Copy state flag
   127                              <1> 
   128                              <1> ascSrc      equ 1   ;Set if ascii copy for this source file.
   129                              <1> binSrc      equ 2   ;Set if last encountered src file flag was binary
   130                              <1> ascDes      equ 4   ;Set if add ^Z at end of file. Clear if not!
   131                              <1> wcSrc       equ 8   ;Set if wc's in source pattern. Display source file names.
   132                              <1> oneDest     equ 10h ;Single destination, not dir 
   133                              <1> mod1Cpy     equ 20h ;Set if copying files to new dir with same names
   134                              <1> mod2Cpy     equ 40h ;Set if copying files with new names
   135                              <1> mod3Cpy     equ 80h ;Set if dflt cat ASCII files to a single destination
   136                              <1> 
   137                              <1> ;Environment manipulation vars
   138 000007E6 0000                <1> envVarSz        dw 0    ;Env var size
   139 000007E8 0000                <1> envVarNamSz     dw 0    ;Env var "name="" length
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 000007EA 03444952            <1>     db 3, "DIR"
     8 000007EE 2B1C                <1>     dw dir - startLbl
     9                              <1> 
    10 000007F0 024344              <1>     db 2, "CD"
    11 000007F3 1B21                <1>     dw chdir - startLbl
    12                              <1> 
    13 000007F5 054348444952        <1>     db 5, "CHDIR"
    14 000007FB 1B21                <1>     dw chdir - startLbl
    15                              <1> 
    16 000007FD 024D44              <1>     db 2, "MD"
    17 00000800 9621                <1>     dw mkdir - startLbl
    18                              <1> 
    19 00000802 054D4B444952        <1>     db 5, "MKDIR"
    20 00000808 9621                <1>     dw mkdir - startLbl
    21                              <1> 
    22 0000080A 025244              <1>     db 2, "RD"
    23 0000080D DF21                <1>     dw rmdir - startLbl
    24                              <1> 
    25 0000080F 05524D444952        <1>     db 5, "RMDIR"
    26 00000815 DF21                <1>     dw rmdir - startLbl
    27                              <1> 
    28 00000817 0344454C            <1>     db 3, "DEL"
    29 0000081B A229                <1>     dw erase - startLbl
    30                              <1> 
    31 0000081D 054552415345        <1>     db 5, "ERASE"
    32 00000823 A229                <1>     dw erase - startLbl
    33                              <1> 
    34 00000825 0444415445          <1>     db 4, "DATE"
    35 0000082A E52A                <1>     dw date - startLbl
    36                              <1> 
    37 0000082C 0454494D45          <1>     db 4, "TIME"
    38 00000831 932C                <1>     dw time - startLbl
    39                              <1> 
    40 00000833 04434F5059          <1>     db 4, "COPY"
    41 00000838 2922                <1>     dw copy - startLbl
    42                              <1> 
    43 0000083A 0443545459          <1>     db 4, "CTTY"
    44 0000083F BC2D                <1>     dw ctty - startLbl
    45                              <1> 
    46 00000841 03434C53            <1>     db 3, "CLS"
    47 00000845 572E                <1>     dw cls - startLbl
    48                              <1> 
    49 00000847 05425245414B        <1>     db 5, "BREAK"
    50 0000084D C92E                <1>     dw break - startLbl
    51                              <1> 
    52 0000084F 06564552494659      <1>     db 6, "VERIFY"
    53 00000856 4A2F                <1>     dw verify - startLbl
    54                              <1> 
    55 00000858 0652454E414D45      <1>     db 6, "RENAME"
    56 0000085F C72F                <1>     dw rename - startLbl
    57                              <1> 
    58 00000861 0352454E            <1>     db 3, "REN"
    59 00000865 C72F                <1>     dw rename - startLbl
    60                              <1>     
    61 00000867 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 00000870 C433                <1>     dw truename - startLbl
    63                              <1> 
    64 00000872 03564552            <1>     db 3, "VER"
    65 00000876 AA35                <1>     dw version - startLbl
    66                              <1> 
    67 00000878 03564F4C            <1>     db 3, "VOL"
    68 0000087C EB34                <1>     dw volume - startLbl
    69                              <1> 
    70 0000087E 034D454D            <1>     db 3, "MEM"
    71 00000882 EE35                <1>     dw memory - startLbl
    72                              <1> 
    73 00000884 0445584954          <1>     db 4, "EXIT"
    74 00000889 EB37                <1>     dw exit - startLbl
    75                              <1> 
    76 0000088B 0454595045          <1>     db 4, "TYPE"
    77 00000890 3837                <1>     dw type - startLbl
    78                              <1> 
    79 00000892 054C4142454C        <1>     db 5, "LABEL"
    80 00000898 1534                <1>     dw label - startLbl
    81                              <1> 
    82 0000089A 0450415448          <1>     db 4, "PATH"
    83 0000089F 423B                <1>     dw pathEdit - startLbl
    84                              <1> 
    85 000008A1 03534554            <1>     db 3, "SET"
    86 000008A5 233A                <1>     dw set - startLbl
    87                              <1> 
    88 000008A7 0650524F4D5054      <1>     db 6, "PROMPT"
    89 000008AE 213C                <1>     dw prompt - startLbl
    90                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    91 000008B0 054D4B4C424C        <1>     db 5, "MKLBL"
    92 000008B6 3F34                <1>     dw mklbl - startLbl
    93                              <1> 
    94 000008B8 05524D4C424C        <1>     db 5, "RMLBL"
    95 000008BE 7A34                <1>     dw rmlbl - startLbl
    96                              <1> 
    97 000008C0 05524E4C424C        <1>     db 5, "RNLBL"
    98 000008C6 B534                <1>     dw rnlbl - startLbl
    99                              <1> 
   100 000008C8 05544F554348        <1>     db 5, "TOUCH"
   101 000008CE B731                <1>     dw touch - startLbl
   102                              <1> 
   103 000008D0 044A4F494E          <1>     db 4, "JOIN"
   104 000008D5 1A32                <1>     dw join - startLbl
   105                              <1> 
   106 000008D7 055355425354        <1>     db 5, "SUBST"
   107 000008DD DD32                <1>     dw subst - startLbl
   108                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   109                              <1> 
   110 000008DF 044543484F          <1>     db 4, "ECHO"
   111 000008E4 913C                <1>     dw echo - startLbl
   112 000008E6 FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 000008E7 0D0A24              <1> crlf    db  CR,LF,"$"
     3 000008EA 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 000008EF 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 000008F8 696C65206D69737369- <1>
     4 00000901 6E670D0A24          <1>
     5 00000906 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 0000090F 6469736B2077697468- <1>
     5 00000918 206261746368206669- <1>
     5 00000921 6C65                <1>
     6 00000923 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 0000092C 737320616E79206B65- <1>
     6 00000935 79207768656E207265- <1>
     6 0000093E 6164790D0A24        <1>
     7 00000944 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 0000094D 6E64206F722066696C- <1>
     7 00000956 65206E616D650D0A24  <1>
     8 0000095F 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 00000968 2066696C65206E616D- <1>
     8 00000971 65206F7220          <1>
     9 00000976 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 0000097F 666F756E640D0A24    <1>
    10 00000987 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full.
    10 00000990 656E74206469736B20- <1>
    10 00000999 73706163650D0A24    <1>
    11 000009A1 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 000009AA 7669726F6E6D656E74- <1>
    11 000009B3 2073706163650D0A24  <1>
    12 000009BC 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 000009C5 74696F6E206572726F- <1>
    12 000009CE 720D0A24            <1>
    13 000009D2 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 000009DB 6F7420626520636F70- <1>
    13 000009E4 696564206F6E746F20- <1>
    13 000009ED 697473656C660D0A24  <1>
    14 000009F6 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 000009FF 662064657374696E61- <1>
    14 00000A08 74696F6E206C6F7374- <1>
    14 00000A11 206265666F72652063- <1>
    14 00000A1A 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 00000A20 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 00000A29 636F706965640D0A24  <1>
    17 00000A32 4E6F7420656E6F7567- <1> cpNoMem db  "Not enough memory for COPY",CR,LF,"$"      ;Never should happen
    17 00000A3B 68206D656D6F727920- <1>
    17 00000A44 666F7220434F50590D- <1>
    17 00000A4D 0A24                <1>
    18                              <1> ;Dir end1 msg. First write # files in dir then this
    19 00000A4F 2046696C6528732920- <1> dirOk   db  " File(s) $"
    19 00000A58 24                  <1>
    20                              <1> ;Dir end2 msg. First write # bytes free then this message
    21 00000A59 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    21 00000A62 65650D0A24          <1>
    22 00000A67 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    23                              <1> 
    24 00000A70 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    24 00000A79 726976652073706563- <1>
    24 00000A82 696669636174696F6E- <1>
    24 00000A8B 0D0A24              <1>
    25 00000A8E 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    25 00000A97 6B6579207768656E20- <1>
    25 00000AA0 7265616479202E202E- <1>
    25 00000AA9 202E2024            <1>
    26 00000AAD 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    26 00000AB6 6172616D657465720D- <1>
    26 00000ABF 0A24                <1>
    27                              <1> 
    28 00000AC1 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    28 00000ACA 576564546875467269- <1>
    28 00000AD3 536174              <1>
    29 00000AD6 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    29 00000ADF 206461746524        <1>
    30 00000AE5 43757272656E742064- <1> curDate db  "Current date is $"
    30 00000AEE 6174652069732024    <1>
    31 00000AF6 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    31 00000AFF 657720646174652024  <1>
    32 00000B08 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    32 00000B11 293A2024            <1>
    33 00000B15 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    33 00000B1E 293A2024            <1>
    34 00000B22 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    34 00000B2B 293A2024            <1>
    35 00000B2F 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    35 00000B38 2074696D6524        <1>
    36 00000B3E 43757272656E742074- <1> curTime db  "Current time is $"
    36 00000B47 696D652069732024    <1>
    37 00000B4F 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    37 00000B58 65772074696D653A20- <1>
    37 00000B61 24                  <1>
    38                              <1> 
    39 00000B62 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    39 00000B6B 7572652028592F4E29- <1>
    39 00000B74 3F2024              <1>
    40                              <1> 
    41 00000B77 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    41 00000B80 56657273696F6E2024  <1>
    42                              <1> 
    43 00000B89 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    43 00000B92 6E2064726976652024  <1>
    44 00000B9B 2069732024          <1> volOk   db " is $"
    45 00000BA0 20686173206E6F206C- <1> volNo   db " has no label$"
    45 00000BA9 6162656C24          <1>
    46                              <1> 
    47 00000BAE 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    47 00000BB7 69726563746F72790D- <1>
    47 00000BC0 0A24                <1>
    48 00000BC2 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    48 00000BCB 206372656174652064- <1>
    48 00000BD4 69726563746F72790D- <1>
    48 00000BDD 0A24                <1>
    49 00000BDF 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    49 00000BE8 6174682C206E6F7420- <1>
    49 00000BF1 6469726563746F7279- <1>
    49 00000BFA 2C0D0A              <1>
    50 00000BFD 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    50 00000C06 6F7279206E6F742065- <1>
    50 00000C0F 6D7074790D0A24      <1>
    51 00000C16 204469726563746F72- <1> dirMain db " Directory of  $"
    51 00000C1F 79206F66202024      <1>
    52 00000C26 4E6F20506174682024  <1> noPath  db "No Path $"
    53 00000C2F 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    53 00000C38 6E6965640D0A24      <1>
    54 00000C3F 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    54 00000C48 72697665206973206E- <1>
    54 00000C51 6F206C6F6E67657220- <1>
    54 00000C5A 76616C696424        <1>
    55                              <1> ;badDrvSrch  db "Invalid drive in search path",CR,LF,"$"        ;MAY REMOVE
    56 00000C60 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    56 00000C69 65766963650D0A24    <1>
    57 00000C71 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    57 00000C7A 20666F756E640D0A24  <1>
    58 00000C83 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    58 00000C8C 726F720D0A24        <1>
    59 00000C92 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    59 00000C9B 6F74206265206E6573- <1>
    59 00000CA4 7465640D0A24        <1>
    60 00000CAA 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    60 00000CB3 6174652066696C6520- <1>
    60 00000CBC 6572726F7220647572- <1>
    60 00000CC5 696E6720706970650D- <1>
    60 00000CCE 0A24                <1>
    61 00000CD0 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    61 00000CD9 2062696E6172792072- <1>
    61 00000CE2 656164732066726F6D- <1>
    61 00000CEB 206120646576696365- <1>
    61 00000CF4 0D0A24              <1>
    62 00000CF7 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    63 00000CFD 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    64 00000D02 425245414B20697320- <1> breakIs db "BREAK is $"
    64 00000D0B 24                  <1>
    65 00000D0C 564552494659206973- <1> verifyIs    db "VERIFY is $"
    65 00000D15 2024                <1>
    66 00000D17 4543484F2069732024  <1> echoIs  db "ECHO is $"  
    67 00000D20 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    67 00000D29 617468206F72206669- <1>
    67 00000D32 6C65206E616D650D0A- <1>
    67 00000D3B 24                  <1>
    68 00000D3C 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    68 00000D45 756D626572206F6620- <1>
    68 00000D4E 706172616D65746572- <1>
    68 00000D57 730D0A24            <1>
    69 00000D5B 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    69 00000D64 74696E6720746F2064- <1>
    69 00000D6D 6576696365          <1>
    70 00000D72 08200800            <1> backSpace   db BSP," ",BSP,NUL
    71 00000D76 50726F6772616D2074- <1> noMemMsg  db "Program too big to fit in memory",CR,LF,"$"
    71 00000D7F 6F6F2062696720746F- <1>
    71 00000D88 2066697420696E206D- <1>
    71 00000D91 656D6F72790D0A24    <1>
    72                              <1> 
    73                              <1> 
    74 00000D99 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    74 00000DA2 20202020202020546F- <1>
    74 00000DAB 74616C207379737465- <1>
    74 00000DB4 6D206D656D6F72793A- <1>
    74 00000DBD 2024                <1>
    75 00000DBF 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    75 00000DC8 20202020202020204D- <1>
    75 00000DD1 656D6F727920757365- <1>
    75 00000DDA 6420627920444F533A- <1>
    75 00000DE3 2024                <1>
    76 00000DE5 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    76 00000DEE 656D6F727920757365- <1>
    76 00000DF7 64206279206170706C- <1>
    76 00000E00 69636174696F6E733A- <1>
    76 00000E09 2024                <1>
    77 00000E0B 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    77 00000E14 656D6F727920726573- <1>
    77 00000E1D 657276656420627920- <1>
    77 00000E26 68617264776172653A- <1>
    77 00000E2F 2024                <1>
    78 00000E31 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    78 00000E3A 202020202020202020- <1>
    78 00000E43 2020202020204D656D- <1>
    78 00000E4C 6F727920667265653A- <1>
    78 00000E55 2024                <1>
    79 00000E57 20627974657324      <1> memByte db " bytes$"
    80 00000E5E 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    80 00000E67 6F7420417373657274- <1>
    80 00000E70 61696E20444F532045- <1>
    80 00000E79 6E74727920506F696E- <1>
    80 00000E82 7424                <1>
    81 00000E84 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    81 00000E8D 416C6C6F636174696F- <1>
    81 00000E96 6E204572726F7224    <1>
    82 00000E9E 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    82 00000EA7 4572726F7224        <1>
    83 00000EAD 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    83 00000EB6 68616C74656424      <1>
    84                              <1> 
    85 00000EBD 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    85 00000EC6 206372656174652070- <1>
    85 00000ECF 6970650D0A          <1>
    86                              <1> pipeErrMsgL equ $ - pipeErrMsg
    87 00000ED4 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    87 00000EDD 6F6E206572726F720D- <1>
    87 00000EE6 0A                  <1>
    88                              <1> redirErrMsgL   equ $ - redirErrMsg
    89                              <1> 
    90 00000EE7 1B5B324A            <1> ansiCls  db ESC,"[2J" ;ANSI CLS sequence, 4 chars long
    91 00000EEB 2020202024          <1> fourSpc  db "    $"
    92 00000EF0 20202024            <1> threeSpc db "   $"
    93 00000EF4 202024              <1> twoSpc   db "  $"
    94                              <1> 
    95 00000EF7 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    95 00000F00 696679204F4E206F72- <1>
    95 00000F09 204F46460D0A24      <1>
    96                              <1> 
    97 00000F10 50524F4D50543D0D    <1> promptEVar  db "PROMPT=",CR     ;Must be CR terminated!
    98 00000F18 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
    99                              <1> ;If anything goes wrong with piping or redirecting just close first two 
   100                              <1> ; handles and reopen CON
   101 00000F21 434F4E00            <1> conName db "CON",0    
   102                              <1>   
   103                              <1> ;Int 24h strings
   104                              <1> errorMsgTable: ;Each table entry is 18 chars long
   105 00000F25 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   105 00000F2E 746563742024202020  <1>
   106 00000F37 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   106 00000F40 6E6974202420202020  <1>
   107 00000F49 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   107 00000F52 202420202020202020  <1>
   108 00000F5B 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   108 00000F64 6F6D6D616E64202420  <1>
   109 00000F6D 446174612024202020- <1>             db "Data $            "       ;Error 4
   109 00000F76 202020202020202020  <1>
   110 00000F7F 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   110 00000F88 737420242020202020  <1>
   111 00000F91 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   111 00000F9A 202020202020202020  <1>
   112 00000FA3 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   112 00000FAC 656469612024202020  <1>
   113 00000FB5 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   113 00000FBE 7420466F756E642024  <1>
   114 00000FC7 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   114 00000FD0 706572202420202020  <1>
   115 00000FD9 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   115 00000FE2 6C7420242020202020  <1>
   116 00000FEB 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   116 00000FF4 742024202020202020  <1>
   117 00000FFD 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   117 00001006 61696C757265202420  <1>
   118                              <1> 
   119 0000100F 64726976652024      <1> drvMsg     db "drive $"
   120 00001016 6572726F7220726561- <1> readMsg    db "error reading $"
   120 0000101F 64696E672024        <1>
   121 00001025 6572726F7220777269- <1> writeMsg   db "error writing $"
   121 0000102E 74696E672024        <1>
   122 00001034 41626F727424        <1> abortMsg   db "Abort$" 
   123 0000103A 49676E6F726524      <1> ignoreMsg  db "Ignore$"
   124 00001041 526574727924        <1> retryMsg   db "Retry$"
   125 00001047 4661696C24          <1> failMsg    db "Fail$"
   126 0000104C 2C2024              <1> betweenMsg db ", $"
   127 0000104F 3F2024              <1> endMsg     db "? $"
   128 00001052 49524146            <1> i24Resp    db "IRAF"   ;Abort Retry Ignore Fail
    15                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:
     3                              <1> ;This is copied into an MCB to be used as the environment!
     4                              <1> comspecEvar:
     5 00001056 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 0000105E 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0  ;Part of the comspec!
     7 00001067 442E434F4D00        <1>
     8                              <1> pathEVar:
     9 0000106D 504154483D0000      <1>     db "PATH=",0,0  ;End of default environment strings
    10                              <1> menv_len equ $ - masterEnv
    11                              <1> ;Master environment doesnt contain the "program name string"
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00001074 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00001077 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 0000107B C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 0000107E B44A                <1>     mov ah, 4Ah ;Realloc
     9 00001080 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00001083 CD21                <1>     int 21h
    11                              <1> commandMain:
    12 00001085 488B2579EFFFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    13 0000108C FC                  <1>     cld ;Ensure stringops are done the right way
    14 0000108D C60521F1FFFF7F      <1>     mov byte [inBuffer], inBufferL      ;Reset the buffer length
    15 00001094 C6059CF1FFFF7F      <1>     mov byte [cpyBuffer], inBufferL     ;Reset the buffer length
    16 0000109B C60517F2FFFF7F      <1>     mov byte [cmdBuffer], inBufferL     ;Reset the buffer length
    17                              <1> .inputMain:         ;Only reset once per line!
    18 000010A2 E8F02E0000          <1>     call printCRLF  ;Command complete, indicate with new line!
    19 000010A7 B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    20 000010AC CD21                <1>     int 21h
    21 000010AE B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    22 000010B3 BA01000000          <1>     mov edx, 1      ;Start new print job
    23 000010B8 CD21                <1>     int 21h
    24                              <1> .inputGetAgain:
    25 000010BA E850310000          <1>     call clearCommandLineState  ;Cleans all handles 5->MAX
    26 000010BF F605EDEFFFFFFF      <1>     test byte [batFlag], -1 ;If batch on, get the next line to execute
    27 000010C6 0F855E0A0000        <1>     jnz batNextLine
    28                              <1> .inputGetCmdlineAgain:
    29 000010CC E82D2E0000          <1>     call printPrompt    ;Ok we are gonna get more input, output prompt
    30 000010D1 488D15DDF0FFFF      <1>     lea rdx, inBuffer
    31 000010D8 B8000A0000          <1>     mov eax, 0A00h      ;Do Buffered input
    32 000010DD CD21                <1>     int 21h
    33 000010DF E8B32E0000          <1>     call printCRLF  ;Note we have accepted input
    34                              <1> ;First check we had something typed in of length greater than 0
    35 000010E4 803DCBF0FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    36 000010EB 74DF                <1>     je .inputGetCmdlineAgain  ;If not, keep looping input
    37                              <1>     ;Copy over the input text
    38 000010ED 488D35C1F0FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    39                              <1> .batCopy:               ;Jump here to copy the batch input line 
    40 000010F4 488D3D3CF1FFFF      <1>     lea rdi, cpyBuffer
    41 000010FB B982000000          <1>     mov ecx, cmdBufferL     ;Copy the buffer over to manipulate
    42 00001100 F3A4                <1>     rep movsb
    43 00001102 E870000000          <1>     call makeCmdBuffer      ;Preprocess the redir, make cmd buffer
    44                              <1>     ;Now check we aren't starting with a pipe or <CR> and treat differently
    45 00001107 488D35ADF1FFFF      <1>     lea rsi, cmdBuffer + 2
    46 0000110E E8CA300000          <1>     call skipDelimiters
    47 00001113 803E0D              <1>     cmp byte [rsi], CR      ;If the first non-delim is a CR, reject input!
    48 00001116 74A2                <1>     je .inputGetAgain       ;Wipe redir flags and reobtain input!
    49 00001118 803E7C              <1>     cmp byte [rsi], "|"     ;If the first non-delim is a pipe, syntax error!
    50 0000111B 0F84CF030000        <1>     je hardSynErr
    51                              <1> .pipeLoop:
    52 00001121 4C8B05E7EEFFFF      <1>     mov r8, qword [pspPtr]  ;Point back to home segment
    53 00001128 E8A4000000          <1>     call makeCmdString      ;Makes the CR delimited command in psp
    54                              <1>     ;ZF here indicates if we are at the end of the command or nots
    55 0000112D E80A070000          <1>     call setupRedirandPipes ;Setup/advance pipes and redir as appropriate
    56 00001132 E8F3000000          <1>     call analyseCmdline     ;Setup cmdName and fcb for cmdBuffer portion
    57 00001137 E845020000          <1>     call doCommandLine      ;This preps and executes the command portion.
    58                              <1> .okRet:                     ;Normal return point for processing
    59 0000113C E800050000          <1>     call advanceRedir       ;Now advance and end redir if needed
    60 00001141 F60559EFFFFFFF      <1>     test byte [pipeFlag], -1    ;If no pipes, reset state, accept new input
    61 00001148 0F8454FFFFFF        <1>     jz .inputMain
    62                              <1>     ;Now we pull the commandline forwards. 
    63 0000114E E87E000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    64 00001153 488D3D61F1FFFF      <1>     lea rdi, cmdBuffer + 2
    65 0000115A 4889F1              <1>     mov rcx, rsi
    66 0000115D 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    67 00001160 280D54F1FFFF        <1>     sub byte [cmdBuffer + 1], cl    ;And erase from the count
    68 00001166 8A0D4EF1FFFF        <1>     mov cl, byte [cmdBuffer + 1]
    69 0000116C FFC1                <1>     inc ecx     ;One more for the terminating char
    70 0000116E F3A4                <1>     rep movsb   ;Move the chars over    
    71 00001170 E889300000          <1>     call clearCommandState  ;Else, clear the command state and start again
    72 00001175 EBAA                <1>     jmp short .pipeLoop     ;Doesn't close handles above 5 until end of pipe!
    73                              <1> 
    74                              <1> makeCmdBuffer:
    75                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    76                              <1> ; copy buffer. Called only once in a cycle.
    77                              <1> ;Throughout: CL has char count, CH has quote count
    78 00001177 488D35BBF0FFFF      <1>     lea rsi, [cpyBuffer + 2]    ;Goto copy buffer + 2
    79 0000117E 31C9                <1>     xor ecx, ecx
    80 00001180 4889F7              <1>     mov rdi, rsi    ;Save the pointer
    81                              <1> .countQuotes:
    82 00001183 AC                  <1>     lodsb
    83 00001184 3C22                <1>     cmp al, '"'
    84 00001186 7507                <1>     jne .notQuoteToCount
    85 00001188 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
    86 0000118A E9F4FFFFFF          <1>     jmp .countQuotes
    87                              <1> .notQuoteToCount:
    88 0000118F 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
    89 00001191 75F0                <1>     jne .countQuotes
    90 00001193 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
    91 00001196 488D3D1EF1FFFF      <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
    92                              <1> .getChar:
    93 0000119D AC                  <1>     lodsb           ;Get char in buffer, advance rsi
    94 0000119E 3C22                <1>     cmp al, '"'     ;Is char a quote?
    95 000011A0 750E                <1>     jne .notQuote
    96 000011A2 FECD                <1>     dec ch          ;We have a quote, now decrement
    97 000011A4 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
    98                              <1> .searchForClosingQuote:
    99                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   100 000011A6 AA                  <1>     stosb   ;Store char and inc rdi
   101 000011A7 FEC1                <1>     inc cl
   102 000011A9 AC                  <1>     lodsb   ;Get next char
   103 000011AA 3C22                <1>     cmp al, '"'
   104 000011AC 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   105 000011AE FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   106                              <1> .notQuote:
   107 000011B0 E826060000          <1>     call peelRedir      ;Intervene redir if needed
   108 000011B5 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   109 000011B7 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   110 000011B9 EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   111                              <1> .pipeHandle:
   112                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   113 000011BB 0F842F030000        <1>     jz hardSynErr ;We had double pipe symbol, syntax error and reset!
   114                              <1> .notRedir:
   115 000011C1 AA                  <1>     stosb       ;Store char and advance rdi
   116 000011C2 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   117 000011C4 7404                <1>     je .exit
   118 000011C6 FEC1                <1>     inc cl      ;Increment char count
   119 000011C8 EBD3                <1>     jmp short .getChar    ;If not, get next char
   120                              <1> .exit:
   121 000011CA 880DEAF0FFFF        <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   122                              <1>     return
    13                              <2> %%_ret:
    14 000011D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   123                              <1> 
   124                              <1> makeCmdString:
   125                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   126                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   127                              <1> ; Copies into the psp.
   128                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   129 000011D1 488D35E3F0FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   130 000011D8 31C9                <1>     xor ecx, ecx
   131 000011DA 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   132                              <1> .countQuotes:
   133 000011DD AC                  <1>     lodsb
   134 000011DE 3C22                <1>     cmp al, '"'
   135 000011E0 7507                <1>     jne .notQuoteToCount
   136 000011E2 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   137 000011E4 E9F4FFFFFF          <1>     jmp .countQuotes
   138                              <1> .notQuoteToCount:
   139 000011E9 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   140 000011EB 75F0                <1>     jne .countQuotes
   141 000011ED 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   142 000011F0 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   143                              <1> .getChar:
   144 000011F7 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   145 000011F8 3C22                <1>     cmp al, '"'     ;Is char a quote?
   146 000011FA 750E                <1>     jne .notQuote
   147 000011FC FECD                <1>     dec ch          ;We have a quote, now decrement
   148 000011FE 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   149                              <1> .searchForClosingQuote:
   150                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   151 00001200 AA                  <1>     stosb   ;Store char and inc rdi
   152 00001201 FEC1                <1>     inc cl
   153 00001203 AC                  <1>     lodsb   ;Get next char
   154 00001204 3C22                <1>     cmp al, '"'
   155 00001206 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   156 00001208 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   157                              <1> .notQuote:
   158 0000120A 3C7C                <1>     cmp al, "|"
   159 0000120C 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   160 0000120E B00D                <1>     mov al, CR          ;Store the pipe char
   161 00001210 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   162                              <1> .notPipe:
   163 00001213 AA                  <1>     stosb       ;Store char and advance rdi
   164 00001214 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   165 00001216 7404                <1>     je .exit
   166 00001218 FEC1                <1>     inc cl      ;Increment char count
   167 0000121A EBDB                <1>     jmp short .getChar    ;If not, get next char
   168                              <1> .exit:
   169 0000121C 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   170 0000121F 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   171 00001226 803E0D              <1>     cmp byte [rsi], CR  
   172                              <1>     return
    13                              <2> %%_ret:
    14 00001229 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   173                              <1> 
   174                              <1> analyseCmdline:
   175                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   176                              <1> ; processes the command name into the FCB.  
   177 0000122A C60559F1FFFF00      <1>     mov byte [cmdName], 0   ;Init this field to indicate no cmd
   178                              <1> ;Start by searching for any switch chars! Set byte if switch chars fnd!!
   179 00001231 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   180 00001238 4889FE              <1>     mov rsi, rdi                    ;Prep rsi here too
   181 0000123B 0FB64FFF            <1>     movzx ecx, byte [rdi - 1]       ;Get the count byte
   182 0000123F 8A05E5EDFFFF        <1>     mov al, byte [switchChar]
   183 00001245 F2AE                <1>     repne scasb                     ;Scan for the switch char
   184 00001247 7506                <1>     jne .noSwitchFnd
   185 00001249 F61563EEFFFF        <1>     not byte [switchFnd]            ;Set switch char fnd on!
   186                              <1> .noSwitchFnd:
   187 0000124F E8892F0000          <1>     call skipDelimiters     ;Skip any preceeding separators from rsi
   188 00001254 803E0D              <1>     cmp byte [rsi], CR      ;We have no command? Return!
   189                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001257 74(29)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   190 00001259 4889F3              <1>     mov rbx, rsi            ;Save the start of the text in rbx
   191                              <1> .plp:
   192 0000125C 488D3DF7EEFFFF      <1>     lea rdi, cmdFcb         ;Loop on the commandFCB
   193 00001263 B801290000          <1>     mov eax, 2901h
   194 00001268 CD21                <1>     int 21h
   195 0000126A 3CFF                <1>     cmp al, -1  ;If DOS returns -1, we have a bad drive specified, fail!
   196 0000126C 0F8402010000        <1>     je .exitBadDrv
   197                              <1> .trailingDotLp:
   198                              <1> ;Reverse along trailing dots!
   199 00001272 807EFF2E            <1>     cmp byte [rsi - 1], "." ;Is this a dot?
   200 00001276 7505                <1>     jne .noTrailingDots
   201 00001278 48FFCE              <1>     dec rsi
   202 0000127B EBF5                <1>     jmp short .trailingDotLp
   203                              <1> .noTrailingDots:
   204 0000127D 8A05A6EDFFFF        <1>     mov al, byte [pathSep]  
   205 00001283 3806                <1>     cmp byte [rsi], al      ;Is the terminator a pathsep?
   206 00001285 7525                <1>     jne .notPs
   207 00001287 48FFC6              <1>     inc rsi ;Go to the char after the pathsep
   208 0000128A AC                  <1>     lodsb   ;Get this char
   209 0000128B 48FFCE              <1>     dec rsi ;And move rsi back to where we were
   210 0000128E 3C20                <1>     cmp al, 20h     ;Is this char below 32?
   211 00001290 7217                <1>     jb .delimfnd    ;Also a delimiter
   212 00001292 3C5C                <1>     cmp al, "\"     ;If this is a second pathsep, we are done
   213 00001294 7413                <1>     je .delimfnd
   214 00001296 3C2F                <1>     cmp al, "/"     ;Or an alt pathsep?
   215 00001298 740F                <1>     je .delimfnd
   216 0000129A 3C2E                <1>     cmp al, byte "."
   217 0000129C 740B                <1>     je .delimfnd
   218 0000129E 3C22                <1>     cmp al, byte '"'
   219 000012A0 7407                <1>     je .delimfnd
   220 000012A2 E8442F0000          <1>     call isALdelimiter  ;Is this a delim char?
   221 000012A7 75B3                <1>     jne .plp            ;If not, we loop again
   222                              <1> .delimfnd:
   223 000012A9 48FFCE              <1>     dec rsi             ;Point rsi to end of the command
   224                              <1> .notPs:
   225                              <1> ;Now we have reached the end of the command, rsi points to the first char
   226                              <1> ; after the command, whether a delimiter or not.
   227 000012AC 4889F1              <1>     mov rcx, rsi
   228 000012AF 4829D9              <1>     sub rcx, rbx    ;Get the number of chars in the command ONLY
   229 000012B2 4887DE              <1>     xchg rbx, rsi   ;Swap the start and end of the commands!!!
   230 000012B5 488D3D7FF0FFFF      <1>     lea rdi, cmdPathSpec
   231 000012BC F3A4                <1>     rep movsb
   232 000012BE 30C0                <1>     xor al, al
   233 000012C0 AA                  <1>     stosb   ;Store a terminating null
   234 000012C1 4887DE              <1>     xchg rbx, rsi
   235                              <1> ;Now we build FCBs for the arguments!
   236 000012C4 498D9881000000      <1>     lea rbx, qword [r8 + cmdLine]   ;Now we measure from the start of the buf!
   237 000012CB E893000000          <1>     call .skipAndCheckCR
   238 000012D0 745B                <1>     je .setupCmdVars
   239 000012D2 C605D3EDFFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   240 000012D9 4889F0              <1>     mov rax, rsi
   241 000012DC 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   242 000012DF 8805C8EDFFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   243 000012E5 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   244 000012E9 B801290000          <1>     mov eax, 2901h
   245 000012EE CD21                <1>     int 21h
   246 000012F0 8805B8EDFFFF        <1>     mov byte [arg1FCBret], al
   247                              <1> .skipArg:
   248 000012F6 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   249 000012F7 3C0D                <1>     cmp al, CR
   250 000012F9 7432                <1>     je .setupCmdVars
   251 000012FB E8EB2E0000          <1>     call isALdelimiter
   252 00001300 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   253 00001302 E85C000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   254 00001307 7424                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   255 00001309 C6059FEDFFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   256 00001310 4889F0              <1>     mov rax, rsi            
   257 00001313 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   258 00001316 880594EDFFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   259 0000131C 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   260 00001320 B801290000          <1>     mov eax, 2901h
   261 00001325 CD21                <1>     int 21h
   262 00001327 880584EDFFFF        <1>     mov byte [arg2FCBret], al
   263                              <1> .setupCmdVars:
   264                              <1> ;Before returning, we copy the command name to cmdName 
   265 0000132D 488D3D07F0FFFF      <1>     lea rdi, cmdPathSpec
   266 00001334 E85B2F0000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   267 00001339 E8742E0000          <1>     call strlen ;Get the length of the final path componant
   268 0000133E 81F90C000000        <1>     cmp ecx, 11 + 1 ;Extra char for the ext separator (dot)
   269 00001344 7726                <1>     ja .exitBad     ;Return error
   270 00001346 4889FE              <1>     mov rsi, rdi
   271 00001349 488D3D3AF0FFFF      <1>     lea rdi, cmdName
   272 00001350 FFC9                <1>     dec ecx ;Minus the terminating null
   273 00001352 880F                <1>     mov byte [rdi], cl ;Store the length here
   274 00001354 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   275                              <1> .cpCmdName:
   276 00001357 AC                  <1>     lodsb
   277 00001358 E85F2E0000          <1>     call ucChar ;Uppercase the char
   278 0000135D AA                  <1>     stosb
   279 0000135E FFC9                <1>     dec ecx
   280 00001360 75F5                <1>     jnz .cpCmdName
   281                              <1>     return
    13                              <2> %%_ret:
    14 00001362 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> .skipAndCheckCR:
   283                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   284 00001363 E8752E0000          <1>     call skipDelimiters ;Go to the next char in the input line
   285 00001368 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   286                              <1>     return
    13                              <2> %%_ret:
    14 0000136B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   287                              <1> .exitBad:
   288 0000136C C60517F0FFFFFF      <1>     mov byte [cmdName], -1  ;Store -1 to indicate error
   289                              <1>     return
    13                              <2> %%_ret:
    14 00001373 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   290                              <1> .exitBadDrv:
   291 00001374 C6050FF0FFFFFE      <1>     mov byte [cmdName], -2  ;Indicate a bad drive specified
   292 0000137B E869080000          <1>     call badDriveError
   293                              <1>     return
    13                              <2> %%_ret:
    14 00001380 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   294                              <1> 
   295                              <1> doCommandLine:
   296                              <1>     ;The following check accounts for the end of a piped command
   297 00001381 803D02F0FFFF00      <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, syntax error!
   298 00001388 0F8462010000        <1>     je hardSynErr   ;This now should never be hit, earmark for removal!
   299 0000138E 803DF5EFFFFFFF      <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   300 00001395 0F8487080000        <1>     je badCmdError
   301 0000139B 803DE8EFFFFFFE      <1>     cmp byte [cmdName], -2  ;Bad drive specified, nop
   302                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000013A2 74(80)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   303 000013A4 488D3590EFFFFF      <1>     lea rsi, cmdPathSpec
   304 000013AB 0FB71D89EFFFFF      <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   305 000013B2 80FF3A              <1>     cmp bh, ":"
   306 000013B5 7520                <1>     jne .noDriveSpecified
   307 000013B7 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   308 000013B9 E8FE2D0000          <1>     call ucChar     ;Uppercase al
   309 000013BE 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   310                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   311 000013C0 803DC3EFFFFF02      <1>     cmp byte [cmdName], 2
   312 000013C7 750E                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   313 000013C9 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   314 000013CB E8B82D0000          <1>     call setDrive
   315                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000013D0 74(80)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   316 000013D2 E912080000          <1>     jmp badDriveError
   317                              <1> .noDriveSpecified:
   318                              <1> ;rbx is writable UP TO THE FIRST PIPE OR CR (non-inclusive)
   319 000013D7 488D1DDBEEFFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer
   320 000013DE 488D35A5EFFFFF      <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   321 000013E5 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   322 000013EA BAFFFF0000          <1>     mov edx, 0FFFFh
   323 000013EF B5FF                <1>     mov ch, -1
   324 000013F1 CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   325 000013F3 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   326 000013F8 BAFFFF0000          <1>     mov edx, 0FFFFh
   327 000013FD 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   328 000013FF CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   329                              <1>             ;        al = 0  if the command should be executed as usual
   330 00001401 84C0                <1>     test al, al
   331 00001403 7444                <1>     jz .executeInternal
   332                              <1>     ;Here we execute externally and return to the prompt
   333                              <1>     ; as if it was an internal execution. rbx is not to be relied on here!
   334 00001405 498D9880000000      <1>     lea rbx, qword [r8 + cmdTail]
   335 0000140C 488D3577EFFFFF      <1>     lea rsi, cmdName        
   336 00001413 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   337 00001418 BAFFFF0000          <1>     mov edx, 0FFFFh
   338 0000141D B5FF                <1>     mov ch, -1
   339 0000141F CD2F                <1>     int 2Fh
   340 00001421 803D62EFFFFF00      <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   341                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001428 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000142A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   342                              <1>     ;We need to copy over to cmdPathSpec in the event this command
   343                              <1>     ; is an external command that is in the CD or in the PATH.
   344                              <1>     ;Should not be used for this purpose but it is here...
   345 0000142B E875050000          <1>     call pullCommandline    ;Pull the tail down with the original name
   346 00001430 488D3553EFFFFF      <1>     lea rsi, cmdName        ;Now make the new cmd the new cmdspec!
   347 00001437 AC                  <1>     lodsb                   ;Get the name length
   348 00001438 0FB6C8              <1>     movzx ecx, al
   349 0000143B 488D3DF9EEFFFF      <1>     lea rdi, cmdPathSpec    ;Overwrite the original specified command
   350 00001442 F3A4                <1>     rep movsb   
   351 00001444 31C0                <1>     xor eax, eax
   352 00001446 AA                  <1>     stosb   ;Store null terminator
   353 00001447 EB1F                <1>     jmp short .executeInternal2 ;Skip the equivalent for non-ae cases
   354                              <1> .executeInternal:
   355 00001449 E857050000          <1>     call pullCommandline    ;Now pull the tail down
   356 0000144E 488D3DE6EEFFFF      <1>     lea rdi, cmdPathSpec
   357 00001455 E8582D0000          <1>     call strlen ;Get the length of the input command
   358 0000145A FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   359 0000145C 380D28EFFFFF        <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   360 00001462 0F85B9230000        <1>     jne launchChild     ;If not, a path was specified, exit!
   361                              <1> .executeInternal2:
   362                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   363 00001468 488D1D7BF3FFFF      <1>     lea rbx, functionTable
   364                              <1> .nextEntry:
   365 0000146F 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   366 00001472 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   367 00001475 0F84A6230000        <1>     je launchChild      ;If so, check externally now
   368 0000147B 380D09EFFFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   369 00001481 7531                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   370                              <1>     ;Here they have the same length so lets see if the name is the same
   371 00001483 56                  <1>     push rsi
   372                              <1>     ;ecx has the length to compare
   373 00001484 51                  <1>     push rcx
   374 00001485 488D7301            <1>     lea rsi, qword [rbx + 1]
   375 00001489 488D3DFBEEFFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   376 00001490 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   377 00001492 59                  <1>     pop rcx
   378 00001493 5E                  <1>     pop rsi
   379 00001494 751E                <1>     jne .gotoNextEntry
   380                              <1>     ;Here it was found both strings are equal
   381 00001496 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   382 0000149B 480FB71F            <1>     movzx rbx, word [rdi]
   383 0000149F 488D3D5AEBFFFF      <1>     lea rdi, startLbl
   384 000014A6 4801FB              <1>     add rbx, rdi
   385 000014A9 C6055DEBFFFF00      <1>     mov byte [returnCode], 0 ;Reset the retcode before executing function!
   386 000014B0 FFD3                <1>     call rbx        ;Call the internal function!
   387 000014B2 EB0C                <1>     jmp short appRet    ;Now once we are done, goto appRet!
   388                              <1> .gotoNextEntry:
   389 000014B4 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   390 000014BB 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   391 000014BE EBAF                <1>     jmp short .nextEntry
   392                              <1> 
   393                              <1> appRet:  ;Return point from a task, jumped to from internal functions
   394                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled.
   395                              <1> ;Can depend on RSP here because I fixed DOS.
   396 000014C0 488B253EEBFFFF      <1>     mov rsp, qword [stackTop]   ;Reset stack ptr
   397 000014C7 E8B72F0000          <1>     call resetIDTentries
   398 000014CC B8004D0000          <1>     mov eax, 4D00h              ;Get retcode, will be 0 for internal commands
   399 000014D1 CD21                <1>     int 21h
   400 000014D3 66890533EBFFFF      <1>     mov word [returnCode], ax
   401 000014DA 84E4                <1>     test ah, ah     ;Regular exit
   402 000014DC 0F845AFCFFFF        <1>     jz commandMain.okRet
   403 000014E2 80FC03              <1>     cmp ah, 3       ;TSR exit
   404 000014E5 0F8451FCFFFF        <1>     je commandMain.okRet
   405                              <1>     ;Here we ask if we want to stop any batch processing, ret to 2Eh etc.
   406                              <1>     ;For now, just clean redirs
   407 000014EB E930000000          <1>     jmp redirPipeFailureCommon.noPrint  ;Jumps to commandMain
   408                              <1>     ;cmp ah, 1       ;Was this Ctrl^C?
   409                              <1>     ;je commandMain
   410                              <1>     ;jmp commandMain  ;If we aborted, fully reset!
   411                              <1> 
   412                              <1> hardSynErr:
   413                              <1> ;Hard syntax error in cmd line. Delete pipe files and reset completely!
   414 000014F0 E8D0060000          <1>     call badSyntaxError         ;Output bad syntax if empty command found
   415 000014F5 E926000000          <1>     jmp redirPipeFailureCommon.noPrint  ;This closes pipes and resets stack
   416                              <1> redirFailure:
   417 000014FA 488D15D3F9FFFF      <1>     lea rdx, redirErrMsg
   418 00001501 B913000000          <1>     mov ecx, redirErrMsgL
   419 00001506 EB0C                <1>     jmp short redirPipeFailureCommon
   420                              <1> pipeFailure:
   421 00001508 488D15AEF9FFFF      <1>     lea rdx, pipeErrMsg
   422 0000150F B917000000          <1>     mov ecx, pipeErrMsgL
   423                              <1> redirPipeFailureCommon:
   424                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   425                              <1> ;This routine tries to close whatever handles are not -1 and delete
   426                              <1> ; pipe files if the pipe count is not 0.
   427                              <1> ;It resets all variables and jumps to reset the stack!
   428 00001514 B800400000          <1>     mov eax, 4000h  ;Write handle
   429 00001519 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   430 0000151E CD21                <1>     int 21h
   431                              <1> .noPrint:
   432 00001520 0FB70581EBFFFF      <1>     movzx eax, word [redirSTDIN]
   433 00001527 0FB71574EBFFFF      <1>     movzx edx, word [pipeSTDIN]
   434 0000152E 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   435 00001530 E8D1000000          <1>     call .closeAndReplace
   436 00001535 0FB7056EEBFFFF      <1>     movzx eax, word [redirSTDOUT]
   437 0000153C 0FB71561EBFFFF      <1>     movzx edx, word [pipeSTDOUT]
   438 00001543 FFC3                <1>     inc ebx         ;Select STDOUT for closing
   439 00001545 E8BC000000          <1>     call .closeAndReplace
   440 0000154A 66C70553EBFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   441 00001553 0FB71D4EEBFFFF      <1>     movzx ebx, word [redirSTDIN]
   442 0000155A E896000000          <1>     call .closeHandle
   443                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   444 0000155F 66C70540EBFFFFFFFF  <1>     mov word [redirSTDIN], -1
   445 00001568 0FB71D3BEBFFFF      <1>     movzx ebx, word [redirSTDOUT]
   446 0000156F E881000000          <1>     call .closeHandle
   447 00001574 66C7052DEBFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   448 0000157D 0FB71D1EEBFFFF      <1>     movzx ebx, word [pipeSTDIN]
   449 00001584 E86C000000          <1>     call .closeHandle
   450 00001589 66C70510EBFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   451 00001592 0FB71D0BEBFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   452 00001599 E857000000          <1>     call .closeHandle
   453 0000159E 66C705FDEAFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   454 000015A7 C605F3EAFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   455 000015AE 488D1581EEFFFF      <1>     lea rdx, qword [pipe1Filespec]
   456 000015B5 803A00              <1>     cmp byte [rdx], 0
   457 000015B8 7407                <1>     jz .checkOld
   458 000015BA B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   459 000015BF CD21                <1>     int 21h
   460                              <1> .checkOld:
   461 000015C1 488D15BDEEFFFF      <1>     lea rdx, qword [pipe2Filespec]
   462 000015C8 803A00              <1>     cmp byte [rdx],0
   463 000015CB 7407                <1>     jz .pipeNamesComplete
   464 000015CD B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   465 000015D2 CD21                <1>     int 21h
   466                              <1> .pipeNamesComplete:
   467 000015D4 31C0                <1>     xor eax, eax
   468                              <1>     ;Invalidate the pointers and the paths too
   469 000015D6 488905F7EEFFFF      <1>     mov qword [newPipe], rax
   470 000015DD 488905F8EEFFFF      <1>     mov qword [oldPipe], rax
   471 000015E4 89054CEEFFFF        <1>     mov dword [pipe1Filespec], eax
   472 000015EA 890595EEFFFF        <1>     mov dword [pipe2Filespec], eax
   473                              <1> 
   474 000015F0 E990FAFFFF          <1>     jmp commandMain ;Retake input from the command line
   475                              <1> .closeHandle:
   476 000015F5 81FBFFFFFFFF        <1>     cmp ebx, -1
   477                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000015FB 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000015FD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   478 000015FE B8003E0000          <1>     mov eax, 3E00h
   479 00001603 CD21                <1>     int 21h
   480                              <1>     return
    13                              <2> %%_ret:
    14 00001605 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   481                              <1> .closeAndReplace:
   482                              <1> ;Input: ax = one possible handle, dx = second possible handle
   483                              <1> ;       bx = handle to close and copy ax/dx into
   484                              <1> ;Output: Handle intervened on. bx preserved
   485 00001606 C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   486 00001609 09D0                <1>     or eax, edx     ;Form packed
   487 0000160B 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   488                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001610 74(05)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   489 00001612 E8DEFFFFFF          <1>     call .closeHandle
   490 00001617 663DFFFF            <1>     cmp ax, -1      
   491 0000161B 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   492 0000161F 53                  <1>     push rbx
   493 00001620 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   494 00001623 B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   495 00001628 CD21                <1>     int 21h
   496 0000162A 5B                  <1>     pop rbx
   497                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000162B 73(05)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   498                              <1>     ;Else we now try to force con to open!
   499 0000162D E8C3FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   500 00001632 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   501 00001637 488D15E3F8FFFF      <1>     lea rdx, conName
   502 0000163E CD21                <1>     int 21h
   503                              <1>     return
    13                              <2> %%_ret:
    14 00001640 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   504                              <1> 
   505                              <1> advanceRedir:
   506                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   507                              <1> ;Close stdin redir then stdout redir. 
   508 00001641 F6055EEAFFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   509 00001648 0F8585000000        <1>     jnz .redirIn
   510 0000164E F6054CEAFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   511 00001655 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   512 0000165B 0FBF0540EAFFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   513 00001662 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   514 00001667 0F84EB000000        <1>     je .pipeOut              
   515                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   516 0000166D 0FB71D2EEAFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   517 00001674 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   518 00001676 B800460000          <1>     mov eax, 4600h
   519 0000167B CD21                <1>     int 21h
   520 0000167D 0F8285FEFFFF        <1>     jc pipeFailure
   521 00001683 B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   522 00001688 CD21                <1>     int 21h
   523 0000168A 0F8278FEFFFF        <1>     jc pipeFailure
   524 00001690 488B1545EEFFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   525 00001697 B800410000          <1>     mov eax, 4100h  ;Delete the file!
   526 0000169C CD21                <1>     int 21h
   527 0000169E 0F8264FEFFFF        <1>     jc pipeFailure
   528 000016A4 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   529 000016A7 66C705F2E9FFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   530                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   531                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   532                              <1>     ;Else exit!
   533 000016B0 0FBF05EDE9FFFF      <1>     movsx eax, word [pipeSTDOUT]
   534 000016B7 3DFFFFFFFF          <1>     cmp eax, -1
   535 000016BC 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   536 000016C2 C605D8E9FFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   537 000016C9 F605D7E9FFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   538 000016D0 753D                <1>     jnz .redirOut               ;Go for it if so!
   539                              <1>     return
    13                              <2> %%_ret:
    14 000016D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   540                              <1> .redirIn:
   541                              <1> ;Here we clean redirIn
   542 000016D3 0FB71DCEE9FFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   543 000016DA 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   544 000016DC B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   545 000016E1 CD21                <1>     int 21h
   546 000016E3 0F8211FEFFFF        <1>     jc redirFailure
   547 000016E9 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   548 000016EE CD21                <1>     int 21h
   549 000016F0 0F8204FEFFFF        <1>     jc redirFailure
   550 000016F6 66C705A9E9FFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   551 000016FF C605A0E9FFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   552 00001706 F60594E9FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   553 0000170D 7549                <1>     jnz .pipeOut
   554                              <1> .redirOut:
   555 0000170F F60591E9FFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   556                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001716 74(D2)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   557                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   558 00001718 F60582E9FFFFFF      <1>     test byte [pipeFlag], -1
   559 0000171F 7537                <1>     jnz short .pipeOut
   560 00001721 0FB71D82E9FFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   561 00001728 B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   562 0000172D B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   563 00001732 CD21                <1>     int 21h
   564 00001734 0F82C0FDFFFF        <1>     jc redirFailure
   565 0000173A B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   566 0000173F CD21                <1>     int 21h
   567 00001741 0F82B3FDFFFF        <1>     jc redirFailure
   568 00001747 66C7055AE9FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   569 00001750 C60550E9FFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   570                              <1>     return
    13                              <2> %%_ret:
    14 00001757 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   571                              <1> .pipeOut:
   572                              <1> ;Duplicate STDIN to save across pipe
   573 00001758 0FBF0545E9FFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   574 0000175F 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   575                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001764 74(57)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   576 00001766 B800450000          <1>     mov eax, 4500h
   577 0000176B 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   578 0000176D CD21                <1>     int 21h
   579 0000176F 0F8293FDFFFF        <1>     jc pipeFailure
   580 00001775 66890526E9FFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   581                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   582 0000177C B800460000          <1>     mov eax, 4600h
   583 00001781 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   584 00001783 FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   585 00001785 CD21                <1>     int 21h
   586 00001787 0F827BFDFFFF        <1>     jc pipeFailure
   587                              <1> ;Now return the original stdout to stdout
   588 0000178D 89D9                <1>     mov ecx, ebx
   589 0000178F 0FB71D0EE9FFFF      <1>     movzx ebx, word [pipeSTDOUT]
   590 00001796 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   591 0000179B CD21                <1>     int 21h
   592 0000179D 0F8265FDFFFF        <1>     jc pipeFailure
   593                              <1> ;Now close the DUP'ed STDOUT
   594 000017A3 B8003E0000          <1>     mov eax, 3E00h
   595 000017A8 CD21                <1>     int 21h
   596 000017AA 0F8258FDFFFF        <1>     jc pipeFailure
   597                              <1> ;Finally unwind STDIN to the beginning of the file
   598 000017B0 B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   599 000017B5 31DB                <1>     xor ebx, ebx    ;STDIN handle
   600 000017B7 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   601 000017B9 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   602 000017BB CD21                <1>     int 21h
   603 000017BD 0F8245FDFFFF        <1>     jc pipeFailure  ;This should never happen
   604 000017C3 488B150AEDFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   605 000017CA 4889150BEDFFFF      <1>     mov qword [oldPipe], rdx
   606 000017D1 66C705CAE8FFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   607                              <1>     return
    13                              <2> %%_ret:
    14 000017DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   608                              <1> 
   609                              <1> 
   610                              <1> peelRedir:
   611                              <1> ;Checks and sets up redir as appropriate
   612                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   613                              <1> ;       rsi points to the first char after the char in al in cpyBuffer
   614                              <1> ;Output: ZF=NZ => No redir
   615                              <1> ;        ZF=ZY => Redir
   616                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   617                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   618 000017DB 51                  <1>     push rcx
   619 000017DC 57                  <1>     push rdi
   620 000017DD 3C3C                <1>     cmp al, "<"
   621 000017DF 740C                <1>     je .inputRedir
   622 000017E1 3C3E                <1>     cmp al, ">"
   623 000017E3 7427                <1>     je .outputRedir
   624 000017E5 3C7C                <1>     cmp al, "|"
   625 000017E7 7441                <1>     je .pipeSetup
   626 000017E9 F8                  <1>     clc
   627                              <1> .redirExit:
   628 000017EA 5F                  <1>     pop rdi
   629 000017EB 59                  <1>     pop rcx
   630                              <1>     return
    13                              <2> %%_ret:
    14 000017EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   631                              <1> .inputRedir:
   632 000017ED C605B2E8FFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   633 000017F4 488D3D9DEBFFFF      <1>     lea rdi, rdrInFilespec
   634                              <1> .redirCommon:
   635 000017FB E8DD290000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   636 00001800 E8092B0000          <1>     call cpDelimPathToBufz
   637 00001805 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   638 00001808 30C0                <1>     xor al, al  ;Clear the ZF flag
   639 0000180A EBDE                <1>     jmp short .redirExit
   640                              <1> .outputRedir:
   641 0000180C C60594E8FFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   642 00001813 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   643 00001816 7509                <1>     jne .notDouble
   644 00001818 FE0589E8FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   645 0000181E 48FFC6              <1>     inc rsi ;Go past it too
   646                              <1> .notDouble:
   647 00001821 488D3DBFEBFFFF      <1>     lea rdi, rdrOutFilespec
   648 00001828 EBD1                <1>     jmp short .redirCommon
   649                              <1> .pipeSetup:
   650 0000182A 56                  <1>     push rsi    ;Save rsi pointing to char past |
   651 0000182B E8AD290000          <1>     call skipDelimiters ;Check if this is effectively a double || or |<CR>
   652 00001830 803E7C              <1>     cmp byte [rsi], "|" 
   653 00001833 7403                <1>     je .badFnd
   654 00001835 803E0D              <1>     cmp byte [rsi], CR
   655                              <1> .badFnd:
   656 00001838 5E                  <1>     pop rsi
   657 00001839 F9                  <1>     stc
   658 0000183A EBAE                <1>     jmp short .redirExit
   659                              <1> 
   660                              <1> setupRedirandPipes:
   661                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   662                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   663 0000183C 0F8484000000        <1>     jz .redirIn
   664 00001842 488D15EDEBFFFF      <1>     lea rdx, pipe1Filespec
   665 00001849 803A00              <1>     cmp byte [rdx], 0
   666 0000184C 7410                <1>     jz .pathFound
   667 0000184E 488D1530ECFFFF      <1>     lea rdx, pipe2Filespec
   668 00001855 803A00              <1>     cmp byte [rdx], 0
   669 00001858 0F85AAFCFFFF        <1>     jnz pipeFailure
   670                              <1> .pathFound:
   671 0000185E 4889156FECFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   672 00001865 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   673 0000186A BB01000000          <1>     mov ebx, 1
   674 0000186F CD21                <1>     int 21h
   675 00001871 0F8291FCFFFF        <1>     jc pipeFailure
   676 00001877 66890526E8FFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   677 0000187E E811290000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   678 00001883 0441                <1>     add al, "A"
   679 00001885 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   680 0000188A 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   681 0000188C 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   682 0000188E 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   683 00001890 B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   684 00001895 CD21                <1>     int 21h
   685 00001897 0F826BFCFFFF        <1>     jc pipeFailure
   686                              <1>     ;AX has the handle for this file now, this will become STDOUT
   687                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   688 0000189D 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   689 000018A0 B901000000          <1>     mov ecx, 1
   690 000018A5 B800460000          <1>     mov eax, 4600h
   691 000018AA CD21                <1>     int 21h
   692 000018AC 0F8256FCFFFF        <1>     jc pipeFailure
   693 000018B2 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   694 000018B7 CD21                <1>     int 21h
   695 000018B9 0F8249FCFFFF        <1>     jc pipeFailure
   696 000018BF C605DBE7FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   697                              <1> .redirIn:
   698                              <1> ;Now check if any other redir needs to be setup
   699                              <1> ;Checks and sets up redir as appropriate.
   700                              <1>     ;Setup the redir here for STDIN
   701 000018C6 F605D9E7FFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   702 000018CD 7449                <1>     jz .redirOut
   703 000018CF 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   704 000018D1 B800450000          <1>     mov eax, 4500h
   705 000018D6 CD21                <1>     int 21h
   706 000018D8 0F821CFCFFFF        <1>     jc redirFailure
   707 000018DE 668905C3E7FFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   708 000018E5 488D15ACEAFFFF      <1>     lea rdx, rdrInFilespec
   709 000018EC B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   710 000018F1 CD21                <1>     int 21h
   711 000018F3 0F8201FCFFFF        <1>     jc redirFailure
   712 000018F9 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   713 000018FB 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   714 000018FE B800460000          <1>     mov eax, 4600h
   715 00001903 CD21                <1>     int 21h
   716 00001905 0F82EFFBFFFF        <1>     jc redirFailure
   717 0000190B B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   718 00001910 CD21                <1>     int 21h
   719 00001912 0F82E2FBFFFF        <1>     jc redirFailure
   720                              <1> .redirOut:
   721 00001918 F60588E7FFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   722                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000191F 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001921 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   723 00001922 803D7BE7FFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   724                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001929 75(21)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   725                              <1>     ;Else setup the redir here for STDOUT
   726 0000192B BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   727 00001930 B800450000          <1>     mov eax, 4500h
   728 00001935 CD21                <1>     int 21h
   729 00001937 0F82BDFBFFFF        <1>     jc redirFailure
   730 0000193D 66890566E7FFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   731 00001944 488D159CEAFFFF      <1>     lea rdx, rdrOutFilespec
   732 0000194B B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   733 00001950 CD21                <1>     int 21h
   734 00001952 730F                <1>     jnc .fileExists
   735 00001954 B8003C0000          <1>     mov eax, 3C00h
   736 00001959 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   737 0000195B CD21                <1>     int 21h
   738 0000195D 0F8297FBFFFF        <1>     jc redirFailure
   739                              <1> .fileExists:
   740 00001963 B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   741 00001968 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   742 0000196B B800460000          <1>     mov eax, 4600h  ;DUP2
   743 00001970 CD21                <1>     int 21h
   744 00001972 0F8282FBFFFF        <1>     jc redirFailure
   745 00001978 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   746 0000197D CD21                <1>     int 21h
   747 0000197F 0F8275FBFFFF        <1>     jc redirFailure
   748 00001985 803D1BE7FFFF01      <1>     cmp byte [redirOut], 1
   749                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000198C 74(21)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   750                              <1>     ;Here we move the file pointer to the end of the file
   751 0000198E 31D2                <1>     xor edx, edx    ;Low order 32 bits
   752 00001990 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   753 00001992 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   754 00001997 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   755 0000199C CD21                <1>     int 21h
   756 0000199E 0F8256FBFFFF        <1>     jc redirFailure
   757                              <1>     return
    13                              <2> %%_ret:
    14 000019A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   758                              <1> 
   759                              <1> 
   760                              <1> pullCommandline:
   761                              <1> ;This command pulls the command tail down, removing the whole launch command
   762 000019A5 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   763                              <1> ;Skip leading separators
   764                              <1> .pctSkipLeading:
   765 000019AC AC                  <1>     lodsb   ;Get first char
   766 000019AD E839280000          <1>     call isALdelimiter
   767 000019B2 74F8                <1>     je .pctSkipLeading
   768 000019B4 48FFCE              <1>     dec rsi
   769                              <1>     ;rsi points to the start of the command
   770 000019B7 488D3D7DE9FFFF      <1>     lea rdi, cmdPathSpec
   771 000019BE E8EF270000          <1>     call strlen ;Get the length of the command
   772 000019C3 FFC9                <1>     dec ecx ;Minus the terminating null
   773 000019C5 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   774 000019C8 280DDFE6FFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   775 000019CE 280DDCE6FFFF        <1>     sub byte [arg2Off], cl
   776 000019D4 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   777 000019D6 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   778                              <1> .pctPullChars:
   779 000019DD AC                  <1>     lodsb
   780 000019DE AA                  <1>     stosb
   781 000019DF 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   782 000019E1 7404                <1>     je .pctExit
   783 000019E3 FFC1                <1>     inc ecx     ;Increment count
   784 000019E5 EBF6                <1>     jmp short .pctPullChars 
   785                              <1> .pctExit:
   786 000019E7 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   787                              <1>     return
    13                              <2> %%_ret:
    14 000019EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   788                              <1> 
   789                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   790                              <1> ;Input: rsi points to the count byte of a command line
   791 000019EF 4150                <1>     push r8
   792 000019F1 4151                <1>     push r9
   793 000019F3 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   794 000019F5 CD21                <1>     int 21h
   795 000019F7 52                  <1>     push rdx    ;Save on the stack
   796 000019F8 488D1D01E5FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   797 000019FF B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   798 00001A01 CD21                <1>     int 21h
   799 00001A03 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   800 00001A06 4989D9              <1>     mov r9, rbx
   801 00001A09 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   802 00001A10 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   803 00001A15 F348A5              <1>     rep movsq   ;Copy command line over
   804                              <1>     ;call doCommandLine
   805 00001A18 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   806 00001A19 B450                <1>     mov ah, 50h ;Set Current PSP
   807 00001A1B CD21                <1>     int 21h
   808 00001A1D 4159                <1>     pop r9
   809 00001A1F 4158                <1>     pop r8
   810 00001A21 48CF                <1>     iretq
    17                                  %include "./Source/cmdBat.asm"
     1                              <1> ;Main Batch processing routines go here!
     2                              <1> 
     3                              <1> batLaunch:
     4                              <1> ;Preps and launches a batch file!
     5 00001A23 488D1505000000      <1>     lea rdx, .batMsg
     6 00001A2A E96F250000          <1>     jmp printString
     7 00001A2F 424154434820707265- <1> .batMsg db "BATCH preprocessor not implemented",CR,LF,"$"
     7 00001A38 70726F636573736F72- <1>
     7 00001A41 206E6F7420696D706C- <1>
     7 00001A4A 656D656E7465640D0A- <1>
     7 00001A53 24                  <1>
     8 00001A54 BB200B0000          <1>     mov ebx, bbMaxAlloc << 4    ;Convert to paragraphs
     9 00001A59 B800480000          <1>     mov eax, 4800h
    10 00001A5E CD21                <1>     int 21h
    11 00001A60 730A                <1>     jnc .bbAlloced
    12 00001A62 E855010000          <1>     call badNoMemError  ;Print not enough mem error
    13 00001A67 E9B4FAFFFF          <1>     jmp  redirPipeFailureCommon.noPrint ;Clean up all redir and ret to cmdline
    14                              <1> .bbAlloced:
    15 00001A6C 48890541E6FFFF      <1>     mov qword [bbPtr], rax  ;Save the ptr here!
    16 00001A73 4889C3              <1>     mov rbx, rax
    17 00001A76 4889DF              <1>     mov rdi, rbx
    18 00001A79 B9B2000000          <1>     mov ecx, bbMaxAlloc     
    19 00001A7E F3AA                <1>     rep stosb               ;Clean the arena
    20 00001A80 4889DF              <1>     mov rdi, rbx            ;Point back to the head
    21 00001A83 8A0515E6FFFF        <1>     mov al, byte [echoFlg]
    22 00001A89 2401                <1>     and al, 1               ;Keep only low bit
    23 00001A8B 884301              <1>     mov byte [rbx + batBlockHdr.bEchoFlg], al
    24 00001A8E B8FFFFFFFF          <1>     mov eax, -1
    25 00001A93 B905000000          <1>     mov ecx, 5
    26 00001A98 488D7B1B            <1>     lea rdi, qword [rbx + batBlockHdr.wArgs]    ;Init the wArgs to no params!
    27 00001A9C F3AB                <1>     rep stosd   ;Store in dwords for speed. Leave rdi pointing at .cmdLine
    28 00001A9E 66C7431B0000        <1>     mov word [rbx + batBlockHdr.wArgs], 0   ;Arg %0 starts at offset 0!
    29 00001AA4 488D3590E8FFFF      <1>     lea rsi, cmdPathSpec
    30 00001AAB E8E9260000          <1>     call strcpy     ;Leave rdi past the terminating null
    31 00001AB0 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get char cnt for copy
    32 00001AB8 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get copy source
    33 00001ABF 57                  <1>     push rdi    ;Save the ptr to the start of cmd tail in batblock
    34 00001AC0 F3A4                <1>     rep movsb   ;Copy the command tail over
    35                              <1>     ;Since this copy is shorter than the space we have, we already have a free
    36                              <1>     ; terminating null. All good!
    37 00001AC2 5E                  <1>     pop rsi 
    38                              <1>     ;Now analyse the command line to get the word offsets. Get at most 10
    39 00001AC3 B901000000          <1>     mov ecx, 1  ;Start with argument 1
    40                              <1> .bbFndLp:
    41 00001AC8 E810270000          <1>     call skipDelimiters ;Skip leading delimiters, leave rsi at char1
    42 00001ACD E84F000000          <1>     call .bbCheckEndOfCmdLine   ;Is this the end of the command?
    43 00001AD2 741E                <1>     je .bbArgsDone      ;Yes
    44 00001AD4 E838000000          <1>     call .bbAddWordOff  ;Add the word offset to the table
    45 00001AD9 FFC1                <1>     inc ecx
    46 00001ADB 81F90A000000        <1>     cmp ecx, 10         ;Did we just process %9?
    47 00001AE1 740F                <1>     je .bbArgsDone
    48                              <1> .bbFndLp2:
    49 00001AE3 AC                  <1>     lodsb   ;Getch
    50 00001AE4 E802270000          <1>     call isALdelimiter  ;If this is a delimiter, we are at the end of the command
    51 00001AE9 74DD                <1>     je .bbFndLp
    52 00001AEB E831000000          <1>     call .bbCheckEndOfCmdLine
    53 00001AF0 75F1                <1>     jne .bbFndLp2   ;If not end of cmdline, see if next char delim
    54                              <1> .bbArgsDone:
    55                              <1>     ;Now copy the batch name
    56 00001AF2 488D3542E8FFFF      <1>     lea rsi, cmdPathSpec
    57 00001AF9 488D3DBCE5FFFF      <1>     lea rdi, batFile
    58 00001B00 E894260000          <1>     call strcpy             ;Copy the batch file name over
    59 00001B05 C605A7E5FFFFFF      <1>     mov byte [batFlag], -1  ;Fire up the batch processor as we are ready now!
    60 00001B0C E919000000          <1>     jmp batNextLine         ;Now we start reading the batch file!
    61                              <1> 
    62                              <1> .bbAddWordOff:
    63                              <1> ;Input: rsi -> First char of argument
    64                              <1> ;       ecx = Argument number
    65 00001B11 4889F0              <1>     mov rax, rsi
    66 00001B14 488D532F            <1>     lea rdx, qword [rbx + batBlockHdr.cmdLine]  ;Get addr of start of cmdline
    67 00001B18 4829D0              <1>     sub rax, rdx    ;Now get the difference in ax
    68 00001B1B 6689440B1B          <1>     mov word [rbx + batBlockHdr.wArgs + rcx], ax    ;Store this offset here
    69                              <1>     return
    13                              <2> %%_ret:
    14 00001B20 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    70                              <1> .bbCheckEndOfCmdLine:
    71                              <1> ;Input: rsi -> Char to check 
    72                              <1> ;Output: ZF=ZE if we hit a CR or a <NUL>
    73 00001B21 803E00              <1>     cmp byte [rsi], 0
    74                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001B24 74(20)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    75 00001B26 803E0D              <1>     cmp byte [rsi], CR
    76                              <1>     return
    13                              <2> %%_ret:
    14 00001B29 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    77                              <1> 
    78                              <1> batNextLine:
    79                              <1> ;This will:
    80                              <1> ;1) Open the batch file
    81                              <1> ;2) Read a line from the batch file one char at a time. 
    82                              <1> ;       Do any %%ENVVAR or %ARGUMENT replacements
    83                              <1> ;       MAX LEN OF BATCH FILE LINE POST REPLACEMENT: 127 + CR
    84                              <1> ;3) Close the batch file
    85 00001B2A 488D1535000000      <1>     lea rdx, .l1
    86 00001B31 B800090000          <1>     mov eax, 0900h
    87 00001B36 CD21                <1>     int 21h
    88 00001B38 4150                <1>     push r8
    89 00001B3A 48B800490000000000- <1>     mov rax, 4900h
    89 00001B43 00                  <1>
    90 00001B44 4C8B0569E5FFFF      <1>     mov r8, qword [bbPtr]   ;Just free, do this properly later
    91 00001B4B CD21                <1>     int 21h
    92 00001B4D 4158                <1>     pop r8
    93 00001B4F 48C7055AE5FFFF0000- <1>     mov qword [bbPtr], 0
    93 00001B58 0000                <1>
    94 00001B5A C60552E5FFFF00      <1>     mov byte [batFlag], 0
    95 00001B61 E91FF5FFFF          <1>     jmp commandMain
    96 00001B66 4261746368206D6F64- <1> .l1 db "Batch mode... wait, what? How did you do that?",CR,LF,"$"
    96 00001B6F 652E2E2E2077616974- <1>
    96 00001B78 2C20776861743F2048- <1>
    96 00001B81 6F772064696420796F- <1>
    96 00001B8A 7520646F2074686174- <1>
    96 00001B93 3F0D0A24            <1>
    97                              <1> 
    98                              <1> batErrorHandler:
    18                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badDiskFull:
     7                              <1> ;This is a different error return, as this closes handles and prints
     8                              <1> ; disk full error and resets the command line!
     9 00001B97 488D15E9EDFFFF      <1>     lea rdx, noSpace
    10 00001B9E 488D0D05F1FFFF      <1>     lea rcx, pipeErr
    11 00001BA5 F605F5E4FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the flag set
    12 00001BAC 746F                <1>     jz short badCmn ;If its just disk full, dont go through pipe clean
    13 00001BAE 480F45D1            <1>     cmovnz rdx, rcx ;Swap error messages if pipe flag is on
    14 00001BB2 E866000000          <1>     call badCmn     ;Print the string
    15 00001BB7 E964F9FFFF          <1>     jmp redirPipeFailureCommon.noPrint  ;Now close pipes and fully reset!
    16                              <1> badNoMemError:
    17 00001BBC 488D15B3F1FFFF      <1>     lea rdx, noMemMsg
    18 00001BC3 EB58                <1>     jmp short badCmn
    19                              <1> badSyntaxError:
    20 00001BC5 488D15B7F0FFFF      <1>     lea rdx, syntaxErr
    21 00001BCC EB4F                <1>     jmp short badCmn
    22                              <1> badEnvSpaceError:
    23 00001BCE 488D15CCEDFFFF      <1>     lea rdx, noEnvSpace
    24 00001BD5 EB46                <1>     jmp short badCmn
    25                              <1> badAccError:
    26 00001BD7 488D1551F0FFFF      <1>     lea rdx, accDenMsg
    27 00001BDE EB3D                <1>     jmp short badCmn
    28                              <1> badParamError:
    29 00001BE0 488D15C6EEFFFF      <1>     lea rdx, badParm
    30 00001BE7 EB34                <1>     jmp short badCmn
    31                              <1> badDriveError:
    32 00001BE9 488D1580EEFFFF      <1>     lea rdx, badDrv
    33 00001BF0 EB2B                <1>     jmp short badCmn
    34                              <1> badArgError:
    35 00001BF2 488D1543F1FFFF      <1>     lea rdx, badArgs
    36 00001BF9 EB22                <1>     jmp short badCmn
    37                              <1> badFileError:
    38 00001BFB 488D151EF1FFFF      <1>     lea rdx, badSpec
    39 00001C02 EB19                <1>     jmp short badCmn
    40                              <1> badDupFnf:
    41                              <1> ;Hybrid error message
    42 00001C04 488D1554EDFFFF      <1>     lea rdx, dupName
    43 00001C0B EB10                <1>     jmp short badCmn
    44                              <1> badFnf:
    45 00001C0D 488D1562EDFFFF      <1>     lea rdx, fnfMsg
    46 00001C14 EB07                <1>     jmp short badCmn
    47                              <1> badDirError:
    48 00001C16 488D1591EFFFFF      <1>     lea rdx, badDir
    49                              <1> badCmn:
    50 00001C1D E97C230000          <1>     jmp printString     ;This will be made nuanced later, to agree with DOS
    51                              <1> badCmdError:
    52 00001C22 488D151BEDFFFF      <1>     lea rdx, badCmd
    53 00001C29 EBF2                <1>     jmp short badCmn
    54                              <1> dir:
    55                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    56 00001C2B C605B6E9FFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    57 00001C32 C605B0E9FFFF00      <1>     mov byte [dirLineCtr], 0
    58 00001C39 C705A7E9FFFF000000- <1>     mov dword [dirFileCtr], 0
    58 00001C42 00                  <1>
    59 00001C43 C605A5E9FFFF00      <1>     mov byte [dirSrchDir], 0
    60 00001C4A 66C70591E8FFFF0000  <1>     mov word [searchSpec], 0
    61 00001C53 488D3D17EAFFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    62 00001C5A C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    63 00001C5D 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    63 00001C66 3F                  <1>
    64 00001C67 48894701            <1>     mov qword [rdi + fcb.filename], rax
    65 00001C6B C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    66                              <1>     ;Start by scanning for the switches
    67 00001C72 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    68 00001C79 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    69                              <1> .scanNew:
    70 00001C7C E85C250000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    71 00001C81 AC                  <1>     lodsb   ;Get this char
    72 00001C82 3C0D                <1>     cmp al, CR
    73 00001C84 744D                <1>     je .scanDone
    74 00001C86 3A059EE3FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    75 00001C8C 7524                <1>     jne .notSwitch
    76 00001C8E AC                  <1>     lodsb   ;Get the next char
    77 00001C8F E828250000          <1>     call ucChar
    78 00001C94 3C57                <1>     cmp al, "W"
    79 00001C96 7509                <1>     jne .notWide
    80 00001C98 800D49E9FFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    81 00001C9F EBDB                <1>     jmp short .scanNew
    82                              <1> .notWide:
    83 00001CA1 3C50                <1>     cmp al, "P"
    84 00001CA3 0F8537FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    85 00001CA9 800D38E9FFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    86 00001CB0 EBCA                <1>     jmp short .scanNew
    87                              <1> .notSwitch:
    88 00001CB2 F6052FE9FFFF04      <1>     test byte [dirFlags], dirFileType
    89 00001CB9 0F8521FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    90                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    91 00001CBF 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    92 00001CC2 E8A2260000          <1>     call copyArgumentToSearchSpec   
    93 00001CC7 48FFCE              <1>     dec rsi ;Point back to the terminator char
    94 00001CCA 800D17E9FFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    95 00001CD1 EBA9                <1>     jmp short .scanNew
    96                              <1> .scanDone:
    97 00001CD3 F6050EE9FFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    98 00001CDA 7438                <1>     jz .currentDrv
    99                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   100 00001CDC 488D3501E8FFFF      <1>     lea rsi, searchSpec
   101 00001CE3 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   102 00001CE7 752B                <1>     jne .currentDrv
   103                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   104 00001CE9 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   105 00001CEE 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   106 00001CF2 B801290000          <1>     mov eax, 2901h   ;Parse filename
   107 00001CF7 CD21                <1>     int 21h
   108 00001CF9 3CFF                <1>     cmp al, -1
   109 00001CFB 0F84E8FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   110                              <1>     ;Else the drive in the fcb is valid
   111 00001D01 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   112 00001D06 84C0                <1>     test al, al
   113 00001D08 740A                <1>     jz .currentDrv
   114 00001D0A FEC8                <1>     dec al  ;Convert to 0 based drive number
   115 00001D0C 8805DCE8FFFF        <1>     mov byte [dirDrv], al
   116 00001D12 EB0B                <1>     jmp short .dirPrintVol
   117                              <1> .currentDrv:
   118 00001D14 E87B240000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   119 00001D19 8805CFE8FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   120                              <1> .dirPrintVol:
   121 00001D1F 488D35BEE7FFFF      <1>     lea rsi, searchSpec
   122                              <1> ;Now construct the path on dirSrchDir.
   123 00001D26 488D3DC2E8FFFF      <1>     lea rdi, dirSrchDir
   124 00001D2D 0FB605BAE8FFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   125 00001D34 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   126 00001D36 0441                <1>     add al, "A" ;Turn into a letter
   127 00001D38 B43A                <1>     mov ah, ":"
   128 00001D3A 66AB                <1>     stosw   ;Store X: into the search path
   129 00001D3C B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   130 00001D41 CD2F                <1>     int 2fh
   131 00001D43 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   132 00001D45 0F849EFEFFFF        <1>     je badDriveError
   133                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   134 00001D4B 8A05D8E2FFFF        <1>     mov al, byte [pathSep]
   135 00001D51 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   136 00001D53 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   137 00001D55 AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   138 00001D56 FEC2                <1>     inc dl  ;Increment by 1
   139 00001D58 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   140 00001D5B B800470000          <1>     mov eax, 4700h  ;Print current working directory
   141 00001D60 CD21                <1>     int 21h
   142 00001D62 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   143                              <1>     ;rsi points to the first char in the provided path.
   144                              <1>     ;rdi points to the first char of the cwd.
   145 00001D65 31C0                <1>     xor eax, eax
   146                              <1> .goToEndOfCwd:
   147                              <1> ;Move to the end of the string, could use repne?
   148 00001D67 3807                <1>     cmp byte [rdi], al
   149 00001D69 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   150 00001D6B 48FFC7              <1>     inc rdi
   151 00001D6E EBF7                <1>     jmp short .goToEndOfCwd
   152                              <1> .prepCopy:
   153 00001D70 8A05B3E2FFFF        <1>     mov al, byte [pathSep]
   154 00001D76 3806                <1>     cmp byte [rsi], al
   155 00001D78 7412                <1>     je .copyPathLoop
   156 00001D7A B43A                <1>     mov ah, ":"
   157 00001D7C 86C4                <1>     xchg al, ah
   158 00001D7E 663947FE            <1>     cmp word [rdi - 2], ax
   159 00001D82 7408                <1>     je .copyPathLoop
   160 00001D84 88E0                <1>     mov al, ah
   161 00001D86 3847FF              <1>     cmp byte [rdi - 1], al
   162 00001D89 7401                <1>     je .copyPathLoop
   163 00001D8B AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   164                              <1> .copyPathLoop:
   165 00001D8C AC                  <1>     lodsb
   166 00001D8D 3A0596E2FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   167 00001D93 7509                <1>     jne .checkDot  ;If not, store it
   168                              <1> .lpPathseps:
   169 00001D95 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   170 00001D97 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   171 00001D99 48FFC6              <1>     inc rsi
   172 00001D9C EBF7                <1>     jmp short .lpPathseps
   173                              <1> .checkDot:
   174 00001D9E 3C2E                <1>     cmp al, "."
   175 00001DA0 7407                <1>     je .dots
   176                              <1> .store:
   177 00001DA2 AA                  <1>     stosb
   178 00001DA3 84C0                <1>     test al, al ;Was the char we just copied a null?
   179 00001DA5 7472                <1>     jz .exitPathCopy
   180 00001DA7 EBE3                <1>     jmp short .copyPathLoop
   181                              <1> .dots:
   182                              <1>     ;Here handle dot and dot dot
   183                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   184                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   185                              <1>     ; by 1. If it is null, go to top of loop.
   186                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   187 00001DA9 8A257AE2FFFF        <1>     mov ah, byte [pathSep]
   188 00001DAF 3867FF              <1>     cmp byte [rdi - 1], ah  
   189 00001DB2 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   190 00001DB4 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   191 00001DB6 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   192 00001DB9 7413                <1>     je .twoDot
   193                              <1>     ;This is only a "current dir" when next char is pathsep or null
   194 00001DBB 3A2568E2FFFF        <1>     cmp ah, byte [pathSep]
   195 00001DC1 7406                <1>     je .skipThisPathsep
   196 00001DC3 84E4                <1>     test ah, ah
   197 00001DC5 74C5                <1>     jz .copyPathLoop
   198 00001DC7 EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   199                              <1> .skipThisPathsep:
   200                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   201 00001DC9 48FFC6              <1>     inc rsi ;Point to the pathsep
   202 00001DCC EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   203                              <1> .twoDot:
   204                              <1>     ;Woohoo, this works!
   205 00001DCE 48FFC6              <1>     inc rsi ;Move past the second dot
   206 00001DD1 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   207 00001DD3 3A2550E2FFFF        <1>     cmp ah, byte [pathSep]
   208 00001DD9 7408                <1>     je .tdOk
   209 00001DDB 84E4                <1>     test ah, ah
   210 00001DDD 0F85FDFDFFFF        <1>     jne badParamError
   211                              <1> .tdOk:
   212 00001DE3 8A0540E2FFFF        <1>     mov al, byte byte [pathSep]
   213 00001DE9 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   214 00001DED 0F84EDFDFFFF        <1>     je badParamError
   215 00001DF3 4881EF02000000      <1>     sub rdi, 2
   216 00001DFA 31C9                <1>     xor ecx, ecx
   217 00001DFC FFC9                <1>     dec ecx
   218 00001DFE FD                  <1>     std
   219 00001DFF F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   220 00001E01 FC                  <1>     cld
   221 00001E02 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   222 00001E09 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   223 00001E0B 0F847BFFFFFF        <1>     jz .copyPathLoop
   224 00001E11 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   225 00001E14 E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   226                              <1> .exitPathCopy:
   227                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   228 00001E19 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   229 00001E20 8A0503E2FFFF        <1>     mov al, byte [pathSep]
   230 00001E26 B43A                <1>     mov ah, ":"
   231 00001E28 86C4                <1>     xchg al, ah
   232 00001E2A 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   233 00001E2E 7409                <1>     je .skipOverwrite
   234 00001E30 88E0                <1>     mov al, ah
   235 00001E32 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   236 00001E34 7503                <1>     jne .skipOverwrite
   237 00001E36 C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   238                              <1> .skipOverwrite:
   239 00001E39 488D35AFE7FFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   240 00001E40 4889F7              <1>     mov rdi, rsi
   241 00001E43 B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   242 00001E48 CD2F                <1>     int 2fh
   243 00001E4A E827250000          <1>     call scanForWildcards
   244 00001E4F 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   245 00001E51 4889F2              <1>     mov rdx, rsi
   246 00001E54 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   247 00001E58 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   248                              <1> .notNull:
   249 00001E5A E809260000          <1>     call setDTA ;Set the DTA
   250 00001E5F B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   251 00001E64 B8004E0000          <1>     mov eax, 4E00h ;Find first
   252 00001E69 CD21                <1>     int 21h
   253 00001E6B 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   254                              <1> ;Now we have searched for the file, is a directory?
   255 00001E6D F6050BE3FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   256 00001E74 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   257                              <1>     ;Here we are searching IN a directory. Default search pattern!
   258 00001E76 31C0                <1>     xor eax, eax
   259 00001E78 31C9                <1>     xor ecx, ecx
   260 00001E7A FFC9                <1>     dec ecx
   261 00001E7C F2AE                <1>     repne scasb
   262 00001E7E 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   263 00001E81 EB40                <1>     jmp short .wcDefaultSearch
   264                              <1> .wcSearchPattern:
   265                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   266                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   267 00001E83 31C0                <1>     xor eax, eax
   268 00001E85 31C9                <1>     xor ecx, ecx
   269 00001E87 FFC9                <1>     dec ecx
   270 00001E89 F2AE                <1>     repne scasb ;Scan forwards
   271                              <1>     ;Here rdi points past the null at the end
   272 00001E8B 8A0598E1FFFF        <1>     mov al, byte [pathSep]
   273 00001E91 31C9                <1>     xor ecx, ecx
   274 00001E93 FFC9                <1>     dec ecx
   275 00001E95 FD                  <1>     std ;Search backwards
   276 00001E96 F2AE                <1>     repne scasb
   277 00001E98 FC                  <1>     cld ;Search forwards again
   278 00001E99 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   279 00001E9C 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   280 00001EA0 7503                <1>     jne .wcsp1
   281 00001EA2 48FFC7              <1>     inc rdi ;Go one char forwards
   282                              <1> .wcsp1:
   283                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   284 00001EA5 57                  <1>     push rdi
   285 00001EA6 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   286 00001EA8 7503                <1>     jne .wcsp2
   287 00001EAA 48FFC7              <1>     inc rdi
   288                              <1> .wcsp2:
   289 00001EAD 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   290 00001EB0 488D3DBAE7FFFF      <1>     lea rdi, dirSrchFCB
   291 00001EB7 B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   292 00001EBC CD21                <1>     int 21h
   293 00001EBE 5F                  <1>     pop rdi
   294 00001EBF 31C0                <1>     xor eax, eax
   295 00001EC1 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   296                              <1> .wcDefaultSearch:
   297 00001EC3 0FB60524E7FFFF      <1>     movzx eax, byte [dirDrv] 
   298 00001ECA E86A160000          <1>     call volume.dirEP
   299 00001ECF 488D1540EDFFFF      <1>     lea rdx, dirMain    ;Print message intro
   300 00001ED6 B409                <1>     mov ah, 09h
   301 00001ED8 CD21                <1>     int 21h
   302 00001EDA C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   303 00001EDD 488D150BE7FFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   304 00001EE4 B409                <1>     mov ah, 09h
   305 00001EE6 CD21                <1>     int 21h
   306 00001EE8 C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   307 00001EEB 488D15F8E9FFFF      <1>     lea rdx, crlf2
   308 00001EF2 B409                <1>     mov ah, 09h
   309 00001EF4 CD21                <1>     int 21h
   310                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   311                              <1> ;rdi points to the terminating null
   312 00001EF6 8A052DE1FFFF        <1>     mov al, byte [pathSep]
   313 00001EFC 3847FF              <1>     cmp byte [rdi - 1], al
   314 00001EFF 7403                <1>     je .root
   315 00001F01 48FFC7              <1>     inc rdi
   316                              <1> .root:
   317 00001F04 48FFCF              <1>     dec rdi ;Point back to the pathsep
   318 00001F07 AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   319 00001F08 488D3563E7FFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   320 00001F0F E8A4230000          <1>     call FCBToAsciiz    ;Terminates for free
   321 00001F14 E801000000          <1>     call .searchForFile
   322                              <1>     return
    13                              <2> %%_ret:
    14 00001F19 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   323                              <1> 
   324                              <1> .searchForFile:
   325 00001F1A E849250000          <1>     call setDTA
   326 00001F1F B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   327 00001F24 488D15C4E6FFFF      <1>     lea rdx, dirSrchDir
   328 00001F2B B8004E0000          <1>     mov eax, 4E00h ;Find first
   329 00001F30 CD21                <1>     int 21h
   330 00001F32 720B                <1>     jc .dirNoMoreFiles
   331                              <1> .findNext:
   332 00001F34 E890000000          <1>     call .dirPrintFileData  ;Print the file information
   333 00001F39 B44F                <1>     mov ah, 4Fh
   334 00001F3B CD21                <1>     int 21h
   335 00001F3D 73F5                <1>     jnc .findNext 
   336                              <1> .dirNoMoreFiles:
   337 00001F3F F605A2E6FFFF01      <1>     test byte [dirFlags], dirWideType
   338 00001F46 740B                <1>     jz .dirNoEndNewLine
   339 00001F48 488D1598E9FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   340 00001F4F B409                <1>     mov ah, 09h
   341 00001F51 CD21                <1>     int 21h
   342                              <1> .dirNoEndNewLine:
   343                              <1>     ;Now we print the number of files and the number of bytes on the disk
   344 00001F53 F7058DE6FFFFFFFFFF- <1>     test dword [dirFileCtr], -1
   344 00001F5C FF                  <1>
   345 00001F5D 750D                <1>     jnz .filesFound
   346                              <1>     ;Else print File not found and exit!
   347 00001F5F 488D1510EAFFFF      <1>     lea rdx, fnfMsg
   348 00001F66 E833200000          <1>     call printString
   349                              <1>     return
    13                              <2> %%_ret:
    14 00001F6B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   350                              <1> .filesFound:
   351 00001F6C 488D1578EFFFFF      <1>     lea rdx, fourSpc
   352 00001F73 B409                <1>     mov ah, 09h
   353 00001F75 CD21                <1>     int 21h
   354 00001F77 B409                <1>     mov ah, 09h ;Print four Spaces twice
   355 00001F79 CD21                <1>     int 21h
   356 00001F7B 8B0569E6FFFF        <1>     mov eax, dword [dirFileCtr]   ;Get number of files
   357 00001F81 E804240000          <1>     call printDecimalWord
   358 00001F86 488D15C2EAFFFF      <1>     lea rdx, dirOk
   359 00001F8D B409                <1>     mov ah, 09h
   360 00001F8F CD21                <1>     int 21h
   361 00001F91 488D1558EFFFFF      <1>     lea rdx, threeSpc
   362 00001F98 B409                <1>     mov ah, 09h
   363 00001F9A CD21                <1>     int 21h
   364 00001F9C B800360000          <1>     mov eax, 3600h ;Get disk info
   365 00001FA1 8A1547E6FFFF        <1>     mov dl, byte [dirDrv]
   366 00001FA7 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   367 00001FA9 CD21                <1>     int 21h ;Get disk free space info
   368 00001FAB 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   369 00001FAE 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   370 00001FB1 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   371 00001FB3 F7E1                <1>     mul ecx ;Get bytes per cluster
   372 00001FB5 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   373                              <1>     ;rax now has the number of free bytes on the disk
   374 00001FB8 E8CD230000          <1>     call printDecimalWord
   375 00001FBD 488D1595EAFFFF      <1>     lea rdx, bytesOk
   376 00001FC4 B409                <1>     mov ah, 09h
   377 00001FC6 CD21                <1>     int 21h
   378                              <1>     return
    13                              <2> %%_ret:
    14 00001FC8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   379                              <1> 
   380                              <1> .dirPrintFileData:
   381                              <1> ;Use cmdFcb to build the file name with space
   382                              <1> ;Start by print the name (same for both cases)
   383                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   384 00001FC9 F605AFE1FFFF46      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles | dirCharDev
   385                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001FD0 75(C8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   386 00001FD2 488D35AFE1FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   387 00001FD9 488D3D7AE1FFFF      <1>     lea rdi, cmdFcb
   388 00001FE0 E865220000          <1>     call asciiFilenameToFCB
   389 00001FE5 488D156EE1FFFF      <1>     lea rdx, cmdFcb
   390 00001FEC B908000000          <1>     mov ecx, 8  ;Print 8 chars
   391 00001FF1 BB01000000          <1>     mov ebx, 1  ;STDOUT
   392 00001FF6 B440                <1>     mov ah, 40h ;Write handle
   393 00001FF8 CD21                <1>     int 21h
   394 00001FFA 52                  <1>     push rdx
   395 00001FFB B220                <1>     mov dl, " "
   396 00001FFD B402                <1>     mov ah, 02h ;Print char
   397 00001FFF CD21                <1>     int 21h
   398 00002001 5A                  <1>     pop rdx
   399 00002002 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   400 00002009 B903000000          <1>     mov ecx, 3  ;Print three chars
   401 0000200E BB01000000          <1>     mov ebx, 1  ;STDOUT
   402 00002013 B440                <1>     mov ah, 40h ;Write handle
   403 00002015 CD21                <1>     int 21h
   404 00002017 F605CAE5FFFF01      <1>     test byte [dirFlags], dirWideType
   405 0000201E 0F85AA000000        <1>     jnz .widePrint
   406                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   407                              <1>     ;Now check if a DIR
   408 00002024 F60554E1FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   409 0000202B 7418                <1>     jz .dirPrintNotDir
   410 0000202D 488D1533EAFFFF      <1>     lea rdx, dirLbl
   411 00002034 B409                <1>     mov ah, 09h
   412 00002036 CD21                <1>     int 21h
   413 00002038 488D15B1EEFFFF      <1>     lea rdx, threeSpc
   414 0000203F B409                <1>     mov ah, 09h
   415 00002041 CD21                <1>     int 21h
   416 00002043 EB4F                <1>     jmp short .dirPrintFileDT
   417                              <1> .dirPrintNotDir:
   418                              <1> ;Here we print the file size
   419 00002045 B220                <1>     mov dl, " "
   420 00002047 B402                <1>     mov ah, 02h
   421 00002049 CD21                <1>     int 21h
   422 0000204B 8B0533E1FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   423 00002051 E8A5230000          <1>     call getDecimalWord
   424 00002056 4889CB              <1>     mov rbx, rcx
   425 00002059 51                  <1>     push rcx
   426 0000205A 480FCB              <1>     bswap rbx
   427 0000205D B908000000          <1>     mov ecx, 8
   428                              <1> .dirPrintFileSizePrep:
   429 00002062 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   430 00002064 7514                <1>     jne .dirPrintFileSize
   431 00002066 B402                <1>     mov ah, 02h
   432 00002068 B220                <1>     mov dl, " "
   433 0000206A CD21                <1>     int 21h
   434 0000206C 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   435 00002070 FFC9                <1>     dec ecx
   436 00002072 81F901000000        <1>     cmp ecx, 1
   437 00002078 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   438                              <1> .dirPrintFileSize:
   439 0000207A 5B                  <1>     pop rbx
   440                              <1> .dirPrintFileSizeLoop:
   441 0000207B 88DA                <1>     mov dl, bl
   442 0000207D B402                <1>     mov ah, 02h
   443 0000207F CD21                <1>     int 21h
   444 00002081 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   445 00002085 FFC9                <1>     dec ecx
   446 00002087 75F2                <1>     jnz .dirPrintFileSizeLoop
   447 00002089 488D1564EEFFFF      <1>     lea rdx, twoSpc
   448 00002090 B409                <1>     mov ah, 09h
   449 00002092 CD21                <1>     int 21h
   450                              <1> .dirPrintFileDT:
   451 00002094 B220                <1>     mov dl, " "
   452 00002096 B402                <1>     mov ah, 02h
   453 00002098 CD21                <1>     int 21h
   454 0000209A 0FB705E1E0FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   455 000020A1 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   456 000020A3 E8A61C0000          <1>     call printDate
   457 000020A8 488D1545EEFFFF      <1>     lea rdx, twoSpc
   458 000020AF B409                <1>     mov ah, 09h
   459 000020B1 CD21                <1>     int 21h
   460 000020B3 0FB705C6E0FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   461 000020BA E8B11D0000          <1>     call printTime
   462 000020BF 488D1521E8FFFF      <1>     lea rdx, crlf
   463 000020C6 B409                <1>     mov ah, 09h
   464 000020C8 CD21                <1>     int 21h
   465 000020CA B017                <1>     mov al, 23  ;23 lines... for the next bit
   466 000020CC EB0D                <1>     jmp short .dirPrintNameExit
   467                              <1> .widePrint:
   468                              <1> ;If /W, print name space ext space space space space
   469 000020CE 488D1516EEFFFF      <1>     lea rdx, fourSpc
   470 000020D5 B409                <1>     mov ah, 09h ;Print string
   471 000020D7 CD21                <1>     int 21h
   472 000020D9 B073                <1>     mov al, 5*23    ;5 entries per line...
   473                              <1> .dirPrintNameExit:
   474 000020DB FF0509E5FFFF        <1>     inc dword [dirFileCtr]   ;Increment file counter
   475 000020E1 FE0502E5FFFF        <1>     inc byte [dirLineCtr]
   476 000020E7 3805FCE4FFFF        <1>     cmp byte [dirLineCtr], al
   477                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000020ED 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000020EF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   478 000020F0 F605F1E4FFFF02      <1>     test byte [dirFlags], dirPageType
   479 000020F7 741A                <1>     jz .dirPrnNoPag
   480 000020F9 488D158EE9FFFF      <1>     lea rdx, pauseMes
   481 00002100 B409                <1>     mov ah, 09h
   482 00002102 CD21                <1>     int 21h
   483 00002104 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   484 00002106 CD21                <1>     int 21h
   485 00002108 488D15D8E7FFFF      <1>     lea rdx, crlf   ;Force new line
   486 0000210F B409                <1>     mov ah, 09h
   487 00002111 CD21                <1>     int 21h
   488                              <1> .dirPrnNoPag:
   489 00002113 C605CFE4FFFF00      <1>     mov byte [dirLineCtr], 0
   490                              <1>     return
    13                              <2> %%_ret:
    14 0000211A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   491                              <1> 
   492                              <1> chdir:
   493 0000211B F6058ADFFFFFFF      <1>     test byte [arg1Flg], -1
   494 00002122 754D                <1>     jnz .changeDir
   495                              <1>     ;Print CWD
   496                              <1> .printCWD:
   497 00002124 E8EA1E0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   498 00002129 E8691E0000          <1>     call printCRLF
   499                              <1>     return
    13                              <2> %%_ret:
    14 0000212E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> .printDiskCWD:
   501                              <1> ;Print CWD for a specified drive
   502 0000212F 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   503 00002133 88D0                <1>     mov al, dl
   504 00002135 0440                <1>     add al, "@" ;Get the UC letter
   505 00002137 B43A                <1>     mov ah, ":"
   506 00002139 488D3DA4E3FFFF      <1>     lea rdi, searchSpec
   507 00002140 66AB                <1>     stosw   ;Store X:, rdi+=2
   508 00002142 8A05E1DEFFFF        <1>     mov al, byte [pathSep]
   509 00002148 AA                  <1>     stosb   ;Store pathSep, inc rdi
   510 00002149 B447                <1>     mov ah, 47h ;Get Current Working Directory
   511 0000214B 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   512 0000214E CD21                <1>     int 21h
   513 00002150 E85D200000          <1>     call strlen
   514 00002155 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   515 0000215B B440                <1>     mov ah, 40h ;Write to handle
   516 0000215D BB01000000          <1>     mov ebx, 1  ;STDOUT
   517 00002162 488D157BE3FFFF      <1>     lea rdx, searchSpec
   518 00002169 CD21                <1>     int 21h
   519 0000216B E8271E0000          <1>     call printCRLF
   520                              <1>     return
    13                              <2> %%_ret:
    14 00002170 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   521                              <1> .changeDir:
   522 00002171 8A0537DFFFFF        <1>     mov al, byte [arg1FCBret]
   523 00002177 3CFF                <1>     cmp al, -1 
   524 00002179 0F846AFAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   525 0000217F E8CD210000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   526 00002184 488D1559E3FFFF      <1>     lea rdx, searchSpec
   527 0000218B B43B                <1>     mov ah, 3Bh ;CHDIR
   528 0000218D CD21                <1>     int 21h
   529 0000218F 0F8281FAFFFF        <1>     jc badDirError
   530                              <1>     return
    13                              <2> %%_ret:
    14 00002195 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   531                              <1> 
   532                              <1> mkdir:
   533 00002196 F6050FDFFFFFFF      <1>     test byte [arg1Flg], -1
   534 0000219D 0F844FFAFFFF        <1>     jz badArgError
   535 000021A3 F60505DFFFFFFF      <1>     test byte [arg2Flg], -1
   536 000021AA 0F8542FAFFFF        <1>     jnz badArgError
   537                              <1>     ;We have exactly one argument
   538 000021B0 8A05F8DEFFFF        <1>     mov al, byte [arg1FCBret]
   539 000021B6 3CFF                <1>     cmp al, -1 
   540 000021B8 0F842BFAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   541 000021BE E88E210000          <1>     call buildCommandPath
   542 000021C3 488D151AE3FFFF      <1>     lea rdx, searchSpec
   543 000021CA B800390000          <1>     mov eax, 3900h  ;MKDIR
   544 000021CF CD21                <1>     int 21h
   545                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000021D1 73(95)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   546                              <1> .badMake:   ;Else, bad make
   547 000021D3 488D15E8E9FFFF      <1>     lea rdx, badMD
   548 000021DA E9BF1D0000          <1>     jmp printString
   549                              <1> 
   550                              <1> rmdir:
   551 000021DF F605C6DEFFFFFF      <1>     test byte [arg1Flg], -1
   552 000021E6 0F8406FAFFFF        <1>     jz badArgError
   553 000021EC F605BCDEFFFFFF      <1>     test byte [arg2Flg], -1
   554 000021F3 0F85F9F9FFFF        <1>     jnz badArgError
   555                              <1>     ;We have exactly one argument
   556 000021F9 8A05AFDEFFFF        <1>     mov al, byte [arg1FCBret]
   557 000021FF 3CFF                <1>     cmp al, -1 
   558 00002201 0F84E2F9FFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   559 00002207 E845210000          <1>     call buildCommandPath
   560 0000220C 488D15D1E2FFFF      <1>     lea rdx, searchSpec
   561 00002213 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   562 00002218 CD21                <1>     int 21h
   563                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000221A 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000221C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   564                              <1> .badRemove:   ;Else, bad make
   565 0000221D 488D15BBE9FFFF      <1>     lea rdx, badRD
   566 00002224 E9751D0000          <1>     jmp printString
   567                              <1> 
   568                              <1> copy:
   569 00002229 66C7059FE5FFFFFFFF  <1>     mov word [sourceHdl], -1
   570 00002232 66C70598E5FFFFFFFF  <1>     mov word [destHdl], -1
   571 0000223B 66C70591E5FFFFFFFF  <1>     mov word [srcHdlInfo], -1
   572 00002244 C6059AE5FFFF00      <1>     mov byte [bCpFlg], 0    ;State flag!
   573 0000224B 48C70581E5FFFF0000- <1>     mov qword [cpBufPtr], 0 ;Init to null ptr!
   573 00002254 0000                <1>
   574 00002256 66C70580E5FFFF0000  <1>     mov word [wCpBufSz], 0  ;Clear buffer count        
   575 0000225F C70578E5FFFF000000- <1>     mov dword [dCpCnt], 0   ;Clear file count
   575 00002268 00                  <1>
   576 00002269 C60541E4FFFF00      <1>     mov byte [srcSpec], 0   ;Clear first bytes of the buffers
   577 00002270 C605BCE4FFFF00      <1>     mov byte [destSpec], 0
   578 00002277 48C70533E5FFFF0000- <1>     mov qword [srcPtr], 0
   578 00002280 0000                <1>
   579 00002282 48C70530E5FFFF0000- <1>     mov qword [destPtr], 0
   579 0000228B 0000                <1>
   580 0000228D E8D6210000          <1>     call setDTA
   581 00002292 B800540000          <1>     mov eax, 5400h  ;Get verify flag
   582 00002297 CD21                <1>     int 21h
   583 00002299 880531E5FFFF        <1>     mov byte [verifyFlg], al    ;Save verify flag!
   584                              <1> ;Start with getting a disk buffer, of the size of the internal disk buffers. 
   585                              <1> ;If we cant allocate full diskbuffer, get as much as we can
   586                              <1> ;Diskbuffer as thats the best optimisation for IO buffers
   587 0000229F B800520000          <1>     mov eax, 5200h
   588 000022A4 CD21                <1>     int 21h ;Get in rbx ptr to sysvars
   589 000022A6 0FB74B20            <1>     movzx ecx, word [rbx + 20h] ;Get the internal buffer size in ecx!
   590 000022AA 89CB                <1>     mov ebx, ecx
   591 000022AC C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs, save bytes in ecx
   592 000022AF B800480000          <1>     mov eax, 4800h
   593 000022B4 CD21                <1>     int 21h
   594 000022B6 731E                <1>     jnc .bufOk
   595 000022B8 85DB                <1>     test ebx, ebx       ;Cannot allocate? Yikes...
   596 000022BA 750C                <1>     jnz .okSize
   597                              <1> .badAlloc:
   598                              <1> ;Not enough memory error!
   599 000022BC 488D156FE7FFFF      <1>     lea rdx, cpNoMem
   600 000022C3 E955F9FFFF          <1>     jmp badCmn  ;Print the string and return!
   601                              <1> .okSize:
   602 000022C8 89D9                <1>     mov ecx, ebx    
   603 000022CA C1E104              <1>     shl ecx, 4  ;Convert into bytes from paragraphs
   604 000022CD B800480000          <1>     mov eax, 4800h
   605 000022D2 CD21                <1>     int 21h
   606 000022D4 72E6                <1>     jc .badAlloc
   607                              <1> .bufOk:
   608 000022D6 488905FAE4FFFF      <1>     mov qword [cpBufPtr], rax   ;Save ptr to xfr area
   609 000022DD 66890DFBE4FFFF      <1>     mov word [wCpBufSz], cx     ;Save buffer size
   610                              <1> ;Go to the end of the cmd line and search backwards for the destination first
   611 000022E4 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   612 000022EB 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]
   613 000022F3 FFC9                <1>     dec ecx ;Turn into offset
   614 000022F5 4801CE              <1>     add rsi, rcx
   615 000022F8 31D2                <1>     xor edx, edx    ;Use edx as a counter for number of destination switches
   616 000022FA FD                  <1>     std ;Go in reverse
   617                              <1> .sd:    ;At this point, any switch chars affect destination!
   618 000022FB E8DD1E0000          <1>     call skipDelimiters ;SkipDelimiters in reverse!
   619 00002300 8A0524DDFFFF        <1>     mov al, byte [switchChar]
   620 00002306 384601              <1>     cmp byte [rsi + 1], al  ;Did we hit a switch?
   621 00002309 7509                <1>     jne .noSwitch
   622                              <1>     ;Here we hit a switchchar! Process it! rsi points to char before switchchar
   623 0000230B 0FB64602            <1>     movzx eax, byte [rsi + 2]   ;Get the char
   624 0000230F 50                  <1>     push rax        ;Push the switchchar
   625 00002310 FFC2                <1>     inc edx         ;Inc the counter
   626 00002312 EBE7                <1>     jmp short .sd   ;Now go back to skipping delimiters again!
   627                              <1> .noSwitch:
   628                              <1> ;Ok so we hit a path. Now set the flags based on the stack!
   629 00002314 85D2                <1>     test edx, edx
   630 00002316 7412                <1>     jz .noDestSwitch
   631                              <1> .ns1:
   632 00002318 58                  <1>     pop rax ;Pop the switch char
   633 00002319 B304                <1>     mov bl, ascDes
   634 0000231B E809040000          <1>     call .doSwitchRev
   635 00002320 0F8574040000        <1>     jnz .badExit    ;Invalid switch, abort procedure!    
   636 00002326 FFCA                <1>     dec edx
   637 00002328 75EE                <1>     jnz .ns1
   638                              <1> .noDestSwitch:
   639                              <1> ;Now search for the starting delimiter or start of line
   640 0000232A 48FFC6              <1>     inc rsi ;Go to the last char in the path
   641                              <1> .noSwitchLp:
   642 0000232D AC                  <1>     lodsb   ;Get char at rsi, go back a char
   643 0000232E E8B81E0000          <1>     call isALdelimiter
   644 00002333 7412                <1>     je .destFnd
   645 00002335 8A05EFDCFFFF        <1>     mov al, byte [switchChar]
   646 0000233B 3846FF              <1>     cmp byte [rsi - 1], al  ;Peek if an embedded switch?
   647 0000233E 7404                <1>     je .se  ;Jump if so!
   648 00002340 FFC9                <1>     dec ecx ;One less char left to search
   649 00002342 EBE9                <1>     jmp short .noSwitchLp
   650                              <1> .se:
   651 00002344 48FFCE              <1>     dec rsi     ;Dec to make the below work!
   652                              <1> .destFnd:
   653 00002347 4881C602000000      <1>     add rsi, 2  ;Go back to the first char past the delimiter
   654 0000234E FC                  <1>     cld 
   655 0000234F 4889F5              <1>     mov rbp, rsi    ;Save this ptr in rbp temporarily
   656 00002352 488D3DDAE3FFFF      <1>     lea rdi, destSpec
   657 00002359 57                  <1>     push rdi
   658 0000235A E8AF1F0000          <1>     call cpDelimPathToBufz ;Copy this over!   
   659 0000235F 5F                  <1>     pop rdi
   660 00002360 E82F1F0000          <1>     call findLastPathComponant  ;Get last path componant in rdi
   661 00002365 48893D51E4FFFF      <1>     mov qword [destPtr], rdi
   662 0000236C 807F013A            <1>     cmp byte [rdi + 1], ":" ;Is this a colon?
   663 00002370 7517                <1>     jne .destEnd    ;Dont worry
   664 00002372 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   665 00002374 E8431E0000          <1>     call ucChar             ;Make sure we UC the drive letter
   666 00002379 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   667 0000237B 4881C702000000      <1>     add rdi, 2              ;Point to this null
   668 00002382 48893D34E4FFFF      <1>     mov qword [destPtr], rdi    ;Store chars over the null
   669                              <1> .destEnd:
   670                              <1> ;Now start with source processing!! Clear the binSrc bit in bCpFlg
   671 00002389 802555E4FFFFFD      <1>     and byte [bCpFlg], ~binSrc  ;Mightve been accidentally set by dest flags
   672 00002390 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   673                              <1> .srcLp:
   674 00002397 E8411E0000          <1>     call skipDelimiters 
   675 0000239C 8A0588DCFFFF        <1>     mov al, byte [switchChar]
   676 000023A2 3806                <1>     cmp byte [rsi], al
   677 000023A4 7516                <1>     jne .noSrcSw    ;Not switch! Must be filename start!
   678                              <1>     ;rsi points to switch after switchchar
   679 000023A6 B301                <1>     mov bl, ascSrc
   680 000023A8 E876030000          <1>     call .doSwitch
   681 000023AD 0F85E7030000        <1>     jnz .badExit
   682 000023B3 4881C602000000      <1>     add rsi, 2
   683 000023BA EBDB                <1>     jmp short .srcLp    ;Now keep searching for start of filename
   684                              <1> .noSrcSw:
   685 000023BC 4839F5              <1>     cmp rbp, rsi
   686 000023BF 7527                <1>     jne .noSameSrcDest
   687                              <1>     ;Here if the destination we specified earlier is the same as the source
   688                              <1>     ;This means, the actual destination is the current default drive
   689                              <1>     ; on the current directory. Pass to DOS X:FILENAME.EXT<NUL> string.
   690 000023C1 E8CE1D0000          <1>     call getCurrentDrive    ;Get current drive
   691 000023C6 0441                <1>     add al, "A"             ;Turn into a drive letter
   692 000023C8 B43A                <1>     mov ah, ":"
   693 000023CA 0FB7C0              <1>     movzx eax, ax
   694 000023CD 890560E3FFFF        <1>     mov dword [destSpec], eax   ;Add a default null terminator
   695 000023D3 488D3D5BE3FFFF      <1>     lea rdi, destSpec+2         ;Point to the null after the colon
   696 000023DA 48893DDCE3FFFF      <1>     mov qword [destPtr], rdi    ;Copy the filenames here
   697 000023E1 800DFDE3FFFF20      <1>     or byte [bCpFlg], mod1Cpy   ;Copy to curdir in cur drive
   698                              <1> .noSameSrcDest:
   699 000023E8 488D3DC2E2FFFF      <1>     lea rdi, srcSpec            ;rsi now goes into the source spec!
   700 000023EF 57                  <1>     push rdi
   701 000023F0 E8191F0000          <1>     call cpDelimPathToBufz      ;Copy this over! rsi points past delimiter
   702 000023F5 5F                  <1>     pop rdi
   703                              <1>     ;Now go forwards and pick up any more switches.
   704                              <1>     ;Also any "+" signs here!!
   705 000023F6 48FFCE              <1>     dec rsi ;Point back to the first delimiter
   706                              <1> .swSrcSwPost:
   707 000023F9 E8DF1D0000          <1>     call skipDelimiters ;Skips trailing delimiters
   708 000023FE 8A0526DCFFFF        <1>     mov al, byte [switchChar]
   709 00002404 3806                <1>     cmp byte [rsi], al
   710 00002406 7516                <1>     jne .swSrcSwPostExit
   711                              <1>     ;rsi points to switch after switchchar
   712 00002408 B301                <1>     mov bl, ascSrc
   713 0000240A E814030000          <1>     call .doSwitch  ;Puts us at the char past the switch itself
   714 0000240F 0F8585030000        <1>     jnz .badExit
   715 00002415 4881C602000000      <1>     add rsi, 2      ;Go past the switch
   716 0000241C EBDB                <1>     jmp short .swSrcSwPost
   717                              <1> .swSrcSwPostExit:
   718 0000241E 4889FE              <1>     mov rsi, rdi
   719 00002421 E8501F0000          <1>     call scanForWildcards   ;Find if we have a WC in this source!
   720 00002426 7507                <1>     jnz .oneCp
   721 00002428 800DB6E3FFFF08      <1>     or byte [bCpFlg], wcSrc ;We are copying many files. Disp names
   722                              <1> .oneCp:
   723 0000242F E8601E0000          <1>     call findLastPathComponant  ;Get last componant of src in rdi
   724 00002434 48893D7AE3FFFF      <1>     mov qword [srcPtr], rdi     ;Now save the last componant
   725 0000243B 807F013A            <1>     cmp byte [rdi + 1], ":"     ;Is this a colon?
   726 0000243F 7517                <1>     jne .srcEnd             ;Dont worry
   727 00002441 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   728 00002443 E8741D0000          <1>     call ucChar             ;Make sure we UC the drive letter
   729 00002448 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   730 0000244A 4881C702000000      <1>     add rdi, 2              ;Point after the colon
   731 00002451 48893D5DE3FFFF      <1>     mov qword [srcPtr], rdi ;Store chars past the colon
   732                              <1> .srcEnd:
   733                              <1> ;Now uppercase both paths
   734 00002458 488D3552E2FFFF      <1>     lea rsi, srcSpec
   735 0000245F E86A1D0000          <1>     call normalisePath
   736 00002464 488D3DC8E2FFFF      <1>     lea rdi, destSpec
   737 0000246B E85E1D0000          <1>     call normalisePath
   738                              <1> ;Now establish if the source is a directory or not!
   739 00002470 F6056EE3FFFF08      <1>     test byte [bCpFlg], wcSrc
   740 00002477 7577                <1>     jnz .checkDestDir   ;Skip check if source has wildcards
   741 00002479 488D1531E2FFFF      <1>     lea rdx, srcSpec
   742 00002480 4889D6              <1>     mov rsi, rdx
   743 00002483 66AD                <1>     lodsw   ;Get the first two chars, is it "X:" style
   744 00002485 80FC3A              <1>     cmp ah, ":"
   745 00002488 7522                <1>     jne .isSrcDir   ;If not, check explicitly
   746 0000248A AC                  <1>     lodsb           ;Get char past :
   747 0000248B 84C0                <1>     test al, al     ;Is byte three nul?
   748 0000248D 740D                <1>     jz .srcStorWc   ;If so, we have "X:<NUL>"
   749 0000248F 3A0594DBFFFF        <1>     cmp al, byte [pathSep]  ;If char past : isnt pathsep, check manually
   750 00002495 7515                <1>     jne .isSrcDir
   751 00002497 AC                  <1>     lodsb           ;Get char past char past "X:\"
   752 00002498 84C0                <1>     test al, al     
   753 0000249A 7510                <1>     jnz .isSrcDir   ;Fall thru is "X:\<NUL>"
   754                              <1> .srcStorWc:
   755                              <1> ;rsi points past the char to store the WC at
   756 0000249C C746FF2A2E2A00      <1>     mov dword [rsi - 1], "*.*"  ;Store with terminating null!
   757 000024A3 800D3BE3FFFF08      <1>     or byte [bCpFlg], wcSrc     ;We're adding the wildcard to the source!
   758 000024AA EB44                <1>     jmp short .checkDestDir
   759                              <1> .isSrcDir:
   760 000024AC B910000000          <1>     mov ecx, dirDirectory
   761 000024B1 B8004E0000          <1>     mov eax, 4E00h
   762 000024B6 CD21                <1>     int 21h
   763 000024B8 7236                <1>     jc .checkDestDir    ;Wasn't a dir!
   764                              <1>     ;Was the file we found actually a directory?
   765 000024BA 803DBEDCFFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   766 000024C1 752D                <1>     jne .checkDestDir   ;Wasn't a dir
   767 000024C3 4889D7              <1>     mov rdi, rdx
   768 000024C6 E8E71C0000          <1>     call strlen
   769 000024CB FFC9                <1>     dec ecx
   770 000024CD 4801CF              <1>     add rdi, rcx    ;Move rdi to the terminating null
   771 000024D0 8A0553DBFFFF        <1>     mov al, byte [pathSep]
   772 000024D6 3847FF              <1>     cmp byte [rdi - 1], al  ;Do we have a trailing pathsep?
   773 000024D9 7401                <1>     je .srctpsp
   774 000024DB AA                  <1>     stosb   ;Store the pathsep over the null, inc rdi
   775                              <1> .srctpsp:
   776 000024DC 48893DD2E2FFFF      <1>     mov qword [srcPtr], rdi ;Update the srcPtr
   777 000024E3 B82A2E2A00          <1>     mov eax, "*.*"
   778 000024E8 AB                  <1>     stosd   ;Store the WC with terminating nul!
   779 000024E9 800DF5E2FFFF08      <1>     or byte [bCpFlg], wcSrc ;We're adding the wildcard to the source!
   780                              <1> .checkDestDir:
   781                              <1> ;Now establish if destination is a directory or not!
   782 000024F0 F605EEE2FFFF20      <1>     test byte [bCpFlg], mod1Cpy ;If we already know its mod1, skip
   783 000024F7 0F855E010000        <1>     jnz .mod1
   784 000024FD 488D352FE2FFFF      <1>     lea rsi, destSpec
   785 00002504 66AD                <1>     lodsw   ;Get the first word, i.e. candidate "X:"
   786 00002506 80FC3A              <1>     cmp ah, ":"
   787 00002509 751A                <1>     jne .isDestDir
   788 0000250B 66AD                <1>     lodsw   ;Get second word, i.e. candidate "\<NUL>" or "<NUL>"
   789 0000250D 84C0                <1>     test al, al ;Is byte three nul?
   790 0000250F 0F8446010000        <1>     jz .mod1    ;If so, it was a X:<NUL>
   791 00002515 84E4                <1>     test ah, ah ;Is byte four nul?
   792 00002517 750C                <1>     jnz .isDestDir  ;If not, check if destination is a directory
   793 00002519 3A050ADBFFFF        <1>     cmp al, byte [pathSep]  ;Else, check if byte 3 was a pathsep!
   794 0000251F 0F8436010000        <1>     je .mod1    ;If it is, then it was a X:\<NUL>
   795                              <1> .isDestDir:
   796                              <1> ;Only here if we suspect the destination pathspec is a path, not file!
   797 00002525 488D1507E2FFFF      <1>     lea rdx, destSpec
   798 0000252C B910000000          <1>     mov ecx, dirDirectory
   799 00002531 B8004E0000          <1>     mov eax, 4E00h
   800 00002536 CD21                <1>     int 21h
   801 00002538 7237                <1>     jc .mod2
   802                              <1>     ;Was the file we found actually a directory?
   803 0000253A 803D3EDCFFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   804 00002541 752E                <1>     jne .mod2
   805                              <1>     ;Here we just check if we have a terminating slash on the destination path.
   806                              <1>     ;If not, we need to place one there!
   807 00002543 4889D7              <1>     mov rdi, rdx    ;Move destSpec
   808 00002546 E8671C0000          <1>     call strlen
   809 0000254B FFC9                <1>     dec ecx         ;Lose the null terminator, zero upper bits
   810 0000254D 4801CF              <1>     add rdi, rcx    ;Go to null terminator
   811 00002550 0FB605D2DAFFFF      <1>     movzx eax, byte [pathSep]
   812 00002557 3847FF              <1>     cmp byte [rdi - 1], al  ;Is the char before the null a pathsep?
   813 0000255A 0F84FB000000        <1>     je .mod1        ;If so, skip adding another one!
   814 00002560 66AB                <1>     stosw           ;Else, store the pathsep and null!
   815 00002562 48FFCF              <1>     dec rdi         ;Point back to null
   816 00002565 48893D51E2FFFF      <1>     mov qword [destPtr], rdi    ;Save this pointer
   817 0000256C E9EA000000          <1>     jmp .mod1
   818                              <1> .mod2:
   819                              <1> ;Here we are copying files(s) to file(s)! Filenames are copied according 
   820                              <1> ; to rename wildcard semantics. Always run through this as the destination
   821                              <1> ; name may have wildcards in it! But we don't add any.
   822 00002571 800D6DE2FFFF40      <1>     or byte [bCpFlg], mod2Cpy   ;Set to remind us what we are doing!
   823 00002578 488D35B4E1FFFF      <1>     lea rsi, destSpec
   824 0000257F E8F21D0000          <1>     call scanForWildcards   ;ZF=ZE if WC cound
   825 00002584 7407                <1>     jz .m2Wc
   826 00002586 800D58E2FFFF10      <1>     or byte [bCpFlg], oneDest   ;The destination is a single file!
   827                              <1> .m2Wc:
   828                              <1> ;Search for the source file
   829 0000258D 488D151DE1FFFF      <1>     lea rdx, srcSpec
   830 00002594 31C9                <1>     xor ecx, ecx    ;Normal and RO files pls
   831 00002596 B8004E0000          <1>     mov eax, 4E00h
   832 0000259B CD21                <1>     int 21h
   833 0000259D 0F82ED010000        <1>     jc .badSrcFile
   834 000025A3 488B3513E2FFFF      <1>     mov rsi, qword [destPtr]
   835 000025AA 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Create the permanent destination pattern
   836 000025AE B801290000          <1>     mov eax, 2901h
   837 000025B3 CD21                <1>     int 21h
   838                              <1> .md2Lp:
   839 000025B5 488D35CCDBFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   840 000025BC 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Create the source pattern
   841 000025C0 B801290000          <1>     mov eax, 2901h
   842 000025C5 CD21                <1>     int 21h  
   843                              <1> ;Now depending on source and dest patterns, build a filename in renName
   844 000025C7 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
   845 000025CB 488D3DF3E1FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
   846 000025D2 57                  <1>     push rdi
   847 000025D3 48A5                <1>     movsq
   848 000025D5 66A5                <1>     movsw
   849 000025D7 A4                  <1>     movsb
   850 000025D8 5F                  <1>     pop rdi
   851 000025D9 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
   852 000025DD B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
   853                              <1> .md2NameMake:
   854 000025E2 AC                  <1>     lodsb   ;Get the char from the source string
   855 000025E3 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
   856 000025E6 7502                <1>     jne .noStore    ;Dont store the char there
   857 000025E8 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
   858                              <1> .noStore:
   859 000025EA 48FFC7              <1>     inc rdi ;Goto next char position
   860 000025ED FFC9                <1>     dec ecx
   861 000025EF 75F1                <1>     jnz .md2NameMake
   862 000025F1 488D3590DBFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   863 000025F8 488B3DB6E1FFFF      <1>     mov rdi, qword [srcPtr]
   864 000025FF E8951B0000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
   865 00002604 488D35BAE1FFFF      <1>     lea rsi, renName
   866 0000260B 488B3DABE1FFFF      <1>     mov rdi, qword [destPtr]
   867 00002612 E8A11C0000          <1>     call FCBToAsciiz
   868 00002617 E8DB000000          <1>     call .prntFilespec  ;Prints the source filename
   869 0000261C E8AE010000          <1>     call copyMain       ;And copy it!
   870 00002621 731D                <1>     jnc .md2Ok
   871                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   872                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   873 00002623 3CFD                <1>     cmp al, -3
   874 00002625 0F8442010000        <1>     je .badBinCdevErr
   875 0000262B 3CFE                <1>     cmp al, -2
   876 0000262D 0F8443010000        <1>     je .rootDirFull
   877 00002633 3CFF                <1>     cmp al, -1      ;Source and destination same?
   878 00002635 0F8444010000        <1>     je .badSameFile 
   879 0000263B E95A010000          <1>     jmp .badExit    ;Else generic error message
   880                              <1> .md2Ok:
   881 00002640 F6059EE1FFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   882 00002647 0F8485000000        <1>     jz .copyDone        ;Copy complete!
   883 0000264D B8004F0000          <1>     mov eax, 4F00h      ;Else, find Next File
   884 00002652 CD21                <1>     int 21h
   885 00002654 727C                <1>     jc .copyDone        ;If no more files, we are done!
   886 00002656 E95AFFFFFF          <1>     jmp .md2Lp    ;Else, now build a new source and destination!
   887                              <1> .mod1:
   888                              <1> ;Here we are copying file(s) into a directory. Filenames are copied verbatum.
   889 0000265B 800D83E1FFFF20      <1>     or byte [bCpFlg], mod1Cpy   ;Ensure this bit is set!
   890 00002662 488D1548E0FFFF      <1>     lea rdx, srcSpec
   891 00002669 31C9                <1>     xor ecx, ecx    ;Normal and read only files pls!!
   892 0000266B B8004E0000          <1>     mov eax, 4E00h
   893 00002670 CD21                <1>     int 21h
   894 00002672 0F8218010000        <1>     jc .badSrcFile  ;File not found error!!
   895                              <1> .mod1Lp:
   896 00002678 488D3509DBFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   897 0000267F 488B3D2FE1FFFF      <1>     mov rdi, qword [srcPtr]
   898 00002686 E81D1B0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   899 0000268B 488B3D2BE1FFFF      <1>     mov rdi, qword [destPtr]
   900 00002692 E8111B0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   901 00002697 E85B000000          <1>     call .prntFilespec
   902 0000269C E82E010000          <1>     call copyMain   ;And copy it!
   903 000026A1 731D                <1>     jnc .mod1Ok
   904                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   905                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   906 000026A3 3CFD                <1>     cmp al, -3
   907 000026A5 0F84C2000000        <1>     je .badBinCdevErr
   908 000026AB 3CFE                <1>     cmp al, -2
   909 000026AD 0F84C3000000        <1>     je .rootDirFull
   910 000026B3 3CFF                <1>     cmp al, -1      ;Source and destination same?
   911 000026B5 0F84C4000000        <1>     je .badSameFile 
   912 000026BB E9DA000000          <1>     jmp .badExit    ;Else generic error message
   913                              <1> .mod1Ok:
   914 000026C0 F6051EE1FFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   915 000026C7 7409                <1>     jz .copyDone
   916 000026C9 B8004F0000          <1>     mov eax, 4F00h      ;Find Next File
   917 000026CE CD21                <1>     int 21h
   918 000026D0 73A6                <1>     jnc .mod1Lp         ;If no more files, we are done! Fall thru!
   919                              <1> 
   920                              <1> .copyDone:
   921 000026D2 E8CD000000          <1>     call .copyCleanup   ;Clean up resources!
   922 000026D7 B800020000          <1>     mov eax, 0200h      ;Beep a TAB out :)
   923 000026DC B209                <1>     mov dl, TAB
   924 000026DE CD21                <1>     int 21h
   925 000026E0 8B05FBE0FFFF        <1>     mov eax, dword [dCpCnt] ;Get number of files copied
   926 000026E6 E89F1C0000          <1>     call printDecimalWord   ;n File(s) copied
   927 000026EB 488D152EE3FFFF      <1>     lea rdx, copyOk
   928 000026F2 B409                <1>     mov ah, 09h
   929 000026F4 CD21                <1>     int 21h    
   930                              <1>     return
    13                              <2> %%_ret:
    14 000026F6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   931                              <1> 
   932                              <1> .prntFilespec:
   933                              <1> ;Prints the filespec to STDOUT. If the path is 
   934 000026F7 F605E7E0FFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no wildcard, then don't print name
   935                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000026FE 74(F6)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   936 00002700 488D15AADFFFFF      <1>     lea rdx, srcSpec
   937 00002707 4889D7              <1>     mov rdi, rdx
   938 0000270A E8A31A0000          <1>     call strlen
   939 0000270F FFC9                <1>     dec ecx     ;Drop terminating null
   940 00002711 BB01000000          <1>     mov ebx, 1  ;STDOUT
   941 00002716 B800400000          <1>     mov eax, 4000h  ;Write
   942 0000271B CD21                <1>     int 21h
   943 0000271D E875180000          <1>     call printCRLF
   944                              <1>     return
    13                              <2> %%_ret:
    14 00002722 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   945                              <1> .doSwitch:
   946                              <1> ;Since switches can come before or after a name, handle them here!
   947                              <1> ;If invalid switch char, returns ZF=NZ.
   948                              <1> ;Input: bl = ASCII bit to set (either 1 or 2) 
   949                              <1> ;       rsi -> Switchchar
   950 00002723 56                  <1>     push rsi
   951 00002724 48FFC6              <1>     inc rsi ;Point to char past switchchar
   952 00002727 AC                  <1>     lodsb   ;Get this char, goto next char
   953 00002728 5E                  <1>     pop rsi
   954                              <1> .doSwitchRev:
   955 00002729 E88E1A0000          <1>     call ucChar
   956 0000272E 3C41                <1>     cmp al, "A"
   957 00002730 7510                <1>     jne .cB
   958 00002732 081DADE0FFFF        <1>     or byte [bCpFlg], bl    ;Set the ASCII bit
   959 00002738 8025A6E0FFFFFD      <1>     and byte [bCpFlg], ~binSrc  ;ASCII flag clears this
   960                              <1> .cExit:
   961 0000273F 31DB                <1>     xor ebx, ebx    ;Clear ZF 
   962                              <1>     return
    13                              <2> %%_ret:
    14 00002741 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   963                              <1> .cB:
   964 00002742 3C42                <1>     cmp al, "B"
   965 00002744 7511                <1>     jne .cV
   966 00002746 F6D3                <1>     not bl  ;Reverse bits
   967 00002748 201D97E0FFFF        <1>     and byte [bCpFlg], bl   ;Clear the ASCII bit.
   968 0000274E 800D90E0FFFF02      <1>     or byte [bCpFlg], binSrc    ;This was explicitly set
   969 00002755 EBE8                <1>     jmp short .cExit
   970                              <1> .cV:
   971 00002757 3C56                <1>     cmp al, "V"
   972                              <1>     retne   ;Exit w/o clearing ZF
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002759 75(41)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   973 0000275B F6056EE0FFFFFF      <1>     test byte [verifyFlg], -1   ;If verify flag set, do nothing
   974 00002762 75DB                <1>     jnz .cExit                  ;If not zero, flag already set!
   975                              <1>     ;Else, set it. We return it at the end!
   976 00002764 B8012E0000          <1>     mov eax, 2E01h  ;Set Verify Flag
   977 00002769 CD21                <1>     int 21h
   978 0000276B EBD2                <1>     jmp short .cExit
   979                              <1> 
   980                              <1> ;COPY Bad Exits!!
   981                              <1> .badBinCdevErr:
   982 0000276D 488D155CE5FFFF      <1>     lea rdx, binDevErr
   983 00002774 EB10                <1>     jmp short .badExitCmn
   984                              <1> .rootDirFull:
   985 00002776 488D153FE2FFFF      <1>     lea rdx, fulRootDir
   986 0000277D EB07                <1>     jmp short .badExitCmn
   987                              <1> .badSameFile:
   988 0000277F 488D154CE2FFFF      <1>     lea rdx, noSelfCopy
   989                              <1> .badExitCmn:
   990 00002786 E892F4FFFF          <1>     call badCmn     ;Print error message
   991 0000278B E942FFFFFF          <1>     jmp .copyDone   ;Clean resources
   992                              <1> .badSrcFile:
   993 00002790 E878F4FFFF          <1>     call badFnf  ;File not found!!
   994 00002795 E938FFFFFF          <1>     jmp .copyDone
   995                              <1> .badExit:
   996 0000279A E841F4FFFF          <1>     call badParamError
   997 0000279F E92EFFFFFF          <1>     jmp .copyDone
   998                              <1> 
   999                              <1> .copyCleanup:
  1000                              <1> ;Clean all resources!! Reset verify and free copy buffer. 
  1001                              <1> ;Handles are never open in this process!
  1002 000027A4 B8002E0000          <1>     mov eax, 2E00h
  1003 000027A9 8A0521E0FFFF        <1>     mov al, byte [verifyFlg]
  1004 000027AF CD21                <1>     int 21h
  1005 000027B1 4150                <1>     push r8
  1006 000027B3 4C8B051DE0FFFF      <1>     mov r8, qword [cpBufPtr]
  1007 000027BA 4D85C0              <1>     test r8, r8 ;Check zero, clear CF
  1008 000027BD 7407                <1>     jz .skipFree
  1009 000027BF B800490000          <1>     mov eax, 4900h
  1010 000027C4 CD21                <1>     int 21h
  1011                              <1> .skipFree:
  1012 000027C6 4158                <1>     pop r8
  1013 000027C8 0F827F1C0000        <1>     jc freezePC ;If free fails, man....
  1014                              <1>     return
    13                              <2> %%_ret:
    14 000027CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1015                              <1> 
  1016                              <1> copyMain:
  1017                              <1> ;This is the main copying procedure! 
  1018                              <1> ;Start by checking the two files are not the same. If so, complain!
  1019                              <1> ;If returns CF=CY, error code in al. 
  1020                              <1> ;   If al = -1, same filename error!
  1021                              <1> ;   If al = -2, Root Dir full (couldn't create file)
  1022                              <1> ;   If al = -3, attempted binary read from a device
  1023                              <1> ;If returns CF=NC, file copied successfully.
  1024                              <1> ;Check the two files are not the same using truename in searchspec
  1025 000027CF 488D35DBDEFFFF      <1>     lea rsi, srcSpec
  1026 000027D6 488D3D07DDFFFF      <1>     lea rdi, searchSpec
  1027 000027DD B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1028 000027E2 CD21                <1>     int 21h 
  1029 000027E4 57                  <1>     push rdi    ;Save this searchSpec
  1030 000027E5 488D3547DFFFFF      <1>     lea rsi, destSpec
  1031 000027EC 488D3D73DDFFFF      <1>     lea rdi, searchSpec + cmdBufferL ;Use the latter half to store this bit
  1032 000027F3 B800600000          <1>     mov eax, 6000h
  1033 000027F8 CD21                <1>     int 21h
  1034 000027FA 5E                  <1>     pop rsi     ;Get this ptr back
  1035 000027FB B81E120000          <1>     mov eax, 121Eh  ;Cmpr ASCII strings
  1036 00002800 CD2F                <1>     int 2Fh
  1037 00002802 750F                <1>     jnz .notSameFile
  1038 00002804 B0FF                <1>     mov al, -1  ;Same filename error!
  1039                              <1> .badExit:
  1040 00002806 50                  <1>     push rax
  1041 00002807 E8B0000000          <1>     call .exitCleanup
  1042 0000280C 58                  <1>     pop rax
  1043 0000280D F9                  <1>     stc
  1044                              <1>     return
    13                              <2> %%_ret:
    14 0000280E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1045                              <1> .badExitNoSpace:
  1046 0000280F B0FE                <1>     mov al, -2  ;Access denied from Create happens if Root Dir full!
  1047 00002811 EBF3                <1>     jmp short .badExit
  1048                              <1> .notSameFile:
  1049                              <1> ;Open source with read permission
  1050                              <1> ;Open destination with write permission
  1051 00002813 488D1597DEFFFF      <1>     lea rdx, srcSpec
  1052 0000281A B8003D0000          <1>     mov eax, 3D00h  ;Read open
  1053 0000281F CD21                <1>     int 21h
  1054 00002821 72E3                <1>     jc .badExit
  1055 00002823 668905A7DFFFFF      <1>     mov word [sourceHdl], ax
  1056 0000282A 0FB7D8              <1>     movzx ebx, ax   ;For bx
  1057                              <1> 
  1058 0000282D B800440000          <1>     mov eax, 4400h  ;Get device info for file in bx in dx
  1059 00002832 CD21                <1>     int 21h
  1060 00002834 6689159ADFFFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
  1061 0000283B F6C280              <1>     test dl, 80h    ;Is this a chardev?
  1062 0000283E 7412                <1>     jz .prepCopy
  1063                              <1> ;Check the binary flag was not set on this source filespec
  1064 00002840 B0FD                <1>     mov al, -3  ;Prep the error code
  1065 00002842 F6059CDFFFFF02      <1>     test byte [bCpFlg], binSrc
  1066 00002849 75BB                <1>     jnz .badExit    ;Return with the error code in al
  1067 0000284B 800D93DFFFFF01      <1>     or byte [bCpFlg], ascSrc    ;Set the ascii read bit for later!
  1068                              <1> .prepCopy:
  1069 00002852 31F6                <1>     xor esi, esi                ;Flag if ASCII copy done after write!
  1070 00002854 488B157CDFFFFF      <1>     mov rdx, qword [cpBufPtr]   ;Get the buffer pointer
  1071                              <1> .copyLoop:
  1072 0000285B 0FB70D7DDFFFFF      <1>     movzx ecx, word [wCpBufSz]
  1073 00002862 0FB71D68DFFFFF      <1>     movzx ebx, word [sourceHdl]
  1074 00002869 B8003F0000          <1>     mov eax, 3F00h ;Read
  1075 0000286E CD21                <1>     int 21h
  1076 00002870 7294                <1>     jc .badExit
  1077 00002872 89C1                <1>     mov ecx, eax    ;Save the binary # of bytes read
  1078 00002874 F6056ADFFFFF01      <1>     test byte [bCpFlg], ascSrc  ;Are we copying in ascii mode
  1079 0000287B 7413                <1>     jz .notAscii
  1080                              <1> ;Now scan the buffer for a EOF. If we find, we stop the copy at that char
  1081 0000287D 50                  <1>     push rax        ;Save the original char count
  1082 0000287E 4889D7              <1>     mov rdi, rdx    ;rdx keeps the buffer ptr
  1083 00002881 B01A                <1>     mov al, EOF
  1084 00002883 F2AE                <1>     repne scasb     ;Loop thru now!
  1085 00002885 89C8                <1>     mov eax, ecx    ;Move the offset into the buffer in eax
  1086 00002887 59                  <1>     pop rcx         ;Get the original read count into ecx
  1087 00002888 7506                <1>     jne .notAscii   ;If EOF not found, ecx has the full buffer size to write
  1088                              <1> ;Here if EOF found.
  1089 0000288A FFC0                <1>     inc eax         ;Drop one for the EOF char itself
  1090 0000288C 29C1                <1>     sub ecx, eax    ;Get difference for # of chars to write
  1091 0000288E FFCE                <1>     dec esi         ;Set to -1 to indicate we are done with ASCII copy!
  1092                              <1> .notAscii:
  1093 00002890 85C9                <1>     test ecx, ecx   ;If no bytes were read, exit!
  1094 00002892 7428                <1>     jz .exitCleanup
  1095 00002894 51                  <1>     push rcx    ;Save the number of bytes to write
  1096 00002895 52                  <1>     push rdx    ;Save the buffer ptr
  1097 00002896 E88D000000          <1>     call .getWriteHandle    ;Gets hdl in bx. Inc file ctr on create/open
  1098 0000289B 5A                  <1>     pop rdx
  1099 0000289C 59                  <1>     pop rcx
  1100 0000289D 0F826CFFFFFF        <1>     jc .badExitNoSpace
  1101 000028A3 B800400000          <1>     mov eax, 4000h ;Write to handle in bx, to buffer in rdx
  1102 000028A8 CD21                <1>     int 21h
  1103 000028AA 0F8256FFFFFF        <1>     jc .badExit
  1104 000028B0 39C1                <1>     cmp ecx, eax            ;ecx=bytes to write, eax=bytes written
  1105 000028B2 0F8557FFFFFF        <1>     jne .badExitNoSpace     ;Disk must be full!!
  1106 000028B8 85F6                <1>     test esi, esi           ;Always clear in Binary mode
  1107 000028BA 749F                <1>     jz .copyLoop            ;Set possible in ASCII mode
  1108                              <1> .exitCleanup:
  1109                              <1> ;Add a terminating EOF if we have been asked to. Else, skip!
  1110 000028BC F60522DFFFFF04      <1>     test byte [bCpFlg], ascDes
  1111 000028C3 7425                <1>     jz .ecNoEOF
  1112 000028C5 0FBF1D07DFFFFF      <1>     movsx ebx, word [destHdl]
  1113 000028CC 81FBFFFFFFFF        <1>     cmp ebx, -1 ;If this hdl is closed, skip this!
  1114 000028D2 7416                <1>     je .ecNoEOF
  1115 000028D4 488B15FCDEFFFF      <1>     mov rdx, qword [cpBufPtr]
  1116 000028DB C6021A              <1>     mov byte [rdx], EOF
  1117 000028DE B901000000          <1>     mov ecx, 1
  1118 000028E3 B800400000          <1>     mov eax, 4000h  ;Write and ignore any errors that come from this!
  1119 000028E8 CD21                <1>     int 21h
  1120                              <1> .ecNoEOF:
  1121                              <1> ;Now close copy handles!
  1122 000028EA 668B1DE0DEFFFF      <1>     mov bx, word [sourceHdl]
  1123 000028F1 6681FBFFFF          <1>     cmp bx, -1
  1124 000028F6 7410                <1>     je .beSkipSource
  1125 000028F8 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
  1126 000028FD CD21                <1>     int 21h
  1127 000028FF 66C705C9DEFFFFFFFF  <1>     mov word [sourceHdl], -1    ;Reset the var
  1128                              <1> .beSkipSource:
  1129 00002908 668B1DC4DEFFFF      <1>     mov bx, word [destHdl]
  1130 0000290F 6681FBFFFF          <1>     cmp bx, -1
  1131                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002914 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002916 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1132 00002917 B8003E0000          <1>     mov eax, 3E00h  ;Close this one too!
  1133 0000291C CD21                <1>     int 21h
  1134 0000291E 66C705ACDEFFFFFFFF  <1>     mov word [destHdl], -1  ;Reset the var
  1135                              <1>     return
    13                              <2> %%_ret:
    14 00002927 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1136                              <1> 
  1137                              <1> .getWriteHandle:
  1138                              <1> ;Returns in bx the handle to the destination file. If the file has not 
  1139                              <1> ; yet been opened, creates/opens the destination file as appropriate.
  1140                              <1> ;Input: Nothing
  1141                              <1> ;Output: CF=NC: bx = Handle to the file
  1142                              <1> ;        CF=CY: File failed to open/create. 
  1143 00002928 0FB71DA4DEFFFF      <1>     movzx ebx, word [destHdl]
  1144 0000292F 6681FBFFFF          <1>     cmp bx, -1
  1145 00002934 7402                <1>     je .gwHProceed
  1146 00002936 F8                  <1>     clc     ;Clear the CF
  1147                              <1>     return
    13                              <2> %%_ret:
    14 00002937 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1148                              <1> .gwHProceed:
  1149                              <1> ;Here if the destination has not been opened yet!
  1150 00002938 488D15F4DDFFFF      <1>     lea rdx, destSpec   ;Prepare rdx to the destination
  1151                              <1> ;Now we create/reopen the file here!
  1152 0000293F F6059FDEFFFF10      <1>     test byte [bCpFlg], oneDest ;If single destination, concatenate
  1153 00002946 743E                <1>     jz .createFile
  1154                              <1> ;Now we first try to open this file. If this is file 0, we create.
  1155                              <1> ;If this is more than file 0, we open
  1156 00002948 813D8FDEFFFF000000- <1>     cmp dword [dCpCnt], 0
  1156 00002951 00                  <1>
  1157 00002952 7432                <1>     je .createFile
  1158                              <1>     ;Now we open the file instead and append to the end
  1159 00002954 B8023D0000          <1>     mov eax, 3D02h  ;Open the file in exclusive read/write mode
  1160 00002959 CD21                <1>     int 21h
  1161                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000295B 72(37)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1162 0000295D FF057EDEFFFF        <1>     inc dword [dCpCnt]  ;We've opened the file for writing!
  1163 00002963 66890569DEFFFF      <1>     mov word [destHdl], ax
  1164 0000296A 0FB7D8              <1>     movzx ebx, ax
  1165 0000296D 31C9                <1>     xor ecx, ecx
  1166 0000296F 31D2                <1>     xor edx, edx
  1167 00002971 F6056DDEFFFF04      <1>     test byte [bCpFlg], ascDes  ;Did we write a terminating ^Z before?
  1168 00002978 7404                <1>     jz .gwHNoAscii
  1169 0000297A FFCA                <1>     dec edx                     ;Overwrite the ^Z
  1170 0000297C FFC9                <1>     dec ecx                     ;PASS A SIGNED -1 !!!!
  1171                              <1> .gwHNoAscii:
  1172 0000297E B802420000          <1>     mov eax, 4202h  ;LSEEK from the end
  1173 00002983 CD21                <1>     int 21h
  1174                              <1>     return
    13                              <2> %%_ret:
    14 00002985 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1175                              <1> .createFile:
  1176 00002986 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
  1177 0000298B 31C9                <1>     xor ecx, ecx    ;No file attributes
  1178 0000298D CD21                <1>     int 21h
  1179                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000298F 72(85)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1180 00002991 FF054ADEFFFF        <1>     inc dword [dCpCnt]  ;File created for writing!
  1181 00002997 66890535DEFFFF      <1>     mov word [destHdl], ax
  1182 0000299E 0FB7D8              <1>     movzx ebx, ax
  1183                              <1>     return
    13                              <2> %%_ret:
    14 000029A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1184                              <1> 
  1185                              <1> erase:
  1186 000029A2 F60503D7FFFFFF      <1>     test byte [arg1Flg], -1
  1187 000029A9 0F8443F2FFFF        <1>     jz badArgError
  1188 000029AF E8B41A0000          <1>     call setDTA     ;Start by resetting the DTA
  1189 000029B4 E898190000          <1>     call buildCommandPath   ;Get the relative path to the file
  1190                              <1> .dirLp:
  1191 000029B9 488D3D24DBFFFF      <1>     lea rdi, searchSpec
  1192 000029C0 E8CF180000          <1>     call findLastPathComponant
  1193 000029C5 4889FE              <1>     mov rsi, rdi    ;Save this as the source
  1194 000029C8 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1195 000029CC B03F                <1>     mov al, "?"
  1196                              <1>     ;Store question marks in the name field
  1197 000029CE 57                  <1>     push rdi
  1198 000029CF 48FFC7              <1>     inc rdi ;Goto the first char
  1199 000029D2 B90B000000          <1>     mov ecx, 11
  1200 000029D7 F3AA                <1>     rep stosb
  1201 000029D9 5F                  <1>     pop rdi
  1202 000029DA 4889F2              <1>     mov rdx, rsi    ;Save the ptr
  1203 000029DD B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
  1204 000029E2 CD21                <1>     int 21h
  1205 000029E4 3C01                <1>     cmp al, 1
  1206 000029E6 0F85A1000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
  1207                              <1>     ;Else, we now copy back the search pattern over the last componant!
  1208                              <1>     ;No dirs to handle in here
  1209 000029EC 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
  1210 000029F0 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
  1211 000029F3 E8C0180000          <1>     call FCBToAsciiz    ;Null terminates for free
  1212                              <1>     ;Count the number of ?'s, if 11, we print the message
  1213 000029F8 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
  1214 000029FC 31C9                <1>     xor ecx, ecx
  1215                              <1> .wcScan:
  1216 000029FE AC                  <1>     lodsb
  1217 000029FF 3C3F                <1>     cmp al, "?"
  1218 00002A01 7534                <1>     jne .endCount
  1219 00002A03 FFC1                <1>     inc ecx
  1220 00002A05 81F90B000000        <1>     cmp ecx, 11
  1221 00002A0B 75F1                <1>     jne .wcScan
  1222                              <1> .ynmsg:
  1223 00002A0D 488D154EE1FFFF      <1>     lea rdx, ynMes
  1224 00002A14 E885150000          <1>     call printString
  1225 00002A19 B401                <1>     mov ah, 01h ;STDIN without Console Echo
  1226 00002A1B CD21                <1>     int 21h ;Get char in al
  1227 00002A1D E89A170000          <1>     call ucChar ;Uppercase the char
  1228 00002A22 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
  1229 00002A24 740C                <1>     je .endCount1
  1230 00002A26 3C4E                <1>     cmp al, "N"
  1231                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002A28 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002A2A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1232 00002A2B E867150000          <1>     call printCRLF      ;Else, tell me what you want!!!
  1233 00002A30 EBDB                <1>     jmp short .ynmsg    
  1234                              <1> .endCount1:
  1235 00002A32 E860150000          <1>     call printCRLF
  1236                              <1> .endCount:
  1237                              <1>     ;Now we copy our search template pathstring to delPath
  1238 00002A37 488D3D73DCFFFF      <1>     lea rdi, delPath
  1239 00002A3E 488D359FDAFFFF      <1>     lea rsi, searchSpec ;Source the chars from here
  1240 00002A45 E85E170000          <1>     call strcpy2         ;Copy the string over to delPath
  1241                              <1> .findFile:
  1242                              <1>     ;Now we find first/find next our way through the files
  1243 00002A4A 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
  1244 00002A4D 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
  1245 00002A4F B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1246 00002A54 CD21                <1>     int 21h
  1247 00002A56 0F82B1F1FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1248                              <1>     ;Now the file was found, we copy the name over, delete and keep going
  1249 00002A5C E833180000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
  1250 00002A61 488D3520D7FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1251                              <1> .delNextFile:
  1252                              <1> ;rsi and rdi dont move here
  1253 00002A68 E83B170000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
  1254 00002A6D 488D153DDCFFFF      <1>     lea rdx, delPath
  1255 00002A74 B800410000          <1>     mov eax, 4100h  ;Delete File 
  1256 00002A79 CD21                <1>     int 21h         ;If this fails to delete it, fail silently
  1257 00002A7B 488D1562DAFFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
  1258 00002A82 B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
  1259 00002A87 CD21                <1>     int 21h
  1260 00002A89 73DD                <1>     jnc .delNextFile    
  1261 00002A8B F8                  <1>     clc ;Clear carry to indicate success
  1262                              <1>     return
    13                              <2> %%_ret:
    14 00002A8C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1263                              <1> .noWildcard:
  1264                              <1>     ;Here we just check that the file was not a directory. If it was, we add
  1265                              <1>     ; a \*.*<NUL> over the null terminator
  1266 00002A8D 488D1550DAFFFF      <1>     lea rdx, searchSpec
  1267 00002A94 B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
  1268 00002A99 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1269 00002A9E CD21                <1>     int 21h
  1270 00002AA0 0F8267F1FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1271 00002AA6 F605D2D6FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
  1272 00002AAD 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
  1273                              <1>     ;Else, we are dealing with a dir
  1274 00002AAF 4889D7              <1>     mov rdi, rdx
  1275 00002AB2 31C9                <1>     xor ecx, ecx
  1276 00002AB4 FFC9                <1>     dec ecx
  1277 00002AB6 F2AE                <1>     repne scasb ;Go to the end of the line!
  1278 00002AB8 48FFCF              <1>     dec rdi
  1279 00002ABB 0FB60567D5FFFF      <1>     movzx eax, byte [pathSep]
  1280 00002AC2 AA                  <1>     stosb
  1281 00002AC3 B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
  1282 00002AC8 AB                  <1>     stosd
  1283 00002AC9 E9EBFEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
  1284                              <1> .delMain:   ;Call with rdx -> buffer!
  1285 00002ACE B800410000          <1>     mov eax, 4100h  ;Delete File 
  1286 00002AD3 CD21                <1>     int 21h
  1287                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002AD5 73(8C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1288 00002AD7 3C05                <1>     cmp al, errAccDen
  1289 00002AD9 0F84F8F0FFFF        <1>     je badAccError ;If the file is RO, fail!
  1290 00002ADF E917F1FFFF          <1>     jmp badFileError
  1291                              <1>     return
    13                              <2> %%_ret:
    14 00002AE4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1292                              <1> 
  1293                              <1> date:
  1294 00002AE5 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1295 00002AEC E8EC160000          <1>     call skipDelimiters
  1296 00002AF1 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1297 00002AF4 7562                <1>     jne .goDate  ;Else rsi is pointing to something possibly a date. Try it!
  1298                              <1>     ;Else, we do interactive mode!
  1299 00002AF6 488D15E8DFFFFF      <1>     lea rdx, curDate
  1300 00002AFD B409                <1>     mov ah, 09h
  1301 00002AFF CD21                <1>     int 21h
  1302 00002B01 E8C7150000          <1>     call printFmtDate
  1303                              <1> .noCur:
  1304 00002B06 488D15E9DFFFFF      <1>     lea rdx, newDate
  1305 00002B0D B409                <1>     mov ah, 09h
  1306 00002B0F CD21                <1>     int 21h
  1307 00002B11 488D15FDDFFFFF      <1>     lea rdx, ukDate
  1308 00002B18 488D05E9DFFFFF      <1>     lea rax, usDate
  1309 00002B1F 488D1DFCDFFFFF      <1>     lea rbx, jpDate
  1310 00002B26 803D07D5FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1311 00002B2D 480F47D3            <1>     cmova rdx, rbx
  1312 00002B31 480F42D0            <1>     cmovb rdx, rax
  1313 00002B35 B409                <1>     mov ah, 09h
  1314 00002B37 CD21                <1>     int 21h
  1315                              <1> 
  1316 00002B39 488D15F7D6FFFF      <1>     lea rdx, cpyBuffer
  1317 00002B40 C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
  1318 00002B43 B40A                <1>     mov ah, 0Ah
  1319 00002B45 CD21                <1>     int 21h
  1320 00002B47 52                  <1>     push rdx
  1321 00002B48 E84A140000          <1>     call printCRLF
  1322 00002B4D 5A                  <1>     pop rdx
  1323 00002B4E 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1324                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002B52 74(E4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1325                              <1>     ;No spaces anywhere, separator chars allowed are / . - only
  1326 00002B54 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1327                              <1> .goDate:
  1328 00002B58 31C0                <1>     xor eax, eax    
  1329 00002B5A 803DD3D4FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1330 00002B61 727B                <1>     jb .us
  1331 00002B63 0F87B7000000        <1>     ja .jpn
  1332                              <1>     ;Here for UK style dates
  1333 00002B69 E8B4180000          <1>     call getByte
  1334 00002B6E 725D                <1>     jc .badDate
  1335 00002B70 880539DBFFFF        <1>     mov byte [td3], al  ;Store the day
  1336 00002B76 E80C010000          <1>     call .validSep
  1337 00002B7B 7550                <1>     jne .badDate
  1338 00002B7D E8A0180000          <1>     call getByte
  1339 00002B82 7249                <1>     jc .badDate
  1340 00002B84 880526DBFFFF        <1>     mov byte [td4], al  ;Store month
  1341 00002B8A E8F8000000          <1>     call .validSep
  1342 00002B8F 753C                <1>     jne .badDate
  1343 00002B91 E898180000          <1>     call getNum
  1344 00002B96 E8CF000000          <1>     call .doYear    ;Adjusts the year if necessary
  1345 00002B9B 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1346 00002BA0 732B                <1>     jae .badDate
  1347 00002BA2 66890504DBFFFF      <1>     mov word [td1], ax  ;Store the word directly
  1348                              <1> .writeDate:
  1349 00002BA9 E82F160000          <1>     call skipDelimiters
  1350 00002BAE 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1351 00002BB1 751A                <1>     jne .badDate
  1352 00002BB3 0FB70DF3DAFFFF      <1>     movzx ecx, word [td1]   ;Get the year
  1353 00002BBA 668B15EEDAFFFF      <1>     mov dx, word [td3]      ;Read time and date together!
  1354 00002BC1 B8002B0000          <1>     mov eax, 2B00h
  1355 00002BC6 CD21                <1>     int 21h
  1356 00002BC8 84C0                <1>     test al, al
  1357                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002BCA 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002BCC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1358                              <1> .badDate:
  1359 00002BCD 488D1502DFFFFF      <1>     lea rdx, badDate
  1360 00002BD4 E8C5130000          <1>     call printString
  1361 00002BD9 E928FFFFFF          <1>     jmp date.noCur
  1362                              <1> .us:
  1363 00002BDE E83F180000          <1>     call getByte
  1364 00002BE3 72E8                <1>     jc .badDate
  1365 00002BE5 8805C5DAFFFF        <1>     mov byte [td4], al  ;Store the month
  1366 00002BEB E897000000          <1>     call .validSep
  1367 00002BF0 75DB                <1>     jne .badDate
  1368 00002BF2 E82B180000          <1>     call getByte
  1369 00002BF7 72D4                <1>     jc .badDate
  1370 00002BF9 8805B0DAFFFF        <1>     mov byte [td3], al  ;Store day
  1371 00002BFF E883000000          <1>     call .validSep
  1372 00002C04 75C7                <1>     jne .badDate
  1373 00002C06 E823180000          <1>     call getNum
  1374 00002C0B E85A000000          <1>     call .doYear    ;Adjusts the year if necessary
  1375 00002C10 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1376 00002C15 73B6                <1>     jae .badDate
  1377 00002C17 6689058FDAFFFF      <1>     mov word [td1], ax  ;Store the word directly
  1378                              <1> .writeHop:
  1379 00002C1E EB89                <1>     jmp short .writeDate
  1380                              <1> .jpn:
  1381 00002C20 E809180000          <1>     call getNum
  1382 00002C25 E840000000          <1>     call .doYear    ;Adjusts the year if necessary
  1383 00002C2A 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1384 00002C2F 739C                <1>     jae .badDate
  1385 00002C31 66890575DAFFFF      <1>     mov word [td1], ax  ;Store the word directly
  1386 00002C38 E84A000000          <1>     call .validSep
  1387 00002C3D 758E                <1>     jne .badDate
  1388 00002C3F E8DE170000          <1>     call getByte
  1389 00002C44 7287                <1>     jc .badDate
  1390 00002C46 880563DAFFFF        <1>     mov byte [td3], al  ;Store the day
  1391 00002C4C E836000000          <1>     call .validSep
  1392 00002C51 0F8576FFFFFF        <1>     jne .badDate
  1393 00002C57 E8C6170000          <1>     call getByte
  1394 00002C5C 0F826BFFFFFF        <1>     jc .badDate
  1395 00002C62 880548DAFFFF        <1>     mov byte [td4], al  ;Store month
  1396 00002C68 EBB4                <1>     jmp short .writeHop
  1397                              <1> .doYear:
  1398 00002C6A 3D77000000          <1>     cmp eax, 119    ;If this is larger than 119, return assuming valid
  1399                              <1>     reta
    73                              <2> cret a
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002C6F 7601                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002C71 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1400                              <1> ;If the user specifies 80-99 it means 1980-1999
  1401                              <1> ;If the user specifies 00-79 it means 2000-2079
  1402 00002C72 BBD0070000          <1>     mov ebx, 2000
  1403 00002C77 B96C070000          <1>     mov ecx, 1900
  1404 00002C7C 3D50000000          <1>     cmp eax, 80     
  1405 00002C81 0F42CB              <1>     cmovb ecx, ebx
  1406 00002C84 01C8                <1>     add eax, ecx
  1407                              <1>     return
    13                              <2> %%_ret:
    14 00002C86 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1408                              <1> .validSep:
  1409 00002C87 AC                  <1>     lodsb           ;Get the char and return
  1410 00002C88 3C2E                <1>     cmp al, "."
  1411                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002C8A 74(86)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1412 00002C8C 3C2F                <1>     cmp al, "/"
  1413                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002C8E 74(86)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1414 00002C90 3C2D                <1>     cmp al, "-"
  1415                              <1>     return
    13                              <2> %%_ret:
    14 00002C92 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1416                              <1> 
  1417                              <1> time:
  1418 00002C93 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1419 00002C9A E83E150000          <1>     call skipDelimiters
  1420 00002C9F 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1421 00002CA2 7540                <1>     jne .goTime  ;Else rsi is pointing to something possibly a time. Try it!
  1422 00002CA4 488D1593DEFFFF      <1>     lea rdx, curTime
  1423 00002CAB B409                <1>     mov ah, 09h
  1424 00002CAD CD21                <1>     int 21h
  1425 00002CAF E8B0130000          <1>     call printFmtTime
  1426                              <1> .noCur:
  1427 00002CB4 488D1594DEFFFF      <1>     lea rdx, newTime
  1428 00002CBB B409                <1>     mov ah, 09h
  1429 00002CBD CD21                <1>     int 21h
  1430                              <1> 
  1431 00002CBF 488D15EFD4FFFF      <1>     lea rdx, inBuffer
  1432 00002CC6 C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
  1433 00002CC9 B40A                <1>     mov ah, 0Ah
  1434 00002CCB CD21                <1>     int 21h
  1435 00002CCD 52                  <1>     push rdx
  1436 00002CCE 488D1512DCFFFF      <1>     lea rdx, crlf
  1437 00002CD5 B409                <1>     mov ah, 09h
  1438 00002CD7 CD21                <1>     int 21h
  1439 00002CD9 5A                  <1>     pop rdx
  1440 00002CDA 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1441                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002CDE 74(92)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1442 00002CE0 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1443                              <1> .goTime:
  1444 00002CE4 C705BFD9FFFF000000- <1>     mov dword [td1], 0          ;Set all fields to 0
  1444 00002CED 00                  <1>
  1445 00002CEE 31C0                <1>     xor eax, eax   
  1446 00002CF0 E82D170000          <1>     call getByte
  1447 00002CF5 0F8294000000        <1>     jc .badTime         ;Get the number in eax
  1448 00002CFB 8805ADD9FFFF        <1>     mov byte [td2], al  ;Save hours
  1449 00002D01 E89A000000          <1>     call .validsep
  1450 00002D06 0F8583000000        <1>     jne .badTime
  1451 00002D0C E811170000          <1>     call getByte
  1452 00002D11 727C                <1>     jc .badTime
  1453 00002D13 880594D9FFFF        <1>     mov byte [td1], al  ;Save minutes
  1454 00002D19 E882000000          <1>     call .validsep
  1455 00002D1E 740F                <1>     je .goSec
  1456 00002D20 48FFCE              <1>     dec rsi ;Go back a char
  1457 00002D23 E8B5140000          <1>     call skipDelimiters ;Skip any delimiters
  1458 00002D28 803E0D              <1>     cmp byte [rsi], CR
  1459 00002D2B 743E                <1>     je .setTime
  1460 00002D2D EB60                <1>     jmp short .badTime
  1461                              <1> .goSec:
  1462 00002D2F E878000000          <1>     call .checkNum
  1463 00002D34 7259                <1>     jc .badTime
  1464 00002D36 E8E7160000          <1>     call getByte
  1465 00002D3B 7252                <1>     jc .badTime
  1466 00002D3D 88056DD9FFFF        <1>     mov byte [td4], al  ;Save seconds
  1467 00002D43 AC                  <1>     lodsb       ;Move rsi forwards
  1468 00002D44 3C2E                <1>     cmp al, "." ;Now we dont allow for colon now, only dot!
  1469 00002D46 740F                <1>     je .goMsec
  1470 00002D48 48FFCE              <1>     dec rsi ;Go back a char
  1471 00002D4B E88D140000          <1>     call skipDelimiters ;Skip any delimiters
  1472 00002D50 803E0D              <1>     cmp byte [rsi], CR
  1473 00002D53 7416                <1>     je .setTime
  1474 00002D55 EB38                <1>     jmp short .badTime
  1475                              <1> .goMsec:
  1476 00002D57 E850000000          <1>     call .checkNum
  1477 00002D5C 7231                <1>     jc .badTime
  1478 00002D5E E8BF160000          <1>     call getByte
  1479 00002D63 722A                <1>     jc .badTime
  1480 00002D65 880544D9FFFF        <1>     mov byte [td3], al  ;Save miliseconds
  1481                              <1> .setTime:
  1482 00002D6B E86D140000          <1>     call skipDelimiters
  1483 00002D70 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1484 00002D73 751A                <1>     jne .badTime
  1485 00002D75 0FB70D31D9FFFF      <1>     movzx ecx, word [td1]   ;Get hour/minutes
  1486 00002D7C 0FB7152CD9FFFF      <1>     movzx edx, word [td3]   ;Get seconds/miliseconds
  1487 00002D83 B8002D0000          <1>     mov eax, 2D00h      ;Set time
  1488 00002D88 CD21                <1>     int 21h
  1489 00002D8A A8FF                <1>     test al, -1
  1490                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002D8C 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002D8E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1491                              <1> .badTime:
  1492 00002D8F 488D1599DDFFFF      <1>     lea rdx, badTime
  1493 00002D96 E803120000          <1>     call printString
  1494 00002D9B E914FFFFFF          <1>     jmp time.noCur
  1495                              <1> .validsep:
  1496 00002DA0 AC                  <1>     lodsb
  1497 00002DA1 3A059AD2FFFF        <1>     cmp al, byte [ctryData + countryStruc.timeSep]  ;Usually a colon
  1498                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002DA7 74(8E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1499 00002DA9 3C2E                <1>     cmp al, "."
  1500                              <1>     return
    13                              <2> %%_ret:
    14 00002DAB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1501                              <1> .checkNum:
  1502 00002DAC AC                  <1>     lodsb   ;Now ensure the first char past the delim is a number
  1503 00002DAD 48FFCE              <1>     dec rsi
  1504 00002DB0 3C30                <1>     cmp al, "0"
  1505 00002DB2 7206                <1>     jb .cnbad
  1506 00002DB4 3C39                <1>     cmp al, "9"
  1507 00002DB6 7702                <1>     ja .cnbad
  1508 00002DB8 F8                  <1>     clc
  1509                              <1>     return
    13                              <2> %%_ret:
    14 00002DB9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1510                              <1> .cnbad:
  1511 00002DBA F9                  <1>     stc
  1512                              <1>     return
    13                              <2> %%_ret:
    14 00002DBB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1513                              <1> ctty:
  1514 00002DBC F605E9D2FFFFFF      <1>     test byte [arg1Flg], -1
  1515 00002DC3 0F8429EEFFFF        <1>     jz badArgError
  1516 00002DC9 F605DFD2FFFFFF      <1>     test byte [arg2Flg], -1
  1517 00002DD0 0F851CEEFFFF        <1>     jnz badArgError
  1518 00002DD6 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1519 00002DDD 0FB605C9D2FFFF      <1>     movzx eax, byte [arg1Off]
  1520 00002DE4 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
  1521 00002DE7 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1522 00002DEB 750F                <1>     jne .noDrive
  1523 00002DED 0FB605BAD2FFFF      <1>     movzx eax, byte [arg1FCBret]
  1524 00002DF4 3CFF                <1>     cmp al, -1
  1525 00002DF6 0F84EDEDFFFF        <1>     je badDriveError
  1526                              <1> .noDrive:
  1527                              <1>     ;Now we open the provided file
  1528 00002DFC E868150000          <1>     call copyArgumentToSearchSpec
  1529 00002E01 488D15DCD6FFFF      <1>     lea rdx, searchSpec
  1530 00002E08 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
  1531 00002E0D CD21                <1>     int 21h
  1532 00002E0F 0F82E6EDFFFF        <1>     jc badFileError
  1533 00002E15 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
  1534 00002E18 B800440000          <1>     mov eax, 4400h  ;Get device word
  1535 00002E1D CD21                <1>     int 21h
  1536 00002E1F F6C280              <1>     test dl, 80h    ;Test if this device is a char device
  1537 00002E22 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
  1538                              <1>     ;Now we set this handle to be STDIO
  1539 00002E24 80CA03              <1>     or dl, 3    ;Set STDIO bits
  1540 00002E27 30F6                <1>     xor dh, dh
  1541 00002E29 B801440000          <1>     mov eax, 4401h  ;Now we set the device word
  1542 00002E2E CD21                <1>     int 21h
  1543                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
  1544 00002E30 31C9                <1>     xor ecx, ecx    ;STDIN
  1545 00002E32 B446                <1>     mov ah, 46h
  1546 00002E34 CD21                <1>     int 21h
  1547 00002E36 FFC1                <1>     inc ecx         ;STDOUT
  1548 00002E38 B446                <1>     mov ah, 46h
  1549 00002E3A CD21                <1>     int 21h
  1550 00002E3C FFC1                <1>     inc ecx         ;STDERR
  1551 00002E3E B446                <1>     mov ah, 46h
  1552 00002E40 CD21                <1>     int 21h
  1553 00002E42 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
  1554 00002E44 CD21                <1>     int 21h
  1555                              <1>     return
    13                              <2> %%_ret:
    14 00002E46 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1556                              <1> .badCharDev:
  1557 00002E47 488D1512DEFFFF      <1>     lea rdx, badDev
  1558 00002E4E B409                <1>     mov ah, 09h
  1559 00002E50 CD21                <1>     int 21h
  1560 00002E52 B43E                <1>     mov ah, 3Eh ;Close opened handle
  1561 00002E54 CD21                <1>     int 21h
  1562                              <1>     return
    13                              <2> %%_ret:
    14 00002E56 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1563                              <1> 
  1564                              <1> cls:  
  1565 00002E57 B800440000          <1>     mov eax, 4400h  ;Get device info
  1566 00002E5C BB01000000          <1>     mov ebx, 1      ;for handle 1
  1567 00002E61 CD21                <1>     int 21h         ;in dx
  1568 00002E63 F7C280000000        <1>     test edx, devCharDev
  1569 00002E69 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
  1570 00002E6B F7C210000000        <1>     test edx, charDevFastOut
  1571 00002E71 743E                <1>     jz .doAnsi
  1572                              <1>     ;Test if Int 29h uses Int 30h
  1573                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
  1574                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
  1575 00002E73 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
  1576 00002E78 CD21                <1>     int 21h
  1577                              <1> .biosCheck:
  1578 00002E7A 66813BCD30          <1>     cmp word [rbx], 30CDh
  1579 00002E7F 740C                <1>     je .biosConfirmed
  1580 00002E81 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
  1581 00002E86 7429                <1>     je .doAnsi
  1582 00002E88 48FFC3              <1>     inc rbx
  1583 00002E8B EBED                <1>     jmp short .biosCheck
  1584                              <1> .biosConfirmed:
  1585                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
  1586 00002E8D B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
  1587 00002E8F 31DB                <1>     xor ebx, ebx
  1588 00002E91 CD30                <1>     int 30h
  1589 00002E93 B40F                <1>     mov ah, 0Fh ;Get screen mode
  1590 00002E95 CD30                <1>     int 30h
  1591 00002E97 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
  1592 00002E9A FECA                <1>     dec dl
  1593 00002E9C B619                <1>     mov dh, 25  ;Number of rows is standard
  1594 00002E9E 31C0                <1>     xor eax, eax
  1595 00002EA0 89C1                <1>     mov ecx, eax
  1596 00002EA2 B707                <1>     mov bh, 7   ;Screen attributes
  1597 00002EA4 B406                <1>     mov ah, 6   ;Scroll
  1598 00002EA6 CD30                <1>     int 30h
  1599 00002EA8 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
  1600 00002EAA B700                <1>     mov bh, 0   ;Page 0
  1601 00002EAC B402                <1>     mov ah, 2
  1602 00002EAE CD30                <1>     int 30h
  1603                              <1>     return
    13                              <2> %%_ret:
    14 00002EB0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1604                              <1> .doAnsi:
  1605                              <1> ;4 chars in the ansi routine
  1606                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
  1607                              <1> ; understand ANSI codes
  1608 00002EB1 488D352FE0FFFF      <1>     lea rsi, ansiCls
  1609 00002EB8 B904000000          <1>     mov ecx, 4
  1610 00002EBD B406                <1>     mov ah, 06h ;Raw char output
  1611                              <1> .ansiLp:
  1612 00002EBF AC                  <1>     lodsb   ;Get the char in 
  1613 00002EC0 88C2                <1>     mov dl, al
  1614 00002EC2 CD21                <1>     int 21h
  1615 00002EC4 FFC9                <1>     dec ecx
  1616 00002EC6 75F7                <1>     jnz .ansiLp
  1617                              <1>     return
    13                              <2> %%_ret:
    14 00002EC8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1618                              <1> 
  1619                              <1> break:
  1620 00002EC9 F605DCD1FFFFFF      <1>     test byte [arg1Flg], -1
  1621 00002ED0 752D                <1>     jnz .argumentProvided
  1622                              <1>     ;Here we just get the status of break
  1623 00002ED2 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
  1624 00002ED7 CD21                <1>     int 21h
  1625 00002ED9 88D3                <1>     mov bl, dl
  1626 00002EDB 488D1520DEFFFF      <1>     lea rdx, breakIs
  1627 00002EE2 B409                <1>     mov ah, 09h
  1628 00002EE4 CD21                <1>     int 21h
  1629 00002EE6 488D1510DEFFFF      <1>     lea rdx, onMes
  1630 00002EED 488D0D03DEFFFF      <1>     lea rcx, offMes
  1631 00002EF4 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1632 00002EF6 480F44D1            <1>     cmovz rdx, rcx
  1633 00002EFA B409                <1>     mov ah, 09h
  1634 00002EFC CD21                <1>     int 21h
  1635                              <1>     return
    13                              <2> %%_ret:
    14 00002EFE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1636                              <1> .argumentProvided:
  1637 00002EFF 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1638 00002F03 AD                  <1>     lodsd   ;Read the word
  1639 00002F04 89C3                <1>     mov ebx, eax
  1640 00002F06 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1641 00002F0B C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1642 00002F0E 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1643 00002F13 7416                <1>     je .maybeOn
  1644 00002F15 663D4F46            <1>     cmp ax, "OF"
  1645 00002F19 7523                <1>     jne .badOnOff
  1646 00002F1B 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1647 00002F20 6681FB4620          <1>     cmp bx, "F "
  1648 00002F25 7517                <1>     jne .badOnOff
  1649                              <1>     ;Set off
  1650 00002F27 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1651 00002F29 EB0B                <1>     jmp short .setBreak
  1652                              <1> .maybeOn:
  1653 00002F2B 663D4F4E            <1>     cmp ax, "ON"
  1654 00002F2F 750D                <1>     jne .badOnOff
  1655                              <1>     ;Set on
  1656 00002F31 BA01000000          <1>     mov edx, 1
  1657                              <1> .setBreak:
  1658 00002F36 B801330000          <1>     mov eax, 3301h  ;Set break
  1659 00002F3B CD21                <1>     int 21h
  1660                              <1>     return
    13                              <2> %%_ret:
    14 00002F3D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1661                              <1> .badOnOff:
  1662 00002F3E 488D15B2DFFFFF      <1>     lea rdx, badOnOff
  1663 00002F45 B409                <1>     mov ah, 09h
  1664 00002F47 CD21                <1>     int 21h
  1665                              <1>     return
    13                              <2> %%_ret:
    14 00002F49 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1666                              <1> 
  1667                              <1> verify:
  1668 00002F4A F6055BD1FFFFFF      <1>     test byte [arg1Flg], -1
  1669 00002F51 752D                <1>     jnz .argumentProvided
  1670                              <1>     ;Here we just get the status of break
  1671 00002F53 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1672 00002F58 CD21                <1>     int 21h
  1673 00002F5A 88C3                <1>     mov bl, al
  1674 00002F5C 488D15A9DDFFFF      <1>     lea rdx, verifyIs
  1675 00002F63 B409                <1>     mov ah, 09h
  1676 00002F65 CD21                <1>     int 21h
  1677 00002F67 488D158FDDFFFF      <1>     lea rdx, onMes
  1678 00002F6E 488D0D82DDFFFF      <1>     lea rcx, offMes
  1679 00002F75 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1680 00002F77 480F44D1            <1>     cmovz rdx, rcx
  1681 00002F7B B409                <1>     mov ah, 09h
  1682 00002F7D CD21                <1>     int 21h
  1683                              <1>     return
    13                              <2> %%_ret:
    14 00002F7F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1684                              <1> .argumentProvided:
  1685 00002F80 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1686 00002F84 AD                  <1>     lodsd   ;Read the word
  1687 00002F85 89C3                <1>     mov ebx, eax
  1688 00002F87 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1689 00002F8C C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1690 00002F8F 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1691 00002F94 7416                <1>     je .maybeOn
  1692 00002F96 663D4F46            <1>     cmp ax, "OF"
  1693 00002F9A 751F                <1>     jne .badOnOff
  1694 00002F9C 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1695 00002FA1 6681FB4620          <1>     cmp bx, "F "
  1696 00002FA6 7513                <1>     jne .badOnOff
  1697                              <1>     ;Set off
  1698 00002FA8 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1699 00002FAA EB0A                <1>     jmp short .setVerify
  1700                              <1> .maybeOn:
  1701 00002FAC 663D4F4E            <1>     cmp ax, "ON"
  1702 00002FB0 7509                <1>     jne .badOnOff
  1703                              <1>     ;Set on
  1704 00002FB2 31C0                <1>     xor eax, eax
  1705 00002FB4 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1706                              <1> .setVerify:
  1707 00002FB6 B42E                <1>     mov ah, 2Eh  ;Set Verify
  1708 00002FB8 CD21                <1>     int 21h
  1709                              <1>     return
    13                              <2> %%_ret:
    14 00002FBA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1710                              <1> .badOnOff:
  1711 00002FBB 488D1535DFFFFF      <1>     lea rdx, badOnOff
  1712 00002FC2 B409                <1>     mov ah, 09h
  1713 00002FC4 CD21                <1>     int 21h
  1714                              <1>     return
    13                              <2> %%_ret:
    14 00002FC6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1715                              <1> 
  1716                              <1> rename:
  1717 00002FC7 F605DED0FFFFFF      <1>     test byte [arg1Flg], -1
  1718 00002FCE 0F841EECFFFF        <1>     jz badArgError
  1719 00002FD4 F605D4D0FFFFFF      <1>     test byte [arg2Flg], -1
  1720 00002FDB 0F8411ECFFFF        <1>     jz badArgError    
  1721                              <1>     ;Initialise the variables!
  1722 00002FE1 488D35C9D6FFFF      <1>     lea rsi, srcSpec
  1723 00002FE8 488935C6D7FFFF      <1>     mov qword [srcPtr], rsi
  1724 00002FEF 488D353DD7FFFF      <1>     lea rsi, destSpec
  1725 00002FF6 488935C0D7FFFF      <1>     mov qword [destPtr], rsi
  1726                              <1>     ;Check the second path is just a filename!
  1727 00002FFD 0FB605ACD0FFFF      <1>     movzx eax, byte [arg2Off]
  1728 00003004 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1729 0000300B 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1730 0000300E 488D3DCFD4FFFF      <1>     lea rdi, searchSpec
  1731 00003015 57                  <1>     push rdi
  1732 00003016 E8F3120000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1733 0000301B 5F                  <1>     pop rdi
  1734 0000301C 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1735 00003020 0F84CCEBFFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1736 00003026 4889FE              <1>     mov rsi, rdi
  1737                              <1> .destScan:
  1738 00003029 AC                  <1>     lodsb   ;Get the char
  1739 0000302A 3A05F9CFFFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1740 00003030 0F84BCEBFFFF        <1>     je badArgError
  1741 00003036 84C0                <1>     test al, al
  1742 00003038 75EF                <1>     jnz .destScan
  1743                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1744 0000303A 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1745 0000303E 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1745 00003047 3F                  <1>
  1746 00003048 B903000000          <1>     mov ecx, 3  ;24 bytes
  1747 0000304D F348AB              <1>     rep stosq
  1748 00003050 AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1749 00003051 488D358CD4FFFF      <1>     lea rsi, searchSpec
  1750 00003058 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1751 0000305C B80D290000          <1>     mov eax, 290Dh
  1752 00003061 CD21                <1>     int 21h     
  1753 00003063 50                  <1>     push rax    ;Save the WC signature
  1754 00003064 E8E8120000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1755 00003069 488D3D74D4FFFF      <1>     lea rdi, searchSpec
  1756 00003070 E81F120000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1757 00003075 4889FE              <1>     mov rsi, rdi
  1758 00003078 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1759 0000307B 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1760 0000307F B80D290000          <1>     mov eax, 290Dh
  1761 00003084 CD21                <1>     int 21h
  1762 00003086 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1763 00003087 88CC                <1>     mov ah, cl
  1764 00003089 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1765 0000308C 0F84EC000000        <1>     jz .noWC
  1766 00003092 488D354BD4FFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1767                              <1>     ;Now we check if we have a path to actually handle
  1768 00003099 4839F3              <1>     cmp rbx, rsi
  1769 0000309C 7444                <1>     je .noPath
  1770 0000309E C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1771 000030A2 488D353BD4FFFF      <1>     lea rsi, searchSpec
  1772 000030A9 488D3D01D6FFFF      <1>     lea rdi, srcSpec
  1773 000030B0 56                  <1>     push rsi
  1774 000030B1 E8E3100000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1775 000030B6 5E                  <1>     pop rsi
  1776 000030B7 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1777 000030BA 8A0569CFFFFF        <1>     mov al, byte [pathSep]
  1778 000030C0 AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1779 000030C1 48893DEDD6FFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1780 000030C8 488D3D64D6FFFF      <1>     lea rdi, destSpec
  1781 000030CF E8C5100000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1782 000030D4 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1783 000030D7 AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1784 000030D8 48893DDED6FFFF      <1>     mov qword [destPtr], rdi
  1785 000030DF 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1786                              <1> .noPath:
  1787                              <1>     ;Now we have where to copy the files to, we can start our work!
  1788 000030E2 E881130000          <1>     call setDTA
  1789 000030E7 488D15F6D3FFFF      <1>     lea rdx, searchSpec
  1790 000030EE 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1791 000030F0 B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1792 000030F5 CD21                <1>     int 21h
  1793 000030F7 0F8207EBFFFF        <1>     jc badDupFnf    ;If no file was found!
  1794                              <1> .wcLoop:
  1795                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1796 000030FD 488D3584D0FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1797 00003104 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1798 00003108 B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1799 0000310D CD21                <1>     int 21h 
  1800                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1801 0000310F 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1802 00003113 488D3DABD6FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1803 0000311A 57                  <1>     push rdi
  1804 0000311B 48A5                <1>     movsq
  1805 0000311D 66A5                <1>     movsw
  1806 0000311F A4                  <1>     movsb
  1807 00003120 5F                  <1>     pop rdi
  1808 00003121 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1809 00003125 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1810                              <1> .wcNameMake:
  1811 0000312A AC                  <1>     lodsb   ;Get the char from the source string
  1812 0000312B 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1813 0000312E 7502                <1>     jne .noStore    ;Dont store the char there
  1814 00003130 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1815                              <1> .noStore:
  1816 00003132 48FFC7              <1>     inc rdi ;Goto next char position
  1817 00003135 FFC9                <1>     dec ecx
  1818 00003137 75F1                <1>     jnz .wcNameMake
  1819                              <1> ;renName now has the FCB name for the file we wish to make!
  1820                              <1> ;Now make the two paths!
  1821 00003139 488D3548D0FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1822 00003140 488B3D6ED6FFFF      <1>     mov rdi, qword [srcPtr]
  1823 00003147 E84D100000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1824 0000314C 488D3572D6FFFF      <1>     lea rsi, renName
  1825 00003153 488B3D63D6FFFF      <1>     mov rdi, qword [destPtr]
  1826 0000315A E859110000          <1>     call FCBToAsciiz
  1827 0000315F 488D154BD5FFFF      <1>     lea rdx, srcSpec
  1828 00003166 488D3DC6D5FFFF      <1>     lea rdi, destSpec
  1829 0000316D B800560000          <1>     mov eax, 5600h
  1830 00003172 CD21                <1>     int 21h     ;Fail silently on wildcard rename
  1831 00003174 B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1832 00003179 CD21                <1>     int 21h
  1833 0000317B 7380                <1>     jnc .wcLoop     ;And process it too!
  1834                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 0000317D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1835                              <1> .noWC:
  1836 0000317E E8CE110000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1837 00003183 0FB60526CFFFFF      <1>     movzx eax, byte [arg2Off]
  1838 0000318A 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1839 00003191 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1840 00003194 488D3D98D5FFFF      <1>     lea rdi, destSpec
  1841 0000319B 57                  <1>     push rdi
  1842 0000319C E86D110000          <1>     call cpDelimPathToBufz
  1843 000031A1 5F                  <1>     pop rdi
  1844 000031A2 488D153BD3FFFF      <1>     lea rdx, searchSpec
  1845 000031A9 B800560000          <1>     mov eax, 5600h
  1846 000031AE CD21                <1>     int 21h
  1847                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000031B0 73(7D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1848 000031B2 E94DEAFFFF          <1>     jmp badDupFnf   ;Always just return this
  1849                              <1> 
  1850                              <1> 
  1851                              <1> touch:
  1852                              <1> ;Temporarily used to create files
  1853 000031B7 F605EECEFFFFFF      <1>     test byte [arg1Flg], -1
  1854 000031BE 0F842EEAFFFF        <1>     jz badArgError
  1855 000031C4 E888110000          <1>     call buildCommandPath
  1856 000031C9 488D1514D3FFFF      <1>     lea rdx, searchSpec
  1857 000031D0 B8005B0000          <1>     mov eax, 5B00h  ;Create unique file 
  1858 000031D5 31C9                <1>     xor ecx, ecx
  1859 000031D7 CD21                <1>     int 21h
  1860 000031D9 721D                <1>     jc .touch1
  1861                              <1> .touchClose:
  1862 000031DB 0FB7D8              <1>     movzx ebx, ax   ;Save the handle here
  1863 000031DE B80D120000          <1>     mov eax, 120Dh  ;Get date/time words from the DOS
  1864 000031E3 CD2F                <1>     int 2fh
  1865 000031E5 89C1                <1>     mov ecx, eax    ;Move the time here
  1866 000031E7 87D1                <1>     xchg edx, ecx   ;Get them in the right place
  1867 000031E9 B801570000          <1>     mov eax, 5701h  ;Set the date/time for bx
  1868 000031EE CD21                <1>     int 21h
  1869 000031F0 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1870 000031F5 CD21                <1>     int 21h
  1871                              <1>     return
    13                              <2> %%_ret:
    14 000031F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1872                              <1> .touch1:
  1873 000031F8 3C50                <1>     cmp al, errFilExist ;Does the file exist?
  1874 000031FA 7509                <1>     jne .touchError ;If not, this is a proper error!
  1875 000031FC B8003D0000          <1>     mov eax, 3D00h  ;R/O open instead to update the access time!!
  1876 00003201 CD21                <1>     int 21h
  1877 00003203 73D6                <1>     jnc .touchClose ;If this worked, close the handle immediately
  1878                              <1> .touchError:
  1879 00003205 3C03                <1>     cmp al, errPnf
  1880 00003207 0F84E5E9FFFF        <1>     je badArgError
  1881 0000320D 3C02                <1>     cmp al, errFnf
  1882 0000320F 0F84F8E9FFFF        <1>     je badFnf
  1883 00003215 E9BDE9FFFF          <1>     jmp badAccError
  1884                              <1>     
  1885                              <1> 
  1886                              <1> join:
  1887                              <1> ;Mock join command, to test join. Make an external command.
  1888                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1889 0000321A F605AF000000FF      <1>     test byte [.joinOn], -1
  1890 00003221 743D                <1>     jz .okJoin
  1891                              <1> .joindisable:
  1892 00003223 B800520000          <1>     mov eax, 5200h  
  1893 00003228 CD21                <1>     int 21h
  1894                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1895 0000322A B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1896 0000322F CD2A                <1>     int 2Ah
  1897 00003231 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1898 00003235 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1899 00003239 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1900 0000323F C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1901 00003242 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1902 00003246 FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1903 00003249 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1904 0000324E CD2A                <1>     int 2Ah
  1905 00003250 C6057900000000      <1>     mov byte [.joinOn], 0
  1906 00003257 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1907 0000325E EB45                <1>     jmp short .joinExit
  1908                              <1> .okJoin:
  1909 00003260 C60569000000FF      <1>     mov byte [.joinOn], -1
  1910 00003267 B800520000          <1>     mov eax, 5200h  
  1911 0000326C CD21                <1>     int 21h
  1912 0000326E 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1913 00003272 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1914                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1915 00003276 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1916 0000327B CD2A                <1>     int 2Ah
  1917 0000327D 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1918 00003283 4889DF              <1>     mov rdi, rbx
  1919 00003286 488D3544000000      <1>     lea rsi, .joinPath
  1920 0000328D B90C000000          <1>     mov ecx, .joinPathL
  1921 00003292 F3A4                <1>     rep movsb   ;Copy chars over
  1922 00003294 FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1923 00003297 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1924 0000329C CD2A                <1>     int 2Ah
  1925 0000329E 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1926                              <1> .joinExit:
  1927 000032A5 B800090000          <1>     mov eax, 0900h
  1928 000032AA CD21                <1>     int 21h
  1929                              <1>     return
    13                              <2> %%_ret:
    14 000032AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1930 000032AD 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1930 000032B6 61626C65640D0A24    <1>
  1931 000032BE 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1931 000032C7 7361626C65640D0A24  <1>
  1932 000032D0 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1933 000032D1 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1933 000032DA 535400              <1>
  1934                              <1> .joinPathL  equ $ - .joinPath 
  1935                              <1> 
  1936                              <1> subst:
  1937                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1938                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1939 000032DD F605D3000000FF      <1>     test byte [.substOn], -1
  1940 000032E4 7443                <1>     jz .okSubst
  1941                              <1> .substdisable:
  1942 000032E6 B800520000          <1>     mov eax, 5200h  
  1943 000032EB CD21                <1>     int 21h
  1944                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1945 000032ED B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1946 000032F2 CD2A                <1>     int 2Ah
  1947 000032F4 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1948 000032F8 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1949 000032FF 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1950 00003305 C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1951 00003308 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1952 0000330C 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1953 00003312 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1954 00003317 CD2A                <1>     int 2Ah
  1955 00003319 C6059700000000      <1>     mov byte [.substOn], 0
  1956 00003320 488D157D000000      <1>     lea rdx, .substDisableMsg
  1957 00003327 EB61                <1>     jmp short .substExit
  1958                              <1> .okSubst:
  1959 00003329 C60587000000FF      <1>     mov byte [.substOn], -1
  1960 00003330 B800520000          <1>     mov eax, 5200h  
  1961 00003335 CD21                <1>     int 21h
  1962 00003337 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1963 0000333C CD2A                <1>     int 2Ah
  1964 0000333E 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1965 00003342 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1966 00003349 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1967 0000334D 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1968 00003354 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1969 00003358 C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1970                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1971 0000335F 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1972 00003365 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1973 0000336B 4889DF              <1>     mov rdi, rbx
  1974 0000336E 488D3543000000      <1>     lea rsi, .substPath
  1975 00003375 B90C000000          <1>     mov ecx, .substPathL
  1976 0000337A F3A4                <1>     rep movsb   ;Copy chars over
  1977 0000337C B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1978 00003381 CD2A                <1>     int 2Ah
  1979 00003383 488D1508000000      <1>     lea rdx, .substEnableMsg
  1980                              <1> .substExit:
  1981 0000338A B800090000          <1>     mov eax, 0900h
  1982 0000338F CD21                <1>     int 21h
  1983                              <1>     return
    13                              <2> %%_ret:
    14 00003391 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1984 00003392 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1984 0000339B 6E61626C65640D0A24  <1>
  1985 000033A4 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1985 000033AD 697361626C65640D0A- <1>
  1985 000033B6 24                  <1>
  1986 000033B7 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1987 000033B8 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1987 000033C1 535400              <1>
  1988                              <1> .substPathL  equ $ - .substPath 
  1989                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1990                              <1> truename:
  1991 000033C4 F605E1CCFFFFFF      <1>     test byte [arg1Flg], -1
  1992 000033CB 0F8421E8FFFF        <1>     jz badArgError
  1993 000033D1 E87B0F0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1994 000033D6 488D3507D1FFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1995 000033DD 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1996 000033E0 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1997 000033E5 CD21                <1>     int 21h
  1998 000033E7 730D                <1>     jnc .writePath
  1999 000033E9 3C02                <1>     cmp al, errFnf
  2000 000033EB 0F840AE8FFFF        <1>     je badFileError
  2001 000033F1 E9EAE7FFFF          <1>     jmp badParamError
  2002                              <1> .writePath:
  2003 000033F6 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  2004 000033F9 B9FFFFFFFF          <1>     mov ecx, -1
  2005 000033FE 30C0                <1>     xor al, al
  2006 00003400 F2AE                <1>     repne scasb     ;Get the new len
  2007 00003402 F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  2008 00003404 FFC9                <1>     dec ecx
  2009 00003406 BB01000000          <1>     mov ebx, 01
  2010 0000340B B440                <1>     mov ah, 40h
  2011 0000340D CD21                <1>     int 21h
  2012 0000340F E8830B0000          <1>     call printCRLF
  2013                              <1>     return
    13                              <2> %%_ret:
    14 00003414 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2014                              <1> 
  2015                              <1> label:
  2016                              <1> ;Displays/Changes/Deletes the file label
  2017 00003415 488D1508000000      <1>     lea rdx, .l1
  2018 0000341C B800090000          <1>     mov eax, 0900h
  2019 00003421 CD21                <1>     int 21h
  2020                              <1>     return
    13                              <2> %%_ret:
    14 00003423 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2021 00003424 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  2021 0000342D 6E20756E696D706C65- <1>
  2021 00003436 6D656E7465640D0A24  <1>
  2022                              <1> 
  2023                              <1> mklbl:
  2024                              <1>     ;lea rdx, .l1
  2025                              <1>     ;mov cx, 08h ;Make a label
  2026                              <1>     ;mov eax, 3C00h
  2027                              <1>     ;int 21h
  2028                              <1> 
  2029                              <1>     ;mov ebx, eax
  2030                              <1>     ;mov eax, 3E00h  ;Close the handle
  2031                              <1>     ;int 21h
  2032                              <1>     ;return
  2033                              <1> 
  2034                              <1> ;.l1: db "TESTLABEL",0
  2035 0000343F 488D1508000000      <1>     lea rdx, .l1
  2036 00003446 B800160000          <1>     mov eax, 1600h  ;Create FCB
  2037 0000344B CD21                <1>     int 21h
  2038                              <1>     return
    13                              <2> %%_ret:
    14 0000344D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2039                              <1> .l1:
  2040                              <1>     istruc exFcb
  2041 0000344E FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  2042 0000344F 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  2043 00003455 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  2044 00003456 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  2045 0000345E 4C2020              <1>     at exFcb.fileext,   db "L  "
  2046 00003461 00000000            <1>     at exFcb.curBlock,  dd 0
  2047 00003465 00<rep 15h>         <1>     iend 
  2048                              <1> rmlbl:
  2049 0000347A 488D1508000000      <1>     lea rdx, .l1
  2050 00003481 B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  2051 00003486 CD21                <1>     int 21h
  2052                              <1>     return
    13                              <2> %%_ret:
    14 00003488 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2053                              <1> .l1:    ;FCB to volume label
  2054                              <1>     istruc exFcb
  2055 00003489 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  2056 0000348A 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  2057 00003490 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  2058 00003491 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  2059 00003499 3F3F3F              <1>     at exFcb.fileext,   db "???"
  2060 0000349C 00000000            <1>     at exFcb.curBlock,  dd 0
  2061 000034A0 00<rep 15h>         <1>     iend 
  2062                              <1> 
  2063                              <1> rnlbl:
  2064 000034B5 488D1508000000      <1>     lea rdx, .l1
  2065 000034BC B800170000          <1>     mov eax, 1700h
  2066 000034C1 CD21                <1>     int 21h
  2067                              <1>     return
    13                              <2> %%_ret:
    14 000034C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2068                              <1> .l1:
  2069                              <1>     istruc exRenFcb
  2070 000034C4 FF                  <1>     at exRenFcb.extSig,     db -1
  2071 000034C5 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  2072 000034CB 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  2073 000034CC 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  2074 000034D4 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  2075 000034D7 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  2075 000034E0 4C414245            <1>
  2076 000034E4 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  2077 000034E7 00<rep 4h>          <1>     iend
  2078                              <1> volume:
  2079                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  2080 000034EB F605BDCBFFFFFF      <1>     test byte [arg2Flg], -1
  2081 000034F2 0F85FAE6FFFF        <1>     jnz badArgError
  2082 000034F8 F605ADCBFFFFFF      <1>     test byte [arg1Flg], -1
  2083 000034FF 7507                <1>     jnz .notCurrentDrive
  2084 00003501 E88E0C0000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  2085 00003506 EB31                <1>     jmp short .dirEP
  2086                              <1> .notCurrentDrive:
  2087 00003508 E8440E0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  2088 0000350D 488D35D0CFFFFF      <1>     lea rsi, searchSpec
  2089 00003514 E8C40C0000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  2090 00003519 66AD                <1>     lodsw                   ;Get this word
  2091 0000351B 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  2092 0000351E 0F85CEE6FFFF        <1>     jne badArgError
  2093 00003524 8A0584CBFFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  2094 0000352A A8FF                <1>     test al, -1
  2095 0000352C 0F85B7E6FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  2096 00003532 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  2097 00003537 FFC8                <1>     dec eax ;Convert to 0 based number
  2098                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  2099 00003539 E82A0F0000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  2100 0000353E 488D153CD1FFFF      <1>     lea rdx, volFcb
  2101 00003545 FFC0                <1>     inc eax ;Get 1 based drive number
  2102 00003547 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  2103 00003549 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  2104 0000354C B800110000          <1>     mov eax, 1100h ;Find first FCB
  2105 00003551 CD21                <1>     int 21h
  2106 00003553 50                  <1>     push rax
  2107                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  2108 00003554 488D158CD3FFFF      <1>     lea rdx, crlf
  2109 0000355B B409                <1>     mov ah, 09h
  2110 0000355D CD21                <1>     int 21h
  2111 0000355F 488D1523D6FFFF      <1>     lea rdx, volMes
  2112 00003566 B409                <1>     mov ah, 09h
  2113 00003568 CD21                <1>     int 21h
  2114 0000356A 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  2115 0000356C 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  2116 0000356F B402                <1>     mov ah, 02h
  2117 00003571 CD21                <1>     int 21h
  2118 00003573 58                  <1>     pop rax
  2119 00003574 84C0                <1>     test al, al ;If this is zero, the call succeeded
  2120 00003576 7409                <1>     jz .volIDOk
  2121 00003578 488D1521D6FFFF      <1>     lea rdx, volNo
  2122 0000357F EB19                <1>     jmp short .volEndPrint
  2123                              <1> .volIDOk:
  2124 00003581 488D1513D6FFFF      <1>     lea rdx, volOk
  2125 00003588 B409                <1>     mov ah, 09h
  2126 0000358A CD21                <1>     int 21h
  2127 0000358C C605EACBFFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  2128 00003593 488D15D8CBFFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  2129                              <1> .volEndPrint:
  2130 0000359A B409                <1>     mov ah, 09h
  2131 0000359C CD21                <1>     int 21h
  2132 0000359E 488D1542D3FFFF      <1>     lea rdx, crlf
  2133 000035A5 B409                <1>     mov ah, 09h
  2134 000035A7 CD21                <1>     int 21h
  2135                              <1>     return
    13                              <2> %%_ret:
    14 000035A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2136                              <1> 
  2137                              <1> version:
  2138 000035AA 488D1536D3FFFF      <1>     lea rdx, crlf
  2139 000035B1 B409                <1>     mov ah, 09h
  2140 000035B3 CD21                <1>     int 21h
  2141 000035B5 488D15BBD5FFFF      <1>     lea rdx, dosVer
  2142 000035BC B409                <1>     mov ah, 09h
  2143 000035BE CD21                <1>     int 21h
  2144 000035C0 E80C000000          <1>     call .printVersionNumber
  2145 000035C5 488D151BD3FFFF      <1>     lea rdx, crlf
  2146 000035CC B409                <1>     mov ah, 09h
  2147 000035CE CD21                <1>     int 21h
  2148                              <1>     return
    13                              <2> %%_ret:
    14 000035D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2149                              <1> .printVersionNumber:
  2150 000035D1 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  2151 000035D3 CD21                <1>     int 21h
  2152 000035D5 50                  <1>     push rax
  2153 000035D6 0FB6C0              <1>     movzx eax, al
  2154 000035D9 E8AC0D0000          <1>     call printDecimalWord
  2155 000035DE B22E                <1>     mov dl, "."
  2156 000035E0 B402                <1>     mov ah, 02h
  2157 000035E2 CD21                <1>     int 21h
  2158 000035E4 58                  <1>     pop rax
  2159 000035E5 0FB6C4              <1>     movzx eax, ah
  2160 000035E8 E89D0D0000          <1>     call printDecimalWord
  2161                              <1>     return
    13                              <2> %%_ret:
    14 000035ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2162                              <1> 
  2163                              <1> 
  2164                              <1> memory:
  2165 000035EE 488B1D2ACAFFFF      <1>     mov rbx, qword [sysVars]
  2166 000035F5 4885DB              <1>     test rbx, rbx
  2167 000035F8 7510                <1>     jnz .sysvarsOK
  2168 000035FA 488D155DD8FFFF      <1>     lea rdx, memBad0
  2169 00003601 B409                <1>     mov ah, 09h
  2170 00003603 CD21                <1>     int 21h
  2171 00003605 E94E0E0000          <1>     jmp freezePC.altEP
  2172                              <1> .sysvarsOK:
  2173                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  2174                              <1>     ; and rcx to store Application memory
  2175 0000360A 31F6                <1>     xor esi, esi
  2176 0000360C 31FF                <1>     xor edi, edi
  2177 0000360E 31ED                <1>     xor ebp, ebp
  2178 00003610 31C9                <1>     xor ecx, ecx
  2179 00003612 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  2180 00003616 488B1B              <1>     mov rbx, qword [rbx]
  2181                              <1> .memLp:
  2182 00003619 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  2183 0000361C 7409                <1>     je .validMCB
  2184 0000361E 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2185 00003621 0F8501010000        <1>     jne .badMCBFound
  2186                              <1> .validMCB:
  2187 00003627 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  2188 0000362A 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  2189 0000362E 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  2190 00003636 7505                <1>     jne .notDOS
  2191 00003638 4801C6              <1>     add rsi, rax    ;Add to DOS count
  2192 0000363B EB21                <1>     jmp short .gotoNext
  2193                              <1> .notDOS:
  2194 0000363D 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  2195 00003645 7505                <1>     jne .notFree
  2196 00003647 4801C7              <1>     add rdi, rax    ;Add to Free space count
  2197 0000364A EB12                <1>     jmp short .gotoNext
  2198                              <1> .notFree:
  2199 0000364C 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  2200 00003654 7505                <1>     jne .notHole
  2201 00003656 4801C5              <1>     add rbp, rax    ;Add to Hole count
  2202 00003659 EB03                <1>     jmp short .gotoNext
  2203                              <1> .notHole:
  2204 0000365B 4801C1              <1>     add rcx, rax    ;Add to Application count
  2205                              <1> .gotoNext:
  2206 0000365E 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2207 00003661 7407                <1>     je .endOfWalk
  2208 00003663 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  2209 00003668 EBAF                <1>     jmp short .memLp
  2210                              <1> .endOfWalk:
  2211                              <1>     
  2212 0000366A 488D154ED7FFFF      <1>     lea rdx, memDOS
  2213 00003671 B409                <1>     mov ah, 09h
  2214 00003673 CD21                <1>     int 21h
  2215 00003675 4889F0              <1>     mov rax, rsi
  2216 00003678 E89D000000          <1>     call .mcbPrintAmount
  2217 0000367D 488D15D3D7FFFF      <1>     lea rdx, memByte
  2218 00003684 B409                <1>     mov ah, 09h
  2219 00003686 CD21                <1>     int 21h
  2220                              <1> 
  2221 00003688 4885ED              <1>     test rbp, rbp
  2222 0000368B 741E                <1>     jz .skipHole
  2223 0000368D 488D1577D7FFFF      <1>     lea rdx, memHole
  2224 00003694 B409                <1>     mov ah, 09h
  2225 00003696 CD21                <1>     int 21h
  2226 00003698 4889E8              <1>     mov rax, rbp
  2227 0000369B E87A000000          <1>     call .mcbPrintAmount
  2228 000036A0 488D15B0D7FFFF      <1>     lea rdx, memByte
  2229 000036A7 B409                <1>     mov ah, 09h
  2230 000036A9 CD21                <1>     int 21h
  2231                              <1> .skipHole:
  2232                              <1> 
  2233 000036AB 488D1533D7FFFF      <1>     lea rdx, memApp
  2234 000036B2 B409                <1>     mov ah, 09h
  2235 000036B4 CD21                <1>     int 21h
  2236 000036B6 4889C8              <1>     mov rax, rcx
  2237 000036B9 E85C000000          <1>     call .mcbPrintAmount
  2238 000036BE 488D1592D7FFFF      <1>     lea rdx, memByte
  2239 000036C5 B409                <1>     mov ah, 09h
  2240 000036C7 CD21                <1>     int 21h
  2241                              <1> 
  2242 000036C9 488D1561D7FFFF      <1>     lea rdx, memFree
  2243 000036D0 B409                <1>     mov ah, 09h
  2244 000036D2 CD21                <1>     int 21h
  2245 000036D4 4889F8              <1>     mov rax, rdi
  2246 000036D7 E83E000000          <1>     call .mcbPrintAmount
  2247 000036DC 488D1574D7FFFF      <1>     lea rdx, memByte
  2248 000036E3 B409                <1>     mov ah, 09h
  2249 000036E5 CD21                <1>     int 21h
  2250                              <1> 
  2251 000036E7 488D15ABD6FFFF      <1>     lea rdx, memSys
  2252 000036EE B409                <1>     mov ah, 09h
  2253 000036F0 CD21                <1>     int 21h
  2254 000036F2 4889F0              <1>     mov rax, rsi
  2255 000036F5 4801F8              <1>     add rax, rdi
  2256 000036F8 4801C8              <1>     add rax, rcx
  2257 000036FB 4801E8              <1>     add rax, rbp
  2258 000036FE E817000000          <1>     call .mcbPrintAmount
  2259 00003703 488D154DD7FFFF      <1>     lea rdx, memByte
  2260 0000370A B409                <1>     mov ah, 09h
  2261 0000370C CD21                <1>     int 21h
  2262                              <1> 
  2263 0000370E 488D15D2D1FFFF      <1>     lea rdx, crlf
  2264 00003715 B409                <1>     mov ah, 09h
  2265 00003717 CD21                <1>     int 21h
  2266                              <1>     return
    13                              <2> %%_ret:
    14 00003719 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2267                              <1> 
  2268                              <1> .mcbPrintAmount:
  2269 0000371A 51                  <1>     push rcx
  2270 0000371B 56                  <1>     push rsi
  2271 0000371C 57                  <1>     push rdi
  2272 0000371D 55                  <1>     push rbp
  2273 0000371E E8670C0000          <1>     call printDecimalWord
  2274 00003723 5D                  <1>     pop rbp
  2275 00003724 5F                  <1>     pop rdi
  2276 00003725 5E                  <1>     pop rsi
  2277 00003726 59                  <1>     pop rcx
  2278                              <1>     return
    13                              <2> %%_ret:
    14 00003727 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2279                              <1> .badMCBFound:
  2280 00003728 488D156FD7FFFF      <1>     lea rdx, memBad2
  2281 0000372F B409                <1>     mov ah, 09h
  2282 00003731 CD21                <1>     int 21h
  2283 00003733 E9200D0000          <1>     jmp freezePC.altEP
  2284                              <1> 
  2285                              <1> type:
  2286 00003738 F6056DC9FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  2287 0000373F 0F84ADE4FFFF        <1>     jz badArgError
  2288 00003745 F60563C9FFFFFF      <1>     test byte [arg2Flg], -1
  2289 0000374C 0F85A0E4FFFF        <1>     jnz badArgError         ;If this set, error
  2290 00003752 4C8B05B6C8FFFF      <1>     mov r8, [pspPtr]
  2291 00003759 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2292 00003760 0FB60546C9FFFF      <1>     movzx eax, byte [arg1Off]
  2293 00003767 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  2294 0000376A 803E0D              <1>     cmp byte [rsi], CR
  2295 0000376D 0F847FE4FFFF        <1>     je badArgError
  2296 00003773 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  2297 00003777 750F                <1>     jne .noDrive
  2298 00003779 0FB6052EC9FFFF      <1>     movzx eax, byte [arg1FCBret]
  2299 00003780 3CFF                <1>     cmp al, -1
  2300 00003782 0F8461E4FFFF        <1>     je badDriveError
  2301                              <1> .noDrive:
  2302                              <1>     ;Now we open the provided file
  2303 00003788 E8C40B0000          <1>     call buildCommandPath
  2304 0000378D 488D1550CDFFFF      <1>     lea rdx, searchSpec
  2305 00003794 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  2306 00003799 CD21                <1>     int 21h
  2307 0000379B 0F825AE4FFFF        <1>     jc badFileError
  2308 000037A1 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  2309 000037A8 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  2310                              <1> .lp:
  2311 000037AB B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  2312 000037B0 B43F                <1>     mov ah, 3Fh ;Read handle
  2313 000037B2 CD21                <1>     int 21h
  2314 000037B4 89C1                <1>     mov ecx, eax
  2315 000037B6 67E317              <1>     jecxz .exit
  2316 000037B9 53                  <1>     push rbx    ;Save the original in handle
  2317 000037BA BB01000000          <1>     mov ebx, 1  ;STDOUT
  2318 000037BF B440                <1>     mov ah, 40h
  2319 000037C1 CD21                <1>     int 21h
  2320 000037C3 5B                  <1>     pop rbx ;Get back the original read handle
  2321 000037C4 720F                <1>     jc .exitBad
  2322 000037C6 39C8                <1>     cmp eax, ecx
  2323 000037C8 74E1                <1>     je .lp
  2324 000037CA FFC9                <1>     dec ecx ;One less for a ^Z
  2325 000037CC 39C8                <1>     cmp eax, ecx
  2326 000037CE 7505                <1>     jne .exitBad
  2327                              <1> .exit:
  2328 000037D0 B43E                <1>     mov ah, 3Eh ;Close handle
  2329 000037D2 CD21                <1>     int 21h
  2330                              <1>     return
    13                              <2> %%_ret:
    14 000037D4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2331                              <1> .exitBad:
  2332                              <1>     ;If it is a char device, don't print an error
  2333 000037D5 B800440000          <1>     mov eax, 4400h  ;Get IOCTL mode 
  2334 000037DA BB01000000          <1>     mov ebx, 1
  2335 000037DF CD21                <1>     int 21h
  2336 000037E1 F6C280              <1>     test dl, devCharDev
  2337                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000037E4 75(D4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2338 000037E6 E9ACE3FFFF          <1>     jmp badDiskFull
  2339                              <1> 
  2340                              <1> exit:
  2341 000037EB F60539C8FFFFFF      <1>     test byte [permaSwitch], -1
  2342                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000037F2 75(D4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2343 000037F4 488B051CC8FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  2344 000037FB 483DFFFFFFFF        <1>     cmp rax, -1
  2345                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003801 74(D4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2346 00003803 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  2347                              <1> 
  2348 00003807 488B151EC8FFFF      <1>     mov rdx, qword [parentInt22]
  2349 0000380E 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  2350 00003812 B822250000          <1>     mov eax, 2522h
  2351 00003817 CD21                <1>     int 21h
  2352                              <1> 
  2353 00003819 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  2354 0000381E CD21                <1>     int 21h
  2355                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00003820 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2356                              <1> 
  2357                              <1> launchChild:
  2358                              <1>     ;We execute an external command here.
  2359                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  2360                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  2361                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  2362                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  2363                              <1>     ;We know the drive we are on is valid so no need to double check that!
  2364 00003821 E8420C0000          <1>     call setDTA         
  2365                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
  2366 00003826 488D3D0ECBFFFF      <1>     lea rdi, cmdPathSpec
  2367 0000382D 4889FE              <1>     mov rsi, rdi
  2368 00003830 B811120000          <1>     mov eax, 1211h  ;Normalise this path first
  2369 00003835 CD2F                <1>     int 2fh
  2370 00003837 E8580A0000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  2371 0000383C 4889FE              <1>     mov rsi, rdi    ;Source here
  2372 0000383F 488D3D14C9FFFF      <1>     lea rdi, cmdFcb
  2373 00003846 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  2374 0000384B CD21                <1>     int 21h
  2375 0000384D 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  2376 0000384F 0F85CDE3FFFF        <1>     jnz badCmdError
  2377 00003855 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  2378                              <1> .pathLoop:
  2379 00003858 488D3504C9FFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  2380 0000385F 488D3DB2D6FFFF      <1>     lea rdi, extStr
  2381 00003866 BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  2382                              <1> .extLp:
  2383 0000386B 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  2384 0000386C B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  2385 00003871 F3A6                <1>     rep cmpsb   ;Compare the two strings
  2386 00003873 5E                  <1>     pop rsi
  2387 00003874 85C9                <1>     test ecx, ecx
  2388 00003876 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  2389 00003878 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  2390 0000387B FFCA                <1>     dec edx         ;Else one less extension type to check
  2391 0000387D 75EC                <1>     jnz .extLp
  2392                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  2393                              <1>     ;If not, error.
  2394 0000387F B903000000          <1>     mov ecx, 3
  2395 00003884 4889F7              <1>     mov rdi, rsi
  2396 00003887 B020                <1>     mov al, SPC
  2397 00003889 F3AE                <1>     rep scasb   
  2398 0000388B 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  2399 0000388D 0F858FE3FFFF        <1>     jnz badCmdError    ;If not, error!
  2400                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  2401 00003893 488D357ED6FFFF      <1>     lea rsi, extStr
  2402 0000389A BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  2403                              <1> .extSrchLp:
  2404 0000389F 488D3DBDC8FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2405 000038A6 B903000000          <1>     mov ecx, 3
  2406 000038AB F3A4                <1>     rep movsb   ;Copy the extension over!
  2407 000038AD E846010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  2408 000038B2 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  2409 000038B4 FFCB                <1>     dec ebx                 ;Decrement extension counter
  2410 000038B6 75E7                <1>     jnz .extSrchLp
  2411                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  2412                              <1> ; we start prepending path componants and trying again. To do this, we reset
  2413                              <1> ; by setting the fcb extension back to all spaces.
  2414 000038B8 488D3DA4C8FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2415 000038BF B903000000          <1>     mov ecx, 3
  2416 000038C4 B020                <1>     mov al, SPC
  2417 000038C6 F3AA                <1>     rep stosb   ;Store back the empty extension!
  2418 000038C8 EB70                <1>     jmp short .pathHandle
  2419                              <1> .extFnd:
  2420                              <1> ;Here if the file had the right extension.
  2421 000038CA E829010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  2422 000038CF 7269                <1>     jc .pathHandle
  2423                              <1> .extSrchFnd:
  2424                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  2425                              <1> ; a BAT. If it is, separate handling!
  2426 000038D1 803D8BC8FFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  2427 000038D8 0F8445E1FFFF        <1>     je batLaunch
  2428 000038DE 488D1DB0C8FFFF      <1>     lea rbx, launchBlock
  2429 000038E5 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  2430 000038E9 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  2431 000038EC 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  2432 000038F3 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  2433 000038F7 498D405C            <1>     lea rax, qword [r8 + fcb1]
  2434 000038FB 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  2435 000038FF 498D406C            <1>     lea rax, qword [r8 + fcb2]
  2436 00003903 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  2437 00003907 488D152DCAFFFF      <1>     lea rdx, cmdPathSpec
  2438 0000390E B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  2439 00003913 CD21                <1>     int 21h
  2440                              <1> ;If the program failed to start, verify why!
  2441 00003915 B800590000          <1>     mov eax, 5900h      ;Get extended error
  2442 0000391A 31DB                <1>     xor ebx, ebx
  2443 0000391C CD21                <1>     int 21h
  2444 0000391E 668905E8C6FFFF      <1>     mov word [returnCode], ax   ;Error code from EXEC
  2445 00003925 3C05                <1>     cmp al, errAccDen   ;Access denied?
  2446 00003927 0F84AAE2FFFF        <1>     je badAccError
  2447 0000392D 3C07                <1>     cmp al, errMCBbad   ;If MCB bad error, freeze PC
  2448 0000392F 0F84180B0000        <1>     je freezePC
  2449 00003935 E9E8E2FFFF          <1>     jmp badCmdError     ;If something goes wrong, error out
  2450                              <1> .pathHandle:        
  2451                              <1> ;First check if rbp is null. If it is, its a first time entry. 
  2452                              <1> ;al has error code!
  2453 0000393A 4885ED              <1>     test rbp, rbp
  2454 0000393D 0F85A3000000        <1>     jnz .pathReentry
  2455                              <1> ;Now check if the command we recieved included an absolute path.
  2456                              <1> ;If so, we don't do path substitution and just fail at this point
  2457 00003943 488D35F1C9FFFF      <1>     lea rsi, cmdPathSpec
  2458 0000394A 66AD                <1>     lodsw   ;Get the first two chars
  2459 0000394C 3A05D7C6FFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  2460 00003952 0F84CAE2FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2461 00003958 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  2462 0000395A 7412                <1>     je .pathGetEnv
  2463 0000395C 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  2464 0000395F 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  2465 00003961 AC                  <1>     lodsb   ;Get the third char
  2466 00003962 3A05C1C6FFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  2467 00003968 0F84B4E2FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2468                              <1> .pathGetEnv:
  2469                              <1> ;Now get a pointer to the environment and search for PATH=
  2470                              <1> ;We only take the final portion of the path and add it to each path componant
  2471                              <1> ;This agrees with DOS 3.3
  2472 0000396E E8620B0000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  2473 00003973 0F84A9E2FFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  2474                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  2475                              <1>     ;Now we know we dont have to keep track of chars!!
  2476 00003979 488D3DEDD6FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  2477 00003980 E8AA0B0000          <1>     call searchForEnvVar
  2478 00003985 0F8297E2FFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
  2479 0000398B 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
  2480 0000398E 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
  2481                              <1> .pathRejoin:
  2482 00003995 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  2483 00003998 0F8484E2FFFF        <1>     je badCmdError      ;Empty or no more path? Error!
  2484 0000399E 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
  2485 000039A1 488D3D3CCBFFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  2486                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
  2487                              <1>     ;SHOULD CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
  2488                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
  2489                              <1>     ;This is impossible to do if env edited by COMMAND.COM
  2490 000039A8 E84B090000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
  2491 000039AD 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  2492 000039B0 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  2493 000039B3 48FFCF              <1>     dec rdi ;Point to the null terminator
  2494 000039B6 8A056DC6FFFF        <1>     mov al, byte [pathSep]
  2495 000039BC 3847FF              <1>     cmp byte [rdi - 1], al
  2496 000039BF 7401                <1>     je .skipPathsep ;Need for rootdir as a double slash start is a netpath
  2497 000039C1 AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  2498                              <1> .skipPathsep: ;Affects double slashes in path (but thats ok)
  2499 000039C2 488D3592C7FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2500 000039C9 E8EA080000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  2501 000039CE 488D350FCBFFFF      <1>     lea rsi, searchSpec 
  2502 000039D5 488D3D5FC9FFFF      <1>     lea rdi, cmdPathSpec
  2503 000039DC E8B8070000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  2504 000039E1 E972FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  2505                              <1> .pathReentry:
  2506 000039E6 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  2507 000039EA 0F8432E2FFFF        <1>     je badCmdError
  2508                              <1> ;Currently, because we dont swap drives, we wont print this message.
  2509                              <1> ;Not really a big deal...
  2510                              <1>     ;cmp al, errBadDrv
  2511                              <1>     ;jne .pathDrvOk
  2512                              <1>     ;lea rdx, badDrvSrch ;Print the drive was invalid!
  2513                              <1>     ;mov eax, 0900h
  2514                              <1>     ;int 21h
  2515                              <1> ;.pathDrvOk:
  2516 000039F0 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  2517 000039F3 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  2518 000039F6 EB9D                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  2519                              <1> 
  2520                              <1> .prepAndSearch:
  2521                              <1> ;Copies over the name and extension in UC to the last componant of the 
  2522                              <1> ;cmdPathSpec and null terminates. 
  2523                              <1> ;Input: cmdFcb name + ext setup. 
  2524                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  2525                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
  2526 000039F8 51                  <1>     push rcx
  2527 000039F9 56                  <1>     push rsi
  2528 000039FA 57                  <1>     push rdi
  2529 000039FB 488D3D39C9FFFF      <1>     lea rdi, cmdPathSpec 
  2530 00003A02 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  2531 00003A05 E88A080000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  2532 00003A0A 488D354AC7FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2533 00003A11 E8A2080000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  2534 00003A16 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  2535 00003A1B 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  2536 00003A1D CD21                <1>     int 21h
  2537 00003A1F 5F                  <1>     pop rdi
  2538 00003A20 5E                  <1>     pop rsi
  2539 00003A21 59                  <1>     pop rcx
  2540                              <1>     return
    13                              <2> %%_ret:
    14 00003A22 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2541                              <1> 
  2542                              <1> set:
  2543 00003A23 F60582C6FFFFFF      <1>     test byte [arg1Flg], -1
  2544 00003A2A 7539                <1>     jnz .editEnv
  2545                              <1>     ;Here we just print the environment.
  2546 00003A2C E8A40A0000          <1>     call checkEnvGoodAndGet 
  2547 00003A31 0F8497E1FFFF        <1>     jz badEnvSpaceError
  2548                              <1>     ;We know this is a good env so keep going! env ptr in rsi
  2549 00003A37 4889F7              <1>     mov rdi, rsi
  2550 00003A3A 4889F2              <1>     mov rdx, rsi
  2551                              <1> .findLp:
  2552 00003A3D B9FFFFFFFF          <1>     mov ecx, -1
  2553 00003A42 31C0                <1>     xor eax, eax
  2554                              <1> .scanLp:
  2555 00003A44 F2AE                <1>     repne scasb
  2556 00003A46 75FC                <1>     jne .scanLp
  2557 00003A48 F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
  2558                              <1>     ;Else, we now print this environment variable and CRLF it
  2559                              <1>     ;rdx points to the start of the string aleady
  2560                              <1>     ;ecx has the bytes to print
  2561 00003A4A BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
  2562 00003A4F B800400000          <1>     mov eax, 4000h  ;Print to handle
  2563 00003A54 CD21                <1>     int 21h
  2564 00003A56 E83C050000          <1>     call printCRLF
  2565 00003A5B 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
  2566                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003A5E 74(22)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2567 00003A60 4889FA              <1>     mov rdx, rdi   
  2568 00003A63 EBD8                <1>     jmp short .findLp
  2569                              <1> .editEnv:
  2570 00003A65 E86B0A0000          <1>     call checkEnvGoodAndGet
  2571 00003A6A 0F845EE1FFFF        <1>     jz badEnvSpaceError
  2572 00003A70 0FB60536C6FFFF      <1>     movzx eax, byte [arg1Off]
  2573 00003A77 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2574 00003A7E 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
  2575                              <1> .altEp:
  2576 00003A81 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
  2577 00003A84 B00D                <1>     mov al, CR              ;Search for the CR
  2578 00003A86 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
  2579 00003A8E 89CB                <1>     mov ebx, ecx            ;Save this count 
  2580 00003A90 53                  <1>     push rbx                ;Save this count on the stack too!
  2581 00003A91 F2AE                <1>     repne scasb             ;Now get the length of this env string
  2582 00003A93 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
  2583 00003A95 66891D4ACDFFFF      <1>     mov word [envVarSz], bx ;Store the count
  2584 00003A9C 59                  <1>     pop rcx                 ;Get the char count back!
  2585 00003A9D 89CB                <1>     mov ebx, ecx            
  2586 00003A9F 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
  2587 00003AA2 B03D                <1>     mov al, "="             ;Scan for an equals sign
  2588 00003AA4 F2AE                <1>     repne scasb
  2589 00003AA6 0F8519E1FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
  2590 00003AAC 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
  2591 00003AAE 66891D33CDFFFF      <1>     mov word [envVarNamSz], bx
  2592 00003AB5 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
  2593 00003AB8 7477                <1>     je .delEnvVar           ;Free the envvar and return
  2594 00003ABA 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
  2595 00003ABB 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2596 00003ABE E86C0A0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2597 00003AC3 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
  2598 00003AC5 E8930A0000          <1>     call envFree            ;Free the var in rsi
  2599                              <1> .editNewEnv:
  2600 00003ACA E8C70A0000          <1>     call getFreeSpace       ;Get the free space in env in ecx
  2601 00003ACF E8E70A0000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
  2602 00003AD4 5E                  <1>     pop rsi                 ;Get back the ptr to the string
  2603 00003AD5 31C0                <1>     xor eax, eax            ;Prepare null length!
  2604 00003AD7 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
  2605 00003ADD 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
  2606 00003AE0 720B                <1>     jb .reallocTry          ;Try to reallocate!
  2607 00003AE2 FFC9                <1>     dec ecx                 ;Save a byte for end magic null
  2608 00003AE4 663B0DFBCCFFFF      <1>     cmp cx, word [envVarSz] ;Do we have enough space?
  2609 00003AEB 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
  2610                              <1> .reallocTry:
  2611                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
  2612                              <1>     ; we proceed with the environment size.
  2613 00003AED E8DE0A0000          <1>     call growEnvBlock   ;Attempt to grow the environment
  2614 00003AF2 7319                <1>     jnc .reallocOk
  2615 00003AF4 0F84D4E0FFFF        <1>     jz badEnvSpaceError    ;Max environment space
  2616                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
  2617                              <1>     ; partially the variable into the env. If so we do that. If the name
  2618                              <1>     ; cannot fit, we don't bother
  2619                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
  2620 00003AFA 663B0DE7CCFFFF      <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
  2621                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00003B01 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00003B03 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2622 00003B04 E8C5E0FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
  2623 00003B09 FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
  2624 00003B0B EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
  2625                              <1> .reallocOk:
  2626                              <1>     ;Here we have all the space to just copy the full path
  2627 00003B0D 0FB70DD2CCFFFF      <1>     movzx ecx, word [envVarSz]
  2628                              <1> .nameCp:
  2629                              <1> ;Now copy over the env var, ecx = #ofchars to copy
  2630                              <1> ;Always enough memory for name= here
  2631 00003B14 AC                  <1>     lodsb
  2632 00003B15 E8A2060000          <1>     call ucChar
  2633 00003B1A AA                  <1>     stosb
  2634 00003B1B 66FFC9              <1>     dec cx      ;Always decrement this count
  2635 00003B1E 3C3D                <1>     cmp al, "="
  2636 00003B20 75F2                <1>     jne .nameCp
  2637                              <1> .exitNameCp:
  2638 00003B22 AC                  <1>     lodsb
  2639 00003B23 3C0D                <1>     cmp al, CR
  2640 00003B25 7405                <1>     je .exitCp
  2641 00003B27 AA                  <1>     stosb
  2642 00003B28 FFC9                <1>     dec ecx
  2643 00003B2A 75F6                <1>     jnz .exitNameCp
  2644                              <1> .exitCp:
  2645 00003B2C 31C0                <1>     xor eax, eax
  2646 00003B2E 66AB                <1>     stosw   ;Store the final null word
  2647                              <1>     return
    13                              <2> %%_ret:
    14 00003B30 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2648                              <1> .delEnvVar:
  2649                              <1>     ;rsi -> Start of the envvar name in user buffer
  2650 00003B31 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2651 00003B34 E8F6090000          <1>     call searchForEnvVar    ;Look for the environment variable
  2652 00003B39 7205                <1>     jc .delEnvVarSkip
  2653 00003B3B E81D0A0000          <1>     call envFree    ;Free the env var at rsi
  2654                              <1> .delEnvVarSkip:
  2655 00003B40 F8                  <1>     clc             ;Clear CF if the var doesnt exist
  2656                              <1>     return
    13                              <2> %%_ret:
    14 00003B41 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2657                              <1> 
  2658                              <1> pathEdit:
  2659                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
  2660                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
  2661                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
  2662                              <1> ; end there. Error with too many arguments error!
  2663                              <1> ;If after the equals sign there is nothing, we just print the path!
  2664                              <1> ;Gotta process the command line ourselves first
  2665 00003B42 E88E090000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2666 00003B47 0F8481E0FFFF        <1>     jz badEnvSpaceError
  2667                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2668 00003B4D 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2669 00003B54 E8AD000000          <1>     call .skipPathDelimiters
  2670 00003B59 3C0D                <1>     cmp al, CR
  2671 00003B5B 7466                <1>     je .printPath
  2672                              <1> ;Else use the set command to setup the path in the searchSpec.
  2673 00003B5D 56                  <1>     push rsi    ;Save the first char of the command line string
  2674 00003B5E 488D3508D5FFFF      <1>     lea rsi, pathEVar
  2675 00003B65 488D3D78C9FFFF      <1>     lea rdi, searchSpec
  2676 00003B6C E828060000          <1>     call strcpy
  2677 00003B71 48FFCF              <1>     dec rdi     ;Point to the terminating null
  2678 00003B74 5E                  <1>     pop rsi     ;Get back the first char of the pathstring
  2679 00003B75 31C9                <1>     xor ecx, ecx    ;Make a count of chars
  2680                              <1> .cpLp:
  2681 00003B77 AC                  <1>     lodsb
  2682 00003B78 3C0D                <1>     cmp al, CR
  2683 00003B7A 7411                <1>     je .cpLpExit
  2684 00003B7C E891000000          <1>     call .isALPathDelimiter ;Any path delims now are exit conditions!
  2685 00003B81 740A                <1>     je .cpLpExit
  2686 00003B83 E834060000          <1>     call ucChar ;Uppercase the char
  2687 00003B88 AA                  <1>     stosb       ;Store it
  2688 00003B89 FFC1                <1>     inc ecx     ;Inc the count, CR not inclusive!
  2689 00003B8B EBEA                <1>     jmp short .cpLp
  2690                              <1> .cpLpExit:
  2691                              <1>     ;Remove trailing semicolons
  2692 00003B8D 807FFF3B            <1>     cmp byte [rdi - 1], ";" ;Check back a char
  2693 00003B91 7507                <1>     jne .cpLpNoIntervene
  2694 00003B93 FFC9                <1>     dec ecx     ;Reduce the count by one
  2695 00003B95 48FFCF              <1>     dec rdi     ;Go back a char
  2696 00003B98 EBF3                <1>     jmp short .cpLpExit ;Keep removing
  2697                              <1> .cpLpNoIntervene:
  2698 00003B9A B00D                <1>     mov al, CR  ;Now we store the terminator!
  2699 00003B9C AA                  <1>     stosb       ;Store it!
  2700 00003B9D 81C105000000        <1>     add ecx, 5  ;PATH= is 5 chars
  2701 00003BA3 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count
  2702 00003BAA FFC1                <1>     inc ecx     ;Add the CR for copying over
  2703 00003BAC 488D3531C9FFFF      <1>     lea rsi, searchSpec
  2704 00003BB3 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2705 00003BBA 57                  <1>     push rdi
  2706 00003BBB F3A4                <1>     rep movsb
  2707 00003BBD 5E                  <1>     pop rsi         ;Get the ptr to the cmdline in rsi
  2708 00003BBE E9BEFEFFFF          <1>     jmp set.altEp   ;We've now set the string up, lets go!
  2709                              <1> .printPath:
  2710 00003BC3 488D3DA3D4FFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
  2711 00003BCA E860090000          <1>     call searchForEnvVar    ;Returns ptr to env var in rsi
  2712 00003BCF 7221                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
  2713 00003BD1 4889F7              <1>     mov rdi, rsi        
  2714 00003BD4 E8D9050000          <1>     call strlen         ;Get the length of the path in rdi
  2715 00003BD9 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
  2716 00003BDF 7411                <1>     je .noPathPrnt      ;Print no path!
  2717 00003BE1 FFC9                <1>     dec ecx             ;Drop the terminating null from the count
  2718 00003BE3 4889FA              <1>     mov rdx, rdi        ;Set path ptr for printing
  2719 00003BE6 BB01000000          <1>     mov ebx, 1          ;STDOUT
  2720 00003BEB B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
  2721 00003BF0 EB0C                <1>     jmp short .pathExit
  2722                              <1> .noPathPrnt:
  2723 00003BF2 488D152DD0FFFF      <1>     lea rdx, noPath
  2724 00003BF9 B800090000          <1>     mov eax, 0900h
  2725                              <1> .pathExit:
  2726 00003BFE CD21                <1>     int 21h
  2727 00003C00 E892030000          <1>     call printCRLF      ;Print a crlf at the end
  2728                              <1>     return
    13                              <2> %%_ret:
    14 00003C05 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2729                              <1> .skipPathDelimiters:
  2730                              <1> ;Input: rsi -> Start of string to parse
  2731                              <1> ;Output: rsi -> First non-delimiter char of string
  2732                              <1> ;        al = First non delim char
  2733 00003C06 AC                  <1>     lodsb
  2734 00003C07 E806000000          <1>     call .isALPathDelimiter
  2735 00003C0C 74F8                <1>     je .skipPathDelimiters
  2736 00003C0E 48FFCE              <1>     dec rsi
  2737                              <1>     return
    13                              <2> %%_ret:
    14 00003C11 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2738                              <1> .isALPathDelimiter:
  2739                              <1> ;Same as before without semicolon
  2740 00003C12 3C20                <1>     cmp al, SPC
  2741                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003C14 74(11)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2742 00003C16 3C09                <1>     cmp al, TAB
  2743                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003C18 74(11)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2744 00003C1A 3C2C                <1>     cmp al, ","
  2745                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003C1C 74(11)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2746 00003C1E 3C3D                <1>     cmp al, "="
  2747                              <1>     return
    13                              <2> %%_ret:
    14 00003C20 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2748                              <1> 
  2749                              <1> prompt:
  2750 00003C21 E8AF080000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2751 00003C26 0F84A2DFFFFF        <1>     jz badEnvSpaceError
  2752                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2753 00003C2C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2754 00003C33 E8A5050000          <1>     call skipDelimiters ;Points rsi to the first non-delimiter char
  2755 00003C38 803E0D              <1>     cmp byte [rsi], CR  ;Is the first non-delim a CR?
  2756 00003C3B 742C                <1>     je .reset   ;Reset if so
  2757 00003C3D 56                  <1>     push rsi    ;Save ptr to the start of the user typed line
  2758 00003C3E 488D35CBD2FFFF      <1>     lea rsi, promptEVar ;Copy the PROMPT= prefix to searchspec
  2759 00003C45 488D3D98C8FFFF      <1>     lea rdi, searchSpec
  2760 00003C4C B907000000          <1>     mov ecx, 7  ;Copy without <CR>
  2761 00003C51 F3A4                <1>     rep movsb
  2762 00003C53 5E                  <1>     pop rsi ;Get back ptr to the user typed line
  2763 00003C54 31C9                <1>     xor ecx, ecx    ;Get char count
  2764                              <1> .cp:    ;Now copy the user string over
  2765 00003C56 AC                  <1>     lodsb
  2766 00003C57 AA                  <1>     stosb 
  2767 00003C58 3C0D                <1>     cmp al, CR
  2768 00003C5A 7404                <1>     je .cpOk
  2769 00003C5C FFC1                <1>     inc ecx ;Increment count if non CR char copied over
  2770 00003C5E EBF6                <1>     jmp short .cp
  2771                              <1> .cpOk:
  2772 00003C60 488D357DC8FFFF      <1>     lea rsi, searchSpec ;Source the string from here
  2773 00003C67 EB09                <1>     jmp short .goSet    ;Got the CR-less count
  2774                              <1> .reset:
  2775                              <1> ;Delete the environment variable!
  2776 00003C69 488D35A0D2FFFF      <1>     lea rsi, promptEVar 
  2777 00003C70 31C9                <1>     xor ecx, ecx    ;No chars to write to the envstring
  2778                              <1> .goSet:
  2779 00003C72 81C107000000        <1>     add ecx, 7  ;Add the chars for the prompt= string too
  2780 00003C78 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl 
  2781 00003C7F FFC1                <1>     inc ecx     ;Include CR in copy
  2782 00003C81 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2783 00003C88 57                  <1>     push rdi
  2784 00003C89 F3A4                <1>     rep movsb
  2785 00003C8B 5E                  <1>     pop rsi
  2786 00003C8C E9F0FDFFFF          <1>     jmp set.altEp
  2787                              <1> 
  2788                              <1> echo:
  2789 00003C91 F60514C4FFFFFF      <1>     test byte [arg1Flg], -1 ;If no argument, display if on or off
  2790 00003C98 752A                <1>     jnz .argGiven
  2791 00003C9A 488D1576D0FFFF      <1>     lea rdx, echoIs
  2792 00003CA1 E8F8020000          <1>     call printString
  2793 00003CA6 488D1550D0FFFF      <1>     lea rdx, onMes
  2794 00003CAD 488D0D43D0FFFF      <1>     lea rcx, offMes
  2795 00003CB4 F605E3C3FFFFFF      <1>     test byte [echoFlg], -1
  2796 00003CBB 480F44D1            <1>     cmovz rdx, rcx
  2797 00003CBF E9DA020000          <1>     jmp printString
  2798                              <1> .argGiven:
  2799 00003CC4 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2800 00003CCB 0FB605DBC3FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the offset
  2801 00003CD2 4801C6              <1>     add rsi, rax
  2802 00003CD5 AC                  <1>     lodsb   ;Get this char
  2803 00003CD6 48FFCE              <1>     dec rsi ;And go back to the start of the string
  2804 00003CD9 E8DE040000          <1>     call ucChar
  2805 00003CDE 3C4F                <1>     cmp al, "O" ;Was it an O? If not, direct copy
  2806 00003CE0 755A                <1>     jne .directEcho
  2807 00003CE2 8A4601              <1>     mov al, byte [rsi + 1]  ;Get the next char
  2808 00003CE5 E8D2040000          <1>     call ucChar
  2809 00003CEA 3C4E                <1>     cmp al, "N" ;If its N, check its the last char on the string
  2810 00003CEC 751B                <1>     jne .checkOff
  2811 00003CEE 56                  <1>     push rsi
  2812 00003CEF 4881C602000000      <1>     add rsi, 2  ;Go past on string
  2813 00003CF6 E8E2040000          <1>     call skipDelimiters
  2814 00003CFB 803E0D              <1>     cmp byte [rsi], CR
  2815 00003CFE 5E                  <1>     pop rsi
  2816 00003CFF 753B                <1>     jne .directEcho ;If its not, just echo the string
  2817 00003D01 C60596C3FFFFFF      <1>     mov byte [echoFlg], -1
  2818                              <1>     return
    13                              <2> %%_ret:
    14 00003D08 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2819                              <1> .checkOff:
  2820 00003D09 8A4601              <1>     mov al, byte [rsi + 1]  ;Get first char past O
  2821 00003D0C E8AB040000          <1>     call ucChar
  2822 00003D11 3C46                <1>     cmp al, "F" ;Is it an F?
  2823 00003D13 7527                <1>     jne .directEcho ;No, just direct echo
  2824 00003D15 8A4602              <1>     mov al, byte [rsi + 2]
  2825 00003D18 E89F040000          <1>     call ucChar
  2826 00003D1D 3C46                <1>     cmp al, "F"
  2827 00003D1F 751B                <1>     jne .directEcho
  2828 00003D21 56                  <1>     push rsi
  2829 00003D22 4881C603000000      <1>     add rsi, 3
  2830 00003D29 E8AF040000          <1>     call skipDelimiters
  2831 00003D2E 803E0D              <1>     cmp byte [rsi], CR
  2832 00003D31 5E                  <1>     pop rsi
  2833 00003D32 7508                <1>     jne .directEcho
  2834 00003D34 C60563C3FFFF00      <1>     mov byte [echoFlg], 0
  2835                              <1>     return
    13                              <2> %%_ret:
    14 00003D3B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2836                              <1> .directEcho: 
  2837 00003D3C AC                  <1>     lodsb
  2838 00003D3D 3C0D                <1>     cmp al, CR
  2839 00003D3F 0F8452020000        <1>     je printCRLF    ;Prints a crlf and returns
  2840 00003D45 88C2                <1>     mov dl, al
  2841 00003D47 E8C2020000          <1>     call outChar
  2842 00003D4C EBEE                <1>     jmp short .directEcho
    19                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printDate:
     4                              <1> ;Input: eax = Packed Date
     5                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
     6                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
     7                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
     8                              <1> ;       ebx = 0 => Print two digit year
     9                              <1> ;       ebx = 1 => Print four digit year
    10 00003D4E 53                  <1>     push rbx
    11 00003D4F 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    12 00003D51 803DDCC2FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    13 00003D58 7240                <1>     jb .usDate
    14 00003D5A 777C                <1>     ja .jpnDate
    15                              <1> ;European: DD/MM/YY
    16 00003D5C 251F000000          <1>     and eax, 1Fh    ;Save day bits
    17 00003D61 E8B0000000          <1>     call .printFirst
    18 00003D66 8A15D3C2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    19 00003D6C B402                <1>     mov ah, 02h
    20 00003D6E CD21                <1>     int 21h
    21                              <1> 
    22 00003D70 89C8                <1>     mov eax, ecx
    23 00003D72 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    24 00003D77 C1E805              <1>     shr eax, 5
    25 00003D7A E8B3000000          <1>     call .printSecond
    26                              <1> 
    27 00003D7F 8A15BAC2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    28 00003D85 B402                <1>     mov ah, 02h
    29 00003D87 CD21                <1>     int 21h
    30                              <1> 
    31 00003D89 89C8                <1>     mov eax, ecx
    32 00003D8B 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    33 00003D90 C1E809              <1>     shr eax, 9
    34 00003D93 5B                  <1>     pop rbx ;Get the year signature back
    35 00003D94 E8A9000000          <1>     call .printYear
    36                              <1>     return
    13                              <2> %%_ret:
    14 00003D99 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                              <1> .usDate:
    38                              <1> ;US: MM/DD/YY
    39 00003D9A 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    40 00003D9F C1E805              <1>     shr eax, 5
    41 00003DA2 E86F000000          <1>     call .printFirst
    42                              <1> 
    43 00003DA7 8A1592C2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    44 00003DAD B402                <1>     mov ah, 02h
    45 00003DAF CD21                <1>     int 21h
    46                              <1> 
    47 00003DB1 89C8                <1>     mov eax, ecx
    48 00003DB3 251F000000          <1>     and eax, 1Fh    ;Save day bits
    49 00003DB8 E875000000          <1>     call .printSecond
    50                              <1> 
    51 00003DBD 8A157CC2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 00003DC3 B402                <1>     mov ah, 02h
    53 00003DC5 CD21                <1>     int 21h
    54                              <1> 
    55 00003DC7 89C8                <1>     mov eax, ecx
    56 00003DC9 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 00003DCE C1E809              <1>     shr eax, 9
    58 00003DD1 5B                  <1>     pop rbx ;Get the year signature back
    59 00003DD2 E86B000000          <1>     call .printYear
    60                              <1>     return
    13                              <2> %%_ret:
    14 00003DD7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> .jpnDate:
    62                              <1> ;Japan: YY/MM/DD
    63 00003DD8 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 00003DDD C1E809              <1>     shr eax, 9
    65 00003DE0 5B                  <1>     pop rbx ;Get the year signature back
    66 00003DE1 E85C000000          <1>     call .printYear
    67                              <1> 
    68 00003DE6 8A1553C2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    69 00003DEC B402                <1>     mov ah, 02h
    70 00003DEE CD21                <1>     int 21h
    71                              <1> 
    72 00003DF0 89C8                <1>     mov eax, ecx
    73 00003DF2 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    74 00003DF7 C1E805              <1>     shr eax, 5
    75 00003DFA E833000000          <1>     call .printSecond
    76                              <1> 
    77 00003DFF 8A153AC2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    78 00003E05 B402                <1>     mov ah, 02h
    79 00003E07 CD21                <1>     int 21h
    80                              <1> 
    81 00003E09 89C8                <1>     mov eax, ecx
    82 00003E0B 251F000000          <1>     and eax, 1Fh    ;Save day bits
    83 00003E10 E81D000000          <1>     call .printSecond
    84                              <1>     return
    13                              <2> %%_ret:
    14 00003E15 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> ;Each of these require eax setup correctly
    87                              <1> .printFirst:
    88 00003E16 51                  <1>     push rcx
    89 00003E17 E8DF050000          <1>     call getDecimalWord
    90 00003E1C 84ED                <1>     test ch, ch ;Do we have an upper digit?
    91 00003E1E 7504                <1>     jnz .skipSpace
    92 00003E20 88CD                <1>     mov ch, cl
    93 00003E22 B120                <1>     mov cl, " "
    94                              <1> .skipSpace:
    95 00003E24 88CA                <1>     mov dl, cl
    96 00003E26 B402                <1>     mov ah, 02h
    97 00003E28 CD21                <1>     int 21h
    98 00003E2A 88EA                <1>     mov dl, ch
    99 00003E2C B402                <1>     mov ah, 02h
   100 00003E2E CD21                <1>     int 21h
   101 00003E30 59                  <1>     pop rcx
   102                              <1>     return
    13                              <2> %%_ret:
    14 00003E31 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .printSecond:
   104 00003E32 51                  <1>     push rcx
   105 00003E33 E8C3050000          <1>     call getDecimalWord
   106 00003E38 84ED                <1>     test ch, ch ;Do we have an upper digit?
   107 00003E3A 75E8                <1>     jnz .skipSpace
   108 00003E3C 88CD                <1>     mov ch, cl
   109 00003E3E B130                <1>     mov cl, "0"
   110 00003E40 EBE2                <1>     jmp short .skipSpace
   111                              <1> .printYear:
   112 00003E42 05BC070000          <1>     add eax, 1980
   113 00003E47 51                  <1>     push rcx
   114 00003E48 53                  <1>     push rbx
   115 00003E49 E8AD050000          <1>     call getDecimalWord ;Get unpacked in rcx
   116 00003E4E 5B                  <1>     pop rbx
   117 00003E4F 84DB                <1>     test bl, bl
   118 00003E51 740C                <1>     jz .twoDigitYear
   119 00003E53 88CA                <1>     mov dl, cl  ;Print the first digit
   120 00003E55 B402                <1>     mov ah, 02h
   121 00003E57 CD21                <1>     int 21h
   122 00003E59 88EA                <1>     mov dl, ch  ;Print the second digit
   123 00003E5B B402                <1>     mov ah, 02h
   124 00003E5D CD21                <1>     int 21h
   125                              <1> .twoDigitYear:
   126 00003E5F C1E910              <1>     shr ecx, 10h    ;Get high word low
   127 00003E62 88CA                <1>     mov dl, cl  ;Print the upper digit
   128 00003E64 B402                <1>     mov ah, 02h
   129 00003E66 CD21                <1>     int 21h
   130 00003E68 88EA                <1>     mov dl, ch  ;Print the lower digit
   131 00003E6A B402                <1>     mov ah, 02h
   132 00003E6C CD21                <1>     int 21h
   133 00003E6E 59                  <1>     pop rcx
   134                              <1>     return
    13                              <2> %%_ret:
    14 00003E6F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> 
   137                              <1> printTime:
   138                              <1> ;Input: eax = Packed Time
   139                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   140                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   141 00003E70 89C1                <1>     mov ecx, eax
   142 00003E72 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   143 00003E77 C1E80B              <1>     shr eax, 11
   144 00003E7A 803DC4C1FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   145 00003E81 750B                <1>     jne .ampm
   146 00003E83 E85A000000          <1>     call .printHours
   147 00003E88 E831000000          <1>     call .printMinutes
   148                              <1>     return
    13                              <2> %%_ret:
    14 00003E8D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> .ampm:
   150 00003E8E 3D0C000000          <1>     cmp eax, 12
   151 00003E93 7713                <1>     ja .pm
   152 00003E95 7416                <1>     je .pm2
   153 00003E97 E846000000          <1>     call .printHours
   154 00003E9C E81D000000          <1>     call .printMinutes
   155 00003EA1 B261                <1>     mov dl, "a"
   156 00003EA3 B402                <1>     mov ah, 02h
   157 00003EA5 CD21                <1>     int 21h
   158                              <1>     return
    13                              <2> %%_ret:
    14 00003EA7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> .pm:
   160 00003EA8 2D0C000000          <1>     sub eax, 12
   161                              <1> .pm2:
   162 00003EAD E830000000          <1>     call .printHours
   163 00003EB2 E807000000          <1>     call .printMinutes
   164 00003EB7 B270                <1>     mov dl, "p"
   165 00003EB9 B402                <1>     mov ah, 02h
   166 00003EBB CD21                <1>     int 21h
   167                              <1>     return
    13                              <2> %%_ret:
    14 00003EBD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   168                              <1> .printMinutes:
   169 00003EBE 8A157DC1FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   170 00003EC4 B402                <1>     mov ah, 02h
   171 00003EC6 CD21                <1>     int 21h
   172                              <1> 
   173 00003EC8 89C8                <1>     mov eax, ecx
   174 00003ECA 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   175 00003ECF C1E805              <1>     shr eax, 5
   176                              <1> .printMinutesAlt:
   177 00003ED2 51                  <1>     push rcx
   178 00003ED3 E823050000          <1>     call getDecimalWord
   179 00003ED8 84ED                <1>     test ch, ch ;Do we have an upper digit?
   180 00003EDA 7514                <1>     jnz .skipSpace
   181 00003EDC 88CD                <1>     mov ch, cl
   182 00003EDE B130                <1>     mov cl, "0"
   183 00003EE0 EB0E                <1>     jmp short .skipSpace
   184                              <1> .printHours:
   185 00003EE2 51                  <1>     push rcx
   186 00003EE3 E813050000          <1>     call getDecimalWord
   187 00003EE8 84ED                <1>     test ch, ch ;Do we have an upper digit?
   188 00003EEA 7504                <1>     jnz .skipSpace
   189 00003EEC 88CD                <1>     mov ch, cl
   190 00003EEE B120                <1>     mov cl, " "
   191                              <1> .skipSpace:
   192 00003EF0 88CA                <1>     mov dl, cl
   193 00003EF2 B402                <1>     mov ah, 02h
   194 00003EF4 CD21                <1>     int 21h
   195 00003EF6 88EA                <1>     mov dl, ch
   196 00003EF8 B402                <1>     mov ah, 02h
   197 00003EFA CD21                <1>     int 21h
   198 00003EFC 59                  <1>     pop rcx
   199                              <1>     return
    13                              <2> %%_ret:
    14 00003EFD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printPrompt:
   202 00003EFE F60599C1FFFFFF      <1>     test byte [echoFlg], -1 ;If echo off, no prompt!
   203                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003F05 74(FD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 00003F07 488D3D02D0FFFF      <1>     lea rdi, promptEVar   ;Find the prompt var
   205 00003F0E E81C060000          <1>     call searchForEnvVar
   206 00003F13 730B                <1>     jnc .validPrompt
   207                              <1>     ;Here we print the default prompt
   208 00003F15 E8F9000000          <1>     call putCWDInPrompt
   209 00003F1A E8C5000000          <1>     call putGTinPrompt
   210                              <1>     return
    13                              <2> %%_ret:
    14 00003F1F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> .validPrompt:
   212                              <1> ;rsi points to the prompt
   213 00003F20 4881C607000000      <1>     add rsi, 7  ;Go past the prompt= string
   214                              <1> .promptLp:
   215 00003F27 AC                  <1>     lodsb   ;Get the char
   216 00003F28 84C0                <1>     test al, al
   217                              <1>     retz    ;Return when al is 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003F2A 74(1F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   218 00003F2C 3C24                <1>     cmp al, "$"
   219 00003F2E 7409                <1>     je .escapeChar
   220 00003F30 88C2                <1>     mov dl, al
   221 00003F32 E8D7000000          <1>     call outChar    ;Prints the char in dl
   222 00003F37 EBEE                <1>     jmp short .promptLp
   223                              <1> .escapeChar:
   224 00003F39 AC                  <1>     lodsb       ;Get the next char now that we are escaping
   225 00003F3A E87D020000          <1>     call ucChar ;Uppercase this char in al
   226 00003F3F 488D1D2A000000      <1>     lea rbx, .pTbl
   227 00003F46 B90D000000          <1>     mov ecx, pTblL / 3  ;3 bytes per entry
   228                              <1> .escapeLp:
   229 00003F4B 3803                <1>     cmp byte [rbx], al  ;Are we at the right entry?
   230 00003F4D 740D                <1>     je .escapeFnd
   231 00003F4F 4881C303000000      <1>     add rbx, 3  ;Go to next entry
   232 00003F56 FFC9                <1>     dec ecx
   233 00003F58 75F1                <1>     jnz .escapeLp
   234 00003F5A EBCB                <1>     jmp short .promptLp  ;Output nothing if invalid
   235                              <1> .escapeFnd:
   236 00003F5C 488D050D000000      <1>     lea rax, .pTbl              ;Get the table addr
   237 00003F63 0FB75B01            <1>     movzx ebx, word [rbx + 1]   ;Get the word offset from the table
   238 00003F67 4801D8              <1>     add rax, rbx                ;Add these
   239 00003F6A 56                  <1>     push rsi    ;Ensure rsi remains unchanged
   240 00003F6B FFD0                <1>     call rax    ;Call indirectly the function to output the chars
   241 00003F6D 5E                  <1>     pop rsi
   242 00003F6E EBB7                <1>     jmp short .promptLp
   243                              <1> 
   244                              <1> ;Easy table to use, 13 entries, 3 bytes per entry
   245                              <1> .pTbl:
   246 00003F70 42                  <1>     db "B", 
   247 00003F71 7000                <1>     dw putPipeInPrompt - .pTbl     ;Pipe char
   248 00003F73 44                  <1>     db "D", 
   249 00003F74 5D01                <1>     dw printFmtDate - .pTbl        ;Current date
   250 00003F76 45                  <1>     db "E", 
   251 00003F77 6400                <1>     dw putEscInPrompt - .pTbl      ;ANSI Escape char
   252 00003F79 47                  <1>     db "G", 
   253 00003F7A 7400                <1>     dw putGTinPrompt - .pTbl       ;Greater than char
   254 00003F7C 48                  <1>     db "H", 
   255 00003F7D 7C00                <1>     dw putBSPinPrompt - .pTbl      ;Backspace
   256 00003F7F 4C                  <1>     db "L", 
   257 00003F80 7800                <1>     dw putLTinPrompt - .pTbl       ;Less than char
   258 00003F82 4E                  <1>     db "N", 
   259 00003F83 9500                <1>     dw putDriveInPrompt - .pTbl    ;Current drive letter
   260 00003F85 50                  <1>     db "P", 
   261 00003F86 A300                <1>     dw putCWDInPrompt - .pTbl      ;Current drive and path
   262 00003F88 51                  <1>     db "Q", 
   263 00003F89 6C00                <1>     dw putEquInPrompt - .pTbl      ;Equals char
   264 00003F8B 54                  <1>     db "T", 
   265 00003F8C F400                <1>     dw printFmtTime - .pTbl        ;Current time in hh:mm:ss.hh fmt
   266 00003F8E 56                  <1>     db "V", 
   267 00003F8F 3600                <1>     dw putVersionInPrompt - .pTbl  ;DOS version number
   268 00003F91 5F                  <1>     db "_", 
   269 00003F92 2700                <1>     dw printCRLF - .pTbl           ;CRLF pair
   270 00003F94 24                  <1>     db "$", 
   271 00003F95 6800                <1>     dw putMoneyInPrompt - .pTbl    ;Dollar sign
   272                              <1> pTblL equ $ - .pTbl
   273                              <1> 
   274                              <1> printCRLF:
   275 00003F97 488D1549C9FFFF      <1>     lea rdx, crlf
   276                              <1> printString:
   277 00003F9E B800090000          <1>     mov eax, 0900h  ;Print string
   278 00003FA3 CD21                <1>     int 21h
   279                              <1>     return
    13                              <2> %%_ret:
    14 00003FA5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   280                              <1> 
   281                              <1> putVersionInPrompt:
   282 00003FA6 488D15CACBFFFF      <1>     lea rdx, dosVer
   283 00003FAD B409                <1>     mov ah, 09h ;Print String
   284 00003FAF CD21                <1>     int 21h
   285 00003FB1 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   286 00003FB3 CD21                <1>     int 21h
   287 00003FB5 50                  <1>     push rax    ;Save minor version
   288 00003FB6 E884010000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   289 00003FBB E89C010000          <1>     call printPackedBCD ;Print al
   290 00003FC0 B22E                <1>     mov dl, "."
   291 00003FC2 B402                <1>     mov ah, 02h
   292 00003FC4 CD21                <1>     int 21h
   293 00003FC6 58                  <1>     pop rax
   294 00003FC7 88E0                <1>     mov al, ah  ;Get the minor version low
   295 00003FC9 E871010000          <1>     call hexToBCD
   296 00003FCE E889010000          <1>     call printPackedBCD
   297                              <1>     return
    13                              <2> %%_ret:
    14 00003FD3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   298                              <1> putEscInPrompt:
   299 00003FD4 B21B                <1>     mov dl, ESC
   300 00003FD6 EB36                <1>     jmp short outChar
   301                              <1> 
   302                              <1> putMoneyInPrompt:
   303 00003FD8 B224                <1>     mov dl, "$"
   304 00003FDA EB32                <1>     jmp short outChar
   305                              <1> 
   306                              <1> putEquInPrompt:
   307 00003FDC B23D                <1>     mov dl, "="
   308 00003FDE EB2E                <1>     jmp short outChar
   309                              <1> 
   310                              <1> putPipeInPrompt:
   311 00003FE0 B27C                <1>     mov dl, "|"
   312 00003FE2 EB2A                <1>     jmp short outChar
   313                              <1> 
   314                              <1> putGTinPrompt:
   315 00003FE4 B23E                <1>     mov dl, ">"
   316 00003FE6 EB26                <1>     jmp short outChar
   317                              <1> 
   318                              <1> putLTinPrompt:
   319 00003FE8 B23C                <1>     mov dl, "<"
   320 00003FEA EB22                <1>     jmp short outChar
   321                              <1> 
   322                              <1> putBSPinPrompt:
   323 00003FEC 488D157FCDFFFF      <1>     lea rdx, backSpace
   324 00003FF3 B903000000          <1>     mov ecx, 3
   325 00003FF8 BB01000000          <1>     mov ebx, 1
   326 00003FFD B800400000          <1>     mov eax, 4000h  ;Output the backspace!
   327 00004002 CD21                <1>     int 21h
   328                              <1>     return
    13                              <2> %%_ret:
    14 00004004 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   329                              <1> 
   330                              <1> putDriveInPrompt:
   331 00004005 E88A010000          <1>     call getCurrentDrive
   332 0000400A 0441                <1>     add al, "A" ;Convert to letter
   333 0000400C 88C2                <1>     mov dl, al
   334                              <1> outChar:
   335 0000400E B402                <1>     mov ah, 02h ;Echo to STDOUT
   336 00004010 CD21                <1>     int 21h
   337                              <1>     return
    13                              <2> %%_ret:
    14 00004012 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   338                              <1> putCWDInPrompt:
   339 00004013 E87C010000          <1>     call getCurrentDrive
   340 00004018 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   341 0000401A FEC2                <1>     inc dl
   342 0000401C 0441                <1>     add al, "A" ;Convert to letter
   343 0000401E B43A                <1>     mov ah, ":"
   344 00004020 488D3D33C0FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   345 00004027 66AB                <1>     stosw   ;Store X:, rdi+=2
   346 00004029 8A05FABFFFFF        <1>     mov al, byte [pathSep]
   347 0000402F AA                  <1>     stosb   ;Store pathSep, inc rdi
   348 00004030 B447                <1>     mov ah, 47h ;Get Current Working Directory
   349 00004032 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   350 00004035 CD21                <1>     int 21h
   351 00004037 721F                <1>     jc .badDrive
   352 00004039 E874010000          <1>     call strlen
   353 0000403E 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   354                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   355 00004044 B800400000          <1>     mov eax, 4000h ;Write to handle
   356 00004049 BB01000000          <1>     mov ebx, 1  ;STDOUT
   357 0000404E 488D1505C0FFFF      <1>     lea rdx, currDirStr
   358 00004055 CD21                <1>     int 21h
   359                              <1>     return
    13                              <2> %%_ret:
    14 00004057 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> .badDrive:
   361                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   362 00004058 488D15E0CBFFFF      <1>     lea rdx, badDrvMsg
   363 0000405F E93AFFFFFF          <1>     jmp printString
   364                              <1> printFmtTime:
   365                              <1> ;Outputs the formatted time
   366 00004064 E847000000          <1>     call getTime
   367 00004069 0FB6C5              <1>     movzx eax, ch
   368 0000406C E871FEFFFF          <1>     call printTime.printHours
   369 00004071 8A15CABFFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   370 00004077 B402                <1>     mov ah, 02h
   371 00004079 CD21                <1>     int 21h
   372 0000407B 0FB6052BC6FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   373 00004082 E84BFEFFFF          <1>     call printTime.printMinutesAlt
   374 00004087 8A15B4BFFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   375 0000408D B402                <1>     mov ah, 02h
   376 0000408F CD21                <1>     int 21h
   377 00004091 0FB60518C6FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   378 00004098 E835FEFFFF          <1>     call printTime.printMinutesAlt
   379 0000409D B22E                <1>     mov dl, "."
   380 0000409F B402                <1>     mov ah, 02h
   381 000040A1 CD21                <1>     int 21h
   382 000040A3 0FB60505C6FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   383 000040AA E823FEFFFF          <1>     call printTime.printMinutesAlt
   384                              <1>     return
    13                              <2> %%_ret:
    14 000040AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   385                              <1> getTime:
   386 000040B0 B42C                <1>     mov ah, 2Ch ;DOS get time
   387 000040B2 CD21                <1>     int 21h
   388                              <1>     ;CH = hour (0-23)
   389                              <1> 	;CL = minutes (0-59)
   390                              <1> 	;DH = seconds (0-59)
   391                              <1> 	;DL = hundredths (0-99)
   392 000040B4 880DF3C5FFFF        <1>     mov byte [td1], cl
   393 000040BA 882DEEC5FFFF        <1>     mov byte [td2], ch
   394 000040C0 8815E9C5FFFF        <1>     mov byte [td3], dl
   395 000040C6 8835E4C5FFFF        <1>     mov byte [td4], dh
   396                              <1>     return
    13                              <2> %%_ret:
    14 000040CC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   397                              <1> 
   398                              <1> printFmtDate:
   399                              <1> ;Outputs the formatted date
   400 000040CD B8002A0000          <1>     mov eax, 2A00h ;DOS get date
   401 000040D2 CD21                <1>     int 21h
   402                              <1> 	;AL = day of the week (0=Sunday)
   403                              <1> 	;CX = year (1980-2099)
   404                              <1> 	;DH = month (1-12)
   405                              <1> 	;DL = day (1-31)
   406 000040D4 6681E9BC07          <1>     sub cx, 1980    ;Subtract 1980 from cx
   407 000040D9 66890DCDC5FFFF      <1>     mov word [td1], cx
   408 000040E0 8815C9C5FFFF        <1>     mov byte [td3], dl
   409 000040E6 8835C4C5FFFF        <1>     mov byte [td4], dh
   410 000040EC 0FB6C0              <1>     movzx eax, al
   411 000040EF 89C3                <1>     mov ebx, eax
   412 000040F1 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   413 000040F3 01D8                <1>     add eax, ebx ;Make it 3 times 
   414 000040F5 488D15C5C9FFFF      <1>     lea rdx, dayName
   415 000040FC 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   416 00004100 B903000000          <1>     mov ecx, 3  ;Print three chars
   417 00004105 BB01000000          <1>     mov ebx, 1  ;STDOUT
   418 0000410A B440                <1>     mov ah, 40h ;Write to handle
   419 0000410C CD21                <1>     int 21h
   420 0000410E B220                <1>     mov dl, " "
   421 00004110 E8F9FEFFFF          <1>     call outChar
   422                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   423                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   424                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   425 00004115 0FB70591C5FFFF      <1>     movzx eax, word [td1]   ;Get this word
   426 0000411C C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   427 0000411F 0FB61D8AC5FFFF      <1>     movzx ebx, byte [td4]
   428 00004126 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   429 00004129 09D8                <1>     or eax, ebx ;Add this date to eax
   430 0000412B 0FB61D7DC5FFFF      <1>     movzx ebx, byte [td3]
   431 00004132 09D8                <1>     or eax, ebx
   432 00004134 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   433 00004139 E810FCFFFF          <1>     call printDate
   434                              <1>     return
    13                              <2> %%_ret:
    14 0000413E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   435                              <1> 
   436                              <1> 
   437                              <1> hexToBCD:
   438                              <1> ;Converts a Hex byte into two BCD digits
   439                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   440 0000413F 51                  <1>     push rcx
   441 00004140 0FB6C0              <1>     movzx eax, al   ;Zero extend
   442 00004143 31C9                <1>     xor ecx, ecx
   443                              <1> .htb0:
   444 00004145 3D0A000000          <1>     cmp eax, 10
   445 0000414A 7209                <1>     jb .htb1
   446 0000414C 2D0A000000          <1>     sub eax, 10
   447 00004151 FFC1                <1>     inc ecx
   448 00004153 EBF0                <1>     jmp short .htb0
   449                              <1> .htb1:
   450 00004155 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   451 00004158 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   452 0000415A 59                  <1>     pop rcx
   453 0000415B C3                  <1>     ret
   454                              <1> 
   455                              <1> printPackedBCD:
   456                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   457                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   458                              <1> ;Preserves all registers
   459 0000415C 50                  <1>     push rax
   460 0000415D 52                  <1>     push rdx
   461 0000415E 88C4                <1>     mov ah, al
   462 00004160 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   463 00004162 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   464 00004165 7508                <1>     jnz .upperNybble
   465 00004167 B220                <1>     mov dl, " "
   466 00004169 B402                <1>     mov ah, 02h
   467 0000416B CD21                <1>     int 21h
   468 0000416D EB0E                <1>     jmp short .lowerNybble
   469                              <1> .upperNybble:
   470 0000416F 50                  <1>     push rax
   471 00004170 C0EC04              <1>     shr ah, 4
   472 00004173 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   473 00004176 88E2                <1>     mov dl, ah
   474 00004178 B402                <1>     mov ah, 02h ;Print DL
   475 0000417A CD21                <1>     int 21h
   476 0000417C 58                  <1>     pop rax
   477                              <1> .lowerNybble:
   478 0000417D 0430                <1>     add al, "0"
   479 0000417F 88C2                <1>     mov dl, al
   480 00004181 B402                <1>     mov ah, 02h ;Print DL
   481 00004183 CD21                <1>     int 21h
   482 00004185 5A                  <1>     pop rdx
   483 00004186 58                  <1>     pop rax
   484                              <1>     return
    13                              <2> %%_ret:
    14 00004187 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   485                              <1> 
   486                              <1> setDrive:
   487                              <1> ;Input: dl = 0 based Drive number to set to
   488                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   489                              <1> ;AX trashed.
   490 00004188 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   491 0000418A CD21                <1>     int 21h 
   492 0000418C E803000000          <1>     call getCurrentDrive
   493 00004191 38D0                <1>     cmp al, dl  ;Is this the same drive?
   494                              <1>     return
    13                              <2> %%_ret:
    14 00004193 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   495                              <1> getCurrentDrive:
   496                              <1> ;Returns the 0 based current drive in al
   497 00004194 B419                <1>     mov ah, 19h
   498 00004196 CD21                <1>     int 21h
   499                              <1>     return
    13                              <2> %%_ret:
    14 00004198 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> 
   501                              <1> strcpy:
   502                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   503                              <1> ;rsi -> Source
   504                              <1> ;rdi -> Destination
   505 00004199 51                  <1>     push rcx
   506 0000419A 57                  <1>     push rdi
   507 0000419B 4889F7              <1>     mov rdi, rsi
   508 0000419E E80F000000          <1>     call strlen ;Get the length of the string in rsi
   509 000041A3 5F                  <1>     pop rdi
   510 000041A4 F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   511 000041A6 59                  <1>     pop rcx
   512                              <1>     return
    13                              <2> %%_ret:
    14 000041A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   513                              <1> 
   514                              <1> strcpy2:
   515                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   516                              <1> ;rsi -> Source
   517                              <1> ;rdi -> Destination
   518 000041A8 56                  <1>     push rsi
   519 000041A9 57                  <1>     push rdi
   520 000041AA E8EAFFFFFF          <1>     call strcpy 
   521 000041AF 5F                  <1>     pop rdi
   522 000041B0 5E                  <1>     pop rsi
   523                              <1>     return
    13                              <2> %%_ret:
    14 000041B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> strlen:
   526                              <1> ;Gets the length of a ASCIIZ string
   527                              <1> ;Input: rdi = Source buffer
   528                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   529 000041B2 50                  <1>     push rax
   530 000041B3 B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   531 000041B8 CD2F                <1>     int 2fh
   532 000041BA 58                  <1>     pop rax
   533                              <1>     return
    13                              <2> %%_ret:
    14 000041BB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   534                              <1> 
   535                              <1> ucChar:
   536                              <1> ;Input: al = Char to uppercase
   537                              <1> ;Output: al = Adjusted char 
   538 000041BC 53                  <1>     push rbx
   539 000041BD 4889E3              <1>     mov rbx, rsp    ;Save the stack ptr
   540 000041C0 50                  <1>     push rax    ;Push the char twice on the stack
   541 000041C1 50                  <1>     push rax
   542 000041C2 B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   543 000041C7 CD2F                <1>     int 2fh         ;Returns the processed char in al
   544 000041C9 4889DC              <1>     mov rsp, rbx    ;Return the stack ptr to where it was
   545 000041CC 5B                  <1>     pop rbx
   546                              <1>     return
    13                              <2> %%_ret:
    14 000041CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   547                              <1> 
   548                              <1> normalisePath:
   549                              <1> ;Uppercases chars and flips pathseps
   550                              <1> ;Input: rsi -> Path to normalise
   551 000041CE 50                  <1>     push rax
   552 000041CF 57                  <1>     push rdi
   553 000041D0 4889F7              <1>     mov rdi, rsi
   554 000041D3 B811120000          <1>     mov eax, 1211h
   555 000041D8 CD2F                <1>     int 2fh
   556 000041DA 5F                  <1>     pop rdi
   557 000041DB 58                  <1>     pop rax
   558                              <1>     return
    13                              <2> %%_ret:
    14 000041DC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   559                              <1> 
   560                              <1> skipDelimiters:
   561                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   562                              <1> ; command delimiters but a subset thereof. 
   563                              <1> ;These are the same across all codepages.
   564                              <1> ;Input: rsi must point to the start of the data string
   565                              <1> ;Output: rsi points to the first non-delimiter char
   566 000041DD 50                  <1>     push rax
   567                              <1> .l1:
   568 000041DE AC                  <1>     lodsb
   569 000041DF E807000000          <1>     call isALdelimiter
   570 000041E4 74F8                <1>     jz .l1
   571                              <1> .exit:
   572 000041E6 58                  <1>     pop rax
   573 000041E7 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   574                              <1>     return
    13                              <2> %%_ret:
    14 000041EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   575                              <1> 
   576                              <1> isALdelimiter:
   577                              <1> ;Returns: ZF=NZ if al is not a command separator 
   578                              <1> ;         ZF=ZE if al is a command separator
   579 000041EB 3C20                <1>     cmp al, " "
   580                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000041ED 74(EA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   581 000041EF 3C3B                <1>     cmp al, ";"
   582                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000041F1 74(EA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   583 000041F3 3C3D                <1>     cmp al, "="
   584                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000041F5 74(EA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   585 000041F7 3C2C                <1>     cmp al, ","
   586                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000041F9 74(EA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   587 000041FB 3C09                <1>     cmp al, TAB
   588                              <1>     return
    13                              <2> %%_ret:
    14 000041FD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   589                              <1> 
   590                              <1> clearCommandState:
   591                              <1> ;Clears the command state
   592 000041FE 488D3DA7BEFFFF      <1>     lea rdi, cmdStatePtr
   593 00004205 B907000000          <1>     mov ecx, cmdStateL
   594 0000420A 31C0                <1>     xor eax, eax
   595 0000420C F3AA                <1>     rep stosb
   596                              <1>     return
    13                              <2> %%_ret:
    14 0000420E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   597                              <1> 
   598                              <1> clearCommandLineState:
   599                              <1> ;Clears the command line state after a 0Dh encountered
   600 0000420F 488D3D8BBEFFFF      <1>     lea rdi, cmdLineStatePtr
   601 00004216 B912000000          <1>     mov ecx, cmdLineStateL
   602 0000421B 31C0                <1>     xor eax, eax
   603 0000421D F3AA                <1>     rep stosb
   604 0000421F C70579BEFFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   604 00004228 FF                  <1>
   605 00004229 C70575BEFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   605 00004232 FF                  <1>
   606                              <1> ;Close all handles from 5->MAX
   607 00004233 0FB70DEDBDFFFF      <1>     movzx ecx, word [numHdls]
   608 0000423A BB05000000          <1>     mov ebx, 5
   609                              <1> .lp:
   610 0000423F B43E                <1>     mov ah, 3Eh ;File close
   611 00004241 CD21                <1>     int 21h
   612 00004243 FFC3                <1>     inc ebx ;Goto next file
   613 00004245 39CB                <1>     cmp ebx, ecx
   614 00004247 76F6                <1>     jbe .lp    ;Keep looping whilst below or equal
   615                              <1>     return
    13                              <2> %%_ret:
    14 00004249 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   616                              <1> 
   617                              <1> asciiFilenameToFCB:
   618                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   619                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   620                              <1> ;Also doesn't check if chars are valid
   621                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   622                              <1> ;Name is space padded.
   623                              <1> ;Input: rsi = ASCII string buffer
   624                              <1> ;       rdi = FCB name buffer
   625                              <1> ;Output: al = Char that terminated the source string 
   626 0000424A 53                  <1>     push rbx    
   627 0000424B 57                  <1>     push rdi
   628 0000424C B90B000000          <1>     mov ecx, 11
   629 00004251 B020                <1>     mov al, " "
   630 00004253 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   631 00004255 5F                  <1>     pop rdi
   632 00004256 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   633                              <1>     ;Preprocess for Dir Searches
   634 00004259 803E2E              <1>     cmp byte [rsi], "."
   635 0000425C 7509                <1>     jne .processName
   636 0000425E A4                  <1>     movsb   ;Store the first dot
   637 0000425F 803E2E              <1>     cmp byte [rsi], "."
   638 00004262 752C                <1>     jne .exitBadChar
   639 00004264 A4                  <1>     movsb
   640 00004265 EB29                <1>     jmp short .exitBadChar
   641                              <1> .processName:
   642 00004267 AC                  <1>     lodsb   ;Get the char in al
   643 00004268 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   644 0000426A 7426                <1>     jz .exit
   645 0000426C 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   646 0000426E 7407                <1>     je .extSpace
   647 00004270 3C2E                <1>     cmp al, "."
   648 00004272 740C                <1>     je .ext
   649 00004274 AA                  <1>     stosb   ;Store the char
   650 00004275 EBF0                <1>     jmp short .processName
   651                              <1> .extSpace:
   652                              <1> ;Now we scan for a period in the name
   653 00004277 AC                  <1>     lodsb   ;Get a char and increase rsi
   654 00004278 84C0                <1>     test al, al
   655 0000427A 7416                <1>     jz .exit
   656 0000427C 3C2E                <1>     cmp al, "."     ;If al is not a period...
   657 0000427E 75F7                <1>     jne .extSpace   ; keep searching
   658                              <1> .ext:
   659 00004280 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   660                              <1> .processExt:
   661 00004284 AC                  <1>     lodsb
   662 00004285 84C0                <1>     test al, al
   663 00004287 7409                <1>     jz .exit
   664 00004289 3C20                <1>     cmp al, " "
   665 0000428B 7405                <1>     je .exit
   666 0000428D AA                  <1>     stosb
   667 0000428E EBF4                <1>     jmp short .processExt
   668                              <1> .exitBadChar:
   669 00004290 30C0                <1>     xor al, al  ;Return a null terminator
   670                              <1> .exit:
   671 00004292 5B                  <1>     pop rbx
   672                              <1>     return
    13                              <2> %%_ret:
    14 00004293 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   673                              <1> 
   674                              <1> findLastPathComponant:
   675                              <1> ;Finds the last path componant of an ASCIIZ path string
   676                              <1> ;Input: rdi -> Head of the path to find last componant on
   677                              <1> ;Output: rdi -> Start of the last componant
   678 00004294 50                  <1>     push rax
   679 00004295 51                  <1>     push rcx
   680 00004296 31C9                <1>     xor ecx, ecx
   681 00004298 FFC9                <1>     dec ecx
   682 0000429A 31C0                <1>     xor eax, eax
   683 0000429C F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   684 0000429E F7D1                <1>     not ecx     ;This gets the count of chars  
   685 000042A0 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   686 000042A3 8A0580BDFFFF        <1>     mov al, byte [pathSep]
   687 000042A9 FD                  <1>     std
   688 000042AA F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   689 000042AC FC                  <1>     cld
   690 000042AD 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   691 000042AF 48FFC7              <1>     inc rdi     ;Point at pathsep
   692                              <1> .exit:
   693 000042B2 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   694 000042B5 59                  <1>     pop rcx
   695 000042B6 58                  <1>     pop rax
   696                              <1>     return
    13                              <2> %%_ret:
    14 000042B7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   697                              <1> 
   698                              <1> FCBToAsciiz:
   699                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   700                              <1> ;Name is space padded too
   701                              <1> ;Input: rsi = FCB name buffer
   702                              <1> ;       rdi = ASCIIZ string buffer
   703 000042B8 B908000000          <1>     mov ecx, 8
   704 000042BD F3A4                <1>     rep movsb   ;Move the name over
   705                              <1> .scanNameSpace:
   706 000042BF 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   707 000042C3 750D                <1>     jne .ext
   708 000042C5 48FFCF              <1>     dec rdi
   709 000042C8 FFC1                <1>     inc ecx
   710 000042CA 81F908000000        <1>     cmp ecx, 8
   711 000042D0 72ED                <1>     jb .scanNameSpace
   712                              <1> .ext:
   713 000042D2 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   714 000042D7 7506                <1>     jne .validExt
   715 000042D9 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   716 000042DD 7415                <1>     je .exit
   717                              <1> .validExt:
   718 000042DF B02E                <1>     mov al, "." ;We have a valid extension, store a period
   719 000042E1 AA                  <1>     stosb
   720 000042E2 B903000000          <1>     mov ecx, 3
   721 000042E7 F3A4                <1>     rep movsb   ;Move the three extension chars over
   722                              <1> .scanExtSpace:
   723 000042E9 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   724 000042ED 7505                <1>     jne .exit
   725 000042EF 48FFCF              <1>     dec rdi
   726 000042F2 EBF5                <1>     jmp short .scanExtSpace
   727                              <1> .exit:
   728 000042F4 31C0                <1>     xor eax, eax
   729 000042F6 AA                  <1>     stosb   ;Store a null at the end
   730                              <1>     return
    13                              <2> %%_ret:
    14 000042F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   731                              <1> 
   732                              <1> cpDelimOrCtrlStringToBufz:
   733                              <1> ;Copy a delimited or control char terminated string to a buffer
   734                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   735                              <1> ;       rdi -> Buffer to store null terminated string in
   736                              <1> ;Output: rsi -> First char past string end
   737                              <1> ;       rdi -> One char past null terminator on string buffer
   738 000042F8 C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   739                              <1> .lp:
   740 000042FB AC                  <1>     lodsb
   741 000042FC 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here. CR included!
   742 000042FE 760A                <1>     jbe .exit
   743 00004300 E8E6FEFFFF          <1>     call isALdelimiter
   744 00004305 7403                <1>     je .exit
   745 00004307 AA                  <1>     stosb
   746 00004308 EBF1                <1>     jmp short .lp
   747                              <1> .exit:
   748 0000430A 31C0                <1>     xor eax, eax
   749 0000430C AA                  <1>     stosb   ;Store a null terminator
   750                              <1>     return
    13                              <2> %%_ret:
    14 0000430D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   751                              <1> 
   752                              <1> 
   753                              <1> cpDelimPathToBufz:
   754                              <1> ;Copy a delimited path into buffer and null terminate.
   755                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   756                              <1> ;       rdi -> Buffer to store null terminated path in
   757                              <1> ;Output: rsi -> First char past pathname delimiter
   758                              <1> ;       rdi -> One char past null terminator on pathname buffer
   759 0000430E 53                  <1>     push rbx
   760 0000430F 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   761 00004312 C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   762                              <1> .lp:
   763 00004315 AC                  <1>     lodsb   ;Get the char
   764 00004316 3C0D                <1>     cmp al, CR
   765 00004318 7412                <1>     je .gotRedirPath
   766 0000431A E8CCFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   767 0000431F 740B                <1>     jz .gotRedirPath 
   768 00004321 3A0503BDFFFF        <1>     cmp al, byte [switchChar]
   769 00004327 7403                <1>     je .gotRedirPath
   770 00004329 AA                  <1>     stosb   ;Store this char and loop next char
   771 0000432A EBE9                <1>     jmp short .lp
   772                              <1> .gotRedirPath:
   773 0000432C 50                  <1>     push rax    ;Save the char on stack
   774 0000432D 30C0                <1>     xor al, al  ;Get null terminator char
   775 0000432F 4829FB              <1>     sub rbx, rdi
   776 00004332 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   777 00004339 7412                <1>     je .notColon
   778 0000433B 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   779 00004342 7409                <1>     je .notColon
   780 00004344 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   781 00004348 7503                <1>     jne .notColon
   782 0000434A 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   783                              <1> .notColon:
   784 0000434D AA                  <1>     stosb   ;Store the null terminator for the redir path
   785 0000434E 58                  <1>     pop rax ;Get back the char in al
   786 0000434F 5B                  <1>     pop rbx
   787                              <1>     return
    13                              <2> %%_ret:
    14 00004350 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   788                              <1> 
   789                              <1> buildCommandPath:
   790                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   791 00004351 0FB60555BDFFFF      <1>     movzx eax, byte [arg1Off]
   792 00004358 4C8B05B0BCFFFF      <1>     mov r8, [pspPtr]
   793 0000435F 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   794 00004366 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   795                              <1> copyArgumentToSearchSpec:
   796                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   797                              <1> ; and null terminates
   798 00004369 488D3D74C1FFFF      <1>     lea rdi, searchSpec
   799 00004370 E899FFFFFF          <1>     call cpDelimPathToBufz
   800                              <1>     return
    13                              <2> %%_ret:
    14 00004375 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   801                              <1> 
   802                              <1> scanForWildcards:
   803                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   804                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   805 00004376 50                  <1>     push rax
   806 00004377 56                  <1>     push rsi
   807                              <1> .lp:
   808 00004378 AC                  <1>     lodsb
   809 00004379 3C3F                <1>     cmp al, "?"
   810 0000437B 740A                <1>     je .exit
   811 0000437D 3C2A                <1>     cmp al, "*"
   812 0000437F 7406                <1>     je .exit
   813 00004381 84C0                <1>     test al, al
   814 00004383 75F3                <1>     jnz .lp
   815 00004385 FEC0                <1>     inc al  ;This will clear the ZF
   816                              <1> .exit:
   817 00004387 5E                  <1>     pop rsi
   818 00004388 58                  <1>     pop rax
   819                              <1>     return
    13                              <2> %%_ret:
    14 00004389 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   820                              <1> 
   821                              <1> printDecimalWord:
   822                              <1> ;Takes qword in rax and print it's decimal representation
   823                              <1> ;Takes the qword in eax and prints its decimal representation
   824 0000438A 31C9                <1>     xor ecx, ecx
   825 0000438C 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   826 0000438E 85C0                <1>     test eax, eax
   827 00004390 750C                <1>     jnz .notZero
   828 00004392 B930000000          <1>     mov ecx, "0"
   829 00004397 BD01000000          <1>     mov ebp, 1  ;Print one digit
   830 0000439C EB3E                <1>     jmp short .dpfb2
   831                              <1> .notZero:
   832 0000439E 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   833 000043A0 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   834                              <1> .dpfb0:
   835 000043A5 FFC5                <1>     inc ebp
   836 000043A7 81FD08000000        <1>     cmp ebp, 8
   837 000043AD 7206                <1>     jb .dpfb00
   838 000043AF 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   839 000043B3 EB04                <1>     jmp short .dpfb01
   840                              <1> .dpfb00:
   841 000043B5 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   842                              <1> .dpfb01:
   843 000043B9 31D2                <1>     xor edx, edx
   844 000043BB 48F7F6              <1>     div rsi
   845 000043BE 80C230              <1>     add dl, '0'
   846 000043C1 80FA39              <1>     cmp dl, '9'
   847 000043C4 7603                <1>     jbe .dpfb1
   848 000043C6 80C207              <1>     add dl, 'A'-'0'-10
   849                              <1> .dpfb1:
   850 000043C9 81FD08000000        <1>     cmp ebp, 8
   851 000043CF 7204                <1>     jb .dpfb10
   852 000043D1 88D3                <1>     mov bl, dl ;Add the bottom bits
   853 000043D3 EB02                <1>     jmp short .dpfb11
   854                              <1> .dpfb10:
   855 000043D5 88D1                <1>     mov cl, dl    ;Save remainder byte
   856                              <1> .dpfb11:
   857 000043D7 4885C0              <1>     test rax, rax
   858 000043DA 75C9                <1>     jnz .dpfb0
   859                              <1> .dpfb2:
   860 000043DC 81FD08000000        <1>     cmp ebp, 8
   861 000043E2 7208                <1>     jb .dpfb20
   862 000043E4 88DA                <1>     mov dl, bl
   863 000043E6 48C1EB08            <1>     shr rbx, 8
   864 000043EA EB06                <1>     jmp short .dpfb21
   865                              <1> .dpfb20:
   866 000043EC 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   867 000043EE 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   868                              <1> .dpfb21:
   869 000043F2 B402                <1>     mov ah, 02h
   870 000043F4 CD21                <1>     int 21h
   871 000043F6 FFCD                <1>     dec ebp
   872 000043F8 75E2                <1>     jnz .dpfb2
   873                              <1>     return
    13                              <2> %%_ret:
    14 000043FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   874                              <1> 
   875                              <1> getDecimalWord:
   876                              <1> ;Works on MAX A dword in eax
   877                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   878 000043FB 31C9                <1>     xor ecx, ecx
   879 000043FD 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   880 000043FF BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   881                              <1> .dpfb0:
   882 00004404 FFC5                <1>     inc ebp
   883 00004406 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   884 0000440A 31D2                <1>     xor edx, edx
   885 0000440C 48F7F3              <1>     div rbx
   886 0000440F 80C230              <1>     add dl, '0'
   887 00004412 80FA39              <1>     cmp dl, '9'
   888 00004415 7603                <1>     jbe .dpfb1
   889 00004417 80C207              <1>     add dl, 'A'-'0'-10
   890                              <1> .dpfb1:
   891 0000441A 88D1                <1>     mov cl, dl    ;Save remainder byte
   892 0000441C 4885C0              <1>     test rax, rax
   893 0000441F 75E3                <1>     jnz .dpfb0
   894                              <1>     return
    13                              <2> %%_ret:
    14 00004421 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   895                              <1> getByte:
   896                              <1> ;Indicates if the number obtained is larger than a byte by setting CF
   897 00004422 E807000000          <1>     call getNum
   898 00004427 3D00010000          <1>     cmp eax, 100h
   899 0000442C F5                  <1>     cmc
   900                              <1>     return
    13                              <2> %%_ret:
    14 0000442D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   901                              <1> getNum:
   902                              <1> ;Gets a number from a command line.
   903                              <1> ;Input: rsi -> String to get number from
   904                              <1> ;Output: rsi -> Char which terminated the accumulation
   905                              <1> ;        eax = Value of the string. May overflow if we read more than 9 chars...
   906 0000442E 51                  <1>     push rcx
   907 0000442F 31C9                <1>     xor ecx, ecx    ;Start with a value of zero
   908                              <1> .lp:
   909 00004431 AC                  <1>     lodsb
   910 00004432 3C30                <1>     cmp al, "0"
   911 00004434 7210                <1>     jb .exit
   912 00004436 3C39                <1>     cmp al, "9"
   913 00004438 770C                <1>     ja .exit
   914 0000443A 2C30                <1>     sub al, "0"                     ;Convert to binary 
   915 0000443C 678D0C89            <1>     lea ecx, qword [4*ecx + ecx]    ;5*rcx
   916 00004440 D1E1                <1>     shl ecx, 1                      ;2*(5*rcx)
   917 00004442 01C1                <1>     add ecx, eax
   918 00004444 EBEB                <1>     jmp short .lp   ;Get next digit
   919                              <1> .exit:
   920 00004446 89C8                <1>     mov eax, ecx
   921 00004448 59                  <1>     pop rcx
   922 00004449 48FFCE              <1>     dec rsi
   923                              <1>     return
    13                              <2> %%_ret:
    14 0000444C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   924                              <1> 
   925                              <1> 
   926                              <1> freezePC:
   927 0000444D 488D1530CAFFFF      <1>     lea rdx, memBad1
   928 00004454 B409                <1>     mov ah, 09h
   929 00004456 CD21                <1>     int 21h
   930                              <1> .altEP:
   931 00004458 488D154ECAFFFF      <1>     lea rdx, memBad3
   932 0000445F B409                <1>     mov ah, 09h
   933 00004461 CD21                <1>     int 21h
   934                              <1> .lp:
   935 00004463 F390                <1>     pause
   936 00004465 F4                  <1>     hlt
   937 00004466 EBFB                <1>     jmp short .lp
   938                              <1> 
   939                              <1> setDTA:
   940 00004468 50                  <1>     push rax
   941 00004469 52                  <1>     push rdx
   942 0000446A 488D15F9BCFFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   943 00004471 B8001A0000          <1>     mov eax, 1A00h
   944 00004476 CD21                <1>     int 21h
   945 00004478 5A                  <1>     pop rdx
   946 00004479 58                  <1>     pop rax
   947                              <1>     return
    13                              <2> %%_ret:
    14 0000447A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   948                              <1> 
   949                              <1> getDTA:
   950 0000447B 488D15E8BCFFFF      <1>     lea rdx, cmdFFBlock
   951                              <1>     return
    13                              <2> %%_ret:
    14 00004482 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   952                              <1> 
   953                              <1> resetIDTentries:
   954                              <1> ;Resets the IDT entries
   955 00004483 488D1591010000      <1>     lea rdx, critErrorHandler
   956 0000448A 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
   957 0000448E B824250000          <1>     mov eax, 2524h
   958 00004493 CD21                <1>     int 21h
   959 00004495 488D15F6020000      <1>     lea rdx, int23h
   960 0000449C 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
   961 000044A0 B823250000          <1>     mov eax, 2523h
   962 000044A5 CD21                <1>     int 21h
   963 000044A7 488D1512D0FFFF      <1>     lea rdx, appRet
   964 000044AE 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
   965 000044B2 B822250000          <1>     mov eax, 2522h
   966 000044B7 CD21                <1>     int 21h
   967                              <1>     return
    13                              <2> %%_ret:
    14 000044B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   968                              <1> 
   969                              <1> ;-------------------------------
   970                              <1> ; Environment utility functions
   971                              <1> ;-------------------------------
   972                              <1> 
   973                              <1> cmpEnvVar:
   974                              <1> ;Checks that we have found the environment variable we are looking for.
   975                              <1> ;Input: rsi -> Environment var to verify the name of
   976                              <1> ;       rdi -> Environment var name to compare against
   977                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
   978 000044BA 56                  <1>     push rsi
   979 000044BB 57                  <1>     push rdi
   980 000044BC 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs
   981                              <1> .lp:
   982 000044BF AC                  <1>     lodsb               ;Pick up from user string
   983 000044C0 E8F7FCFFFF          <1>     call ucChar         ;Upper case it!
   984 000044C5 3807                <1>     cmp byte [rdi], al  
   985 000044C7 7509                <1>     jne .exit
   986 000044C9 3C3D                <1>     cmp al, "="         ;Are we at the end?
   987 000044CB 7405                <1>     je .exit
   988 000044CD 48FFC7              <1>     inc rdi
   989 000044D0 EBED                <1>     jmp short .lp
   990                              <1> .exit:
   991 000044D2 5F                  <1>     pop rdi
   992 000044D3 5E                  <1>     pop rsi
   993                              <1>     return
    13                              <2> %%_ret:
    14 000044D4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   994                              <1> 
   995                              <1> checkEnvGoodAndGet:
   996                              <1> ;Gets the env ptr and checks that it is double null terminated.
   997                              <1> ;Output:
   998                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
   999                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
  1000                              <1> ;           rsi -> Environment pointer
  1001 000044D5 50                  <1>     push rax
  1002 000044D6 51                  <1>     push rcx
  1003 000044D7 57                  <1>     push rdi
  1004 000044D8 4150                <1>     push r8
  1005 000044DA 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
  1006 000044DE 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
  1007 000044E1 741A                <1>     jz .badExit
  1008 000044E3 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
  1009 000044E6 C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
  1010                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
  1011 000044E9 31C0                <1>     xor eax, eax
  1012                              <1> .pathNulScan:
  1013 000044EB F2AE                <1>     repne scasb
  1014 000044ED 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
  1015 000044EF 740C                <1>     jz .badExit
  1016 000044F1 3807                <1>     cmp byte [rdi], al  ;Is char two null?
  1017 000044F3 75F6                <1>     jne .pathNulScan    ;If not, keep searching
  1018 000044F5 31C0                <1>     xor eax, eax
  1019 000044F7 FFC0                <1>     inc eax ;Clear the ZF
  1020 000044F9 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
  1021                              <1> .badExit:
  1022 000044FD 4158                <1>     pop r8
  1023 000044FF 5F                  <1>     pop rdi
  1024 00004500 59                  <1>     pop rcx
  1025 00004501 58                  <1>     pop rax
  1026                              <1>     return
    13                              <2> %%_ret:
    14 00004502 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1027                              <1> 
  1028                              <1> 
  1029                              <1> findEnvSpace:
  1030                              <1> ;Searches the environment for space, returns a pointer to the start of the 
  1031                              <1> ; free space in the pointer and a count of free space in the environment.
  1032                              <1> ;If count is zero, pointer is not to be used.
  1033                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
  1034 00004503 31C9                <1>     xor ecx, ecx
  1035 00004505 31C0                <1>     xor eax, eax    ;Clear eax too
  1036 00004507 51                  <1>     push rcx
  1037 00004508 E8C8FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
  1038 0000450D 59                  <1>     pop rcx
  1039                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000450E 74(02)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1040 00004510 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
  1041 00004514 FFC9                <1>     dec ecx ;Make into a large counter
  1042 00004516 4889F7              <1>     mov rdi, rsi    
  1043                              <1> .endsearch:
  1044 00004519 F2AE                <1>     repne scasb ;Scan
  1045 0000451B 803F00              <1>     cmp byte [rdi], 0
  1046 0000451E 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
  1047                              <1>     ;Here we are at the end of the environment
  1048 00004520 F7D9                <1>     neg ecx
  1049 00004522 FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
  1050 00004524 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
  1051 00004527 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
  1052 0000452A 29C8                <1>     sub eax, ecx
  1053 0000452C 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
  1054                              <1>     return
    13                              <2> %%_ret:
    14 0000452E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1055                              <1> 
  1056                              <1> searchForEnvVar:
  1057                              <1> ;Gets the environment, and scans it for a string with the var specified.
  1058                              <1> ;Input: rdi -> Var name to look for.
  1059                              <1> ;Returns: CF=NC: rsi -> Env var in env.
  1060 0000452F 57                  <1>     push rdi
  1061 00004530 51                  <1>     push rcx
  1062 00004531 52                  <1>     push rdx
  1063 00004532 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1064 00004536 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
  1065                              <1> .varLp:
  1066 00004539 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
  1067 0000453C E879FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1068 00004541 7416                <1>     je .varFound
  1069 00004543 31C0                <1>     xor eax, eax        ;Search for a null
  1070 00004545 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1071 00004548 B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1072 0000454D F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1073 0000454F 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1074 00004551 7405                <1>     je .varNotFound     ;If second null, no more env to search!
  1075 00004553 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1076 00004556 EBE1                <1>     jmp short .varLp    ;And scan again!
  1077                              <1> .varNotFound:
  1078 00004558 F9                  <1>     stc
  1079                              <1> .varFound:
  1080 00004559 59                  <1>     pop rcx
  1081 0000455A 5A                  <1>     pop rdx
  1082 0000455B 5F                  <1>     pop rdi
  1083                              <1>     return
    13                              <2> %%_ret:
    14 0000455C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1084                              <1> 
  1085                              <1> envFree:
  1086                              <1> ;Frees a variable from the environment, pulls the strings behind it up
  1087                              <1> ; zeros the rest of the environment, and returns a pointer to the first
  1088                              <1> ; free byte of the environment!
  1089                              <1> ;Input: rsi -> Variable to free.
  1090                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
  1091                              <1> ;        ecx = Number of free bytes in env
  1092 0000455D 4889F7              <1>     mov rdi, rsi
  1093 00004560 31C0                <1>     xor eax, eax
  1094                              <1> .freeLp:
  1095 00004562 803F00              <1>     cmp byte [rdi], 0
  1096 00004565 7403                <1>     je .exitLp
  1097 00004567 AA                  <1>     stosb
  1098 00004568 EBF8                <1>     jmp short .freeLp
  1099                              <1> .exitLp:
  1100                              <1> ;rdi points to the terminating null of the var we just deleted
  1101                              <1> ;rsi points to the start of the free space
  1102 0000456A 4887F7              <1>     xchg rsi, rdi   ;Swap em!
  1103 0000456D 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
  1104 00004572 7504                <1>     jne .prepPullup
  1105 00004574 31C0                <1>     xor eax, eax
  1106 00004576 EB0E                <1>     jmp short .cleanEnv
  1107                              <1> .prepPullup:
  1108 00004578 48FFC6              <1>     inc rsi         ;Go past the terminating null!
  1109                              <1> .pullUp:
  1110 0000457B AC                  <1>     lodsb
  1111 0000457C AA                  <1>     stosb
  1112 0000457D 84C0                <1>     test al, al ;Did we pick up a zero
  1113 0000457F 75FA                <1>     jne .pullUp ;If not, keep copying
  1114 00004581 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
  1115 00004584 75F5                <1>     jne .pullUp
  1116                              <1> ;We are at the end of the copy!
  1117                              <1> .cleanEnv:
  1118 00004586 AA                  <1>     stosb   ;Store the famous second null
  1119 00004587 48FFCF              <1>     dec rdi ;without incrementing it!!
  1120 0000458A E807000000          <1>     call getFreeSpace
  1121 0000458F 31C0                <1>     xor eax, eax
  1122 00004591 51                  <1>     push rcx
  1123 00004592 F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
  1124 00004594 59                  <1>     pop rcx
  1125                              <1>     return
    13                              <2> %%_ret:
    14 00004595 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1126                              <1> 
  1127                              <1> getFreeSpace:
  1128                              <1> ;Output: ecx = Number of free bytes in the environment block
  1129 00004596 56                  <1>     push rsi
  1130 00004597 57                  <1>     push rdi
  1131 00004598 E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
  1132 0000459D 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1133 000045A1 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
  1134 000045A4 E805000000          <1>     call getEnvSize ;Get total block size
  1135 000045A9 29F9                <1>     sub ecx, edi    ;Get difference!
  1136 000045AB 5F                  <1>     pop rdi
  1137 000045AC 5E                  <1>     pop rsi
  1138                              <1>     return
    13                              <2> %%_ret:
    14 000045AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1139                              <1> 
  1140                              <1> getEnvSize:
  1141                              <1> ;Gets the number of bytes in the environment allocation
  1142                              <1> ;Output: ecx = Number of bytes in the environment!
  1143 000045AE 53                  <1>     push rbx
  1144 000045AF 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
  1145 000045B3 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
  1146 000045B6 C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
  1147 000045B9 5B                  <1>     pop rbx
  1148                              <1>     return
    13                              <2> %%_ret:
    14 000045BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1149                              <1> 
  1150                              <1> getPtrToEndOfEnv:
  1151                              <1> ;Gets ptr to end of the environment
  1152                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
  1153 000045BB 50                  <1>     push rax
  1154 000045BC 51                  <1>     push rcx
  1155 000045BD 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
  1156 000045C1 31C0                <1>     xor eax, eax
  1157 000045C3 31C9                <1>     xor ecx, ecx
  1158 000045C5 FFC9                <1>     dec ecx
  1159                              <1> .lp:
  1160 000045C7 F2AE                <1>     repne scasb
  1161 000045C9 3807                <1>     cmp byte [rdi], al
  1162 000045CB 75FA                <1>     jne .lp
  1163 000045CD 59                  <1>     pop rcx
  1164 000045CE 58                  <1>     pop rax
  1165                              <1>     return
    13                              <2> %%_ret:
    14 000045CF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1166                              <1> 
  1167                              <1> growEnvBlock:
  1168                              <1> ;Attempts to grow the environment to store the new string. Will clean the
  1169                              <1> ; newly allocated 160 byte block of the environment.
  1170                              <1> ;Returns:   CF=NC - Environment grown ok!
  1171                              <1> ;           CF=CY & ZF=ZE - Environment at max size
  1172                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
  1173 000045D0 50                  <1>     push rax
  1174 000045D1 53                  <1>     push rbx
  1175 000045D2 51                  <1>     push rcx
  1176 000045D3 56                  <1>     push rsi
  1177 000045D4 57                  <1>     push rdi
  1178 000045D5 E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
  1179 000045DA E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
  1180 000045DF 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1181 000045E3 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
  1182 000045E6 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
  1183 000045EC 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
  1184 000045F2 7321                <1>     jae .tooLarge
  1185                              <1>     ;Here ZF must be NZ.
  1186 000045F4 4150                <1>     push r8
  1187 000045F6 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
  1188 000045FA B8004A0000          <1>     mov eax, 4A00h
  1189 000045FF CD21                <1>     int 21h
  1190 00004601 4158                <1>     pop r8
  1191 00004603 720A                <1>     jc .exit
  1192                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1193                              <1>     ; so we add 160 zeros to the count of bytes
  1194 00004605 81C1A0000000        <1>     add ecx, 0A0h
  1195 0000460B 31C0                <1>     xor eax, eax
  1196 0000460D F3AA                <1>     rep stosb
  1197                              <1> .exit:
  1198 0000460F 5F                  <1>     pop rdi
  1199 00004610 5E                  <1>     pop rsi
  1200 00004611 59                  <1>     pop rcx
  1201 00004612 5B                  <1>     pop rbx
  1202 00004613 58                  <1>     pop rax
  1203                              <1>     return
    13                              <2> %%_ret:
    14 00004614 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1204                              <1> .tooLarge:
  1205 00004615 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1206 00004618 F9                  <1>     stc             ;Set CF
  1207 00004619 EBF4                <1>     jmp short .exit
    20                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 0000461B 53                  <1>     push rbx
    25 0000461C 51                  <1>     push rcx
    26 0000461D 52                  <1>     push rdx
    27 0000461E 57                  <1>     push rdi
    28 0000461F 56                  <1>     push rsi
    29 00004620 E8A0010000          <1>     call errSwapHdls
    30 00004625 FC                  <1>     cld         ;Make String ops go forward
    31 00004626 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00004629 488D15B7C2FFFF      <1>     lea rdx, crlf
    33 00004630 E869F9FFFF          <1>     call printString
    34                              <1> 
    35 00004635 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    36 0000463B B90C000000          <1>     mov ecx, 0Ch
    37 00004640 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    38 00004642 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    39 00004645 480FB7FF            <1>     movzx rdi, di
    40 00004649 4889FA              <1>     mov rdx, rdi    ;Copy error code
    41 0000464C 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    42 00004650 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    43 00004653 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    44 00004656 488D15C8C8FFFF      <1>     lea rdx, errorMsgTable
    45 0000465D 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    46 00004661 E838F9FFFF          <1>     call printString     ;Call DOS to print first part of message
    47                              <1> 
    48 00004666 488D15A9C9FFFF      <1>     lea rdx, readMsg
    49 0000466D 488D3DB1C9FFFF      <1>     lea rdi, writeMsg
    50 00004674 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    51 00004677 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    52 0000467B E81EF9FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
    53                              <1> 
    54 00004680 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    55 00004683 0F85EF000000        <1>     jnz .charError
    56                              <1> ;Disk error continues here
    57 00004689 488D157FC9FFFF      <1>     lea rdx, drvMsg ;Drive message
    58 00004690 E809F9FFFF          <1>     call printString
    59 00004695 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    60 00004697 80C241              <1>     add dl, "A" ;Add ASCII code
    61 0000469A B402                <1>     mov ah, 02h ;Print char in dl
    62 0000469C CD21                <1>     int 21h
    63                              <1> .userInput:
    64 0000469E E8F4F8FFFF          <1>     call printCRLF  ;Print new line
    65                              <1> ;Abort, Retry, Ignore, Fail is word order
    66                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    67                              <1> .userAbort:
    68                              <1> ;Abort is always an option
    69 000046A3 488D158AC9FFFF      <1>     lea rdx, abortMsg
    70 000046AA E8EFF8FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
    71                              <1> .userRetry:
    72 000046AF F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    73 000046B2 7418                <1>     jz .userIgnore    ;If clear, dont print message
    74 000046B4 488D1591C9FFFF      <1>     lea rdx, betweenMsg
    75 000046BB E8DEF8FFFF          <1>     call printString
    76 000046C0 488D157AC9FFFF      <1>     lea rdx, retryMsg
    77 000046C7 E8D2F8FFFF          <1>     call printString
    78                              <1> .userIgnore:
    79 000046CC F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    80 000046CF 7418                <1>     jz .userFail
    81 000046D1 488D1574C9FFFF      <1>     lea rdx, betweenMsg
    82 000046D8 E8C1F8FFFF          <1>     call printString
    83 000046DD 488D1556C9FFFF      <1>     lea rdx, ignoreMsg
    84 000046E4 E8B5F8FFFF          <1>     call printString
    85                              <1> .userFail:
    86 000046E9 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    87 000046EC 7418                <1>     jz .userMsgEnd
    88 000046EE 488D1557C9FFFF      <1>     lea rdx, betweenMsg
    89 000046F5 E8A4F8FFFF          <1>     call printString
    90 000046FA 488D1546C9FFFF      <1>     lea rdx, failMsg
    91 00004701 E898F8FFFF          <1>     call printString
    92                              <1> .userMsgEnd:
    93 00004706 488D1542C9FFFF      <1>     lea rdx, endMsg
    94 0000470D E88CF8FFFF          <1>     call printString
    95                              <1> ;Get user input now 
    96 00004712 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
    97 00004714 488D3D37C9FFFF      <1>     lea rdi, i24Resp ;Go to start of string
    98 0000471B B8010C0000          <1>     mov eax, 0C01h ;Flush and get STDIN without Console Echo
    99 00004720 CD21                <1>     int 21h ;Get char in al
   100 00004722 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   101 00004724 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   102 00004726 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   103                              <1> .uip1:
   104 00004728 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   105 00004729 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   106 0000472B FFC1                <1>     inc ecx
   107 0000472D 81F904000000        <1>     cmp ecx, 4
   108 00004733 75F3                <1>     jne .uip1
   109 00004735 E964FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   110                              <1> .validInput:
   111 0000473A E858F8FFFF          <1>     call printCRLF   ;Note the input was accepted
   112 0000473F 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   113                              <1> ;Now check if the input is permitted
   114 00004741 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   115 00004743 7427                <1>     je .cehExit
   116 00004745 84C0                <1>     test al, al ;Check if 0 => Ignore
   117 00004747 740F                <1>     je .viIgnore
   118 00004749 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   119 0000474B 7416                <1>     je .viRetry
   120                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   121 0000474D F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   122 00004750 0F8448FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   123 00004756 EB14                <1>     jmp short .cehExit
   124                              <1> .viIgnore:
   125 00004758 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   126 0000475B 0F843DFFFFFF        <1>     jz .userInput
   127 00004761 EB09                <1>     jmp short .cehExit
   128                              <1> .viRetry:
   129 00004763 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   130 00004766 0F8432FFFFFF        <1>     jz .userInput
   131                              <1> .cehExit:
   132 0000476C E871000000          <1>     call errRetHdls
   133 00004771 5E                  <1>     pop rsi
   134 00004772 5F                  <1>     pop rdi
   135 00004773 5A                  <1>     pop rdx
   136 00004774 59                  <1>     pop rcx
   137 00004775 5B                  <1>     pop rbx
   138 00004776 48CF                <1>     iretq
   139                              <1> .charError:
   140 00004778 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   141 0000477D 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   142                              <1> .ce1:
   143 00004784 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   144 00004785 88C2                <1>     mov dl, al  ;Move char into dl
   145 00004787 B402                <1>     mov ah, 02h
   146 00004789 CD21                <1>     int 21h ;Print char
   147 0000478B E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   148 0000478D E90CFFFFFF          <1>     jmp .userInput
   149                              <1> 
   150                              <1> 
   151                              <1> int23h:
   152 00004792 F60592B8FFFFFF      <1>     test byte [permaSwitch], -1
   153 00004799 7516                <1>     jnz .noJug   ;If this is non-zero, just exit as normal
   154                              <1>     ;Else, we juggle parent PSP's
   155 0000479B 50                  <1>     push rax
   156 0000479C 53                  <1>     push rbx
   157 0000479D 488B0573B8FFFF      <1>     mov rax, qword [realParent]
   158 000047A4 488B1D64B8FFFF      <1>     mov rbx, qword [pspPtr]
   159 000047AB 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   160 000047AF 5B                  <1>     pop rbx
   161 000047B0 58                  <1>     pop rax
   162                              <1> .noJug:
   163 000047B1 66813DE5B8FFFFFFFF  <1>     cmp word [errHdls], -1  ;If these are not -1, return to normal!
   164 000047BA 7405                <1>     je .exit
   165 000047BC E821000000          <1>     call errRetHdls 
   166                              <1> .exit:
   167 000047C1 F9                  <1>     stc     ;Set CF to kill the task
   168 000047C2 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
   169                              <1> 
   170                              <1> errSwapHdls:
   171                              <1> ;Swaps STDIO to STDERR
   172                              <1> ;Start by tmporarily moving the stderr handler into stdio
   173                              <1> ;In principle dangerous, but since we cannot exit our routine, its oki.
   174 000047C5 50                  <1>     push rax
   175 000047C6 53                  <1>     push rbx
   176 000047C7 E833000000          <1>     call getJftPtr  ;Get the jft pointer into rbx. Saves rax
   177 000047CC 0FB703              <1>     movzx eax, word [rbx]       ;Get STDIO into ax
   178 000047CF 668905C9B8FFFF      <1>     mov word [errHdls], ax      ;Save em
   179 000047D6 0FB64302            <1>     movzx eax, byte [rbx + 2]   ;Now get the STDERR SFTndx in al
   180 000047DA 88C4                <1>     mov ah, al                  ;Move STDERR hdl into ah too 
   181 000047DC 668903              <1>     mov word [rbx], ax          ;And set STDIO to STDERR
   182 000047DF 5B                  <1>     pop rbx
   183 000047E0 58                  <1>     pop rax
   184                              <1>     return
    13                              <2> %%_ret:
    14 000047E1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   185                              <1> 
   186                              <1> errRetHdls:
   187                              <1> ;Returns STDIO from STDERR.
   188 000047E2 50                  <1>     push rax
   189 000047E3 53                  <1>     push rbx
   190 000047E4 E816000000          <1>     call getJftPtr  ;Get ptr in rbx. Preserves rax.
   191 000047E9 0FB705AFB8FFFF      <1>     movzx eax, word [errHdls]
   192 000047F0 66C705A6B8FFFFFFFF  <1>     mov word [errHdls], -1  ;Reset values
   193 000047F9 668903              <1>     mov word [rbx], ax      ;Store the handle word back
   194 000047FC 5B                  <1>     pop rbx
   195 000047FD 58                  <1>     pop rax
   196                              <1>     return
    13                              <2> %%_ret:
    14 000047FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   197                              <1> 
   198                              <1> getJftPtr:
   199                              <1> ;Preserves all registers except rbx.
   200                              <1> ;Output: rbx -> JFT of current task
   201 000047FF 50                  <1>     push rax        ;Save rax
   202 00004800 B800510000          <1>     mov eax, 5100h  ;Get current PSP in rbx
   203 00004805 CD21                <1>     int 21h
   204 00004807 58                  <1>     pop rax
   205 00004808 66817B4E1400        <1>     cmp word [rbx + psp.jftSize], 20    ;If >20, pspjft is ptr to real jft
   206 0000480E 7605                <1>     jbe .pspJftExit
   207 00004810 488B5B2A            <1>     mov rbx, qword [rbx + psp.externalJFTPtr]   ;Get ptr to jft from the psp
   208                              <1>     return
    13                              <2> %%_ret:
    14 00004814 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   209                              <1> .pspJftExit:
   210 00004815 488D5B2A            <1>     lea rbx, qword [rbx + psp.jobFileTbl]       ;Make into a ptr to jft in psp
   211                              <1>     return
    13                              <2> %%_ret:
    14 00004819 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    21                                  endOfAlloc: ;End of alloc
    22                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    23                                  Segment transient align=1 follows=.data
    24                                  ;This segment always gets ejected post load
    25                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D15D7010000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    15 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    16 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    17 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    18                              <1> ;Setup Int 22h, Int 23h and Int 24h
    19 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    20 0000002F 488905(2C000000)    <1>     mov qword [parentInt22], rax
    21 00000036 E8(83440000)        <1>     call resetIDTentries
    22                              <1> ;Get a pointer to DOS Sysvars
    23 0000003B B452                <1>     mov ah, 52h ;Get sysvars
    24 0000003D CD21                <1>     int 21h
    25 0000003F 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    26                              <1> ;Call for simple internationalisation data
    27 00000046 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    28 0000004B CD21                <1>     int 21h
    29 0000004D 3CFF                <1>     cmp al, -1
    30 0000004F 7412                <1>     je .skipSwitch
    31 00000051 8815(2A000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    32 00000057 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    33 0000005A 7507                <1>     jne .skipSwitch
    34 0000005C C605(29000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    35                              <1> .skipSwitch:
    36 00000063 B800380000          <1>     mov eax, 3800h  ;Get current country data
    37 00000068 488D15(34000000)    <1>     lea rdx, ctryData
    38 0000006F CD21                <1>     int 21h ;Write the data to the internal country table
    39                              <1> ;Now determine if this is the master copy of COMMAND.COM
    40                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    41 00000071 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    42 00000076 CD21                <1>     int 21h
    43 00000078 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    44 0000007B B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    45 00000080 CD21                <1>     int 21h
    46 00000082 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    47 00000085 7574                <1>     jne .skipMaster
    48                              <1> ;Ok so we are master command.com
    49                              <1> ;Now make myself the real parent
    50 00000087 C605(2B000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    51 0000008E 4C8905(17000000)    <1>     mov qword [realParent], r8
    52                              <1> ;Set current Drive in COMSPEC
    53 00000095 B800190000          <1>     mov eax, 1900h ;Get current Drive
    54 0000009A CD21                <1>     int 21h
    55 0000009C 0441                <1>     add al, "A"
    56 0000009E 8805(5E100000)      <1>     mov byte [comspecEvar.cspec], al
    57                              <1> ;Set Int 2Eh up
    58 000000A4 488D15(EF190000)    <1>     lea rdx, int2Eh
    59 000000AB B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    60 000000B0 CD21                <1>     int 21h
    61                              <1> ;Now, open and parse AUTOEXEC.BAT. Build new Master Environment here.
    62                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    63 000000B2 BB0A000000          <1>     mov ebx, 10 ;Allocate 160 bytes
    64 000000B7 B800480000          <1>     mov eax, 4800h
    65 000000BC CD21                <1>     int 21h
    66 000000BE 0F824FFFFFFF        <1>     jc .exitBad
    67                              <1> ;Set master environment as mine
    68 000000C4 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    69 000000C8 488D35(56100000)    <1>     lea rsi, masterEnv
    70 000000CF 4889C7              <1>     mov rdi, rax
    71 000000D2 B91E000000          <1>     mov ecx, menv_len
    72 000000D7 F3A4                <1>     rep movsb   ;Copy the chars over!
    73                              <1> 
    74 000000D9 488D15(E7080000)    <1>     lea rdx, crlf
    75 000000E0 B409                <1>     mov ah, 09h
    76 000000E2 CD21                <1>     int 21h
    77 000000E4 E8(932C0000)        <1>     call time
    78 000000E9 E8(E52A0000)        <1>     call date
    79 000000EE 488D15(E7080000)    <1>     lea rdx, crlf
    80 000000F5 B409                <1>     mov ah, 09h
    81 000000F7 CD21                <1>     int 21h
    82 000000F9 EB2E                <1>     jmp short .printInit
    83                              <1> .skipMaster:    
    84                              <1> ;We now search for the master environment!!
    85                              <1>     ;Walk the parentPSP chain until we find a PSP which is its own
    86                              <1>     ; parent. This is the previous master command interpreter! This means
    87                              <1>     ; that non-master COMMAND.COM instances are not their own parents! We 
    88                              <1>     ; then set our environment ptr in the PSP to the master environment.
    89 000000FB 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
    90 00000102 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
    91 0000010A 0FB605(2A000000)    <1>     movzx eax, byte [switchChar]
    92 00000111 F2AE                <1>     repne scasb
    93 00000113 67E313              <1>     jecxz .printInit
    94 00000116 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
    95 00000119 E8(BC410000)        <1>     call ucChar
    96 0000011E 3C50                <1>     cmp al, "P" ;Is it permanent switch?
    97 00000120 7507                <1>     jne .printInit
    98 00000122 C605(2B000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    99                              <1> .printInit:
   100 00000129 488D1D(1A480000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
   101                              <1> ;Finish by printing INIT string.
   102 00000130 53                  <1>     push rbx
   103 00000131 488D153A000000      <1>     lea rdx, initString
   104 00000138 B409                <1>     mov ah, 09h
   105 0000013A CD21                <1>     int 21h ;Print init string
   106 0000013C E8(D1350000)        <1>     call version.printVersionNumber
   107 00000141 488D1560000000      <1>     lea rdx, initString2
   108 00000148 B409                <1>     mov ah, 09h
   109 0000014A CD21                <1>     int 21h ;Print init string
   110 0000014C 5B                  <1>     pop rbx
   111                              <1>     ;Now we add the stack to the alloc and paragraph align
   112 0000014D 4881C340060000      <1>     add rbx, stackSize
   113 00000154 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   114 0000015B 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   115 0000015F 48C1E304            <1>     shl rbx, 4
   116 00000163 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   117 00000166 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   118 0000016D E9(74100000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   119                              <1> ;Loader Data here
   120                              <1> initString: 
   121 00000172 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   121 0000017B 66696320436F6D7075- <1>
   121 00000184 746572205265736561- <1>
   121 0000018D 726368285229205343- <1>
   121 00000196 502F444F5328522920- <1>
   121 0000019F 56657273696F6E2024  <1>
   122                              <1> initString2:
   123 000001A8 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",CR,LF,"$"
   123 000001B1 202020284329436F70- <1>
   123 000001BA 797269676874205363- <1>
   123 000001C3 69656E746966696320- <1>
   123 000001CC 436F6D707574657220- <1>
   123 000001D5 526573656172636820- <1>
   123 000001DE 323032342E0D0A24    <1>
   124 000001E6 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   124 000001EF 20444F532076657273- <1>
   124 000001F8 696F6E0D0A24        <1>
    26                                  
    27                                  stackSize equ 200*8    ;200 QWORD stack
    27          ------------------       info: assembly required 1+7+2 passes

