     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  stackSize equ 200*8    ;200 QWORD stacks always
     7                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     8                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber             db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector         dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster     db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSectorsPerClusterShift db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset              dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs           db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries   dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset      dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dClusterCount           dd ?  ;Total number of clusters in data area
    27 00000013 ????????            <1>     .dFATlength              dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor        db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag             db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr             dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?  ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?  ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?  ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?  ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?  ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?  ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?  ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?  ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?  ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?  ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> struc psp
   344 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   345 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   346 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   347 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   348 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   349 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   350 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   351                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   352                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   353                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   354                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   355                              <1> ; always used and jftSize.
   356                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   357 0000002A <res 14h>           <1>     .jobFileTbl resb dfltJFTsize ;Main File handle array, JFT
   358 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   359 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   360 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   361 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   362 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   363 0000005B ??                  <1>                 db ?  ;Reserved byte
   364                              <1> ;The below are in the same place as in DOS.
   365                              <1>     .cmdLineArgPtr: ;Symbol for future use
   366 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   367 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   368                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   369 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   370 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   371                              <1> endstruc
   372                              <1> 
   373                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   374                              <1> 
   375                              <1> struc clkStruc
   376 00000000 ????                <1>     .dateWord   dw ?
   377 00000002 ??                  <1>     .minutes    db ?
   378 00000003 ??                  <1>     .hours      db ?
   379 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   380 00000005 ??                  <1>     .seconds    db ?
   381                              <1> endstruc
   382                              <1> 
   383                              <1> 
   384                              <1> struc extCtryStruc
   385 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   386 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   387 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   388 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   389 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   390                              <1>                         ;0 = month day year hh:mm:ss
   391                              <1>                         ;1 = day month year hh:mm:ss
   392                              <1>                         ;2 = year month day hh:mm:ss
   393 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   394 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   395 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   396 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   397 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   398 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   399                              <1>                         ;0 = Symbol leads, without space
   400                              <1>                         ;1 = Symbol follows, without space
   401                              <1>                         ;2 = Symbol leads, one space
   402                              <1>                         ;3 = Symbol follows, one space
   403                              <1>                         ;4 = Symbol replace decimal separator
   404 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   405 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   406 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   407 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   408 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   409                              <1> endstruc
   410                              <1> 
   411                              <1> struc countryStruc
   412 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   413                              <1>                         ;0 = month day year hh:mm:ss
   414                              <1>                         ;1 = day month year hh:mm:ss
   415                              <1>                         ;2 = year month day hh:mm:ss
   416 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   417 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   418 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   419 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   420 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   421 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   422                              <1>                         ;0 = Symbol leads, without space
   423                              <1>                         ;1 = Symbol follows, without space
   424                              <1>                         ;2 = Symbol leads, one space
   425                              <1>                         ;3 = Symbol follows, one space
   426                              <1>                         ;4 = Symbol replace decimal separator
   427 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   428 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   429 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   430 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   431 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   432                              <1> endstruc
   433                              <1> 
   434                              <1> ;Critical Error AH bitfield equates
   435                              <1> critRead    equ 0h
   436                              <1> critWrite   equ 1h
   437                              <1> critDOS     equ 0h
   438                              <1> critFAT     equ 2h
   439                              <1> critDir     equ 4h
   440                              <1> critData    equ 6h
   441                              <1> critFailOK  equ 8h
   442                              <1> critRetryOK equ 10h
   443                              <1> critIgnorOK equ 20h
   444                              <1> critCharDev equ 80h
   445                              <1> 
   446                              <1> critIgnore  equ 0
   447                              <1> critRetry   equ 1
   448                              <1> critAbort   equ 2
   449                              <1> critFail    equ 3
   450                              <1> 
   451                              <1> ;MISC ASCII control chars
   452                              <1> NUL equ 00h ;^@         | ASCII Null
   453                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   454                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   455                              <1> BEL equ 07h ;^G         | ASCII Bell
   456                              <1> BSP equ 08h ;^H         | ASCII Backspace
   457                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   458                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   459                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   460                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   461                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   462                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   463                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   464                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   465                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   466                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   467                              <1> SPC equ 20h ;Printable  | ASCII Space
   468                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   469                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   470                              <1> 
   471                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   472                              <1> ;Extended Ascii Codes
   473                              <1> eF1     equ 3Bh ;F1 second byte
   474                              <1> eF2     equ 3Ch ;F2 second byte
   475                              <1> eF3     equ 3Dh ;F3 second byte
   476                              <1> eF4     equ 3Eh ;F4 second byte
   477                              <1> eF5     equ 3Fh ;F5 second byte
   478                              <1> eF6     equ 40h ;F6 second byte
   479                              <1> eF7     equ 41h ;F7 second byte
   480                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   481                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   482                              <1> eIns    equ 52h ;Insert second byte
   483                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   484                              <1> 
   485                              <1> ;Default Configuration for the system
   486                              <1> 
   487                              <1> buffersDefault  equ 30
   488                              <1> filesDefault    equ 20
   489                              <1> fcbsDefault     equ 4
   490                              <1> safeFcbsDeflt   equ 0
   491                              <1> lastDriveDeflt  equ 5   
   492                              <1> 
   493                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   494                              <1> ; then the char has this property.
   495                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   496                              <1> termChar    equ 2   ;Terminator char type
   497                              <1> sepChar     equ 4   ;Separator char type
   498                              <1> badFCBChar  equ 8   ;FCB filename char
     9                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   db ?  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   dq ?
     8 00000009 ??????              <1>     .fileext    db 3 dup (?)
     9 0000000C ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize dw ?  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   dw ?  ;Standard date format
    14 00000016 ????                <1>     .fileTime   dw ?  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  db ?  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   db 5 dup (?)  
    28 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   db ?  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   dq ?
    31 00000010 ??????              <1>     .fileext    db 3 dup (?)
    32 00000013 ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize dw ?  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   dw ?  ;Standard date format
    37 0000001D ????                <1>     .fileTime   dw ?  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  db ?  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   db ?
    52 00000001 ????????????????    <1>     .filename   dq ?
    53 00000009 ??????              <1>     .fileext    db 3 dup (?)
    54 0000000C ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    dq ?
    57 00000019 ??????              <1>     .newExt     db 3 dup (?)
    58 0000001C ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       db 5 dup (?)  
    66 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   db ?
    68 00000008 ????????????????    <1>     .filename   dq ?
    69 00000010 ??????              <1>     .fileext    db 3 dup (?)
    70 00000013 ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    dq ?
    73 00000020 ??????              <1>     .newExt     db 3 dup (?)
    74 00000023 ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord db ?  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust dw ?  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    dw ?  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   db ?  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  dw ?  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   dw ?  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   dw ?  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    dw ?  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   dw ?  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   dw ?  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
    10                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI24     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ 1 + fileNameZL  ;1 for the count prefix
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> ;In batch, for pointers, 0 means NULL.
    25                              <1> ;FOR/CALL not priorities for implementation right now.
    26                              <1> struc batBlockHdr
    27 00000000 ??                  <1>     .zero       db ?    ;Always null
    28 00000001 ??                  <1>     .bEchoFlg   db ?    ;Echo flag on entry to batch. 1 if echo on!
    29 00000002 ????????????????    <1>     .pCallBlk   dq ?    ;Pointer to the previous batch block when CALLed
    30 0000000A ????????????????    <1>     .pForBlk    dq ?    ;Pointer to the active FOR block
    31 00000012 ??                  <1>     .bBatFlg    db ?    ;Indicates type of command currently active
    32                              <1> .qBatOff:
    33 00000013 ????????            <1>     .dBatOffLo  dd ?    ;LSEEK Low dword of the batch offset
    34 00000017 ????????            <1>     .dBatOffHi  dd ?    ;LSEEK High dword of the batch offset (0 unless net FS)
    35 0000001B <res 14h>           <1>     .wArgs      dw 10 dup (?) ;Offsets of parameters %0-%9. -1 means no param
    36                              <1>     .cmdLine:   ;0 terminated path (%0) followed by cmd line params.
    37                              <1>     ;We include terminating CR. Add null at the end to mean end of params.
    38                              <1> endstruc
    39                              <1> bbNoParam   equ -1
    40                              <1> bbNull      equ 0
    41                              <1> bbEchoOn    equ 1
    42                              <1> bbEchoOff   equ 0
    43                              <1> bbMaxAlloc  equ batBlockHdr_size + cmdBufferL + 1 ;Add 1 for good measure :)
    44                              <1> batNoEchoChar   equ "@" ;If a line starts with this, no echo!
    45                              <1> 
    46                              <1> 
    47                              <1> 
    48                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    49 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    50 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    51 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    52 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    53 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> struc execProg  ;For use with EXEC-ing a child task
    57 00000000 ????????????????    <1>     .pEnv       dq ?  ;Ptr to environment block (or 0 => copy parent env)
    58 00000008 ????????????????    <1>     .pCmdLine   dq ?  ;Ptr to the command line to be placed at PSP + 80h
    59 00000010 ????????????????    <1>     .pfcb1      dq ?  ;Ptr to the first FCB (parsed argument 1)
    60 00000018 ????????????????    <1>     .pfcb2      dq ?  ;Ptr to the second FCB  (parsed argument 2)
    61                              <1> endstruc
    62                              <1> 
    63                              <1> ;Directory attribute equates
    64                              <1>     dirReadOnly     equ 01h
    65                              <1>     dirHidden       equ 02h
    66                              <1>     dirSystem       equ 04h
    67                              <1>     dirVolumeID     equ 08h
    68                              <1>     dirDirectory    equ 10h
    69                              <1>     dirArchive      equ 20h
    70                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    71                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    72                              <1>     ;If any of the three bits are set, then ALL three bits are set
    73                              <1>     ; in addition to whatever the user passed to search for.
    74                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    75                              <1>     dirIncFiles     equ dirHidden | dirSystem
    12                                  Segment cmd align=1 valign=1
    13                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9B84E0000          <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 0000000000000000    <1> int2Epsp    dq 0    ;
     8 0000001F 0000000000000000    <1> int2Ersp    dq 0    ;Save the far Int 2E entry stack pointer!
     9 00000027 0000000000000000    <1> int2Edta    dq 0    ;
    10 0000002F 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    11 00000031 5C                  <1> pathSep     db "\"  ;Default path sep
    12 00000032 2F                  <1> switchChar  db "/"  ;Default switch char
    13                              <1> ;Static strings, not used in command line parsing
    14 00000033 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    14 0000003C 000000000000000000- <1>
    14 00000045 000000000000000000- <1>
    14 0000004E 000000000000000000- <1>
    14 00000057 0000                <1>
    15 00000059 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    15 00000062 000000000000000000- <1>
    15 0000006B 000000000000000000- <1>
    15 00000074 000000000000000000- <1>
    15 0000007D 000000000000000000- <1>
    15 00000086 000000000000000000- <1>
    15 0000008F 000000000000000000- <1>
    15 00000098 00000000            <1>
    16                              <1> ;=============================================================
    17 0000009C 00                  <1> statFlg1    db 0    ;Flags 1 for the command interpreter
    18                              <1> ;=============================================================
    19                              <1> permaShell  equ 1   ;Up if we are a permanent command interpreter
    20                              <1> inCtrlC     equ 2   ;Up if we are processing int 23h
    21                              <1> inSingle    equ 4   ;Up if processing a single command (/C mode)
    22                              <1> inBatch     equ 8   ;Up if processing a batch file
    23                              <1> batchEOF    equ 10h ;Set to indicate we have reached the end of the batch file
    24                              <1> inCritical  equ 20h ;Up if processing a command.
    25                              <1> inLdrDT     equ 40h ;Up if in the Date / Time part of Loader
    26                              <1> inLdr       equ 80h ;Up if in loader
    27 0000009D FF                  <1> failDrv     db -1   ;0 based drive number. Used to identify if drv bad
    28 0000009E 01                  <1> echoFlg     db 1    ;Global Echo flag, starts up! 1 means on
    29 0000009F FFFF                <1> errHdls     dw -1   ;Set to the STDIO handles. Non -1 => Handles swapped
    30                              <1> ;==============================================================================
    31                              <1> ; Do not split the blocks below!
    32                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    33                              <1> cmdLineStatePtr:
    34 000000A1 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    35 000000A2 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    36 000000A4 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    37                              <1> ;These variables are valid for a SINGLE command in a command line
    38                              <1> ;Next two bytes, if set to -1, flags error
    39 000000A6 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    40 000000A7 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    41                              <1> ;                    If 2, we are redirecting output to a file, by appending
    42 000000A8 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    43 000000AA FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    44                              <1> ;------------------------------------------------------------------------------
    45                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    46 000000AC 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    47 000000AD 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    48 000000AE 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    49                              <1> 
    50 000000AF 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    51 000000B0 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    52 000000B1 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    53                              <1> 
    54 000000B2 00                  <1> switchFnd   db 0    ;Set if a switch char is found
    55                              <1> cmdStateL equ $ - cmdStatePtr
    56                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    57                              <1> ;------------------------------------------------------------------------------
    58                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    59                              <1> ;Batch state variables.
    60 000000B3 0000000000000000    <1> bbPtr       dq 0    ;Ptr to the batch block
    61 000000BB 000000000000000000- <1> batFile     db fileSpecZL dup (0)   ;Path to bat to execute. Qual with path!
    61 000000C4 000000000000000000- <1>
    61 000000CD 000000000000000000- <1>
    61 000000D6 000000000000000000- <1>
    61 000000DF 000000000000000000- <1>
    61 000000E8 000000000000000000- <1>
    61 000000F1 000000000000000000- <1>
    61 000000FA 000000000000000000- <1>
    61 00000103 00000000000000      <1>
    62 0000010A 0201200D            <1> batYNstr    db 2,1," ",CR           ;String for buffered Y/N input
    63 0000010E 00                  <1> ifFlg       db 0                    ;Flags for IF
    64                              <1> ifReset     equ 0                   ;Value to reset the flags
    65                              <1> ifNot       equ 1                   ;Set if NOT encountered
    66                              <1> ifCond      equ 2                   ;Set if condition encountered              
    67                              <1> 
    68                              <1> ;Structs and strings
    69 0000010F 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    69 00000118 00000000000000      <1>
    70 0000011F 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    70 00000128 000000000000000000- <1>
    70 00000131 000000000000000000- <1>
    70 0000013A 000000000000000000- <1>
    70 00000143 00000000000000      <1>
    71                              <1> 
    72 0000014A 000000000000000000- <1> launchBlock db execProg_size dup (0)
    72 00000153 000000000000000000- <1>
    72 0000015C 000000000000000000- <1>
    72 00000165 0000000000          <1>
    73                              <1> 
    74                              <1> ;Use the below figure for the buffer "length" (byte 0) as this will allow 
    75                              <1> ; for us to type 127 characters plus a mandatory terminating 128th <CR>. 
    76                              <1> ; This will always be ok for copying to the PSP as on the PSP we have space for
    77                              <1> ; 127 chars. If we type 128 chars with terminating <CR>, the command name must be 
    78                              <1> ; at least 1 character long. The tail is formed of the remaining chars, so there
    79                              <1> ; will be at least 127 chars left. Thus we always have enough space.
    80                              <1> inLen   equ 128 
    81                              <1> batCpyBuffer:   ;Ptr to the buffer to drop the processed line into
    82 0000016A 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)   ;Original input from user! 128 chars max!
    82 00000173 000000000000000000- <1>
    82 0000017C 000000000000000000- <1>
    82 00000185 000000000000000000- <1>
    82 0000018E 000000000000000000- <1>
    82 00000197 000000000000000000- <1>
    82 000001A0 000000000000000000- <1>
    82 000001A9 000000000000000000- <1>
    82 000001B2 000000000000000000- <1>
    82 000001BB 000000000000000000- <1>
    82 000001C4 000000000000000000- <1>
    82 000001CD 000000000000000000- <1>
    82 000001D6 000000000000000000- <1>
    82 000001DF 000000000000000000- <1>
    82 000001E8 00000000            <1>
    83                              <1> batInBuffer:    ;Ptr to the buffer for batch input
    84 000001EC 000000000000000000- <1> cpyBuffer   db cmdBufferL dup (0)   ;Copied input for processing
    84 000001F5 000000000000000000- <1>
    84 000001FE 000000000000000000- <1>
    84 00000207 000000000000000000- <1>
    84 00000210 000000000000000000- <1>
    84 00000219 000000000000000000- <1>
    84 00000222 000000000000000000- <1>
    84 0000022B 000000000000000000- <1>
    84 00000234 000000000000000000- <1>
    84 0000023D 000000000000000000- <1>
    84 00000246 000000000000000000- <1>
    84 0000024F 000000000000000000- <1>
    84 00000258 000000000000000000- <1>
    84 00000261 000000000000000000- <1>
    84 0000026A 00000000            <1>
    85 0000026E 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)   ;Buffer with the command pipeline
    85 00000277 000000000000000000- <1>
    85 00000280 000000000000000000- <1>
    85 00000289 000000000000000000- <1>
    85 00000292 000000000000000000- <1>
    85 0000029B 000000000000000000- <1>
    85 000002A4 000000000000000000- <1>
    85 000002AD 000000000000000000- <1>
    85 000002B6 000000000000000000- <1>
    85 000002BF 000000000000000000- <1>
    85 000002C8 000000000000000000- <1>
    85 000002D1 000000000000000000- <1>
    85 000002DA 000000000000000000- <1>
    85 000002E3 000000000000000000- <1>
    85 000002EC 00000000            <1>
    86 000002F0 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)   ;Space for full path to a ext cmd
    86 000002F9 000000000000000000- <1>
    86 00000302 000000000000000000- <1>
    86 0000030B 000000000000000000- <1>
    86 00000314 000000000000000000- <1>
    86 0000031D 000000000000000000- <1>
    86 00000326 000000000000000000- <1>
    86 0000032F 000000000000000000- <1>
    86 00000338 00000000000000      <1>
    87 0000033F 000000000000000000- <1> cmdName     db cmdNameL dup (0)     ;Cmd name prefixed by length 
    87 00000348 0000000000          <1>
    88                              <1> 
    89 0000034D 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    89 00000356 000000000000000000- <1>
    89 0000035F 000000000000000000- <1>
    89 00000368 000000000000000000- <1>
    89 00000371 000000000000000000- <1>
    89 0000037A 000000000000000000- <1>
    89 00000383 000000000000000000- <1>
    89 0000038C 000000000000000000- <1>
    89 00000395 00000000000000      <1>
    90 0000039C 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    90 000003A5 000000000000000000- <1>
    90 000003AE 000000000000000000- <1>
    90 000003B7 000000000000000000- <1>
    90 000003C0 000000000000000000- <1>
    90 000003C9 000000000000000000- <1>
    90 000003D2 000000000000000000- <1>
    90 000003DB 000000000000000000- <1>
    90 000003E4 00000000000000      <1>
    91                              <1> 
    92                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    93 000003EB 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    93 000003F4 000000000000000000- <1>
    93 000003FD 000000000000000000- <1>
    93 00000406 000000000000000000- <1>
    93 0000040F 000000000000000000- <1>
    93 00000418 000000000000000000- <1>
    93 00000421 000000000000000000- <1>
    93 0000042A 000000000000000000- <1>
    93 00000433 00000000000000      <1>
    94 0000043A 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    94 00000443 000000000000000000- <1>
    94 0000044C 000000000000000000- <1>
    94 00000455 000000000000000000- <1>
    94 0000045E 000000000000000000- <1>
    94 00000467 000000000000000000- <1>
    94 00000470 000000000000000000- <1>
    94 00000479 000000000000000000- <1>
    94 00000482 00000000000000      <1>
    95                              <1> 
    96 00000489 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    97 00000491 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    98                              <1> 
    99                              <1> ;Main scratch buffer for forming paths! Needs to be large enough to splice
   100                              <1> ; a really long invalid DOS path for PATH to work properly.
   101 00000499 000000000000000000- <1> searchSpec  db 2*cmdBufferL dup (0)   
   101 000004A2 000000000000000000- <1>
   101 000004AB 000000000000000000- <1>
   101 000004B4 000000000000000000- <1>
   101 000004BD 000000000000000000- <1>
   101 000004C6 000000000000000000- <1>
   101 000004CF 000000000000000000- <1>
   101 000004D8 000000000000000000- <1>
   101 000004E1 000000000000000000- <1>
   101 000004EA 000000000000000000- <1>
   101 000004F3 000000000000000000- <1>
   101 000004FC 000000000000000000- <1>
   101 00000505 000000000000000000- <1>
   101 0000050E 000000000000000000- <1>
   101 00000517 000000000000000000- <1>
   101 00000520 000000000000000000- <1>
   101 00000529 000000000000000000- <1>
   101 00000532 000000000000000000- <1>
   101 0000053B 000000000000000000- <1>
   101 00000544 000000000000000000- <1>
   101 0000054D 000000000000000000- <1>
   101 00000556 000000000000000000- <1>
   101 0000055F 000000000000000000- <1>
   101 00000568 000000000000000000- <1>
   101 00000571 000000000000000000- <1>
   101 0000057A 000000000000000000- <1>
   101 00000583 000000000000000000- <1>
   101 0000058C 000000000000000000- <1>
   101 00000595 0000000000000000    <1>
   102                              <1> 
   103                              <1> ;Internal Function vars
   104                              <1> ;Dir Vars
   105 0000059D 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
   106                              <1> ;                                   Bit[1] set => /P or /p specified
   107                              <1> ;                                   Bit[2] set => A file/path specified
   108 0000059E 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
   109 0000059F 00000000            <1> dirFileCtr  dd 0    ;Used in /W mode, rollover after 5
   110 000005A3 00                  <1> dirDrv      db 0    ;0 based drive number to use
   111 000005A4 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
   111 000005AD 000000000000000000- <1>
   111 000005B6 000000000000000000- <1>
   111 000005BF 000000000000000000- <1>
   111 000005C8 000000000000000000- <1>
   111 000005D1 000000000000000000- <1>
   111 000005DA 000000000000000000- <1>
   111 000005E3 000000000000000000- <1>
   111 000005EC 000000000000000000- <1>
   111 000005F5 000000000000000000- <1>
   111 000005FE 000000000000000000- <1>
   111 00000607 000000000000000000- <1>
   111 00000610 000000000000000000- <1>
   111 00000619 000000000000000000- <1>
   111 00000622 00000000            <1>
   112 00000626 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
   112 0000062F 3F3F3F3F3F3F3F      <1>
   113                              <1> dirWideType equ 1
   114                              <1> dirPageType equ 2
   115                              <1> dirFileType equ 4
   116                              <1> ;Volume Vars
   117                              <1> volFcb:
   118                              <1>     istruc exFcb
   119 00000636 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
   120 00000637 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
   121 0000063D 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
   122 0000063E 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
   123 00000646 3F3F3F              <1>     at exFcb.fileext,   db "???"
   124 00000649 00000000            <1>     at exFcb.curBlock,  dd 0
   125 0000064D 00<rep 15h>         <1>     iend 
   126                              <1> 
   127                              <1> ;Time/Date vars
   128 00000662 00                  <1> td1 db 0    ;Minutes/Year
   129 00000663 00                  <1> td2 db 0    ;Hours/Zero
   130 00000664 00                  <1> td3 db 0    ;Hundredths/Day
   131 00000665 00                  <1> td4 db 0    ;Seconds/Month
   132                              <1> 
   133                              <1> ;Rename/Copy/Delete Buffers
   134                              <1> delPath:
   135                              <1> comspecDir:    ;Used to store the directory passed during startup
   136 00000666 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   136 0000066F 000000000000000000- <1>
   136 00000678 000000000000000000- <1>
   136 00000681 000000000000000000- <1>
   136 0000068A 000000000000000000- <1>
   136 00000693 000000000000000000- <1>
   136 0000069C 000000000000000000- <1>
   136 000006A5 000000000000000000- <1>
   136 000006AE 000000000000000000- <1>
   136 000006B7 000000000000000000- <1>
   136 000006C0 000000000000000000- <1>
   136 000006C9 000000000000000000- <1>
   136 000006D2 000000000000000000- <1>
   136 000006DB 000000000000000000- <1>
   136 000006E4 00000000            <1>
   137 000006E8 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   137 000006F1 000000000000000000- <1>
   137 000006FA 000000000000000000- <1>
   137 00000703 000000000000000000- <1>
   137 0000070C 000000000000000000- <1>
   137 00000715 000000000000000000- <1>
   137 0000071E 000000000000000000- <1>
   137 00000727 000000000000000000- <1>
   137 00000730 000000000000000000- <1>
   137 00000739 000000000000000000- <1>
   137 00000742 000000000000000000- <1>
   137 0000074B 000000000000000000- <1>
   137 00000754 000000000000000000- <1>
   137 0000075D 000000000000000000- <1>
   137 00000766 00000000            <1>
   138 0000076A 0000000000000000    <1> srcPtr      dq 0    ;Where to copy pattern to in src path
   139 00000772 0000000000000000    <1> destPtr     dq 0    ;Where to copy pattern to in dest path
   140 0000077A 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   140 00000783 2020                <1>
   141                              <1> ;Copy vars
   142 00000785 00                  <1> verifyFlg   db 0    ;Set if verify on before copy
   143 00000786 FFFF                <1> sourceHdl   dw -1
   144 00000788 FFFF                <1> destHdl     dw -1
   145 0000078A 0000                <1> srcHdlInfo  dw 0    ;Save the hdl device info (bit 7 Set -> Char dev)
   146 0000078C 0000000000000000    <1> cpBufPtr    dq 0    ;Ptr to the xfr arena
   147 00000794 0000                <1> wCpBufSz    dw 0    ;Copy Buffer size, max 4096 bytes
   148 00000796 00000000            <1> dCpCnt      dd 0    ;Number of files we have copied
   149 0000079A 00                  <1> bCpFlg      db 0    ;Copy state flag
   150                              <1> 
   151                              <1> ascSrc      equ 1   ;Set if ascii copy for this source file.
   152                              <1> binSrc      equ 2   ;Set if last encountered src file flag was binary
   153                              <1> ascDes      equ 4   ;Set if add ^Z at end of file. Clear if not!
   154                              <1> wcSrc       equ 8   ;Set if wc's in source pattern. Display source file names.
   155                              <1> oneDest     equ 10h ;Single destination, not dir 
   156                              <1> mod1Cpy     equ 20h ;Set if copying files to new dir with same names
   157                              <1> mod2Cpy     equ 40h ;Set if copying files with new names
   158                              <1> mod3Cpy     equ 80h ;Set if dflt cat ASCII files to a single destination
   159                              <1> 
   160                              <1> ;Environment manipulation vars
   161 0000079B 0000                <1> envVarSz        dw 0    ;Env var size
   162 0000079D 0000                <1> envVarNamSz     dw 0    ;Env var "name="" length
    14                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 0000079F 03444952            <1>     db 3, "DIR"
     8 000007A3 B920                <1>     dw dir - startLbl
     9                              <1> 
    10 000007A5 024344              <1>     db 2, "CD"
    11 000007A8 5C25                <1>     dw chdir - startLbl
    12                              <1> 
    13 000007AA 054348444952        <1>     db 5, "CHDIR"
    14 000007B0 5C25                <1>     dw chdir - startLbl
    15                              <1> 
    16 000007B2 024D44              <1>     db 2, "MD"
    17 000007B5 D725                <1>     dw mkdir - startLbl
    18                              <1> 
    19 000007B7 054D4B444952        <1>     db 5, "MKDIR"
    20 000007BD D725                <1>     dw mkdir - startLbl
    21                              <1> 
    22 000007BF 025244              <1>     db 2, "RD"
    23 000007C2 2026                <1>     dw rmdir - startLbl
    24                              <1> 
    25 000007C4 05524D444952        <1>     db 5, "RMDIR"
    26 000007CA 2026                <1>     dw rmdir - startLbl
    27                              <1> 
    28 000007CC 0344454C            <1>     db 3, "DEL"
    29 000007D0 DA2D                <1>     dw erase - startLbl
    30                              <1> 
    31 000007D2 054552415345        <1>     db 5, "ERASE"
    32 000007D8 DA2D                <1>     dw erase - startLbl
    33                              <1> 
    34 000007DA 0444415445          <1>     db 4, "DATE"
    35 000007DF 182F                <1>     dw date - startLbl
    36                              <1> 
    37 000007E1 0454494D45          <1>     db 4, "TIME"
    38 000007E6 C630                <1>     dw time - startLbl
    39                              <1> 
    40 000007E8 04434F5059          <1>     db 4, "COPY"
    41 000007ED 6A26                <1>     dw copy - startLbl
    42                              <1> 
    43 000007EF 0443545459          <1>     db 4, "CTTY"
    44 000007F4 EF31                <1>     dw ctty - startLbl
    45                              <1> 
    46 000007F6 03434C53            <1>     db 3, "CLS"
    47 000007FA 9632                <1>     dw cls - startLbl
    48                              <1> 
    49 000007FC 05425245414B        <1>     db 5, "BREAK"
    50 00000802 0F33                <1>     dw break - startLbl
    51                              <1> 
    52 00000804 06564552494659      <1>     db 6, "VERIFY"
    53 0000080B 9033                <1>     dw verify - startLbl
    54                              <1> 
    55 0000080D 0652454E414D45      <1>     db 6, "RENAME"
    56 00000814 0D34                <1>     dw rename - startLbl
    57                              <1> 
    58 00000816 0352454E            <1>     db 3, "REN"
    59 0000081A 0D34                <1>     dw rename - startLbl
    60                              <1>     
    61 0000081C 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 00000825 4436                <1>     dw truename - startLbl
    63                              <1> 
    64 00000827 03564552            <1>     db 3, "VER"
    65 0000082B 4F37                <1>     dw version - startLbl
    66                              <1> 
    67 0000082D 03564F4C            <1>     db 3, "VOL"
    68 00000831 9536                <1>     dw volume - startLbl
    69                              <1> 
    70 00000833 034D454D            <1>     db 3, "MEM"
    71 00000837 9337                <1>     dw memory - startLbl
    72                              <1> 
    73 00000839 0445584954          <1>     db 4, "EXIT"
    74 0000083E 9539                <1>     dw exit - startLbl
    75                              <1> 
    76 00000840 0454595045          <1>     db 4, "TYPE"
    77 00000845 E238                <1>     dw type - startLbl
    78                              <1> 
    79 00000847 0450415448          <1>     db 4, "PATH"
    80 0000084C DB3C                <1>     dw pathEdit - startLbl
    81                              <1> 
    82 0000084E 03534554            <1>     db 3, "SET"
    83 00000852 BC3B                <1>     dw set - startLbl
    84                              <1> 
    85 00000854 0650524F4D5054      <1>     db 6, "PROMPT"
    86 0000085B BA3D                <1>     dw prompt - startLbl
    87                              <1> 
    88                              <1> ;BATCH ORIENTED COMMANDS HERE
    89 0000085D 044543484F          <1>     db 4, "ECHO"
    90 00000862 2A3E                <1>     dw echo - startLbl
    91                              <1> 
    92 00000864 055041555345        <1>     db 5, "PAUSE"
    93 0000086A 063F                <1>     dw pauza - startLbl
    94                              <1> 
    95 0000086C 0352454D            <1>     db 3, "REM"
    96 00000870 503F                <1>     dw remark - startLbl
    97                              <1> 
    98 00000872 04474F544F          <1>     db 4, "GOTO"
    99 00000877 B23F                <1>     dw goto - startLbl
   100                              <1> 
   101 00000879 055348494654        <1>     db 5, "SHIFT"
   102 0000087F 653F                <1>     dw shift - startLbl
   103                              <1> 
   104 00000881 024946              <1>     db 2, "IF"
   105 00000884 F240                <1>     dw ifCmd - startLbl
   106                              <1> ;-----------------------------
   107                              <1> ; Commands left to implement 
   108                              <1> ;-----------------------------
   109 00000886 03464F52            <1>     db 3, "FOR"
   110 0000088A 3942                <1>     dw forCmd - startLbl
   111                              <1> ;-----------------------------
   112 0000088C FF                  <1>     db -1   ;End of table
   113                              <1> 
   114                              <1> ;Easy table to use, 13 entries, 3 bytes per entry
   115                              <1> pTbl:
   116 0000088D 42                  <1>     db "B", 
   117 0000088E 213C                <1>     dw putPipeInPrompt - pTbl     ;Pipe char
   118 00000890 44                  <1>     db "D", 
   119 00000891 203D                <1>     dw printFmtDate - pTbl        ;Current date
   120 00000893 45                  <1>     db "E", 
   121 00000894 153C                <1>     dw putEscInPrompt - pTbl      ;ANSI Escape char
   122 00000896 47                  <1>     db "G", 
   123 00000897 253C                <1>     dw putGTinPrompt - pTbl       ;Greater than char
   124 00000899 48                  <1>     db "H", 
   125 0000089A 2D3C                <1>     dw putBSPinPrompt - pTbl      ;Backspace
   126 0000089C 4C                  <1>     db "L", 
   127 0000089D 293C                <1>     dw putLTinPrompt - pTbl       ;Less than char
   128 0000089F 4E                  <1>     db "N", 
   129 000008A0 463C                <1>     dw putDriveInPrompt - pTbl    ;Current drive letter
   130 000008A2 50                  <1>     db "P", 
   131 000008A3 543C                <1>     dw putCWDInPrompt - pTbl      ;Current drive and path
   132 000008A5 51                  <1>     db "Q", 
   133 000008A6 1D3C                <1>     dw putEquInPrompt - pTbl      ;Equals char
   134 000008A8 54                  <1>     db "T", 
   135 000008A9 B73C                <1>     dw printFmtTime - pTbl        ;Current time in hh:mm:ss.hh fmt
   136 000008AB 56                  <1>     db "V", 
   137 000008AC E73B                <1>     dw putVersionInPrompt - pTbl  ;DOS version number
   138 000008AE 5F                  <1>     db "_", 
   139 000008AF D83B                <1>     dw printCRLF - pTbl           ;CRLF pair
   140 000008B1 24                  <1>     db "$", 
   141 000008B2 193C                <1>     dw putMoneyInPrompt - pTbl    ;Dollar sign
   142                              <1> pTblL equ $ - pTbl
    15                                  %include "./Data/cmdStr.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 000008B4 0D0A24              <1> crlf    db  CR,LF,"$"
     3 000008B7 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 000008BC 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 000008C5 696C65206D69737369- <1>
     4 000008CE 6E670D0A24          <1>
     5 000008D3 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 000008DC 6469736B2077697468- <1>
     5 000008E5 206261746368206669- <1>
     5 000008EE 6C65                <1>
     6 000008F0 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 000008F9 737320616E79206B65- <1>
     6 00000902 79207768656E207265- <1>
     6 0000090B 6164790D0A24        <1>
     7 00000911 0D0A5465726D696E61- <1> batFail db  CR,LF,"Terminate batch job (Y/N)? $"
     7 0000091A 746520626174636820- <1>
     7 00000923 6A6F622028592F4E29- <1>
     7 0000092C 3F2024              <1>
     8 0000092F 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     8 00000938 6E64206F722066696C- <1>
     8 00000941 65206E616D650D0A24  <1>
     9 0000094A 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     9 00000953 2066696C65206E616D- <1>
     9 0000095C 65206F7220          <1>
    10 00000961 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    10 0000096A 666F756E640D0A24    <1>
    11 00000972 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full.
    11 0000097B 656E74206469736B20- <1>
    11 00000984 73706163650D0A24    <1>
    12 0000098C 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    12 00000995 7669726F6E6D656E74- <1>
    12 0000099E 2073706163650D0A24  <1>
    13 000009A7 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    13 000009B0 74696F6E206572726F- <1>
    13 000009B9 720D0A24            <1>
    14 000009BD 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    14 000009C6 6F7420626520636F70- <1>
    14 000009CF 696564206F6E746F20- <1>
    14 000009D8 697473656C660D0A24  <1>
    15 000009E1 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    15 000009EA 662064657374696E61- <1>
    15 000009F3 74696F6E206C6F7374- <1>
    15 000009FC 206265666F72652063- <1>
    15 00000A05 6F70790D0A24        <1>
    16                              <1> ;Copy end message. First write # files copied then this message 
    17 00000A0B 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    17 00000A14 636F706965640D0A24  <1>
    18 00000A1D 4E6F7420656E6F7567- <1> cpNoMem db  "Not enough memory for COPY",CR,LF,"$"      ;Never should happen
    18 00000A26 68206D656D6F727920- <1>
    18 00000A2F 666F7220434F50590D- <1>
    18 00000A38 0A24                <1>
    19                              <1> ;Dir end1 msg. First write # files in dir then this
    20 00000A3A 2046696C6528732920- <1> dirOk   db  " File(s) $"
    20 00000A43 24                  <1>
    21                              <1> ;Dir end2 msg. First write # bytes free then this message
    22 00000A44 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    22 00000A4D 65650D0A24          <1>
    23 00000A52 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    24                              <1> 
    25 00000A5B 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    25 00000A64 726976652073706563- <1>
    25 00000A6D 696669636174696F6E- <1>
    25 00000A76 0D0A24              <1>
    26 00000A79 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    26 00000A82 6B6579207768656E20- <1>
    26 00000A8B 7265616479202E202E- <1>
    26 00000A94 202E2024            <1>
    27 00000A98 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    27 00000AA1 6172616D657465720D- <1>
    27 00000AAA 0A24                <1>
    28                              <1> 
    29 00000AAC 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    29 00000AB5 576564546875467269- <1>
    29 00000ABE 536174              <1>
    30 00000AC1 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    30 00000ACA 206461746524        <1>
    31 00000AD0 43757272656E742064- <1> curDate db  "Current date is $"
    31 00000AD9 6174652069732024    <1>
    32 00000AE1 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    32 00000AEA 657720646174652024  <1>
    33 00000AF3 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    33 00000AFC 293A2024            <1>
    34 00000B00 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    34 00000B09 293A2024            <1>
    35 00000B0D 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    35 00000B16 293A2024            <1>
    36 00000B1A 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    36 00000B23 2074696D6524        <1>
    37 00000B29 43757272656E742074- <1> curTime db  "Current time is $"
    37 00000B32 696D652069732024    <1>
    38 00000B3A 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    38 00000B43 65772074696D653A20- <1>
    38 00000B4C 24                  <1>
    39                              <1> 
    40 00000B4D 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    40 00000B56 7572652028592F4E29- <1>
    40 00000B5F 3F2024              <1>
    41                              <1> 
    42 00000B62 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    42 00000B6B 56657273696F6E2024  <1>
    43                              <1> 
    44 00000B74 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    44 00000B7D 6E2064726976652024  <1>
    45 00000B86 2069732024          <1> volOk   db " is $"
    46 00000B8B 20686173206E6F206C- <1> volNo   db " has no label$"
    46 00000B94 6162656C24          <1>
    47                              <1> 
    48 00000B99 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    48 00000BA2 69726563746F72790D- <1>
    48 00000BAB 0A24                <1>
    49 00000BAD 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    49 00000BB6 206372656174652064- <1>
    49 00000BBF 69726563746F72790D- <1>
    49 00000BC8 0A24                <1>
    50 00000BCA 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    50 00000BD3 6174682C206E6F7420- <1>
    50 00000BDC 6469726563746F7279- <1>
    50 00000BE5 2C0D0A              <1>
    51 00000BE8 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    51 00000BF1 6F7279206E6F742065- <1>
    51 00000BFA 6D7074790D0A24      <1>
    52 00000C01 204469726563746F72- <1> dirMain db " Directory of  $"
    52 00000C0A 79206F66202024      <1>
    53 00000C11 4E6F20506174682024  <1> noPath  db "No Path $"
    54 00000C1A 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    54 00000C23 6E6965640D0A24      <1>
    55 00000C2A 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    55 00000C33 72697665206973206E- <1>
    55 00000C3C 6F206C6F6E67657220- <1>
    55 00000C45 76616C696424        <1>
    56                              <1> ;badDrvSrch  db "Invalid drive in search path",CR,LF,"$"        ;MAY REMOVE
    57 00000C4B 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    57 00000C54 65766963650D0A24    <1>
    58 00000C5C 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    58 00000C65 20666F756E640D0A24  <1>
    59 00000C6E 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    59 00000C77 726F720D0A24        <1>
    60 00000C7D 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    60 00000C86 6F74206265206E6573- <1>
    60 00000C8F 7465640D0A24        <1>
    61 00000C95 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    61 00000C9E 6174652066696C6520- <1>
    61 00000CA7 6572726F7220647572- <1>
    61 00000CB0 696E6720706970650D- <1>
    61 00000CB9 0A24                <1>
    62 00000CBB 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    62 00000CC4 2062696E6172792072- <1>
    62 00000CCD 656164732066726F6D- <1>
    62 00000CD6 206120646576696365- <1>
    62 00000CDF 0D0A24              <1>
    63 00000CE2 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    64 00000CE8 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    65 00000CED 425245414B20697320- <1> breakIs db "BREAK is $"
    65 00000CF6 24                  <1>
    66 00000CF7 564552494659206973- <1> verifyIs    db "VERIFY is $"
    66 00000D00 2024                <1>
    67 00000D02 4543484F2069732024  <1> echoIs  db "ECHO is $"  
    68 00000D0B 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    68 00000D14 617468206F72206669- <1>
    68 00000D1D 6C65206E616D650D0A- <1>
    68 00000D26 24                  <1>
    69 00000D27 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    69 00000D30 756D626572206F6620- <1>
    69 00000D39 706172616D65746572- <1>
    69 00000D42 730D0A24            <1>
    70 00000D46 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    70 00000D4F 74696E6720746F2064- <1>
    70 00000D58 6576696365          <1>
    71 00000D5D 08200800            <1> backSpace   db BSP," ",BSP,NUL
    72 00000D61 50726F6772616D2074- <1> noMemMsg    db "Program too big to fit in memory",CR,LF,"$"
    72 00000D6A 6F6F2062696720746F- <1>
    72 00000D73 2066697420696E206D- <1>
    72 00000D7C 656D6F72790D0A24    <1>
    73 00000D84 4E4F5400            <1> notString   db "NOT",0
    74 00000D88 4552524F524C455645- <1> errlvlStr   db "ERRORLEVEL",0
    74 00000D91 4C00                <1>
    75 00000D93 455849535400        <1> existStr    db "EXIST",0
    76                              <1> 
    77 00000D99 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    77 00000DA2 20202020202020546F- <1>
    77 00000DAB 74616C207379737465- <1>
    77 00000DB4 6D206D656D6F72793A- <1>
    77 00000DBD 2024                <1>
    78 00000DBF 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    78 00000DC8 20202020202020204D- <1>
    78 00000DD1 656D6F727920757365- <1>
    78 00000DDA 6420627920444F533A- <1>
    78 00000DE3 2024                <1>
    79 00000DE5 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    79 00000DEE 656D6F727920757365- <1>
    79 00000DF7 64206279206170706C- <1>
    79 00000E00 69636174696F6E733A- <1>
    79 00000E09 2024                <1>
    80 00000E0B 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    80 00000E14 656D6F727920726573- <1>
    80 00000E1D 657276656420627920- <1>
    80 00000E26 68617264776172653A- <1>
    80 00000E2F 2024                <1>
    81 00000E31 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    81 00000E3A 202020202020202020- <1>
    81 00000E43 2020202020204D656D- <1>
    81 00000E4C 6F727920667265653A- <1>
    81 00000E55 2024                <1>
    82 00000E57 20627974657324      <1> memByte db " bytes$"
    83 00000E5E 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    83 00000E67 6F7420417373657274- <1>
    83 00000E70 61696E20444F532045- <1>
    83 00000E79 6E74727920506F696E- <1>
    83 00000E82 7424                <1>
    84 00000E84 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    84 00000E8D 416C6C6F636174696F- <1>
    84 00000E96 6E204572726F7224    <1>
    85 00000E9E 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    85 00000EA7 4572726F7224        <1>
    86 00000EAD 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    86 00000EB6 68616C74656424      <1>
    87                              <1> 
    88 00000EBD 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    88 00000EC6 206372656174652070- <1>
    88 00000ECF 6970650D0A          <1>
    89                              <1> pipeErrMsgL equ $ - pipeErrMsg
    90 00000ED4 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    90 00000EDD 6F6E206572726F720D- <1>
    90 00000EE6 0A                  <1>
    91                              <1> redirErrMsgL   equ $ - redirErrMsg
    92                              <1> 
    93 00000EE7 1B5B324A            <1> ansiCls  db ESC,"[2J" ;ANSI CLS sequence, 4 chars long
    94 00000EEB 2020202024          <1> fourSpc  db "    $"
    95 00000EF0 20202024            <1> threeSpc db "   $"
    96 00000EF4 202024              <1> twoSpc   db "  $"
    97                              <1> 
    98 00000EF7 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    98 00000F00 696679204F4E206F72- <1>
    98 00000F09 204F46460D0A24      <1>
    99                              <1> 
   100 00000F10 50524F4D50543D0D    <1> promptEVar  db "PROMPT=",CR     ;Must be CR terminated!
   101 00000F18 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
   102                              <1> ;If anything goes wrong with piping or redirecting just close first two 
   103                              <1> ; handles and reopen this device. Defaults to CON
   104 00000F21 434F4E000000000000  <1> devName db "CON", 6 dup (0) ;8 chars + space for null terminator
   105 00000F2A 5F3A5C4155544F4558- <1> autoSpec    db "_:\AUTOEXEC.BAT",0
   105 00000F33 45432E42415400      <1>
   106                              <1> autoSpecL equ $ - autoSpec
   107 00000F3A 504154483D00        <1> pathEVar    db "PATH=",0
   108 00000F40 434F4D535045433D00  <1> comspecEVar db "COMSPEC=",0
   109 00000F49 434F4D4D414E442E43- <1> cspec   db "COMMAND.COM", 0
   109 00000F52 4F4D00              <1>
   110                              <1> 
   111                              <1> ;Int 24h strings
   112                              <1> errMsgPtrTbl:
   113 00000F55 2400                <1>     dw errorMsgTbl.0 - errMsgPtrTbl
   114 00000F57 3400                <1>     dw errorMsgTbl.1 - errMsgPtrTbl
   115 00000F59 4200                <1>     dw errorMsgTbl.2 - errMsgPtrTbl
   116 00000F5B 4D00                <1>     dw errorMsgTbl.3 - errMsgPtrTbl
   117 00000F5D 5E00                <1>     dw errorMsgTbl.4 - errMsgPtrTbl
   118 00000F5F 6400                <1>     dw errorMsgTbl.5 - errMsgPtrTbl
   119 00000F61 7100                <1>     dw errorMsgTbl.6 - errMsgPtrTbl
   120 00000F63 7700                <1>     dw errorMsgTbl.7 - errMsgPtrTbl
   121 00000F65 8600                <1>     dw errorMsgTbl.8 - errMsgPtrTbl
   122 00000F67 9800                <1>     dw errorMsgTbl.9 - errMsgPtrTbl
   123 00000F69 A600                <1>     dw errorMsgTbl.A - errMsgPtrTbl
   124 00000F6B B300                <1>     dw errorMsgTbl.B - errMsgPtrTbl
   125 00000F6D BF00                <1>     dw errorMsgTbl.C - errMsgPtrTbl
   126 00000F6F D000                <1>     dw errorMsgTbl.D - errMsgPtrTbl
   127 00000F71 E300                <1>     dw errorMsgTbl.E - errMsgPtrTbl
   128 00000F73 F300                <1>     dw errorMsgTbl.F - errMsgPtrTbl
   129 00000F75 1401                <1>     dw errorMsgTbl.10 - errMsgPtrTbl
   130 00000F77 2501                <1>     dw errorMsgTbl.11 - errMsgPtrTbl
   131                              <1> errorMsgTbl:
   132 00000F79 57726974652050726F- <1> .0: db "Write Proctect $"       ;Driver Error 0 / DOS Error 013h
   132 00000F82 63746563742024      <1>
   133 00000F89 556E6B6E6F776E2055- <1> .1: db "Unknown Unit $"         ;Driver Error 1 / DOS Error 014h
   133 00000F92 6E69742024          <1>
   134 00000F97 4E6F74205265616479- <1> .2: db "Not Ready $"            ;Driver Error 2 / DOS Error 015h
   134 00000FA0 2024                <1>
   135 00000FA2 556E6B6E6F776E2043- <1> .3: db "Unknown Command $"      ;Driver Error 3 / DOS Error 016h
   135 00000FAB 6F6D6D616E642024    <1>
   136 00000FB3 446174612024        <1> .4: db "Data $"                 ;Driver Error 4 / DOS Error 017h
   137 00000FB9 426164205265717565- <1> .5: db "Bad Request $"          ;Driver Error 5 / DOS Error 018h
   137 00000FC2 73742024            <1>
   138 00000FC6 5365656B2024        <1> .6: db "Seek $"                 ;Driver Error 6 / DOS Error 019h
   139 00000FCC 556E6B6E6F776E204D- <1> .7: db "Unknown Media $"        ;Driver Error 7 / DOS Error 01Ah
   139 00000FD5 656469612024        <1>
   140 00000FDB 536563746F72204E6F- <1> .8: db "Sector Not Found $"     ;Driver Error 8 / DOS Error 01Bh
   140 00000FE4 7420466F756E642024  <1>
   141 00000FED 4F7574204F66205061- <1> .9: db "Out Of Paper $"         ;Driver Error 9 / DOS Error 01Ch
   141 00000FF6 7065722024          <1>
   142 00000FFB 577269746520466175- <1> .A: db "Write Fault $"          ;Driver Error A / DOS Error 01Dh
   142 00001004 6C742024            <1>
   143 00001008 52656164204661756C- <1> .B: db "Read Fault $"           ;Driver Error B / DOS Error 01Eh
   143 00001011 742024              <1>
   144 00001014 47656E6572616C2046- <1> .C: db "General Failure $"      ;Driver Error C / DOS Error 01Fh
   144 0000101D 61696C7572652024    <1>
   145 00001025 53686172696E672076- <1> .D: db "Sharing violation $"    ;SHARE Error / DOS Error 020h
   145 0000102E 696F6C6174696F6E20- <1>
   145 00001037 24                  <1>
   146 00001038 4C6F636B2076696F6C- <1> .E: db "Lock violation $"       ;SHARE Error / DOS Error 021h
   146 00001041 6174696F6E2024      <1>
   147 00001048 506C6561736520496E- <1> .F: db "Please Insert disk "    ;Driver Error F / DOS Error 022h
   147 00001051 73657274206469736B- <1>
   147 0000105A 20                  <1>
   148 0000105B 202020202020202020- <1> .FVol:  db 11 dup (" ")         ; Volume name for disk. Setup before print
   148 00001064 2020                <1>
   149 00001066 0D0A24              <1>         db CR,LF,"$"
   150                              <1> ;Next two strings dont print any more information, such as reading/writing etc
   151 00001069 46434220756E617661- <1> .10:    db "FCB unavailable $"      ;FCB Error / DOS Error 023h - RESERVED
   151 00001072 696C61626C652024    <1>
   152 0000107A 53686172696E672062- <1> .11:    db "Sharing buffer error $" ;SHARE Error / Error 024h
   152 00001083 756666657220657272- <1>
   152 0000108C 6F722024            <1>
   153                              <1> 
   154                              <1> ;Anything above this is a generic network error.
   155 00001090 47656E6572616C204E- <1> genNetErr   db "General Network Error $"    ;All NET errors codes [32h, 58h]
   155 00001099 6574776F726B204572- <1>
   155 000010A2 726F722024          <1>
   156                              <1> 
   157                              <1> ;Rest of the Int 24h error messages go here
   158 000010A7 64726976652024      <1> drvMsg      db "drive $"
   159 000010AE 6572726F7220726561- <1> readMsg     db "error reading $"
   159 000010B7 64696E672024        <1>
   160 000010BD 6572726F7220777269- <1> writeMsg    db "error writing $"
   160 000010C6 74696E672024        <1>
   161 000010CC 41626F727424        <1> abortMsg    db "Abort$" 
   162 000010D2 49676E6F726524      <1> ignoreMsg   db "Ignore$"
   163 000010D9 526574727924        <1> retryMsg    db "Retry$"
   164 000010DF 4661696C24          <1> failMsg     db "Fail$"
   165 000010E4 2C2024              <1> betweenMsg  db ", $"
   166 000010E7 3F2024              <1> endMsg      db "? $"
   167 000010EA 49524146            <1> i24Resp     db "IRAF"   ;Abort Retry Ignore Fail
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1> ;Jumped to with edx=0 means no autoexec. edx=-1 means autoexec.
     3                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     4                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     5                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     6 000010EE 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     7 000010F1 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     8 000010F5 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     9 000010F8 B44A                <1>     mov ah, 4Ah ;Realloc
    10 000010FA 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    11 000010FD CD21                <1>     int 21h
    12 000010FF 85D2                <1>     test edx, edx   ;If zero, no autoexec or single command
    13 00001101 7432                <1>     jz commandMain
    14 00001103 E8F2090000          <1>     call getSetMainState    ;Ensure the buffers are ready to be used 
    15                              <1> ;If inSingle is set, cmd already in buffer and ready for processing  
    16 00001108 F6058DEFFFFF04      <1>     test byte [statFlg1], inSingle
    17 0000110F 0F8584000000        <1>     jnz commandMain.goSingle 
    18                              <1>     ;Only enter here if we are autoexec :)
    19 00001115 C6054FF0FFFF0F      <1>     mov byte [inBuffer + 1], autoSpecL - 1  ;Drop one from the count for CR
    20 0000111C 488D3507FEFFFF      <1>     lea rsi, autoSpec
    21 00001123 488D3D42F0FFFF      <1>     lea rdi, inBuffer + 2
    22 0000112A E84A350000          <1>     call strcpy
    23 0000112F C647FF0D            <1>     mov byte [rdi - 1], CR  ;Store a CR over the terminating null
    24 00001133 EB5B                <1>     jmp short commandMain.batProceed
    25                              <1> commandMain:
    26 00001135 488B25C9EEFFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    27 0000113C E8B9090000          <1>     call getSetMainState
    28                              <1> .inputMain:         ;Only reset once per line!
    29 00001141 F60554EFFFFF04      <1>     test byte [statFlg1], inSingle   ;If we here in single mode, time to exit
    30 00001148 0F8547280000        <1>     jnz exit
    31 0000114E E809330000          <1>     call printCRLFecho  ;Command complete, indicate with new line!
    32 00001153 B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    33 00001158 CD21                <1>     int 21h
    34 0000115A B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    35 0000115F BA01000000          <1>     mov edx, 1      ;Start new print job
    36 00001164 CD21                <1>     int 21h
    37                              <1> .inputGetAgain:
    38 00001166 E87E350000          <1>     call clearCommandLineState      ;Cleans all handles 5->MAX
    39                              <1> .inputGetCmdlineAgain:
    40 0000116B F6052AEFFFFF08      <1>     test byte [statFlg1], inBatch   ;If batch on, get the next line to execute
    41 00001172 0F85220C0000        <1>     jnz batNextLine
    42 00001178 E86D320000          <1>     call printPrompt    ;Ok we are gonna get more input, output prompt
    43 0000117D 488D15E6EFFFFF      <1>     lea rdx, inBuffer
    44 00001184 B8000A0000          <1>     mov eax, 0A00h      ;Do Buffered input
    45 00001189 CD21                <1>     int 21h
    46                              <1> .batProceedCrlf:
    47 0000118B E8D5320000          <1>     call printCRLF      ;Note we have accepted input
    48                              <1> .batProceed:            ;Jump here to copy the batch input line 
    49                              <1> ;First check we had something typed in of length greater than 0
    50 00001190 803DD4EFFFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    51 00001197 74D2                <1>     je .inputGetCmdlineAgain  ;If not, keep looping input
    52                              <1> .goSingle:
    53                              <1> ;Copy over the input text
    54 00001199 488D35CAEFFFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    55 000011A0 488D3D45F0FFFF      <1>     lea rdi, cpyBuffer
    56 000011A7 B982000000          <1>     mov ecx, cmdBufferL     ;Copy the buffer over to manipulate
    57 000011AC F3A4                <1>     rep movsb
    58 000011AE E870000000          <1>     call makeCmdBuffer      ;Preprocess the redir, make cmd buffer
    59                              <1>     ;Now check we aren't starting with a pipe or <CR> and treat differently
    60 000011B3 488D35B6F0FFFF      <1>     lea rsi, cmdBuffer + 2
    61 000011BA E8F8340000          <1>     call skipDelimiters
    62 000011BF 803E0D              <1>     cmp byte [rsi], CR      ;If the first non-delim is a CR, reject input!
    63 000011C2 74A2                <1>     je .inputGetAgain       ;Wipe redir flags and reobtain input!
    64 000011C4 803E7C              <1>     cmp byte [rsi], "|"     ;If the first non-delim is a pipe, syntax error!
    65 000011C7 0F84E2030000        <1>     je hardSynErr
    66                              <1> .pipeLoop:
    67 000011CD 4C8B053BEEFFFF      <1>     mov r8, qword [pspPtr]  ;Point back to home segment
    68 000011D4 E8A4000000          <1>     call makeCmdString      ;Makes the CR delimited command in psp
    69                              <1>     ;ZF here indicates if we are at the end of the command or nots
    70 000011D9 E869070000          <1>     call setupRedirandPipes ;Setup/advance pipes and redir as appropriate
    71 000011DE E8F3000000          <1>     call analyseCmdline     ;Setup cmdName and fcb for cmdBuffer portion
    72 000011E3 E84B020000          <1>     call doCommandLine      ;This preps and executes the command portion.
    73                              <1> .okRet:                     ;Normal return point for processing
    74 000011E8 E85F050000          <1>     call advanceRedir       ;Now advance and end redir if needed
    75 000011ED F605ADEEFFFFFF      <1>     test byte [pipeFlag], -1    ;If no pipes, reset state, accept new input
    76 000011F4 0F8447FFFFFF        <1>     jz .inputMain
    77                              <1>     ;Now we pull the commandline forwards. 
    78 000011FA E87E000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    79 000011FF 488D3D6AF0FFFF      <1>     lea rdi, cmdBuffer + 2
    80 00001206 4889F1              <1>     mov rcx, rsi
    81 00001209 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    82 0000120C 280D5DF0FFFF        <1>     sub byte [cmdBuffer + 1], cl    ;And erase from the count
    83 00001212 8A0D57F0FFFF        <1>     mov cl, byte [cmdBuffer + 1]
    84 00001218 FFC1                <1>     inc ecx     ;One more for the terminating char
    85 0000121A F3A4                <1>     rep movsb   ;Move the chars over    
    86 0000121C E8B7340000          <1>     call clearCommandState  ;Else, clear the command state and start again
    87 00001221 EBAA                <1>     jmp short .pipeLoop     ;Doesn't close handles above 5 until end of pipe!
    88                              <1> 
    89                              <1> makeCmdBuffer:
    90                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    91                              <1> ; copy buffer. Called only once in a cycle.
    92                              <1> ;Throughout: CL has char count, CH has quote count
    93 00001223 488D35C4EFFFFF      <1>     lea rsi, [cpyBuffer + 2]    ;Goto copy buffer + 2
    94 0000122A 31C9                <1>     xor ecx, ecx
    95 0000122C 4889F7              <1>     mov rdi, rsi    ;Save the pointer
    96                              <1> .countQuotes:
    97 0000122F AC                  <1>     lodsb
    98 00001230 3C22                <1>     cmp al, '"'
    99 00001232 7507                <1>     jne .notQuoteToCount
   100 00001234 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   101 00001236 E9F4FFFFFF          <1>     jmp .countQuotes
   102                              <1> .notQuoteToCount:
   103 0000123B 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   104 0000123D 75F0                <1>     jne .countQuotes
   105 0000123F 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   106 00001242 488D3D27F0FFFF      <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
   107                              <1> .getChar:
   108 00001249 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   109 0000124A 3C22                <1>     cmp al, '"'     ;Is char a quote?
   110 0000124C 750E                <1>     jne .notQuote
   111 0000124E FECD                <1>     dec ch          ;We have a quote, now decrement
   112 00001250 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   113                              <1> .searchForClosingQuote:
   114                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   115 00001252 AA                  <1>     stosb   ;Store char and inc rdi
   116 00001253 FEC1                <1>     inc cl
   117 00001255 AC                  <1>     lodsb   ;Get next char
   118 00001256 3C22                <1>     cmp al, '"'
   119 00001258 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   120 0000125A FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   121                              <1> .notQuote:
   122 0000125C E885060000          <1>     call peelRedir      ;Intervene redir if needed
   123 00001261 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   124 00001263 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   125 00001265 EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   126                              <1> .pipeHandle:
   127                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   128 00001267 0F8442030000        <1>     jz hardSynErr ;We had double pipe symbol, syntax error and reset!
   129                              <1> .notRedir:
   130 0000126D AA                  <1>     stosb       ;Store char and advance rdi
   131 0000126E 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   132 00001270 7404                <1>     je .exit
   133 00001272 FEC1                <1>     inc cl      ;Increment char count
   134 00001274 EBD3                <1>     jmp short .getChar    ;If not, get next char
   135                              <1> .exit:
   136 00001276 880DF3EFFFFF        <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   137                              <1>     return
    13                              <2> %%_ret:
    14 0000127C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   138                              <1> 
   139                              <1> makeCmdString:
   140                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   141                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   142                              <1> ; Copies into the psp.
   143                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   144 0000127D 488D35ECEFFFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   145 00001284 31C9                <1>     xor ecx, ecx
   146 00001286 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   147                              <1> .countQuotes:
   148 00001289 AC                  <1>     lodsb
   149 0000128A 3C22                <1>     cmp al, '"'
   150 0000128C 7507                <1>     jne .notQuoteToCount
   151 0000128E FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   152 00001290 E9F4FFFFFF          <1>     jmp .countQuotes
   153                              <1> .notQuoteToCount:
   154 00001295 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   155 00001297 75F0                <1>     jne .countQuotes
   156 00001299 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   157 0000129C 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   158                              <1> .getChar:
   159 000012A3 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   160 000012A4 3C22                <1>     cmp al, '"'     ;Is char a quote?
   161 000012A6 750E                <1>     jne .notQuote
   162 000012A8 FECD                <1>     dec ch          ;We have a quote, now decrement
   163 000012AA 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   164                              <1> .searchForClosingQuote:
   165                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   166 000012AC AA                  <1>     stosb   ;Store char and inc rdi
   167 000012AD FEC1                <1>     inc cl
   168 000012AF AC                  <1>     lodsb   ;Get next char
   169 000012B0 3C22                <1>     cmp al, '"'
   170 000012B2 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   171 000012B4 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   172                              <1> .notQuote:
   173 000012B6 3C7C                <1>     cmp al, "|"
   174 000012B8 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   175 000012BA B00D                <1>     mov al, CR          ;Store the pipe char
   176 000012BC 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   177                              <1> .notPipe:
   178 000012BF AA                  <1>     stosb       ;Store char and advance rdi
   179 000012C0 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   180 000012C2 7404                <1>     je .exit
   181 000012C4 FEC1                <1>     inc cl      ;Increment char count
   182 000012C6 EBDB                <1>     jmp short .getChar    ;If not, get next char
   183                              <1> .exit:
   184 000012C8 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   185 000012CB 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   186 000012D2 803E0D              <1>     cmp byte [rsi], CR  
   187                              <1>     return
    13                              <2> %%_ret:
    14 000012D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   188                              <1> 
   189                              <1> analyseCmdline:
   190                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   191                              <1> ; processes the command name into the FCB.  
   192 000012D6 C60562F0FFFF00      <1>     mov byte [cmdName], 0   ;Init this field to indicate no cmd
   193                              <1> ;Start by searching for any switch chars! Set byte if switch chars fnd!!
   194 000012DD 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   195 000012E4 4889FE              <1>     mov rsi, rdi                    ;Prep rsi here too
   196 000012E7 0FB64FFF            <1>     movzx ecx, byte [rdi - 1]       ;Get the count byte
   197 000012EB 8A0541EDFFFF        <1>     mov al, byte [switchChar]
   198 000012F1 F2AE                <1>     repne scasb                     ;Scan for the switch char
   199 000012F3 7506                <1>     jne .noSwitchFnd
   200 000012F5 F615B7EDFFFF        <1>     not byte [switchFnd]            ;Set switch char fnd on!
   201                              <1> .noSwitchFnd:
   202 000012FB E8B7330000          <1>     call skipDelimiters     ;Skip any preceeding separators from rsi
   203 00001300 803E0D              <1>     cmp byte [rsi], CR      ;We have no command? Return!
   204                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001303 74(D5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   205 00001305 4889F3              <1>     mov rbx, rsi            ;Save the start of the text in rbx
   206                              <1> .plp:
   207 00001308 488D3D00EEFFFF      <1>     lea rdi, cmdFcb         ;Loop on the commandFCB
   208 0000130F B801290000          <1>     mov eax, 2901h
   209 00001314 CD21                <1>     int 21h
   210 00001316 3CFF                <1>     cmp al, -1  ;If DOS returns -1, we have a bad drive specified, fail!
   211 00001318 0F8408010000        <1>     je .exitBadDrv
   212                              <1> .trailingDotLp:
   213                              <1> ;Reverse along trailing dots!
   214 0000131E 807EFF2E            <1>     cmp byte [rsi - 1], "." ;Is this a dot?
   215 00001322 7505                <1>     jne .noTrailingDots
   216 00001324 48FFCE              <1>     dec rsi
   217 00001327 EBF5                <1>     jmp short .trailingDotLp
   218                              <1> .noTrailingDots:
   219 00001329 8A0502EDFFFF        <1>     mov al, byte [pathSep]  
   220 0000132F 3806                <1>     cmp byte [rsi], al      ;Is the terminator a pathsep?
   221 00001331 7525                <1>     jne .notPs
   222 00001333 48FFC6              <1>     inc rsi ;Go to the char after the pathsep
   223 00001336 AC                  <1>     lodsb   ;Get this char
   224 00001337 48FFCE              <1>     dec rsi ;And move rsi back to where we were
   225 0000133A 3C20                <1>     cmp al, 20h     ;Is this char below 32?
   226 0000133C 7217                <1>     jb .delimfnd    ;Also a delimiter
   227 0000133E 3C5C                <1>     cmp al, "\"     ;If this is a second pathsep, we are done
   228 00001340 7413                <1>     je .delimfnd
   229 00001342 3C2F                <1>     cmp al, "/"     ;Or an alt pathsep?
   230 00001344 740F                <1>     je .delimfnd
   231 00001346 3C2E                <1>     cmp al, byte "."
   232 00001348 740B                <1>     je .delimfnd
   233 0000134A 3C22                <1>     cmp al, byte '"'
   234 0000134C 7407                <1>     je .delimfnd
   235 0000134E E872330000          <1>     call isALdelimiter  ;Is this a delim char?
   236 00001353 75B3                <1>     jne .plp            ;If not, we loop again
   237                              <1> .delimfnd:
   238 00001355 48FFCE              <1>     dec rsi             ;Point rsi to end of the command
   239                              <1> .notPs:
   240                              <1> ;Now we have reached the end of the command, rsi points to the first char
   241                              <1> ; after the command, whether a delimiter or not.
   242 00001358 4889F1              <1>     mov rcx, rsi
   243 0000135B 4829D9              <1>     sub rcx, rbx    ;Get the number of chars in the command ONLY
   244 0000135E 0F84BA000000        <1>     jz .exitBad     ;If this is zero, exit fail!
   245 00001364 4887DE              <1>     xchg rbx, rsi   ;Swap the start and end of the commands!!!
   246 00001367 488D3D82EFFFFF      <1>     lea rdi, cmdPathSpec
   247 0000136E F3A4                <1>     rep movsb
   248 00001370 30C0                <1>     xor al, al
   249 00001372 AA                  <1>     stosb   ;Store a terminating null
   250 00001373 4887DE              <1>     xchg rbx, rsi
   251                              <1> ;Now we build FCBs for the arguments!
   252 00001376 498D9881000000      <1>     lea rbx, qword [r8 + cmdLine]   ;Now we measure from the start of the buf!
   253 0000137D E893000000          <1>     call .skipAndCheckCR
   254 00001382 745B                <1>     je .setupCmdVars
   255 00001384 C60521EDFFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   256 0000138B 4889F0              <1>     mov rax, rsi
   257 0000138E 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   258 00001391 880516EDFFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   259 00001397 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   260 0000139B B801290000          <1>     mov eax, 2901h
   261 000013A0 CD21                <1>     int 21h
   262 000013A2 880506EDFFFF        <1>     mov byte [arg1FCBret], al
   263                              <1> .skipArg:
   264 000013A8 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   265 000013A9 3C0D                <1>     cmp al, CR
   266 000013AB 7432                <1>     je .setupCmdVars
   267 000013AD E813330000          <1>     call isALdelimiter
   268 000013B2 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   269 000013B4 E85C000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   270 000013B9 7424                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   271 000013BB C605EDECFFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   272 000013C2 4889F0              <1>     mov rax, rsi            
   273 000013C5 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   274 000013C8 8805E2ECFFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   275 000013CE 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   276 000013D2 B801290000          <1>     mov eax, 2901h
   277 000013D7 CD21                <1>     int 21h
   278 000013D9 8805D2ECFFFF        <1>     mov byte [arg2FCBret], al
   279                              <1> .setupCmdVars:
   280                              <1> ;Before returning, we copy the command name to cmdName 
   281 000013DF 488D3D0AEFFFFF      <1>     lea rdi, cmdPathSpec
   282 000013E6 E883330000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   283 000013EB E8A2320000          <1>     call strlen ;Get the length of the null terminated final path componant
   284 000013F0 81F90D000000        <1>     cmp ecx, fileNameZL ;11 chars + ext sep + null terminator
   285 000013F6 7726                <1>     ja .exitBad     ;Return error
   286 000013F8 4889FE              <1>     mov rsi, rdi
   287 000013FB 488D3D3DEFFFFF      <1>     lea rdi, cmdName
   288 00001402 FFC9                <1>     dec ecx ;Minus the terminating null
   289 00001404 880F                <1>     mov byte [rdi], cl ;Store the length here
   290 00001406 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   291                              <1> .cpCmdName:
   292 00001409 AC                  <1>     lodsb
   293 0000140A E88D320000          <1>     call ucChar ;Uppercase the char
   294 0000140F AA                  <1>     stosb
   295 00001410 FFC9                <1>     dec ecx
   296 00001412 75F5                <1>     jnz .cpCmdName
   297                              <1>     return
    13                              <2> %%_ret:
    14 00001414 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   298                              <1> .skipAndCheckCR:
   299                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   300 00001415 E89D320000          <1>     call skipDelimiters ;Go to the next char in the input line
   301 0000141A 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   302                              <1>     return
    13                              <2> %%_ret:
    14 0000141D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   303                              <1> .exitBad:
   304 0000141E C6051AEFFFFFFF      <1>     mov byte [cmdName], -1  ;Store -1 to indicate error
   305                              <1>     return
    13                              <2> %%_ret:
    14 00001425 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   306                              <1> .exitBadDrv:
   307 00001426 C60512EFFFFFFE      <1>     mov byte [cmdName], -2  ;Indicate a bad drive specified
   308 0000142D E8450C0000          <1>     call badDriveError
   309                              <1>     return
    13                              <2> %%_ret:
    14 00001432 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   310                              <1> 
   311                              <1> doCommandLine:
   312                              <1>     ;The following check accounts for the end of a piped command
   313 00001433 803D05EFFFFF00      <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, syntax error!
   314 0000143A 0F846F010000        <1>     je hardSynErr   ;This now should never be hit, earmark for removal!
   315 00001440 803DF8EEFFFFFF      <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   316 00001447 0F84630C0000        <1>     je badCmdError
   317 0000144D 803DEBEEFFFFFE      <1>     cmp byte [cmdName], -2  ;Bad drive specified, nop
   318                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001454 74(32)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   319 00001456 488D3593EEFFFF      <1>     lea rsi, cmdPathSpec
   320 0000145D 0FB71D8CEEFFFF      <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   321 00001464 80FF3A              <1>     cmp bh, ":"
   322 00001467 7520                <1>     jne .noDriveSpecified
   323 00001469 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   324 0000146B E82C320000          <1>     call ucChar     ;Uppercase al
   325 00001470 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   326                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   327 00001472 803DC6EEFFFF02      <1>     cmp byte [cmdName], 2
   328 00001479 750E                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   329 0000147B 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   330 0000147D E8E6310000          <1>     call setDrive
   331                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001482 74(32)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   332 00001484 E9EE0B0000          <1>     jmp badDriveError
   333                              <1> .noDriveSpecified:
   334                              <1> ;rbx is writable UP TO THE FIRST PIPE OR CR (non-inclusive)
   335 00001489 488D1DDEEDFFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer
   336 00001490 488D35A8EEFFFF      <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   337 00001497 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   338 0000149C BAFFFF0000          <1>     mov edx, 0FFFFh
   339 000014A1 B5FF                <1>     mov ch, -1
   340 000014A3 CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   341 000014A5 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   342 000014AA BAFFFF0000          <1>     mov edx, 0FFFFh
   343 000014AF 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   344 000014B1 CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   345                              <1>             ;        al = 0  if the command should be executed as usual
   346 000014B3 84C0                <1>     test al, al
   347 000014B5 7444                <1>     jz .executeInternal
   348                              <1>     ;Here we execute externally and return to the prompt
   349                              <1>     ; as if it was an internal execution. rbx is not to be relied on here!
   350 000014B7 498D9880000000      <1>     lea rbx, qword [r8 + cmdTail]
   351 000014BE 488D357AEEFFFF      <1>     lea rsi, cmdName        
   352 000014C5 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   353 000014CA BAFFFF0000          <1>     mov edx, 0FFFFh
   354 000014CF B5FF                <1>     mov ch, -1
   355 000014D1 CD2F                <1>     int 2Fh
   356 000014D3 803D65EEFFFF00      <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   357                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000014DA 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000014DC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   358                              <1>     ;We need to copy over to cmdPathSpec in the event this command
   359                              <1>     ; is an external command that is in the CD or in the PATH.
   360                              <1>     ;Should not be used for this purpose but it is here...
   361 000014DD E8CE050000          <1>     call pullCommandline    ;Pull the tail down with the original name
   362 000014E2 488D3556EEFFFF      <1>     lea rsi, cmdName        ;Now make the new cmd the new cmdspec!
   363 000014E9 AC                  <1>     lodsb                   ;Get the name length
   364 000014EA 0FB6C8              <1>     movzx ecx, al
   365 000014ED 488D3DFCEDFFFF      <1>     lea rdi, cmdPathSpec    ;Overwrite the original specified command
   366 000014F4 F3A4                <1>     rep movsb   
   367 000014F6 31C0                <1>     xor eax, eax
   368 000014F8 AA                  <1>     stosb   ;Store null terminator
   369 000014F9 EB1F                <1>     jmp short .executeInternal2 ;Skip the equivalent for non-ae cases
   370                              <1> .executeInternal:
   371 000014FB E8B0050000          <1>     call pullCommandline    ;Now pull the tail down
   372 00001500 488D3DE9EDFFFF      <1>     lea rdi, cmdPathSpec
   373 00001507 E886310000          <1>     call strlen ;Get the length of the input command
   374 0000150C FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   375 0000150E 380D2BEEFFFF        <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   376 00001514 0F859A240000        <1>     jne launchChild     ;If not, a path was specified, exit!
   377                              <1> .executeInternal2:
   378                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   379 0000151A 488D1D7EF2FFFF      <1>     lea rbx, functionTable
   380                              <1> .nextEntry:
   381 00001521 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   382 00001524 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   383 00001527 0F8487240000        <1>     je launchChild      ;If so, check externally now
   384 0000152D 380D0CEEFFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   385 00001533 7539                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   386                              <1>     ;Here they have the same length so lets see if the name is the same
   387 00001535 56                  <1>     push rsi
   388                              <1>     ;ecx has the length to compare
   389 00001536 51                  <1>     push rcx
   390 00001537 488D7301            <1>     lea rsi, qword [rbx + 1]
   391 0000153B 488D3DFEEDFFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   392 00001542 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   393 00001544 59                  <1>     pop rcx
   394 00001545 5E                  <1>     pop rsi
   395 00001546 7526                <1>     jne .gotoNextEntry
   396                              <1>     ;Here it was found both strings are equal.
   397 00001548 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   398 0000154D 480FB71F            <1>     movzx rbx, word [rdi]
   399 00001551 488D3DA8EAFFFF      <1>     lea rdi, startLbl
   400 00001558 4801FB              <1>     add rbx, rdi
   401 0000155B E85C340000          <1>     call setDTA     ;Set the DTA back to us before we proceed!
   402 00001560 FFD3                <1>     call rbx        ;Call the internal function!
   403                              <1> ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
   404                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   405                              <1> ;No need for the below because the retcode is 
   406                              <1> ; zeroed when we it from DOS.
   407                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   408                              <1> ;    mov byte [returnCode], 0 
   409                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   410                              <1>     ;jmp short appRet    ;Now once we are done, goto appRet!
   411                              <1> ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
   412                              <1> 
   413                              <1> ;This new exit preserves the retcode, and now allows for internal
   414                              <1> ; commands to implement retcodes which we don't use for now.
   415                              <1> ;I doubt we need to reset the stackptr as to get here, the stack has to
   416                              <1> ; have been balanced which means when we pop, we go back to okRet anyway...
   417 00001562 488B259CEAFFFF      <1>     mov rsp, qword [stackTop]   ;Reset stack ptr! Unlikely needed!
   418 00001569 E97AFCFFFF          <1>     jmp commandMain.okRet   
   419                              <1> .gotoNextEntry:
   420 0000156E 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   421 00001575 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   422 00001578 EBA7                <1>     jmp short .nextEntry
   423                              <1> 
   424                              <1> appRet:  ;Return point from a task, jumped to from internal functions
   425                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled.
   426                              <1> ;Can depend on RSP here because I fixed DOS.
   427 0000157A E858340000          <1>     call resetIDTentries
   428 0000157F B8004D0000          <1>     mov eax, 4D00h              ;Get retcode, sets to 0 for internal commands
   429 00001584 CD21                <1>     int 21h
   430 00001586 488B2578EAFFFF      <1>     mov rsp, qword [stackTop]   ;Reset stack ptr! Unlikely needed!
   431 0000158D 66890579EAFFFF      <1>     mov word [returnCode], ax
   432 00001594 84E4                <1>     test ah, ah     ;Regular exit
   433 00001596 0F844CFCFFFF        <1>     jz commandMain.okRet
   434 0000159C 80FC03              <1>     cmp ah, 3       ;TSR exit
   435 0000159F 0F8443FCFFFF        <1>     je commandMain.okRet
   436                              <1>     ;Clean redirs and fully reset! This allows for safe returning if an error
   437                              <1>     ; occured when invoked on Int 2Eh! Doesnt matter for normal single command
   438                              <1>     ; as we always close the COMMAND.COM instance at this point.
   439 000015A5 E83F000000          <1>     call cleanupRedirs
   440 000015AA E986FBFFFF          <1>     jmp commandMain
   441                              <1> 
   442                              <1> hardSynErr:
   443                              <1> ;Hard syntax error in cmd line. Delete pipe files and reset completely!
   444 000015AF E89F0A0000          <1>     call badSyntaxError         ;Output bad syntax if empty command found
   445 000015B4 E926000000          <1>     jmp redirPipeFailureCommon.noPrint  ;This closes pipes and resets stack
   446                              <1> redirFailure:
   447 000015B9 488D1514F9FFFF      <1>     lea rdx, redirErrMsg
   448 000015C0 B913000000          <1>     mov ecx, redirErrMsgL
   449 000015C5 EB0C                <1>     jmp short redirPipeFailureCommon
   450                              <1> pipeFailure:
   451 000015C7 488D15EFF8FFFF      <1>     lea rdx, pipeErrMsg
   452 000015CE B917000000          <1>     mov ecx, pipeErrMsgL
   453                              <1> redirPipeFailureCommon:
   454                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   455                              <1> ;This routine tries to close whatever handles are not -1 and delete
   456                              <1> ; pipe files if the pipe count is not 0.
   457                              <1> ;It resets all variables and jumps to reset the stack!
   458 000015D3 B800400000          <1>     mov eax, 4000h  ;Write handle
   459 000015D8 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   460 000015DD CD21                <1>     int 21h
   461                              <1> .noPrint:
   462 000015DF E805000000          <1>     call cleanupRedirs  ;Cleans the redirections 
   463 000015E4 E94CFBFFFF          <1>     jmp commandMain ;Retake input from the command line
   464                              <1> 
   465                              <1> cleanupRedirs:
   466                              <1> ;Cleans all active redirections, returning to the saved state.
   467                              <1> ;Deletes any pipe files, leaves any redir out files.
   468                              <1> ;Resets the internal vars
   469 000015E9 0FB705B8EAFFFF      <1>     movzx eax, word [redirSTDIN]
   470 000015F0 0FB715ABEAFFFF      <1>     movzx edx, word [pipeSTDIN]
   471 000015F7 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   472 000015F9 E8CC000000          <1>     call .closeAndReplace
   473 000015FE 0FB705A5EAFFFF      <1>     movzx eax, word [redirSTDOUT]
   474 00001605 0FB71598EAFFFF      <1>     movzx edx, word [pipeSTDOUT]
   475 0000160C FFC3                <1>     inc ebx         ;Select STDOUT for closing
   476 0000160E E8B7000000          <1>     call .closeAndReplace
   477 00001613 66C7058AEAFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   478 0000161C 0FB71D85EAFFFF      <1>     movzx ebx, word [redirSTDIN]
   479 00001623 E892000000          <1>     call .closeHandle
   480                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   481 00001628 66C70577EAFFFFFFFF  <1>     mov word [redirSTDIN], -1
   482 00001631 0FB71D72EAFFFF      <1>     movzx ebx, word [redirSTDOUT]
   483 00001638 E87D000000          <1>     call .closeHandle
   484 0000163D 66C70564EAFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   485 00001646 0FB71D55EAFFFF      <1>     movzx ebx, word [pipeSTDIN]
   486 0000164D E868000000          <1>     call .closeHandle
   487 00001652 66C70547EAFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   488 0000165B 0FB71D42EAFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   489 00001662 E853000000          <1>     call .closeHandle
   490 00001667 66C70534EAFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   491 00001670 C6052AEAFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   492 00001677 488D156DEDFFFF      <1>     lea rdx, qword [pipe1Filespec]
   493 0000167E 803A00              <1>     cmp byte [rdx], 0
   494 00001681 7407                <1>     jz .checkOld
   495 00001683 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   496 00001688 CD21                <1>     int 21h
   497                              <1> .checkOld:
   498 0000168A 488D15A9EDFFFF      <1>     lea rdx, qword [pipe2Filespec]
   499 00001691 803A00              <1>     cmp byte [rdx],0
   500 00001694 7407                <1>     jz .pipeNamesComplete
   501 00001696 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   502 0000169B CD21                <1>     int 21h
   503                              <1> .pipeNamesComplete:
   504 0000169D 31C0                <1>     xor eax, eax
   505                              <1>     ;Invalidate the pointers and the paths too
   506 0000169F 488905E3EDFFFF      <1>     mov qword [newPipe], rax
   507 000016A6 488905E4EDFFFF      <1>     mov qword [oldPipe], rax
   508 000016AD 890538EDFFFF        <1>     mov dword [pipe1Filespec], eax
   509 000016B3 890581EDFFFF        <1>     mov dword [pipe2Filespec], eax
   510                              <1>     return
    13                              <2> %%_ret:
    14 000016B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   511                              <1> 
   512                              <1> .closeHandle:
   513 000016BA 81FBFFFFFFFF        <1>     cmp ebx, -1
   514                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000016C0 74(B9)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   515 000016C2 B8003E0000          <1>     mov eax, 3E00h
   516 000016C7 CD21                <1>     int 21h
   517                              <1>     return
    13                              <2> %%_ret:
    14 000016C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   518                              <1> .closeAndReplace:
   519                              <1> ;Input: ax = one possible handle, dx = second possible handle
   520                              <1> ;       bx = handle to close and copy ax/dx into
   521                              <1> ;Output: Handle intervened on. bx preserved
   522 000016CA C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   523 000016CD 09D0                <1>     or eax, edx     ;Form packed
   524 000016CF 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   525                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000016D4 74(C9)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   526 000016D6 E8DFFFFFFF          <1>     call .closeHandle
   527 000016DB 663DFFFF            <1>     cmp ax, -1      
   528 000016DF 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   529 000016E3 53                  <1>     push rbx
   530 000016E4 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   531 000016E7 B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   532 000016EC CD21                <1>     int 21h
   533 000016EE 5B                  <1>     pop rbx
   534                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000016EF 73(C9)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   535                              <1>     ;Else we now try to force default device to open!
   536 000016F1 E8C4FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   537 000016F6 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   538 000016FB 488D151FF8FFFF      <1>     lea rdx, devName
   539 00001702 CD21                <1>     int 21h
   540                              <1>     return
    13                              <2> %%_ret:
    14 00001704 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   541                              <1> 
   542                              <1> cleanRedirOut:
   543                              <1> ;Used to oust any stdout redir if necessary. This is different to the above in 
   544                              <1> ; that it deletes the redir out file. Therefore, this is only called in 
   545                              <1> ; particular cases like launching bat files which needs special handling in 
   546                              <1> ; that all redirs need to be completely removed.
   547 00001705 66813D9CE9FFFFFFFF  <1>     cmp word [redirSTDOUT], -1  ;Do we have > xyzzy.fil?
   548                              <1>     rete  ;Return if no stdout redir! We are ok!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000170E 74(04)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   549 00001710 0FB71D93E9FFFF      <1>     movzx ebx, word [redirSTDOUT]
   550 00001717 B901000000          <1>     mov ecx, 1      ;STDOUT
   551 0000171C B800460000          <1>     mov eax, 4600h  ;DUP this into STDOUT closing redirout
   552 00001721 CD21                <1>     int 21h
   553 00001723 0FB71D80E9FFFF      <1>     movzx ebx, word [redirSTDOUT]   ;Kill the duplicate now
   554 0000172A B8003E0000          <1>     mov eax, 3E00h  
   555 0000172F CD21                <1>     int 21h
   556 00001731 66C70570E9FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Set default value back
   557 0000173A 488D155BECFFFF      <1>     lea rdx, rdrOutFilespec
   558 00001741 B800410000          <1>     mov eax, 4100h      ;Del stdout file
   559 00001746 CD21                <1>     int 21h
   560 00001748 C60200              <1>     mov byte [rdx], 0   ;Ensure this is a clear path (not necessary)
   561                              <1>     ;Ignore any errors in this procedures. Errors mean either sharing problems
   562                              <1>     ; or the file doesnt exist, which in either case, is fine to leave it be!
   563                              <1>     return
    13                              <2> %%_ret:
    14 0000174B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   564                              <1> 
   565                              <1> advanceRedir:
   566                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   567                              <1> ;Close stdin redir then stdout redir. 
   568 0000174C F60553E9FFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   569 00001753 0F8585000000        <1>     jnz .redirIn
   570 00001759 F60541E9FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   571 00001760 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   572 00001766 0FBF0535E9FFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   573 0000176D 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   574 00001772 0F84EB000000        <1>     je .pipeOut              
   575                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   576 00001778 0FB71D23E9FFFF      <1>     movzx ebx, word [pipeSTDIN] 
   577 0000177F 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   578 00001781 B800460000          <1>     mov eax, 4600h
   579 00001786 CD21                <1>     int 21h
   580 00001788 0F8239FEFFFF        <1>     jc pipeFailure
   581 0000178E B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   582 00001793 CD21                <1>     int 21h
   583 00001795 0F822CFEFFFF        <1>     jc pipeFailure
   584 0000179B 488B15EFECFFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   585 000017A2 B800410000          <1>     mov eax, 4100h  ;Delete the file!
   586 000017A7 CD21                <1>     int 21h
   587 000017A9 0F8218FEFFFF        <1>     jc pipeFailure
   588 000017AF C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   589 000017B2 66C705E7E8FFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   590                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   591                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   592                              <1>     ;Else exit!
   593 000017BB 0FBF05E2E8FFFF      <1>     movsx eax, word [pipeSTDOUT]
   594 000017C2 3DFFFFFFFF          <1>     cmp eax, -1
   595 000017C7 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   596 000017CD C605CDE8FFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   597 000017D4 F605CCE8FFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   598 000017DB 753D                <1>     jnz .redirOut               ;Go for it if so!
   599                              <1>     return
    13                              <2> %%_ret:
    14 000017DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   600                              <1> .redirIn:
   601                              <1> ;Here we clean redirIn
   602 000017DE 0FB71DC3E8FFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   603 000017E5 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   604 000017E7 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   605 000017EC CD21                <1>     int 21h
   606 000017EE 0F82C5FDFFFF        <1>     jc redirFailure
   607 000017F4 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   608 000017F9 CD21                <1>     int 21h
   609 000017FB 0F82B8FDFFFF        <1>     jc redirFailure
   610 00001801 66C7059EE8FFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   611 0000180A C60595E8FFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   612 00001811 F60589E8FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   613 00001818 7549                <1>     jnz .pipeOut
   614                              <1> .redirOut:
   615 0000181A F60586E8FFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   616                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001821 74(DD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   617                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   618 00001823 F60577E8FFFFFF      <1>     test byte [pipeFlag], -1
   619 0000182A 7537                <1>     jnz short .pipeOut
   620 0000182C 0FB71D77E8FFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   621 00001833 B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   622 00001838 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   623 0000183D CD21                <1>     int 21h
   624 0000183F 0F8274FDFFFF        <1>     jc redirFailure
   625 00001845 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   626 0000184A CD21                <1>     int 21h
   627 0000184C 0F8267FDFFFF        <1>     jc redirFailure
   628 00001852 66C7054FE8FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   629 0000185B C60545E8FFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   630                              <1>     return
    13                              <2> %%_ret:
    14 00001862 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   631                              <1> .pipeOut:
   632                              <1> ;Duplicate STDIN to save across pipe
   633 00001863 0FBF053AE8FFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   634 0000186A 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   635                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000186F 74(62)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   636 00001871 B800450000          <1>     mov eax, 4500h
   637 00001876 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   638 00001878 CD21                <1>     int 21h
   639 0000187A 0F8247FDFFFF        <1>     jc pipeFailure
   640 00001880 6689051BE8FFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   641                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   642 00001887 B800460000          <1>     mov eax, 4600h
   643 0000188C 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   644 0000188E FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   645 00001890 CD21                <1>     int 21h
   646 00001892 0F822FFDFFFF        <1>     jc pipeFailure
   647                              <1> ;Now return the original stdout to stdout
   648 00001898 89D9                <1>     mov ecx, ebx
   649 0000189A 0FB71D03E8FFFF      <1>     movzx ebx, word [pipeSTDOUT]
   650 000018A1 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   651 000018A6 CD21                <1>     int 21h
   652 000018A8 0F8219FDFFFF        <1>     jc pipeFailure
   653                              <1> ;Now close the DUP'ed STDOUT
   654 000018AE B8003E0000          <1>     mov eax, 3E00h
   655 000018B3 CD21                <1>     int 21h
   656 000018B5 0F820CFDFFFF        <1>     jc pipeFailure
   657                              <1> ;Finally unwind STDIN to the beginning of the file
   658 000018BB B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   659 000018C0 31DB                <1>     xor ebx, ebx    ;STDIN handle
   660 000018C2 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   661 000018C4 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   662 000018C6 CD21                <1>     int 21h
   663 000018C8 0F82F9FCFFFF        <1>     jc pipeFailure  ;This should never happen
   664 000018CE 488B15B4EBFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   665 000018D5 488915B5EBFFFF      <1>     mov qword [oldPipe], rdx
   666 000018DC 66C705BFE7FFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   667                              <1>     return
    13                              <2> %%_ret:
    14 000018E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   668                              <1> 
   669                              <1> 
   670                              <1> peelRedir:
   671                              <1> ;Checks and sets up redir as appropriate
   672                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   673                              <1> ;       rsi points to the first char after the char in al in cpyBuffer
   674                              <1> ;Output: ZF=NZ => No redir
   675                              <1> ;        ZF=ZY => Redir
   676                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   677                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   678 000018E6 51                  <1>     push rcx
   679 000018E7 57                  <1>     push rdi
   680 000018E8 3C3C                <1>     cmp al, "<"
   681 000018EA 740C                <1>     je .inputRedir
   682 000018EC 3C3E                <1>     cmp al, ">"
   683 000018EE 7427                <1>     je .outputRedir
   684 000018F0 3C7C                <1>     cmp al, "|"
   685 000018F2 7441                <1>     je .pipeSetup
   686 000018F4 F8                  <1>     clc
   687                              <1> .redirExit:
   688 000018F5 5F                  <1>     pop rdi
   689 000018F6 59                  <1>     pop rcx
   690                              <1>     return
    13                              <2> %%_ret:
    14 000018F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   691                              <1> .inputRedir:
   692 000018F8 C605A7E7FFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   693 000018FF 488D3D47EAFFFF      <1>     lea rdi, rdrInFilespec
   694                              <1> .redirCommon:
   695 00001906 E8AC2D0000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   696 0000190B E8D82E0000          <1>     call cpDelimPathToBufz
   697 00001910 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   698 00001913 30C0                <1>     xor al, al  ;Clear the ZF flag
   699 00001915 EBDE                <1>     jmp short .redirExit
   700                              <1> .outputRedir:
   701 00001917 C60589E7FFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   702 0000191E 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   703 00001921 7509                <1>     jne .notDouble
   704 00001923 FE057EE7FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   705 00001929 48FFC6              <1>     inc rsi ;Go past it too
   706                              <1> .notDouble:
   707 0000192C 488D3D69EAFFFF      <1>     lea rdi, rdrOutFilespec
   708 00001933 EBD1                <1>     jmp short .redirCommon
   709                              <1> .pipeSetup:
   710 00001935 56                  <1>     push rsi    ;Save rsi pointing to char past |
   711 00001936 E87C2D0000          <1>     call skipDelimiters ;Check if this is effectively a double || or |<CR>
   712 0000193B 803E7C              <1>     cmp byte [rsi], "|" 
   713 0000193E 7403                <1>     je .badFnd
   714 00001940 803E0D              <1>     cmp byte [rsi], CR
   715                              <1> .badFnd:
   716 00001943 5E                  <1>     pop rsi
   717 00001944 F9                  <1>     stc
   718 00001945 EBAE                <1>     jmp short .redirExit
   719                              <1> 
   720                              <1> setupRedirandPipes:
   721                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   722                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   723 00001947 0F8484000000        <1>     jz .redirIn
   724 0000194D 488D1597EAFFFF      <1>     lea rdx, pipe1Filespec
   725 00001954 803A00              <1>     cmp byte [rdx], 0
   726 00001957 7410                <1>     jz .pathFound
   727 00001959 488D15DAEAFFFF      <1>     lea rdx, pipe2Filespec
   728 00001960 803A00              <1>     cmp byte [rdx], 0
   729 00001963 0F855EFCFFFF        <1>     jnz pipeFailure
   730                              <1> .pathFound:
   731 00001969 48891519EBFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   732 00001970 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   733 00001975 BB01000000          <1>     mov ebx, 1
   734 0000197A CD21                <1>     int 21h
   735 0000197C 0F8245FCFFFF        <1>     jc pipeFailure
   736 00001982 6689051BE7FFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   737 00001989 E8E62C0000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   738 0000198E 0441                <1>     add al, "A"
   739 00001990 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   740 00001995 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   741 00001997 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   742 00001999 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   743 0000199B B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   744 000019A0 CD21                <1>     int 21h
   745 000019A2 0F821FFCFFFF        <1>     jc pipeFailure
   746                              <1>     ;AX has the handle for this file now, this will become STDOUT
   747                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   748 000019A8 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   749 000019AB B901000000          <1>     mov ecx, 1
   750 000019B0 B800460000          <1>     mov eax, 4600h
   751 000019B5 CD21                <1>     int 21h
   752 000019B7 0F820AFCFFFF        <1>     jc pipeFailure
   753 000019BD B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   754 000019C2 CD21                <1>     int 21h
   755 000019C4 0F82FDFBFFFF        <1>     jc pipeFailure
   756 000019CA C605D0E6FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   757                              <1> .redirIn:
   758                              <1> ;Now check if any other redir needs to be setup
   759                              <1> ;Checks and sets up redir as appropriate.
   760                              <1>     ;Setup the redir here for STDIN
   761 000019D1 F605CEE6FFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   762 000019D8 7449                <1>     jz .redirOut
   763 000019DA 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   764 000019DC B800450000          <1>     mov eax, 4500h
   765 000019E1 CD21                <1>     int 21h
   766 000019E3 0F82D0FBFFFF        <1>     jc redirFailure
   767 000019E9 668905B8E6FFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   768 000019F0 488D1556E9FFFF      <1>     lea rdx, rdrInFilespec
   769 000019F7 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   770 000019FC CD21                <1>     int 21h
   771 000019FE 0F82B5FBFFFF        <1>     jc redirFailure
   772 00001A04 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   773 00001A06 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   774 00001A09 B800460000          <1>     mov eax, 4600h
   775 00001A0E CD21                <1>     int 21h
   776 00001A10 0F82A3FBFFFF        <1>     jc redirFailure
   777 00001A16 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   778 00001A1B CD21                <1>     int 21h
   779 00001A1D 0F8296FBFFFF        <1>     jc redirFailure
   780                              <1> .redirOut:
   781 00001A23 F6057DE6FFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   782                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001A2A 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001A2C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   783 00001A2D 803D70E6FFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   784                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001A34 75(2C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   785                              <1>     ;Else setup the redir here for STDOUT
   786 00001A36 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   787 00001A3B B800450000          <1>     mov eax, 4500h
   788 00001A40 CD21                <1>     int 21h
   789 00001A42 0F8271FBFFFF        <1>     jc redirFailure
   790 00001A48 6689055BE6FFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   791 00001A4F 488D1546E9FFFF      <1>     lea rdx, rdrOutFilespec
   792 00001A56 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   793 00001A5B CD21                <1>     int 21h
   794 00001A5D 730F                <1>     jnc .fileExists
   795 00001A5F B8003C0000          <1>     mov eax, 3C00h
   796 00001A64 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   797 00001A66 CD21                <1>     int 21h
   798 00001A68 0F824BFBFFFF        <1>     jc redirFailure
   799                              <1> .fileExists:
   800 00001A6E B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   801 00001A73 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   802 00001A76 B800460000          <1>     mov eax, 4600h  ;DUP2
   803 00001A7B CD21                <1>     int 21h
   804 00001A7D 0F8236FBFFFF        <1>     jc redirFailure
   805 00001A83 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   806 00001A88 CD21                <1>     int 21h
   807 00001A8A 0F8229FBFFFF        <1>     jc redirFailure
   808 00001A90 803D10E6FFFF01      <1>     cmp byte [redirOut], 1
   809                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001A97 74(2C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   810                              <1>     ;Here we move the file pointer to the end of the file
   811 00001A99 31D2                <1>     xor edx, edx    ;Low order 32 bits
   812 00001A9B 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   813 00001A9D BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   814 00001AA2 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   815 00001AA7 CD21                <1>     int 21h
   816 00001AA9 0F820AFBFFFF        <1>     jc redirFailure
   817                              <1>     return
    13                              <2> %%_ret:
    14 00001AAF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   818                              <1> 
   819                              <1> 
   820                              <1> pullCommandline:
   821                              <1> ;This command pulls the command tail down, removing the whole launch command
   822 00001AB0 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   823                              <1> ;Skip leading separators
   824                              <1> .pctSkipLeading:
   825 00001AB7 AC                  <1>     lodsb   ;Get first char
   826 00001AB8 E8082C0000          <1>     call isALdelimiter
   827 00001ABD 74F8                <1>     je .pctSkipLeading
   828 00001ABF 48FFCE              <1>     dec rsi
   829                              <1>     ;rsi points to the start of the command
   830 00001AC2 488D3D27E8FFFF      <1>     lea rdi, cmdPathSpec
   831 00001AC9 E8C42B0000          <1>     call strlen ;Get the length of the command
   832 00001ACE FFC9                <1>     dec ecx ;Minus the terminating null
   833 00001AD0 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   834 00001AD3 280DD4E5FFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   835 00001AD9 280DD1E5FFFF        <1>     sub byte [arg2Off], cl
   836 00001ADF 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   837 00001AE1 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   838                              <1> .pctPullChars:
   839 00001AE8 AC                  <1>     lodsb
   840 00001AE9 AA                  <1>     stosb
   841 00001AEA 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   842 00001AEC 7404                <1>     je .pctExit
   843 00001AEE FFC1                <1>     inc ecx     ;Increment count
   844 00001AF0 EBF6                <1>     jmp short .pctPullChars 
   845                              <1> .pctExit:
   846 00001AF2 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   847                              <1>     return
    13                              <2> %%_ret:
    14 00001AF9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   848                              <1> 
   849                              <1> getSetMainState:
   850                              <1> ;Resets the buffers lengths, sets stringops and gets the pspptr in r8
   851 00001AFA FC                  <1>     cld ;Ensure stringops are done the right way
   852 00001AFB C60568E6FFFF80      <1>     mov byte [inBuffer], inLen      ;Reset the buffer length
   853 00001B02 C605E3E6FFFF80      <1>     mov byte [cpyBuffer], inLen     ;Reset the buffer length
   854 00001B09 C6055EE7FFFF80      <1>     mov byte [cmdBuffer], inLen     ;Reset the buffer length
   855 00001B10 4C8B05F8E4FFFF      <1>     mov r8, qword [pspPtr]              ;Reset the pspPtr
   856                              <1>     return
    13                              <2> %%_ret:
    14 00001B17 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   857                              <1> 
   858                              <1> 
   859                              <1> int2Eh: 
   860                              <1> ;Very sucky interface for passing command lines to be processed by the 
   861                              <1> ; current top level command interpreter. Will slowly try to patch to make it
   862                              <1> ; more reliable with a critical section flag. Currently, if we are already
   863                              <1> ; processing an Int 2Eh request, this will not process the command.
   864                              <1> ;
   865                              <1> ;Need to add further safeguards for when pipes are also setup and
   866                              <1> ; batchmode is on!
   867                              <1> ;
   868                              <1> ;Input: rsi points to the count byte of a command line.
   869                              <1> ;       Max number of chars is 128 (127 + count byte)
   870                              <1> ;Output:
   871                              <1> ;       CF=NC: Command was processed. ax = Retcode
   872                              <1> ;       CF=CY: Command was not processed.
   873 00001B18 80642410FE          <1>     and byte [rsp + 2*8], ~1    ;Clear CF on entry
   874 00001B1D F60578E5FFFF04      <1>     test byte [statFlg1], inSingle
   875 00001B24 0F85A0000000        <1>     jnz int2EcheckReentry 
   876                              <1> .multiJoin:
   877 00001B2A 800D6BE5FFFF04      <1>     or byte [statFlg1], inSingle    ;Set the bits! Gets the lock!
   878 00001B31 488925E7E4FFFF      <1>     mov qword [int2Ersp], rsp       ;Save the far stack pointer 
   879 00001B38 B8002F0000          <1>     mov eax, 2F00h  ;Get the current DTA in rbx
   880 00001B3D CD21                <1>     int 21h
   881 00001B3F 48891DE1E4FFFF      <1>     mov qword [int2Edta], rbx       ;We set the dta in the main loop later
   882 00001B46 488B25B8E4FFFF      <1>     mov rsp, qword [stackTop]       ;Set to use the internal stack
   883 00001B4D B800510000          <1>     mov eax, 5100h  ;Get Current PSP in rdx
   884 00001B52 CD21                <1>     int 21h
   885 00001B54 48891DBCE4FFFF      <1>     mov qword [int2Epsp], rbx
   886 00001B5B 52                  <1>     push rdx    ;Save on the stack
   887 00001B5C 488B1DACE4FFFF      <1>     mov rbx, qword [pspPtr] ;Get the psp for this COMMAND.COM
   888 00001B63 B800500000          <1>     mov eax, 5000h ;Set this version of COMMAND.COM as the current PSP
   889 00001B68 CD21                <1>     int 21h
   890 00001B6A 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   891 00001B6D 4989D9              <1>     mov r9, rbx
   892 00001B70 488D3DF4E5FFFF      <1>     lea rdi, inBuffer + 1
   893 00001B77 B910000000          <1>     mov ecx, 10h    ;80h/8
   894 00001B7C FC                  <1>     cld
   895 00001B7D F348A5              <1>     rep movsq   ;Zoom zoom copy command line over
   896 00001B80 E875FFFFFF          <1>     call getSetMainState    ;Ensure the buffers have their lengths set
   897 00001B85 803DDFE5FFFF00      <1>     cmp byte [inBuffer + 1], 0
   898 00001B8C 0F8507F6FFFF        <1>     jne commandMain.goSingle    ;Proceed if we have anything to execute
   899                              <1> int2ERet:
   900 00001B92 E8522B0000          <1>     call clearCommandLineState  ;Be a good citizen, leave it as we found it!
   901 00001B97 488B2581E4FFFF      <1>     mov rsp, qword [int2Ersp]
   902 00001B9E 488B1D72E4FFFF      <1>     mov rbx, qword [int2Epsp] ;Get Old current PSP in rbx
   903 00001BA5 B800500000          <1>     mov eax, 5000h  ;Set Current PSP
   904 00001BAA CD21                <1>     int 21h
   905 00001BAC 488B1574E4FFFF      <1>     mov rdx, qword [int2Edta]
   906 00001BB3 B8001A0000          <1>     mov eax, 1A00h  ;Set the DTA back to where it was upon return
   907 00001BB8 CD21                <1>     int 21h
   908 00001BBA 0FB7054CE4FFFF      <1>     movzx eax, word [returnCode]    ;Get the return code in eax
   909 00001BC1 8025D4E4FFFFFB      <1>     and byte [statFlg1], ~inSingle  ;Clear that we are in single mode
   910 00001BC8 48CF                <1>     iretq
   911                              <1> 
   912                              <1> int2EcheckReentry:
   913                              <1> ;Now we check if we DOSMGR is installed. If so, put task on ice
   914                              <1> ; else, return with CF=CY.
   915 00001BCA B800520000          <1>     mov eax, 5200h  ;Get sysvars
   916 00001BCF CD21                <1>     int 21h
   917 00001BD1 F64363FF            <1>     test byte [rbx + 63h], -1   ;check the sysVars.dosMgrPresent byte
   918 00001BD5 7512                <1>     jnz short .multifnd
   919 00001BD7 B800030000          <1>     mov eax, 0300h   ;Are we here check on Int 2Fh
   920 00001BDC CD2F                <1>     int 2Fh
   921 00001BDE 84C0                <1>     test al, al ;This must still be zero, else something installed
   922 00001BE0 7507                <1>     jnz .multifnd
   923 00001BE2 804C241001          <1>     or byte [rsp + 2*8], 1  ;Else return with CF=CY, already processing
   924 00001BE7 48CF                <1>     iretq   
   925                              <1> .multifnd:
   926                              <1> ;Recognised multitasker present, we now spinlock until flag is clear!
   927 00001BE9 F390                <1>     pause
   928 00001BEB F605AAE4FFFF04      <1>     test byte [statFlg1], inSingle   ;Is this bit set?
   929 00001BF2 75F5                <1>     jnz .multifnd
   930 00001BF4 E931FFFFFF          <1>     jmp int2Eh.multiJoin            ;Rejoin the norm now
    17                                  %include "./Source/cmdBat.asm"
     1                              <1> ;Main Batch processing routines go here!
     2                              <1> 
     3                              <1> batLaunch:
     4                              <1> ;Start by creating the FQPath name and building a command line
     5                              <1> ; where the arguments are CR terminated.
     6                              <1> ;Then work out how much memory to allocate and allocate it.
     7 00001BF9 488D35F0E6FFFF      <1>     lea rsi, cmdPathSpec    ;Path here is null terminated.
     8 00001C00 488D3DB4E4FFFF      <1>     lea rdi, batFile
     9 00001C07 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
    10 00001C0A 80FC3A              <1>     cmp ah, ":"
    11 00001C0D 7472                <1>     je .bbdrvGiven
    12 00001C0F 3A051CE4FFFF        <1>     cmp al, byte [pathSep]  ;Is the first char a pathsep?
    13 00001C15 745D                <1>     je .bbCDrvAbs
    14                              <1> ;Current drive relative
    15 00001C17 E8582A0000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
    16 00001C1C 0441                <1>     add al, "A"
    17 00001C1E B43A                <1>     mov ah, ":"
    18 00001C20 66AB                <1>     stosw   ;Store these two chars, adv rdi
    19                              <1> .bbRelPath:
    20 00001C22 8A0509E4FFFF        <1>     mov al, byte [pathSep]  
    21 00001C28 AA                  <1>     stosb   ;Store the pathsep
    22 00001C29 8A058CE4FFFF        <1>     mov al, byte [batFile]  ;Now get the drive letter into al
    23 00001C2F E8682A0000          <1>     call ucChar             ;UC it
    24 00001C34 880581E4FFFF        <1>     mov byte [batFile], al  ;and overwrite it :)
    25 00001C3A 2C40                <1>     sub al, "@"             ;Convert into a 1 based drive number
    26 00001C3C 88C2                <1>     mov dl, al
    27 00001C3E 56                  <1>     push rsi        ;Save remaining char source
    28 00001C3F 4889FE              <1>     mov rsi, rdi    ;rdi is where we want to store the file name
    29 00001C42 B800470000          <1>     mov eax, 4700h  ;Get Current Directory (null terminated)
    30 00001C47 CD21                <1>     int 21h
    31 00001C49 5E                  <1>     pop rsi
    32 00001C4A 7316                <1>     jnc .bbRelPathOk
    33 00001C4C 488D1569ECFFFF      <1>     lea rdx, badBat
    34 00001C53 E814280000          <1>     call printString
    35 00001C58 E836030000          <1>     call batCleanup     ;Now clean up the batch stuff we've setup
    36 00001C5D E9D3F4FFFF          <1>     jmp commandMain     ;And start again :)   
    37                              <1> .bbRelPathOk:
    38                              <1> ;Now move rdi to the terminating null   
    39 00001C62 31C0                <1>     xor eax, eax
    40 00001C64 31C9                <1>     xor ecx, ecx
    41 00001C66 F2AE                <1>     repne scasb ;Find the terminating null
    42 00001C68 48FFCF              <1>     dec rdi ;Now point to the terminating null
    43 00001C6B 8A05C0E3FFFF        <1>     mov al, byte [pathSep]
    44 00001C71 AA                  <1>     stosb   ;Store this pathsep over the original null
    45                              <1>     ;Now we are ready to copy the command line passed to us by the user
    46                              <1>     ; to rdi. rsi points to where to source the rest of the chars
    47 00001C72 EB1B                <1>     jmp short .bbCpName
    48                              <1> .bbCDrvAbs:
    49                              <1> ;Current drive absolute. Get current drive into buffer
    50 00001C74 E8FB290000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
    51 00001C79 0441                <1>     add al, "A"
    52 00001C7B B43A                <1>     mov ah, ":"
    53 00001C7D 66AB                <1>     stosw   ;Store these two chars
    54                              <1>     ;Now we are ready to copy the command line passed to us by the user
    55                              <1>     ; to rdi. rsi points to where to source the rest of the chars
    56 00001C7F EB0E                <1>     jmp short .bbCpName
    57                              <1> .bbdrvGiven:
    58                              <1> ;Drive given X:
    59 00001C81 66A5                <1>     movsw   ;Move over the X:, point rsi to the first new char
    60 00001C83 AC                  <1>     lodsb
    61 00001C84 48FFCE              <1>     dec rsi ;Get the char and point back to it
    62 00001C87 3A05A4E3FFFF        <1>     cmp al, byte [pathSep]  ;Is char three a pathsep?
    63 00001C8D 7593                <1>     jne .bbRelPath
    64                              <1> .bbCpName:
    65 00001C8F E8E5290000          <1>     call strcpy ;Copy the remaining portion
    66 00001C94 488D3520E4FFFF      <1>     lea rsi, batFile
    67 00001C9B E8082A0000          <1>     call normalisePath  ;Normalise the path :)
    68                              <1> ;Now batFile has the FQpathname, construct the new CR delimited command line.
    69 00001CA0 488D35C9E5FFFF      <1>     lea rsi, cmdBuffer + 2
    70 00001CA7 488D3DC1E5FFFF      <1>     lea rdi, cmdBuffer + 1  ;Overwrite count byte as we will null terminate
    71                              <1> .copyCmdline:
    72 00001CAE E8042A0000          <1>     call skipDelimiters ;Find start of argument
    73                              <1> .cclp:
    74 00001CB3 AC                  <1>     lodsb
    75 00001CB4 E80C2A0000          <1>     call isALdelimiter  ;If we hit delimiter, replace with CR, goto next arg
    76 00001CB9 7505                <1>     jne .ccstore
    77 00001CBB B00D                <1>     mov al, CR  
    78 00001CBD AA                  <1>     stosb
    79 00001CBE EBEE                <1>     jmp short .copyCmdline
    80                              <1> .ccstore:
    81 00001CC0 AA                  <1>     stosb   
    82 00001CC1 3C0D                <1>     cmp al, CR  ;Did we just store a CR
    83 00001CC3 75EE                <1>     jne .cclp   ;Keep getting chars if so
    84 00001CC5 31C0                <1>     xor eax, eax    ;Else store a terminating null now
    85 00001CC7 AA                  <1>     stosb
    86 00001CC8 488D3DA0E5FFFF      <1>     lea rdi, cmdBuffer + 1    ;Get back the ptr to the head of the new string
    87 00001CCF E8BE290000          <1>     call strlen     ;Get the new string length in ecx
    88 00001CD4 89CB                <1>     mov ebx, ecx    ;Save len in eax (include null)
    89 00001CD6 488D3DDEE3FFFF      <1>     lea rdi, batFile
    90 00001CDD E8B0290000          <1>     call strlen     ;Get the filename len in ecx
    91 00001CE2 01CB                <1>     add ebx, ecx
    92 00001CE4 81C32F000000        <1>     add ebx, batBlockHdr_size   ;Get the size to allocate for block
    93 00001CEA 89D9                <1>     mov ecx, ebx    ;Save the size in bytes in ecx for the cleaning below
    94 00001CEC 81C30F000000        <1>     add ebx, 0Fh    ;Round up to nearest paragraph!
    95 00001CF2 C1EB04              <1>     shr ebx, 4      ;Convert to paragraphs
    96 00001CF5 B800480000          <1>     mov eax, 4800h
    97 00001CFA CD21                <1>     int 21h
    98 00001CFC 730A                <1>     jnc .bbAlloced
    99 00001CFE E847030000          <1>     call badNoMemError  ;Print not enough mem error
   100 00001D03 E9D7F8FFFF          <1>     jmp  redirPipeFailureCommon.noPrint ;Clean up all redir and ret to cmdline
   101                              <1> .bbAlloced:
   102                              <1> ;Now init the batblock with all the data we need
   103 00001D08 488905A4E3FFFF      <1>     mov qword [bbPtr], rax  ;Save the ptr here!
   104 00001D0F 4889C3              <1>     mov rbx, rax
   105 00001D12 4889DF              <1>     mov rdi, rbx
   106 00001D15 31C0                <1>     xor eax, eax
   107 00001D17 F3AA                <1>     rep stosb   ;Clean the block with nulls
   108 00001D19 4889DF              <1>     mov rdi, rbx            ;Point back to the head of the block
   109 00001D1C 8A057CE3FFFF        <1>     mov al, byte [echoFlg]
   110 00001D22 884301              <1>     mov byte [rbx + batBlockHdr.bEchoFlg], al
   111 00001D25 B8FFFFFFFF          <1>     mov eax, -1
   112 00001D2A B905000000          <1>     mov ecx, 5
   113 00001D2F 488D7B1B            <1>     lea rdi, qword [rbx + batBlockHdr.wArgs]    ;Init the wArgs to no params!
   114 00001D33 F3AB                <1>     rep stosd   ;Store in dwords for speed. Leave rdi pointing at .cmdLine    
   115 00001D35 488D357FE3FFFF      <1>     lea rsi, batFile
   116 00001D3C E838290000          <1>     call strcpy ;Copy the string and the terminating null
   117 00001D41 488D3527E5FFFF      <1>     lea rsi, cmdBuffer + 1
   118 00001D48 57                  <1>     push rdi    ;Save the ptr to where we will store the cmdline
   119 00001D49 E82B290000          <1>     call strcpy ;Copy the command tail and the terminating null
   120 00001D4E 5F                  <1>     pop rdi     ;Get the pointer to the copied cmdline in rdi
   121 00001D4F 31F6                <1>     xor esi, esi    ;Use esi as argument counter
   122 00001D51 31C9                <1>     xor ecx, ecx
   123 00001D53 FFC9                <1>     dec ecx ;Init ecx to large number for repne below (stupid hack will work)
   124                              <1> .bbFndLp:
   125 00001D55 803F00              <1>     cmp byte [rdi], 0   ;Is this the end of the cmdline?
   126 00001D58 741B                <1>     je .bbArgsDone      
   127                              <1> ;Else add the entry to the table! rbx -> batBlock
   128 00001D5A 4889F8              <1>     mov rax, rdi
   129 00001D5D 4829D8              <1>     sub rax, rbx    ;Now get distance from head of batBlock to this arg in ax
   130 00001D60 668944731B          <1>     mov word [rbx + 2*rsi + batBlockHdr.wArgs], ax    ;and store it!
   131 00001D65 FFC6                <1>     inc esi
   132 00001D67 81FE0A000000        <1>     cmp esi, 10         ;Did we just process %9?
   133 00001D6D 7406                <1>     je .bbArgsDone
   134 00001D6F B00D                <1>     mov al, CR  ;Scan for the next CR and move rdi past it!
   135 00001D71 F2AE                <1>     repne scasb
   136 00001D73 EBE0                <1>     jmp short .bbFndLp   ;If not end of cmdline, see if next char delim
   137                              <1> .bbArgsDone:
   138                              <1> ;Now deactivate any redirs. Do redir out as cleanupRedirs somewhat ignores it.
   139                              <1> ;Do the handle close as deleting the file without closing the handle is asking 
   140                              <1> ; for SHARING trouble...
   141 00001D75 E88BF9FFFF          <1>     call cleanRedirOut      ;Liquidates redirout if needed
   142 00001D7A E86AF8FFFF          <1>     call cleanupRedirs      ;Now liquidate remaining redirs and pipes
   143 00001D7F 800D16E3FFFF08      <1>     or byte [statFlg1], inBatch ;Fire up the batch processor!
   144 00001D86 E9AAF3FFFF          <1>     jmp commandMain         ;Now we start reading the batch file!
   145                              <1> 
   146                              <1> batFinish:
   147                              <1> ;This is the procedure called after we've processed the last batch line
   148 00001D8B E85A260000          <1>     call printPrompt    ;Add this to emulate what DOS does
   149 00001D90 E8FE010000          <1>     call batCleanup     ;Cleanup the batch and batch state vars etc etc
   150 00001D95 E99BF3FFFF          <1>     jmp commandMain     ;And start again :)
   151                              <1> batNextLine:
   152                              <1> ;Read the next line from the file and sets if we are done with copying
   153 00001D9A F605FBE2FFFF10      <1>     test byte [statFlg1], batchEOF ;Did we hit EOF?
   154 00001DA1 75E8                <1>     jnz batFinish
   155 00001DA3 E821020000          <1>     call batOpen    ;Open the batch file. Always succeeds. Hdl in ebx.
   156 00001DA8 488B3504E3FFFF      <1>     mov rsi, qword [bbPtr]  ;Get the batch block ptr
   157 00001DAF 8B5613              <1>     mov edx, dword [rsi + batBlockHdr.dBatOffLo]
   158 00001DB2 8B4E17              <1>     mov ecx, dword [rsi + batBlockHdr.dBatOffHi]
   159 00001DB5 B800420000          <1>     mov eax, 4200h          ;LSEEK to where we left off previously
   160 00001DBA CD21                <1>     int 21h
   161 00001DBC C6052AE4FFFF00      <1>     mov byte [batInBuffer + 1], 0  ;Reset the buffer count
   162 00001DC3 488D1524E4FFFF      <1>     lea rdx, batInBuffer + 2   ;Start read pos
   163 00001DCA 31FF                <1>     xor edi, edi            ;Use edi as the char counter
   164                              <1> .readlp:
   165 00001DCC E82C020000          <1>     call batReadChar        ;Read the char. Set ZF and flag if no bytes read.
   166 00001DD1 742F                <1>     jz .eofAddCR
   167 00001DD3 48FFC7              <1>     inc rdi                 ;We read a char, woohoo!
   168 00001DD6 803A0D              <1>     cmp byte [rdx], CR      ;End of line?
   169 00001DD9 743D                <1>     je .eolCR
   170 00001DDB 803A0A              <1>     cmp byte [rdx], LF      ;End of line UNIX?
   171 00001DDE 7447                <1>     je .eolLF
   172 00001DE0 FE0507E4FFFF        <1>     inc byte [batInBuffer + 1] ;Inc our char count
   173 00001DE6 48FFC2              <1>     inc rdx                 ;Store the next char in the next position
   174 00001DE9 803DFDE3FFFF80      <1>     cmp byte [batInBuffer + 1], inLen    ;Are we 128 chars w/o CR?
   175 00001DF0 75DA                <1>     jne .readlp             ;Get next char if not
   176 00001DF2 48FFCA              <1>     dec rdx                 ;Go back to the char we just read
   177 00001DF5 C6020D              <1>     mov byte [rdx], CR      ;Overwrite with a terminating CR instead!!
   178 00001DF8 FE0DEFE3FFFF        <1>     dec byte [batInBuffer + 1] ;Reduce the valid char count by one
   179 00001DFE FFCF                <1>     dec edi                 ;Ignore the 128th char that we read!
   180 00001E00 EB28                <1>     jmp short .eol          ;The user typed too many chars on a line, EOL
   181                              <1> .eofAddCR:
   182 00001E02 C6020D              <1>     mov byte [rdx], CR  ;Store a terminating CR on the line!
   183                              <1> .eof:
   184 00001E05 803DE1E3FFFF00      <1>     cmp byte [batInBuffer + 1], 0      ;If we read any chars, do the line!
   185 00001E0C 751C                <1>     jne .eol
   186 00001E0E E8E2010000          <1>     call batClose                   ;Else close the hdl!
   187 00001E13 E973FFFFFF          <1>     jmp batFinish
   188                              <1> .eolCR:   ;Now get the next char, to possibly eliminate a trailing LF
   189 00001E18 E8E0010000          <1>     call batReadChar  ;Get the LF over CR. Set ZF and flag if no bytes read.
   190 00001E1D 74E6                <1>     jz .eof     ;That CR was last char, check if we have something to do
   191 00001E1F 803A0A              <1>     cmp byte [rdx], LF  ;Did we read a LF?
   192 00001E22 7503                <1>     jne .eolLF          ;Reread this char if not LF
   193 00001E24 48FFC7              <1>     inc rdi             ;Else add to the count
   194                              <1> .eolLF:
   195 00001E27 C6020D              <1>     mov byte [rdx], CR  ;Now place the CR over the last char
   196                              <1> .eol:
   197                              <1> ;Close the file, update the batch block file pointer, then proceed.
   198                              <1> ;rsi -> Batch block.
   199 00001E2A E8C6010000          <1>     call batClose
   200                              <1> ;Imagine someone gives us a 2+Gb Batch file...
   201 00001E2F 48017E13            <1>     add qword [rsi + batBlockHdr.qBatOff], rdi    ;Add to count
   202                              <1> ;Now we echo the prompt and command to the console unless the 
   203                              <1> ; first char is @, we hit a label or the echo flag is off.
   204 00001E33 488D15B4E3FFFF      <1>     lea rdx, batInBuffer + 2
   205                              <1> ;Labels and @ chars are first non-delim char on line.
   206                              <1> ;Find the first non-delim char in the line and check it!!
   207 00001E3A 4889D6              <1>     mov rsi, rdx
   208 00001E3D E875280000          <1>     call skipDelimiters     
   209 00001E42 803E3A              <1>     cmp byte [rsi], ":"     ;Label check! (:)
   210 00001E45 0F844FFFFFFF        <1>     je batNextLine          ;Just get the next line immediately
   211 00001E4B E85B000000          <1>     call batPreprocess      ;Else we preprocess now
   212                              <1> 
   213 00001E50 488D1515E3FFFF      <1>     lea rdx, batCpyBuffer + 2
   214 00001E57 803A40              <1>     cmp byte [rdx], batNoEchoChar   ;Line no echo check! (@)
   215 00001E5A 742C                <1>     je .noEchoPull       
   216 00001E5C F6053BE2FFFFFF      <1>     test byte [echoFlg], -1         
   217 00001E63 0F8427F3FFFF        <1>     jz commandMain.batProceed
   218 00001E69 52                  <1>     push rdx
   219 00001E6A E87B250000          <1>     call printPrompt    ;Now output prompt
   220 00001E6F 5A                  <1>     pop rdx
   221 00001E70 0FB60DF4E2FFFF      <1>     movzx ecx, byte [batCpyBuffer + 1]    ;Get the number of chars to print
   222 00001E77 BB01000000          <1>     mov ebx, 1  ;STDOUT
   223 00001E7C B800400000          <1>     mov eax, 4000h  ;Write woo!
   224 00001E81 CD21                <1>     int 21h
   225 00001E83 E903F3FFFF          <1>     jmp commandMain.batProceedCrlf
   226                              <1> .noEchoPull:
   227 00001E88 FE0DDDE2FFFF        <1>     dec byte [batCpyBuffer + 1]     ;Eliminate the @ char
   228 00001E8E 0F8406FFFFFF        <1>     jz batNextLine    ;If this was just a @<CR><LF>, get next line
   229 00001E94 4889D7              <1>     mov rdi, rdx
   230 00001E97 488D7201            <1>     lea rsi, qword [rdx + 1]    ;Start from the char afterwards
   231 00001E9B 0FB60DC9E2FFFF      <1>     movzx ecx, byte [batCpyBuffer + 1]  ;Get the remaining count to copy
   232 00001EA2 FFC1                <1>     inc ecx                         ;Want to copy over the terminating CR too
   233 00001EA4 F3A4                <1>     rep movsb 
   234 00001EA6 E9E5F2FFFF          <1>     jmp commandMain.batProceed   ;Now proceed normally w/o crlf
   235                              <1> 
   236                              <1> batPreprocess:
   237                              <1> ;Copies the line from batCpyBuffer to batInBuffer for regular processing,
   238                              <1> ; expanding any environment variables as the expansion takes place.
   239                              <1> ;Line is guaranteed only CR terminated.
   240 00001EAB 488D2DB8E2FFFF      <1>     lea rbp, batCpyBuffer   ;Save the ptr for the expandVar function
   241 00001EB2 488D7D02            <1>     lea rdi, qword [rbp + 2]    ;Point to the string destination
   242 00001EB6 C6450100            <1>     mov byte [rbp + 1], 0       ;Reset the buffer count
   243 00001EBA 488D352DE3FFFF      <1>     lea rsi, qword [batInBuffer + 2]
   244 00001EC1 E8F1270000          <1>     call skipDelimiters ;We strip leading delimiters
   245                              <1> .lp:
   246 00001EC6 AC                  <1>     lodsb   ;Get char and advance source ptr
   247 00001EC7 3C25                <1>     cmp al, "%" ;Did we get a envvar symbol?
   248 00001EC9 7507                <1>     jne .rawcp
   249                              <1>     ;breakpoint
   250 00001ECB E815000000          <1>     call batExpandVar   ;Advances rsi to next char and rdi past envvar
   251 00001ED0 EB09                <1>     jmp short .check  
   252                              <1> .rawcp:
   253 00001ED2 AA                  <1>     stosb   ;Store the char
   254 00001ED3 3C0D                <1>     cmp al, CR
   255                              <1>     rete    ;Return immediately if we copied a CR. Dont add to count.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001ED5 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001ED7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   256 00001ED8 FE4501              <1>     inc byte [rbp + 1] ;Else inc the buffer count
   257                              <1> .check:
   258 00001EDB 807D017F            <1>     cmp byte [rbp + 1], inLen - 1   ;Max chars yet?
   259 00001EDF 75E5                <1>     jne .lp
   260 00001EE1 B00D                <1>     mov al, CR  ;Here if so, terminate the line nicely :)
   261 00001EE3 AA                  <1>     stosb   ;Store this char too
   262                              <1>     return
    13                              <2> %%_ret:
    14 00001EE4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   263                              <1> 
   264                              <1> 
   265                              <1> batExpandVar:
   266                              <1> ;Expand any environment variables. 
   267                              <1> ;%% is treated as an escape char for a %.
   268                              <1> ;
   269                              <1> ;Input: rsi -> Char after the % sign that triggered this call.
   270                              <1> ;       rdi -> Position to place the substitution string.
   271                              <1> ;       rbp -> Head of destination buffer for copy.
   272                              <1> ;Output:
   273                              <1> ;   Substitution string is placed in buffer if necessary.
   274                              <1> ;       rsi -> Char after the terminal % of the source envvar name.
   275                              <1> ;       rdi -> Space for the next char to copy.
   276 00001EE5 0FB606              <1>     movzx eax, byte [rsi]  ;Is this a parameter like %[0-9]?
   277 00001EE8 3C30                <1>     cmp al, "0"
   278 00001EEA 7204                <1>     jb .notRep  ;If definitely not a number, keep going
   279 00001EEC 3C39                <1>     cmp al, "9"
   280 00001EEE 7271                <1>     jb .repParm ;If a number, its a replacable parameter :)
   281                              <1> .notRep:
   282 00001EF0 3C0D                <1>     cmp al, CR          
   283                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001EF2 74(E4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   284 00001EF4 3C25                <1>     cmp al, "%" ;If immediately followed by %, then return it
   285                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001EF6 74(E4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   286                              <1> ;Now do the env var search. Start by scanning for the terminating
   287                              <1> ; % of the var name. If we strike a delimiter char first, 
   288                              <1> ; we stop the expansion for the envvar.
   289 00001EF8 4889FB              <1>     mov rbx, rdi    ;Save where to write the envvar if one is found
   290 00001EFB 4889F7              <1>     mov rdi, rsi    ;Maintain pointer to the head of the envvar string
   291                              <1> .envVarLp:
   292 00001EFE AC                  <1>     lodsb
   293 00001EFF E8C1270000          <1>     call isALdelimiter  ;Exit if a delimiter is hit first.
   294                              <1> .lpExit:
   295 00001F04 480F44F7            <1>     cmove rsi, rdi  ;If a delim found, return rsi to the char past the % sign.
   296 00001F08 480F44FB            <1>     cmove rdi, rbx  ;And return rdi to where it was beforehand :)
   297                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001F0C 74(E4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   298 00001F0E 3C0D                <1>     cmp al, CR      ;If we are at the end of the line too, exit!
   299 00001F10 74F2                <1>     je .lpExit
   300 00001F12 3C25                <1>     cmp al, "%"         ;Did we find a terminating % found.
   301 00001F14 75E8                <1>     jne .envVarLp
   302                              <1> ;Fall here if we find the terminating % of the var name. rsi -> past %
   303 00001F16 C646FF3D            <1>     mov byte [rsi - 1], "=" ;Replace % with an equals sign for var search.
   304 00001F1A 56                  <1>     push rsi    ;Save ptr to the first char past the envvar
   305                              <1>     ;Take input rdi -> Varname to look for. Already in rdi.
   306 00001F1B E8572B0000          <1>     call searchForEnvVar    ;Returns rsi -> Envvar for copy in place
   307 00001F20 480F42FB            <1>     cmovc rdi, rbx  ;Reset rdi here if no envvar found and exit!
   308 00001F24 7239                <1>     jc .exit
   309 00001F26 4889F7              <1>     mov rdi, rsi    ;Point rdi to the ASCIIZ envvar value itself
   310 00001F29 B03D                <1>     mov al, "="
   311 00001F2B B9FFFFFFFF          <1>     mov ecx, -1
   312 00001F30 F2AE                <1>     repne scasb     ;Move rdi to the char past the equals sign
   313 00001F32 5E                  <1>     pop rsi         ;Get back the ptr to the first char past the envvar
   314                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001F33 72(E4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   315                              <1> 
   316 00001F35 56                  <1>     push rsi        ;Save the ptr to the first char past the envvar
   317 00001F36 4889DE              <1>     mov rsi, rbx    ;Point rsi to where to copy the envvar
   318 00001F39 E854270000          <1>     call strlen     ;Get the string length of the envvar value in ecx
   319                              <1> .copyVar:
   320 00001F3E FFC9                <1>     dec ecx         ;Drop 0 from count
   321 00001F40 4887FE              <1>     xchg rdi, rsi   ;Swap pointers for the copy
   322 00001F43 0FB65D01            <1>     movzx ebx, byte [rbp + 1] ;Get the count of chars already in the string
   323 00001F47 51                  <1>     push rcx
   324 00001F48 01D9                <1>     add ecx, ebx    ;Get # of chars we will have.
   325 00001F4A 81F980000000        <1>     cmp ecx, inLen  ;If we end up with more than 127 chars, truncate
   326 00001F50 59                  <1>     pop rcx
   327 00001F51 7207                <1>     jb .noTrunc
   328 00001F53 B97F000000          <1>     mov ecx, inLen - 1
   329 00001F58 29D9                <1>     sub ecx, ebx    ;Turn into # of chars to copy, make space for CR
   330                              <1> .noTrunc:
   331 00001F5A 004D01              <1>     add byte [rbp + 1], cl
   332 00001F5D F3A4                <1>     rep movsb   ;Moves rdi to the space for the next char
   333                              <1> .exit:
   334 00001F5F 5E                  <1>     pop rsi     ;Get back the ptr to the first char past the envvar name
   335                              <1>     return
    13                              <2> %%_ret:
    14 00001F60 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   336                              <1> .repParm:
   337 00001F61 2D30000000          <1>     sub eax, "0"
   338 00001F66 48FFC6              <1>     inc rsi ;Move the ptr past the replacable parameter value
   339 00001F69 488B1D43E1FFFF      <1>     mov rbx, qword [bbPtr]
   340 00001F70 0FB754431B          <1>     movzx edx, word [rbx + batBlockHdr.wArgs + 2*rax]   ;Get off from cmdLine
   341 00001F75 81FAFFFF0000        <1>     cmp edx, 0FFFFh   ;If there is no var, copy nothing and exit!
   342                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001F7B 74(60)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   343 00001F7D 56                  <1>     push rsi        ;Save ptr to source of next chars 
   344 00001F7E 488D3413            <1>     lea rsi, qword [rbx + rdx]  ;Save ptr to head of string to copy in rsi
   345 00001F82 31C9                <1>     xor ecx, ecx
   346 00001F84 FFC9                <1>     dec ecx
   347 00001F86 B00D                <1>     mov al, CR      ;Now scan for the terminating CR
   348 00001F88 4887F7              <1>     xchg rsi, rdi   ;Save dest ptr in rsi and point to string to cpy in rdi
   349 00001F8B 57                  <1>     push rdi        ;Save the head of the string for copy
   350 00001F8C F2AE                <1>     repne scasb     ;Get the length of the string with terminating CR
   351 00001F8E 5F                  <1>     pop rdi         ;Point back to head of string
   352 00001F8F F7D1                <1>     not ecx         ;Convert to one less than the length (drops the CR)
   353 00001F91 EBAB                <1>     jmp short .copyVar
   354                              <1> 
   355                              <1> batCleanup:
   356                              <1> ;This function is called after the last line has been processed by the 
   357                              <1> ; batch interpreter! Cleans up all the batch resources. Also called if 
   358                              <1> ; CTRLC called during a batch job and the user wants to kill the batch.
   359 00001F93 488B1D19E1FFFF      <1>     mov rbx, qword [bbPtr]
   360 00001F9A 8A4301              <1>     mov al, byte [rbx + batBlockHdr.bEchoFlg]   ;Reset the echo flag
   361 00001F9D 8805FBE0FFFF        <1>     mov byte [echoFlg], al
   362                              <1> ;-----------------------------------------------------------------------
   363                              <1> ;===Now free the FOR and CALL blocks... oops havent implemented yet!!===
   364                              <1> ; FOR blocks are generally cleaned up by the FOR command. CALL too. 
   365                              <1> ; But since this is the routine called by the error handler too, it 
   366                              <1> ; needs to check for these things. Not a big deal as normally we'll 
   367                              <1> ; just have a null pointer.
   368                              <1> ;-----------------------------------------------------------------------
   369                              <1> ;Finally free this batch header
   370 00001FA3 4150                <1>     push r8
   371 00001FA5 4989D8              <1>     mov r8, rbx
   372 00001FA8 B800490000          <1>     mov eax, 4900h
   373 00001FAD CD21                <1>     int 21h
   374 00001FAF 4158                <1>     pop r8
   375 00001FB1 E833F6FFFF          <1>     call cleanupRedirs  ;Clean up all redirections, close files etc
   376 00001FB6 48C705F2E0FFFF0000- <1>     mov qword [bbPtr], 0    
   376 00001FBF 0000                <1>
   377 00001FC1 8025D4E0FFFFE7      <1>     and byte [statFlg1], ~(inBatch|batchEOF)   ;Oh bye bye batch mode!
   378                              <1>     return
    13                              <2> %%_ret:
    14 00001FC8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   379                              <1> 
   380                              <1> batOpen:
   381                              <1> ;Opens the batch file and returns the handle in ebx.
   382                              <1> ;Prints the "replace disk" string if file not found.
   383                              <1> ;
   384                              <1> ;Input: Nothing. Opens the filespec in the batFile.
   385                              <1> ;Output: ebx = File handle for filespec in batFile.
   386                              <1> ;
   387                              <1> ;Funky behaviour worth noting:
   388                              <1> ; If a failure occurs in open, we keep prompting the user to 
   389                              <1> ; replace the disk. The only way out if the error is really bad is 
   390                              <1> ; via ^C which does all the cleanup we need. 
   391                              <1> ; Thus this never returns fail.
   392 00001FC9 50                  <1>     push rax
   393 00001FCA 52                  <1>     push rdx
   394 00001FCB 488D15E9E0FFFF      <1>     lea rdx, batFile
   395                              <1> .batOpen:
   396 00001FD2 B8003D0000          <1>     mov eax, 3D00h  ;Open for read only
   397 00001FD7 CD21                <1>     int 21h
   398 00001FD9 7315                <1>     jnc .batOpened
   399 00001FDB 488D15F1E8FFFF      <1>     lea rdx, needBat
   400 00001FE2 E885240000          <1>     call printString
   401 00001FE7 B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Allows for triggering ^C
   402 00001FEC CD21                <1>     int 21h
   403 00001FEE EBE2                <1>     jmp short .batOpen
   404                              <1> .batOpened:
   405 00001FF0 89C3                <1>     mov ebx, eax            ;Move the handle into ebx
   406 00001FF2 5A                  <1>     pop rdx
   407 00001FF3 58                  <1>     pop rax
   408                              <1>     return
    13                              <2> %%_ret:
    14 00001FF4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   409                              <1> 
   410                              <1> batClose:
   411                              <1> ;Close the handle in ebx.
   412 00001FF5 B8003E0000          <1>     mov eax, 3E00h  ;Close the file pointer in ebx
   413 00001FFA CD21                <1>     int 21h         
   414                              <1>     return
    13                              <2> %%_ret:
    14 00001FFC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   415                              <1> 
   416                              <1> batReadChar:
   417                              <1> ;Reads a char. 
   418                              <1> ;Input: ebx = Handle to read char from.
   419                              <1> ;       rdx -> Pointer to byte buffer to store byte.
   420                              <1> ;Output: 
   421                              <1> ;   CF=NC:
   422                              <1> ;       ZF=NZ: eax = 1. One char read.
   423                              <1> ;       ZF=ZE: eax = 0. EOF flag set in status byte. Zero or EOF char read.
   424                              <1> ;   CF=CY: Error in read. We act as if EOF reached. (Never checked.)
   425                              <1> ;Clobbers: None.
   426 00001FFD 51                  <1>     push rcx
   427 00001FFE B901000000          <1>     mov ecx, 1
   428 00002003 B8003F0000          <1>     mov eax, 3F00h
   429 00002008 CD21                <1>     int 21h 
   430 0000200A 59                  <1>     pop rcx 
   431 0000200B 7213                <1>     jc .bad     ;If CF, always act as if EOF. An error occured.
   432 0000200D 85C0                <1>     test eax, eax   ;Here we check if we read 1 byte. (Clears CF)
   433 0000200F 7405                <1>     jz .eof         ;Jump to eofexit if we didn't read any bytes
   434 00002011 803A1A              <1>     cmp byte [rdx], EOF ;Did we read ^Z char?
   435                              <1>     retne           ;Return if the char we read was not an EOF char
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002014 75(FC)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   436                              <1> .eof:
   437 00002016 9C                  <1>     pushfq      ;Preserve the flags for the bit toggle
   438 00002017 800D7EE0FFFF10      <1>     or byte [statFlg1], batchEOF    ;Set if we are done reading the file!
   439 0000201E 9D                  <1>     popfq
   440                              <1>     return    
    13                              <2> %%_ret:
    14 0000201F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   441                              <1> .bad:
   442 00002020 31C0                <1>     xor eax, eax    ;Signal we hit an EOF (Set ZF)
   443 00002022 F9                  <1>     stc             ;Never check it but ensure reset of CF.
   444 00002023 EBF1                <1>     jmp short .eof  ;And set the status bit
    18                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badDiskFull:
     7                              <1> ;This is a different error return, as this closes handles and prints
     8                              <1> ; disk full error and resets the command line!
     9 00002025 488D1546E9FFFF      <1>     lea rdx, noSpace
    10 0000202C 488D0D62ECFFFF      <1>     lea rcx, pipeErr
    11 00002033 F60567E0FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the flag set
    12 0000203A 746F                <1>     jz short badCmn ;If its just disk full, dont go through pipe clean
    13 0000203C 480F45D1            <1>     cmovnz rdx, rcx ;Swap error messages if pipe flag is on
    14 00002040 E866000000          <1>     call badCmn     ;Print the string
    15 00002045 E995F5FFFF          <1>     jmp redirPipeFailureCommon.noPrint  ;Now close pipes and fully reset!
    16                              <1> badNoMemError:
    17 0000204A 488D1510EDFFFF      <1>     lea rdx, noMemMsg
    18 00002051 EB58                <1>     jmp short badCmn
    19                              <1> badSyntaxError:
    20 00002053 488D1514ECFFFF      <1>     lea rdx, syntaxErr
    21 0000205A EB4F                <1>     jmp short badCmn
    22                              <1> badEnvSpaceError:
    23 0000205C 488D1529E9FFFF      <1>     lea rdx, noEnvSpace
    24 00002063 EB46                <1>     jmp short badCmn
    25                              <1> badAccError:
    26 00002065 488D15AEEBFFFF      <1>     lea rdx, accDenMsg
    27 0000206C EB3D                <1>     jmp short badCmn
    28                              <1> badParamError:
    29 0000206E 488D1523EAFFFF      <1>     lea rdx, badParm
    30 00002075 EB34                <1>     jmp short badCmn
    31                              <1> badDriveError:
    32 00002077 488D15DDE9FFFF      <1>     lea rdx, badDrv
    33 0000207E EB2B                <1>     jmp short badCmn
    34                              <1> badArgError:
    35 00002080 488D15A0ECFFFF      <1>     lea rdx, badArgs
    36 00002087 EB22                <1>     jmp short badCmn
    37                              <1> badFileError:
    38 00002089 488D157BECFFFF      <1>     lea rdx, badSpec
    39 00002090 EB19                <1>     jmp short badCmn
    40                              <1> badDupFnf:
    41                              <1> ;Hybrid error message
    42 00002092 488D15B1E8FFFF      <1>     lea rdx, dupName
    43 00002099 EB10                <1>     jmp short badCmn
    44                              <1> badFnf:
    45 0000209B 488D15BFE8FFFF      <1>     lea rdx, fnfMsg
    46 000020A2 EB07                <1>     jmp short badCmn
    47                              <1> badDirError:
    48 000020A4 488D15EEEAFFFF      <1>     lea rdx, badDir
    49                              <1> badCmn:
    50 000020AB E9BC230000          <1>     jmp printString     ;This will be made nuanced later, to agree with DOS
    51                              <1> badCmdError:
    52 000020B0 488D1578E8FFFF      <1>     lea rdx, badCmd
    53 000020B7 EBF2                <1>     jmp short badCmn
    54                              <1> dir:
    55                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    56 000020B9 C605DDE4FFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    57 000020C0 C605D7E4FFFF00      <1>     mov byte [dirLineCtr], 0
    58 000020C7 C705CEE4FFFF000000- <1>     mov dword [dirFileCtr], 0
    58 000020D0 00                  <1>
    59 000020D1 C605CCE4FFFF00      <1>     mov byte [dirSrchDir], 0
    60 000020D8 66C705B8E3FFFF0000  <1>     mov word [searchSpec], 0
    61 000020E1 488D3D3EE5FFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    62 000020E8 C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    63 000020EB 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    63 000020F4 3F                  <1>
    64 000020F5 48894701            <1>     mov qword [rdi + fcb.filename], rax
    65 000020F9 C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    66                              <1>     ;Start by scanning for the switches
    67 00002100 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    68 00002107 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    69                              <1> .scanNew:
    70 0000210A E8A8250000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    71 0000210F AC                  <1>     lodsb   ;Get this char
    72 00002110 3C0D                <1>     cmp al, CR
    73 00002112 744D                <1>     je .scanDone
    74 00002114 3A0518DFFFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    75 0000211A 7524                <1>     jne .notSwitch
    76 0000211C AC                  <1>     lodsb   ;Get the next char
    77 0000211D E87A250000          <1>     call ucChar
    78 00002122 3C57                <1>     cmp al, "W"
    79 00002124 7509                <1>     jne .notWide
    80 00002126 800D70E4FFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    81 0000212D EBDB                <1>     jmp short .scanNew
    82                              <1> .notWide:
    83 0000212F 3C50                <1>     cmp al, "P"
    84 00002131 0F8537FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    85 00002137 800D5FE4FFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    86 0000213E EBCA                <1>     jmp short .scanNew
    87                              <1> .notSwitch:
    88 00002140 F60556E4FFFF04      <1>     test byte [dirFlags], dirFileType
    89 00002147 0F8521FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    90                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    91 0000214D 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    92 00002150 E8EE260000          <1>     call copyArgumentToSearchSpec   
    93 00002155 48FFCE              <1>     dec rsi ;Point back to the terminator char
    94 00002158 800D3EE4FFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    95 0000215F EBA9                <1>     jmp short .scanNew
    96                              <1> .scanDone:
    97 00002161 F60535E4FFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    98 00002168 7438                <1>     jz .currentDrv
    99                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   100 0000216A 488D3528E3FFFF      <1>     lea rsi, searchSpec
   101 00002171 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   102 00002175 752B                <1>     jne .currentDrv
   103                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   104 00002177 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   105 0000217C 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   106 00002180 B801290000          <1>     mov eax, 2901h   ;Parse filename
   107 00002185 CD21                <1>     int 21h
   108 00002187 3CFF                <1>     cmp al, -1
   109 00002189 0F84E8FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   110                              <1>     ;Else the drive in the fcb is valid
   111 0000218F 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   112 00002194 84C0                <1>     test al, al
   113 00002196 740A                <1>     jz .currentDrv
   114 00002198 FEC8                <1>     dec al  ;Convert to 0 based drive number
   115 0000219A 880503E4FFFF        <1>     mov byte [dirDrv], al
   116 000021A0 EB0B                <1>     jmp short .dirPrintVol
   117                              <1> .currentDrv:
   118 000021A2 E8CD240000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   119 000021A7 8805F6E3FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   120                              <1> .dirPrintVol:
   121 000021AD 488D35E5E2FFFF      <1>     lea rsi, searchSpec
   122                              <1> ;Now construct the path on dirSrchDir.
   123 000021B4 488D3DE9E3FFFF      <1>     lea rdi, dirSrchDir
   124 000021BB 0FB605E1E3FFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   125 000021C2 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   126 000021C4 0441                <1>     add al, "A" ;Turn into a letter
   127 000021C6 B43A                <1>     mov ah, ":"
   128 000021C8 66AB                <1>     stosw   ;Store X: into the search path
   129 000021CA B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   130 000021CF CD2F                <1>     int 2fh
   131 000021D1 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   132 000021D3 0F849EFEFFFF        <1>     je badDriveError
   133                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   134 000021D9 8A0552DEFFFF        <1>     mov al, byte [pathSep]
   135 000021DF 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   136 000021E1 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   137 000021E3 AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   138 000021E4 FEC2                <1>     inc dl  ;Increment by 1
   139 000021E6 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   140 000021E9 B800470000          <1>     mov eax, 4700h  ;Print current working directory
   141 000021EE CD21                <1>     int 21h
   142 000021F0 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   143                              <1>     ;rsi points to the first char in the provided path.
   144                              <1>     ;rdi points to the first char of the cwd.
   145 000021F3 31C0                <1>     xor eax, eax
   146                              <1> .goToEndOfCwd:
   147                              <1> ;Move to the end of the string, could use repne?
   148 000021F5 3807                <1>     cmp byte [rdi], al
   149 000021F7 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   150 000021F9 48FFC7              <1>     inc rdi
   151 000021FC EBF7                <1>     jmp short .goToEndOfCwd
   152                              <1> .prepCopy:
   153 000021FE 8A052DDEFFFF        <1>     mov al, byte [pathSep]
   154 00002204 3806                <1>     cmp byte [rsi], al
   155 00002206 7412                <1>     je .copyPathLoop
   156 00002208 B43A                <1>     mov ah, ":"
   157 0000220A 86C4                <1>     xchg al, ah
   158 0000220C 663947FE            <1>     cmp word [rdi - 2], ax
   159 00002210 7408                <1>     je .copyPathLoop
   160 00002212 88E0                <1>     mov al, ah
   161 00002214 3847FF              <1>     cmp byte [rdi - 1], al
   162 00002217 7401                <1>     je .copyPathLoop
   163 00002219 AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   164                              <1> .copyPathLoop:
   165 0000221A AC                  <1>     lodsb
   166 0000221B 3A0510DEFFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   167 00002221 7509                <1>     jne .checkDot  ;If not, store it
   168                              <1> .lpPathseps:
   169 00002223 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   170 00002225 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   171 00002227 48FFC6              <1>     inc rsi
   172 0000222A EBF7                <1>     jmp short .lpPathseps
   173                              <1> .checkDot:
   174 0000222C 3C2E                <1>     cmp al, "."
   175 0000222E 7407                <1>     je .dots
   176                              <1> .store:
   177 00002230 AA                  <1>     stosb
   178 00002231 84C0                <1>     test al, al ;Was the char we just copied a null?
   179 00002233 7472                <1>     jz .exitPathCopy
   180 00002235 EBE3                <1>     jmp short .copyPathLoop
   181                              <1> .dots:
   182                              <1>     ;Here handle dot and dot dot
   183                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   184                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   185                              <1>     ; by 1. If it is null, go to top of loop.
   186                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   187 00002237 8A25F4DDFFFF        <1>     mov ah, byte [pathSep]
   188 0000223D 3867FF              <1>     cmp byte [rdi - 1], ah  
   189 00002240 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   190 00002242 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   191 00002244 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   192 00002247 7413                <1>     je .twoDot
   193                              <1>     ;This is only a "current dir" when next char is pathsep or null
   194 00002249 3A25E2DDFFFF        <1>     cmp ah, byte [pathSep]
   195 0000224F 7406                <1>     je .skipThisPathsep
   196 00002251 84E4                <1>     test ah, ah
   197 00002253 74C5                <1>     jz .copyPathLoop
   198 00002255 EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   199                              <1> .skipThisPathsep:
   200                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   201 00002257 48FFC6              <1>     inc rsi ;Point to the pathsep
   202 0000225A EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   203                              <1> .twoDot:
   204                              <1>     ;Woohoo, this works!
   205 0000225C 48FFC6              <1>     inc rsi ;Move past the second dot
   206 0000225F 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   207 00002261 3A25CADDFFFF        <1>     cmp ah, byte [pathSep]
   208 00002267 7408                <1>     je .tdOk
   209 00002269 84E4                <1>     test ah, ah
   210 0000226B 0F85FDFDFFFF        <1>     jne badParamError
   211                              <1> .tdOk:
   212 00002271 8A05BADDFFFF        <1>     mov al, byte byte [pathSep]
   213 00002277 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   214 0000227B 0F84EDFDFFFF        <1>     je badParamError
   215 00002281 4881EF02000000      <1>     sub rdi, 2
   216 00002288 31C9                <1>     xor ecx, ecx
   217 0000228A FFC9                <1>     dec ecx
   218 0000228C FD                  <1>     std
   219 0000228D F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   220 0000228F FC                  <1>     cld
   221 00002290 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   222 00002297 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   223 00002299 0F847BFFFFFF        <1>     jz .copyPathLoop
   224 0000229F 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   225 000022A2 E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   226                              <1> .exitPathCopy:
   227                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   228 000022A7 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   229 000022AE 8A057DDDFFFF        <1>     mov al, byte [pathSep]
   230 000022B4 B43A                <1>     mov ah, ":"
   231 000022B6 86C4                <1>     xchg al, ah
   232 000022B8 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   233 000022BC 7409                <1>     je .skipOverwrite
   234 000022BE 88E0                <1>     mov al, ah
   235 000022C0 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   236 000022C2 7503                <1>     jne .skipOverwrite
   237 000022C4 C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   238                              <1> .skipOverwrite:
   239 000022C7 488D35D6E2FFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   240 000022CE 4889F7              <1>     mov rdi, rsi
   241 000022D1 B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   242 000022D6 CD2F                <1>     int 2fh
   243 000022D8 E873250000          <1>     call scanForWildcards
   244 000022DD 742D                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   245 000022DF 4889F2              <1>     mov rdx, rsi
   246 000022E2 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   247 000022E6 7424                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   248                              <1> .notNull:
   249 000022E8 B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   250 000022ED B8004E0000          <1>     mov eax, 4E00h ;Find first
   251 000022F2 CD21                <1>     int 21h
   252 000022F4 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   253                              <1> ;Now we have searched for the file, is a directory?
   254 000022F6 F60537DEFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   255 000022FD 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   256                              <1>     ;Here we are searching IN a directory. Default search pattern!
   257 000022FF 31C0                <1>     xor eax, eax
   258 00002301 31C9                <1>     xor ecx, ecx
   259 00002303 FFC9                <1>     dec ecx
   260 00002305 F2AE                <1>     repne scasb
   261 00002307 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   262 0000230A EB40                <1>     jmp short .wcDefaultSearch
   263                              <1> .wcSearchPattern:
   264                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   265                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   266 0000230C 31C0                <1>     xor eax, eax
   267 0000230E 31C9                <1>     xor ecx, ecx
   268 00002310 FFC9                <1>     dec ecx
   269 00002312 F2AE                <1>     repne scasb ;Scan forwards
   270                              <1>     ;Here rdi points past the null at the end
   271 00002314 8A0517DDFFFF        <1>     mov al, byte [pathSep]
   272 0000231A 31C9                <1>     xor ecx, ecx
   273 0000231C FFC9                <1>     dec ecx
   274 0000231E FD                  <1>     std ;Search backwards
   275 0000231F F2AE                <1>     repne scasb
   276 00002321 FC                  <1>     cld ;Search forwards again
   277 00002322 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   278 00002325 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   279 00002329 7503                <1>     jne .wcsp1
   280 0000232B 48FFC7              <1>     inc rdi ;Go one char forwards
   281                              <1> .wcsp1:
   282                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   283 0000232E 57                  <1>     push rdi
   284 0000232F 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   285 00002331 7503                <1>     jne .wcsp2
   286 00002333 48FFC7              <1>     inc rdi
   287                              <1> .wcsp2:
   288 00002336 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   289 00002339 488D3DE6E2FFFF      <1>     lea rdi, dirSrchFCB
   290 00002340 B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   291 00002345 CD21                <1>     int 21h
   292 00002347 5F                  <1>     pop rdi
   293 00002348 31C0                <1>     xor eax, eax
   294 0000234A 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   295                              <1> .wcDefaultSearch:
   296 0000234C 0FB60550E2FFFF      <1>     movzx eax, byte [dirDrv] 
   297 00002353 E88B130000          <1>     call volume.dirEP
   298 00002358 488D15A2E8FFFF      <1>     lea rdx, dirMain    ;Print message intro
   299 0000235F B409                <1>     mov ah, 09h
   300 00002361 CD21                <1>     int 21h
   301 00002363 C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   302 00002366 488D1537E2FFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   303 0000236D B409                <1>     mov ah, 09h
   304 0000236F CD21                <1>     int 21h
   305 00002371 C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   306 00002374 488D153CE5FFFF      <1>     lea rdx, crlf2
   307 0000237B B409                <1>     mov ah, 09h
   308 0000237D CD21                <1>     int 21h
   309                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   310                              <1> ;rdi points to the terminating null
   311 0000237F 8A05ACDCFFFF        <1>     mov al, byte [pathSep]
   312 00002385 3847FF              <1>     cmp byte [rdi - 1], al
   313 00002388 7403                <1>     je .root
   314 0000238A 48FFC7              <1>     inc rdi
   315                              <1> .root:
   316 0000238D 48FFCF              <1>     dec rdi ;Point back to the pathsep
   317 00002390 AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   318 00002391 488D358FE2FFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   319 00002398 E8F5230000          <1>     call FCBToAsciiz    ;Terminates for free
   320 0000239D E801000000          <1>     call .searchForFile
   321                              <1>     return
    13                              <2> %%_ret:
    14 000023A2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   322                              <1> 
   323                              <1> .searchForFile:
   324 000023A3 B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   325 000023A8 488D15F5E1FFFF      <1>     lea rdx, dirSrchDir
   326 000023AF B8004E0000          <1>     mov eax, 4E00h ;Find first
   327 000023B4 CD21                <1>     int 21h
   328 000023B6 720B                <1>     jc .dirNoMoreFiles
   329                              <1> .findNext:
   330 000023B8 E880000000          <1>     call .dirPrintFileData  ;Print the file information
   331 000023BD B44F                <1>     mov ah, 4Fh
   332 000023BF CD21                <1>     int 21h
   333 000023C1 73F5                <1>     jnc .findNext 
   334                              <1> .dirNoMoreFiles:
   335 000023C3 F605D3E1FFFF01      <1>     test byte [dirFlags], dirWideType
   336 000023CA 740B                <1>     jz .dirNoEndNewLine
   337 000023CC 488D15E1E4FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   338 000023D3 B409                <1>     mov ah, 09h
   339 000023D5 CD21                <1>     int 21h
   340                              <1> .dirNoEndNewLine:
   341                              <1>     ;Now we print the number of files and the number of bytes on the disk
   342 000023D7 F705BEE1FFFFFFFFFF- <1>     test dword [dirFileCtr], -1
   342 000023E0 FF                  <1>
   343 000023E1 750D                <1>     jnz .filesFound
   344                              <1>     ;Else print File not found and exit!
   345 000023E3 488D1577E5FFFF      <1>     lea rdx, fnfMsg
   346 000023EA E87D200000          <1>     call printString
   347                              <1>     return
    13                              <2> %%_ret:
    14 000023EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   348                              <1> .filesFound:
   349 000023F0 8B05A9E1FFFF        <1>     mov eax, dword [dirFileCtr]   ;Get number of files
   350 000023F6 B909000000          <1>     mov ecx, 9
   351 000023FB E864240000          <1>     call printDecimalValLB
   352 00002400 488D1533E6FFFF      <1>     lea rdx, dirOk
   353 00002407 B409                <1>     mov ah, 09h
   354 00002409 CD21                <1>     int 21h
   355 0000240B B800360000          <1>     mov eax, 3600h ;Get disk info
   356 00002410 8A158DE1FFFF        <1>     mov dl, byte [dirDrv]
   357 00002416 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   358 00002418 CD21                <1>     int 21h ;Get disk free space info
   359 0000241A 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   360 0000241D 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   361 00002420 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   362 00002422 F7E1                <1>     mul ecx ;Get bytes per cluster
   363 00002424 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   364                              <1>     ;rax now has the number of free bytes on the disk
   365 00002427 B911000000          <1>     mov ecx, 17     ;2 Tb with commas needs this 
   366 0000242C E833240000          <1>     call printDecimalValLB
   367 00002431 488D150CE6FFFF      <1>     lea rdx, bytesOk
   368 00002438 B409                <1>     mov ah, 09h
   369 0000243A CD21                <1>     int 21h
   370                              <1>     return
    13                              <2> %%_ret:
    14 0000243C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   371                              <1> 
   372                              <1> .dirPrintFileData:
   373                              <1> ;Use cmdFcb to build the file name with space
   374                              <1> ;Start by print the name (same for both cases)
   375                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   376 0000243D F605F0DCFFFF46      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles | dirCharDev
   377                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002444 75(3C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   378 00002446 488D35F0DCFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   379 0000244D 488D3DBBDCFFFF      <1>     lea rdi, cmdFcb
   380 00002454 E8CB220000          <1>     call asciiFilenameToFCB
   381 00002459 488D15AFDCFFFF      <1>     lea rdx, cmdFcb
   382 00002460 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   383 00002465 BB01000000          <1>     mov ebx, 1  ;STDOUT
   384 0000246A B440                <1>     mov ah, 40h ;Write handle
   385 0000246C CD21                <1>     int 21h
   386 0000246E 52                  <1>     push rdx
   387 0000246F B220                <1>     mov dl, " "
   388 00002471 B402                <1>     mov ah, 02h ;Print char
   389 00002473 CD21                <1>     int 21h
   390 00002475 5A                  <1>     pop rdx
   391 00002476 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   392 0000247D B903000000          <1>     mov ecx, 3  ;Print three chars
   393 00002482 BB01000000          <1>     mov ebx, 1  ;STDOUT
   394 00002487 B440                <1>     mov ah, 40h ;Write handle
   395 00002489 CD21                <1>     int 21h
   396 0000248B F6050BE1FFFF01      <1>     test byte [dirFlags], dirWideType
   397 00002492 757B                <1>     jnz .widePrint
   398                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   399                              <1>     ;Now check if a DIR
   400 00002494 F60599DCFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   401 0000249B 7422                <1>     jz .dirPrintNotDir
   402 0000249D 488D15AEE5FFFF      <1>     lea rdx, dirLbl
   403 000024A4 B409                <1>     mov ah, 09h
   404 000024A6 CD21                <1>     int 21h
   405 000024A8 488D1541EAFFFF      <1>     lea rdx, threeSpc
   406 000024AF B409                <1>     mov ah, 09h
   407 000024B1 CD21                <1>     int 21h
   408 000024B3 B409                <1>     mov ah, 09h
   409 000024B5 CD21                <1>     int 21h
   410 000024B7 B220                <1>     mov dl, SPC
   411 000024B9 B402                <1>     mov ah, 02h
   412 000024BB CD21                <1>     int 21h
   413 000024BD EB1C                <1>     jmp short .dirPrintFileDT
   414                              <1> .dirPrintNotDir:
   415                              <1> ;Here we print the file size
   416 000024BF B220                <1>     mov dl, " "
   417 000024C1 B402                <1>     mov ah, 02h
   418 000024C3 CD21                <1>     int 21h
   419 000024C5 8B056EDCFFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   420 000024CB B90D000000          <1>     mov ecx, 13
   421 000024D0 E88F230000          <1>     call printDecimalValLB
   422 000024D5 B220                <1>     mov dl, SPC
   423 000024D7 B402                <1>     mov ah, 02h
   424 000024D9 CD21                <1>     int 21h
   425                              <1> .dirPrintFileDT:
   426 000024DB 0FB70555DCFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   427 000024E2 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   428 000024E4 E8511D0000          <1>     call printDate
   429 000024E9 488D1500EAFFFF      <1>     lea rdx, threeSpc
   430 000024F0 B409                <1>     mov ah, 09h
   431 000024F2 CD21                <1>     int 21h
   432 000024F4 0FB7053ADCFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   433 000024FB E85C1E0000          <1>     call printTime
   434 00002500 488D15ADE3FFFF      <1>     lea rdx, crlf
   435 00002507 B409                <1>     mov ah, 09h
   436 00002509 CD21                <1>     int 21h
   437 0000250B B017                <1>     mov al, 23  ;23 lines... for the next bit
   438 0000250D EB0D                <1>     jmp short .dirPrintNameExit
   439                              <1> .widePrint:
   440                              <1> ;If /W, print name space ext space space space space
   441 0000250F 488D15D5E9FFFF      <1>     lea rdx, fourSpc
   442 00002516 B409                <1>     mov ah, 09h ;Print string
   443 00002518 CD21                <1>     int 21h
   444 0000251A B073                <1>     mov al, 5*23    ;5 entries per line...
   445                              <1> .dirPrintNameExit:
   446 0000251C FF057DE0FFFF        <1>     inc dword [dirFileCtr]   ;Increment file counter
   447 00002522 FE0576E0FFFF        <1>     inc byte [dirLineCtr]
   448 00002528 380570E0FFFF        <1>     cmp byte [dirLineCtr], al
   449                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000252E 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002530 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   450 00002531 F60565E0FFFF02      <1>     test byte [dirFlags], dirPageType
   451 00002538 741A                <1>     jz .dirPrnNoPag
   452 0000253A 488D1538E5FFFF      <1>     lea rdx, pauseMes
   453 00002541 B409                <1>     mov ah, 09h
   454 00002543 CD21                <1>     int 21h
   455 00002545 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   456 00002547 CD21                <1>     int 21h
   457 00002549 488D1564E3FFFF      <1>     lea rdx, crlf   ;Force new line
   458 00002550 B409                <1>     mov ah, 09h
   459 00002552 CD21                <1>     int 21h
   460                              <1> .dirPrnNoPag:
   461 00002554 C60543E0FFFF00      <1>     mov byte [dirLineCtr], 0
   462                              <1>     return
    13                              <2> %%_ret:
    14 0000255B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   463                              <1> 
   464                              <1> chdir:
   465 0000255C F60549DBFFFFFF      <1>     test byte [arg1Flg], -1
   466 00002563 754D                <1>     jnz .changeDir
   467                              <1>     ;Print CWD
   468                              <1> .printCWD:
   469 00002565 E8771F0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   470 0000256A E8F61E0000          <1>     call printCRLF
   471                              <1>     return
    13                              <2> %%_ret:
    14 0000256F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   472                              <1> .printDiskCWD:
   473                              <1> ;Print CWD for a specified drive
   474 00002570 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   475 00002574 88D0                <1>     mov al, dl
   476 00002576 0440                <1>     add al, "@" ;Get the UC letter
   477 00002578 B43A                <1>     mov ah, ":"
   478 0000257A 488D3D18DFFFFF      <1>     lea rdi, searchSpec
   479 00002581 66AB                <1>     stosw   ;Store X:, rdi+=2
   480 00002583 8A05A8DAFFFF        <1>     mov al, byte [pathSep]
   481 00002589 AA                  <1>     stosb   ;Store pathSep, inc rdi
   482 0000258A B447                <1>     mov ah, 47h ;Get Current Working Directory
   483 0000258C 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   484 0000258F CD21                <1>     int 21h
   485 00002591 E8FC200000          <1>     call strlen
   486 00002596 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   487 0000259C B440                <1>     mov ah, 40h ;Write to handle
   488 0000259E BB01000000          <1>     mov ebx, 1  ;STDOUT
   489 000025A3 488D15EFDEFFFF      <1>     lea rdx, searchSpec
   490 000025AA CD21                <1>     int 21h
   491 000025AC E8B41E0000          <1>     call printCRLF
   492                              <1>     return
    13                              <2> %%_ret:
    14 000025B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   493                              <1> .changeDir:
   494 000025B2 8A05F6DAFFFF        <1>     mov al, byte [arg1FCBret]
   495 000025B8 3CFF                <1>     cmp al, -1 
   496 000025BA 0F84B7FAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   497 000025C0 E866220000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   498 000025C5 488D15CDDEFFFF      <1>     lea rdx, searchSpec
   499 000025CC B43B                <1>     mov ah, 3Bh ;CHDIR
   500 000025CE CD21                <1>     int 21h
   501 000025D0 0F82CEFAFFFF        <1>     jc badDirError
   502                              <1>     return
    13                              <2> %%_ret:
    14 000025D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   503                              <1> 
   504                              <1> mkdir:
   505 000025D7 F605CEDAFFFFFF      <1>     test byte [arg1Flg], -1
   506 000025DE 0F849CFAFFFF        <1>     jz badArgError
   507 000025E4 F605C4DAFFFFFF      <1>     test byte [arg2Flg], -1
   508 000025EB 0F858FFAFFFF        <1>     jnz badArgError
   509                              <1>     ;We have exactly one argument
   510 000025F1 8A05B7DAFFFF        <1>     mov al, byte [arg1FCBret]
   511 000025F7 3CFF                <1>     cmp al, -1 
   512 000025F9 0F8478FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   513 000025FF E827220000          <1>     call buildCommandPath
   514 00002604 488D158EDEFFFF      <1>     lea rdx, searchSpec
   515 0000260B B800390000          <1>     mov eax, 3900h  ;MKDIR
   516 00002610 CD21                <1>     int 21h
   517                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002612 73(D6)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   518                              <1> .badMake:   ;Else, bad make
   519 00002614 488D1592E5FFFF      <1>     lea rdx, badMD
   520 0000261B E94C1E0000          <1>     jmp printString
   521                              <1> 
   522                              <1> rmdir:
   523 00002620 F60585DAFFFFFF      <1>     test byte [arg1Flg], -1
   524 00002627 0F8453FAFFFF        <1>     jz badArgError
   525 0000262D F6057BDAFFFFFF      <1>     test byte [arg2Flg], -1
   526 00002634 0F8546FAFFFF        <1>     jnz badArgError
   527                              <1>     ;We have exactly one argument
   528 0000263A 8A056EDAFFFF        <1>     mov al, byte [arg1FCBret]
   529 00002640 3CFF                <1>     cmp al, -1 
   530 00002642 0F842FFAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   531 00002648 E8DE210000          <1>     call buildCommandPath
   532 0000264D 488D1545DEFFFF      <1>     lea rdx, searchSpec
   533 00002654 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   534 00002659 CD21                <1>     int 21h
   535                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000265B 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000265D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   536                              <1> .badRemove:   ;Else, bad make
   537 0000265E 488D1565E5FFFF      <1>     lea rdx, badRD
   538 00002665 E9021E0000          <1>     jmp printString
   539                              <1> 
   540                              <1> copy:
   541 0000266A 66C70513E1FFFFFFFF  <1>     mov word [sourceHdl], -1
   542 00002673 66C7050CE1FFFFFFFF  <1>     mov word [destHdl], -1
   543 0000267C 66C70505E1FFFFFFFF  <1>     mov word [srcHdlInfo], -1
   544 00002685 C6050EE1FFFF00      <1>     mov byte [bCpFlg], 0    ;State flag!
   545 0000268C 48C705F5E0FFFF0000- <1>     mov qword [cpBufPtr], 0 ;Init to null ptr!
   545 00002695 0000                <1>
   546 00002697 66C705F4E0FFFF0000  <1>     mov word [wCpBufSz], 0  ;Clear buffer count        
   547 000026A0 C705ECE0FFFF000000- <1>     mov dword [dCpCnt], 0   ;Clear file count
   547 000026A9 00                  <1>
   548 000026AA C605B5DFFFFF00      <1>     mov byte [srcSpec], 0   ;Clear first bytes of the buffers
   549 000026B1 C60530E0FFFF00      <1>     mov byte [destSpec], 0
   550 000026B8 48C705A7E0FFFF0000- <1>     mov qword [srcPtr], 0
   550 000026C1 0000                <1>
   551 000026C3 48C705A4E0FFFF0000- <1>     mov qword [destPtr], 0
   551 000026CC 0000                <1>
   552 000026CE B800540000          <1>     mov eax, 5400h  ;Get verify flag
   553 000026D3 CD21                <1>     int 21h
   554 000026D5 8805AAE0FFFF        <1>     mov byte [verifyFlg], al    ;Save verify flag!
   555                              <1> ;Start with getting a disk buffer, of the size of the internal disk buffers. 
   556                              <1> ;If we cant allocate full diskbuffer, get as much as we can
   557                              <1> ;Diskbuffer as thats the best optimisation for IO buffers
   558 000026DB B800520000          <1>     mov eax, 5200h
   559 000026E0 CD21                <1>     int 21h ;Get in rbx ptr to sysvars
   560 000026E2 0FB74B20            <1>     movzx ecx, word [rbx + 20h] ;Get the internal buffer size in ecx!
   561 000026E6 89CB                <1>     mov ebx, ecx
   562 000026E8 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs, save bytes in ecx
   563 000026EB B800480000          <1>     mov eax, 4800h
   564 000026F0 CD21                <1>     int 21h
   565 000026F2 731E                <1>     jnc .bufOk
   566 000026F4 85DB                <1>     test ebx, ebx       ;Cannot allocate? Yikes...
   567 000026F6 750C                <1>     jnz .okSize
   568                              <1> .badAlloc:
   569                              <1> ;Not enough memory error!
   570 000026F8 488D151EE3FFFF      <1>     lea rdx, cpNoMem
   571 000026FF E9A7F9FFFF          <1>     jmp badCmn  ;Print the string and return!
   572                              <1> .okSize:
   573 00002704 89D9                <1>     mov ecx, ebx    
   574 00002706 C1E104              <1>     shl ecx, 4  ;Convert into bytes from paragraphs
   575 00002709 B800480000          <1>     mov eax, 4800h
   576 0000270E CD21                <1>     int 21h
   577 00002710 72E6                <1>     jc .badAlloc
   578                              <1> .bufOk:
   579 00002712 48890573E0FFFF      <1>     mov qword [cpBufPtr], rax   ;Save ptr to xfr area
   580 00002719 66890D74E0FFFF      <1>     mov word [wCpBufSz], cx     ;Save buffer size
   581                              <1> ;Go to the end of the cmd line and search backwards for the destination first
   582 00002720 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   583 00002727 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]
   584 0000272F FFC9                <1>     dec ecx ;Turn into offset
   585 00002731 4801CE              <1>     add rsi, rcx
   586 00002734 31D2                <1>     xor edx, edx    ;Use edx as a counter for number of destination switches
   587 00002736 FD                  <1>     std ;Go in reverse
   588                              <1> .sd:    ;At this point, any switch chars affect destination!
   589 00002737 E87B1F0000          <1>     call skipDelimiters ;skipDelimiters in reverse!
   590 0000273C 8A05F0D8FFFF        <1>     mov al, byte [switchChar]
   591 00002742 384601              <1>     cmp byte [rsi + 1], al  ;Did we hit a switch?
   592 00002745 7509                <1>     jne .noSwitch
   593                              <1>     ;Here we hit a switchchar! Process it! rsi points to char before switchchar
   594 00002747 0FB64602            <1>     movzx eax, byte [rsi + 2]   ;Get the char
   595 0000274B 50                  <1>     push rax        ;Push the switchchar
   596 0000274C FFC2                <1>     inc edx         ;Inc the counter
   597 0000274E EBE7                <1>     jmp short .sd   ;Now go back to skipping delimiters again!
   598                              <1> .noSwitch:
   599                              <1> ;Ok so we hit a path. Now set the flags based on the stack!
   600 00002750 85D2                <1>     test edx, edx
   601 00002752 7412                <1>     jz .noDestSwitch
   602                              <1> .ns1:
   603 00002754 58                  <1>     pop rax ;Pop the switch char
   604 00002755 B304                <1>     mov bl, ascDes
   605 00002757 E805040000          <1>     call .doSwitchRev
   606 0000275C 0F8570040000        <1>     jnz .badExit    ;Invalid switch, abort procedure!    
   607 00002762 FFCA                <1>     dec edx
   608 00002764 75EE                <1>     jnz .ns1
   609                              <1> .noDestSwitch:
   610                              <1> ;Now search for the starting delimiter or start of line
   611 00002766 48FFC6              <1>     inc rsi ;Go to the last char in the path
   612                              <1> .noSwitchLp:
   613 00002769 AC                  <1>     lodsb   ;Get char at rsi, go back a char
   614 0000276A E8561F0000          <1>     call isALdelimiter
   615 0000276F 7412                <1>     je .destFnd
   616 00002771 8A05BBD8FFFF        <1>     mov al, byte [switchChar]
   617 00002777 3846FF              <1>     cmp byte [rsi - 1], al  ;Peek if an embedded switch?
   618 0000277A 7404                <1>     je .se  ;Jump if so!
   619 0000277C FFC9                <1>     dec ecx ;One less char left to search
   620 0000277E EBE9                <1>     jmp short .noSwitchLp
   621                              <1> .se:
   622 00002780 48FFCE              <1>     dec rsi     ;Dec to make the below work!
   623                              <1> .destFnd:
   624 00002783 4881C602000000      <1>     add rsi, 2  ;Go back to the first char past the delimiter
   625 0000278A FC                  <1>     cld 
   626 0000278B 4889F5              <1>     mov rbp, rsi    ;Save this ptr in rbp temporarily
   627 0000278E 488D3D53DFFFFF      <1>     lea rdi, destSpec
   628 00002795 57                  <1>     push rdi
   629 00002796 E84D200000          <1>     call cpDelimPathToBufz ;Copy this over!   
   630 0000279B 5F                  <1>     pop rdi
   631 0000279C E8CD1F0000          <1>     call findLastPathComponant  ;Get last path componant in rdi
   632 000027A1 48893DCADFFFFF      <1>     mov qword [destPtr], rdi
   633 000027A8 807F013A            <1>     cmp byte [rdi + 1], ":" ;Is this a colon?
   634 000027AC 7517                <1>     jne .destEnd    ;Dont worry
   635 000027AE 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   636 000027B0 E8E71E0000          <1>     call ucChar             ;Make sure we UC the drive letter
   637 000027B5 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   638 000027B7 4881C702000000      <1>     add rdi, 2              ;Point to this null
   639 000027BE 48893DADDFFFFF      <1>     mov qword [destPtr], rdi    ;Store chars over the null
   640                              <1> .destEnd:
   641                              <1> ;Now start with source processing!! Clear the binSrc bit in bCpFlg
   642 000027C5 8025CEDFFFFFFD      <1>     and byte [bCpFlg], ~binSrc  ;Mightve been accidentally set by dest flags
   643 000027CC 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   644                              <1> .srcLp:
   645 000027D3 E8DF1E0000          <1>     call skipDelimiters 
   646 000027D8 8A0554D8FFFF        <1>     mov al, byte [switchChar]
   647 000027DE 3806                <1>     cmp byte [rsi], al
   648 000027E0 7516                <1>     jne .noSrcSw    ;Not switch! Must be filename start!
   649                              <1>     ;rsi points to switch after switchchar
   650 000027E2 B301                <1>     mov bl, ascSrc
   651 000027E4 E872030000          <1>     call .doSwitch
   652 000027E9 0F85E3030000        <1>     jnz .badExit
   653 000027EF 4881C602000000      <1>     add rsi, 2
   654 000027F6 EBDB                <1>     jmp short .srcLp    ;Now keep searching for start of filename
   655                              <1> .noSrcSw:
   656 000027F8 4839F5              <1>     cmp rbp, rsi
   657 000027FB 7527                <1>     jne .noSameSrcDest
   658                              <1>     ;Here if the destination we specified earlier is the same as the source
   659                              <1>     ;This means, the actual destination is the current default drive
   660                              <1>     ; on the current directory. Pass to DOS X:FILENAME.EXT<NUL> string.
   661 000027FD E8721E0000          <1>     call getCurrentDrive    ;Get current drive
   662 00002802 0441                <1>     add al, "A"             ;Turn into a drive letter
   663 00002804 B43A                <1>     mov ah, ":"
   664 00002806 0FB7C0              <1>     movzx eax, ax
   665 00002809 8905D9DEFFFF        <1>     mov dword [destSpec], eax   ;Add a default null terminator
   666 0000280F 488D3DD4DEFFFF      <1>     lea rdi, destSpec+2         ;Point to the null after the colon
   667 00002816 48893D55DFFFFF      <1>     mov qword [destPtr], rdi    ;Copy the filenames here
   668 0000281D 800D76DFFFFF20      <1>     or byte [bCpFlg], mod1Cpy   ;Copy to curdir in cur drive
   669                              <1> .noSameSrcDest:
   670 00002824 488D3D3BDEFFFF      <1>     lea rdi, srcSpec            ;rsi now goes into the source spec!
   671 0000282B 57                  <1>     push rdi
   672 0000282C E8B71F0000          <1>     call cpDelimPathToBufz      ;Copy this over! rsi points past delimiter
   673 00002831 5F                  <1>     pop rdi
   674                              <1>     ;Now go forwards and pick up any more switches.
   675                              <1>     ;Also any "+" signs here!!
   676 00002832 48FFCE              <1>     dec rsi ;Point back to the first delimiter
   677                              <1> .swSrcSwPost:
   678 00002835 E87D1E0000          <1>     call skipDelimiters ;Skips trailing delimiters
   679 0000283A 8A05F2D7FFFF        <1>     mov al, byte [switchChar]
   680 00002840 3806                <1>     cmp byte [rsi], al
   681 00002842 7516                <1>     jne .swSrcSwPostExit
   682                              <1>     ;rsi points to switch after switchchar
   683 00002844 B301                <1>     mov bl, ascSrc
   684 00002846 E810030000          <1>     call .doSwitch  ;Puts us at the char past the switch itself
   685 0000284B 0F8581030000        <1>     jnz .badExit
   686 00002851 4881C602000000      <1>     add rsi, 2      ;Go past the switch
   687 00002858 EBDB                <1>     jmp short .swSrcSwPost
   688                              <1> .swSrcSwPostExit:
   689 0000285A 4889FE              <1>     mov rsi, rdi
   690 0000285D E8EE1F0000          <1>     call scanForWildcards   ;Find if we have a WC in this source!
   691 00002862 7507                <1>     jnz .oneCp
   692 00002864 800D2FDFFFFF08      <1>     or byte [bCpFlg], wcSrc ;We are copying many files. Disp names
   693                              <1> .oneCp:
   694 0000286B E8FE1E0000          <1>     call findLastPathComponant  ;Get last componant of src in rdi
   695 00002870 48893DF3DEFFFF      <1>     mov qword [srcPtr], rdi     ;Now save the last componant
   696 00002877 807F013A            <1>     cmp byte [rdi + 1], ":"     ;Is this a colon?
   697 0000287B 7517                <1>     jne .srcEnd             ;Dont worry
   698 0000287D 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   699 0000287F E8181E0000          <1>     call ucChar             ;Make sure we UC the drive letter
   700 00002884 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   701 00002886 4881C702000000      <1>     add rdi, 2              ;Point after the colon
   702 0000288D 48893DD6DEFFFF      <1>     mov qword [srcPtr], rdi ;Store chars past the colon
   703                              <1> .srcEnd:
   704                              <1> ;Now uppercase both paths
   705 00002894 488D35CBDDFFFF      <1>     lea rsi, srcSpec
   706 0000289B E8081E0000          <1>     call normalisePath
   707 000028A0 488D3D41DEFFFF      <1>     lea rdi, destSpec
   708 000028A7 E8FC1D0000          <1>     call normalisePath
   709                              <1> ;Now establish if the source is a directory or not!
   710 000028AC F605E7DEFFFF08      <1>     test byte [bCpFlg], wcSrc
   711 000028B3 7577                <1>     jnz .checkDestDir   ;Skip check if source has wildcards
   712 000028B5 488D15AADDFFFF      <1>     lea rdx, srcSpec
   713 000028BC 4889D6              <1>     mov rsi, rdx
   714 000028BF 66AD                <1>     lodsw   ;Get the first two chars, is it "X:" style
   715 000028C1 80FC3A              <1>     cmp ah, ":"
   716 000028C4 7522                <1>     jne .isSrcDir   ;If not, check explicitly
   717 000028C6 AC                  <1>     lodsb           ;Get char past :
   718 000028C7 84C0                <1>     test al, al     ;Is byte three nul?
   719 000028C9 740D                <1>     jz .srcStorWc   ;If so, we have "X:<NUL>"
   720 000028CB 3A0560D7FFFF        <1>     cmp al, byte [pathSep]  ;If char past : isnt pathsep, check manually
   721 000028D1 7515                <1>     jne .isSrcDir
   722 000028D3 AC                  <1>     lodsb           ;Get char past char past "X:\"
   723 000028D4 84C0                <1>     test al, al     
   724 000028D6 7510                <1>     jnz .isSrcDir   ;Fall thru is "X:\<NUL>"
   725                              <1> .srcStorWc:
   726                              <1> ;rsi points past the char to store the WC at
   727 000028D8 C746FF2A2E2A00      <1>     mov dword [rsi - 1], "*.*"  ;Store with terminating null!
   728 000028DF 800DB4DEFFFF08      <1>     or byte [bCpFlg], wcSrc     ;We're adding the wildcard to the source!
   729 000028E6 EB44                <1>     jmp short .checkDestDir
   730                              <1> .isSrcDir:
   731 000028E8 B910000000          <1>     mov ecx, dirDirectory
   732 000028ED B8004E0000          <1>     mov eax, 4E00h
   733 000028F2 CD21                <1>     int 21h
   734 000028F4 7236                <1>     jc .checkDestDir    ;Wasn't a dir!
   735                              <1>     ;Was the file we found actually a directory?
   736 000028F6 803D37D8FFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   737 000028FD 752D                <1>     jne .checkDestDir   ;Wasn't a dir
   738 000028FF 4889D7              <1>     mov rdi, rdx
   739 00002902 E88B1D0000          <1>     call strlen
   740 00002907 FFC9                <1>     dec ecx
   741 00002909 4801CF              <1>     add rdi, rcx    ;Move rdi to the terminating null
   742 0000290C 8A051FD7FFFF        <1>     mov al, byte [pathSep]
   743 00002912 3847FF              <1>     cmp byte [rdi - 1], al  ;Do we have a trailing pathsep?
   744 00002915 7401                <1>     je .srctpsp
   745 00002917 AA                  <1>     stosb   ;Store the pathsep over the null, inc rdi
   746                              <1> .srctpsp:
   747 00002918 48893D4BDEFFFF      <1>     mov qword [srcPtr], rdi ;Update the srcPtr
   748 0000291F B82A2E2A00          <1>     mov eax, "*.*"
   749 00002924 AB                  <1>     stosd   ;Store the WC with terminating nul!
   750 00002925 800D6EDEFFFF08      <1>     or byte [bCpFlg], wcSrc ;We're adding the wildcard to the source!
   751                              <1> .checkDestDir:
   752                              <1> ;Now establish if destination is a directory or not!
   753 0000292C F60567DEFFFF20      <1>     test byte [bCpFlg], mod1Cpy ;If we already know its mod1, skip
   754 00002933 0F855E010000        <1>     jnz .mod1
   755 00002939 488D35A8DDFFFF      <1>     lea rsi, destSpec
   756 00002940 66AD                <1>     lodsw   ;Get the first word, i.e. candidate "X:"
   757 00002942 80FC3A              <1>     cmp ah, ":"
   758 00002945 751A                <1>     jne .isDestDir
   759 00002947 66AD                <1>     lodsw   ;Get second word, i.e. candidate "\<NUL>" or "<NUL>"
   760 00002949 84C0                <1>     test al, al ;Is byte three nul?
   761 0000294B 0F8446010000        <1>     jz .mod1    ;If so, it was a X:<NUL>
   762 00002951 84E4                <1>     test ah, ah ;Is byte four nul?
   763 00002953 750C                <1>     jnz .isDestDir  ;If not, check if destination is a directory
   764 00002955 3A05D6D6FFFF        <1>     cmp al, byte [pathSep]  ;Else, check if byte 3 was a pathsep!
   765 0000295B 0F8436010000        <1>     je .mod1    ;If it is, then it was a X:\<NUL>
   766                              <1> .isDestDir:
   767                              <1> ;Only here if we suspect the destination pathspec is a path, not file!
   768 00002961 488D1580DDFFFF      <1>     lea rdx, destSpec
   769 00002968 B910000000          <1>     mov ecx, dirDirectory
   770 0000296D B8004E0000          <1>     mov eax, 4E00h
   771 00002972 CD21                <1>     int 21h
   772 00002974 7237                <1>     jc .mod2
   773                              <1>     ;Was the file we found actually a directory?
   774 00002976 803DB7D7FFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   775 0000297D 752E                <1>     jne .mod2
   776                              <1>     ;Here we just check if we have a terminating slash on the destination path.
   777                              <1>     ;If not, we need to place one there!
   778 0000297F 4889D7              <1>     mov rdi, rdx    ;Move destSpec
   779 00002982 E80B1D0000          <1>     call strlen
   780 00002987 FFC9                <1>     dec ecx         ;Lose the null terminator, zero upper bits
   781 00002989 4801CF              <1>     add rdi, rcx    ;Go to null terminator
   782 0000298C 0FB6059ED6FFFF      <1>     movzx eax, byte [pathSep]
   783 00002993 3847FF              <1>     cmp byte [rdi - 1], al  ;Is the char before the null a pathsep?
   784 00002996 0F84FB000000        <1>     je .mod1        ;If so, skip adding another one!
   785 0000299C 66AB                <1>     stosw           ;Else, store the pathsep and null!
   786 0000299E 48FFCF              <1>     dec rdi         ;Point back to null
   787 000029A1 48893DCADDFFFF      <1>     mov qword [destPtr], rdi    ;Save this pointer
   788 000029A8 E9EA000000          <1>     jmp .mod1
   789                              <1> .mod2:
   790                              <1> ;Here we are copying files(s) to file(s)! Filenames are copied according 
   791                              <1> ; to rename wildcard semantics. Always run through this as the destination
   792                              <1> ; name may have wildcards in it! But we don't add any.
   793 000029AD 800DE6DDFFFF40      <1>     or byte [bCpFlg], mod2Cpy   ;Set to remind us what we are doing!
   794 000029B4 488D352DDDFFFF      <1>     lea rsi, destSpec
   795 000029BB E8901E0000          <1>     call scanForWildcards   ;ZF=ZE if WC cound
   796 000029C0 7407                <1>     jz .m2Wc
   797 000029C2 800DD1DDFFFF10      <1>     or byte [bCpFlg], oneDest   ;The destination is a single file!
   798                              <1> .m2Wc:
   799                              <1> ;Search for the source file
   800 000029C9 488D1596DCFFFF      <1>     lea rdx, srcSpec
   801 000029D0 31C9                <1>     xor ecx, ecx    ;Normal and RO files pls
   802 000029D2 B8004E0000          <1>     mov eax, 4E00h
   803 000029D7 CD21                <1>     int 21h
   804 000029D9 0F82E9010000        <1>     jc .badSrcFile
   805 000029DF 488B358CDDFFFF      <1>     mov rsi, qword [destPtr]
   806 000029E6 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Create the permanent destination pattern
   807 000029EA B801290000          <1>     mov eax, 2901h
   808 000029EF CD21                <1>     int 21h
   809                              <1> .md2Lp:
   810 000029F1 488D3545D7FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   811 000029F8 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Create the source pattern
   812 000029FC B801290000          <1>     mov eax, 2901h
   813 00002A01 CD21                <1>     int 21h  
   814                              <1> ;Now depending on source and dest patterns, build a filename in renName
   815 00002A03 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
   816 00002A07 488D3D6CDDFFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
   817 00002A0E 57                  <1>     push rdi
   818 00002A0F 48A5                <1>     movsq
   819 00002A11 66A5                <1>     movsw
   820 00002A13 A4                  <1>     movsb
   821 00002A14 5F                  <1>     pop rdi
   822 00002A15 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
   823 00002A19 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
   824                              <1> .md2NameMake:
   825 00002A1E AC                  <1>     lodsb   ;Get the char from the source string
   826 00002A1F 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
   827 00002A22 7502                <1>     jne .noStore    ;Dont store the char there
   828 00002A24 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
   829                              <1> .noStore:
   830 00002A26 48FFC7              <1>     inc rdi ;Goto next char position
   831 00002A29 FFC9                <1>     dec ecx
   832 00002A2B 75F1                <1>     jnz .md2NameMake
   833 00002A2D 488D3509D7FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   834 00002A34 488B3D2FDDFFFF      <1>     mov rdi, qword [srcPtr]
   835 00002A3B E8391C0000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
   836 00002A40 488D3533DDFFFF      <1>     lea rsi, renName
   837 00002A47 488B3D24DDFFFF      <1>     mov rdi, qword [destPtr]
   838 00002A4E E83F1D0000          <1>     call FCBToAsciiz
   839 00002A53 E8D7000000          <1>     call .prntFilespec  ;Prints the source filename
   840 00002A58 E8AA010000          <1>     call copyMain       ;And copy it!
   841 00002A5D 731D                <1>     jnc .md2Ok
   842                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   843                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   844 00002A5F 3CFD                <1>     cmp al, -3
   845 00002A61 0F843E010000        <1>     je .badBinCdevErr
   846 00002A67 3CFE                <1>     cmp al, -2
   847 00002A69 0F843F010000        <1>     je .rootDirFull
   848 00002A6F 3CFF                <1>     cmp al, -1      ;Source and destination same?
   849 00002A71 0F8440010000        <1>     je .badSameFile 
   850 00002A77 E956010000          <1>     jmp .badExit    ;Else generic error message
   851                              <1> .md2Ok:
   852 00002A7C F60517DDFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   853 00002A83 0F8485000000        <1>     jz .copyDone        ;Copy complete!
   854 00002A89 B8004F0000          <1>     mov eax, 4F00h      ;Else, find Next File
   855 00002A8E CD21                <1>     int 21h
   856 00002A90 727C                <1>     jc .copyDone        ;If no more files, we are done!
   857 00002A92 E95AFFFFFF          <1>     jmp .md2Lp    ;Else, now build a new source and destination!
   858                              <1> .mod1:
   859                              <1> ;Here we are copying file(s) into a directory. Filenames are copied verbatum.
   860 00002A97 800DFCDCFFFF20      <1>     or byte [bCpFlg], mod1Cpy   ;Ensure this bit is set!
   861 00002A9E 488D15C1DBFFFF      <1>     lea rdx, srcSpec
   862 00002AA5 31C9                <1>     xor ecx, ecx    ;Normal and read only files pls!!
   863 00002AA7 B8004E0000          <1>     mov eax, 4E00h
   864 00002AAC CD21                <1>     int 21h
   865 00002AAE 0F8214010000        <1>     jc .badSrcFile  ;File not found error!!
   866                              <1> .mod1Lp:
   867 00002AB4 488D3582D6FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   868 00002ABB 488B3DA8DCFFFF      <1>     mov rdi, qword [srcPtr]
   869 00002AC2 E8C11B0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   870 00002AC7 488B3DA4DCFFFF      <1>     mov rdi, qword [destPtr]
   871 00002ACE E8B51B0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   872 00002AD3 E857000000          <1>     call .prntFilespec
   873 00002AD8 E82A010000          <1>     call copyMain   ;And copy it!
   874 00002ADD 731D                <1>     jnc .mod1Ok
   875                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   876                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   877 00002ADF 3CFD                <1>     cmp al, -3
   878 00002AE1 0F84BE000000        <1>     je .badBinCdevErr
   879 00002AE7 3CFE                <1>     cmp al, -2
   880 00002AE9 0F84BF000000        <1>     je .rootDirFull
   881 00002AEF 3CFF                <1>     cmp al, -1      ;Source and destination same?
   882 00002AF1 0F84C0000000        <1>     je .badSameFile 
   883 00002AF7 E9D6000000          <1>     jmp .badExit    ;Else generic error message
   884                              <1> .mod1Ok:
   885 00002AFC F60597DCFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   886 00002B03 7409                <1>     jz .copyDone
   887 00002B05 B8004F0000          <1>     mov eax, 4F00h      ;Find Next File
   888 00002B0A CD21                <1>     int 21h
   889 00002B0C 73A6                <1>     jnc .mod1Lp         ;If no more files, we are done! Fall thru!
   890                              <1> 
   891                              <1> .copyDone:
   892 00002B0E E8C9000000          <1>     call .copyCleanup   ;Clean up resources!
   893 00002B13 8B057DDCFFFF        <1>     mov eax, dword [dCpCnt] ;Get number of files copied
   894 00002B19 B909000000          <1>     mov ecx, 9  ;Maximum copy 9,999,999 files... ofc thats ok
   895 00002B1E E8411D0000          <1>     call printDecimalValLB   ;n File(s) copied
   896 00002B23 488D15E1DEFFFF      <1>     lea rdx, copyOk
   897 00002B2A B409                <1>     mov ah, 09h
   898 00002B2C CD21                <1>     int 21h    
   899                              <1>     return
    13                              <2> %%_ret:
    14 00002B2E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   900                              <1> 
   901                              <1> .prntFilespec:
   902                              <1> ;Prints the filespec to STDOUT. If the path is 
   903 00002B2F F60564DCFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no wildcard, then don't print name
   904                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002B36 74(2E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   905 00002B38 488D1527DBFFFF      <1>     lea rdx, srcSpec
   906 00002B3F 4889D7              <1>     mov rdi, rdx
   907 00002B42 E84B1B0000          <1>     call strlen
   908 00002B47 FFC9                <1>     dec ecx     ;Drop terminating null
   909 00002B49 BB01000000          <1>     mov ebx, 1  ;STDOUT
   910 00002B4E B800400000          <1>     mov eax, 4000h  ;Write
   911 00002B53 CD21                <1>     int 21h
   912 00002B55 E80B190000          <1>     call printCRLF
   913                              <1>     return
    13                              <2> %%_ret:
    14 00002B5A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   914                              <1> .doSwitch:
   915                              <1> ;Since switches can come before or after a name, handle them here!
   916                              <1> ;If invalid switch char, returns ZF=NZ.
   917                              <1> ;Input: bl = ASCII bit to set (either 1 or 2) 
   918                              <1> ;       rsi -> Switchchar
   919 00002B5B 56                  <1>     push rsi
   920 00002B5C 48FFC6              <1>     inc rsi ;Point to char past switchchar
   921 00002B5F AC                  <1>     lodsb   ;Get this char, goto next char
   922 00002B60 5E                  <1>     pop rsi
   923                              <1> .doSwitchRev:
   924 00002B61 E8361B0000          <1>     call ucChar
   925 00002B66 3C41                <1>     cmp al, "A"
   926 00002B68 7510                <1>     jne .cB
   927 00002B6A 081D2ADCFFFF        <1>     or byte [bCpFlg], bl    ;Set the ASCII bit
   928 00002B70 802523DCFFFFFD      <1>     and byte [bCpFlg], ~binSrc  ;ASCII flag clears this
   929                              <1> .cExit:
   930 00002B77 31DB                <1>     xor ebx, ebx    ;Clear ZF 
   931                              <1>     return
    13                              <2> %%_ret:
    14 00002B79 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   932                              <1> .cB:
   933 00002B7A 3C42                <1>     cmp al, "B"
   934 00002B7C 7511                <1>     jne .cV
   935 00002B7E F6D3                <1>     not bl  ;Reverse bits
   936 00002B80 201D14DCFFFF        <1>     and byte [bCpFlg], bl   ;Clear the ASCII bit.
   937 00002B86 800D0DDCFFFF02      <1>     or byte [bCpFlg], binSrc    ;This was explicitly set
   938 00002B8D EBE8                <1>     jmp short .cExit
   939                              <1> .cV:
   940 00002B8F 3C56                <1>     cmp al, "V"
   941                              <1>     retne   ;Exit w/o clearing ZF
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002B91 75(79)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   942 00002B93 F605EBDBFFFFFF      <1>     test byte [verifyFlg], -1   ;If verify flag set, do nothing
   943 00002B9A 75DB                <1>     jnz .cExit                  ;If not zero, flag already set!
   944                              <1>     ;Else, set it. We return it at the end!
   945 00002B9C B8012E0000          <1>     mov eax, 2E01h  ;Set Verify Flag
   946 00002BA1 CD21                <1>     int 21h
   947 00002BA3 EBD2                <1>     jmp short .cExit
   948                              <1> 
   949                              <1> ;COPY Bad Exits!!
   950                              <1> .badBinCdevErr:
   951 00002BA5 488D150FE1FFFF      <1>     lea rdx, binDevErr
   952 00002BAC EB10                <1>     jmp short .badExitCmn
   953                              <1> .rootDirFull:
   954 00002BAE 488D15F2DDFFFF      <1>     lea rdx, fulRootDir
   955 00002BB5 EB07                <1>     jmp short .badExitCmn
   956                              <1> .badSameFile:
   957 00002BB7 488D15FFDDFFFF      <1>     lea rdx, noSelfCopy
   958                              <1> .badExitCmn:
   959 00002BBE E8E8F4FFFF          <1>     call badCmn     ;Print error message
   960 00002BC3 E946FFFFFF          <1>     jmp .copyDone   ;Clean resources
   961                              <1> .badSrcFile:
   962 00002BC8 E8CEF4FFFF          <1>     call badFnf  ;File not found!!
   963 00002BCD E93CFFFFFF          <1>     jmp .copyDone
   964                              <1> .badExit:
   965 00002BD2 E897F4FFFF          <1>     call badParamError
   966 00002BD7 E932FFFFFF          <1>     jmp .copyDone
   967                              <1> 
   968                              <1> .copyCleanup:
   969                              <1> ;Clean all resources!! Reset verify and free copy buffer. 
   970                              <1> ;Handles are never open in this process!
   971 00002BDC B8002E0000          <1>     mov eax, 2E00h
   972 00002BE1 8A059EDBFFFF        <1>     mov al, byte [verifyFlg]
   973 00002BE7 CD21                <1>     int 21h
   974 00002BE9 4150                <1>     push r8
   975 00002BEB 4C8B059ADBFFFF      <1>     mov r8, qword [cpBufPtr]
   976 00002BF2 4D85C0              <1>     test r8, r8 ;Check zero, clear CF
   977 00002BF5 7407                <1>     jz .skipFree
   978 00002BF7 B800490000          <1>     mov eax, 4900h
   979 00002BFC CD21                <1>     int 21h
   980                              <1> .skipFree:
   981 00002BFE 4158                <1>     pop r8
   982 00002C00 0F829B1D0000        <1>     jc freezePC ;If free fails, man....
   983                              <1>     return
    13                              <2> %%_ret:
    14 00002C06 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   984                              <1> 
   985                              <1> copyMain:
   986                              <1> ;This is the main copying procedure! 
   987                              <1> ;Start by checking the two files are not the same. If so, complain!
   988                              <1> ;If returns CF=CY, error code in al. 
   989                              <1> ;   If al = -1, same filename error!
   990                              <1> ;   If al = -2, Root Dir full (couldn't create file)
   991                              <1> ;   If al = -3, attempted binary read from a device
   992                              <1> ;If returns CF=NC, file copied successfully.
   993                              <1> ;Check the two files are not the same using truename in searchspec
   994 00002C07 488D3558DAFFFF      <1>     lea rsi, srcSpec
   995 00002C0E 488D3D84D8FFFF      <1>     lea rdi, searchSpec
   996 00002C15 B800600000          <1>     mov eax, 6000h  ;TRUENAME
   997 00002C1A CD21                <1>     int 21h 
   998 00002C1C 57                  <1>     push rdi    ;Save this searchSpec
   999 00002C1D 488D35C4DAFFFF      <1>     lea rsi, destSpec
  1000 00002C24 488D3DF0D8FFFF      <1>     lea rdi, searchSpec + cmdBufferL ;Use the latter half to store this bit
  1001 00002C2B B800600000          <1>     mov eax, 6000h
  1002 00002C30 CD21                <1>     int 21h
  1003 00002C32 5E                  <1>     pop rsi     ;Get this ptr back
  1004 00002C33 B81E120000          <1>     mov eax, 121Eh  ;Cmpr ASCII strings
  1005 00002C38 CD2F                <1>     int 2Fh
  1006 00002C3A 750F                <1>     jnz .notSameFile
  1007 00002C3C B0FF                <1>     mov al, -1  ;Same filename error!
  1008                              <1> .badExit:
  1009 00002C3E 50                  <1>     push rax
  1010 00002C3F E8B0000000          <1>     call .exitCleanup
  1011 00002C44 58                  <1>     pop rax
  1012 00002C45 F9                  <1>     stc
  1013                              <1>     return
    13                              <2> %%_ret:
    14 00002C46 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1014                              <1> .badExitNoSpace:
  1015 00002C47 B0FE                <1>     mov al, -2  ;Access denied from Create happens if Root Dir full!
  1016 00002C49 EBF3                <1>     jmp short .badExit
  1017                              <1> .notSameFile:
  1018                              <1> ;Open source with read permission
  1019                              <1> ;Open destination with write permission
  1020 00002C4B 488D1514DAFFFF      <1>     lea rdx, srcSpec
  1021 00002C52 B8003D0000          <1>     mov eax, 3D00h  ;Read open
  1022 00002C57 CD21                <1>     int 21h
  1023 00002C59 72E3                <1>     jc .badExit
  1024 00002C5B 66890524DBFFFF      <1>     mov word [sourceHdl], ax
  1025 00002C62 0FB7D8              <1>     movzx ebx, ax   ;For bx
  1026                              <1> 
  1027 00002C65 B800440000          <1>     mov eax, 4400h  ;Get device info for file in bx in dx
  1028 00002C6A CD21                <1>     int 21h
  1029 00002C6C 66891517DBFFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
  1030 00002C73 F6C280              <1>     test dl, 80h    ;Is this a chardev?
  1031 00002C76 7412                <1>     jz .prepCopy
  1032                              <1> ;Check the binary flag was not set on this source filespec
  1033 00002C78 B0FD                <1>     mov al, -3  ;Prep the error code
  1034 00002C7A F60519DBFFFF02      <1>     test byte [bCpFlg], binSrc
  1035 00002C81 75BB                <1>     jnz .badExit    ;Return with the error code in al
  1036 00002C83 800D10DBFFFF01      <1>     or byte [bCpFlg], ascSrc    ;Set the ascii read bit for later!
  1037                              <1> .prepCopy:
  1038 00002C8A 31F6                <1>     xor esi, esi                ;Flag if ASCII copy done after write!
  1039 00002C8C 488B15F9DAFFFF      <1>     mov rdx, qword [cpBufPtr]   ;Get the buffer pointer
  1040                              <1> .copyLoop:
  1041                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1042                              <1> ; CONSIDER MODIFYING THIS ROUTINE SO THAT ASCII READS ONLY WRITE AFTER       !
  1043                              <1> ; FINDING A ^Z, OR FILLING THE BUFFER. CURRENTLY, WRITES HAPPEN ON EACH LINE.!
  1044                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1045 00002C93 0FB70DFADAFFFF      <1>     movzx ecx, word [wCpBufSz]
  1046 00002C9A 0FB71DE5DAFFFF      <1>     movzx ebx, word [sourceHdl]
  1047 00002CA1 B8003F0000          <1>     mov eax, 3F00h ;Read
  1048 00002CA6 CD21                <1>     int 21h
  1049 00002CA8 7294                <1>     jc .badExit
  1050 00002CAA 89C1                <1>     mov ecx, eax    ;Save the binary # of bytes read
  1051 00002CAC F605E7DAFFFF01      <1>     test byte [bCpFlg], ascSrc  ;Are we copying in ascii mode
  1052 00002CB3 7413                <1>     jz .notAscii
  1053                              <1> ;Now scan the buffer for a EOF. If we find, we stop the copy at that char
  1054 00002CB5 50                  <1>     push rax        ;Save the original char count
  1055 00002CB6 4889D7              <1>     mov rdi, rdx    ;rdx keeps the buffer ptr
  1056 00002CB9 B01A                <1>     mov al, EOF
  1057 00002CBB F2AE                <1>     repne scasb     ;Loop thru now!
  1058 00002CBD 89C8                <1>     mov eax, ecx    ;Move the offset into the buffer in eax
  1059 00002CBF 59                  <1>     pop rcx         ;Get the original read count into ecx
  1060 00002CC0 7506                <1>     jne .notAscii   ;If EOF not found, ecx has the full buffer size to write
  1061                              <1> ;Here if EOF found.
  1062 00002CC2 FFC0                <1>     inc eax         ;Drop one for the EOF char itself
  1063 00002CC4 29C1                <1>     sub ecx, eax    ;Get difference for # of chars to write
  1064 00002CC6 FFCE                <1>     dec esi         ;Set to -1 to indicate we are done with ASCII copy!
  1065                              <1> .notAscii:
  1066 00002CC8 85C9                <1>     test ecx, ecx   ;If no bytes were read, exit!
  1067 00002CCA 7428                <1>     jz .exitCleanup
  1068 00002CCC 51                  <1>     push rcx    ;Save the number of bytes to write
  1069 00002CCD 52                  <1>     push rdx    ;Save the buffer ptr
  1070 00002CCE E88D000000          <1>     call .getWriteHandle    ;Gets hdl in bx. Inc file ctr on create/open
  1071 00002CD3 5A                  <1>     pop rdx
  1072 00002CD4 59                  <1>     pop rcx
  1073 00002CD5 0F826CFFFFFF        <1>     jc .badExitNoSpace
  1074 00002CDB B800400000          <1>     mov eax, 4000h ;Write to handle in bx, to buffer in rdx
  1075 00002CE0 CD21                <1>     int 21h
  1076 00002CE2 0F8256FFFFFF        <1>     jc .badExit
  1077 00002CE8 39C1                <1>     cmp ecx, eax            ;ecx=bytes to write, eax=bytes written
  1078 00002CEA 0F8557FFFFFF        <1>     jne .badExitNoSpace     ;Disk must be full!!
  1079 00002CF0 85F6                <1>     test esi, esi           ;Always clear in Binary mode
  1080 00002CF2 749F                <1>     jz .copyLoop            ;Set possible in ASCII mode
  1081                              <1> .exitCleanup:
  1082                              <1> ;Add a terminating EOF if we have been asked to. Else, skip!
  1083 00002CF4 F6059FDAFFFF04      <1>     test byte [bCpFlg], ascDes
  1084 00002CFB 7425                <1>     jz .ecNoEOF
  1085 00002CFD 0FBF1D84DAFFFF      <1>     movsx ebx, word [destHdl]
  1086 00002D04 81FBFFFFFFFF        <1>     cmp ebx, -1 ;If this hdl is closed, skip this!
  1087 00002D0A 7416                <1>     je .ecNoEOF
  1088 00002D0C 488B1579DAFFFF      <1>     mov rdx, qword [cpBufPtr]
  1089 00002D13 C6021A              <1>     mov byte [rdx], EOF
  1090 00002D16 B901000000          <1>     mov ecx, 1
  1091 00002D1B B800400000          <1>     mov eax, 4000h  ;Write and ignore any errors that come from this!
  1092 00002D20 CD21                <1>     int 21h
  1093                              <1> .ecNoEOF:
  1094                              <1> ;Now close copy handles!
  1095 00002D22 668B1D5DDAFFFF      <1>     mov bx, word [sourceHdl]
  1096 00002D29 6681FBFFFF          <1>     cmp bx, -1
  1097 00002D2E 7410                <1>     je .beSkipSource
  1098 00002D30 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
  1099 00002D35 CD21                <1>     int 21h
  1100 00002D37 66C70546DAFFFFFFFF  <1>     mov word [sourceHdl], -1    ;Reset the var
  1101                              <1> .beSkipSource:
  1102 00002D40 668B1D41DAFFFF      <1>     mov bx, word [destHdl]
  1103 00002D47 6681FBFFFF          <1>     cmp bx, -1
  1104                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002D4C 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002D4E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1105 00002D4F B8003E0000          <1>     mov eax, 3E00h  ;Close this one too!
  1106 00002D54 CD21                <1>     int 21h
  1107 00002D56 66C70529DAFFFFFFFF  <1>     mov word [destHdl], -1  ;Reset the var
  1108                              <1>     return
    13                              <2> %%_ret:
    14 00002D5F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1109                              <1> 
  1110                              <1> .getWriteHandle:
  1111                              <1> ;Returns in bx the handle to the destination file. If the file has not 
  1112                              <1> ; yet been opened, creates/opens the destination file as appropriate.
  1113                              <1> ;Input: Nothing
  1114                              <1> ;Output: CF=NC: bx = Handle to the file
  1115                              <1> ;        CF=CY: File failed to open/create. 
  1116 00002D60 0FB71D21DAFFFF      <1>     movzx ebx, word [destHdl]
  1117 00002D67 6681FBFFFF          <1>     cmp bx, -1
  1118 00002D6C 7402                <1>     je .gwHProceed
  1119 00002D6E F8                  <1>     clc     ;Clear the CF
  1120                              <1>     return
    13                              <2> %%_ret:
    14 00002D6F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1121                              <1> .gwHProceed:
  1122                              <1> ;Here if the destination has not been opened yet!
  1123 00002D70 488D1571D9FFFF      <1>     lea rdx, destSpec   ;Prepare rdx to the destination
  1124                              <1> ;Now we create/reopen the file here!
  1125 00002D77 F6051CDAFFFF10      <1>     test byte [bCpFlg], oneDest ;If single destination, concatenate
  1126 00002D7E 743E                <1>     jz .createFile
  1127                              <1> ;Now we first try to open this file. If this is file 0, we create.
  1128                              <1> ;If this is more than file 0, we open
  1129 00002D80 813D0CDAFFFF000000- <1>     cmp dword [dCpCnt], 0
  1129 00002D89 00                  <1>
  1130 00002D8A 7432                <1>     je .createFile
  1131                              <1>     ;Now we open the file instead and append to the end
  1132 00002D8C B8023D0000          <1>     mov eax, 3D02h  ;Open the file in exclusive read/write mode
  1133 00002D91 CD21                <1>     int 21h
  1134                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D93 72(6F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1135 00002D95 FF05FBD9FFFF        <1>     inc dword [dCpCnt]  ;We've opened the file for writing!
  1136 00002D9B 668905E6D9FFFF      <1>     mov word [destHdl], ax
  1137 00002DA2 0FB7D8              <1>     movzx ebx, ax
  1138 00002DA5 31C9                <1>     xor ecx, ecx
  1139 00002DA7 31D2                <1>     xor edx, edx
  1140 00002DA9 F605EAD9FFFF04      <1>     test byte [bCpFlg], ascDes  ;Did we write a terminating ^Z before?
  1141 00002DB0 7404                <1>     jz .gwHNoAscii
  1142 00002DB2 FFCA                <1>     dec edx                     ;Overwrite the ^Z
  1143 00002DB4 FFC9                <1>     dec ecx                     ;PASS A SIGNED -1 !!!!
  1144                              <1> .gwHNoAscii:
  1145 00002DB6 B802420000          <1>     mov eax, 4202h  ;LSEEK from the end
  1146 00002DBB CD21                <1>     int 21h
  1147                              <1>     return
    13                              <2> %%_ret:
    14 00002DBD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1148                              <1> .createFile:
  1149 00002DBE B8003C0000          <1>     mov eax, 3C00h  ;Create the file
  1150 00002DC3 31C9                <1>     xor ecx, ecx    ;No file attributes
  1151 00002DC5 CD21                <1>     int 21h
  1152                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002DC7 72(BD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1153 00002DC9 FF05C7D9FFFF        <1>     inc dword [dCpCnt]  ;File created for writing!
  1154 00002DCF 668905B2D9FFFF      <1>     mov word [destHdl], ax
  1155 00002DD6 0FB7D8              <1>     movzx ebx, ax
  1156                              <1>     return
    13                              <2> %%_ret:
    14 00002DD9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1157                              <1> 
  1158                              <1> erase:
  1159 00002DDA F605CBD2FFFFFF      <1>     test byte [arg1Flg], -1
  1160 00002DE1 0F8499F2FFFF        <1>     jz badArgError
  1161 00002DE7 E83F1A0000          <1>     call buildCommandPath   ;Get the relative path to the file
  1162                              <1> .dirLp:
  1163 00002DEC 488D3DA6D6FFFF      <1>     lea rdi, searchSpec
  1164 00002DF3 E876190000          <1>     call findLastPathComponant
  1165 00002DF8 4889FE              <1>     mov rsi, rdi    ;Save this as the source
  1166 00002DFB 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1167 00002DFF B03F                <1>     mov al, "?"
  1168                              <1>     ;Store question marks in the name field
  1169 00002E01 57                  <1>     push rdi
  1170 00002E02 48FFC7              <1>     inc rdi ;Goto the first char
  1171 00002E05 B90B000000          <1>     mov ecx, 11
  1172 00002E0A F3AA                <1>     rep stosb
  1173 00002E0C 5F                  <1>     pop rdi
  1174 00002E0D 4889F2              <1>     mov rdx, rsi    ;Save the ptr
  1175 00002E10 B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
  1176 00002E15 CD21                <1>     int 21h
  1177 00002E17 3C01                <1>     cmp al, 1
  1178 00002E19 0F85A1000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
  1179                              <1>     ;Else, we now copy back the search pattern over the last componant!
  1180                              <1>     ;No dirs to handle in here
  1181 00002E1F 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
  1182 00002E23 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
  1183 00002E26 E867190000          <1>     call FCBToAsciiz    ;Null terminates for free
  1184                              <1>     ;Count the number of ?'s, if 11, we print the message
  1185 00002E2B 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
  1186 00002E2F 31C9                <1>     xor ecx, ecx
  1187                              <1> .wcScan:
  1188 00002E31 AC                  <1>     lodsb
  1189 00002E32 3C3F                <1>     cmp al, "?"
  1190 00002E34 7534                <1>     jne .endCount
  1191 00002E36 FFC1                <1>     inc ecx
  1192 00002E38 81F90B000000        <1>     cmp ecx, 11
  1193 00002E3E 75F1                <1>     jne .wcScan
  1194                              <1> .ynmsg:
  1195 00002E40 488D1506DDFFFF      <1>     lea rdx, ynMes
  1196 00002E47 E820160000          <1>     call printString
  1197 00002E4C B401                <1>     mov ah, 01h ;STDIN without Console Echo
  1198 00002E4E CD21                <1>     int 21h ;Get char in al
  1199 00002E50 E847180000          <1>     call ucChar ;Uppercase the char
  1200 00002E55 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
  1201 00002E57 740C                <1>     je .endCount1
  1202 00002E59 3C4E                <1>     cmp al, "N"
  1203                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002E5B 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002E5D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1204 00002E5E E802160000          <1>     call printCRLF      ;Else, tell me what you want!!!
  1205 00002E63 EBDB                <1>     jmp short .ynmsg    
  1206                              <1> .endCount1:
  1207 00002E65 E8FB150000          <1>     call printCRLF
  1208                              <1> .endCount:
  1209                              <1>     ;Now we copy our search template pathstring to delPath
  1210 00002E6A 488D3DF5D7FFFF      <1>     lea rdi, delPath
  1211 00002E71 488D3521D6FFFF      <1>     lea rsi, searchSpec ;Source the chars from here
  1212 00002E78 E80B180000          <1>     call strcpy2         ;Copy the string over to delPath
  1213                              <1> .findFile:
  1214                              <1>     ;Now we find first/find next our way through the files
  1215 00002E7D 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
  1216 00002E80 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
  1217 00002E82 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1218 00002E87 CD21                <1>     int 21h
  1219 00002E89 0F820CF2FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1220                              <1>     ;Now the file was found, we copy the name over, delete and keep going
  1221 00002E8F E8DA180000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
  1222 00002E94 488D35A2D2FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1223                              <1> .delNextFile:
  1224                              <1> ;rsi and rdi dont move here
  1225 00002E9B E8E8170000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
  1226 00002EA0 488D15BFD7FFFF      <1>     lea rdx, delPath
  1227 00002EA7 B800410000          <1>     mov eax, 4100h  ;Delete File 
  1228 00002EAC CD21                <1>     int 21h         ;If this fails to delete it, fail silently
  1229 00002EAE 488D15E4D5FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
  1230 00002EB5 B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
  1231 00002EBA CD21                <1>     int 21h
  1232 00002EBC 73DD                <1>     jnc .delNextFile    
  1233 00002EBE F8                  <1>     clc ;Clear carry to indicate success
  1234                              <1>     return
    13                              <2> %%_ret:
    14 00002EBF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1235                              <1> .noWildcard:
  1236                              <1>     ;Here we just check that the file was not a directory. If it was, we add
  1237                              <1>     ; a \*.*<NUL> over the null terminator
  1238 00002EC0 488D15D2D5FFFF      <1>     lea rdx, searchSpec
  1239 00002EC7 B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
  1240 00002ECC B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1241 00002ED1 CD21                <1>     int 21h
  1242 00002ED3 0F82C2F1FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1243 00002ED9 F60554D2FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
  1244 00002EE0 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
  1245                              <1>     ;Else, we are dealing with a dir
  1246 00002EE2 4889D7              <1>     mov rdi, rdx
  1247 00002EE5 31C9                <1>     xor ecx, ecx
  1248 00002EE7 FFC9                <1>     dec ecx
  1249 00002EE9 F2AE                <1>     repne scasb ;Go to the end of the line!
  1250 00002EEB 48FFCF              <1>     dec rdi
  1251 00002EEE 0FB6053CD1FFFF      <1>     movzx eax, byte [pathSep]
  1252 00002EF5 AA                  <1>     stosb
  1253 00002EF6 B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
  1254 00002EFB AB                  <1>     stosd
  1255 00002EFC E9EBFEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
  1256                              <1> .delMain:   ;Call with rdx -> buffer!
  1257 00002F01 B800410000          <1>     mov eax, 4100h  ;Delete File 
  1258 00002F06 CD21                <1>     int 21h
  1259                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002F08 73(BF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1260 00002F0A 3C05                <1>     cmp al, errAccDen
  1261 00002F0C 0F8453F1FFFF        <1>     je badAccError ;If the file is RO, fail!
  1262 00002F12 E972F1FFFF          <1>     jmp badFileError
  1263                              <1>     return
    13                              <2> %%_ret:
    14 00002F17 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1264                              <1> 
  1265                              <1> date:
  1266 00002F18 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1267 00002F1F E893170000          <1>     call skipDelimiters
  1268 00002F24 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1269 00002F27 7562                <1>     jne .goDate  ;Else rsi is pointing to something possibly a date. Try it!
  1270                              <1> .init:
  1271                              <1>     ;Else, we do interactive mode!
  1272 00002F29 488D15A0DBFFFF      <1>     lea rdx, curDate
  1273 00002F30 B409                <1>     mov ah, 09h
  1274 00002F32 CD21                <1>     int 21h
  1275 00002F34 E874160000          <1>     call printFmtDate
  1276                              <1> .noCur:
  1277 00002F39 488D15A1DBFFFF      <1>     lea rdx, newDate
  1278 00002F40 B409                <1>     mov ah, 09h
  1279 00002F42 CD21                <1>     int 21h
  1280 00002F44 488D15B5DBFFFF      <1>     lea rdx, ukDate
  1281 00002F4B 488D05A1DBFFFF      <1>     lea rax, usDate
  1282 00002F52 488D1DB4DBFFFF      <1>     lea rbx, jpDate
  1283 00002F59 803DD3D0FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1284 00002F60 480F47D3            <1>     cmova rdx, rbx
  1285 00002F64 480F42D0            <1>     cmovb rdx, rax
  1286 00002F68 B409                <1>     mov ah, 09h
  1287 00002F6A CD21                <1>     int 21h
  1288                              <1> 
  1289 00002F6C 488D1579D2FFFF      <1>     lea rdx, cpyBuffer  ;Make sure to use cpyBuffer to preserve F3
  1290 00002F73 C60280              <1>     mov byte [rdx], inLen ;Enter a string of up to 128 chars in length
  1291 00002F76 B40A                <1>     mov ah, 0Ah
  1292 00002F78 CD21                <1>     int 21h
  1293 00002F7A 52                  <1>     push rdx
  1294 00002F7B E8E5140000          <1>     call printCRLF
  1295 00002F80 5A                  <1>     pop rdx
  1296 00002F81 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1297                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002F85 74(17)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1298                              <1>     ;No spaces anywhere, separator chars allowed are / . - only
  1299 00002F87 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1300                              <1> .goDate:
  1301 00002F8B 31C0                <1>     xor eax, eax    
  1302 00002F8D 803D9FD0FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1303 00002F94 727B                <1>     jb .us
  1304 00002F96 0F87B7000000        <1>     ja .jpn
  1305                              <1>     ;Here for UK style dates
  1306 00002F9C E8C3190000          <1>     call getByte
  1307 00002FA1 725D                <1>     jc .badDate
  1308 00002FA3 8805BBD6FFFF        <1>     mov byte [td3], al  ;Store the day
  1309 00002FA9 E80C010000          <1>     call .validSep
  1310 00002FAE 7550                <1>     jne .badDate
  1311 00002FB0 E8AF190000          <1>     call getByte
  1312 00002FB5 7249                <1>     jc .badDate
  1313 00002FB7 8805A8D6FFFF        <1>     mov byte [td4], al  ;Store month
  1314 00002FBD E8F8000000          <1>     call .validSep
  1315 00002FC2 753C                <1>     jne .badDate
  1316 00002FC4 E8A7190000          <1>     call getNum
  1317 00002FC9 E8CF000000          <1>     call .doYear    ;Adjusts the year if necessary
  1318 00002FCE 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1319 00002FD3 732B                <1>     jae .badDate
  1320 00002FD5 66890586D6FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1321                              <1> .writeDate:
  1322 00002FDC E8D6160000          <1>     call skipDelimiters
  1323 00002FE1 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1324 00002FE4 751A                <1>     jne .badDate
  1325 00002FE6 0FB70D75D6FFFF      <1>     movzx ecx, word [td1]   ;Get the year
  1326 00002FED 668B1570D6FFFF      <1>     mov dx, word [td3]      ;Read time and date together!
  1327 00002FF4 B8002B0000          <1>     mov eax, 2B00h
  1328 00002FF9 CD21                <1>     int 21h
  1329 00002FFB 84C0                <1>     test al, al
  1330                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002FFD 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002FFF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1331                              <1> .badDate:
  1332 00003000 488D15BADAFFFF      <1>     lea rdx, badDate
  1333 00003007 E860140000          <1>     call printString
  1334 0000300C E928FFFFFF          <1>     jmp date.noCur
  1335                              <1> .us:
  1336 00003011 E84E190000          <1>     call getByte
  1337 00003016 72E8                <1>     jc .badDate
  1338 00003018 880547D6FFFF        <1>     mov byte [td4], al  ;Store the month
  1339 0000301E E897000000          <1>     call .validSep
  1340 00003023 75DB                <1>     jne .badDate
  1341 00003025 E83A190000          <1>     call getByte
  1342 0000302A 72D4                <1>     jc .badDate
  1343 0000302C 880532D6FFFF        <1>     mov byte [td3], al  ;Store day
  1344 00003032 E883000000          <1>     call .validSep
  1345 00003037 75C7                <1>     jne .badDate
  1346 00003039 E832190000          <1>     call getNum
  1347 0000303E E85A000000          <1>     call .doYear    ;Adjusts the year if necessary
  1348 00003043 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1349 00003048 73B6                <1>     jae .badDate
  1350 0000304A 66890511D6FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1351                              <1> .writeHop:
  1352 00003051 EB89                <1>     jmp short .writeDate
  1353                              <1> .jpn:
  1354 00003053 E818190000          <1>     call getNum
  1355 00003058 E840000000          <1>     call .doYear    ;Adjusts the year if necessary
  1356 0000305D 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1357 00003062 739C                <1>     jae .badDate
  1358 00003064 668905F7D5FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1359 0000306B E84A000000          <1>     call .validSep
  1360 00003070 758E                <1>     jne .badDate
  1361 00003072 E8ED180000          <1>     call getByte
  1362 00003077 7287                <1>     jc .badDate
  1363 00003079 8805E5D5FFFF        <1>     mov byte [td3], al  ;Store the day
  1364 0000307F E836000000          <1>     call .validSep
  1365 00003084 0F8576FFFFFF        <1>     jne .badDate
  1366 0000308A E8D5180000          <1>     call getByte
  1367 0000308F 0F826BFFFFFF        <1>     jc .badDate
  1368 00003095 8805CAD5FFFF        <1>     mov byte [td4], al  ;Store month
  1369 0000309B EBB4                <1>     jmp short .writeHop
  1370                              <1> .doYear:
  1371 0000309D 3D77000000          <1>     cmp eax, 119    ;If this is larger than 119, return assuming valid
  1372                              <1>     reta
    73                              <2> cret a
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000030A2 7601                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000030A4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1373                              <1> ;If the user specifies 80-99 it means 1980-1999
  1374                              <1> ;If the user specifies 00-79 it means 2000-2079
  1375 000030A5 BBD0070000          <1>     mov ebx, 2000
  1376 000030AA B96C070000          <1>     mov ecx, 1900
  1377 000030AF 3D50000000          <1>     cmp eax, 80     
  1378 000030B4 0F42CB              <1>     cmovb ecx, ebx
  1379 000030B7 01C8                <1>     add eax, ecx
  1380                              <1>     return
    13                              <2> %%_ret:
    14 000030B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1381                              <1> .validSep:
  1382 000030BA AC                  <1>     lodsb           ;Get the char and return
  1383 000030BB 3C2E                <1>     cmp al, "."
  1384                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000030BD 74(B9)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1385 000030BF 3C2F                <1>     cmp al, "/"
  1386                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000030C1 74(B9)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1387 000030C3 3C2D                <1>     cmp al, "-"
  1388                              <1>     return
    13                              <2> %%_ret:
    14 000030C5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1389                              <1> 
  1390                              <1> time:
  1391 000030C6 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1392 000030CD E8E5150000          <1>     call skipDelimiters
  1393 000030D2 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1394 000030D5 7540                <1>     jne .goTime  ;Else rsi is pointing to something possibly a time. Try it!
  1395                              <1> .init:
  1396 000030D7 488D154BDAFFFF      <1>     lea rdx, curTime
  1397 000030DE B409                <1>     mov ah, 09h
  1398 000030E0 CD21                <1>     int 21h
  1399 000030E2 E85D140000          <1>     call printFmtTime
  1400                              <1> .noCur:
  1401 000030E7 488D154CDAFFFF      <1>     lea rdx, newTime
  1402 000030EE B409                <1>     mov ah, 09h
  1403 000030F0 CD21                <1>     int 21h
  1404                              <1> 
  1405 000030F2 488D15F3D0FFFF      <1>     lea rdx, cpyBuffer  ;Make sure to use cpyBuffer to preserve F3
  1406 000030F9 C60280              <1>     mov byte [rdx], inLen ;Enter a string of up to 128 chars in length
  1407 000030FC B40A                <1>     mov ah, 0Ah
  1408 000030FE CD21                <1>     int 21h
  1409 00003100 52                  <1>     push rdx
  1410 00003101 488D15ACD7FFFF      <1>     lea rdx, crlf
  1411 00003108 B409                <1>     mov ah, 09h
  1412 0000310A CD21                <1>     int 21h
  1413 0000310C 5A                  <1>     pop rdx
  1414 0000310D 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1415                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003111 74(C5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1416 00003113 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1417                              <1> .goTime:
  1418 00003117 C70541D5FFFF000000- <1>     mov dword [td1], 0          ;Set all fields to 0
  1418 00003120 00                  <1>
  1419 00003121 31C0                <1>     xor eax, eax   
  1420 00003123 E83C180000          <1>     call getByte
  1421 00003128 0F8294000000        <1>     jc .badTime         ;Get the number in eax
  1422 0000312E 88052FD5FFFF        <1>     mov byte [td2], al  ;Save hours
  1423 00003134 E89A000000          <1>     call .validsep
  1424 00003139 0F8583000000        <1>     jne .badTime
  1425 0000313F E820180000          <1>     call getByte
  1426 00003144 727C                <1>     jc .badTime
  1427 00003146 880516D5FFFF        <1>     mov byte [td1], al  ;Save minutes
  1428 0000314C E882000000          <1>     call .validsep
  1429 00003151 740F                <1>     je .goSec
  1430 00003153 48FFCE              <1>     dec rsi ;Go back a char
  1431 00003156 E85C150000          <1>     call skipDelimiters ;Skip any delimiters
  1432 0000315B 803E0D              <1>     cmp byte [rsi], CR
  1433 0000315E 743E                <1>     je .setTime
  1434 00003160 EB60                <1>     jmp short .badTime
  1435                              <1> .goSec:
  1436 00003162 E878000000          <1>     call .checkNum
  1437 00003167 7259                <1>     jc .badTime
  1438 00003169 E8F6170000          <1>     call getByte
  1439 0000316E 7252                <1>     jc .badTime
  1440 00003170 8805EFD4FFFF        <1>     mov byte [td4], al  ;Save seconds
  1441 00003176 AC                  <1>     lodsb       ;Move rsi forwards
  1442 00003177 3C2E                <1>     cmp al, "." ;Now we dont allow for colon now, only dot!
  1443 00003179 740F                <1>     je .goMsec
  1444 0000317B 48FFCE              <1>     dec rsi ;Go back a char
  1445 0000317E E834150000          <1>     call skipDelimiters ;Skip any delimiters
  1446 00003183 803E0D              <1>     cmp byte [rsi], CR
  1447 00003186 7416                <1>     je .setTime
  1448 00003188 EB38                <1>     jmp short .badTime
  1449                              <1> .goMsec:
  1450 0000318A E850000000          <1>     call .checkNum
  1451 0000318F 7231                <1>     jc .badTime
  1452 00003191 E8CE170000          <1>     call getByte
  1453 00003196 722A                <1>     jc .badTime
  1454 00003198 8805C6D4FFFF        <1>     mov byte [td3], al  ;Save miliseconds
  1455                              <1> .setTime:
  1456 0000319E E814150000          <1>     call skipDelimiters
  1457 000031A3 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1458 000031A6 751A                <1>     jne .badTime
  1459 000031A8 0FB70DB3D4FFFF      <1>     movzx ecx, word [td1]   ;Get hour/minutes
  1460 000031AF 0FB715AED4FFFF      <1>     movzx edx, word [td3]   ;Get seconds/miliseconds
  1461 000031B6 B8002D0000          <1>     mov eax, 2D00h      ;Set time
  1462 000031BB CD21                <1>     int 21h
  1463 000031BD A8FF                <1>     test al, -1
  1464                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000031BF 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000031C1 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1465                              <1> .badTime:
  1466 000031C2 488D1551D9FFFF      <1>     lea rdx, badTime
  1467 000031C9 E89E120000          <1>     call printString
  1468 000031CE E914FFFFFF          <1>     jmp time.noCur
  1469                              <1> .validsep:
  1470 000031D3 AC                  <1>     lodsb
  1471 000031D4 3A0566CEFFFF        <1>     cmp al, byte [ctryData + countryStruc.timeSep]  ;Usually a colon
  1472                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000031DA 74(C1)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1473 000031DC 3C2E                <1>     cmp al, "."
  1474                              <1>     return
    13                              <2> %%_ret:
    14 000031DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1475                              <1> .checkNum:
  1476 000031DF AC                  <1>     lodsb   ;Now ensure the first char past the delim is a number
  1477 000031E0 48FFCE              <1>     dec rsi
  1478 000031E3 3C30                <1>     cmp al, "0"
  1479 000031E5 7206                <1>     jb .cnbad
  1480 000031E7 3C39                <1>     cmp al, "9"
  1481 000031E9 7702                <1>     ja .cnbad
  1482 000031EB F8                  <1>     clc
  1483                              <1>     return
    13                              <2> %%_ret:
    14 000031EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1484                              <1> .cnbad:
  1485 000031ED F9                  <1>     stc
  1486                              <1>     return
    13                              <2> %%_ret:
    14 000031EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1487                              <1> ctty:
  1488 000031EF F605B6CEFFFFFF      <1>     test byte [arg1Flg], -1
  1489 000031F6 0F8484EEFFFF        <1>     jz badArgError
  1490 000031FC F605ACCEFFFFFF      <1>     test byte [arg2Flg], -1
  1491 00003203 0F8577EEFFFF        <1>     jnz badArgError
  1492 00003209 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1493 00003210 0FB60596CEFFFF      <1>     movzx eax, byte [arg1Off]
  1494 00003217 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
  1495 0000321A 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1496 0000321E 750F                <1>     jne .noDrive
  1497 00003220 0FB60587CEFFFF      <1>     movzx eax, byte [arg1FCBret]
  1498 00003227 3CFF                <1>     cmp al, -1
  1499 00003229 0F8448EEFFFF        <1>     je badDriveError
  1500                              <1> .noDrive:
  1501                              <1>     ;Now we open the provided file
  1502 0000322F E80F160000          <1>     call copyArgumentToSearchSpec
  1503 00003234 488D155ED2FFFF      <1>     lea rdx, searchSpec
  1504                              <1> .loadSwap:
  1505 0000323B B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
  1506 00003240 CD21                <1>     int 21h
  1507 00003242 0F8241EEFFFF        <1>     jc badFileError
  1508 00003248 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
  1509 0000324B B800440000          <1>     mov eax, 4400h  ;Get device word
  1510 00003250 CD21                <1>     int 21h
  1511 00003252 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
  1512 00003255 742F                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
  1513                              <1>     ;Now we set this handle to be STDIO
  1514 00003257 80CA03              <1>     or dl, 3    ;Set STDIO bits
  1515 0000325A 30F6                <1>     xor dh, dh
  1516 0000325C B801440000          <1>     mov eax, 4401h  ;Now we set the device word
  1517 00003261 CD21                <1>     int 21h
  1518                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
  1519 00003263 31C9                <1>     xor ecx, ecx    ;STDIN
  1520 00003265 B800460000          <1>     mov eax, 4600h
  1521 0000326A CD21                <1>     int 21h
  1522 0000326C FFC1                <1>     inc ecx         ;STDOUT
  1523 0000326E B800460000          <1>     mov eax, 4600h
  1524 00003273 CD21                <1>     int 21h
  1525 00003275 FFC1                <1>     inc ecx         ;STDERR
  1526 00003277 B800460000          <1>     mov eax, 4600h
  1527 0000327C CD21                <1>     int 21h
  1528 0000327E B8003E0000          <1>     mov eax, 3E00h ;Now we close the original handle
  1529 00003283 CD21                <1>     int 21h
  1530                              <1>     return
    13                              <2> %%_ret:
    14 00003285 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1531                              <1> .badCharDev:
  1532 00003286 488D15BED9FFFF      <1>     lea rdx, badDev
  1533 0000328D B409                <1>     mov ah, 09h
  1534 0000328F CD21                <1>     int 21h
  1535 00003291 B43E                <1>     mov ah, 3Eh ;Close opened handle
  1536 00003293 CD21                <1>     int 21h
  1537                              <1>     return
    13                              <2> %%_ret:
    14 00003295 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1538                              <1> 
  1539                              <1> cls:  
  1540 00003296 B800440000          <1>     mov eax, 4400h  ;Get device info
  1541 0000329B BB01000000          <1>     mov ebx, 1      ;for handle 1
  1542 000032A0 CD21                <1>     int 21h         ;in dx
  1543 000032A2 F7C280000000        <1>     test edx, devCharDev
  1544 000032A8 7429                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
  1545 000032AA F7C210000000        <1>     test edx, charDevFastOut
  1546 000032B0 7421                <1>     jz .doAnsi
  1547                              <1>     ;Test if Int 29h uses Int 30h
  1548                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
  1549                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
  1550 000032B2 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
  1551 000032B7 CD21                <1>     int 21h
  1552 000032B9 B900040000          <1>     mov ecx, 1024   ;Check in a 1024 byte window for a Int 30h call
  1553                              <1> .biosCheck:
  1554 000032BE 66813BCD30          <1>     cmp word [rbx], 30CDh
  1555 000032C3 7426                <1>     je .biosConfirmed
  1556 000032C5 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
  1557 000032CA 7407                <1>     je .doAnsi      ;If we hit an IRETQ, assume not BIOS
  1558 000032CC 48FFC3              <1>     inc rbx         ;Else, go to next byte for checking
  1559 000032CF FFC9                <1>     dec ecx
  1560 000032D1 75EB                <1>     jnz .biosCheck
  1561                              <1> .doAnsi:
  1562                              <1> ;4 chars in the ansi routine
  1563                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
  1564                              <1> ; understand ANSI codes
  1565 000032D3 488D350DDCFFFF      <1>     lea rsi, ansiCls
  1566 000032DA B904000000          <1>     mov ecx, 4
  1567 000032DF B406                <1>     mov ah, 06h ;Raw char output
  1568                              <1> .ansiLp:
  1569 000032E1 AC                  <1>     lodsb   ;Get the char in 
  1570 000032E2 88C2                <1>     mov dl, al
  1571 000032E4 CD21                <1>     int 21h
  1572 000032E6 FFC9                <1>     dec ecx
  1573 000032E8 75F7                <1>     jnz .ansiLp
  1574                              <1>     return
    13                              <2> %%_ret:
    14 000032EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1575                              <1> .biosConfirmed:
  1576                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
  1577 000032EB B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
  1578 000032ED 31DB                <1>     xor ebx, ebx
  1579 000032EF CD30                <1>     int 30h
  1580 000032F1 B40F                <1>     mov ah, 0Fh ;Get screen mode
  1581 000032F3 CD30                <1>     int 30h
  1582 000032F5 53                  <1>     push rbx
  1583 000032F6 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
  1584 000032F9 FECA                <1>     dec dl
  1585 000032FB B619                <1>     mov dh, 25  ;Number of rows is standard
  1586 000032FD 31C0                <1>     xor eax, eax
  1587 000032FF 89C1                <1>     mov ecx, eax
  1588 00003301 B707                <1>     mov bh, 7   ;Screen attributes
  1589 00003303 B406                <1>     mov ah, 6   ;Scroll
  1590 00003305 CD30                <1>     int 30h
  1591 00003307 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
  1592 00003309 5B                  <1>     pop rbx
  1593 0000330A B402                <1>     mov ah, 2
  1594 0000330C CD30                <1>     int 30h
  1595                              <1>     return
    13                              <2> %%_ret:
    14 0000330E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1596                              <1> 
  1597                              <1> break:
  1598 0000330F F60596CDFFFFFF      <1>     test byte [arg1Flg], -1
  1599 00003316 752D                <1>     jnz .argumentProvided
  1600                              <1>     ;Here we just get the status of break
  1601 00003318 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
  1602 0000331D CD21                <1>     int 21h
  1603 0000331F 88D3                <1>     mov bl, dl
  1604 00003321 488D15C5D9FFFF      <1>     lea rdx, breakIs
  1605 00003328 B409                <1>     mov ah, 09h
  1606 0000332A CD21                <1>     int 21h
  1607 0000332C 488D15B5D9FFFF      <1>     lea rdx, onMes
  1608 00003333 488D0DA8D9FFFF      <1>     lea rcx, offMes
  1609 0000333A 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1610 0000333C 480F44D1            <1>     cmovz rdx, rcx
  1611 00003340 B409                <1>     mov ah, 09h
  1612 00003342 CD21                <1>     int 21h
  1613                              <1>     return
    13                              <2> %%_ret:
    14 00003344 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1614                              <1> .argumentProvided:
  1615 00003345 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1616 00003349 AD                  <1>     lodsd   ;Read the word
  1617 0000334A 89C3                <1>     mov ebx, eax
  1618 0000334C 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1619 00003351 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1620 00003354 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1621 00003359 7416                <1>     je .maybeOn
  1622 0000335B 663D4F46            <1>     cmp ax, "OF"
  1623 0000335F 7523                <1>     jne .badOnOff
  1624 00003361 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1625 00003366 6681FB4620          <1>     cmp bx, "F "
  1626 0000336B 7517                <1>     jne .badOnOff
  1627                              <1>     ;Set off
  1628 0000336D 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1629 0000336F EB0B                <1>     jmp short .setBreak
  1630                              <1> .maybeOn:
  1631 00003371 663D4F4E            <1>     cmp ax, "ON"
  1632 00003375 750D                <1>     jne .badOnOff
  1633                              <1>     ;Set on
  1634 00003377 BA01000000          <1>     mov edx, 1
  1635                              <1> .setBreak:
  1636 0000337C B801330000          <1>     mov eax, 3301h  ;Set break
  1637 00003381 CD21                <1>     int 21h
  1638                              <1>     return
    13                              <2> %%_ret:
    14 00003383 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1639                              <1> .badOnOff:
  1640 00003384 488D156CDBFFFF      <1>     lea rdx, badOnOff
  1641 0000338B B409                <1>     mov ah, 09h
  1642 0000338D CD21                <1>     int 21h
  1643                              <1>     return
    13                              <2> %%_ret:
    14 0000338F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1644                              <1> 
  1645                              <1> verify:
  1646 00003390 F60515CDFFFFFF      <1>     test byte [arg1Flg], -1
  1647 00003397 752D                <1>     jnz .argumentProvided
  1648                              <1>     ;Here we just get the status of break
  1649 00003399 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1650 0000339E CD21                <1>     int 21h
  1651 000033A0 88C3                <1>     mov bl, al
  1652 000033A2 488D154ED9FFFF      <1>     lea rdx, verifyIs
  1653 000033A9 B409                <1>     mov ah, 09h
  1654 000033AB CD21                <1>     int 21h
  1655 000033AD 488D1534D9FFFF      <1>     lea rdx, onMes
  1656 000033B4 488D0D27D9FFFF      <1>     lea rcx, offMes
  1657 000033BB 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1658 000033BD 480F44D1            <1>     cmovz rdx, rcx
  1659 000033C1 B409                <1>     mov ah, 09h
  1660 000033C3 CD21                <1>     int 21h
  1661                              <1>     return
    13                              <2> %%_ret:
    14 000033C5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1662                              <1> .argumentProvided:
  1663 000033C6 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1664 000033CA AD                  <1>     lodsd   ;Read the word
  1665 000033CB 89C3                <1>     mov ebx, eax
  1666 000033CD 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1667 000033D2 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1668 000033D5 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1669 000033DA 7416                <1>     je .maybeOn
  1670 000033DC 663D4F46            <1>     cmp ax, "OF"
  1671 000033E0 751F                <1>     jne .badOnOff
  1672 000033E2 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1673 000033E7 6681FB4620          <1>     cmp bx, "F "
  1674 000033EC 7513                <1>     jne .badOnOff
  1675                              <1>     ;Set off
  1676 000033EE 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1677 000033F0 EB0A                <1>     jmp short .setVerify
  1678                              <1> .maybeOn:
  1679 000033F2 663D4F4E            <1>     cmp ax, "ON"
  1680 000033F6 7509                <1>     jne .badOnOff
  1681                              <1>     ;Set on
  1682 000033F8 31C0                <1>     xor eax, eax
  1683 000033FA FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1684                              <1> .setVerify:
  1685 000033FC B42E                <1>     mov ah, 2Eh  ;Set Verify
  1686 000033FE CD21                <1>     int 21h
  1687                              <1>     return
    13                              <2> %%_ret:
    14 00003400 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1688                              <1> .badOnOff:
  1689 00003401 488D15EFDAFFFF      <1>     lea rdx, badOnOff
  1690 00003408 B409                <1>     mov ah, 09h
  1691 0000340A CD21                <1>     int 21h
  1692                              <1>     return
    13                              <2> %%_ret:
    14 0000340C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1693                              <1> 
  1694                              <1> rename:
  1695 0000340D F60598CCFFFFFF      <1>     test byte [arg1Flg], -1
  1696 00003414 0F8466ECFFFF        <1>     jz badArgError
  1697 0000341A F6058ECCFFFFFF      <1>     test byte [arg2Flg], -1
  1698 00003421 0F8459ECFFFF        <1>     jz badArgError    
  1699                              <1>     ;Initialise the variables!
  1700 00003427 488D3538D2FFFF      <1>     lea rsi, srcSpec
  1701 0000342E 48893535D3FFFF      <1>     mov qword [srcPtr], rsi
  1702 00003435 488D35ACD2FFFF      <1>     lea rsi, destSpec
  1703 0000343C 4889352FD3FFFF      <1>     mov qword [destPtr], rsi
  1704                              <1>     ;Check the second path is just a filename!
  1705 00003443 0FB60566CCFFFF      <1>     movzx eax, byte [arg2Off]
  1706 0000344A 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1707 00003451 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1708 00003454 488D3D3ED0FFFF      <1>     lea rdi, searchSpec
  1709 0000345B 57                  <1>     push rdi
  1710 0000345C E887130000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1711 00003461 5F                  <1>     pop rdi
  1712 00003462 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1713 00003466 0F8414ECFFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1714                              <1> ;Check if a drive specifier has been given
  1715 0000346C 0FB6053ACCFFFF      <1>     movzx eax, byte [arg1Off]
  1716 00003473 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1717 0000347A 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1718 0000347D 66AD                <1>     lodsw   ;Get the first two chars
  1719 0000347F 80FC3A              <1>     cmp ah, ":" ;If not, current drive
  1720 00003482 752A                <1>     jne .curDrvSrc
  1721                              <1> ;Else, copy over the drive letter from the source path, if one exists!
  1722 00003484 488B35DFD2FFFF      <1>     mov rsi, qword [srcPtr]
  1723 0000348B 668906              <1>     mov word [rsi], ax
  1724 0000348E 488105D1D2FFFF0200- <1>     add qword [srcPtr], 2   
  1724 00003497 0000                <1>
  1725 00003499 488B35D2D2FFFF      <1>     mov rsi, qword [destPtr]
  1726 000034A0 668906              <1>     mov word [rsi], ax
  1727 000034A3 488105C4D2FFFF0200- <1>     add qword [destPtr], 2  ;Advance the pointer, to copy to after this ptr
  1727 000034AC 0000                <1>
  1728                              <1> .curDrvSrc:
  1729 000034AE 4889FE              <1>     mov rsi, rdi
  1730                              <1> .destScan:
  1731 000034B1 AC                  <1>     lodsb   ;Get the char
  1732 000034B2 3A0579CBFFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1733 000034B8 0F84C2EBFFFF        <1>     je badArgError
  1734 000034BE 84C0                <1>     test al, al
  1735 000034C0 75EF                <1>     jnz .destScan
  1736                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1737 000034C2 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1738 000034C6 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1738 000034CF 3F                  <1>
  1739 000034D0 B903000000          <1>     mov ecx, 3  ;24 bytes
  1740 000034D5 F348AB              <1>     rep stosq
  1741 000034D8 AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1742 000034D9 488D35B9CFFFFF      <1>     lea rsi, searchSpec
  1743 000034E0 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1744 000034E4 B80D290000          <1>     mov eax, 290Dh
  1745 000034E9 CD21                <1>     int 21h     
  1746 000034EB 50                  <1>     push rax    ;Save the WC signature
  1747 000034EC E83A130000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1748 000034F1 488D3DA1CFFFFF      <1>     lea rdi, searchSpec
  1749 000034F8 E871120000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1750 000034FD 4889FE              <1>     mov rsi, rdi
  1751 00003500 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1752 00003503 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1753 00003507 B80D290000          <1>     mov eax, 290Dh
  1754 0000350C CD21                <1>     int 21h
  1755 0000350E 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1756 0000350F 88CC                <1>     mov ah, cl
  1757 00003511 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1758 00003514 0F84E6000000        <1>     jz .noWC
  1759 0000351A 3CFF                <1>     cmp al, -1  ;Is the source drive bad?
  1760 0000351C 0F845EEBFFFF        <1>     je badArgError
  1761 00003522 488D3570CFFFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1762                              <1>     ;Now we check if we have a path to actually handle
  1763 00003529 4839F3              <1>     cmp rbx, rsi
  1764 0000352C 7444                <1>     je .noPath
  1765 0000352E C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1766 00003532 488D3560CFFFFF      <1>     lea rsi, searchSpec
  1767 00003539 488B3D26D1FFFF      <1>     mov rdi, qword [srcSpec]
  1768 00003540 56                  <1>     push rsi
  1769 00003541 E833110000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1770 00003546 5E                  <1>     pop rsi
  1771 00003547 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1772 0000354A 8A05E1CAFFFF        <1>     mov al, byte [pathSep]
  1773 00003550 AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1774 00003551 48893D12D2FFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1775 00003558 488B3D13D2FFFF      <1>     mov rdi, qword [destPtr]    ;Get the ptr (if it was advanced)
  1776 0000355F E815110000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1777 00003564 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1778 00003567 AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1779 00003568 48893D03D2FFFF      <1>     mov qword [destPtr], rdi
  1780 0000356F 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1781                              <1> .noPath:
  1782                              <1>     ;Now we have where to copy the files to, we can start our work!
  1783 00003572 488D1520CFFFFF      <1>     lea rdx, searchSpec
  1784 00003579 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1785 0000357B B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1786 00003580 CD21                <1>     int 21h
  1787 00003582 0F820AEBFFFF        <1>     jc badDupFnf    ;If no file was found!
  1788                              <1> .wcLoop:
  1789                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1790 00003588 488D35AECBFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1791 0000358F 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1792 00003593 B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1793 00003598 CD21                <1>     int 21h 
  1794                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1795 0000359A 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1796 0000359E 488D3DD5D1FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1797 000035A5 57                  <1>     push rdi
  1798 000035A6 48A5                <1>     movsq
  1799 000035A8 66A5                <1>     movsw
  1800 000035AA A4                  <1>     movsb
  1801 000035AB 5F                  <1>     pop rdi
  1802 000035AC 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1803 000035B0 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1804                              <1> .wcNameMake:
  1805 000035B5 AC                  <1>     lodsb   ;Get the char from the source string
  1806 000035B6 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1807 000035B9 7502                <1>     jne .noStore    ;Dont store the char there
  1808 000035BB 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1809                              <1> .noStore:
  1810 000035BD 48FFC7              <1>     inc rdi ;Goto next char position
  1811 000035C0 FFC9                <1>     dec ecx
  1812 000035C2 75F1                <1>     jnz .wcNameMake
  1813                              <1> ;renName now has the FCB name for the file we wish to make!
  1814                              <1> ;Now make the two paths!
  1815 000035C4 488D3572CBFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1816 000035CB 488B3D98D1FFFF      <1>     mov rdi, qword [srcPtr]
  1817 000035D2 E8A2100000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1818 000035D7 488D359CD1FFFF      <1>     lea rsi, renName
  1819 000035DE 488B3D8DD1FFFF      <1>     mov rdi, qword [destPtr]
  1820 000035E5 E8A8110000          <1>     call FCBToAsciiz
  1821 000035EA 488D1575D0FFFF      <1>     lea rdx, srcSpec
  1822 000035F1 E83F000000          <1>     call .ren   ;Fail silently on wildcard rename
  1823 000035F6 B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1824 000035FB CD21                <1>     int 21h
  1825 000035FD 7389                <1>     jnc .wcLoop     ;And process it too!
  1826                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 000035FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1827                              <1> .noWC:
  1828 00003600 E826120000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1829 00003605 0FB605A4CAFFFF      <1>     movzx eax, byte [arg2Off]
  1830 0000360C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1831 00003613 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1832 00003616 488B3D55D1FFFF      <1>     mov rdi, qword [destPtr]    
  1833 0000361D E8C6110000          <1>     call cpDelimPathToBufz
  1834 00003622 488D1570CEFFFF      <1>     lea rdx, searchSpec
  1835 00003629 E807000000          <1>     call .ren
  1836                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000362E 73(FF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1837 00003630 E95DEAFFFF          <1>     jmp badDupFnf   ;Always just return this
  1838                              <1> .ren:
  1839 00003635 488D3DACD0FFFF      <1>     lea rdi, destSpec
  1840 0000363C B800560000          <1>     mov eax, 5600h
  1841 00003641 CD21                <1>     int 21h
  1842                              <1>     return
    13                              <2> %%_ret:
    14 00003643 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1843                              <1> 
  1844                              <1> truename:
  1845 00003644 F60561CAFFFFFF      <1>     test byte [arg1Flg], -1
  1846 0000364B 0F842FEAFFFF        <1>     jz badArgError
  1847 00003651 E8D5110000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1848 00003656 488D353CCEFFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1849 0000365D 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1850 00003660 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1851 00003665 CD21                <1>     int 21h
  1852 00003667 730D                <1>     jnc .writePath
  1853 00003669 3C02                <1>     cmp al, errFnf
  1854 0000366B 0F8418EAFFFF        <1>     je badFileError
  1855 00003671 E9F8E9FFFF          <1>     jmp badParamError
  1856                              <1> .writePath:
  1857 00003676 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1858 00003679 B9FFFFFFFF          <1>     mov ecx, -1
  1859 0000367E 30C0                <1>     xor al, al
  1860 00003680 F2AE                <1>     repne scasb     ;Get the new len
  1861 00003682 F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1862 00003684 FFC9                <1>     dec ecx
  1863 00003686 BB01000000          <1>     mov ebx, 01
  1864 0000368B B440                <1>     mov ah, 40h
  1865 0000368D CD21                <1>     int 21h
  1866 0000368F E8D10D0000          <1>     call printCRLF
  1867                              <1>     return
    13                              <2> %%_ret:
    14 00003694 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1868                              <1> 
  1869                              <1> volume:
  1870                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  1871 00003695 F60513CAFFFFFF      <1>     test byte [arg2Flg], -1
  1872 0000369C 0F85DEE9FFFF        <1>     jnz badArgError
  1873 000036A2 F60503CAFFFFFF      <1>     test byte [arg1Flg], -1
  1874 000036A9 7507                <1>     jnz .notCurrentDrive
  1875 000036AB E8C40F0000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1876 000036B0 EB31                <1>     jmp short .dirEP
  1877                              <1> .notCurrentDrive:
  1878 000036B2 E874110000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1879 000036B7 488D35DBCDFFFF      <1>     lea rsi, searchSpec
  1880 000036BE E8F40F0000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  1881 000036C3 66AD                <1>     lodsw                   ;Get this word
  1882 000036C5 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  1883 000036C8 0F85B2E9FFFF        <1>     jne badArgError
  1884 000036CE 8A05DAC9FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1885 000036D4 A8FF                <1>     test al, -1
  1886 000036D6 0F859BE9FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1887 000036DC 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1888 000036E1 FFC8                <1>     dec eax ;Convert to 0 based number
  1889                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  1890 000036E3 488D154CCFFFFF      <1>     lea rdx, volFcb
  1891 000036EA FFC0                <1>     inc eax ;Get 1 based drive number
  1892 000036EC 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1893 000036EE 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1894 000036F1 B800110000          <1>     mov eax, 1100h ;Find first FCB
  1895 000036F6 CD21                <1>     int 21h
  1896 000036F8 50                  <1>     push rax
  1897                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  1898 000036F9 488D15B4D1FFFF      <1>     lea rdx, crlf
  1899 00003700 B409                <1>     mov ah, 09h
  1900 00003702 CD21                <1>     int 21h
  1901 00003704 488D1569D4FFFF      <1>     lea rdx, volMes
  1902 0000370B B409                <1>     mov ah, 09h
  1903 0000370D CD21                <1>     int 21h
  1904 0000370F 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  1905 00003711 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  1906 00003714 B402                <1>     mov ah, 02h
  1907 00003716 CD21                <1>     int 21h
  1908 00003718 58                  <1>     pop rax
  1909 00003719 84C0                <1>     test al, al ;If this is zero, the call succeeded
  1910 0000371B 7409                <1>     jz .volIDOk
  1911 0000371D 488D1567D4FFFF      <1>     lea rdx, volNo
  1912 00003724 EB19                <1>     jmp short .volEndPrint
  1913                              <1> .volIDOk:
  1914 00003726 488D1559D4FFFF      <1>     lea rdx, volOk
  1915 0000372D B409                <1>     mov ah, 09h
  1916 0000372F CD21                <1>     int 21h
  1917 00003731 C605FAC9FFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  1918 00003738 488D15E8C9FFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  1919                              <1> .volEndPrint:
  1920 0000373F B409                <1>     mov ah, 09h
  1921 00003741 CD21                <1>     int 21h
  1922 00003743 488D156AD1FFFF      <1>     lea rdx, crlf
  1923 0000374A B409                <1>     mov ah, 09h
  1924 0000374C CD21                <1>     int 21h
  1925                              <1>     return
    13                              <2> %%_ret:
    14 0000374E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1926                              <1> 
  1927                              <1> version:
  1928 0000374F 488D155ED1FFFF      <1>     lea rdx, crlf
  1929 00003756 B409                <1>     mov ah, 09h
  1930 00003758 CD21                <1>     int 21h
  1931 0000375A 488D1501D4FFFF      <1>     lea rdx, dosVer
  1932 00003761 B409                <1>     mov ah, 09h
  1933 00003763 CD21                <1>     int 21h
  1934 00003765 E80C000000          <1>     call .printVersionNumber
  1935 0000376A 488D1543D1FFFF      <1>     lea rdx, crlf
  1936 00003771 B409                <1>     mov ah, 09h
  1937 00003773 CD21                <1>     int 21h
  1938                              <1>     return
    13                              <2> %%_ret:
    14 00003775 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1939                              <1> .printVersionNumber:
  1940 00003776 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1941 00003778 CD21                <1>     int 21h
  1942 0000377A 50                  <1>     push rax
  1943 0000377B 0FB6C0              <1>     movzx eax, al
  1944 0000377E E881110000          <1>     call printDecimalWord
  1945 00003783 B22E                <1>     mov dl, "."
  1946 00003785 B402                <1>     mov ah, 02h
  1947 00003787 CD21                <1>     int 21h
  1948 00003789 58                  <1>     pop rax
  1949 0000378A 0FB6C4              <1>     movzx eax, ah
  1950 0000378D E872110000          <1>     call printDecimalWord
  1951                              <1>     return
    13                              <2> %%_ret:
    14 00003792 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1952                              <1> 
  1953                              <1> 
  1954                              <1> memory:
  1955 00003793 B800520000          <1>     mov eax, 5200h  ;Get Sysvars :)
  1956 00003798 CD21                <1>     int 21h
  1957 0000379A 4885DB              <1>     test rbx, rbx
  1958 0000379D 7510                <1>     jnz .sysvarsOK
  1959 0000379F 488D15B8D6FFFF      <1>     lea rdx, memBad0
  1960 000037A6 B409                <1>     mov ah, 09h
  1961 000037A8 CD21                <1>     int 21h
  1962 000037AA E9FD110000          <1>     jmp freezePC.altEP
  1963                              <1> .sysvarsOK:
  1964                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1965                              <1>     ; and rcx to store Application memory
  1966 000037AF 31F6                <1>     xor esi, esi
  1967 000037B1 31FF                <1>     xor edi, edi
  1968 000037B3 31ED                <1>     xor ebp, ebp
  1969 000037B5 31C9                <1>     xor ecx, ecx
  1970 000037B7 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1971 000037BB 488B1B              <1>     mov rbx, qword [rbx]
  1972                              <1> .memLp:
  1973 000037BE 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1974 000037C1 7409                <1>     je .validMCB
  1975 000037C3 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1976 000037C6 0F8506010000        <1>     jne .badMCBFound
  1977                              <1> .validMCB:
  1978 000037CC 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1979 000037CF 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1980 000037D3 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1981 000037DB 7505                <1>     jne .notDOS
  1982 000037DD 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1983 000037E0 EB21                <1>     jmp short .gotoNext
  1984                              <1> .notDOS:
  1985 000037E2 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1986 000037EA 7505                <1>     jne .notFree
  1987 000037EC 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1988 000037EF EB12                <1>     jmp short .gotoNext
  1989                              <1> .notFree:
  1990 000037F1 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1991 000037F9 7505                <1>     jne .notHole
  1992 000037FB 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1993 000037FE EB03                <1>     jmp short .gotoNext
  1994                              <1> .notHole:
  1995 00003800 4801C1              <1>     add rcx, rax    ;Add to Application count
  1996                              <1> .gotoNext:
  1997 00003803 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1998 00003806 7407                <1>     je .endOfWalk
  1999 00003808 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  2000 0000380D EBAF                <1>     jmp short .memLp
  2001                              <1> .endOfWalk:
  2002                              <1>     
  2003 0000380F 488D15A9D5FFFF      <1>     lea rdx, memDOS
  2004 00003816 B409                <1>     mov ah, 09h
  2005 00003818 CD21                <1>     int 21h
  2006 0000381A 4889F0              <1>     mov rax, rsi
  2007 0000381D E89D000000          <1>     call .mcbPrintAmount
  2008 00003822 488D152ED6FFFF      <1>     lea rdx, memByte
  2009 00003829 B409                <1>     mov ah, 09h
  2010 0000382B CD21                <1>     int 21h
  2011                              <1> 
  2012 0000382D 4885ED              <1>     test rbp, rbp
  2013 00003830 741E                <1>     jz .skipHole
  2014 00003832 488D15D2D5FFFF      <1>     lea rdx, memHole
  2015 00003839 B409                <1>     mov ah, 09h
  2016 0000383B CD21                <1>     int 21h
  2017 0000383D 4889E8              <1>     mov rax, rbp
  2018 00003840 E87A000000          <1>     call .mcbPrintAmount
  2019 00003845 488D150BD6FFFF      <1>     lea rdx, memByte
  2020 0000384C B409                <1>     mov ah, 09h
  2021 0000384E CD21                <1>     int 21h
  2022                              <1> .skipHole:
  2023                              <1> 
  2024 00003850 488D158ED5FFFF      <1>     lea rdx, memApp
  2025 00003857 B409                <1>     mov ah, 09h
  2026 00003859 CD21                <1>     int 21h
  2027 0000385B 4889C8              <1>     mov rax, rcx
  2028 0000385E E85C000000          <1>     call .mcbPrintAmount
  2029 00003863 488D15EDD5FFFF      <1>     lea rdx, memByte
  2030 0000386A B409                <1>     mov ah, 09h
  2031 0000386C CD21                <1>     int 21h
  2032                              <1> 
  2033 0000386E 488D15BCD5FFFF      <1>     lea rdx, memFree
  2034 00003875 B409                <1>     mov ah, 09h
  2035 00003877 CD21                <1>     int 21h
  2036 00003879 4889F8              <1>     mov rax, rdi
  2037 0000387C E83E000000          <1>     call .mcbPrintAmount
  2038 00003881 488D15CFD5FFFF      <1>     lea rdx, memByte
  2039 00003888 B409                <1>     mov ah, 09h
  2040 0000388A CD21                <1>     int 21h
  2041                              <1> 
  2042 0000388C 488D1506D5FFFF      <1>     lea rdx, memSys
  2043 00003893 B409                <1>     mov ah, 09h
  2044 00003895 CD21                <1>     int 21h
  2045 00003897 4889F0              <1>     mov rax, rsi
  2046 0000389A 4801F8              <1>     add rax, rdi
  2047 0000389D 4801C8              <1>     add rax, rcx
  2048 000038A0 4801E8              <1>     add rax, rbp
  2049 000038A3 E817000000          <1>     call .mcbPrintAmount
  2050 000038A8 488D15A8D5FFFF      <1>     lea rdx, memByte
  2051 000038AF B409                <1>     mov ah, 09h
  2052 000038B1 CD21                <1>     int 21h
  2053                              <1> 
  2054 000038B3 488D15FACFFFFF      <1>     lea rdx, crlf
  2055 000038BA B409                <1>     mov ah, 09h
  2056 000038BC CD21                <1>     int 21h
  2057                              <1>     return
    13                              <2> %%_ret:
    14 000038BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2058                              <1> 
  2059                              <1> .mcbPrintAmount:
  2060 000038BF 51                  <1>     push rcx
  2061 000038C0 56                  <1>     push rsi
  2062 000038C1 57                  <1>     push rdi
  2063 000038C2 55                  <1>     push rbp
  2064 000038C3 B90F000000          <1>     mov ecx, 15 ;Makes space for up to (999 Gb of memory)
  2065 000038C8 E8970F0000          <1>     call printDecimalValLB
  2066 000038CD 5D                  <1>     pop rbp
  2067 000038CE 5F                  <1>     pop rdi
  2068 000038CF 5E                  <1>     pop rsi
  2069 000038D0 59                  <1>     pop rcx
  2070                              <1>     return
    13                              <2> %%_ret:
    14 000038D1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2071                              <1> .badMCBFound:
  2072 000038D2 488D15C5D5FFFF      <1>     lea rdx, memBad2
  2073 000038D9 B409                <1>     mov ah, 09h
  2074 000038DB CD21                <1>     int 21h
  2075 000038DD E9CA100000          <1>     jmp freezePC.altEP
  2076                              <1> 
  2077                              <1> type:
  2078 000038E2 F605C3C7FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  2079 000038E9 0F8491E7FFFF        <1>     jz badArgError
  2080 000038EF F605B9C7FFFFFF      <1>     test byte [arg2Flg], -1
  2081 000038F6 0F8584E7FFFF        <1>     jnz badArgError         ;If this set, error
  2082 000038FC 4C8B050CC7FFFF      <1>     mov r8, [pspPtr]
  2083 00003903 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2084 0000390A 0FB6059CC7FFFF      <1>     movzx eax, byte [arg1Off]
  2085 00003911 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  2086 00003914 803E0D              <1>     cmp byte [rsi], CR
  2087 00003917 0F8463E7FFFF        <1>     je badArgError
  2088 0000391D 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  2089 00003921 750F                <1>     jne .noDrive
  2090 00003923 0FB60584C7FFFF      <1>     movzx eax, byte [arg1FCBret]
  2091 0000392A 3CFF                <1>     cmp al, -1
  2092 0000392C 0F8445E7FFFF        <1>     je badDriveError
  2093                              <1> .noDrive:
  2094                              <1>     ;Now we open the provided file
  2095 00003932 E8F40E0000          <1>     call buildCommandPath
  2096 00003937 488D155BCBFFFF      <1>     lea rdx, searchSpec
  2097 0000393E B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  2098 00003943 CD21                <1>     int 21h
  2099 00003945 0F823EE7FFFF        <1>     jc badFileError
  2100 0000394B 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  2101 00003952 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  2102                              <1> .lp:
  2103 00003955 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  2104 0000395A B43F                <1>     mov ah, 3Fh ;Read handle
  2105 0000395C CD21                <1>     int 21h
  2106 0000395E 89C1                <1>     mov ecx, eax
  2107 00003960 67E317              <1>     jecxz .exit
  2108 00003963 53                  <1>     push rbx    ;Save the original in handle
  2109 00003964 BB01000000          <1>     mov ebx, 1  ;STDOUT
  2110 00003969 B440                <1>     mov ah, 40h
  2111 0000396B CD21                <1>     int 21h
  2112 0000396D 5B                  <1>     pop rbx ;Get back the original read handle
  2113 0000396E 720F                <1>     jc .exitBad
  2114 00003970 39C8                <1>     cmp eax, ecx
  2115 00003972 74E1                <1>     je .lp
  2116 00003974 FFC9                <1>     dec ecx ;One less for a ^Z
  2117 00003976 39C8                <1>     cmp eax, ecx
  2118 00003978 7505                <1>     jne .exitBad
  2119                              <1> .exit:
  2120 0000397A B43E                <1>     mov ah, 3Eh ;Close handle
  2121 0000397C CD21                <1>     int 21h
  2122                              <1>     return
    13                              <2> %%_ret:
    14 0000397E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2123                              <1> .exitBad:
  2124                              <1>     ;If it is a char device, don't print an error
  2125 0000397F B800440000          <1>     mov eax, 4400h  ;Get IOCTL mode 
  2126 00003984 BB01000000          <1>     mov ebx, 1
  2127 00003989 CD21                <1>     int 21h
  2128 0000398B F6C280              <1>     test dl, devCharDev
  2129                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000398E 75(7E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2130 00003990 E990E6FFFF          <1>     jmp badDiskFull
  2131                              <1> 
  2132                              <1> exit:
  2133 00003995 F60500C7FFFF01      <1>     test byte [statFlg1], permaShell
  2134 0000399C 740E                <1>     jz .ouch        ;If not permashell, time to EXIT
  2135 0000399E F605F7C6FFFF04      <1>     test byte [statFlg1], inSingle  ;If perma and single command
  2136 000039A5 0F85E7E1FFFF        <1>     jnz int2ERet    ;We are Int 2Eh, exit through the handler
  2137                              <1>     return  ;Else, permashell just returns
    13                              <2> %%_ret:
    14 000039AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2138                              <1> .ouch:
  2139 000039AC B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  2140 000039B1 CD21                <1>     int 21h
  2141                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 000039B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2142                              <1> 
  2143                              <1> launchChild:
  2144                              <1>     ;We execute an external command here.
  2145                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  2146                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  2147                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  2148                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  2149                              <1>     ;We know the drive we are on is valid so no need to double check that!
  2150 000039B4 E803100000          <1>     call setDTA         
  2151                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
  2152 000039B9 488D3D30C9FFFF      <1>     lea rdi, cmdPathSpec
  2153 000039C0 4889FE              <1>     mov rsi, rdi
  2154 000039C3 B811120000          <1>     mov eax, 1211h  ;Normalise this path first
  2155 000039C8 CD2F                <1>     int 2fh
  2156 000039CA E89F0D0000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  2157 000039CF 4889FE              <1>     mov rsi, rdi    ;Source here
  2158 000039D2 488D3D36C7FFFF      <1>     lea rdi, cmdFcb
  2159 000039D9 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  2160 000039DE CD21                <1>     int 21h
  2161 000039E0 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  2162 000039E2 0F85C8E6FFFF        <1>     jnz badCmdError
  2163 000039E8 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  2164                              <1> .pathLoop:
  2165 000039EB 488D3526C7FFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  2166 000039F2 488D3D1FD5FFFF      <1>     lea rdi, extStr
  2167 000039F9 BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  2168                              <1> .extLp:
  2169 000039FE 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  2170 000039FF B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  2171 00003A04 F3A6                <1>     rep cmpsb   ;Compare the two strings
  2172 00003A06 5E                  <1>     pop rsi
  2173 00003A07 85C9                <1>     test ecx, ecx
  2174 00003A09 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  2175 00003A0B 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  2176 00003A0E FFCA                <1>     dec edx         ;Else one less extension type to check
  2177 00003A10 75EC                <1>     jnz .extLp
  2178                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  2179                              <1>     ;If not, error.
  2180 00003A12 B903000000          <1>     mov ecx, 3
  2181 00003A17 4889F7              <1>     mov rdi, rsi
  2182 00003A1A B020                <1>     mov al, SPC
  2183 00003A1C F3AE                <1>     rep scasb   
  2184 00003A1E 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  2185 00003A20 0F858AE6FFFF        <1>     jnz badCmdError    ;If not, error!
  2186                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  2187 00003A26 488D35EBD4FFFF      <1>     lea rsi, extStr
  2188 00003A2D BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  2189                              <1> .extSrchLp:
  2190 00003A32 488D3DDFC6FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2191 00003A39 B903000000          <1>     mov ecx, 3
  2192 00003A3E F3A4                <1>     rep movsb   ;Copy the extension over!
  2193 00003A40 E83F010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  2194 00003A45 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  2195 00003A47 FFCB                <1>     dec ebx                 ;Decrement extension counter
  2196 00003A49 75E7                <1>     jnz .extSrchLp
  2197                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  2198                              <1> ; we start prepending path componants and trying again. To do this, we reset
  2199                              <1> ; by setting the fcb extension back to all spaces.
  2200 00003A4B 488D3DC6C6FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2201 00003A52 B903000000          <1>     mov ecx, 3
  2202 00003A57 B020                <1>     mov al, SPC
  2203 00003A59 F3AA                <1>     rep stosb   ;Store back the empty extension!
  2204 00003A5B EB69                <1>     jmp short .pathHandle
  2205                              <1> .extFnd:
  2206                              <1> ;Here if the file had the right extension.
  2207 00003A5D E822010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  2208 00003A62 7262                <1>     jc .pathHandle
  2209                              <1> .extSrchFnd:
  2210                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  2211                              <1> ; a BAT. If it is, separate handling!
  2212 00003A64 803DADC6FFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  2213 00003A6B 0F8488E1FFFF        <1>     je batLaunch
  2214 00003A71 488D1DD2C6FFFF      <1>     lea rbx, launchBlock
  2215 00003A78 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  2216 00003A7C 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  2217 00003A7F 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  2218 00003A86 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  2219 00003A8A 498D405C            <1>     lea rax, qword [r8 + fcb1]
  2220 00003A8E 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  2221 00003A92 498D406C            <1>     lea rax, qword [r8 + fcb2]
  2222 00003A96 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  2223 00003A9A 488D154FC8FFFF      <1>     lea rdx, cmdPathSpec
  2224 00003AA1 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  2225 00003AA6 CD21                <1>     int 21h
  2226                              <1> ;If the program failed to start, verify why!
  2227 00003AA8 B800590000          <1>     mov eax, 5900h      ;Get extended error
  2228 00003AAD 31DB                <1>     xor ebx, ebx
  2229 00003AAF CD21                <1>     int 21h
  2230                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  2231                              <1> ; The below doesnt make any sense. Retcode is
  2232                              <1> ; is not the DOS error code.
  2233                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  2234                              <1>     ;mov word [returnCode], ax   ;Error code from EXEC
  2235                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  2236 00003AB1 3C05                <1>     cmp al, errAccDen   ;Access denied?
  2237 00003AB3 0F84ACE5FFFF        <1>     je badAccError
  2238 00003AB9 3C07                <1>     cmp al, errMCBbad   ;If MCB bad error, freeze PC
  2239 00003ABB 0F84E00E0000        <1>     je freezePC
  2240 00003AC1 E9EAE5FFFF          <1>     jmp badCmdError     ;If something goes wrong, error out
  2241                              <1> .pathHandle:        
  2242                              <1> ;First check if rbp is null. If it is, its a first time entry. 
  2243                              <1> ;al has error code!
  2244 00003AC6 4885ED              <1>     test rbp, rbp
  2245 00003AC9 0F85A3000000        <1>     jnz .pathReentry
  2246                              <1> ;Now check if the command we recieved included an absolute path.
  2247                              <1> ;If so, we don't do path substitution and just fail at this point
  2248 00003ACF 488D351AC8FFFF      <1>     lea rsi, cmdPathSpec
  2249 00003AD6 66AD                <1>     lodsw   ;Get the first two chars
  2250 00003AD8 3A0553C5FFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  2251 00003ADE 0F84CCE5FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2252 00003AE4 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  2253 00003AE6 7412                <1>     je .pathGetEnv
  2254 00003AE8 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  2255 00003AEB 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  2256 00003AED AC                  <1>     lodsb   ;Get the third char
  2257 00003AEE 3A053DC5FFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  2258 00003AF4 0F84B6E5FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2259                              <1> .pathGetEnv:
  2260                              <1> ;Now get a pointer to the environment and search for PATH=
  2261                              <1> ;We only take the final portion of the path and add it to each path componant
  2262                              <1> ;This agrees with DOS 3.3
  2263 00003AFA E81E0F0000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  2264 00003AFF 0F84ABE5FFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  2265                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  2266                              <1>     ;Now we know we dont have to keep track of chars!!
  2267 00003B05 488D3D2ED4FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  2268 00003B0C E8660F0000          <1>     call searchForEnvVar
  2269 00003B11 0F8299E5FFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
  2270 00003B17 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
  2271 00003B1A 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
  2272                              <1> .pathRejoin:
  2273 00003B21 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  2274 00003B24 0F8486E5FFFF        <1>     je badCmdError      ;Empty or no more path? Error!
  2275 00003B2A 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
  2276 00003B2D 488D3D65C9FFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  2277                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
  2278                              <1>     ;SHOULD CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
  2279                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
  2280                              <1>     ;This is impossible to do if env edited by COMMAND.COM
  2281 00003B34 E8990C0000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
  2282 00003B39 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  2283 00003B3C 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  2284 00003B3F 48FFCF              <1>     dec rdi ;Point to the null terminator
  2285 00003B42 8A05E9C4FFFF        <1>     mov al, byte [pathSep]
  2286 00003B48 3847FF              <1>     cmp byte [rdi - 1], al
  2287 00003B4B 7401                <1>     je .skipPathsep ;Need for rootdir as a double slash start is a netpath
  2288 00003B4D AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  2289                              <1> .skipPathsep: ;Affects double slashes in path (but thats ok)
  2290 00003B4E 488D35BBC5FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2291 00003B55 E8380C0000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  2292 00003B5A 488D3538C9FFFF      <1>     lea rsi, searchSpec 
  2293 00003B61 488D3D88C7FFFF      <1>     lea rdi, cmdPathSpec
  2294 00003B68 E80C0B0000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  2295 00003B6D E979FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  2296                              <1> .pathReentry:
  2297 00003B72 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  2298 00003B76 0F8434E5FFFF        <1>     je badCmdError
  2299                              <1> ;Currently, because we dont swap drives, we wont print this message.
  2300                              <1> ;Not really a big deal...
  2301                              <1>     ;cmp al, errBadDrv
  2302                              <1>     ;jne .pathDrvOk
  2303                              <1>     ;lea rdx, badDrvSrch ;Print the drive was invalid!
  2304                              <1>     ;mov eax, 0900h
  2305                              <1>     ;int 21h
  2306                              <1> ;.pathDrvOk:
  2307 00003B7C 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  2308 00003B7F 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  2309 00003B82 EB9D                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  2310                              <1> 
  2311                              <1> .prepAndSearch:
  2312                              <1> ;Copies over the name and extension in UC to the last componant of the 
  2313                              <1> ;cmdPathSpec and null terminates. 
  2314                              <1> ;Input: cmdFcb name + ext setup. 
  2315                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  2316                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
  2317 00003B84 51                  <1>     push rcx
  2318 00003B85 56                  <1>     push rsi
  2319 00003B86 57                  <1>     push rdi
  2320 00003B87 488D3D62C7FFFF      <1>     lea rdi, cmdPathSpec 
  2321 00003B8E 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  2322 00003B91 E8D80B0000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  2323 00003B96 807F013A            <1>     cmp byte [rdi + 1], ":"
  2324 00003B9A 7507                <1>     jne .notdriveRel
  2325 00003B9C 4881C702000000      <1>     add rdi, 2  ;Go past the drive specifier, but keep it!
  2326                              <1> .notdriveRel:
  2327 00003BA3 488D3566C5FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2328 00003BAA E8E30B0000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  2329 00003BAF B8004E0000          <1>     mov eax, 4E00h  ;Find first
  2330 00003BB4 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  2331 00003BB6 CD21                <1>     int 21h
  2332 00003BB8 5F                  <1>     pop rdi
  2333 00003BB9 5E                  <1>     pop rsi
  2334 00003BBA 59                  <1>     pop rcx
  2335                              <1>     return
    13                              <2> %%_ret:
    14 00003BBB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2336                              <1> 
  2337                              <1> set:
  2338 00003BBC F605E9C4FFFFFF      <1>     test byte [arg1Flg], -1
  2339 00003BC3 7539                <1>     jnz .editEnv
  2340                              <1>     ;Here we just print the environment.
  2341 00003BC5 E8530E0000          <1>     call checkEnvGoodAndGet 
  2342 00003BCA 0F848CE4FFFF        <1>     jz badEnvSpaceError
  2343                              <1>     ;We know this is a good env so keep going! env ptr in rsi
  2344 00003BD0 4889F7              <1>     mov rdi, rsi
  2345 00003BD3 4889F2              <1>     mov rdx, rsi
  2346                              <1> .findLp:
  2347 00003BD6 B9FFFFFFFF          <1>     mov ecx, -1
  2348 00003BDB 31C0                <1>     xor eax, eax
  2349                              <1> .scanLp:
  2350 00003BDD F2AE                <1>     repne scasb
  2351 00003BDF 75FC                <1>     jne .scanLp
  2352 00003BE1 F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
  2353                              <1>     ;Else, we now print this environment variable and CRLF it
  2354                              <1>     ;rdx points to the start of the string aleady
  2355                              <1>     ;ecx has the bytes to print
  2356 00003BE3 BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
  2357 00003BE8 B800400000          <1>     mov eax, 4000h  ;Print to handle
  2358 00003BED CD21                <1>     int 21h
  2359 00003BEF E871080000          <1>     call printCRLF
  2360 00003BF4 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
  2361                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003BF7 74(BB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2362 00003BF9 4889FA              <1>     mov rdx, rdi   
  2363 00003BFC EBD8                <1>     jmp short .findLp
  2364                              <1> .editEnv:
  2365 00003BFE E81A0E0000          <1>     call checkEnvGoodAndGet
  2366 00003C03 0F8453E4FFFF        <1>     jz badEnvSpaceError
  2367 00003C09 0FB6059DC4FFFF      <1>     movzx eax, byte [arg1Off]
  2368 00003C10 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2369 00003C17 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
  2370                              <1> .altEp:
  2371 00003C1A 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
  2372 00003C1D B00D                <1>     mov al, CR              ;Search for the CR
  2373 00003C1F 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
  2374 00003C27 89CB                <1>     mov ebx, ecx            ;Save this count 
  2375 00003C29 53                  <1>     push rbx                ;Save this count on the stack too!
  2376 00003C2A F2AE                <1>     repne scasb             ;Now get the length of this env string
  2377 00003C2C 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
  2378 00003C2E 66891D66CBFFFF      <1>     mov word [envVarSz], bx ;Store the count
  2379 00003C35 59                  <1>     pop rcx                 ;Get the char count back!
  2380 00003C36 89CB                <1>     mov ebx, ecx            
  2381 00003C38 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
  2382 00003C3B B03D                <1>     mov al, "="             ;Scan for an equals sign
  2383 00003C3D F2AE                <1>     repne scasb
  2384 00003C3F 0F850EE4FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
  2385 00003C45 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
  2386 00003C47 66891D4FCBFFFF      <1>     mov word [envVarNamSz], bx
  2387 00003C4E 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
  2388 00003C51 7477                <1>     je .delEnvVar           ;Free the envvar and return
  2389 00003C53 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
  2390 00003C54 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2391 00003C57 E81B0E0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2392 00003C5C 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
  2393 00003C5E E8420E0000          <1>     call envFree            ;Free the var in rsi
  2394                              <1> .editNewEnv:
  2395 00003C63 E8760E0000          <1>     call getFreeSpace       ;Get the free space in env in ecx
  2396 00003C68 E8960E0000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
  2397 00003C6D 5E                  <1>     pop rsi                 ;Get back the ptr to the string
  2398 00003C6E 31C0                <1>     xor eax, eax            ;Prepare null length!
  2399 00003C70 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
  2400 00003C76 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
  2401 00003C79 720B                <1>     jb .reallocTry          ;Try to reallocate!
  2402 00003C7B FFC9                <1>     dec ecx                 ;Save a byte for end magic null
  2403 00003C7D 663B0D17CBFFFF      <1>     cmp cx, word [envVarSz] ;Do we have enough space?
  2404 00003C84 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
  2405                              <1> .reallocTry:
  2406                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
  2407                              <1>     ; we proceed with the environment size.
  2408 00003C86 E88D0E0000          <1>     call growEnvBlock   ;Attempt to grow the environment
  2409 00003C8B 7319                <1>     jnc .reallocOk
  2410 00003C8D 0F84C9E3FFFF        <1>     jz badEnvSpaceError    ;Max environment space
  2411                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
  2412                              <1>     ; partially the variable into the env. If so we do that. If the name
  2413                              <1>     ; cannot fit, we don't bother
  2414                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
  2415 00003C93 663B0D03CBFFFF      <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
  2416                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00003C9A 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00003C9C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2417 00003C9D E8BAE3FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
  2418 00003CA2 FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
  2419 00003CA4 EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
  2420                              <1> .reallocOk:
  2421                              <1>     ;Here we have all the space to just copy the full path
  2422 00003CA6 0FB70DEECAFFFF      <1>     movzx ecx, word [envVarSz]
  2423                              <1> .nameCp:
  2424                              <1> ;Now copy over the env var, ecx = #ofchars to copy
  2425                              <1> ;Always enough memory for name= here
  2426 00003CAD AC                  <1>     lodsb
  2427 00003CAE E8E9090000          <1>     call ucChar
  2428 00003CB3 AA                  <1>     stosb
  2429 00003CB4 66FFC9              <1>     dec cx      ;Always decrement this count
  2430 00003CB7 3C3D                <1>     cmp al, "="
  2431 00003CB9 75F2                <1>     jne .nameCp
  2432                              <1> .exitNameCp:
  2433 00003CBB AC                  <1>     lodsb
  2434 00003CBC 3C0D                <1>     cmp al, CR
  2435 00003CBE 7405                <1>     je .exitCp
  2436 00003CC0 AA                  <1>     stosb
  2437 00003CC1 FFC9                <1>     dec ecx
  2438 00003CC3 75F6                <1>     jnz .exitNameCp
  2439                              <1> .exitCp:
  2440 00003CC5 31C0                <1>     xor eax, eax
  2441 00003CC7 66AB                <1>     stosw   ;Store the final null word
  2442                              <1>     return
    13                              <2> %%_ret:
    14 00003CC9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2443                              <1> .delEnvVar:
  2444                              <1>     ;rsi -> Start of the envvar name in user buffer
  2445 00003CCA 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2446 00003CCD E8A50D0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2447 00003CD2 7205                <1>     jc .delEnvVarSkip
  2448 00003CD4 E8CC0D0000          <1>     call envFree    ;Free the env var at rsi
  2449                              <1> .delEnvVarSkip:
  2450 00003CD9 F8                  <1>     clc             ;Clear CF if the var doesnt exist
  2451                              <1>     return
    13                              <2> %%_ret:
    14 00003CDA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2452                              <1> 
  2453                              <1> pathEdit:
  2454                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
  2455                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
  2456                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
  2457                              <1> ; end there. Error with too many arguments error!
  2458                              <1> ;If after the equals sign there is nothing, we just print the path!
  2459                              <1> ;Gotta process the command line ourselves first
  2460 00003CDB E83D0D0000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2461 00003CE0 0F8476E3FFFF        <1>     jz badEnvSpaceError
  2462                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2463 00003CE6 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2464 00003CED E8AD000000          <1>     call .skipPathDelimiters
  2465 00003CF2 3C0D                <1>     cmp al, CR
  2466 00003CF4 7466                <1>     je .printPath
  2467                              <1> ;Else use the set command to setup the path in the searchSpec.
  2468 00003CF6 56                  <1>     push rsi    ;Save the first char of the command line string
  2469 00003CF7 488D353CD2FFFF      <1>     lea rsi, pathEVar
  2470 00003CFE 488D3D94C7FFFF      <1>     lea rdi, searchSpec
  2471 00003D05 E86F090000          <1>     call strcpy
  2472 00003D0A 48FFCF              <1>     dec rdi     ;Point to the terminating null
  2473 00003D0D 5E                  <1>     pop rsi     ;Get back the first char of the pathstring
  2474 00003D0E 31C9                <1>     xor ecx, ecx    ;Make a count of chars
  2475                              <1> .cpLp:
  2476 00003D10 AC                  <1>     lodsb
  2477 00003D11 3C0D                <1>     cmp al, CR
  2478 00003D13 7411                <1>     je .cpLpExit
  2479 00003D15 E891000000          <1>     call .isALPathDelimiter ;Any path delims now are exit conditions!
  2480 00003D1A 740A                <1>     je .cpLpExit
  2481 00003D1C E87B090000          <1>     call ucChar ;Uppercase the char
  2482 00003D21 AA                  <1>     stosb       ;Store it
  2483 00003D22 FFC1                <1>     inc ecx     ;Inc the count, CR not inclusive!
  2484 00003D24 EBEA                <1>     jmp short .cpLp
  2485                              <1> .cpLpExit:
  2486                              <1>     ;Remove trailing semicolons
  2487 00003D26 807FFF3B            <1>     cmp byte [rdi - 1], ";" ;Check back a char
  2488 00003D2A 7507                <1>     jne .cpLpNoIntervene
  2489 00003D2C FFC9                <1>     dec ecx     ;Reduce the count by one
  2490 00003D2E 48FFCF              <1>     dec rdi     ;Go back a char
  2491 00003D31 EBF3                <1>     jmp short .cpLpExit ;Keep removing
  2492                              <1> .cpLpNoIntervene:
  2493 00003D33 B00D                <1>     mov al, CR  ;Now we store the terminator!
  2494 00003D35 AA                  <1>     stosb       ;Store it!
  2495 00003D36 81C105000000        <1>     add ecx, 5  ;PATH= is 5 chars
  2496 00003D3C 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count
  2497 00003D43 FFC1                <1>     inc ecx     ;Add the CR for copying over
  2498 00003D45 488D354DC7FFFF      <1>     lea rsi, searchSpec
  2499 00003D4C 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2500 00003D53 57                  <1>     push rdi
  2501 00003D54 F3A4                <1>     rep movsb
  2502 00003D56 5E                  <1>     pop rsi         ;Get the ptr to the cmdline in rsi
  2503 00003D57 E9BEFEFFFF          <1>     jmp set.altEp   ;We've now set the string up, lets go!
  2504                              <1> .printPath:
  2505 00003D5C 488D3DD7D1FFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
  2506 00003D63 E80F0D0000          <1>     call searchForEnvVar    ;Returns ptr to env var in rsi
  2507 00003D68 7221                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
  2508 00003D6A 4889F7              <1>     mov rdi, rsi        
  2509 00003D6D E820090000          <1>     call strlen         ;Get the length of the path in rdi
  2510 00003D72 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
  2511 00003D78 7411                <1>     je .noPathPrnt      ;Print no path!
  2512 00003D7A FFC9                <1>     dec ecx             ;Drop the terminating null from the count
  2513 00003D7C 4889FA              <1>     mov rdx, rdi        ;Set path ptr for printing
  2514 00003D7F BB01000000          <1>     mov ebx, 1          ;STDOUT
  2515 00003D84 B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
  2516 00003D89 EB0C                <1>     jmp short .pathExit
  2517                              <1> .noPathPrnt:
  2518 00003D8B 488D157FCEFFFF      <1>     lea rdx, noPath
  2519 00003D92 B800090000          <1>     mov eax, 0900h
  2520                              <1> .pathExit:
  2521 00003D97 CD21                <1>     int 21h
  2522 00003D99 E8C7060000          <1>     call printCRLF      ;Print a crlf at the end
  2523                              <1>     return
    13                              <2> %%_ret:
    14 00003D9E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2524                              <1> .skipPathDelimiters:
  2525                              <1> ;Input: rsi -> Start of string to parse
  2526                              <1> ;Output: rsi -> First non-delimiter char of string
  2527                              <1> ;        al = First non delim char
  2528 00003D9F AC                  <1>     lodsb
  2529 00003DA0 E806000000          <1>     call .isALPathDelimiter
  2530 00003DA5 74F8                <1>     je .skipPathDelimiters
  2531 00003DA7 48FFCE              <1>     dec rsi
  2532                              <1>     return
    13                              <2> %%_ret:
    14 00003DAA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2533                              <1> .isALPathDelimiter:
  2534                              <1> ;Same as before without semicolon
  2535 00003DAB 3C20                <1>     cmp al, SPC
  2536                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003DAD 74(AA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2537 00003DAF 3C09                <1>     cmp al, TAB
  2538                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003DB1 74(AA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2539 00003DB3 3C2C                <1>     cmp al, ","
  2540                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003DB5 74(AA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2541 00003DB7 3C3D                <1>     cmp al, "="
  2542                              <1>     return
    13                              <2> %%_ret:
    14 00003DB9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2543                              <1> 
  2544                              <1> prompt:
  2545 00003DBA E85E0C0000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2546 00003DBF 0F8497E2FFFF        <1>     jz badEnvSpaceError
  2547                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2548 00003DC5 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2549 00003DCC E8E6080000          <1>     call skipDelimiters ;Points rsi to the first non-delimiter char
  2550 00003DD1 803E0D              <1>     cmp byte [rsi], CR  ;Is the first non-delim a CR?
  2551 00003DD4 742C                <1>     je .reset   ;Reset if so
  2552 00003DD6 56                  <1>     push rsi    ;Save ptr to the start of the user typed line
  2553 00003DD7 488D3532D1FFFF      <1>     lea rsi, promptEVar ;Copy the PROMPT= prefix to searchspec
  2554 00003DDE 488D3DB4C6FFFF      <1>     lea rdi, searchSpec
  2555 00003DE5 B907000000          <1>     mov ecx, 7  ;Copy without <CR>
  2556 00003DEA F3A4                <1>     rep movsb
  2557 00003DEC 5E                  <1>     pop rsi ;Get back ptr to the user typed line
  2558 00003DED 31C9                <1>     xor ecx, ecx    ;Get char count
  2559                              <1> .cp:    ;Now copy the user string over
  2560 00003DEF AC                  <1>     lodsb
  2561 00003DF0 AA                  <1>     stosb 
  2562 00003DF1 3C0D                <1>     cmp al, CR
  2563 00003DF3 7404                <1>     je .cpOk
  2564 00003DF5 FFC1                <1>     inc ecx ;Increment count if non CR char copied over
  2565 00003DF7 EBF6                <1>     jmp short .cp
  2566                              <1> .cpOk:
  2567 00003DF9 488D3599C6FFFF      <1>     lea rsi, searchSpec ;Source the string from here
  2568 00003E00 EB09                <1>     jmp short .goSet    ;Got the CR-less count
  2569                              <1> .reset:
  2570                              <1> ;Delete the environment variable!
  2571 00003E02 488D3507D1FFFF      <1>     lea rsi, promptEVar 
  2572 00003E09 31C9                <1>     xor ecx, ecx    ;No chars to write to the envstring
  2573                              <1> .goSet:
  2574 00003E0B 81C107000000        <1>     add ecx, 7  ;Add the chars for the prompt= string too
  2575 00003E11 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl 
  2576 00003E18 FFC1                <1>     inc ecx     ;Include CR in copy
  2577 00003E1A 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2578 00003E21 57                  <1>     push rdi
  2579 00003E22 F3A4                <1>     rep movsb
  2580 00003E24 5E                  <1>     pop rsi
  2581 00003E25 E9F0FDFFFF          <1>     jmp set.altEp
  2582                              <1> 
  2583                              <1> echo:
  2584 00003E2A F6057BC2FFFFFF      <1>     test byte [arg1Flg], -1 ;If no argument, display if on or off
  2585 00003E31 752A                <1>     jnz .argGiven
  2586 00003E33 488D15C8CEFFFF      <1>     lea rdx, echoIs
  2587 00003E3A E82D060000          <1>     call printString
  2588 00003E3F 488D15A2CEFFFF      <1>     lea rdx, onMes
  2589 00003E46 488D0D95CEFFFF      <1>     lea rcx, offMes
  2590 00003E4D F6054AC2FFFFFF      <1>     test byte [echoFlg], -1
  2591 00003E54 480F44D1            <1>     cmovz rdx, rcx
  2592 00003E58 E90F060000          <1>     jmp printString
  2593                              <1> .argGiven:
  2594 00003E5D 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2595 00003E64 0FB60542C2FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the offset
  2596 00003E6B 4801C6              <1>     add rsi, rax
  2597 00003E6E AC                  <1>     lodsb   ;Get this char
  2598 00003E6F 48FFCE              <1>     dec rsi ;And go back to the start of the string
  2599 00003E72 E825080000          <1>     call ucChar
  2600 00003E77 3C4F                <1>     cmp al, "O" ;Was it an O? If not, direct copy
  2601 00003E79 755A                <1>     jne .directEcho
  2602 00003E7B 8A4601              <1>     mov al, byte [rsi + 1]  ;Get the next char
  2603 00003E7E E819080000          <1>     call ucChar
  2604 00003E83 3C4E                <1>     cmp al, "N" ;If its N, check its the last char on the string
  2605 00003E85 751B                <1>     jne .checkOff
  2606 00003E87 56                  <1>     push rsi
  2607 00003E88 4881C602000000      <1>     add rsi, 2  ;Go past on string
  2608 00003E8F E823080000          <1>     call skipDelimiters
  2609 00003E94 803E0D              <1>     cmp byte [rsi], CR
  2610 00003E97 5E                  <1>     pop rsi
  2611 00003E98 753B                <1>     jne .directEcho ;If its not, just echo the string
  2612 00003E9A C605FDC1FFFF01      <1>     mov byte [echoFlg], 1   ;Set to 1 if on
  2613                              <1>     return
    13                              <2> %%_ret:
    14 00003EA1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2614                              <1> .checkOff:
  2615 00003EA2 8A4601              <1>     mov al, byte [rsi + 1]  ;Get first char past O
  2616 00003EA5 E8F2070000          <1>     call ucChar
  2617 00003EAA 3C46                <1>     cmp al, "F" ;Is it an F?
  2618 00003EAC 7527                <1>     jne .directEcho ;No, just direct echo
  2619 00003EAE 8A4602              <1>     mov al, byte [rsi + 2]
  2620 00003EB1 E8E6070000          <1>     call ucChar
  2621 00003EB6 3C46                <1>     cmp al, "F"
  2622 00003EB8 751B                <1>     jne .directEcho
  2623 00003EBA 56                  <1>     push rsi
  2624 00003EBB 4881C603000000      <1>     add rsi, 3
  2625 00003EC2 E8F0070000          <1>     call skipDelimiters
  2626 00003EC7 803E0D              <1>     cmp byte [rsi], CR
  2627 00003ECA 5E                  <1>     pop rsi
  2628 00003ECB 7508                <1>     jne .directEcho
  2629 00003ECD C605CAC1FFFF00      <1>     mov byte [echoFlg], 0
  2630                              <1>     return
    13                              <2> %%_ret:
    14 00003ED4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2631                              <1> .directEcho: 
  2632 00003ED5 498D9081000000      <1>     lea rdx, qword [r8 + cmdLine]
  2633 00003EDC 4889F3              <1>     mov rbx, rsi    
  2634 00003EDF 4829D3              <1>     sub rbx, rdx
  2635 00003EE2 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get original char count
  2636 00003EEA 29D9                <1>     sub ecx, ebx    ;Get the remaining chars
  2637 00003EEC 0F826A050000        <1>     jc printCRLFecho    ;If something weird, echo nothing
  2638 00003EF2 4889F2              <1>     mov rdx, rsi
  2639 00003EF5 BB01000000          <1>     mov ebx, 1
  2640 00003EFA B800400000          <1>     mov eax, 4000h
  2641 00003EFF CD21                <1>     int 21h
  2642 00003F01 E95F050000          <1>     jmp printCRLF   ;Needs to be a proper CRLF to insert a CRLF at the end!
  2643                              <1> 
  2644                              <1> pauza:  ;Well... pause is an instruction in english 0:)
  2645                              <1> ;Thank you authors of MSDOS Encyclopedia for confusing an argument to this command
  2646                              <1> ; with just... the actual command tail being echoed with the command -_-
  2647 00003F06 F60591C1FFFFFF      <1>     test byte [echoFlg], -1
  2648 00003F0D 7528                <1>     jnz .echoTail
  2649                              <1> ;Since we havent echoed the command out, type the tail out manually
  2650 00003F0F 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
  2651 00003F16 E89C070000          <1>     call skipDelimiters ;Skip leading delims
  2652 00003F1B 4889F2              <1>     mov rdx, rsi
  2653 00003F1E 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get the count
  2654 00003F26 BB01000000          <1>     mov ebx, 1  ;Echo to STDOUT 
  2655 00003F2B B800400000          <1>     mov eax, 4000h  ;Write
  2656 00003F30 CD21                <1>     int 21h
  2657 00003F32 E82E050000          <1>     call printCRLF
  2658                              <1> .echoTail:
  2659 00003F37 488D153BCBFFFF      <1>     lea rdx, pauseMes
  2660 00003F3E E829050000          <1>     call printString
  2661 00003F43 B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Triggers ^C
  2662 00003F48 CD21                <1>     int 21h
  2663 00003F4A E816050000          <1>     call printCRLF
  2664                              <1>     return
    13                              <2> %%_ret:
    14 00003F4F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2665                              <1> remark:
  2666                              <1> ;If in a batch file, do nothing. Else, go through normal loop.
  2667 00003F50 F60545C1FFFF08      <1>     test byte [statFlg1], inBatch
  2668                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003F57 74(4F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2669                              <1> .go:
  2670 00003F59 5B                  <1>     pop rbx
  2671 00003F5A 5B                  <1>     pop rbx ;Realign the stack back :)
  2672 00003F5B E89ADBFFFF          <1>     call getSetMainState
  2673 00003F60 E901D2FFFF          <1>     jmp commandMain.inputGetAgain   ;Clean any redirs and get input
  2674                              <1> 
  2675                              <1> shift:
  2676                              <1> ;If not in batch, immediately return!
  2677 00003F65 F60530C1FFFF08      <1>     test byte [statFlg1], inBatch
  2678                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003F6C 74(4F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2679 00003F6E 488B1D3EC1FFFF      <1>     mov rbx, qword [bbPtr]  ;Get the batch block
  2680 00003F75 488D7B1B            <1>     lea rdi, qword [rbx + batBlockHdr.wArgs]
  2681 00003F79 488D7702            <1>     lea rsi, qword [rdi + 2]    ;Source from one word ahead
  2682 00003F7D B909000000          <1>     mov ecx, 9
  2683 00003F82 31C0                <1>     xor eax, eax
  2684                              <1> .lp:
  2685 00003F84 66AD                <1>     lodsw
  2686 00003F86 66AB                <1>     stosw
  2687 00003F88 3DFFFF0000          <1>     cmp eax, 0FFFFh   ;Once we xfer a -1 word, no more args on cmd line
  2688                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003F8D 74(4F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2689 00003F8F FFC9                <1>     dec ecx
  2690 00003F91 75F1                <1>     jnz .lp
  2691                              <1> ;Now we gotta scan for one more cmdline argument
  2692 00003F93 66C7432DFFFF        <1>     mov word [rbx + batBlockHdr.wArgs + 2*9], -1   ;Init a -1 at the end
  2693 00003F99 B00D                <1>     mov al, CR
  2694 00003F9B 31C9                <1>     xor ecx, ecx
  2695 00003F9D FFC9                <1>     dec ecx ;
  2696 00003F9F 488D3C03            <1>     lea rdi, qword [rbx + rax]  ;rax has the last offset
  2697 00003FA3 F2AE                <1>     repne scasb ;Find CR which terminated old last argument, go past it
  2698 00003FA5 803F00              <1>     cmp byte [rdi], 0   ;If this is the terminating null, leave as -1
  2699                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003FA8 74(4F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2700 00003FAA 4829DF              <1>     sub rdi, rbx    ;Get the offset from batBlockHdr
  2701 00003FAD 66897B2D            <1>     mov word [rbx + batBlockHdr.wArgs + 2*9], di    ;Store the difference
  2702                              <1>     return
    13                              <2> %%_ret:
    14 00003FB1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2703                              <1>     
  2704                              <1> goto:
  2705                              <1> ;If not in batch, immediately return!
  2706 00003FB2 F605E3C0FFFF08      <1>     test byte [statFlg1], inBatch
  2707                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003FB9 74(B1)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2708 00003FBB 488B2DF1C0FFFF      <1>     mov rbp, qword [bbPtr]
  2709 00003FC2 4885ED              <1>     test rbp, rbp
  2710                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003FC5 74(B1)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2711                              <1> ;Start by copying the command line label to fcb1
  2712 00003FC7 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2713 00003FCE 498D785D            <1>     lea rdi, qword [r8 + fcb1 + fcb.filename]  ;Use fcb1 for the command line
  2714 00003FD2 E8E0060000          <1>     call skipDelimiters     ;Go to the first argument on cmdline
  2715 00003FD7 B908000000          <1>     mov ecx, 8
  2716 00003FDC 803E3A              <1>     cmp byte [rsi], ":" ;If we the first char of the cmdline lbl is :, skip
  2717 00003FDF 7503                <1>     jne .startCopy
  2718 00003FE1 48FFC6              <1>     inc rsi
  2719                              <1> .startCopy:
  2720 00003FE4 AC                  <1>     lodsb
  2721 00003FE5 3C20                <1>     cmp al, SPC         ;Skip any spaces
  2722 00003FE7 74FB                <1>     je .startCopy       
  2723 00003FE9 3C0D                <1>     cmp al, CR          ;If CR, exit copy
  2724 00003FEB 740C                <1>     je .endCopy
  2725 00003FED E8D3060000          <1>     call isALdelimiter  ;If delimiter char, exit copy
  2726 00003FF2 7405                <1>     jz .endCopy
  2727 00003FF4 AA                  <1>     stosb           
  2728 00003FF5 FFC9                <1>     dec ecx             ;Decrement counter
  2729 00003FF7 75EB                <1>     jnz .startCopy
  2730                              <1> .endCopy:
  2731                              <1> ;Now search the batch file for the label.
  2732 00003FF9 F7D9                <1>     neg ecx
  2733 00003FFB 81C108000000        <1>     add ecx, 8      ;Get the number of chars copied into ecx
  2734 00004001 498D505C            <1>     lea rdx, qword [r8 + fcb1]
  2735 00004005 880A                <1>     mov byte [rdx + fcb.driveNum], cl    ;Store the count in drivenum
  2736 00004007 E8CB000000          <1>     call .ucChars   ;Now we UC the chars in the string
  2737 0000400C 48C7451300000000    <1>     mov qword [rbp + batBlockHdr.qBatOff], 0    ;Reset the file ptr
  2738 00004014 E8B0DFFFFF          <1>     call batOpen    ;Open the batch file. Handle in ebx.
  2739                              <1> ;File opened from the start. Now start byte by byte read.
  2740                              <1> .notLabelLp:
  2741 00004019 F6057CC0FFFF10      <1>     test byte [statFlg1], batchEOF  
  2742 00004020 0F859F000000        <1>     jnz .eof    ;If we hit an ^Z while processing file, don't loop again
  2743 00004026 498D506D            <1>     lea rdx, [r8 + fcb2 + fcb.filename]  ;fcb2 for the bat search buffer
  2744                              <1> .findLbl:
  2745                              <1> ;Keep searching for a label
  2746 0000402A E8CEDFFFFF          <1>     call batReadChar
  2747 0000402F 0F8490000000        <1>     jz .eof
  2748 00004035 48FF4513            <1>     inc qword [rbp + batBlockHdr.qBatOff] ;Inc the fp for each char read
  2749 00004039 803A3A              <1>     cmp byte [rdx], ":"
  2750 0000403C 75EC                <1>     jne .findLbl 
  2751                              <1> ;Here we found a candidate label. Take 8 chars w/o spaces and initial :
  2752 0000403E 31C9                <1>     xor ecx, ecx
  2753                              <1> .loadRead:
  2754 00004040 E8B8DFFFFF          <1>     call batReadChar
  2755 00004045 744D                <1>     jz .lblDone
  2756 00004047 8A02                <1>     mov al, byte [rdx]  ;Get the char read into al
  2757 00004049 48FF4513            <1>     inc qword [rbp + batBlockHdr.qBatOff] ;Inc the fp for each char read
  2758 0000404D 3C0D                <1>     cmp al, CR
  2759 0000404F 7433                <1>     je .lblDoneCR
  2760 00004051 3C0A                <1>     cmp al, LF
  2761 00004053 743F                <1>     je .lblDone
  2762 00004055 3C20                <1>     cmp al, SPC
  2763 00004057 74E7                <1>     je .loadRead
  2764 00004059 E867060000          <1>     call isALdelimiter
  2765 0000405E 740D                <1>     jz .pullEol ;If we have a delimiter char, pull it
  2766 00004060 48FFC2              <1>     inc rdx ;Inc the storage pointer
  2767 00004063 FFC1                <1>     inc ecx ;Inc the count
  2768 00004065 81F908000000        <1>     cmp ecx, 8  ;Once we read 8 chars, readthru to end of line
  2769 0000406B 75D3                <1>     jne .loadRead
  2770                              <1> .pullEol:
  2771 0000406D E88BDFFFFF          <1>     call batReadChar
  2772 00004072 7420                <1>     jz .lblDone
  2773 00004074 48FF4513            <1>     inc qword [rbp + batBlockHdr.qBatOff] ;Inc the fp for each char read
  2774 00004078 803A0D              <1>     cmp byte [rdx], CR
  2775 0000407B 7407                <1>     je .lblDoneCR
  2776 0000407D 803A0A              <1>     cmp byte [rdx], LF
  2777 00004080 7412                <1>     je .lblDone
  2778 00004082 EBE9                <1>     jmp short .pullEol
  2779                              <1> .lblDoneCR:
  2780                              <1> ;Read a CR, check if the next char is an LF and scan past it.
  2781 00004084 E874DFFFFF          <1>     call batReadChar
  2782 00004089 7409                <1>     jz .lblDone
  2783 0000408B 803A0A              <1>     cmp byte [rdx], LF
  2784 0000408E 7504                <1>     jne .lblDone    ;No LF
  2785                              <1> ;Else include the LF in the count to go past
  2786 00004090 48FF4513            <1>     inc qword [rbp + batBlockHdr.qBatOff] 
  2787                              <1> .lblDone:
  2788                              <1> ;Check what we have to see if it is possible to form a label
  2789 00004094 498D506C            <1>     lea rdx, qword [r8 + fcb2]
  2790 00004098 880A                <1>     mov byte [rdx + fcb.driveNum], cl  ;Store the len in the drive letter
  2791 0000409A E838000000          <1>     call .ucChars    ;Now we UC the chars in the fcb pointed to by rdx
  2792                              <1> ;Now compare the strings (trailing space padding)
  2793 0000409F 488D32              <1>     lea rsi, qword [rdx]
  2794 000040A2 AC                  <1>     lodsb   ;Get the count into al and move rsi to filename
  2795 000040A3 0FB6C8              <1>     movzx ecx, al   ;Move the count into ecx
  2796 000040A6 498D785D            <1>     lea rdi, qword [r8 + fcb1 + fcb.filename]
  2797 000040AA 384FFF              <1>     cmp byte [rdi - 1], cl  ;If the counts are not equal, skip the cmp
  2798 000040AD 0F8566FFFFFF        <1>     jne .notLabelLp
  2799 000040B3 F3A6                <1>     repe cmpsb  ;Now do a string cmp
  2800 000040B5 0F855EFFFFFF        <1>     jne .notLabelLp
  2801                              <1>     ;Here if the label is found. Bat FP points to the next line to read.
  2802 000040BB E835DFFFFF          <1>     call batClose   ;Close the handle
  2803 000040C0 E994FEFFFF          <1>     jmp remark.go   ;Now behave like rem to get the next line!
  2804                              <1> .eof:
  2805                              <1> ;Print label not found, end batch mode and return
  2806 000040C5 488D1590CBFFFF      <1>     lea rdx, badLbl
  2807 000040CC E89B030000          <1>     call printString
  2808 000040D1 E8B5DCFFFF          <1>     call batFinish  ;Kill the batch processor
  2809                              <1>     return
    13                              <2> %%_ret:
    14 000040D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2810                              <1> 
  2811                              <1> .ucChars:
  2812                              <1> ;Input: rdx -> Buffer where the first byte gives number of chars to UC
  2813                              <1> ;Output: The rdx[0] bytes from rdx[1] are UC'd
  2814 000040D7 50                  <1>     push rax
  2815 000040D8 51                  <1>     push rcx
  2816 000040D9 56                  <1>     push rsi
  2817                              <1> 
  2818 000040DA 488D7201            <1>     lea rsi, qword [rdx + 1]    ;Start of string to uppercase
  2819 000040DE 0FB60A              <1>     movzx ecx, byte [rdx]       ;Get byte count to uppercase
  2820                              <1> .ucclp:
  2821 000040E1 AC                  <1>     lodsb   ;Get the char
  2822 000040E2 E8B5050000          <1>     call ucChar
  2823 000040E7 8846FF              <1>     mov byte [rsi - 1], al  ;Replace the char with it's UC'd version
  2824 000040EA FFC9                <1>     dec ecx     
  2825 000040EC 75F3                <1>     jnz .ucclp  ;Go again if we havent exhausted all chars
  2826                              <1>     
  2827 000040EE 5E                  <1>     pop rsi
  2828 000040EF 59                  <1>     pop rcx
  2829 000040F0 58                  <1>     pop rax
  2830                              <1>     return
    13                              <2> %%_ret:
    14 000040F1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2831                              <1> 
  2832                              <1> ifCmd:
  2833                              <1> ;Use the fact we parse the first two words into the FCBs to check 
  2834                              <1> ; for NOT and then the condition word
  2835 000040F2 C60515C0FFFF00      <1>     mov byte [ifFlg], ifReset ;Reset not state
  2836 000040F9 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2837 00004100 E81C010000          <1>     call .getNextArg    ;Skip leading delimiters
  2838 00004105 4889F3              <1>     mov rbx, rsi        ;Save the possible start of string ptr (if string)
  2839 00004108 E8F5000000          <1>     call .makeAsciizAdv ;Move rsi to next word, rdi -> ASCIZ string
  2840 0000410D 56                  <1>     push rsi    ;Save ptr to the next word on stack
  2841 0000410E 488D356FCCFFFF      <1>     lea rsi, notString
  2842 00004115 E817010000          <1>     call .strcmp
  2843 0000411A 5E                  <1>     pop rsi
  2844 0000411B 750F                <1>     jne .chkErlvl
  2845 0000411D 800DEABFFFFF01      <1>     or byte [ifFlg], ifNot  ;Set not on
  2846 00004124 4889F3              <1>     mov rbx, rsi    ;Save the start of string ptr (if string)
  2847 00004127 E8D6000000          <1>     call .makeAsciizAdv     ;Goto next word
  2848                              <1> .chkErlvl:
  2849 0000412C 56                  <1>     push rsi    ;rsi points to the argument
  2850 0000412D 488D3554CCFFFF      <1>     lea rsi, errlvlStr
  2851 00004134 E8F8000000          <1>     call .strcmp
  2852 00004139 5E                  <1>     pop rsi
  2853 0000413A 0F849A000000        <1>     je .errorLvl
  2854 00004140 56                  <1>     push rsi
  2855 00004141 488D354BCCFFFF      <1>     lea rsi, existStr
  2856 00004148 E8E4000000          <1>     call .strcmp
  2857 0000414D 5E                  <1>     pop rsi
  2858 0000414E 7472                <1>     je .exist
  2859                              <1> ;Here we check condition string1==string2
  2860                              <1> ;rsi points to the start of the string to check condition of
  2861 00004150 4889DE              <1>     mov rsi, rbx    ;Get back the start of the string
  2862 00004153 4889F7              <1>     mov rdi, rsi    ;Move rdi to the start of the string
  2863 00004156 31C9                <1>     xor ecx, ecx    ;String length cnt
  2864                              <1> .scCheck:
  2865 00004158 AC                  <1>     lodsb
  2866 00004159 3C3D                <1>     cmp al, "="
  2867 0000415B 7417                <1>     je .scEqFnd
  2868 0000415D E863050000          <1>     call isALdelimiter
  2869 00004162 0F84EBDEFFFF        <1>     je badSyntaxError
  2870 00004168 3C0D                <1>     cmp al, CR
  2871 0000416A 0F84E3DEFFFF        <1>     je badSyntaxError
  2872 00004170 FFC1                <1>     inc ecx         ;One more char to count
  2873 00004172 EBE4                <1>     jmp short .scCheck
  2874                              <1> .scEqFnd:
  2875 00004174 AC                  <1>     lodsb   ;Move rsi to the char past this equal sign
  2876 00004175 3C3D                <1>     cmp al, "=" ;Is the second char an equal too?
  2877 00004177 0F85D6DEFFFF        <1>     jne badSyntaxError
  2878 0000417D F3A6                <1>     repe cmpsb  ;Compare the strings, leave rsi past string 2
  2879 0000417F 7507                <1>     jnz .cndMiss
  2880                              <1> .cndHit:
  2881 00004181 800D86BFFFFF02      <1>     or byte [ifFlg], ifCond ;The default condition was hit
  2882                              <1> .cndMiss:
  2883 00004188 0FB6057FBFFFFF      <1>     movzx eax, byte [ifFlg]
  2884 0000418F 89C3                <1>     mov ebx, eax
  2885 00004191 D1EB                <1>     shr ebx, 1      ;Get bit 1 to bit 0
  2886 00004193 2501000000          <1>     and eax, 1      ;Isolate bit 0
  2887 00004198 31D8                <1>     xor eax, ebx    ;xor the condition hit bit with not. If 1, execute!
  2888                              <1>     retz            ;Else return silently!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000419A 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000419C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2889                              <1> ;Now rsi points to delims before the command. 
  2890                              <1> ; Skip the delims and copy the argument!
  2891 0000419D E815050000          <1>     call skipDelimiters    ;Now go to the next argument (No need for CR check)
  2892 000041A2 488D3DC3BFFFFF      <1>     lea rdi, qword [inBuffer + 2]
  2893 000041A9 31C9                <1>     xor ecx, ecx
  2894                              <1> .cpExitLp:
  2895 000041AB AC                  <1>     lodsb
  2896 000041AC AA                  <1>     stosb
  2897 000041AD FFC1                <1>     inc ecx ;Add a new char to the count
  2898 000041AF 3C0D                <1>     cmp al, CR
  2899 000041B1 75F8                <1>     jne .cpExitLp
  2900 000041B3 FFC9                <1>     dec ecx ;Drop CR from count
  2901 000041B5 880DB0BFFFFF        <1>     mov byte [inBuffer + 1], cl
  2902 000041BB 58                  <1>     pop rax ;Balance the stack
  2903 000041BC 58                  <1>     pop rax
  2904 000041BD E9CECFFFFF          <1>     jmp commandMain.batProceed    ;And execute the command now!
  2905                              <1> .exist:
  2906                              <1> ;Here we do the check for file existance
  2907 000041C2 E83B000000          <1>     call .makeAsciizAdv
  2908 000041C7 B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
  2909 000041CC 4889FA              <1>     mov rdx, rdi    ;Move the ptr to rdx
  2910 000041CF B8004E0000          <1>     mov eax, 4E00h  ;Find first
  2911 000041D4 CD21                <1>     int 21h
  2912 000041D6 73A9                <1>     jnc .cndHit
  2913 000041D8 EBAE                <1>     jmp short .cndMiss
  2914                              <1> .errorLvl:
  2915                              <1> ;Here we do the check for error level
  2916 000041DA E823000000          <1>     call .makeAsciizAdv
  2917 000041DF 4887FE              <1>     xchg rdi, rsi
  2918 000041E2 E889070000          <1>     call getNum     ;Get value in eax
  2919 000041E7 3DFF000000          <1>     cmp eax, 255    ;Value can't be bigger than 255
  2920 000041EC 0F8761DEFFFF        <1>     ja badSyntaxError
  2921 000041F2 4887FE              <1>     xchg rdi, rsi
  2922 000041F5 3A0512BEFFFF        <1>     cmp al, byte [returnCode]
  2923 000041FB 7484                <1>     je .cndHit
  2924 000041FD E986FFFFFF          <1>     jmp .cndMiss
  2925                              <1> ;------------------------
  2926                              <1> ;      If routines
  2927                              <1> ;------------------------
  2928                              <1> .makeAsciizAdv:
  2929                              <1> ;Input: rsi -> Non delimiter char string
  2930                              <1> ;Output: rsi -> Next substring past delimiters
  2931                              <1> ;       rdi -> ASCIIZ version of the string we just passed
  2932 00004202 58                  <1>     pop rax ;Align the stack so if we hit a CR its .getNextArg doesnt crash
  2933 00004203 E807000000          <1>     call .makeArgAsciz      ;Get in rdi -> ASCIZ argument. rsi -> terminator
  2934 00004208 E814000000          <1>     call .getNextArg        ;rsi -> Command
  2935 0000420D FFE0                <1>     jmp rax                 ;Go to this address now
  2936                              <1> 
  2937                              <1> .makeArgAsciz:
  2938                              <1> ;Creates a null terminated string in the search spec.
  2939                              <1> ;Input: rsi -> String to copy with null terminator
  2940                              <1> ;Ouput: rsi -> Terminator
  2941                              <1> ;       rdi -> Search Spec with filled ASCIZ string
  2942 0000420F 50                  <1>     push rax    ;Preserve rax
  2943 00004210 E82E060000          <1>     call copyArgumentToSearchSpec
  2944 00004215 58                  <1>     pop rax
  2945 00004216 488D3D7CC2FFFF      <1>     lea rdi, searchSpec
  2946 0000421D 48FFCE              <1>     dec rsi     ;Point back to the delimiter char
  2947                              <1>     return
    13                              <2> %%_ret:
    14 00004220 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2948                              <1> 
  2949                              <1> .getNextArg:
  2950                              <1> ;Moves rsi to the first next element. If a CR is encountered, it exits
  2951                              <1> ;Input: rsi -> String
  2952                              <1> ;Output: rsi -> First non delimiter char after initial position
  2953 00004221 E891040000          <1>     call skipDelimiters     ;Preserves rax
  2954 00004226 803E0D              <1>     cmp byte [rsi], CR
  2955                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004229 75(20)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2956 0000422B 58                  <1>     pop rax ;Pop the return address off the stack
  2957 0000422C E922DEFFFF          <1>     jmp badSyntaxError  ;And jump error out
  2958                              <1> 
  2959                              <1> .strcmp:
  2960 00004231 B81E120000          <1>     mov eax, 121Eh
  2961 00004236 CD2F                <1>     int 2fh
  2962                              <1>     return
    13                              <2> %%_ret:
    14 00004238 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2963                              <1> 
  2964                              <1> 
  2965                              <1> forCmd:
  2966                              <1>     return
    13                              <2> %%_ret:
    14 00004239 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printDate:
     4                              <1> ;Input: eax = Packed Date
     5                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
     6                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
     7                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
     8                              <1> ;       ebx = 0 => Print two digit year
     9                              <1> ;       ebx = 1 => Print four digit year
    10 0000423A 53                  <1>     push rbx
    11 0000423B 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    12 0000423D 803DEFBDFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    13 00004244 7240                <1>     jb .usDate
    14 00004246 777C                <1>     ja .jpnDate
    15                              <1> ;European: DD/MM/YY
    16 00004248 251F000000          <1>     and eax, 1Fh    ;Save day bits
    17 0000424D E8B0000000          <1>     call .printFirst
    18 00004252 8A15E6BDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    19 00004258 B402                <1>     mov ah, 02h
    20 0000425A CD21                <1>     int 21h
    21                              <1> 
    22 0000425C 89C8                <1>     mov eax, ecx
    23 0000425E 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    24 00004263 C1E805              <1>     shr eax, 5
    25 00004266 E8B3000000          <1>     call .printSecond
    26                              <1> 
    27 0000426B 8A15CDBDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    28 00004271 B402                <1>     mov ah, 02h
    29 00004273 CD21                <1>     int 21h
    30                              <1> 
    31 00004275 89C8                <1>     mov eax, ecx
    32 00004277 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    33 0000427C C1E809              <1>     shr eax, 9
    34 0000427F 5B                  <1>     pop rbx ;Get the year signature back
    35 00004280 E8A9000000          <1>     call .printYear
    36                              <1>     return
    13                              <2> %%_ret:
    14 00004285 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                              <1> .usDate:
    38                              <1> ;US: MM/DD/YY
    39 00004286 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    40 0000428B C1E805              <1>     shr eax, 5
    41 0000428E E86F000000          <1>     call .printFirst
    42                              <1> 
    43 00004293 8A15A5BDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    44 00004299 B402                <1>     mov ah, 02h
    45 0000429B CD21                <1>     int 21h
    46                              <1> 
    47 0000429D 89C8                <1>     mov eax, ecx
    48 0000429F 251F000000          <1>     and eax, 1Fh    ;Save day bits
    49 000042A4 E875000000          <1>     call .printSecond
    50                              <1> 
    51 000042A9 8A158FBDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 000042AF B402                <1>     mov ah, 02h
    53 000042B1 CD21                <1>     int 21h
    54                              <1> 
    55 000042B3 89C8                <1>     mov eax, ecx
    56 000042B5 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 000042BA C1E809              <1>     shr eax, 9
    58 000042BD 5B                  <1>     pop rbx ;Get the year signature back
    59 000042BE E86B000000          <1>     call .printYear
    60                              <1>     return
    13                              <2> %%_ret:
    14 000042C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> .jpnDate:
    62                              <1> ;Japan: YY/MM/DD
    63 000042C4 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 000042C9 C1E809              <1>     shr eax, 9
    65 000042CC 5B                  <1>     pop rbx ;Get the year signature back
    66 000042CD E85C000000          <1>     call .printYear
    67                              <1> 
    68 000042D2 8A1566BDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    69 000042D8 B402                <1>     mov ah, 02h
    70 000042DA CD21                <1>     int 21h
    71                              <1> 
    72 000042DC 89C8                <1>     mov eax, ecx
    73 000042DE 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    74 000042E3 C1E805              <1>     shr eax, 5
    75 000042E6 E833000000          <1>     call .printSecond
    76                              <1> 
    77 000042EB 8A154DBDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    78 000042F1 B402                <1>     mov ah, 02h
    79 000042F3 CD21                <1>     int 21h
    80                              <1> 
    81 000042F5 89C8                <1>     mov eax, ecx
    82 000042F7 251F000000          <1>     and eax, 1Fh    ;Save day bits
    83 000042FC E81D000000          <1>     call .printSecond
    84                              <1>     return
    13                              <2> %%_ret:
    14 00004301 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> ;Each of these require eax setup correctly
    87                              <1> .printFirst:
    88 00004302 51                  <1>     push rcx
    89 00004303 E835060000          <1>     call getDecimalWord
    90 00004308 84ED                <1>     test ch, ch ;Do we have an upper digit?
    91 0000430A 7504                <1>     jnz .skipSpace
    92 0000430C 88CD                <1>     mov ch, cl
    93 0000430E B120                <1>     mov cl, " "
    94                              <1> .skipSpace:
    95 00004310 88CA                <1>     mov dl, cl
    96 00004312 B402                <1>     mov ah, 02h
    97 00004314 CD21                <1>     int 21h
    98 00004316 88EA                <1>     mov dl, ch
    99 00004318 B402                <1>     mov ah, 02h
   100 0000431A CD21                <1>     int 21h
   101 0000431C 59                  <1>     pop rcx
   102                              <1>     return
    13                              <2> %%_ret:
    14 0000431D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .printSecond:
   104 0000431E 51                  <1>     push rcx
   105 0000431F E819060000          <1>     call getDecimalWord
   106 00004324 84ED                <1>     test ch, ch ;Do we have an upper digit?
   107 00004326 75E8                <1>     jnz .skipSpace
   108 00004328 88CD                <1>     mov ch, cl
   109 0000432A B130                <1>     mov cl, "0"
   110 0000432C EBE2                <1>     jmp short .skipSpace
   111                              <1> .printYear:
   112 0000432E 05BC070000          <1>     add eax, 1980
   113 00004333 51                  <1>     push rcx
   114 00004334 53                  <1>     push rbx
   115 00004335 E803060000          <1>     call getDecimalWord ;Get unpacked in rcx
   116 0000433A 5B                  <1>     pop rbx
   117 0000433B 84DB                <1>     test bl, bl
   118 0000433D 740C                <1>     jz .twoDigitYear
   119 0000433F 88CA                <1>     mov dl, cl  ;Print the first digit
   120 00004341 B402                <1>     mov ah, 02h
   121 00004343 CD21                <1>     int 21h
   122 00004345 88EA                <1>     mov dl, ch  ;Print the second digit
   123 00004347 B402                <1>     mov ah, 02h
   124 00004349 CD21                <1>     int 21h
   125                              <1> .twoDigitYear:
   126 0000434B C1E910              <1>     shr ecx, 10h    ;Get high word low
   127 0000434E 88CA                <1>     mov dl, cl  ;Print the upper digit
   128 00004350 B402                <1>     mov ah, 02h
   129 00004352 CD21                <1>     int 21h
   130 00004354 88EA                <1>     mov dl, ch  ;Print the lower digit
   131 00004356 B402                <1>     mov ah, 02h
   132 00004358 CD21                <1>     int 21h
   133 0000435A 59                  <1>     pop rcx
   134                              <1>     return
    13                              <2> %%_ret:
    14 0000435B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> 
   137                              <1> printTime:
   138                              <1> ;Input: eax = Packed Time
   139                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   140                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   141 0000435C 89C1                <1>     mov ecx, eax
   142 0000435E 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   143 00004363 C1E80B              <1>     shr eax, 11
   144 00004366 803DD7BCFFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   145 0000436D 750B                <1>     jne .ampm
   146 0000436F E85A000000          <1>     call .printHours
   147 00004374 E831000000          <1>     call .printMinutes
   148                              <1>     return
    13                              <2> %%_ret:
    14 00004379 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> .ampm:
   150 0000437A 3D0C000000          <1>     cmp eax, 12
   151 0000437F 7713                <1>     ja .pm
   152 00004381 7416                <1>     je .pm2
   153 00004383 E846000000          <1>     call .printHours
   154 00004388 E81D000000          <1>     call .printMinutes
   155 0000438D B261                <1>     mov dl, "a"
   156 0000438F B402                <1>     mov ah, 02h
   157 00004391 CD21                <1>     int 21h
   158                              <1>     return
    13                              <2> %%_ret:
    14 00004393 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> .pm:
   160 00004394 2D0C000000          <1>     sub eax, 12
   161                              <1> .pm2:
   162 00004399 E830000000          <1>     call .printHours
   163 0000439E E807000000          <1>     call .printMinutes
   164 000043A3 B270                <1>     mov dl, "p"
   165 000043A5 B402                <1>     mov ah, 02h
   166 000043A7 CD21                <1>     int 21h
   167                              <1>     return
    13                              <2> %%_ret:
    14 000043A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   168                              <1> .printMinutes:
   169 000043AA 8A1590BCFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   170 000043B0 B402                <1>     mov ah, 02h
   171 000043B2 CD21                <1>     int 21h
   172                              <1> 
   173 000043B4 89C8                <1>     mov eax, ecx
   174 000043B6 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   175 000043BB C1E805              <1>     shr eax, 5
   176                              <1> .printMinutesAlt:
   177 000043BE 51                  <1>     push rcx
   178 000043BF E879050000          <1>     call getDecimalWord
   179 000043C4 84ED                <1>     test ch, ch ;Do we have an upper digit?
   180 000043C6 7514                <1>     jnz .skipSpace
   181 000043C8 88CD                <1>     mov ch, cl
   182 000043CA B130                <1>     mov cl, "0"
   183 000043CC EB0E                <1>     jmp short .skipSpace
   184                              <1> .printHours:
   185 000043CE 51                  <1>     push rcx
   186 000043CF E869050000          <1>     call getDecimalWord
   187 000043D4 84ED                <1>     test ch, ch ;Do we have an upper digit?
   188 000043D6 7504                <1>     jnz .skipSpace
   189 000043D8 88CD                <1>     mov ch, cl
   190 000043DA B120                <1>     mov cl, " "
   191                              <1> .skipSpace:
   192 000043DC 88CA                <1>     mov dl, cl
   193 000043DE B402                <1>     mov ah, 02h
   194 000043E0 CD21                <1>     int 21h
   195 000043E2 88EA                <1>     mov dl, ch
   196 000043E4 B402                <1>     mov ah, 02h
   197 000043E6 CD21                <1>     int 21h
   198 000043E8 59                  <1>     pop rcx
   199                              <1>     return
    13                              <2> %%_ret:
    14 000043E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printPrompt:
   202 000043EA F605ADBCFFFFFF      <1>     test byte [echoFlg], -1 ;If echo off, no prompt!
   203                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000043F1 74(E9)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 000043F3 488D3D16CBFFFF      <1>     lea rdi, promptEVar   ;Find the prompt var
   205 000043FA E878060000          <1>     call searchForEnvVar
   206 000043FF 730B                <1>     jnc .validPrompt
   207                              <1>     ;Here we print the default prompt
   208 00004401 E8DB000000          <1>     call putCWDInPrompt
   209 00004406 E8A7000000          <1>     call putGTinPrompt
   210                              <1>     return
    13                              <2> %%_ret:
    14 0000440B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> .validPrompt:
   212                              <1> ;rsi points to the prompt
   213 0000440C 4881C607000000      <1>     add rsi, 7  ;Go past the prompt= string
   214                              <1> .promptLp:
   215 00004413 AC                  <1>     lodsb   ;Get the char
   216 00004414 84C0                <1>     test al, al
   217                              <1>     retz    ;Return when al is 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004416 74(0B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   218 00004418 3C24                <1>     cmp al, "$"
   219 0000441A 7409                <1>     je .escapeChar
   220 0000441C 88C2                <1>     mov dl, al
   221 0000441E E8B9000000          <1>     call outChar    ;Prints the char in dl
   222 00004423 EBEE                <1>     jmp short .promptLp
   223                              <1> .escapeChar:
   224 00004425 AC                  <1>     lodsb       ;Get the next char now that we are escaping
   225 00004426 E871020000          <1>     call ucChar ;Uppercase this char in al
   226 0000442B 488D1D5BC4FFFF      <1>     lea rbx, pTbl
   227 00004432 B90D000000          <1>     mov ecx, pTblL / 3  ;3 bytes per entry
   228                              <1> .escapeLp:
   229 00004437 3803                <1>     cmp byte [rbx], al  ;Are we at the right entry?
   230 00004439 740D                <1>     je .escapeFnd
   231 0000443B 4881C303000000      <1>     add rbx, 3  ;Go to next entry
   232 00004442 FFC9                <1>     dec ecx
   233 00004444 75F1                <1>     jnz .escapeLp
   234 00004446 EBCB                <1>     jmp short .promptLp  ;Output nothing if invalid
   235                              <1> .escapeFnd:
   236 00004448 488D053EC4FFFF      <1>     lea rax, pTbl              ;Get the table addr
   237 0000444F 0FB75B01            <1>     movzx ebx, word [rbx + 1]   ;Get the word offset from the table
   238 00004453 4801D8              <1>     add rax, rbx                ;Add these
   239 00004456 56                  <1>     push rsi    ;Ensure rsi remains unchanged
   240 00004457 FFD0                <1>     call rax    ;Call indirectly the function to output the chars
   241 00004459 5E                  <1>     pop rsi
   242 0000445A EBB7                <1>     jmp short .promptLp
   243                              <1> 
   244                              <1> printCRLFecho:
   245 0000445C F6053BBCFFFFFF      <1>     test byte [echoFlg], -1
   246                              <1>     retz    ;If Echo off, don't do a CRLF!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004463 74(0B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   247                              <1> printCRLF:
   248 00004465 488D1548C4FFFF      <1>     lea rdx, crlf
   249                              <1> printString:
   250 0000446C B800090000          <1>     mov eax, 0900h  ;Print string
   251 00004471 CD21                <1>     int 21h
   252                              <1>     return
    13                              <2> %%_ret:
    14 00004473 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   253                              <1> 
   254                              <1> putVersionInPrompt:
   255 00004474 488D15E7C6FFFF      <1>     lea rdx, dosVer
   256 0000447B B409                <1>     mov ah, 09h ;Print String
   257 0000447D CD21                <1>     int 21h
   258 0000447F B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   259 00004481 CD21                <1>     int 21h
   260 00004483 50                  <1>     push rax    ;Save minor version
   261 00004484 E896010000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   262 00004489 E8AE010000          <1>     call printPackedBCD ;Print al
   263 0000448E B22E                <1>     mov dl, "."
   264 00004490 B402                <1>     mov ah, 02h
   265 00004492 CD21                <1>     int 21h
   266 00004494 58                  <1>     pop rax
   267 00004495 88E0                <1>     mov al, ah  ;Get the minor version low
   268 00004497 E883010000          <1>     call hexToBCD
   269 0000449C E89B010000          <1>     call printPackedBCD
   270                              <1>     return
    13                              <2> %%_ret:
    14 000044A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   271                              <1> putEscInPrompt:
   272 000044A2 B21B                <1>     mov dl, ESC
   273 000044A4 EB36                <1>     jmp short outChar
   274                              <1> 
   275                              <1> putMoneyInPrompt:
   276 000044A6 B224                <1>     mov dl, "$"
   277 000044A8 EB32                <1>     jmp short outChar
   278                              <1> 
   279                              <1> putEquInPrompt:
   280 000044AA B23D                <1>     mov dl, "="
   281 000044AC EB2E                <1>     jmp short outChar
   282                              <1> 
   283                              <1> putPipeInPrompt:
   284 000044AE B27C                <1>     mov dl, "|"
   285 000044B0 EB2A                <1>     jmp short outChar
   286                              <1> 
   287                              <1> putGTinPrompt:
   288 000044B2 B23E                <1>     mov dl, ">"
   289 000044B4 EB26                <1>     jmp short outChar
   290                              <1> 
   291                              <1> putLTinPrompt:
   292 000044B6 B23C                <1>     mov dl, "<"
   293 000044B8 EB22                <1>     jmp short outChar
   294                              <1> 
   295                              <1> putBSPinPrompt:
   296 000044BA 488D159CC8FFFF      <1>     lea rdx, backSpace
   297 000044C1 B903000000          <1>     mov ecx, 3
   298 000044C6 BB01000000          <1>     mov ebx, 1
   299 000044CB B800400000          <1>     mov eax, 4000h  ;Output the backspace!
   300 000044D0 CD21                <1>     int 21h
   301                              <1>     return
    13                              <2> %%_ret:
    14 000044D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   302                              <1> 
   303                              <1> putDriveInPrompt:
   304 000044D3 E89C010000          <1>     call getCurrentDrive
   305 000044D8 0441                <1>     add al, "A" ;Convert to letter
   306 000044DA 88C2                <1>     mov dl, al
   307                              <1> outChar:
   308 000044DC B402                <1>     mov ah, 02h ;Echo to STDOUT
   309 000044DE CD21                <1>     int 21h
   310                              <1>     return
    13                              <2> %%_ret:
    14 000044E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   311                              <1> putCWDInPrompt:
   312 000044E1 E88E010000          <1>     call getCurrentDrive
   313 000044E6 3805B1BBFFFF        <1>     cmp byte [failDrv], al  ;If these are equal, badDrive
   314 000044EC C605AABBFFFFFF      <1>     mov byte [failDrv], -1  ;Reset on read
   315 000044F3 7443                <1>     je .badDrive 
   316 000044F5 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   317 000044F7 FEC2                <1>     inc dl
   318 000044F9 0441                <1>     add al, "A" ;Convert to letter
   319 000044FB B43A                <1>     mov ah, ":"
   320 000044FD 488D3D55BBFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   321 00004504 66AB                <1>     stosw   ;Store X:, rdi+=2
   322 00004506 8A0525BBFFFF        <1>     mov al, byte [pathSep]
   323 0000450C AA                  <1>     stosb   ;Store pathSep, inc rdi
   324 0000450D B800470000          <1>     mov eax, 4700h  ;Get Current Working Directory
   325 00004512 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   326 00004515 CD21                <1>     int 21h
   327 00004517 721F                <1>     jc .badDrive
   328 00004519 E874010000          <1>     call strlen
   329 0000451E 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   330                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   331 00004524 B800400000          <1>     mov eax, 4000h ;Write to handle
   332 00004529 BB01000000          <1>     mov ebx, 1  ;STDOUT
   333 0000452E 488D1524BBFFFF      <1>     lea rdx, currDirStr
   334 00004535 CD21                <1>     int 21h
   335                              <1>     return
    13                              <2> %%_ret:
    14 00004537 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   336                              <1> .badDrive:
   337                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   338 00004538 488D15EBC6FFFF      <1>     lea rdx, badDrvMsg
   339 0000453F E928FFFFFF          <1>     jmp printString
   340                              <1> printFmtTime:
   341                              <1> ;Outputs the formatted time
   342 00004544 E847000000          <1>     call getTime
   343 00004549 0FB6C5              <1>     movzx eax, ch
   344 0000454C E87DFEFFFF          <1>     call printTime.printHours
   345 00004551 8A15E9BAFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   346 00004557 B402                <1>     mov ah, 02h
   347 00004559 CD21                <1>     int 21h
   348 0000455B 0FB60500C1FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   349 00004562 E857FEFFFF          <1>     call printTime.printMinutesAlt
   350 00004567 8A15D3BAFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   351 0000456D B402                <1>     mov ah, 02h
   352 0000456F CD21                <1>     int 21h
   353 00004571 0FB605EDC0FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   354 00004578 E841FEFFFF          <1>     call printTime.printMinutesAlt
   355 0000457D B22E                <1>     mov dl, "."
   356 0000457F B402                <1>     mov ah, 02h
   357 00004581 CD21                <1>     int 21h
   358 00004583 0FB605DAC0FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   359 0000458A E82FFEFFFF          <1>     call printTime.printMinutesAlt
   360                              <1>     return
    13                              <2> %%_ret:
    14 0000458F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   361                              <1> getTime:
   362 00004590 B42C                <1>     mov ah, 2Ch ;DOS get time
   363 00004592 CD21                <1>     int 21h
   364                              <1>     ;CH = hour (0-23)
   365                              <1> 	;CL = minutes (0-59)
   366                              <1> 	;DH = seconds (0-59)
   367                              <1> 	;DL = hundredths (0-99)
   368 00004594 880DC8C0FFFF        <1>     mov byte [td1], cl
   369 0000459A 882DC3C0FFFF        <1>     mov byte [td2], ch
   370 000045A0 8815BEC0FFFF        <1>     mov byte [td3], dl
   371 000045A6 8835B9C0FFFF        <1>     mov byte [td4], dh
   372                              <1>     return
    13                              <2> %%_ret:
    14 000045AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   373                              <1> 
   374                              <1> printFmtDate:
   375                              <1> ;Outputs the formatted date
   376 000045AD B8002A0000          <1>     mov eax, 2A00h ;DOS get date
   377 000045B2 CD21                <1>     int 21h
   378                              <1> 	;AL = day of the week (0=Sunday)
   379                              <1> 	;CX = year (1980-2099)
   380                              <1> 	;DH = month (1-12)
   381                              <1> 	;DL = day (1-31)
   382 000045B4 6681E9BC07          <1>     sub cx, 1980    ;Subtract 1980 from cx
   383 000045B9 66890DA2C0FFFF      <1>     mov word [td1], cx
   384 000045C0 88159EC0FFFF        <1>     mov byte [td3], dl
   385 000045C6 883599C0FFFF        <1>     mov byte [td4], dh
   386 000045CC 0FB6C0              <1>     movzx eax, al
   387 000045CF 89C3                <1>     mov ebx, eax
   388 000045D1 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   389 000045D3 01D8                <1>     add eax, ebx ;Make it 3 times 
   390 000045D5 488D15D0C4FFFF      <1>     lea rdx, dayName
   391 000045DC 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   392 000045E0 B903000000          <1>     mov ecx, 3  ;Print three chars
   393 000045E5 BB01000000          <1>     mov ebx, 1  ;STDOUT
   394 000045EA B440                <1>     mov ah, 40h ;Write to handle
   395 000045EC CD21                <1>     int 21h
   396 000045EE B220                <1>     mov dl, " "
   397 000045F0 E8E7FEFFFF          <1>     call outChar
   398                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   399                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   400                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   401 000045F5 0FB70566C0FFFF      <1>     movzx eax, word [td1]   ;Get this word
   402 000045FC C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   403 000045FF 0FB61D5FC0FFFF      <1>     movzx ebx, byte [td4]
   404 00004606 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   405 00004609 09D8                <1>     or eax, ebx ;Add this date to eax
   406 0000460B 0FB61D52C0FFFF      <1>     movzx ebx, byte [td3]
   407 00004612 09D8                <1>     or eax, ebx
   408 00004614 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   409 00004619 E81CFCFFFF          <1>     call printDate
   410                              <1>     return
    13                              <2> %%_ret:
    14 0000461E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   411                              <1> 
   412                              <1> 
   413                              <1> hexToBCD:
   414                              <1> ;Converts a Hex byte into two BCD digits
   415                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   416 0000461F 51                  <1>     push rcx
   417 00004620 0FB6C0              <1>     movzx eax, al   ;Zero extend
   418 00004623 31C9                <1>     xor ecx, ecx
   419                              <1> .htb0:
   420 00004625 3D0A000000          <1>     cmp eax, 10
   421 0000462A 7209                <1>     jb .htb1
   422 0000462C 2D0A000000          <1>     sub eax, 10
   423 00004631 FFC1                <1>     inc ecx
   424 00004633 EBF0                <1>     jmp short .htb0
   425                              <1> .htb1:
   426 00004635 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   427 00004638 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   428 0000463A 59                  <1>     pop rcx
   429 0000463B C3                  <1>     ret
   430                              <1> 
   431                              <1> printPackedBCD:
   432                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   433                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   434                              <1> ;Preserves all registers
   435 0000463C 50                  <1>     push rax
   436 0000463D 52                  <1>     push rdx
   437 0000463E 88C4                <1>     mov ah, al
   438 00004640 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   439 00004642 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   440 00004645 7508                <1>     jnz .upperNybble
   441 00004647 B220                <1>     mov dl, " "
   442 00004649 B402                <1>     mov ah, 02h
   443 0000464B CD21                <1>     int 21h
   444 0000464D EB0E                <1>     jmp short .lowerNybble
   445                              <1> .upperNybble:
   446 0000464F 50                  <1>     push rax
   447 00004650 C0EC04              <1>     shr ah, 4
   448 00004653 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   449 00004656 88E2                <1>     mov dl, ah
   450 00004658 B402                <1>     mov ah, 02h ;Print DL
   451 0000465A CD21                <1>     int 21h
   452 0000465C 58                  <1>     pop rax
   453                              <1> .lowerNybble:
   454 0000465D 0430                <1>     add al, "0"
   455 0000465F 88C2                <1>     mov dl, al
   456 00004661 B402                <1>     mov ah, 02h ;Print DL
   457 00004663 CD21                <1>     int 21h
   458 00004665 5A                  <1>     pop rdx
   459 00004666 58                  <1>     pop rax
   460                              <1>     return
    13                              <2> %%_ret:
    14 00004667 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   461                              <1> 
   462                              <1> setDrive:
   463                              <1> ;Input: dl = 0 based Drive number to set to
   464                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   465                              <1> ;AX trashed.
   466 00004668 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   467 0000466A CD21                <1>     int 21h 
   468 0000466C E803000000          <1>     call getCurrentDrive
   469 00004671 38D0                <1>     cmp al, dl  ;Is this the same drive?
   470                              <1>     return
    13                              <2> %%_ret:
    14 00004673 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   471                              <1> getCurrentDrive:
   472                              <1> ;Returns the 0 based current drive in al
   473 00004674 B419                <1>     mov ah, 19h
   474 00004676 CD21                <1>     int 21h
   475                              <1>     return
    13                              <2> %%_ret:
    14 00004678 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   476                              <1> 
   477                              <1> strcpy:
   478                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   479                              <1> ;rsi -> Source
   480                              <1> ;rdi -> Destination
   481 00004679 51                  <1>     push rcx
   482 0000467A 57                  <1>     push rdi
   483 0000467B 4889F7              <1>     mov rdi, rsi
   484 0000467E E80F000000          <1>     call strlen ;Get the length of the string in rsi
   485 00004683 5F                  <1>     pop rdi
   486 00004684 F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   487 00004686 59                  <1>     pop rcx
   488                              <1>     return
    13                              <2> %%_ret:
    14 00004687 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   489                              <1> 
   490                              <1> strcpy2:
   491                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   492                              <1> ;rsi -> Source
   493                              <1> ;rdi -> Destination
   494 00004688 56                  <1>     push rsi
   495 00004689 57                  <1>     push rdi
   496 0000468A E8EAFFFFFF          <1>     call strcpy 
   497 0000468F 5F                  <1>     pop rdi
   498 00004690 5E                  <1>     pop rsi
   499                              <1>     return
    13                              <2> %%_ret:
    14 00004691 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> 
   501                              <1> strlen:
   502                              <1> ;Gets the length of a ASCIIZ string
   503                              <1> ;Input: rdi = Source buffer
   504                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   505 00004692 50                  <1>     push rax
   506 00004693 B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   507 00004698 CD2F                <1>     int 2fh
   508 0000469A 58                  <1>     pop rax
   509                              <1>     return
    13                              <2> %%_ret:
    14 0000469B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   510                              <1> 
   511                              <1> ucChar:
   512                              <1> ;Input: al = Char to uppercase
   513                              <1> ;Output: al = Adjusted char 
   514 0000469C 53                  <1>     push rbx
   515 0000469D 50                  <1>     push rax    ;Push the char twice on the stack
   516 0000469E B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   517 000046A3 CD2F                <1>     int 2fh         ;Returns the processed char in al
   518 000046A5 5B                  <1>     pop rbx         ;Pop the old word off the stack
   519 000046A6 5B                  <1>     pop rbx
   520                              <1>     return
    13                              <2> %%_ret:
    14 000046A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   521                              <1> 
   522                              <1> normalisePath:
   523                              <1> ;Uppercases chars and flips pathseps
   524                              <1> ;Input: rsi -> Path to normalise
   525 000046A8 50                  <1>     push rax
   526 000046A9 57                  <1>     push rdi
   527 000046AA 4889F7              <1>     mov rdi, rsi
   528 000046AD B811120000          <1>     mov eax, 1211h
   529 000046B2 CD2F                <1>     int 2fh
   530 000046B4 5F                  <1>     pop rdi
   531 000046B5 58                  <1>     pop rax
   532                              <1>     return
    13                              <2> %%_ret:
    14 000046B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   533                              <1> 
   534                              <1> skipDelimiters:
   535                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   536                              <1> ; command delimiters but a subset thereof. 
   537                              <1> ;These are the same across all codepages.
   538                              <1> ;Input: rsi must point to the start of the data string
   539                              <1> ;Output: rsi points to the first non-delimiter char
   540 000046B7 50                  <1>     push rax
   541                              <1> .l1:
   542 000046B8 AC                  <1>     lodsb
   543 000046B9 E807000000          <1>     call isALdelimiter
   544 000046BE 74F8                <1>     jz .l1
   545                              <1> .exit:
   546 000046C0 58                  <1>     pop rax
   547 000046C1 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   548                              <1>     return
    13                              <2> %%_ret:
    14 000046C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   549                              <1> 
   550                              <1> isALdelimiter:
   551                              <1> ;Returns: ZF=NZ if al is not a command separator 
   552                              <1> ;         ZF=ZE if al is a command separator
   553 000046C5 3C20                <1>     cmp al, " "
   554                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000046C7 74(C4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   555 000046C9 3C3B                <1>     cmp al, ";"
   556                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000046CB 74(C4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   557 000046CD 3C3D                <1>     cmp al, "="
   558                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000046CF 74(C4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   559 000046D1 3C2C                <1>     cmp al, ","
   560                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000046D3 74(C4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   561 000046D5 3C09                <1>     cmp al, TAB
   562                              <1>     return
    13                              <2> %%_ret:
    14 000046D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> clearCommandState:
   565                              <1> ;Clears the command state
   566 000046D8 488D3DCDB9FFFF      <1>     lea rdi, cmdStatePtr
   567 000046DF B907000000          <1>     mov ecx, cmdStateL
   568 000046E4 31C0                <1>     xor eax, eax
   569 000046E6 F3AA                <1>     rep stosb
   570                              <1>     return
    13                              <2> %%_ret:
    14 000046E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   571                              <1> 
   572                              <1> clearCommandLineState:
   573                              <1> ;Clears the command line state after a 0Dh encountered
   574 000046E9 488D3DB1B9FFFF      <1>     lea rdi, cmdLineStatePtr
   575 000046F0 B912000000          <1>     mov ecx, cmdLineStateL
   576 000046F5 31C0                <1>     xor eax, eax
   577 000046F7 F3AA                <1>     rep stosb
   578 000046F9 C7059FB9FFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   578 00004702 FF                  <1>
   579 00004703 C7059BB9FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   579 0000470C FF                  <1>
   580                              <1> ;Close all handles from 5->MAX
   581 0000470D 0FB70D1BB9FFFF      <1>     movzx ecx, word [numHdls]
   582 00004714 BB05000000          <1>     mov ebx, 5
   583                              <1> .lp:
   584 00004719 B43E                <1>     mov ah, 3Eh ;File close
   585 0000471B CD21                <1>     int 21h
   586 0000471D FFC3                <1>     inc ebx ;Goto next file
   587 0000471F 39CB                <1>     cmp ebx, ecx
   588 00004721 76F6                <1>     jbe .lp    ;Keep looping whilst below or equal
   589                              <1>     return
    13                              <2> %%_ret:
    14 00004723 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   590                              <1> 
   591                              <1> asciiFilenameToFCB:
   592                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   593                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   594                              <1> ;Also doesn't check if chars are valid
   595                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   596                              <1> ;Name is space padded.
   597                              <1> ;Input: rsi = ASCII string buffer
   598                              <1> ;       rdi = FCB name buffer
   599                              <1> ;Output: al = Char that terminated the source string 
   600 00004724 53                  <1>     push rbx    
   601 00004725 57                  <1>     push rdi
   602 00004726 B90B000000          <1>     mov ecx, 11
   603 0000472B B020                <1>     mov al, " "
   604 0000472D F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   605 0000472F 5F                  <1>     pop rdi
   606 00004730 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   607                              <1>     ;Preprocess for Dir Searches
   608 00004733 803E2E              <1>     cmp byte [rsi], "."
   609 00004736 7509                <1>     jne .processName
   610 00004738 A4                  <1>     movsb   ;Store the first dot
   611 00004739 803E2E              <1>     cmp byte [rsi], "."
   612 0000473C 752C                <1>     jne .exitBadChar
   613 0000473E A4                  <1>     movsb
   614 0000473F EB29                <1>     jmp short .exitBadChar
   615                              <1> .processName:
   616 00004741 AC                  <1>     lodsb   ;Get the char in al
   617 00004742 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   618 00004744 7426                <1>     jz .exit
   619 00004746 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   620 00004748 7407                <1>     je .extSpace
   621 0000474A 3C2E                <1>     cmp al, "."
   622 0000474C 740C                <1>     je .ext
   623 0000474E AA                  <1>     stosb   ;Store the char
   624 0000474F EBF0                <1>     jmp short .processName
   625                              <1> .extSpace:
   626                              <1> ;Now we scan for a period in the name
   627 00004751 AC                  <1>     lodsb   ;Get a char and increase rsi
   628 00004752 84C0                <1>     test al, al
   629 00004754 7416                <1>     jz .exit
   630 00004756 3C2E                <1>     cmp al, "."     ;If al is not a period...
   631 00004758 75F7                <1>     jne .extSpace   ; keep searching
   632                              <1> .ext:
   633 0000475A 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   634                              <1> .processExt:
   635 0000475E AC                  <1>     lodsb
   636 0000475F 84C0                <1>     test al, al
   637 00004761 7409                <1>     jz .exit
   638 00004763 3C20                <1>     cmp al, " "
   639 00004765 7405                <1>     je .exit
   640 00004767 AA                  <1>     stosb
   641 00004768 EBF4                <1>     jmp short .processExt
   642                              <1> .exitBadChar:
   643 0000476A 30C0                <1>     xor al, al  ;Return a null terminator
   644                              <1> .exit:
   645 0000476C 5B                  <1>     pop rbx
   646                              <1>     return
    13                              <2> %%_ret:
    14 0000476D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   647                              <1> 
   648                              <1> findLastPathComponant:
   649                              <1> ;Finds the last path componant of an ASCIIZ path string
   650                              <1> ;Input: rdi -> Head of the path to find last componant on
   651                              <1> ;Output: rdi -> Start of the last componant
   652 0000476E 50                  <1>     push rax
   653 0000476F 51                  <1>     push rcx
   654 00004770 31C9                <1>     xor ecx, ecx
   655 00004772 FFC9                <1>     dec ecx
   656 00004774 31C0                <1>     xor eax, eax
   657 00004776 F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   658 00004778 F7D1                <1>     not ecx     ;This gets the count of chars  
   659 0000477A 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   660 0000477D 8A05AEB8FFFF        <1>     mov al, byte [pathSep]
   661 00004783 FD                  <1>     std
   662 00004784 F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   663 00004786 FC                  <1>     cld
   664 00004787 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   665 00004789 48FFC7              <1>     inc rdi     ;Point at pathsep
   666                              <1> .exit:
   667 0000478C 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   668 0000478F 59                  <1>     pop rcx
   669 00004790 58                  <1>     pop rax
   670                              <1>     return
    13                              <2> %%_ret:
    14 00004791 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   671                              <1> 
   672                              <1> FCBToAsciiz:
   673                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   674                              <1> ;Name is space padded too
   675                              <1> ;Input: rsi = FCB name buffer
   676                              <1> ;       rdi = ASCIIZ string buffer
   677 00004792 B908000000          <1>     mov ecx, 8
   678 00004797 F3A4                <1>     rep movsb   ;Move the name over
   679                              <1> .scanNameSpace:
   680 00004799 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   681 0000479D 750D                <1>     jne .ext
   682 0000479F 48FFCF              <1>     dec rdi
   683 000047A2 FFC1                <1>     inc ecx
   684 000047A4 81F908000000        <1>     cmp ecx, 8
   685 000047AA 72ED                <1>     jb .scanNameSpace
   686                              <1> .ext:
   687 000047AC 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   688 000047B1 7506                <1>     jne .validExt
   689 000047B3 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   690 000047B7 7415                <1>     je .exit
   691                              <1> .validExt:
   692 000047B9 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   693 000047BB AA                  <1>     stosb
   694 000047BC B903000000          <1>     mov ecx, 3
   695 000047C1 F3A4                <1>     rep movsb   ;Move the three extension chars over
   696                              <1> .scanExtSpace:
   697 000047C3 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   698 000047C7 7505                <1>     jne .exit
   699 000047C9 48FFCF              <1>     dec rdi
   700 000047CC EBF5                <1>     jmp short .scanExtSpace
   701                              <1> .exit:
   702 000047CE 31C0                <1>     xor eax, eax
   703 000047D0 AA                  <1>     stosb   ;Store a null at the end
   704                              <1>     return
    13                              <2> %%_ret:
    14 000047D1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   705                              <1> 
   706                              <1> cpDelimOrCtrlStringToBufz:
   707                              <1> ;Copy a delimited or control char terminated string to a buffer
   708                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   709                              <1> ;       rdi -> Buffer to store null terminated string in
   710                              <1> ;Output: rsi -> First char past string end
   711                              <1> ;       rdi -> One char past null terminator on string buffer
   712 000047D2 C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   713                              <1> .lp:
   714 000047D5 AC                  <1>     lodsb
   715 000047D6 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here. CR included!
   716 000047D8 760A                <1>     jbe .exit
   717 000047DA E8E6FEFFFF          <1>     call isALdelimiter
   718 000047DF 7403                <1>     je .exit
   719 000047E1 AA                  <1>     stosb
   720 000047E2 EBF1                <1>     jmp short .lp
   721                              <1> .exit:
   722 000047E4 31C0                <1>     xor eax, eax
   723 000047E6 AA                  <1>     stosb   ;Store a null terminator
   724                              <1>     return
    13                              <2> %%_ret:
    14 000047E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   725                              <1> 
   726                              <1> 
   727                              <1> cpDelimPathToBufz:
   728                              <1> ;Copy a delimited path into buffer and null terminate.
   729                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   730                              <1> ;       rdi -> Buffer to store null terminated path in
   731                              <1> ;Output: rsi -> First char past pathname delimiter
   732                              <1> ;       rdi -> One char past null terminator on pathname buffer
   733 000047E8 53                  <1>     push rbx
   734 000047E9 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   735 000047EC C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   736                              <1> .lp:
   737 000047EF AC                  <1>     lodsb   ;Get the char
   738 000047F0 3C0D                <1>     cmp al, CR
   739 000047F2 7412                <1>     je .gotRedirPath
   740 000047F4 E8CCFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   741 000047F9 740B                <1>     jz .gotRedirPath 
   742 000047FB 3A0531B8FFFF        <1>     cmp al, byte [switchChar]
   743 00004801 7403                <1>     je .gotRedirPath
   744 00004803 AA                  <1>     stosb   ;Store this char and loop next char
   745 00004804 EBE9                <1>     jmp short .lp
   746                              <1> .gotRedirPath:
   747 00004806 50                  <1>     push rax    ;Save the char on stack
   748 00004807 30C0                <1>     xor al, al  ;Get null terminator char
   749 00004809 4829FB              <1>     sub rbx, rdi
   750 0000480C 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   751 00004813 7412                <1>     je .notColon
   752 00004815 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   753 0000481C 7409                <1>     je .notColon
   754 0000481E 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   755 00004822 7503                <1>     jne .notColon
   756 00004824 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   757                              <1> .notColon:
   758 00004827 AA                  <1>     stosb   ;Store the null terminator for the redir path
   759 00004828 58                  <1>     pop rax ;Get back the char in al
   760 00004829 5B                  <1>     pop rbx
   761                              <1>     return
    13                              <2> %%_ret:
    14 0000482A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   762                              <1> 
   763                              <1> buildCommandPath:
   764                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   765 0000482B 0FB6057BB8FFFF      <1>     movzx eax, byte [arg1Off]
   766 00004832 4C8B05D6B7FFFF      <1>     mov r8, [pspPtr]
   767 00004839 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   768 00004840 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   769                              <1> copyArgumentToSearchSpec:
   770                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   771                              <1> ; and null terminates
   772 00004843 488D3D4FBCFFFF      <1>     lea rdi, searchSpec
   773 0000484A E899FFFFFF          <1>     call cpDelimPathToBufz
   774                              <1>     return
    13                              <2> %%_ret:
    14 0000484F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   775                              <1> 
   776                              <1> scanForWildcards:
   777                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   778                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   779 00004850 50                  <1>     push rax
   780 00004851 56                  <1>     push rsi
   781                              <1> .lp:
   782 00004852 AC                  <1>     lodsb
   783 00004853 3C3F                <1>     cmp al, "?"
   784 00004855 740A                <1>     je .exit
   785 00004857 3C2A                <1>     cmp al, "*"
   786 00004859 7406                <1>     je .exit
   787 0000485B 84C0                <1>     test al, al
   788 0000485D 75F3                <1>     jnz .lp
   789 0000485F FEC0                <1>     inc al  ;This will clear the ZF
   790                              <1> .exit:
   791 00004861 5E                  <1>     pop rsi
   792 00004862 58                  <1>     pop rax
   793                              <1>     return
    13                              <2> %%_ret:
    14 00004863 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   794                              <1> 
   795                              <1> printDecimalValLB:
   796                              <1> ;Takes a value in rax and prints it's decimal representation with leading
   797                              <1> ; blanks and inserts commas where appropriate.
   798                              <1> ;Input: rax = Value to print
   799                              <1> ;       rcx = Buffer size to handle (usual values: 17 for max, 13 for dword)
   800 00004864 4889E5              <1>     mov rbp, rsp
   801 00004867 4829CC              <1>     sub rsp, rcx ;Allocate the buffer on the stack
   802 0000486A 4889EF              <1>     mov rdi, rbp
   803 0000486D 4829CF              <1>     sub rdi, rcx
   804 00004870 50                  <1>     push rax
   805 00004871 51                  <1>     push rcx
   806 00004872 57                  <1>     push rdi
   807 00004873 31C0                <1>     xor eax, eax
   808 00004875 F3AA                <1>     rep stosb   ;Initialise the buffer with a null value
   809 00004877 5F                  <1>     pop rdi     ;Now set the ptr to the head of the buffer
   810 00004878 59                  <1>     pop rcx
   811 00004879 58                  <1>     pop rax
   812 0000487A 51                  <1>     push rcx    ;Save this value to keep the buffer length
   813 0000487B E83E000000          <1>     call decimalise   ;If return with CF=CY, error!
   814 00004880 59                  <1>     pop rcx     ;Now print the buffer
   815 00004881 4889EF              <1>     mov rdi, rbp
   816 00004884 48FFCF              <1>     dec rdi     ;Doesn't affect CF
   817 00004887 722A                <1>     jc .errPrint    ;Print a mis-aligned ? to clearly mark an error!
   818                              <1> .skipLp:
   819 00004889 8A1F                <1>     mov bl, byte [rdi]
   820 0000488B 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   821 0000488D 7513                <1>     jne .printLp
   822 0000488F B402                <1>     mov ah, 02h
   823 00004891 B220                <1>     mov dl, " "
   824 00004893 CD21                <1>     int 21h
   825 00004895 48FFCF              <1>     dec rdi
   826 00004898 FFC9                <1>     dec ecx
   827 0000489A 81F901000000        <1>     cmp ecx, 1
   828 000048A0 75E7                <1>     jne .skipLp   ;Always print 1 byte for size
   829                              <1> .printLp:
   830 000048A2 8A17                <1>     mov dl, byte [rdi]
   831 000048A4 B402                <1>     mov ah, 02h
   832 000048A6 CD21                <1>     int 21h
   833 000048A8 48FFCF              <1>     dec rdi
   834 000048AB FFC9                <1>     dec ecx
   835 000048AD 75F3                <1>     jnz .printLp
   836                              <1> .exit:
   837 000048AF 4889EC              <1>     mov rsp, rbp    ;Deallocate the buffer and exit!
   838                              <1>     return
    13                              <2> %%_ret:
    14 000048B2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   839                              <1> .errPrint:
   840                              <1> ;Print a default ? symbol if an overflow occurs.
   841 000048B3 B23F                <1>     mov dl, "?"
   842 000048B5 B800020000          <1>     mov eax, 0200h
   843 000048BA CD21                <1>     int 21h
   844 000048BC EBF1                <1>     jmp short .exit
   845                              <1> 
   846                              <1> decimalise:
   847                              <1> ;Input: rax = value to decimalise
   848                              <1> ;       rdi -> Ptr to byte buffer to store string in with commas
   849                              <1> ;       ecx = buffer length
   850                              <1> ;Output: Buffer @ rdi filled in! 
   851                              <1> ;       ecx = Number of chars in buffer.
   852                              <1> ; Warning: If the number of chars in the buffer reaches buffer length,
   853                              <1> ;   we return with CF=CY. Else, CF=NC.
   854 000048BE 57                  <1>     push rdi
   855 000048BF 89CE                <1>     mov esi, ecx    
   856 000048C1 31C9                <1>     xor ecx, ecx    ;Use cl as buffer length ctr, ch as comma ctr
   857 000048C3 BB0A000000          <1>     mov ebx, 0Ah    ;Divide by 10
   858                              <1> .lp:
   859 000048C8 80FD03              <1>     cmp ch, 3       ;Are we divisible by 3?
   860 000048CB 7514                <1>     jne .skipSep
   861 000048CD 4038CE              <1>     cmp sil, cl
   862 000048D0 742F                <1>     je .exitErr     ;Before we add a comma, do we have space?
   863 000048D2 8A1562B7FFFF        <1>     mov dl, byte [ctryData + countryStruc.thouSep]
   864 000048D8 8817                <1>     mov byte [rdi], dl
   865 000048DA 48FFC7              <1>     inc rdi 
   866 000048DD FEC1                <1>     inc cl          ;Inc number of chars
   867 000048DF 30ED                <1>     xor ch, ch      ;Reset comma counter
   868                              <1> .skipSep:
   869 000048E1 4038CE              <1>     cmp sil, cl
   870 000048E4 741B                <1>     je .exitErr     ;Before we add a digit, do we have space?
   871 000048E6 31D2                <1>     xor edx, edx
   872 000048E8 48F7F3              <1>     div rbx         ;Divide rax by 10
   873 000048EB 80C230              <1>     add dl, "0"     
   874 000048EE 8817                <1>     mov byte [rdi], dl
   875 000048F0 48FFC7              <1>     inc rdi
   876 000048F3 FEC1                <1>     inc cl          ;Inc number of chars
   877 000048F5 FEC5                <1>     inc ch          ;Inc to keep track of commas
   878 000048F7 4885C0              <1>     test rax, rax
   879 000048FA 75CC                <1>     jnz .lp
   880                              <1> ;The test cleared CF if we are here
   881 000048FC 0FB6C9              <1>     movzx ecx, cl
   882                              <1> .exit:
   883 000048FF 5F                  <1>     pop rdi
   884                              <1>     return
    13                              <2> %%_ret:
    14 00004900 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   885                              <1> .exitErr:
   886 00004901 F9                  <1>     stc
   887 00004902 EBFB                <1>     jmp short .exit
   888                              <1> printDecimalWord:
   889                              <1> ;Takes a word in ax and print it's decimal representation.
   890                              <1> ;DOES NOT SUPPRESS LEADING ZEROS!
   891                              <1> ;SHOULD NOT BE USED FOR ANYTHING OVER 3 DIGITS AS NO COMMA!!
   892                              <1> ;Input: eax = Zero extended word to print
   893 00004904 31C9                <1>     xor ecx, ecx
   894 00004906 85C0                <1>     test eax, eax
   895 00004908 750C                <1>     jnz .notZero
   896 0000490A B930000000          <1>     mov ecx, "0"
   897 0000490F BD01000000          <1>     mov ebp, 1  ;Print one digit
   898 00004914 EB19                <1>     jmp short .goPrint
   899                              <1> .notZero:
   900 00004916 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   901 00004918 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   902                              <1> .mainLp:
   903 0000491D FFC5                <1>     inc ebp
   904 0000491F C1E108              <1>     shl ecx, 8    ;Space for next nybble
   905 00004922 31D2                <1>     xor edx, edx
   906 00004924 F7F6                <1>     div esi
   907 00004926 80C230              <1>     add dl, '0'
   908 00004929 88D1                <1>     mov cl, dl    ;Save remainder byte
   909 0000492B 85C0                <1>     test eax, eax   ;We zero yet?
   910 0000492D 75EE                <1>     jnz .mainLp
   911                              <1> .goPrint:
   912 0000492F 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   913 00004931 C1E908              <1>     shr ecx, 8    ;Get next digit down
   914 00004934 B402                <1>     mov ah, 02h
   915 00004936 CD21                <1>     int 21h
   916 00004938 FFCD                <1>     dec ebp
   917 0000493A 75F3                <1>     jnz .goPrint
   918                              <1>     return
    13                              <2> %%_ret:
    14 0000493C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   919                              <1> 
   920                              <1> getDecimalWord:
   921                              <1> ;Works on MAX A dword in eax
   922                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   923 0000493D 31C9                <1>     xor ecx, ecx
   924 0000493F 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   925 00004941 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   926                              <1> .dpfb0:
   927 00004946 FFC5                <1>     inc ebp
   928 00004948 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   929 0000494C 31D2                <1>     xor edx, edx
   930 0000494E 48F7F3              <1>     div rbx
   931 00004951 80C230              <1>     add dl, '0'
   932 00004954 80FA39              <1>     cmp dl, '9'
   933 00004957 7603                <1>     jbe .dpfb1
   934 00004959 80C207              <1>     add dl, 'A'-'0'-10
   935                              <1> .dpfb1:
   936 0000495C 88D1                <1>     mov cl, dl    ;Save remainder byte
   937 0000495E 4885C0              <1>     test rax, rax
   938 00004961 75E3                <1>     jnz .dpfb0
   939                              <1>     return
    13                              <2> %%_ret:
    14 00004963 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   940                              <1> getByte:
   941                              <1> ;Indicates if the number obtained is larger than a byte by setting CF
   942 00004964 E807000000          <1>     call getNum
   943 00004969 3D00010000          <1>     cmp eax, 100h
   944 0000496E F5                  <1>     cmc
   945                              <1>     return
    13                              <2> %%_ret:
    14 0000496F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   946                              <1> getNum:
   947                              <1> ;Gets a number from a command line.
   948                              <1> ;Input: rsi -> String to get number from
   949                              <1> ;Output: rsi -> Char which terminated the accumulation
   950                              <1> ;        eax = Value of the string. May overflow if we read more than 9 chars...
   951                              <1> ;If an overflow, CF=CY. eax=Undefined. rsi-> Char 9
   952 00004970 51                  <1>     push rcx
   953 00004971 53                  <1>     push rbx
   954 00004972 31DB                <1>     xor ebx, ebx
   955 00004974 31C9                <1>     xor ecx, ecx    ;Start with a value of zero
   956 00004976 31C0                <1>     xor eax, eax    
   957                              <1> .lp:
   958 00004978 AC                  <1>     lodsb
   959 00004979 3C30                <1>     cmp al, "0"
   960 0000497B 721B                <1>     jb .exit
   961 0000497D 3C39                <1>     cmp al, "9"
   962 0000497F 7717                <1>     ja .exit
   963 00004981 2C30                <1>     sub al, "0"                     ;Convert to binary 
   964 00004983 678D0C89            <1>     lea ecx, qword [4*ecx + ecx]    ;5*rcx
   965 00004987 D1E1                <1>     shl ecx, 1                      ;2*(5*rcx)
   966 00004989 01C1                <1>     add ecx, eax
   967 0000498B FFC3                <1>     inc ebx
   968 0000498D 81FB09000000        <1>     cmp ebx, 9
   969 00004993 75E3                <1>     jne short .lp   ;Get next digit
   970 00004995 F9                  <1>     stc             ;Yikesaroony
   971 00004996 EB01                <1>     jmp short .exitBad
   972                              <1> .exit:
   973 00004998 F8                  <1>     clc             ;Clear CF
   974                              <1> .exitBad:
   975 00004999 89C8                <1>     mov eax, ecx
   976 0000499B 5B                  <1>     pop rbx
   977 0000499C 59                  <1>     pop rcx
   978 0000499D 48FFCE              <1>     dec rsi         ;dec doesnt affect CF 
   979                              <1>     return
    13                              <2> %%_ret:
    14 000049A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   980                              <1> 
   981                              <1> 
   982                              <1> freezePC:
   983 000049A1 488D15DCC4FFFF      <1>     lea rdx, memBad1
   984 000049A8 B409                <1>     mov ah, 09h
   985 000049AA CD21                <1>     int 21h
   986                              <1> .altEP:
   987 000049AC 488D15FAC4FFFF      <1>     lea rdx, memBad3
   988 000049B3 B409                <1>     mov ah, 09h
   989 000049B5 CD21                <1>     int 21h
   990                              <1> .lp:
   991 000049B7 F390                <1>     pause
   992 000049B9 F4                  <1>     hlt
   993 000049BA EBFB                <1>     jmp short .lp
   994                              <1> 
   995                              <1> setDTA:
   996 000049BC 50                  <1>     push rax
   997 000049BD 52                  <1>     push rdx
   998 000049BE 488D155AB7FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   999 000049C5 B8001A0000          <1>     mov eax, 1A00h
  1000 000049CA CD21                <1>     int 21h
  1001 000049CC 5A                  <1>     pop rdx
  1002 000049CD 58                  <1>     pop rax
  1003                              <1>     return
    13                              <2> %%_ret:
    14 000049CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1004                              <1> 
  1005                              <1> getDTA:
  1006 000049CF 488D1549B7FFFF      <1>     lea rdx, cmdFFBlock
  1007                              <1>     return
    13                              <2> %%_ret:
    14 000049D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1008                              <1> 
  1009                              <1> resetIDTentries:
  1010                              <1> ;Resets the IDT entries if they were changed by dead child process
  1011 000049D7 488D1571020000      <1>     lea rdx, critErrorHandler
  1012 000049DE B824250000          <1>     mov eax, 2524h
  1013 000049E3 CD21                <1>     int 21h
  1014 000049E5 488D1577010000      <1>     lea rdx, ctrlCHandler
  1015 000049EC B823250000          <1>     mov eax, 2523h
  1016 000049F1 CD21                <1>     int 21h
  1017 000049F3 488D1580CBFFFF      <1>     lea rdx, appRet
  1018 000049FA B822250000          <1>     mov eax, 2522h
  1019 000049FF CD21                <1>     int 21h
  1020                              <1>     return
    13                              <2> %%_ret:
    14 00004A01 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1021                              <1> 
  1022                              <1> ;-------------------------------
  1023                              <1> ; Environment utility functions
  1024                              <1> ;-------------------------------
  1025                              <1> 
  1026                              <1> cmpEnvVar:
  1027                              <1> ;Checks that we have found the environment variable we are looking for.
  1028                              <1> ;Input: rsi -> Environment var to verify the name of
  1029                              <1> ;       rdi -> Supplied var name to compare against
  1030                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
  1031 00004A02 56                  <1>     push rsi
  1032 00004A03 57                  <1>     push rdi
  1033 00004A04 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs. rdi -> env. rsi -> given.
  1034                              <1> .lp:
  1035 00004A07 AC                  <1>     lodsb               ;Pick up from environment string
  1036 00004A08 E88FFCFFFF          <1>     call ucChar         ;Upper case it!
  1037 00004A0D 3807                <1>     cmp byte [rdi], al  
  1038 00004A0F 7509                <1>     jne .exit
  1039 00004A11 3C3D                <1>     cmp al, "="         ;Are we at the end?
  1040 00004A13 7405                <1>     je .exit
  1041 00004A15 48FFC7              <1>     inc rdi
  1042 00004A18 EBED                <1>     jmp short .lp
  1043                              <1> .exit:
  1044 00004A1A 5F                  <1>     pop rdi
  1045 00004A1B 5E                  <1>     pop rsi
  1046                              <1>     return
    13                              <2> %%_ret:
    14 00004A1C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1047                              <1> 
  1048                              <1> checkEnvGoodAndGet:
  1049                              <1> ;Gets the env ptr and checks that it is double null terminated.
  1050                              <1> ;Output:
  1051                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
  1052                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
  1053                              <1> ;           rsi -> Environment pointer
  1054 00004A1D 50                  <1>     push rax
  1055 00004A1E 51                  <1>     push rcx
  1056 00004A1F 57                  <1>     push rdi
  1057 00004A20 4150                <1>     push r8
  1058 00004A22 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
  1059 00004A26 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
  1060 00004A29 741A                <1>     jz .badExit
  1061 00004A2B 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
  1062 00004A2E C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
  1063                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
  1064 00004A31 31C0                <1>     xor eax, eax
  1065                              <1> .pathNulScan:
  1066 00004A33 F2AE                <1>     repne scasb
  1067 00004A35 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
  1068 00004A37 740C                <1>     jz .badExit
  1069 00004A39 3807                <1>     cmp byte [rdi], al  ;Is char two null?
  1070 00004A3B 75F6                <1>     jne .pathNulScan    ;If not, keep searching
  1071 00004A3D 31C0                <1>     xor eax, eax
  1072 00004A3F FFC0                <1>     inc eax ;Clear the ZF
  1073 00004A41 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
  1074                              <1> .badExit:
  1075 00004A45 4158                <1>     pop r8
  1076 00004A47 5F                  <1>     pop rdi
  1077 00004A48 59                  <1>     pop rcx
  1078 00004A49 58                  <1>     pop rax
  1079                              <1>     return
    13                              <2> %%_ret:
    14 00004A4A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1080                              <1> 
  1081                              <1> 
  1082                              <1> findEnvSpace:
  1083                              <1> ;Searches the environment for space, returns a pointer to the start of the 
  1084                              <1> ; free space in the pointer and a count of free space in the environment.
  1085                              <1> ;If count is zero, pointer is not to be used.
  1086                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
  1087 00004A4B 31C9                <1>     xor ecx, ecx
  1088 00004A4D 31C0                <1>     xor eax, eax    ;Clear eax too
  1089 00004A4F 51                  <1>     push rcx
  1090 00004A50 E8C8FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
  1091 00004A55 59                  <1>     pop rcx
  1092                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004A56 74(4A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1093 00004A58 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
  1094 00004A5C FFC9                <1>     dec ecx ;Make into a large counter
  1095 00004A5E 4889F7              <1>     mov rdi, rsi    
  1096                              <1> .endsearch:
  1097 00004A61 F2AE                <1>     repne scasb ;Scan
  1098 00004A63 803F00              <1>     cmp byte [rdi], 0
  1099 00004A66 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
  1100                              <1>     ;Here we are at the end of the environment
  1101 00004A68 F7D9                <1>     neg ecx
  1102 00004A6A FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
  1103 00004A6C 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
  1104 00004A6F 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
  1105 00004A72 29C8                <1>     sub eax, ecx
  1106 00004A74 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
  1107                              <1>     return
    13                              <2> %%_ret:
    14 00004A76 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1108                              <1> 
  1109                              <1> searchForEnvVar:
  1110                              <1> ;Gets the environment, and scans it for a string with the var specified.
  1111                              <1> ;Input: rdi -> Var name to look for.
  1112                              <1> ;Returns: CF=NC: rsi -> Env var in env.
  1113 00004A77 57                  <1>     push rdi
  1114 00004A78 51                  <1>     push rcx
  1115 00004A79 52                  <1>     push rdx
  1116 00004A7A 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1117 00004A7E 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
  1118                              <1> .varLp:
  1119 00004A81 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
  1120 00004A84 E879FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1121 00004A89 7416                <1>     je .varFound
  1122 00004A8B 31C0                <1>     xor eax, eax        ;Search for a null
  1123 00004A8D 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1124 00004A90 B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1125 00004A95 F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1126 00004A97 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1127 00004A99 7405                <1>     je .varNotFound     ;If second null, no more env to search!
  1128 00004A9B 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1129 00004A9E EBE1                <1>     jmp short .varLp    ;And scan again!
  1130                              <1> .varNotFound:
  1131 00004AA0 F9                  <1>     stc
  1132                              <1> .varFound:
  1133 00004AA1 59                  <1>     pop rcx
  1134 00004AA2 5A                  <1>     pop rdx
  1135 00004AA3 5F                  <1>     pop rdi
  1136                              <1>     return
    13                              <2> %%_ret:
    14 00004AA4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1137                              <1> 
  1138                              <1> envFree:
  1139                              <1> ;Frees a variable from the environment, pulls the strings behind it up
  1140                              <1> ; zeros the rest of the environment, and returns a pointer to the first
  1141                              <1> ; free byte of the environment!
  1142                              <1> ;Input: rsi -> Variable to free.
  1143                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
  1144                              <1> ;        ecx = Number of free bytes in env
  1145 00004AA5 4889F7              <1>     mov rdi, rsi
  1146 00004AA8 31C0                <1>     xor eax, eax
  1147                              <1> .freeLp:
  1148 00004AAA 803F00              <1>     cmp byte [rdi], 0
  1149 00004AAD 7403                <1>     je .exitLp
  1150 00004AAF AA                  <1>     stosb
  1151 00004AB0 EBF8                <1>     jmp short .freeLp
  1152                              <1> .exitLp:
  1153                              <1> ;rdi points to the terminating null of the var we just deleted
  1154                              <1> ;rsi points to the start of the free space
  1155 00004AB2 4887F7              <1>     xchg rsi, rdi   ;Swap em!
  1156 00004AB5 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
  1157 00004ABA 7504                <1>     jne .prepPullup
  1158 00004ABC 31C0                <1>     xor eax, eax
  1159 00004ABE EB0E                <1>     jmp short .cleanEnv
  1160                              <1> .prepPullup:
  1161 00004AC0 48FFC6              <1>     inc rsi         ;Go past the terminating null!
  1162                              <1> .pullUp:
  1163 00004AC3 AC                  <1>     lodsb
  1164 00004AC4 AA                  <1>     stosb
  1165 00004AC5 84C0                <1>     test al, al ;Did we pick up a zero
  1166 00004AC7 75FA                <1>     jne .pullUp ;If not, keep copying
  1167 00004AC9 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
  1168 00004ACC 75F5                <1>     jne .pullUp
  1169                              <1> ;We are at the end of the copy!
  1170                              <1> .cleanEnv:
  1171 00004ACE AA                  <1>     stosb   ;Store the famous second null
  1172 00004ACF 48FFCF              <1>     dec rdi ;without incrementing it!!
  1173 00004AD2 E807000000          <1>     call getFreeSpace
  1174 00004AD7 31C0                <1>     xor eax, eax
  1175 00004AD9 51                  <1>     push rcx
  1176 00004ADA F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
  1177 00004ADC 59                  <1>     pop rcx
  1178                              <1>     return
    13                              <2> %%_ret:
    14 00004ADD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1179                              <1> 
  1180                              <1> getFreeSpace:
  1181                              <1> ;Output: ecx = Number of free bytes in the environment block
  1182 00004ADE 56                  <1>     push rsi
  1183 00004ADF 57                  <1>     push rdi
  1184 00004AE0 E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
  1185 00004AE5 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1186 00004AE9 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
  1187 00004AEC E805000000          <1>     call getEnvSize ;Get total block size
  1188 00004AF1 29F9                <1>     sub ecx, edi    ;Get difference!
  1189 00004AF3 5F                  <1>     pop rdi
  1190 00004AF4 5E                  <1>     pop rsi
  1191                              <1>     return
    13                              <2> %%_ret:
    14 00004AF5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1192                              <1> 
  1193                              <1> getEnvSize:
  1194                              <1> ;Gets the number of bytes in the environment allocation
  1195                              <1> ;Output: ecx = Number of bytes in the environment!
  1196 00004AF6 53                  <1>     push rbx
  1197 00004AF7 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
  1198 00004AFB 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
  1199 00004AFE C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
  1200 00004B01 5B                  <1>     pop rbx
  1201                              <1>     return
    13                              <2> %%_ret:
    14 00004B02 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1202                              <1> 
  1203                              <1> getPtrToEndOfEnv:
  1204                              <1> ;Gets ptr to end of the environment
  1205                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
  1206 00004B03 50                  <1>     push rax
  1207 00004B04 51                  <1>     push rcx
  1208 00004B05 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
  1209 00004B09 31C0                <1>     xor eax, eax
  1210 00004B0B 31C9                <1>     xor ecx, ecx
  1211 00004B0D FFC9                <1>     dec ecx
  1212                              <1> .lp:
  1213 00004B0F F2AE                <1>     repne scasb
  1214 00004B11 3807                <1>     cmp byte [rdi], al
  1215 00004B13 75FA                <1>     jne .lp
  1216 00004B15 59                  <1>     pop rcx
  1217 00004B16 58                  <1>     pop rax
  1218                              <1>     return
    13                              <2> %%_ret:
    14 00004B17 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1219                              <1> 
  1220                              <1> growEnvBlock:
  1221                              <1> ;Attempts to grow the environment to store the new string. Will clean the
  1222                              <1> ; newly allocated 160 byte block of the environment.
  1223                              <1> ;Returns:   CF=NC - Environment grown ok!
  1224                              <1> ;           CF=CY & ZF=ZE - Environment at max size
  1225                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
  1226 00004B18 50                  <1>     push rax
  1227 00004B19 53                  <1>     push rbx
  1228 00004B1A 51                  <1>     push rcx
  1229 00004B1B 56                  <1>     push rsi
  1230 00004B1C 57                  <1>     push rdi
  1231 00004B1D E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
  1232 00004B22 E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
  1233 00004B27 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1234 00004B2B 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
  1235 00004B2E 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
  1236 00004B34 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
  1237 00004B3A 7321                <1>     jae .tooLarge
  1238                              <1>     ;Here ZF must be NZ.
  1239 00004B3C 4150                <1>     push r8
  1240 00004B3E 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
  1241 00004B42 B8004A0000          <1>     mov eax, 4A00h
  1242 00004B47 CD21                <1>     int 21h
  1243 00004B49 4158                <1>     pop r8
  1244 00004B4B 720A                <1>     jc .exit
  1245                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1246                              <1>     ; so we add 160 zeros to the count of bytes
  1247 00004B4D 81C1A0000000        <1>     add ecx, 0A0h
  1248 00004B53 31C0                <1>     xor eax, eax
  1249 00004B55 F3AA                <1>     rep stosb
  1250                              <1> .exit:
  1251 00004B57 5F                  <1>     pop rdi
  1252 00004B58 5E                  <1>     pop rsi
  1253 00004B59 59                  <1>     pop rcx
  1254 00004B5A 5B                  <1>     pop rbx
  1255 00004B5B 58                  <1>     pop rax
  1256                              <1>     return
    13                              <2> %%_ret:
    14 00004B5C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1257                              <1> .tooLarge:
  1258 00004B5D 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1259 00004B60 F9                  <1>     stc             ;Set CF
  1260 00004B61 EBF4                <1>     jmp short .exit
    20                                  %include "./Source/int23h.asm"
     1                              <1> ctrlCHandler:
     2 00004B63 F60532B5FFFF80      <1>     test byte [statFlg1], inLdr     ;Are we loading?
     3 00004B6A 7411                <1>     jz .notLoading
     4 00004B6C F60529B5FFFF40      <1>     test byte [statFlg1], inLdrDT   ;Are we in date/time?
     5 00004B73 7439                <1>     jz  .inInt23                    ;IRETQ if not.
     6                              <1>     ;Else, we pretend nothing was typed in and proceed.
     7 00004B75 66C74201000D        <1>     mov word [rdx + 1], 0D00h       ;Place a 0 chars cnt and CR in the buffer
     8 00004B7B EB12                <1>     jmp short .retFromDosCall       ;And return directly to DOS
     9                              <1> .notLoading:
    10 00004B7D F60518B5FFFF02      <1>     test byte [statFlg1], inCtrlC   ;In this handler already?
    11 00004B84 742A                <1>     jz .notNested                   ;If not, handle!
    12                              <1> ;We are in this CTRL+C, check the system call that we are interrupting...
    13                              <1> ;If a CON call, we are in Terminate Batch Job msg. Set CF to indicate
    14                              <1> ; to US that the user CTRL+C'd the Terminate Batch Job message! Return
    15                              <1> ; from DOS directly, do not reenter CON call.
    16 00004B86 84E4                <1>     test ah, ah
    17 00004B88 7424                <1>     jz .inInt23 
    18 00004B8A 80FC0C              <1>     cmp ah, 0Ch
    19 00004B8D 771F                <1>     ja .inInt23
    20                              <1> .retFromDosCall:
    21                              <1> ;Go past the Int 23h stack frame to the entry to Int 21h stack frame
    22 00004B8F 50                  <1>     push rax
    23 00004B90 488D0512000000      <1>     lea rax, .i23Bounce
    24 00004B97 4889442408          <1>     mov qword [rsp + 8], rax        ;Store as ret add
    25 00004B9C 31C0                <1>     xor eax, eax
    26 00004B9E 668CC8              <1>     mov ax, cs
    27 00004BA1 4889442410          <1>     mov qword [rsp + 2*8], rax      ;Store the segment too
    28 00004BA6 58                  <1>     pop rax
    29 00004BA7 48CF                <1>     iretq   ;Iretq to the next instruction instead of DOS :)
    30                              <1> .i23Bounce:
    31 00004BA9 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on stack frame flags!
    32                              <1> .inInt23:
    33 00004BAE 48CF                <1>     iretq
    34                              <1> .notNested:
    35                              <1> ;Main body of the CRTL+C handler! 
    36 00004BB0 800DE5B4FFFF02      <1>     or byte [statFlg1], inCtrlC     ;Set that we are in CTRL+C
    37 00004BB7 F605DEB4FFFF04      <1>     test byte [statFlg1], inSingle  ;Are we in single command mode?
    38 00004BBE 7509                <1>     jnz .skipReset                  
    39                              <1>     ;Now reset the disk subsystem to flush buffers appropriately,
    40                              <1>     ; in case of open files and/or we are hooked by someone who doesn't
    41                              <1>     ; want to return thru dos.
    42 00004BC0 50                  <1>     push rax
    43 00004BC1 B8000D0000          <1>     mov eax, 0D00h  ;Reset Disk system!
    44 00004BC6 CD21                <1>     int 21h
    45 00004BC8 58                  <1>     pop rax
    46                              <1> .skipReset:
    47 00004BC9 F605CCB4FFFF08      <1>     test byte [statFlg1], inBatch   ;Are we processing a batch file?
    48 00004BD0 7462                <1>     jz .notBat
    49 00004BD2 F605C3B4FFFF04      <1>     test byte [statFlg1], inSingle  ;Batch in a single command?
    50 00004BD9 7559                <1>     jnz .notBat                     ;No batch cleanup, kill ourselves!
    51                              <1> ;CTRLC in a batch file will always abort the current command being 
    52                              <1> ; executed. CTRLC in a batch file is only for checking if we want to 
    53                              <1> ; terminate the whole batch procedure or not!
    54 00004BDB E888020000          <1>     call errSwapHdls    ;Swap STDIO back ONLY ON BATCH Error
    55                              <1> .ynLp:
    56 00004BE0 488D152ABDFFFF      <1>     lea rdx, batFail
    57 00004BE7 E880F8FFFF          <1>     call printString
    58 00004BEC 488D1517B5FFFF      <1>     lea rdx, batYNstr
    59 00004BF3 66C74202200D        <1>     mov word [rdx + 2], 0D20h   ;Space and a CR char
    60 00004BF9 B80A0C0000          <1>     mov eax, 0C0Ah      ;Get clean buffered input!
    61 00004BFE CD21                <1>     int 21h
    62 00004C00 7221                <1>     jc .nestKill         ;If we CTRL+C during this call, kill batch!
    63 00004C02 8A4202              <1>     mov al, byte [rdx + 2]
    64 00004C05 E892FAFFFF          <1>     call ucChar         ;UC using DOS
    65 00004C0A 3C59                <1>     cmp al, "Y"
    66 00004C0C 740E                <1>     je .killBat
    67 00004C0E 3C4E                <1>     cmp al, "N"
    68 00004C10 75CE                <1>     jne .ynLp
    69                              <1> .endBat:
    70                              <1> ;Tries to abort the Command interpreter, fails and 
    71                              <1> ; our internal state will proceed with batch processing. Doing this 
    72                              <1> ; ensures the command being interrupted is cancelled.
    73 00004C12 E84EF8FFFF          <1>     call printCRLF
    74 00004C17 E923000000          <1>     jmp .exitBat    ;Clears errRetHdls and in ctrlc flag and exits!
    75                              <1> .killBat:   ;Now we need to terminate the batch file too.
    76 00004C1C E872D3FFFF          <1>     call batCleanup
    77 00004C21 EBEF                <1>     jmp short .endBat   ;Now CRLF and exit!
    78                              <1> .nestKill:
    79 00004C23 E86BD3FFFF          <1>     call batCleanup
    80 00004C28 80256DB4FFFFFD      <1>     and byte [statFlg1], ~inCtrlC   
    81 00004C2F E95BFFFFFF          <1>     jmp .retFromDosCall ;Nested kill needs to be handled like other nestings
    82                              <1> .notBat:
    83 00004C34 66813D62B4FFFFFFFF  <1>     cmp word [errHdls], -1  ;If these are not -1, return to normal!
    84 00004C3D 7405                <1>     je .exit
    85                              <1> .exitBat:
    86 00004C3F E841020000          <1>     call errRetHdls 
    87                              <1> .exit:
    88 00004C44 802551B4FFFFFD      <1>     and byte [statFlg1], ~inCtrlC
    89                              <1> .exitIn:
    90 00004C4B F9                  <1>     stc     ;Set CF to kill the task
    91 00004C4C C20800              <1>     ret 8   ;Return and adjust rsp stack to indicate we wanna kill task
    92                              <1> ;All we need is that the stack pointer is not at the address we had it
    93                              <1> ; at when we entered DOS to trigger a CF check! So anything from ret 8 to
    94                              <1> ; ret 4*8 to remove CS, RFLAGS, SS, RSP is acceptable and safe!
    21                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00004C4F 53                  <1>     push rbx
    25 00004C50 51                  <1>     push rcx
    26 00004C51 52                  <1>     push rdx
    27 00004C52 57                  <1>     push rdi
    28 00004C53 56                  <1>     push rsi
    29 00004C54 E80F020000          <1>     call errSwapHdls
    30 00004C59 FC                  <1>     cld         ;Make String ops go forward
    31 00004C5A 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00004C5D 88053AB4FFFF        <1>     mov byte [failDrv], al  ;Setup the failing drive (even on char as we reset)
    33 00004C63 488D154ABCFFFF      <1>     lea rdx, crlf
    34 00004C6A E8FDF7FFFF          <1>     call printString    ;Trashes ax
    35 00004C6F 0FB7FF              <1>     movzx edi, di                   ;Clear the upper word.
    36                              <1> 
    37 00004C72 53                  <1>     push rbx        ;Save the action bitfield
    38 00004C73 56                  <1>     push rsi        ;Save the driver pointer
    39 00004C74 B800590000          <1>     mov eax, 5900h  ;Get Extended Error
    40 00004C79 CD21                <1>     int 21h
    41                              <1> ;DOS placed the following values in the following regs:
    42                              <1> ;ax = word [errorExCde]
    43                              <1> ;ch = byte [errorLocus]
    44                              <1> ;bh = byte [errorClass]
    45                              <1> ;bl = byte [errorAction]
    46                              <1> ;rdi = qword [errorVolLbl]
    47 00004C7B 488D35D9C3FFFF      <1>     lea rsi, errorMsgTbl.FVol
    48 00004C82 4887FE              <1>     xchg rdi, rsi   ;Swap the pointers
    49 00004C85 48A5                <1>     movsq   ;Move over the 11 chars :)
    50 00004C87 66A5                <1>     movsw
    51 00004C89 A4                  <1>     movsb
    52 00004C8A 0FB7F8              <1>     movzx edi, ax  ;Move the error code into di
    53 00004C8D 5E                  <1>     pop rsi
    54 00004C8E 5B                  <1>     pop rbx
    55 00004C8F 81FF1F000000        <1>     cmp edi, errGF      ;Is this a normal driver error?
    56 00004C95 7655                <1>     jbe .driverErr
    57                              <1> ;Now we split the driver from sharing and networking errors. Sharing doesnt go 
    58                              <1> ; thru the redir
    59 00004C97 81FF24000000        <1>     cmp edi, errShrFul
    60 00004C9D 763F                <1>     jbe .shareErr
    61                              <1> ;Ok so this is a net error. Check to see if an installed message!
    62                              <1> ;di has the error code still
    63 00004C9F B800050000          <1>     mov eax, 0500h      ;Install check!
    64 00004CA4 CD21                <1>     int 21h
    65 00004CA6 3CFF                <1>     cmp al, -1
    66 00004CA8 752B                <1>     jne .redirDefault   ;No redir, print default net error
    67 00004CAA 89F8                <1>     mov eax, edi        ;Else, move the error code into 
    68 00004CAC B405                <1>     mov ah, 05h         ;Get the string we need
    69 00004CAE CD21                <1>     int 21h
    70 00004CB0 7223                <1>     jc .redirDefault    ;If no message installed for this code, generic!
    71                              <1>     ;Returned if CF=NC:
    72                              <1>     ; al = 0 => Print rest of message
    73                              <1>     ; al = 1 => Immediately prompt ARIF
    74                              <1>     ; rdi -> ASCIIZ string to print
    75 00004CB2 4889FA              <1>     mov rdx, rdi        
    76 00004CB5 50                  <1>     push rax            
    77 00004CB6 31C0                <1>     xor eax, eax
    78 00004CB8 89C1                <1>     mov ecx, eax
    79 00004CBA FFC9                <1>     dec ecx
    80 00004CBC F2AE                <1>     repne scasb         ;Search for the terminating null
    81 00004CBE C647FF24            <1>     mov byte [rdi - 1], "$" ;Replace with dos string terminator
    82 00004CC2 E8A5F7FFFF          <1>     call printString 
    83 00004CC7 C647FF00            <1>     mov byte [rdi - 1], 0   ;Replace with sane string terminator
    84 00004CCB 58                  <1>     pop rax
    85 00004CCC 84C0                <1>     test al, al ;Is this zero?
    86 00004CCE 7450                <1>     jz .proceedNormalWrite  ;Now print reading/writing etc
    87 00004CD0 E998000000          <1>     jmp .userInput    ;Else, print crlf and proceed to get input
    88                              <1> .redirDefault:
    89                              <1> ;Always jumped to with rdi in the error code. Thus, this will print only
    90                              <1> ; this line with no reading/writing etc. rdi is above errShrFul here
    91                              <1> ; and also not a table offset so definitely wont accidentally try print
    92                              <1> ; additional information
    93 00004CD5 488D15B4C3FFFF      <1>     lea rdx, genNetErr  ;Set the generic network error message
    94 00004CDC EB35                <1>     jmp short .redirDefProceed
    95                              <1> .shareErr:
    96                              <1> ;Now ensure our error code is in the table, set to GF error if not.
    97 00004CDE BA1F000000          <1>     mov edx, errGF
    98 00004CE3 81FF24000000        <1>     cmp edi, errShrFul
    99 00004CE9 0F47FA              <1>     cmova edi, edx
   100                              <1> .driverErr:
   101 00004CEC BA1F000000          <1>     mov edx, errGF      ;If we have an error below Driver Error 0, Gen. Err.
   102 00004CF1 81FF13000000        <1>     cmp edi, drvErrShft
   103 00004CF7 0F42FA              <1>     cmovb edi, edx
   104 00004CFA 81EF13000000        <1>     sub edi, drvErrShft ;Now reduce the error code to be a table offset
   105 00004D00 57                  <1>     push rdi    ;Save the error code for checking
   106 00004D01 488D154DC2FFFF      <1>     lea rdx, errMsgPtrTbl
   107 00004D08 4887FA              <1>     xchg rdi, rdx   ;Swap error code and table base
   108 00004D0B 0FB71457            <1>     movzx edx, word [rdi + 2*rdx]   ;Get the word offset in rdx
   109 00004D0F 4801FA              <1>     add rdx, rdi            ;Now add the table base!
   110 00004D12 5F                  <1>     pop rdi
   111                              <1> .redirDefProceed:
   112 00004D13 E854F7FFFF          <1>     call printString        ;Call DOS to print first part of message
   113                              <1>     ;Now we handle any codes above errNoFCB - drvErrShft as 
   114                              <1>     ; to not print anything other than the string in the table!
   115                              <1>     ;cmp edi, errNoFCB - drvErrShft
   116 00004D18 81FF0F000000        <1>     cmp edi, errIDC - drvErrShft
   117 00004D1E 734D                <1>     jae .userInput  ;IDC also triggers this skip
   118                              <1> .proceedNormalWrite:
   119 00004D20 488D1587C3FFFF      <1>     lea rdx, readMsg
   120 00004D27 488D3D8FC3FFFF      <1>     lea rdi, writeMsg
   121 00004D2E F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
   122 00004D31 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
   123 00004D35 E832F7FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
   124                              <1> 
   125 00004D3A F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
   126 00004D3D 0F8504010000        <1>     jnz .charError
   127                              <1> ;Disk error continues here
   128 00004D43 488D155DC3FFFF      <1>     lea rdx, drvMsg ;Drive message
   129 00004D4A E81DF7FFFF          <1>     call printString
   130 00004D4F 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   131 00004D51 80C241              <1>     add dl, "A" ;Add ASCII code
   132 00004D54 B402                <1>     mov ah, 02h ;Print char in dl
   133 00004D56 CD21                <1>     int 21h
   134                              <1>     
   135 00004D58 89D8                <1>     mov eax, ebx    ;Get bh into ah
   136 00004D5A 2500060000          <1>     and eax, 600h   ;Mask off bits 1 and 2 of bh
   137 00004D5F 3D00020000          <1>     cmp eax, 200h   ;Was this a FAT buffer?
   138 00004D64 7507                <1>     jne .userInput  ;If not proceed as normal.
   139                              <1>     ;Else, abort! Application cannot proceed if FAT is breaking apart...
   140 00004D66 B002                <1>     mov al, 2   ;Abort! Lose that FAT buffer
   141 00004D68 E9CE000000          <1>     jmp .cehExit
   142                              <1> .userInput:
   143 00004D6D E8F3F6FFFF          <1>     call printCRLF  ;Print new line
   144                              <1> ;Abort, Retry, Ignore, Fail is word order
   145                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   146                              <1> .userAbort:
   147                              <1> ;Abort is always an option
   148 00004D72 488D1553C3FFFF      <1>     lea rdx, abortMsg
   149 00004D79 E8EEF6FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
   150                              <1> .userRetry:
   151 00004D7E F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   152 00004D81 7418                <1>     jz .userIgnore    ;If clear, dont print message
   153 00004D83 488D155AC3FFFF      <1>     lea rdx, betweenMsg
   154 00004D8A E8DDF6FFFF          <1>     call printString
   155 00004D8F 488D1543C3FFFF      <1>     lea rdx, retryMsg
   156 00004D96 E8D1F6FFFF          <1>     call printString
   157                              <1> .userIgnore:
   158 00004D9B F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   159 00004D9E 7418                <1>     jz .userFail
   160 00004DA0 488D153DC3FFFF      <1>     lea rdx, betweenMsg
   161 00004DA7 E8C0F6FFFF          <1>     call printString
   162 00004DAC 488D151FC3FFFF      <1>     lea rdx, ignoreMsg
   163 00004DB3 E8B4F6FFFF          <1>     call printString
   164                              <1> .userFail:
   165 00004DB8 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   166 00004DBB 7418                <1>     jz .userMsgEnd
   167 00004DBD 488D1520C3FFFF      <1>     lea rdx, betweenMsg
   168 00004DC4 E8A3F6FFFF          <1>     call printString
   169 00004DC9 488D150FC3FFFF      <1>     lea rdx, failMsg
   170 00004DD0 E897F6FFFF          <1>     call printString
   171                              <1> .userMsgEnd:
   172 00004DD5 488D150BC3FFFF      <1>     lea rdx, endMsg
   173 00004DDC E88BF6FFFF          <1>     call printString
   174                              <1> ;Get user input now 
   175 00004DE1 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   176 00004DE3 488D3D00C3FFFF      <1>     lea rdi, i24Resp ;Go to start of string
   177 00004DEA B8010C0000          <1>     mov eax, 0C01h ;Flush and get STDIN without Console Echo
   178 00004DEF CD21                <1>     int 21h ;Get char in al
   179 00004DF1 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   180 00004DF3 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   181 00004DF5 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   182                              <1> .uip1:
   183 00004DF7 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   184 00004DF8 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   185 00004DFA FFC1                <1>     inc ecx
   186 00004DFC 81F904000000        <1>     cmp ecx, 4
   187 00004E02 75F3                <1>     jne .uip1
   188 00004E04 E964FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   189                              <1> .validInput:
   190 00004E09 E857F6FFFF          <1>     call printCRLF   ;Note the input was accepted
   191 00004E0E 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   192                              <1> ;Now check if the input is permitted
   193 00004E10 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   194 00004E12 7427                <1>     je .cehExit
   195 00004E14 84C0                <1>     test al, al ;Check if 0 => Ignore
   196 00004E16 740F                <1>     je .viIgnore
   197 00004E18 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   198 00004E1A 7416                <1>     je .viRetry
   199                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   200 00004E1C F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   201 00004E1F 0F8448FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   202 00004E25 EB14                <1>     jmp short .cehExit
   203                              <1> .viIgnore:
   204 00004E27 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   205 00004E2A 0F843DFFFFFF        <1>     jz .userInput
   206 00004E30 EB09                <1>     jmp short .cehExit
   207                              <1> .viRetry:
   208 00004E32 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   209 00004E35 0F8432FFFFFF        <1>     jz .userInput
   210                              <1> .cehExit:
   211 00004E3B E845000000          <1>     call errRetHdls
   212 00004E40 5E                  <1>     pop rsi
   213 00004E41 5F                  <1>     pop rdi
   214 00004E42 5A                  <1>     pop rdx
   215 00004E43 59                  <1>     pop rcx
   216 00004E44 5B                  <1>     pop rbx
   217 00004E45 48CF                <1>     iretq
   218                              <1> .charError:
   219 00004E47 C6054FB2FFFFFF      <1>     mov byte [failDrv], -1  ;Clear the failing drive 
   220 00004E4E B908000000          <1>     mov ecx, 8  ;8 chars in device name
   221 00004E53 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   222                              <1> .ce1:
   223 00004E5A AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   224 00004E5B 88C2                <1>     mov dl, al  ;Move char into dl
   225 00004E5D B402                <1>     mov ah, 02h
   226 00004E5F CD21                <1>     int 21h ;Print char
   227 00004E61 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   228 00004E63 E905FFFFFF          <1>     jmp .userInput
   229                              <1> 
   230                              <1> 
   231                              <1> errSwapHdls:
   232                              <1> ;Swaps STDIO to STDERR
   233                              <1> ;Start by tmporarily moving the stderr handler into stdio
   234                              <1> ;In principle dangerous, but since we cannot exit our routine, its oki.
   235 00004E68 50                  <1>     push rax
   236 00004E69 53                  <1>     push rbx
   237 00004E6A E833000000          <1>     call getJftPtr  ;Get the jft pointer into rbx. Saves rax
   238 00004E6F 0FB703              <1>     movzx eax, word [rbx]       ;Get STDIO into ax
   239 00004E72 66890526B2FFFF      <1>     mov word [errHdls], ax      ;Save em
   240 00004E79 0FB64302            <1>     movzx eax, byte [rbx + 2]   ;Now get the STDERR SFTndx in al
   241 00004E7D 88C4                <1>     mov ah, al                  ;Move STDERR hdl into ah too 
   242 00004E7F 668903              <1>     mov word [rbx], ax          ;And set STDIO to STDERR
   243 00004E82 5B                  <1>     pop rbx
   244 00004E83 58                  <1>     pop rax
   245                              <1>     return
    13                              <2> %%_ret:
    14 00004E84 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   246                              <1> 
   247                              <1> errRetHdls:
   248                              <1> ;Returns STDIO from STDERR.
   249 00004E85 50                  <1>     push rax
   250 00004E86 53                  <1>     push rbx
   251 00004E87 E816000000          <1>     call getJftPtr  ;Get ptr in rbx. Preserves rax.
   252 00004E8C 0FB7050CB2FFFF      <1>     movzx eax, word [errHdls]
   253 00004E93 66C70503B2FFFFFFFF  <1>     mov word [errHdls], -1  ;Reset values
   254 00004E9C 668903              <1>     mov word [rbx], ax      ;Store the handle word back
   255 00004E9F 5B                  <1>     pop rbx
   256 00004EA0 58                  <1>     pop rax
   257                              <1>     return
    13                              <2> %%_ret:
    14 00004EA1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   258                              <1> 
   259                              <1> getJftPtr:
   260                              <1> ;Preserves all registers except rbx.
   261                              <1> ;Output: rbx -> JFT of current task
   262 00004EA2 50                  <1>     push rax        ;Save rax
   263 00004EA3 B800510000          <1>     mov eax, 5100h  ;Get current PSP in rbx
   264 00004EA8 CD21                <1>     int 21h
   265 00004EAA 58                  <1>     pop rax
   266 00004EAB 66817B4E1400        <1>     cmp word [rbx + psp.jftSize], 20    ;If >20, pspjft is ptr to real jft
   267 00004EB1 7605                <1>     jbe .pspJftExit
   268 00004EB3 488B5B2A            <1>     mov rbx, qword [rbx + psp.externalJFTPtr]   ;Get ptr to jft from the psp
   269                              <1>     return
    13                              <2> %%_ret:
    14 00004EB7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   270                              <1> .pspJftExit:
   271 00004EB8 488D5B2A            <1>     lea rbx, qword [rbx + psp.jobFileTbl]       ;Make into a ptr to jft in psp
   272                              <1>     return
    13                              <2> %%_ret:
    14 00004EBC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                                  endOfAlloc: ;End of alloc
    23                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00004EBD B430                <1>     mov ah, 30h
     4 00004EBF CD21                <1>     int 21h
     5 00004EC1 3C01                <1>     cmp al, 01h ;Version 1
     6 00004EC3 760D                <1>     jbe .okVersion
     7 00004EC5 488D15CF040000      <1>     lea rdx, badVerStr
     8 00004ECC B409                <1>     mov ah, 09h
     9 00004ECE CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00004ED0 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00004ED2 800DC3B1FFFF80      <1>     or byte [statFlg1], inLdr   ;Ok now we start our special work
    15 00004ED9 4C89052FB1FFFF      <1>     mov qword [pspPtr], r8      ;Store PSP ptr in internal var 
    16                              <1> ;Call for simple internationalisation data
    17 00004EE0 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    18 00004EE5 CD21                <1>     int 21h
    19 00004EE7 3CFF                <1>     cmp al, -1
    20 00004EE9 7412                <1>     je .skipSwitch
    21 00004EEB 881541B1FFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    22 00004EF1 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    23 00004EF4 7507                <1>     jne .skipSwitch
    24 00004EF6 C60534B1FFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    25                              <1> .skipSwitch:
    26 00004EFD B800380000          <1>     mov eax, 3800h  ;Get current country data
    27 00004F02 488D152AB1FFFF      <1>     lea rdx, ctryData
    28 00004F09 CD21                <1>     int 21h ;Write the data to the internal country table 
    29                              <1> ;Now eject all the unneeded space, to make space for allocating.
    30                              <1> ;Thus the allocations in the parsing should never fail (but still may)
    31 00004F0B 488D25(00320000)    <1>     lea rsp, initEoA
    32 00004F12 4889E3              <1>     mov rbx, rsp
    33 00004F15 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    34 00004F18 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
    35 00004F1C C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    36 00004F1F B8004A0000          <1>     mov eax, 4A00h ;Realloc
    37 00004F24 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    38 00004F27 CD21                <1>     int 21h
    39 00004F29 72A5                <1>     jc .exitBad 
    40 00004F2B 4D89C8              <1>     mov r8, r9  ;Reset r8 to point to the psp
    41                              <1> ;Now space has been made, time to parse the command tail
    42 00004F2E E819010000          <1>     call parseCmdLine   ;Now parse the command tail.
    43 00004F33 E81D030000          <1>     call doEnv          ;Now enact the command tail actions
    44 00004F38 E89AFAFFFF          <1>     call resetIDTentries    ;Setup IDT entries now. 
    45 00004F3D F60558B1FFFF01      <1>     test byte [statFlg1], permaShell ;Are we perma?
    46 00004F44 0F8490000000        <1>     jz .notMaster   ;Jump if not!
    47                              <1> ;Ok so we are master COMMAND.COM
    48                              <1> ;Now make myself my own parent task. We already are the current psp
    49 00004F4A 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8
    50                              <1> ;Setup Int 2Eh and the addresses in my psp to terminate back to
    51 00004F4E 488D15FAFCFFFF      <1>     lea rdx, critErrorHandler
    52 00004F55 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    53 00004F59 488D1503FCFFFF      <1>     lea rdx, ctrlCHandler
    54 00004F60 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    55 00004F64 488D150FC6FFFF      <1>     lea rdx, appRet
    56 00004F6B 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    57 00004F6F 488D15A2CBFFFF      <1>     lea rdx, int2Eh
    58 00004F76 B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    59 00004F7B CD21                <1>     int 21h
    60                              <1> ;Always get the Autoexec from the root dir we are booting into
    61 00004F7D E8F2F6FFFF          <1>     call getCurrentDrive    ;Get 0 based drive number in al
    62 00004F82 0441                <1>     add al, "A"
    63 00004F84 8805A0BFFFFF        <1>     mov byte [autoSpec], al ;
    64                              <1> ;Now, open AUTOEXEC.BAT. 
    65 00004F8A 488D1599BFFFFF      <1>     lea rdx, autoSpec
    66 00004F91 B8003D0000          <1>     mov eax, 3D00h  ;Open file
    67 00004F96 CD21                <1>     int 21h
    68 00004F98 7212                <1>     jc .noAutoexec
    69                              <1>     ;Ok, we know the file exists, close it and finish init through it, ignoring 
    70                              <1>     ; the normal hello there! string
    71 00004F9A 89C3                <1>     mov ebx, eax
    72 00004F9C B8003E0000          <1>     mov eax, 3E00h  ;Close file
    73 00004FA1 CD21                <1>     int 21h
    74                              <1> ;Now we do the same as at the end, prepping for jettisoning
    75 00004FA3 31D2                <1>     xor edx, edx
    76 00004FA5 FFCA                <1>     dec edx             ;Setup that we want to process Autoexec
    77 00004FA7 E954000000          <1>     jmp .prepStart
    78                              <1> .noAutoexec:
    79                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    80 00004FAC 488D1501B9FFFF      <1>     lea rdx, crlf
    81 00004FB3 B409                <1>     mov ah, 09h
    82 00004FB5 CD21                <1>     int 21h
    83 00004FB7 800DDEB0FFFF40      <1>     or byte [statFlg1], inLdrDT
    84 00004FBE E814E1FFFF          <1>     call time.init
    85 00004FC3 E861DFFFFF          <1>     call date.init
    86 00004FC8 8025CDB0FFFFBF      <1>     and byte [statFlg1], ~inLdrDT
    87 00004FCF 488D15DEB8FFFF      <1>     lea rdx, crlf
    88 00004FD6 B409                <1>     mov ah, 09h
    89 00004FD8 CD21                <1>     int 21h
    90                              <1>     ;Now fall thru.
    91                              <1> .notMaster:    
    92                              <1> ;Finish by printing INIT string.
    93 00004FDA F605BBB0FFFF04      <1>     test byte [statFlg1], inSingle  ;Are we in single mode?
    94 00004FE1 7531                <1>     jnz .singleCom
    95 00004FE3 488D1578030000      <1>     lea rdx, initString
    96 00004FEA B409                <1>     mov ah, 09h
    97 00004FEC CD21                <1>     int 21h ;Print init string
    98 00004FEE E883E7FFFF          <1>     call version.printVersionNumber
    99 00004FF3 488D157B030000      <1>     lea rdx, initString2
   100 00004FFA B409                <1>     mov ah, 09h
   101 00004FFC CD21                <1>     int 21h ;Print init string
   102 00004FFE 31D2                <1>     xor edx, edx        ;Indicate we DONT want to do Autoexec processing
   103                              <1> .prepStart:
   104 00005000 E822000000          <1>     call computeStackPtr    ;Returns the stack ptr in rbx and var
   105 00005005 4889DC              <1>     mov rsp, rbx        ;Move the stack pointer to this address
   106 00005008 80258DB0FFFF7F      <1>     and byte [statFlg1], ~inLdr    ;Special work complete :-)
   107 0000500F E9DAC0FFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   108                              <1> .singleCom:
   109                              <1> ;In single command mode, check the length of the input string was not 0.
   110                              <1> ; If it was, exit, else proceed
   111 00005014 803D50B1FFFF00      <1>     cmp byte [inBuffer + 1], 0
   112 0000501B 0F8474E9FFFF        <1>     je exit
   113 00005021 31D2                <1>     xor edx, edx
   114 00005023 FFCA                <1>     dec edx             ;Pretend that we want to process Autoexec
   115 00005025 EBD9                <1>     jmp short .prepStart
   116                              <1> 
   117                              <1> computeStackPtr:
   118                              <1>     ;Now we add the stack to the alloc and paragraph align
   119 00005027 488D1D8FFEFFFF      <1>     lea rbx, endOfAlloc
   120 0000502E 4881C340060000      <1>     add rbx, stackSize
   121 00005035 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   122 0000503C 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   123 00005040 48C1E304            <1>     shl rbx, 4
   124 00005044 48891DBAAFFFFF      <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   125                              <1>     return
    13                              <2> %%_ret:
    14 0000504B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   126                              <1> 
   127                              <1> parseCmdLine:
   128                              <1> ;COMMAND [drive:][path][device][/E:n][/P][/C string]
   129                              <1> ;[drive:] gives the default drive for COMSPEC. Default is default drive.
   130                              <1> ;[path] gives the search path to search for when searching for COMSPEC.
   131                              <1> ;   Default is root directory. Hence default COMSPEC is _:\COMMAND.COM
   132                              <1> ;[device] gives the default device to set STDIO to and reset to if we error
   133                              <1> ;           MAX 8 chars long name ([device] can be colon terminated).
   134                              <1> ;           Default is CON
   135                              <1> ;[/C string] means execute the string as a command and terminate immediately
   136                              <1> ;   This is single command mode, sets inSingle bit. Similar to int 2Eh.
   137                              <1> ;[/P] means make the instance of COMMAND.COM permanent.
   138                              <1> ;[/E:n] where n is a base 10 value between 160-32768, giving the size of the 
   139                              <1> ; environment to allocate in bytes. Only works if COMMAND.COM is to be 
   140                              <1> ; permanent. Needs a colon after E. 
   141                              <1> ;
   142                              <1> ;Start by setting up the default comspec dir, null terminated
   143 0000504C E823F6FFFF          <1>     call getCurrentDrive    ;Get 0 based drive number in al
   144 00005051 0441                <1>     add al, "A"
   145 00005053 B43A                <1>     mov ah, ":"
   146 00005055 488D3D0AB6FFFF      <1>     lea rdi, comspecDir
   147 0000505C 66AB                <1>     stosw   ;Store drive specifier
   148 0000505E 0FB605CCAFFFFF      <1>     movzx eax, byte [pathSep]
   149 00005065 66AB                <1>     stosw   ;Store the pathsep and a terminating <NUL>
   150                              <1> 
   151 00005067 E850F9FFFF          <1>     call setDTA                     ;Ensure any searches dont trample on the tail!
   152 0000506C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the start of tail chars
   153                              <1> .parseLp:
   154 00005073 E83FF6FFFF          <1>     call skipDelimiters             ;Strip delims
   155 00005078 AC                  <1>     lodsb
   156 00005079 48FFCE              <1>     dec rsi ;Point to first non-delimiter char
   157 0000507C 3C0D                <1>     cmp al, CR
   158 0000507E 0F847C010000        <1>     je .endScan
   159 00005084 3A05A8AFFFFF        <1>     cmp al, byte [switchChar]       ;Is this a switchchar?
   160 0000508A 752D                <1>     jne .file
   161                              <1> .switch:
   162 0000508C 48FFC6              <1>     inc rsi ;Go past the switch char
   163 0000508F AC                  <1>     lodsb   ;Get first char past switch, advance rsi
   164 00005090 E807F6FFFF          <1>     call ucChar
   165 00005095 3C43                <1>     cmp al, "C"
   166 00005097 0F842F010000        <1>     je .switchStr
   167 0000509D 3C50                <1>     cmp al, "P"
   168 0000509F 0F8403010000        <1>     je .switchPerma
   169 000050A5 3C45                <1>     cmp al, "E"
   170 000050A7 0F84B0000000        <1>     je .switchEnv
   171 000050AD 48FFCE              <1>     dec rsi ;Now point rsi back to this char
   172                              <1> .badparm:
   173 000050B0 488D15E1B9FFFF      <1>     lea rdx, badParm
   174 000050B7 EBBA                <1>     jmp short .parseLp
   175                              <1> ;-----------------------------------------------------------------
   176                              <1> ;Search for the filespec
   177                              <1> .file:
   178 000050B9 E885F7FFFF          <1>     call copyArgumentToSearchSpec   ;Moves rsi to char past the delimiter
   179 000050BE 48FFCE              <1>     dec rsi ;Point to the delimiter itself
   180 000050C1 488D15D1B3FFFF      <1>     lea rdx, searchSpec
   181 000050C8 B8004E0000          <1>     mov eax, 4E00h  ;Find First
   182 000050CD B910000000          <1>     mov ecx, dirDirectory   ;Return Normal, RO, Dir or Char
   183 000050D2 CD21                <1>     int 21h
   184 000050D4 7319                <1>     jnc .charOrDir
   185                              <1> ;Just double check if the spec was the root dir. If so, proceed ok.
   186 000050D6 8B02                <1>     mov eax, dword [rdx]    ;Get the first four chars
   187 000050D8 30C0                <1>     xor al, al
   188 000050DA 3D003A5C00          <1>     cmp eax, 005C3A00h  ;Was this a <NUL>:\<NUL>?
   189 000050DF 741C                <1>     je .dir ;If so, root dir specified, all oki!
   190                              <1> .badSpec:
   191                              <1> ;rsi has been moved past the argument so we can keep proceeding with processing
   192 000050E1 488D15CB020000      <1>     lea rdx, badCmdDir
   193                              <1> .bs0:
   194 000050E8 E87FF3FFFF          <1>     call printString
   195                              <1> .plhop:
   196 000050ED EB84                <1>     jmp short .parseLp
   197                              <1> ;-----------------------------------------------------------------
   198                              <1> ;Check if a char or directory here
   199                              <1> .charOrDir:
   200 000050EF 8A053FB0FFFF        <1>     mov al, byte [cmdFFBlock + ffBlock.attribFnd]
   201 000050F5 2450                <1>     and al, dirCharDev | dirDirectory
   202 000050F7 74E8                <1>     jz .badSpec
   203 000050F9 A840                <1>     test al, dirCharDev
   204 000050FB 7525                <1>     jnz .charDev
   205                              <1> ;Here if a directory. Save it null terminated in comspecDir.
   206                              <1> .dir:
   207 000050FD 56                  <1>     push rsi
   208 000050FE 488D3594B3FFFF      <1>     lea rsi, searchSpec 
   209 00005105 488D3D5AB5FFFF      <1>     lea rdi, comspecDir
   210 0000510C E877F5FFFF          <1>     call strcpy2
   211 00005111 B811120000          <1>     mov eax, 1211h  ;Uppercase the pathspec
   212 00005116 CD2F                <1>     int 2Fh         ;DOS 3.3 does't do this hehe 0:-)
   213 00005118 5E                  <1>     pop rsi
   214 00005119 C605D7020000FF      <1>     mov byte [initNewSpec], -1  ;Set, we have a new comspec
   215 00005120 EBCB                <1>     jmp short .plhop
   216                              <1> ;-----------------------------------------------------------------
   217                              <1> ;Handle char dev here
   218                              <1> .charDev:
   219                              <1> ;Check the name is max 8 chars in length
   220 00005122 488D3D70B3FFFF      <1>     lea rdi, searchSpec
   221 00005129 E864F5FFFF          <1>     call strlen ;Get len plus <NUL> in ecx. Cant be more than 8+1 for <NUL>
   222 0000512E 81F909000000        <1>     cmp ecx, 9  ;This can literally never happen but never hurts to be safe :)
   223 00005134 771E                <1>     ja .badChar
   224 00005136 56                  <1>     push rsi    ;Save offset into cmdTail on stack
   225 00005137 488D355BB3FFFF      <1>     lea rsi, searchSpec
   226 0000513E 488D3DDCBDFFFF      <1>     lea rdi, devName
   227 00005145 E82FF5FFFF          <1>     call strcpy ;Copy this string over
   228 0000514A 5E                  <1>     pop rsi
   229 0000514B C605A6020000FF      <1>     mov byte [initNewDev], -1   ;Set this byte now we have a new dev!
   230                              <1> .plhop1:
   231 00005152 EB99                <1>     jmp short .plhop    ;parseLp
   232                              <1> .badChar:
   233 00005154 488D15F0BAFFFF      <1>     lea rdx, badDev
   234                              <1> .bs1:
   235 0000515B EB8B                <1>     jmp short .bs0
   236                              <1> ;-----------------------------------------------------------------
   237                              <1> .switchEnv:
   238 0000515D AC                  <1>     lodsb
   239 0000515E 48FFCE              <1>     dec rsi
   240 00005161 3C3A                <1>     cmp al, ":"
   241 00005163 0F8547FFFFFF        <1>     jne .badparm
   242 00005169 48FFC6              <1>     inc rsi ;Now point past teh colon, skip any delimiters
   243 0000516C E846F5FFFF          <1>     call skipDelimiters
   244 00005171 AC                  <1>     lodsb       ;Get the first non-delimiter
   245 00005172 48FFCE              <1>     dec rsi     ;Point back at it
   246 00005175 3C0D                <1>     cmp al, CR
   247 00005177 0F8433FFFFFF        <1>     je .badparm     ;Print bad arg, rsi positioned to terminate parsing now
   248                              <1>     ;Else, rsi now pointing at the first number. Do maths :)
   249 0000517D E8EEF7FFFF          <1>     call getNum ;Move rsi to first non digit/9th digit if too many digits
   250 00005182 0F8228FFFFFF        <1>     jc .badparm    ;Bad parameter error!
   251 00005188 3D00800000          <1>     cmp eax, 8000h
   252 0000518D 7710                <1>     ja .badEnv
   253 0000518F 3DA0000000          <1>     cmp eax, 0A0h
   254 00005194 7209                <1>     jb .badEnv
   255 00005196 6689055C020000      <1>     mov word [initEnvSz], ax    ;Store the allocated size here
   256                              <1> .plhop2:
   257 0000519D EBB3                <1>     jmp short .plhop1  ;parseLp
   258                              <1> .badEnv:
   259 0000519F 488D1536020000      <1>     lea rdx, badEnvSz
   260 000051A6 EBB3                <1>     jmp short .bs1
   261                              <1> ;-----------------------------------------------------------------
   262                              <1> .switchPerma:
   263 000051A8 AC                  <1>     lodsb   ;Get the second char after the P
   264 000051A9 48FFCE              <1>     dec rsi ;Point back at it
   265 000051AC 3C0D                <1>     cmp al, CR
   266 000051AE 7413                <1>     je .spEmbCr ;Allow CR after the P
   267 000051B0 3A057CAEFFFF        <1>     cmp al, byte [switchChar]
   268 000051B6 740B                <1>     je .spEmbCr ;Allow switch char after P
   269 000051B8 E808F5FFFF          <1>     call isALdelimiter
   270 000051BD 0F85EDFEFFFF        <1>     jne .badparm
   271                              <1> .spEmbCr:
   272 000051C3 800DD2AEFFFF01      <1>     or byte [statFlg1], permaShell  ;Set the bit
   273 000051CA EBD1                <1>     jmp short .plhop2  ;parseLp
   274                              <1> ;-----------------------------------------------------------------
   275                              <1> .switchStr:
   276 000051CC AC                  <1>     lodsb       ;Get the char after the C
   277 000051CD 48FFCE              <1>     dec rsi     ;Point back at it
   278 000051D0 3C0D                <1>     cmp al, CR
   279 000051D2 740B                <1>     je .ssembCr         ;Embedded CR ok
   280 000051D4 E8ECF4FFFF          <1>     call isALdelimiter  ;Char immediately after the C must be a delimiter
   281 000051D9 0F85D1FEFFFF        <1>     jne .badparm
   282                              <1> .ssembCr:
   283 000051DF E8D3F4FFFF          <1>     call skipDelimiters     ;Move rsi past the delimiters
   284 000051E4 488D3D81AFFFFF      <1>     lea rdi, inBuffer + 2   ;Store the command in the inBuffer as if typed in
   285                              <1> .ssLp:
   286 000051EB AC                  <1>     lodsb
   287 000051EC AA                  <1>     stosb
   288 000051ED 3C0D                <1>     cmp al, CR
   289 000051EF 7408                <1>     je .ssOk
   290 000051F1 FE0574AFFFFF        <1>     inc byte [inBuffer + 1] ;Increment the char count
   291 000051F7 EBF2                <1>     jmp short .ssLp
   292                              <1> .ssOk:
   293 000051F9 800D9CAEFFFF04      <1>     or byte [statFlg1], inSingle    ;Set the single flag
   294                              <1> ;Now we fall through as we have processed the cmd line and set the flag
   295                              <1> ;-----------------------------------------------------------------
   296                              <1> .endScan:
   297                              <1> ;Now copy our name to the end of the dir specified
   298 00005200 488D3D5FB4FFFF      <1>     lea rdi, comspecDir
   299 00005207 E886F4FFFF          <1>     call strlen ;Get the length in ecx, preserve rdi
   300 0000520C FFC9                <1>     dec ecx ;Point to null terminator
   301 0000520E 8A051DAEFFFF        <1>     mov al, byte [pathSep]
   302 00005214 4801CF              <1>     add rdi, rcx    ;Now point to the null
   303 00005217 3847FF              <1>     cmp byte [rdi - 1], al
   304 0000521A 7401                <1>     je .esSkipPathsep
   305 0000521C AA                  <1>     stosb
   306                              <1> .esSkipPathsep:
   307 0000521D 488D3525BDFFFF      <1>     lea rsi, cspec
   308 00005224 E850F4FFFF          <1>     call strcpy ;Now copy over the name of our beloved shell
   309 00005229 E812000000          <1>     call .replacestdio
   310                              <1> ;Ensure that on exit, if both inSingle bit and permaShell are set, inSingle 
   311                              <1> ; wins. Unless this is the first boot, in which case, we ignore it
   312 0000522E F60567AEFFFF04      <1>     test byte [statFlg1], inSingle
   313                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00005235 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00005237 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   314 00005238 80255DAEFFFFFE      <1>     and byte [statFlg1], ~permaShell ;Else, ensure perma is deactivated
   315                              <1>     return
    13                              <2> %%_ret:
    14 0000523F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   316                              <1> .replacestdio:
   317 00005240 F605B1010000FF      <1>     test byte [initNewDev], -1
   318                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00005247 74(3F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   319 00005249 488D15D1BCFFFF      <1>     lea rdx, devName
   320 00005250 E9E6DFFFFF          <1>     jmp ctty.loadSwap  ;Return through the return instruction in ctty
   321                              <1> 
   322                              <1> doEnv:
   323                              <1> ;Will do the environment adjustments as needed
   324 00005255 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
   325 00005259 4885F6              <1>     test rsi, rsi
   326 0000525C 7447                <1>     jz .noInitEnv
   327 0000525E 66813D920100000000  <1>     cmp word [initEnvSz], 0 ;If an env exists and /E not specified, return!
   328                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00005267 74(3F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   329                              <1> ;Now if no new comspec has been given, we allocate a new block, 
   330                              <1> ;copy the environment from the master and free the original block.
   331                              <1> ;If the block we allocate is smaller than the original block, 
   332                              <1> ; print out of env space and stop there
   333                              <1> ;Else, we simply allocate and create a fresh new environment with the new 
   334                              <1> ; comspec. 
   335 00005269 F60587010000FF      <1>     test byte [initNewSpec], -1  ;If we have a new comspec, create afresh
   336 00005270 752E                <1>     jnz .prepNewEnv
   337                              <1>     ;Else, we create new alloc and copy master into it
   338 00005272 E867000000          <1>     call .allocEnv
   339 00005277 4889C7              <1>     mov rdi, rax        ;Move pointer into rdi
   340 0000527A E8CC000000          <1>     call getMasterEnv   ;Get the current active master environment in rsi
   341 0000527F 57                  <1>     push rdi            ;Save the start of the environment block
   342 00005280 E893000000          <1>     call .cpEnv         ;Copy the environment
   343 00005285 5F                  <1>     pop rdi
   344 00005286 E805000000          <1>     call .freeCurrentEnv
   345 0000528B 4989783E            <1>     mov qword [r8 + psp.envPtr], rdi    ;Now set us as the env ptr
   346                              <1>     return  
    13                              <2> %%_ret:
    14 0000528F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   347                              <1> .freeCurrentEnv:
   348 00005290 4150                <1>     push r8
   349 00005292 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the original envPtr to free
   350 00005296 B800490000          <1>     mov eax, 4900h
   351 0000529B CD21                <1>     int 21h
   352 0000529D 4158                <1>     pop r8
   353                              <1>     return
    13                              <2> %%_ret:
    14 0000529F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   354                              <1> .prepNewEnv:
   355 000052A0 E8EBFFFFFF          <1>     call .freeCurrentEnv
   356                              <1> .noInitEnv:
   357                              <1> ;Build the initial block.
   358 000052A5 E834000000          <1>     call .allocEnv
   359 000052AA 4889C7              <1>     mov rdi, rax        ;Move rdi to the environment
   360 000052AD 4989783E            <1>     mov qword [r8 + psp.envPtr], rdi    ;Now store this as the env pointer
   361 000052B1 57                  <1>     push rdi            ;Save the environment ptr!
   362 000052B2 488D3581BCFFFF      <1>     lea rsi, pathEVar
   363 000052B9 E8BBF3FFFF          <1>     call strcpy
   364 000052BE 488D357BBCFFFF      <1>     lea rsi, comspecEVar
   365 000052C5 E8AFF3FFFF          <1>     call strcpy
   366 000052CA 48FFCF              <1>     dec rdi ;Write over the terminating null
   367 000052CD 488D3592B3FFFF      <1>     lea rsi, comspecDir    ;Now copy the actual comspec! 
   368 000052D4 E8A0F3FFFF          <1>     call strcpy 
   369 000052D9 30C0                <1>     xor al, al
   370 000052DB AA                  <1>     stosb   ;Store the second terminating null
   371 000052DC 5F                  <1>     pop rdi ;Get back the pointer to the start of the env
   372                              <1>     return
    13                              <2> %%_ret:
    14 000052DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   373                              <1> 
   374                              <1> .allocEnv:
   375                              <1> ;Output: rax -> Ptr to the environment block. 
   376                              <1> ;   If anything goes wrong, error message and exit the shell!
   377 000052DE 0FB71D14010000      <1>     movzx ebx, word [initEnvSz]
   378 000052E5 85DB                <1>     test ebx, ebx   ;If this is 0, allocate 160 bytes
   379 000052E7 750C                <1>     jnz .goAlloc
   380 000052E9 BBA0000000          <1>     mov ebx, 0A0h    ;160 bytes
   381 000052EE 66891D04010000      <1>     mov word [initEnvSz], bx    ;Overwrite
   382                              <1> .goAlloc:
   383 000052F5 81C30F000000        <1>     add ebx, 0Fh
   384 000052FB C1EB04              <1>     shr ebx, 4  ;Round up and turn into paragraphs
   385 000052FE B800480000          <1>     mov eax, 4800h
   386 00005303 CD21                <1>     int 21h
   387                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00005305 73(DD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   388 00005307 488D1576BBFFFF      <1>     lea rdx, memBad1
   389 0000530E E859F1FFFF          <1>     call printString
   390 00005313 E994E6FFFF          <1>     jmp exit.ouch 
   391                              <1> 
   392                              <1> .cpEnv:
   393                              <1> ;Copies the environment
   394                              <1> ;Input: rsi -> Source to copy from
   395                              <1> ;       rdi -> Destination to copy to
   396 00005318 0FB70DDA000000      <1>     movzx ecx, word [initEnvSz]
   397                              <1> .lp:
   398 0000531F AC                  <1>     lodsb
   399 00005320 AA                  <1>     stosb
   400 00005321 84C0                <1>     test al, al
   401 00005323 750A                <1>     jnz .notNul
   402 00005325 3806                <1>     cmp byte [rsi], al
   403 00005327 7506                <1>     jnz .notNul
   404                              <1>     ;Here, we have encountered our double null!
   405 00005329 FFC9                <1>     dec ecx ;Now we check if we have space to store the second char
   406 0000532B 7406                <1>     jz .err ;If we dont have space for the last null kill last non-null char
   407 0000532D AA                  <1>     stosb
   408                              <1>     return
    13                              <2> %%_ret:
    14 0000532E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   409                              <1> .notNul:
   410 0000532F FFC9                <1>     dec ecx ;One less char to copy over
   411 00005331 75EC                <1>     jnz .lp
   412                              <1> .err:
   413 00005333 4881EF02000000      <1>     sub rdi, 2
   414 0000533A 488D154BB6FFFF      <1>     lea rdx, noEnvSpace
   415 00005341 E826F1FFFF          <1>     call printString
   416 00005346 31C0                <1>     xor eax, eax
   417 00005348 66AB                <1>     stosw   ;Store 0 word
   418                              <1>     return
    13                              <2> %%_ret:
    14 0000534A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   419                              <1> 
   420                              <1> getMasterEnv:
   421                              <1> ;Walks the psp chain to the first self parent.
   422                              <1> ;Output: rsi -> Environment of the first self-parent program
   423 0000534B 4150                <1>     push r8
   424                              <1> .lp:
   425 0000534D 498B7022            <1>     mov rsi, qword [r8 + psp.parentPtr] ;Get the parent pointer
   426 00005351 4C39C6              <1>     cmp rsi, r8 ;Are we a self parent?
   427 00005354 7405                <1>     je .exit
   428 00005356 4989F0              <1>     mov r8, rsi ;Make the current psp the parent
   429 00005359 EBF2                <1>     jmp short .lp
   430                              <1> .exit:
   431 0000535B 4158                <1>     pop r8
   432 0000535D 488B763E            <1>     mov rsi, qword [rsi + psp.envPtr]   ;Get the environment pointer
   433                              <1>     return
    13                              <2> %%_ret:
    14 00005361 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   434                              <1> 
   435                              <1> 
   436                              <1> ;Loader Data here
   437                              <1> initString: 
   438 00005362 0D0A5343502F444F53- <1>     db CR,LF, "SCP/DOS Version $"
   438 0000536B 2056657273696F6E20- <1>
   438 00005374 24                  <1>
   439                              <1> initString2:
   440 00005375 0D0A436F7079726967- <1>     db CR,LF, "Copyright 2022, 2024, Yll Buzoku.",
   440 0000537E 687420323032322C20- <1>
   440 00005387 323032342C20596C6C- <1>
   440 00005390 2042757A6F6B752E    <1>
   441 00005398 0D0A24              <1>     db CR,LF,"$"
   442 0000539B 496E636F7272656374- <1> badVerStr:  db "Incorrect DOS version",CR,LF,"$"
   442 000053A4 20444F532076657273- <1>
   442 000053AD 696F6E0D0A24        <1>
   443 000053B3 537065636966696564- <1> badCmdDir:  db "Specified COMMAND search directory bad",CR,LF,"$"
   443 000053BC 20434F4D4D414E4420- <1>
   443 000053C5 736561726368206469- <1>
   443 000053CE 726563746F72792062- <1>
   443 000053D7 61640D0A24          <1>
   444 000053DC 496E76616C69642045- <1> badEnvSz:   db "Invalid Environment Size",CR,LF,"$"
   444 000053E5 6E7669726F6E6D656E- <1>
   444 000053EE 742053697A650D0A24  <1>
   445 000053F7 00                  <1> initNewSpec db 0    ;Set if a new comspec found and copied
   446 000053F8 00                  <1> initNewDev  db 0    ;Set if a new device found and copied
   447 000053F9 0000                <1> initEnvSz       dw 0  ;Max 7FFFh (32768) bytes. Default to 160. 0 means no /E:
    24                                  Segment stack1 nobits valign=16 vfollows=cmd
    25                                  ;This stack is only used during init of COMMAND.COM
    26 00000000 <res 3200h>                 dq stackSize dup (?)
    27                                  initEoA:    ;Initial end of allocation
    27          ------------------       info: assembly required 1+8+2 passes

