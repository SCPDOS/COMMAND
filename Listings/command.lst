     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (41h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> netFCBShare     equ 70h
   160                              <1> noInherit       equ 80h
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> 
   163                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 24h on disk full.
   164                              <1> ;Buffering on writes
   165                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   167                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1> readOnlyFile    equ 1h
   170                              <1> hiddenFile      equ 2h
   171                              <1> systemFile      equ 4h
   172                              <1> volumeLabel     equ 8h
   173                              <1> directoryFile   equ 10h ;Directory entry
   174                              <1> archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1> charDevFastOut  equ 10h ;If set, device supports Int 29h
   182                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   183                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   185                              <1> devCharDev      equ 80h ;If set, it is a char device!
   186                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   190                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1>  
   192                              <1> ;------------------------------------------------------------------------;
   193                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   194                              <1> ; to an internal buffer, and then copying it to the specified location
   195                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   196                              <1> ; another request for the same sector from the same device is made, so 
   197                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   198                              <1> ; size, selected according to the largest detected sector size during 
   199                              <1> ; the initial loadup.
   200                              <1> ;
   201                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   202                              <1> ;
   203                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   204                              <1> ;------------------------------------------------------------------------;
   205                              <1> 
   206                              <1> struc bufferHdr
   207 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   208 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   209 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   210 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   211 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   212 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   213 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   214 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   215 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   216                              <1>     .dataarea:             ;Points to the start of the data area
   217                              <1> endstruc
   218                              <1> ;Buffer Flag equates
   219                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   220                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   221                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   222                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   223                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   224                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   225                              <1> ;Note! A buffer is marked as referenced only when the application 
   226                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   227                              <1> ;------------------------------------------------------------------------;
   228                              <1> ; Memory control block for each memory arena
   229                              <1> ;------------------------------------------------------------------------;
   230                              <1> struc mcb
   231 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   232 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   233 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   234 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   235                              <1>     .program:
   236                              <1> endstruc
   237                              <1> ;MCB equates
   238                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   239                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   240                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   241                              <1> mcbMarkCtn      equ "M"
   242                              <1> mcbMarkEnd      equ "Z"
   243                              <1> 
   244                              <1> memFirstFit     equ 0   ;First free block goes to application
   245                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   246                              <1> memLastFit      equ 2   ;Last free block goes to application
   247                              <1> 
   248                              <1> ;Owner = Para aligned address => Owning application PSP
   249                              <1> ;...To consider...
   250                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   251                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   252                              <1> ;------------------------------------------------------------------------;
   253                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   254                              <1> ; following order, thus allowing for return values to be placed in the 
   255                              <1> ; registers by accessing the caller register stack frame.
   256                              <1> ;------------------------------------------------------------------------;
   257                              <1> struc callerFrame
   258 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   259 00000008 ????????????????    <1>     .rbx    resq 1    
   260 00000010 ????????????????    <1>     .rcx    resq 1
   261 00000018 ????????????????    <1>     .rdx    resq 1
   262 00000020 ????????????????    <1>     .rsi    resq 1
   263 00000028 ????????????????    <1>     .rdi    resq 1
   264 00000030 ????????????????    <1>     .rbp    resq 1
   265 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   266 00000040 ????????????????    <1>     .r9     resq 1
   267                              <1> ;Pushed by Processor when invoked via Interrupt
   268 00000048 ????????????????    <1>     .rip    resq 1
   269 00000050 ????????????????    <1>     .cs     resq 1
   270 00000058 ????????????????    <1>     .flags  resq 1
   271                              <1> endstruc
   272                              <1> 
   273                              <1> struc dpl
   274                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   275                              <1> ; server calls
   276 00000000 ????????????????    <1>     .rax    resq 1
   277 00000008 ????????????????    <1>     .rbx    resq 1
   278 00000010 ????????????????    <1>     .rcx    resq 1
   279 00000018 ????????????????    <1>     .rdx    resq 1
   280 00000020 ????????????????    <1>     .rsi    resq 1
   281 00000028 ????????????????    <1>     .rdi    resq 1
   282 00000030 ????????????????    <1>     .r8     resq 1
   283 00000038 ????????????????    <1>     .r9     resq 1
   284 00000040 ????????????????    <1>     .align  resq 1
   285 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   286 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   287                              <1> endstruc
   288                              <1> 
   289                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   290 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   291 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   292 00000010 ????????????????    <1>     .newSFTVal      resq 1
   293 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   294 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   295 00000028 ????????????????    <1>     .newLastdrive   resq 1
   296 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   297 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   298 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   299 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   300 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   301 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   302 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc filename
   306                              <1> ;8.3 File name struct
   307 00000000 ????????????????    <1>     .fName  resb 8
   308 00000008 ??????              <1>     .fExt   resb 3
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   312 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   313 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   314 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   315 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   316 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   317 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   318 00000016 ????                <1>     .fileTime   resw 1  ;File time
   319 00000018 ????                <1>     .fileDate   resw 1  ;File date
   320 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   321 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc psp
   325 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   326 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   327 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   328 0000000A ????????????????    <1>     .oldInt22h  resq 1  ;Int 22h pointer on overlay load
   329 00000012 ????????????????    <1>     .oldInt23h  resq 1  ;Int 23h pointer on overlay load
   330 0000001A ????????????????    <1>     .oldInt24h  resq 1  ;Int 24h pointer on overlay load
   331 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   332                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   333 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   334 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   335 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 21h
   336 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   337 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   338 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   339 0000005B ??                  <1>                 resb 1  ;Reserved byte
   340                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   341                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   342                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   343                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   344                              <1> ; always used and xtraHdlSz.
   345                              <1> ;Will need to add two SYSCALLS for future expansion:
   346                              <1> ;       1) Get Program Environment Pointer
   347                              <1> ;       2) Get Command Line arguments pointer
   348                              <1> ;The below are in the same place as in DOS.
   349                              <1>     .cmdLineArgPtr: ;Symbol for future use
   350 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   351 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   352                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   353 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   354 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   355                              <1> endstruc
   356                              <1> 
   357                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   358                              <1> 
   359                              <1> struc clkStruc
   360 00000000 ????                <1>     .dateWord   resw 1
   361 00000002 ??                  <1>     .minutes    resb 1
   362 00000003 ??                  <1>     .hours      resb 1
   363 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   364 00000005 ??                  <1>     .seconds    resb 1
   365                              <1> endstruc
   366                              <1> 
   367                              <1> struc countryStruc
   368 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   369                              <1>                         ;0 = month day year hh:mm:ss
   370                              <1>                         ;1 = day month year hh:mm:ss
   371                              <1>                         ;2 = year month day hh:mm:ss
   372 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   373 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   374 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   375 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   376 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   377 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   378                              <1>                         ;0 = Symbol leads, without space
   379                              <1>                         ;1 = Symbol follows, without space
   380                              <1>                         ;2 = Symbol leads, one space
   381                              <1>                         ;3 = Symbol follows, one space
   382                              <1>                         ;4 = Symbol replace decimal separator
   383 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   384 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   385 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   386 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   387 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   388                              <1> endstruc
   389                              <1> 
   390                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   391                              <1> ;for a space of 64Gb
   392                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   393                              <1> dosLowBase  equ 600h    ;Low load address
   394                              <1> 
   395                              <1> ;Critical Error AH bitfield equates
   396                              <1> critRead    equ 0h
   397                              <1> critWrite   equ 1h
   398                              <1> critDOS     equ 0h
   399                              <1> critFAT     equ 2h
   400                              <1> critDir     equ 4h
   401                              <1> critData    equ 6h
   402                              <1> critFailOK  equ 8h
   403                              <1> critRetryOK equ 10h
   404                              <1> critIgnorOK equ 20h
   405                              <1> critCharDev equ 80h
   406                              <1> 
   407                              <1> critIgnore  equ 0
   408                              <1> critRetry   equ 1
   409                              <1> critAbort   equ 2
   410                              <1> critFail    equ 3
   411                              <1> 
   412                              <1> ;MISC ASCII control chars
   413                              <1> NUL equ 00h ;^@         | ASCII Null
   414                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   415                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   416                              <1> BEL equ 07h ;^G         | ASCII Bell
   417                              <1> BSP equ 08h ;^H         | ASCII Backspace
   418                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   419                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   420                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   421                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   422                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   423                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   424                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   425                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   426                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   427                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   428                              <1> SPC equ 20h ;Printable  | ASCII Space
   429                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   430                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   431                              <1> 
   432                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   433                              <1> ;Extended Ascii Codes
   434                              <1> eF1     equ 3Bh ;F1 second byte
   435                              <1> eF2     equ 3Ch ;F2 second byte
   436                              <1> eF3     equ 3Dh ;F3 second byte
   437                              <1> eF4     equ 3Eh ;F4 second byte
   438                              <1> eF5     equ 3Fh ;F5 second byte
   439                              <1> eF6     equ 40h ;F6 second byte
   440                              <1> eF7     equ 41h ;F7 second byte
   441                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   442                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   443                              <1> eIns    equ 52h ;Insert second byte
   444                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   445                              <1> 
   446                              <1> ;Default Configuration for the system
   447                              <1> 
   448                              <1> buffersDefault  equ 30
   449                              <1> filesDefault    equ 20
   450                              <1> fcbsDefault     equ 4
   451                              <1> safeFcbsDeflt   equ 0
   452                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       resb 5  
    66 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   resb 1
    68 00000008 ????????????????    <1>     .filename   resb 8
    69 00000010 ??????              <1>     .fileext    resb 3
    70 00000013 ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    resb 8
    73 00000020 ??????              <1>     .newExt     resb 3
    74 00000023 ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdLineCnt  equ psp.parmList
    19                              <1> cmdLine     equ psp.progTail
    20                              <1> 
    21                              <1> 
    22                              <1> ;Struct Declarations
    23                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    24 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    25 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    26 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    27 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    28 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc execProg  ;For use with EXEC-ing a child task
    32 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    33 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    34 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    35 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    36                              <1> endstruc
    37                              <1> 
    38                              <1> ;Directory attribute equates
    39                              <1>     dirReadOnly     equ 01h
    40                              <1>     dirHidden       equ 02h
    41                              <1>     dirSystem       equ 04h
    42                              <1>     dirVolumeID     equ 08h
    43                              <1>     dirDirectory    equ 10h
    44                              <1>     dirArchive      equ 20h
    45                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    46                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    47                              <1>     ;If any of the three bits are set, then ALL three bits are set
    48                              <1>     ; in addition to whatever the user passed to search for.
    49                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    50                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    11 0000002B 5C                  <1> pathSep     db "\"  ;Default path sep
    12 0000002C 2F                  <1> switchChar  db "/"  ;Default switch char
    13 0000002D 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    14 0000002E 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    15                              <1> ;Static strings, not used in command line parsing
    16 00000036 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    16 0000003F 000000000000000000- <1>
    16 00000048 000000000000000000- <1>
    16 00000051 000000000000000000- <1>
    16 0000005A 0000                <1>
    17 0000005C 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    17 00000065 000000000000000000- <1>
    17 0000006E 000000000000000000- <1>
    17 00000077 000000000000000000- <1>
    17 00000080 000000000000000000- <1>
    17 00000089 000000000000000000- <1>
    17 00000092 000000000000000000- <1>
    17 0000009B 00000000            <1>
    18                              <1> 
    19                              <1> 
    20                              <1> cmdLineStatePtr:
    21 0000009F 0000000000000000    <1> cmdStartPtr dq 0    ;Ptr to the first char for this command (may be a space)
    22 000000A7 0000000000000000    <1> cmdEndPtr   dq 0    ;Ptr to the terminating char for this command (0Dh or |)
    23 000000AF 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    24 000000B0 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    25 000000B2 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    26                              <1> 
    27                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    28                              <1> ;These variables are valid for a SINGLE command in a command line
    29                              <1> ;Next two bytes, if set to -1, flags error
    30 000000B4 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    31 000000B5 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    32                              <1> ;                    If 2, we are redirecting output to a file, by appending
    33 000000B6 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    34 000000B8 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    35                              <1> 
    36 000000BA 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    37 000000BB 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    38 000000BC 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    39                              <1> 
    40 000000BD 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    41 000000BE 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    42 000000BF 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    43                              <1> 
    44                              <1> cmdStateL equ $ - cmdStatePtr
    45                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    46                              <1> 
    47                              <1> ;Structs and strings
    48                              <1> 
    49 000000C0 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    49 000000C9 00000000000000      <1>
    50 000000D0 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    50 000000D9 000000000000000000- <1>
    50 000000E2 000000000000000000- <1>
    50 000000EB 000000000000000000- <1>
    50 000000F4 00000000000000      <1>
    51                              <1> 
    52 000000FB 000000000000000000- <1> launchBlock db execProg_size dup (0)
    52 00000104 000000000000000000- <1>
    52 0000010D 000000000000000000- <1>
    52 00000116 0000000000          <1>
    53 0000011B 000000000000000000- <1> cmdTail     db cmdBufferL dup (0)   ;This is the tail that is passed to EXEC
    53 00000124 000000000000000000- <1>
    53 0000012D 000000000000000000- <1>
    53 00000136 000000000000000000- <1>
    53 0000013F 000000000000000000- <1>
    53 00000148 000000000000000000- <1>
    53 00000151 000000000000000000- <1>
    53 0000015A 000000000000000000- <1>
    53 00000163 000000000000000000- <1>
    53 0000016C 000000000000000000- <1>
    53 00000175 000000000000000000- <1>
    53 0000017E 000000000000000000- <1>
    53 00000187 000000000000000000- <1>
    53 00000190 000000000000000000- <1>
    53 00000199 00000000            <1>
    54                              <1> 
    55 0000019D 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    55 000001A6 000000000000000000- <1>
    55 000001AF 000000000000000000- <1>
    55 000001B8 000000000000000000- <1>
    55 000001C1 000000000000000000- <1>
    55 000001CA 000000000000000000- <1>
    55 000001D3 000000000000000000- <1>
    55 000001DC 000000000000000000- <1>
    55 000001E5 000000000000000000- <1>
    55 000001EE 000000000000000000- <1>
    55 000001F7 000000000000000000- <1>
    55 00000200 000000000000000000- <1>
    55 00000209 000000000000000000- <1>
    55 00000212 000000000000000000- <1>
    55 0000021B 00000000            <1>
    56 0000021F 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    56 00000228 000000000000000000- <1>
    56 00000231 000000000000000000- <1>
    56 0000023A 000000000000000000- <1>
    56 00000243 000000000000000000- <1>
    56 0000024C 000000000000000000- <1>
    56 00000255 000000000000000000- <1>
    56 0000025E 000000000000000000- <1>
    56 00000267 000000000000000000- <1>
    56 00000270 000000000000000000- <1>
    56 00000279 000000000000000000- <1>
    56 00000282 000000000000000000- <1>
    56 0000028B 000000000000000000- <1>
    56 00000294 000000000000000000- <1>
    56 0000029D 00000000            <1>
    57 000002A1 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    57 000002AA 000000000000000000- <1>
    57 000002B3 000000000000000000- <1>
    57 000002BC 000000000000000000- <1>
    57 000002C5 000000000000000000- <1>
    57 000002CE 000000000000000000- <1>
    57 000002D7 000000000000000000- <1>
    57 000002E0 000000000000000000- <1>
    57 000002E9 00000000000000      <1>
    58                              <1> 
    59 000002F0 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    59 000002F9 0000                <1>
    60 000002FB 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    60 00000304 00000000            <1>
    61 00000308 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    61 00000311 0000000000          <1>
    62                              <1> 
    63 00000316 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    63 0000031F 000000000000000000- <1>
    63 00000328 000000000000000000- <1>
    63 00000331 000000000000000000- <1>
    63 0000033A 000000000000000000- <1>
    63 00000343 000000000000000000- <1>
    63 0000034C 000000000000000000- <1>
    63 00000355 000000000000000000- <1>
    63 0000035E 00000000000000      <1>
    64 00000365 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    64 0000036E 000000000000000000- <1>
    64 00000377 000000000000000000- <1>
    64 00000380 000000000000000000- <1>
    64 00000389 000000000000000000- <1>
    64 00000392 000000000000000000- <1>
    64 0000039B 000000000000000000- <1>
    64 000003A4 000000000000000000- <1>
    64 000003AD 00000000000000      <1>
    65                              <1> 
    66                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    67 000003B4 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    67 000003BD 000000000000000000- <1>
    67 000003C6 000000000000000000- <1>
    67 000003CF 000000000000000000- <1>
    67 000003D8 000000000000000000- <1>
    67 000003E1 000000000000000000- <1>
    67 000003EA 000000000000000000- <1>
    67 000003F3 000000000000000000- <1>
    67 000003FC 00000000000000      <1>
    68 00000403 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    68 0000040C 000000000000000000- <1>
    68 00000415 000000000000000000- <1>
    68 0000041E 000000000000000000- <1>
    68 00000427 000000000000000000- <1>
    68 00000430 000000000000000000- <1>
    68 00000439 000000000000000000- <1>
    68 00000442 000000000000000000- <1>
    68 0000044B 00000000000000      <1>
    69                              <1> 
    70 00000452 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    71 0000045A 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    72                              <1> 
    73 00000462 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    73 0000046B 000000000000000000- <1>
    73 00000474 000000000000000000- <1>
    73 0000047D 000000000000000000- <1>
    73 00000486 000000000000000000- <1>
    73 0000048F 000000000000000000- <1>
    73 00000498 000000000000000000- <1>
    73 000004A1 000000000000000000- <1>
    73 000004AA 000000000000000000- <1>
    73 000004B3 000000000000000000- <1>
    73 000004BC 000000000000000000- <1>
    73 000004C5 000000000000000000- <1>
    73 000004CE 000000000000000000- <1>
    73 000004D7 000000000000000000- <1>
    73 000004E0 00000000            <1>
    74                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    75                              <1> ; users overtyping
    76                              <1> 
    77                              <1> ;Internal Function vars
    78                              <1> ;Dir Vars
    79 000004E4 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    80                              <1> ;                                   Bit[1] set => /P or /p specified
    81                              <1> ;                                   Bit[2] set => A file/path specified
    82 000004E5 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    83 000004E6 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    84 000004E7 00                  <1> dirDrv      db 0    ;0 based drive number to use
    85 000004E8 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
    85 000004F1 000000000000000000- <1>
    85 000004FA 000000000000000000- <1>
    85 00000503 000000000000000000- <1>
    85 0000050C 000000000000000000- <1>
    85 00000515 000000000000000000- <1>
    85 0000051E 000000000000000000- <1>
    85 00000527 000000000000000000- <1>
    85 00000530 000000000000000000- <1>
    85 00000539 000000000000000000- <1>
    85 00000542 000000000000000000- <1>
    85 0000054B 000000000000000000- <1>
    85 00000554 000000000000000000- <1>
    85 0000055D 000000000000000000- <1>
    85 00000566 00000000            <1>
    86 0000056A 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
    86 00000573 3F3F3F3F3F3F3F      <1>
    87                              <1> dirWideType equ 1
    88                              <1> dirPageType equ 2
    89                              <1> dirFileType equ 4
    90                              <1> ;Volume Vars
    91                              <1> volFcb:
    92                              <1>     istruc exFcb
    93 0000057A FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    94 0000057B 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    95 00000581 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
    96 00000582 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
    97 0000058A 3F3F3F              <1>     at exFcb.fileext,   db "???"
    98 0000058D 00000000            <1>     at exFcb.curBlock,  dd 0
    99 00000591 00<rep 15h>         <1>     iend 
   100                              <1> 
   101                              <1> ;Time/Date vars
   102 000005A6 00                  <1> td1 db 0    ;Minutes/Year
   103 000005A7 00                  <1> td2 db 0    ;Hours/Zero
   104 000005A8 00                  <1> td3 db 0    ;Hundredths/Day
   105 000005A9 00                  <1> td4 db 0    ;Seconds/Month
   106                              <1> 
   107                              <1> ;Rename/Copy Buffers
   108 000005AA 000000000000000000- <1> sourcePath  db cmdBufferL dup (0)
   108 000005B3 000000000000000000- <1>
   108 000005BC 000000000000000000- <1>
   108 000005C5 000000000000000000- <1>
   108 000005CE 000000000000000000- <1>
   108 000005D7 000000000000000000- <1>
   108 000005E0 000000000000000000- <1>
   108 000005E9 000000000000000000- <1>
   108 000005F2 000000000000000000- <1>
   108 000005FB 000000000000000000- <1>
   108 00000604 000000000000000000- <1>
   108 0000060D 000000000000000000- <1>
   108 00000616 000000000000000000- <1>
   108 0000061F 000000000000000000- <1>
   108 00000628 00000000            <1>
   109 0000062C 000000000000000000- <1> destPath    db cmdBufferL dup (0)
   109 00000635 000000000000000000- <1>
   109 0000063E 000000000000000000- <1>
   109 00000647 000000000000000000- <1>
   109 00000650 000000000000000000- <1>
   109 00000659 000000000000000000- <1>
   109 00000662 000000000000000000- <1>
   109 0000066B 000000000000000000- <1>
   109 00000674 000000000000000000- <1>
   109 0000067D 000000000000000000- <1>
   109 00000686 000000000000000000- <1>
   109 0000068F 000000000000000000- <1>
   109 00000698 000000000000000000- <1>
   109 000006A1 000000000000000000- <1>
   109 000006AA 00000000            <1>
   110                              <1> ;Copy Handles
   111 000006AE FFFF                <1> sourceHdl   dw -1
   112 000006B0 FFFF                <1> destHdl     dw -1
   113 000006B2 0000                <1> srcHdlInfo  dw 0 ;Used to save the handle device info (bit 7 Set -> Char dev)
   114                              <1> 
   115 000006B4 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   115 000006BD 000000000000000000- <1>
   115 000006C6 000000000000000000- <1>
   115 000006CF 000000000000000000- <1>
   115 000006D8 000000000000000000- <1>
   115 000006E1 000000000000000000- <1>
   115 000006EA 000000000000000000- <1>
   115 000006F3 000000000000000000- <1>
   115 000006FC 000000000000000000- <1>
   115 00000705 000000000000000000- <1>
   115 0000070E 000000000000000000- <1>
   115 00000717 000000000000000000- <1>
   115 00000720 000000000000000000- <1>
   115 00000729 000000000000000000- <1>
   115 00000732 0000                <1>
   116                              <1> 
   117 00000734 00                  <1> bpActive db 0   ;When not zero, breakpoints are on!
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 00000735 03444952            <1>     db 3, "DIR"
     8 00000739 3717                <1>     dw dir - startLbl
     9                              <1> 
    10 0000073B 024344              <1>     db 2, "CD"
    11 0000073E D01B                <1>     dw chdir - startLbl
    12                              <1> 
    13 00000740 054348444952        <1>     db 5, "CHDIR"
    14 00000746 D01B                <1>     dw chdir - startLbl
    15                              <1> 
    16 00000748 024D44              <1>     db 2, "MD"
    17 0000074B 4B1C                <1>     dw mkdir - startLbl
    18                              <1> 
    19 0000074D 054D4B444952        <1>     db 5, "MKDIR"
    20 00000753 4B1C                <1>     dw mkdir - startLbl
    21                              <1> 
    22 00000755 025244              <1>     db 2, "RD"
    23 00000758 971C                <1>     dw rmdir - startLbl
    24                              <1> 
    25 0000075A 05524D444952        <1>     db 5, "RMDIR"
    26 00000760 971C                <1>     dw rmdir - startLbl
    27                              <1> 
    28 00000762 0344454C            <1>     db 3, "DEL"
    29 00000766 851E                <1>     dw erase - startLbl
    30                              <1> 
    31 00000768 054552415345        <1>     db 5, "ERASE"
    32 0000076E 851E                <1>     dw erase - startLbl
    33                              <1> 
    34 00000770 0444415445          <1>     db 4, "DATE"
    35 00000775 AE1E                <1>     dw date - startLbl
    36                              <1> 
    37 00000777 0454494D45          <1>     db 4, "TIME"
    38 0000077C 771F                <1>     dw time - startLbl
    39                              <1> 
    40 0000077E 04434F5059          <1>     db 4, "COPY"
    41 00000783 E31C                <1>     dw copy - startLbl
    42                              <1> 
    43 00000785 0443545459          <1>     db 4, "CTTY"
    44 0000078A 1220                <1>     dw ctty - startLbl
    45                              <1> 
    46 0000078C 03434C53            <1>     db 3, "CLS"
    47 00000790 AD20                <1>     dw cls - startLbl
    48                              <1> 
    49 00000792 05425245414B        <1>     db 5, "BREAK"
    50 00000798 1F21                <1>     dw break - startLbl
    51                              <1> 
    52 0000079A 06564552494659      <1>     db 6, "VERIFY"
    53 000007A1 A021                <1>     dw verify - startLbl
    54                              <1> 
    55 000007A3 0652454E414D45      <1>     db 6, "RENAME"
    56 000007AA 1D22                <1>     dw rename - startLbl
    57                              <1> 
    58 000007AC 044D4F5645          <1>     db 4, "MOVE"
    59 000007B1 1D22                <1>     dw rename - startLbl
    60                              <1>     
    61 000007B3 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 000007BC 9024                <1>     dw truename - startLbl
    63                              <1> 
    64 000007BE 03564552            <1>     db 3, "VER"
    65 000007C2 7626                <1>     dw version - startLbl
    66                              <1> 
    67 000007C4 03564F4C            <1>     db 3, "VOL"
    68 000007C8 B725                <1>     dw volume - startLbl
    69                              <1> 
    70 000007CA 034D454D            <1>     db 3, "MEM"
    71 000007CE BA26                <1>     dw memory - startLbl
    72                              <1> 
    73 000007D0 0445584954          <1>     db 4, "EXIT"
    74 000007D5 A328                <1>     dw exit - startLbl
    75                              <1> 
    76 000007D7 0454595045          <1>     db 4, "TYPE"
    77 000007DC 0428                <1>     dw type - startLbl
    78                              <1> 
    79 000007DE 054C4142454C        <1>     db 5, "LABEL"
    80 000007E4 E124                <1>     dw label - startLbl
    81                              <1> 
    82                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    83 000007E6 054D4B4C424C        <1>     db 5, "MKLBL"
    84 000007EC 0B25                <1>     dw mklbl - startLbl
    85                              <1> 
    86 000007EE 05524D4C424C        <1>     db 5, "RMLBL"
    87 000007F4 4625                <1>     dw rmlbl - startLbl
    88                              <1> 
    89 000007F6 05524E4C424C        <1>     db 5, "RNLBL"
    90 000007FC 8125                <1>     dw rnlbl - startLbl
    91                              <1> 
    92 000007FE 05544F554348        <1>     db 5, "TOUCH"
    93 00000804 AB22                <1>     dw touch - startLbl
    94                              <1> 
    95 00000806 044A4F494E          <1>     db 4, "JOIN"
    96 0000080B E622                <1>     dw join - startLbl
    97                              <1> 
    98 0000080D 055355425354        <1>     db 5, "SUBST"
    99 00000813 A923                <1>     dw subst - startLbl
   100                              <1> 
   101 00000815 03425054            <1>     db 3, "BPT"
   102 00000819 EC16                <1>     dw bpt - startLbl
   103                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   104 0000081B FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 0000081C 0D0A24              <1> crlf    db  CR,LF,"$"
     3 0000081F 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 00000824 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 0000082D 696C65206D69737369- <1>
     4 00000836 6E670D0A24          <1>
     5 0000083B 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 00000844 6469736B2077697468- <1>
     5 0000084D 206261746368206669- <1>
     5 00000856 6C65                <1>
     6 00000858 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 00000861 737320616E79206B65- <1>
     6 0000086A 79207768656E207265- <1>
     6 00000873 6164790D0A24        <1>
     7 00000879 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 00000882 6E64206F722066696C- <1>
     7 0000088B 65206E616D650D0A24  <1>
     8 00000894 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 0000089D 2066696C65206E616D- <1>
     8 000008A6 65206F7220          <1>
     9 000008AB 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 000008B4 666F756E640D0A24    <1>
    10 000008BC 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    10 000008C5 656E74206469736B20- <1>
    10 000008CE 73706163650D0A24    <1>
    11 000008D6 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 000008DF 7669726F6E6D656E74- <1>
    11 000008E8 2073706163650D0A24  <1>
    12 000008F1 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 000008FA 74696F6E206572726F- <1>
    12 00000903 720D0A24            <1>
    13 00000907 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 00000910 6F7420626520636F70- <1>
    13 00000919 696564206F6E746F20- <1>
    13 00000922 697473656C660D0A24  <1>
    14 0000092B 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 00000934 662064657374696E61- <1>
    14 0000093D 74696F6E206C6F7374- <1>
    14 00000946 206265666F72652063- <1>
    14 0000094F 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 00000955 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 0000095E 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 00000967 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 00000970 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 00000971 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 0000097A 65650D0A24          <1>
    21 0000097F 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 00000988 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 00000991 726976652073706563- <1>
    23 0000099A 696669636174696F6E- <1>
    23 000009A3 0D0A24              <1>
    24 000009A6 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 000009AF 6B6579207768656E20- <1>
    24 000009B8 7265616479202E202E- <1>
    24 000009C1 202E2024            <1>
    25 000009C5 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 000009CE 6172616D657465720D- <1>
    25 000009D7 0A24                <1>
    26                              <1> 
    27 000009D9 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 000009E2 576564546875467269- <1>
    27 000009EB 536174              <1>
    28 000009EE 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 000009F7 206461746524        <1>
    29 000009FD 43757272656E742064- <1> curDate db  "Current date is $"
    29 00000A06 6174652069732024    <1>
    30 00000A0E 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 00000A17 657720646174652024  <1>
    31 00000A20 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 00000A29 293A2024            <1>
    32 00000A2D 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 00000A36 293A2024            <1>
    33 00000A3A 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 00000A43 293A2024            <1>
    34 00000A47 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 00000A50 2074696D6524        <1>
    35 00000A56 43757272656E742074- <1> curTime db  "Current time is $"
    35 00000A5F 696D652069732024    <1>
    36 00000A67 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 00000A70 65772074696D653A20- <1>
    36 00000A79 24                  <1>
    37                              <1> 
    38 00000A7A 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000A83 7572652028592F4E29- <1>
    38 00000A8C 3F2024              <1>
    39                              <1> 
    40 00000A8F 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000A98 56657273696F6E2024  <1>
    41                              <1> 
    42 00000AA1 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000AAA 6E2064726976652024  <1>
    43 00000AB3 2069732024          <1> volOk   db " is $"
    44 00000AB8 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000AC1 6162656C24          <1>
    45                              <1> 
    46 00000AC6 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000ACF 69726563746F72790D- <1>
    46 00000AD8 0A24                <1>
    47 00000ADA 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000AE3 206372656174652064- <1>
    47 00000AEC 69726563746F72790D- <1>
    47 00000AF5 0A24                <1>
    48 00000AF7 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000B00 6174682C206E6F7420- <1>
    48 00000B09 6469726563746F7279- <1>
    48 00000B12 2C0D0A              <1>
    49 00000B15 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000B1E 6F7279206E6F742065- <1>
    49 00000B27 6D7074790D0A24      <1>
    50 00000B2E 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000B37 79206F66202024      <1>
    51 00000B3E 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000B47 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    52 00000B50 7269766520696E2073- <1>
    52 00000B59 656172636820706174- <1>
    52 00000B62 680D0A24            <1>
    53 00000B66 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    53 00000B6F 65766963650D0A24    <1>
    54 00000B77 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    54 00000B80 20666F756E640D0A24  <1>
    55 00000B89 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    55 00000B92 726F720D0A24        <1>
    56 00000B98 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    56 00000BA1 6F74206265206E6573- <1>
    56 00000BAA 7465640D0A24        <1>
    57 00000BB0 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    57 00000BB9 6174652066696C6520- <1>
    57 00000BC2 6572726F7220647572- <1>
    57 00000BCB 696E6720706970650D- <1>
    57 00000BD4 0A24                <1>
    58 00000BD6 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    58 00000BDF 2062696E6172792072- <1>
    58 00000BE8 656164732066726F6D- <1>
    58 00000BF1 206120646576696365- <1>
    58 00000BFA 0D0A24              <1>
    59 00000BFD 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    60 00000C03 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    61 00000C08 425245414B20697320- <1> breakIs db "BREAK is $"
    61 00000C11 24                  <1>
    62 00000C12 564552494659206973- <1> verifyIs    db "VERIFY is $"
    62 00000C1B 2024                <1>
    63 00000C1D 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    64 00000C26 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    64 00000C2F 617468206F72206669- <1>
    64 00000C38 6C65206E616D650D0A- <1>
    64 00000C41 24                  <1>
    65 00000C42 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    65 00000C4B 756D626572206F6620- <1>
    65 00000C54 706172616D65746572- <1>
    65 00000C5D 730D0A24            <1>
    66 00000C61 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    66 00000C6A 74696E6720746F2064- <1>
    66 00000C73 6576696365          <1>
    67 00000C78 08200800            <1> backSpace   db BSP," ",BSP,NUL
    68                              <1> 
    69 00000C7C 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    69 00000C85 20202020202020546F- <1>
    69 00000C8E 74616C207379737465- <1>
    69 00000C97 6D206D656D6F72793A- <1>
    69 00000CA0 2024                <1>
    70 00000CA2 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    70 00000CAB 20202020202020204D- <1>
    70 00000CB4 656D6F727920757365- <1>
    70 00000CBD 6420627920444F533A- <1>
    70 00000CC6 2024                <1>
    71 00000CC8 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    71 00000CD1 656D6F727920757365- <1>
    71 00000CDA 64206279206170706C- <1>
    71 00000CE3 69636174696F6E733A- <1>
    71 00000CEC 2024                <1>
    72 00000CEE 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    72 00000CF7 656D6F727920726573- <1>
    72 00000D00 657276656420627920- <1>
    72 00000D09 68617264776172653A- <1>
    72 00000D12 2024                <1>
    73 00000D14 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    73 00000D1D 202020202020202020- <1>
    73 00000D26 2020202020204D656D- <1>
    73 00000D2F 6F727920667265653A- <1>
    73 00000D38 2024                <1>
    74 00000D3A 20627974657324      <1> memByte db " bytes$"
    75 00000D41 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    75 00000D4A 6F7420417373657274- <1>
    75 00000D53 61696E20444F532045- <1>
    75 00000D5C 6E74727920506F696E- <1>
    75 00000D65 7424                <1>
    76 00000D67 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    76 00000D70 416C6C6F636174696F- <1>
    76 00000D79 6E204572726F7224    <1>
    77 00000D81 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    77 00000D8A 4572726F7224        <1>
    78 00000D90 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    78 00000D99 68616C74656424      <1>
    79                              <1> 
    80 00000DA0 556E61626C6520746F- <1> touchErr db "Unable to create file",CR,LF,"$"
    80 00000DA9 206372656174652066- <1>
    80 00000DB2 696C650D0A24        <1>
    81 00000DB8 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    81 00000DC1 206372656174652070- <1>
    81 00000DCA 6970650D0A          <1>
    82                              <1> pipeErrMsgL equ $ - pipeErrMsg
    83 00000DCF 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    83 00000DD8 6F6E206572726F720D- <1>
    83 00000DE1 0A                  <1>
    84                              <1> redirErrMsgL   equ $ - redirErrMsg
    85                              <1> 
    86 00000DE2 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    87 00000DE6 2020202024          <1> fourSpc  db "    $"
    88 00000DEB 20202024            <1> threeSpc db "   $"
    89 00000DEF 202024              <1> twoSpc   db "  $"
    90                              <1> 
    91 00000DF2 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    91 00000DFB 696679204F4E206F72- <1>
    91 00000E04 204F46460D0A24      <1>
    92 00000E0B 504154483D          <1> pathEVar db "PATH="
    93 00000E10 50524F4D50543D      <1> promptEVar  db "PROMPT="
    94                              <1> 
    95                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    96                              <1> ; handles and reopen CON
    97 00000E17 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00000E1B 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00000E1E 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00000E22 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 00000E25 B44A                <1>     mov ah, 4Ah ;Realloc
     9 00000E27 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00000E2A CD21                <1>     int 21h
    11 00000E2C EB6C                <1>     jmp short commandMain
    12                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    13 00000E2E B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    14 00000E33 CD21                <1>     int 21h
    15 00000E35 668905D1F1FFFF      <1>     mov word [returnCode], ax
    16                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    17 00000E3C 488D1544210000      <1>     lea rdx, critErrorHandler
    18 00000E43 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    19 00000E47 B824250000          <1>     mov eax, 2524h
    20 00000E4C CD21                <1>     int 21h
    21 00000E4E 488D15C2230000      <1>     lea rdx, int23h
    22 00000E55 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    23 00000E59 B823250000          <1>     mov eax, 2523h
    24 00000E5E CD21                <1>     int 21h
    25 00000E60 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    26 00000E67 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    27 00000E6B B822250000          <1>     mov eax, 2522h
    28 00000E70 CD21                <1>     int 21h
    29 00000E72 F60536F2FFFFFF      <1>     test byte [pipeFlag], -1
    30 00000E79 0F858C000000        <1>     jnz commandMain.pipeProceed ;Skip the handle closing when pipe active
    31 00000E7F E8BB040000          <1>     call cleanUpRedir   ;Clean up redirection once we are done
    32                              <1> ;Close all handles from 5->MAX
    33 00000E84 0FB70D9CF1FFFF      <1>     movzx ecx, word [numHdls]
    34 00000E8B BB05000000          <1>     mov ebx, 5
    35                              <1> .handleClose:
    36 00000E90 B43E                <1>     mov ah, 3Eh ;File close
    37 00000E92 CD21                <1>     int 21h
    38 00000E94 FFC3                <1>     inc ebx ;Goto next file
    39 00000E96 39CB                <1>     cmp ebx, ecx
    40 00000E98 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    41                              <1> commandMain:
    42                              <1> ;Setup Commandline. First check if batch mode is active, then fall.
    43                              <1> ;=========================
    44                              <1> ;   BATCH HANDLING HERE
    45                              <1> ;=========================
    46 00000E9A 488B2564F1FFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    47 00000EA1 FC                  <1>     cld ;Ensure stringops are done the right way
    48 00000EA2 C605F4F2FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    49                              <1> .inputMain:
    50 00000EA9 E8B91B0000          <1>     call printCRLF
    51                              <1> .inputMain2:
    52 00000EAE E8F01E0000          <1>     call clearCommandLineState
    53 00000EB3 E8B91E0000          <1>     call printPrompt
    54                              <1> 
    55 00000EB8 B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    56 00000EBD CD21                <1>     int 21h
    57 00000EBF B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    58 00000EC4 BA01000000          <1>     mov edx, 1      ;Start new print job
    59 00000EC9 CD21                <1>     int 21h
    60 00000ECB 488D15CBF2FFFF      <1>     lea rdx, inBuffer
    61 00000ED2 B8000A0000          <1>     mov eax, 0A00h  ;Do Buffered input
    62 00000ED7 CD21                <1>     int 21h
    63 00000ED9 E8891B0000          <1>     call printCRLF  ;Note we have accepted input
    64                              <1> ;First check we had something typed in of length greater than 0
    65                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    66 00000EDE 803DB9F2FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    67 00000EE5 74C7                <1>     je .inputMain2
    68                              <1>     ;Copy over the input text
    69 00000EE7 488D35AFF2FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    70 00000EEE 488D3D2AF3FFFF      <1>     lea rdi, cmdBuffer
    71 00000EF5 B982000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    72 00000EFA F3A4                <1>     rep movsb
    73                              <1> .pipeLoop:
    74 00000EFC E846000000          <1>     call preProcessBuffer
    75 00000F01 E8BC000000          <1>     call analyseCmdline
    76 00000F06 E8B3010000          <1>     call doCommandLine
    77                              <1> .pipeProceed:
    78 00000F0B E82F040000          <1>     call cleanUpRedir
    79 00000F10 488B0590F1FFFF      <1>     mov rax, qword [cmdEndPtr]
    80 00000F17 48890581F1FFFF      <1>     mov qword [cmdStartPtr], rax
    81 00000F1E F6058AF1FFFFFF      <1>     test byte [pipeFlag], -1  ;If we have any pipes active, we proceed here
    82 00000F25 7482                <1>     jz .inputMain
    83 00000F27 80380D              <1>     cmp byte [rax], CR  ;Are we done?
    84 00000F2A 0F8479FFFFFF        <1>     je .inputMain
    85 00000F30 E8531E0000          <1>     call clearCommandState  ;Else, clear the command state and start again
    86 00000F35 EBC5                <1>     jmp short .pipeLoop
    87                              <1> .dfltErrExit:
    88 00000F37 488D153BF9FFFF      <1>     lea rdx, badCmd
    89 00000F3E B409                <1>     mov ah, 09h
    90 00000F40 CD21                <1>     int 21h
    91 00000F42 E962FFFFFF          <1>     jmp .inputMain
    92                              <1> 
    93                              <1> preProcessBuffer:
    94                              <1> ;Start by preprocessing the path, escape quotes and handle redirections.
    95                              <1> ;Each normal char gets copied over to psp.dta + 1 except for those special chars.
    96                              <1> ;Places the count of chars save CR in byte 0 of psp.dta.
    97                              <1> ;Places the ptr to the first byte past pipe or CR in cmdEndPtr
    98                              <1> ;Throughout: CL has char count, CH has number of quotes.
    99 00000F47 31C9                <1>     xor ecx, ecx
   100 00000F49 4C8B05BFF0FFFF      <1>     mov r8, qword [pspPtr]  ;Ensure we have our pspPtr pointing to the right place
   101 00000F50 488B3548F1FFFF      <1>     mov rsi, qword [cmdStartPtr]
   102 00000F57 4885F6              <1>     test rsi, rsi
   103 00000F5A 7507                <1>     jnz .notNewCmd
   104 00000F5C 488D35BEF2FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto command buffer + 2
   105                              <1> .notNewCmd:
   106 00000F63 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   107                              <1> .countQuotes:
   108 00000F66 AC                  <1>     lodsb
   109 00000F67 3C22                <1>     cmp al, '"'
   110 00000F69 7507                <1>     jne .notQuoteToCount
   111 00000F6B FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   112 00000F6D E9F4FFFFFF          <1>     jmp .countQuotes
   113                              <1> .notQuoteToCount:
   114 00000F72 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   115 00000F74 75F0                <1>     jne .countQuotes
   116 00000F76 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   117 00000F79 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We store this nicely formatted string in psp
   118                              <1> .getChar:
   119 00000F80 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   120 00000F81 3C22                <1>     cmp al, '"'     ;Is char a quote?
   121 00000F83 750E                <1>     jne .notQuote
   122 00000F85 FECD                <1>     dec ch          ;We have a quote, now decrement
   123 00000F87 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   124                              <1> .searchForClosingQuote:
   125                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   126 00000F89 AA                  <1>     stosb   ;Store char and inc rdi
   127 00000F8A FEC1                <1>     inc cl
   128 00000F8C AC                  <1>     lodsb   ;Get next char
   129 00000F8D 3C22                <1>     cmp al, '"'
   130 00000F8F 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   131 00000F91 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   132                              <1> .notQuote:
   133 00000F93 51                  <1>     push rcx    ;Save counts, if anything goes wrong, stack is jiggled properly
   134 00000F94 E816050000          <1>     call checkAndSetupRedir ;Intervene redir
   135 00000F99 59                  <1>     pop rcx
   136 00000F9A 7509                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   137 00000F9C 7202                <1>     jc .pipeHandle      ;Store a CR in the buffer if a pipe
   138 00000F9E EBE0                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   139                              <1> .pipeHandle:
   140 00000FA0 B00D                <1>     mov al, CR  ;Now store a Carriage return 
   141 00000FA2 48FFC6              <1>     inc rsi ;Ensure we remain one char past the pipe
   142                              <1> .notRedir:
   143 00000FA5 AA                  <1>     stosb       ;Store char and advance rdi
   144 00000FA6 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   145 00000FA8 7404                <1>     je .exit
   146 00000FAA FEC1                <1>     inc cl      ;Increment char count
   147 00000FAC EBD2                <1>     jmp short .getChar    ;If not, get next char
   148                              <1> .exit:
   149 00000FAE 48FFCE              <1>     dec rsi ;move rsi to point back to terminator or one past | 
   150 00000FB1 488935EFF0FFFF      <1>     mov qword [cmdEndPtr], rsi  ;Store rsi pointing to the first char past CR or |
   151 00000FB8 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   152 00000FBF 880F                <1>     mov byte [rdi], cl  ;Store the count of chars in the psp buffer
   153                              <1>     return
    13                              <2> %%_ret:
    14 00000FC1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   154                              <1> 
   155                              <1> analyseCmdline:
   156                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   157                              <1> ; processes the command name into the FCB.  
   158 00000FC2 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   159 00000FC9 4889F3              <1>     mov rbx, rsi            ;Save this ptr in rbx
   160 00000FCC E87F1D0000          <1>     call skipDelimiters     ;Skip any preceeding separators
   161 00000FD1 488D3DC9F2FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   162 00000FD8 E8861E0000          <1>     call cpDelimPathToBufz  ;Moves rsi to the first char past the delim char
   163 00000FDD 48FFCE              <1>     dec rsi ;Point it back to the delim char
   164 00000FE0 E8D0000000          <1>     call .skipAndCheckCR
   165 00000FE5 7439                <1>     je .exit
   166 00000FE7 C605CCF0FFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   167 00000FEE 4889F0              <1>     mov rax, rsi
   168 00000FF1 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   169 00000FF4 8805C1F0FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   170                              <1> .skipArg:
   171 00000FFA AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   172 00000FFB 3C0D                <1>     cmp al, CR
   173 00000FFD 7421                <1>     je .exit
   174 00000FFF E85A1D0000          <1>     call isALdelimiter
   175 00001004 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   176 00001006 E8AA000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   177 0000100B 7413                <1>     je .exit            ;If ZF set, this we encountered a CR
   178 0000100D C605A9F0FFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   179 00001014 4889F0              <1>     mov rax, rsi            
   180 00001017 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   181 0000101A 88059EF0FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   182                              <1> .exit:
   183                              <1> ;Before returning, we copy the command name to cmdName and make it useful
   184 00001020 488D3D7AF2FFFF      <1>     lea rdi, cmdPathSpec
   185 00001027 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   186 0000102A 30C0                <1>     xor al, al  ;Search for the terminating null
   187 0000102C B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   188 00001031 F2AE                <1>     repne scasb
   189 00001033 48FFCF              <1>     dec rdi ;Go to the last char in the command
   190 00001036 4889FE              <1>     mov rsi, rdi
   191 00001039 FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   192                              <1> .keepSearching:
   193 0000103A AC                  <1>     lodsb
   194 0000103B 3A05EAEFFFFF        <1>     cmp al, byte [pathSep]
   195 00001041 740B                <1>     je .cmdStartFnd
   196 00001043 4839DE              <1>     cmp rsi, rbx
   197 00001046 75F2                <1>     jne .keepSearching
   198 00001048 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   199 0000104B 48FFCE              <1>     dec rsi
   200                              <1> .cmdStartFnd:
   201 0000104E 48FFC6              <1>     inc rsi
   202 00001051 48FFC6              <1>     inc rsi ;Go past the pathsep
   203 00001054 FC                  <1>     cld ;Go the sane way again
   204 00001055 488D3DADF2FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   205 0000105C 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   206 0000105D B90E000000          <1>     mov ecx, cmdNameL
   207 00001062 30C0                <1>     xor al, al
   208 00001064 F3AA                <1>     rep stosb
   209 00001066 5F                  <1>     pop rdi
   210 00001067 31C9                <1>     xor ecx, ecx
   211 00001069 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   212                              <1> .cmdGetChar:
   213 0000106A AC                  <1>     lodsb
   214 0000106B 84C0                <1>     test al, al ;Did we find the terminating null?
   215 0000106D 7414                <1>     jz .nameLenFnd
   216 0000106F 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   217 00001071 7410                <1>     je .nameLenFnd
   218 00001073 E8C61C0000          <1>     call ucChar ;Else uppercase char
   219 00001078 AA                  <1>     stosb   ;and store it
   220 00001079 FFC1                <1>     inc ecx
   221 0000107B 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   222 00001081 72E7                <1>     jb .cmdGetChar
   223                              <1> .nameLenFnd:
   224 00001083 880D7FF2FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   225                              <1>     ;Now finally, create a FCB filespec
   226 00001089 488D3D60F2FFFF      <1>     lea rdi, fcbCmdSpec
   227 00001090 57                  <1>     push rdi
   228 00001091 B90B000000          <1>     mov ecx, fcbNameL
   229 00001096 B020                <1>     mov al, " " ;Fill with spaces
   230 00001098 F3AA                <1>     rep stosb
   231 0000109A 5F                  <1>     pop rdi
   232 0000109B 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   233 0000109C E8271D0000          <1>     call asciiToFCB
   234 000010A1 488D3548F2FFFF      <1>     lea rsi, fcbCmdSpec
   235 000010A8 488D3D4CF2FFFF      <1>     lea rdi, cmdSpec
   236 000010AF E86F1D0000          <1>     call FCBToAsciiz
   237                              <1>     return
    13                              <2> %%_ret:
    14 000010B4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   238                              <1> .skipAndCheckCR:
   239                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   240 000010B5 E8961C0000          <1>     call skipDelimiters ;Go to the next char in the input line
   241 000010BA 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   242                              <1>     return
    13                              <2> %%_ret:
    14 000010BD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   243                              <1> 
   244                              <1> doCommandLine:
   245 000010BE 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   246                              <1>     ;The following check accounts for the end of a piped command
   247 000010C5 803E0D              <1>     cmp byte [rsi], CR  ;If the first char is a CR, exit the pipe loop
   248                              <1>     rete    ;Do not attempt to execute if the first char is a CR
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000010C8 74(BD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   249 000010CA 488D3DEFEFFFFF      <1>     lea rdi, cmdFcb
   250 000010D1 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   251 000010D6 CD21                <1>     int 21h
   252 000010D8 410FB79881000000    <1>     movzx ebx, word [r8 + cmdLine]    ;Get the drive specifier
   253 000010E0 80FF3A              <1>     cmp bh, ":"
   254 000010E3 752E                <1>     jne .noDriveSpecified
   255 000010E5 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   256 000010E7 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   257 000010EA 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   258 000010ED 3CFF                <1>     cmp al, -1  ;Int 21h returns AL = -1 if bad drive specified
   259 000010EF 7415                <1>     je .badDrive
   260                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   261 000010F1 803D10F2FFFF02      <1>     cmp byte [cmdName], 2
   262 000010F8 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   263 000010FA B40E                <1>     mov ah, 0Eh ;Set drive to dl
   264 000010FC CD21                <1>     int 21h 
   265 000010FE B419                <1>     mov ah, 19h
   266 00001100 CD21                <1>     int 21h     ;Get current drive
   267 00001102 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   268                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001104 74(BD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   269                              <1> .badDrive:
   270 00001106 488D157BF8FFFF      <1>     lea rdx, badDrv
   271 0000110D B409                <1>     mov ah, 09h
   272 0000110F CD21                <1>     int 21h
   273 00001111 F9                  <1>     stc
   274                              <1>     return
    13                              <2> %%_ret:
    14 00001112 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   275                              <1> .noDriveSpecified:
   276                              <1> ;Now we set the two FCB's in the command line
   277 00001113 F605A0EFFFFFFF      <1>     test byte [arg1Flg], -1
   278 0000111A 744D                <1>     jz .fcbArgsDone
   279 0000111C 0FB60598EFFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   280 00001123 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   281 0000112A 4801C6              <1>     add rsi, rax    ;Point to first argument
   282 0000112D 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   283 00001131 B801290000          <1>     mov eax, 2901h
   284 00001136 CD21                <1>     int 21h
   285 00001138 88057EEFFFFF        <1>     mov byte [arg1FCBret], al
   286 0000113E F60578EFFFFFFF      <1>     test byte [arg2Flg], -1
   287 00001145 7422                <1>     jz .fcbArgsDone
   288 00001147 0FB60570EFFFFF      <1>     movzx eax, byte [arg2Off]
   289 0000114E 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   290 00001155 4801C6              <1>     add rsi, rax    ;Point to first argument
   291 00001158 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   292 0000115C B801290000          <1>     mov eax, 2901h
   293 00001161 CD21                <1>     int 21h
   294 00001163 880556EFFFFF        <1>     mov byte [arg2FCBret], al
   295                              <1> .fcbArgsDone:
   296 00001169 498D9881000000      <1>     lea rbx, [r8 + cmdLine]
   297 00001170 488D3591F1FFFF      <1>     lea rsi, cmdName
   298 00001177 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   299 0000117C BAFFFF0000          <1>     mov edx, 0FFFFh
   300 00001181 B5FF                <1>     mov ch, -1
   301 00001183 CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   302 00001185 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   303 0000118A BAFFFF0000          <1>     mov edx, 0FFFFh
   304 0000118F 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   305 00001191 CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   306                              <1>             ;        al = 0  if the command should be executed as usual
   307 00001193 84C0                <1>     test al, al
   308 00001195 741D                <1>     jz .executeInternal
   309                              <1>     ;Here we execute externally and return to the prompt
   310                              <1>     ; as if it was an internal execution
   311 00001197 488D35FFEFFFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   312 0000119E 488D1D1BEFFFFF      <1>     lea rbx, cmdFcb
   313 000011A5 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   314 000011AA BAFFFF0000          <1>     mov edx, 0FFFFh
   315 000011AF B5FF                <1>     mov ch, -1
   316 000011B1 CD2F                <1>     int 2Fh 
   317                              <1>     return
    13                              <2> %%_ret:
    14 000011B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   318                              <1> .executeInternal:
   319                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   320                              <1> ;rsi points after the command terminator in the command tail
   321 000011B4 488D1D7AF5FFFF      <1>     lea rbx, functionTable
   322                              <1> .nextEntry:
   323 000011BB 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   324 000011BE 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   325 000011C1 0F8412170000        <1>     je launchChild      ;If so, check externally now
   326 000011C7 380D3BF1FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   327 000011CD 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   328                              <1>     ;Here they have the same length so lets see if the name is the same
   329 000011CF 56                  <1>     push rsi
   330                              <1>     ;ecx has the length to compare
   331 000011D0 51                  <1>     push rcx
   332 000011D1 488D7301            <1>     lea rsi, qword [rbx + 1]
   333 000011D5 488D3D2DF1FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   334 000011DC F3A6                <1>     rep cmpsb   ;Check the strings are equal
   335 000011DE 59                  <1>     pop rcx
   336 000011DF 5E                  <1>     pop rsi
   337 000011E0 7516                <1>     jne .gotoNextEntry
   338                              <1>     ;Here it was found both strings are equal
   339 000011E2 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   340 000011E7 480FB71F            <1>     movzx rbx, word [rdi]
   341 000011EB 488D3D0EEEFFFF      <1>     lea rdi, startLbl
   342 000011F2 4801FB              <1>     add rbx, rdi
   343 000011F5 FFD3                <1>     call rbx    ;Call this function...
   344                              <1>     return  ;... and return
    13                              <2> %%_ret:
    14 000011F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   345                              <1> .gotoNextEntry:
   346 000011F8 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   347 000011FF 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   348 00001202 EBB7                <1>     jmp short .nextEntry
   349                              <1> .dfltErrExit:
   350 00001204 488D156EF6FFFF      <1>     lea rdx, badCmd
   351 0000120B B409                <1>     mov ah, 09h
   352 0000120D CD21                <1>     int 21h
   353                              <1>     return
    13                              <2> %%_ret:
    14 0000120F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   354                              <1> 
   355                              <1> 
   356                              <1> checkExtensionExec:
   357                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   358                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   359                              <1> ;         If ZF=ZE and CF=CY => Batch file
   360 00001210 8B05B3EEFFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   361 00001216 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   362 0000121B 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   363 00001220 25DFDFDFFF          <1>     and eax, 0FFDFDFDFh ;Uppercase the three letters
   364 00001225 3D434F4D20          <1>     cmp eax, "COM "
   365                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000122A 74(0F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   366 0000122C 3D45584520          <1>     cmp eax, "EXE "
   367                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001231 74(0F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   368 00001233 3D42415420          <1>     cmp eax, "BAT "
   369                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001238 75(0F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   370 0000123A F9                  <1>     stc
   371                              <1>     return
    13                              <2> %%_ret:
    14 0000123B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   372                              <1> 
   373                              <1> redirFailure:
   374 0000123C 488D158CFBFFFF      <1>     lea rdx, redirErrMsg
   375 00001243 B913000000          <1>     mov ecx, redirErrMsgL
   376 00001248 EB0C                <1>     jmp short redirPipeFailureCommon
   377                              <1> pipeFailure:
   378 0000124A 488D1567FBFFFF      <1>     lea rdx, pipeErrMsg
   379 00001251 B917000000          <1>     mov ecx, pipeErrMsgL
   380                              <1> redirPipeFailureCommon:
   381                              <1> ;This routine is called if any problems happen during 
   382                              <1> ;This routine tries to close whatever handles are not -1 and delete
   383                              <1> ; pipe files if the pipe count is not 0
   384                              <1> ;It resets all variables and proceeds.
   385 00001256 B800400000          <1>     mov eax, 4000h  ;Write handle
   386 0000125B BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   387 00001260 CD21                <1>     int 21h
   388 00001262 31DB                <1>     xor ebx, ebx    ;Select STDIN
   389 00001264 E8C6000000          <1>     call .closeHandle
   390 00001269 FFC3                <1>     inc ebx         ;Select STDOUT
   391 0000126B E8BF000000          <1>     call .closeHandle
   392 00001270 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   393 00001275 488D159BFBFFFF      <1>     lea rdx, conName
   394 0000127C CD21                <1>     int 21h
   395 0000127E 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
   396 00001280 B800450000          <1>     mov eax, 4500h  ;DUP
   397 00001285 CD21                <1>     int 21h
   398 00001287 66C70524EEFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   399 00001290 0FB71D1FEEFFFF      <1>     movzx ebx, word [redirSTDIN]
   400 00001297 E893000000          <1>     call .closeHandle
   401                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   402 0000129C 66C70511EEFFFFFFFF  <1>     mov word [redirSTDIN], -1
   403 000012A5 0FB71D0CEEFFFF      <1>     movzx ebx, word [redirSTDOUT]
   404 000012AC E87E000000          <1>     call .closeHandle
   405 000012B1 66C705FEEDFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   406 000012BA 0FB71DEFEDFFFF      <1>     movzx ebx, word [pipeSTDIN]
   407 000012C1 E869000000          <1>     call .closeHandle
   408 000012C6 66C705E1EDFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   409 000012CF 0FB71DDCEDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   410 000012D6 E854000000          <1>     call .closeHandle
   411 000012DB 66C705CEEDFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   412 000012E4 C605C4EDFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   413 000012EB 488D15C2F0FFFF      <1>     lea rdx, qword [pipe1Filespec]
   414 000012F2 803A00              <1>     cmp byte [rdx], 0
   415 000012F5 7407                <1>     jz .checkOld
   416 000012F7 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   417 000012FC CD21                <1>     int 21h
   418                              <1> .checkOld:
   419 000012FE 488D15FEF0FFFF      <1>     lea rdx, qword [pipe2Filespec]
   420 00001305 803A00              <1>     cmp byte [rdx],0
   421 00001308 7407                <1>     jz .pipeNamesComplete
   422 0000130A B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   423 0000130F CD21                <1>     int 21h
   424                              <1> .pipeNamesComplete:
   425 00001311 31C0                <1>     xor eax, eax
   426                              <1>     ;Invalidate the pointers and the paths too
   427 00001313 48890538F1FFFF      <1>     mov qword [newPipe], rax
   428 0000131A 48890539F1FFFF      <1>     mov qword [oldPipe], rax
   429 00001321 89058DF0FFFF        <1>     mov dword [pipe1Filespec], eax
   430 00001327 8905D6F0FFFF        <1>     mov dword [pipe2Filespec], eax
   431 0000132D F9                  <1>     stc
   432                              <1>     return
    13                              <2> %%_ret:
    14 0000132E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   433                              <1> .closeHandle:
   434 0000132F 81FBFFFFFFFF        <1>     cmp ebx, -1
   435                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001335 74(2E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   436 00001337 B8003E0000          <1>     mov eax, 3E00h
   437 0000133C CD21                <1>     int 21h
   438                              <1>     return
    13                              <2> %%_ret:
    14 0000133E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   439                              <1> 
   440                              <1> cleanUpRedir:
   441                              <1> ;Cleans up the redir stuff after we are done.
   442 0000133F 0FB7056AEDFFFF      <1>     movzx eax, word [pipeSTDIN]
   443 00001346 0FB71D65EDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   444 0000134D C1E310              <1>     shl ebx, 10h
   445 00001350 09D8                <1>     or eax, ebx
   446 00001352 3DFFFFFFFF          <1>     cmp eax, -1
   447 00001357 750C                <1>     jne .pipe
   448 00001359 C6054FEDFFFF00      <1>     mov byte [pipeFlag], 0  ;Clear the flag
   449 00001360 E9CD000000          <1>     jmp .redirInClear   ;If no piping, skip
   450                              <1> .pipe:
   451                              <1> ;Pipe processing here
   452                              <1> ;We handle stdin, closing the redir if it is and deleting
   453                              <1> ; the redir file.
   454                              <1> ;Then we handle stdout, moving the redir to stdin.
   455 00001365 66813D42EDFFFFFFFF  <1>     cmp word [pipeSTDIN], -1
   456 0000136E 7443                <1>     je .pipeNostdin
   457                              <1>     ;We close the handle first and delete the file.
   458 00001370 0FB71D39EDFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   459 00001377 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   460 00001379 B800460000          <1>     mov eax, 4600h
   461 0000137E CD21                <1>     int 21h
   462 00001380 0F82C4FEFFFF        <1>     jc pipeFailure
   463 00001386 B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   464 0000138B CD21                <1>     int 21h
   465 0000138D 0F82B7FEFFFF        <1>     jc pipeFailure
   466 00001393 488B15C0F0FFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   467 0000139A B800410000          <1>     mov eax, 4100h  ;Delete the file!
   468 0000139F CD21                <1>     int 21h
   469 000013A1 0F82A3FEFFFF        <1>     jc pipeFailure
   470 000013A7 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   471 000013AA 66C705FDECFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   472                              <1> .pipeNostdin:
   473 000013B3 66813DF6ECFFFFFFFF  <1>     cmp word [pipeSTDOUT], -1   ;If no stdout redir, exit now
   474 000013BC 7474                <1>     je .redirInClear
   475                              <1> ;Duplicate STDIN to save across pipe
   476 000013BE B800450000          <1>     mov eax, 4500h
   477 000013C3 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   478 000013C5 CD21                <1>     int 21h
   479 000013C7 0F827DFEFFFF        <1>     jc pipeFailure
   480 000013CD 668905DCECFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   481                              <1> 
   482                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   483 000013D4 B800460000          <1>     mov eax, 4600h
   484 000013D9 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   485 000013DB FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   486 000013DD CD21                <1>     int 21h
   487 000013DF 0F8265FEFFFF        <1>     jc pipeFailure
   488                              <1> 
   489                              <1> ;Now return the original stdout to stdout
   490 000013E5 89D9                <1>     mov ecx, ebx
   491 000013E7 0FB71DC4ECFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   492 000013EE B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   493 000013F3 CD21                <1>     int 21h
   494 000013F5 0F824FFEFFFF        <1>     jc pipeFailure
   495                              <1> 
   496                              <1> ;Now close the DUP'ed STDOUT
   497 000013FB B8003E0000          <1>     mov eax, 3E00h
   498 00001400 CD21                <1>     int 21h
   499 00001402 0F8242FEFFFF        <1>     jc pipeFailure
   500                              <1> 
   501                              <1> ;Finally unwind STDIN to the beginning of the file
   502 00001408 B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   503 0000140D 31DB                <1>     xor ebx, ebx    ;STDIN handle
   504 0000140F 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   505 00001411 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   506 00001413 CD21                <1>     int 21h
   507 00001415 0F822FFEFFFF        <1>     jc pipeFailure  ;This should never happen
   508                              <1> 
   509 0000141B 488B1530F0FFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   510 00001422 48891531F0FFFF      <1>     mov qword [oldPipe], rdx
   511 00001429 66C70580ECFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   512                              <1> .redirInClear:
   513                              <1> ;Check redir in
   514 00001432 F6057BECFFFFFF      <1>     test byte [redirIn], -1
   515 00001439 7433                <1>     jz .redirOutClear
   516                              <1> 
   517 0000143B 0FB71D74ECFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   518 00001442 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   519 00001444 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   520 00001449 CD21                <1>     int 21h
   521 0000144B 0F82EBFDFFFF        <1>     jc redirFailure
   522 00001451 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   523 00001456 CD21                <1>     int 21h
   524 00001458 0F82DEFDFFFF        <1>     jc redirFailure
   525 0000145E 66C7054FECFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   526 00001467 C60546ECFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   527                              <1> .redirOutClear:
   528                              <1> ;Now check Redir Out
   529 0000146E F60540ECFFFFFF      <1>     test byte [redirOut], -1
   530                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001475 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001477 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   531                              <1> 
   532 00001478 0FB71D39ECFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   533 0000147F B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   534 00001484 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   535 00001489 CD21                <1>     int 21h
   536 0000148B 0F82ABFDFFFF        <1>     jc redirFailure
   537 00001491 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   538 00001496 CD21                <1>     int 21h
   539 00001498 0F829EFDFFFF        <1>     jc redirFailure
   540 0000149E 66C70511ECFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   541 000014A7 C60507ECFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   542                              <1>     return
    13                              <2> %%_ret:
    14 000014AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   543                              <1> 
   544                              <1> checkAndSetupRedir:
   545                              <1> ;Checks and sets up redir as appropriate
   546                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   547                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   548                              <1> ;Output: ZF=NZ => No redir
   549                              <1> ;        ZF=ZY => Redir
   550                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   551                              <1> ;CF=CY if pipe set or an embedded CR found. rsi points to first char past it!
   552 000014AF 57                  <1>     push rdi
   553 000014B0 3C3C                <1>     cmp al, "<"
   554 000014B2 740F                <1>     je .inputRedir
   555 000014B4 3C3E                <1>     cmp al, ">"
   556 000014B6 7473                <1>     je .outputRedir
   557 000014B8 3C7C                <1>     cmp al, "|"
   558 000014BA 0F841B010000        <1>     je .pipeSetup
   559 000014C0 F8                  <1>     clc
   560                              <1> .redirExit:
   561 000014C1 5F                  <1>     pop rdi
   562                              <1>     return
    13                              <2> %%_ret:
    14 000014C2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   563                              <1> .inputRedir:
   564 000014C3 C605EAEBFFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   565 000014CA 488D3D45EEFFFF      <1>     lea rdi, rdrInFilespec
   566 000014D1 E87A180000          <1>     call skipDelimiters ;Skip spaces between < and the filespec
   567 000014D6 E888190000          <1>     call cpDelimPathToBufz
   568 000014DB 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char as 
   569                              <1>     ;Setup the redir here for STDIN
   570 000014DE 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   571 000014E0 B800450000          <1>     mov eax, 4500h
   572 000014E5 CD21                <1>     int 21h
   573 000014E7 0F827A010000        <1>     jc .redirError
   574 000014ED 668905C2EBFFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   575 000014F4 488D151BEEFFFF      <1>     lea rdx, rdrInFilespec
   576 000014FB B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   577 00001500 CD21                <1>     int 21h
   578 00001502 0F825F010000        <1>     jc .redirError
   579 00001508 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   580 0000150A 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   581 0000150D B800460000          <1>     mov eax, 4600h
   582 00001512 CD21                <1>     int 21h
   583 00001514 0F824D010000        <1>     jc .redirError
   584 0000151A B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   585 0000151F CD21                <1>     int 21h
   586 00001521 0F8240010000        <1>     jc .redirError
   587 00001527 30C0                <1>     xor al, al
   588 00001529 EB96                <1>     jmp short .redirExit
   589                              <1> .outputRedir:
   590 0000152B C60583EBFFFF01      <1>     mov byte [redirOut], 1
   591 00001532 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   592 00001535 7509                <1>     jne .notDouble
   593 00001537 FE0578EBFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   594 0000153D 48FFC6              <1>     inc rsi ;Go past it too
   595                              <1> .notDouble:
   596 00001540 488D3D1EEEFFFF      <1>     lea rdi, rdrOutFilespec
   597 00001547 E804180000          <1>     call skipDelimiters
   598 0000154C E812190000          <1>     call cpDelimPathToBufz
   599 00001551 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char as 
   600                              <1>     ;Setup the redir here for STDOUT
   601 00001554 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   602 00001559 B800450000          <1>     mov eax, 4500h
   603 0000155E CD21                <1>     int 21h
   604 00001560 0F8201010000        <1>     jc .redirError
   605 00001566 6689054BEBFFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   606 0000156D 488D15F1EDFFFF      <1>     lea rdx, rdrOutFilespec
   607 00001574 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   608 00001579 CD21                <1>     int 21h
   609 0000157B 730F                <1>     jnc .fileExists
   610 0000157D B8003C0000          <1>     mov eax, 3C00h
   611 00001582 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   612 00001584 CD21                <1>     int 21h
   613 00001586 0F82DB000000        <1>     jc .redirError
   614                              <1> .fileExists:
   615 0000158C B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   616 00001591 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   617 00001594 B800460000          <1>     mov eax, 4600h  ;DUP2
   618 00001599 CD21                <1>     int 21h
   619 0000159B 0F82C6000000        <1>     jc .redirError
   620 000015A1 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   621 000015A6 CD21                <1>     int 21h
   622 000015A8 0F82B9000000        <1>     jc .redirError
   623 000015AE 803D00EBFFFF01      <1>     cmp byte [redirOut], 1
   624 000015B5 7416                <1>     je .dontAppend
   625                              <1>     ;Here we move the file pointer to the end of the file
   626 000015B7 31D2                <1>     xor edx, edx    ;Low order 32 bits
   627 000015B9 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   628 000015BB BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   629 000015C0 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   630 000015C5 CD21                <1>     int 21h
   631 000015C7 0F829A000000        <1>     jc .redirError
   632                              <1> .dontAppend:
   633 000015CD C605E1EAFFFFFF      <1>     mov byte [redirOut], -1
   634 000015D4 30C0                <1>     xor al, al
   635 000015D6 E9E6FEFFFF          <1>     jmp .redirExit
   636                              <1> .pipeSetup:
   637                              <1> ;We only need to setup STDOUT redirection to the pipe file
   638 000015DB 56                  <1>     push rsi    ;Save rsi pointing to char past |
   639 000015DC E86F170000          <1>     call skipDelimiters ;Check if this is a double ||
   640 000015E1 803E7C              <1>     cmp byte [rsi], "|" 
   641 000015E4 5E                  <1>     pop rsi
   642 000015E5 7475                <1>     je .pipeError
   643 000015E7 488D15C6EDFFFF      <1>     lea rdx, pipe1Filespec
   644 000015EE 803A00              <1>     cmp byte [rdx], 0
   645 000015F1 740C                <1>     jz .pathFound
   646 000015F3 488D1509EEFFFF      <1>     lea rdx, pipe2Filespec
   647 000015FA 803A00              <1>     cmp byte [rdx], 0
   648 000015FD 755D                <1>     jnz .pipeError
   649                              <1> .pathFound:
   650 000015FF 4889154CEEFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   651 00001606 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   652 0000160B BB01000000          <1>     mov ebx, 1
   653 00001610 CD21                <1>     int 21h
   654 00001612 7248                <1>     jc .pipeError
   655 00001614 66890597EAFFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   656 0000161B E807170000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   657 00001620 0441                <1>     add al, "A"
   658 00001622 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   659 00001627 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   660 00001629 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   661 0000162B 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   662 0000162D B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   663 00001632 CD21                <1>     int 21h
   664 00001634 7226                <1>     jc .pipeError
   665                              <1>     ;AX has the handle for this file now, this will become STDOUT
   666                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   667 00001636 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   668 00001639 B901000000          <1>     mov ecx, 1
   669 0000163E B800460000          <1>     mov eax, 4600h
   670 00001643 CD21                <1>     int 21h
   671 00001645 7215                <1>     jc .pipeError
   672 00001647 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   673 0000164C CD21                <1>     int 21h
   674 0000164E 720C                <1>     jc .pipeError
   675 00001650 C60558EAFFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   676 00001657 30C0                <1>     xor al, al  ;Set ZF
   677 00001659 F9                  <1>     stc         ;But also CF to indicate pipe!
   678 0000165A 5F                  <1>     pop rdi
   679                              <1>     return
    13                              <2> %%_ret:
    14 0000165B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   680                              <1> .pipeError:
   681 0000165C 5F                  <1>     pop rdi 
   682 0000165D E8E8FBFFFF          <1>     call pipeFailure
   683 00001662 E933F8FFFF          <1>     jmp commandMain ;Fully reset the state if a pipe failure occurs.
   684                              <1> .redirError:
   685 00001667 5F                  <1>     pop rdi 
   686 00001668 E8CFFBFFFF          <1>     call redirFailure
   687 0000166D E928F8FFFF          <1>     jmp commandMain ;Fully reset the state if a redir failure occurs.
   688                              <1> 
   689                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   690                              <1> ;Input: rsi points to the count byte of a command line
   691 00001672 4150                <1>     push r8
   692 00001674 4151                <1>     push r9
   693 00001676 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   694 00001678 CD21                <1>     int 21h
   695 0000167A 52                  <1>     push rdx    ;Save on the stack
   696 0000167B 488D1D7EE8FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   697 00001682 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   698 00001684 CD21                <1>     int 21h
   699 00001686 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   700 00001689 4989D9              <1>     mov r9, rbx
   701 0000168C 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   702 00001693 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   703 00001698 F348A5              <1>     rep movsq   ;Copy command line over
   704                              <1>     ;call doCommandLine
   705 0000169B 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   706 0000169C B450                <1>     mov ah, 50h ;Set Current PSP
   707 0000169E CD21                <1>     int 21h
   708 000016A0 4159                <1>     pop r9
   709 000016A2 4158                <1>     pop r8
   710 000016A4 48CF                <1>     iretq
    16                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> noSelfCopyError:
     7 000016A6 488D155AF2FFFF      <1>     lea rdx, noSelfCopy
     8 000016AD EB34                <1>     jmp short badCmn
     9                              <1> badParamError:
    10 000016AF 488D150FF3FFFF      <1>     lea rdx, badParm
    11 000016B6 EB2B                <1>     jmp short badCmn
    12                              <1> badDriveError:
    13 000016B8 488D15C9F2FFFF      <1>     lea rdx, badDrv
    14 000016BF EB22                <1>     jmp short badCmn
    15                              <1> badArgError:
    16 000016C1 488D157AF5FFFF      <1>     lea rdx, badArgs
    17 000016C8 EB19                <1>     jmp short badCmn
    18                              <1> badFileError:
    19 000016CA 488D1555F5FFFF      <1>     lea rdx, badSpec
    20 000016D1 EB10                <1>     jmp short badCmn
    21                              <1> badDupFnf:
    22                              <1> ;Hybrid error message
    23 000016D3 488D15BAF1FFFF      <1>     lea rdx, dupName
    24 000016DA EB07                <1>     jmp short badCmn
    25                              <1> badDirError:
    26 000016DC 488D15E3F3FFFF      <1>     lea rdx, badDir
    27                              <1> badCmn:
    28 000016E3 B800090000          <1>     mov eax, 0900h
    29 000016E8 CD21                <1>     int 21h
    30 000016EA F9                  <1>     stc ;Return with CY => Error occured
    31                              <1>     return
    13                              <2> %%_ret:
    14 000016EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> bpt:
    33 000016EC 803541F0FFFFFF      <1>     xor byte [bpActive], -1
    34 000016F3 F6053AF0FFFFFF      <1>     test byte [bpActive], -1
    35 000016FA 7509                <1>     jnz .on
    36 000016FC 488D1522000000      <1>     lea rdx, .l2
    37 00001703 EB07                <1>     jmp short .write
    38                              <1> .on:
    39 00001705 488D1508000000      <1>     lea rdx, .l1
    40                              <1> .write:
    41 0000170C B800090000          <1>     mov eax, 0900h
    42 00001711 CD21                <1>     int 21h
    43                              <1>     return
    13                              <2> %%_ret:
    14 00001713 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    44 00001714 427265616B706F696E- <1> .l1: db "Breakpoints ON",CR,LF,"$"
    44 0000171D 7473204F4E0D0A24    <1>
    45 00001725 427265616B706F696E- <1> .l2: db "Breakpoints OFF",CR,LF,"$"
    45 0000172E 7473204F46460D0A24  <1>
    46                              <1> 
    47                              <1> dir:
    48                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    49 00001737 C605A6EDFFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    50 0000173E C605A0EDFFFF00      <1>     mov byte [dirLineCtr], 0
    51 00001745 C6059AEDFFFF00      <1>     mov byte [dirFileCtr], 0
    52 0000174C C60595EDFFFF00      <1>     mov byte [dirSrchDir], 0
    53 00001753 C60508EDFFFF00      <1>     mov byte [searchSpec], 0
    54 0000175A 488D3D09EEFFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    55 00001761 C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    56 00001764 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    56 0000176D 3F                  <1>
    57 0000176E 48894701            <1>     mov qword [rdi + fcb.filename], rax
    58 00001772 C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    59                              <1>     ;Start by scanning for the switches
    60 00001779 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    61 00001780 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    62 00001783 E8C8150000          <1>     call skipDelimiters ;Skip leading delimiters
    63 00001788 4881C603000000      <1>     add rsi, 3  ;Go past the DIR
    64                              <1> .scanNew:
    65 0000178F E8BC150000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    66 00001794 AC                  <1>     lodsb   ;Get this char
    67 00001795 3C0D                <1>     cmp al, CR
    68 00001797 744D                <1>     je .scanDone
    69 00001799 3A058DE8FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    70 0000179F 7524                <1>     jne .notSwitch
    71 000017A1 AC                  <1>     lodsb   ;Get the next char
    72 000017A2 E897150000          <1>     call ucChar
    73 000017A7 3C57                <1>     cmp al, "W"
    74 000017A9 7509                <1>     jne .notWide
    75 000017AB 800D32EDFFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    76 000017B2 EBDB                <1>     jmp short .scanNew
    77                              <1> .notWide:
    78 000017B4 3C50                <1>     cmp al, "P"
    79 000017B6 0F85F3FEFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    80 000017BC 800D21EDFFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    81 000017C3 EBCA                <1>     jmp short .scanNew
    82                              <1> .notSwitch:
    83 000017C5 F60518EDFFFF04      <1>     test byte [dirFlags], dirFileType
    84 000017CC 0F85DDFEFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    85                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    86 000017D2 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    87 000017D5 E8C6160000          <1>     call copyArgumentToSearchSpec   
    88 000017DA 48FFCE              <1>     dec rsi ;Point back to the terminator char
    89 000017DD 800D00EDFFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    90 000017E4 EBA9                <1>     jmp short .scanNew
    91                              <1> .scanDone:
    92 000017E6 F605F7ECFFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    93 000017ED 7438                <1>     jz .currentDrv
    94                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
    95 000017EF 488D356CECFFFF      <1>     lea rsi, searchSpec
    96 000017F6 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
    97 000017FA 752B                <1>     jne .currentDrv
    98                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
    99 000017FC 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   100 00001801 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   101 00001805 B801290000          <1>     mov eax, 2901h   ;Parse filename
   102 0000180A CD21                <1>     int 21h
   103 0000180C 3CFF                <1>     cmp al, -1
   104 0000180E 0F84A4FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   105                              <1>     ;Else the drive in the fcb is valid
   106 00001814 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   107 00001819 84C0                <1>     test al, al
   108 0000181B 740A                <1>     jz .currentDrv
   109 0000181D FEC8                <1>     dec al  ;Convert to 0 based drive number
   110 0000181F 8805C2ECFFFF        <1>     mov byte [dirDrv], al
   111 00001825 EB0B                <1>     jmp short .dirPrintVol
   112                              <1> .currentDrv:
   113 00001827 E8FB140000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   114 0000182C 8805B5ECFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   115                              <1> .dirPrintVol:
   116 00001832 488D3529ECFFFF      <1>     lea rsi, searchSpec
   117                              <1> ;Now construct the path on dirSrchDir.
   118 00001839 488D3DA8ECFFFF      <1>     lea rdi, dirSrchDir
   119 00001840 0FB605A0ECFFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   120 00001847 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   121 00001849 0441                <1>     add al, "A" ;Turn into a letter
   122 0000184B B43A                <1>     mov ah, ":"
   123 0000184D 66AB                <1>     stosw   ;Store X: into the search path
   124 0000184F B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   125 00001854 CD2F                <1>     int 2fh
   126 00001856 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   127 00001858 0F845AFEFFFF        <1>     je badDriveError
   128                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   129 0000185E 8A05C7E7FFFF        <1>     mov al, byte [pathSep]
   130 00001864 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   131 00001866 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   132 00001868 AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   133 00001869 FEC2                <1>     inc dl  ;Increment by 1
   134 0000186B 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   135 0000186E B800470000          <1>     mov eax, 4700h  ;Print current working directory
   136 00001873 CD21                <1>     int 21h
   137 00001875 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   138                              <1>     ;rsi points to the first char in the provided path.
   139                              <1>     ;rdi points to the first char of the cwd.
   140 00001878 31C0                <1>     xor eax, eax
   141                              <1> .goToEndOfCwd:
   142                              <1> ;Move to the end of the string, could use repne?
   143 0000187A 3807                <1>     cmp byte [rdi], al
   144 0000187C 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   145 0000187E 48FFC7              <1>     inc rdi
   146 00001881 EBF7                <1>     jmp short .goToEndOfCwd
   147                              <1> .prepCopy:
   148 00001883 8A05A2E7FFFF        <1>     mov al, byte [pathSep]
   149 00001889 3806                <1>     cmp byte [rsi], al
   150 0000188B 7412                <1>     je .copyPathLoop
   151 0000188D B43A                <1>     mov ah, ":"
   152 0000188F 86C4                <1>     xchg al, ah
   153 00001891 663947FE            <1>     cmp word [rdi - 2], ax
   154 00001895 7408                <1>     je .copyPathLoop
   155 00001897 88E0                <1>     mov al, ah
   156 00001899 3847FF              <1>     cmp byte [rdi - 1], al
   157 0000189C 7401                <1>     je .copyPathLoop
   158 0000189E AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   159                              <1> .copyPathLoop:
   160 0000189F AC                  <1>     lodsb
   161 000018A0 AA                  <1>     stosb
   162 000018A1 84C0                <1>     test al, al ;Was the char we just copied a null?
   163 000018A3 744C                <1>     jz .exitPathCopy
   164 000018A5 3C2E                <1>     cmp al, "." ;Handle . and .. separately
   165 000018A7 75F6                <1>     jne .copyPathLoop
   166 000018A9 F60584EEFFFFFF      <1>     test byte [bpActive], -1
   167 000018B0 7403                <1>     jz .bp1
   168                              <1>     breakpoint
    81 000018B2 6687DB              <2> xchg bx, bx
   169                              <1> .bp1:
   170                              <1>     ;Here handle dot and dot dot
   171 000018B5 8A06                <1>     mov al, byte [rsi]  ;Look ahead a char!
   172 000018B7 3C2E                <1>     cmp al, "." ;Is this another dot?
   173 000018B9 7405                <1>     je .twoDot
   174 000018BB 48FFCF              <1>     dec rdi ;Move rdi back to the position we just wrote the dot on
   175 000018BE EBDF                <1>     jmp short .copyPathLoop
   176                              <1> .twoDot:
   177                              <1>     ;Now search backwards for the previous pathsep
   178 000018C0 48FFC6              <1>     inc rsi ;Move over the second dot
   179 000018C3 8A0562E7FFFF        <1>     mov al, byte [pathSep]
   180 000018C9 31C9                <1>     xor ecx, ecx
   181 000018CB FFC9                <1>     dec ecx
   182 000018CD FD                  <1>     std
   183 000018CE F2AE                <1>     repne scasb   ;Search for this pathsep
   184 000018D0 FC                  <1>     cld
   185 000018D1 803F3A              <1>     cmp byte [rdi], ":" ;rdi points to char before pathsep. Is it drive sep?
   186 000018D4 0F84D5FDFFFF        <1>     je badParamError    ;Exit error if so.
   187 000018DA FD                  <1>     std
   188 000018DB F2AE                <1>     repne scasb
   189 000018DD FC                  <1>     cld
   190 000018DE 4881C702000000      <1>     add rdi, 2  ;Now go past this pathsep!
   191 000018E5 807E012E            <1>     cmp byte [rsi + 1], "."  ;Is there a third dot?
   192 000018E9 0F84C0FDFFFF        <1>     je badParamError    ;Error if so!
   193 000018EF EBAE                <1>     jmp short .copyPathLoop   ;Keep going if not
   194                              <1> .exitPathCopy:
   195                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   196 000018F1 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   197 000018F8 8A052DE7FFFF        <1>     mov al, byte [pathSep]
   198 000018FE B43A                <1>     mov ah, ":"
   199 00001900 86C4                <1>     xchg al, ah
   200 00001902 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   201 00001906 7409                <1>     je .skipOverwrite
   202 00001908 88E0                <1>     mov al, ah
   203 0000190A 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   204 0000190C 7503                <1>     jne .skipOverwrite
   205 0000190E C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   206                              <1> .skipOverwrite:
   207 00001911 488D35D0EBFFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   208 00001918 4889F7              <1>     mov rdi, rsi
   209 0000191B B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   210 00001920 CD2F                <1>     int 2fh
   211 00001922 E886150000          <1>     call scanForWildcards
   212 00001927 742F                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   213 00001929 4889F2              <1>     mov rdx, rsi
   214 0000192C 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   215 00001930 7426                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   216                              <1> .notNull:
   217 00001932 E83D160000          <1>     call setDTA ;Set the DTA
   218 00001937 B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   219 0000193C B44E                <1>     mov ah, 4Eh ;Find first
   220 0000193E CD21                <1>     int 21h
   221 00001940 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   222                              <1> ;Now we have searched for the file, is a directory?
   223 00001942 F6059CE7FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   224 00001949 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   225                              <1>     ;Here we are searching IN a directory. Default search pattern!
   226 0000194B 31C0                <1>     xor eax, eax
   227 0000194D 31C9                <1>     xor ecx, ecx
   228 0000194F FFC9                <1>     dec ecx
   229 00001951 F2AE                <1>     repne scasb
   230 00001953 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   231 00001956 EB40                <1>     jmp short .wcDefaultSearch
   232                              <1> .wcSearchPattern:
   233                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   234                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   235 00001958 31C0                <1>     xor eax, eax
   236 0000195A 31C9                <1>     xor ecx, ecx
   237 0000195C FFC9                <1>     dec ecx
   238 0000195E F2AE                <1>     repne scasb ;Scan forwards
   239                              <1>     ;Here rdi points past the null at the end
   240 00001960 8A05C5E6FFFF        <1>     mov al, byte [pathSep]
   241 00001966 31C9                <1>     xor ecx, ecx
   242 00001968 FFC9                <1>     dec ecx
   243 0000196A FD                  <1>     std ;Search backwards
   244 0000196B F2AE                <1>     repne scasb
   245 0000196D FC                  <1>     cld ;Search forwards again
   246 0000196E 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   247 00001971 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   248 00001975 7503                <1>     jne .wcsp1
   249 00001977 48FFC7              <1>     inc rdi ;Go one char forwards
   250                              <1> .wcsp1:
   251                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   252 0000197A 57                  <1>     push rdi
   253 0000197B 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   254 0000197D 7503                <1>     jne .wcsp2
   255 0000197F 48FFC7              <1>     inc rdi
   256                              <1> .wcsp2:
   257 00001982 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   258 00001985 488D3DDEEBFFFF      <1>     lea rdi, dirSrchFCB
   259 0000198C B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   260 00001991 CD21                <1>     int 21h
   261 00001993 5F                  <1>     pop rdi
   262 00001994 31C0                <1>     xor eax, eax
   263 00001996 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   264                              <1> .wcDefaultSearch:
   265 00001998 0FB60548EBFFFF      <1>     movzx eax, byte [dirDrv] 
   266 0000199F E8610C0000          <1>     call volume.dirEP
   267 000019A4 488D1583F1FFFF      <1>     lea rdx, dirMain    ;Print message intro
   268 000019AB B409                <1>     mov ah, 09h
   269 000019AD CD21                <1>     int 21h
   270 000019AF C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   271 000019B2 488D152FEBFFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   272 000019B9 B409                <1>     mov ah, 09h
   273 000019BB CD21                <1>     int 21h
   274 000019BD C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   275 000019C0 488D1558EEFFFF      <1>     lea rdx, crlf2
   276 000019C7 B409                <1>     mov ah, 09h
   277 000019C9 CD21                <1>     int 21h
   278                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   279                              <1> ;rdi points to the terminating null
   280 000019CB 8A055AE6FFFF        <1>     mov al, byte [pathSep]
   281 000019D1 3847FF              <1>     cmp byte [rdi - 1], al
   282 000019D4 7403                <1>     je .root
   283 000019D6 48FFC7              <1>     inc rdi
   284                              <1> .root:
   285 000019D9 48FFCF              <1>     dec rdi ;Point back to the pathsep
   286 000019DC AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   287 000019DD 488D3587EBFFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   288 000019E4 E83A140000          <1>     call FCBToAsciiz    ;Terminates for free
   289 000019E9 E801000000          <1>     call .searchForFile
   290                              <1>     return
    13                              <2> %%_ret:
    14 000019EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   291                              <1> 
   292                              <1> .searchForFile:
   293 000019EF E880150000          <1>     call setDTA
   294 000019F4 4C8D15D5E6FFFF      <1>     lea r10, cmdFFBlock
   295 000019FB B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   296 00001A00 488D15E1EAFFFF      <1>     lea rdx, dirSrchDir
   297 00001A07 B44E                <1>     mov ah, 4Eh ;Find first
   298 00001A09 CD21                <1>     int 21h
   299 00001A0B 720B                <1>     jc .dirNoMoreFiles
   300                              <1> .findNext:
   301 00001A0D E878000000          <1>     call .dirPrintFileData  ;Print the file information
   302 00001A12 B44F                <1>     mov ah, 4Fh
   303 00001A14 CD21                <1>     int 21h
   304 00001A16 73F5                <1>     jnc .findNext 
   305                              <1> .dirNoMoreFiles:
   306 00001A18 F605C5EAFFFF01      <1>     test byte [dirFlags], dirWideType
   307 00001A1F 740B                <1>     jz .dirNoEndNewLine
   308 00001A21 488D15F4EDFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   309 00001A28 B409                <1>     mov ah, 09h
   310 00001A2A CD21                <1>     int 21h
   311                              <1> .dirNoEndNewLine:
   312                              <1>     ;Now we print the number of files and the number of bytes on the disk
   313 00001A2C 488D15B3F3FFFF      <1>     lea rdx, fourSpc
   314 00001A33 B409                <1>     mov ah, 09h
   315 00001A35 CD21                <1>     int 21h
   316 00001A37 B409                <1>     mov ah, 09h ;Print four Spaces twice
   317 00001A39 CD21                <1>     int 21h
   318 00001A3B 0FB605A4EAFFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   319 00001A42 E87A140000          <1>     call printDecimalWord
   320 00001A47 488D1519EFFFFF      <1>     lea rdx, dirOk
   321 00001A4E B409                <1>     mov ah, 09h
   322 00001A50 CD21                <1>     int 21h
   323 00001A52 488D1592F3FFFF      <1>     lea rdx, threeSpc
   324 00001A59 B409                <1>     mov ah, 09h
   325 00001A5B CD21                <1>     int 21h
   326 00001A5D B800360000          <1>     mov eax, 3600h ;Get disk info
   327 00001A62 8A157FEAFFFF        <1>     mov dl, byte [dirDrv]
   328 00001A68 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   329 00001A6A CD21                <1>     int 21h ;Get disk free space info
   330 00001A6C 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   331 00001A6F 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   332 00001A72 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   333 00001A74 F7E1                <1>     mul ecx ;Get bytes per cluster
   334 00001A76 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   335                              <1>     ;rax now has the number of free bytes on the disk
   336 00001A79 E843140000          <1>     call printDecimalWord
   337 00001A7E 488D15ECEEFFFF      <1>     lea rdx, bytesOk
   338 00001A85 B409                <1>     mov ah, 09h
   339 00001A87 CD21                <1>     int 21h
   340                              <1>     return
    13                              <2> %%_ret:
    14 00001A89 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   341                              <1> 
   342                              <1> .dirPrintFileData:
   343                              <1> ;Use fcbCmdSpec to build the file name with space
   344                              <1> ;Start by print the name (same for both cases)
   345                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   346 00001A8A F60554E6FFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   347                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001A91 75(89)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   348 00001A93 488D3554E6FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   349 00001A9A 488D3D4FE8FFFF      <1>     lea rdi, fcbCmdSpec
   350 00001AA1 E833130000          <1>     call asciiFilenameToFCB
   351 00001AA6 488D1543E8FFFF      <1>     lea rdx, fcbCmdSpec
   352 00001AAD B908000000          <1>     mov ecx, 8  ;Print 8 chars
   353 00001AB2 BB01000000          <1>     mov ebx, 1  ;STDOUT
   354 00001AB7 B440                <1>     mov ah, 40h ;Write handle
   355 00001AB9 CD21                <1>     int 21h
   356 00001ABB 52                  <1>     push rdx
   357 00001ABC B220                <1>     mov dl, " "
   358 00001ABE B402                <1>     mov ah, 02h ;Print char
   359 00001AC0 CD21                <1>     int 21h
   360 00001AC2 5A                  <1>     pop rdx
   361 00001AC3 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   362 00001ACA B903000000          <1>     mov ecx, 3  ;Print three chars
   363 00001ACF BB01000000          <1>     mov ebx, 1  ;STDOUT
   364 00001AD4 B440                <1>     mov ah, 40h ;Write handle
   365 00001AD6 CD21                <1>     int 21h
   366 00001AD8 F60505EAFFFF01      <1>     test byte [dirFlags], dirWideType
   367 00001ADF 0F85A8000000        <1>     jnz .widePrint
   368                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   369                              <1>     ;Now check if a DIR
   370 00001AE5 F605F9E5FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   371 00001AEC 7418                <1>     jz .dirPrintNotDir
   372 00001AEE 488D158AEEFFFF      <1>     lea rdx, dirLbl
   373 00001AF5 B409                <1>     mov ah, 09h
   374 00001AF7 CD21                <1>     int 21h
   375 00001AF9 488D15EBF2FFFF      <1>     lea rdx, threeSpc
   376 00001B00 B409                <1>     mov ah, 09h
   377 00001B02 CD21                <1>     int 21h
   378 00001B04 EB4F                <1>     jmp short .dirPrintFileDT
   379                              <1> .dirPrintNotDir:
   380                              <1> ;Here we print the file size
   381 00001B06 B220                <1>     mov dl, " "
   382 00001B08 B402                <1>     mov ah, 02h
   383 00001B0A CD21                <1>     int 21h
   384 00001B0C 8B05D8E5FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   385 00001B12 E81B140000          <1>     call getDecimalWord
   386 00001B17 4889CB              <1>     mov rbx, rcx
   387 00001B1A 51                  <1>     push rcx
   388 00001B1B 480FCB              <1>     bswap rbx
   389 00001B1E B908000000          <1>     mov ecx, 8
   390                              <1> .dirPrintFileSizePrep:
   391 00001B23 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   392 00001B25 7514                <1>     jne .dirPrintFileSize
   393 00001B27 B402                <1>     mov ah, 02h
   394 00001B29 B220                <1>     mov dl, " "
   395 00001B2B CD21                <1>     int 21h
   396 00001B2D 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   397 00001B31 FFC9                <1>     dec ecx
   398 00001B33 81F901000000        <1>     cmp ecx, 1
   399 00001B39 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   400                              <1> .dirPrintFileSize:
   401 00001B3B 5B                  <1>     pop rbx
   402                              <1> .dirPrintFileSizeLoop:
   403 00001B3C 88DA                <1>     mov dl, bl
   404 00001B3E B402                <1>     mov ah, 02h
   405 00001B40 CD21                <1>     int 21h
   406 00001B42 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   407 00001B46 FFC9                <1>     dec ecx
   408 00001B48 75F2                <1>     jnz .dirPrintFileSizeLoop
   409 00001B4A 488D159EF2FFFF      <1>     lea rdx, twoSpc
   410 00001B51 B409                <1>     mov ah, 09h
   411 00001B53 CD21                <1>     int 21h
   412                              <1> .dirPrintFileDT:
   413 00001B55 B220                <1>     mov dl, " "
   414 00001B57 B402                <1>     mov ah, 02h
   415 00001B59 CD21                <1>     int 21h
   416 00001B5B 0FB70586E5FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   417 00001B62 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   418 00001B64 E8140F0000          <1>     call printDate
   419 00001B69 488D157FF2FFFF      <1>     lea rdx, twoSpc
   420 00001B70 B409                <1>     mov ah, 09h
   421 00001B72 CD21                <1>     int 21h
   422 00001B74 0FB7056BE5FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   423 00001B7B E81F100000          <1>     call printTime
   424 00001B80 488D1595ECFFFF      <1>     lea rdx, crlf
   425 00001B87 B409                <1>     mov ah, 09h
   426 00001B89 CD21                <1>     int 21h
   427 00001B8B EB0B                <1>     jmp short .dirPrintNameExit
   428                              <1> .widePrint:
   429                              <1> ;If /W, print name space ext space space space space
   430 00001B8D 488D1552F2FFFF      <1>     lea rdx, fourSpc
   431 00001B94 B409                <1>     mov ah, 09h ;Print string
   432 00001B96 CD21                <1>     int 21h
   433                              <1> .dirPrintNameExit:
   434 00001B98 FE0548E9FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   435 00001B9E FE0541E9FFFF        <1>     inc byte [dirLineCtr]
   436 00001BA4 803D3AE9FFFF17      <1>     cmp byte [dirLineCtr], 23
   437                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001BAB 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001BAD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   438 00001BAE 488D15F1EDFFFF      <1>     lea rdx, pauseMes
   439 00001BB5 B409                <1>     mov ah, 09h
   440 00001BB7 CD21                <1>     int 21h
   441 00001BB9 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   442 00001BBB CD21                <1>     int 21h
   443 00001BBD C60521E9FFFF00      <1>     mov byte [dirLineCtr], 0
   444 00001BC4 488D1551ECFFFF      <1>     lea rdx, crlf   ;Force new line
   445 00001BCB B409                <1>     mov ah, 09h
   446 00001BCD CD21                <1>     int 21h
   447                              <1>     return
    13                              <2> %%_ret:
    14 00001BCF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   448                              <1> 
   449                              <1> chdir:
   450 00001BD0 F605E3E4FFFFFF      <1>     test byte [arg1Flg], -1
   451 00001BD7 754D                <1>     jnz .changeDir
   452                              <1>     ;Print CWD
   453                              <1> .printCWD:
   454 00001BD9 E8A2100000          <1>     call putCWDInPrompt ;Exactly the same procedure
   455 00001BDE E8840E0000          <1>     call printCRLF
   456                              <1>     return
    13                              <2> %%_ret:
    14 00001BE3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   457                              <1> .printDiskCWD:
   458                              <1> ;Print CWD for a specified drive
   459 00001BE4 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   460 00001BE8 88D0                <1>     mov al, dl
   461 00001BEA 0440                <1>     add al, "@" ;Get the UC letter
   462 00001BEC B43A                <1>     mov ah, ":"
   463 00001BEE 488D3D6DE8FFFF      <1>     lea rdi, searchSpec
   464 00001BF5 66AB                <1>     stosw   ;Store X:, rdi+=2
   465 00001BF7 8A052EE4FFFF        <1>     mov al, byte [pathSep]
   466 00001BFD AA                  <1>     stosb   ;Store pathSep, inc rdi
   467 00001BFE B447                <1>     mov ah, 47h ;Get Current Working Directory
   468 00001C00 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   469 00001C03 CD21                <1>     int 21h
   470 00001C05 E822110000          <1>     call strlen
   471 00001C0A 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   472 00001C10 B440                <1>     mov ah, 40h ;Write to handle
   473 00001C12 BB01000000          <1>     mov ebx, 1  ;STDOUT
   474 00001C17 488D1544E8FFFF      <1>     lea rdx, searchSpec
   475 00001C1E CD21                <1>     int 21h
   476 00001C20 E8420E0000          <1>     call printCRLF
   477                              <1>     return
    13                              <2> %%_ret:
    14 00001C25 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   478                              <1> .changeDir:
   479 00001C26 8A0590E4FFFF        <1>     mov al, byte [arg1FCBret]
   480 00001C2C 3CFF                <1>     cmp al, -1 
   481 00001C2E 0F8484FAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   482                              <1>     ;cmp byte [r8 + fcb1 + fcb.filename], " "
   483                              <1>     ;jne .setPath
   484                              <1>     ;jmp .setPath
   485                              <1>     ;;If we searched for a . or .., the fcb will be blank. 
   486                              <1>     ;movzx eax, byte [arg1Off]
   487                              <1>     ;lea rsi, qword [r8 + cmdLine]
   488                              <1>     ;add rsi, rax
   489                              <1>     ;mov al, byte [pathSep]
   490                              <1>     ;cmp byte [rsi], al  ;Is the first char a pathsep?
   491                              <1>     ;je .setPath
   492                              <1>     ;cmp byte [rsi], "."
   493                              <1>     ;jne .printDiskCWD
   494                              <1> ;.setPath:
   495 00001C34 E84F120000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   496 00001C39 488D1522E8FFFF      <1>     lea rdx, searchSpec
   497 00001C40 B43B                <1>     mov ah, 3Bh ;CHDIR
   498 00001C42 CD21                <1>     int 21h
   499 00001C44 0F8292FAFFFF        <1>     jc badDirError
   500                              <1>     return
    13                              <2> %%_ret:
    14 00001C4A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   501                              <1> 
   502                              <1> mkdir:
   503 00001C4B F60568E4FFFFFF      <1>     test byte [arg1Flg], -1
   504 00001C52 0F8469FAFFFF        <1>     jz badArgError
   505 00001C58 F6055EE4FFFFFF      <1>     test byte [arg2Flg], -1
   506 00001C5F 0F855CFAFFFF        <1>     jnz badArgError
   507                              <1>     ;We have exactly one argument
   508 00001C65 8A0551E4FFFF        <1>     mov al, byte [arg1FCBret]
   509 00001C6B 3CFF                <1>     cmp al, -1 
   510 00001C6D 0F8445FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   511 00001C73 E810120000          <1>     call buildCommandPath
   512 00001C78 488D15E3E7FFFF      <1>     lea rdx, searchSpec
   513 00001C7F B800390000          <1>     mov eax, 3900h  ;MKDIR
   514 00001C84 CD21                <1>     int 21h
   515                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001C86 73(4A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   516                              <1> .badMake:   ;Else, bad make
   517 00001C88 488D154BEEFFFF      <1>     lea rdx, badMD
   518 00001C8F B800090000          <1>     mov eax, 0900h
   519 00001C94 CD21                <1>     int 21h
   520                              <1>     return
    13                              <2> %%_ret:
    14 00001C96 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   521                              <1> 
   522                              <1> rmdir:
   523 00001C97 F6051CE4FFFFFF      <1>     test byte [arg1Flg], -1
   524 00001C9E 0F841DFAFFFF        <1>     jz badArgError
   525 00001CA4 F60512E4FFFFFF      <1>     test byte [arg2Flg], -1
   526 00001CAB 0F8510FAFFFF        <1>     jnz badArgError
   527                              <1>     ;We have exactly one argument
   528 00001CB1 8A0505E4FFFF        <1>     mov al, byte [arg1FCBret]
   529 00001CB7 3CFF                <1>     cmp al, -1 
   530 00001CB9 0F84F9F9FFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   531 00001CBF E8C4110000          <1>     call buildCommandPath
   532 00001CC4 488D1597E7FFFF      <1>     lea rdx, searchSpec
   533 00001CCB B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   534 00001CD0 CD21                <1>     int 21h
   535                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001CD2 73(96)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   536                              <1> .badRemove:   ;Else, bad make
   537 00001CD4 488D151CEEFFFF      <1>     lea rdx, badRD
   538 00001CDB B800090000          <1>     mov eax, 0900h
   539 00001CE0 CD21                <1>     int 21h
   540                              <1>     return
    13                              <2> %%_ret:
    14 00001CE2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   541                              <1> 
   542                              <1> copy:
   543 00001CE3 F605D0E3FFFFFF      <1>     test byte [arg1Flg], -1
   544 00001CEA 0F84D1F9FFFF        <1>     jz badArgError
   545 00001CF0 F605C6E3FFFFFF      <1>     test byte [arg2Flg], -1
   546 00001CF7 0F84C4F9FFFF        <1>     jz badArgError
   547 00001CFD 0FB605B7E3FFFF      <1>     movzx eax, byte [arg1Off]
   548 00001D04 4C8B0504E3FFFF      <1>     mov r8, [pspPtr]
   549 00001D0B 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   550 00001D12 4889F3              <1>     mov rbx, rsi    ;Save the ptr to the start of the string in rbx
   551 00001D15 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   552 00001D18 488D3D8BE8FFFF      <1>     lea rdi, sourcePath
   553 00001D1F E83F110000          <1>     call cpDelimPathToBufz    
   554 00001D24 0FB60593E3FFFF      <1>     movzx eax, byte [arg2Off]
   555 00001D2B 4889DE              <1>     mov rsi, rbx    ;Get back the start of the ptr
   556 00001D2E 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   557 00001D31 488D3DF4E8FFFF      <1>     lea rdi, destPath
   558 00001D38 E826110000          <1>     call cpDelimPathToBufz   
   559                              <1> ;Before we open, we check if the two filenames are equal
   560                              <1> ; If so, crap out.
   561 00001D3D 488D3566E8FFFF      <1>     lea rsi, sourcePath
   562 00001D44 488D3DE1E8FFFF      <1>     lea rdi, destPath
   563 00001D4B B81E120000          <1>     mov eax, 121Eh
   564 00001D50 CD2F                <1>     int 2Fh
   565 00001D52 0F84D3000000        <1>     jz .sameFilename
   566                              <1>     ;Open source with read permission
   567                              <1>     ;Open destination with write permission
   568 00001D58 488D154BE8FFFF      <1>     lea rdx, sourcePath
   569 00001D5F B8003D0000          <1>     mov eax, 3D00h  ;Read open
   570 00001D64 CD21                <1>     int 21h
   571 00001D66 0F8243F9FFFF        <1>     jc badParamError
   572 00001D6C 6689053BE9FFFF      <1>     mov word [sourceHdl], ax
   573                              <1> 
   574 00001D73 0FB7D8              <1>     movzx ebx, ax   ;For bx
   575 00001D76 B800440000          <1>     mov eax, 4400h  ;Get device info in dx
   576 00001D7B CD21                <1>     int 21h
   577 00001D7D 6689152EE9FFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
   578                              <1> 
   579 00001D84 488D15A1E8FFFF      <1>     lea rdx, destPath
   580 00001D8B B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   581 00001D90 31C9                <1>     xor ecx, ecx    ;No file attributes
   582 00001D92 CD21                <1>     int 21h
   583 00001D94 0F82B8000000        <1>     jc .badExit
   584 00001D9A 6689050FE9FFFF      <1>     mov word [destHdl], ax
   585 00001DA1 31F6                <1>     xor esi, esi
   586 00001DA3 488D150AE9FFFF      <1>     lea rdx, copyBuffer
   587                              <1> .copyLoop:
   588 00001DAA B980000000          <1>     mov ecx, 128
   589 00001DAF 0FB71DF8E8FFFF      <1>     movzx ebx, word [sourceHdl]
   590 00001DB6 B43F                <1>     mov ah, 3Fh ;Read
   591 00001DB8 CD21                <1>     int 21h
   592 00001DBA 0F8292000000        <1>     jc .badExit
   593 00001DC0 85C0                <1>     test eax, eax
   594 00001DC2 743A                <1>     jz .okExit
   595 00001DC4 01C6                <1>     add esi, eax
   596 00001DC6 89C1                <1>     mov ecx, eax
   597 00001DC8 0FB71DE1E8FFFF      <1>     movzx ebx, word [destHdl]
   598 00001DCF B440                <1>     mov ah, 40h ;Write
   599 00001DD1 CD21                <1>     int 21h
   600 00001DD3 727D                <1>     jc .badExit
   601 00001DD5 3D80000000          <1>     cmp eax, 128    ;Did we read 128 chars?
   602 00001DDA 74CE                <1>     je .copyLoop
   603                              <1>     ;If not char dev, exit
   604 00001DDC 66F705CDE8FFFF8000  <1>     test word [srcHdlInfo], 80h ;Char dev bit set?
   605 00001DE5 7417                <1>     jz .okExit
   606                              <1>     ;Is handle in cooked or binary mode?
   607 00001DE7 66F705C2E8FFFF2000  <1>     test word [srcHdlInfo], 20h
   608 00001DF0 750C                <1>     jnz .okExit
   609                              <1>     ;Here the char dev must be in cooked mode. Check if the last char was ^Z
   610 00001DF2 09C0                <1>     or eax, eax ;Clear upper bits in eax
   611 00001DF4 488D7C02FF          <1>     lea rdi, qword [rdx + rax - 1]  ;Point to the last char in the buffer
   612 00001DF9 803F1A              <1>     cmp byte [rdi], EOF ;Was this EOF?
   613 00001DFC 75AC                <1>     jne .copyLoop   ;Jump if not
   614                              <1> .okExit:
   615 00001DFE E832000000          <1>     call .leaveCopyClose
   616 00001E03 488D1512EAFFFF      <1>     lea rdx, crlf
   617 00001E0A B409                <1>     mov ah, 09h
   618 00001E0C CD21                <1>     int 21h
   619 00001E0E 488D15D1EFFFFF      <1>     lea rdx, fourSpc
   620 00001E15 B409                <1>     mov ah, 09h
   621 00001E17 CD21                <1>     int 21h
   622 00001E19 B402                <1>     mov ah, 02h
   623 00001E1B B231                <1>     mov dl, "1" ;1 File(s) copied
   624 00001E1D CD21                <1>     int 21h
   625 00001E1F 488D152FEBFFFF      <1>     lea rdx, copyOk
   626 00001E26 B409                <1>     mov ah, 09h
   627 00001E28 CD21                <1>     int 21h
   628                              <1>     return
    13                              <2> %%_ret:
    14 00001E2A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   629                              <1> .sameFilename:
   630 00001E2B E805000000          <1>     call .leaveCopyClose ;Close the handles
   631 00001E30 E971F8FFFF          <1>     jmp noSelfCopyError
   632                              <1> .leaveCopyClose:
   633 00001E35 668B1D72E8FFFF      <1>     mov bx, word [sourceHdl]
   634 00001E3C B8003E0000          <1>     mov eax, 3E00h
   635 00001E41 CD21                <1>     int 21h
   636 00001E43 668B1D66E8FFFF      <1>     mov bx, word [destHdl]
   637 00001E4A B8003E0000          <1>     mov eax, 3E00h
   638 00001E4F CD21                <1>     int 21h
   639                              <1>     return
    13                              <2> %%_ret:
    14 00001E51 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   640                              <1> .badExit:
   641                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   642 00001E52 668B1D55E8FFFF      <1>     mov bx, word [sourceHdl]
   643 00001E59 6681FBFFFF          <1>     cmp bx, -1
   644 00001E5E 7407                <1>     je .skipSource
   645 00001E60 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   646 00001E65 CD21                <1>     int 21h
   647                              <1> .skipSource:
   648 00001E67 668B1D42E8FFFF      <1>     mov bx, word [destHdl]
   649 00001E6E 6681FBFFFF          <1>     cmp bx, -1
   650 00001E73 0F8436F8FFFF        <1>     je badParamError
   651 00001E79 B8003E0000          <1>     mov eax, 3E00h
   652 00001E7E CD21                <1>     int 21h
   653 00001E80 E92AF8FFFF          <1>     jmp badParamError
   654                              <1> 
   655                              <1> erase:
   656 00001E85 F6052EE2FFFFFF      <1>     test byte [arg1Flg], -1
   657 00001E8C 0F842FF8FFFF        <1>     jz badArgError
   658 00001E92 E8F10F0000          <1>     call buildCommandPath
   659 00001E97 488D15C4E5FFFF      <1>     lea rdx, searchSpec
   660 00001E9E B800410000          <1>     mov eax, 4100h  ;Delete File 
   661 00001EA3 31C9                <1>     xor ecx, ecx
   662 00001EA5 CD21                <1>     int 21h
   663 00001EA7 0F8214F8FFFF        <1>     jc badArgError
   664                              <1>     return
    13                              <2> %%_ret:
    14 00001EAD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   665                              <1> date:
   666 00001EAE 488D1548EBFFFF      <1>     lea rdx, curDate
   667 00001EB5 B409                <1>     mov ah, 09h
   668 00001EB7 CD21                <1>     int 21h
   669 00001EB9 B42A                <1>     mov ah, 2Ah ;DOS get date
   670 00001EBB CD21                <1>     int 21h
   671                              <1> 	;AL = day of the week (0=Sunday)
   672                              <1> 	;CX = year (1980-2099)
   673                              <1> 	;DH = month (1-12)
   674                              <1> 	;DL = day (1-31)
   675 00001EBD 66890DE2E6FFFF      <1>     mov word [td1], cx
   676 00001EC4 8815DEE6FFFF        <1>     mov byte [td3], dl
   677 00001ECA 8835D9E6FFFF        <1>     mov byte [td4], dh
   678 00001ED0 0FB6C0              <1>     movzx eax, al
   679 00001ED3 89C3                <1>     mov ebx, eax
   680 00001ED5 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   681 00001ED7 01D8                <1>     add eax, ebx ;Make it 3 times 
   682 00001ED9 488D15F9EAFFFF      <1>     lea rdx, dayName
   683 00001EE0 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   684 00001EE4 B903000000          <1>     mov ecx, 3  ;Print three chars
   685 00001EE9 BB01000000          <1>     mov ebx, 1  ;STDOUT
   686 00001EEE B440                <1>     mov ah, 40h ;Write to handle
   687 00001EF0 CD21                <1>     int 21h
   688 00001EF2 B220                <1>     mov dl, " "
   689 00001EF4 B402                <1>     mov ah, 02h
   690 00001EF6 CD21                <1>     int 21h
   691                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   692                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   693                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   694 00001EF8 0FB705A7E6FFFF      <1>     movzx eax, word [td1]   ;Get this word
   695 00001EFF C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   696 00001F02 0FB61DA0E6FFFF      <1>     movzx ebx, byte [td4]
   697 00001F09 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   698 00001F0C 09D8                <1>     or eax, ebx ;Add this date to eax
   699 00001F0E 0FB61D93E6FFFF      <1>     movzx ebx, byte [td3]
   700 00001F15 09D8                <1>     or eax, ebx
   701 00001F17 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   702 00001F1C E85C0B0000          <1>     call printDate
   703                              <1> 
   704 00001F21 488D15E6EAFFFF      <1>     lea rdx, newDate
   705 00001F28 B409                <1>     mov ah, 09h
   706 00001F2A CD21                <1>     int 21h
   707 00001F2C 488D15FAEAFFFF      <1>     lea rdx, ukDate
   708 00001F33 488D05E6EAFFFF      <1>     lea rax, usDate
   709 00001F3A 488D1DF9EAFFFF      <1>     lea rbx, jpDate
   710 00001F41 803DEEE0FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   711 00001F48 480F47D3            <1>     cmova rdx, rbx
   712 00001F4C 480F42D0            <1>     cmovb rdx, rax
   713 00001F50 B409                <1>     mov ah, 09h
   714 00001F52 CD21                <1>     int 21h
   715                              <1> 
   716 00001F54 488D1542E2FFFF      <1>     lea rdx, inBuffer
   717 00001F5B C6027E              <1>     mov byte [rdx], 126 ;Enter a string of up to 126 chars in length
   718 00001F5E B40A                <1>     mov ah, 0Ah
   719 00001F60 CD21                <1>     int 21h
   720 00001F62 52                  <1>     push rdx
   721 00001F63 488D15B2E8FFFF      <1>     lea rdx, crlf
   722 00001F6A B409                <1>     mov ah, 09h
   723 00001F6C CD21                <1>     int 21h
   724 00001F6E 5A                  <1>     pop rdx
   725 00001F6F 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   726                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001F73 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001F75 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   727                              <1>     return
    13                              <2> %%_ret:
    14 00001F76 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   728                              <1> 
   729                              <1> time:
   730 00001F77 488D15D8EAFFFF      <1>     lea rdx, curTime
   731 00001F7E B409                <1>     mov ah, 09h
   732 00001F80 CD21                <1>     int 21h
   733 00001F82 B42C                <1>     mov ah, 2Ch ;DOS get time
   734 00001F84 CD21                <1>     int 21h
   735                              <1>     ;CH = hour (0-23)
   736                              <1> 	;CL = minutes (0-59)
   737                              <1> 	;DH = seconds (0-59)
   738                              <1> 	;DL = hundredths (0-99)
   739 00001F86 880D1AE6FFFF        <1>     mov byte [td1], cl
   740 00001F8C 882D15E6FFFF        <1>     mov byte [td2], ch
   741 00001F92 881510E6FFFF        <1>     mov byte [td3], dl
   742 00001F98 88350BE6FFFF        <1>     mov byte [td4], dh
   743 00001F9E 0FB6C5              <1>     movzx eax, ch
   744 00001FA1 E86B0C0000          <1>     call printTime.printHours
   745                              <1> 
   746 00001FA6 8A1597E0FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   747 00001FAC B402                <1>     mov ah, 02h
   748 00001FAE CD21                <1>     int 21h
   749                              <1> 
   750 00001FB0 0FB605EFE5FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   751 00001FB7 E8450C0000          <1>     call printTime.printMinutesAlt
   752                              <1> 
   753 00001FBC 8A1581E0FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   754 00001FC2 B402                <1>     mov ah, 02h
   755 00001FC4 CD21                <1>     int 21h
   756                              <1> 
   757 00001FC6 0FB605DCE5FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   758 00001FCD E82F0C0000          <1>     call printTime.printMinutesAlt
   759                              <1> 
   760 00001FD2 B22E                <1>     mov dl, "."
   761 00001FD4 B402                <1>     mov ah, 02h
   762 00001FD6 CD21                <1>     int 21h
   763                              <1> 
   764 00001FD8 0FB605C9E5FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   765 00001FDF E81D0C0000          <1>     call printTime.printMinutesAlt
   766                              <1> 
   767 00001FE4 488D157CEAFFFF      <1>     lea rdx, newTime
   768 00001FEB B409                <1>     mov ah, 09h
   769 00001FED CD21                <1>     int 21h
   770                              <1> 
   771 00001FEF 488D15A7E1FFFF      <1>     lea rdx, inBuffer
   772 00001FF6 C6027E              <1>     mov byte [rdx], 126 ;Enter a string of up to 126 chars in length
   773 00001FF9 B40A                <1>     mov ah, 0Ah
   774 00001FFB CD21                <1>     int 21h
   775 00001FFD 52                  <1>     push rdx
   776 00001FFE 488D1517E8FFFF      <1>     lea rdx, crlf
   777 00002005 B409                <1>     mov ah, 09h
   778 00002007 CD21                <1>     int 21h
   779 00002009 5A                  <1>     pop rdx
   780 0000200A 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   781                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000200E 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002010 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   782                              <1>     return
    13                              <2> %%_ret:
    14 00002011 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   783                              <1> ctty:
   784 00002012 F605A1E0FFFFFF      <1>     test byte [arg1Flg], -1
   785 00002019 0F84A2F6FFFF        <1>     jz badArgError
   786 0000201F F60597E0FFFFFF      <1>     test byte [arg2Flg], -1
   787 00002026 0F8595F6FFFF        <1>     jnz badArgError
   788 0000202C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   789 00002033 0FB60581E0FFFF      <1>     movzx eax, byte [arg1Off]
   790 0000203A 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   791 0000203D 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   792 00002041 750F                <1>     jne .noDrive
   793 00002043 0FB60572E0FFFF      <1>     movzx eax, byte [arg1FCBret]
   794 0000204A 3CFF                <1>     cmp al, -1
   795 0000204C 0F8466F6FFFF        <1>     je badDriveError
   796                              <1> .noDrive:
   797                              <1>     ;Now we open the provided file
   798 00002052 E8490E0000          <1>     call copyArgumentToSearchSpec
   799 00002057 488D1504E4FFFF      <1>     lea rdx, searchSpec
   800 0000205E B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   801 00002063 CD21                <1>     int 21h
   802 00002065 0F825FF6FFFF        <1>     jc badFileError
   803 0000206B 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   804 0000206E B800440000          <1>     mov eax, 4400h  ;Get device word
   805 00002073 CD21                <1>     int 21h
   806 00002075 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   807 00002078 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   808                              <1>     ;Now we set this handle to be STDIO
   809 0000207A 80CA03              <1>     or dl, 3    ;Set STDIO bits
   810 0000207D 30F6                <1>     xor dh, dh
   811 0000207F B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   812 00002084 CD21                <1>     int 21h
   813                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   814 00002086 31C9                <1>     xor ecx, ecx    ;STDIN
   815 00002088 B446                <1>     mov ah, 46h
   816 0000208A CD21                <1>     int 21h
   817 0000208C FFC1                <1>     inc ecx         ;STDOUT
   818 0000208E B446                <1>     mov ah, 46h
   819 00002090 CD21                <1>     int 21h
   820 00002092 FFC1                <1>     inc ecx         ;STDERR
   821 00002094 B446                <1>     mov ah, 46h
   822 00002096 CD21                <1>     int 21h
   823 00002098 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   824 0000209A CD21                <1>     int 21h
   825                              <1>     return
    13                              <2> %%_ret:
    14 0000209C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   826                              <1> .badCharDev:
   827 0000209D 488D15C2EAFFFF      <1>     lea rdx, badDev
   828 000020A4 B409                <1>     mov ah, 09h
   829 000020A6 CD21                <1>     int 21h
   830 000020A8 B43E                <1>     mov ah, 3Eh ;Close opened handle
   831 000020AA CD21                <1>     int 21h
   832                              <1>     return
    13                              <2> %%_ret:
    14 000020AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   833                              <1> 
   834                              <1> cls:  
   835 000020AD B800440000          <1>     mov eax, 4400h  ;Get device info
   836 000020B2 BB01000000          <1>     mov ebx, 1      ;for handle 1
   837 000020B7 CD21                <1>     int 21h         ;in dx
   838 000020B9 F7C280000000        <1>     test edx, devCharDev
   839 000020BF 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   840 000020C1 F7C210000000        <1>     test edx, charDevFastOut
   841 000020C7 743E                <1>     jz .doAnsi
   842                              <1>     ;Test if Int 29h uses Int 30h
   843                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   844                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
   845 000020C9 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
   846 000020CE CD21                <1>     int 21h
   847                              <1> .biosCheck:
   848 000020D0 66813BCD30          <1>     cmp word [rbx], 30CDh
   849 000020D5 740C                <1>     je .biosConfirmed
   850 000020D7 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   851 000020DC 7429                <1>     je .doAnsi
   852 000020DE 48FFC3              <1>     inc rbx
   853 000020E1 EBED                <1>     jmp short .biosCheck
   854                              <1> .biosConfirmed:
   855                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   856 000020E3 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   857 000020E5 31DB                <1>     xor ebx, ebx
   858 000020E7 CD30                <1>     int 30h
   859 000020E9 B40F                <1>     mov ah, 0Fh ;Get screen mode
   860 000020EB CD30                <1>     int 30h
   861 000020ED 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   862 000020F0 FECA                <1>     dec dl
   863 000020F2 B619                <1>     mov dh, 25  ;Number of rows is standard
   864 000020F4 31C0                <1>     xor eax, eax
   865 000020F6 89C1                <1>     mov ecx, eax
   866 000020F8 B707                <1>     mov bh, 7   ;Screen attributes
   867 000020FA B406                <1>     mov ah, 6   ;Scroll
   868 000020FC CD30                <1>     int 30h
   869 000020FE 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   870 00002100 B700                <1>     mov bh, 0   ;Page 0
   871 00002102 B402                <1>     mov ah, 2
   872 00002104 CD30                <1>     int 30h
   873                              <1>     return
    13                              <2> %%_ret:
    14 00002106 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   874                              <1> .doAnsi:
   875                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   876                              <1> ;4 chars in the ansi routine
   877                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   878                              <1> ; understand ANSI codes
   879 00002107 488D35D4ECFFFF      <1>     lea rsi, ansiCls
   880 0000210E B904000000          <1>     mov ecx, 4
   881 00002113 B406                <1>     mov ah, 06h ;Raw char output
   882                              <1> .ansiLp:
   883 00002115 AC                  <1>     lodsb   ;Get the char in 
   884 00002116 88C2                <1>     mov dl, al
   885 00002118 CD21                <1>     int 21h
   886 0000211A FFC9                <1>     dec ecx
   887 0000211C 75F7                <1>     jnz .ansiLp
   888                              <1>     return
    13                              <2> %%_ret:
    14 0000211E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   889                              <1> 
   890                              <1> break:
   891 0000211F F60594DFFFFFFF      <1>     test byte [arg1Flg], -1
   892 00002126 752D                <1>     jnz .argumentProvided
   893                              <1>     ;Here we just get the status of break
   894 00002128 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   895 0000212D CD21                <1>     int 21h
   896 0000212F 88D3                <1>     mov bl, dl
   897 00002131 488D15D0EAFFFF      <1>     lea rdx, breakIs
   898 00002138 B409                <1>     mov ah, 09h
   899 0000213A CD21                <1>     int 21h
   900 0000213C 488D15C0EAFFFF      <1>     lea rdx, onMes
   901 00002143 488D0DB3EAFFFF      <1>     lea rcx, offMes
   902 0000214A 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   903 0000214C 480F44D1            <1>     cmovz rdx, rcx
   904 00002150 B409                <1>     mov ah, 09h
   905 00002152 CD21                <1>     int 21h
   906                              <1>     return
    13                              <2> %%_ret:
    14 00002154 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   907                              <1> .argumentProvided:
   908 00002155 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   909 00002159 AD                  <1>     lodsd   ;Read the word
   910 0000215A 89C3                <1>     mov ebx, eax
   911 0000215C 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   912 00002161 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   913 00002164 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   914 00002169 7416                <1>     je .maybeOn
   915 0000216B 663D4F46            <1>     cmp ax, "OF"
   916 0000216F 7523                <1>     jne .badOnOff
   917 00002171 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   918 00002176 6681FB4620          <1>     cmp bx, "F "
   919 0000217B 7517                <1>     jne .badOnOff
   920                              <1>     ;Set off
   921 0000217D 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   922 0000217F EB0B                <1>     jmp short .setBreak
   923                              <1> .maybeOn:
   924 00002181 663D4F4E            <1>     cmp ax, "ON"
   925 00002185 750D                <1>     jne .badOnOff
   926                              <1>     ;Set on
   927 00002187 BA01000000          <1>     mov edx, 1
   928                              <1> .setBreak:
   929 0000218C B801330000          <1>     mov eax, 3301h  ;Set break
   930 00002191 CD21                <1>     int 21h
   931                              <1>     return
    13                              <2> %%_ret:
    14 00002193 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   932                              <1> .badOnOff:
   933 00002194 488D1557ECFFFF      <1>     lea rdx, badOnOff
   934 0000219B B409                <1>     mov ah, 09h
   935 0000219D CD21                <1>     int 21h
   936                              <1>     return
    13                              <2> %%_ret:
    14 0000219F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   937                              <1> 
   938                              <1> verify:
   939 000021A0 F60513DFFFFFFF      <1>     test byte [arg1Flg], -1
   940 000021A7 752D                <1>     jnz .argumentProvided
   941                              <1>     ;Here we just get the status of break
   942 000021A9 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   943 000021AE CD21                <1>     int 21h
   944 000021B0 88C3                <1>     mov bl, al
   945 000021B2 488D1559EAFFFF      <1>     lea rdx, verifyIs
   946 000021B9 B409                <1>     mov ah, 09h
   947 000021BB CD21                <1>     int 21h
   948 000021BD 488D153FEAFFFF      <1>     lea rdx, onMes
   949 000021C4 488D0D32EAFFFF      <1>     lea rcx, offMes
   950 000021CB 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   951 000021CD 480F44D1            <1>     cmovz rdx, rcx
   952 000021D1 B409                <1>     mov ah, 09h
   953 000021D3 CD21                <1>     int 21h
   954                              <1>     return
    13                              <2> %%_ret:
    14 000021D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   955                              <1> .argumentProvided:
   956 000021D6 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   957 000021DA AD                  <1>     lodsd   ;Read the word
   958 000021DB 89C3                <1>     mov ebx, eax
   959 000021DD 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   960 000021E2 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   961 000021E5 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   962 000021EA 7416                <1>     je .maybeOn
   963 000021EC 663D4F46            <1>     cmp ax, "OF"
   964 000021F0 751F                <1>     jne .badOnOff
   965 000021F2 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   966 000021F7 6681FB4620          <1>     cmp bx, "F "
   967 000021FC 7513                <1>     jne .badOnOff
   968                              <1>     ;Set off
   969 000021FE 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   970 00002200 EB0A                <1>     jmp short .setVerify
   971                              <1> .maybeOn:
   972 00002202 663D4F4E            <1>     cmp ax, "ON"
   973 00002206 7509                <1>     jne .badOnOff
   974                              <1>     ;Set on
   975 00002208 31C0                <1>     xor eax, eax
   976 0000220A FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   977                              <1> .setVerify:
   978 0000220C B42E                <1>     mov ah, 2Eh  ;Set Verify
   979 0000220E CD21                <1>     int 21h
   980                              <1>     return
    13                              <2> %%_ret:
    14 00002210 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   981                              <1> .badOnOff:
   982 00002211 488D15DAEBFFFF      <1>     lea rdx, badOnOff
   983 00002218 B409                <1>     mov ah, 09h
   984 0000221A CD21                <1>     int 21h
   985                              <1>     return
    13                              <2> %%_ret:
    14 0000221C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   986                              <1> 
   987                              <1> rename:
   988 0000221D F60596DEFFFFFF      <1>     test byte [arg1Flg], -1
   989 00002224 0F8497F4FFFF        <1>     jz badArgError
   990 0000222A F6058CDEFFFFFF      <1>     test byte [arg2Flg], -1
   991 00002231 0F848AF4FFFF        <1>     jz badArgError
   992 00002237 0FB6057DDEFFFF      <1>     movzx eax, byte [arg1Off]
   993 0000223E 4C8B05CADDFFFF      <1>     mov r8, [pspPtr]
   994 00002245 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   995 0000224C 4889F3              <1>     mov rbx, rsi    ;Save the ptr to the start of the string in rbx
   996 0000224F 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   997 00002252 488D3D51E3FFFF      <1>     lea rdi, sourcePath
   998 00002259 E8050C0000          <1>     call cpDelimPathToBufz    
   999 0000225E 0FB60559DEFFFF      <1>     movzx eax, byte [arg2Off]
  1000 00002265 4889DE              <1>     mov rsi, rbx    ;Get back the start of the ptr
  1001 00002268 4801C6              <1>     add rsi, rax    ;Go to the start of the command
  1002 0000226B 488D3DBAE3FFFF      <1>     lea rdi, destPath
  1003 00002272 E8EC0B0000          <1>     call cpDelimPathToBufz   
  1004 00002277 488D152CE3FFFF      <1>     lea rdx, sourcePath
  1005 0000227E 488D3DA7E3FFFF      <1>     lea rdi, destPath
  1006 00002285 B800560000          <1>     mov eax, 5600h
  1007 0000228A CD21                <1>     int 21h
  1008                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000228C 73(1C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1009 0000228E 3C0F                <1>     cmp al, errBadDrv
  1010 00002290 0F8422F4FFFF        <1>     je badDriveError
  1011 00002296 3C0B                <1>     cmp al, errBadFmt
  1012 00002298 0F843EF4FFFF        <1>     je badDirError
  1013 0000229E 3C11                <1>     cmp al, errDevUnk
  1014 000022A0 0F8409F4FFFF        <1>     je badParamError
  1015 000022A6 E928F4FFFF          <1>     jmp badDupFnf
  1016                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1017                              <1> touch:
  1018                              <1> ;Temporarily used to create files
  1019 000022AB F60508DEFFFFFF      <1>     test byte [arg1Flg], -1
  1020 000022B2 0F8409F4FFFF        <1>     jz badArgError
  1021 000022B8 E8CB0B0000          <1>     call buildCommandPath
  1022 000022BD 488D159EE1FFFF      <1>     lea rdx, searchSpec
  1023 000022C4 B8003C0000          <1>     mov eax, 3C00h  ;Create file 
  1024 000022C9 31C9                <1>     xor ecx, ecx
  1025 000022CB CD21                <1>     int 21h
  1026 000022CD 720B                <1>     jc .touchError
  1027 000022CF 0FB7D8              <1>     movzx ebx, ax
  1028 000022D2 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1029 000022D7 CD21                <1>     int 21h
  1030                              <1>     return
    13                              <2> %%_ret:
    14 000022D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1031                              <1> .touchError:
  1032 000022DA 488D15BFEAFFFF      <1>     lea rdx, touchErr
  1033 000022E1 E9FDF3FFFF          <1>     jmp badCmn
  1034                              <1> 
  1035                              <1> join:
  1036                              <1> ;Mock join command, to test join. Make an external command.
  1037                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1038 000022E6 F605AF000000FF      <1>     test byte [.joinOn], -1
  1039 000022ED 743D                <1>     jz .okJoin
  1040                              <1> .joindisable:
  1041 000022EF B800520000          <1>     mov eax, 5200h  
  1042 000022F4 CD21                <1>     int 21h
  1043                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1044 000022F6 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1045 000022FB CD2A                <1>     int 2Ah
  1046 000022FD 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1047 00002301 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1048 00002305 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1049 0000230B C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1050 0000230E C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1051 00002312 FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1052 00002315 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1053 0000231A CD2A                <1>     int 2Ah
  1054 0000231C C6057900000000      <1>     mov byte [.joinOn], 0
  1055 00002323 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1056 0000232A EB45                <1>     jmp short .joinExit
  1057                              <1> .okJoin:
  1058 0000232C C60569000000FF      <1>     mov byte [.joinOn], -1
  1059 00002333 B800520000          <1>     mov eax, 5200h  
  1060 00002338 CD21                <1>     int 21h
  1061 0000233A 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1062 0000233E 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1063                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1064 00002342 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1065 00002347 CD2A                <1>     int 2Ah
  1066 00002349 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1067 0000234F 4889DF              <1>     mov rdi, rbx
  1068 00002352 488D3544000000      <1>     lea rsi, .joinPath
  1069 00002359 B90C000000          <1>     mov ecx, .joinPathL
  1070 0000235E F3A4                <1>     rep movsb   ;Copy chars over
  1071 00002360 FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1072 00002363 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1073 00002368 CD2A                <1>     int 2Ah
  1074 0000236A 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1075                              <1> .joinExit:
  1076 00002371 B800090000          <1>     mov eax, 0900h
  1077 00002376 CD21                <1>     int 21h
  1078                              <1>     return
    13                              <2> %%_ret:
    14 00002378 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1079 00002379 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1079 00002382 61626C65640D0A24    <1>
  1080 0000238A 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1080 00002393 7361626C65640D0A24  <1>
  1081 0000239C 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1082 0000239D 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1082 000023A6 535400              <1>
  1083                              <1> .joinPathL  equ $ - .joinPath 
  1084                              <1> 
  1085                              <1> subst:
  1086                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1087                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1088 000023A9 F605D3000000FF      <1>     test byte [.substOn], -1
  1089 000023B0 7443                <1>     jz .okSubst
  1090                              <1> .substdisable:
  1091 000023B2 B800520000          <1>     mov eax, 5200h  
  1092 000023B7 CD21                <1>     int 21h
  1093                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1094 000023B9 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1095 000023BE CD2A                <1>     int 2Ah
  1096 000023C0 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1097 000023C4 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1098 000023CB 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1099 000023D1 C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1100 000023D4 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1101 000023D8 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1102 000023DE B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1103 000023E3 CD2A                <1>     int 2Ah
  1104 000023E5 C6059700000000      <1>     mov byte [.substOn], 0
  1105 000023EC 488D157D000000      <1>     lea rdx, .substDisableMsg
  1106 000023F3 EB61                <1>     jmp short .substExit
  1107                              <1> .okSubst:
  1108 000023F5 C60587000000FF      <1>     mov byte [.substOn], -1
  1109 000023FC B800520000          <1>     mov eax, 5200h  
  1110 00002401 CD21                <1>     int 21h
  1111 00002403 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1112 00002408 CD2A                <1>     int 2Ah
  1113 0000240A 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1114 0000240E 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1115 00002415 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1116 00002419 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1117 00002420 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1118 00002424 C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1119                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1120 0000242B 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1121 00002431 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1122 00002437 4889DF              <1>     mov rdi, rbx
  1123 0000243A 488D3543000000      <1>     lea rsi, .substPath
  1124 00002441 B90C000000          <1>     mov ecx, .substPathL
  1125 00002446 F3A4                <1>     rep movsb   ;Copy chars over
  1126 00002448 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1127 0000244D CD2A                <1>     int 2Ah
  1128 0000244F 488D1508000000      <1>     lea rdx, .substEnableMsg
  1129                              <1> .substExit:
  1130 00002456 B800090000          <1>     mov eax, 0900h
  1131 0000245B CD21                <1>     int 21h
  1132                              <1>     return
    13                              <2> %%_ret:
    14 0000245D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1133 0000245E 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1133 00002467 6E61626C65640D0A24  <1>
  1134 00002470 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1134 00002479 697361626C65640D0A- <1>
  1134 00002482 24                  <1>
  1135 00002483 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1136 00002484 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1136 0000248D 535400              <1>
  1137                              <1> .substPathL  equ $ - .substPath 
  1138                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1139                              <1> truename:
  1140 00002490 F60523DCFFFFFF      <1>     test byte [arg1Flg], -1
  1141 00002497 0F8424F2FFFF        <1>     jz badArgError
  1142 0000249D E8E6090000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1143 000024A2 488D35B9DFFFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1144 000024A9 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1145 000024AC B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1146 000024B1 CD21                <1>     int 21h
  1147 000024B3 730D                <1>     jnc .writePath
  1148 000024B5 3C02                <1>     cmp al, errFnf
  1149 000024B7 0F840DF2FFFF        <1>     je badFileError
  1150 000024BD E9EDF1FFFF          <1>     jmp badParamError
  1151                              <1> .writePath:
  1152 000024C2 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1153 000024C5 B9FFFFFFFF          <1>     mov ecx, -1
  1154 000024CA 30C0                <1>     xor al, al
  1155 000024CC F2AE                <1>     repne scasb     ;Get the new len
  1156 000024CE F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1157 000024D0 FFC9                <1>     dec ecx
  1158 000024D2 BB01000000          <1>     mov ebx, 01
  1159 000024D7 B440                <1>     mov ah, 40h
  1160 000024D9 CD21                <1>     int 21h
  1161 000024DB E887050000          <1>     call printCRLF
  1162                              <1>     return
    13                              <2> %%_ret:
    14 000024E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1163                              <1> 
  1164                              <1> label:
  1165                              <1> ;Displays/Changes/Deletes the file label
  1166 000024E1 488D1508000000      <1>     lea rdx, .l1
  1167 000024E8 B800090000          <1>     mov eax, 0900h
  1168 000024ED CD21                <1>     int 21h
  1169                              <1>     return
    13                              <2> %%_ret:
    14 000024EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1170 000024F0 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  1170 000024F9 6E20756E696D706C65- <1>
  1170 00002502 6D656E7465640D0A24  <1>
  1171                              <1> 
  1172                              <1> mklbl:
  1173                              <1>     ;lea rdx, .l1
  1174                              <1>     ;mov cx, 08h ;Make a label
  1175                              <1>     ;mov eax, 3C00h
  1176                              <1>     ;int 21h
  1177                              <1> 
  1178                              <1>     ;mov ebx, eax
  1179                              <1>     ;mov eax, 3E00h  ;Close the handle
  1180                              <1>     ;int 21h
  1181                              <1>     ;return
  1182                              <1> 
  1183                              <1> ;.l1: db "TESTLABEL",0
  1184 0000250B 488D1508000000      <1>     lea rdx, .l1
  1185 00002512 B800160000          <1>     mov eax, 1600h  ;Create FCB
  1186 00002517 CD21                <1>     int 21h
  1187                              <1>     return
    13                              <2> %%_ret:
    14 00002519 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1188                              <1> .l1:
  1189                              <1>     istruc exFcb
  1190 0000251A FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1191 0000251B 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1192 00002521 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1193 00002522 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  1194 0000252A 4C2020              <1>     at exFcb.fileext,   db "L  "
  1195 0000252D 00000000            <1>     at exFcb.curBlock,  dd 0
  1196 00002531 00<rep 15h>         <1>     iend 
  1197                              <1> rmlbl:
  1198 00002546 488D1508000000      <1>     lea rdx, .l1
  1199 0000254D B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  1200 00002552 CD21                <1>     int 21h
  1201                              <1>     return
    13                              <2> %%_ret:
    14 00002554 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1202                              <1> .l1:    ;FCB to volume label
  1203                              <1>     istruc exFcb
  1204 00002555 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1205 00002556 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1206 0000255C 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1207 0000255D 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  1208 00002565 3F3F3F              <1>     at exFcb.fileext,   db "???"
  1209 00002568 00000000            <1>     at exFcb.curBlock,  dd 0
  1210 0000256C 00<rep 15h>         <1>     iend 
  1211                              <1> 
  1212                              <1> rnlbl:
  1213 00002581 488D1508000000      <1>     lea rdx, .l1
  1214 00002588 B800170000          <1>     mov eax, 1700h
  1215 0000258D CD21                <1>     int 21h
  1216                              <1>     return
    13                              <2> %%_ret:
    14 0000258F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1217                              <1> .l1:
  1218                              <1>     istruc exRenFcb
  1219 00002590 FF                  <1>     at exRenFcb.extSig,     db -1
  1220 00002591 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  1221 00002597 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  1222 00002598 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  1223 000025A0 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  1224 000025A3 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  1224 000025AC 4C414245            <1>
  1225 000025B0 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  1226 000025B3 00<rep 4h>          <1>     iend
  1227                              <1> volume:
  1228                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  1229 000025B7 F605FFDAFFFFFF      <1>     test byte [arg2Flg], -1
  1230 000025BE 0F85FDF0FFFF        <1>     jnz badArgError
  1231 000025C4 F605EFDAFFFFFF      <1>     test byte [arg1Flg], -1
  1232 000025CB 7507                <1>     jnz .notCurrentDrive
  1233 000025CD E855070000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1234 000025D2 EB31                <1>     jmp short .dirEP
  1235                              <1> .notCurrentDrive:
  1236 000025D4 E8AF080000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1237 000025D9 488D3582DEFFFF      <1>     lea rsi, searchSpec
  1238 000025E0 E86B070000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  1239 000025E5 66AD                <1>     lodsw                   ;Get this word
  1240 000025E7 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  1241 000025EA 0F85D1F0FFFF        <1>     jne badArgError
  1242 000025F0 8A05C6DAFFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1243 000025F6 A8FF                <1>     test al, -1
  1244 000025F8 0F85BAF0FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1245 000025FE 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1246 00002603 FFC8                <1>     dec eax ;Convert to 0 based number
  1247                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al
  1248 00002605 E86A090000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  1249 0000260A 488D1569DFFFFF      <1>     lea rdx, volFcb
  1250 00002611 FFC0                <1>     inc eax ;Get 1 based drive number
  1251 00002613 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1252 00002615 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1253 00002618 B800110000          <1>     mov eax, 1100h ;Find first FCB
  1254 0000261D CD21                <1>     int 21h
  1255 0000261F 50                  <1>     push rax
  1256                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  1257 00002620 488D15F5E1FFFF      <1>     lea rdx, crlf
  1258 00002627 B409                <1>     mov ah, 09h
  1259 00002629 CD21                <1>     int 21h
  1260 0000262B 488D156FE4FFFF      <1>     lea rdx, volMes
  1261 00002632 B409                <1>     mov ah, 09h
  1262 00002634 CD21                <1>     int 21h
  1263 00002636 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  1264 00002638 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  1265 0000263B B402                <1>     mov ah, 02h
  1266 0000263D CD21                <1>     int 21h
  1267 0000263F 58                  <1>     pop rax
  1268 00002640 84C0                <1>     test al, al ;If this is zero, the call succeeded
  1269 00002642 7409                <1>     jz .volIDOk
  1270 00002644 488D156DE4FFFF      <1>     lea rdx, volNo
  1271 0000264B EB19                <1>     jmp short .volEndPrint
  1272                              <1> .volIDOk:
  1273 0000264D 488D155FE4FFFF      <1>     lea rdx, volOk
  1274 00002654 B409                <1>     mov ah, 09h
  1275 00002656 CD21                <1>     int 21h
  1276 00002658 C60584DAFFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  1277 0000265F 488D1572DAFFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  1278                              <1> .volEndPrint:
  1279 00002666 B409                <1>     mov ah, 09h
  1280 00002668 CD21                <1>     int 21h
  1281 0000266A 488D15ABE1FFFF      <1>     lea rdx, crlf
  1282 00002671 B409                <1>     mov ah, 09h
  1283 00002673 CD21                <1>     int 21h
  1284                              <1>     return
    13                              <2> %%_ret:
    14 00002675 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1285                              <1> 
  1286                              <1> version:
  1287 00002676 488D159FE1FFFF      <1>     lea rdx, crlf
  1288 0000267D B409                <1>     mov ah, 09h
  1289 0000267F CD21                <1>     int 21h
  1290 00002681 488D1507E4FFFF      <1>     lea rdx, dosVer
  1291 00002688 B409                <1>     mov ah, 09h
  1292 0000268A CD21                <1>     int 21h
  1293 0000268C E80C000000          <1>     call .printVersionNumber
  1294 00002691 488D1584E1FFFF      <1>     lea rdx, crlf
  1295 00002698 B409                <1>     mov ah, 09h
  1296 0000269A CD21                <1>     int 21h
  1297                              <1>     return
    13                              <2> %%_ret:
    14 0000269C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1298                              <1> .printVersionNumber:
  1299 0000269D B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1300 0000269F CD21                <1>     int 21h
  1301 000026A1 50                  <1>     push rax
  1302 000026A2 0FB6C0              <1>     movzx eax, al
  1303 000026A5 E817080000          <1>     call printDecimalWord
  1304 000026AA B22E                <1>     mov dl, "."
  1305 000026AC B402                <1>     mov ah, 02h
  1306 000026AE CD21                <1>     int 21h
  1307 000026B0 58                  <1>     pop rax
  1308 000026B1 0FB6C4              <1>     movzx eax, ah
  1309 000026B4 E808080000          <1>     call printDecimalWord
  1310                              <1>     return
    13                              <2> %%_ret:
    14 000026B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1311                              <1> 
  1312                              <1> 
  1313                              <1> memory:
  1314 000026BA 488B1D5ED9FFFF      <1>     mov rbx, qword [sysVars]
  1315 000026C1 4885DB              <1>     test rbx, rbx
  1316 000026C4 7510                <1>     jnz .sysvarsOK
  1317 000026C6 488D1574E6FFFF      <1>     lea rdx, memBad0
  1318 000026CD B409                <1>     mov ah, 09h
  1319 000026CF CD21                <1>     int 21h
  1320 000026D1 E98E080000          <1>     jmp freezePC.altEP
  1321                              <1> .sysvarsOK:
  1322                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1323                              <1>     ; and rcx to store Application memory
  1324 000026D6 31F6                <1>     xor esi, esi
  1325 000026D8 31FF                <1>     xor edi, edi
  1326 000026DA 31ED                <1>     xor ebp, ebp
  1327 000026DC 31C9                <1>     xor ecx, ecx
  1328 000026DE 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1329 000026E2 488B1B              <1>     mov rbx, qword [rbx]
  1330                              <1> .memLp:
  1331 000026E5 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1332 000026E8 7409                <1>     je .validMCB
  1333 000026EA 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1334 000026ED 0F8501010000        <1>     jne .badMCBFound
  1335                              <1> .validMCB:
  1336 000026F3 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1337 000026F6 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1338 000026FA 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1339 00002702 7505                <1>     jne .notDOS
  1340 00002704 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1341 00002707 EB21                <1>     jmp short .gotoNext
  1342                              <1> .notDOS:
  1343 00002709 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1344 00002711 7505                <1>     jne .notFree
  1345 00002713 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1346 00002716 EB12                <1>     jmp short .gotoNext
  1347                              <1> .notFree:
  1348 00002718 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1349 00002720 7505                <1>     jne .notHole
  1350 00002722 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1351 00002725 EB03                <1>     jmp short .gotoNext
  1352                              <1> .notHole:
  1353 00002727 4801C1              <1>     add rcx, rax    ;Add to Application count
  1354                              <1> .gotoNext:
  1355 0000272A 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1356 0000272D 7407                <1>     je .endOfWalk
  1357 0000272F 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1358 00002734 EBAF                <1>     jmp short .memLp
  1359                              <1> .endOfWalk:
  1360                              <1>     
  1361 00002736 488D1565E5FFFF      <1>     lea rdx, memDOS
  1362 0000273D B409                <1>     mov ah, 09h
  1363 0000273F CD21                <1>     int 21h
  1364 00002741 4889F0              <1>     mov rax, rsi
  1365 00002744 E89D000000          <1>     call .mcbPrintAmount
  1366 00002749 488D15EAE5FFFF      <1>     lea rdx, memByte
  1367 00002750 B409                <1>     mov ah, 09h
  1368 00002752 CD21                <1>     int 21h
  1369                              <1> 
  1370 00002754 4885ED              <1>     test rbp, rbp
  1371 00002757 741E                <1>     jz .skipHole
  1372 00002759 488D158EE5FFFF      <1>     lea rdx, memHole
  1373 00002760 B409                <1>     mov ah, 09h
  1374 00002762 CD21                <1>     int 21h
  1375 00002764 4889E8              <1>     mov rax, rbp
  1376 00002767 E87A000000          <1>     call .mcbPrintAmount
  1377 0000276C 488D15C7E5FFFF      <1>     lea rdx, memByte
  1378 00002773 B409                <1>     mov ah, 09h
  1379 00002775 CD21                <1>     int 21h
  1380                              <1> .skipHole:
  1381                              <1> 
  1382 00002777 488D154AE5FFFF      <1>     lea rdx, memApp
  1383 0000277E B409                <1>     mov ah, 09h
  1384 00002780 CD21                <1>     int 21h
  1385 00002782 4889C8              <1>     mov rax, rcx
  1386 00002785 E85C000000          <1>     call .mcbPrintAmount
  1387 0000278A 488D15A9E5FFFF      <1>     lea rdx, memByte
  1388 00002791 B409                <1>     mov ah, 09h
  1389 00002793 CD21                <1>     int 21h
  1390                              <1> 
  1391 00002795 488D1578E5FFFF      <1>     lea rdx, memFree
  1392 0000279C B409                <1>     mov ah, 09h
  1393 0000279E CD21                <1>     int 21h
  1394 000027A0 4889F8              <1>     mov rax, rdi
  1395 000027A3 E83E000000          <1>     call .mcbPrintAmount
  1396 000027A8 488D158BE5FFFF      <1>     lea rdx, memByte
  1397 000027AF B409                <1>     mov ah, 09h
  1398 000027B1 CD21                <1>     int 21h
  1399                              <1> 
  1400 000027B3 488D15C2E4FFFF      <1>     lea rdx, memSys
  1401 000027BA B409                <1>     mov ah, 09h
  1402 000027BC CD21                <1>     int 21h
  1403 000027BE 4889F0              <1>     mov rax, rsi
  1404 000027C1 4801F8              <1>     add rax, rdi
  1405 000027C4 4801C8              <1>     add rax, rcx
  1406 000027C7 4801E8              <1>     add rax, rbp
  1407 000027CA E817000000          <1>     call .mcbPrintAmount
  1408 000027CF 488D1564E5FFFF      <1>     lea rdx, memByte
  1409 000027D6 B409                <1>     mov ah, 09h
  1410 000027D8 CD21                <1>     int 21h
  1411                              <1> 
  1412 000027DA 488D153BE0FFFF      <1>     lea rdx, crlf
  1413 000027E1 B409                <1>     mov ah, 09h
  1414 000027E3 CD21                <1>     int 21h
  1415                              <1>     return
    13                              <2> %%_ret:
    14 000027E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1416                              <1> 
  1417                              <1> .mcbPrintAmount:
  1418 000027E6 51                  <1>     push rcx
  1419 000027E7 56                  <1>     push rsi
  1420 000027E8 57                  <1>     push rdi
  1421 000027E9 55                  <1>     push rbp
  1422 000027EA E8D2060000          <1>     call printDecimalWord
  1423 000027EF 5D                  <1>     pop rbp
  1424 000027F0 5F                  <1>     pop rdi
  1425 000027F1 5E                  <1>     pop rsi
  1426 000027F2 59                  <1>     pop rcx
  1427                              <1>     return
    13                              <2> %%_ret:
    14 000027F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1428                              <1> .badMCBFound:
  1429 000027F4 488D1586E5FFFF      <1>     lea rdx, memBad2
  1430 000027FB B409                <1>     mov ah, 09h
  1431 000027FD CD21                <1>     int 21h
  1432 000027FF E960070000          <1>     jmp freezePC.altEP
  1433                              <1> 
  1434                              <1> type:
  1435 00002804 F605AFD8FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1436 0000280B 0F84B0EEFFFF        <1>     jz badArgError
  1437 00002811 F605A5D8FFFFFF      <1>     test byte [arg2Flg], -1
  1438 00002818 0F85A3EEFFFF        <1>     jnz badArgError         ;If this set, error
  1439 0000281E 4C8B05EAD7FFFF      <1>     mov r8, [pspPtr]
  1440 00002825 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1441 0000282C 0FB60588D8FFFF      <1>     movzx eax, byte [arg1Off]
  1442 00002833 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1443 00002836 803E0D              <1>     cmp byte [rsi], CR
  1444 00002839 0F8482EEFFFF        <1>     je badArgError
  1445 0000283F 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1446 00002843 750F                <1>     jne .noDrive
  1447 00002845 0FB60570D8FFFF      <1>     movzx eax, byte [arg1FCBret]
  1448 0000284C 3CFF                <1>     cmp al, -1
  1449 0000284E 0F8464EEFFFF        <1>     je badDriveError
  1450                              <1> .noDrive:
  1451                              <1>     ;Now we open the provided file
  1452 00002854 E82F060000          <1>     call buildCommandPath
  1453 00002859 488D1502DCFFFF      <1>     lea rdx, searchSpec
  1454 00002860 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1455 00002865 CD21                <1>     int 21h
  1456 00002867 0F825DEEFFFF        <1>     jc badFileError
  1457 0000286D 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1458 00002874 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1459                              <1> .lp:
  1460 00002877 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1461 0000287C B43F                <1>     mov ah, 3Fh ;Read handle
  1462 0000287E CD21                <1>     int 21h
  1463 00002880 89C1                <1>     mov ecx, eax
  1464 00002882 67E317              <1>     jecxz .exit
  1465 00002885 53                  <1>     push rbx    ;Save the original in handle
  1466 00002886 BB01000000          <1>     mov ebx, 1  ;STDOUT
  1467 0000288B B440                <1>     mov ah, 40h
  1468 0000288D CD21                <1>     int 21h
  1469 0000288F 5B                  <1>     pop rbx ;Get back the original read handle
  1470 00002890 720F                <1>     jc .exitBad
  1471 00002892 39C8                <1>     cmp eax, ecx
  1472 00002894 74E1                <1>     je .lp
  1473 00002896 FFC9                <1>     dec ecx ;One less for a ^Z
  1474 00002898 39C8                <1>     cmp eax, ecx
  1475 0000289A 7505                <1>     jne .exitBad
  1476                              <1> .exit:
  1477 0000289C B43E                <1>     mov ah, 3Eh ;Close handle
  1478 0000289E CD21                <1>     int 21h
  1479                              <1>     return
    13                              <2> %%_ret:
    14 000028A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1480                              <1> .exitBad:
  1481                              <1>     ;Print a disk error message... use a table to build the message but for
  1482                              <1>     ; now, just exit
  1483                              <1>     ;If it is a char device, don't print a error
  1484 000028A1 EBF9                <1>     jmp short .exit
  1485                              <1> 
  1486                              <1> exit:
  1487 000028A3 F60583D7FFFFFF      <1>     test byte [permaSwitch], -1
  1488                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000028AA 75(A0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1489 000028AC 488B0564D7FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1490 000028B3 483DFFFFFFFF        <1>     cmp rax, -1
  1491                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000028B9 74(A0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1492 000028BB 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1493                              <1> 
  1494 000028BF 488B1568D7FFFF      <1>     mov rdx, qword [parentInt22]
  1495 000028C6 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  1496 000028CA B822250000          <1>     mov eax, 2522h
  1497 000028CF CD21                <1>     int 21h
  1498                              <1> 
  1499 000028D1 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1500 000028D6 CD21                <1>     int 21h
  1501                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 000028D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1502                              <1> 
  1503                              <1> launchChild:
  1504                              <1> ;We run EXEC on this and the child task will return via applicationReturn
  1505                              <1> ;Here we must search the CWD or all path componants before failing
  1506                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
  1507 000028D9 E896060000          <1>     call setDTA
  1508                              <1> 
  1509 000028DE 8B05E5D7FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
  1510 000028E4 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1511 000028E9 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1512 000028EE 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
  1513 000028F3 741D                <1>     je .noExt
  1514 000028F5 E816E9FFFF          <1>     call checkExtensionExec ;ZF=ZE => Executable
  1515 000028FA 0F855B010000        <1>     jnz .dfltErrExit
  1516                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1517 00002900 0F8255010000        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
  1518                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1519                              <1>     ;So it is a com or exe that we are searching for for now
  1520 00002906 488D3D94D9FFFF      <1>     lea rdi, cmdPathSpec
  1521 0000290D 4889FA              <1>     mov rdx, rdi
  1522 00002910 EB24                <1>     jmp short .search
  1523                              <1> .noExt:
  1524                              <1>     ;If the filename has no extension, append a .*
  1525                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
  1526 00002912 31DB                <1>     xor ebx, ebx
  1527 00002914 488D3D86D9FFFF      <1>     lea rdi, cmdPathSpec
  1528 0000291B 4889FA              <1>     mov rdx, rdi
  1529 0000291E 31C0                <1>     xor eax, eax
  1530 00002920 B9FFFFFFFF          <1>     mov ecx, -1
  1531 00002925 F2AE                <1>     repne scasb
  1532 00002927 48FFCF              <1>     dec rdi ;Point to the terminating null
  1533 0000292A 4889FD              <1>     mov rbp, rdi    ;Temporarily store the ptr to the . in rbp
  1534 0000292D 66B82E2A            <1>     mov ax, ".*"
  1535 00002931 66AB                <1>     stosw
  1536 00002933 30C0                <1>     xor al, al  ;Store terminating null
  1537 00002935 AA                  <1>     stosb
  1538                              <1> .search:
  1539 00002936 B906000000          <1>     mov ecx, dirIncFiles
  1540 0000293B B44E                <1>     mov ah, 4Eh ;Find First File
  1541 0000293D CD21                <1>     int 21h
  1542 0000293F 0F8216010000        <1>     jc .dfltErrExit
  1543 00002945 E8C4000000          <1>     call .noExtCheckExt
  1544                              <1> .moreSearch:
  1545 0000294A B44F                <1>     mov ah, 4Fh
  1546 0000294C CD21                <1>     int 21h
  1547 0000294E 7207                <1>     jc .noMoreFiles
  1548 00002950 E8B9000000          <1>     call .noExtCheckExt
  1549 00002955 EBF3                <1>     jmp short .moreSearch
  1550                              <1> .noMoreFiles:
  1551 00002957 85DB                <1>     test ebx, ebx
  1552 00002959 0F84FC000000        <1>     jz .dfltErrExit
  1553                              <1> ;So we have a valid executable
  1554 0000295F 4889EF              <1>     mov rdi, rbp    ;Get back ptr to the .*,0
  1555 00002962 F7C301000000        <1>     test ebx, 1
  1556 00002968 7407                <1>     jz .launchexebat
  1557 0000296A B82E434F4D          <1>     mov eax, ".COM"
  1558 0000296F EB14                <1>     jmp short .buildTail
  1559                              <1> .launchexebat:
  1560 00002971 F7C302000000        <1>     test ebx, 2
  1561 00002977 7407                <1>     jz .launchbat
  1562 00002979 B82E455845          <1>     mov eax, ".EXE"
  1563 0000297E EB05                <1>     jmp short .buildTail
  1564                              <1> .launchbat:
  1565                              <1> ;Temporary For BAT
  1566 00002980 E9D6000000          <1>     jmp .dfltErrExit
  1567                              <1> .buildTail:
  1568 00002985 AB                  <1>     stosd
  1569 00002986 31C0                <1>     xor eax, eax
  1570 00002988 AA                  <1>     stosb   ;Store the terminating null
  1571                              <1> ;Now we build the cmdtail properly
  1572 00002989 488D3D8BD7FFFF      <1>     lea rdi, cmdTail
  1573 00002990 4889FA              <1>     mov rdx, rdi    ;Use rdx as the anchor pointer for cmdline
  1574 00002993 B910000000          <1>     mov ecx, 128/8
  1575 00002998 F348AB              <1>     rep stosq   ;Clear the buffer with nulls
  1576 0000299B 488D7A01            <1>     lea rdi, qword [rdx + 1]    ;Mov rdi to start of cmdtail (not count)
  1577 0000299F 498DB080000000      <1>     lea rsi, qword [r8 + cmdLineCnt]
  1578 000029A6 AC                  <1>     lodsb   ;Get into al the number of chars and move rsi to the tail proper
  1579 000029A7 88C4                <1>     mov ah, al  ;Move the number into ah
  1580 000029A9 31C9                <1>     xor ecx, ecx    ;Use ch for number of chars read, cl for chars copied
  1581                              <1>     ;Skip the parsed command name
  1582                              <1> .passName:
  1583 000029AB AC                  <1>     lodsb   ;Get the char in al
  1584 000029AC FEC5                <1>     inc ch
  1585 000029AE 80FD7F              <1>     cmp ch, 127     ;Exit condition (bad case)
  1586 000029B1 741D                <1>     je short .finishBuildingTailNoCR
  1587 000029B3 3C0D                <1>     cmp al, CR      ;If we get to the CR after name, no tail
  1588 000029B5 7418                <1>     je short .finishBuildingTail
  1589 000029B7 3C20                <1>     cmp al, SPC
  1590 000029B9 75F0                <1>     jne short .passName
  1591                              <1>     ;Now we copy the name 
  1592 000029BB E890030000          <1>     call skipDelimiters ;Start by skipping spaces (there are no embedded tabs)
  1593                              <1>     ;rsi points to the first non-space char
  1594                              <1> .copyTail:
  1595 000029C0 AC                  <1>     lodsb
  1596 000029C1 3C0D                <1>     cmp al, CR
  1597 000029C3 740A                <1>     je short .finishBuildingTail
  1598 000029C5 AA                  <1>     stosb
  1599 000029C6 FEC1                <1>     inc cl
  1600 000029C8 80F97F              <1>     cmp cl, 127 ;Exit condition
  1601 000029CB 75F3                <1>     jne .copyTail
  1602 000029CD EB01                <1>     jmp short .finishBuildingTailNoCR
  1603                              <1> .finishBuildingTail:
  1604 000029CF AA                  <1>     stosb   ;Store the CR
  1605                              <1> .finishBuildingTailNoCR:
  1606 000029D0 880A                <1>     mov byte [rdx], cl  ;Finish by placing count 
  1607                              <1> .launch:
  1608 000029D2 488D1D22D7FFFF      <1>     lea rbx, launchBlock
  1609 000029D9 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  1610 000029DD 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  1611 000029E0 488D0534D7FFFF      <1>     lea rax, cmdTail
  1612 000029E7 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1613 000029EB 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1614 000029EF 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1615 000029F3 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1616 000029F7 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1617 000029FB 488D159FD8FFFF      <1>     lea rdx, cmdPathSpec
  1618 00002A02 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1619 00002A07 CD21                <1>     int 21h
  1620 00002A09 E94D000000          <1>     jmp .dfltErrExit    ;If something goes wrong, error out
  1621                              <1> .noExtCheckExt:
  1622                              <1>     ;mov eax, dword [cmdFFBlock + ffBlock.asciizName + filename.fExt]
  1623 00002A0E 488D35D9D6FFFF      <1>     lea rsi, dword [cmdFFBlock + ffBlock.asciizName]
  1624 00002A15 488D3DD4D8FFFF      <1>     lea rdi, fcbCmdSpec
  1625 00002A1C E8B8030000          <1>     call asciiFilenameToFCB
  1626 00002A21 8B05D1D8FFFF        <1>     mov eax, dword [fcbCmdSpec + filename.fExt]
  1627 00002A27 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1628 00002A2C 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1629 00002A31 3D434F4D20          <1>     cmp eax, "COM "
  1630 00002A36 7507                <1>     jne .neceexe
  1631 00002A38 81CB01000000        <1>     or ebx, 1
  1632                              <1>     return
    13                              <2> %%_ret:
    14 00002A3E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1633                              <1> .neceexe:
  1634 00002A3F 3D45584520          <1>     cmp eax, "EXE "
  1635 00002A44 7507                <1>     jne .necebat
  1636 00002A46 81CB02000000        <1>     or ebx, 2
  1637                              <1>     return
    13                              <2> %%_ret:
    14 00002A4C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1638                              <1> .necebat:
  1639 00002A4D 3D42415420          <1>     cmp eax, "BAT "
  1640                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A52 75(4C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1641 00002A54 81CB04000000        <1>     or ebx, 4
  1642                              <1>     return
    13                              <2> %%_ret:
    14 00002A5A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1643                              <1> 
  1644                              <1> .dfltErrExit:
  1645 00002A5B 488D1517DEFFFF      <1>     lea rdx, badCmd
  1646 00002A62 B409                <1>     mov ah, 09h
  1647 00002A64 CD21                <1>     int 21h
  1648                              <1>     return
    13                              <2> %%_ret:
    14 00002A66 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printCRLF:
     4 00002A67 488D15AEDDFFFF      <1>     lea rdx, crlf
     5 00002A6E BB01000000          <1>     mov ebx, 1  ;Print on STDOUT
     6 00002A73 B440                <1>     mov ah, 40h ;Print a new line
     7 00002A75 B902000000          <1>     mov ecx, 2  ;Two chars to write
     8 00002A7A CD21                <1>     int 21h
     9                              <1>     return
    13                              <2> %%_ret:
    14 00002A7C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    10                              <1> printDate:
    11                              <1> ;Input: eax = Packed Date
    12                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    13                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    14                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    15                              <1> ;       ebx = 0 => Print two digit year
    16                              <1> ;       ebx = 1 => Print four digit year
    17 00002A7D 53                  <1>     push rbx
    18 00002A7E 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    19 00002A80 803DAFD5FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    20 00002A87 7240                <1>     jb .usDate
    21 00002A89 777C                <1>     ja .jpnDate
    22                              <1> ;European: DD/MM/YY
    23 00002A8B 251F000000          <1>     and eax, 1Fh    ;Save day bits
    24 00002A90 E8B0000000          <1>     call .printFirst
    25 00002A95 8A15A6D5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    26 00002A9B B402                <1>     mov ah, 02h
    27 00002A9D CD21                <1>     int 21h
    28                              <1> 
    29 00002A9F 89C8                <1>     mov eax, ecx
    30 00002AA1 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    31 00002AA6 C1E805              <1>     shr eax, 5
    32 00002AA9 E8B3000000          <1>     call .printSecond
    33                              <1> 
    34 00002AAE 8A158DD5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    35 00002AB4 B402                <1>     mov ah, 02h
    36 00002AB6 CD21                <1>     int 21h
    37                              <1> 
    38 00002AB8 89C8                <1>     mov eax, ecx
    39 00002ABA 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    40 00002ABF C1E809              <1>     shr eax, 9
    41 00002AC2 5B                  <1>     pop rbx ;Get the year signature back
    42 00002AC3 E8A9000000          <1>     call .printYear
    43                              <1>     return
    13                              <2> %%_ret:
    14 00002AC8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    44                              <1> .usDate:
    45                              <1> ;US: MM/DD/YY
    46 00002AC9 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    47 00002ACE C1E805              <1>     shr eax, 5
    48 00002AD1 E86F000000          <1>     call .printFirst
    49                              <1> 
    50 00002AD6 8A1565D5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    51 00002ADC B402                <1>     mov ah, 02h
    52 00002ADE CD21                <1>     int 21h
    53                              <1> 
    54 00002AE0 89C8                <1>     mov eax, ecx
    55 00002AE2 251F000000          <1>     and eax, 1Fh    ;Save day bits
    56 00002AE7 E875000000          <1>     call .printSecond
    57                              <1> 
    58 00002AEC 8A154FD5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    59 00002AF2 B402                <1>     mov ah, 02h
    60 00002AF4 CD21                <1>     int 21h
    61                              <1> 
    62 00002AF6 89C8                <1>     mov eax, ecx
    63 00002AF8 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 00002AFD C1E809              <1>     shr eax, 9
    65 00002B00 5B                  <1>     pop rbx ;Get the year signature back
    66 00002B01 E86B000000          <1>     call .printYear
    67                              <1>     return
    13                              <2> %%_ret:
    14 00002B06 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    68                              <1> .jpnDate:
    69                              <1> ;Japan: YY/MM/DD
    70 00002B07 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    71 00002B0C C1E809              <1>     shr eax, 9
    72 00002B0F 5B                  <1>     pop rbx ;Get the year signature back
    73 00002B10 E85C000000          <1>     call .printYear
    74                              <1> 
    75 00002B15 8A1526D5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    76 00002B1B B402                <1>     mov ah, 02h
    77 00002B1D CD21                <1>     int 21h
    78                              <1> 
    79 00002B1F 89C8                <1>     mov eax, ecx
    80 00002B21 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    81 00002B26 C1E805              <1>     shr eax, 5
    82 00002B29 E833000000          <1>     call .printSecond
    83                              <1> 
    84 00002B2E 8A150DD5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    85 00002B34 B402                <1>     mov ah, 02h
    86 00002B36 CD21                <1>     int 21h
    87                              <1> 
    88 00002B38 89C8                <1>     mov eax, ecx
    89 00002B3A 251F000000          <1>     and eax, 1Fh    ;Save day bits
    90 00002B3F E81D000000          <1>     call .printSecond
    91                              <1>     return
    13                              <2> %%_ret:
    14 00002B44 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    92                              <1> 
    93                              <1> ;Each of these require eax setup correctly
    94                              <1> .printFirst:
    95 00002B45 51                  <1>     push rcx
    96 00002B46 E8E7030000          <1>     call getDecimalWord
    97 00002B4B 84ED                <1>     test ch, ch ;Do we have an upper digit?
    98 00002B4D 7504                <1>     jnz .skipSpace
    99 00002B4F 88CD                <1>     mov ch, cl
   100 00002B51 B120                <1>     mov cl, " "
   101                              <1> .skipSpace:
   102 00002B53 88CA                <1>     mov dl, cl
   103 00002B55 B402                <1>     mov ah, 02h
   104 00002B57 CD21                <1>     int 21h
   105 00002B59 88EA                <1>     mov dl, ch
   106 00002B5B B402                <1>     mov ah, 02h
   107 00002B5D CD21                <1>     int 21h
   108 00002B5F 59                  <1>     pop rcx
   109                              <1>     return
    13                              <2> %%_ret:
    14 00002B60 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   110                              <1> .printSecond:
   111 00002B61 51                  <1>     push rcx
   112 00002B62 E8CB030000          <1>     call getDecimalWord
   113 00002B67 84ED                <1>     test ch, ch ;Do we have an upper digit?
   114 00002B69 75E8                <1>     jnz .skipSpace
   115 00002B6B 88CD                <1>     mov ch, cl
   116 00002B6D B130                <1>     mov cl, "0"
   117 00002B6F EBE2                <1>     jmp short .skipSpace
   118                              <1> .printYear:
   119 00002B71 05BC070000          <1>     add eax, 1980
   120 00002B76 51                  <1>     push rcx
   121 00002B77 53                  <1>     push rbx
   122 00002B78 E8B5030000          <1>     call getDecimalWord ;Get unpacked in rcx
   123 00002B7D 5B                  <1>     pop rbx
   124 00002B7E 84DB                <1>     test bl, bl
   125 00002B80 740C                <1>     jz .twoDigitYear
   126 00002B82 88CA                <1>     mov dl, cl  ;Print the first digit
   127 00002B84 B402                <1>     mov ah, 02h
   128 00002B86 CD21                <1>     int 21h
   129 00002B88 88EA                <1>     mov dl, ch  ;Print the second digit
   130 00002B8A B402                <1>     mov ah, 02h
   131 00002B8C CD21                <1>     int 21h
   132                              <1> .twoDigitYear:
   133 00002B8E C1E910              <1>     shr ecx, 10h    ;Get high word low
   134 00002B91 88CA                <1>     mov dl, cl  ;Print the upper digit
   135 00002B93 B402                <1>     mov ah, 02h
   136 00002B95 CD21                <1>     int 21h
   137 00002B97 88EA                <1>     mov dl, ch  ;Print the lower digit
   138 00002B99 B402                <1>     mov ah, 02h
   139 00002B9B CD21                <1>     int 21h
   140 00002B9D 59                  <1>     pop rcx
   141                              <1>     return
    13                              <2> %%_ret:
    14 00002B9E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   142                              <1> 
   143                              <1> 
   144                              <1> printTime:
   145                              <1> ;Input: eax = Packed Time
   146                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   147                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   148 00002B9F 89C1                <1>     mov ecx, eax
   149 00002BA1 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   150 00002BA6 C1E80B              <1>     shr eax, 11
   151 00002BA9 803D97D4FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   152 00002BB0 750B                <1>     jne .ampm
   153 00002BB2 E85A000000          <1>     call .printHours
   154 00002BB7 E831000000          <1>     call .printMinutes
   155                              <1>     return
    13                              <2> %%_ret:
    14 00002BBC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   156                              <1> .ampm:
   157 00002BBD 3D0C000000          <1>     cmp eax, 12
   158 00002BC2 7713                <1>     ja .pm
   159 00002BC4 7416                <1>     je .pm2
   160 00002BC6 E846000000          <1>     call .printHours
   161 00002BCB E81D000000          <1>     call .printMinutes
   162 00002BD0 B261                <1>     mov dl, "a"
   163 00002BD2 B402                <1>     mov ah, 02h
   164 00002BD4 CD21                <1>     int 21h
   165                              <1>     return
    13                              <2> %%_ret:
    14 00002BD6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   166                              <1> .pm:
   167 00002BD7 2D0C000000          <1>     sub eax, 12
   168                              <1> .pm2:
   169 00002BDC E830000000          <1>     call .printHours
   170 00002BE1 E807000000          <1>     call .printMinutes
   171 00002BE6 B270                <1>     mov dl, "p"
   172 00002BE8 B402                <1>     mov ah, 02h
   173 00002BEA CD21                <1>     int 21h
   174                              <1>     return
    13                              <2> %%_ret:
    14 00002BEC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   175                              <1> .printMinutes:
   176 00002BED 8A1550D4FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   177 00002BF3 B402                <1>     mov ah, 02h
   178 00002BF5 CD21                <1>     int 21h
   179                              <1> 
   180 00002BF7 89C8                <1>     mov eax, ecx
   181 00002BF9 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   182 00002BFE C1E805              <1>     shr eax, 5
   183                              <1> .printMinutesAlt:
   184 00002C01 51                  <1>     push rcx
   185 00002C02 E82B030000          <1>     call getDecimalWord
   186 00002C07 84ED                <1>     test ch, ch ;Do we have an upper digit?
   187 00002C09 7514                <1>     jnz .skipSpace
   188 00002C0B 88CD                <1>     mov ch, cl
   189 00002C0D B130                <1>     mov cl, "0"
   190 00002C0F EB0E                <1>     jmp short .skipSpace
   191                              <1> .printHours:
   192 00002C11 51                  <1>     push rcx
   193 00002C12 E81B030000          <1>     call getDecimalWord
   194 00002C17 84ED                <1>     test ch, ch ;Do we have an upper digit?
   195 00002C19 7504                <1>     jnz .skipSpace
   196 00002C1B 88CD                <1>     mov ch, cl
   197 00002C1D B120                <1>     mov cl, " "
   198                              <1> .skipSpace:
   199 00002C1F 88CA                <1>     mov dl, cl
   200 00002C21 B402                <1>     mov ah, 02h
   201 00002C23 CD21                <1>     int 21h
   202 00002C25 88EA                <1>     mov dl, ch
   203 00002C27 B402                <1>     mov ah, 02h
   204 00002C29 CD21                <1>     int 21h
   205 00002C2B 59                  <1>     pop rcx
   206                              <1>     return
    13                              <2> %%_ret:
    14 00002C2C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   207                              <1> 
   208                              <1> 
   209                              <1> putVersionInPrompt:
   210 00002C2D 488D155BDEFFFF      <1>     lea rdx, dosVer
   211 00002C34 B409                <1>     mov ah, 09h ;Print String
   212 00002C36 CD21                <1>     int 21h
   213 00002C38 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   214 00002C3A CD21                <1>     int 21h
   215 00002C3C 50                  <1>     push rax    ;Save minor version
   216 00002C3D E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   217 00002C42 E8B4000000          <1>     call printPackedBCD ;Print al
   218 00002C47 B22E                <1>     mov dl, "."
   219 00002C49 B402                <1>     mov ah, 02h
   220 00002C4B CD21                <1>     int 21h
   221 00002C4D 58                  <1>     pop rax
   222 00002C4E 88E0                <1>     mov al, ah  ;Get the minor version low
   223 00002C50 E889000000          <1>     call hexToBCD
   224 00002C55 E8A1000000          <1>     call printPackedBCD
   225                              <1>     return
    13                              <2> %%_ret:
    14 00002C5A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> putEscInPrompt:
   227 00002C5B B21B                <1>     mov dl, ESC
   228 00002C5D EB1C                <1>     jmp short outChar
   229                              <1> 
   230                              <1> putMoneyInPrompt:
   231 00002C5F B224                <1>     mov dl, "$"
   232 00002C61 EB18                <1>     jmp short outChar
   233                              <1> 
   234                              <1> putEquInPrompt:
   235 00002C63 B23D                <1>     mov dl, "="
   236 00002C65 EB14                <1>     jmp short outChar
   237                              <1> 
   238                              <1> putPipeInPrompt:
   239 00002C67 B27C                <1>     mov dl, "|"
   240 00002C69 EB10                <1>     jmp short outChar
   241                              <1> 
   242                              <1> putGTinPrompt:
   243 00002C6B B23E                <1>     mov dl, ">"
   244 00002C6D EB0C                <1>     jmp short outChar
   245                              <1> 
   246                              <1> putLTinPrompt:
   247 00002C6F B23C                <1>     mov dl, "<"
   248 00002C71 EB08                <1>     jmp short outChar
   249                              <1> 
   250                              <1> putDriveInPrompt:
   251 00002C73 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   252 00002C75 CD21                <1>     int 21h
   253 00002C77 0441                <1>     add al, "A" ;Convert to letter
   254 00002C79 88C2                <1>     mov dl, al
   255                              <1> outChar:
   256 00002C7B B402                <1>     mov ah, 02h ;Echo to STDOUT
   257 00002C7D CD21                <1>     int 21h
   258                              <1>     return
    13                              <2> %%_ret:
    14 00002C7F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   259                              <1> putCWDInPrompt:
   260 00002C80 488D3DD5D3FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   261 00002C87 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   262 00002C89 CD21                <1>     int 21h
   263 00002C8B 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   264 00002C8D FEC2                <1>     inc dl
   265 00002C8F 0441                <1>     add al, "A" ;Convert to letter
   266 00002C91 B43A                <1>     mov ah, ":"
   267 00002C93 66AB                <1>     stosw   ;Store X:, rdi+=2
   268 00002C95 8A0590D3FFFF        <1>     mov al, byte [pathSep]
   269 00002C9B AA                  <1>     stosb   ;Store pathSep, inc rdi
   270 00002C9C B447                <1>     mov ah, 47h ;Get Current Working Directory
   271 00002C9E 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   272 00002CA1 CD21                <1>     int 21h
   273 00002CA3 E884000000          <1>     call strlen
   274 00002CA8 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   275                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   276 00002CAE B440                <1>     mov ah, 40h ;Write to handle
   277 00002CB0 BB01000000          <1>     mov ebx, 1  ;STDOUT
   278 00002CB5 488D15A0D3FFFF      <1>     lea rdx, currDirStr
   279 00002CBC CD21                <1>     int 21h
   280                              <1>     return
    13                              <2> %%_ret:
    14 00002CBE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   281                              <1> 
   282                              <1> BCDtoHex:
   283                              <1> ;Converts a BCD value to a Hex byte
   284                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   285 00002CBF 51                  <1>     push rcx
   286 00002CC0 0FB6C0              <1>     movzx eax, al   ;Zero extend
   287 00002CC3 89C1                <1>     mov ecx, eax    ;Save al in ecx
   288 00002CC5 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   289 00002CCA 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   290 00002CD0 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   291                              <1> .bth:
   292 00002CD3 050A000000          <1>     add eax, 10
   293 00002CD8 FFC9                <1>     dec ecx
   294 00002CDA 75F7                <1>     jnz .bth
   295 00002CDC 59                  <1>     pop rcx
   296 00002CDD C3                  <1>     ret
   297                              <1> 
   298                              <1> hexToBCD:
   299                              <1> ;Converts a Hex byte into two BCD digits
   300                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   301 00002CDE 51                  <1>     push rcx
   302 00002CDF 0FB6C0              <1>     movzx eax, al   ;Zero extend
   303 00002CE2 31C9                <1>     xor ecx, ecx
   304                              <1> .htb0:
   305 00002CE4 3D0A000000          <1>     cmp eax, 10
   306 00002CE9 7209                <1>     jb .htb1
   307 00002CEB 2D0A000000          <1>     sub eax, 10
   308 00002CF0 FFC1                <1>     inc ecx
   309 00002CF2 EBF0                <1>     jmp short .htb0
   310                              <1> .htb1:
   311 00002CF4 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   312 00002CF7 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   313 00002CF9 59                  <1>     pop rcx
   314 00002CFA C3                  <1>     ret
   315                              <1> 
   316                              <1> printPackedBCD:
   317                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   318                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   319                              <1> ;Preserves all registers
   320 00002CFB 50                  <1>     push rax
   321 00002CFC 52                  <1>     push rdx
   322 00002CFD 88C4                <1>     mov ah, al
   323 00002CFF 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   324 00002D01 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   325 00002D04 7508                <1>     jnz .upperNybble
   326 00002D06 B220                <1>     mov dl, " "
   327 00002D08 B402                <1>     mov ah, 02h
   328 00002D0A CD21                <1>     int 21h
   329 00002D0C EB0E                <1>     jmp short .lowerNybble
   330                              <1> .upperNybble:
   331 00002D0E 50                  <1>     push rax
   332 00002D0F C0EC04              <1>     shr ah, 4
   333 00002D12 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   334 00002D15 88E2                <1>     mov dl, ah
   335 00002D17 B402                <1>     mov ah, 02h ;Print DL
   336 00002D19 CD21                <1>     int 21h
   337 00002D1B 58                  <1>     pop rax
   338                              <1> .lowerNybble:
   339 00002D1C 0430                <1>     add al, "0"
   340 00002D1E 88C2                <1>     mov dl, al
   341 00002D20 B402                <1>     mov ah, 02h ;Print DL
   342 00002D22 CD21                <1>     int 21h
   343 00002D24 5A                  <1>     pop rdx
   344 00002D25 58                  <1>     pop rax
   345                              <1>     return
    13                              <2> %%_ret:
    14 00002D26 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   346                              <1> 
   347                              <1> getCurrentDrive:
   348                              <1> ;Returns the 0 based current drive in al
   349 00002D27 B419                <1>     mov ah, 19h
   350 00002D29 CD21                <1>     int 21h
   351                              <1>     return
    13                              <2> %%_ret:
    14 00002D2B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   352                              <1> 
   353                              <1> strlen:
   354                              <1> ;Gets the length of a ASCIIZ string
   355                              <1> ;Input: rdi = Source buffer
   356                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   357 00002D2C 53                  <1>     push rbx
   358 00002D2D 4889E3              <1>     mov rbx, rsp
   359 00002D30 50                  <1>     push rax    
   360 00002D31 50                  <1>     push rax
   361 00002D32 B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS
   362 00002D37 CD2F                <1>     int 2fh
   363 00002D39 4889DC              <1>     mov rsp, rbx
   364 00002D3C 5B                  <1>     pop rbx
   365                              <1>     return
    13                              <2> %%_ret:
    14 00002D3D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   366                              <1> 
   367                              <1> ucChar:
   368                              <1> ;Input: al = Char to uppercase
   369                              <1> ;Output: al = Adjusted char 
   370 00002D3E 53                  <1>     push rbx
   371 00002D3F 4889E3              <1>     mov rbx, rsp    ;Save the stack ptr
   372 00002D42 50                  <1>     push rax    ;Push the char twice on the stack
   373 00002D43 50                  <1>     push rax
   374 00002D44 B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   375 00002D49 CD2F                <1>     int 2fh         ;Returns the processed char in al
   376 00002D4B 4889DC              <1>     mov rsp, rbx    ;Return the stack ptr to where it was
   377 00002D4E 5B                  <1>     pop rbx
   378                              <1>     return
    13                              <2> %%_ret:
    14 00002D4F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   379                              <1> 
   380                              <1> skipDelimiters:
   381                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   382                              <1> ; command delimiters but a subset thereof. 
   383                              <1> ;These are the same across all codepages.
   384                              <1> ;Input: rsi must point to the start of the data string
   385                              <1> ;Output: rsi points to the first non-delimiter char
   386 00002D50 50                  <1>     push rax
   387                              <1> .l1:
   388 00002D51 AC                  <1>     lodsb
   389 00002D52 E807000000          <1>     call isALdelimiter
   390 00002D57 74F8                <1>     jz .l1
   391                              <1> .exit:
   392 00002D59 58                  <1>     pop rax
   393 00002D5A 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   394                              <1>     return
    13                              <2> %%_ret:
    14 00002D5D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   395                              <1> 
   396                              <1> isALdelimiter:
   397                              <1> ;Returns: ZF=NZ if al is not a command separator 
   398                              <1> ;         ZF=ZE if al is a command separator
   399 00002D5E 3C20                <1>     cmp al, " "
   400                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D60 74(5D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   401 00002D62 3C3B                <1>     cmp al, ";"
   402                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D64 74(5D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   403 00002D66 3C3D                <1>     cmp al, "="
   404                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D68 74(5D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   405 00002D6A 3C2C                <1>     cmp al, ","
   406                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D6C 74(5D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   407 00002D6E 3C09                <1>     cmp al, TAB
   408                              <1>     return
    13                              <2> %%_ret:
    14 00002D70 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   409                              <1> 
   410                              <1> printPrompt:
   411 00002D71 66813DAFD2FFFFFFFF  <1>     cmp word [promptPtr], -1
   412 00002D7A 750B                <1>     jne .validPrompt
   413                              <1>     ;Here we print the default prompt
   414 00002D7C E8FFFEFFFF          <1>     call putCWDInPrompt
   415 00002D81 E8E5FEFFFF          <1>     call putGTinPrompt
   416                              <1>     return
    13                              <2> %%_ret:
    14 00002D86 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   417                              <1> .validPrompt:
   418                              <1>     return
    13                              <2> %%_ret:
    14 00002D87 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   419                              <1> 
   420                              <1> clearCommandState:
   421                              <1> ;Clears the command state
   422 00002D88 488D3D25D3FFFF      <1>     lea rdi, cmdStatePtr
   423 00002D8F B90C000000          <1>     mov ecx, cmdStateL
   424 00002D94 31C0                <1>     xor eax, eax
   425 00002D96 F3AA                <1>     rep stosb
   426 00002D98 C70514D3FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   426 00002DA1 FF                  <1>
   427                              <1>     return
    13                              <2> %%_ret:
    14 00002DA2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   428                              <1> 
   429                              <1> clearCommandLineState:
   430                              <1> ;Clears the command line state after a 0Dh encountered
   431 00002DA3 488D3DF5D2FFFF      <1>     lea rdi, cmdLineStatePtr
   432 00002DAA B921000000          <1>     mov ecx, cmdLineStateL
   433 00002DAF 31C0                <1>     xor eax, eax
   434 00002DB1 F3AA                <1>     rep stosb
   435 00002DB3 C705F3D2FFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   435 00002DBC FF                  <1>
   436 00002DBD C705EFD2FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   436 00002DC6 FF                  <1>
   437                              <1>     return
    13                              <2> %%_ret:
    14 00002DC7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   438                              <1> 
   439                              <1> asciiToFCB:
   440                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   441                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   442                              <1> ;Also doesn't check if chars are valid
   443                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   444                              <1> ;Name is space padded.
   445                              <1> ;Input: rsi = ASCII string buffer
   446                              <1> ;       rdi = FCB name buffer
   447                              <1> ;Output: al = Char that terminated the source string 
   448 00002DC8 53                  <1>     push rbx    
   449 00002DC9 57                  <1>     push rdi
   450 00002DCA B90B000000          <1>     mov ecx, 11
   451 00002DCF B020                <1>     mov al, " "
   452 00002DD1 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   453 00002DD3 5F                  <1>     pop rdi
   454 00002DD4 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   455 00002DD7 EB1D                <1>     jmp short asciiFilenameToFCB.processName
   456                              <1> asciiFilenameToFCB:
   457                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   458                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   459                              <1> ;Also doesn't check if chars are valid
   460                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   461                              <1> ;Name is space padded.
   462                              <1> ;Input: rsi = ASCII string buffer
   463                              <1> ;       rdi = FCB name buffer
   464                              <1> ;Output: al = Char that terminated the source string 
   465 00002DD9 53                  <1>     push rbx    
   466 00002DDA 57                  <1>     push rdi
   467 00002DDB B90B000000          <1>     mov ecx, 11
   468 00002DE0 B020                <1>     mov al, " "
   469 00002DE2 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   470 00002DE4 5F                  <1>     pop rdi
   471 00002DE5 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   472                              <1>     ;Preprocess for Dir Searches
   473 00002DE8 803E2E              <1>     cmp byte [rsi], "."
   474 00002DEB 7509                <1>     jne .processName
   475 00002DED A4                  <1>     movsb   ;Store the first dot
   476 00002DEE 803E2E              <1>     cmp byte [rsi], "."
   477 00002DF1 752C                <1>     jne .exitBadChar
   478 00002DF3 A4                  <1>     movsb
   479 00002DF4 EB29                <1>     jmp short .exitBadChar
   480                              <1> .processName:
   481 00002DF6 AC                  <1>     lodsb   ;Get the char in al
   482 00002DF7 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   483 00002DF9 7426                <1>     jz .exit
   484 00002DFB 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   485 00002DFD 7407                <1>     je .extSpace
   486 00002DFF 3C2E                <1>     cmp al, "."
   487 00002E01 740C                <1>     je .ext
   488 00002E03 AA                  <1>     stosb   ;Store the char
   489 00002E04 EBF0                <1>     jmp short .processName
   490                              <1> .extSpace:
   491                              <1> ;Now we scan for a period in the name
   492 00002E06 AC                  <1>     lodsb   ;Get a char and increase rsi
   493 00002E07 84C0                <1>     test al, al
   494 00002E09 7416                <1>     jz .exit
   495 00002E0B 3C2E                <1>     cmp al, "."     ;If al is not a period...
   496 00002E0D 75F7                <1>     jne .extSpace   ; keep searching
   497                              <1> .ext:
   498 00002E0F 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   499                              <1> .processExt:
   500 00002E13 AC                  <1>     lodsb
   501 00002E14 84C0                <1>     test al, al
   502 00002E16 7409                <1>     jz .exit
   503 00002E18 3C20                <1>     cmp al, " "
   504 00002E1A 7405                <1>     je .exit
   505 00002E1C AA                  <1>     stosb
   506 00002E1D EBF4                <1>     jmp short .processExt
   507                              <1> .exitBadChar:
   508 00002E1F 30C0                <1>     xor al, al  ;Return a null terminator
   509                              <1> .exit:
   510 00002E21 5B                  <1>     pop rbx
   511                              <1>     return
    13                              <2> %%_ret:
    14 00002E22 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   512                              <1> 
   513                              <1> FCBToAsciiz:
   514                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   515                              <1> ;Name is space padded too
   516                              <1> ;Input: rsi = FCB name buffer
   517                              <1> ;       rdi = ASCIIZ string buffer
   518 00002E23 B908000000          <1>     mov ecx, 8
   519 00002E28 F3A4                <1>     rep movsb   ;Move the name over
   520                              <1> .scanNameSpace:
   521 00002E2A 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   522 00002E2E 750D                <1>     jne .ext
   523 00002E30 48FFCF              <1>     dec rdi
   524 00002E33 FFC1                <1>     inc ecx
   525 00002E35 81F908000000        <1>     cmp ecx, 8
   526 00002E3B 72ED                <1>     jb .scanNameSpace
   527                              <1> .ext:
   528 00002E3D 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   529 00002E42 7506                <1>     jne .validExt
   530 00002E44 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   531 00002E48 7415                <1>     je .exit
   532                              <1> .validExt:
   533 00002E4A B02E                <1>     mov al, "." ;We have a valid extension, store a period
   534 00002E4C AA                  <1>     stosb
   535 00002E4D B903000000          <1>     mov ecx, 3
   536 00002E52 F3A4                <1>     rep movsb   ;Move the three extension chars over
   537                              <1> .scanExtSpace:
   538 00002E54 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   539 00002E58 7505                <1>     jne .exit
   540 00002E5A 48FFCF              <1>     dec rdi
   541 00002E5D EBF5                <1>     jmp short .scanExtSpace
   542                              <1> .exit:
   543 00002E5F 31C0                <1>     xor eax, eax
   544 00002E61 AA                  <1>     stosb   ;Store a null at the end
   545                              <1>     return
    13                              <2> %%_ret:
    14 00002E62 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   546                              <1>     
   547                              <1> cpDelimPathToBufz:
   548                              <1> ;Copy a delimited path into buffer and null terminate.
   549                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   550                              <1> ;       rdi -> Buffer to store null terminated path in
   551                              <1> ;Output: rsi -> First char past pathname delimiter
   552                              <1> ;       rdi -> One char past null terminator on pathname buffer
   553 00002E63 AC                  <1>     lodsb   ;Get the char
   554 00002E64 3C0D                <1>     cmp al, CR
   555 00002E66 7412                <1>     je .gotRedirPath
   556 00002E68 E8F1FEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   557 00002E6D 740B                <1>     jz .gotRedirPath 
   558 00002E6F 3A05B7D1FFFF        <1>     cmp al, byte [switchChar]
   559 00002E75 7403                <1>     je .gotRedirPath
   560 00002E77 AA                  <1>     stosb   ;Store this char and loop next char
   561 00002E78 EBE9                <1>     jmp short cpDelimPathToBufz
   562                              <1> .gotRedirPath:
   563 00002E7A 50                  <1>     push rax    ;Save the char on stack
   564 00002E7B 30C0                <1>     xor al, al  ;Get null terminator char
   565 00002E7D 803F3A              <1>     cmp byte [rdi], ":" ;Is this a colon?
   566 00002E80 7503                <1>     jne .notColon
   567 00002E82 48FFCF              <1>     dec rdi ;We overwrite the colon. Allowed for devices
   568                              <1> .notColon:
   569 00002E85 AA                  <1>     stosb   ;Store the null terminator for the redir path
   570 00002E86 58                  <1>     pop rax ;Get back the char in al
   571                              <1>     return
    13                              <2> %%_ret:
    14 00002E87 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   572                              <1> 
   573                              <1> buildCommandPath:
   574                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   575 00002E88 0FB6052CD2FFFF      <1>     movzx eax, byte [arg1Off]
   576 00002E8F 4C8B0579D1FFFF      <1>     mov r8, [pspPtr]
   577 00002E96 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   578 00002E9D 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   579                              <1> copyArgumentToSearchSpec:
   580                              <1> ;Copies an arbitrary delimited path pointed to by rsi into rdi and null terminates.
   581 00002EA0 488D3DBBD5FFFF      <1>     lea rdi, searchSpec
   582 00002EA7 E8B7FFFFFF          <1>     call cpDelimPathToBufz
   583                              <1>     return
    13                              <2> %%_ret:
    14 00002EAC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   584                              <1> 
   585                              <1> scanForWildcards:
   586                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   587                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   588 00002EAD 50                  <1>     push rax
   589 00002EAE 56                  <1>     push rsi
   590                              <1> .lp:
   591 00002EAF AC                  <1>     lodsb
   592 00002EB0 3C3F                <1>     cmp al, "?"
   593 00002EB2 740A                <1>     je .exit
   594 00002EB4 3C2A                <1>     cmp al, "*"
   595 00002EB6 7406                <1>     je .exit
   596 00002EB8 84C0                <1>     test al, al
   597 00002EBA 75F3                <1>     jnz .lp
   598 00002EBC FEC0                <1>     inc al  ;This will clear the ZF
   599                              <1> .exit:
   600 00002EBE 5E                  <1>     pop rsi
   601 00002EBF 58                  <1>     pop rax
   602                              <1>     return
    13                              <2> %%_ret:
    14 00002EC0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   603                              <1> 
   604                              <1> printDecimalWord:
   605                              <1> ;Takes qword in rax and print it's decimal representation
   606                              <1> ;Takes the qword in eax and prints its decimal representation
   607 00002EC1 31C9                <1>     xor ecx, ecx
   608 00002EC3 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   609 00002EC5 85C0                <1>     test eax, eax
   610 00002EC7 750C                <1>     jnz .notZero
   611 00002EC9 B930000000          <1>     mov ecx, "0"
   612 00002ECE BD01000000          <1>     mov ebp, 1  ;Print one digit
   613 00002ED3 EB3E                <1>     jmp short .dpfb2
   614                              <1> .notZero:
   615 00002ED5 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   616 00002ED7 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   617                              <1> .dpfb0:
   618 00002EDC FFC5                <1>     inc ebp
   619 00002EDE 81FD08000000        <1>     cmp ebp, 8
   620 00002EE4 7206                <1>     jb .dpfb00
   621 00002EE6 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   622 00002EEA EB04                <1>     jmp short .dpfb01
   623                              <1> .dpfb00:
   624 00002EEC 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   625                              <1> .dpfb01:
   626 00002EF0 31D2                <1>     xor edx, edx
   627 00002EF2 48F7F6              <1>     div rsi
   628 00002EF5 80C230              <1>     add dl, '0'
   629 00002EF8 80FA39              <1>     cmp dl, '9'
   630 00002EFB 7603                <1>     jbe .dpfb1
   631 00002EFD 80C207              <1>     add dl, 'A'-'0'-10
   632                              <1> .dpfb1:
   633 00002F00 81FD08000000        <1>     cmp ebp, 8
   634 00002F06 7204                <1>     jb .dpfb10
   635 00002F08 88D3                <1>     mov bl, dl ;Add the bottom bits
   636 00002F0A EB02                <1>     jmp short .dpfb11
   637                              <1> .dpfb10:
   638 00002F0C 88D1                <1>     mov cl, dl    ;Save remainder byte
   639                              <1> .dpfb11:
   640 00002F0E 4885C0              <1>     test rax, rax
   641 00002F11 75C9                <1>     jnz .dpfb0
   642                              <1> .dpfb2:
   643 00002F13 81FD08000000        <1>     cmp ebp, 8
   644 00002F19 7208                <1>     jb .dpfb20
   645 00002F1B 88DA                <1>     mov dl, bl
   646 00002F1D 48C1EB08            <1>     shr rbx, 8
   647 00002F21 EB06                <1>     jmp short .dpfb21
   648                              <1> .dpfb20:
   649 00002F23 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   650 00002F25 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   651                              <1> .dpfb21:
   652 00002F29 B402                <1>     mov ah, 02h
   653 00002F2B CD21                <1>     int 21h
   654 00002F2D FFCD                <1>     dec ebp
   655 00002F2F 75E2                <1>     jnz .dpfb2
   656                              <1>     return
    13                              <2> %%_ret:
    14 00002F31 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   657                              <1> 
   658                              <1> getDecimalWord:
   659                              <1> ;Works on MAX A dword in eax
   660                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   661 00002F32 31C9                <1>     xor ecx, ecx
   662 00002F34 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   663 00002F36 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   664                              <1> .dpfb0:
   665 00002F3B FFC5                <1>     inc ebp
   666 00002F3D 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   667 00002F41 31D2                <1>     xor edx, edx
   668 00002F43 48F7F3              <1>     div rbx
   669 00002F46 80C230              <1>     add dl, '0'
   670 00002F49 80FA39              <1>     cmp dl, '9'
   671 00002F4C 7603                <1>     jbe .dpfb1
   672 00002F4E 80C207              <1>     add dl, 'A'-'0'-10
   673                              <1> .dpfb1:
   674 00002F51 88D1                <1>     mov cl, dl    ;Save remainder byte
   675 00002F53 4885C0              <1>     test rax, rax
   676 00002F56 75E3                <1>     jnz .dpfb0
   677                              <1>     return
    13                              <2> %%_ret:
    14 00002F58 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   678                              <1> 
   679                              <1> freezePC:
   680 00002F59 488D1507DEFFFF      <1>     lea rdx, memBad1
   681 00002F60 B409                <1>     mov ah, 09h
   682 00002F62 CD21                <1>     int 21h
   683                              <1> .altEP:
   684 00002F64 488D1525DEFFFF      <1>     lea rdx, memBad3
   685 00002F6B B409                <1>     mov ah, 09h
   686 00002F6D CD21                <1>     int 21h
   687                              <1> .lp:
   688 00002F6F F390                <1>     pause
   689 00002F71 F4                  <1>     hlt
   690 00002F72 EBFB                <1>     jmp short .lp
   691                              <1> 
   692                              <1> setDTA:
   693 00002F74 50                  <1>     push rax
   694 00002F75 52                  <1>     push rdx
   695 00002F76 488D1553D1FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   696 00002F7D B8001A0000          <1>     mov eax, 1A00h
   697 00002F82 CD21                <1>     int 21h
   698 00002F84 5A                  <1>     pop rdx
   699 00002F85 58                  <1>     pop rax
   700                              <1>     return
    13                              <2> %%_ret:
    14 00002F86 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00002F87 53                  <1>     push rbx
    25 00002F88 51                  <1>     push rcx
    26 00002F89 52                  <1>     push rdx
    27 00002F8A 57                  <1>     push rdi
    28 00002F8B 56                  <1>     push rsi
    29 00002F8C FC                  <1>     cld         ;Make String ops go forward
    30                              <1> 
    31 00002F8D 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00002F90 488D1585D8FFFF      <1>     lea rdx, crlf
    33 00002F97 B409                <1>     mov ah, 09h ;Print String
    34 00002F99 CD21                <1>     int 21h
    35                              <1> 
    36 00002F9B 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    37 00002FA1 B90C000000          <1>     mov ecx, 0Ch
    38 00002FA6 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    39 00002FA8 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    40 00002FAB 480FB7FF            <1>     movzx rdi, di
    41 00002FAF 4889FA              <1>     mov rdx, rdi    ;Copy error code
    42 00002FB2 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    43 00002FB6 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    44 00002FB9 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    45 00002FBC 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    46 00002FC3 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    47 00002FC7 B409                <1>     mov ah, 09h ;Print String
    48 00002FC9 CD21                <1>     int 21h     ;Call DOS to print first part of message
    49                              <1> 
    50 00002FCB 488D1505020000      <1>     lea rdx, qword [.readmsg]
    51 00002FD2 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    52 00002FD9 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    53 00002FDC 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    54 00002FE0 B409                <1>     mov ah, 09h ;Print String
    55 00002FE2 CD21                <1>     int 21h     ;Call DOS to print error reading/writing portion
    56                              <1> 
    57 00002FE4 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    58 00002FE7 0F85DF000000        <1>     jnz .charError
    59                              <1> ;Disk error continues here
    60 00002FED 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    61 00002FF4 B409                <1>     mov ah, 09h
    62 00002FF6 CD21                <1>     int 21h
    63 00002FF8 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    64 00002FFA 80C241              <1>     add dl, "A" ;Add ASCII code
    65 00002FFD B402                <1>     mov ah, 02h ;Print char in dl
    66 00002FFF CD21                <1>     int 21h
    67                              <1> .userInput:
    68 00003001 488D1514D8FFFF      <1>     lea rdx, crlf  ;Print new line
    69 00003008 B409                <1>     mov ah, 09h
    70 0000300A CD21                <1>     int 21h
    71                              <1> ;Abort, Retry, Ignore, Fail is word order
    72                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    73                              <1> .userAbort:
    74                              <1> ;Abort is always an option
    75 0000300C 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    76 00003013 B409                <1>     mov ah, 09h
    77 00003015 CD21                <1>     int 21h ;Call DOS to prompt user for ABORT option
    78                              <1> .userRetry:
    79 00003017 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    80 0000301A 7416                <1>     jz .userIgnore    ;If clear, dont print message
    81 0000301C 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
    82 00003023 B409                <1>     mov ah, 09h
    83 00003025 CD21                <1>     int 21h
    84 00003027 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
    85 0000302E B409                <1>     mov ah, 09h
    86 00003030 CD21                <1>     int 21h
    87                              <1> .userIgnore:
    88 00003032 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    89 00003035 7416                <1>     jz .userFail
    90 00003037 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
    91 0000303E B409                <1>     mov ah, 09h
    92 00003040 CD21                <1>     int 21h
    93 00003042 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
    94 00003049 B409                <1>     mov ah, 09h
    95 0000304B CD21                <1>     int 21h
    96                              <1> .userFail:
    97 0000304D F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    98 00003050 7416                <1>     jz .userMsgEnd
    99 00003052 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   100 00003059 B409                <1>     mov ah, 09h
   101 0000305B CD21                <1>     int 21h
   102 0000305D 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   103 00003064 B409                <1>     mov ah, 09h
   104 00003066 CD21                <1>     int 21h
   105                              <1> .userMsgEnd:
   106 00003068 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   107 0000306F B409                <1>     mov ah, 09h
   108 00003071 CD21                <1>     int 21h
   109                              <1> ;Get user input now 
   110 00003073 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   111 00003075 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   112 0000307C B401                <1>     mov ah, 01h ;STDIN without Console Echo
   113 0000307E CD21                <1>     int 21h ;Get char in al
   114 00003080 3C61                <1>     cmp al, "a" ;Chack if lowercase
   115 00003082 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   116 00003084 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   117                              <1> .uip1:
   118 00003086 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   119 00003087 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   120 00003089 FFC1                <1>     inc ecx
   121 0000308B 81F904000000        <1>     cmp ecx, 4
   122 00003091 75F3                <1>     jne .uip1
   123 00003093 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   124                              <1> .validInput:
   125 00003098 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   126                              <1> ;Now check if the input is permitted
   127 0000309A 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   128 0000309C 7427                <1>     je .cehExit
   129 0000309E 84C0                <1>     test al, al ;Check if 0 => Ignore
   130 000030A0 740F                <1>     je .viIgnore
   131 000030A2 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   132 000030A4 7416                <1>     je .viRetry
   133                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   134 000030A6 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   135 000030A9 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   136 000030AF EB14                <1>     jmp short .cehExit
   137                              <1> .viIgnore:
   138 000030B1 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   139 000030B4 0F8447FFFFFF        <1>     jz .userInput
   140 000030BA EB09                <1>     jmp short .cehExit
   141                              <1> .viRetry:
   142 000030BC F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   143 000030BF 0F843CFFFFFF        <1>     jz .userInput
   144                              <1> .cehExit:
   145 000030C5 5E                  <1>     pop rsi
   146 000030C6 5F                  <1>     pop rdi
   147 000030C7 5A                  <1>     pop rdx
   148 000030C8 59                  <1>     pop rcx
   149 000030C9 5B                  <1>     pop rbx
   150 000030CA 48CF                <1>     iretq
   151                              <1> .charError:
   152 000030CC B908000000          <1>     mov ecx, 8  ;8 chars in device name
   153 000030D1 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   154                              <1> .ce1:
   155 000030D8 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   156 000030D9 88C2                <1>     mov dl, al  ;Move char into dl
   157 000030DB B402                <1>     mov ah, 02h
   158 000030DD CD21                <1>     int 21h ;Print char
   159 000030DF E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   160 000030E1 E91BFFFFFF          <1>     jmp .userInput
   161                              <1> 
   162                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   163 000030E6 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   163 000030EF 746563742024202020  <1>
   164 000030F8 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   164 00003101 6E6974202420202020  <1>
   165 0000310A 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   165 00003113 202420202020202020  <1>
   166 0000311C 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   166 00003125 6F6D6D616E64202420  <1>
   167 0000312E 446174612024202020- <1>             db "Data $            "       ;Error 4
   167 00003137 202020202020202020  <1>
   168 00003140 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   168 00003149 737420242020202020  <1>
   169 00003152 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   169 0000315B 202020202020202020  <1>
   170 00003164 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   170 0000316D 656469612024202020  <1>
   171 00003176 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   171 0000317F 7420466F756E642024  <1>
   172 00003188 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   172 00003191 706572202420202020  <1>
   173 0000319A 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   173 000031A3 6C7420242020202020  <1>
   174 000031AC 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   174 000031B5 742024202020202020  <1>
   175 000031BE 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   175 000031C7 61696C757265202420  <1>
   176                              <1> 
   177 000031D0 64726976652024      <1> .drive      db "drive $"
   178 000031D7 6572726F7220726561- <1> .readmsg    db "error reading $"
   178 000031E0 64696E672024        <1>
   179 000031E6 6572726F7220777269- <1> .writemsg   db "error writing $"
   179 000031EF 74696E672024        <1>
   180 000031F5 41626F727424        <1> .abortmsg   db "Abort$" 
   181 000031FB 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   182 00003202 526574727924        <1> .retrymsg   db "Retry$"
   183 00003208 4661696C24          <1> .failmsg    db "Fail$"
   184 0000320D 2C2024              <1> .betweenMsg db ", $"
   185 00003210 3F2024              <1> .endMsg     db "? $"
   186 00003213 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   187                              <1> 
   188                              <1> int23h:
   189 00003217 F6050FCEFFFFFF      <1>     test byte [permaSwitch], -1
   190 0000321E 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   191                              <1>     ;Else, we juggle parent PSP's
   192 00003220 50                  <1>     push rax
   193 00003221 53                  <1>     push rbx
   194 00003222 488B05EECDFFFF      <1>     mov rax, qword [realParent]
   195 00003229 488B1DDFCDFFFF      <1>     mov rbx, qword [pspPtr]
   196 00003230 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   197 00003234 5B                  <1>     pop rbx
   198 00003235 58                  <1>     pop rax
   199                              <1> .exit:
   200 00003236 F9                  <1>     stc     ;Set CF to kill the task
   201 00003237 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    19                                  
    20                                  endOfAllocNoMaster: ;End of alloc if not the master cmd
    21                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:  ;Yeet this is this is a child command processor, length 168 chars!
     3                              <1> ;Note this environment DOES NOT contain the full path to the program being launched
     4 0000323A 504154483D00        <1>     db "PATH=",0
     5 00003240 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 00003248 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0
     7 00003251 442E434F4D00        <1>
     8 00003257 202020202020202020- <1>     db (165 - ($ - masterEnv)) dup (" ")    ;Pad the environment with spaces
     8 00003260 202020202020202020- <1>
     8 00003269 202020202020202020- <1>
     8 00003272 202020202020202020- <1>
     8 0000327B 202020202020202020- <1>
     8 00003284 202020202020202020- <1>
     8 0000328D 202020202020202020- <1>
     8 00003296 202020202020202020- <1>
     8 0000329F 202020202020202020- <1>
     8 000032A8 202020202020202020- <1>
     8 000032B1 202020202020202020- <1>
     8 000032BA 202020202020202020- <1>
     8 000032C3 202020202020202020- <1>
     8 000032CC 202020202020202020- <1>
     8 000032D5 202020202020202020- <1>
     8 000032DE 20                  <1>
     9 000032DF 0000                <1>     dw 0    ;End of environment marker
    22                                  endOfAlloc: ;End of alloc if the master cmd
    23                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    24                                  Segment transient align=1 follows=.data
    25                                  ;This segment always gets ejected post load
    26                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D15ED010000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    11                              <1> .okVersion:
    12                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    13 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    14 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    15 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    16 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    17                              <1> ;Setup Int 22h, Int 23h and Int 24h
    18 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    19 0000002F 488905(2E000000)    <1>     mov qword [parentInt22], rax
    20                              <1> 
    21 00000036 488D15(872F0000)    <1>     lea rdx, critErrorHandler
    22 0000003D 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    23 00000041 B824250000          <1>     mov eax, 2524h
    24 00000046 CD21                <1>     int 21h
    25 00000048 488D15(17320000)    <1>     lea rdx, int23h
    26 0000004F 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    27 00000053 B823250000          <1>     mov eax, 2523h
    28 00000058 CD21                <1>     int 21h
    29 0000005A 488D15(2E0E0000)    <1>     lea rdx, applicationReturn
    30 00000061 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    31 00000065 B822250000          <1>     mov eax, 2522h
    32 0000006A CD21                <1>     int 21h
    33                              <1> ;Get a pointer to DOS Sysvars
    34 0000006C B452                <1>     mov ah, 52h ;Get sysvars
    35 0000006E CD21                <1>     int 21h
    36 00000070 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    37                              <1> ;Call for simple internationalisation data
    38 00000077 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    39 0000007C CD21                <1>     int 21h
    40 0000007E 3CFF                <1>     cmp al, -1
    41 00000080 7412                <1>     je .skipSwitch
    42 00000082 8815(2C000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    43 00000088 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    44 0000008B 7507                <1>     jne .skipSwitch
    45 0000008D C605(2B000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    46                              <1> .skipSwitch:
    47 00000094 B800380000          <1>     mov eax, 3800h  ;Get current country data
    48 00000099 488D15(36000000)    <1>     lea rdx, ctryData
    49 000000A0 CD21                <1>     int 21h ;Write the data to the internal country table
    50                              <1> ;Now determine if this is the master copy of COMMAND.COM
    51                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    52 000000A2 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    53 000000A7 CD21                <1>     int 21h
    54 000000A9 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    55 000000AC B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    56 000000B1 CD21                <1>     int 21h
    57 000000B3 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    58 000000B6 755C                <1>     jne .skipMaster
    59                              <1> ;Ok so we are master command.com
    60                              <1> ;Now make myself the real parent
    61 000000B8 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    62 000000BF 4C8905(17000000)    <1>     mov qword [realParent], r8
    63                              <1> ;Set master environment as mine
    64 000000C6 488D05(3A320000)    <1>     lea rax, masterEnv
    65 000000CD 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    66                              <1> ;Set current Drive in COMSPEC
    67 000000D1 B019                <1>     mov al, 19h ;Get current Drive
    68 000000D3 CD21                <1>     int 21h
    69 000000D5 0441                <1>     add al, "A"
    70 000000D7 8805(48320000)      <1>     mov byte [masterEnv.cspec], al
    71                              <1> ;Set Int 2Eh up
    72 000000DD 488D15(72160000)    <1>     lea rdx, int2Eh
    73 000000E4 B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    74 000000E9 CD21                <1>     int 21h
    75                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    76                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    77 000000EB 488D15(1C080000)    <1>     lea rdx, crlf
    78 000000F2 B409                <1>     mov ah, 09h
    79 000000F4 CD21                <1>     int 21h
    80 000000F6 E8(771F0000)        <1>     call time
    81 000000FB E8(AE1E0000)        <1>     call date
    82 00000100 488D15(1C080000)    <1>     lea rdx, crlf
    83 00000107 B409                <1>     mov ah, 09h
    84 00000109 CD21                <1>     int 21h
    85 0000010B 488D1D(E1320000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
    86 00000112 EB32                <1>     jmp short .printInit
    87                              <1> .skipMaster:
    88 00000114 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
    89 0000011B 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
    90 00000123 0FB605(2C000000)    <1>     movzx eax, byte [switchChar]
    91 0000012A F2AE                <1>     repne scasb
    92 0000012C 67E310              <1>     jecxz .noSwitches
    93 0000012F 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
    94 00000132 24DF                <1>     and al, 0DFh    ;Convert to UC
    95 00000134 3C50                <1>     cmp al, "P" ;Is it permanent switch?
    96 00000136 7507                <1>     jne .noSwitches
    97 00000138 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    98                              <1> .noSwitches:
    99 0000013F 488D1D(3A320000)    <1>     lea rbx, endOfAllocNoMaster  ;This is the base address to jettison
   100                              <1> .printInit:
   101                              <1> ;Finish by printing INIT string.
   102 00000146 53                  <1>     push rbx
   103 00000147 488D153A000000      <1>     lea rdx, initString
   104 0000014E B409                <1>     mov ah, 09h
   105 00000150 CD21                <1>     int 21h ;Print init string
   106 00000152 E8(9D260000)        <1>     call version.printVersionNumber
   107 00000157 488D1560000000      <1>     lea rdx, initString2
   108 0000015E B409                <1>     mov ah, 09h
   109 00000160 CD21                <1>     int 21h ;Print init string
   110 00000162 5B                  <1>     pop rbx
   111                              <1>     ;Now we add the stack to the alloc and paragraph align
   112 00000163 4881C340060000      <1>     add rbx, stackSize
   113 0000016A 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   114 00000171 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   115 00000175 48C1E304            <1>     shl rbx, 4
   116 00000179 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   117 0000017C 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   118 00000183 E9(1B0E0000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   119                              <1> ;Loader Data here
   120                              <1> initString: 
   121 00000188 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   121 00000191 66696320436F6D7075- <1>
   121 0000019A 746572205265736561- <1>
   121 000001A3 726368285229205343- <1>
   121 000001AC 502F444F5328522920- <1>
   121 000001B5 56657273696F6E2024  <1>
   122                              <1> initString2:
   123 000001BE 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",CR,LF,"$"
   123 000001C7 202020284329436F70- <1>
   123 000001D0 797269676874205363- <1>
   123 000001D9 69656E746966696320- <1>
   123 000001E2 436F6D707574657220- <1>
   123 000001EB 526573656172636820- <1>
   123 000001F4 323032342E0D0A24    <1>
   124 000001FC 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   124 00000205 20444F532076657273- <1>
   124 0000020E 696F6E0D0A24        <1>
    27                                  
    28                                  stackSize equ 200*8    ;200 QWORD stack
    28          ------------------       info: assembly required 1+3+2 passes

