     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (41h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> netFCBShare     equ 70h
   160                              <1> noInherit       equ 80h
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> 
   163                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 24h on disk full.
   164                              <1> ;Buffering on writes
   165                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   167                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1> readOnlyFile    equ 1h
   170                              <1> hiddenFile      equ 2h
   171                              <1> systemFile      equ 4h
   172                              <1> volumeLabel     equ 8h
   173                              <1> directoryFile   equ 10h ;Directory entry
   174                              <1> archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1> charDevFastOut  equ 10h ;If set, device supports Int 29h
   182                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   183                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   185                              <1> devCharDev      equ 80h ;If set, it is a char device!
   186                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   190                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1>  
   192                              <1> ;------------------------------------------------------------------------;
   193                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   194                              <1> ; to an internal buffer, and then copying it to the specified location
   195                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   196                              <1> ; another request for the same sector from the same device is made, so 
   197                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   198                              <1> ; size, selected according to the largest detected sector size during 
   199                              <1> ; the initial loadup.
   200                              <1> ;
   201                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   202                              <1> ;
   203                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   204                              <1> ;------------------------------------------------------------------------;
   205                              <1> 
   206                              <1> struc bufferHdr
   207 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   208 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   209 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   210 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   211 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   212 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   213 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   214 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   215 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   216                              <1>     .dataarea:             ;Points to the start of the data area
   217                              <1> endstruc
   218                              <1> ;Buffer Flag equates
   219                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   220                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   221                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   222                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   223                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   224                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   225                              <1> ;Note! A buffer is marked as referenced only when the application 
   226                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   227                              <1> ;------------------------------------------------------------------------;
   228                              <1> ; Memory control block for each memory arena
   229                              <1> ;------------------------------------------------------------------------;
   230                              <1> struc mcb
   231 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   232 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   233 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   234 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   235                              <1>     .program:
   236                              <1> endstruc
   237                              <1> ;MCB equates
   238                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   239                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   240                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   241                              <1> mcbMarkCtn      equ "M"
   242                              <1> mcbMarkEnd      equ "Z"
   243                              <1> 
   244                              <1> memFirstFit     equ 0   ;First free block goes to application
   245                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   246                              <1> memLastFit      equ 2   ;Last free block goes to application
   247                              <1> 
   248                              <1> ;Owner = Para aligned address => Owning application PSP
   249                              <1> ;...To consider...
   250                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   251                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   252                              <1> ;------------------------------------------------------------------------;
   253                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   254                              <1> ; following order, thus allowing for return values to be placed in the 
   255                              <1> ; registers by accessing the caller register stack frame.
   256                              <1> ;------------------------------------------------------------------------;
   257                              <1> struc callerFrame
   258 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   259 00000008 ????????????????    <1>     .rbx    resq 1    
   260 00000010 ????????????????    <1>     .rcx    resq 1
   261 00000018 ????????????????    <1>     .rdx    resq 1
   262 00000020 ????????????????    <1>     .rsi    resq 1
   263 00000028 ????????????????    <1>     .rdi    resq 1
   264 00000030 ????????????????    <1>     .rbp    resq 1
   265 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   266 00000040 ????????????????    <1>     .r9     resq 1
   267                              <1> ;Pushed by Processor when invoked via Interrupt
   268 00000048 ????????????????    <1>     .rip    resq 1
   269 00000050 ????????????????    <1>     .cs     resq 1
   270 00000058 ????????????????    <1>     .flags  resq 1
   271                              <1> endstruc
   272                              <1> 
   273                              <1> struc dpl
   274                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   275                              <1> ; server calls
   276 00000000 ????????????????    <1>     .rax    resq 1
   277 00000008 ????????????????    <1>     .rbx    resq 1
   278 00000010 ????????????????    <1>     .rcx    resq 1
   279 00000018 ????????????????    <1>     .rdx    resq 1
   280 00000020 ????????????????    <1>     .rsi    resq 1
   281 00000028 ????????????????    <1>     .rdi    resq 1
   282 00000030 ????????????????    <1>     .r8     resq 1
   283 00000038 ????????????????    <1>     .r9     resq 1
   284 00000040 ????????????????    <1>     .align  resq 1
   285 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   286 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   287                              <1> endstruc
   288                              <1> 
   289                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   290 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   291 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   292 00000010 ????????????????    <1>     .newSFTVal      resq 1
   293 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   294 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   295 00000028 ????????????????    <1>     .newLastdrive   resq 1
   296 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   297 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   298 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   299 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   300 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   301 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   302 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc filename
   306                              <1> ;8.3 File name struct
   307 00000000 ????????????????    <1>     .fName  resb 8
   308 00000008 ??????              <1>     .fExt   resb 3
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   312 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   313 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   314 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   315 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   316 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   317 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   318 00000016 ????                <1>     .fileTime   resw 1  ;File time
   319 00000018 ????                <1>     .fileDate   resw 1  ;File date
   320 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   321 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc psp
   325 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   326 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   327 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   328 0000000A ????????????????    <1>     .oldInt22h  resq 1  ;Int 22h pointer on overlay load
   329 00000012 ????????????????    <1>     .oldInt23h  resq 1  ;Int 23h pointer on overlay load
   330 0000001A ????????????????    <1>     .oldInt24h  resq 1  ;Int 24h pointer on overlay load
   331 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   332                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   333 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   334 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   335 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 21h
   336 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   337 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   338 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   339 0000005B ??                  <1>                 resb 1  ;Reserved byte
   340                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   341                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   342                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   343                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   344                              <1> ; always used and xtraHdlSz.
   345                              <1> ;Will need to add two SYSCALLS for future expansion:
   346                              <1> ;       1) Get Program Environment Pointer
   347                              <1> ;       2) Get Command Line arguments pointer
   348                              <1> ;The below are in the same place as in DOS.
   349                              <1>     .cmdLineArgPtr: ;Symbol for future use
   350 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   351 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   352                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   353 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   354 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   355                              <1> endstruc
   356                              <1> 
   357                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   358                              <1> 
   359                              <1> struc clkStruc
   360 00000000 ????                <1>     .dateWord   resw 1
   361 00000002 ??                  <1>     .minutes    resb 1
   362 00000003 ??                  <1>     .hours      resb 1
   363 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   364 00000005 ??                  <1>     .seconds    resb 1
   365                              <1> endstruc
   366                              <1> 
   367                              <1> struc countryStruc
   368 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   369                              <1>                         ;0 = month day year hh:mm:ss
   370                              <1>                         ;1 = day month year hh:mm:ss
   371                              <1>                         ;2 = year month day hh:mm:ss
   372 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   373 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   374 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   375 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   376 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   377 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   378                              <1>                         ;0 = Symbol leads, without space
   379                              <1>                         ;1 = Symbol follows, without space
   380                              <1>                         ;2 = Symbol leads, one space
   381                              <1>                         ;3 = Symbol follows, one space
   382                              <1>                         ;4 = Symbol replace decimal separator
   383 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   384 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   385 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   386 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   387 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   388                              <1> endstruc
   389                              <1> 
   390                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   391                              <1> ;for a space of 64Gb
   392                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   393                              <1> dosLowBase  equ 600h    ;Low load address
   394                              <1> 
   395                              <1> ;Critical Error AH bitfield equates
   396                              <1> critRead    equ 0h
   397                              <1> critWrite   equ 1h
   398                              <1> critDOS     equ 0h
   399                              <1> critFAT     equ 2h
   400                              <1> critDir     equ 4h
   401                              <1> critData    equ 6h
   402                              <1> critFailOK  equ 8h
   403                              <1> critRetryOK equ 10h
   404                              <1> critIgnorOK equ 20h
   405                              <1> critCharDev equ 80h
   406                              <1> 
   407                              <1> critIgnore  equ 0
   408                              <1> critRetry   equ 1
   409                              <1> critAbort   equ 2
   410                              <1> critFail    equ 3
   411                              <1> 
   412                              <1> ;MISC ASCII control chars
   413                              <1> NUL equ 00h ;^@         | ASCII Null
   414                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   415                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   416                              <1> BEL equ 07h ;^G         | ASCII Bell
   417                              <1> BSP equ 08h ;^H         | ASCII Backspace
   418                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   419                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   420                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   421                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   422                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   423                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   424                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   425                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   426                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   427                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   428                              <1> SPC equ 20h ;Printable  | ASCII Space
   429                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   430                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   431                              <1> 
   432                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   433                              <1> ;Extended Ascii Codes
   434                              <1> eF1     equ 3Bh ;F1 second byte
   435                              <1> eF2     equ 3Ch ;F2 second byte
   436                              <1> eF3     equ 3Dh ;F3 second byte
   437                              <1> eF4     equ 3Eh ;F4 second byte
   438                              <1> eF5     equ 3Fh ;F5 second byte
   439                              <1> eF6     equ 40h ;F6 second byte
   440                              <1> eF7     equ 41h ;F7 second byte
   441                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   442                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   443                              <1> eIns    equ 52h ;Insert second byte
   444                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   445                              <1> 
   446                              <1> ;Default Configuration for the system
   447                              <1> 
   448                              <1> buffersDefault  equ 30
   449                              <1> filesDefault    equ 20
   450                              <1> fcbsDefault     equ 4
   451                              <1> safeFcbsDeflt   equ 0
   452                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       resb 5  
    66 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   resb 1
    68 00000008 ????????????????    <1>     .filename   resb 8
    69 00000010 ??????              <1>     .fileext    resb 3
    70 00000013 ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    resb 8
    73 00000020 ??????              <1>     .newExt     resb 3
    74 00000023 ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdLineCnt  equ psp.parmList
    19                              <1> cmdLine     equ psp.progTail
    20                              <1> 
    21                              <1> 
    22                              <1> ;Struct Declarations
    23                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    24 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    25 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    26 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    27 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    28 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc execProg  ;For use with EXEC-ing a child task
    32 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    33 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    34 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    35 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    36                              <1> endstruc
    37                              <1> 
    38                              <1> ;Directory attribute equates
    39                              <1>     dirReadOnly     equ 01h
    40                              <1>     dirHidden       equ 02h
    41                              <1>     dirSystem       equ 04h
    42                              <1>     dirVolumeID     equ 08h
    43                              <1>     dirDirectory    equ 10h
    44                              <1>     dirArchive      equ 20h
    45                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    46                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    47                              <1>     ;If any of the three bits are set, then ALL three bits are set
    48                              <1>     ; in addition to whatever the user passed to search for.
    49                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    50                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    11 0000002B 5C                  <1> pathSep     db "\"  ;Default path sep
    12 0000002C 2F                  <1> switchChar  db "/"  ;Default switch char
    13 0000002D 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    14 0000002E 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    15                              <1> ;Static strings, not used in command line parsing
    16 00000036 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    16 0000003F 000000000000000000- <1>
    16 00000048 000000000000000000- <1>
    16 00000051 000000000000000000- <1>
    16 0000005A 0000                <1>
    17 0000005C 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    17 00000065 000000000000000000- <1>
    17 0000006E 000000000000000000- <1>
    17 00000077 000000000000000000- <1>
    17 00000080 000000000000000000- <1>
    17 00000089 000000000000000000- <1>
    17 00000092 000000000000000000- <1>
    17 0000009B 00000000            <1>
    18                              <1> 
    19                              <1> 
    20                              <1> cmdLineStatePtr:
    21 0000009F 0000000000000000    <1> cmdStartPtr dq 0    ;Ptr to the first char for this command (may be a space)
    22 000000A7 0000000000000000    <1> cmdEndPtr   dq 0    ;Ptr to the terminating char for this command (0Dh or |)
    23 000000AF 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    24 000000B0 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    25 000000B2 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    26                              <1> 
    27                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    28                              <1> ;These variables are valid for a SINGLE command in a command line
    29                              <1> ;Next two bytes, if set to -1, flags error
    30 000000B4 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    31 000000B5 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    32                              <1> ;                    If 2, we are redirecting output to a file, by appending
    33 000000B6 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    34 000000B8 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    35                              <1> 
    36 000000BA 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    37 000000BB 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    38 000000BC 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    39                              <1> 
    40 000000BD 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    41 000000BE 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    42 000000BF 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    43                              <1> 
    44                              <1> cmdStateL equ $ - cmdStatePtr
    45                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    46                              <1> 
    47                              <1> ;Structs and strings
    48                              <1> 
    49 000000C0 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    49 000000C9 00000000000000      <1>
    50 000000D0 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    50 000000D9 000000000000000000- <1>
    50 000000E2 000000000000000000- <1>
    50 000000EB 000000000000000000- <1>
    50 000000F4 00000000000000      <1>
    51                              <1> 
    52 000000FB 000000000000000000- <1> launchBlock db execProg_size dup (0)
    52 00000104 000000000000000000- <1>
    52 0000010D 000000000000000000- <1>
    52 00000116 0000000000          <1>
    53 0000011B 000000000000000000- <1> cmdTail     db cmdBufferL dup (0)   ;This is the tail that is passed to EXEC
    53 00000124 000000000000000000- <1>
    53 0000012D 000000000000000000- <1>
    53 00000136 000000000000000000- <1>
    53 0000013F 000000000000000000- <1>
    53 00000148 000000000000000000- <1>
    53 00000151 000000000000000000- <1>
    53 0000015A 000000000000000000- <1>
    53 00000163 000000000000000000- <1>
    53 0000016C 000000000000000000- <1>
    53 00000175 000000000000000000- <1>
    53 0000017E 000000000000000000- <1>
    53 00000187 000000000000000000- <1>
    53 00000190 000000000000000000- <1>
    53 00000199 00000000            <1>
    54                              <1> 
    55 0000019D 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    55 000001A6 000000000000000000- <1>
    55 000001AF 000000000000000000- <1>
    55 000001B8 000000000000000000- <1>
    55 000001C1 000000000000000000- <1>
    55 000001CA 000000000000000000- <1>
    55 000001D3 000000000000000000- <1>
    55 000001DC 000000000000000000- <1>
    55 000001E5 000000000000000000- <1>
    55 000001EE 000000000000000000- <1>
    55 000001F7 000000000000000000- <1>
    55 00000200 000000000000000000- <1>
    55 00000209 000000000000000000- <1>
    55 00000212 000000000000000000- <1>
    55 0000021B 00000000            <1>
    56 0000021F 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    56 00000228 000000000000000000- <1>
    56 00000231 000000000000000000- <1>
    56 0000023A 000000000000000000- <1>
    56 00000243 000000000000000000- <1>
    56 0000024C 000000000000000000- <1>
    56 00000255 000000000000000000- <1>
    56 0000025E 000000000000000000- <1>
    56 00000267 000000000000000000- <1>
    56 00000270 000000000000000000- <1>
    56 00000279 000000000000000000- <1>
    56 00000282 000000000000000000- <1>
    56 0000028B 000000000000000000- <1>
    56 00000294 000000000000000000- <1>
    56 0000029D 00000000            <1>
    57 000002A1 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    57 000002AA 000000000000000000- <1>
    57 000002B3 000000000000000000- <1>
    57 000002BC 000000000000000000- <1>
    57 000002C5 000000000000000000- <1>
    57 000002CE 000000000000000000- <1>
    57 000002D7 000000000000000000- <1>
    57 000002E0 000000000000000000- <1>
    57 000002E9 00000000000000      <1>
    58                              <1> 
    59 000002F0 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    59 000002F9 0000                <1>
    60 000002FB 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    60 00000304 00000000            <1>
    61 00000308 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    61 00000311 0000000000          <1>
    62                              <1> 
    63 00000316 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    63 0000031F 000000000000000000- <1>
    63 00000328 000000000000000000- <1>
    63 00000331 000000000000000000- <1>
    63 0000033A 000000000000000000- <1>
    63 00000343 000000000000000000- <1>
    63 0000034C 000000000000000000- <1>
    63 00000355 000000000000000000- <1>
    63 0000035E 00000000000000      <1>
    64 00000365 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    64 0000036E 000000000000000000- <1>
    64 00000377 000000000000000000- <1>
    64 00000380 000000000000000000- <1>
    64 00000389 000000000000000000- <1>
    64 00000392 000000000000000000- <1>
    64 0000039B 000000000000000000- <1>
    64 000003A4 000000000000000000- <1>
    64 000003AD 00000000000000      <1>
    65                              <1> 
    66                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    67 000003B4 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    67 000003BD 000000000000000000- <1>
    67 000003C6 000000000000000000- <1>
    67 000003CF 000000000000000000- <1>
    67 000003D8 000000000000000000- <1>
    67 000003E1 000000000000000000- <1>
    67 000003EA 000000000000000000- <1>
    67 000003F3 000000000000000000- <1>
    67 000003FC 00000000000000      <1>
    68 00000403 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    68 0000040C 000000000000000000- <1>
    68 00000415 000000000000000000- <1>
    68 0000041E 000000000000000000- <1>
    68 00000427 000000000000000000- <1>
    68 00000430 000000000000000000- <1>
    68 00000439 000000000000000000- <1>
    68 00000442 000000000000000000- <1>
    68 0000044B 00000000000000      <1>
    69                              <1> 
    70 00000452 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    71 0000045A 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    72                              <1> 
    73 00000462 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    73 0000046B 000000000000000000- <1>
    73 00000474 000000000000000000- <1>
    73 0000047D 000000000000000000- <1>
    73 00000486 000000000000000000- <1>
    73 0000048F 000000000000000000- <1>
    73 00000498 000000000000000000- <1>
    73 000004A1 000000000000000000- <1>
    73 000004AA 000000000000000000- <1>
    73 000004B3 000000000000000000- <1>
    73 000004BC 000000000000000000- <1>
    73 000004C5 000000000000000000- <1>
    73 000004CE 000000000000000000- <1>
    73 000004D7 000000000000000000- <1>
    73 000004E0 00000000            <1>
    74                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    75                              <1> ; users overtyping
    76                              <1> 
    77                              <1> ;Internal Function vars
    78                              <1> ;Dir Vars
    79 000004E4 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    80                              <1> ;                                   Bit[1] set => /P or /p specified
    81                              <1> ;                                   Bit[2] set => A file/path specified
    82 000004E5 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    83 000004E6 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    84 000004E7 00                  <1> dirDrv      db 0    ;0 based drive number to use
    85 000004E8 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
    85 000004F1 000000000000000000- <1>
    85 000004FA 000000000000000000- <1>
    85 00000503 000000000000000000- <1>
    85 0000050C 000000000000000000- <1>
    85 00000515 000000000000000000- <1>
    85 0000051E 000000000000000000- <1>
    85 00000527 000000000000000000- <1>
    85 00000530 000000000000000000- <1>
    85 00000539 000000000000000000- <1>
    85 00000542 000000000000000000- <1>
    85 0000054B 000000000000000000- <1>
    85 00000554 000000000000000000- <1>
    85 0000055D 000000000000000000- <1>
    85 00000566 00000000            <1>
    86 0000056A 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
    86 00000573 3F3F3F3F3F3F3F      <1>
    87                              <1> dirWideType equ 1
    88                              <1> dirPageType equ 2
    89                              <1> dirFileType equ 4
    90                              <1> ;Volume Vars
    91                              <1> volFcb:
    92                              <1>     istruc exFcb
    93 0000057A FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    94 0000057B 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    95 00000581 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
    96 00000582 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
    97 0000058A 3F3F3F              <1>     at exFcb.fileext,   db "???"
    98 0000058D 00000000            <1>     at exFcb.curBlock,  dd 0
    99 00000591 00<rep 15h>         <1>     iend 
   100                              <1> 
   101                              <1> ;Time/Date vars
   102 000005A6 00                  <1> td1 db 0    ;Minutes/Year
   103 000005A7 00                  <1> td2 db 0    ;Hours/Zero
   104 000005A8 00                  <1> td3 db 0    ;Hundredths/Day
   105 000005A9 00                  <1> td4 db 0    ;Seconds/Month
   106                              <1> 
   107                              <1> ;Rename/Copy/Delete Buffers
   108                              <1> delPath:
   109 000005AA 000000000000000000- <1> sourcePath  db cmdBufferL dup (0)
   109 000005B3 000000000000000000- <1>
   109 000005BC 000000000000000000- <1>
   109 000005C5 000000000000000000- <1>
   109 000005CE 000000000000000000- <1>
   109 000005D7 000000000000000000- <1>
   109 000005E0 000000000000000000- <1>
   109 000005E9 000000000000000000- <1>
   109 000005F2 000000000000000000- <1>
   109 000005FB 000000000000000000- <1>
   109 00000604 000000000000000000- <1>
   109 0000060D 000000000000000000- <1>
   109 00000616 000000000000000000- <1>
   109 0000061F 000000000000000000- <1>
   109 00000628 00000000            <1>
   110 0000062C 000000000000000000- <1> destPath    db cmdBufferL dup (0)
   110 00000635 000000000000000000- <1>
   110 0000063E 000000000000000000- <1>
   110 00000647 000000000000000000- <1>
   110 00000650 000000000000000000- <1>
   110 00000659 000000000000000000- <1>
   110 00000662 000000000000000000- <1>
   110 0000066B 000000000000000000- <1>
   110 00000674 000000000000000000- <1>
   110 0000067D 000000000000000000- <1>
   110 00000686 000000000000000000- <1>
   110 0000068F 000000000000000000- <1>
   110 00000698 000000000000000000- <1>
   110 000006A1 000000000000000000- <1>
   110 000006AA 00000000            <1>
   111                              <1> ;Copy Handles
   112 000006AE FFFF                <1> sourceHdl   dw -1
   113 000006B0 FFFF                <1> destHdl     dw -1
   114 000006B2 0000                <1> srcHdlInfo  dw 0 ;Used to save the handle device info (bit 7 Set -> Char dev)
   115                              <1> 
   116 000006B4 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   116 000006BD 000000000000000000- <1>
   116 000006C6 000000000000000000- <1>
   116 000006CF 000000000000000000- <1>
   116 000006D8 000000000000000000- <1>
   116 000006E1 000000000000000000- <1>
   116 000006EA 000000000000000000- <1>
   116 000006F3 000000000000000000- <1>
   116 000006FC 000000000000000000- <1>
   116 00000705 000000000000000000- <1>
   116 0000070E 000000000000000000- <1>
   116 00000717 000000000000000000- <1>
   116 00000720 000000000000000000- <1>
   116 00000729 000000000000000000- <1>
   116 00000732 0000                <1>
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 00000734 03444952            <1>     db 3, "DIR"
     8 00000738 1A17                <1>     dw dir - startLbl
     9                              <1> 
    10 0000073A 024344              <1>     db 2, "CD"
    11 0000073D E91B                <1>     dw chdir - startLbl
    12                              <1> 
    13 0000073F 054348444952        <1>     db 5, "CHDIR"
    14 00000745 E91B                <1>     dw chdir - startLbl
    15                              <1> 
    16 00000747 024D44              <1>     db 2, "MD"
    17 0000074A 641C                <1>     dw mkdir - startLbl
    18                              <1> 
    19 0000074C 054D4B444952        <1>     db 5, "MKDIR"
    20 00000752 641C                <1>     dw mkdir - startLbl
    21                              <1> 
    22 00000754 025244              <1>     db 2, "RD"
    23 00000757 B01C                <1>     dw rmdir - startLbl
    24                              <1> 
    25 00000759 05524D444952        <1>     db 5, "RMDIR"
    26 0000075F B01C                <1>     dw rmdir - startLbl
    27                              <1> 
    28 00000761 0344454C            <1>     db 3, "DEL"
    29 00000765 9E1E                <1>     dw erase - startLbl
    30                              <1> 
    31 00000767 054552415345        <1>     db 5, "ERASE"
    32 0000076D 9E1E                <1>     dw erase - startLbl
    33                              <1> 
    34 0000076F 0444415445          <1>     db 4, "DATE"
    35 00000774 D31F                <1>     dw date - startLbl
    36                              <1> 
    37 00000776 0454494D45          <1>     db 4, "TIME"
    38 0000077B 9C20                <1>     dw time - startLbl
    39                              <1> 
    40 0000077D 04434F5059          <1>     db 4, "COPY"
    41 00000782 FC1C                <1>     dw copy - startLbl
    42                              <1> 
    43 00000784 0443545459          <1>     db 4, "CTTY"
    44 00000789 3721                <1>     dw ctty - startLbl
    45                              <1> 
    46 0000078B 03434C53            <1>     db 3, "CLS"
    47 0000078F D221                <1>     dw cls - startLbl
    48                              <1> 
    49 00000791 05425245414B        <1>     db 5, "BREAK"
    50 00000797 4422                <1>     dw break - startLbl
    51                              <1> 
    52 00000799 06564552494659      <1>     db 6, "VERIFY"
    53 000007A0 C522                <1>     dw verify - startLbl
    54                              <1> 
    55 000007A2 0652454E414D45      <1>     db 6, "RENAME"
    56 000007A9 4223                <1>     dw rename - startLbl
    57                              <1> 
    58 000007AB 044D4F5645          <1>     db 4, "MOVE"
    59 000007B0 4223                <1>     dw rename - startLbl
    60                              <1>     
    61 000007B2 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 000007BB D425                <1>     dw truename - startLbl
    63                              <1> 
    64 000007BD 03564552            <1>     db 3, "VER"
    65 000007C1 BA27                <1>     dw version - startLbl
    66                              <1> 
    67 000007C3 03564F4C            <1>     db 3, "VOL"
    68 000007C7 FB26                <1>     dw volume - startLbl
    69                              <1> 
    70 000007C9 034D454D            <1>     db 3, "MEM"
    71 000007CD FE27                <1>     dw memory - startLbl
    72                              <1> 
    73 000007CF 0445584954          <1>     db 4, "EXIT"
    74 000007D4 E729                <1>     dw exit - startLbl
    75                              <1> 
    76 000007D6 0454595045          <1>     db 4, "TYPE"
    77 000007DB 4829                <1>     dw type - startLbl
    78                              <1> 
    79 000007DD 054C4142454C        <1>     db 5, "LABEL"
    80 000007E3 2526                <1>     dw label - startLbl
    81                              <1> 
    82                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    83 000007E5 054D4B4C424C        <1>     db 5, "MKLBL"
    84 000007EB 4F26                <1>     dw mklbl - startLbl
    85                              <1> 
    86 000007ED 05524D4C424C        <1>     db 5, "RMLBL"
    87 000007F3 8A26                <1>     dw rmlbl - startLbl
    88                              <1> 
    89 000007F5 05524E4C424C        <1>     db 5, "RNLBL"
    90 000007FB C526                <1>     dw rnlbl - startLbl
    91                              <1> 
    92 000007FD 05544F554348        <1>     db 5, "TOUCH"
    93 00000803 D023                <1>     dw touch - startLbl
    94                              <1> 
    95 00000805 044A4F494E          <1>     db 4, "JOIN"
    96 0000080A 2A24                <1>     dw join - startLbl
    97                              <1> 
    98 0000080C 055355425354        <1>     db 5, "SUBST"
    99 00000812 ED24                <1>     dw subst - startLbl
   100                              <1> 
   101                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   102 00000814 FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 00000815 0D0A24              <1> crlf    db  CR,LF,"$"
     3 00000818 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 0000081D 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 00000826 696C65206D69737369- <1>
     4 0000082F 6E670D0A24          <1>
     5 00000834 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 0000083D 6469736B2077697468- <1>
     5 00000846 206261746368206669- <1>
     5 0000084F 6C65                <1>
     6 00000851 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 0000085A 737320616E79206B65- <1>
     6 00000863 79207768656E207265- <1>
     6 0000086C 6164790D0A24        <1>
     7 00000872 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 0000087B 6E64206F722066696C- <1>
     7 00000884 65206E616D650D0A24  <1>
     8 0000088D 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 00000896 2066696C65206E616D- <1>
     8 0000089F 65206F7220          <1>
     9 000008A4 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 000008AD 666F756E640D0A24    <1>
    10 000008B5 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    10 000008BE 656E74206469736B20- <1>
    10 000008C7 73706163650D0A24    <1>
    11 000008CF 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 000008D8 7669726F6E6D656E74- <1>
    11 000008E1 2073706163650D0A24  <1>
    12 000008EA 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 000008F3 74696F6E206572726F- <1>
    12 000008FC 720D0A24            <1>
    13 00000900 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 00000909 6F7420626520636F70- <1>
    13 00000912 696564206F6E746F20- <1>
    13 0000091B 697473656C660D0A24  <1>
    14 00000924 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 0000092D 662064657374696E61- <1>
    14 00000936 74696F6E206C6F7374- <1>
    14 0000093F 206265666F72652063- <1>
    14 00000948 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 0000094E 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 00000957 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 00000960 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 00000969 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 0000096A 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 00000973 65650D0A24          <1>
    21 00000978 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 00000981 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 0000098A 726976652073706563- <1>
    23 00000993 696669636174696F6E- <1>
    23 0000099C 0D0A24              <1>
    24 0000099F 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 000009A8 6B6579207768656E20- <1>
    24 000009B1 7265616479202E202E- <1>
    24 000009BA 202E2024            <1>
    25 000009BE 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 000009C7 6172616D657465720D- <1>
    25 000009D0 0A24                <1>
    26                              <1> 
    27 000009D2 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 000009DB 576564546875467269- <1>
    27 000009E4 536174              <1>
    28 000009E7 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 000009F0 206461746524        <1>
    29 000009F6 43757272656E742064- <1> curDate db  "Current date is $"
    29 000009FF 6174652069732024    <1>
    30 00000A07 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 00000A10 657720646174652024  <1>
    31 00000A19 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 00000A22 293A2024            <1>
    32 00000A26 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 00000A2F 293A2024            <1>
    33 00000A33 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 00000A3C 293A2024            <1>
    34 00000A40 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 00000A49 2074696D6524        <1>
    35 00000A4F 43757272656E742074- <1> curTime db  "Current time is $"
    35 00000A58 696D652069732024    <1>
    36 00000A60 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 00000A69 65772074696D653A20- <1>
    36 00000A72 24                  <1>
    37                              <1> 
    38 00000A73 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000A7C 7572652028592F4E29- <1>
    38 00000A85 3F2024              <1>
    39                              <1> 
    40 00000A88 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000A91 56657273696F6E2024  <1>
    41                              <1> 
    42 00000A9A 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000AA3 6E2064726976652024  <1>
    43 00000AAC 2069732024          <1> volOk   db " is $"
    44 00000AB1 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000ABA 6162656C24          <1>
    45                              <1> 
    46 00000ABF 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000AC8 69726563746F72790D- <1>
    46 00000AD1 0A24                <1>
    47 00000AD3 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000ADC 206372656174652064- <1>
    47 00000AE5 69726563746F72790D- <1>
    47 00000AEE 0A24                <1>
    48 00000AF0 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000AF9 6174682C206E6F7420- <1>
    48 00000B02 6469726563746F7279- <1>
    48 00000B0B 2C0D0A              <1>
    49 00000B0E 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000B17 6F7279206E6F742065- <1>
    49 00000B20 6D7074790D0A24      <1>
    50 00000B27 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000B30 79206F66202024      <1>
    51 00000B37 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000B40 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    52 00000B49 72697665206973206E- <1>
    52 00000B52 6F206C6F6E67657220- <1>
    52 00000B5B 76616C696424        <1>
    53 00000B61 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    53 00000B6A 7269766520696E2073- <1>
    53 00000B73 656172636820706174- <1>
    53 00000B7C 680D0A24            <1>
    54 00000B80 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    54 00000B89 65766963650D0A24    <1>
    55 00000B91 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    55 00000B9A 20666F756E640D0A24  <1>
    56 00000BA3 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    56 00000BAC 726F720D0A24        <1>
    57 00000BB2 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    57 00000BBB 6F74206265206E6573- <1>
    57 00000BC4 7465640D0A24        <1>
    58 00000BCA 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    58 00000BD3 6174652066696C6520- <1>
    58 00000BDC 6572726F7220647572- <1>
    58 00000BE5 696E6720706970650D- <1>
    58 00000BEE 0A24                <1>
    59 00000BF0 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    59 00000BF9 2062696E6172792072- <1>
    59 00000C02 656164732066726F6D- <1>
    59 00000C0B 206120646576696365- <1>
    59 00000C14 0D0A24              <1>
    60 00000C17 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    61 00000C1D 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    62 00000C22 425245414B20697320- <1> breakIs db "BREAK is $"
    62 00000C2B 24                  <1>
    63 00000C2C 564552494659206973- <1> verifyIs    db "VERIFY is $"
    63 00000C35 2024                <1>
    64 00000C37 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    65 00000C40 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    65 00000C49 617468206F72206669- <1>
    65 00000C52 6C65206E616D650D0A- <1>
    65 00000C5B 24                  <1>
    66 00000C5C 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    66 00000C65 756D626572206F6620- <1>
    66 00000C6E 706172616D65746572- <1>
    66 00000C77 730D0A24            <1>
    67 00000C7B 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    67 00000C84 74696E6720746F2064- <1>
    67 00000C8D 6576696365          <1>
    68 00000C92 08200800            <1> backSpace   db BSP," ",BSP,NUL
    69                              <1> 
    70 00000C96 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    70 00000C9F 20202020202020546F- <1>
    70 00000CA8 74616C207379737465- <1>
    70 00000CB1 6D206D656D6F72793A- <1>
    70 00000CBA 2024                <1>
    71 00000CBC 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    71 00000CC5 20202020202020204D- <1>
    71 00000CCE 656D6F727920757365- <1>
    71 00000CD7 6420627920444F533A- <1>
    71 00000CE0 2024                <1>
    72 00000CE2 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    72 00000CEB 656D6F727920757365- <1>
    72 00000CF4 64206279206170706C- <1>
    72 00000CFD 69636174696F6E733A- <1>
    72 00000D06 2024                <1>
    73 00000D08 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    73 00000D11 656D6F727920726573- <1>
    73 00000D1A 657276656420627920- <1>
    73 00000D23 68617264776172653A- <1>
    73 00000D2C 2024                <1>
    74 00000D2E 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    74 00000D37 202020202020202020- <1>
    74 00000D40 2020202020204D656D- <1>
    74 00000D49 6F727920667265653A- <1>
    74 00000D52 2024                <1>
    75 00000D54 20627974657324      <1> memByte db " bytes$"
    76 00000D5B 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    76 00000D64 6F7420417373657274- <1>
    76 00000D6D 61696E20444F532045- <1>
    76 00000D76 6E74727920506F696E- <1>
    76 00000D7F 7424                <1>
    77 00000D81 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    77 00000D8A 416C6C6F636174696F- <1>
    77 00000D93 6E204572726F7224    <1>
    78 00000D9B 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    78 00000DA4 4572726F7224        <1>
    79 00000DAA 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    79 00000DB3 68616C74656424      <1>
    80                              <1> 
    81 00000DBA 556E61626C6520746F- <1> touchErr db "Unable to create file",CR,LF,"$"
    81 00000DC3 206372656174652066- <1>
    81 00000DCC 696C650D0A24        <1>
    82 00000DD2 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    82 00000DDB 206372656174652070- <1>
    82 00000DE4 6970650D0A          <1>
    83                              <1> pipeErrMsgL equ $ - pipeErrMsg
    84 00000DE9 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    84 00000DF2 6F6E206572726F720D- <1>
    84 00000DFB 0A                  <1>
    85                              <1> redirErrMsgL   equ $ - redirErrMsg
    86                              <1> 
    87 00000DFC 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    88 00000E00 2020202024          <1> fourSpc  db "    $"
    89 00000E05 20202024            <1> threeSpc db "   $"
    90 00000E09 202024              <1> twoSpc   db "  $"
    91                              <1> 
    92 00000E0C 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    92 00000E15 696679204F4E206F72- <1>
    92 00000E1E 204F46460D0A24      <1>
    93 00000E25 504154483D          <1> pathEVar db "PATH="
    94 00000E2A 50524F4D50543D      <1> promptEVar  db "PROMPT="
    95                              <1> 
    96                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    97                              <1> ; handles and reopen CON
    98 00000E31 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00000E35 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00000E38 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00000E3C C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 00000E3F B44A                <1>     mov ah, 4Ah ;Realloc
     9 00000E41 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00000E44 CD21                <1>     int 21h
    11 00000E46 EB6C                <1>     jmp short commandMain
    12                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    13 00000E48 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    14 00000E4D CD21                <1>     int 21h
    15 00000E4F 668905B7F1FFFF      <1>     mov word [returnCode], ax
    16                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    17 00000E56 488D15DD220000      <1>     lea rdx, critErrorHandler
    18 00000E5D 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    19 00000E61 B824250000          <1>     mov eax, 2524h
    20 00000E66 CD21                <1>     int 21h
    21 00000E68 488D1566250000      <1>     lea rdx, int23h
    22 00000E6F 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    23 00000E73 B823250000          <1>     mov eax, 2523h
    24 00000E78 CD21                <1>     int 21h
    25 00000E7A 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    26 00000E81 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    27 00000E85 B822250000          <1>     mov eax, 2522h
    28 00000E8A CD21                <1>     int 21h
    29 00000E8C F6051CF2FFFFFF      <1>     test byte [pipeFlag], -1
    30 00000E93 0F858C000000        <1>     jnz commandMain.pipeProceed ;Skip the handle closing when pipe active
    31 00000E99 E8BF040000          <1>     call cleanUpRedir   ;Clean up redirection once we are done
    32                              <1> ;Close all handles from 5->MAX
    33 00000E9E 0FB70D82F1FFFF      <1>     movzx ecx, word [numHdls]
    34 00000EA5 BB05000000          <1>     mov ebx, 5
    35                              <1> .handleClose:
    36 00000EAA B43E                <1>     mov ah, 3Eh ;File close
    37 00000EAC CD21                <1>     int 21h
    38 00000EAE FFC3                <1>     inc ebx ;Goto next file
    39 00000EB0 39CB                <1>     cmp ebx, ecx
    40 00000EB2 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    41                              <1> commandMain:
    42                              <1> ;Setup Commandline. First check if batch mode is active, then fall.
    43                              <1> ;=========================
    44                              <1> ;   BATCH HANDLING HERE
    45                              <1> ;=========================
    46 00000EB4 488B254AF1FFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    47 00000EBB FC                  <1>     cld ;Ensure stringops are done the right way
    48 00000EBC C605DAF2FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    49                              <1> .inputMain:
    50 00000EC3 E8E31C0000          <1>     call printCRLF
    51                              <1> .inputMain2:
    52 00000EC8 E839200000          <1>     call clearCommandLineState
    53 00000ECD E802200000          <1>     call printPrompt
    54                              <1> 
    55 00000ED2 B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    56 00000ED7 CD21                <1>     int 21h
    57 00000ED9 B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    58 00000EDE BA01000000          <1>     mov edx, 1      ;Start new print job
    59 00000EE3 CD21                <1>     int 21h
    60 00000EE5 488D15B1F2FFFF      <1>     lea rdx, inBuffer
    61 00000EEC B8000A0000          <1>     mov eax, 0A00h  ;Do Buffered input
    62 00000EF1 CD21                <1>     int 21h
    63 00000EF3 E8B31C0000          <1>     call printCRLF  ;Note we have accepted input
    64                              <1> ;First check we had something typed in of length greater than 0
    65                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    66 00000EF8 803D9FF2FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    67 00000EFF 74C7                <1>     je .inputMain2
    68                              <1>     ;Copy over the input text
    69 00000F01 488D3595F2FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    70 00000F08 488D3D10F3FFFF      <1>     lea rdi, cmdBuffer
    71 00000F0F B982000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    72 00000F14 F3A4                <1>     rep movsb
    73                              <1> .pipeLoop:
    74 00000F16 E846000000          <1>     call preProcessBuffer
    75 00000F1B E8BC000000          <1>     call analyseCmdline
    76 00000F20 E8B3010000          <1>     call doCommandLine
    77                              <1> .pipeProceed:
    78 00000F25 E833040000          <1>     call cleanUpRedir
    79 00000F2A 488B0576F1FFFF      <1>     mov rax, qword [cmdEndPtr]
    80 00000F31 48890567F1FFFF      <1>     mov qword [cmdStartPtr], rax
    81 00000F38 F60570F1FFFFFF      <1>     test byte [pipeFlag], -1  ;If we have any pipes active, we proceed here
    82 00000F3F 7482                <1>     jz .inputMain
    83 00000F41 80380D              <1>     cmp byte [rax], CR  ;Are we done?
    84 00000F44 0F8479FFFFFF        <1>     je .inputMain
    85 00000F4A E89C1F0000          <1>     call clearCommandState  ;Else, clear the command state and start again
    86 00000F4F EBC5                <1>     jmp short .pipeLoop
    87                              <1> .dfltErrExit:
    88 00000F51 488D151AF9FFFF      <1>     lea rdx, badCmd
    89 00000F58 B409                <1>     mov ah, 09h
    90 00000F5A CD21                <1>     int 21h
    91 00000F5C E962FFFFFF          <1>     jmp .inputMain
    92                              <1> 
    93                              <1> preProcessBuffer:
    94                              <1> ;Start by preprocessing the path, escape quotes and handle redirections.
    95                              <1> ;Each normal char gets copied over to psp.dta + 1 except for those special chars.
    96                              <1> ;Places the count of chars save CR in byte 0 of psp.dta.
    97                              <1> ;Places the ptr to the first byte past pipe or CR in cmdEndPtr
    98                              <1> ;Throughout: CL has char count, CH has number of quotes.
    99 00000F61 31C9                <1>     xor ecx, ecx
   100 00000F63 4C8B05A5F0FFFF      <1>     mov r8, qword [pspPtr]  ;Ensure we have our pspPtr pointing to the right place
   101 00000F6A 488B352EF1FFFF      <1>     mov rsi, qword [cmdStartPtr]
   102 00000F71 4885F6              <1>     test rsi, rsi
   103 00000F74 7507                <1>     jnz .notNewCmd
   104 00000F76 488D35A4F2FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto command buffer + 2
   105                              <1> .notNewCmd:
   106 00000F7D 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   107                              <1> .countQuotes:
   108 00000F80 AC                  <1>     lodsb
   109 00000F81 3C22                <1>     cmp al, '"'
   110 00000F83 7507                <1>     jne .notQuoteToCount
   111 00000F85 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   112 00000F87 E9F4FFFFFF          <1>     jmp .countQuotes
   113                              <1> .notQuoteToCount:
   114 00000F8C 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   115 00000F8E 75F0                <1>     jne .countQuotes
   116 00000F90 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   117 00000F93 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We store this nicely formatted string in psp
   118                              <1> .getChar:
   119 00000F9A AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   120 00000F9B 3C22                <1>     cmp al, '"'     ;Is char a quote?
   121 00000F9D 750E                <1>     jne .notQuote
   122 00000F9F FECD                <1>     dec ch          ;We have a quote, now decrement
   123 00000FA1 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   124                              <1> .searchForClosingQuote:
   125                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   126 00000FA3 AA                  <1>     stosb   ;Store char and inc rdi
   127 00000FA4 FEC1                <1>     inc cl
   128 00000FA6 AC                  <1>     lodsb   ;Get next char
   129 00000FA7 3C22                <1>     cmp al, '"'
   130 00000FA9 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   131 00000FAB FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   132                              <1> .notQuote:
   133 00000FAD 51                  <1>     push rcx    ;Save counts, if anything goes wrong, stack is jiggled properly
   134 00000FAE E81A050000          <1>     call checkAndSetupRedir ;Intervene redir
   135 00000FB3 59                  <1>     pop rcx
   136 00000FB4 7509                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   137 00000FB6 7202                <1>     jc .pipeHandle      ;Store a CR in the buffer if a pipe
   138 00000FB8 EBE0                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   139                              <1> .pipeHandle:
   140 00000FBA B00D                <1>     mov al, CR  ;Now store a Carriage return 
   141 00000FBC 48FFC6              <1>     inc rsi ;Ensure we remain one char past the pipe
   142                              <1> .notRedir:
   143 00000FBF AA                  <1>     stosb       ;Store char and advance rdi
   144 00000FC0 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   145 00000FC2 7404                <1>     je .exit
   146 00000FC4 FEC1                <1>     inc cl      ;Increment char count
   147 00000FC6 EBD2                <1>     jmp short .getChar    ;If not, get next char
   148                              <1> .exit:
   149 00000FC8 48FFCE              <1>     dec rsi ;move rsi to point back to terminator or one past | 
   150 00000FCB 488935D5F0FFFF      <1>     mov qword [cmdEndPtr], rsi  ;Store rsi pointing to the first char past CR or |
   151 00000FD2 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   152 00000FD9 880F                <1>     mov byte [rdi], cl  ;Store the count of chars in the psp buffer
   153                              <1>     return
    13                              <2> %%_ret:
    14 00000FDB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   154                              <1> 
   155                              <1> analyseCmdline:
   156                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   157                              <1> ; processes the command name into the FCB.  
   158 00000FDC 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   159 00000FE3 4889F3              <1>     mov rbx, rsi            ;Save this ptr in rbx
   160 00000FE6 E8C81E0000          <1>     call skipDelimiters     ;Skip any preceeding separators
   161 00000FEB 488D3DAFF2FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   162 00000FF2 E8F31F0000          <1>     call cpDelimPathToBufz  ;Moves rsi to the first char past the delim char
   163 00000FF7 48FFCE              <1>     dec rsi ;Point it back to the delim char
   164 00000FFA E8D0000000          <1>     call .skipAndCheckCR
   165 00000FFF 7439                <1>     je .exit
   166 00001001 C605B2F0FFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   167 00001008 4889F0              <1>     mov rax, rsi
   168 0000100B 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   169 0000100E 8805A7F0FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   170                              <1> .skipArg:
   171 00001014 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   172 00001015 3C0D                <1>     cmp al, CR
   173 00001017 7421                <1>     je .exit
   174 00001019 E8A31E0000          <1>     call isALdelimiter
   175 0000101E 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   176 00001020 E8AA000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   177 00001025 7413                <1>     je .exit            ;If ZF set, this we encountered a CR
   178 00001027 C6058FF0FFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   179 0000102E 4889F0              <1>     mov rax, rsi            
   180 00001031 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   181 00001034 880584F0FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   182                              <1> .exit:
   183                              <1> ;Before returning, we copy the command name to cmdName and make it useful
   184 0000103A 488D3D60F2FFFF      <1>     lea rdi, cmdPathSpec
   185 00001041 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   186 00001044 30C0                <1>     xor al, al  ;Search for the terminating null
   187 00001046 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   188 0000104B F2AE                <1>     repne scasb
   189 0000104D 48FFCF              <1>     dec rdi ;Go to the last char in the command
   190 00001050 4889FE              <1>     mov rsi, rdi
   191 00001053 FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   192                              <1> .keepSearching:
   193 00001054 AC                  <1>     lodsb
   194 00001055 3A05D0EFFFFF        <1>     cmp al, byte [pathSep]
   195 0000105B 740B                <1>     je .cmdStartFnd
   196 0000105D 4839DE              <1>     cmp rsi, rbx
   197 00001060 75F2                <1>     jne .keepSearching
   198 00001062 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   199 00001065 48FFCE              <1>     dec rsi
   200                              <1> .cmdStartFnd:
   201 00001068 48FFC6              <1>     inc rsi
   202 0000106B 48FFC6              <1>     inc rsi ;Go past the pathsep
   203 0000106E FC                  <1>     cld ;Go the sane way again
   204 0000106F 488D3D93F2FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   205 00001076 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   206 00001077 B90E000000          <1>     mov ecx, cmdNameL
   207 0000107C 30C0                <1>     xor al, al
   208 0000107E F3AA                <1>     rep stosb
   209 00001080 5F                  <1>     pop rdi
   210 00001081 31C9                <1>     xor ecx, ecx
   211 00001083 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   212                              <1> .cmdGetChar:
   213 00001084 AC                  <1>     lodsb
   214 00001085 84C0                <1>     test al, al ;Did we find the terminating null?
   215 00001087 7414                <1>     jz .nameLenFnd
   216 00001089 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   217 0000108B 7410                <1>     je .nameLenFnd
   218 0000108D E80F1E0000          <1>     call ucChar ;Else uppercase char
   219 00001092 AA                  <1>     stosb   ;and store it
   220 00001093 FFC1                <1>     inc ecx
   221 00001095 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   222 0000109B 72E7                <1>     jb .cmdGetChar
   223                              <1> .nameLenFnd:
   224 0000109D 880D65F2FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   225                              <1>     ;Now finally, create a FCB filespec
   226 000010A3 488D3D46F2FFFF      <1>     lea rdi, fcbCmdSpec
   227 000010AA 57                  <1>     push rdi
   228 000010AB B90B000000          <1>     mov ecx, fcbNameL
   229 000010B0 B020                <1>     mov al, " " ;Fill with spaces
   230 000010B2 F3AA                <1>     rep stosb
   231 000010B4 5F                  <1>     pop rdi
   232 000010B5 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   233 000010B6 E8701E0000          <1>     call asciiToFCB
   234 000010BB 488D352EF2FFFF      <1>     lea rsi, fcbCmdSpec
   235 000010C2 488D3D32F2FFFF      <1>     lea rdi, cmdSpec
   236 000010C9 E8DC1E0000          <1>     call FCBToAsciiz
   237                              <1>     return
    13                              <2> %%_ret:
    14 000010CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   238                              <1> .skipAndCheckCR:
   239                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   240 000010CF E8DF1D0000          <1>     call skipDelimiters ;Go to the next char in the input line
   241 000010D4 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   242                              <1>     return
    13                              <2> %%_ret:
    14 000010D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   243                              <1> 
   244                              <1> doCommandLine:
   245 000010D8 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   246                              <1>     ;The following check accounts for the end of a piped command
   247 000010DF 803E0D              <1>     cmp byte [rsi], CR  ;If the first char is a CR, exit the pipe loop
   248                              <1>     rete    ;Do not attempt to execute if the first char is a CR
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000010E2 74(D7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   249 000010E4 488D3DD5EFFFFF      <1>     lea rdi, cmdFcb
   250 000010EB B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   251 000010F0 CD21                <1>     int 21h
   252 000010F2 410FB79881000000    <1>     movzx ebx, word [r8 + cmdLine]    ;Get the drive specifier
   253 000010FA 80FF3A              <1>     cmp bh, ":"
   254 000010FD 7529                <1>     jne .noDriveSpecified
   255 000010FF 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   256 00001101 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   257 00001104 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   258 00001107 3CFF                <1>     cmp al, -1  ;Int 21h returns AL = -1 if bad drive specified
   259 00001109 7410                <1>     je .badDrive
   260                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   261 0000110B 803DF6F1FFFF02      <1>     cmp byte [cmdName], 2
   262 00001112 7514                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   263 00001114 E85C1D0000          <1>     call setDrive
   264                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001119 74(D7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   265                              <1> .badDrive:
   266 0000111B 488D155FF8FFFF      <1>     lea rdx, badDrv
   267 00001122 B409                <1>     mov ah, 09h
   268 00001124 CD21                <1>     int 21h
   269 00001126 F9                  <1>     stc
   270                              <1>     return
    13                              <2> %%_ret:
    14 00001127 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   271                              <1> .noDriveSpecified:
   272                              <1> ;Now we set the two FCB's in the command line
   273 00001128 F6058BEFFFFFFF      <1>     test byte [arg1Flg], -1
   274 0000112F 744D                <1>     jz .fcbArgsDone
   275 00001131 0FB60583EFFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   276 00001138 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   277 0000113F 4801C6              <1>     add rsi, rax    ;Point to first argument
   278 00001142 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   279 00001146 B801290000          <1>     mov eax, 2901h
   280 0000114B CD21                <1>     int 21h
   281 0000114D 880569EFFFFF        <1>     mov byte [arg1FCBret], al
   282 00001153 F60563EFFFFFFF      <1>     test byte [arg2Flg], -1
   283 0000115A 7422                <1>     jz .fcbArgsDone
   284 0000115C 0FB6055BEFFFFF      <1>     movzx eax, byte [arg2Off]
   285 00001163 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   286 0000116A 4801C6              <1>     add rsi, rax    ;Point to first argument
   287 0000116D 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   288 00001171 B801290000          <1>     mov eax, 2901h
   289 00001176 CD21                <1>     int 21h
   290 00001178 880541EFFFFF        <1>     mov byte [arg2FCBret], al
   291                              <1> .fcbArgsDone:
   292 0000117E 498D9881000000      <1>     lea rbx, [r8 + cmdLine]
   293 00001185 488D357CF1FFFF      <1>     lea rsi, cmdName
   294 0000118C B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   295 00001191 BAFFFF0000          <1>     mov edx, 0FFFFh
   296 00001196 B5FF                <1>     mov ch, -1
   297 00001198 CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   298 0000119A B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   299 0000119F BAFFFF0000          <1>     mov edx, 0FFFFh
   300 000011A4 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   301 000011A6 CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   302                              <1>             ;        al = 0  if the command should be executed as usual
   303 000011A8 84C0                <1>     test al, al
   304 000011AA 741D                <1>     jz .executeInternal
   305                              <1>     ;Here we execute externally and return to the prompt
   306                              <1>     ; as if it was an internal execution
   307 000011AC 488D35EAEFFFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   308 000011B3 488D1D06EFFFFF      <1>     lea rbx, cmdFcb
   309 000011BA B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   310 000011BF BAFFFF0000          <1>     mov edx, 0FFFFh
   311 000011C4 B5FF                <1>     mov ch, -1
   312 000011C6 CD2F                <1>     int 2Fh 
   313                              <1>     return
    13                              <2> %%_ret:
    14 000011C8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   314                              <1> .executeInternal:
   315                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   316                              <1> ;rsi points after the command terminator in the command tail
   317 000011C9 488D1D64F5FFFF      <1>     lea rbx, functionTable
   318                              <1> .nextEntry:
   319 000011D0 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   320 000011D3 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   321 000011D6 0F8441180000        <1>     je launchChild      ;If so, check externally now
   322 000011DC 380D26F1FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   323 000011E2 7532                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   324                              <1>     ;Here they have the same length so lets see if the name is the same
   325 000011E4 56                  <1>     push rsi
   326                              <1>     ;ecx has the length to compare
   327 000011E5 51                  <1>     push rcx
   328 000011E6 488D7301            <1>     lea rsi, qword [rbx + 1]
   329 000011EA 488D3D18F1FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   330 000011F1 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   331 000011F3 59                  <1>     pop rcx
   332 000011F4 5E                  <1>     pop rsi
   333 000011F5 751F                <1>     jne .gotoNextEntry
   334                              <1>     ;Here it was found both strings are equal
   335 000011F7 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   336 000011FC 480FB71F            <1>     movzx rbx, word [rdi]
   337 00001200 488D3DF9EDFFFF      <1>     lea rdi, startLbl
   338 00001207 4801FB              <1>     add rbx, rdi
   339 0000120A FFD3                <1>     call rbx    ;Call this function...
   340                              <1>     retc    ;Always return with CF=CY on error. Error code set to -1
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000120C 72(C8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   341 0000120E C605F8EDFFFF00      <1>     mov byte [returnCode], 0 ;Set the retcode to 0 if ok!
   342                              <1>     return  ;... and return
    13                              <2> %%_ret:
    14 00001215 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   343                              <1> .gotoNextEntry:
   344 00001216 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   345 0000121D 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   346 00001220 EBAE                <1>     jmp short .nextEntry
   347                              <1> .dfltErrExit:
   348 00001222 488D1549F6FFFF      <1>     lea rdx, badCmd
   349 00001229 B409                <1>     mov ah, 09h
   350 0000122B CD21                <1>     int 21h
   351                              <1>     return
    13                              <2> %%_ret:
    14 0000122D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   352                              <1> 
   353                              <1> 
   354                              <1> checkExtensionExec:
   355                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   356                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   357                              <1> ;         If ZF=ZE and CF=CY => Batch file
   358 0000122E 8B0595EEFFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   359 00001234 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   360 00001239 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   361 0000123E 25DFDFDFFF          <1>     and eax, 0FFDFDFDFh ;Uppercase the three letters
   362 00001243 3D434F4D20          <1>     cmp eax, "COM "
   363                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001248 74(2D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   364 0000124A 3D45584520          <1>     cmp eax, "EXE "
   365                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000124F 74(2D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   366 00001251 3D42415420          <1>     cmp eax, "BAT "
   367                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001256 75(2D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   368 00001258 F9                  <1>     stc
   369                              <1>     return
    13                              <2> %%_ret:
    14 00001259 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   370                              <1> 
   371                              <1> redirFailure:
   372 0000125A 488D1588FBFFFF      <1>     lea rdx, redirErrMsg
   373 00001261 B913000000          <1>     mov ecx, redirErrMsgL
   374 00001266 EB0C                <1>     jmp short redirPipeFailureCommon
   375                              <1> pipeFailure:
   376 00001268 488D1563FBFFFF      <1>     lea rdx, pipeErrMsg
   377 0000126F B917000000          <1>     mov ecx, pipeErrMsgL
   378                              <1> redirPipeFailureCommon:
   379                              <1> ;This routine is called if any problems happen during 
   380                              <1> ;This routine tries to close whatever handles are not -1 and delete
   381                              <1> ; pipe files if the pipe count is not 0
   382                              <1> ;It resets all variables and proceeds.
   383 00001274 B800400000          <1>     mov eax, 4000h  ;Write handle
   384 00001279 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   385 0000127E CD21                <1>     int 21h
   386 00001280 31DB                <1>     xor ebx, ebx    ;Select STDIN
   387 00001282 E8C6000000          <1>     call .closeHandle
   388 00001287 FFC3                <1>     inc ebx         ;Select STDOUT
   389 00001289 E8BF000000          <1>     call .closeHandle
   390 0000128E B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   391 00001293 488D1597FBFFFF      <1>     lea rdx, conName
   392 0000129A CD21                <1>     int 21h
   393 0000129C 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
   394 0000129E B800450000          <1>     mov eax, 4500h  ;DUP
   395 000012A3 CD21                <1>     int 21h
   396 000012A5 66C70506EEFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   397 000012AE 0FB71D01EEFFFF      <1>     movzx ebx, word [redirSTDIN]
   398 000012B5 E893000000          <1>     call .closeHandle
   399                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   400 000012BA 66C705F3EDFFFFFFFF  <1>     mov word [redirSTDIN], -1
   401 000012C3 0FB71DEEEDFFFF      <1>     movzx ebx, word [redirSTDOUT]
   402 000012CA E87E000000          <1>     call .closeHandle
   403 000012CF 66C705E0EDFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   404 000012D8 0FB71DD1EDFFFF      <1>     movzx ebx, word [pipeSTDIN]
   405 000012DF E869000000          <1>     call .closeHandle
   406 000012E4 66C705C3EDFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   407 000012ED 0FB71DBEEDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   408 000012F4 E854000000          <1>     call .closeHandle
   409 000012F9 66C705B0EDFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   410 00001302 C605A6EDFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   411 00001309 488D15A4F0FFFF      <1>     lea rdx, qword [pipe1Filespec]
   412 00001310 803A00              <1>     cmp byte [rdx], 0
   413 00001313 7407                <1>     jz .checkOld
   414 00001315 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   415 0000131A CD21                <1>     int 21h
   416                              <1> .checkOld:
   417 0000131C 488D15E0F0FFFF      <1>     lea rdx, qword [pipe2Filespec]
   418 00001323 803A00              <1>     cmp byte [rdx],0
   419 00001326 7407                <1>     jz .pipeNamesComplete
   420 00001328 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   421 0000132D CD21                <1>     int 21h
   422                              <1> .pipeNamesComplete:
   423 0000132F 31C0                <1>     xor eax, eax
   424                              <1>     ;Invalidate the pointers and the paths too
   425 00001331 4889051AF1FFFF      <1>     mov qword [newPipe], rax
   426 00001338 4889051BF1FFFF      <1>     mov qword [oldPipe], rax
   427 0000133F 89056FF0FFFF        <1>     mov dword [pipe1Filespec], eax
   428 00001345 8905B8F0FFFF        <1>     mov dword [pipe2Filespec], eax
   429 0000134B F9                  <1>     stc
   430                              <1>     return
    13                              <2> %%_ret:
    14 0000134C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   431                              <1> .closeHandle:
   432 0000134D 81FBFFFFFFFF        <1>     cmp ebx, -1
   433                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001353 74(4C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   434 00001355 B8003E0000          <1>     mov eax, 3E00h
   435 0000135A CD21                <1>     int 21h
   436                              <1>     return
    13                              <2> %%_ret:
    14 0000135C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   437                              <1> 
   438                              <1> cleanUpRedir:
   439                              <1> ;Cleans up the redir stuff after we are done.
   440 0000135D 0FB7054CEDFFFF      <1>     movzx eax, word [pipeSTDIN]
   441 00001364 0FB71D47EDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   442 0000136B C1E310              <1>     shl ebx, 10h
   443 0000136E 09D8                <1>     or eax, ebx
   444 00001370 3DFFFFFFFF          <1>     cmp eax, -1
   445 00001375 750C                <1>     jne .pipe
   446 00001377 C60531EDFFFF00      <1>     mov byte [pipeFlag], 0  ;Clear the flag
   447 0000137E E9CD000000          <1>     jmp .redirInClear   ;If no piping, skip
   448                              <1> .pipe:
   449                              <1> ;Pipe processing here
   450                              <1> ;We handle stdin, closing the redir if it is and deleting
   451                              <1> ; the redir file.
   452                              <1> ;Then we handle stdout, moving the redir to stdin.
   453 00001383 66813D24EDFFFFFFFF  <1>     cmp word [pipeSTDIN], -1
   454 0000138C 7443                <1>     je .pipeNostdin
   455                              <1>     ;We close the handle first and delete the file.
   456 0000138E 0FB71D1BEDFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   457 00001395 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   458 00001397 B800460000          <1>     mov eax, 4600h
   459 0000139C CD21                <1>     int 21h
   460 0000139E 0F82C4FEFFFF        <1>     jc pipeFailure
   461 000013A4 B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   462 000013A9 CD21                <1>     int 21h
   463 000013AB 0F82B7FEFFFF        <1>     jc pipeFailure
   464 000013B1 488B15A2F0FFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   465 000013B8 B800410000          <1>     mov eax, 4100h  ;Delete the file!
   466 000013BD CD21                <1>     int 21h
   467 000013BF 0F82A3FEFFFF        <1>     jc pipeFailure
   468 000013C5 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   469 000013C8 66C705DFECFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   470                              <1> .pipeNostdin:
   471 000013D1 66813DD8ECFFFFFFFF  <1>     cmp word [pipeSTDOUT], -1   ;If no stdout redir, exit now
   472 000013DA 7474                <1>     je .redirInClear
   473                              <1> ;Duplicate STDIN to save across pipe
   474 000013DC B800450000          <1>     mov eax, 4500h
   475 000013E1 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   476 000013E3 CD21                <1>     int 21h
   477 000013E5 0F827DFEFFFF        <1>     jc pipeFailure
   478 000013EB 668905BEECFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   479                              <1> 
   480                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   481 000013F2 B800460000          <1>     mov eax, 4600h
   482 000013F7 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   483 000013F9 FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   484 000013FB CD21                <1>     int 21h
   485 000013FD 0F8265FEFFFF        <1>     jc pipeFailure
   486                              <1> 
   487                              <1> ;Now return the original stdout to stdout
   488 00001403 89D9                <1>     mov ecx, ebx
   489 00001405 0FB71DA6ECFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   490 0000140C B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   491 00001411 CD21                <1>     int 21h
   492 00001413 0F824FFEFFFF        <1>     jc pipeFailure
   493                              <1> 
   494                              <1> ;Now close the DUP'ed STDOUT
   495 00001419 B8003E0000          <1>     mov eax, 3E00h
   496 0000141E CD21                <1>     int 21h
   497 00001420 0F8242FEFFFF        <1>     jc pipeFailure
   498                              <1> 
   499                              <1> ;Finally unwind STDIN to the beginning of the file
   500 00001426 B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   501 0000142B 31DB                <1>     xor ebx, ebx    ;STDIN handle
   502 0000142D 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   503 0000142F 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   504 00001431 CD21                <1>     int 21h
   505 00001433 0F822FFEFFFF        <1>     jc pipeFailure  ;This should never happen
   506                              <1> 
   507 00001439 488B1512F0FFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   508 00001440 48891513F0FFFF      <1>     mov qword [oldPipe], rdx
   509 00001447 66C70562ECFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   510                              <1> .redirInClear:
   511                              <1> ;Check redir in
   512 00001450 F6055DECFFFFFF      <1>     test byte [redirIn], -1
   513 00001457 7433                <1>     jz .redirOutClear
   514                              <1> 
   515 00001459 0FB71D56ECFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   516 00001460 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   517 00001462 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   518 00001467 CD21                <1>     int 21h
   519 00001469 0F82EBFDFFFF        <1>     jc redirFailure
   520 0000146F B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   521 00001474 CD21                <1>     int 21h
   522 00001476 0F82DEFDFFFF        <1>     jc redirFailure
   523 0000147C 66C70531ECFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   524 00001485 C60528ECFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   525                              <1> .redirOutClear:
   526                              <1> ;Now check Redir Out
   527 0000148C F60522ECFFFFFF      <1>     test byte [redirOut], -1
   528                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001493 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001495 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   529                              <1> 
   530 00001496 0FB71D1BECFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   531 0000149D B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   532 000014A2 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   533 000014A7 CD21                <1>     int 21h
   534 000014A9 0F82ABFDFFFF        <1>     jc redirFailure
   535 000014AF B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   536 000014B4 CD21                <1>     int 21h
   537 000014B6 0F829EFDFFFF        <1>     jc redirFailure
   538 000014BC 66C705F3EBFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   539 000014C5 C605E9EBFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   540                              <1>     return
    13                              <2> %%_ret:
    14 000014CC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   541                              <1> 
   542                              <1> checkAndSetupRedir:
   543                              <1> ;Checks and sets up redir as appropriate
   544                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   545                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   546                              <1> ;Output: ZF=NZ => No redir
   547                              <1> ;        ZF=ZY => Redir
   548                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   549                              <1> ;CF=CY if pipe set or an embedded CR found. rsi points to first char past it!
   550 000014CD 57                  <1>     push rdi
   551 000014CE 3C3C                <1>     cmp al, "<"
   552 000014D0 740F                <1>     je .inputRedir
   553 000014D2 3C3E                <1>     cmp al, ">"
   554 000014D4 7473                <1>     je .outputRedir
   555 000014D6 3C7C                <1>     cmp al, "|"
   556 000014D8 0F841B010000        <1>     je .pipeSetup
   557 000014DE F8                  <1>     clc
   558                              <1> .redirExit:
   559 000014DF 5F                  <1>     pop rdi
   560                              <1>     return
    13                              <2> %%_ret:
    14 000014E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   561                              <1> .inputRedir:
   562 000014E1 C605CCEBFFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   563 000014E8 488D3D27EEFFFF      <1>     lea rdi, rdrInFilespec
   564 000014EF E8BF190000          <1>     call skipDelimiters ;Skip spaces between < and the filespec
   565 000014F4 E8F11A0000          <1>     call cpDelimPathToBufz
   566 000014F9 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char as 
   567                              <1>     ;Setup the redir here for STDIN
   568 000014FC 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   569 000014FE B800450000          <1>     mov eax, 4500h
   570 00001503 CD21                <1>     int 21h
   571 00001505 0F827A010000        <1>     jc .redirError
   572 0000150B 668905A4EBFFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   573 00001512 488D15FDEDFFFF      <1>     lea rdx, rdrInFilespec
   574 00001519 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   575 0000151E CD21                <1>     int 21h
   576 00001520 0F825F010000        <1>     jc .redirError
   577 00001526 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   578 00001528 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   579 0000152B B800460000          <1>     mov eax, 4600h
   580 00001530 CD21                <1>     int 21h
   581 00001532 0F824D010000        <1>     jc .redirError
   582 00001538 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   583 0000153D CD21                <1>     int 21h
   584 0000153F 0F8240010000        <1>     jc .redirError
   585 00001545 30C0                <1>     xor al, al
   586 00001547 EB96                <1>     jmp short .redirExit
   587                              <1> .outputRedir:
   588 00001549 C60565EBFFFF01      <1>     mov byte [redirOut], 1
   589 00001550 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   590 00001553 7509                <1>     jne .notDouble
   591 00001555 FE055AEBFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   592 0000155B 48FFC6              <1>     inc rsi ;Go past it too
   593                              <1> .notDouble:
   594 0000155E 488D3D00EEFFFF      <1>     lea rdi, rdrOutFilespec
   595 00001565 E849190000          <1>     call skipDelimiters
   596 0000156A E87B1A0000          <1>     call cpDelimPathToBufz
   597 0000156F 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char as 
   598                              <1>     ;Setup the redir here for STDOUT
   599 00001572 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   600 00001577 B800450000          <1>     mov eax, 4500h
   601 0000157C CD21                <1>     int 21h
   602 0000157E 0F8201010000        <1>     jc .redirError
   603 00001584 6689052DEBFFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   604 0000158B 488D15D3EDFFFF      <1>     lea rdx, rdrOutFilespec
   605 00001592 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   606 00001597 CD21                <1>     int 21h
   607 00001599 730F                <1>     jnc .fileExists
   608 0000159B B8003C0000          <1>     mov eax, 3C00h
   609 000015A0 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   610 000015A2 CD21                <1>     int 21h
   611 000015A4 0F82DB000000        <1>     jc .redirError
   612                              <1> .fileExists:
   613 000015AA B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   614 000015AF 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   615 000015B2 B800460000          <1>     mov eax, 4600h  ;DUP2
   616 000015B7 CD21                <1>     int 21h
   617 000015B9 0F82C6000000        <1>     jc .redirError
   618 000015BF B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   619 000015C4 CD21                <1>     int 21h
   620 000015C6 0F82B9000000        <1>     jc .redirError
   621 000015CC 803DE2EAFFFF01      <1>     cmp byte [redirOut], 1
   622 000015D3 7416                <1>     je .dontAppend
   623                              <1>     ;Here we move the file pointer to the end of the file
   624 000015D5 31D2                <1>     xor edx, edx    ;Low order 32 bits
   625 000015D7 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   626 000015D9 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   627 000015DE B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   628 000015E3 CD21                <1>     int 21h
   629 000015E5 0F829A000000        <1>     jc .redirError
   630                              <1> .dontAppend:
   631 000015EB C605C3EAFFFFFF      <1>     mov byte [redirOut], -1
   632 000015F2 30C0                <1>     xor al, al
   633 000015F4 E9E6FEFFFF          <1>     jmp .redirExit
   634                              <1> .pipeSetup:
   635                              <1> ;We only need to setup STDOUT redirection to the pipe file
   636 000015F9 56                  <1>     push rsi    ;Save rsi pointing to char past |
   637 000015FA E8B4180000          <1>     call skipDelimiters ;Check if this is a double ||
   638 000015FF 803E7C              <1>     cmp byte [rsi], "|" 
   639 00001602 5E                  <1>     pop rsi
   640 00001603 7475                <1>     je .pipeError
   641 00001605 488D15A8EDFFFF      <1>     lea rdx, pipe1Filespec
   642 0000160C 803A00              <1>     cmp byte [rdx], 0
   643 0000160F 740C                <1>     jz .pathFound
   644 00001611 488D15EBEDFFFF      <1>     lea rdx, pipe2Filespec
   645 00001618 803A00              <1>     cmp byte [rdx], 0
   646 0000161B 755D                <1>     jnz .pipeError
   647                              <1> .pathFound:
   648 0000161D 4889152EEEFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   649 00001624 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   650 00001629 BB01000000          <1>     mov ebx, 1
   651 0000162E CD21                <1>     int 21h
   652 00001630 7248                <1>     jc .pipeError
   653 00001632 66890579EAFFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   654 00001639 E843180000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   655 0000163E 0441                <1>     add al, "A"
   656 00001640 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   657 00001645 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   658 00001647 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   659 00001649 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   660 0000164B B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   661 00001650 CD21                <1>     int 21h
   662 00001652 7226                <1>     jc .pipeError
   663                              <1>     ;AX has the handle for this file now, this will become STDOUT
   664                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   665 00001654 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   666 00001657 B901000000          <1>     mov ecx, 1
   667 0000165C B800460000          <1>     mov eax, 4600h
   668 00001661 CD21                <1>     int 21h
   669 00001663 7215                <1>     jc .pipeError
   670 00001665 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   671 0000166A CD21                <1>     int 21h
   672 0000166C 720C                <1>     jc .pipeError
   673 0000166E C6053AEAFFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   674 00001675 30C0                <1>     xor al, al  ;Set ZF
   675 00001677 F9                  <1>     stc         ;But also CF to indicate pipe!
   676 00001678 5F                  <1>     pop rdi
   677                              <1>     return
    13                              <2> %%_ret:
    14 00001679 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   678                              <1> .pipeError:
   679 0000167A 5F                  <1>     pop rdi 
   680 0000167B E8E8FBFFFF          <1>     call pipeFailure
   681 00001680 E92FF8FFFF          <1>     jmp commandMain ;Fully reset the state if a pipe failure occurs.
   682                              <1> .redirError:
   683 00001685 5F                  <1>     pop rdi 
   684 00001686 E8CFFBFFFF          <1>     call redirFailure
   685 0000168B E924F8FFFF          <1>     jmp commandMain ;Fully reset the state if a redir failure occurs.
   686                              <1> 
   687                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   688                              <1> ;Input: rsi points to the count byte of a command line
   689 00001690 4150                <1>     push r8
   690 00001692 4151                <1>     push r9
   691 00001694 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   692 00001696 CD21                <1>     int 21h
   693 00001698 52                  <1>     push rdx    ;Save on the stack
   694 00001699 488D1D60E8FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   695 000016A0 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   696 000016A2 CD21                <1>     int 21h
   697 000016A4 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   698 000016A7 4989D9              <1>     mov r9, rbx
   699 000016AA 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   700 000016B1 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   701 000016B6 F348A5              <1>     rep movsq   ;Copy command line over
   702                              <1>     ;call doCommandLine
   703 000016B9 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   704 000016BA B450                <1>     mov ah, 50h ;Set Current PSP
   705 000016BC CD21                <1>     int 21h
   706 000016BE 4159                <1>     pop r9
   707 000016C0 4158                <1>     pop r8
   708 000016C2 48CF                <1>     iretq
    16                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> noSelfCopyError:
     7 000016C4 488D1535F2FFFF      <1>     lea rdx, noSelfCopy
     8 000016CB EB3D                <1>     jmp short badCmn
     9                              <1> badParamError:
    10 000016CD 488D15EAF2FFFF      <1>     lea rdx, badParm
    11 000016D4 EB34                <1>     jmp short badCmn
    12                              <1> badDriveError:
    13 000016D6 488D15A4F2FFFF      <1>     lea rdx, badDrv
    14 000016DD EB2B                <1>     jmp short badCmn
    15                              <1> badArgError:
    16 000016DF 488D1576F5FFFF      <1>     lea rdx, badArgs
    17 000016E6 EB22                <1>     jmp short badCmn
    18                              <1> badFileError:
    19 000016E8 488D1551F5FFFF      <1>     lea rdx, badSpec
    20 000016EF EB19                <1>     jmp short badCmn
    21                              <1> badDupFnf:
    22                              <1> ;Hybrid error message
    23 000016F1 488D1595F1FFFF      <1>     lea rdx, dupName
    24 000016F8 EB10                <1>     jmp short badCmn
    25                              <1> badFnf:
    26 000016FA 488D15A3F1FFFF      <1>     lea rdx, fnfMsg
    27 00001701 EB07                <1>     jmp short badCmn
    28                              <1> badDirError:
    29 00001703 488D15B5F3FFFF      <1>     lea rdx, badDir
    30                              <1> badCmn:
    31 0000170A B800090000          <1>     mov eax, 0900h
    32 0000170F CD21                <1>     int 21h
    33 00001711 F9                  <1>     stc ;Return with CY => Error occured
    34 00001712 C605F4E8FFFFFF      <1>     mov byte [returnCode], -1    ;Return code defaults to -1 if error (for now!)
    35                              <1>     return  ;This will be made nuanced later, to agree with DOS behaviour
    13                              <2> %%_ret:
    14 00001719 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    36                              <1> 
    37                              <1> dir:
    38                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    39 0000171A C605C3EDFFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    40 00001721 C605BDEDFFFF00      <1>     mov byte [dirLineCtr], 0
    41 00001728 C605B7EDFFFF00      <1>     mov byte [dirFileCtr], 0
    42 0000172F C605B2EDFFFF00      <1>     mov byte [dirSrchDir], 0
    43 00001736 66C70523EDFFFF0000  <1>     mov word [searchSpec], 0
    44 0000173F 488D3D24EEFFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    45 00001746 C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    46 00001749 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    46 00001752 3F                  <1>
    47 00001753 48894701            <1>     mov qword [rdi + fcb.filename], rax
    48 00001757 C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    49                              <1>     ;Start by scanning for the switches
    50 0000175E 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    51 00001765 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    52 00001768 E846170000          <1>     call skipDelimiters ;Skip leading delimiters
    53 0000176D 4881C603000000      <1>     add rsi, 3  ;Go past the DIR
    54                              <1> .scanNew:
    55 00001774 E83A170000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    56 00001779 AC                  <1>     lodsb   ;Get this char
    57 0000177A 3C0D                <1>     cmp al, CR
    58 0000177C 744D                <1>     je .scanDone
    59 0000177E 3A05A8E8FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    60 00001784 7524                <1>     jne .notSwitch
    61 00001786 AC                  <1>     lodsb   ;Get the next char
    62 00001787 E815170000          <1>     call ucChar
    63 0000178C 3C57                <1>     cmp al, "W"
    64 0000178E 7509                <1>     jne .notWide
    65 00001790 800D4DEDFFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    66 00001797 EBDB                <1>     jmp short .scanNew
    67                              <1> .notWide:
    68 00001799 3C50                <1>     cmp al, "P"
    69 0000179B 0F852CFFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    70 000017A1 800D3CEDFFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    71 000017A8 EBCA                <1>     jmp short .scanNew
    72                              <1> .notSwitch:
    73 000017AA F60533EDFFFF04      <1>     test byte [dirFlags], dirFileType
    74 000017B1 0F8516FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    75                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    76 000017B7 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    77 000017BA E883180000          <1>     call copyArgumentToSearchSpec   
    78 000017BF 48FFCE              <1>     dec rsi ;Point back to the terminator char
    79 000017C2 800D1BEDFFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    80 000017C9 EBA9                <1>     jmp short .scanNew
    81                              <1> .scanDone:
    82 000017CB F60512EDFFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    83 000017D2 7438                <1>     jz .currentDrv
    84                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
    85 000017D4 488D3587ECFFFF      <1>     lea rsi, searchSpec
    86 000017DB 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
    87 000017DF 752B                <1>     jne .currentDrv
    88                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
    89 000017E1 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
    90 000017E6 498D785C            <1>     lea rdi, qword [r8 + fcb1]
    91 000017EA B801290000          <1>     mov eax, 2901h   ;Parse filename
    92 000017EF CD21                <1>     int 21h
    93 000017F1 3CFF                <1>     cmp al, -1
    94 000017F3 0F84DDFEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
    95                              <1>     ;Else the drive in the fcb is valid
    96 000017F9 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
    97 000017FE 84C0                <1>     test al, al
    98 00001800 740A                <1>     jz .currentDrv
    99 00001802 FEC8                <1>     dec al  ;Convert to 0 based drive number
   100 00001804 8805DDECFFFF        <1>     mov byte [dirDrv], al
   101 0000180A EB0B                <1>     jmp short .dirPrintVol
   102                              <1> .currentDrv:
   103 0000180C E870160000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   104 00001811 8805D0ECFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   105                              <1> .dirPrintVol:
   106 00001817 488D3544ECFFFF      <1>     lea rsi, searchSpec
   107                              <1> ;Now construct the path on dirSrchDir.
   108 0000181E 488D3DC3ECFFFF      <1>     lea rdi, dirSrchDir
   109 00001825 0FB605BBECFFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   110 0000182C 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   111 0000182E 0441                <1>     add al, "A" ;Turn into a letter
   112 00001830 B43A                <1>     mov ah, ":"
   113 00001832 66AB                <1>     stosw   ;Store X: into the search path
   114 00001834 B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   115 00001839 CD2F                <1>     int 2fh
   116 0000183B 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   117 0000183D 0F8493FEFFFF        <1>     je badDriveError
   118                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   119 00001843 8A05E2E7FFFF        <1>     mov al, byte [pathSep]
   120 00001849 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   121 0000184B 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   122 0000184D AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   123 0000184E FEC2                <1>     inc dl  ;Increment by 1
   124 00001850 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   125 00001853 B800470000          <1>     mov eax, 4700h  ;Print current working directory
   126 00001858 CD21                <1>     int 21h
   127 0000185A 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   128                              <1>     ;rsi points to the first char in the provided path.
   129                              <1>     ;rdi points to the first char of the cwd.
   130 0000185D 31C0                <1>     xor eax, eax
   131                              <1> .goToEndOfCwd:
   132                              <1> ;Move to the end of the string, could use repne?
   133 0000185F 3807                <1>     cmp byte [rdi], al
   134 00001861 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   135 00001863 48FFC7              <1>     inc rdi
   136 00001866 EBF7                <1>     jmp short .goToEndOfCwd
   137                              <1> .prepCopy:
   138 00001868 8A05BDE7FFFF        <1>     mov al, byte [pathSep]
   139 0000186E 3806                <1>     cmp byte [rsi], al
   140 00001870 7412                <1>     je .copyPathLoop
   141 00001872 B43A                <1>     mov ah, ":"
   142 00001874 86C4                <1>     xchg al, ah
   143 00001876 663947FE            <1>     cmp word [rdi - 2], ax
   144 0000187A 7408                <1>     je .copyPathLoop
   145 0000187C 88E0                <1>     mov al, ah
   146 0000187E 3847FF              <1>     cmp byte [rdi - 1], al
   147 00001881 7401                <1>     je .copyPathLoop
   148 00001883 AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   149                              <1> .copyPathLoop:
   150 00001884 AC                  <1>     lodsb
   151 00001885 3A05A0E7FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   152 0000188B 7509                <1>     jne .checkDot  ;If not, store it
   153                              <1> .lpPathseps:
   154 0000188D 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   155 0000188F 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   156 00001891 48FFC6              <1>     inc rsi
   157 00001894 EBF7                <1>     jmp short .lpPathseps
   158                              <1> .checkDot:
   159 00001896 3C2E                <1>     cmp al, "."
   160 00001898 7407                <1>     je .dots
   161                              <1> .store:
   162 0000189A AA                  <1>     stosb
   163 0000189B 84C0                <1>     test al, al ;Was the char we just copied a null?
   164 0000189D 7472                <1>     jz .exitPathCopy
   165 0000189F EBE3                <1>     jmp short .copyPathLoop
   166                              <1> .dots:
   167                              <1>     ;Here handle dot and dot dot
   168                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   169                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   170                              <1>     ; by 1. If it is null, go to top of loop.
   171                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   172 000018A1 8A2584E7FFFF        <1>     mov ah, byte [pathSep]
   173 000018A7 3867FF              <1>     cmp byte [rdi - 1], ah  
   174 000018AA 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   175 000018AC 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   176 000018AE 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   177 000018B1 7413                <1>     je .twoDot
   178                              <1>     ;This is only a "current dir" when next char is pathsep or null
   179 000018B3 3A2572E7FFFF        <1>     cmp ah, byte [pathSep]
   180 000018B9 7406                <1>     je .skipThisPathsep
   181 000018BB 84E4                <1>     test ah, ah
   182 000018BD 74C5                <1>     jz .copyPathLoop
   183 000018BF EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   184                              <1> .skipThisPathsep:
   185                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   186 000018C1 48FFC6              <1>     inc rsi ;Point to the pathsep
   187 000018C4 EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   188                              <1> .twoDot:
   189                              <1>     ;Woohoo, this works!
   190 000018C6 48FFC6              <1>     inc rsi ;Move past the second dot
   191 000018C9 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   192 000018CB 3A255AE7FFFF        <1>     cmp ah, byte [pathSep]
   193 000018D1 7408                <1>     je .tdOk
   194 000018D3 84E4                <1>     test ah, ah
   195 000018D5 0F85F2FDFFFF        <1>     jne badParamError
   196                              <1> .tdOk:
   197 000018DB 8A054AE7FFFF        <1>     mov al, byte byte [pathSep]
   198 000018E1 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   199 000018E5 0F84E2FDFFFF        <1>     je badParamError
   200 000018EB 4881EF02000000      <1>     sub rdi, 2
   201 000018F2 31C9                <1>     xor ecx, ecx
   202 000018F4 FFC9                <1>     dec ecx
   203 000018F6 FD                  <1>     std
   204 000018F7 F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   205 000018F9 FC                  <1>     cld
   206 000018FA 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   207 00001901 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   208 00001903 0F847BFFFFFF        <1>     jz .copyPathLoop
   209 00001909 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   210 0000190C E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   211                              <1> .exitPathCopy:
   212                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   213 00001911 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   214 00001918 8A050DE7FFFF        <1>     mov al, byte [pathSep]
   215 0000191E B43A                <1>     mov ah, ":"
   216 00001920 86C4                <1>     xchg al, ah
   217 00001922 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   218 00001926 7409                <1>     je .skipOverwrite
   219 00001928 88E0                <1>     mov al, ah
   220 0000192A 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   221 0000192C 7503                <1>     jne .skipOverwrite
   222 0000192E C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   223                              <1> .skipOverwrite:
   224 00001931 488D35B0EBFFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   225 00001938 4889F7              <1>     mov rdi, rsi
   226 0000193B B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   227 00001940 CD2F                <1>     int 2fh
   228 00001942 E811170000          <1>     call scanForWildcards
   229 00001947 742F                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   230 00001949 4889F2              <1>     mov rdx, rsi
   231 0000194C 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   232 00001950 7426                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   233                              <1> .notNull:
   234 00001952 E8C8170000          <1>     call setDTA ;Set the DTA
   235 00001957 B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   236 0000195C B44E                <1>     mov ah, 4Eh ;Find first
   237 0000195E CD21                <1>     int 21h
   238 00001960 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   239                              <1> ;Now we have searched for the file, is a directory?
   240 00001962 F6057CE7FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   241 00001969 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   242                              <1>     ;Here we are searching IN a directory. Default search pattern!
   243 0000196B 31C0                <1>     xor eax, eax
   244 0000196D 31C9                <1>     xor ecx, ecx
   245 0000196F FFC9                <1>     dec ecx
   246 00001971 F2AE                <1>     repne scasb
   247 00001973 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   248 00001976 EB40                <1>     jmp short .wcDefaultSearch
   249                              <1> .wcSearchPattern:
   250                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   251                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   252 00001978 31C0                <1>     xor eax, eax
   253 0000197A 31C9                <1>     xor ecx, ecx
   254 0000197C FFC9                <1>     dec ecx
   255 0000197E F2AE                <1>     repne scasb ;Scan forwards
   256                              <1>     ;Here rdi points past the null at the end
   257 00001980 8A05A5E6FFFF        <1>     mov al, byte [pathSep]
   258 00001986 31C9                <1>     xor ecx, ecx
   259 00001988 FFC9                <1>     dec ecx
   260 0000198A FD                  <1>     std ;Search backwards
   261 0000198B F2AE                <1>     repne scasb
   262 0000198D FC                  <1>     cld ;Search forwards again
   263 0000198E 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   264 00001991 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   265 00001995 7503                <1>     jne .wcsp1
   266 00001997 48FFC7              <1>     inc rdi ;Go one char forwards
   267                              <1> .wcsp1:
   268                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   269 0000199A 57                  <1>     push rdi
   270 0000199B 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   271 0000199D 7503                <1>     jne .wcsp2
   272 0000199F 48FFC7              <1>     inc rdi
   273                              <1> .wcsp2:
   274 000019A2 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   275 000019A5 488D3DBEEBFFFF      <1>     lea rdi, dirSrchFCB
   276 000019AC B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   277 000019B1 CD21                <1>     int 21h
   278 000019B3 5F                  <1>     pop rdi
   279 000019B4 31C0                <1>     xor eax, eax
   280 000019B6 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   281                              <1> .wcDefaultSearch:
   282 000019B8 0FB60528EBFFFF      <1>     movzx eax, byte [dirDrv] 
   283 000019BF E8850D0000          <1>     call volume.dirEP
   284 000019C4 488D155CF1FFFF      <1>     lea rdx, dirMain    ;Print message intro
   285 000019CB B409                <1>     mov ah, 09h
   286 000019CD CD21                <1>     int 21h
   287 000019CF C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   288 000019D2 488D150FEBFFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   289 000019D9 B409                <1>     mov ah, 09h
   290 000019DB CD21                <1>     int 21h
   291 000019DD C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   292 000019E0 488D1531EEFFFF      <1>     lea rdx, crlf2
   293 000019E7 B409                <1>     mov ah, 09h
   294 000019E9 CD21                <1>     int 21h
   295                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   296                              <1> ;rdi points to the terminating null
   297 000019EB 8A053AE6FFFF        <1>     mov al, byte [pathSep]
   298 000019F1 3847FF              <1>     cmp byte [rdi - 1], al
   299 000019F4 7403                <1>     je .root
   300 000019F6 48FFC7              <1>     inc rdi
   301                              <1> .root:
   302 000019F9 48FFCF              <1>     dec rdi ;Point back to the pathsep
   303 000019FC AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   304 000019FD 488D3567EBFFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   305 00001A04 E8A1150000          <1>     call FCBToAsciiz    ;Terminates for free
   306 00001A09 E801000000          <1>     call .searchForFile
   307                              <1>     return
    13                              <2> %%_ret:
    14 00001A0E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   308                              <1> 
   309                              <1> .searchForFile:
   310 00001A0F E80B170000          <1>     call setDTA
   311 00001A14 B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   312 00001A19 488D15C8EAFFFF      <1>     lea rdx, dirSrchDir
   313 00001A20 B44E                <1>     mov ah, 4Eh ;Find first
   314 00001A22 CD21                <1>     int 21h
   315 00001A24 720B                <1>     jc .dirNoMoreFiles
   316                              <1> .findNext:
   317 00001A26 E878000000          <1>     call .dirPrintFileData  ;Print the file information
   318 00001A2B B44F                <1>     mov ah, 4Fh
   319 00001A2D CD21                <1>     int 21h
   320 00001A2F 73F5                <1>     jnc .findNext 
   321                              <1> .dirNoMoreFiles:
   322 00001A31 F605ACEAFFFF01      <1>     test byte [dirFlags], dirWideType
   323 00001A38 740B                <1>     jz .dirNoEndNewLine
   324 00001A3A 488D15D4EDFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   325 00001A41 B409                <1>     mov ah, 09h
   326 00001A43 CD21                <1>     int 21h
   327                              <1> .dirNoEndNewLine:
   328                              <1>     ;Now we print the number of files and the number of bytes on the disk
   329 00001A45 488D15B4F3FFFF      <1>     lea rdx, fourSpc
   330 00001A4C B409                <1>     mov ah, 09h
   331 00001A4E CD21                <1>     int 21h
   332 00001A50 B409                <1>     mov ah, 09h ;Print four Spaces twice
   333 00001A52 CD21                <1>     int 21h
   334 00001A54 0FB6058BEAFFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   335 00001A5B E80C160000          <1>     call printDecimalWord
   336 00001A60 488D15F9EEFFFF      <1>     lea rdx, dirOk
   337 00001A67 B409                <1>     mov ah, 09h
   338 00001A69 CD21                <1>     int 21h
   339 00001A6B 488D1593F3FFFF      <1>     lea rdx, threeSpc
   340 00001A72 B409                <1>     mov ah, 09h
   341 00001A74 CD21                <1>     int 21h
   342 00001A76 B800360000          <1>     mov eax, 3600h ;Get disk info
   343 00001A7B 8A1566EAFFFF        <1>     mov dl, byte [dirDrv]
   344 00001A81 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   345 00001A83 CD21                <1>     int 21h ;Get disk free space info
   346 00001A85 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   347 00001A88 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   348 00001A8B 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   349 00001A8D F7E1                <1>     mul ecx ;Get bytes per cluster
   350 00001A8F 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   351                              <1>     ;rax now has the number of free bytes on the disk
   352 00001A92 E8D5150000          <1>     call printDecimalWord
   353 00001A97 488D15CCEEFFFF      <1>     lea rdx, bytesOk
   354 00001A9E B409                <1>     mov ah, 09h
   355 00001AA0 CD21                <1>     int 21h
   356                              <1>     return
    13                              <2> %%_ret:
    14 00001AA2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   357                              <1> 
   358                              <1> .dirPrintFileData:
   359                              <1> ;Use fcbCmdSpec to build the file name with space
   360                              <1> ;Start by print the name (same for both cases)
   361                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   362 00001AA3 F6053BE6FFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   363                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001AAA 75(A2)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   364 00001AAC 488D353BE6FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   365 00001AB3 488D3D36E8FFFF      <1>     lea rdi, fcbCmdSpec
   366 00001ABA E87D140000          <1>     call asciiFilenameToFCB
   367 00001ABF 488D152AE8FFFF      <1>     lea rdx, fcbCmdSpec
   368 00001AC6 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   369 00001ACB BB01000000          <1>     mov ebx, 1  ;STDOUT
   370 00001AD0 B440                <1>     mov ah, 40h ;Write handle
   371 00001AD2 CD21                <1>     int 21h
   372 00001AD4 52                  <1>     push rdx
   373 00001AD5 B220                <1>     mov dl, " "
   374 00001AD7 B402                <1>     mov ah, 02h ;Print char
   375 00001AD9 CD21                <1>     int 21h
   376 00001ADB 5A                  <1>     pop rdx
   377 00001ADC 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   378 00001AE3 B903000000          <1>     mov ecx, 3  ;Print three chars
   379 00001AE8 BB01000000          <1>     mov ebx, 1  ;STDOUT
   380 00001AED B440                <1>     mov ah, 40h ;Write handle
   381 00001AEF CD21                <1>     int 21h
   382 00001AF1 F605ECE9FFFF01      <1>     test byte [dirFlags], dirWideType
   383 00001AF8 0F85A8000000        <1>     jnz .widePrint
   384                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   385                              <1>     ;Now check if a DIR
   386 00001AFE F605E0E5FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   387 00001B05 7418                <1>     jz .dirPrintNotDir
   388 00001B07 488D156AEEFFFF      <1>     lea rdx, dirLbl
   389 00001B0E B409                <1>     mov ah, 09h
   390 00001B10 CD21                <1>     int 21h
   391 00001B12 488D15ECF2FFFF      <1>     lea rdx, threeSpc
   392 00001B19 B409                <1>     mov ah, 09h
   393 00001B1B CD21                <1>     int 21h
   394 00001B1D EB4F                <1>     jmp short .dirPrintFileDT
   395                              <1> .dirPrintNotDir:
   396                              <1> ;Here we print the file size
   397 00001B1F B220                <1>     mov dl, " "
   398 00001B21 B402                <1>     mov ah, 02h
   399 00001B23 CD21                <1>     int 21h
   400 00001B25 8B05BFE5FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   401 00001B2B E8AD150000          <1>     call getDecimalWord
   402 00001B30 4889CB              <1>     mov rbx, rcx
   403 00001B33 51                  <1>     push rcx
   404 00001B34 480FCB              <1>     bswap rbx
   405 00001B37 B908000000          <1>     mov ecx, 8
   406                              <1> .dirPrintFileSizePrep:
   407 00001B3C 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   408 00001B3E 7514                <1>     jne .dirPrintFileSize
   409 00001B40 B402                <1>     mov ah, 02h
   410 00001B42 B220                <1>     mov dl, " "
   411 00001B44 CD21                <1>     int 21h
   412 00001B46 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   413 00001B4A FFC9                <1>     dec ecx
   414 00001B4C 81F901000000        <1>     cmp ecx, 1
   415 00001B52 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   416                              <1> .dirPrintFileSize:
   417 00001B54 5B                  <1>     pop rbx
   418                              <1> .dirPrintFileSizeLoop:
   419 00001B55 88DA                <1>     mov dl, bl
   420 00001B57 B402                <1>     mov ah, 02h
   421 00001B59 CD21                <1>     int 21h
   422 00001B5B 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   423 00001B5F FFC9                <1>     dec ecx
   424 00001B61 75F2                <1>     jnz .dirPrintFileSizeLoop
   425 00001B63 488D159FF2FFFF      <1>     lea rdx, twoSpc
   426 00001B6A B409                <1>     mov ah, 09h
   427 00001B6C CD21                <1>     int 21h
   428                              <1> .dirPrintFileDT:
   429 00001B6E B220                <1>     mov dl, " "
   430 00001B70 B402                <1>     mov ah, 02h
   431 00001B72 CD21                <1>     int 21h
   432 00001B74 0FB7056DE5FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   433 00001B7B 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   434 00001B7D E838100000          <1>     call printDate
   435 00001B82 488D1580F2FFFF      <1>     lea rdx, twoSpc
   436 00001B89 B409                <1>     mov ah, 09h
   437 00001B8B CD21                <1>     int 21h
   438 00001B8D 0FB70552E5FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   439 00001B94 E843110000          <1>     call printTime
   440 00001B99 488D1575ECFFFF      <1>     lea rdx, crlf
   441 00001BA0 B409                <1>     mov ah, 09h
   442 00001BA2 CD21                <1>     int 21h
   443 00001BA4 EB0B                <1>     jmp short .dirPrintNameExit
   444                              <1> .widePrint:
   445                              <1> ;If /W, print name space ext space space space space
   446 00001BA6 488D1553F2FFFF      <1>     lea rdx, fourSpc
   447 00001BAD B409                <1>     mov ah, 09h ;Print string
   448 00001BAF CD21                <1>     int 21h
   449                              <1> .dirPrintNameExit:
   450 00001BB1 FE052FE9FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   451 00001BB7 FE0528E9FFFF        <1>     inc byte [dirLineCtr]
   452 00001BBD 803D21E9FFFF17      <1>     cmp byte [dirLineCtr], 23
   453                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001BC4 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001BC6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   454 00001BC7 488D15D1EDFFFF      <1>     lea rdx, pauseMes
   455 00001BCE B409                <1>     mov ah, 09h
   456 00001BD0 CD21                <1>     int 21h
   457 00001BD2 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   458 00001BD4 CD21                <1>     int 21h
   459 00001BD6 C60508E9FFFF00      <1>     mov byte [dirLineCtr], 0
   460 00001BDD 488D1531ECFFFF      <1>     lea rdx, crlf   ;Force new line
   461 00001BE4 B409                <1>     mov ah, 09h
   462 00001BE6 CD21                <1>     int 21h
   463                              <1>     return
    13                              <2> %%_ret:
    14 00001BE8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   464                              <1> 
   465                              <1> chdir:
   466 00001BE9 F605CAE4FFFFFF      <1>     test byte [arg1Flg], -1
   467 00001BF0 754D                <1>     jnz .changeDir
   468                              <1>     ;Print CWD
   469                              <1> .printCWD:
   470 00001BF2 E8C7110000          <1>     call putCWDInPrompt ;Exactly the same procedure
   471 00001BF7 E8AF0F0000          <1>     call printCRLF
   472                              <1>     return
    13                              <2> %%_ret:
    14 00001BFC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   473                              <1> .printDiskCWD:
   474                              <1> ;Print CWD for a specified drive
   475 00001BFD 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   476 00001C01 88D0                <1>     mov al, dl
   477 00001C03 0440                <1>     add al, "@" ;Get the UC letter
   478 00001C05 B43A                <1>     mov ah, ":"
   479 00001C07 488D3D54E8FFFF      <1>     lea rdi, searchSpec
   480 00001C0E 66AB                <1>     stosw   ;Store X:, rdi+=2
   481 00001C10 8A0515E4FFFF        <1>     mov al, byte [pathSep]
   482 00001C16 AA                  <1>     stosb   ;Store pathSep, inc rdi
   483 00001C17 B447                <1>     mov ah, 47h ;Get Current Working Directory
   484 00001C19 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   485 00001C1C CD21                <1>     int 21h
   486 00001C1E E876120000          <1>     call strlen
   487 00001C23 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   488 00001C29 B440                <1>     mov ah, 40h ;Write to handle
   489 00001C2B BB01000000          <1>     mov ebx, 1  ;STDOUT
   490 00001C30 488D152BE8FFFF      <1>     lea rdx, searchSpec
   491 00001C37 CD21                <1>     int 21h
   492 00001C39 E86D0F0000          <1>     call printCRLF
   493                              <1>     return
    13                              <2> %%_ret:
    14 00001C3E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   494                              <1> .changeDir:
   495 00001C3F 8A0577E4FFFF        <1>     mov al, byte [arg1FCBret]
   496 00001C45 3CFF                <1>     cmp al, -1 
   497 00001C47 0F8489FAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   498 00001C4D E8D8130000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   499 00001C52 488D1509E8FFFF      <1>     lea rdx, searchSpec
   500 00001C59 B43B                <1>     mov ah, 3Bh ;CHDIR
   501 00001C5B CD21                <1>     int 21h
   502 00001C5D 0F82A0FAFFFF        <1>     jc badDirError
   503                              <1>     return
    13                              <2> %%_ret:
    14 00001C63 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   504                              <1> 
   505                              <1> mkdir:
   506 00001C64 F6054FE4FFFFFF      <1>     test byte [arg1Flg], -1
   507 00001C6B 0F846EFAFFFF        <1>     jz badArgError
   508 00001C71 F60545E4FFFFFF      <1>     test byte [arg2Flg], -1
   509 00001C78 0F8561FAFFFF        <1>     jnz badArgError
   510                              <1>     ;We have exactly one argument
   511 00001C7E 8A0538E4FFFF        <1>     mov al, byte [arg1FCBret]
   512 00001C84 3CFF                <1>     cmp al, -1 
   513 00001C86 0F844AFAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   514 00001C8C E899130000          <1>     call buildCommandPath
   515 00001C91 488D15CAE7FFFF      <1>     lea rdx, searchSpec
   516 00001C98 B800390000          <1>     mov eax, 3900h  ;MKDIR
   517 00001C9D CD21                <1>     int 21h
   518                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001C9F 73(63)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   519                              <1> .badMake:   ;Else, bad make
   520 00001CA1 488D152BEEFFFF      <1>     lea rdx, badMD
   521 00001CA8 B800090000          <1>     mov eax, 0900h
   522 00001CAD CD21                <1>     int 21h
   523                              <1>     return
    13                              <2> %%_ret:
    14 00001CAF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> rmdir:
   526 00001CB0 F60503E4FFFFFF      <1>     test byte [arg1Flg], -1
   527 00001CB7 0F8422FAFFFF        <1>     jz badArgError
   528 00001CBD F605F9E3FFFFFF      <1>     test byte [arg2Flg], -1
   529 00001CC4 0F8515FAFFFF        <1>     jnz badArgError
   530                              <1>     ;We have exactly one argument
   531 00001CCA 8A05ECE3FFFF        <1>     mov al, byte [arg1FCBret]
   532 00001CD0 3CFF                <1>     cmp al, -1 
   533 00001CD2 0F84FEF9FFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   534 00001CD8 E84D130000          <1>     call buildCommandPath
   535 00001CDD 488D157EE7FFFF      <1>     lea rdx, searchSpec
   536 00001CE4 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   537 00001CE9 CD21                <1>     int 21h
   538                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001CEB 73(AF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   539                              <1> .badRemove:   ;Else, bad make
   540 00001CED 488D15FCEDFFFF      <1>     lea rdx, badRD
   541 00001CF4 B800090000          <1>     mov eax, 0900h
   542 00001CF9 CD21                <1>     int 21h
   543                              <1>     return
    13                              <2> %%_ret:
    14 00001CFB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   544                              <1> 
   545                              <1> copy:
   546 00001CFC F605B7E3FFFFFF      <1>     test byte [arg1Flg], -1
   547 00001D03 0F84D6F9FFFF        <1>     jz badArgError
   548 00001D09 F605ADE3FFFFFF      <1>     test byte [arg2Flg], -1
   549 00001D10 0F84C9F9FFFF        <1>     jz badArgError
   550 00001D16 0FB6059EE3FFFF      <1>     movzx eax, byte [arg1Off]
   551 00001D1D 4C8B05EBE2FFFF      <1>     mov r8, [pspPtr]
   552 00001D24 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   553 00001D2B 4889F3              <1>     mov rbx, rsi    ;Save the ptr to the start of the string in rbx
   554 00001D2E 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   555 00001D31 488D3D72E8FFFF      <1>     lea rdi, sourcePath
   556 00001D38 E8AD120000          <1>     call cpDelimPathToBufz    
   557 00001D3D 0FB6057AE3FFFF      <1>     movzx eax, byte [arg2Off]
   558 00001D44 4889DE              <1>     mov rsi, rbx    ;Get back the start of the ptr
   559 00001D47 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   560 00001D4A 488D3DDBE8FFFF      <1>     lea rdi, destPath
   561 00001D51 E894120000          <1>     call cpDelimPathToBufz   
   562                              <1> ;Before we open, we check if the two filenames are equal
   563                              <1> ; If so, crap out.
   564 00001D56 488D354DE8FFFF      <1>     lea rsi, sourcePath
   565 00001D5D 488D3DC8E8FFFF      <1>     lea rdi, destPath
   566 00001D64 B81E120000          <1>     mov eax, 121Eh
   567 00001D69 CD2F                <1>     int 2Fh
   568 00001D6B 0F84D3000000        <1>     jz .sameFilename
   569                              <1>     ;Open source with read permission
   570                              <1>     ;Open destination with write permission
   571 00001D71 488D1532E8FFFF      <1>     lea rdx, sourcePath
   572 00001D78 B8003D0000          <1>     mov eax, 3D00h  ;Read open
   573 00001D7D CD21                <1>     int 21h
   574 00001D7F 0F8248F9FFFF        <1>     jc badParamError
   575 00001D85 66890522E9FFFF      <1>     mov word [sourceHdl], ax
   576                              <1> 
   577 00001D8C 0FB7D8              <1>     movzx ebx, ax   ;For bx
   578 00001D8F B800440000          <1>     mov eax, 4400h  ;Get device info in dx
   579 00001D94 CD21                <1>     int 21h
   580 00001D96 66891515E9FFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
   581                              <1> 
   582 00001D9D 488D1588E8FFFF      <1>     lea rdx, destPath
   583 00001DA4 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   584 00001DA9 31C9                <1>     xor ecx, ecx    ;No file attributes
   585 00001DAB CD21                <1>     int 21h
   586 00001DAD 0F82B8000000        <1>     jc .badExit
   587 00001DB3 668905F6E8FFFF      <1>     mov word [destHdl], ax
   588 00001DBA 31F6                <1>     xor esi, esi
   589 00001DBC 488D15F1E8FFFF      <1>     lea rdx, copyBuffer
   590                              <1> .copyLoop:
   591 00001DC3 B980000000          <1>     mov ecx, 128
   592 00001DC8 0FB71DDFE8FFFF      <1>     movzx ebx, word [sourceHdl]
   593 00001DCF B43F                <1>     mov ah, 3Fh ;Read
   594 00001DD1 CD21                <1>     int 21h
   595 00001DD3 0F8292000000        <1>     jc .badExit
   596 00001DD9 85C0                <1>     test eax, eax
   597 00001DDB 743A                <1>     jz .okExit
   598 00001DDD 01C6                <1>     add esi, eax
   599 00001DDF 89C1                <1>     mov ecx, eax
   600 00001DE1 0FB71DC8E8FFFF      <1>     movzx ebx, word [destHdl]
   601 00001DE8 B440                <1>     mov ah, 40h ;Write
   602 00001DEA CD21                <1>     int 21h
   603 00001DEC 727D                <1>     jc .badExit
   604 00001DEE 3D80000000          <1>     cmp eax, 128    ;Did we read 128 chars?
   605 00001DF3 74CE                <1>     je .copyLoop
   606                              <1>     ;If not char dev, exit
   607 00001DF5 66F705B4E8FFFF8000  <1>     test word [srcHdlInfo], 80h ;Char dev bit set?
   608 00001DFE 7417                <1>     jz .okExit
   609                              <1>     ;Is handle in cooked or binary mode?
   610 00001E00 66F705A9E8FFFF2000  <1>     test word [srcHdlInfo], 20h
   611 00001E09 750C                <1>     jnz .okExit
   612                              <1>     ;Here the char dev must be in cooked mode. Check if the last char was ^Z
   613 00001E0B 09C0                <1>     or eax, eax ;Clear upper bits in eax
   614 00001E0D 488D7C02FF          <1>     lea rdi, qword [rdx + rax - 1]  ;Point to the last char in the buffer
   615 00001E12 803F1A              <1>     cmp byte [rdi], EOF ;Was this EOF?
   616 00001E15 75AC                <1>     jne .copyLoop   ;Jump if not
   617                              <1> .okExit:
   618 00001E17 E832000000          <1>     call .leaveCopyClose
   619 00001E1C 488D15F2E9FFFF      <1>     lea rdx, crlf
   620 00001E23 B409                <1>     mov ah, 09h
   621 00001E25 CD21                <1>     int 21h
   622 00001E27 488D15D2EFFFFF      <1>     lea rdx, fourSpc
   623 00001E2E B409                <1>     mov ah, 09h
   624 00001E30 CD21                <1>     int 21h
   625 00001E32 B402                <1>     mov ah, 02h
   626 00001E34 B231                <1>     mov dl, "1" ;1 File(s) copied
   627 00001E36 CD21                <1>     int 21h
   628 00001E38 488D150FEBFFFF      <1>     lea rdx, copyOk
   629 00001E3F B409                <1>     mov ah, 09h
   630 00001E41 CD21                <1>     int 21h
   631                              <1>     return
    13                              <2> %%_ret:
    14 00001E43 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   632                              <1> .sameFilename:
   633 00001E44 E805000000          <1>     call .leaveCopyClose ;Close the handles
   634 00001E49 E976F8FFFF          <1>     jmp noSelfCopyError
   635                              <1> .leaveCopyClose:
   636 00001E4E 668B1D59E8FFFF      <1>     mov bx, word [sourceHdl]
   637 00001E55 B8003E0000          <1>     mov eax, 3E00h
   638 00001E5A CD21                <1>     int 21h
   639 00001E5C 668B1D4DE8FFFF      <1>     mov bx, word [destHdl]
   640 00001E63 B8003E0000          <1>     mov eax, 3E00h
   641 00001E68 CD21                <1>     int 21h
   642                              <1>     return
    13                              <2> %%_ret:
    14 00001E6A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   643                              <1> .badExit:
   644                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   645 00001E6B 668B1D3CE8FFFF      <1>     mov bx, word [sourceHdl]
   646 00001E72 6681FBFFFF          <1>     cmp bx, -1
   647 00001E77 7407                <1>     je .skipSource
   648 00001E79 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   649 00001E7E CD21                <1>     int 21h
   650                              <1> .skipSource:
   651 00001E80 668B1D29E8FFFF      <1>     mov bx, word [destHdl]
   652 00001E87 6681FBFFFF          <1>     cmp bx, -1
   653 00001E8C 0F843BF8FFFF        <1>     je badParamError
   654 00001E92 B8003E0000          <1>     mov eax, 3E00h
   655 00001E97 CD21                <1>     int 21h
   656 00001E99 E92FF8FFFF          <1>     jmp badParamError
   657                              <1> 
   658                              <1> erase:
   659 00001E9E F60515E2FFFFFF      <1>     test byte [arg1Flg], -1
   660 00001EA5 0F8434F8FFFF        <1>     jz badArgError
   661 00001EAB E86F120000          <1>     call setDTA     ;Start by resetting the DTA
   662 00001EB0 E875110000          <1>     call buildCommandPath   ;Get the relative path to the file
   663                              <1> .dirLp:
   664 00001EB5 488D3DA6E5FFFF      <1>     lea rdi, searchSpec
   665 00001EBC E8C5100000          <1>     call findLastPathComponant
   666 00001EC1 4889FE              <1>     mov rsi, rdi    ;Save this as the source
   667 00001EC4 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
   668 00001EC8 B03F                <1>     mov al, "?"
   669                              <1>     ;Store question marks in the name field
   670 00001ECA 57                  <1>     push rdi
   671 00001ECB 48FFC7              <1>     inc rdi ;Goto the first char
   672 00001ECE B90B000000          <1>     mov ecx, 11
   673 00001ED3 F3AA                <1>     rep stosb
   674 00001ED5 5F                  <1>     pop rdi
   675 00001ED6 4889F2              <1>     mov rdx, rsi    ;Save the ptr
   676 00001ED9 B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
   677 00001EDE CD21                <1>     int 21h
   678 00001EE0 3C01                <1>     cmp al, 1
   679 00001EE2 0F859C000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
   680                              <1>     ;Else, we now copy back the search pattern over the last componant!
   681                              <1>     ;No dirs to handle in here
   682 00001EE8 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
   683 00001EEC 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
   684 00001EEF E8B6100000          <1>     call FCBToAsciiz    ;Null terminates for free
   685                              <1>     ;Count the number of ?'s, if 11, we print the message
   686 00001EF4 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
   687 00001EF8 31C9                <1>     xor ecx, ecx
   688                              <1> .wcScan:
   689 00001EFA AC                  <1>     lodsb
   690 00001EFB 3C3F                <1>     cmp al, "?"
   691 00001EFD 752F                <1>     jne .endCount
   692 00001EFF FFC1                <1>     inc ecx
   693 00001F01 81F90B000000        <1>     cmp ecx, 11
   694 00001F07 75F1                <1>     jne .wcScan
   695                              <1> .ynmsg:
   696 00001F09 488D1563EBFFFF      <1>     lea rdx, ynMes
   697 00001F10 E89D0C0000          <1>     call printString
   698 00001F15 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   699 00001F17 CD21                <1>     int 21h ;Get char in al
   700 00001F19 E8830F0000          <1>     call ucChar ;Uppercase the char
   701 00001F1E 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
   702 00001F20 7407                <1>     je .endCount1
   703 00001F22 3C4E                <1>     cmp al, "N"
   704                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001F24 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001F26 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   705 00001F27 EBE0                <1>     jmp short .ynmsg    ;Else, tell me what you want!!!
   706                              <1> .endCount1:
   707 00001F29 E87D0C0000          <1>     call printCRLF
   708                              <1> .endCount:
   709                              <1>     ;Now we copy our search template pathstring to delPath
   710 00001F2E 488D3D75E6FFFF      <1>     lea rdi, delPath
   711 00001F35 488D3526E5FFFF      <1>     lea rsi, searchSpec ;Source the chars from here
   712 00001F3C E8450F0000          <1>     call strcpy         ;Copy the string over to delPath
   713                              <1> .findFile:
   714                              <1>     ;Now we find first/find next our way through the files
   715 00001F41 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
   716 00001F44 31C9                <1>     xor ecx, ecx    ;Search for normal file only
   717 00001F46 B8004E0000          <1>     mov eax, 4E00h  ;Find first
   718 00001F4B CD21                <1>     int 21h
   719 00001F4D 0F82A7F7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   720                              <1>     ;Now the file was found, we copy the name over, delete and keep going
   721 00001F53 E82E100000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
   722 00001F58 488D358FE1FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   723                              <1> .delNextFile:
   724                              <1> ;rsi and rdi dont move here
   725 00001F5F E8220F0000          <1>     call strcpy     ;Now copy over ASCIIZname to last path componant of delpath
   726 00001F64 488D153FE6FFFF      <1>     lea rdx, delPath
   727 00001F6B E855000000          <1>     call .delMain   ;Delete delpath
   728                              <1>     retc            ;Return bad if it errors out
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001F70 72(26)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   729 00001F72 488D15E9E4FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
   730 00001F79 B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
   731 00001F7E CD21                <1>     int 21h
   732 00001F80 73DD                <1>     jnc .delNextFile    
   733 00001F82 F8                  <1>     clc ;Clear carry to indicate success
   734                              <1>     return
    13                              <2> %%_ret:
    14 00001F83 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   735                              <1> .noWildcard:
   736                              <1>     ;Here we just check that the file was not a directory. If it was, we add
   737                              <1>     ; a \*.*<NUL> over the null terminator
   738 00001F84 488D15D7E4FFFF      <1>     lea rdx, searchSpec
   739 00001F8B B910000000          <1>     mov ecx, dirDirectory    ;Search for normal file or DIR
   740 00001F90 B8004E0000          <1>     mov eax, 4E00h  ;Find first
   741 00001F95 CD21                <1>     int 21h
   742 00001F97 0F825DF7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   743 00001F9D F60541E1FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   744 00001FA4 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
   745                              <1>     ;Else, we are dealing with a dir
   746 00001FA6 4889D7              <1>     mov rdi, rdx
   747 00001FA9 31C9                <1>     xor ecx, ecx
   748 00001FAB FFC9                <1>     dec ecx
   749 00001FAD F2AE                <1>     repne scasb ;Go to the end of the line!
   750 00001FAF 48FFCF              <1>     dec rdi
   751 00001FB2 0FB60572E0FFFF      <1>     movzx eax, byte [pathSep]
   752 00001FB9 AA                  <1>     stosb
   753 00001FBA B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
   754 00001FBF AB                  <1>     stosd
   755 00001FC0 E9F0FEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
   756                              <1> .delMain:   ;Call with rdx -> buffer!
   757 00001FC5 B800410000          <1>     mov eax, 4100h  ;Delete File 
   758 00001FCA CD21                <1>     int 21h
   759 00001FCC 0F820DF7FFFF        <1>     jc badArgError
   760                              <1>     return
    13                              <2> %%_ret:
    14 00001FD2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   761                              <1> date:
   762 00001FD3 488D151CEAFFFF      <1>     lea rdx, curDate
   763 00001FDA B409                <1>     mov ah, 09h
   764 00001FDC CD21                <1>     int 21h
   765 00001FDE B42A                <1>     mov ah, 2Ah ;DOS get date
   766 00001FE0 CD21                <1>     int 21h
   767                              <1> 	;AL = day of the week (0=Sunday)
   768                              <1> 	;CX = year (1980-2099)
   769                              <1> 	;DH = month (1-12)
   770                              <1> 	;DL = day (1-31)
   771 00001FE2 66890DBDE5FFFF      <1>     mov word [td1], cx
   772 00001FE9 8815B9E5FFFF        <1>     mov byte [td3], dl
   773 00001FEF 8835B4E5FFFF        <1>     mov byte [td4], dh
   774 00001FF5 0FB6C0              <1>     movzx eax, al
   775 00001FF8 89C3                <1>     mov ebx, eax
   776 00001FFA D1E3                <1>     shl ebx, 1   ;Multiply by 2
   777 00001FFC 01D8                <1>     add eax, ebx ;Make it 3 times 
   778 00001FFE 488D15CDE9FFFF      <1>     lea rdx, dayName
   779 00002005 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   780 00002009 B903000000          <1>     mov ecx, 3  ;Print three chars
   781 0000200E BB01000000          <1>     mov ebx, 1  ;STDOUT
   782 00002013 B440                <1>     mov ah, 40h ;Write to handle
   783 00002015 CD21                <1>     int 21h
   784 00002017 B220                <1>     mov dl, " "
   785 00002019 B402                <1>     mov ah, 02h
   786 0000201B CD21                <1>     int 21h
   787                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   788                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   789                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   790 0000201D 0FB70582E5FFFF      <1>     movzx eax, word [td1]   ;Get this word
   791 00002024 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   792 00002027 0FB61D7BE5FFFF      <1>     movzx ebx, byte [td4]
   793 0000202E C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   794 00002031 09D8                <1>     or eax, ebx ;Add this date to eax
   795 00002033 0FB61D6EE5FFFF      <1>     movzx ebx, byte [td3]
   796 0000203A 09D8                <1>     or eax, ebx
   797 0000203C BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   798 00002041 E8740B0000          <1>     call printDate
   799                              <1> 
   800 00002046 488D15BAE9FFFF      <1>     lea rdx, newDate
   801 0000204D B409                <1>     mov ah, 09h
   802 0000204F CD21                <1>     int 21h
   803 00002051 488D15CEE9FFFF      <1>     lea rdx, ukDate
   804 00002058 488D05BAE9FFFF      <1>     lea rax, usDate
   805 0000205F 488D1DCDE9FFFF      <1>     lea rbx, jpDate
   806 00002066 803DC9DFFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   807 0000206D 480F47D3            <1>     cmova rdx, rbx
   808 00002071 480F42D0            <1>     cmovb rdx, rax
   809 00002075 B409                <1>     mov ah, 09h
   810 00002077 CD21                <1>     int 21h
   811                              <1> 
   812 00002079 488D151DE1FFFF      <1>     lea rdx, inBuffer
   813 00002080 C6027E              <1>     mov byte [rdx], 126 ;Enter a string of up to 126 chars in length
   814 00002083 B40A                <1>     mov ah, 0Ah
   815 00002085 CD21                <1>     int 21h
   816 00002087 52                  <1>     push rdx
   817 00002088 488D1586E7FFFF      <1>     lea rdx, crlf
   818 0000208F B409                <1>     mov ah, 09h
   819 00002091 CD21                <1>     int 21h
   820 00002093 5A                  <1>     pop rdx
   821 00002094 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   822                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002098 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000209A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   823                              <1>     return
    13                              <2> %%_ret:
    14 0000209B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   824                              <1> 
   825                              <1> time:
   826 0000209C 488D15ACE9FFFF      <1>     lea rdx, curTime
   827 000020A3 B409                <1>     mov ah, 09h
   828 000020A5 CD21                <1>     int 21h
   829 000020A7 B42C                <1>     mov ah, 2Ch ;DOS get time
   830 000020A9 CD21                <1>     int 21h
   831                              <1>     ;CH = hour (0-23)
   832                              <1> 	;CL = minutes (0-59)
   833                              <1> 	;DH = seconds (0-59)
   834                              <1> 	;DL = hundredths (0-99)
   835 000020AB 880DF5E4FFFF        <1>     mov byte [td1], cl
   836 000020B1 882DF0E4FFFF        <1>     mov byte [td2], ch
   837 000020B7 8815EBE4FFFF        <1>     mov byte [td3], dl
   838 000020BD 8835E6E4FFFF        <1>     mov byte [td4], dh
   839 000020C3 0FB6C5              <1>     movzx eax, ch
   840 000020C6 E8830C0000          <1>     call printTime.printHours
   841                              <1> 
   842 000020CB 8A1572DFFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   843 000020D1 B402                <1>     mov ah, 02h
   844 000020D3 CD21                <1>     int 21h
   845                              <1> 
   846 000020D5 0FB605CAE4FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   847 000020DC E85D0C0000          <1>     call printTime.printMinutesAlt
   848                              <1> 
   849 000020E1 8A155CDFFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   850 000020E7 B402                <1>     mov ah, 02h
   851 000020E9 CD21                <1>     int 21h
   852                              <1> 
   853 000020EB 0FB605B7E4FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   854 000020F2 E8470C0000          <1>     call printTime.printMinutesAlt
   855                              <1> 
   856 000020F7 B22E                <1>     mov dl, "."
   857 000020F9 B402                <1>     mov ah, 02h
   858 000020FB CD21                <1>     int 21h
   859                              <1> 
   860 000020FD 0FB605A4E4FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   861 00002104 E8350C0000          <1>     call printTime.printMinutesAlt
   862                              <1> 
   863 00002109 488D1550E9FFFF      <1>     lea rdx, newTime
   864 00002110 B409                <1>     mov ah, 09h
   865 00002112 CD21                <1>     int 21h
   866                              <1> 
   867 00002114 488D1582E0FFFF      <1>     lea rdx, inBuffer
   868 0000211B C6027E              <1>     mov byte [rdx], 126 ;Enter a string of up to 126 chars in length
   869 0000211E B40A                <1>     mov ah, 0Ah
   870 00002120 CD21                <1>     int 21h
   871 00002122 52                  <1>     push rdx
   872 00002123 488D15EBE6FFFF      <1>     lea rdx, crlf
   873 0000212A B409                <1>     mov ah, 09h
   874 0000212C CD21                <1>     int 21h
   875 0000212E 5A                  <1>     pop rdx
   876 0000212F 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   877                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002133 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002135 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   878                              <1>     return
    13                              <2> %%_ret:
    14 00002136 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   879                              <1> ctty:
   880 00002137 F6057CDFFFFFFF      <1>     test byte [arg1Flg], -1
   881 0000213E 0F849BF5FFFF        <1>     jz badArgError
   882 00002144 F60572DFFFFFFF      <1>     test byte [arg2Flg], -1
   883 0000214B 0F858EF5FFFF        <1>     jnz badArgError
   884 00002151 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   885 00002158 0FB6055CDFFFFF      <1>     movzx eax, byte [arg1Off]
   886 0000215F 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   887 00002162 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   888 00002166 750F                <1>     jne .noDrive
   889 00002168 0FB6054DDFFFFF      <1>     movzx eax, byte [arg1FCBret]
   890 0000216F 3CFF                <1>     cmp al, -1
   891 00002171 0F845FF5FFFF        <1>     je badDriveError
   892                              <1> .noDrive:
   893                              <1>     ;Now we open the provided file
   894 00002177 E8C60E0000          <1>     call copyArgumentToSearchSpec
   895 0000217C 488D15DFE2FFFF      <1>     lea rdx, searchSpec
   896 00002183 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   897 00002188 CD21                <1>     int 21h
   898 0000218A 0F8258F5FFFF        <1>     jc badFileError
   899 00002190 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   900 00002193 B800440000          <1>     mov eax, 4400h  ;Get device word
   901 00002198 CD21                <1>     int 21h
   902 0000219A F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   903 0000219D 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   904                              <1>     ;Now we set this handle to be STDIO
   905 0000219F 80CA03              <1>     or dl, 3    ;Set STDIO bits
   906 000021A2 30F6                <1>     xor dh, dh
   907 000021A4 B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   908 000021A9 CD21                <1>     int 21h
   909                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   910 000021AB 31C9                <1>     xor ecx, ecx    ;STDIN
   911 000021AD B446                <1>     mov ah, 46h
   912 000021AF CD21                <1>     int 21h
   913 000021B1 FFC1                <1>     inc ecx         ;STDOUT
   914 000021B3 B446                <1>     mov ah, 46h
   915 000021B5 CD21                <1>     int 21h
   916 000021B7 FFC1                <1>     inc ecx         ;STDERR
   917 000021B9 B446                <1>     mov ah, 46h
   918 000021BB CD21                <1>     int 21h
   919 000021BD B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   920 000021BF CD21                <1>     int 21h
   921                              <1>     return
    13                              <2> %%_ret:
    14 000021C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   922                              <1> .badCharDev:
   923 000021C2 488D15B7E9FFFF      <1>     lea rdx, badDev
   924 000021C9 B409                <1>     mov ah, 09h
   925 000021CB CD21                <1>     int 21h
   926 000021CD B43E                <1>     mov ah, 3Eh ;Close opened handle
   927 000021CF CD21                <1>     int 21h
   928                              <1>     return
    13                              <2> %%_ret:
    14 000021D1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   929                              <1> 
   930                              <1> cls:  
   931 000021D2 B800440000          <1>     mov eax, 4400h  ;Get device info
   932 000021D7 BB01000000          <1>     mov ebx, 1      ;for handle 1
   933 000021DC CD21                <1>     int 21h         ;in dx
   934 000021DE F7C280000000        <1>     test edx, devCharDev
   935 000021E4 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   936 000021E6 F7C210000000        <1>     test edx, charDevFastOut
   937 000021EC 743E                <1>     jz .doAnsi
   938                              <1>     ;Test if Int 29h uses Int 30h
   939                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   940                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
   941 000021EE B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
   942 000021F3 CD21                <1>     int 21h
   943                              <1> .biosCheck:
   944 000021F5 66813BCD30          <1>     cmp word [rbx], 30CDh
   945 000021FA 740C                <1>     je .biosConfirmed
   946 000021FC 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   947 00002201 7429                <1>     je .doAnsi
   948 00002203 48FFC3              <1>     inc rbx
   949 00002206 EBED                <1>     jmp short .biosCheck
   950                              <1> .biosConfirmed:
   951                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   952 00002208 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   953 0000220A 31DB                <1>     xor ebx, ebx
   954 0000220C CD30                <1>     int 30h
   955 0000220E B40F                <1>     mov ah, 0Fh ;Get screen mode
   956 00002210 CD30                <1>     int 30h
   957 00002212 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   958 00002215 FECA                <1>     dec dl
   959 00002217 B619                <1>     mov dh, 25  ;Number of rows is standard
   960 00002219 31C0                <1>     xor eax, eax
   961 0000221B 89C1                <1>     mov ecx, eax
   962 0000221D B707                <1>     mov bh, 7   ;Screen attributes
   963 0000221F B406                <1>     mov ah, 6   ;Scroll
   964 00002221 CD30                <1>     int 30h
   965 00002223 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   966 00002225 B700                <1>     mov bh, 0   ;Page 0
   967 00002227 B402                <1>     mov ah, 2
   968 00002229 CD30                <1>     int 30h
   969                              <1>     return
    13                              <2> %%_ret:
    14 0000222B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   970                              <1> .doAnsi:
   971                              <1> ;4 chars in the ansi routine
   972                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   973                              <1> ; understand ANSI codes
   974 0000222C 488D35C9EBFFFF      <1>     lea rsi, ansiCls
   975 00002233 B904000000          <1>     mov ecx, 4
   976 00002238 B406                <1>     mov ah, 06h ;Raw char output
   977                              <1> .ansiLp:
   978 0000223A AC                  <1>     lodsb   ;Get the char in 
   979 0000223B 88C2                <1>     mov dl, al
   980 0000223D CD21                <1>     int 21h
   981 0000223F FFC9                <1>     dec ecx
   982 00002241 75F7                <1>     jnz .ansiLp
   983                              <1>     return
    13                              <2> %%_ret:
    14 00002243 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   984                              <1> 
   985                              <1> break:
   986 00002244 F6056FDEFFFFFF      <1>     test byte [arg1Flg], -1
   987 0000224B 752D                <1>     jnz .argumentProvided
   988                              <1>     ;Here we just get the status of break
   989 0000224D B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   990 00002252 CD21                <1>     int 21h
   991 00002254 88D3                <1>     mov bl, dl
   992 00002256 488D15C5E9FFFF      <1>     lea rdx, breakIs
   993 0000225D B409                <1>     mov ah, 09h
   994 0000225F CD21                <1>     int 21h
   995 00002261 488D15B5E9FFFF      <1>     lea rdx, onMes
   996 00002268 488D0DA8E9FFFF      <1>     lea rcx, offMes
   997 0000226F 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   998 00002271 480F44D1            <1>     cmovz rdx, rcx
   999 00002275 B409                <1>     mov ah, 09h
  1000 00002277 CD21                <1>     int 21h
  1001                              <1>     return
    13                              <2> %%_ret:
    14 00002279 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1002                              <1> .argumentProvided:
  1003 0000227A 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1004 0000227E AD                  <1>     lodsd   ;Read the word
  1005 0000227F 89C3                <1>     mov ebx, eax
  1006 00002281 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1007 00002286 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1008 00002289 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1009 0000228E 7416                <1>     je .maybeOn
  1010 00002290 663D4F46            <1>     cmp ax, "OF"
  1011 00002294 7523                <1>     jne .badOnOff
  1012 00002296 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1013 0000229B 6681FB4620          <1>     cmp bx, "F "
  1014 000022A0 7517                <1>     jne .badOnOff
  1015                              <1>     ;Set off
  1016 000022A2 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1017 000022A4 EB0B                <1>     jmp short .setBreak
  1018                              <1> .maybeOn:
  1019 000022A6 663D4F4E            <1>     cmp ax, "ON"
  1020 000022AA 750D                <1>     jne .badOnOff
  1021                              <1>     ;Set on
  1022 000022AC BA01000000          <1>     mov edx, 1
  1023                              <1> .setBreak:
  1024 000022B1 B801330000          <1>     mov eax, 3301h  ;Set break
  1025 000022B6 CD21                <1>     int 21h
  1026                              <1>     return
    13                              <2> %%_ret:
    14 000022B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1027                              <1> .badOnOff:
  1028 000022B9 488D154CEBFFFF      <1>     lea rdx, badOnOff
  1029 000022C0 B409                <1>     mov ah, 09h
  1030 000022C2 CD21                <1>     int 21h
  1031                              <1>     return
    13                              <2> %%_ret:
    14 000022C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1032                              <1> 
  1033                              <1> verify:
  1034 000022C5 F605EEDDFFFFFF      <1>     test byte [arg1Flg], -1
  1035 000022CC 752D                <1>     jnz .argumentProvided
  1036                              <1>     ;Here we just get the status of break
  1037 000022CE B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1038 000022D3 CD21                <1>     int 21h
  1039 000022D5 88C3                <1>     mov bl, al
  1040 000022D7 488D154EE9FFFF      <1>     lea rdx, verifyIs
  1041 000022DE B409                <1>     mov ah, 09h
  1042 000022E0 CD21                <1>     int 21h
  1043 000022E2 488D1534E9FFFF      <1>     lea rdx, onMes
  1044 000022E9 488D0D27E9FFFF      <1>     lea rcx, offMes
  1045 000022F0 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1046 000022F2 480F44D1            <1>     cmovz rdx, rcx
  1047 000022F6 B409                <1>     mov ah, 09h
  1048 000022F8 CD21                <1>     int 21h
  1049                              <1>     return
    13                              <2> %%_ret:
    14 000022FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1050                              <1> .argumentProvided:
  1051 000022FB 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1052 000022FF AD                  <1>     lodsd   ;Read the word
  1053 00002300 89C3                <1>     mov ebx, eax
  1054 00002302 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1055 00002307 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1056 0000230A 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1057 0000230F 7416                <1>     je .maybeOn
  1058 00002311 663D4F46            <1>     cmp ax, "OF"
  1059 00002315 751F                <1>     jne .badOnOff
  1060 00002317 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1061 0000231C 6681FB4620          <1>     cmp bx, "F "
  1062 00002321 7513                <1>     jne .badOnOff
  1063                              <1>     ;Set off
  1064 00002323 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1065 00002325 EB0A                <1>     jmp short .setVerify
  1066                              <1> .maybeOn:
  1067 00002327 663D4F4E            <1>     cmp ax, "ON"
  1068 0000232B 7509                <1>     jne .badOnOff
  1069                              <1>     ;Set on
  1070 0000232D 31C0                <1>     xor eax, eax
  1071 0000232F FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1072                              <1> .setVerify:
  1073 00002331 B42E                <1>     mov ah, 2Eh  ;Set Verify
  1074 00002333 CD21                <1>     int 21h
  1075                              <1>     return
    13                              <2> %%_ret:
    14 00002335 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1076                              <1> .badOnOff:
  1077 00002336 488D15CFEAFFFF      <1>     lea rdx, badOnOff
  1078 0000233D B409                <1>     mov ah, 09h
  1079 0000233F CD21                <1>     int 21h
  1080                              <1>     return
    13                              <2> %%_ret:
    14 00002341 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1081                              <1> 
  1082                              <1> rename:
  1083 00002342 F60571DDFFFFFF      <1>     test byte [arg1Flg], -1
  1084 00002349 0F8490F3FFFF        <1>     jz badArgError
  1085 0000234F F60567DDFFFFFF      <1>     test byte [arg2Flg], -1
  1086 00002356 0F8483F3FFFF        <1>     jz badArgError
  1087 0000235C 0FB60558DDFFFF      <1>     movzx eax, byte [arg1Off]
  1088 00002363 4C8B05A5DCFFFF      <1>     mov r8, [pspPtr]
  1089 0000236A 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1090 00002371 4889F3              <1>     mov rbx, rsi    ;Save the ptr to the start of the string in rbx
  1091 00002374 4801C6              <1>     add rsi, rax    ;Go to the start of the command
  1092 00002377 488D3D2CE2FFFF      <1>     lea rdi, sourcePath
  1093 0000237E E8670C0000          <1>     call cpDelimPathToBufz    
  1094 00002383 0FB60534DDFFFF      <1>     movzx eax, byte [arg2Off]
  1095 0000238A 4889DE              <1>     mov rsi, rbx    ;Get back the start of the ptr
  1096 0000238D 4801C6              <1>     add rsi, rax    ;Go to the start of the command
  1097 00002390 488D3D95E2FFFF      <1>     lea rdi, destPath
  1098 00002397 E84E0C0000          <1>     call cpDelimPathToBufz   
  1099 0000239C 488D1507E2FFFF      <1>     lea rdx, sourcePath
  1100 000023A3 488D3D82E2FFFF      <1>     lea rdi, destPath
  1101 000023AA B800560000          <1>     mov eax, 5600h
  1102 000023AF CD21                <1>     int 21h
  1103                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000023B1 73(41)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1104 000023B3 3C0F                <1>     cmp al, errBadDrv
  1105 000023B5 0F841BF3FFFF        <1>     je badDriveError
  1106 000023BB 3C0B                <1>     cmp al, errBadFmt
  1107 000023BD 0F8440F3FFFF        <1>     je badDirError
  1108 000023C3 3C11                <1>     cmp al, errDevUnk
  1109 000023C5 0F8402F3FFFF        <1>     je badParamError
  1110 000023CB E921F3FFFF          <1>     jmp badDupFnf
  1111                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1112                              <1> touch:
  1113                              <1> ;Temporarily used to create files
  1114 000023D0 F605E3DCFFFFFF      <1>     test byte [arg1Flg], -1
  1115 000023D7 0F8402F3FFFF        <1>     jz badArgError
  1116 000023DD E8480C0000          <1>     call buildCommandPath
  1117 000023E2 488D1579E0FFFF      <1>     lea rdx, searchSpec
  1118 000023E9 B8005B0000          <1>     mov eax, 5B00h  ;Create unique file 
  1119 000023EE 31C9                <1>     xor ecx, ecx
  1120 000023F0 CD21                <1>     int 21h
  1121 000023F2 721D                <1>     jc .touch1
  1122                              <1> .touchClose:
  1123 000023F4 0FB7D8              <1>     movzx ebx, ax   ;Save the handle here
  1124 000023F7 B80D120000          <1>     mov eax, 120Dh  ;Get date/time words from the DOS
  1125 000023FC CD2F                <1>     int 2fh
  1126 000023FE 89C1                <1>     mov ecx, eax    ;Move the time here
  1127 00002400 87D1                <1>     xchg edx, ecx   ;Get them in the right place
  1128 00002402 B801570000          <1>     mov eax, 5701h  ;Set the date/time for bx
  1129 00002407 CD21                <1>     int 21h
  1130 00002409 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1131 0000240E CD21                <1>     int 21h
  1132                              <1>     return
    13                              <2> %%_ret:
    14 00002410 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1133                              <1> .touch1:
  1134 00002411 3C50                <1>     cmp al, errFilExist ;Does the file exist?
  1135 00002413 7509                <1>     jne .touchError ;If not, this is an error!
  1136 00002415 B8003D0000          <1>     mov eax, 3D00h  ;R/O open instead to update the access time!!
  1137 0000241A CD21                <1>     int 21h
  1138 0000241C 73D6                <1>     jnc .touchClose ;If this worked, close the handle immediately
  1139                              <1> .touchError:
  1140 0000241E 488D1595E9FFFF      <1>     lea rdx, touchErr
  1141 00002425 E9E0F2FFFF          <1>     jmp badCmn
  1142                              <1> 
  1143                              <1> join:
  1144                              <1> ;Mock join command, to test join. Make an external command.
  1145                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1146 0000242A F605AF000000FF      <1>     test byte [.joinOn], -1
  1147 00002431 743D                <1>     jz .okJoin
  1148                              <1> .joindisable:
  1149 00002433 B800520000          <1>     mov eax, 5200h  
  1150 00002438 CD21                <1>     int 21h
  1151                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1152 0000243A B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1153 0000243F CD2A                <1>     int 2Ah
  1154 00002441 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1155 00002445 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1156 00002449 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1157 0000244F C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1158 00002452 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1159 00002456 FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1160 00002459 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1161 0000245E CD2A                <1>     int 2Ah
  1162 00002460 C6057900000000      <1>     mov byte [.joinOn], 0
  1163 00002467 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1164 0000246E EB45                <1>     jmp short .joinExit
  1165                              <1> .okJoin:
  1166 00002470 C60569000000FF      <1>     mov byte [.joinOn], -1
  1167 00002477 B800520000          <1>     mov eax, 5200h  
  1168 0000247C CD21                <1>     int 21h
  1169 0000247E 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1170 00002482 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1171                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1172 00002486 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1173 0000248B CD2A                <1>     int 2Ah
  1174 0000248D 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1175 00002493 4889DF              <1>     mov rdi, rbx
  1176 00002496 488D3544000000      <1>     lea rsi, .joinPath
  1177 0000249D B90C000000          <1>     mov ecx, .joinPathL
  1178 000024A2 F3A4                <1>     rep movsb   ;Copy chars over
  1179 000024A4 FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1180 000024A7 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1181 000024AC CD2A                <1>     int 2Ah
  1182 000024AE 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1183                              <1> .joinExit:
  1184 000024B5 B800090000          <1>     mov eax, 0900h
  1185 000024BA CD21                <1>     int 21h
  1186                              <1>     return
    13                              <2> %%_ret:
    14 000024BC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1187 000024BD 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1187 000024C6 61626C65640D0A24    <1>
  1188 000024CE 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1188 000024D7 7361626C65640D0A24  <1>
  1189 000024E0 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1190 000024E1 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1190 000024EA 535400              <1>
  1191                              <1> .joinPathL  equ $ - .joinPath 
  1192                              <1> 
  1193                              <1> subst:
  1194                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1195                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1196 000024ED F605D3000000FF      <1>     test byte [.substOn], -1
  1197 000024F4 7443                <1>     jz .okSubst
  1198                              <1> .substdisable:
  1199 000024F6 B800520000          <1>     mov eax, 5200h  
  1200 000024FB CD21                <1>     int 21h
  1201                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1202 000024FD B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1203 00002502 CD2A                <1>     int 2Ah
  1204 00002504 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1205 00002508 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1206 0000250F 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1207 00002515 C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1208 00002518 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1209 0000251C 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1210 00002522 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1211 00002527 CD2A                <1>     int 2Ah
  1212 00002529 C6059700000000      <1>     mov byte [.substOn], 0
  1213 00002530 488D157D000000      <1>     lea rdx, .substDisableMsg
  1214 00002537 EB61                <1>     jmp short .substExit
  1215                              <1> .okSubst:
  1216 00002539 C60587000000FF      <1>     mov byte [.substOn], -1
  1217 00002540 B800520000          <1>     mov eax, 5200h  
  1218 00002545 CD21                <1>     int 21h
  1219 00002547 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1220 0000254C CD2A                <1>     int 2Ah
  1221 0000254E 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1222 00002552 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1223 00002559 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1224 0000255D 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1225 00002564 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1226 00002568 C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1227                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1228 0000256F 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1229 00002575 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1230 0000257B 4889DF              <1>     mov rdi, rbx
  1231 0000257E 488D3543000000      <1>     lea rsi, .substPath
  1232 00002585 B90C000000          <1>     mov ecx, .substPathL
  1233 0000258A F3A4                <1>     rep movsb   ;Copy chars over
  1234 0000258C B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1235 00002591 CD2A                <1>     int 2Ah
  1236 00002593 488D1508000000      <1>     lea rdx, .substEnableMsg
  1237                              <1> .substExit:
  1238 0000259A B800090000          <1>     mov eax, 0900h
  1239 0000259F CD21                <1>     int 21h
  1240                              <1>     return
    13                              <2> %%_ret:
    14 000025A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1241 000025A2 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1241 000025AB 6E61626C65640D0A24  <1>
  1242 000025B4 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1242 000025BD 697361626C65640D0A- <1>
  1242 000025C6 24                  <1>
  1243 000025C7 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1244 000025C8 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1244 000025D1 535400              <1>
  1245                              <1> .substPathL  equ $ - .substPath 
  1246                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1247                              <1> truename:
  1248 000025D4 F605DFDAFFFFFF      <1>     test byte [arg1Flg], -1
  1249 000025DB 0F84FEF0FFFF        <1>     jz badArgError
  1250 000025E1 E8440A0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1251 000025E6 488D3575DEFFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1252 000025ED 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1253 000025F0 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1254 000025F5 CD21                <1>     int 21h
  1255 000025F7 730D                <1>     jnc .writePath
  1256 000025F9 3C02                <1>     cmp al, errFnf
  1257 000025FB 0F84E7F0FFFF        <1>     je badFileError
  1258 00002601 E9C7F0FFFF          <1>     jmp badParamError
  1259                              <1> .writePath:
  1260 00002606 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1261 00002609 B9FFFFFFFF          <1>     mov ecx, -1
  1262 0000260E 30C0                <1>     xor al, al
  1263 00002610 F2AE                <1>     repne scasb     ;Get the new len
  1264 00002612 F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1265 00002614 FFC9                <1>     dec ecx
  1266 00002616 BB01000000          <1>     mov ebx, 01
  1267 0000261B B440                <1>     mov ah, 40h
  1268 0000261D CD21                <1>     int 21h
  1269 0000261F E887050000          <1>     call printCRLF
  1270                              <1>     return
    13                              <2> %%_ret:
    14 00002624 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1271                              <1> 
  1272                              <1> label:
  1273                              <1> ;Displays/Changes/Deletes the file label
  1274 00002625 488D1508000000      <1>     lea rdx, .l1
  1275 0000262C B800090000          <1>     mov eax, 0900h
  1276 00002631 CD21                <1>     int 21h
  1277                              <1>     return
    13                              <2> %%_ret:
    14 00002633 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1278 00002634 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  1278 0000263D 6E20756E696D706C65- <1>
  1278 00002646 6D656E7465640D0A24  <1>
  1279                              <1> 
  1280                              <1> mklbl:
  1281                              <1>     ;lea rdx, .l1
  1282                              <1>     ;mov cx, 08h ;Make a label
  1283                              <1>     ;mov eax, 3C00h
  1284                              <1>     ;int 21h
  1285                              <1> 
  1286                              <1>     ;mov ebx, eax
  1287                              <1>     ;mov eax, 3E00h  ;Close the handle
  1288                              <1>     ;int 21h
  1289                              <1>     ;return
  1290                              <1> 
  1291                              <1> ;.l1: db "TESTLABEL",0
  1292 0000264F 488D1508000000      <1>     lea rdx, .l1
  1293 00002656 B800160000          <1>     mov eax, 1600h  ;Create FCB
  1294 0000265B CD21                <1>     int 21h
  1295                              <1>     return
    13                              <2> %%_ret:
    14 0000265D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1296                              <1> .l1:
  1297                              <1>     istruc exFcb
  1298 0000265E FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1299 0000265F 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1300 00002665 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1301 00002666 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  1302 0000266E 4C2020              <1>     at exFcb.fileext,   db "L  "
  1303 00002671 00000000            <1>     at exFcb.curBlock,  dd 0
  1304 00002675 00<rep 15h>         <1>     iend 
  1305                              <1> rmlbl:
  1306 0000268A 488D1508000000      <1>     lea rdx, .l1
  1307 00002691 B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  1308 00002696 CD21                <1>     int 21h
  1309                              <1>     return
    13                              <2> %%_ret:
    14 00002698 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1310                              <1> .l1:    ;FCB to volume label
  1311                              <1>     istruc exFcb
  1312 00002699 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1313 0000269A 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1314 000026A0 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1315 000026A1 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  1316 000026A9 3F3F3F              <1>     at exFcb.fileext,   db "???"
  1317 000026AC 00000000            <1>     at exFcb.curBlock,  dd 0
  1318 000026B0 00<rep 15h>         <1>     iend 
  1319                              <1> 
  1320                              <1> rnlbl:
  1321 000026C5 488D1508000000      <1>     lea rdx, .l1
  1322 000026CC B800170000          <1>     mov eax, 1700h
  1323 000026D1 CD21                <1>     int 21h
  1324                              <1>     return
    13                              <2> %%_ret:
    14 000026D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1325                              <1> .l1:
  1326                              <1>     istruc exRenFcb
  1327 000026D4 FF                  <1>     at exRenFcb.extSig,     db -1
  1328 000026D5 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  1329 000026DB 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  1330 000026DC 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  1331 000026E4 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  1332 000026E7 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  1332 000026F0 4C414245            <1>
  1333 000026F4 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  1334 000026F7 00<rep 4h>          <1>     iend
  1335                              <1> volume:
  1336                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  1337 000026FB F605BBD9FFFFFF      <1>     test byte [arg2Flg], -1
  1338 00002702 0F85D7EFFFFF        <1>     jnz badArgError
  1339 00002708 F605ABD9FFFFFF      <1>     test byte [arg1Flg], -1
  1340 0000270F 7507                <1>     jnz .notCurrentDrive
  1341 00002711 E86B070000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1342 00002716 EB31                <1>     jmp short .dirEP
  1343                              <1> .notCurrentDrive:
  1344 00002718 E80D090000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1345 0000271D 488D353EDDFFFF      <1>     lea rsi, searchSpec
  1346 00002724 E88A070000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  1347 00002729 66AD                <1>     lodsw                   ;Get this word
  1348 0000272B 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  1349 0000272E 0F85ABEFFFFF        <1>     jne badArgError
  1350 00002734 8A0582D9FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1351 0000273A A8FF                <1>     test al, -1
  1352 0000273C 0F8594EFFFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1353 00002742 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1354 00002747 FFC8                <1>     dec eax ;Convert to 0 based number
  1355                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  1356 00002749 E8D1090000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  1357 0000274E 488D1525DEFFFF      <1>     lea rdx, volFcb
  1358 00002755 FFC0                <1>     inc eax ;Get 1 based drive number
  1359 00002757 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1360 00002759 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1361 0000275C B800110000          <1>     mov eax, 1100h ;Find first FCB
  1362 00002761 CD21                <1>     int 21h
  1363 00002763 50                  <1>     push rax
  1364                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  1365 00002764 488D15AAE0FFFF      <1>     lea rdx, crlf
  1366 0000276B B409                <1>     mov ah, 09h
  1367 0000276D CD21                <1>     int 21h
  1368 0000276F 488D1524E3FFFF      <1>     lea rdx, volMes
  1369 00002776 B409                <1>     mov ah, 09h
  1370 00002778 CD21                <1>     int 21h
  1371 0000277A 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  1372 0000277C 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  1373 0000277F B402                <1>     mov ah, 02h
  1374 00002781 CD21                <1>     int 21h
  1375 00002783 58                  <1>     pop rax
  1376 00002784 84C0                <1>     test al, al ;If this is zero, the call succeeded
  1377 00002786 7409                <1>     jz .volIDOk
  1378 00002788 488D1522E3FFFF      <1>     lea rdx, volNo
  1379 0000278F EB19                <1>     jmp short .volEndPrint
  1380                              <1> .volIDOk:
  1381 00002791 488D1514E3FFFF      <1>     lea rdx, volOk
  1382 00002798 B409                <1>     mov ah, 09h
  1383 0000279A CD21                <1>     int 21h
  1384 0000279C C60540D9FFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  1385 000027A3 488D152ED9FFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  1386                              <1> .volEndPrint:
  1387 000027AA B409                <1>     mov ah, 09h
  1388 000027AC CD21                <1>     int 21h
  1389 000027AE 488D1560E0FFFF      <1>     lea rdx, crlf
  1390 000027B5 B409                <1>     mov ah, 09h
  1391 000027B7 CD21                <1>     int 21h
  1392                              <1>     return
    13                              <2> %%_ret:
    14 000027B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1393                              <1> 
  1394                              <1> version:
  1395 000027BA 488D1554E0FFFF      <1>     lea rdx, crlf
  1396 000027C1 B409                <1>     mov ah, 09h
  1397 000027C3 CD21                <1>     int 21h
  1398 000027C5 488D15BCE2FFFF      <1>     lea rdx, dosVer
  1399 000027CC B409                <1>     mov ah, 09h
  1400 000027CE CD21                <1>     int 21h
  1401 000027D0 E80C000000          <1>     call .printVersionNumber
  1402 000027D5 488D1539E0FFFF      <1>     lea rdx, crlf
  1403 000027DC B409                <1>     mov ah, 09h
  1404 000027DE CD21                <1>     int 21h
  1405                              <1>     return
    13                              <2> %%_ret:
    14 000027E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1406                              <1> .printVersionNumber:
  1407 000027E1 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1408 000027E3 CD21                <1>     int 21h
  1409 000027E5 50                  <1>     push rax
  1410 000027E6 0FB6C0              <1>     movzx eax, al
  1411 000027E9 E87E080000          <1>     call printDecimalWord
  1412 000027EE B22E                <1>     mov dl, "."
  1413 000027F0 B402                <1>     mov ah, 02h
  1414 000027F2 CD21                <1>     int 21h
  1415 000027F4 58                  <1>     pop rax
  1416 000027F5 0FB6C4              <1>     movzx eax, ah
  1417 000027F8 E86F080000          <1>     call printDecimalWord
  1418                              <1>     return
    13                              <2> %%_ret:
    14 000027FD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1419                              <1> 
  1420                              <1> 
  1421                              <1> memory:
  1422 000027FE 488B1D1AD8FFFF      <1>     mov rbx, qword [sysVars]
  1423 00002805 4885DB              <1>     test rbx, rbx
  1424 00002808 7510                <1>     jnz .sysvarsOK
  1425 0000280A 488D154AE5FFFF      <1>     lea rdx, memBad0
  1426 00002811 B409                <1>     mov ah, 09h
  1427 00002813 CD21                <1>     int 21h
  1428 00002815 E9F5080000          <1>     jmp freezePC.altEP
  1429                              <1> .sysvarsOK:
  1430                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1431                              <1>     ; and rcx to store Application memory
  1432 0000281A 31F6                <1>     xor esi, esi
  1433 0000281C 31FF                <1>     xor edi, edi
  1434 0000281E 31ED                <1>     xor ebp, ebp
  1435 00002820 31C9                <1>     xor ecx, ecx
  1436 00002822 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1437 00002826 488B1B              <1>     mov rbx, qword [rbx]
  1438                              <1> .memLp:
  1439 00002829 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1440 0000282C 7409                <1>     je .validMCB
  1441 0000282E 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1442 00002831 0F8501010000        <1>     jne .badMCBFound
  1443                              <1> .validMCB:
  1444 00002837 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1445 0000283A 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1446 0000283E 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1447 00002846 7505                <1>     jne .notDOS
  1448 00002848 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1449 0000284B EB21                <1>     jmp short .gotoNext
  1450                              <1> .notDOS:
  1451 0000284D 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1452 00002855 7505                <1>     jne .notFree
  1453 00002857 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1454 0000285A EB12                <1>     jmp short .gotoNext
  1455                              <1> .notFree:
  1456 0000285C 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1457 00002864 7505                <1>     jne .notHole
  1458 00002866 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1459 00002869 EB03                <1>     jmp short .gotoNext
  1460                              <1> .notHole:
  1461 0000286B 4801C1              <1>     add rcx, rax    ;Add to Application count
  1462                              <1> .gotoNext:
  1463 0000286E 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1464 00002871 7407                <1>     je .endOfWalk
  1465 00002873 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1466 00002878 EBAF                <1>     jmp short .memLp
  1467                              <1> .endOfWalk:
  1468                              <1>     
  1469 0000287A 488D153BE4FFFF      <1>     lea rdx, memDOS
  1470 00002881 B409                <1>     mov ah, 09h
  1471 00002883 CD21                <1>     int 21h
  1472 00002885 4889F0              <1>     mov rax, rsi
  1473 00002888 E89D000000          <1>     call .mcbPrintAmount
  1474 0000288D 488D15C0E4FFFF      <1>     lea rdx, memByte
  1475 00002894 B409                <1>     mov ah, 09h
  1476 00002896 CD21                <1>     int 21h
  1477                              <1> 
  1478 00002898 4885ED              <1>     test rbp, rbp
  1479 0000289B 741E                <1>     jz .skipHole
  1480 0000289D 488D1564E4FFFF      <1>     lea rdx, memHole
  1481 000028A4 B409                <1>     mov ah, 09h
  1482 000028A6 CD21                <1>     int 21h
  1483 000028A8 4889E8              <1>     mov rax, rbp
  1484 000028AB E87A000000          <1>     call .mcbPrintAmount
  1485 000028B0 488D159DE4FFFF      <1>     lea rdx, memByte
  1486 000028B7 B409                <1>     mov ah, 09h
  1487 000028B9 CD21                <1>     int 21h
  1488                              <1> .skipHole:
  1489                              <1> 
  1490 000028BB 488D1520E4FFFF      <1>     lea rdx, memApp
  1491 000028C2 B409                <1>     mov ah, 09h
  1492 000028C4 CD21                <1>     int 21h
  1493 000028C6 4889C8              <1>     mov rax, rcx
  1494 000028C9 E85C000000          <1>     call .mcbPrintAmount
  1495 000028CE 488D157FE4FFFF      <1>     lea rdx, memByte
  1496 000028D5 B409                <1>     mov ah, 09h
  1497 000028D7 CD21                <1>     int 21h
  1498                              <1> 
  1499 000028D9 488D154EE4FFFF      <1>     lea rdx, memFree
  1500 000028E0 B409                <1>     mov ah, 09h
  1501 000028E2 CD21                <1>     int 21h
  1502 000028E4 4889F8              <1>     mov rax, rdi
  1503 000028E7 E83E000000          <1>     call .mcbPrintAmount
  1504 000028EC 488D1561E4FFFF      <1>     lea rdx, memByte
  1505 000028F3 B409                <1>     mov ah, 09h
  1506 000028F5 CD21                <1>     int 21h
  1507                              <1> 
  1508 000028F7 488D1598E3FFFF      <1>     lea rdx, memSys
  1509 000028FE B409                <1>     mov ah, 09h
  1510 00002900 CD21                <1>     int 21h
  1511 00002902 4889F0              <1>     mov rax, rsi
  1512 00002905 4801F8              <1>     add rax, rdi
  1513 00002908 4801C8              <1>     add rax, rcx
  1514 0000290B 4801E8              <1>     add rax, rbp
  1515 0000290E E817000000          <1>     call .mcbPrintAmount
  1516 00002913 488D153AE4FFFF      <1>     lea rdx, memByte
  1517 0000291A B409                <1>     mov ah, 09h
  1518 0000291C CD21                <1>     int 21h
  1519                              <1> 
  1520 0000291E 488D15F0DEFFFF      <1>     lea rdx, crlf
  1521 00002925 B409                <1>     mov ah, 09h
  1522 00002927 CD21                <1>     int 21h
  1523                              <1>     return
    13                              <2> %%_ret:
    14 00002929 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1524                              <1> 
  1525                              <1> .mcbPrintAmount:
  1526 0000292A 51                  <1>     push rcx
  1527 0000292B 56                  <1>     push rsi
  1528 0000292C 57                  <1>     push rdi
  1529 0000292D 55                  <1>     push rbp
  1530 0000292E E839070000          <1>     call printDecimalWord
  1531 00002933 5D                  <1>     pop rbp
  1532 00002934 5F                  <1>     pop rdi
  1533 00002935 5E                  <1>     pop rsi
  1534 00002936 59                  <1>     pop rcx
  1535                              <1>     return
    13                              <2> %%_ret:
    14 00002937 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1536                              <1> .badMCBFound:
  1537 00002938 488D155CE4FFFF      <1>     lea rdx, memBad2
  1538 0000293F B409                <1>     mov ah, 09h
  1539 00002941 CD21                <1>     int 21h
  1540 00002943 E9C7070000          <1>     jmp freezePC.altEP
  1541                              <1> 
  1542                              <1> type:
  1543 00002948 F6056BD7FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1544 0000294F 0F848AEDFFFF        <1>     jz badArgError
  1545 00002955 F60561D7FFFFFF      <1>     test byte [arg2Flg], -1
  1546 0000295C 0F857DEDFFFF        <1>     jnz badArgError         ;If this set, error
  1547 00002962 4C8B05A6D6FFFF      <1>     mov r8, [pspPtr]
  1548 00002969 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1549 00002970 0FB60544D7FFFF      <1>     movzx eax, byte [arg1Off]
  1550 00002977 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1551 0000297A 803E0D              <1>     cmp byte [rsi], CR
  1552 0000297D 0F845CEDFFFF        <1>     je badArgError
  1553 00002983 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1554 00002987 750F                <1>     jne .noDrive
  1555 00002989 0FB6052CD7FFFF      <1>     movzx eax, byte [arg1FCBret]
  1556 00002990 3CFF                <1>     cmp al, -1
  1557 00002992 0F843EEDFFFF        <1>     je badDriveError
  1558                              <1> .noDrive:
  1559                              <1>     ;Now we open the provided file
  1560 00002998 E88D060000          <1>     call buildCommandPath
  1561 0000299D 488D15BEDAFFFF      <1>     lea rdx, searchSpec
  1562 000029A4 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1563 000029A9 CD21                <1>     int 21h
  1564 000029AB 0F8237EDFFFF        <1>     jc badFileError
  1565 000029B1 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1566 000029B8 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1567                              <1> .lp:
  1568 000029BB B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1569 000029C0 B43F                <1>     mov ah, 3Fh ;Read handle
  1570 000029C2 CD21                <1>     int 21h
  1571 000029C4 89C1                <1>     mov ecx, eax
  1572 000029C6 67E317              <1>     jecxz .exit
  1573 000029C9 53                  <1>     push rbx    ;Save the original in handle
  1574 000029CA BB01000000          <1>     mov ebx, 1  ;STDOUT
  1575 000029CF B440                <1>     mov ah, 40h
  1576 000029D1 CD21                <1>     int 21h
  1577 000029D3 5B                  <1>     pop rbx ;Get back the original read handle
  1578 000029D4 720F                <1>     jc .exitBad
  1579 000029D6 39C8                <1>     cmp eax, ecx
  1580 000029D8 74E1                <1>     je .lp
  1581 000029DA FFC9                <1>     dec ecx ;One less for a ^Z
  1582 000029DC 39C8                <1>     cmp eax, ecx
  1583 000029DE 7505                <1>     jne .exitBad
  1584                              <1> .exit:
  1585 000029E0 B43E                <1>     mov ah, 3Eh ;Close handle
  1586 000029E2 CD21                <1>     int 21h
  1587                              <1>     return
    13                              <2> %%_ret:
    14 000029E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1588                              <1> .exitBad:
  1589                              <1>     ;Print a disk error message... use a table to build the message but for
  1590                              <1>     ; now, just exit
  1591                              <1>     ;If it is a char device, don't print a error
  1592 000029E5 EBF9                <1>     jmp short .exit
  1593                              <1> 
  1594                              <1> exit:
  1595 000029E7 F6053FD6FFFFFF      <1>     test byte [permaSwitch], -1
  1596                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000029EE 75(E4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1597 000029F0 488B0520D6FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1598 000029F7 483DFFFFFFFF        <1>     cmp rax, -1
  1599                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000029FD 74(E4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1600 000029FF 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1601                              <1> 
  1602 00002A03 488B1524D6FFFF      <1>     mov rdx, qword [parentInt22]
  1603 00002A0A 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  1604 00002A0E B822250000          <1>     mov eax, 2522h
  1605 00002A13 CD21                <1>     int 21h
  1606                              <1> 
  1607 00002A15 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1608 00002A1A CD21                <1>     int 21h
  1609                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00002A1C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1610                              <1> 
  1611                              <1> launchChild:
  1612                              <1> ;We run EXEC on this and the child task will return via applicationReturn
  1613                              <1> ;Here we must search the CWD or all path componants before failing
  1614                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
  1615 00002A1D E8FD060000          <1>     call setDTA
  1616                              <1> 
  1617 00002A22 8B05A1D6FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
  1618 00002A28 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1619 00002A2D 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1620 00002A32 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
  1621 00002A37 741D                <1>     je .noExt
  1622 00002A39 E8F0E7FFFF          <1>     call checkExtensionExec ;ZF=ZE => Executable
  1623 00002A3E 0F855B010000        <1>     jnz .dfltErrExit
  1624                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1625 00002A44 0F8255010000        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
  1626                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1627                              <1>     ;So it is a com or exe that we are searching for for now
  1628 00002A4A 488D3D50D8FFFF      <1>     lea rdi, cmdPathSpec
  1629 00002A51 4889FA              <1>     mov rdx, rdi
  1630 00002A54 EB24                <1>     jmp short .search
  1631                              <1> .noExt:
  1632                              <1>     ;If the filename has no extension, append a .*
  1633                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
  1634 00002A56 31DB                <1>     xor ebx, ebx
  1635 00002A58 488D3D42D8FFFF      <1>     lea rdi, cmdPathSpec
  1636 00002A5F 4889FA              <1>     mov rdx, rdi
  1637 00002A62 31C0                <1>     xor eax, eax
  1638 00002A64 B9FFFFFFFF          <1>     mov ecx, -1
  1639 00002A69 F2AE                <1>     repne scasb
  1640 00002A6B 48FFCF              <1>     dec rdi ;Point to the terminating null
  1641 00002A6E 4889FD              <1>     mov rbp, rdi    ;Temporarily store the ptr to the . in rbp
  1642 00002A71 66B82E2A            <1>     mov ax, ".*"
  1643 00002A75 66AB                <1>     stosw
  1644 00002A77 30C0                <1>     xor al, al  ;Store terminating null
  1645 00002A79 AA                  <1>     stosb
  1646                              <1> .search:
  1647 00002A7A B906000000          <1>     mov ecx, dirIncFiles
  1648 00002A7F B44E                <1>     mov ah, 4Eh ;Find First File
  1649 00002A81 CD21                <1>     int 21h
  1650 00002A83 0F8216010000        <1>     jc .dfltErrExit
  1651 00002A89 E8C4000000          <1>     call .noExtCheckExt
  1652                              <1> .moreSearch:
  1653 00002A8E B44F                <1>     mov ah, 4Fh
  1654 00002A90 CD21                <1>     int 21h
  1655 00002A92 7207                <1>     jc .noMoreFiles
  1656 00002A94 E8B9000000          <1>     call .noExtCheckExt
  1657 00002A99 EBF3                <1>     jmp short .moreSearch
  1658                              <1> .noMoreFiles:
  1659 00002A9B 85DB                <1>     test ebx, ebx
  1660 00002A9D 0F84FC000000        <1>     jz .dfltErrExit
  1661                              <1> ;So we have a valid executable
  1662 00002AA3 4889EF              <1>     mov rdi, rbp    ;Get back ptr to the .*,0
  1663 00002AA6 F7C301000000        <1>     test ebx, 1
  1664 00002AAC 7407                <1>     jz .launchexebat
  1665 00002AAE B82E434F4D          <1>     mov eax, ".COM"
  1666 00002AB3 EB14                <1>     jmp short .buildTail
  1667                              <1> .launchexebat:
  1668 00002AB5 F7C302000000        <1>     test ebx, 2
  1669 00002ABB 7407                <1>     jz .launchbat
  1670 00002ABD B82E455845          <1>     mov eax, ".EXE"
  1671 00002AC2 EB05                <1>     jmp short .buildTail
  1672                              <1> .launchbat:
  1673                              <1> ;Temporary For BAT
  1674 00002AC4 E9D6000000          <1>     jmp .dfltErrExit
  1675                              <1> .buildTail:
  1676 00002AC9 AB                  <1>     stosd
  1677 00002ACA 31C0                <1>     xor eax, eax
  1678 00002ACC AA                  <1>     stosb   ;Store the terminating null
  1679                              <1> ;Now we build the cmdtail properly
  1680 00002ACD 488D3D47D6FFFF      <1>     lea rdi, cmdTail
  1681 00002AD4 4889FA              <1>     mov rdx, rdi    ;Use rdx as the anchor pointer for cmdline
  1682 00002AD7 B910000000          <1>     mov ecx, 128/8
  1683 00002ADC F348AB              <1>     rep stosq   ;Clear the buffer with nulls
  1684 00002ADF 488D7A01            <1>     lea rdi, qword [rdx + 1]    ;Mov rdi to start of cmdtail (not count)
  1685 00002AE3 498DB080000000      <1>     lea rsi, qword [r8 + cmdLineCnt]
  1686 00002AEA AC                  <1>     lodsb   ;Get into al the number of chars and move rsi to the tail proper
  1687 00002AEB 88C4                <1>     mov ah, al  ;Move the number into ah
  1688 00002AED 31C9                <1>     xor ecx, ecx    ;Use ch for number of chars read, cl for chars copied
  1689                              <1>     ;Skip the parsed command name
  1690                              <1> .passName:
  1691 00002AEF AC                  <1>     lodsb   ;Get the char in al
  1692 00002AF0 FEC5                <1>     inc ch
  1693 00002AF2 80FD7F              <1>     cmp ch, 127     ;Exit condition (bad case)
  1694 00002AF5 741D                <1>     je short .finishBuildingTailNoCR
  1695 00002AF7 3C0D                <1>     cmp al, CR      ;If we get to the CR after name, no tail
  1696 00002AF9 7418                <1>     je short .finishBuildingTail
  1697 00002AFB 3C20                <1>     cmp al, SPC
  1698 00002AFD 75F0                <1>     jne short .passName
  1699                              <1>     ;Now we copy the name 
  1700 00002AFF E8AF030000          <1>     call skipDelimiters ;Start by skipping spaces (there are no embedded tabs)
  1701                              <1>     ;rsi points to the first non-space char
  1702                              <1> .copyTail:
  1703 00002B04 AC                  <1>     lodsb
  1704 00002B05 3C0D                <1>     cmp al, CR
  1705 00002B07 740A                <1>     je short .finishBuildingTail
  1706 00002B09 AA                  <1>     stosb
  1707 00002B0A FEC1                <1>     inc cl
  1708 00002B0C 80F97F              <1>     cmp cl, 127 ;Exit condition
  1709 00002B0F 75F3                <1>     jne .copyTail
  1710 00002B11 EB01                <1>     jmp short .finishBuildingTailNoCR
  1711                              <1> .finishBuildingTail:
  1712 00002B13 AA                  <1>     stosb   ;Store the CR
  1713                              <1> .finishBuildingTailNoCR:
  1714 00002B14 880A                <1>     mov byte [rdx], cl  ;Finish by placing count 
  1715                              <1> .launch:
  1716 00002B16 488D1DDED5FFFF      <1>     lea rbx, launchBlock
  1717 00002B1D 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  1718 00002B21 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  1719 00002B24 488D05F0D5FFFF      <1>     lea rax, cmdTail
  1720 00002B2B 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1721 00002B2F 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1722 00002B33 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1723 00002B37 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1724 00002B3B 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1725 00002B3F 488D155BD7FFFF      <1>     lea rdx, cmdPathSpec
  1726 00002B46 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1727 00002B4B CD21                <1>     int 21h
  1728 00002B4D E94D000000          <1>     jmp .dfltErrExit    ;If something goes wrong, error out
  1729                              <1> .noExtCheckExt:
  1730 00002B52 488D3595D5FFFF      <1>     lea rsi, dword [cmdFFBlock + ffBlock.asciizName]
  1731 00002B59 488D3D90D7FFFF      <1>     lea rdi, fcbCmdSpec
  1732 00002B60 E8D7030000          <1>     call asciiFilenameToFCB
  1733 00002B65 8B058DD7FFFF        <1>     mov eax, dword [fcbCmdSpec + filename.fExt]
  1734 00002B6B 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1735 00002B70 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1736 00002B75 3D434F4D20          <1>     cmp eax, "COM "
  1737 00002B7A 7507                <1>     jne .neceexe
  1738 00002B7C 81CB01000000        <1>     or ebx, 1
  1739                              <1>     return
    13                              <2> %%_ret:
    14 00002B82 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1740                              <1> .neceexe:
  1741 00002B83 3D45584520          <1>     cmp eax, "EXE "
  1742 00002B88 7507                <1>     jne .necebat
  1743 00002B8A 81CB02000000        <1>     or ebx, 2
  1744                              <1>     return
    13                              <2> %%_ret:
    14 00002B90 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1745                              <1> .necebat:
  1746 00002B91 3D42415420          <1>     cmp eax, "BAT "
  1747                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002B96 75(90)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1748 00002B98 81CB04000000        <1>     or ebx, 4
  1749                              <1>     return
    13                              <2> %%_ret:
    14 00002B9E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1750                              <1> 
  1751                              <1> .dfltErrExit:
  1752 00002B9F 488D15CCDCFFFF      <1>     lea rdx, badCmd
  1753 00002BA6 B409                <1>     mov ah, 09h
  1754 00002BA8 CD21                <1>     int 21h
  1755                              <1>     return
    13                              <2> %%_ret:
    14 00002BAA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printCRLF:
     4 00002BAB 488D1563DCFFFF      <1>     lea rdx, crlf
     5                              <1> printString:
     6 00002BB2 B800090000          <1>     mov eax, 0900h  ;Print string
     7 00002BB7 CD21                <1>     int 21h
     8                              <1>     return
    13                              <2> %%_ret:
    14 00002BB9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> printDate:
    10                              <1> ;Input: eax = Packed Date
    11                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    12                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    13                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    14                              <1> ;       ebx = 0 => Print two digit year
    15                              <1> ;       ebx = 1 => Print four digit year
    16 00002BBA 53                  <1>     push rbx
    17 00002BBB 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    18 00002BBD 803D72D4FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    19 00002BC4 7240                <1>     jb .usDate
    20 00002BC6 777C                <1>     ja .jpnDate
    21                              <1> ;European: DD/MM/YY
    22 00002BC8 251F000000          <1>     and eax, 1Fh    ;Save day bits
    23 00002BCD E8B0000000          <1>     call .printFirst
    24 00002BD2 8A1569D4FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    25 00002BD8 B402                <1>     mov ah, 02h
    26 00002BDA CD21                <1>     int 21h
    27                              <1> 
    28 00002BDC 89C8                <1>     mov eax, ecx
    29 00002BDE 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    30 00002BE3 C1E805              <1>     shr eax, 5
    31 00002BE6 E8B3000000          <1>     call .printSecond
    32                              <1> 
    33 00002BEB 8A1550D4FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    34 00002BF1 B402                <1>     mov ah, 02h
    35 00002BF3 CD21                <1>     int 21h
    36                              <1> 
    37 00002BF5 89C8                <1>     mov eax, ecx
    38 00002BF7 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    39 00002BFC C1E809              <1>     shr eax, 9
    40 00002BFF 5B                  <1>     pop rbx ;Get the year signature back
    41 00002C00 E8A9000000          <1>     call .printYear
    42                              <1>     return
    13                              <2> %%_ret:
    14 00002C05 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    43                              <1> .usDate:
    44                              <1> ;US: MM/DD/YY
    45 00002C06 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    46 00002C0B C1E805              <1>     shr eax, 5
    47 00002C0E E86F000000          <1>     call .printFirst
    48                              <1> 
    49 00002C13 8A1528D4FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    50 00002C19 B402                <1>     mov ah, 02h
    51 00002C1B CD21                <1>     int 21h
    52                              <1> 
    53 00002C1D 89C8                <1>     mov eax, ecx
    54 00002C1F 251F000000          <1>     and eax, 1Fh    ;Save day bits
    55 00002C24 E875000000          <1>     call .printSecond
    56                              <1> 
    57 00002C29 8A1512D4FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    58 00002C2F B402                <1>     mov ah, 02h
    59 00002C31 CD21                <1>     int 21h
    60                              <1> 
    61 00002C33 89C8                <1>     mov eax, ecx
    62 00002C35 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    63 00002C3A C1E809              <1>     shr eax, 9
    64 00002C3D 5B                  <1>     pop rbx ;Get the year signature back
    65 00002C3E E86B000000          <1>     call .printYear
    66                              <1>     return
    13                              <2> %%_ret:
    14 00002C43 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    67                              <1> .jpnDate:
    68                              <1> ;Japan: YY/MM/DD
    69 00002C44 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    70 00002C49 C1E809              <1>     shr eax, 9
    71 00002C4C 5B                  <1>     pop rbx ;Get the year signature back
    72 00002C4D E85C000000          <1>     call .printYear
    73                              <1> 
    74 00002C52 8A15E9D3FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    75 00002C58 B402                <1>     mov ah, 02h
    76 00002C5A CD21                <1>     int 21h
    77                              <1> 
    78 00002C5C 89C8                <1>     mov eax, ecx
    79 00002C5E 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    80 00002C63 C1E805              <1>     shr eax, 5
    81 00002C66 E833000000          <1>     call .printSecond
    82                              <1> 
    83 00002C6B 8A15D0D3FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    84 00002C71 B402                <1>     mov ah, 02h
    85 00002C73 CD21                <1>     int 21h
    86                              <1> 
    87 00002C75 89C8                <1>     mov eax, ecx
    88 00002C77 251F000000          <1>     and eax, 1Fh    ;Save day bits
    89 00002C7C E81D000000          <1>     call .printSecond
    90                              <1>     return
    13                              <2> %%_ret:
    14 00002C81 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    91                              <1> 
    92                              <1> ;Each of these require eax setup correctly
    93                              <1> .printFirst:
    94 00002C82 51                  <1>     push rcx
    95 00002C83 E855040000          <1>     call getDecimalWord
    96 00002C88 84ED                <1>     test ch, ch ;Do we have an upper digit?
    97 00002C8A 7504                <1>     jnz .skipSpace
    98 00002C8C 88CD                <1>     mov ch, cl
    99 00002C8E B120                <1>     mov cl, " "
   100                              <1> .skipSpace:
   101 00002C90 88CA                <1>     mov dl, cl
   102 00002C92 B402                <1>     mov ah, 02h
   103 00002C94 CD21                <1>     int 21h
   104 00002C96 88EA                <1>     mov dl, ch
   105 00002C98 B402                <1>     mov ah, 02h
   106 00002C9A CD21                <1>     int 21h
   107 00002C9C 59                  <1>     pop rcx
   108                              <1>     return
    13                              <2> %%_ret:
    14 00002C9D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   109                              <1> .printSecond:
   110 00002C9E 51                  <1>     push rcx
   111 00002C9F E839040000          <1>     call getDecimalWord
   112 00002CA4 84ED                <1>     test ch, ch ;Do we have an upper digit?
   113 00002CA6 75E8                <1>     jnz .skipSpace
   114 00002CA8 88CD                <1>     mov ch, cl
   115 00002CAA B130                <1>     mov cl, "0"
   116 00002CAC EBE2                <1>     jmp short .skipSpace
   117                              <1> .printYear:
   118 00002CAE 05BC070000          <1>     add eax, 1980
   119 00002CB3 51                  <1>     push rcx
   120 00002CB4 53                  <1>     push rbx
   121 00002CB5 E823040000          <1>     call getDecimalWord ;Get unpacked in rcx
   122 00002CBA 5B                  <1>     pop rbx
   123 00002CBB 84DB                <1>     test bl, bl
   124 00002CBD 740C                <1>     jz .twoDigitYear
   125 00002CBF 88CA                <1>     mov dl, cl  ;Print the first digit
   126 00002CC1 B402                <1>     mov ah, 02h
   127 00002CC3 CD21                <1>     int 21h
   128 00002CC5 88EA                <1>     mov dl, ch  ;Print the second digit
   129 00002CC7 B402                <1>     mov ah, 02h
   130 00002CC9 CD21                <1>     int 21h
   131                              <1> .twoDigitYear:
   132 00002CCB C1E910              <1>     shr ecx, 10h    ;Get high word low
   133 00002CCE 88CA                <1>     mov dl, cl  ;Print the upper digit
   134 00002CD0 B402                <1>     mov ah, 02h
   135 00002CD2 CD21                <1>     int 21h
   136 00002CD4 88EA                <1>     mov dl, ch  ;Print the lower digit
   137 00002CD6 B402                <1>     mov ah, 02h
   138 00002CD8 CD21                <1>     int 21h
   139 00002CDA 59                  <1>     pop rcx
   140                              <1>     return
    13                              <2> %%_ret:
    14 00002CDB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> 
   142                              <1> 
   143                              <1> printTime:
   144                              <1> ;Input: eax = Packed Time
   145                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   146                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   147 00002CDC 89C1                <1>     mov ecx, eax
   148 00002CDE 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   149 00002CE3 C1E80B              <1>     shr eax, 11
   150 00002CE6 803D5AD3FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   151 00002CED 750B                <1>     jne .ampm
   152 00002CEF E85A000000          <1>     call .printHours
   153 00002CF4 E831000000          <1>     call .printMinutes
   154                              <1>     return
    13                              <2> %%_ret:
    14 00002CF9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   155                              <1> .ampm:
   156 00002CFA 3D0C000000          <1>     cmp eax, 12
   157 00002CFF 7713                <1>     ja .pm
   158 00002D01 7416                <1>     je .pm2
   159 00002D03 E846000000          <1>     call .printHours
   160 00002D08 E81D000000          <1>     call .printMinutes
   161 00002D0D B261                <1>     mov dl, "a"
   162 00002D0F B402                <1>     mov ah, 02h
   163 00002D11 CD21                <1>     int 21h
   164                              <1>     return
    13                              <2> %%_ret:
    14 00002D13 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1> .pm:
   166 00002D14 2D0C000000          <1>     sub eax, 12
   167                              <1> .pm2:
   168 00002D19 E830000000          <1>     call .printHours
   169 00002D1E E807000000          <1>     call .printMinutes
   170 00002D23 B270                <1>     mov dl, "p"
   171 00002D25 B402                <1>     mov ah, 02h
   172 00002D27 CD21                <1>     int 21h
   173                              <1>     return
    13                              <2> %%_ret:
    14 00002D29 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   174                              <1> .printMinutes:
   175 00002D2A 8A1513D3FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   176 00002D30 B402                <1>     mov ah, 02h
   177 00002D32 CD21                <1>     int 21h
   178                              <1> 
   179 00002D34 89C8                <1>     mov eax, ecx
   180 00002D36 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   181 00002D3B C1E805              <1>     shr eax, 5
   182                              <1> .printMinutesAlt:
   183 00002D3E 51                  <1>     push rcx
   184 00002D3F E899030000          <1>     call getDecimalWord
   185 00002D44 84ED                <1>     test ch, ch ;Do we have an upper digit?
   186 00002D46 7514                <1>     jnz .skipSpace
   187 00002D48 88CD                <1>     mov ch, cl
   188 00002D4A B130                <1>     mov cl, "0"
   189 00002D4C EB0E                <1>     jmp short .skipSpace
   190                              <1> .printHours:
   191 00002D4E 51                  <1>     push rcx
   192 00002D4F E889030000          <1>     call getDecimalWord
   193 00002D54 84ED                <1>     test ch, ch ;Do we have an upper digit?
   194 00002D56 7504                <1>     jnz .skipSpace
   195 00002D58 88CD                <1>     mov ch, cl
   196 00002D5A B120                <1>     mov cl, " "
   197                              <1> .skipSpace:
   198 00002D5C 88CA                <1>     mov dl, cl
   199 00002D5E B402                <1>     mov ah, 02h
   200 00002D60 CD21                <1>     int 21h
   201 00002D62 88EA                <1>     mov dl, ch
   202 00002D64 B402                <1>     mov ah, 02h
   203 00002D66 CD21                <1>     int 21h
   204 00002D68 59                  <1>     pop rcx
   205                              <1>     return
    13                              <2> %%_ret:
    14 00002D69 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   206                              <1> 
   207                              <1> 
   208                              <1> putVersionInPrompt:
   209 00002D6A 488D1517DDFFFF      <1>     lea rdx, dosVer
   210 00002D71 B409                <1>     mov ah, 09h ;Print String
   211 00002D73 CD21                <1>     int 21h
   212 00002D75 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   213 00002D77 CD21                <1>     int 21h
   214 00002D79 50                  <1>     push rax    ;Save minor version
   215 00002D7A E8AD000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   216 00002D7F E8C5000000          <1>     call printPackedBCD ;Print al
   217 00002D84 B22E                <1>     mov dl, "."
   218 00002D86 B402                <1>     mov ah, 02h
   219 00002D88 CD21                <1>     int 21h
   220 00002D8A 58                  <1>     pop rax
   221 00002D8B 88E0                <1>     mov al, ah  ;Get the minor version low
   222 00002D8D E89A000000          <1>     call hexToBCD
   223 00002D92 E8B2000000          <1>     call printPackedBCD
   224                              <1>     return
    13                              <2> %%_ret:
    14 00002D97 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   225                              <1> putEscInPrompt:
   226 00002D98 B21B                <1>     mov dl, ESC
   227 00002D9A EB1D                <1>     jmp short outChar
   228                              <1> 
   229                              <1> putMoneyInPrompt:
   230 00002D9C B224                <1>     mov dl, "$"
   231 00002D9E EB19                <1>     jmp short outChar
   232                              <1> 
   233                              <1> putEquInPrompt:
   234 00002DA0 B23D                <1>     mov dl, "="
   235 00002DA2 EB15                <1>     jmp short outChar
   236                              <1> 
   237                              <1> putPipeInPrompt:
   238 00002DA4 B27C                <1>     mov dl, "|"
   239 00002DA6 EB11                <1>     jmp short outChar
   240                              <1> 
   241                              <1> putGTinPrompt:
   242 00002DA8 B23E                <1>     mov dl, ">"
   243 00002DAA EB0D                <1>     jmp short outChar
   244                              <1> 
   245                              <1> putLTinPrompt:
   246 00002DAC B23C                <1>     mov dl, "<"
   247 00002DAE EB09                <1>     jmp short outChar
   248                              <1> 
   249                              <1> putDriveInPrompt:
   250 00002DB0 E8CC000000          <1>     call getCurrentDrive
   251 00002DB5 0441                <1>     add al, "A" ;Convert to letter
   252 00002DB7 88C2                <1>     mov dl, al
   253                              <1> outChar:
   254 00002DB9 B402                <1>     mov ah, 02h ;Echo to STDOUT
   255 00002DBB CD21                <1>     int 21h
   256                              <1>     return
    13                              <2> %%_ret:
    14 00002DBD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   257                              <1> putCWDInPrompt:
   258 00002DBE E8BE000000          <1>     call getCurrentDrive
   259 00002DC3 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   260 00002DC5 FEC2                <1>     inc dl
   261 00002DC7 0441                <1>     add al, "A" ;Convert to letter
   262 00002DC9 B43A                <1>     mov ah, ":"
   263 00002DCB 488D3D8AD2FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   264 00002DD2 66AB                <1>     stosw   ;Store X:, rdi+=2
   265 00002DD4 8A0551D2FFFF        <1>     mov al, byte [pathSep]
   266 00002DDA AA                  <1>     stosb   ;Store pathSep, inc rdi
   267 00002DDB B447                <1>     mov ah, 47h ;Get Current Working Directory
   268 00002DDD 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   269 00002DE0 CD21                <1>     int 21h
   270 00002DE2 721C                <1>     jc .badDrive
   271 00002DE4 E8B0000000          <1>     call strlen
   272 00002DE9 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   273                              <1>     ;We use the fact that strlen counts the NULL to account for "\"
   274 00002DEF B440                <1>     mov ah, 40h ;Write to handle
   275 00002DF1 BB01000000          <1>     mov ebx, 1  ;STDOUT
   276 00002DF6 488D155FD2FFFF      <1>     lea rdx, currDirStr
   277 00002DFD CD21                <1>     int 21h
   278                              <1>     return
    13                              <2> %%_ret:
    14 00002DFF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   279                              <1> .badDrive:
   280                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   281 00002E00 488D1539DDFFFF      <1>     lea rdx, badDrvMsg
   282 00002E07 E8A6FDFFFF          <1>     call printString
   283                              <1>     return
    13                              <2> %%_ret:
    14 00002E0C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   284                              <1> 
   285                              <1> BCDtoHex:
   286                              <1> ;Converts a BCD value to a Hex byte
   287                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   288 00002E0D 51                  <1>     push rcx
   289 00002E0E 0FB6C0              <1>     movzx eax, al   ;Zero extend
   290 00002E11 89C1                <1>     mov ecx, eax    ;Save al in ecx
   291 00002E13 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   292 00002E18 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   293 00002E1E C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   294                              <1> .bth:
   295 00002E21 050A000000          <1>     add eax, 10
   296 00002E26 FFC9                <1>     dec ecx
   297 00002E28 75F7                <1>     jnz .bth
   298 00002E2A 59                  <1>     pop rcx
   299 00002E2B C3                  <1>     ret
   300                              <1> 
   301                              <1> hexToBCD:
   302                              <1> ;Converts a Hex byte into two BCD digits
   303                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   304 00002E2C 51                  <1>     push rcx
   305 00002E2D 0FB6C0              <1>     movzx eax, al   ;Zero extend
   306 00002E30 31C9                <1>     xor ecx, ecx
   307                              <1> .htb0:
   308 00002E32 3D0A000000          <1>     cmp eax, 10
   309 00002E37 7209                <1>     jb .htb1
   310 00002E39 2D0A000000          <1>     sub eax, 10
   311 00002E3E FFC1                <1>     inc ecx
   312 00002E40 EBF0                <1>     jmp short .htb0
   313                              <1> .htb1:
   314 00002E42 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   315 00002E45 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   316 00002E47 59                  <1>     pop rcx
   317 00002E48 C3                  <1>     ret
   318                              <1> 
   319                              <1> printPackedBCD:
   320                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   321                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   322                              <1> ;Preserves all registers
   323 00002E49 50                  <1>     push rax
   324 00002E4A 52                  <1>     push rdx
   325 00002E4B 88C4                <1>     mov ah, al
   326 00002E4D 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   327 00002E4F 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   328 00002E52 7508                <1>     jnz .upperNybble
   329 00002E54 B220                <1>     mov dl, " "
   330 00002E56 B402                <1>     mov ah, 02h
   331 00002E58 CD21                <1>     int 21h
   332 00002E5A EB0E                <1>     jmp short .lowerNybble
   333                              <1> .upperNybble:
   334 00002E5C 50                  <1>     push rax
   335 00002E5D C0EC04              <1>     shr ah, 4
   336 00002E60 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   337 00002E63 88E2                <1>     mov dl, ah
   338 00002E65 B402                <1>     mov ah, 02h ;Print DL
   339 00002E67 CD21                <1>     int 21h
   340 00002E69 58                  <1>     pop rax
   341                              <1> .lowerNybble:
   342 00002E6A 0430                <1>     add al, "0"
   343 00002E6C 88C2                <1>     mov dl, al
   344 00002E6E B402                <1>     mov ah, 02h ;Print DL
   345 00002E70 CD21                <1>     int 21h
   346 00002E72 5A                  <1>     pop rdx
   347 00002E73 58                  <1>     pop rax
   348                              <1>     return
    13                              <2> %%_ret:
    14 00002E74 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   349                              <1> 
   350                              <1> setDrive:
   351                              <1> ;Input: dl = 0 based Drive number to set to
   352                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   353                              <1> ;AX trashed.
   354 00002E75 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   355 00002E77 CD21                <1>     int 21h 
   356 00002E79 E803000000          <1>     call getCurrentDrive
   357 00002E7E 38D0                <1>     cmp al, dl  ;Is this the same drive?
   358                              <1>     return
    13                              <2> %%_ret:
    14 00002E80 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   359                              <1> getCurrentDrive:
   360                              <1> ;Returns the 0 based current drive in al
   361 00002E81 B419                <1>     mov ah, 19h
   362 00002E83 CD21                <1>     int 21h
   363                              <1>     return
    13                              <2> %%_ret:
    14 00002E85 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   364                              <1> 
   365                              <1> strcpy:
   366                              <1> ;Copies an ASCIIZ string
   367                              <1> ;rsi -> Source
   368                              <1> ;rdi -> Destination
   369 00002E86 51                  <1>     push rcx
   370 00002E87 56                  <1>     push rsi
   371 00002E88 57                  <1>     push rdi
   372                              <1> 
   373 00002E89 57                  <1>     push rdi
   374 00002E8A 4889F7              <1>     mov rdi, rsi
   375 00002E8D E807000000          <1>     call strlen ;Get the length of the string in rsi
   376 00002E92 5F                  <1>     pop rdi
   377                              <1> 
   378 00002E93 F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   379 00002E95 5F                  <1>     pop rdi
   380 00002E96 5E                  <1>     pop rsi
   381 00002E97 59                  <1>     pop rcx
   382                              <1>     return
    13                              <2> %%_ret:
    14 00002E98 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   383                              <1> 
   384                              <1> strlen:
   385                              <1> ;Gets the length of a ASCIIZ string
   386                              <1> ;Input: rdi = Source buffer
   387                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   388                              <1>     ;push rbx
   389                              <1>     ;mov rbx, rsp
   390                              <1>     ;push rax    
   391                              <1>     ;push rax
   392 00002E99 B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS
   393 00002E9E CD2F                <1>     int 2fh
   394                              <1>     ;mov rsp, rbx
   395                              <1>     ;pop rbx
   396                              <1>     return
    13                              <2> %%_ret:
    14 00002EA0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   397                              <1> 
   398                              <1> ucChar:
   399                              <1> ;Input: al = Char to uppercase
   400                              <1> ;Output: al = Adjusted char 
   401 00002EA1 53                  <1>     push rbx
   402 00002EA2 4889E3              <1>     mov rbx, rsp    ;Save the stack ptr
   403 00002EA5 50                  <1>     push rax    ;Push the char twice on the stack
   404 00002EA6 50                  <1>     push rax
   405 00002EA7 B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   406 00002EAC CD2F                <1>     int 2fh         ;Returns the processed char in al
   407 00002EAE 4889DC              <1>     mov rsp, rbx    ;Return the stack ptr to where it was
   408 00002EB1 5B                  <1>     pop rbx
   409                              <1>     return
    13                              <2> %%_ret:
    14 00002EB2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   410                              <1> 
   411                              <1> skipDelimiters:
   412                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   413                              <1> ; command delimiters but a subset thereof. 
   414                              <1> ;These are the same across all codepages.
   415                              <1> ;Input: rsi must point to the start of the data string
   416                              <1> ;Output: rsi points to the first non-delimiter char
   417 00002EB3 50                  <1>     push rax
   418                              <1> .l1:
   419 00002EB4 AC                  <1>     lodsb
   420 00002EB5 E807000000          <1>     call isALdelimiter
   421 00002EBA 74F8                <1>     jz .l1
   422                              <1> .exit:
   423 00002EBC 58                  <1>     pop rax
   424 00002EBD 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   425                              <1>     return
    13                              <2> %%_ret:
    14 00002EC0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   426                              <1> 
   427                              <1> isALdelimiter:
   428                              <1> ;Returns: ZF=NZ if al is not a command separator 
   429                              <1> ;         ZF=ZE if al is a command separator
   430 00002EC1 3C20                <1>     cmp al, " "
   431                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002EC3 74(C0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   432 00002EC5 3C3B                <1>     cmp al, ";"
   433                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002EC7 74(C0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   434 00002EC9 3C3D                <1>     cmp al, "="
   435                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002ECB 74(C0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   436 00002ECD 3C2C                <1>     cmp al, ","
   437                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002ECF 74(C0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   438 00002ED1 3C09                <1>     cmp al, TAB
   439                              <1>     return
    13                              <2> %%_ret:
    14 00002ED3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   440                              <1> 
   441                              <1> printPrompt:
   442 00002ED4 66813D4CD1FFFFFFFF  <1>     cmp word [promptPtr], -1
   443 00002EDD 750B                <1>     jne .validPrompt
   444                              <1>     ;Here we print the default prompt
   445 00002EDF E8DAFEFFFF          <1>     call putCWDInPrompt
   446 00002EE4 E8BFFEFFFF          <1>     call putGTinPrompt
   447                              <1>     return
    13                              <2> %%_ret:
    14 00002EE9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   448                              <1> .validPrompt:
   449                              <1>     return
    13                              <2> %%_ret:
    14 00002EEA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   450                              <1> 
   451                              <1> clearCommandState:
   452                              <1> ;Clears the command state
   453 00002EEB 488D3DC2D1FFFF      <1>     lea rdi, cmdStatePtr
   454 00002EF2 B90C000000          <1>     mov ecx, cmdStateL
   455 00002EF7 31C0                <1>     xor eax, eax
   456 00002EF9 F3AA                <1>     rep stosb
   457 00002EFB C705B1D1FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   457 00002F04 FF                  <1>
   458                              <1>     return
    13                              <2> %%_ret:
    14 00002F05 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   459                              <1> 
   460                              <1> clearCommandLineState:
   461                              <1> ;Clears the command line state after a 0Dh encountered
   462 00002F06 488D3D92D1FFFF      <1>     lea rdi, cmdLineStatePtr
   463 00002F0D B921000000          <1>     mov ecx, cmdLineStateL
   464 00002F12 31C0                <1>     xor eax, eax
   465 00002F14 F3AA                <1>     rep stosb
   466 00002F16 C70590D1FFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   466 00002F1F FF                  <1>
   467 00002F20 C7058CD1FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   467 00002F29 FF                  <1>
   468                              <1>     return
    13                              <2> %%_ret:
    14 00002F2A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   469                              <1> 
   470                              <1> asciiToFCB:
   471                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   472                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   473                              <1> ;Also doesn't check if chars are valid
   474                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   475                              <1> ;Name is space padded.
   476                              <1> ;Input: rsi = ASCII string buffer
   477                              <1> ;       rdi = FCB name buffer
   478                              <1> ;Output: al = Char that terminated the source string 
   479 00002F2B 53                  <1>     push rbx    
   480 00002F2C 57                  <1>     push rdi
   481 00002F2D B90B000000          <1>     mov ecx, 11
   482 00002F32 B020                <1>     mov al, " "
   483 00002F34 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   484 00002F36 5F                  <1>     pop rdi
   485 00002F37 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   486 00002F3A EB1D                <1>     jmp short asciiFilenameToFCB.processName
   487                              <1> asciiFilenameToFCB:
   488                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   489                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   490                              <1> ;Also doesn't check if chars are valid
   491                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   492                              <1> ;Name is space padded.
   493                              <1> ;Input: rsi = ASCII string buffer
   494                              <1> ;       rdi = FCB name buffer
   495                              <1> ;Output: al = Char that terminated the source string 
   496 00002F3C 53                  <1>     push rbx    
   497 00002F3D 57                  <1>     push rdi
   498 00002F3E B90B000000          <1>     mov ecx, 11
   499 00002F43 B020                <1>     mov al, " "
   500 00002F45 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   501 00002F47 5F                  <1>     pop rdi
   502 00002F48 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   503                              <1>     ;Preprocess for Dir Searches
   504 00002F4B 803E2E              <1>     cmp byte [rsi], "."
   505 00002F4E 7509                <1>     jne .processName
   506 00002F50 A4                  <1>     movsb   ;Store the first dot
   507 00002F51 803E2E              <1>     cmp byte [rsi], "."
   508 00002F54 752C                <1>     jne .exitBadChar
   509 00002F56 A4                  <1>     movsb
   510 00002F57 EB29                <1>     jmp short .exitBadChar
   511                              <1> .processName:
   512 00002F59 AC                  <1>     lodsb   ;Get the char in al
   513 00002F5A 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   514 00002F5C 7426                <1>     jz .exit
   515 00002F5E 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   516 00002F60 7407                <1>     je .extSpace
   517 00002F62 3C2E                <1>     cmp al, "."
   518 00002F64 740C                <1>     je .ext
   519 00002F66 AA                  <1>     stosb   ;Store the char
   520 00002F67 EBF0                <1>     jmp short .processName
   521                              <1> .extSpace:
   522                              <1> ;Now we scan for a period in the name
   523 00002F69 AC                  <1>     lodsb   ;Get a char and increase rsi
   524 00002F6A 84C0                <1>     test al, al
   525 00002F6C 7416                <1>     jz .exit
   526 00002F6E 3C2E                <1>     cmp al, "."     ;If al is not a period...
   527 00002F70 75F7                <1>     jne .extSpace   ; keep searching
   528                              <1> .ext:
   529 00002F72 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   530                              <1> .processExt:
   531 00002F76 AC                  <1>     lodsb
   532 00002F77 84C0                <1>     test al, al
   533 00002F79 7409                <1>     jz .exit
   534 00002F7B 3C20                <1>     cmp al, " "
   535 00002F7D 7405                <1>     je .exit
   536 00002F7F AA                  <1>     stosb
   537 00002F80 EBF4                <1>     jmp short .processExt
   538                              <1> .exitBadChar:
   539 00002F82 30C0                <1>     xor al, al  ;Return a null terminator
   540                              <1> .exit:
   541 00002F84 5B                  <1>     pop rbx
   542                              <1>     return
    13                              <2> %%_ret:
    14 00002F85 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   543                              <1> 
   544                              <1> findLastPathComponant:
   545                              <1> ;Finds the last path componant of an ASCIIZ path string
   546                              <1> ;Input: rdi -> Head of the path to find last componant on
   547                              <1> ;Output: rdi -> Start of the last componant
   548 00002F86 50                  <1>     push rax
   549 00002F87 51                  <1>     push rcx
   550 00002F88 31C9                <1>     xor ecx, ecx
   551 00002F8A FFC9                <1>     dec ecx
   552 00002F8C 31C0                <1>     xor eax, eax
   553 00002F8E F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   554 00002F90 F7D1                <1>     not ecx     ;This gets the count of chars  
   555 00002F92 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   556 00002F95 8A0590D0FFFF        <1>     mov al, byte [pathSep]
   557 00002F9B FD                  <1>     std
   558 00002F9C F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   559 00002F9E FC                  <1>     cld
   560 00002F9F 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   561 00002FA1 48FFC7              <1>     inc rdi     ;Point at pathsep
   562                              <1> .exit:
   563 00002FA4 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   564 00002FA7 59                  <1>     pop rcx
   565 00002FA8 58                  <1>     pop rax
   566                              <1>     return
    13                              <2> %%_ret:
    14 00002FA9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   567                              <1> 
   568                              <1> FCBToAsciiz:
   569                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   570                              <1> ;Name is space padded too
   571                              <1> ;Input: rsi = FCB name buffer
   572                              <1> ;       rdi = ASCIIZ string buffer
   573 00002FAA B908000000          <1>     mov ecx, 8
   574 00002FAF F3A4                <1>     rep movsb   ;Move the name over
   575                              <1> .scanNameSpace:
   576 00002FB1 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   577 00002FB5 750D                <1>     jne .ext
   578 00002FB7 48FFCF              <1>     dec rdi
   579 00002FBA FFC1                <1>     inc ecx
   580 00002FBC 81F908000000        <1>     cmp ecx, 8
   581 00002FC2 72ED                <1>     jb .scanNameSpace
   582                              <1> .ext:
   583 00002FC4 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   584 00002FC9 7506                <1>     jne .validExt
   585 00002FCB 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   586 00002FCF 7415                <1>     je .exit
   587                              <1> .validExt:
   588 00002FD1 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   589 00002FD3 AA                  <1>     stosb
   590 00002FD4 B903000000          <1>     mov ecx, 3
   591 00002FD9 F3A4                <1>     rep movsb   ;Move the three extension chars over
   592                              <1> .scanExtSpace:
   593 00002FDB 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   594 00002FDF 7505                <1>     jne .exit
   595 00002FE1 48FFCF              <1>     dec rdi
   596 00002FE4 EBF5                <1>     jmp short .scanExtSpace
   597                              <1> .exit:
   598 00002FE6 31C0                <1>     xor eax, eax
   599 00002FE8 AA                  <1>     stosb   ;Store a null at the end
   600                              <1>     return
    13                              <2> %%_ret:
    14 00002FE9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   601                              <1>     
   602                              <1> cpDelimPathToBufz:
   603                              <1> ;Copy a delimited path into buffer and null terminate.
   604                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   605                              <1> ;       rdi -> Buffer to store null terminated path in
   606                              <1> ;Output: rsi -> First char past pathname delimiter
   607                              <1> ;       rdi -> One char past null terminator on pathname buffer
   608 00002FEA 53                  <1>     push rbx
   609 00002FEB 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   610                              <1> .lp:
   611 00002FEE AC                  <1>     lodsb   ;Get the char
   612 00002FEF 3C0D                <1>     cmp al, CR
   613 00002FF1 7412                <1>     je .gotRedirPath
   614 00002FF3 E8C9FEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   615 00002FF8 740B                <1>     jz .gotRedirPath 
   616 00002FFA 3A052CD0FFFF        <1>     cmp al, byte [switchChar]
   617 00003000 7403                <1>     je .gotRedirPath
   618 00003002 AA                  <1>     stosb   ;Store this char and loop next char
   619 00003003 EBE9                <1>     jmp short .lp
   620                              <1> .gotRedirPath:
   621 00003005 50                  <1>     push rax    ;Save the char on stack
   622 00003006 30C0                <1>     xor al, al  ;Get null terminator char
   623 00003008 4829FB              <1>     sub rbx, rdi
   624 0000300B 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   625 00003012 7412                <1>     je .notColon
   626 00003014 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   627 0000301B 7409                <1>     je .notColon
   628 0000301D 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   629 00003021 7503                <1>     jne .notColon
   630 00003023 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   631                              <1> .notColon:
   632 00003026 AA                  <1>     stosb   ;Store the null terminator for the redir path
   633 00003027 58                  <1>     pop rax ;Get back the char in al
   634 00003028 5B                  <1>     pop rbx
   635                              <1>     return
    13                              <2> %%_ret:
    14 00003029 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   636                              <1> 
   637                              <1> buildCommandPath:
   638                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   639 0000302A 0FB6058AD0FFFF      <1>     movzx eax, byte [arg1Off]
   640 00003031 4C8B05D7CFFFFF      <1>     mov r8, [pspPtr]
   641 00003038 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   642 0000303F 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   643                              <1> copyArgumentToSearchSpec:
   644                              <1> ;Copies an arbitrary delimited path pointed to by rsi into rdi and null terminates.
   645 00003042 66C70517D4FFFF0000  <1>     mov word [searchSpec], 0    ;Make sure we clean up search spec first!
   646 0000304B 488D3D10D4FFFF      <1>     lea rdi, searchSpec
   647 00003052 E893FFFFFF          <1>     call cpDelimPathToBufz
   648                              <1>     return
    13                              <2> %%_ret:
    14 00003057 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   649                              <1> 
   650                              <1> scanForWildcards:
   651                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   652                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   653 00003058 50                  <1>     push rax
   654 00003059 56                  <1>     push rsi
   655                              <1> .lp:
   656 0000305A AC                  <1>     lodsb
   657 0000305B 3C3F                <1>     cmp al, "?"
   658 0000305D 740A                <1>     je .exit
   659 0000305F 3C2A                <1>     cmp al, "*"
   660 00003061 7406                <1>     je .exit
   661 00003063 84C0                <1>     test al, al
   662 00003065 75F3                <1>     jnz .lp
   663 00003067 FEC0                <1>     inc al  ;This will clear the ZF
   664                              <1> .exit:
   665 00003069 5E                  <1>     pop rsi
   666 0000306A 58                  <1>     pop rax
   667                              <1>     return
    13                              <2> %%_ret:
    14 0000306B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   668                              <1> 
   669                              <1> printDecimalWord:
   670                              <1> ;Takes qword in rax and print it's decimal representation
   671                              <1> ;Takes the qword in eax and prints its decimal representation
   672 0000306C 31C9                <1>     xor ecx, ecx
   673 0000306E 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   674 00003070 85C0                <1>     test eax, eax
   675 00003072 750C                <1>     jnz .notZero
   676 00003074 B930000000          <1>     mov ecx, "0"
   677 00003079 BD01000000          <1>     mov ebp, 1  ;Print one digit
   678 0000307E EB3E                <1>     jmp short .dpfb2
   679                              <1> .notZero:
   680 00003080 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   681 00003082 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   682                              <1> .dpfb0:
   683 00003087 FFC5                <1>     inc ebp
   684 00003089 81FD08000000        <1>     cmp ebp, 8
   685 0000308F 7206                <1>     jb .dpfb00
   686 00003091 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   687 00003095 EB04                <1>     jmp short .dpfb01
   688                              <1> .dpfb00:
   689 00003097 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   690                              <1> .dpfb01:
   691 0000309B 31D2                <1>     xor edx, edx
   692 0000309D 48F7F6              <1>     div rsi
   693 000030A0 80C230              <1>     add dl, '0'
   694 000030A3 80FA39              <1>     cmp dl, '9'
   695 000030A6 7603                <1>     jbe .dpfb1
   696 000030A8 80C207              <1>     add dl, 'A'-'0'-10
   697                              <1> .dpfb1:
   698 000030AB 81FD08000000        <1>     cmp ebp, 8
   699 000030B1 7204                <1>     jb .dpfb10
   700 000030B3 88D3                <1>     mov bl, dl ;Add the bottom bits
   701 000030B5 EB02                <1>     jmp short .dpfb11
   702                              <1> .dpfb10:
   703 000030B7 88D1                <1>     mov cl, dl    ;Save remainder byte
   704                              <1> .dpfb11:
   705 000030B9 4885C0              <1>     test rax, rax
   706 000030BC 75C9                <1>     jnz .dpfb0
   707                              <1> .dpfb2:
   708 000030BE 81FD08000000        <1>     cmp ebp, 8
   709 000030C4 7208                <1>     jb .dpfb20
   710 000030C6 88DA                <1>     mov dl, bl
   711 000030C8 48C1EB08            <1>     shr rbx, 8
   712 000030CC EB06                <1>     jmp short .dpfb21
   713                              <1> .dpfb20:
   714 000030CE 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   715 000030D0 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   716                              <1> .dpfb21:
   717 000030D4 B402                <1>     mov ah, 02h
   718 000030D6 CD21                <1>     int 21h
   719 000030D8 FFCD                <1>     dec ebp
   720 000030DA 75E2                <1>     jnz .dpfb2
   721                              <1>     return
    13                              <2> %%_ret:
    14 000030DC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   722                              <1> 
   723                              <1> getDecimalWord:
   724                              <1> ;Works on MAX A dword in eax
   725                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   726 000030DD 31C9                <1>     xor ecx, ecx
   727 000030DF 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   728 000030E1 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   729                              <1> .dpfb0:
   730 000030E6 FFC5                <1>     inc ebp
   731 000030E8 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   732 000030EC 31D2                <1>     xor edx, edx
   733 000030EE 48F7F3              <1>     div rbx
   734 000030F1 80C230              <1>     add dl, '0'
   735 000030F4 80FA39              <1>     cmp dl, '9'
   736 000030F7 7603                <1>     jbe .dpfb1
   737 000030F9 80C207              <1>     add dl, 'A'-'0'-10
   738                              <1> .dpfb1:
   739 000030FC 88D1                <1>     mov cl, dl    ;Save remainder byte
   740 000030FE 4885C0              <1>     test rax, rax
   741 00003101 75E3                <1>     jnz .dpfb0
   742                              <1>     return
    13                              <2> %%_ret:
    14 00003103 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   743                              <1> 
   744                              <1> freezePC:
   745 00003104 488D1576DCFFFF      <1>     lea rdx, memBad1
   746 0000310B B409                <1>     mov ah, 09h
   747 0000310D CD21                <1>     int 21h
   748                              <1> .altEP:
   749 0000310F 488D1594DCFFFF      <1>     lea rdx, memBad3
   750 00003116 B409                <1>     mov ah, 09h
   751 00003118 CD21                <1>     int 21h
   752                              <1> .lp:
   753 0000311A F390                <1>     pause
   754 0000311C F4                  <1>     hlt
   755 0000311D EBFB                <1>     jmp short .lp
   756                              <1> 
   757                              <1> setDTA:
   758 0000311F 50                  <1>     push rax
   759 00003120 52                  <1>     push rdx
   760 00003121 488D15A8CFFFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   761 00003128 B8001A0000          <1>     mov eax, 1A00h
   762 0000312D CD21                <1>     int 21h
   763 0000312F 5A                  <1>     pop rdx
   764 00003130 58                  <1>     pop rax
   765                              <1>     return
    13                              <2> %%_ret:
    14 00003131 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   766                              <1> 
   767                              <1> getDTA:
   768 00003132 488D1597CFFFFF      <1>     lea rdx, cmdFFBlock
   769                              <1>     return
    13                              <2> %%_ret:
    14 00003139 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 0000313A 53                  <1>     push rbx
    25 0000313B 51                  <1>     push rcx
    26 0000313C 52                  <1>     push rdx
    27 0000313D 57                  <1>     push rdi
    28 0000313E 56                  <1>     push rsi
    29 0000313F FC                  <1>     cld         ;Make String ops go forward
    30                              <1> 
    31 00003140 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00003143 488D15CBD6FFFF      <1>     lea rdx, crlf
    33 0000314A E863FAFFFF          <1>     call printString
    34                              <1> 
    35 0000314F 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    36 00003155 B90C000000          <1>     mov ecx, 0Ch
    37 0000315A 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    38 0000315C 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    39 0000315F 480FB7FF            <1>     movzx rdi, di
    40 00003163 4889FA              <1>     mov rdx, rdi    ;Copy error code
    41 00003166 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    42 0000316A 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    43 0000316D 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    44 00003170 488D152D010000      <1>     lea rdx, qword [.errorMsgTable]
    45 00003177 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    46 0000317B E832FAFFFF          <1>     call printString     ;Call DOS to print first part of message
    47                              <1> 
    48 00003180 488D150E020000      <1>     lea rdx, qword [.readmsg]
    49 00003187 488D3D16020000      <1>     lea rdi, qword [.writemsg]
    50 0000318E F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    51 00003191 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    52 00003195 E818FAFFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
    53                              <1> 
    54 0000319A F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    55 0000319D 0F85E7000000        <1>     jnz .charError
    56                              <1> ;Disk error continues here
    57 000031A3 488D15E4010000      <1>     lea rdx, qword [.drive] ;Drive message
    58 000031AA E803FAFFFF          <1>     call printString
    59 000031AF 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    60 000031B1 80C241              <1>     add dl, "A" ;Add ASCII code
    61 000031B4 B402                <1>     mov ah, 02h ;Print char in dl
    62 000031B6 CD21                <1>     int 21h
    63                              <1> .userInput:
    64 000031B8 E8EEF9FFFF          <1>     call printCRLF  ;Print new line
    65                              <1> ;Abort, Retry, Ignore, Fail is word order
    66                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    67                              <1> .userAbort:
    68                              <1> ;Abort is always an option
    69 000031BD 488D15EF010000      <1>     lea rdx, qword [.abortmsg]
    70 000031C4 E8E9F9FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
    71                              <1> .userRetry:
    72 000031C9 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    73 000031CC 7418                <1>     jz .userIgnore    ;If clear, dont print message
    74 000031CE 488D15F6010000      <1>     lea rdx, qword [.betweenMsg]
    75 000031D5 E8D8F9FFFF          <1>     call printString
    76 000031DA 488D15DF010000      <1>     lea rdx, qword [.retrymsg]
    77 000031E1 E8CCF9FFFF          <1>     call printString
    78                              <1> .userIgnore:
    79 000031E6 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    80 000031E9 7418                <1>     jz .userFail
    81 000031EB 488D15D9010000      <1>     lea rdx, qword [.betweenMsg]
    82 000031F2 E8BBF9FFFF          <1>     call printString
    83 000031F7 488D15BB010000      <1>     lea rdx, qword [.ignoremsg]
    84 000031FE E8AFF9FFFF          <1>     call printString
    85                              <1> .userFail:
    86 00003203 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    87 00003206 7418                <1>     jz .userMsgEnd
    88 00003208 488D15BC010000      <1>     lea rdx, qword [.betweenMsg]
    89 0000320F E89EF9FFFF          <1>     call printString
    90 00003214 488D15AB010000      <1>     lea rdx, qword [.failmsg]
    91 0000321B E892F9FFFF          <1>     call printString
    92                              <1> .userMsgEnd:
    93 00003220 488D15A7010000      <1>     lea rdx, qword [.endMsg]
    94 00003227 E886F9FFFF          <1>     call printString
    95                              <1> ;Get user input now 
    96 0000322C 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
    97 0000322E 488D3D9C010000      <1>     lea rdi, qword [.responses] ;Go to start of string
    98 00003235 B401                <1>     mov ah, 01h ;STDIN without Console Echo
    99 00003237 CD21                <1>     int 21h ;Get char in al
   100 00003239 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   101 0000323B 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   102 0000323D 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   103                              <1> .uip1:
   104 0000323F AE                  <1>     scasb   ;Compare char to list, offset gives return code
   105 00003240 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   106 00003242 FFC1                <1>     inc ecx
   107 00003244 81F904000000        <1>     cmp ecx, 4
   108 0000324A 75F3                <1>     jne .uip1
   109 0000324C E967FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   110                              <1> .validInput:
   111 00003251 E855F9FFFF          <1>     call printCRLF   ;Note the input was accepted
   112 00003256 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   113                              <1> ;Now check if the input is permitted
   114 00003258 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   115 0000325A 7427                <1>     je .cehExit
   116 0000325C 84C0                <1>     test al, al ;Check if 0 => Ignore
   117 0000325E 740F                <1>     je .viIgnore
   118 00003260 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   119 00003262 7416                <1>     je .viRetry
   120                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   121 00003264 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   122 00003267 0F844BFFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   123 0000326D EB14                <1>     jmp short .cehExit
   124                              <1> .viIgnore:
   125 0000326F F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   126 00003272 0F8440FFFFFF        <1>     jz .userInput
   127 00003278 EB09                <1>     jmp short .cehExit
   128                              <1> .viRetry:
   129 0000327A F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   130 0000327D 0F8435FFFFFF        <1>     jz .userInput
   131                              <1> .cehExit:
   132 00003283 5E                  <1>     pop rsi
   133 00003284 5F                  <1>     pop rdi
   134 00003285 5A                  <1>     pop rdx
   135 00003286 59                  <1>     pop rcx
   136 00003287 5B                  <1>     pop rbx
   137 00003288 48CF                <1>     iretq
   138                              <1> .charError:
   139 0000328A B908000000          <1>     mov ecx, 8  ;8 chars in device name
   140 0000328F 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   141                              <1> .ce1:
   142 00003296 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   143 00003297 88C2                <1>     mov dl, al  ;Move char into dl
   144 00003299 B402                <1>     mov ah, 02h
   145 0000329B CD21                <1>     int 21h ;Print char
   146 0000329D E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   147 0000329F E914FFFFFF          <1>     jmp .userInput
   148                              <1> 
   149                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   150 000032A4 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   150 000032AD 746563742024202020  <1>
   151 000032B6 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   151 000032BF 6E6974202420202020  <1>
   152 000032C8 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   152 000032D1 202420202020202020  <1>
   153 000032DA 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   153 000032E3 6F6D6D616E64202420  <1>
   154 000032EC 446174612024202020- <1>             db "Data $            "       ;Error 4
   154 000032F5 202020202020202020  <1>
   155 000032FE 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   155 00003307 737420242020202020  <1>
   156 00003310 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   156 00003319 202020202020202020  <1>
   157 00003322 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   157 0000332B 656469612024202020  <1>
   158 00003334 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   158 0000333D 7420466F756E642024  <1>
   159 00003346 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   159 0000334F 706572202420202020  <1>
   160 00003358 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   160 00003361 6C7420242020202020  <1>
   161 0000336A 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   161 00003373 742024202020202020  <1>
   162 0000337C 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   162 00003385 61696C757265202420  <1>
   163                              <1> 
   164 0000338E 64726976652024      <1> .drive      db "drive $"
   165 00003395 6572726F7220726561- <1> .readmsg    db "error reading $"
   165 0000339E 64696E672024        <1>
   166 000033A4 6572726F7220777269- <1> .writemsg   db "error writing $"
   166 000033AD 74696E672024        <1>
   167 000033B3 41626F727424        <1> .abortmsg   db "Abort$" 
   168 000033B9 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   169 000033C0 526574727924        <1> .retrymsg   db "Retry$"
   170 000033C6 4661696C24          <1> .failmsg    db "Fail$"
   171 000033CB 2C2024              <1> .betweenMsg db ", $"
   172 000033CE 3F2024              <1> .endMsg     db "? $"
   173 000033D1 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   174                              <1> 
   175                              <1> int23h:
   176 000033D5 F60551CCFFFFFF      <1>     test byte [permaSwitch], -1
   177 000033DC 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   178                              <1>     ;Else, we juggle parent PSP's
   179 000033DE 50                  <1>     push rax
   180 000033DF 53                  <1>     push rbx
   181 000033E0 488B0530CCFFFF      <1>     mov rax, qword [realParent]
   182 000033E7 488B1D21CCFFFF      <1>     mov rbx, qword [pspPtr]
   183 000033EE 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   184 000033F2 5B                  <1>     pop rbx
   185 000033F3 58                  <1>     pop rax
   186                              <1> .exit:
   187 000033F4 F9                  <1>     stc     ;Set CF to kill the task
   188 000033F5 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    19                                  
    20                                  endOfAllocNoMaster: ;End of alloc if not the master cmd
    21                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:  ;Yeet this is this is a child command processor, length 168 chars!
     3                              <1> ;Note this environment DOES NOT contain the full path to the program being launched
     4 000033F8 504154483D00        <1>     db "PATH=",0
     5 000033FE 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 00003406 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0
     7 0000340F 442E434F4D00        <1>
     8 00003415 202020202020202020- <1>     db (165 - ($ - masterEnv)) dup (" ")    ;Pad the environment with spaces
     8 0000341E 202020202020202020- <1>
     8 00003427 202020202020202020- <1>
     8 00003430 202020202020202020- <1>
     8 00003439 202020202020202020- <1>
     8 00003442 202020202020202020- <1>
     8 0000344B 202020202020202020- <1>
     8 00003454 202020202020202020- <1>
     8 0000345D 202020202020202020- <1>
     8 00003466 202020202020202020- <1>
     8 0000346F 202020202020202020- <1>
     8 00003478 202020202020202020- <1>
     8 00003481 202020202020202020- <1>
     8 0000348A 202020202020202020- <1>
     8 00003493 202020202020202020- <1>
     8 0000349C 20                  <1>
     9 0000349D 0000                <1>     dw 0    ;End of environment marker
    22                                  endOfAlloc: ;End of alloc if the master cmd
    23                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    24                                  Segment transient align=1 follows=.data
    25                                  ;This segment always gets ejected post load
    26                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D15ED010000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    11                              <1> .okVersion:
    12                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    13 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    14 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    15 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    16 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    17                              <1> ;Setup Int 22h, Int 23h and Int 24h
    18 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    19 0000002F 488905(2E000000)    <1>     mov qword [parentInt22], rax
    20                              <1> 
    21 00000036 488D15(3A310000)    <1>     lea rdx, critErrorHandler
    22 0000003D 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    23 00000041 B824250000          <1>     mov eax, 2524h
    24 00000046 CD21                <1>     int 21h
    25 00000048 488D15(D5330000)    <1>     lea rdx, int23h
    26 0000004F 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    27 00000053 B823250000          <1>     mov eax, 2523h
    28 00000058 CD21                <1>     int 21h
    29 0000005A 488D15(480E0000)    <1>     lea rdx, applicationReturn
    30 00000061 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    31 00000065 B822250000          <1>     mov eax, 2522h
    32 0000006A CD21                <1>     int 21h
    33                              <1> ;Get a pointer to DOS Sysvars
    34 0000006C B452                <1>     mov ah, 52h ;Get sysvars
    35 0000006E CD21                <1>     int 21h
    36 00000070 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    37                              <1> ;Call for simple internationalisation data
    38 00000077 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    39 0000007C CD21                <1>     int 21h
    40 0000007E 3CFF                <1>     cmp al, -1
    41 00000080 7412                <1>     je .skipSwitch
    42 00000082 8815(2C000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    43 00000088 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    44 0000008B 7507                <1>     jne .skipSwitch
    45 0000008D C605(2B000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    46                              <1> .skipSwitch:
    47 00000094 B800380000          <1>     mov eax, 3800h  ;Get current country data
    48 00000099 488D15(36000000)    <1>     lea rdx, ctryData
    49 000000A0 CD21                <1>     int 21h ;Write the data to the internal country table
    50                              <1> ;Now determine if this is the master copy of COMMAND.COM
    51                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    52 000000A2 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    53 000000A7 CD21                <1>     int 21h
    54 000000A9 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    55 000000AC B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    56 000000B1 CD21                <1>     int 21h
    57 000000B3 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    58 000000B6 755C                <1>     jne .skipMaster
    59                              <1> ;Ok so we are master command.com
    60                              <1> ;Now make myself the real parent
    61 000000B8 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    62 000000BF 4C8905(17000000)    <1>     mov qword [realParent], r8
    63                              <1> ;Set master environment as mine
    64 000000C6 488D05(F8330000)    <1>     lea rax, masterEnv
    65 000000CD 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    66                              <1> ;Set current Drive in COMSPEC
    67 000000D1 B019                <1>     mov al, 19h ;Get current Drive
    68 000000D3 CD21                <1>     int 21h
    69 000000D5 0441                <1>     add al, "A"
    70 000000D7 8805(06340000)      <1>     mov byte [masterEnv.cspec], al
    71                              <1> ;Set Int 2Eh up
    72 000000DD 488D15(90160000)    <1>     lea rdx, int2Eh
    73 000000E4 B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    74 000000E9 CD21                <1>     int 21h
    75                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    76                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    77 000000EB 488D15(15080000)    <1>     lea rdx, crlf
    78 000000F2 B409                <1>     mov ah, 09h
    79 000000F4 CD21                <1>     int 21h
    80 000000F6 E8(9C200000)        <1>     call time
    81 000000FB E8(D31F0000)        <1>     call date
    82 00000100 488D15(15080000)    <1>     lea rdx, crlf
    83 00000107 B409                <1>     mov ah, 09h
    84 00000109 CD21                <1>     int 21h
    85 0000010B 488D1D(9F340000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
    86 00000112 EB32                <1>     jmp short .printInit
    87                              <1> .skipMaster:
    88 00000114 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
    89 0000011B 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
    90 00000123 0FB605(2C000000)    <1>     movzx eax, byte [switchChar]
    91 0000012A F2AE                <1>     repne scasb
    92 0000012C 67E310              <1>     jecxz .noSwitches
    93 0000012F 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
    94 00000132 24DF                <1>     and al, 0DFh    ;Convert to UC
    95 00000134 3C50                <1>     cmp al, "P" ;Is it permanent switch?
    96 00000136 7507                <1>     jne .noSwitches
    97 00000138 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    98                              <1> .noSwitches:
    99 0000013F 488D1D(F8330000)    <1>     lea rbx, endOfAllocNoMaster  ;This is the base address to jettison
   100                              <1> .printInit:
   101                              <1> ;Finish by printing INIT string.
   102 00000146 53                  <1>     push rbx
   103 00000147 488D153A000000      <1>     lea rdx, initString
   104 0000014E B409                <1>     mov ah, 09h
   105 00000150 CD21                <1>     int 21h ;Print init string
   106 00000152 E8(E1270000)        <1>     call version.printVersionNumber
   107 00000157 488D1560000000      <1>     lea rdx, initString2
   108 0000015E B409                <1>     mov ah, 09h
   109 00000160 CD21                <1>     int 21h ;Print init string
   110 00000162 5B                  <1>     pop rbx
   111                              <1>     ;Now we add the stack to the alloc and paragraph align
   112 00000163 4881C340060000      <1>     add rbx, stackSize
   113 0000016A 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   114 00000171 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   115 00000175 48C1E304            <1>     shl rbx, 4
   116 00000179 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   117 0000017C 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   118 00000183 E9(350E0000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   119                              <1> ;Loader Data here
   120                              <1> initString: 
   121 00000188 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   121 00000191 66696320436F6D7075- <1>
   121 0000019A 746572205265736561- <1>
   121 000001A3 726368285229205343- <1>
   121 000001AC 502F444F5328522920- <1>
   121 000001B5 56657273696F6E2024  <1>
   122                              <1> initString2:
   123 000001BE 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",CR,LF,"$"
   123 000001C7 202020284329436F70- <1>
   123 000001D0 797269676874205363- <1>
   123 000001D9 69656E746966696320- <1>
   123 000001E2 436F6D707574657220- <1>
   123 000001EB 526573656172636820- <1>
   123 000001F4 323032342E0D0A24    <1>
   124 000001FC 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   124 00000205 20444F532076657273- <1>
   124 0000020E 696F6E0D0A24        <1>
    27                                  
    28                                  stackSize equ 200*8    ;200 QWORD stack
    28          ------------------       info: assembly required 1+3+2 passes

