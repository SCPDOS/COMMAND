     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber             db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector         dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster     db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSectorsPerClusterShift db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset              dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs           db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries   dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset      dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dClusterCount           dd ?  ;Total number of clusters in data area
    27 00000013 ????????            <1>     .dFATlength              dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor        db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag             db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr             dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?  ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?  ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?  ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?  ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?  ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?  ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?  ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?  ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?  ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?  ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> struc psp
   344 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   345 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   346 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   347 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   348 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   349 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   350 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   351                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   352                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   353                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   354                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   355                              <1> ; always used and jftSize.
   356                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   357 0000002A <res 14h>           <1>     .jobFileTbl resb dfltJFTsize ;Main File handle array, JFT
   358 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   359 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   360 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   361 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   362 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   363 0000005B ??                  <1>                 db ?  ;Reserved byte
   364                              <1> ;The below are in the same place as in DOS.
   365                              <1>     .cmdLineArgPtr: ;Symbol for future use
   366 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   367 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   368                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   369 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   370 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   371                              <1> endstruc
   372                              <1> 
   373                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   374                              <1> 
   375                              <1> struc clkStruc
   376 00000000 ????                <1>     .dateWord   dw ?
   377 00000002 ??                  <1>     .minutes    db ?
   378 00000003 ??                  <1>     .hours      db ?
   379 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   380 00000005 ??                  <1>     .seconds    db ?
   381                              <1> endstruc
   382                              <1> 
   383                              <1> 
   384                              <1> struc extCtryStruc
   385 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   386 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   387 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   388 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   389 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   390                              <1>                         ;0 = month day year hh:mm:ss
   391                              <1>                         ;1 = day month year hh:mm:ss
   392                              <1>                         ;2 = year month day hh:mm:ss
   393 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   394 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   395 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   396 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   397 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   398 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   399                              <1>                         ;0 = Symbol leads, without space
   400                              <1>                         ;1 = Symbol follows, without space
   401                              <1>                         ;2 = Symbol leads, one space
   402                              <1>                         ;3 = Symbol follows, one space
   403                              <1>                         ;4 = Symbol replace decimal separator
   404 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   405 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   406 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   407 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   408 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   409                              <1> endstruc
   410                              <1> 
   411                              <1> struc countryStruc
   412 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   413                              <1>                         ;0 = month day year hh:mm:ss
   414                              <1>                         ;1 = day month year hh:mm:ss
   415                              <1>                         ;2 = year month day hh:mm:ss
   416 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   417 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   418 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   419 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   420 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   421 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   422                              <1>                         ;0 = Symbol leads, without space
   423                              <1>                         ;1 = Symbol follows, without space
   424                              <1>                         ;2 = Symbol leads, one space
   425                              <1>                         ;3 = Symbol follows, one space
   426                              <1>                         ;4 = Symbol replace decimal separator
   427 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   428 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   429 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   430 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   431 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   432                              <1> endstruc
   433                              <1> 
   434                              <1> ;Critical Error AH bitfield equates
   435                              <1> critRead    equ 0h
   436                              <1> critWrite   equ 1h
   437                              <1> critDOS     equ 0h
   438                              <1> critFAT     equ 2h
   439                              <1> critDir     equ 4h
   440                              <1> critData    equ 6h
   441                              <1> critFailOK  equ 8h
   442                              <1> critRetryOK equ 10h
   443                              <1> critIgnorOK equ 20h
   444                              <1> critCharDev equ 80h
   445                              <1> 
   446                              <1> critIgnore  equ 0
   447                              <1> critRetry   equ 1
   448                              <1> critAbort   equ 2
   449                              <1> critFail    equ 3
   450                              <1> 
   451                              <1> ;MISC ASCII control chars
   452                              <1> NUL equ 00h ;^@         | ASCII Null
   453                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   454                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   455                              <1> BEL equ 07h ;^G         | ASCII Bell
   456                              <1> BSP equ 08h ;^H         | ASCII Backspace
   457                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   458                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   459                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   460                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   461                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   462                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   463                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   464                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   465                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   466                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   467                              <1> SPC equ 20h ;Printable  | ASCII Space
   468                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   469                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   470                              <1> 
   471                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   472                              <1> ;Extended Ascii Codes
   473                              <1> eF1     equ 3Bh ;F1 second byte
   474                              <1> eF2     equ 3Ch ;F2 second byte
   475                              <1> eF3     equ 3Dh ;F3 second byte
   476                              <1> eF4     equ 3Eh ;F4 second byte
   477                              <1> eF5     equ 3Fh ;F5 second byte
   478                              <1> eF6     equ 40h ;F6 second byte
   479                              <1> eF7     equ 41h ;F7 second byte
   480                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   481                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   482                              <1> eIns    equ 52h ;Insert second byte
   483                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   484                              <1> 
   485                              <1> ;Default Configuration for the system
   486                              <1> 
   487                              <1> buffersDefault  equ 30
   488                              <1> filesDefault    equ 20
   489                              <1> fcbsDefault     equ 4
   490                              <1> safeFcbsDeflt   equ 0
   491                              <1> lastDriveDeflt  equ 5   
   492                              <1> 
   493                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   494                              <1> ; then the char has this property.
   495                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   496                              <1> termChar    equ 2   ;Terminator char type
   497                              <1> sepChar     equ 4   ;Separator char type
   498                              <1> badFCBChar  equ 8   ;FCB filename char
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       resb 5  
    66 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   resb 1
    68 00000008 ????????????????    <1>     .filename   resb 8
    69 00000010 ??????              <1>     .fileext    resb 3
    70 00000013 ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    resb 8
    73 00000020 ??????              <1>     .newExt     resb 3
    74 00000023 ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI24     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    25 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    26 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    27 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    28 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    29 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    30                              <1> endstruc
    31                              <1> 
    32                              <1> struc execProg  ;For use with EXEC-ing a child task
    33 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    34 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    35 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    36 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    37                              <1> endstruc
    38                              <1> 
    39                              <1> ;Directory attribute equates
    40                              <1>     dirReadOnly     equ 01h
    41                              <1>     dirHidden       equ 02h
    42                              <1>     dirSystem       equ 04h
    43                              <1>     dirVolumeID     equ 08h
    44                              <1>     dirDirectory    equ 10h
    45                              <1>     dirArchive      equ 20h
    46                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    47                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    48                              <1>     ;If any of the three bits are set, then ALL three bits are set
    49                              <1>     ; in addition to whatever the user passed to search for.
    50                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    51                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 5C                  <1> pathSep     db "\"  ;Default path sep
    11 0000002A 2F                  <1> switchChar  db "/"  ;Default switch char
    12 0000002B 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    13 0000002C 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    14                              <1> ;Static strings, not used in command line parsing
    15 00000034 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    15 0000003D 000000000000000000- <1>
    15 00000046 000000000000000000- <1>
    15 0000004F 000000000000000000- <1>
    15 00000058 0000                <1>
    16 0000005A 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    16 00000063 000000000000000000- <1>
    16 0000006C 000000000000000000- <1>
    16 00000075 000000000000000000- <1>
    16 0000007E 000000000000000000- <1>
    16 00000087 000000000000000000- <1>
    16 00000090 000000000000000000- <1>
    16 00000099 00000000            <1>
    17 0000009D 00                  <1> inCritical  db 0    ;Up if processing a command.
    18 0000009E FF                  <1> echoFlg     db -1   ;Global Echo flag, starts up!
    19 0000009F FFFF                <1> errHdls     dw -1   ;Set to the STDIO handles. Non -1 => Handles swapped
    20                              <1> 
    21                              <1> cmdLineStatePtr:
    22 000000A1 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    23 000000A2 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    24 000000A4 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    25                              <1> ;These variables are valid for a SINGLE command in a command line
    26                              <1> ;Next two bytes, if set to -1, flags error
    27 000000A6 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    28 000000A7 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    29                              <1> ;                    If 2, we are redirecting output to a file, by appending
    30 000000A8 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    31 000000AA FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    32                              <1> 
    33                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    34 000000AC 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    35 000000AD 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    36 000000AE 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    37                              <1> 
    38 000000AF 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    39 000000B0 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    40 000000B1 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    41                              <1> 
    42 000000B2 00                  <1> switchFnd   db 0    ;Set if a switch char is found
    43                              <1> cmdStateL equ $ - cmdStatePtr
    44                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    45                              <1> 
    46                              <1> ;Batch state variables. Batch changes current dir to dir of batch file!
    47 000000B3 00                  <1> batFlag     db 0    ;Batch mode flag. Set to -1 if batch mode on
    48 000000B4 0000000000000000    <1> batBlockPtr dq 0    ;Ptr to the batch block
    49 000000BC 000000000000000000- <1> batOgCD     db fileSpecZL dup (0)   ;Original current dir for batch
    49 000000C5 000000000000000000- <1>
    49 000000CE 000000000000000000- <1>
    49 000000D7 000000000000000000- <1>
    49 000000E0 000000000000000000- <1>
    49 000000E9 000000000000000000- <1>
    49 000000F2 000000000000000000- <1>
    49 000000FB 000000000000000000- <1>
    49 00000104 00000000000000      <1>
    50 0000010B 000000000000000000- <1> batFile     db fileSpecZL dup (0)   ;Path to bat to execute. Qual with path!
    50 00000114 000000000000000000- <1>
    50 0000011D 000000000000000000- <1>
    50 00000126 000000000000000000- <1>
    50 0000012F 000000000000000000- <1>
    50 00000138 000000000000000000- <1>
    50 00000141 000000000000000000- <1>
    50 0000014A 000000000000000000- <1>
    50 00000153 00000000000000      <1>
    51                              <1> ;batCallPtr  dq 0    ;Ptr to the call state block
    52                              <1> 
    53                              <1> ;Structs and strings
    54                              <1> 
    55 0000015A 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    55 00000163 00000000000000      <1>
    56 0000016A 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    56 00000173 000000000000000000- <1>
    56 0000017C 000000000000000000- <1>
    56 00000185 000000000000000000- <1>
    56 0000018E 00000000000000      <1>
    57                              <1> 
    58 00000195 000000000000000000- <1> launchBlock db execProg_size dup (0)
    58 0000019E 000000000000000000- <1>
    58 000001A7 000000000000000000- <1>
    58 000001B0 0000000000          <1>
    59                              <1> 
    60 000001B5 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    60 000001BE 000000000000000000- <1>
    60 000001C7 000000000000000000- <1>
    60 000001D0 000000000000000000- <1>
    60 000001D9 000000000000000000- <1>
    60 000001E2 000000000000000000- <1>
    60 000001EB 000000000000000000- <1>
    60 000001F4 000000000000000000- <1>
    60 000001FD 000000000000000000- <1>
    60 00000206 000000000000000000- <1>
    60 0000020F 000000000000000000- <1>
    60 00000218 000000000000000000- <1>
    60 00000221 000000000000000000- <1>
    60 0000022A 000000000000000000- <1>
    60 00000233 00000000            <1>
    61                              <1> inBufferL   equ 127 ;127 chars so we can copy to PSP with terminating CR
    62 00000237 000000000000000000- <1> cpyBuffer   db cmdBufferL dup (0)   ;Copied input for processing
    62 00000240 000000000000000000- <1>
    62 00000249 000000000000000000- <1>
    62 00000252 000000000000000000- <1>
    62 0000025B 000000000000000000- <1>
    62 00000264 000000000000000000- <1>
    62 0000026D 000000000000000000- <1>
    62 00000276 000000000000000000- <1>
    62 0000027F 000000000000000000- <1>
    62 00000288 000000000000000000- <1>
    62 00000291 000000000000000000- <1>
    62 0000029A 000000000000000000- <1>
    62 000002A3 000000000000000000- <1>
    62 000002AC 000000000000000000- <1>
    62 000002B5 00000000            <1>
    63 000002B9 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)   ;Buffer with the command pipeline
    63 000002C2 000000000000000000- <1>
    63 000002CB 000000000000000000- <1>
    63 000002D4 000000000000000000- <1>
    63 000002DD 000000000000000000- <1>
    63 000002E6 000000000000000000- <1>
    63 000002EF 000000000000000000- <1>
    63 000002F8 000000000000000000- <1>
    63 00000301 000000000000000000- <1>
    63 0000030A 000000000000000000- <1>
    63 00000313 000000000000000000- <1>
    63 0000031C 000000000000000000- <1>
    63 00000325 000000000000000000- <1>
    63 0000032E 000000000000000000- <1>
    63 00000337 00000000            <1>
    64 0000033B 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)   ;Space for full path to a ext cmd
    64 00000344 000000000000000000- <1>
    64 0000034D 000000000000000000- <1>
    64 00000356 000000000000000000- <1>
    64 0000035F 000000000000000000- <1>
    64 00000368 000000000000000000- <1>
    64 00000371 000000000000000000- <1>
    64 0000037A 000000000000000000- <1>
    64 00000383 00000000000000      <1>
    65 0000038A 000000000000000000- <1> cmdName     db cmdNameL dup (0)     ;Cmd name prefixed by length 
    65 00000393 0000000000          <1>
    66                              <1> 
    67 00000398 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    67 000003A1 000000000000000000- <1>
    67 000003AA 000000000000000000- <1>
    67 000003B3 000000000000000000- <1>
    67 000003BC 000000000000000000- <1>
    67 000003C5 000000000000000000- <1>
    67 000003CE 000000000000000000- <1>
    67 000003D7 000000000000000000- <1>
    67 000003E0 00000000000000      <1>
    68 000003E7 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    68 000003F0 000000000000000000- <1>
    68 000003F9 000000000000000000- <1>
    68 00000402 000000000000000000- <1>
    68 0000040B 000000000000000000- <1>
    68 00000414 000000000000000000- <1>
    68 0000041D 000000000000000000- <1>
    68 00000426 000000000000000000- <1>
    68 0000042F 00000000000000      <1>
    69                              <1> 
    70                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    71 00000436 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    71 0000043F 000000000000000000- <1>
    71 00000448 000000000000000000- <1>
    71 00000451 000000000000000000- <1>
    71 0000045A 000000000000000000- <1>
    71 00000463 000000000000000000- <1>
    71 0000046C 000000000000000000- <1>
    71 00000475 000000000000000000- <1>
    71 0000047E 00000000000000      <1>
    72 00000485 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    72 0000048E 000000000000000000- <1>
    72 00000497 000000000000000000- <1>
    72 000004A0 000000000000000000- <1>
    72 000004A9 000000000000000000- <1>
    72 000004B2 000000000000000000- <1>
    72 000004BB 000000000000000000- <1>
    72 000004C4 000000000000000000- <1>
    72 000004CD 00000000000000      <1>
    73                              <1> 
    74 000004D4 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    75 000004DC 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    76                              <1> 
    77                              <1> ;Main scratch buffer for forming paths! Needs to be large enough to splice
    78                              <1> ; a really long invalid DOS path for PATH to work properly.
    79 000004E4 000000000000000000- <1> searchSpec  db 2*cmdBufferL dup (0)   
    79 000004ED 000000000000000000- <1>
    79 000004F6 000000000000000000- <1>
    79 000004FF 000000000000000000- <1>
    79 00000508 000000000000000000- <1>
    79 00000511 000000000000000000- <1>
    79 0000051A 000000000000000000- <1>
    79 00000523 000000000000000000- <1>
    79 0000052C 000000000000000000- <1>
    79 00000535 000000000000000000- <1>
    79 0000053E 000000000000000000- <1>
    79 00000547 000000000000000000- <1>
    79 00000550 000000000000000000- <1>
    79 00000559 000000000000000000- <1>
    79 00000562 000000000000000000- <1>
    79 0000056B 000000000000000000- <1>
    79 00000574 000000000000000000- <1>
    79 0000057D 000000000000000000- <1>
    79 00000586 000000000000000000- <1>
    79 0000058F 000000000000000000- <1>
    79 00000598 000000000000000000- <1>
    79 000005A1 000000000000000000- <1>
    79 000005AA 000000000000000000- <1>
    79 000005B3 000000000000000000- <1>
    79 000005BC 000000000000000000- <1>
    79 000005C5 000000000000000000- <1>
    79 000005CE 000000000000000000- <1>
    79 000005D7 000000000000000000- <1>
    79 000005E0 0000000000000000    <1>
    80                              <1> 
    81                              <1> ;Internal Function vars
    82                              <1> ;Dir Vars
    83 000005E8 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    84                              <1> ;                                   Bit[1] set => /P or /p specified
    85                              <1> ;                                   Bit[2] set => A file/path specified
    86 000005E9 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    87 000005EA 00000000            <1> dirFileCtr  dd 0    ;Used in /W mode, rollover after 5
    88 000005EE 00                  <1> dirDrv      db 0    ;0 based drive number to use
    89 000005EF 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
    89 000005F8 000000000000000000- <1>
    89 00000601 000000000000000000- <1>
    89 0000060A 000000000000000000- <1>
    89 00000613 000000000000000000- <1>
    89 0000061C 000000000000000000- <1>
    89 00000625 000000000000000000- <1>
    89 0000062E 000000000000000000- <1>
    89 00000637 000000000000000000- <1>
    89 00000640 000000000000000000- <1>
    89 00000649 000000000000000000- <1>
    89 00000652 000000000000000000- <1>
    89 0000065B 000000000000000000- <1>
    89 00000664 000000000000000000- <1>
    89 0000066D 00000000            <1>
    90 00000671 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
    90 0000067A 3F3F3F3F3F3F3F      <1>
    91                              <1> dirWideType equ 1
    92                              <1> dirPageType equ 2
    93                              <1> dirFileType equ 4
    94                              <1> ;Volume Vars
    95                              <1> volFcb:
    96                              <1>     istruc exFcb
    97 00000681 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    98 00000682 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    99 00000688 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
   100 00000689 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
   101 00000691 3F3F3F              <1>     at exFcb.fileext,   db "???"
   102 00000694 00000000            <1>     at exFcb.curBlock,  dd 0
   103 00000698 00<rep 15h>         <1>     iend 
   104                              <1> 
   105                              <1> ;Time/Date vars
   106 000006AD 00                  <1> td1 db 0    ;Minutes/Year
   107 000006AE 00                  <1> td2 db 0    ;Hours/Zero
   108 000006AF 00                  <1> td3 db 0    ;Hundredths/Day
   109 000006B0 00                  <1> td4 db 0    ;Seconds/Month
   110                              <1> 
   111                              <1> ;Rename/Copy/Delete Buffers
   112                              <1> delPath:
   113 000006B1 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   113 000006BA 000000000000000000- <1>
   113 000006C3 000000000000000000- <1>
   113 000006CC 000000000000000000- <1>
   113 000006D5 000000000000000000- <1>
   113 000006DE 000000000000000000- <1>
   113 000006E7 000000000000000000- <1>
   113 000006F0 000000000000000000- <1>
   113 000006F9 000000000000000000- <1>
   113 00000702 000000000000000000- <1>
   113 0000070B 000000000000000000- <1>
   113 00000714 000000000000000000- <1>
   113 0000071D 000000000000000000- <1>
   113 00000726 000000000000000000- <1>
   113 0000072F 00000000            <1>
   114 00000733 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   114 0000073C 000000000000000000- <1>
   114 00000745 000000000000000000- <1>
   114 0000074E 000000000000000000- <1>
   114 00000757 000000000000000000- <1>
   114 00000760 000000000000000000- <1>
   114 00000769 000000000000000000- <1>
   114 00000772 000000000000000000- <1>
   114 0000077B 000000000000000000- <1>
   114 00000784 000000000000000000- <1>
   114 0000078D 000000000000000000- <1>
   114 00000796 000000000000000000- <1>
   114 0000079F 000000000000000000- <1>
   114 000007A8 000000000000000000- <1>
   114 000007B1 00000000            <1>
   115 000007B5 0000000000000000    <1> srcPtr      dq 0    ;Where to copy the pattern to
   116 000007BD 0000000000000000    <1> destPtr     dq 0    ;Where to copy the pattern to
   117 000007C5 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   117 000007CE 2020                <1>
   118                              <1> ;Copy vars
   119 000007D0 FFFF                <1> sourceHdl   dw -1
   120 000007D2 FFFF                <1> destHdl     dw -1
   121 000007D4 0000                <1> srcHdlInfo  dw 0 ;Used to save the handle device info (bit 7 Set -> Char dev)
   122 000007D6 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time, if we cant alloc
   122 000007DF 000000000000000000- <1>
   122 000007E8 000000000000000000- <1>
   122 000007F1 000000000000000000- <1>
   122 000007FA 000000000000000000- <1>
   122 00000803 000000000000000000- <1>
   122 0000080C 000000000000000000- <1>
   122 00000815 000000000000000000- <1>
   122 0000081E 000000000000000000- <1>
   122 00000827 000000000000000000- <1>
   122 00000830 000000000000000000- <1>
   122 00000839 000000000000000000- <1>
   122 00000842 000000000000000000- <1>
   122 0000084B 000000000000000000- <1>
   122 00000854 0000                <1>
   123 00000856 0000000000000000    <1> cpBufPtr    dq 0    ;Ptr to the xfr arena
   124 0000085E 0000                <1> cpBufSz     dw 0    ;Copy Buffer size
   125 00000860 00                  <1> cpyFlg      db 0    ;Copy state flag
   126                              <1> 
   127                              <1> ascSrc      equ 1   ;Set if ascii copy for this source file. Else, binary
   128                              <1> ascDes      equ 2   ;Set if ascii write to file. Else, binary.
   129                              <1> catCpy      equ 4   ;Set if we are concatinating files. Default ASCII read.
   130                              <1> wcSrc       equ 8   ;Set if wc's in source pattern. Display source file names.
   131                              <1> 
   132                              <1> ;Environment manipulation vars
   133 00000861 0000                <1> envVarSz        dw 0    ;Env var size
   134 00000863 0000                <1> envVarNamSz     dw 0    ;Env var "name="" length
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 00000865 03444952            <1>     db 3, "DIR"
     8 00000869 1D1A                <1>     dw dir - startLbl
     9                              <1> 
    10 0000086B 024344              <1>     db 2, "CD"
    11 0000086E 011F                <1>     dw chdir - startLbl
    12                              <1> 
    13 00000870 054348444952        <1>     db 5, "CHDIR"
    14 00000876 011F                <1>     dw chdir - startLbl
    15                              <1> 
    16 00000878 024D44              <1>     db 2, "MD"
    17 0000087B 7C1F                <1>     dw mkdir - startLbl
    18                              <1> 
    19 0000087D 054D4B444952        <1>     db 5, "MKDIR"
    20 00000883 7C1F                <1>     dw mkdir - startLbl
    21                              <1> 
    22 00000885 025244              <1>     db 2, "RD"
    23 00000888 C51F                <1>     dw rmdir - startLbl
    24                              <1> 
    25 0000088A 05524D444952        <1>     db 5, "RMDIR"
    26 00000890 C51F                <1>     dw rmdir - startLbl
    27                              <1> 
    28 00000892 0344454C            <1>     db 3, "DEL"
    29 00000896 4D22                <1>     dw erase - startLbl
    30                              <1> 
    31 00000898 054552415345        <1>     db 5, "ERASE"
    32 0000089E 4D22                <1>     dw erase - startLbl
    33                              <1> 
    34 000008A0 0444415445          <1>     db 4, "DATE"
    35 000008A5 9023                <1>     dw date - startLbl
    36                              <1> 
    37 000008A7 0454494D45          <1>     db 4, "TIME"
    38 000008AC 3E25                <1>     dw time - startLbl
    39                              <1> 
    40 000008AE 04434F5059          <1>     db 4, "COPY"
    41 000008B3 AE20                <1>     dw copy - startLbl
    42                              <1> 
    43 000008B5 0443545459          <1>     db 4, "CTTY"
    44 000008BA 6726                <1>     dw ctty - startLbl
    45                              <1> 
    46 000008BC 03434C53            <1>     db 3, "CLS"
    47 000008C0 0227                <1>     dw cls - startLbl
    48                              <1> 
    49 000008C2 05425245414B        <1>     db 5, "BREAK"
    50 000008C8 7427                <1>     dw break - startLbl
    51                              <1> 
    52 000008CA 06564552494659      <1>     db 6, "VERIFY"
    53 000008D1 F527                <1>     dw verify - startLbl
    54                              <1> 
    55 000008D3 0652454E414D45      <1>     db 6, "RENAME"
    56 000008DA 7228                <1>     dw rename - startLbl
    57                              <1> 
    58 000008DC 0352454E            <1>     db 3, "REN"
    59 000008E0 7228                <1>     dw rename - startLbl
    60                              <1>     
    61 000008E2 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 000008EB 6F2C                <1>     dw truename - startLbl
    63                              <1> 
    64 000008ED 03564552            <1>     db 3, "VER"
    65 000008F1 552E                <1>     dw version - startLbl
    66                              <1> 
    67 000008F3 03564F4C            <1>     db 3, "VOL"
    68 000008F7 962D                <1>     dw volume - startLbl
    69                              <1> 
    70 000008F9 034D454D            <1>     db 3, "MEM"
    71 000008FD 992E                <1>     dw memory - startLbl
    72                              <1> 
    73 000008FF 0445584954          <1>     db 4, "EXIT"
    74 00000904 9630                <1>     dw exit - startLbl
    75                              <1> 
    76 00000906 0454595045          <1>     db 4, "TYPE"
    77 0000090B E32F                <1>     dw type - startLbl
    78                              <1> 
    79 0000090D 054C4142454C        <1>     db 5, "LABEL"
    80 00000913 C02C                <1>     dw label - startLbl
    81                              <1> 
    82 00000915 0450415448          <1>     db 4, "PATH"
    83 0000091A ED33                <1>     dw pathEdit - startLbl
    84                              <1> 
    85 0000091C 03534554            <1>     db 3, "SET"
    86 00000920 CE32                <1>     dw set - startLbl
    87                              <1> 
    88 00000922 0650524F4D5054      <1>     db 6, "PROMPT"
    89 00000929 CC34                <1>     dw prompt - startLbl
    90                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    91 0000092B 054D4B4C424C        <1>     db 5, "MKLBL"
    92 00000931 EA2C                <1>     dw mklbl - startLbl
    93                              <1> 
    94 00000933 05524D4C424C        <1>     db 5, "RMLBL"
    95 00000939 252D                <1>     dw rmlbl - startLbl
    96                              <1> 
    97 0000093B 05524E4C424C        <1>     db 5, "RNLBL"
    98 00000941 602D                <1>     dw rnlbl - startLbl
    99                              <1> 
   100 00000943 05544F554348        <1>     db 5, "TOUCH"
   101 00000949 622A                <1>     dw touch - startLbl
   102                              <1> 
   103 0000094B 044A4F494E          <1>     db 4, "JOIN"
   104 00000950 C52A                <1>     dw join - startLbl
   105                              <1> 
   106 00000952 055355425354        <1>     db 5, "SUBST"
   107 00000958 882B                <1>     dw subst - startLbl
   108                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   109 0000095A 0558434F5059        <1>     db 5, "XCOPY"
   110 00000960 0F20                <1>     dw xcopy - startLbl
   111                              <1> 
   112 00000962 044543484F          <1>     db 4, "ECHO"
   113 00000967 6D35                <1>     dw echo - startLbl
   114 00000969 FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 0000096A 0D0A24              <1> crlf    db  CR,LF,"$"
     3 0000096D 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 00000972 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 0000097B 696C65206D69737369- <1>
     4 00000984 6E670D0A24          <1>
     5 00000989 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 00000992 6469736B2077697468- <1>
     5 0000099B 206261746368206669- <1>
     5 000009A4 6C65                <1>
     6 000009A6 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 000009AF 737320616E79206B65- <1>
     6 000009B8 79207768656E207265- <1>
     6 000009C1 6164790D0A24        <1>
     7 000009C7 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 000009D0 6E64206F722066696C- <1>
     7 000009D9 65206E616D650D0A24  <1>
     8 000009E2 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 000009EB 2066696C65206E616D- <1>
     8 000009F4 65206F7220          <1>
     9 000009F9 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 00000A02 666F756E640D0A24    <1>
    10 00000A0A 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full.
    10 00000A13 656E74206469736B20- <1>
    10 00000A1C 73706163650D0A24    <1>
    11 00000A24 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 00000A2D 7669726F6E6D656E74- <1>
    11 00000A36 2073706163650D0A24  <1>
    12 00000A3F 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 00000A48 74696F6E206572726F- <1>
    12 00000A51 720D0A24            <1>
    13 00000A55 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 00000A5E 6F7420626520636F70- <1>
    13 00000A67 696564206F6E746F20- <1>
    13 00000A70 697473656C660D0A24  <1>
    14 00000A79 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 00000A82 662064657374696E61- <1>
    14 00000A8B 74696F6E206C6F7374- <1>
    14 00000A94 206265666F72652063- <1>
    14 00000A9D 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 00000AA3 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 00000AAC 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 00000AB5 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 00000ABE 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 00000ABF 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 00000AC8 65650D0A24          <1>
    21 00000ACD 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 00000AD6 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 00000ADF 726976652073706563- <1>
    23 00000AE8 696669636174696F6E- <1>
    23 00000AF1 0D0A24              <1>
    24 00000AF4 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 00000AFD 6B6579207768656E20- <1>
    24 00000B06 7265616479202E202E- <1>
    24 00000B0F 202E2024            <1>
    25 00000B13 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 00000B1C 6172616D657465720D- <1>
    25 00000B25 0A24                <1>
    26                              <1> 
    27 00000B27 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 00000B30 576564546875467269- <1>
    27 00000B39 536174              <1>
    28 00000B3C 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 00000B45 206461746524        <1>
    29 00000B4B 43757272656E742064- <1> curDate db  "Current date is $"
    29 00000B54 6174652069732024    <1>
    30 00000B5C 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 00000B65 657720646174652024  <1>
    31 00000B6E 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 00000B77 293A2024            <1>
    32 00000B7B 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 00000B84 293A2024            <1>
    33 00000B88 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 00000B91 293A2024            <1>
    34 00000B95 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 00000B9E 2074696D6524        <1>
    35 00000BA4 43757272656E742074- <1> curTime db  "Current time is $"
    35 00000BAD 696D652069732024    <1>
    36 00000BB5 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 00000BBE 65772074696D653A20- <1>
    36 00000BC7 24                  <1>
    37                              <1> 
    38 00000BC8 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000BD1 7572652028592F4E29- <1>
    38 00000BDA 3F2024              <1>
    39                              <1> 
    40 00000BDD 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000BE6 56657273696F6E2024  <1>
    41                              <1> 
    42 00000BEF 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000BF8 6E2064726976652024  <1>
    43 00000C01 2069732024          <1> volOk   db " is $"
    44 00000C06 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000C0F 6162656C24          <1>
    45                              <1> 
    46 00000C14 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000C1D 69726563746F72790D- <1>
    46 00000C26 0A24                <1>
    47 00000C28 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000C31 206372656174652064- <1>
    47 00000C3A 69726563746F72790D- <1>
    47 00000C43 0A24                <1>
    48 00000C45 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000C4E 6174682C206E6F7420- <1>
    48 00000C57 6469726563746F7279- <1>
    48 00000C60 2C0D0A              <1>
    49 00000C63 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000C6C 6F7279206E6F742065- <1>
    49 00000C75 6D7074790D0A24      <1>
    50 00000C7C 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000C85 79206F66202024      <1>
    51 00000C8C 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000C95 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    52 00000C9E 6E6965640D0A24      <1>
    53 00000CA5 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    53 00000CAE 72697665206973206E- <1>
    53 00000CB7 6F206C6F6E67657220- <1>
    53 00000CC0 76616C696424        <1>
    54                              <1> ;badDrvSrch  db "Invalid drive in search path",CR,LF,"$"        ;MAY REMOVE
    55 00000CC6 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    55 00000CCF 65766963650D0A24    <1>
    56 00000CD7 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    56 00000CE0 20666F756E640D0A24  <1>
    57 00000CE9 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    57 00000CF2 726F720D0A24        <1>
    58 00000CF8 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    58 00000D01 6F74206265206E6573- <1>
    58 00000D0A 7465640D0A24        <1>
    59 00000D10 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    59 00000D19 6174652066696C6520- <1>
    59 00000D22 6572726F7220647572- <1>
    59 00000D2B 696E6720706970650D- <1>
    59 00000D34 0A24                <1>
    60 00000D36 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    60 00000D3F 2062696E6172792072- <1>
    60 00000D48 656164732066726F6D- <1>
    60 00000D51 206120646576696365- <1>
    60 00000D5A 0D0A24              <1>
    61 00000D5D 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    62 00000D63 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    63 00000D68 425245414B20697320- <1> breakIs db "BREAK is $"
    63 00000D71 24                  <1>
    64 00000D72 564552494659206973- <1> verifyIs    db "VERIFY is $"
    64 00000D7B 2024                <1>
    65 00000D7D 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    66 00000D86 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    66 00000D8F 617468206F72206669- <1>
    66 00000D98 6C65206E616D650D0A- <1>
    66 00000DA1 24                  <1>
    67 00000DA2 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    67 00000DAB 756D626572206F6620- <1>
    67 00000DB4 706172616D65746572- <1>
    67 00000DBD 730D0A24            <1>
    68 00000DC1 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    68 00000DCA 74696E6720746F2064- <1>
    68 00000DD3 6576696365          <1>
    69 00000DD8 08200800            <1> backSpace   db BSP," ",BSP,NUL
    70                              <1> 
    71 00000DDC 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    71 00000DE5 20202020202020546F- <1>
    71 00000DEE 74616C207379737465- <1>
    71 00000DF7 6D206D656D6F72793A- <1>
    71 00000E00 2024                <1>
    72 00000E02 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    72 00000E0B 20202020202020204D- <1>
    72 00000E14 656D6F727920757365- <1>
    72 00000E1D 6420627920444F533A- <1>
    72 00000E26 2024                <1>
    73 00000E28 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    73 00000E31 656D6F727920757365- <1>
    73 00000E3A 64206279206170706C- <1>
    73 00000E43 69636174696F6E733A- <1>
    73 00000E4C 2024                <1>
    74 00000E4E 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    74 00000E57 656D6F727920726573- <1>
    74 00000E60 657276656420627920- <1>
    74 00000E69 68617264776172653A- <1>
    74 00000E72 2024                <1>
    75 00000E74 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    75 00000E7D 202020202020202020- <1>
    75 00000E86 2020202020204D656D- <1>
    75 00000E8F 6F727920667265653A- <1>
    75 00000E98 2024                <1>
    76 00000E9A 20627974657324      <1> memByte db " bytes$"
    77 00000EA1 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    77 00000EAA 6F7420417373657274- <1>
    77 00000EB3 61696E20444F532045- <1>
    77 00000EBC 6E74727920506F696E- <1>
    77 00000EC5 7424                <1>
    78 00000EC7 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    78 00000ED0 416C6C6F636174696F- <1>
    78 00000ED9 6E204572726F7224    <1>
    79 00000EE1 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    79 00000EEA 4572726F7224        <1>
    80 00000EF0 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    80 00000EF9 68616C74656424      <1>
    81                              <1> 
    82 00000F00 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    82 00000F09 206372656174652070- <1>
    82 00000F12 6970650D0A          <1>
    83                              <1> pipeErrMsgL equ $ - pipeErrMsg
    84 00000F17 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    84 00000F20 6F6E206572726F720D- <1>
    84 00000F29 0A                  <1>
    85                              <1> redirErrMsgL   equ $ - redirErrMsg
    86                              <1> 
    87 00000F2A 1B5B324A            <1> ansiCls  db ESC,"[2J" ;ANSI CLS sequence, 4 chars long
    88 00000F2E 2020202024          <1> fourSpc  db "    $"
    89 00000F33 20202024            <1> threeSpc db "   $"
    90 00000F37 202024              <1> twoSpc   db "  $"
    91                              <1> 
    92 00000F3A 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    92 00000F43 696679204F4E206F72- <1>
    92 00000F4C 204F46460D0A24      <1>
    93                              <1> 
    94 00000F53 50524F4D50543D0D    <1> promptEVar  db "PROMPT=",CR     ;Must be CR terminated!
    95 00000F5B 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
    96                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    97                              <1> ; handles and reopen CON
    98 00000F64 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:
     3                              <1> ;This is copied into an MCB to be used as the environment!
     4                              <1> comspecEvar:
     5 00000F68 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 00000F70 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0  ;Part of the comspec!
     7 00000F79 442E434F4D00        <1>
     8                              <1> pathEVar:
     9 00000F7F 504154483D0000      <1>     db "PATH=",0,0  ;End of default environment strings
    10                              <1> menv_len equ $ - masterEnv
    11                              <1> ;Master environment doesnt contain the "program name string"
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00000F86 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00000F89 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00000F8D C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 00000F90 B44A                <1>     mov ah, 4Ah ;Realloc
     9 00000F92 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00000F95 CD21                <1>     int 21h
    11                              <1> commandMain:
    12 00000F97 488B2567F0FFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    13 00000F9E FC                  <1>     cld ;Ensure stringops are done the right way
    14 00000F9F C6050FF2FFFF7F      <1>     mov byte [inBuffer], inBufferL      ;Reset the buffer length
    15 00000FA6 C6058AF2FFFF7F      <1>     mov byte [cpyBuffer], inBufferL     ;Reset the buffer length
    16 00000FAD C60505F3FFFF7F      <1>     mov byte [cmdBuffer], inBufferL     ;Reset the buffer length
    17                              <1> .inputMain:         ;Only reset once per line!
    18 00000FB4 E8BA280000          <1>     call printCRLF  ;Command complete, indicate with new line!
    19 00000FB9 B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    20 00000FBE CD21                <1>     int 21h
    21 00000FC0 B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    22 00000FC5 BA01000000          <1>     mov edx, 1      ;Start new print job
    23 00000FCA CD21                <1>     int 21h
    24                              <1> .inputGetAgain:
    25 00000FCC E80B2B0000          <1>     call clearCommandLineState  ;Cleans all handles 5->MAX
    26 00000FD1 F605DBF0FFFFFF      <1>     test byte [batFlag], -1 ;If batch on, get the next line to execute
    27 00000FD8 0F852C090000        <1>     jnz batNextLine
    28                              <1> .inputGetCmdlineAgain:
    29 00000FDE E8F7270000          <1>     call printPrompt    ;Ok we are gonna get more input, output prompt
    30 00000FE3 488D15CBF1FFFF      <1>     lea rdx, inBuffer
    31 00000FEA B8000A0000          <1>     mov eax, 0A00h      ;Do Buffered input
    32 00000FEF CD21                <1>     int 21h
    33 00000FF1 E87D280000          <1>     call printCRLF  ;Note we have accepted input
    34                              <1> ;First check we had something typed in of length greater than 0
    35 00000FF6 803DB9F1FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    36 00000FFD 74DF                <1>     je .inputGetCmdlineAgain  ;If not, keep looping input
    37                              <1>     ;Copy over the input text
    38 00000FFF 488D35AFF1FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    39                              <1> .batCopy:               ;Jump here to copy the batch input line 
    40 00001006 488D3D2AF2FFFF      <1>     lea rdi, cpyBuffer
    41 0000100D B982000000          <1>     mov ecx, cmdBufferL     ;Copy the buffer over to manipulate
    42 00001012 F3A4                <1>     rep movsb
    43 00001014 E870000000          <1>     call makeCmdBuffer      ;Preprocess the redir, make cmd buffer
    44                              <1>     ;Now check we aren't starting with a pipe or <CR> and treat differently
    45 00001019 488D359BF2FFFF      <1>     lea rsi, cmdBuffer + 2
    46 00001020 E8852A0000          <1>     call skipDelimiters
    47 00001025 803E0D              <1>     cmp byte [rsi], CR      ;If the first non-delim is a CR, reject input!
    48 00001028 74A2                <1>     je .inputGetAgain       ;Wipe redir flags and reobtain input!
    49 0000102A 803E7C              <1>     cmp byte [rsi], "|"     ;If the first non-delim is a pipe, syntax error!
    50 0000102D 0F84D8030000        <1>     je hardSynErr
    51                              <1> .pipeLoop:
    52 00001033 4C8B05D5EFFFFF      <1>     mov r8, qword [pspPtr]  ;Point back to home segment
    53 0000103A E8A4000000          <1>     call makeCmdString      ;Makes the CR delimited command in psp
    54                              <1>     ;ZF here indicates if we are at the end of the command or nots
    55 0000103F E813070000          <1>     call setupRedirandPipes ;Setup/advance pipes and redir as appropriate
    56 00001044 E8F3000000          <1>     call analyseCmdline     ;Setup cmdName and fcb for cmdBuffer portion
    57 00001049 E845020000          <1>     call doCommandLine      ;This preps and executes the command portion.
    58                              <1> .okRet:                     ;Normal return point for processing
    59 0000104E E809050000          <1>     call advanceRedir       ;Now advance and end redir if needed
    60 00001053 F60547F0FFFFFF      <1>     test byte [pipeFlag], -1    ;If no pipes, reset state, accept new input
    61 0000105A 0F8454FFFFFF        <1>     jz .inputMain
    62                              <1>     ;Now we pull the commandline forwards. 
    63 00001060 E87E000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    64 00001065 488D3D4FF2FFFF      <1>     lea rdi, cmdBuffer + 2
    65 0000106C 4889F1              <1>     mov rcx, rsi
    66 0000106F 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    67 00001072 280D42F2FFFF        <1>     sub byte [cmdBuffer + 1], cl    ;And erase from the count
    68 00001078 8A0D3CF2FFFF        <1>     mov cl, byte [cmdBuffer + 1]
    69 0000107E FFC1                <1>     inc ecx     ;One more for the terminating char
    70 00001080 F3A4                <1>     rep movsb   ;Move the chars over    
    71 00001082 E8442A0000          <1>     call clearCommandState  ;Else, clear the command state and start again
    72 00001087 EBAA                <1>     jmp short .pipeLoop     ;Doesn't close handles above 5 until end of pipe!
    73                              <1> 
    74                              <1> makeCmdBuffer:
    75                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    76                              <1> ; copy buffer. Called only once in a cycle.
    77                              <1> ;Throughout: CL has char count, CH has quote count
    78 00001089 488D35A9F1FFFF      <1>     lea rsi, [cpyBuffer + 2]    ;Goto copy buffer + 2
    79 00001090 31C9                <1>     xor ecx, ecx
    80 00001092 4889F7              <1>     mov rdi, rsi    ;Save the pointer
    81                              <1> .countQuotes:
    82 00001095 AC                  <1>     lodsb
    83 00001096 3C22                <1>     cmp al, '"'
    84 00001098 7507                <1>     jne .notQuoteToCount
    85 0000109A FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
    86 0000109C E9F4FFFFFF          <1>     jmp .countQuotes
    87                              <1> .notQuoteToCount:
    88 000010A1 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
    89 000010A3 75F0                <1>     jne .countQuotes
    90 000010A5 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
    91 000010A8 488D3D0CF2FFFF      <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
    92                              <1> .getChar:
    93 000010AF AC                  <1>     lodsb           ;Get char in buffer, advance rsi
    94 000010B0 3C22                <1>     cmp al, '"'     ;Is char a quote?
    95 000010B2 750E                <1>     jne .notQuote
    96 000010B4 FECD                <1>     dec ch          ;We have a quote, now decrement
    97 000010B6 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
    98                              <1> .searchForClosingQuote:
    99                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   100 000010B8 AA                  <1>     stosb   ;Store char and inc rdi
   101 000010B9 FEC1                <1>     inc cl
   102 000010BB AC                  <1>     lodsb   ;Get next char
   103 000010BC 3C22                <1>     cmp al, '"'
   104 000010BE 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   105 000010C0 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   106                              <1> .notQuote:
   107 000010C2 E82F060000          <1>     call peelRedir      ;Intervene redir if needed
   108 000010C7 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   109 000010C9 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   110 000010CB EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   111                              <1> .pipeHandle:
   112                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   113 000010CD 0F8438030000        <1>     jz hardSynErr ;We had double pipe symbol, syntax error and reset!
   114                              <1> .notRedir:
   115 000010D3 AA                  <1>     stosb       ;Store char and advance rdi
   116 000010D4 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   117 000010D6 7404                <1>     je .exit
   118 000010D8 FEC1                <1>     inc cl      ;Increment char count
   119 000010DA EBD3                <1>     jmp short .getChar    ;If not, get next char
   120                              <1> .exit:
   121 000010DC 880DD8F1FFFF        <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   122                              <1>     return
    13                              <2> %%_ret:
    14 000010E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   123                              <1> 
   124                              <1> makeCmdString:
   125                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   126                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   127                              <1> ; Copies into the psp.
   128                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   129 000010E3 488D35D1F1FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   130 000010EA 31C9                <1>     xor ecx, ecx
   131 000010EC 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   132                              <1> .countQuotes:
   133 000010EF AC                  <1>     lodsb
   134 000010F0 3C22                <1>     cmp al, '"'
   135 000010F2 7507                <1>     jne .notQuoteToCount
   136 000010F4 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   137 000010F6 E9F4FFFFFF          <1>     jmp .countQuotes
   138                              <1> .notQuoteToCount:
   139 000010FB 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   140 000010FD 75F0                <1>     jne .countQuotes
   141 000010FF 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   142 00001102 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   143                              <1> .getChar:
   144 00001109 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   145 0000110A 3C22                <1>     cmp al, '"'     ;Is char a quote?
   146 0000110C 750E                <1>     jne .notQuote
   147 0000110E FECD                <1>     dec ch          ;We have a quote, now decrement
   148 00001110 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   149                              <1> .searchForClosingQuote:
   150                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   151 00001112 AA                  <1>     stosb   ;Store char and inc rdi
   152 00001113 FEC1                <1>     inc cl
   153 00001115 AC                  <1>     lodsb   ;Get next char
   154 00001116 3C22                <1>     cmp al, '"'
   155 00001118 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   156 0000111A FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   157                              <1> .notQuote:
   158 0000111C 3C7C                <1>     cmp al, "|"
   159 0000111E 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   160 00001120 B00D                <1>     mov al, CR          ;Store the pipe char
   161 00001122 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   162                              <1> .notPipe:
   163 00001125 AA                  <1>     stosb       ;Store char and advance rdi
   164 00001126 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   165 00001128 7404                <1>     je .exit
   166 0000112A FEC1                <1>     inc cl      ;Increment char count
   167 0000112C EBDB                <1>     jmp short .getChar    ;If not, get next char
   168                              <1> .exit:
   169 0000112E 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   170 00001131 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   171 00001138 803E0D              <1>     cmp byte [rsi], CR  
   172                              <1>     return
    13                              <2> %%_ret:
    14 0000113B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   173                              <1> 
   174                              <1> analyseCmdline:
   175                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   176                              <1> ; processes the command name into the FCB.  
   177 0000113C C60547F2FFFF00      <1>     mov byte [cmdName], 0   ;Init this field to indicate no cmd
   178                              <1> ;Start by searching for any switch chars! Set byte if switch chars fnd!!
   179 00001143 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   180 0000114A 4889FE              <1>     mov rsi, rdi                    ;Prep rsi here too
   181 0000114D 0FB64FFF            <1>     movzx ecx, byte [rdi - 1]       ;Get the count byte
   182 00001151 8A05D3EEFFFF        <1>     mov al, byte [switchChar]
   183 00001157 F2AE                <1>     repne scasb                     ;Scan for the switch char
   184 00001159 7506                <1>     jne .noSwitchFnd
   185 0000115B F61551EFFFFF        <1>     not byte [switchFnd]            ;Set switch char fnd on!
   186                              <1> .noSwitchFnd:
   187 00001161 E844290000          <1>     call skipDelimiters     ;Skip any preceeding separators from rsi
   188 00001166 803E0D              <1>     cmp byte [rsi], CR      ;We have no command? Return!
   189                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001169 74(3B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   190 0000116B 4889F3              <1>     mov rbx, rsi            ;Save the start of the text in rbx
   191                              <1> .plp:
   192 0000116E 488D3DE5EFFFFF      <1>     lea rdi, cmdFcb         ;Loop on the commandFCB
   193 00001175 B801290000          <1>     mov eax, 2901h
   194 0000117A CD21                <1>     int 21h
   195 0000117C 3CFF                <1>     cmp al, -1  ;If DOS returns -1, we have a bad drive specified, fail!
   196 0000117E 0F8402010000        <1>     je .exitBadDrv
   197                              <1> .trailingDotLp:
   198                              <1> ;Reverse along trailing dots!
   199 00001184 807EFF2E            <1>     cmp byte [rsi - 1], "." ;Is this a dot?
   200 00001188 7505                <1>     jne .noTrailingDots
   201 0000118A 48FFCE              <1>     dec rsi
   202 0000118D EBF5                <1>     jmp short .trailingDotLp
   203                              <1> .noTrailingDots:
   204 0000118F 8A0594EEFFFF        <1>     mov al, byte [pathSep]  
   205 00001195 3806                <1>     cmp byte [rsi], al      ;Is the terminator a pathsep?
   206 00001197 7525                <1>     jne .notPs
   207 00001199 48FFC6              <1>     inc rsi ;Go to the char after the pathsep
   208 0000119C AC                  <1>     lodsb   ;Get this char
   209 0000119D 48FFCE              <1>     dec rsi ;And move rsi back to where we were
   210 000011A0 3C20                <1>     cmp al, 20h     ;Is this char below 32?
   211 000011A2 7217                <1>     jb .delimfnd    ;Also a delimiter
   212 000011A4 3C5C                <1>     cmp al, "\"     ;If this is a second pathsep, we are done
   213 000011A6 7413                <1>     je .delimfnd
   214 000011A8 3C2F                <1>     cmp al, "/"     ;Or an alt pathsep?
   215 000011AA 740F                <1>     je .delimfnd
   216 000011AC 3C2E                <1>     cmp al, byte "."
   217 000011AE 740B                <1>     je .delimfnd
   218 000011B0 3C22                <1>     cmp al, byte '"'
   219 000011B2 7407                <1>     je .delimfnd
   220 000011B4 E8FF280000          <1>     call isALdelimiter  ;Is this a delim char?
   221 000011B9 75B3                <1>     jne .plp            ;If not, we loop again
   222                              <1> .delimfnd:
   223 000011BB 48FFCE              <1>     dec rsi             ;Point rsi to end of the command
   224                              <1> .notPs:
   225                              <1> ;Now we have reached the end of the command, rsi points to the first char
   226                              <1> ; after the command, whether a delimiter or not.
   227 000011BE 4889F1              <1>     mov rcx, rsi
   228 000011C1 4829D9              <1>     sub rcx, rbx    ;Get the number of chars in the command ONLY
   229 000011C4 4887DE              <1>     xchg rbx, rsi   ;Swap the start and end of the commands!!!
   230 000011C7 488D3D6DF1FFFF      <1>     lea rdi, cmdPathSpec
   231 000011CE F3A4                <1>     rep movsb
   232 000011D0 30C0                <1>     xor al, al
   233 000011D2 AA                  <1>     stosb   ;Store a terminating null
   234 000011D3 4887DE              <1>     xchg rbx, rsi
   235                              <1> ;Now we build FCBs for the arguments!
   236 000011D6 498D9881000000      <1>     lea rbx, qword [r8 + cmdLine]   ;Now we measure from the start of the buf!
   237 000011DD E893000000          <1>     call .skipAndCheckCR
   238 000011E2 745B                <1>     je .setupCmdVars
   239 000011E4 C605C1EEFFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   240 000011EB 4889F0              <1>     mov rax, rsi
   241 000011EE 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   242 000011F1 8805B6EEFFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   243 000011F7 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   244 000011FB B801290000          <1>     mov eax, 2901h
   245 00001200 CD21                <1>     int 21h
   246 00001202 8805A6EEFFFF        <1>     mov byte [arg1FCBret], al
   247                              <1> .skipArg:
   248 00001208 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   249 00001209 3C0D                <1>     cmp al, CR
   250 0000120B 7432                <1>     je .setupCmdVars
   251 0000120D E8A6280000          <1>     call isALdelimiter
   252 00001212 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   253 00001214 E85C000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   254 00001219 7424                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   255 0000121B C6058DEEFFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   256 00001222 4889F0              <1>     mov rax, rsi            
   257 00001225 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   258 00001228 880582EEFFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   259 0000122E 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   260 00001232 B801290000          <1>     mov eax, 2901h
   261 00001237 CD21                <1>     int 21h
   262 00001239 880572EEFFFF        <1>     mov byte [arg2FCBret], al
   263                              <1> .setupCmdVars:
   264                              <1> ;Before returning, we copy the command name to cmdName 
   265 0000123F 488D3DF5F0FFFF      <1>     lea rdi, cmdPathSpec
   266 00001246 E816290000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   267 0000124B E83E280000          <1>     call strlen ;Get the length of the final path componant
   268 00001250 81F90C000000        <1>     cmp ecx, 11 + 1 ;Extra char for the ext separator (dot)
   269 00001256 7726                <1>     ja .exitBad     ;Return error
   270 00001258 4889FE              <1>     mov rsi, rdi
   271 0000125B 488D3D28F1FFFF      <1>     lea rdi, cmdName
   272 00001262 FFC9                <1>     dec ecx ;Minus the terminating null
   273 00001264 880F                <1>     mov byte [rdi], cl ;Store the length here
   274 00001266 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   275                              <1> .cpCmdName:
   276 00001269 AC                  <1>     lodsb
   277 0000126A E829280000          <1>     call ucChar ;Uppercase the char
   278 0000126F AA                  <1>     stosb
   279 00001270 FFC9                <1>     dec ecx
   280 00001272 75F5                <1>     jnz .cpCmdName
   281                              <1>     return
    13                              <2> %%_ret:
    14 00001274 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> .skipAndCheckCR:
   283                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   284 00001275 E830280000          <1>     call skipDelimiters ;Go to the next char in the input line
   285 0000127A 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   286                              <1>     return
    13                              <2> %%_ret:
    14 0000127D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   287                              <1> .exitBad:
   288 0000127E C60505F1FFFFFF      <1>     mov byte [cmdName], -1  ;Store -1 to indicate error
   289                              <1>     return
    13                              <2> %%_ret:
    14 00001285 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   290                              <1> .exitBadDrv:
   291 00001286 C605FDF0FFFFFE      <1>     mov byte [cmdName], -2  ;Indicate a bad drive specified
   292 0000128D E849070000          <1>     call badDriveError
   293                              <1>     return
    13                              <2> %%_ret:
    14 00001292 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   294                              <1> 
   295                              <1> doCommandLine:
   296                              <1>     ;The following check accounts for the end of a piped command
   297 00001293 803DF0F0FFFF00      <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, syntax error!
   298 0000129A 0F846B010000        <1>     je hardSynErr   ;This now should never be hit, earmark for removal!
   299 000012A0 803DE3F0FFFFFF      <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   300 000012A7 0F8467070000        <1>     je badCmdError
   301 000012AD 803DD6F0FFFFFE      <1>     cmp byte [cmdName], -2  ;Bad drive specified, nop
   302                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000012B4 74(92)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   303 000012B6 488D357EF0FFFF      <1>     lea rsi, cmdPathSpec
   304 000012BD 0FB71D77F0FFFF      <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   305 000012C4 80FF3A              <1>     cmp bh, ":"
   306 000012C7 7520                <1>     jne .noDriveSpecified
   307 000012C9 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   308 000012CB E8C8270000          <1>     call ucChar     ;Uppercase al
   309 000012D0 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   310                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   311 000012D2 803DB1F0FFFF02      <1>     cmp byte [cmdName], 2
   312 000012D9 750E                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   313 000012DB 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   314 000012DD E882270000          <1>     call setDrive
   315                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000012E2 74(92)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   316 000012E4 E9F2060000          <1>     jmp badDriveError
   317                              <1> .noDriveSpecified:
   318                              <1> ;rbx is writable UP TO THE FIRST PIPE OR CR (non-inclusive)
   319 000012E9 488D1DC9EFFFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer
   320 000012F0 488D3593F0FFFF      <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   321 000012F7 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   322 000012FC BAFFFF0000          <1>     mov edx, 0FFFFh
   323 00001301 B5FF                <1>     mov ch, -1
   324 00001303 CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   325 00001305 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   326 0000130A BAFFFF0000          <1>     mov edx, 0FFFFh
   327 0000130F 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   328 00001311 CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   329                              <1>             ;        al = 0  if the command should be executed as usual
   330 00001313 84C0                <1>     test al, al
   331 00001315 7444                <1>     jz .executeInternal
   332                              <1>     ;Here we execute externally and return to the prompt
   333                              <1>     ; as if it was an internal execution. rbx is not to be relied on here!
   334 00001317 498D9880000000      <1>     lea rbx, qword [r8 + cmdTail]
   335 0000131E 488D3565F0FFFF      <1>     lea rsi, cmdName        
   336 00001325 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   337 0000132A BAFFFF0000          <1>     mov edx, 0FFFFh
   338 0000132F B5FF                <1>     mov ch, -1
   339 00001331 CD2F                <1>     int 2Fh
   340 00001333 803D50F0FFFF00      <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   341                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000133A 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000133C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   342                              <1>     ;We need to copy over to cmdPathSpec in the event this command
   343                              <1>     ; is an external command that is in the CD or in the PATH.
   344                              <1>     ;Should not be used for this purpose but it is here...
   345 0000133D E87E050000          <1>     call pullCommandline    ;Pull the tail down with the original name
   346 00001342 488D3541F0FFFF      <1>     lea rsi, cmdName        ;Now make the new cmd the new cmdspec!
   347 00001349 AC                  <1>     lodsb                   ;Get the name length
   348 0000134A 0FB6C8              <1>     movzx ecx, al
   349 0000134D 488D3DE7EFFFFF      <1>     lea rdi, cmdPathSpec    ;Overwrite the original specified command
   350 00001354 F3A4                <1>     rep movsb   
   351 00001356 31C0                <1>     xor eax, eax
   352 00001358 AA                  <1>     stosb   ;Store null terminator
   353 00001359 EB1F                <1>     jmp short .executeInternal2 ;Skip the equivalent for non-ae cases
   354                              <1> .executeInternal:
   355 0000135B E860050000          <1>     call pullCommandline    ;Now pull the tail down
   356 00001360 488D3DD4EFFFFF      <1>     lea rdi, cmdPathSpec
   357 00001367 E822270000          <1>     call strlen ;Get the length of the input command
   358 0000136C FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   359 0000136E 380D16F0FFFF        <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   360 00001374 0F85521D0000        <1>     jne launchChild     ;If not, a path was specified, exit!
   361                              <1> .executeInternal2:
   362                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   363 0000137A 488D1DE4F4FFFF      <1>     lea rbx, functionTable
   364                              <1> .nextEntry:
   365 00001381 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   366 00001384 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   367 00001387 0F843F1D0000        <1>     je launchChild      ;If so, check externally now
   368 0000138D 380DF7EFFFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   369 00001393 7531                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   370                              <1>     ;Here they have the same length so lets see if the name is the same
   371 00001395 56                  <1>     push rsi
   372                              <1>     ;ecx has the length to compare
   373 00001396 51                  <1>     push rcx
   374 00001397 488D7301            <1>     lea rsi, qword [rbx + 1]
   375 0000139B 488D3DE9EFFFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   376 000013A2 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   377 000013A4 59                  <1>     pop rcx
   378 000013A5 5E                  <1>     pop rsi
   379 000013A6 751E                <1>     jne .gotoNextEntry
   380                              <1>     ;Here it was found both strings are equal
   381 000013A8 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   382 000013AD 480FB71F            <1>     movzx rbx, word [rdi]
   383 000013B1 488D3D48ECFFFF      <1>     lea rdi, startLbl
   384 000013B8 4801FB              <1>     add rbx, rdi
   385 000013BB C6054BECFFFF00      <1>     mov byte [returnCode], 0 ;Reset the retcode before executing function!
   386 000013C2 FFD3                <1>     call rbx        ;Call the internal function!
   387 000013C4 EB0C                <1>     jmp short appRet    ;Now once we are done, goto appRet!
   388                              <1> .gotoNextEntry:
   389 000013C6 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   390 000013CD 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   391 000013D0 EBAF                <1>     jmp short .nextEntry
   392                              <1> 
   393                              <1> appRet:  ;Return point from a task, jumped to from internal functions
   394                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled.
   395                              <1> ;Can depend on RSP here if the rsp ptr in the psp was not mangled (i.e. in an
   396                              <1> ; abort or CTRL+C call).
   397 000013D2 488B252CECFFFF      <1>     mov rsp, qword [stackTop]   ;Reset stack ptr
   398 000013D9 E872290000          <1>     call resetIDTentries
   399 000013DE B8004D0000          <1>     mov eax, 4D00h              ;Get retcode, will be 0 for internal commands
   400 000013E3 CD21                <1>     int 21h
   401 000013E5 66890521ECFFFF      <1>     mov word [returnCode], ax
   402 000013EC 84E4                <1>     test ah, ah     ;Regular exit
   403 000013EE 0F845AFCFFFF        <1>     jz commandMain.okRet
   404 000013F4 80FC03              <1>     cmp ah, 3       ;TSR exit
   405 000013F7 0F8451FCFFFF        <1>     je commandMain.okRet
   406                              <1>     ;Here we ask if we want to stop any batch processing, ret to 2Eh etc.
   407                              <1>     ;For now, do nothing
   408 000013FD 80FC01              <1>     cmp ah, 1       ;Was this Ctrl^C?
   409 00001400 0F8491FBFFFF        <1>     je commandMain
   410 00001406 E98CFBFFFF          <1>     jmp commandMain  ;If we aborted, fully reset!
   411                              <1> 
   412                              <1> hardSynErr:
   413                              <1> ;Hard syntax error in cmd line. Delete pipe files and reset completely!
   414 0000140B E89E050000          <1>     call badSyntaxError         ;Output bad syntax if empty command found
   415 00001410 E926000000          <1>     jmp redirPipeFailureCommon.noPrint  ;This closes pipes and resets stack
   416                              <1> redirFailure:
   417 00001415 488D15FBFAFFFF      <1>     lea rdx, redirErrMsg
   418 0000141C B913000000          <1>     mov ecx, redirErrMsgL
   419 00001421 EB0C                <1>     jmp short redirPipeFailureCommon
   420                              <1> pipeFailure:
   421 00001423 488D15D6FAFFFF      <1>     lea rdx, pipeErrMsg
   422 0000142A B917000000          <1>     mov ecx, pipeErrMsgL
   423                              <1> redirPipeFailureCommon:
   424                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   425                              <1> ;This routine tries to close whatever handles are not -1 and delete
   426                              <1> ; pipe files if the pipe count is not 0.
   427                              <1> ;It resets all variables and jumps to reset the stack!
   428 0000142F B800400000          <1>     mov eax, 4000h  ;Write handle
   429 00001434 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   430 00001439 CD21                <1>     int 21h
   431                              <1> .noPrint:
   432 0000143B 0FB70566ECFFFF      <1>     movzx eax, word [redirSTDIN]
   433 00001442 0FB71559ECFFFF      <1>     movzx edx, word [pipeSTDIN]
   434 00001449 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   435 0000144B E8D1000000          <1>     call .closeAndReplace
   436 00001450 0FB70553ECFFFF      <1>     movzx eax, word [redirSTDOUT]
   437 00001457 0FB71546ECFFFF      <1>     movzx edx, word [pipeSTDOUT]
   438 0000145E FFC3                <1>     inc ebx         ;Select STDOUT for closing
   439 00001460 E8BC000000          <1>     call .closeAndReplace
   440 00001465 66C70538ECFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   441 0000146E 0FB71D33ECFFFF      <1>     movzx ebx, word [redirSTDIN]
   442 00001475 E896000000          <1>     call .closeHandle
   443                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   444 0000147A 66C70525ECFFFFFFFF  <1>     mov word [redirSTDIN], -1
   445 00001483 0FB71D20ECFFFF      <1>     movzx ebx, word [redirSTDOUT]
   446 0000148A E881000000          <1>     call .closeHandle
   447 0000148F 66C70512ECFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   448 00001498 0FB71D03ECFFFF      <1>     movzx ebx, word [pipeSTDIN]
   449 0000149F E86C000000          <1>     call .closeHandle
   450 000014A4 66C705F5EBFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   451 000014AD 0FB71DF0EBFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   452 000014B4 E857000000          <1>     call .closeHandle
   453 000014B9 66C705E2EBFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   454 000014C2 C605D8EBFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   455 000014C9 488D1566EFFFFF      <1>     lea rdx, qword [pipe1Filespec]
   456 000014D0 803A00              <1>     cmp byte [rdx], 0
   457 000014D3 7407                <1>     jz .checkOld
   458 000014D5 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   459 000014DA CD21                <1>     int 21h
   460                              <1> .checkOld:
   461 000014DC 488D15A2EFFFFF      <1>     lea rdx, qword [pipe2Filespec]
   462 000014E3 803A00              <1>     cmp byte [rdx],0
   463 000014E6 7407                <1>     jz .pipeNamesComplete
   464 000014E8 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   465 000014ED CD21                <1>     int 21h
   466                              <1> .pipeNamesComplete:
   467 000014EF 31C0                <1>     xor eax, eax
   468                              <1>     ;Invalidate the pointers and the paths too
   469 000014F1 488905DCEFFFFF      <1>     mov qword [newPipe], rax
   470 000014F8 488905DDEFFFFF      <1>     mov qword [oldPipe], rax
   471 000014FF 890531EFFFFF        <1>     mov dword [pipe1Filespec], eax
   472 00001505 89057AEFFFFF        <1>     mov dword [pipe2Filespec], eax
   473                              <1> 
   474 0000150B E987FAFFFF          <1>     jmp commandMain ;Retake input from the command line
   475                              <1> .closeHandle:
   476 00001510 81FBFFFFFFFF        <1>     cmp ebx, -1
   477                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001516 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001518 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   478 00001519 B8003E0000          <1>     mov eax, 3E00h
   479 0000151E CD21                <1>     int 21h
   480                              <1>     return
    13                              <2> %%_ret:
    14 00001520 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   481                              <1> .closeAndReplace:
   482                              <1> ;Input: ax = one possible handle, dx = second possible handle
   483                              <1> ;       bx = handle to close and copy ax/dx into
   484                              <1> ;Output: Handle intervened on. bx preserved
   485 00001521 C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   486 00001524 09D0                <1>     or eax, edx     ;Form packed
   487 00001526 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   488                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000152B 74(20)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   489 0000152D E8DEFFFFFF          <1>     call .closeHandle
   490 00001532 663DFFFF            <1>     cmp ax, -1      
   491 00001536 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   492 0000153A 53                  <1>     push rbx
   493 0000153B 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   494 0000153E B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   495 00001543 CD21                <1>     int 21h
   496 00001545 5B                  <1>     pop rbx
   497                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001546 73(20)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   498                              <1>     ;Else we now try to force con to open!
   499 00001548 E8C3FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   500 0000154D B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   501 00001552 488D150BFAFFFF      <1>     lea rdx, conName
   502 00001559 CD21                <1>     int 21h
   503                              <1>     return
    13                              <2> %%_ret:
    14 0000155B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   504                              <1> 
   505                              <1> advanceRedir:
   506                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   507                              <1> ;Close stdin redir then stdout redir. 
   508 0000155C F60543EBFFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   509 00001563 0F8585000000        <1>     jnz .redirIn
   510 00001569 F60531EBFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   511 00001570 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   512 00001576 0FBF0525EBFFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   513 0000157D 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   514 00001582 0F84EB000000        <1>     je .pipeOut              
   515                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   516 00001588 0FB71D13EBFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   517 0000158F 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   518 00001591 B800460000          <1>     mov eax, 4600h
   519 00001596 CD21                <1>     int 21h
   520 00001598 0F8285FEFFFF        <1>     jc pipeFailure
   521 0000159E B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   522 000015A3 CD21                <1>     int 21h
   523 000015A5 0F8278FEFFFF        <1>     jc pipeFailure
   524 000015AB 488B152AEFFFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   525 000015B2 B800410000          <1>     mov eax, 4100h  ;Delete the file!
   526 000015B7 CD21                <1>     int 21h
   527 000015B9 0F8264FEFFFF        <1>     jc pipeFailure
   528 000015BF C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   529 000015C2 66C705D7EAFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   530                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   531                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   532                              <1>     ;Else exit!
   533 000015CB 0FBF05D2EAFFFF      <1>     movsx eax, word [pipeSTDOUT]
   534 000015D2 3DFFFFFFFF          <1>     cmp eax, -1
   535 000015D7 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   536 000015DD C605BDEAFFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   537 000015E4 F605BCEAFFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   538 000015EB 753D                <1>     jnz .redirOut               ;Go for it if so!
   539                              <1>     return
    13                              <2> %%_ret:
    14 000015ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   540                              <1> .redirIn:
   541                              <1> ;Here we clean redirIn
   542 000015EE 0FB71DB3EAFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   543 000015F5 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   544 000015F7 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   545 000015FC CD21                <1>     int 21h
   546 000015FE 0F8211FEFFFF        <1>     jc redirFailure
   547 00001604 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   548 00001609 CD21                <1>     int 21h
   549 0000160B 0F8204FEFFFF        <1>     jc redirFailure
   550 00001611 66C7058EEAFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   551 0000161A C60585EAFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   552 00001621 F60579EAFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   553 00001628 7549                <1>     jnz .pipeOut
   554                              <1> .redirOut:
   555 0000162A F60576EAFFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   556                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001631 74(ED)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   557                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   558 00001633 F60567EAFFFFFF      <1>     test byte [pipeFlag], -1
   559 0000163A 7537                <1>     jnz short .pipeOut
   560 0000163C 0FB71D67EAFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   561 00001643 B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   562 00001648 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   563 0000164D CD21                <1>     int 21h
   564 0000164F 0F82C0FDFFFF        <1>     jc redirFailure
   565 00001655 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   566 0000165A CD21                <1>     int 21h
   567 0000165C 0F82B3FDFFFF        <1>     jc redirFailure
   568 00001662 66C7053FEAFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   569 0000166B C60535EAFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   570                              <1>     return
    13                              <2> %%_ret:
    14 00001672 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   571                              <1> .pipeOut:
   572                              <1> ;Duplicate STDIN to save across pipe
   573 00001673 0FBF052AEAFFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   574 0000167A 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   575                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000167F 74(72)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   576 00001681 B800450000          <1>     mov eax, 4500h
   577 00001686 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   578 00001688 CD21                <1>     int 21h
   579 0000168A 0F8293FDFFFF        <1>     jc pipeFailure
   580 00001690 6689050BEAFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   581                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   582 00001697 B800460000          <1>     mov eax, 4600h
   583 0000169C 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   584 0000169E FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   585 000016A0 CD21                <1>     int 21h
   586 000016A2 0F827BFDFFFF        <1>     jc pipeFailure
   587                              <1> ;Now return the original stdout to stdout
   588 000016A8 89D9                <1>     mov ecx, ebx
   589 000016AA 0FB71DF3E9FFFF      <1>     movzx ebx, word [pipeSTDOUT]
   590 000016B1 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   591 000016B6 CD21                <1>     int 21h
   592 000016B8 0F8265FDFFFF        <1>     jc pipeFailure
   593                              <1> ;Now close the DUP'ed STDOUT
   594 000016BE B8003E0000          <1>     mov eax, 3E00h
   595 000016C3 CD21                <1>     int 21h
   596 000016C5 0F8258FDFFFF        <1>     jc pipeFailure
   597                              <1> ;Finally unwind STDIN to the beginning of the file
   598 000016CB B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   599 000016D0 31DB                <1>     xor ebx, ebx    ;STDIN handle
   600 000016D2 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   601 000016D4 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   602 000016D6 CD21                <1>     int 21h
   603 000016D8 0F8245FDFFFF        <1>     jc pipeFailure  ;This should never happen
   604 000016DE 488B15EFEDFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   605 000016E5 488915F0EDFFFF      <1>     mov qword [oldPipe], rdx
   606 000016EC 66C705AFE9FFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   607                              <1>     return
    13                              <2> %%_ret:
    14 000016F5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   608                              <1> 
   609                              <1> 
   610                              <1> peelRedir:
   611                              <1> ;Checks and sets up redir as appropriate
   612                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   613                              <1> ;       rsi points to the first char after the char in al in cpyBuffer
   614                              <1> ;Output: ZF=NZ => No redir
   615                              <1> ;        ZF=ZY => Redir
   616                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   617                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   618 000016F6 51                  <1>     push rcx
   619 000016F7 57                  <1>     push rdi
   620 000016F8 3C3C                <1>     cmp al, "<"
   621 000016FA 740C                <1>     je .inputRedir
   622 000016FC 3C3E                <1>     cmp al, ">"
   623 000016FE 7427                <1>     je .outputRedir
   624 00001700 3C7C                <1>     cmp al, "|"
   625 00001702 7441                <1>     je .pipeSetup
   626 00001704 F8                  <1>     clc
   627                              <1> .redirExit:
   628 00001705 5F                  <1>     pop rdi
   629 00001706 59                  <1>     pop rcx
   630                              <1>     return
    13                              <2> %%_ret:
    14 00001707 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   631                              <1> .inputRedir:
   632 00001708 C60597E9FFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   633 0000170F 488D3D82ECFFFF      <1>     lea rdi, rdrInFilespec
   634                              <1> .redirCommon:
   635 00001716 E88F230000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   636 0000171B E8BB240000          <1>     call cpDelimPathToBufz
   637 00001720 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   638 00001723 30C0                <1>     xor al, al  ;Clear the ZF flag
   639 00001725 EBDE                <1>     jmp short .redirExit
   640                              <1> .outputRedir:
   641 00001727 C60579E9FFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   642 0000172E 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   643 00001731 7509                <1>     jne .notDouble
   644 00001733 FE056EE9FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   645 00001739 48FFC6              <1>     inc rsi ;Go past it too
   646                              <1> .notDouble:
   647 0000173C 488D3DA4ECFFFF      <1>     lea rdi, rdrOutFilespec
   648 00001743 EBD1                <1>     jmp short .redirCommon
   649                              <1> .pipeSetup:
   650 00001745 56                  <1>     push rsi    ;Save rsi pointing to char past |
   651 00001746 E85F230000          <1>     call skipDelimiters ;Check if this is effectively a double || or |<CR>
   652 0000174B 803E7C              <1>     cmp byte [rsi], "|" 
   653 0000174E 7403                <1>     je .badFnd
   654 00001750 803E0D              <1>     cmp byte [rsi], CR
   655                              <1> .badFnd:
   656 00001753 5E                  <1>     pop rsi
   657 00001754 F9                  <1>     stc
   658 00001755 EBAE                <1>     jmp short .redirExit
   659                              <1> 
   660                              <1> setupRedirandPipes:
   661                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   662                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   663 00001757 0F8484000000        <1>     jz .redirIn
   664 0000175D 488D15D2ECFFFF      <1>     lea rdx, pipe1Filespec
   665 00001764 803A00              <1>     cmp byte [rdx], 0
   666 00001767 7410                <1>     jz .pathFound
   667 00001769 488D1515EDFFFF      <1>     lea rdx, pipe2Filespec
   668 00001770 803A00              <1>     cmp byte [rdx], 0
   669 00001773 0F85AAFCFFFF        <1>     jnz pipeFailure
   670                              <1> .pathFound:
   671 00001779 48891554EDFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   672 00001780 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   673 00001785 BB01000000          <1>     mov ebx, 1
   674 0000178A CD21                <1>     int 21h
   675 0000178C 0F8291FCFFFF        <1>     jc pipeFailure
   676 00001792 6689050BE9FFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   677 00001799 E8D2220000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   678 0000179E 0441                <1>     add al, "A"
   679 000017A0 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   680 000017A5 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   681 000017A7 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   682 000017A9 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   683 000017AB B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   684 000017B0 CD21                <1>     int 21h
   685 000017B2 0F826BFCFFFF        <1>     jc pipeFailure
   686                              <1>     ;AX has the handle for this file now, this will become STDOUT
   687                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   688 000017B8 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   689 000017BB B901000000          <1>     mov ecx, 1
   690 000017C0 B800460000          <1>     mov eax, 4600h
   691 000017C5 CD21                <1>     int 21h
   692 000017C7 0F8256FCFFFF        <1>     jc pipeFailure
   693 000017CD B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   694 000017D2 CD21                <1>     int 21h
   695 000017D4 0F8249FCFFFF        <1>     jc pipeFailure
   696 000017DA C605C0E8FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   697                              <1> .redirIn:
   698                              <1> ;Now check if any other redir needs to be setup
   699                              <1> ;Checks and sets up redir as appropriate.
   700                              <1>     ;Setup the redir here for STDIN
   701 000017E1 F605BEE8FFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   702 000017E8 7449                <1>     jz .redirOut
   703 000017EA 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   704 000017EC B800450000          <1>     mov eax, 4500h
   705 000017F1 CD21                <1>     int 21h
   706 000017F3 0F821CFCFFFF        <1>     jc redirFailure
   707 000017F9 668905A8E8FFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   708 00001800 488D1591EBFFFF      <1>     lea rdx, rdrInFilespec
   709 00001807 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   710 0000180C CD21                <1>     int 21h
   711 0000180E 0F8201FCFFFF        <1>     jc redirFailure
   712 00001814 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   713 00001816 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   714 00001819 B800460000          <1>     mov eax, 4600h
   715 0000181E CD21                <1>     int 21h
   716 00001820 0F82EFFBFFFF        <1>     jc redirFailure
   717 00001826 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   718 0000182B CD21                <1>     int 21h
   719 0000182D 0F82E2FBFFFF        <1>     jc redirFailure
   720                              <1> .redirOut:
   721 00001833 F6056DE8FFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   722                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000183A 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000183C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   723 0000183D 803D60E8FFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   724                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001844 75(3C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   725                              <1>     ;Else setup the redir here for STDOUT
   726 00001846 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   727 0000184B B800450000          <1>     mov eax, 4500h
   728 00001850 CD21                <1>     int 21h
   729 00001852 0F82BDFBFFFF        <1>     jc redirFailure
   730 00001858 6689054BE8FFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   731 0000185F 488D1581EBFFFF      <1>     lea rdx, rdrOutFilespec
   732 00001866 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   733 0000186B CD21                <1>     int 21h
   734 0000186D 730F                <1>     jnc .fileExists
   735 0000186F B8003C0000          <1>     mov eax, 3C00h
   736 00001874 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   737 00001876 CD21                <1>     int 21h
   738 00001878 0F8297FBFFFF        <1>     jc redirFailure
   739                              <1> .fileExists:
   740 0000187E B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   741 00001883 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   742 00001886 B800460000          <1>     mov eax, 4600h  ;DUP2
   743 0000188B CD21                <1>     int 21h
   744 0000188D 0F8282FBFFFF        <1>     jc redirFailure
   745 00001893 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   746 00001898 CD21                <1>     int 21h
   747 0000189A 0F8275FBFFFF        <1>     jc redirFailure
   748 000018A0 803D00E8FFFF01      <1>     cmp byte [redirOut], 1
   749                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000018A7 74(3C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   750                              <1>     ;Here we move the file pointer to the end of the file
   751 000018A9 31D2                <1>     xor edx, edx    ;Low order 32 bits
   752 000018AB 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   753 000018AD BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   754 000018B2 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   755 000018B7 CD21                <1>     int 21h
   756 000018B9 0F8256FBFFFF        <1>     jc redirFailure
   757                              <1>     return
    13                              <2> %%_ret:
    14 000018BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   758                              <1> 
   759                              <1> 
   760                              <1> pullCommandline:
   761                              <1> ;This command pulls the command tail down, removing the whole launch command
   762 000018C0 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   763                              <1> ;Skip leading separators
   764                              <1> .pctSkipLeading:
   765 000018C7 AC                  <1>     lodsb   ;Get first char
   766 000018C8 E8EB210000          <1>     call isALdelimiter
   767 000018CD 74F8                <1>     je .pctSkipLeading
   768 000018CF 48FFCE              <1>     dec rsi
   769                              <1>     ;rsi points to the start of the command
   770 000018D2 488D3D62EAFFFF      <1>     lea rdi, cmdPathSpec
   771 000018D9 E8B0210000          <1>     call strlen ;Get the length of the command
   772 000018DE FFC9                <1>     dec ecx ;Minus the terminating null
   773 000018E0 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   774 000018E3 280DC4E7FFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   775 000018E9 280DC1E7FFFF        <1>     sub byte [arg2Off], cl
   776 000018EF 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   777 000018F1 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   778                              <1> .pctPullChars:
   779 000018F8 AC                  <1>     lodsb
   780 000018F9 AA                  <1>     stosb
   781 000018FA 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   782 000018FC 7404                <1>     je .pctExit
   783 000018FE FFC1                <1>     inc ecx     ;Increment count
   784 00001900 EBF6                <1>     jmp short .pctPullChars 
   785                              <1> .pctExit:
   786 00001902 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   787                              <1>     return
    13                              <2> %%_ret:
    14 00001909 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   788                              <1> 
   789                              <1> batNextLine:
   790                              <1> ;Not yet implemented, if this is set to 1, print error and reset!
   791 0000190A 488D1513000000      <1>     lea rdx, .l1
   792 00001911 B800090000          <1>     mov eax, 0900h
   793 00001916 CD21                <1>     int 21h
   794 00001918 C60594E7FFFF00      <1>     mov byte [batFlag], 0
   795 0000191F E973F6FFFF          <1>     jmp commandMain
   796 00001924 4261746368206D6F64- <1> .l1 db "Batch mode... wait, what? How did you do that?",CR,LF,"$"
   796 0000192D 652E2E2E2077616974- <1>
   796 00001936 2C20776861743F2048- <1>
   796 0000193F 6F772064696420796F- <1>
   796 00001948 7520646F2074686174- <1>
   796 00001951 3F0D0A24            <1>
   797                              <1> 
   798                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   799                              <1> ;Input: rsi points to the count byte of a command line
   800 00001955 4150                <1>     push r8
   801 00001957 4151                <1>     push r9
   802 00001959 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   803 0000195B CD21                <1>     int 21h
   804 0000195D 52                  <1>     push rdx    ;Save on the stack
   805 0000195E 488D1D9BE5FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   806 00001965 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   807 00001967 CD21                <1>     int 21h
   808 00001969 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   809 0000196C 4989D9              <1>     mov r9, rbx
   810 0000196F 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   811 00001976 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   812 0000197B F348A5              <1>     rep movsq   ;Copy command line over
   813                              <1>     ;call doCommandLine
   814 0000197E 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   815 0000197F B450                <1>     mov ah, 50h ;Set Current PSP
   816 00001981 CD21                <1>     int 21h
   817 00001983 4159                <1>     pop r9
   818 00001985 4158                <1>     pop r8
   819 00001987 48CF                <1>     iretq
    17                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badDiskFull:
     7                              <1> ;This is a different error return, as this closes handles and prints
     8                              <1> ; disk full error and resets the command line!
     9 00001989 488D157AF0FFFF      <1>     lea rdx, noSpace
    10 00001990 488D0D79F3FFFF      <1>     lea rcx, pipeErr
    11 00001997 F60503E7FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the flag set
    12 0000199E 746F                <1>     jz short badCmn ;If its just disk full, dont go through pipe clean
    13 000019A0 480F45D1            <1>     cmovnz rdx, rcx ;Swap error messages if pipe flag is on
    14 000019A4 E866000000          <1>     call badCmn     ;Print the string
    15 000019A9 E98DFAFFFF          <1>     jmp redirPipeFailureCommon.noPrint  ;Now close pipes and fully reset!
    16                              <1> badSyntaxError:
    17 000019AE 488D1534F3FFFF      <1>     lea rdx, syntaxErr
    18 000019B5 EB58                <1>     jmp short badCmn
    19                              <1> badEnvSpaceError:
    20 000019B7 488D1566F0FFFF      <1>     lea rdx, noEnvSpace
    21 000019BE EB4F                <1>     jmp short badCmn
    22                              <1> badAccError:
    23 000019C0 488D15CEF2FFFF      <1>     lea rdx, accDenMsg
    24 000019C7 EB46                <1>     jmp short badCmn
    25                              <1> noSelfCopyError:
    26 000019C9 488D1585F0FFFF      <1>     lea rdx, noSelfCopy
    27 000019D0 EB3D                <1>     jmp short badCmn
    28                              <1> badParamError:
    29 000019D2 488D153AF1FFFF      <1>     lea rdx, badParm
    30 000019D9 EB34                <1>     jmp short badCmn
    31                              <1> badDriveError:
    32 000019DB 488D15F4F0FFFF      <1>     lea rdx, badDrv
    33 000019E2 EB2B                <1>     jmp short badCmn
    34                              <1> badArgError:
    35 000019E4 488D15B7F3FFFF      <1>     lea rdx, badArgs
    36 000019EB EB22                <1>     jmp short badCmn
    37                              <1> badFileError:
    38 000019ED 488D1592F3FFFF      <1>     lea rdx, badSpec
    39 000019F4 EB19                <1>     jmp short badCmn
    40                              <1> badDupFnf:
    41                              <1> ;Hybrid error message
    42 000019F6 488D15E5EFFFFF      <1>     lea rdx, dupName
    43 000019FD EB10                <1>     jmp short badCmn
    44                              <1> badFnf:
    45 000019FF 488D15F3EFFFFF      <1>     lea rdx, fnfMsg
    46 00001A06 EB07                <1>     jmp short badCmn
    47                              <1> badDirError:
    48 00001A08 488D1505F2FFFF      <1>     lea rdx, badDir
    49                              <1> badCmn:
    50 00001A0F E9661E0000          <1>     jmp printString     ;This will be made nuanced later, to agree with DOS
    51                              <1> badCmdError:
    52 00001A14 488D15ACEFFFFF      <1>     lea rdx, badCmd
    53 00001A1B EBF2                <1>     jmp short badCmn
    54                              <1> dir:
    55                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    56 00001A1D C605C4EBFFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    57 00001A24 C605BEEBFFFF00      <1>     mov byte [dirLineCtr], 0
    58 00001A2B C705B5EBFFFF000000- <1>     mov dword [dirFileCtr], 0
    58 00001A34 00                  <1>
    59 00001A35 C605B3EBFFFF00      <1>     mov byte [dirSrchDir], 0
    60 00001A3C 66C7059FEAFFFF0000  <1>     mov word [searchSpec], 0
    61 00001A45 488D3D25ECFFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    62 00001A4C C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    63 00001A4F 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    63 00001A58 3F                  <1>
    64 00001A59 48894701            <1>     mov qword [rdi + fcb.filename], rax
    65 00001A5D C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    66                              <1>     ;Start by scanning for the switches
    67 00001A64 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    68 00001A6B 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    69                              <1> .scanNew:
    70 00001A6E E837200000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    71 00001A73 AC                  <1>     lodsb   ;Get this char
    72 00001A74 3C0D                <1>     cmp al, CR
    73 00001A76 744D                <1>     je .scanDone
    74 00001A78 3A05ACE5FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    75 00001A7E 7524                <1>     jne .notSwitch
    76 00001A80 AC                  <1>     lodsb   ;Get the next char
    77 00001A81 E812200000          <1>     call ucChar
    78 00001A86 3C57                <1>     cmp al, "W"
    79 00001A88 7509                <1>     jne .notWide
    80 00001A8A 800D57EBFFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    81 00001A91 EBDB                <1>     jmp short .scanNew
    82                              <1> .notWide:
    83 00001A93 3C50                <1>     cmp al, "P"
    84 00001A95 0F8537FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    85 00001A9B 800D46EBFFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    86 00001AA2 EBCA                <1>     jmp short .scanNew
    87                              <1> .notSwitch:
    88 00001AA4 F6053DEBFFFF04      <1>     test byte [dirFlags], dirFileType
    89 00001AAB 0F8521FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    90                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    91 00001AB1 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    92 00001AB4 E87D210000          <1>     call copyArgumentToSearchSpec   
    93 00001AB9 48FFCE              <1>     dec rsi ;Point back to the terminator char
    94 00001ABC 800D25EBFFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    95 00001AC3 EBA9                <1>     jmp short .scanNew
    96                              <1> .scanDone:
    97 00001AC5 F6051CEBFFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    98 00001ACC 7438                <1>     jz .currentDrv
    99                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   100 00001ACE 488D350FEAFFFF      <1>     lea rsi, searchSpec
   101 00001AD5 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   102 00001AD9 752B                <1>     jne .currentDrv
   103                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   104 00001ADB 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   105 00001AE0 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   106 00001AE4 B801290000          <1>     mov eax, 2901h   ;Parse filename
   107 00001AE9 CD21                <1>     int 21h
   108 00001AEB 3CFF                <1>     cmp al, -1
   109 00001AED 0F84E8FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   110                              <1>     ;Else the drive in the fcb is valid
   111 00001AF3 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   112 00001AF8 84C0                <1>     test al, al
   113 00001AFA 740A                <1>     jz .currentDrv
   114 00001AFC FEC8                <1>     dec al  ;Convert to 0 based drive number
   115 00001AFE 8805EAEAFFFF        <1>     mov byte [dirDrv], al
   116 00001B04 EB0B                <1>     jmp short .dirPrintVol
   117                              <1> .currentDrv:
   118 00001B06 E8651F0000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   119 00001B0B 8805DDEAFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   120                              <1> .dirPrintVol:
   121 00001B11 488D35CCE9FFFF      <1>     lea rsi, searchSpec
   122                              <1> ;Now construct the path on dirSrchDir.
   123 00001B18 488D3DD0EAFFFF      <1>     lea rdi, dirSrchDir
   124 00001B1F 0FB605C8EAFFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   125 00001B26 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   126 00001B28 0441                <1>     add al, "A" ;Turn into a letter
   127 00001B2A B43A                <1>     mov ah, ":"
   128 00001B2C 66AB                <1>     stosw   ;Store X: into the search path
   129 00001B2E B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   130 00001B33 CD2F                <1>     int 2fh
   131 00001B35 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   132 00001B37 0F849EFEFFFF        <1>     je badDriveError
   133                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   134 00001B3D 8A05E6E4FFFF        <1>     mov al, byte [pathSep]
   135 00001B43 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   136 00001B45 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   137 00001B47 AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   138 00001B48 FEC2                <1>     inc dl  ;Increment by 1
   139 00001B4A 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   140 00001B4D B800470000          <1>     mov eax, 4700h  ;Print current working directory
   141 00001B52 CD21                <1>     int 21h
   142 00001B54 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   143                              <1>     ;rsi points to the first char in the provided path.
   144                              <1>     ;rdi points to the first char of the cwd.
   145 00001B57 31C0                <1>     xor eax, eax
   146                              <1> .goToEndOfCwd:
   147                              <1> ;Move to the end of the string, could use repne?
   148 00001B59 3807                <1>     cmp byte [rdi], al
   149 00001B5B 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   150 00001B5D 48FFC7              <1>     inc rdi
   151 00001B60 EBF7                <1>     jmp short .goToEndOfCwd
   152                              <1> .prepCopy:
   153 00001B62 8A05C1E4FFFF        <1>     mov al, byte [pathSep]
   154 00001B68 3806                <1>     cmp byte [rsi], al
   155 00001B6A 7412                <1>     je .copyPathLoop
   156 00001B6C B43A                <1>     mov ah, ":"
   157 00001B6E 86C4                <1>     xchg al, ah
   158 00001B70 663947FE            <1>     cmp word [rdi - 2], ax
   159 00001B74 7408                <1>     je .copyPathLoop
   160 00001B76 88E0                <1>     mov al, ah
   161 00001B78 3847FF              <1>     cmp byte [rdi - 1], al
   162 00001B7B 7401                <1>     je .copyPathLoop
   163 00001B7D AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   164                              <1> .copyPathLoop:
   165 00001B7E AC                  <1>     lodsb
   166 00001B7F 3A05A4E4FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   167 00001B85 7509                <1>     jne .checkDot  ;If not, store it
   168                              <1> .lpPathseps:
   169 00001B87 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   170 00001B89 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   171 00001B8B 48FFC6              <1>     inc rsi
   172 00001B8E EBF7                <1>     jmp short .lpPathseps
   173                              <1> .checkDot:
   174 00001B90 3C2E                <1>     cmp al, "."
   175 00001B92 7407                <1>     je .dots
   176                              <1> .store:
   177 00001B94 AA                  <1>     stosb
   178 00001B95 84C0                <1>     test al, al ;Was the char we just copied a null?
   179 00001B97 7472                <1>     jz .exitPathCopy
   180 00001B99 EBE3                <1>     jmp short .copyPathLoop
   181                              <1> .dots:
   182                              <1>     ;Here handle dot and dot dot
   183                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   184                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   185                              <1>     ; by 1. If it is null, go to top of loop.
   186                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   187 00001B9B 8A2588E4FFFF        <1>     mov ah, byte [pathSep]
   188 00001BA1 3867FF              <1>     cmp byte [rdi - 1], ah  
   189 00001BA4 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   190 00001BA6 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   191 00001BA8 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   192 00001BAB 7413                <1>     je .twoDot
   193                              <1>     ;This is only a "current dir" when next char is pathsep or null
   194 00001BAD 3A2576E4FFFF        <1>     cmp ah, byte [pathSep]
   195 00001BB3 7406                <1>     je .skipThisPathsep
   196 00001BB5 84E4                <1>     test ah, ah
   197 00001BB7 74C5                <1>     jz .copyPathLoop
   198 00001BB9 EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   199                              <1> .skipThisPathsep:
   200                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   201 00001BBB 48FFC6              <1>     inc rsi ;Point to the pathsep
   202 00001BBE EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   203                              <1> .twoDot:
   204                              <1>     ;Woohoo, this works!
   205 00001BC0 48FFC6              <1>     inc rsi ;Move past the second dot
   206 00001BC3 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   207 00001BC5 3A255EE4FFFF        <1>     cmp ah, byte [pathSep]
   208 00001BCB 7408                <1>     je .tdOk
   209 00001BCD 84E4                <1>     test ah, ah
   210 00001BCF 0F85FDFDFFFF        <1>     jne badParamError
   211                              <1> .tdOk:
   212 00001BD5 8A054EE4FFFF        <1>     mov al, byte byte [pathSep]
   213 00001BDB 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   214 00001BDF 0F84EDFDFFFF        <1>     je badParamError
   215 00001BE5 4881EF02000000      <1>     sub rdi, 2
   216 00001BEC 31C9                <1>     xor ecx, ecx
   217 00001BEE FFC9                <1>     dec ecx
   218 00001BF0 FD                  <1>     std
   219 00001BF1 F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   220 00001BF3 FC                  <1>     cld
   221 00001BF4 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   222 00001BFB 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   223 00001BFD 0F847BFFFFFF        <1>     jz .copyPathLoop
   224 00001C03 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   225 00001C06 E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   226                              <1> .exitPathCopy:
   227                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   228 00001C0B 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   229 00001C12 8A0511E4FFFF        <1>     mov al, byte [pathSep]
   230 00001C18 B43A                <1>     mov ah, ":"
   231 00001C1A 86C4                <1>     xchg al, ah
   232 00001C1C 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   233 00001C20 7409                <1>     je .skipOverwrite
   234 00001C22 88E0                <1>     mov al, ah
   235 00001C24 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   236 00001C26 7503                <1>     jne .skipOverwrite
   237 00001C28 C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   238                              <1> .skipOverwrite:
   239 00001C2B 488D35BDE9FFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   240 00001C32 4889F7              <1>     mov rdi, rsi
   241 00001C35 B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   242 00001C3A CD2F                <1>     int 2fh
   243 00001C3C E802200000          <1>     call scanForWildcards
   244 00001C41 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   245 00001C43 4889F2              <1>     mov rdx, rsi
   246 00001C46 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   247 00001C4A 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   248                              <1> .notNull:
   249 00001C4C E8E4200000          <1>     call setDTA ;Set the DTA
   250 00001C51 B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   251 00001C56 B8004E0000          <1>     mov eax, 4E00h ;Find first
   252 00001C5B CD21                <1>     int 21h
   253 00001C5D 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   254                              <1> ;Now we have searched for the file, is a directory?
   255 00001C5F F60519E5FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   256 00001C66 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   257                              <1>     ;Here we are searching IN a directory. Default search pattern!
   258 00001C68 31C0                <1>     xor eax, eax
   259 00001C6A 31C9                <1>     xor ecx, ecx
   260 00001C6C FFC9                <1>     dec ecx
   261 00001C6E F2AE                <1>     repne scasb
   262 00001C70 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   263 00001C73 EB40                <1>     jmp short .wcDefaultSearch
   264                              <1> .wcSearchPattern:
   265                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   266                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   267 00001C75 31C0                <1>     xor eax, eax
   268 00001C77 31C9                <1>     xor ecx, ecx
   269 00001C79 FFC9                <1>     dec ecx
   270 00001C7B F2AE                <1>     repne scasb ;Scan forwards
   271                              <1>     ;Here rdi points past the null at the end
   272 00001C7D 8A05A6E3FFFF        <1>     mov al, byte [pathSep]
   273 00001C83 31C9                <1>     xor ecx, ecx
   274 00001C85 FFC9                <1>     dec ecx
   275 00001C87 FD                  <1>     std ;Search backwards
   276 00001C88 F2AE                <1>     repne scasb
   277 00001C8A FC                  <1>     cld ;Search forwards again
   278 00001C8B 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   279 00001C8E 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   280 00001C92 7503                <1>     jne .wcsp1
   281 00001C94 48FFC7              <1>     inc rdi ;Go one char forwards
   282                              <1> .wcsp1:
   283                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   284 00001C97 57                  <1>     push rdi
   285 00001C98 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   286 00001C9A 7503                <1>     jne .wcsp2
   287 00001C9C 48FFC7              <1>     inc rdi
   288                              <1> .wcsp2:
   289 00001C9F 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   290 00001CA2 488D3DC8E9FFFF      <1>     lea rdi, dirSrchFCB
   291 00001CA9 B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   292 00001CAE CD21                <1>     int 21h
   293 00001CB0 5F                  <1>     pop rdi
   294 00001CB1 31C0                <1>     xor eax, eax
   295 00001CB3 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   296                              <1> .wcDefaultSearch:
   297 00001CB5 0FB60532E9FFFF      <1>     movzx eax, byte [dirDrv] 
   298 00001CBC E823110000          <1>     call volume.dirEP
   299 00001CC1 488D15B4EFFFFF      <1>     lea rdx, dirMain    ;Print message intro
   300 00001CC8 B409                <1>     mov ah, 09h
   301 00001CCA CD21                <1>     int 21h
   302 00001CCC C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   303 00001CCF 488D1519E9FFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   304 00001CD6 B409                <1>     mov ah, 09h
   305 00001CD8 CD21                <1>     int 21h
   306 00001CDA C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   307 00001CDD 488D1589ECFFFF      <1>     lea rdx, crlf2
   308 00001CE4 B409                <1>     mov ah, 09h
   309 00001CE6 CD21                <1>     int 21h
   310                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   311                              <1> ;rdi points to the terminating null
   312 00001CE8 8A053BE3FFFF        <1>     mov al, byte [pathSep]
   313 00001CEE 3847FF              <1>     cmp byte [rdi - 1], al
   314 00001CF1 7403                <1>     je .root
   315 00001CF3 48FFC7              <1>     inc rdi
   316                              <1> .root:
   317 00001CF6 48FFCF              <1>     dec rdi ;Point back to the pathsep
   318 00001CF9 AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   319 00001CFA 488D3571E9FFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   320 00001D01 E87F1E0000          <1>     call FCBToAsciiz    ;Terminates for free
   321 00001D06 E801000000          <1>     call .searchForFile
   322                              <1>     return
    13                              <2> %%_ret:
    14 00001D0B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   323                              <1> 
   324                              <1> .searchForFile:
   325 00001D0C E824200000          <1>     call setDTA
   326 00001D11 B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   327 00001D16 488D15D2E8FFFF      <1>     lea rdx, dirSrchDir
   328 00001D1D B8004E0000          <1>     mov eax, 4E00h ;Find first
   329 00001D22 CD21                <1>     int 21h
   330 00001D24 720B                <1>     jc .dirNoMoreFiles
   331                              <1> .findNext:
   332 00001D26 E890000000          <1>     call .dirPrintFileData  ;Print the file information
   333 00001D2B B44F                <1>     mov ah, 4Fh
   334 00001D2D CD21                <1>     int 21h
   335 00001D2F 73F5                <1>     jnc .findNext 
   336                              <1> .dirNoMoreFiles:
   337 00001D31 F605B0E8FFFF01      <1>     test byte [dirFlags], dirWideType
   338 00001D38 740B                <1>     jz .dirNoEndNewLine
   339 00001D3A 488D1529ECFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   340 00001D41 B409                <1>     mov ah, 09h
   341 00001D43 CD21                <1>     int 21h
   342                              <1> .dirNoEndNewLine:
   343                              <1>     ;Now we print the number of files and the number of bytes on the disk
   344 00001D45 F7059BE8FFFFFFFFFF- <1>     test dword [dirFileCtr], -1
   344 00001D4E FF                  <1>
   345 00001D4F 750D                <1>     jnz .filesFound
   346                              <1>     ;Else print File not found and exit!
   347 00001D51 488D15A1ECFFFF      <1>     lea rdx, fnfMsg
   348 00001D58 E81D1B0000          <1>     call printString
   349                              <1>     return
    13                              <2> %%_ret:
    14 00001D5D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   350                              <1> .filesFound:
   351 00001D5E 488D15C9F1FFFF      <1>     lea rdx, fourSpc
   352 00001D65 B409                <1>     mov ah, 09h
   353 00001D67 CD21                <1>     int 21h
   354 00001D69 B409                <1>     mov ah, 09h ;Print four Spaces twice
   355 00001D6B CD21                <1>     int 21h
   356 00001D6D 8B0577E8FFFF        <1>     mov eax, dword [dirFileCtr]   ;Get number of files
   357 00001D73 E8DF1E0000          <1>     call printDecimalWord
   358 00001D78 488D1536EDFFFF      <1>     lea rdx, dirOk
   359 00001D7F B409                <1>     mov ah, 09h
   360 00001D81 CD21                <1>     int 21h
   361 00001D83 488D15A9F1FFFF      <1>     lea rdx, threeSpc
   362 00001D8A B409                <1>     mov ah, 09h
   363 00001D8C CD21                <1>     int 21h
   364 00001D8E B800360000          <1>     mov eax, 3600h ;Get disk info
   365 00001D93 8A1555E8FFFF        <1>     mov dl, byte [dirDrv]
   366 00001D99 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   367 00001D9B CD21                <1>     int 21h ;Get disk free space info
   368 00001D9D 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   369 00001DA0 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   370 00001DA3 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   371 00001DA5 F7E1                <1>     mul ecx ;Get bytes per cluster
   372 00001DA7 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   373                              <1>     ;rax now has the number of free bytes on the disk
   374 00001DAA E8A81E0000          <1>     call printDecimalWord
   375 00001DAF 488D1509EDFFFF      <1>     lea rdx, bytesOk
   376 00001DB6 B409                <1>     mov ah, 09h
   377 00001DB8 CD21                <1>     int 21h
   378                              <1>     return
    13                              <2> %%_ret:
    14 00001DBA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   379                              <1> 
   380                              <1> .dirPrintFileData:
   381                              <1> ;Use cmdFcb to build the file name with space
   382                              <1> ;Start by print the name (same for both cases)
   383                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   384 00001DBB F605BDE3FFFF46      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles | dirCharDev
   385                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001DC2 75(BA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   386 00001DC4 488D35BDE3FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   387 00001DCB 488D3D88E3FFFF      <1>     lea rdi, cmdFcb
   388 00001DD2 E8401D0000          <1>     call asciiFilenameToFCB
   389 00001DD7 488D157CE3FFFF      <1>     lea rdx, cmdFcb
   390 00001DDE B908000000          <1>     mov ecx, 8  ;Print 8 chars
   391 00001DE3 BB01000000          <1>     mov ebx, 1  ;STDOUT
   392 00001DE8 B440                <1>     mov ah, 40h ;Write handle
   393 00001DEA CD21                <1>     int 21h
   394 00001DEC 52                  <1>     push rdx
   395 00001DED B220                <1>     mov dl, " "
   396 00001DEF B402                <1>     mov ah, 02h ;Print char
   397 00001DF1 CD21                <1>     int 21h
   398 00001DF3 5A                  <1>     pop rdx
   399 00001DF4 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   400 00001DFB B903000000          <1>     mov ecx, 3  ;Print three chars
   401 00001E00 BB01000000          <1>     mov ebx, 1  ;STDOUT
   402 00001E05 B440                <1>     mov ah, 40h ;Write handle
   403 00001E07 CD21                <1>     int 21h
   404 00001E09 F605D8E7FFFF01      <1>     test byte [dirFlags], dirWideType
   405 00001E10 0F85A8000000        <1>     jnz .widePrint
   406                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   407                              <1>     ;Now check if a DIR
   408 00001E16 F60562E3FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   409 00001E1D 7418                <1>     jz .dirPrintNotDir
   410 00001E1F 488D15A7ECFFFF      <1>     lea rdx, dirLbl
   411 00001E26 B409                <1>     mov ah, 09h
   412 00001E28 CD21                <1>     int 21h
   413 00001E2A 488D1502F1FFFF      <1>     lea rdx, threeSpc
   414 00001E31 B409                <1>     mov ah, 09h
   415 00001E33 CD21                <1>     int 21h
   416 00001E35 EB4F                <1>     jmp short .dirPrintFileDT
   417                              <1> .dirPrintNotDir:
   418                              <1> ;Here we print the file size
   419 00001E37 B220                <1>     mov dl, " "
   420 00001E39 B402                <1>     mov ah, 02h
   421 00001E3B CD21                <1>     int 21h
   422 00001E3D 8B0541E3FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   423 00001E43 E8801E0000          <1>     call getDecimalWord
   424 00001E48 4889CB              <1>     mov rbx, rcx
   425 00001E4B 51                  <1>     push rcx
   426 00001E4C 480FCB              <1>     bswap rbx
   427 00001E4F B908000000          <1>     mov ecx, 8
   428                              <1> .dirPrintFileSizePrep:
   429 00001E54 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   430 00001E56 7514                <1>     jne .dirPrintFileSize
   431 00001E58 B402                <1>     mov ah, 02h
   432 00001E5A B220                <1>     mov dl, " "
   433 00001E5C CD21                <1>     int 21h
   434 00001E5E 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   435 00001E62 FFC9                <1>     dec ecx
   436 00001E64 81F901000000        <1>     cmp ecx, 1
   437 00001E6A 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   438                              <1> .dirPrintFileSize:
   439 00001E6C 5B                  <1>     pop rbx
   440                              <1> .dirPrintFileSizeLoop:
   441 00001E6D 88DA                <1>     mov dl, bl
   442 00001E6F B402                <1>     mov ah, 02h
   443 00001E71 CD21                <1>     int 21h
   444 00001E73 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   445 00001E77 FFC9                <1>     dec ecx
   446 00001E79 75F2                <1>     jnz .dirPrintFileSizeLoop
   447 00001E7B 488D15B5F0FFFF      <1>     lea rdx, twoSpc
   448 00001E82 B409                <1>     mov ah, 09h
   449 00001E84 CD21                <1>     int 21h
   450                              <1> .dirPrintFileDT:
   451 00001E86 B220                <1>     mov dl, " "
   452 00001E88 B402                <1>     mov ah, 02h
   453 00001E8A CD21                <1>     int 21h
   454 00001E8C 0FB705EFE2FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   455 00001E93 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   456 00001E95 E890170000          <1>     call printDate
   457 00001E9A 488D1596F0FFFF      <1>     lea rdx, twoSpc
   458 00001EA1 B409                <1>     mov ah, 09h
   459 00001EA3 CD21                <1>     int 21h
   460 00001EA5 0FB705D4E2FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   461 00001EAC E89B180000          <1>     call printTime
   462 00001EB1 488D15B2EAFFFF      <1>     lea rdx, crlf
   463 00001EB8 B409                <1>     mov ah, 09h
   464 00001EBA CD21                <1>     int 21h
   465 00001EBC EB0B                <1>     jmp short .dirPrintNameExit
   466                              <1> .widePrint:
   467                              <1> ;If /W, print name space ext space space space space
   468 00001EBE 488D1569F0FFFF      <1>     lea rdx, fourSpc
   469 00001EC5 B409                <1>     mov ah, 09h ;Print string
   470 00001EC7 CD21                <1>     int 21h
   471                              <1> .dirPrintNameExit:
   472 00001EC9 FF051BE7FFFF        <1>     inc dword [dirFileCtr]   ;Increment file counter
   473 00001ECF FE0514E7FFFF        <1>     inc byte [dirLineCtr]
   474 00001ED5 803D0DE7FFFF17      <1>     cmp byte [dirLineCtr], 23
   475                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001EDC 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001EDE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   476 00001EDF 488D150EECFFFF      <1>     lea rdx, pauseMes
   477 00001EE6 B409                <1>     mov ah, 09h
   478 00001EE8 CD21                <1>     int 21h
   479 00001EEA B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   480 00001EEC CD21                <1>     int 21h
   481 00001EEE C605F4E6FFFF00      <1>     mov byte [dirLineCtr], 0
   482 00001EF5 488D156EEAFFFF      <1>     lea rdx, crlf   ;Force new line
   483 00001EFC B409                <1>     mov ah, 09h
   484 00001EFE CD21                <1>     int 21h
   485                              <1>     return
    13                              <2> %%_ret:
    14 00001F00 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   486                              <1> 
   487                              <1> chdir:
   488 00001F01 F605A4E1FFFFFF      <1>     test byte [arg1Flg], -1
   489 00001F08 754D                <1>     jnz .changeDir
   490                              <1>     ;Print CWD
   491                              <1> .printCWD:
   492 00001F0A E8E0190000          <1>     call putCWDInPrompt ;Exactly the same procedure
   493 00001F0F E85F190000          <1>     call printCRLF
   494                              <1>     return
    13                              <2> %%_ret:
    14 00001F14 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   495                              <1> .printDiskCWD:
   496                              <1> ;Print CWD for a specified drive
   497 00001F15 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   498 00001F19 88D0                <1>     mov al, dl
   499 00001F1B 0440                <1>     add al, "@" ;Get the UC letter
   500 00001F1D B43A                <1>     mov ah, ":"
   501 00001F1F 488D3DBEE5FFFF      <1>     lea rdi, searchSpec
   502 00001F26 66AB                <1>     stosw   ;Store X:, rdi+=2
   503 00001F28 8A05FBE0FFFF        <1>     mov al, byte [pathSep]
   504 00001F2E AA                  <1>     stosb   ;Store pathSep, inc rdi
   505 00001F2F B447                <1>     mov ah, 47h ;Get Current Working Directory
   506 00001F31 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   507 00001F34 CD21                <1>     int 21h
   508 00001F36 E8531B0000          <1>     call strlen
   509 00001F3B 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   510 00001F41 B440                <1>     mov ah, 40h ;Write to handle
   511 00001F43 BB01000000          <1>     mov ebx, 1  ;STDOUT
   512 00001F48 488D1595E5FFFF      <1>     lea rdx, searchSpec
   513 00001F4F CD21                <1>     int 21h
   514 00001F51 E81D190000          <1>     call printCRLF
   515                              <1>     return
    13                              <2> %%_ret:
    14 00001F56 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   516                              <1> .changeDir:
   517 00001F57 8A0551E1FFFF        <1>     mov al, byte [arg1FCBret]
   518 00001F5D 3CFF                <1>     cmp al, -1 
   519 00001F5F 0F8476FAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   520 00001F65 E8B41C0000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   521 00001F6A 488D1573E5FFFF      <1>     lea rdx, searchSpec
   522 00001F71 B43B                <1>     mov ah, 3Bh ;CHDIR
   523 00001F73 CD21                <1>     int 21h
   524 00001F75 0F828DFAFFFF        <1>     jc badDirError
   525                              <1>     return
    13                              <2> %%_ret:
    14 00001F7B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   526                              <1> 
   527                              <1> mkdir:
   528 00001F7C F60529E1FFFFFF      <1>     test byte [arg1Flg], -1
   529 00001F83 0F845BFAFFFF        <1>     jz badArgError
   530 00001F89 F6051FE1FFFFFF      <1>     test byte [arg2Flg], -1
   531 00001F90 0F854EFAFFFF        <1>     jnz badArgError
   532                              <1>     ;We have exactly one argument
   533 00001F96 8A0512E1FFFF        <1>     mov al, byte [arg1FCBret]
   534 00001F9C 3CFF                <1>     cmp al, -1 
   535 00001F9E 0F8437FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   536 00001FA4 E8751C0000          <1>     call buildCommandPath
   537 00001FA9 488D1534E5FFFF      <1>     lea rdx, searchSpec
   538 00001FB0 B800390000          <1>     mov eax, 3900h  ;MKDIR
   539 00001FB5 CD21                <1>     int 21h
   540                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001FB7 73(7B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   541                              <1> .badMake:   ;Else, bad make
   542 00001FB9 488D1568ECFFFF      <1>     lea rdx, badMD
   543 00001FC0 E9B5180000          <1>     jmp printString
   544                              <1> 
   545                              <1> rmdir:
   546 00001FC5 F605E0E0FFFFFF      <1>     test byte [arg1Flg], -1
   547 00001FCC 0F8412FAFFFF        <1>     jz badArgError
   548 00001FD2 F605D6E0FFFFFF      <1>     test byte [arg2Flg], -1
   549 00001FD9 0F8505FAFFFF        <1>     jnz badArgError
   550                              <1>     ;We have exactly one argument
   551 00001FDF 8A05C9E0FFFF        <1>     mov al, byte [arg1FCBret]
   552 00001FE5 3CFF                <1>     cmp al, -1 
   553 00001FE7 0F84EEF9FFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   554 00001FED E82C1C0000          <1>     call buildCommandPath
   555 00001FF2 488D15EBE4FFFF      <1>     lea rdx, searchSpec
   556 00001FF9 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   557 00001FFE CD21                <1>     int 21h
   558                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002000 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002002 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   559                              <1> .badRemove:   ;Else, bad make
   560 00002003 488D153BECFFFF      <1>     lea rdx, badRD
   561 0000200A E96B180000          <1>     jmp printString
   562                              <1> 
   563                              <1> xcopy:  ;tmp command name until we get this ok
   564 0000200F 66C705B8E7FFFFFFFF  <1>     mov word [sourceHdl], -1
   565 00002018 66C705B1E7FFFFFFFF  <1>     mov word [destHdl], -1
   566 00002021 66C705AAE7FFFFFFFF  <1>     mov word [srcHdlInfo], -1
   567 0000202A C6052FE8FFFF00      <1>     mov byte [cpyFlg], 0
   568 00002031 48C7051AE8FFFF0000- <1>     mov qword [cpBufPtr], 0         ;If this is ever null, error!
   568 0000203A 0000                <1>
   569 0000203C 48C70517E8FFFF0000- <1>     mov qword [cpBufSz], 0          
   569 00002045 0000                <1>
   570 00002047 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   571 0000204E 4889F7              <1>     mov rdi, rsi                    ;Start scanning chars here
   572 00002051 0FB64FFF            <1>     movzx ecx, byte [rdi - 1]       ;Get the count byte
   573 00002055 B02B                <1>     mov al, "+"                     ;Are we concatenating?
   574 00002057 F2AE                <1>     repne scasb
   575 00002059 7507                <1>     jne .noCat
   576 0000205B 800DFEE7FFFF04      <1>     or byte [cpyFlg], catCpy        ;We are concatenating 
   577                              <1> .noCat:
   578                              <1> ;Now we get a disk buffer, of the size of the internal disk buffers. 
   579                              <1> ;If we cant get a disk buffer, use searchspec as an input buffer! 
   580                              <1> ;   (Can copy 256 chars at once)
   581 00002062 B800520000          <1>     mov eax, 5200h
   582 00002067 CD21                <1>     int 21h ;Get in rbx ptr to sysvars
   583 00002069 0FB74B20            <1>     movzx ecx, word [rbx + 20h] ;Get the internal buffer size in ecx!
   584 0000206D 89CB                <1>     mov ebx, ecx
   585 0000206F C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs, save bytes in ecx
   586 00002072 B800480000          <1>     mov eax, 4800h
   587 00002077 CD21                <1>     int 21h
   588 00002079 730C                <1>     jnc .bufOk
   589 0000207B 488D0562E4FFFF      <1>     lea rax, searchSpec
   590 00002082 B900010000          <1>     mov ecx, 256
   591                              <1> .bufOk:
   592 00002087 488905C8E7FFFF      <1>     mov qword [cpBufPtr], rax   ;Save ptr to xfr area
   593 0000208E 66890DC9E7FFFF      <1>     mov word [cpBufSz], cx      ;Save buffer size
   594                              <1> ;Now we search for the destination name. This is done by searching for a 
   595                              <1> ; delimiter that is followed by a non-+ and non-switchchar
   596                              <1> 
   597                              <1> .cpErr:
   598 00002095 4150                <1>     push r8
   599 00002097 4C8B05B8E7FFFF      <1>     mov r8, qword [cpBufPtr]
   600 0000209E B800490000          <1>     mov eax, 4900h
   601 000020A3 CD21                <1>     int 21h
   602 000020A5 4158                <1>     pop r8
   603 000020A7 0F826D1C0000        <1>     jc freezePC ;Bad ptr or bad mcb. Bad ptr shouldnt happen, badMCB big error
   604                              <1>     ;Other cleanup here
   605                              <1>     return
    13                              <2> %%_ret:
    14 000020AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   606                              <1> copy:
   607 000020AE F605F7DFFFFFFF      <1>     test byte [arg1Flg], -1
   608 000020B5 0F8429F9FFFF        <1>     jz badArgError
   609 000020BB F605EDDFFFFFFF      <1>     test byte [arg2Flg], -1
   610 000020C2 0F841CF9FFFF        <1>     jz badArgError
   611 000020C8 0FB605DEDFFFFF      <1>     movzx eax, byte [arg1Off]
   612 000020CF 4C8B0539DFFFFF      <1>     mov r8, [pspPtr]
   613 000020D6 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   614 000020DD 4889F3              <1>     mov rbx, rsi    ;Save the ptr to the start of the string in rbx
   615 000020E0 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   616 000020E3 488D3DC7E5FFFF      <1>     lea rdi, srcSpec
   617 000020EA E8EC1A0000          <1>     call cpDelimPathToBufz    
   618 000020EF 0FB605BADFFFFF      <1>     movzx eax, byte [arg2Off]
   619 000020F6 4889DE              <1>     mov rsi, rbx    ;Get back the start of the ptr
   620 000020F9 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   621 000020FC 488D3D30E6FFFF      <1>     lea rdi, destSpec
   622 00002103 E8D31A0000          <1>     call cpDelimPathToBufz   
   623                              <1> ;Before we open, we check if the two filenames are equal
   624                              <1> ; If so, crap out.
   625 00002108 488D35A2E5FFFF      <1>     lea rsi, srcSpec
   626 0000210F 488D3D1DE6FFFF      <1>     lea rdi, destSpec
   627 00002116 B81E120000          <1>     mov eax, 121Eh
   628 0000211B CD2F                <1>     int 2Fh
   629 0000211D 0F84D0000000        <1>     jz .sameFilename
   630                              <1>     ;Open source with read permission
   631                              <1>     ;Open destination with write permission
   632 00002123 488D1587E5FFFF      <1>     lea rdx, srcSpec
   633 0000212A B8003D0000          <1>     mov eax, 3D00h  ;Read open
   634 0000212F CD21                <1>     int 21h
   635 00002131 0F829BF8FFFF        <1>     jc badParamError
   636 00002137 66890592E6FFFF      <1>     mov word [sourceHdl], ax
   637                              <1> 
   638 0000213E 0FB7D8              <1>     movzx ebx, ax   ;For bx
   639 00002141 B800440000          <1>     mov eax, 4400h  ;Get device info in dx
   640 00002146 CD21                <1>     int 21h
   641 00002148 66891585E6FFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
   642                              <1> 
   643 0000214F 488D15DDE5FFFF      <1>     lea rdx, destSpec
   644 00002156 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   645 0000215B 31C9                <1>     xor ecx, ecx    ;No file attributes
   646 0000215D CD21                <1>     int 21h
   647 0000215F 0F82B5000000        <1>     jc .badExit
   648 00002165 66890566E6FFFF      <1>     mov word [destHdl], ax
   649 0000216C 31F6                <1>     xor esi, esi
   650 0000216E 488D1561E6FFFF      <1>     lea rdx, copyBuffer
   651                              <1> .copyLoop:
   652 00002175 B980000000          <1>     mov ecx, 128
   653 0000217A 0FB71D4FE6FFFF      <1>     movzx ebx, word [sourceHdl]
   654 00002181 B43F                <1>     mov ah, 3Fh ;Read
   655 00002183 CD21                <1>     int 21h
   656 00002185 0F828F000000        <1>     jc .badExit
   657 0000218B 85C0                <1>     test eax, eax
   658 0000218D 7437                <1>     jz .okExit
   659 0000218F 01C6                <1>     add esi, eax
   660 00002191 89C1                <1>     mov ecx, eax
   661 00002193 0FB71D38E6FFFF      <1>     movzx ebx, word [destHdl]
   662 0000219A B440                <1>     mov ah, 40h ;Write
   663 0000219C CD21                <1>     int 21h
   664 0000219E 727A                <1>     jc .badExit
   665 000021A0 3D80000000          <1>     cmp eax, 128    ;Did we read 128 chars?
   666 000021A5 74CE                <1>     je .copyLoop
   667                              <1>     ;If not char dev, exit
   668 000021A7 66F70524E6FFFF8000  <1>     test word [srcHdlInfo], 80h ;Char dev bit set?
   669 000021B0 7414                <1>     jz .okExit
   670                              <1>     ;Is handle in cooked or binary mode?
   671 000021B2 66F70519E6FFFF2000  <1>     test word [srcHdlInfo], 20h
   672 000021BB 7509                <1>     jnz .okExit
   673                              <1>     ;Here the char dev must be in cooked mode. Check if the last char was ^Z
   674 000021BD 09C0                <1>     or eax, eax ;Clear upper bits in eax
   675 000021BF 807C02FD1A          <1>     cmp byte [rdx + rax - 3], EOF ;Was char before CRLF a EOF?
   676 000021C4 75AF                <1>     jne .copyLoop   ;Jump if not
   677                              <1> .okExit:
   678 000021C6 E832000000          <1>     call .leaveCopyClose
   679 000021CB 488D1598E7FFFF      <1>     lea rdx, crlf
   680 000021D2 B409                <1>     mov ah, 09h
   681 000021D4 CD21                <1>     int 21h
   682 000021D6 488D1551EDFFFF      <1>     lea rdx, fourSpc
   683 000021DD B409                <1>     mov ah, 09h
   684 000021DF CD21                <1>     int 21h
   685 000021E1 B402                <1>     mov ah, 02h
   686 000021E3 B231                <1>     mov dl, "1" ;1 File(s) copied
   687 000021E5 CD21                <1>     int 21h
   688 000021E7 488D15B5E8FFFF      <1>     lea rdx, copyOk
   689 000021EE B409                <1>     mov ah, 09h
   690 000021F0 CD21                <1>     int 21h
   691                              <1>     return
    13                              <2> %%_ret:
    14 000021F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   692                              <1> .sameFilename:
   693 000021F3 E805000000          <1>     call .leaveCopyClose ;Close the handles
   694 000021F8 E9CCF7FFFF          <1>     jmp noSelfCopyError
   695                              <1> .leaveCopyClose:
   696 000021FD 668B1DCCE5FFFF      <1>     mov bx, word [sourceHdl]
   697 00002204 B8003E0000          <1>     mov eax, 3E00h
   698 00002209 CD21                <1>     int 21h
   699 0000220B 668B1DC0E5FFFF      <1>     mov bx, word [destHdl]
   700 00002212 B8003E0000          <1>     mov eax, 3E00h
   701 00002217 CD21                <1>     int 21h
   702                              <1>     return
    13                              <2> %%_ret:
    14 00002219 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   703                              <1> .badExit:
   704                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   705 0000221A 668B1DAFE5FFFF      <1>     mov bx, word [sourceHdl]
   706 00002221 6681FBFFFF          <1>     cmp bx, -1
   707 00002226 7407                <1>     je .skipSource
   708 00002228 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   709 0000222D CD21                <1>     int 21h
   710                              <1> .skipSource:
   711 0000222F 668B1D9CE5FFFF      <1>     mov bx, word [destHdl]
   712 00002236 6681FBFFFF          <1>     cmp bx, -1
   713 0000223B 0F8491F7FFFF        <1>     je badParamError
   714 00002241 B8003E0000          <1>     mov eax, 3E00h
   715 00002246 CD21                <1>     int 21h
   716 00002248 E985F7FFFF          <1>     jmp badParamError
   717                              <1> 
   718                              <1> erase:
   719 0000224D F60558DEFFFFFF      <1>     test byte [arg1Flg], -1
   720 00002254 0F848AF7FFFF        <1>     jz badArgError
   721 0000225A E8D61A0000          <1>     call setDTA     ;Start by resetting the DTA
   722 0000225F E8BA190000          <1>     call buildCommandPath   ;Get the relative path to the file
   723                              <1> .dirLp:
   724 00002264 488D3D79E2FFFF      <1>     lea rdi, searchSpec
   725 0000226B E8F1180000          <1>     call findLastPathComponant
   726 00002270 4889FE              <1>     mov rsi, rdi    ;Save this as the source
   727 00002273 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
   728 00002277 B03F                <1>     mov al, "?"
   729                              <1>     ;Store question marks in the name field
   730 00002279 57                  <1>     push rdi
   731 0000227A 48FFC7              <1>     inc rdi ;Goto the first char
   732 0000227D B90B000000          <1>     mov ecx, 11
   733 00002282 F3AA                <1>     rep stosb
   734 00002284 5F                  <1>     pop rdi
   735 00002285 4889F2              <1>     mov rdx, rsi    ;Save the ptr
   736 00002288 B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
   737 0000228D CD21                <1>     int 21h
   738 0000228F 3C01                <1>     cmp al, 1
   739 00002291 0F85A1000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
   740                              <1>     ;Else, we now copy back the search pattern over the last componant!
   741                              <1>     ;No dirs to handle in here
   742 00002297 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
   743 0000229B 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
   744 0000229E E8E2180000          <1>     call FCBToAsciiz    ;Null terminates for free
   745                              <1>     ;Count the number of ?'s, if 11, we print the message
   746 000022A3 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
   747 000022A7 31C9                <1>     xor ecx, ecx
   748                              <1> .wcScan:
   749 000022A9 AC                  <1>     lodsb
   750 000022AA 3C3F                <1>     cmp al, "?"
   751 000022AC 7534                <1>     jne .endCount
   752 000022AE FFC1                <1>     inc ecx
   753 000022B0 81F90B000000        <1>     cmp ecx, 11
   754 000022B6 75F1                <1>     jne .wcScan
   755                              <1> .ynmsg:
   756 000022B8 488D1509E9FFFF      <1>     lea rdx, ynMes
   757 000022BF E8B6150000          <1>     call printString
   758 000022C4 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   759 000022C6 CD21                <1>     int 21h ;Get char in al
   760 000022C8 E8CB170000          <1>     call ucChar ;Uppercase the char
   761 000022CD 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
   762 000022CF 740C                <1>     je .endCount1
   763 000022D1 3C4E                <1>     cmp al, "N"
   764                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000022D3 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000022D5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   765 000022D6 E898150000          <1>     call printCRLF      ;Else, tell me what you want!!!
   766 000022DB EBDB                <1>     jmp short .ynmsg    
   767                              <1> .endCount1:
   768 000022DD E891150000          <1>     call printCRLF
   769                              <1> .endCount:
   770                              <1>     ;Now we copy our search template pathstring to delPath
   771 000022E2 488D3DC8E3FFFF      <1>     lea rdi, delPath
   772 000022E9 488D35F4E1FFFF      <1>     lea rsi, searchSpec ;Source the chars from here
   773 000022F0 E88F170000          <1>     call strcpy2         ;Copy the string over to delPath
   774                              <1> .findFile:
   775                              <1>     ;Now we find first/find next our way through the files
   776 000022F5 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
   777 000022F8 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
   778 000022FA B8004E0000          <1>     mov eax, 4E00h  ;Find first
   779 000022FF CD21                <1>     int 21h
   780 00002301 0F82F8F6FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   781                              <1>     ;Now the file was found, we copy the name over, delete and keep going
   782 00002307 E855180000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
   783 0000230C 488D3575DEFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   784                              <1> .delNextFile:
   785                              <1> ;rsi and rdi dont move here
   786 00002313 E86C170000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
   787 00002318 488D1592E3FFFF      <1>     lea rdx, delPath
   788 0000231F B800410000          <1>     mov eax, 4100h  ;Delete File 
   789 00002324 CD21                <1>     int 21h         ;If this fails to delete it, fail silently
   790 00002326 488D15B7E1FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
   791 0000232D B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
   792 00002332 CD21                <1>     int 21h
   793 00002334 73DD                <1>     jnc .delNextFile    
   794 00002336 F8                  <1>     clc ;Clear carry to indicate success
   795                              <1>     return
    13                              <2> %%_ret:
    14 00002337 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   796                              <1> .noWildcard:
   797                              <1>     ;Here we just check that the file was not a directory. If it was, we add
   798                              <1>     ; a \*.*<NUL> over the null terminator
   799 00002338 488D15A5E1FFFF      <1>     lea rdx, searchSpec
   800 0000233F B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
   801 00002344 B8004E0000          <1>     mov eax, 4E00h  ;Find first
   802 00002349 CD21                <1>     int 21h
   803 0000234B 0F82AEF6FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   804 00002351 F60527DEFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   805 00002358 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
   806                              <1>     ;Else, we are dealing with a dir
   807 0000235A 4889D7              <1>     mov rdi, rdx
   808 0000235D 31C9                <1>     xor ecx, ecx
   809 0000235F FFC9                <1>     dec ecx
   810 00002361 F2AE                <1>     repne scasb ;Go to the end of the line!
   811 00002363 48FFCF              <1>     dec rdi
   812 00002366 0FB605BCDCFFFF      <1>     movzx eax, byte [pathSep]
   813 0000236D AA                  <1>     stosb
   814 0000236E B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
   815 00002373 AB                  <1>     stosd
   816 00002374 E9EBFEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
   817                              <1> .delMain:   ;Call with rdx -> buffer!
   818 00002379 B800410000          <1>     mov eax, 4100h  ;Delete File 
   819 0000237E CD21                <1>     int 21h
   820                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002380 73(37)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   821 00002382 3C05                <1>     cmp al, errAccDen
   822 00002384 0F8436F6FFFF        <1>     je badAccError ;If the file is RO, fail!
   823 0000238A E95EF6FFFF          <1>     jmp badFileError
   824                              <1>     return
    13                              <2> %%_ret:
    14 0000238F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   825                              <1> 
   826                              <1> date:
   827 00002390 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   828 00002397 E80E170000          <1>     call skipDelimiters
   829 0000239C 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
   830 0000239F 7562                <1>     jne .goDate  ;Else rsi is pointing to something possibly a date. Try it!
   831                              <1>     ;Else, we do interactive mode!
   832 000023A1 488D15A3E7FFFF      <1>     lea rdx, curDate
   833 000023A8 B409                <1>     mov ah, 09h
   834 000023AA CD21                <1>     int 21h
   835 000023AC E8F8150000          <1>     call printFmtDate
   836                              <1> .noCur:
   837 000023B1 488D15A4E7FFFF      <1>     lea rdx, newDate
   838 000023B8 B409                <1>     mov ah, 09h
   839 000023BA CD21                <1>     int 21h
   840 000023BC 488D15B8E7FFFF      <1>     lea rdx, ukDate
   841 000023C3 488D05A4E7FFFF      <1>     lea rax, usDate
   842 000023CA 488D1DB7E7FFFF      <1>     lea rbx, jpDate
   843 000023D1 803D5CDCFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   844 000023D8 480F47D3            <1>     cmova rdx, rbx
   845 000023DC 480F42D0            <1>     cmovb rdx, rax
   846 000023E0 B409                <1>     mov ah, 09h
   847 000023E2 CD21                <1>     int 21h
   848                              <1> 
   849 000023E4 488D154CDEFFFF      <1>     lea rdx, cpyBuffer
   850 000023EB C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
   851 000023EE B40A                <1>     mov ah, 0Ah
   852 000023F0 CD21                <1>     int 21h
   853 000023F2 52                  <1>     push rdx
   854 000023F3 E87B140000          <1>     call printCRLF
   855 000023F8 5A                  <1>     pop rdx
   856 000023F9 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   857                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000023FD 74(8F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   858                              <1>     ;No spaces anywhere, separator chars allowed are / . - only
   859 000023FF 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
   860                              <1> .goDate:
   861 00002403 31C0                <1>     xor eax, eax    
   862 00002405 803D28DCFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   863 0000240C 727B                <1>     jb .us
   864 0000240E 0F87B7000000        <1>     ja .jpn
   865                              <1>     ;Here for UK style dates
   866 00002414 E8D6180000          <1>     call getByte
   867 00002419 725D                <1>     jc .badDate
   868 0000241B 88058EE2FFFF        <1>     mov byte [td3], al  ;Store the day
   869 00002421 E80C010000          <1>     call .validSep
   870 00002426 7550                <1>     jne .badDate
   871 00002428 E8C2180000          <1>     call getByte
   872 0000242D 7249                <1>     jc .badDate
   873 0000242F 88057BE2FFFF        <1>     mov byte [td4], al  ;Store month
   874 00002435 E8F8000000          <1>     call .validSep
   875 0000243A 753C                <1>     jne .badDate
   876 0000243C E8BA180000          <1>     call getNum
   877 00002441 E8CF000000          <1>     call .doYear    ;Adjusts the year if necessary
   878 00002446 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
   879 0000244B 732B                <1>     jae .badDate
   880 0000244D 66890559E2FFFF      <1>     mov word [td1], ax  ;Store the word directly
   881                              <1> .writeDate:
   882 00002454 E851160000          <1>     call skipDelimiters
   883 00002459 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
   884 0000245C 751A                <1>     jne .badDate
   885 0000245E 0FB70D48E2FFFF      <1>     movzx ecx, word [td1]   ;Get the year
   886 00002465 668B1543E2FFFF      <1>     mov dx, word [td3]      ;Read time and date together!
   887 0000246C B8002B0000          <1>     mov eax, 2B00h
   888 00002471 CD21                <1>     int 21h
   889 00002473 84C0                <1>     test al, al
   890                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002475 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002477 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   891                              <1> .badDate:
   892 00002478 488D15BDE6FFFF      <1>     lea rdx, badDate
   893 0000247F E8F6130000          <1>     call printString
   894 00002484 E928FFFFFF          <1>     jmp date.noCur
   895                              <1> .us:
   896 00002489 E861180000          <1>     call getByte
   897 0000248E 72E8                <1>     jc .badDate
   898 00002490 88051AE2FFFF        <1>     mov byte [td4], al  ;Store the month
   899 00002496 E897000000          <1>     call .validSep
   900 0000249B 75DB                <1>     jne .badDate
   901 0000249D E84D180000          <1>     call getByte
   902 000024A2 72D4                <1>     jc .badDate
   903 000024A4 880505E2FFFF        <1>     mov byte [td3], al  ;Store day
   904 000024AA E883000000          <1>     call .validSep
   905 000024AF 75C7                <1>     jne .badDate
   906 000024B1 E845180000          <1>     call getNum
   907 000024B6 E85A000000          <1>     call .doYear    ;Adjusts the year if necessary
   908 000024BB 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
   909 000024C0 73B6                <1>     jae .badDate
   910 000024C2 668905E4E1FFFF      <1>     mov word [td1], ax  ;Store the word directly
   911                              <1> .writeHop:
   912 000024C9 EB89                <1>     jmp short .writeDate
   913                              <1> .jpn:
   914 000024CB E82B180000          <1>     call getNum
   915 000024D0 E840000000          <1>     call .doYear    ;Adjusts the year if necessary
   916 000024D5 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
   917 000024DA 739C                <1>     jae .badDate
   918 000024DC 668905CAE1FFFF      <1>     mov word [td1], ax  ;Store the word directly
   919 000024E3 E84A000000          <1>     call .validSep
   920 000024E8 758E                <1>     jne .badDate
   921 000024EA E800180000          <1>     call getByte
   922 000024EF 7287                <1>     jc .badDate
   923 000024F1 8805B8E1FFFF        <1>     mov byte [td3], al  ;Store the day
   924 000024F7 E836000000          <1>     call .validSep
   925 000024FC 0F8576FFFFFF        <1>     jne .badDate
   926 00002502 E8E8170000          <1>     call getByte
   927 00002507 0F826BFFFFFF        <1>     jc .badDate
   928 0000250D 88059DE1FFFF        <1>     mov byte [td4], al  ;Store month
   929 00002513 EBB4                <1>     jmp short .writeHop
   930                              <1> .doYear:
   931 00002515 3D77000000          <1>     cmp eax, 119    ;If this is larger than 119, return assuming valid
   932                              <1>     reta
    73                              <2> cret a
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000251A 7601                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000251C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   933                              <1> ;If the user specifies 80-99 it means 1980-1999
   934                              <1> ;If the user specifies 00-79 it means 2000-2079
   935 0000251D BBD0070000          <1>     mov ebx, 2000
   936 00002522 B96C070000          <1>     mov ecx, 1900
   937 00002527 3D50000000          <1>     cmp eax, 80     
   938 0000252C 0F42CB              <1>     cmovb ecx, ebx
   939 0000252F 01C8                <1>     add eax, ecx
   940                              <1>     return
    13                              <2> %%_ret:
    14 00002531 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   941                              <1> .validSep:
   942 00002532 AC                  <1>     lodsb           ;Get the char and return
   943 00002533 3C2E                <1>     cmp al, "."
   944                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002535 74(31)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   945 00002537 3C2F                <1>     cmp al, "/"
   946                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002539 74(31)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   947 0000253B 3C2D                <1>     cmp al, "-"
   948                              <1>     return
    13                              <2> %%_ret:
    14 0000253D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   949                              <1> 
   950                              <1> time:
   951 0000253E 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   952 00002545 E860150000          <1>     call skipDelimiters
   953 0000254A 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
   954 0000254D 7540                <1>     jne .goTime  ;Else rsi is pointing to something possibly a time. Try it!
   955 0000254F 488D154EE6FFFF      <1>     lea rdx, curTime
   956 00002556 B409                <1>     mov ah, 09h
   957 00002558 CD21                <1>     int 21h
   958 0000255A E8E1130000          <1>     call printFmtTime
   959                              <1> .noCur:
   960 0000255F 488D154FE6FFFF      <1>     lea rdx, newTime
   961 00002566 B409                <1>     mov ah, 09h
   962 00002568 CD21                <1>     int 21h
   963                              <1> 
   964 0000256A 488D1544DCFFFF      <1>     lea rdx, inBuffer
   965 00002571 C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
   966 00002574 B40A                <1>     mov ah, 0Ah
   967 00002576 CD21                <1>     int 21h
   968 00002578 52                  <1>     push rdx
   969 00002579 488D15EAE3FFFF      <1>     lea rdx, crlf
   970 00002580 B409                <1>     mov ah, 09h
   971 00002582 CD21                <1>     int 21h
   972 00002584 5A                  <1>     pop rdx
   973 00002585 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   974                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002589 74(3D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   975 0000258B 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
   976                              <1> .goTime:
   977 0000258F C70514E1FFFF000000- <1>     mov dword [td1], 0          ;Set all fields to 0
   977 00002598 00                  <1>
   978 00002599 31C0                <1>     xor eax, eax   
   979 0000259B E84F170000          <1>     call getByte
   980 000025A0 0F8294000000        <1>     jc .badTime         ;Get the number in eax
   981 000025A6 880502E1FFFF        <1>     mov byte [td2], al  ;Save hours
   982 000025AC E89A000000          <1>     call .validsep
   983 000025B1 0F8583000000        <1>     jne .badTime
   984 000025B7 E833170000          <1>     call getByte
   985 000025BC 727C                <1>     jc .badTime
   986 000025BE 8805E9E0FFFF        <1>     mov byte [td1], al  ;Save minutes
   987 000025C4 E882000000          <1>     call .validsep
   988 000025C9 740F                <1>     je .goSec
   989 000025CB 48FFCE              <1>     dec rsi ;Go back a char
   990 000025CE E8D7140000          <1>     call skipDelimiters ;Skip any delimiters
   991 000025D3 803E0D              <1>     cmp byte [rsi], CR
   992 000025D6 743E                <1>     je .setTime
   993 000025D8 EB60                <1>     jmp short .badTime
   994                              <1> .goSec:
   995 000025DA E878000000          <1>     call .checkNum
   996 000025DF 7259                <1>     jc .badTime
   997 000025E1 E809170000          <1>     call getByte
   998 000025E6 7252                <1>     jc .badTime
   999 000025E8 8805C2E0FFFF        <1>     mov byte [td4], al  ;Save seconds
  1000 000025EE AC                  <1>     lodsb       ;Move rsi forwards
  1001 000025EF 3C2E                <1>     cmp al, "." ;Now we dont allow for colon now, only dot!
  1002 000025F1 740F                <1>     je .goMsec
  1003 000025F3 48FFCE              <1>     dec rsi ;Go back a char
  1004 000025F6 E8AF140000          <1>     call skipDelimiters ;Skip any delimiters
  1005 000025FB 803E0D              <1>     cmp byte [rsi], CR
  1006 000025FE 7416                <1>     je .setTime
  1007 00002600 EB38                <1>     jmp short .badTime
  1008                              <1> .goMsec:
  1009 00002602 E850000000          <1>     call .checkNum
  1010 00002607 7231                <1>     jc .badTime
  1011 00002609 E8E1160000          <1>     call getByte
  1012 0000260E 722A                <1>     jc .badTime
  1013 00002610 880599E0FFFF        <1>     mov byte [td3], al  ;Save miliseconds
  1014                              <1> .setTime:
  1015 00002616 E88F140000          <1>     call skipDelimiters
  1016 0000261B 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1017 0000261E 751A                <1>     jne .badTime
  1018 00002620 0FB70D86E0FFFF      <1>     movzx ecx, word [td1]   ;Get hour/minutes
  1019 00002627 0FB71581E0FFFF      <1>     movzx edx, word [td3]   ;Get seconds/miliseconds
  1020 0000262E B8002D0000          <1>     mov eax, 2D00h      ;Set time
  1021 00002633 CD21                <1>     int 21h
  1022 00002635 A8FF                <1>     test al, -1
  1023                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002637 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002639 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1024                              <1> .badTime:
  1025 0000263A 488D1554E5FFFF      <1>     lea rdx, badTime
  1026 00002641 E834120000          <1>     call printString
  1027 00002646 E914FFFFFF          <1>     jmp time.noCur
  1028                              <1> .validsep:
  1029 0000264B AC                  <1>     lodsb
  1030 0000264C 3A05EFD9FFFF        <1>     cmp al, byte [ctryData + countryStruc.timeSep]  ;Usually a colon
  1031                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002652 74(39)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1032 00002654 3C2E                <1>     cmp al, "."
  1033                              <1>     return
    13                              <2> %%_ret:
    14 00002656 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1034                              <1> .checkNum:
  1035 00002657 AC                  <1>     lodsb   ;Now ensure the first char past the delim is a number
  1036 00002658 48FFCE              <1>     dec rsi
  1037 0000265B 3C30                <1>     cmp al, "0"
  1038 0000265D 7206                <1>     jb .cnbad
  1039 0000265F 3C39                <1>     cmp al, "9"
  1040 00002661 7702                <1>     ja .cnbad
  1041 00002663 F8                  <1>     clc
  1042                              <1>     return
    13                              <2> %%_ret:
    14 00002664 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1043                              <1> .cnbad:
  1044 00002665 F9                  <1>     stc
  1045                              <1>     return
    13                              <2> %%_ret:
    14 00002666 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1046                              <1> ctty:
  1047 00002667 F6053EDAFFFFFF      <1>     test byte [arg1Flg], -1
  1048 0000266E 0F8470F3FFFF        <1>     jz badArgError
  1049 00002674 F60534DAFFFFFF      <1>     test byte [arg2Flg], -1
  1050 0000267B 0F8563F3FFFF        <1>     jnz badArgError
  1051 00002681 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1052 00002688 0FB6051EDAFFFF      <1>     movzx eax, byte [arg1Off]
  1053 0000268F 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
  1054 00002692 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1055 00002696 750F                <1>     jne .noDrive
  1056 00002698 0FB6050FDAFFFF      <1>     movzx eax, byte [arg1FCBret]
  1057 0000269F 3CFF                <1>     cmp al, -1
  1058 000026A1 0F8434F3FFFF        <1>     je badDriveError
  1059                              <1> .noDrive:
  1060                              <1>     ;Now we open the provided file
  1061 000026A7 E88A150000          <1>     call copyArgumentToSearchSpec
  1062 000026AC 488D1531DEFFFF      <1>     lea rdx, searchSpec
  1063 000026B3 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
  1064 000026B8 CD21                <1>     int 21h
  1065 000026BA 0F822DF3FFFF        <1>     jc badFileError
  1066 000026C0 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
  1067 000026C3 B800440000          <1>     mov eax, 4400h  ;Get device word
  1068 000026C8 CD21                <1>     int 21h
  1069 000026CA F6C280              <1>     test dl, 80h    ;Test if this device is a char device
  1070 000026CD 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
  1071                              <1>     ;Now we set this handle to be STDIO
  1072 000026CF 80CA03              <1>     or dl, 3    ;Set STDIO bits
  1073 000026D2 30F6                <1>     xor dh, dh
  1074 000026D4 B801440000          <1>     mov eax, 4401h  ;Now we set the device word
  1075 000026D9 CD21                <1>     int 21h
  1076                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
  1077 000026DB 31C9                <1>     xor ecx, ecx    ;STDIN
  1078 000026DD B446                <1>     mov ah, 46h
  1079 000026DF CD21                <1>     int 21h
  1080 000026E1 FFC1                <1>     inc ecx         ;STDOUT
  1081 000026E3 B446                <1>     mov ah, 46h
  1082 000026E5 CD21                <1>     int 21h
  1083 000026E7 FFC1                <1>     inc ecx         ;STDERR
  1084 000026E9 B446                <1>     mov ah, 46h
  1085 000026EB CD21                <1>     int 21h
  1086 000026ED B43E                <1>     mov ah, 3Eh ;Now we close the original handle
  1087 000026EF CD21                <1>     int 21h
  1088                              <1>     return
    13                              <2> %%_ret:
    14 000026F1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1089                              <1> .badCharDev:
  1090 000026F2 488D15CDE5FFFF      <1>     lea rdx, badDev
  1091 000026F9 B409                <1>     mov ah, 09h
  1092 000026FB CD21                <1>     int 21h
  1093 000026FD B43E                <1>     mov ah, 3Eh ;Close opened handle
  1094 000026FF CD21                <1>     int 21h
  1095                              <1>     return
    13                              <2> %%_ret:
    14 00002701 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1096                              <1> 
  1097                              <1> cls:  
  1098 00002702 B800440000          <1>     mov eax, 4400h  ;Get device info
  1099 00002707 BB01000000          <1>     mov ebx, 1      ;for handle 1
  1100 0000270C CD21                <1>     int 21h         ;in dx
  1101 0000270E F7C280000000        <1>     test edx, devCharDev
  1102 00002714 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
  1103 00002716 F7C210000000        <1>     test edx, charDevFastOut
  1104 0000271C 743E                <1>     jz .doAnsi
  1105                              <1>     ;Test if Int 29h uses Int 30h
  1106                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
  1107                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
  1108 0000271E B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
  1109 00002723 CD21                <1>     int 21h
  1110                              <1> .biosCheck:
  1111 00002725 66813BCD30          <1>     cmp word [rbx], 30CDh
  1112 0000272A 740C                <1>     je .biosConfirmed
  1113 0000272C 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
  1114 00002731 7429                <1>     je .doAnsi
  1115 00002733 48FFC3              <1>     inc rbx
  1116 00002736 EBED                <1>     jmp short .biosCheck
  1117                              <1> .biosConfirmed:
  1118                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
  1119 00002738 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
  1120 0000273A 31DB                <1>     xor ebx, ebx
  1121 0000273C CD30                <1>     int 30h
  1122 0000273E B40F                <1>     mov ah, 0Fh ;Get screen mode
  1123 00002740 CD30                <1>     int 30h
  1124 00002742 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
  1125 00002745 FECA                <1>     dec dl
  1126 00002747 B619                <1>     mov dh, 25  ;Number of rows is standard
  1127 00002749 31C0                <1>     xor eax, eax
  1128 0000274B 89C1                <1>     mov ecx, eax
  1129 0000274D B707                <1>     mov bh, 7   ;Screen attributes
  1130 0000274F B406                <1>     mov ah, 6   ;Scroll
  1131 00002751 CD30                <1>     int 30h
  1132 00002753 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
  1133 00002755 B700                <1>     mov bh, 0   ;Page 0
  1134 00002757 B402                <1>     mov ah, 2
  1135 00002759 CD30                <1>     int 30h
  1136                              <1>     return
    13                              <2> %%_ret:
    14 0000275B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1137                              <1> .doAnsi:
  1138                              <1> ;4 chars in the ansi routine
  1139                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
  1140                              <1> ; understand ANSI codes
  1141 0000275C 488D35C7E7FFFF      <1>     lea rsi, ansiCls
  1142 00002763 B904000000          <1>     mov ecx, 4
  1143 00002768 B406                <1>     mov ah, 06h ;Raw char output
  1144                              <1> .ansiLp:
  1145 0000276A AC                  <1>     lodsb   ;Get the char in 
  1146 0000276B 88C2                <1>     mov dl, al
  1147 0000276D CD21                <1>     int 21h
  1148 0000276F FFC9                <1>     dec ecx
  1149 00002771 75F7                <1>     jnz .ansiLp
  1150                              <1>     return
    13                              <2> %%_ret:
    14 00002773 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1151                              <1> 
  1152                              <1> break:
  1153 00002774 F60531D9FFFFFF      <1>     test byte [arg1Flg], -1
  1154 0000277B 752D                <1>     jnz .argumentProvided
  1155                              <1>     ;Here we just get the status of break
  1156 0000277D B800330000          <1>     mov eax, 3300h  ;Get break status in dl
  1157 00002782 CD21                <1>     int 21h
  1158 00002784 88D3                <1>     mov bl, dl
  1159 00002786 488D15DBE5FFFF      <1>     lea rdx, breakIs
  1160 0000278D B409                <1>     mov ah, 09h
  1161 0000278F CD21                <1>     int 21h
  1162 00002791 488D15CBE5FFFF      <1>     lea rdx, onMes
  1163 00002798 488D0DBEE5FFFF      <1>     lea rcx, offMes
  1164 0000279F 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1165 000027A1 480F44D1            <1>     cmovz rdx, rcx
  1166 000027A5 B409                <1>     mov ah, 09h
  1167 000027A7 CD21                <1>     int 21h
  1168                              <1>     return
    13                              <2> %%_ret:
    14 000027A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1169                              <1> .argumentProvided:
  1170 000027AA 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1171 000027AE AD                  <1>     lodsd   ;Read the word
  1172 000027AF 89C3                <1>     mov ebx, eax
  1173 000027B1 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1174 000027B6 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1175 000027B9 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1176 000027BE 7416                <1>     je .maybeOn
  1177 000027C0 663D4F46            <1>     cmp ax, "OF"
  1178 000027C4 7523                <1>     jne .badOnOff
  1179 000027C6 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1180 000027CB 6681FB4620          <1>     cmp bx, "F "
  1181 000027D0 7517                <1>     jne .badOnOff
  1182                              <1>     ;Set off
  1183 000027D2 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1184 000027D4 EB0B                <1>     jmp short .setBreak
  1185                              <1> .maybeOn:
  1186 000027D6 663D4F4E            <1>     cmp ax, "ON"
  1187 000027DA 750D                <1>     jne .badOnOff
  1188                              <1>     ;Set on
  1189 000027DC BA01000000          <1>     mov edx, 1
  1190                              <1> .setBreak:
  1191 000027E1 B801330000          <1>     mov eax, 3301h  ;Set break
  1192 000027E6 CD21                <1>     int 21h
  1193                              <1>     return
    13                              <2> %%_ret:
    14 000027E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1194                              <1> .badOnOff:
  1195 000027E9 488D154AE7FFFF      <1>     lea rdx, badOnOff
  1196 000027F0 B409                <1>     mov ah, 09h
  1197 000027F2 CD21                <1>     int 21h
  1198                              <1>     return
    13                              <2> %%_ret:
    14 000027F4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1199                              <1> 
  1200                              <1> verify:
  1201 000027F5 F605B0D8FFFFFF      <1>     test byte [arg1Flg], -1
  1202 000027FC 752D                <1>     jnz .argumentProvided
  1203                              <1>     ;Here we just get the status of break
  1204 000027FE B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1205 00002803 CD21                <1>     int 21h
  1206 00002805 88C3                <1>     mov bl, al
  1207 00002807 488D1564E5FFFF      <1>     lea rdx, verifyIs
  1208 0000280E B409                <1>     mov ah, 09h
  1209 00002810 CD21                <1>     int 21h
  1210 00002812 488D154AE5FFFF      <1>     lea rdx, onMes
  1211 00002819 488D0D3DE5FFFF      <1>     lea rcx, offMes
  1212 00002820 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1213 00002822 480F44D1            <1>     cmovz rdx, rcx
  1214 00002826 B409                <1>     mov ah, 09h
  1215 00002828 CD21                <1>     int 21h
  1216                              <1>     return
    13                              <2> %%_ret:
    14 0000282A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1217                              <1> .argumentProvided:
  1218 0000282B 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1219 0000282F AD                  <1>     lodsd   ;Read the word
  1220 00002830 89C3                <1>     mov ebx, eax
  1221 00002832 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1222 00002837 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1223 0000283A 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1224 0000283F 7416                <1>     je .maybeOn
  1225 00002841 663D4F46            <1>     cmp ax, "OF"
  1226 00002845 751F                <1>     jne .badOnOff
  1227 00002847 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1228 0000284C 6681FB4620          <1>     cmp bx, "F "
  1229 00002851 7513                <1>     jne .badOnOff
  1230                              <1>     ;Set off
  1231 00002853 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1232 00002855 EB0A                <1>     jmp short .setVerify
  1233                              <1> .maybeOn:
  1234 00002857 663D4F4E            <1>     cmp ax, "ON"
  1235 0000285B 7509                <1>     jne .badOnOff
  1236                              <1>     ;Set on
  1237 0000285D 31C0                <1>     xor eax, eax
  1238 0000285F FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1239                              <1> .setVerify:
  1240 00002861 B42E                <1>     mov ah, 2Eh  ;Set Verify
  1241 00002863 CD21                <1>     int 21h
  1242                              <1>     return
    13                              <2> %%_ret:
    14 00002865 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1243                              <1> .badOnOff:
  1244 00002866 488D15CDE6FFFF      <1>     lea rdx, badOnOff
  1245 0000286D B409                <1>     mov ah, 09h
  1246 0000286F CD21                <1>     int 21h
  1247                              <1>     return
    13                              <2> %%_ret:
    14 00002871 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1248                              <1> 
  1249                              <1> rename:
  1250 00002872 F60533D8FFFFFF      <1>     test byte [arg1Flg], -1
  1251 00002879 0F8465F1FFFF        <1>     jz badArgError
  1252 0000287F F60529D8FFFFFF      <1>     test byte [arg2Flg], -1
  1253 00002886 0F8458F1FFFF        <1>     jz badArgError    
  1254                              <1>     ;Initialise the variables!
  1255 0000288C 488D351EDEFFFF      <1>     lea rsi, srcSpec
  1256 00002893 4889351BDFFFFF      <1>     mov qword [srcPtr], rsi
  1257 0000289A 488D3592DEFFFF      <1>     lea rsi, destSpec
  1258 000028A1 48893515DFFFFF      <1>     mov qword [destPtr], rsi
  1259                              <1>     ;Check the second path is just a filename!
  1260 000028A8 0FB60501D8FFFF      <1>     movzx eax, byte [arg2Off]
  1261 000028AF 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1262 000028B6 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1263 000028B9 488D3D24DCFFFF      <1>     lea rdi, searchSpec
  1264 000028C0 57                  <1>     push rdi
  1265 000028C1 E815130000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1266 000028C6 5F                  <1>     pop rdi
  1267 000028C7 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1268 000028CB 0F8413F1FFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1269 000028D1 4889FE              <1>     mov rsi, rdi
  1270                              <1> .destScan:
  1271 000028D4 AC                  <1>     lodsb   ;Get the char
  1272 000028D5 3A054ED7FFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1273 000028DB 0F8403F1FFFF        <1>     je badArgError
  1274 000028E1 84C0                <1>     test al, al
  1275 000028E3 75EF                <1>     jnz .destScan
  1276                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1277 000028E5 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1278 000028E9 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1278 000028F2 3F                  <1>
  1279 000028F3 B903000000          <1>     mov ecx, 3  ;24 bytes
  1280 000028F8 F348AB              <1>     rep stosq
  1281 000028FB AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1282 000028FC 488D35E1DBFFFF      <1>     lea rsi, searchSpec
  1283 00002903 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1284 00002907 B80D290000          <1>     mov eax, 290Dh
  1285 0000290C CD21                <1>     int 21h     
  1286 0000290E 50                  <1>     push rax    ;Save the WC signature
  1287 0000290F E80A130000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1288 00002914 488D3DC9DBFFFF      <1>     lea rdi, searchSpec
  1289 0000291B E841120000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1290 00002920 4889FE              <1>     mov rsi, rdi
  1291 00002923 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1292 00002926 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1293 0000292A B80D290000          <1>     mov eax, 290Dh
  1294 0000292F CD21                <1>     int 21h
  1295 00002931 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1296 00002932 88CC                <1>     mov ah, cl
  1297 00002934 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1298 00002937 0F84EC000000        <1>     jz .noWC
  1299 0000293D 488D35A0DBFFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1300                              <1>     ;Now we check if we have a path to actually handle
  1301 00002944 4839F3              <1>     cmp rbx, rsi
  1302 00002947 7444                <1>     je .noPath
  1303 00002949 C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1304 0000294D 488D3590DBFFFF      <1>     lea rsi, searchSpec
  1305 00002954 488D3D56DDFFFF      <1>     lea rdi, srcSpec
  1306 0000295B 56                  <1>     push rsi
  1307 0000295C E814110000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1308 00002961 5E                  <1>     pop rsi
  1309 00002962 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1310 00002965 8A05BED6FFFF        <1>     mov al, byte [pathSep]
  1311 0000296B AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1312 0000296C 48893D42DEFFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1313 00002973 488D3DB9DDFFFF      <1>     lea rdi, destSpec
  1314 0000297A E8F6100000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1315 0000297F 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1316 00002982 AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1317 00002983 48893D33DEFFFF      <1>     mov qword [destPtr], rdi
  1318 0000298A 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1319                              <1> .noPath:
  1320                              <1>     ;Now we have where to copy the files to, we can start our work!
  1321 0000298D E8A3130000          <1>     call setDTA
  1322 00002992 488D154BDBFFFF      <1>     lea rdx, searchSpec
  1323 00002999 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1324 0000299B B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1325 000029A0 CD21                <1>     int 21h
  1326 000029A2 0F824EF0FFFF        <1>     jc badDupFnf    ;If no file was found!
  1327                              <1> .wcLoop:
  1328                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1329 000029A8 488D35D9D7FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1330 000029AF 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1331 000029B3 B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1332 000029B8 CD21                <1>     int 21h 
  1333                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1334 000029BA 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1335 000029BE 488D3D00DEFFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1336 000029C5 57                  <1>     push rdi
  1337 000029C6 48A5                <1>     movsq
  1338 000029C8 66A5                <1>     movsw
  1339 000029CA A4                  <1>     movsb
  1340 000029CB 5F                  <1>     pop rdi
  1341 000029CC 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1342 000029D0 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1343                              <1> .wcNameMake:
  1344 000029D5 AC                  <1>     lodsb   ;Get the char from the source string
  1345 000029D6 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1346 000029D9 7502                <1>     jne .noStore    ;Dont store the char there
  1347 000029DB 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1348                              <1> .noStore:
  1349 000029DD 48FFC7              <1>     inc rdi ;Goto next char position
  1350 000029E0 FFC9                <1>     dec ecx
  1351 000029E2 75F1                <1>     jnz .wcNameMake
  1352                              <1> ;renName now has the FCB name for the file we wish to make!
  1353                              <1> ;Now make the two paths!
  1354 000029E4 488D359DD7FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1355 000029EB 488B3DC3DDFFFF      <1>     mov rdi, qword [srcPtr]
  1356 000029F2 E87E100000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1357 000029F7 488D35C7DDFFFF      <1>     lea rsi, renName
  1358 000029FE 488B3DB8DDFFFF      <1>     mov rdi, qword [destPtr]
  1359 00002A05 E87B110000          <1>     call FCBToAsciiz
  1360 00002A0A 488D15A0DCFFFF      <1>     lea rdx, srcSpec
  1361 00002A11 488D3D1BDDFFFF      <1>     lea rdi, destSpec
  1362 00002A18 B800560000          <1>     mov eax, 5600h
  1363 00002A1D CD21                <1>     int 21h     ;Fail silently on wildcard rename
  1364 00002A1F B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1365 00002A24 CD21                <1>     int 21h
  1366 00002A26 7380                <1>     jnc .wcLoop     ;And process it too!
  1367                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 00002A28 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1368                              <1> .noWC:
  1369 00002A29 E8F0110000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1370 00002A2E 0FB6057BD6FFFF      <1>     movzx eax, byte [arg2Off]
  1371 00002A35 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1372 00002A3C 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1373 00002A3F 488D3DEDDCFFFF      <1>     lea rdi, destSpec
  1374 00002A46 57                  <1>     push rdi
  1375 00002A47 E88F110000          <1>     call cpDelimPathToBufz
  1376 00002A4C 5F                  <1>     pop rdi
  1377 00002A4D 488D1590DAFFFF      <1>     lea rdx, searchSpec
  1378 00002A54 B800560000          <1>     mov eax, 5600h
  1379 00002A59 CD21                <1>     int 21h
  1380                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A5B 73(28)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1381 00002A5D E994EFFFFF          <1>     jmp badDupFnf   ;Always just return this
  1382                              <1> 
  1383                              <1> 
  1384                              <1> touch:
  1385                              <1> ;Temporarily used to create files
  1386 00002A62 F60543D6FFFFFF      <1>     test byte [arg1Flg], -1
  1387 00002A69 0F8475EFFFFF        <1>     jz badArgError
  1388 00002A6F E8AA110000          <1>     call buildCommandPath
  1389 00002A74 488D1569DAFFFF      <1>     lea rdx, searchSpec
  1390 00002A7B B8005B0000          <1>     mov eax, 5B00h  ;Create unique file 
  1391 00002A80 31C9                <1>     xor ecx, ecx
  1392 00002A82 CD21                <1>     int 21h
  1393 00002A84 721D                <1>     jc .touch1
  1394                              <1> .touchClose:
  1395 00002A86 0FB7D8              <1>     movzx ebx, ax   ;Save the handle here
  1396 00002A89 B80D120000          <1>     mov eax, 120Dh  ;Get date/time words from the DOS
  1397 00002A8E CD2F                <1>     int 2fh
  1398 00002A90 89C1                <1>     mov ecx, eax    ;Move the time here
  1399 00002A92 87D1                <1>     xchg edx, ecx   ;Get them in the right place
  1400 00002A94 B801570000          <1>     mov eax, 5701h  ;Set the date/time for bx
  1401 00002A99 CD21                <1>     int 21h
  1402 00002A9B B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1403 00002AA0 CD21                <1>     int 21h
  1404                              <1>     return
    13                              <2> %%_ret:
    14 00002AA2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1405                              <1> .touch1:
  1406 00002AA3 3C50                <1>     cmp al, errFilExist ;Does the file exist?
  1407 00002AA5 7509                <1>     jne .touchError ;If not, this is a proper error!
  1408 00002AA7 B8003D0000          <1>     mov eax, 3D00h  ;R/O open instead to update the access time!!
  1409 00002AAC CD21                <1>     int 21h
  1410 00002AAE 73D6                <1>     jnc .touchClose ;If this worked, close the handle immediately
  1411                              <1> .touchError:
  1412 00002AB0 3C03                <1>     cmp al, errPnf
  1413 00002AB2 0F842CEFFFFF        <1>     je badArgError
  1414 00002AB8 3C02                <1>     cmp al, errFnf
  1415 00002ABA 0F843FEFFFFF        <1>     je badFnf
  1416 00002AC0 E9FBEEFFFF          <1>     jmp badAccError
  1417                              <1>     
  1418                              <1> 
  1419                              <1> join:
  1420                              <1> ;Mock join command, to test join. Make an external command.
  1421                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1422 00002AC5 F605AF000000FF      <1>     test byte [.joinOn], -1
  1423 00002ACC 743D                <1>     jz .okJoin
  1424                              <1> .joindisable:
  1425 00002ACE B800520000          <1>     mov eax, 5200h  
  1426 00002AD3 CD21                <1>     int 21h
  1427                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1428 00002AD5 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1429 00002ADA CD2A                <1>     int 2Ah
  1430 00002ADC 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1431 00002AE0 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1432 00002AE4 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1433 00002AEA C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1434 00002AED C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1435 00002AF1 FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1436 00002AF4 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1437 00002AF9 CD2A                <1>     int 2Ah
  1438 00002AFB C6057900000000      <1>     mov byte [.joinOn], 0
  1439 00002B02 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1440 00002B09 EB45                <1>     jmp short .joinExit
  1441                              <1> .okJoin:
  1442 00002B0B C60569000000FF      <1>     mov byte [.joinOn], -1
  1443 00002B12 B800520000          <1>     mov eax, 5200h  
  1444 00002B17 CD21                <1>     int 21h
  1445 00002B19 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1446 00002B1D 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1447                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1448 00002B21 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1449 00002B26 CD2A                <1>     int 2Ah
  1450 00002B28 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1451 00002B2E 4889DF              <1>     mov rdi, rbx
  1452 00002B31 488D3544000000      <1>     lea rsi, .joinPath
  1453 00002B38 B90C000000          <1>     mov ecx, .joinPathL
  1454 00002B3D F3A4                <1>     rep movsb   ;Copy chars over
  1455 00002B3F FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1456 00002B42 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1457 00002B47 CD2A                <1>     int 2Ah
  1458 00002B49 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1459                              <1> .joinExit:
  1460 00002B50 B800090000          <1>     mov eax, 0900h
  1461 00002B55 CD21                <1>     int 21h
  1462                              <1>     return
    13                              <2> %%_ret:
    14 00002B57 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1463 00002B58 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1463 00002B61 61626C65640D0A24    <1>
  1464 00002B69 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1464 00002B72 7361626C65640D0A24  <1>
  1465 00002B7B 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1466 00002B7C 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1466 00002B85 535400              <1>
  1467                              <1> .joinPathL  equ $ - .joinPath 
  1468                              <1> 
  1469                              <1> subst:
  1470                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1471                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1472 00002B88 F605D3000000FF      <1>     test byte [.substOn], -1
  1473 00002B8F 7443                <1>     jz .okSubst
  1474                              <1> .substdisable:
  1475 00002B91 B800520000          <1>     mov eax, 5200h  
  1476 00002B96 CD21                <1>     int 21h
  1477                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1478 00002B98 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1479 00002B9D CD2A                <1>     int 2Ah
  1480 00002B9F 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1481 00002BA3 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1482 00002BAA 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1483 00002BB0 C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1484 00002BB3 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1485 00002BB7 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1486 00002BBD B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1487 00002BC2 CD2A                <1>     int 2Ah
  1488 00002BC4 C6059700000000      <1>     mov byte [.substOn], 0
  1489 00002BCB 488D157D000000      <1>     lea rdx, .substDisableMsg
  1490 00002BD2 EB61                <1>     jmp short .substExit
  1491                              <1> .okSubst:
  1492 00002BD4 C60587000000FF      <1>     mov byte [.substOn], -1
  1493 00002BDB B800520000          <1>     mov eax, 5200h  
  1494 00002BE0 CD21                <1>     int 21h
  1495 00002BE2 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1496 00002BE7 CD2A                <1>     int 2Ah
  1497 00002BE9 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1498 00002BED 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1499 00002BF4 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1500 00002BF8 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1501 00002BFF 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1502 00002C03 C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1503                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1504 00002C0A 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1505 00002C10 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1506 00002C16 4889DF              <1>     mov rdi, rbx
  1507 00002C19 488D3543000000      <1>     lea rsi, .substPath
  1508 00002C20 B90C000000          <1>     mov ecx, .substPathL
  1509 00002C25 F3A4                <1>     rep movsb   ;Copy chars over
  1510 00002C27 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1511 00002C2C CD2A                <1>     int 2Ah
  1512 00002C2E 488D1508000000      <1>     lea rdx, .substEnableMsg
  1513                              <1> .substExit:
  1514 00002C35 B800090000          <1>     mov eax, 0900h
  1515 00002C3A CD21                <1>     int 21h
  1516                              <1>     return
    13                              <2> %%_ret:
    14 00002C3C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1517 00002C3D 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1517 00002C46 6E61626C65640D0A24  <1>
  1518 00002C4F 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1518 00002C58 697361626C65640D0A- <1>
  1518 00002C61 24                  <1>
  1519 00002C62 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1520 00002C63 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1520 00002C6C 535400              <1>
  1521                              <1> .substPathL  equ $ - .substPath 
  1522                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1523                              <1> truename:
  1524 00002C6F F60536D4FFFFFF      <1>     test byte [arg1Flg], -1
  1525 00002C76 0F8468EDFFFF        <1>     jz badArgError
  1526 00002C7C E89D0F0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1527 00002C81 488D355CD8FFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1528 00002C88 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1529 00002C8B B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1530 00002C90 CD21                <1>     int 21h
  1531 00002C92 730D                <1>     jnc .writePath
  1532 00002C94 3C02                <1>     cmp al, errFnf
  1533 00002C96 0F8451EDFFFF        <1>     je badFileError
  1534 00002C9C E931EDFFFF          <1>     jmp badParamError
  1535                              <1> .writePath:
  1536 00002CA1 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1537 00002CA4 B9FFFFFFFF          <1>     mov ecx, -1
  1538 00002CA9 30C0                <1>     xor al, al
  1539 00002CAB F2AE                <1>     repne scasb     ;Get the new len
  1540 00002CAD F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1541 00002CAF FFC9                <1>     dec ecx
  1542 00002CB1 BB01000000          <1>     mov ebx, 01
  1543 00002CB6 B440                <1>     mov ah, 40h
  1544 00002CB8 CD21                <1>     int 21h
  1545 00002CBA E8B40B0000          <1>     call printCRLF
  1546                              <1>     return
    13                              <2> %%_ret:
    14 00002CBF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1547                              <1> 
  1548                              <1> label:
  1549                              <1> ;Displays/Changes/Deletes the file label
  1550 00002CC0 488D1508000000      <1>     lea rdx, .l1
  1551 00002CC7 B800090000          <1>     mov eax, 0900h
  1552 00002CCC CD21                <1>     int 21h
  1553                              <1>     return
    13                              <2> %%_ret:
    14 00002CCE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1554 00002CCF 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  1554 00002CD8 6E20756E696D706C65- <1>
  1554 00002CE1 6D656E7465640D0A24  <1>
  1555                              <1> 
  1556                              <1> mklbl:
  1557                              <1>     ;lea rdx, .l1
  1558                              <1>     ;mov cx, 08h ;Make a label
  1559                              <1>     ;mov eax, 3C00h
  1560                              <1>     ;int 21h
  1561                              <1> 
  1562                              <1>     ;mov ebx, eax
  1563                              <1>     ;mov eax, 3E00h  ;Close the handle
  1564                              <1>     ;int 21h
  1565                              <1>     ;return
  1566                              <1> 
  1567                              <1> ;.l1: db "TESTLABEL",0
  1568 00002CEA 488D1508000000      <1>     lea rdx, .l1
  1569 00002CF1 B800160000          <1>     mov eax, 1600h  ;Create FCB
  1570 00002CF6 CD21                <1>     int 21h
  1571                              <1>     return
    13                              <2> %%_ret:
    14 00002CF8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1572                              <1> .l1:
  1573                              <1>     istruc exFcb
  1574 00002CF9 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1575 00002CFA 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1576 00002D00 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1577 00002D01 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  1578 00002D09 4C2020              <1>     at exFcb.fileext,   db "L  "
  1579 00002D0C 00000000            <1>     at exFcb.curBlock,  dd 0
  1580 00002D10 00<rep 15h>         <1>     iend 
  1581                              <1> rmlbl:
  1582 00002D25 488D1508000000      <1>     lea rdx, .l1
  1583 00002D2C B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  1584 00002D31 CD21                <1>     int 21h
  1585                              <1>     return
    13                              <2> %%_ret:
    14 00002D33 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1586                              <1> .l1:    ;FCB to volume label
  1587                              <1>     istruc exFcb
  1588 00002D34 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1589 00002D35 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1590 00002D3B 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1591 00002D3C 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  1592 00002D44 3F3F3F              <1>     at exFcb.fileext,   db "???"
  1593 00002D47 00000000            <1>     at exFcb.curBlock,  dd 0
  1594 00002D4B 00<rep 15h>         <1>     iend 
  1595                              <1> 
  1596                              <1> rnlbl:
  1597 00002D60 488D1508000000      <1>     lea rdx, .l1
  1598 00002D67 B800170000          <1>     mov eax, 1700h
  1599 00002D6C CD21                <1>     int 21h
  1600                              <1>     return
    13                              <2> %%_ret:
    14 00002D6E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1601                              <1> .l1:
  1602                              <1>     istruc exRenFcb
  1603 00002D6F FF                  <1>     at exRenFcb.extSig,     db -1
  1604 00002D70 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  1605 00002D76 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  1606 00002D77 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  1607 00002D7F 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  1608 00002D82 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  1608 00002D8B 4C414245            <1>
  1609 00002D8F 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  1610 00002D92 00<rep 4h>          <1>     iend
  1611                              <1> volume:
  1612                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  1613 00002D96 F60512D3FFFFFF      <1>     test byte [arg2Flg], -1
  1614 00002D9D 0F8541ECFFFF        <1>     jnz badArgError
  1615 00002DA3 F60502D3FFFFFF      <1>     test byte [arg1Flg], -1
  1616 00002DAA 7507                <1>     jnz .notCurrentDrive
  1617 00002DAC E8BF0C0000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1618 00002DB1 EB31                <1>     jmp short .dirEP
  1619                              <1> .notCurrentDrive:
  1620 00002DB3 E8660E0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1621 00002DB8 488D3525D7FFFF      <1>     lea rsi, searchSpec
  1622 00002DBF E8E60C0000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  1623 00002DC4 66AD                <1>     lodsw                   ;Get this word
  1624 00002DC6 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  1625 00002DC9 0F8515ECFFFF        <1>     jne badArgError
  1626 00002DCF 8A05D9D2FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1627 00002DD5 A8FF                <1>     test al, -1
  1628 00002DD7 0F85FEEBFFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1629 00002DDD 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1630 00002DE2 FFC8                <1>     dec eax ;Convert to 0 based number
  1631                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  1632 00002DE4 E84C0F0000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  1633 00002DE9 488D1591D8FFFF      <1>     lea rdx, volFcb
  1634 00002DF0 FFC0                <1>     inc eax ;Get 1 based drive number
  1635 00002DF2 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1636 00002DF4 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1637 00002DF7 B800110000          <1>     mov eax, 1100h ;Find first FCB
  1638 00002DFC CD21                <1>     int 21h
  1639 00002DFE 50                  <1>     push rax
  1640                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  1641 00002DFF 488D1564DBFFFF      <1>     lea rdx, crlf
  1642 00002E06 B409                <1>     mov ah, 09h
  1643 00002E08 CD21                <1>     int 21h
  1644 00002E0A 488D15DEDDFFFF      <1>     lea rdx, volMes
  1645 00002E11 B409                <1>     mov ah, 09h
  1646 00002E13 CD21                <1>     int 21h
  1647 00002E15 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  1648 00002E17 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  1649 00002E1A B402                <1>     mov ah, 02h
  1650 00002E1C CD21                <1>     int 21h
  1651 00002E1E 58                  <1>     pop rax
  1652 00002E1F 84C0                <1>     test al, al ;If this is zero, the call succeeded
  1653 00002E21 7409                <1>     jz .volIDOk
  1654 00002E23 488D15DCDDFFFF      <1>     lea rdx, volNo
  1655 00002E2A EB19                <1>     jmp short .volEndPrint
  1656                              <1> .volIDOk:
  1657 00002E2C 488D15CEDDFFFF      <1>     lea rdx, volOk
  1658 00002E33 B409                <1>     mov ah, 09h
  1659 00002E35 CD21                <1>     int 21h
  1660 00002E37 C6053FD3FFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  1661 00002E3E 488D152DD3FFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  1662                              <1> .volEndPrint:
  1663 00002E45 B409                <1>     mov ah, 09h
  1664 00002E47 CD21                <1>     int 21h
  1665 00002E49 488D151ADBFFFF      <1>     lea rdx, crlf
  1666 00002E50 B409                <1>     mov ah, 09h
  1667 00002E52 CD21                <1>     int 21h
  1668                              <1>     return
    13                              <2> %%_ret:
    14 00002E54 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1669                              <1> 
  1670                              <1> version:
  1671 00002E55 488D150EDBFFFF      <1>     lea rdx, crlf
  1672 00002E5C B409                <1>     mov ah, 09h
  1673 00002E5E CD21                <1>     int 21h
  1674 00002E60 488D1576DDFFFF      <1>     lea rdx, dosVer
  1675 00002E67 B409                <1>     mov ah, 09h
  1676 00002E69 CD21                <1>     int 21h
  1677 00002E6B E80C000000          <1>     call .printVersionNumber
  1678 00002E70 488D15F3DAFFFF      <1>     lea rdx, crlf
  1679 00002E77 B409                <1>     mov ah, 09h
  1680 00002E79 CD21                <1>     int 21h
  1681                              <1>     return
    13                              <2> %%_ret:
    14 00002E7B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1682                              <1> .printVersionNumber:
  1683 00002E7C B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1684 00002E7E CD21                <1>     int 21h
  1685 00002E80 50                  <1>     push rax
  1686 00002E81 0FB6C0              <1>     movzx eax, al
  1687 00002E84 E8CE0D0000          <1>     call printDecimalWord
  1688 00002E89 B22E                <1>     mov dl, "."
  1689 00002E8B B402                <1>     mov ah, 02h
  1690 00002E8D CD21                <1>     int 21h
  1691 00002E8F 58                  <1>     pop rax
  1692 00002E90 0FB6C4              <1>     movzx eax, ah
  1693 00002E93 E8BF0D0000          <1>     call printDecimalWord
  1694                              <1>     return
    13                              <2> %%_ret:
    14 00002E98 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1695                              <1> 
  1696                              <1> 
  1697                              <1> memory:
  1698 00002E99 488B1D7FD1FFFF      <1>     mov rbx, qword [sysVars]
  1699 00002EA0 4885DB              <1>     test rbx, rbx
  1700 00002EA3 7510                <1>     jnz .sysvarsOK
  1701 00002EA5 488D15F5DFFFFF      <1>     lea rdx, memBad0
  1702 00002EAC B409                <1>     mov ah, 09h
  1703 00002EAE CD21                <1>     int 21h
  1704 00002EB0 E9700E0000          <1>     jmp freezePC.altEP
  1705                              <1> .sysvarsOK:
  1706                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1707                              <1>     ; and rcx to store Application memory
  1708 00002EB5 31F6                <1>     xor esi, esi
  1709 00002EB7 31FF                <1>     xor edi, edi
  1710 00002EB9 31ED                <1>     xor ebp, ebp
  1711 00002EBB 31C9                <1>     xor ecx, ecx
  1712 00002EBD 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1713 00002EC1 488B1B              <1>     mov rbx, qword [rbx]
  1714                              <1> .memLp:
  1715 00002EC4 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1716 00002EC7 7409                <1>     je .validMCB
  1717 00002EC9 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1718 00002ECC 0F8501010000        <1>     jne .badMCBFound
  1719                              <1> .validMCB:
  1720 00002ED2 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1721 00002ED5 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1722 00002ED9 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1723 00002EE1 7505                <1>     jne .notDOS
  1724 00002EE3 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1725 00002EE6 EB21                <1>     jmp short .gotoNext
  1726                              <1> .notDOS:
  1727 00002EE8 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1728 00002EF0 7505                <1>     jne .notFree
  1729 00002EF2 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1730 00002EF5 EB12                <1>     jmp short .gotoNext
  1731                              <1> .notFree:
  1732 00002EF7 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1733 00002EFF 7505                <1>     jne .notHole
  1734 00002F01 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1735 00002F04 EB03                <1>     jmp short .gotoNext
  1736                              <1> .notHole:
  1737 00002F06 4801C1              <1>     add rcx, rax    ;Add to Application count
  1738                              <1> .gotoNext:
  1739 00002F09 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1740 00002F0C 7407                <1>     je .endOfWalk
  1741 00002F0E 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1742 00002F13 EBAF                <1>     jmp short .memLp
  1743                              <1> .endOfWalk:
  1744                              <1>     
  1745 00002F15 488D15E6DEFFFF      <1>     lea rdx, memDOS
  1746 00002F1C B409                <1>     mov ah, 09h
  1747 00002F1E CD21                <1>     int 21h
  1748 00002F20 4889F0              <1>     mov rax, rsi
  1749 00002F23 E89D000000          <1>     call .mcbPrintAmount
  1750 00002F28 488D156BDFFFFF      <1>     lea rdx, memByte
  1751 00002F2F B409                <1>     mov ah, 09h
  1752 00002F31 CD21                <1>     int 21h
  1753                              <1> 
  1754 00002F33 4885ED              <1>     test rbp, rbp
  1755 00002F36 741E                <1>     jz .skipHole
  1756 00002F38 488D150FDFFFFF      <1>     lea rdx, memHole
  1757 00002F3F B409                <1>     mov ah, 09h
  1758 00002F41 CD21                <1>     int 21h
  1759 00002F43 4889E8              <1>     mov rax, rbp
  1760 00002F46 E87A000000          <1>     call .mcbPrintAmount
  1761 00002F4B 488D1548DFFFFF      <1>     lea rdx, memByte
  1762 00002F52 B409                <1>     mov ah, 09h
  1763 00002F54 CD21                <1>     int 21h
  1764                              <1> .skipHole:
  1765                              <1> 
  1766 00002F56 488D15CBDEFFFF      <1>     lea rdx, memApp
  1767 00002F5D B409                <1>     mov ah, 09h
  1768 00002F5F CD21                <1>     int 21h
  1769 00002F61 4889C8              <1>     mov rax, rcx
  1770 00002F64 E85C000000          <1>     call .mcbPrintAmount
  1771 00002F69 488D152ADFFFFF      <1>     lea rdx, memByte
  1772 00002F70 B409                <1>     mov ah, 09h
  1773 00002F72 CD21                <1>     int 21h
  1774                              <1> 
  1775 00002F74 488D15F9DEFFFF      <1>     lea rdx, memFree
  1776 00002F7B B409                <1>     mov ah, 09h
  1777 00002F7D CD21                <1>     int 21h
  1778 00002F7F 4889F8              <1>     mov rax, rdi
  1779 00002F82 E83E000000          <1>     call .mcbPrintAmount
  1780 00002F87 488D150CDFFFFF      <1>     lea rdx, memByte
  1781 00002F8E B409                <1>     mov ah, 09h
  1782 00002F90 CD21                <1>     int 21h
  1783                              <1> 
  1784 00002F92 488D1543DEFFFF      <1>     lea rdx, memSys
  1785 00002F99 B409                <1>     mov ah, 09h
  1786 00002F9B CD21                <1>     int 21h
  1787 00002F9D 4889F0              <1>     mov rax, rsi
  1788 00002FA0 4801F8              <1>     add rax, rdi
  1789 00002FA3 4801C8              <1>     add rax, rcx
  1790 00002FA6 4801E8              <1>     add rax, rbp
  1791 00002FA9 E817000000          <1>     call .mcbPrintAmount
  1792 00002FAE 488D15E5DEFFFF      <1>     lea rdx, memByte
  1793 00002FB5 B409                <1>     mov ah, 09h
  1794 00002FB7 CD21                <1>     int 21h
  1795                              <1> 
  1796 00002FB9 488D15AAD9FFFF      <1>     lea rdx, crlf
  1797 00002FC0 B409                <1>     mov ah, 09h
  1798 00002FC2 CD21                <1>     int 21h
  1799                              <1>     return
    13                              <2> %%_ret:
    14 00002FC4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1800                              <1> 
  1801                              <1> .mcbPrintAmount:
  1802 00002FC5 51                  <1>     push rcx
  1803 00002FC6 56                  <1>     push rsi
  1804 00002FC7 57                  <1>     push rdi
  1805 00002FC8 55                  <1>     push rbp
  1806 00002FC9 E8890C0000          <1>     call printDecimalWord
  1807 00002FCE 5D                  <1>     pop rbp
  1808 00002FCF 5F                  <1>     pop rdi
  1809 00002FD0 5E                  <1>     pop rsi
  1810 00002FD1 59                  <1>     pop rcx
  1811                              <1>     return
    13                              <2> %%_ret:
    14 00002FD2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1812                              <1> .badMCBFound:
  1813 00002FD3 488D1507DFFFFF      <1>     lea rdx, memBad2
  1814 00002FDA B409                <1>     mov ah, 09h
  1815 00002FDC CD21                <1>     int 21h
  1816 00002FDE E9420D0000          <1>     jmp freezePC.altEP
  1817                              <1> 
  1818                              <1> type:
  1819 00002FE3 F605C2D0FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1820 00002FEA 0F84F4E9FFFF        <1>     jz badArgError
  1821 00002FF0 F605B8D0FFFFFF      <1>     test byte [arg2Flg], -1
  1822 00002FF7 0F85E7E9FFFF        <1>     jnz badArgError         ;If this set, error
  1823 00002FFD 4C8B050BD0FFFF      <1>     mov r8, [pspPtr]
  1824 00003004 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1825 0000300B 0FB6059BD0FFFF      <1>     movzx eax, byte [arg1Off]
  1826 00003012 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1827 00003015 803E0D              <1>     cmp byte [rsi], CR
  1828 00003018 0F84C6E9FFFF        <1>     je badArgError
  1829 0000301E 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1830 00003022 750F                <1>     jne .noDrive
  1831 00003024 0FB60583D0FFFF      <1>     movzx eax, byte [arg1FCBret]
  1832 0000302B 3CFF                <1>     cmp al, -1
  1833 0000302D 0F84A8E9FFFF        <1>     je badDriveError
  1834                              <1> .noDrive:
  1835                              <1>     ;Now we open the provided file
  1836 00003033 E8E60B0000          <1>     call buildCommandPath
  1837 00003038 488D15A5D4FFFF      <1>     lea rdx, searchSpec
  1838 0000303F B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1839 00003044 CD21                <1>     int 21h
  1840 00003046 0F82A1E9FFFF        <1>     jc badFileError
  1841 0000304C 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1842 00003053 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1843                              <1> .lp:
  1844 00003056 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1845 0000305B B43F                <1>     mov ah, 3Fh ;Read handle
  1846 0000305D CD21                <1>     int 21h
  1847 0000305F 89C1                <1>     mov ecx, eax
  1848 00003061 67E317              <1>     jecxz .exit
  1849 00003064 53                  <1>     push rbx    ;Save the original in handle
  1850 00003065 BB01000000          <1>     mov ebx, 1  ;STDOUT
  1851 0000306A B440                <1>     mov ah, 40h
  1852 0000306C CD21                <1>     int 21h
  1853 0000306E 5B                  <1>     pop rbx ;Get back the original read handle
  1854 0000306F 720F                <1>     jc .exitBad
  1855 00003071 39C8                <1>     cmp eax, ecx
  1856 00003073 74E1                <1>     je .lp
  1857 00003075 FFC9                <1>     dec ecx ;One less for a ^Z
  1858 00003077 39C8                <1>     cmp eax, ecx
  1859 00003079 7505                <1>     jne .exitBad
  1860                              <1> .exit:
  1861 0000307B B43E                <1>     mov ah, 3Eh ;Close handle
  1862 0000307D CD21                <1>     int 21h
  1863                              <1>     return
    13                              <2> %%_ret:
    14 0000307F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1864                              <1> .exitBad:
  1865                              <1>     ;If it is a char device, don't print an error
  1866 00003080 B800440000          <1>     mov eax, 4400h  ;Get IOCTL mode 
  1867 00003085 BB01000000          <1>     mov ebx, 1
  1868 0000308A CD21                <1>     int 21h
  1869 0000308C F6C280              <1>     test dl, devCharDev
  1870                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000308F 75(7F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1871 00003091 E9F3E8FFFF          <1>     jmp badDiskFull
  1872                              <1> 
  1873                              <1> exit:
  1874 00003096 F6058ECFFFFFFF      <1>     test byte [permaSwitch], -1
  1875                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000309D 75(7F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1876 0000309F 488B0571CFFFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1877 000030A6 483DFFFFFFFF        <1>     cmp rax, -1
  1878                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000030AC 74(7F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1879 000030AE 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1880                              <1> 
  1881 000030B2 488B1573CFFFFF      <1>     mov rdx, qword [parentInt22]
  1882 000030B9 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  1883 000030BD B822250000          <1>     mov eax, 2522h
  1884 000030C2 CD21                <1>     int 21h
  1885                              <1> 
  1886 000030C4 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1887 000030C9 CD21                <1>     int 21h
  1888                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 000030CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1889                              <1> 
  1890                              <1> launchChild:
  1891                              <1>     ;We execute an external command here.
  1892                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  1893                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  1894                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  1895                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  1896                              <1>     ;We know the drive we are on is valid so no need to double check that!
  1897 000030CC E8640C0000          <1>     call setDTA         
  1898                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
  1899 000030D1 488D3D63D2FFFF      <1>     lea rdi, cmdPathSpec
  1900 000030D8 4889FE              <1>     mov rsi, rdi
  1901 000030DB B811120000          <1>     mov eax, 1211h  ;Normalise this path first
  1902 000030E0 CD2F                <1>     int 2fh
  1903 000030E2 E87A0A0000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  1904 000030E7 4889FE              <1>     mov rsi, rdi    ;Source here
  1905 000030EA 488D3D69D0FFFF      <1>     lea rdi, cmdFcb
  1906 000030F1 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  1907 000030F6 CD21                <1>     int 21h
  1908 000030F8 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  1909 000030FA 0F8514E9FFFF        <1>     jnz badCmdError
  1910 00003100 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  1911                              <1> .pathLoop:
  1912 00003103 488D3559D0FFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  1913 0000310A 488D3D4ADEFFFF      <1>     lea rdi, extStr
  1914 00003111 BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  1915                              <1> .extLp:
  1916 00003116 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  1917 00003117 B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  1918 0000311C F3A6                <1>     rep cmpsb   ;Compare the two strings
  1919 0000311E 5E                  <1>     pop rsi
  1920 0000311F 85C9                <1>     test ecx, ecx
  1921 00003121 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  1922 00003123 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  1923 00003126 FFCA                <1>     dec edx         ;Else one less extension type to check
  1924 00003128 75EC                <1>     jnz .extLp
  1925                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  1926                              <1>     ;If not, error.
  1927 0000312A B903000000          <1>     mov ecx, 3
  1928 0000312F 4889F7              <1>     mov rdi, rsi
  1929 00003132 B020                <1>     mov al, SPC
  1930 00003134 F3AE                <1>     rep scasb   
  1931 00003136 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  1932 00003138 0F85D6E8FFFF        <1>     jnz badCmdError    ;If not, error!
  1933                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  1934 0000313E 488D3516DEFFFF      <1>     lea rsi, extStr
  1935 00003145 BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  1936                              <1> .extSrchLp:
  1937 0000314A 488D3D12D0FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1938 00003151 B903000000          <1>     mov ecx, 3
  1939 00003156 F3A4                <1>     rep movsb   ;Copy the extension over!
  1940 00003158 E846010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  1941 0000315D 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  1942 0000315F FFCB                <1>     dec ebx                 ;Decrement extension counter
  1943 00003161 75E7                <1>     jnz .extSrchLp
  1944                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  1945                              <1> ; we start prepending path componants and trying again. To do this, we reset
  1946                              <1> ; by setting the fcb extension back to all spaces.
  1947 00003163 488D3DF9CFFFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1948 0000316A B903000000          <1>     mov ecx, 3
  1949 0000316F B020                <1>     mov al, SPC
  1950 00003171 F3AA                <1>     rep stosb   ;Store back the empty extension!
  1951 00003173 EB70                <1>     jmp short .pathHandle
  1952                              <1> .extFnd:
  1953                              <1> ;Here if the file had the right extension.
  1954 00003175 E829010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  1955 0000317A 7269                <1>     jc .pathHandle
  1956                              <1> .extSrchFnd:
  1957                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  1958                              <1> ; a BAT. If it is, separate handling!
  1959 0000317C 803DE0CFFFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  1960 00003183 0F84B3030000        <1>     je batLaunch
  1961 00003189 488D1D05D0FFFF      <1>     lea rbx, launchBlock
  1962 00003190 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  1963 00003194 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  1964 00003197 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  1965 0000319E 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1966 000031A2 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1967 000031A6 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1968 000031AA 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1969 000031AE 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1970 000031B2 488D1582D1FFFF      <1>     lea rdx, cmdPathSpec
  1971 000031B9 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1972 000031BE CD21                <1>     int 21h
  1973                              <1> ;If the program failed to start, verify why!
  1974 000031C0 B800590000          <1>     mov eax, 5900h      ;Get extended error
  1975 000031C5 31DB                <1>     xor ebx, ebx
  1976 000031C7 CD21                <1>     int 21h
  1977 000031C9 6689053DCEFFFF      <1>     mov word [returnCode], ax   ;Error code from EXEC
  1978 000031D0 3C05                <1>     cmp al, errAccDen   ;Access denied?
  1979 000031D2 0F84E8E7FFFF        <1>     je badAccError
  1980 000031D8 3C07                <1>     cmp al, errMCBbad   ;If MCB bad error, freeze PC
  1981 000031DA 0F843A0B0000        <1>     je freezePC
  1982 000031E0 E92FE8FFFF          <1>     jmp badCmdError     ;If something goes wrong, error out
  1983                              <1> .pathHandle:        
  1984                              <1> ;First check if rbp is null. If it is, its a first time entry. 
  1985                              <1> ;al has error code!
  1986 000031E5 4885ED              <1>     test rbp, rbp
  1987 000031E8 0F85A3000000        <1>     jnz .pathReentry
  1988                              <1> ;Now check if the command we recieved included an absolute path.
  1989                              <1> ;If so, we don't do path substitution and just fail at this point
  1990 000031EE 488D3546D1FFFF      <1>     lea rsi, cmdPathSpec
  1991 000031F5 66AD                <1>     lodsw   ;Get the first two chars
  1992 000031F7 3A052CCEFFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  1993 000031FD 0F8411E8FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  1994 00003203 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  1995 00003205 7412                <1>     je .pathGetEnv
  1996 00003207 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  1997 0000320A 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  1998 0000320C AC                  <1>     lodsb   ;Get the third char
  1999 0000320D 3A0516CEFFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  2000 00003213 0F84FBE7FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2001                              <1> .pathGetEnv:
  2002                              <1> ;Now get a pointer to the environment and search for PATH=
  2003                              <1> ;We only take the final portion of the path and add it to each path componant
  2004                              <1> ;This agrees with DOS 3.3
  2005 00003219 E8840B0000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  2006 0000321E 0F84F0E7FFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  2007                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  2008                              <1>     ;Now we know we dont have to keep track of chars!!
  2009 00003224 488D3D54DDFFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  2010 0000322B E8CC0B0000          <1>     call searchForEnvVar
  2011 00003230 0F82DEE7FFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
  2012 00003236 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
  2013 00003239 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
  2014                              <1> .pathRejoin:
  2015 00003240 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  2016 00003243 0F84CBE7FFFF        <1>     je badCmdError      ;Empty or no more path? Error!
  2017 00003249 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
  2018 0000324C 488D3D91D2FFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  2019                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
  2020                              <1>     ;SHOULD CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
  2021                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
  2022                              <1>     ;This is impossible to do if env edited by COMMAND.COM
  2023 00003253 E86D090000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
  2024 00003258 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  2025 0000325B 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  2026 0000325E 48FFCF              <1>     dec rdi ;Point to the null terminator
  2027 00003261 8A05C2CDFFFF        <1>     mov al, byte [pathSep]
  2028 00003267 3847FF              <1>     cmp byte [rdi - 1], al
  2029 0000326A 7401                <1>     je .skipPathsep ;Need for rootdir as a double slash start is a netpath
  2030 0000326C AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  2031                              <1> .skipPathsep: ;Affects double slashes in path (but thats ok)
  2032 0000326D 488D35E7CEFFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2033 00003274 E80C090000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  2034 00003279 488D3564D2FFFF      <1>     lea rsi, searchSpec 
  2035 00003280 488D3DB4D0FFFF      <1>     lea rdi, cmdPathSpec
  2036 00003287 E8E9070000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  2037 0000328C E972FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  2038                              <1> .pathReentry:
  2039 00003291 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  2040 00003295 0F8479E7FFFF        <1>     je badCmdError
  2041                              <1> ;Currently, because we dont swap drives, we wont print this message.
  2042                              <1> ;Not really a big deal...
  2043                              <1>     ;cmp al, errBadDrv
  2044                              <1>     ;jne .pathDrvOk
  2045                              <1>     ;lea rdx, badDrvSrch ;Print the drive was invalid!
  2046                              <1>     ;mov eax, 0900h
  2047                              <1>     ;int 21h
  2048                              <1> ;.pathDrvOk:
  2049 0000329B 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  2050 0000329E 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  2051 000032A1 EB9D                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  2052                              <1> 
  2053                              <1> .prepAndSearch:
  2054                              <1> ;Copies over the name and extension in UC to the last componant of the 
  2055                              <1> ;cmdPathSpec and null terminates. 
  2056                              <1> ;Input: cmdFcb name + ext setup. 
  2057                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  2058                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
  2059 000032A3 51                  <1>     push rcx
  2060 000032A4 56                  <1>     push rsi
  2061 000032A5 57                  <1>     push rdi
  2062 000032A6 488D3D8ED0FFFF      <1>     lea rdi, cmdPathSpec 
  2063 000032AD 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  2064 000032B0 E8AC080000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  2065 000032B5 488D359FCEFFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2066 000032BC E8C4080000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  2067 000032C1 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  2068 000032C6 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  2069 000032C8 CD21                <1>     int 21h
  2070 000032CA 5F                  <1>     pop rdi
  2071 000032CB 5E                  <1>     pop rsi
  2072 000032CC 59                  <1>     pop rcx
  2073                              <1>     return
    13                              <2> %%_ret:
    14 000032CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2074                              <1> 
  2075                              <1> set:
  2076 000032CE F605D7CDFFFFFF      <1>     test byte [arg1Flg], -1
  2077 000032D5 7539                <1>     jnz .editEnv
  2078                              <1>     ;Here we just print the environment.
  2079 000032D7 E8C60A0000          <1>     call checkEnvGoodAndGet 
  2080 000032DC 0F84D5E6FFFF        <1>     jz badEnvSpaceError
  2081                              <1>     ;We know this is a good env so keep going! env ptr in rsi
  2082 000032E2 4889F7              <1>     mov rdi, rsi
  2083 000032E5 4889F2              <1>     mov rdx, rsi
  2084                              <1> .findLp:
  2085 000032E8 B9FFFFFFFF          <1>     mov ecx, -1
  2086 000032ED 31C0                <1>     xor eax, eax
  2087                              <1> .scanLp:
  2088 000032EF F2AE                <1>     repne scasb
  2089 000032F1 75FC                <1>     jne .scanLp
  2090 000032F3 F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
  2091                              <1>     ;Else, we now print this environment variable and CRLF it
  2092                              <1>     ;rdx points to the start of the string aleady
  2093                              <1>     ;ecx has the bytes to print
  2094 000032F5 BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
  2095 000032FA B800400000          <1>     mov eax, 4000h  ;Print to handle
  2096 000032FF CD21                <1>     int 21h
  2097 00003301 E86D050000          <1>     call printCRLF
  2098 00003306 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
  2099                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003309 74(CD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2100 0000330B 4889FA              <1>     mov rdx, rdi   
  2101 0000330E EBD8                <1>     jmp short .findLp
  2102                              <1> .editEnv:
  2103 00003310 E88D0A0000          <1>     call checkEnvGoodAndGet
  2104 00003315 0F849CE6FFFF        <1>     jz badEnvSpaceError
  2105 0000331B 0FB6058BCDFFFF      <1>     movzx eax, byte [arg1Off]
  2106 00003322 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2107 00003329 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
  2108                              <1> .altEp:
  2109 0000332C 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
  2110 0000332F B00D                <1>     mov al, CR              ;Search for the CR
  2111 00003331 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
  2112 00003339 89CB                <1>     mov ebx, ecx            ;Save this count 
  2113 0000333B 53                  <1>     push rbx                ;Save this count on the stack too!
  2114 0000333C F2AE                <1>     repne scasb             ;Now get the length of this env string
  2115 0000333E 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
  2116 00003340 66891D1AD5FFFF      <1>     mov word [envVarSz], bx ;Store the count
  2117 00003347 59                  <1>     pop rcx                 ;Get the char count back!
  2118 00003348 89CB                <1>     mov ebx, ecx            
  2119 0000334A 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
  2120 0000334D B03D                <1>     mov al, "="             ;Scan for an equals sign
  2121 0000334F F2AE                <1>     repne scasb
  2122 00003351 0F8557E6FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
  2123 00003357 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
  2124 00003359 66891D03D5FFFF      <1>     mov word [envVarNamSz], bx
  2125 00003360 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
  2126 00003363 7477                <1>     je .delEnvVar           ;Free the envvar and return
  2127 00003365 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
  2128 00003366 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2129 00003369 E88E0A0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2130 0000336E 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
  2131 00003370 E8B50A0000          <1>     call envFree            ;Free the var in rsi
  2132                              <1> .editNewEnv:
  2133 00003375 E8E90A0000          <1>     call getFreeSpace       ;Get the free space in env in ecx
  2134 0000337A E8090B0000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
  2135 0000337F 5E                  <1>     pop rsi                 ;Get back the ptr to the string
  2136 00003380 31C0                <1>     xor eax, eax            ;Prepare null length!
  2137 00003382 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
  2138 00003388 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
  2139 0000338B 720B                <1>     jb .reallocTry          ;Try to reallocate!
  2140 0000338D FFC9                <1>     dec ecx                 ;Save a byte for end magic null
  2141 0000338F 663B0DCBD4FFFF      <1>     cmp cx, word [envVarSz] ;Do we have enough space?
  2142 00003396 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
  2143                              <1> .reallocTry:
  2144                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
  2145                              <1>     ; we proceed with the environment size.
  2146 00003398 E8000B0000          <1>     call growEnvBlock   ;Attempt to grow the environment
  2147 0000339D 7319                <1>     jnc .reallocOk
  2148 0000339F 0F8412E6FFFF        <1>     jz badEnvSpaceError    ;Max environment space
  2149                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
  2150                              <1>     ; partially the variable into the env. If so we do that. If the name
  2151                              <1>     ; cannot fit, we don't bother
  2152                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
  2153 000033A5 663B0DB7D4FFFF      <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
  2154                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000033AC 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000033AE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2155 000033AF E803E6FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
  2156 000033B4 FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
  2157 000033B6 EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
  2158                              <1> .reallocOk:
  2159                              <1>     ;Here we have all the space to just copy the full path
  2160 000033B8 0FB70DA2D4FFFF      <1>     movzx ecx, word [envVarSz]
  2161                              <1> .nameCp:
  2162                              <1> ;Now copy over the env var, ecx = #ofchars to copy
  2163                              <1> ;Always enough memory for name= here
  2164 000033BF AC                  <1>     lodsb
  2165 000033C0 E8D3060000          <1>     call ucChar
  2166 000033C5 AA                  <1>     stosb
  2167 000033C6 66FFC9              <1>     dec cx      ;Always decrement this count
  2168 000033C9 3C3D                <1>     cmp al, "="
  2169 000033CB 75F2                <1>     jne .nameCp
  2170                              <1> .exitNameCp:
  2171 000033CD AC                  <1>     lodsb
  2172 000033CE 3C0D                <1>     cmp al, CR
  2173 000033D0 7405                <1>     je .exitCp
  2174 000033D2 AA                  <1>     stosb
  2175 000033D3 FFC9                <1>     dec ecx
  2176 000033D5 75F6                <1>     jnz .exitNameCp
  2177                              <1> .exitCp:
  2178 000033D7 31C0                <1>     xor eax, eax
  2179 000033D9 66AB                <1>     stosw   ;Store the final null word
  2180                              <1>     return
    13                              <2> %%_ret:
    14 000033DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2181                              <1> .delEnvVar:
  2182                              <1>     ;rsi -> Start of the envvar name in user buffer
  2183 000033DC 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2184 000033DF E8180A0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2185 000033E4 7205                <1>     jc .delEnvVarSkip
  2186 000033E6 E83F0A0000          <1>     call envFree    ;Free the env var at rsi
  2187                              <1> .delEnvVarSkip:
  2188 000033EB F8                  <1>     clc             ;Clear CF if the var doesnt exist
  2189                              <1>     return
    13                              <2> %%_ret:
    14 000033EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2190                              <1> 
  2191                              <1> pathEdit:
  2192                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
  2193                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
  2194                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
  2195                              <1> ; end there. Error with too many arguments error!
  2196                              <1> ;If after the equals sign there is nothing, we just print the path!
  2197                              <1> ;Gotta process the command line ourselves first
  2198 000033ED E8B0090000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2199 000033F2 0F84BFE5FFFF        <1>     jz badEnvSpaceError
  2200                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2201 000033F8 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2202 000033FF E8AD000000          <1>     call .skipPathDelimiters
  2203 00003404 3C0D                <1>     cmp al, CR
  2204 00003406 7466                <1>     je .printPath
  2205                              <1> ;Else use the set command to setup the path in the searchSpec.
  2206 00003408 56                  <1>     push rsi    ;Save the first char of the command line string
  2207 00003409 488D356FDBFFFF      <1>     lea rsi, pathEVar
  2208 00003410 488D3DCDD0FFFF      <1>     lea rdi, searchSpec
  2209 00003417 E859060000          <1>     call strcpy
  2210 0000341C 48FFCF              <1>     dec rdi     ;Point to the terminating null
  2211 0000341F 5E                  <1>     pop rsi     ;Get back the first char of the pathstring
  2212 00003420 31C9                <1>     xor ecx, ecx    ;Make a count of chars
  2213                              <1> .cpLp:
  2214 00003422 AC                  <1>     lodsb
  2215 00003423 3C0D                <1>     cmp al, CR
  2216 00003425 7411                <1>     je .cpLpExit
  2217 00003427 E891000000          <1>     call .isALPathDelimiter ;Any path delims now are exit conditions!
  2218 0000342C 740A                <1>     je .cpLpExit
  2219 0000342E E865060000          <1>     call ucChar ;Uppercase the char
  2220 00003433 AA                  <1>     stosb       ;Store it
  2221 00003434 FFC1                <1>     inc ecx     ;Inc the count, CR not inclusive!
  2222 00003436 EBEA                <1>     jmp short .cpLp
  2223                              <1> .cpLpExit:
  2224                              <1>     ;Remove trailing semicolons
  2225 00003438 807FFF3B            <1>     cmp byte [rdi - 1], ";" ;Check back a char
  2226 0000343C 7507                <1>     jne .cpLpNoIntervene
  2227 0000343E FFC9                <1>     dec ecx     ;Reduce the count by one
  2228 00003440 48FFCF              <1>     dec rdi     ;Go back a char
  2229 00003443 EBF3                <1>     jmp short .cpLpExit ;Keep removing
  2230                              <1> .cpLpNoIntervene:
  2231 00003445 B00D                <1>     mov al, CR  ;Now we store the terminator!
  2232 00003447 AA                  <1>     stosb       ;Store it!
  2233 00003448 81C105000000        <1>     add ecx, 5  ;PATH= is 5 chars
  2234 0000344E 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count
  2235 00003455 FFC1                <1>     inc ecx     ;Add the CR for copying over
  2236 00003457 488D3586D0FFFF      <1>     lea rsi, searchSpec
  2237 0000345E 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2238 00003465 57                  <1>     push rdi
  2239 00003466 F3A4                <1>     rep movsb
  2240 00003468 5E                  <1>     pop rsi         ;Get the ptr to the cmdline in rsi
  2241 00003469 E9BEFEFFFF          <1>     jmp set.altEp   ;We've now set the string up, lets go!
  2242                              <1> .printPath:
  2243 0000346E 488D3D0ADBFFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
  2244 00003475 E882090000          <1>     call searchForEnvVar    ;Returns ptr to env var in rsi
  2245 0000347A 7221                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
  2246 0000347C 4889F7              <1>     mov rdi, rsi        
  2247 0000347F E80A060000          <1>     call strlen         ;Get the length of the path in rdi
  2248 00003484 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
  2249 0000348A 7411                <1>     je .noPathPrnt      ;Print no path!
  2250 0000348C FFC9                <1>     dec ecx             ;Drop the terminating null from the count
  2251 0000348E 4889FA              <1>     mov rdx, rdi        ;Set path ptr for printing
  2252 00003491 BB01000000          <1>     mov ebx, 1          ;STDOUT
  2253 00003496 B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
  2254 0000349B EB0C                <1>     jmp short .pathExit
  2255                              <1> .noPathPrnt:
  2256 0000349D 488D15E8D7FFFF      <1>     lea rdx, noPath
  2257 000034A4 B800090000          <1>     mov eax, 0900h
  2258                              <1> .pathExit:
  2259 000034A9 CD21                <1>     int 21h
  2260 000034AB E8C3030000          <1>     call printCRLF      ;Print a crlf at the end
  2261                              <1>     return
    13                              <2> %%_ret:
    14 000034B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2262                              <1> .skipPathDelimiters:
  2263                              <1> ;Input: rsi -> Start of string to parse
  2264                              <1> ;Output: rsi -> First non-delimiter char of string
  2265                              <1> ;        al = First non delim char
  2266 000034B1 AC                  <1>     lodsb
  2267 000034B2 E806000000          <1>     call .isALPathDelimiter
  2268 000034B7 74F8                <1>     je .skipPathDelimiters
  2269 000034B9 48FFCE              <1>     dec rsi
  2270                              <1>     return
    13                              <2> %%_ret:
    14 000034BC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2271                              <1> .isALPathDelimiter:
  2272                              <1> ;Same as before without semicolon
  2273 000034BD 3C20                <1>     cmp al, SPC
  2274                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000034BF 74(BC)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2275 000034C1 3C09                <1>     cmp al, TAB
  2276                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000034C3 74(BC)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2277 000034C5 3C2C                <1>     cmp al, ","
  2278                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000034C7 74(BC)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2279 000034C9 3C3D                <1>     cmp al, "="
  2280                              <1>     return
    13                              <2> %%_ret:
    14 000034CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2281                              <1> 
  2282                              <1> prompt:
  2283 000034CC E8D1080000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2284 000034D1 0F84E0E4FFFF        <1>     jz badEnvSpaceError
  2285                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2286 000034D7 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2287 000034DE E8C7050000          <1>     call skipDelimiters ;Points rsi to the first non-delimiter char
  2288 000034E3 803E0D              <1>     cmp byte [rsi], CR  ;Is the first non-delim a CR?
  2289 000034E6 742C                <1>     je .reset   ;Reset if so
  2290 000034E8 56                  <1>     push rsi    ;Save ptr to the start of the user typed line
  2291 000034E9 488D3563DAFFFF      <1>     lea rsi, promptEVar ;Copy the PROMPT= prefix to searchspec
  2292 000034F0 488D3DEDCFFFFF      <1>     lea rdi, searchSpec
  2293 000034F7 B907000000          <1>     mov ecx, 7  ;Copy without <CR>
  2294 000034FC F3A4                <1>     rep movsb
  2295 000034FE 5E                  <1>     pop rsi ;Get back ptr to the user typed line
  2296 000034FF 31C9                <1>     xor ecx, ecx    ;Get char count
  2297                              <1> .cp:    ;Now copy the user string over
  2298 00003501 AC                  <1>     lodsb
  2299 00003502 AA                  <1>     stosb 
  2300 00003503 3C0D                <1>     cmp al, CR
  2301 00003505 7404                <1>     je .cpOk
  2302 00003507 FFC1                <1>     inc ecx ;Increment count if non CR char copied over
  2303 00003509 EBF6                <1>     jmp short .cp
  2304                              <1> .cpOk:
  2305 0000350B 488D35D2CFFFFF      <1>     lea rsi, searchSpec ;Source the string from here
  2306 00003512 EB09                <1>     jmp short .goSet    ;Got the CR-less count
  2307                              <1> .reset:
  2308                              <1> ;Delete the environment variable!
  2309 00003514 488D3538DAFFFF      <1>     lea rsi, promptEVar 
  2310 0000351B 31C9                <1>     xor ecx, ecx    ;No chars to write to the envstring
  2311                              <1> .goSet:
  2312 0000351D 81C107000000        <1>     add ecx, 7  ;Add the chars for the prompt= string too
  2313 00003523 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl 
  2314 0000352A FFC1                <1>     inc ecx     ;Include CR in copy
  2315 0000352C 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2316 00003533 57                  <1>     push rdi
  2317 00003534 F3A4                <1>     rep movsb
  2318 00003536 5E                  <1>     pop rsi
  2319 00003537 E9F0FDFFFF          <1>     jmp set.altEp
  2320                              <1> 
  2321                              <1> batLaunch:
  2322                              <1> ;Preps and launches a batch file!
  2323 0000353C 488D1505000000      <1>     lea rdx, .batMsg
  2324 00003543 E932030000          <1>     jmp printString
  2325 00003548 424154434820707265- <1> .batMsg db "BATCH preprocessor not implemented",CR,LF,"$"
  2325 00003551 70726F636573736F72- <1>
  2325 0000355A 206E6F7420696D706C- <1>
  2325 00003563 656D656E7465640D0A- <1>
  2325 0000356C 24                  <1>
  2326                              <1> 
  2327                              <1> echo:
  2328 0000356D F60538CBFFFFFF      <1>     test byte [arg1Flg], -1 ;If no argument, display if on or off
  2329 00003574 752A                <1>     jnz .argGiven
  2330 00003576 488D1500D8FFFF      <1>     lea rdx, echoIs
  2331 0000357D E8F8020000          <1>     call printString
  2332 00003582 488D15DAD7FFFF      <1>     lea rdx, onMes
  2333 00003589 488D0DCDD7FFFF      <1>     lea rcx, offMes
  2334 00003590 F60507CBFFFFFF      <1>     test byte [echoFlg], -1
  2335 00003597 480F44D1            <1>     cmovz rdx, rcx
  2336 0000359B E9DA020000          <1>     jmp printString
  2337                              <1> .argGiven:
  2338 000035A0 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2339 000035A7 0FB605FFCAFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the offset
  2340 000035AE 4801C6              <1>     add rsi, rax
  2341 000035B1 AC                  <1>     lodsb   ;Get this char
  2342 000035B2 48FFCE              <1>     dec rsi ;And go back to the start of the string
  2343 000035B5 E8DE040000          <1>     call ucChar
  2344 000035BA 3C4F                <1>     cmp al, "O" ;Was it an O? If not, direct copy
  2345 000035BC 755A                <1>     jne .directEcho
  2346 000035BE 8A4601              <1>     mov al, byte [rsi + 1]  ;Get the next char
  2347 000035C1 E8D2040000          <1>     call ucChar
  2348 000035C6 3C4E                <1>     cmp al, "N" ;If its N, check its the last char on the string
  2349 000035C8 751B                <1>     jne .checkOff
  2350 000035CA 56                  <1>     push rsi
  2351 000035CB 4881C602000000      <1>     add rsi, 2  ;Go past on string
  2352 000035D2 E8D3040000          <1>     call skipDelimiters
  2353 000035D7 803E0D              <1>     cmp byte [rsi], CR
  2354 000035DA 5E                  <1>     pop rsi
  2355 000035DB 753B                <1>     jne .directEcho ;If its not, just echo the string
  2356 000035DD C605BACAFFFFFF      <1>     mov byte [echoFlg], -1
  2357                              <1>     return
    13                              <2> %%_ret:
    14 000035E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2358                              <1> .checkOff:
  2359 000035E5 8A4601              <1>     mov al, byte [rsi + 1]  ;Get first char past O
  2360 000035E8 E8AB040000          <1>     call ucChar
  2361 000035ED 3C46                <1>     cmp al, "F" ;Is it an F?
  2362 000035EF 7527                <1>     jne .directEcho ;No, just direct echo
  2363 000035F1 8A4602              <1>     mov al, byte [rsi + 2]
  2364 000035F4 E89F040000          <1>     call ucChar
  2365 000035F9 3C46                <1>     cmp al, "F"
  2366 000035FB 751B                <1>     jne .directEcho
  2367 000035FD 56                  <1>     push rsi
  2368 000035FE 4881C603000000      <1>     add rsi, 3
  2369 00003605 E8A0040000          <1>     call skipDelimiters
  2370 0000360A 803E0D              <1>     cmp byte [rsi], CR
  2371 0000360D 5E                  <1>     pop rsi
  2372 0000360E 7508                <1>     jne .directEcho
  2373 00003610 C60587CAFFFF00      <1>     mov byte [echoFlg], 0
  2374                              <1>     return
    13                              <2> %%_ret:
    14 00003617 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2375                              <1> .directEcho: 
  2376 00003618 AC                  <1>     lodsb
  2377 00003619 3C0D                <1>     cmp al, CR
  2378 0000361B 0F8452020000        <1>     je printCRLF    ;Prints a crlf and returns
  2379 00003621 88C2                <1>     mov dl, al
  2380 00003623 E8C2020000          <1>     call outChar
  2381 00003628 EBEE                <1>     jmp short .directEcho
    18                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printDate:
     4                              <1> ;Input: eax = Packed Date
     5                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
     6                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
     7                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
     8                              <1> ;       ebx = 0 => Print two digit year
     9                              <1> ;       ebx = 1 => Print four digit year
    10 0000362A 53                  <1>     push rbx
    11 0000362B 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    12 0000362D 803D00CAFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    13 00003634 7240                <1>     jb .usDate
    14 00003636 777C                <1>     ja .jpnDate
    15                              <1> ;European: DD/MM/YY
    16 00003638 251F000000          <1>     and eax, 1Fh    ;Save day bits
    17 0000363D E8B0000000          <1>     call .printFirst
    18 00003642 8A15F7C9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    19 00003648 B402                <1>     mov ah, 02h
    20 0000364A CD21                <1>     int 21h
    21                              <1> 
    22 0000364C 89C8                <1>     mov eax, ecx
    23 0000364E 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    24 00003653 C1E805              <1>     shr eax, 5
    25 00003656 E8B3000000          <1>     call .printSecond
    26                              <1> 
    27 0000365B 8A15DEC9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    28 00003661 B402                <1>     mov ah, 02h
    29 00003663 CD21                <1>     int 21h
    30                              <1> 
    31 00003665 89C8                <1>     mov eax, ecx
    32 00003667 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    33 0000366C C1E809              <1>     shr eax, 9
    34 0000366F 5B                  <1>     pop rbx ;Get the year signature back
    35 00003670 E8A9000000          <1>     call .printYear
    36                              <1>     return
    13                              <2> %%_ret:
    14 00003675 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                              <1> .usDate:
    38                              <1> ;US: MM/DD/YY
    39 00003676 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    40 0000367B C1E805              <1>     shr eax, 5
    41 0000367E E86F000000          <1>     call .printFirst
    42                              <1> 
    43 00003683 8A15B6C9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    44 00003689 B402                <1>     mov ah, 02h
    45 0000368B CD21                <1>     int 21h
    46                              <1> 
    47 0000368D 89C8                <1>     mov eax, ecx
    48 0000368F 251F000000          <1>     and eax, 1Fh    ;Save day bits
    49 00003694 E875000000          <1>     call .printSecond
    50                              <1> 
    51 00003699 8A15A0C9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 0000369F B402                <1>     mov ah, 02h
    53 000036A1 CD21                <1>     int 21h
    54                              <1> 
    55 000036A3 89C8                <1>     mov eax, ecx
    56 000036A5 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 000036AA C1E809              <1>     shr eax, 9
    58 000036AD 5B                  <1>     pop rbx ;Get the year signature back
    59 000036AE E86B000000          <1>     call .printYear
    60                              <1>     return
    13                              <2> %%_ret:
    14 000036B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> .jpnDate:
    62                              <1> ;Japan: YY/MM/DD
    63 000036B4 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 000036B9 C1E809              <1>     shr eax, 9
    65 000036BC 5B                  <1>     pop rbx ;Get the year signature back
    66 000036BD E85C000000          <1>     call .printYear
    67                              <1> 
    68 000036C2 8A1577C9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    69 000036C8 B402                <1>     mov ah, 02h
    70 000036CA CD21                <1>     int 21h
    71                              <1> 
    72 000036CC 89C8                <1>     mov eax, ecx
    73 000036CE 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    74 000036D3 C1E805              <1>     shr eax, 5
    75 000036D6 E833000000          <1>     call .printSecond
    76                              <1> 
    77 000036DB 8A155EC9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    78 000036E1 B402                <1>     mov ah, 02h
    79 000036E3 CD21                <1>     int 21h
    80                              <1> 
    81 000036E5 89C8                <1>     mov eax, ecx
    82 000036E7 251F000000          <1>     and eax, 1Fh    ;Save day bits
    83 000036EC E81D000000          <1>     call .printSecond
    84                              <1>     return
    13                              <2> %%_ret:
    14 000036F1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> ;Each of these require eax setup correctly
    87                              <1> .printFirst:
    88 000036F2 51                  <1>     push rcx
    89 000036F3 E8D0050000          <1>     call getDecimalWord
    90 000036F8 84ED                <1>     test ch, ch ;Do we have an upper digit?
    91 000036FA 7504                <1>     jnz .skipSpace
    92 000036FC 88CD                <1>     mov ch, cl
    93 000036FE B120                <1>     mov cl, " "
    94                              <1> .skipSpace:
    95 00003700 88CA                <1>     mov dl, cl
    96 00003702 B402                <1>     mov ah, 02h
    97 00003704 CD21                <1>     int 21h
    98 00003706 88EA                <1>     mov dl, ch
    99 00003708 B402                <1>     mov ah, 02h
   100 0000370A CD21                <1>     int 21h
   101 0000370C 59                  <1>     pop rcx
   102                              <1>     return
    13                              <2> %%_ret:
    14 0000370D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .printSecond:
   104 0000370E 51                  <1>     push rcx
   105 0000370F E8B4050000          <1>     call getDecimalWord
   106 00003714 84ED                <1>     test ch, ch ;Do we have an upper digit?
   107 00003716 75E8                <1>     jnz .skipSpace
   108 00003718 88CD                <1>     mov ch, cl
   109 0000371A B130                <1>     mov cl, "0"
   110 0000371C EBE2                <1>     jmp short .skipSpace
   111                              <1> .printYear:
   112 0000371E 05BC070000          <1>     add eax, 1980
   113 00003723 51                  <1>     push rcx
   114 00003724 53                  <1>     push rbx
   115 00003725 E89E050000          <1>     call getDecimalWord ;Get unpacked in rcx
   116 0000372A 5B                  <1>     pop rbx
   117 0000372B 84DB                <1>     test bl, bl
   118 0000372D 740C                <1>     jz .twoDigitYear
   119 0000372F 88CA                <1>     mov dl, cl  ;Print the first digit
   120 00003731 B402                <1>     mov ah, 02h
   121 00003733 CD21                <1>     int 21h
   122 00003735 88EA                <1>     mov dl, ch  ;Print the second digit
   123 00003737 B402                <1>     mov ah, 02h
   124 00003739 CD21                <1>     int 21h
   125                              <1> .twoDigitYear:
   126 0000373B C1E910              <1>     shr ecx, 10h    ;Get high word low
   127 0000373E 88CA                <1>     mov dl, cl  ;Print the upper digit
   128 00003740 B402                <1>     mov ah, 02h
   129 00003742 CD21                <1>     int 21h
   130 00003744 88EA                <1>     mov dl, ch  ;Print the lower digit
   131 00003746 B402                <1>     mov ah, 02h
   132 00003748 CD21                <1>     int 21h
   133 0000374A 59                  <1>     pop rcx
   134                              <1>     return
    13                              <2> %%_ret:
    14 0000374B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> 
   137                              <1> printTime:
   138                              <1> ;Input: eax = Packed Time
   139                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   140                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   141 0000374C 89C1                <1>     mov ecx, eax
   142 0000374E 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   143 00003753 C1E80B              <1>     shr eax, 11
   144 00003756 803DE8C8FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   145 0000375D 750B                <1>     jne .ampm
   146 0000375F E85A000000          <1>     call .printHours
   147 00003764 E831000000          <1>     call .printMinutes
   148                              <1>     return
    13                              <2> %%_ret:
    14 00003769 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> .ampm:
   150 0000376A 3D0C000000          <1>     cmp eax, 12
   151 0000376F 7713                <1>     ja .pm
   152 00003771 7416                <1>     je .pm2
   153 00003773 E846000000          <1>     call .printHours
   154 00003778 E81D000000          <1>     call .printMinutes
   155 0000377D B261                <1>     mov dl, "a"
   156 0000377F B402                <1>     mov ah, 02h
   157 00003781 CD21                <1>     int 21h
   158                              <1>     return
    13                              <2> %%_ret:
    14 00003783 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> .pm:
   160 00003784 2D0C000000          <1>     sub eax, 12
   161                              <1> .pm2:
   162 00003789 E830000000          <1>     call .printHours
   163 0000378E E807000000          <1>     call .printMinutes
   164 00003793 B270                <1>     mov dl, "p"
   165 00003795 B402                <1>     mov ah, 02h
   166 00003797 CD21                <1>     int 21h
   167                              <1>     return
    13                              <2> %%_ret:
    14 00003799 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   168                              <1> .printMinutes:
   169 0000379A 8A15A1C8FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   170 000037A0 B402                <1>     mov ah, 02h
   171 000037A2 CD21                <1>     int 21h
   172                              <1> 
   173 000037A4 89C8                <1>     mov eax, ecx
   174 000037A6 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   175 000037AB C1E805              <1>     shr eax, 5
   176                              <1> .printMinutesAlt:
   177 000037AE 51                  <1>     push rcx
   178 000037AF E814050000          <1>     call getDecimalWord
   179 000037B4 84ED                <1>     test ch, ch ;Do we have an upper digit?
   180 000037B6 7514                <1>     jnz .skipSpace
   181 000037B8 88CD                <1>     mov ch, cl
   182 000037BA B130                <1>     mov cl, "0"
   183 000037BC EB0E                <1>     jmp short .skipSpace
   184                              <1> .printHours:
   185 000037BE 51                  <1>     push rcx
   186 000037BF E804050000          <1>     call getDecimalWord
   187 000037C4 84ED                <1>     test ch, ch ;Do we have an upper digit?
   188 000037C6 7504                <1>     jnz .skipSpace
   189 000037C8 88CD                <1>     mov ch, cl
   190 000037CA B120                <1>     mov cl, " "
   191                              <1> .skipSpace:
   192 000037CC 88CA                <1>     mov dl, cl
   193 000037CE B402                <1>     mov ah, 02h
   194 000037D0 CD21                <1>     int 21h
   195 000037D2 88EA                <1>     mov dl, ch
   196 000037D4 B402                <1>     mov ah, 02h
   197 000037D6 CD21                <1>     int 21h
   198 000037D8 59                  <1>     pop rcx
   199                              <1>     return
    13                              <2> %%_ret:
    14 000037D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printPrompt:
   202 000037DA F605BDC8FFFFFF      <1>     test byte [echoFlg], -1 ;If echo off, no prompt!
   203                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000037E1 74(D9)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 000037E3 488D3D69D7FFFF      <1>     lea rdi, promptEVar   ;Find the prompt var
   205 000037EA E80D060000          <1>     call searchForEnvVar
   206 000037EF 730B                <1>     jnc .validPrompt
   207                              <1>     ;Here we print the default prompt
   208 000037F1 E8F9000000          <1>     call putCWDInPrompt
   209 000037F6 E8C5000000          <1>     call putGTinPrompt
   210                              <1>     return
    13                              <2> %%_ret:
    14 000037FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> .validPrompt:
   212                              <1> ;rsi points to the prompt
   213 000037FC 4881C607000000      <1>     add rsi, 7  ;Go past the prompt= string
   214                              <1> .promptLp:
   215 00003803 AC                  <1>     lodsb   ;Get the char
   216 00003804 84C0                <1>     test al, al
   217                              <1>     retz    ;Return when al is 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003806 74(FB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   218 00003808 3C24                <1>     cmp al, "$"
   219 0000380A 7409                <1>     je .escapeChar
   220 0000380C 88C2                <1>     mov dl, al
   221 0000380E E8D7000000          <1>     call outChar    ;Prints the char in dl
   222 00003813 EBEE                <1>     jmp short .promptLp
   223                              <1> .escapeChar:
   224 00003815 AC                  <1>     lodsb       ;Get the next char now that we are escaping
   225 00003816 E87D020000          <1>     call ucChar ;Uppercase this char in al
   226 0000381B 488D1D2A000000      <1>     lea rbx, .pTbl
   227 00003822 B90D000000          <1>     mov ecx, pTblL / 3  ;3 bytes per entry
   228                              <1> .escapeLp:
   229 00003827 3803                <1>     cmp byte [rbx], al  ;Are we at the right entry?
   230 00003829 740D                <1>     je .escapeFnd
   231 0000382B 4881C303000000      <1>     add rbx, 3  ;Go to next entry
   232 00003832 FFC9                <1>     dec ecx
   233 00003834 75F1                <1>     jnz .escapeLp
   234 00003836 EBCB                <1>     jmp short .promptLp  ;Output nothing if invalid
   235                              <1> .escapeFnd:
   236 00003838 488D050D000000      <1>     lea rax, .pTbl              ;Get the table addr
   237 0000383F 0FB75B01            <1>     movzx ebx, word [rbx + 1]   ;Get the word offset from the table
   238 00003843 4801D8              <1>     add rax, rbx                ;Add these
   239 00003846 56                  <1>     push rsi    ;Ensure rsi remains unchanged
   240 00003847 FFD0                <1>     call rax    ;Call indirectly the function to output the chars
   241 00003849 5E                  <1>     pop rsi
   242 0000384A EBB7                <1>     jmp short .promptLp
   243                              <1> 
   244                              <1> ;Easy table to use, 13 entries, 3 bytes per entry
   245                              <1> .pTbl:
   246 0000384C 42                  <1>     db "B", 
   247 0000384D 7000                <1>     dw putPipeInPrompt - .pTbl     ;Pipe char
   248 0000384F 44                  <1>     db "D", 
   249 00003850 5D01                <1>     dw printFmtDate - .pTbl        ;Current date
   250 00003852 45                  <1>     db "E", 
   251 00003853 6400                <1>     dw putEscInPrompt - .pTbl      ;ANSI Escape char
   252 00003855 47                  <1>     db "G", 
   253 00003856 7400                <1>     dw putGTinPrompt - .pTbl       ;Greater than char
   254 00003858 48                  <1>     db "H", 
   255 00003859 7C00                <1>     dw putBSPinPrompt - .pTbl      ;Backspace
   256 0000385B 4C                  <1>     db "L", 
   257 0000385C 7800                <1>     dw putLTinPrompt - .pTbl       ;Less than char
   258 0000385E 4E                  <1>     db "N", 
   259 0000385F 9500                <1>     dw putDriveInPrompt - .pTbl    ;Current drive letter
   260 00003861 50                  <1>     db "P", 
   261 00003862 A300                <1>     dw putCWDInPrompt - .pTbl      ;Current drive and path
   262 00003864 51                  <1>     db "Q", 
   263 00003865 6C00                <1>     dw putEquInPrompt - .pTbl      ;Equals char
   264 00003867 54                  <1>     db "T", 
   265 00003868 F400                <1>     dw printFmtTime - .pTbl        ;Current time in hh:mm:ss.hh fmt
   266 0000386A 56                  <1>     db "V", 
   267 0000386B 3600                <1>     dw putVersionInPrompt - .pTbl  ;DOS version number
   268 0000386D 5F                  <1>     db "_", 
   269 0000386E 2700                <1>     dw printCRLF - .pTbl           ;CRLF pair
   270 00003870 24                  <1>     db "$", 
   271 00003871 6800                <1>     dw putMoneyInPrompt - .pTbl    ;Dollar sign
   272                              <1> pTblL equ $ - .pTbl
   273                              <1> 
   274                              <1> printCRLF:
   275 00003873 488D15F0D0FFFF      <1>     lea rdx, crlf
   276                              <1> printString:
   277 0000387A B800090000          <1>     mov eax, 0900h  ;Print string
   278 0000387F CD21                <1>     int 21h
   279                              <1>     return
    13                              <2> %%_ret:
    14 00003881 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   280                              <1> 
   281                              <1> putVersionInPrompt:
   282 00003882 488D1554D3FFFF      <1>     lea rdx, dosVer
   283 00003889 B409                <1>     mov ah, 09h ;Print String
   284 0000388B CD21                <1>     int 21h
   285 0000388D B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   286 0000388F CD21                <1>     int 21h
   287 00003891 50                  <1>     push rax    ;Save minor version
   288 00003892 E884010000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   289 00003897 E89C010000          <1>     call printPackedBCD ;Print al
   290 0000389C B22E                <1>     mov dl, "."
   291 0000389E B402                <1>     mov ah, 02h
   292 000038A0 CD21                <1>     int 21h
   293 000038A2 58                  <1>     pop rax
   294 000038A3 88E0                <1>     mov al, ah  ;Get the minor version low
   295 000038A5 E871010000          <1>     call hexToBCD
   296 000038AA E889010000          <1>     call printPackedBCD
   297                              <1>     return
    13                              <2> %%_ret:
    14 000038AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   298                              <1> putEscInPrompt:
   299 000038B0 B21B                <1>     mov dl, ESC
   300 000038B2 EB36                <1>     jmp short outChar
   301                              <1> 
   302                              <1> putMoneyInPrompt:
   303 000038B4 B224                <1>     mov dl, "$"
   304 000038B6 EB32                <1>     jmp short outChar
   305                              <1> 
   306                              <1> putEquInPrompt:
   307 000038B8 B23D                <1>     mov dl, "="
   308 000038BA EB2E                <1>     jmp short outChar
   309                              <1> 
   310                              <1> putPipeInPrompt:
   311 000038BC B27C                <1>     mov dl, "|"
   312 000038BE EB2A                <1>     jmp short outChar
   313                              <1> 
   314                              <1> putGTinPrompt:
   315 000038C0 B23E                <1>     mov dl, ">"
   316 000038C2 EB26                <1>     jmp short outChar
   317                              <1> 
   318                              <1> putLTinPrompt:
   319 000038C4 B23C                <1>     mov dl, "<"
   320 000038C6 EB22                <1>     jmp short outChar
   321                              <1> 
   322                              <1> putBSPinPrompt:
   323 000038C8 488D1509D5FFFF      <1>     lea rdx, backSpace
   324 000038CF B903000000          <1>     mov ecx, 3
   325 000038D4 BB01000000          <1>     mov ebx, 1
   326 000038D9 B800400000          <1>     mov eax, 4000h  ;Output the backspace!
   327 000038DE CD21                <1>     int 21h
   328                              <1>     return
    13                              <2> %%_ret:
    14 000038E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   329                              <1> 
   330                              <1> putDriveInPrompt:
   331 000038E1 E88A010000          <1>     call getCurrentDrive
   332 000038E6 0441                <1>     add al, "A" ;Convert to letter
   333 000038E8 88C2                <1>     mov dl, al
   334                              <1> outChar:
   335 000038EA B402                <1>     mov ah, 02h ;Echo to STDOUT
   336 000038EC CD21                <1>     int 21h
   337                              <1>     return
    13                              <2> %%_ret:
    14 000038EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   338                              <1> putCWDInPrompt:
   339 000038EF E87C010000          <1>     call getCurrentDrive
   340 000038F4 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   341 000038F6 FEC2                <1>     inc dl
   342 000038F8 0441                <1>     add al, "A" ;Convert to letter
   343 000038FA B43A                <1>     mov ah, ":"
   344 000038FC 488D3D57C7FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   345 00003903 66AB                <1>     stosw   ;Store X:, rdi+=2
   346 00003905 8A051EC7FFFF        <1>     mov al, byte [pathSep]
   347 0000390B AA                  <1>     stosb   ;Store pathSep, inc rdi
   348 0000390C B447                <1>     mov ah, 47h ;Get Current Working Directory
   349 0000390E 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   350 00003911 CD21                <1>     int 21h
   351 00003913 721F                <1>     jc .badDrive
   352 00003915 E874010000          <1>     call strlen
   353 0000391A 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   354                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   355 00003920 B800400000          <1>     mov eax, 4000h ;Write to handle
   356 00003925 BB01000000          <1>     mov ebx, 1  ;STDOUT
   357 0000392A 488D1529C7FFFF      <1>     lea rdx, currDirStr
   358 00003931 CD21                <1>     int 21h
   359                              <1>     return
    13                              <2> %%_ret:
    14 00003933 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> .badDrive:
   361                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   362 00003934 488D156AD3FFFF      <1>     lea rdx, badDrvMsg
   363 0000393B E93AFFFFFF          <1>     jmp printString
   364                              <1> printFmtTime:
   365                              <1> ;Outputs the formatted time
   366 00003940 E847000000          <1>     call getTime
   367 00003945 0FB6C5              <1>     movzx eax, ch
   368 00003948 E871FEFFFF          <1>     call printTime.printHours
   369 0000394D 8A15EEC6FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   370 00003953 B402                <1>     mov ah, 02h
   371 00003955 CD21                <1>     int 21h
   372 00003957 0FB6054FCDFFFF      <1>     movzx eax, byte [td1]   ;Minutes
   373 0000395E E84BFEFFFF          <1>     call printTime.printMinutesAlt
   374 00003963 8A15D8C6FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   375 00003969 B402                <1>     mov ah, 02h
   376 0000396B CD21                <1>     int 21h
   377 0000396D 0FB6053CCDFFFF      <1>     movzx eax, byte [td4]   ;Seconds
   378 00003974 E835FEFFFF          <1>     call printTime.printMinutesAlt
   379 00003979 B22E                <1>     mov dl, "."
   380 0000397B B402                <1>     mov ah, 02h
   381 0000397D CD21                <1>     int 21h
   382 0000397F 0FB60529CDFFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   383 00003986 E823FEFFFF          <1>     call printTime.printMinutesAlt
   384                              <1>     return
    13                              <2> %%_ret:
    14 0000398B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   385                              <1> getTime:
   386 0000398C B42C                <1>     mov ah, 2Ch ;DOS get time
   387 0000398E CD21                <1>     int 21h
   388                              <1>     ;CH = hour (0-23)
   389                              <1> 	;CL = minutes (0-59)
   390                              <1> 	;DH = seconds (0-59)
   391                              <1> 	;DL = hundredths (0-99)
   392 00003990 880D17CDFFFF        <1>     mov byte [td1], cl
   393 00003996 882D12CDFFFF        <1>     mov byte [td2], ch
   394 0000399C 88150DCDFFFF        <1>     mov byte [td3], dl
   395 000039A2 883508CDFFFF        <1>     mov byte [td4], dh
   396                              <1>     return
    13                              <2> %%_ret:
    14 000039A8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   397                              <1> 
   398                              <1> printFmtDate:
   399                              <1> ;Outputs the formatted date
   400 000039A9 B8002A0000          <1>     mov eax, 2A00h ;DOS get date
   401 000039AE CD21                <1>     int 21h
   402                              <1> 	;AL = day of the week (0=Sunday)
   403                              <1> 	;CX = year (1980-2099)
   404                              <1> 	;DH = month (1-12)
   405                              <1> 	;DL = day (1-31)
   406 000039B0 6681E9BC07          <1>     sub cx, 1980    ;Subtract 1980 from cx
   407 000039B5 66890DF1CCFFFF      <1>     mov word [td1], cx
   408 000039BC 8815EDCCFFFF        <1>     mov byte [td3], dl
   409 000039C2 8835E8CCFFFF        <1>     mov byte [td4], dh
   410 000039C8 0FB6C0              <1>     movzx eax, al
   411 000039CB 89C3                <1>     mov ebx, eax
   412 000039CD D1E3                <1>     shl ebx, 1   ;Multiply by 2
   413 000039CF 01D8                <1>     add eax, ebx ;Make it 3 times 
   414 000039D1 488D154FD1FFFF      <1>     lea rdx, dayName
   415 000039D8 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   416 000039DC B903000000          <1>     mov ecx, 3  ;Print three chars
   417 000039E1 BB01000000          <1>     mov ebx, 1  ;STDOUT
   418 000039E6 B440                <1>     mov ah, 40h ;Write to handle
   419 000039E8 CD21                <1>     int 21h
   420 000039EA B220                <1>     mov dl, " "
   421 000039EC E8F9FEFFFF          <1>     call outChar
   422                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   423                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   424                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   425 000039F1 0FB705B5CCFFFF      <1>     movzx eax, word [td1]   ;Get this word
   426 000039F8 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   427 000039FB 0FB61DAECCFFFF      <1>     movzx ebx, byte [td4]
   428 00003A02 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   429 00003A05 09D8                <1>     or eax, ebx ;Add this date to eax
   430 00003A07 0FB61DA1CCFFFF      <1>     movzx ebx, byte [td3]
   431 00003A0E 09D8                <1>     or eax, ebx
   432 00003A10 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   433 00003A15 E810FCFFFF          <1>     call printDate
   434                              <1>     return
    13                              <2> %%_ret:
    14 00003A1A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   435                              <1> 
   436                              <1> 
   437                              <1> hexToBCD:
   438                              <1> ;Converts a Hex byte into two BCD digits
   439                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   440 00003A1B 51                  <1>     push rcx
   441 00003A1C 0FB6C0              <1>     movzx eax, al   ;Zero extend
   442 00003A1F 31C9                <1>     xor ecx, ecx
   443                              <1> .htb0:
   444 00003A21 3D0A000000          <1>     cmp eax, 10
   445 00003A26 7209                <1>     jb .htb1
   446 00003A28 2D0A000000          <1>     sub eax, 10
   447 00003A2D FFC1                <1>     inc ecx
   448 00003A2F EBF0                <1>     jmp short .htb0
   449                              <1> .htb1:
   450 00003A31 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   451 00003A34 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   452 00003A36 59                  <1>     pop rcx
   453 00003A37 C3                  <1>     ret
   454                              <1> 
   455                              <1> printPackedBCD:
   456                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   457                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   458                              <1> ;Preserves all registers
   459 00003A38 50                  <1>     push rax
   460 00003A39 52                  <1>     push rdx
   461 00003A3A 88C4                <1>     mov ah, al
   462 00003A3C 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   463 00003A3E 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   464 00003A41 7508                <1>     jnz .upperNybble
   465 00003A43 B220                <1>     mov dl, " "
   466 00003A45 B402                <1>     mov ah, 02h
   467 00003A47 CD21                <1>     int 21h
   468 00003A49 EB0E                <1>     jmp short .lowerNybble
   469                              <1> .upperNybble:
   470 00003A4B 50                  <1>     push rax
   471 00003A4C C0EC04              <1>     shr ah, 4
   472 00003A4F 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   473 00003A52 88E2                <1>     mov dl, ah
   474 00003A54 B402                <1>     mov ah, 02h ;Print DL
   475 00003A56 CD21                <1>     int 21h
   476 00003A58 58                  <1>     pop rax
   477                              <1> .lowerNybble:
   478 00003A59 0430                <1>     add al, "0"
   479 00003A5B 88C2                <1>     mov dl, al
   480 00003A5D B402                <1>     mov ah, 02h ;Print DL
   481 00003A5F CD21                <1>     int 21h
   482 00003A61 5A                  <1>     pop rdx
   483 00003A62 58                  <1>     pop rax
   484                              <1>     return
    13                              <2> %%_ret:
    14 00003A63 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   485                              <1> 
   486                              <1> setDrive:
   487                              <1> ;Input: dl = 0 based Drive number to set to
   488                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   489                              <1> ;AX trashed.
   490 00003A64 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   491 00003A66 CD21                <1>     int 21h 
   492 00003A68 E803000000          <1>     call getCurrentDrive
   493 00003A6D 38D0                <1>     cmp al, dl  ;Is this the same drive?
   494                              <1>     return
    13                              <2> %%_ret:
    14 00003A6F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   495                              <1> getCurrentDrive:
   496                              <1> ;Returns the 0 based current drive in al
   497 00003A70 B419                <1>     mov ah, 19h
   498 00003A72 CD21                <1>     int 21h
   499                              <1>     return
    13                              <2> %%_ret:
    14 00003A74 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> 
   501                              <1> strcpy:
   502                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   503                              <1> ;rsi -> Source
   504                              <1> ;rdi -> Destination
   505 00003A75 51                  <1>     push rcx
   506 00003A76 57                  <1>     push rdi
   507 00003A77 4889F7              <1>     mov rdi, rsi
   508 00003A7A E80F000000          <1>     call strlen ;Get the length of the string in rsi
   509 00003A7F 5F                  <1>     pop rdi
   510 00003A80 F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   511 00003A82 59                  <1>     pop rcx
   512                              <1>     return
    13                              <2> %%_ret:
    14 00003A83 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   513                              <1> 
   514                              <1> strcpy2:
   515                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   516                              <1> ;rsi -> Source
   517                              <1> ;rdi -> Destination
   518 00003A84 56                  <1>     push rsi
   519 00003A85 57                  <1>     push rdi
   520 00003A86 E8EAFFFFFF          <1>     call strcpy 
   521 00003A8B 5F                  <1>     pop rdi
   522 00003A8C 5E                  <1>     pop rsi
   523                              <1>     return
    13                              <2> %%_ret:
    14 00003A8D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> strlen:
   526                              <1> ;Gets the length of a ASCIIZ string
   527                              <1> ;Input: rdi = Source buffer
   528                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   529 00003A8E 50                  <1>     push rax
   530 00003A8F B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   531 00003A94 CD2F                <1>     int 2fh
   532 00003A96 58                  <1>     pop rax
   533                              <1>     return
    13                              <2> %%_ret:
    14 00003A97 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   534                              <1> 
   535                              <1> ucChar:
   536                              <1> ;Input: al = Char to uppercase
   537                              <1> ;Output: al = Adjusted char 
   538 00003A98 53                  <1>     push rbx
   539 00003A99 4889E3              <1>     mov rbx, rsp    ;Save the stack ptr
   540 00003A9C 50                  <1>     push rax    ;Push the char twice on the stack
   541 00003A9D 50                  <1>     push rax
   542 00003A9E B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   543 00003AA3 CD2F                <1>     int 2fh         ;Returns the processed char in al
   544 00003AA5 4889DC              <1>     mov rsp, rbx    ;Return the stack ptr to where it was
   545 00003AA8 5B                  <1>     pop rbx
   546                              <1>     return
    13                              <2> %%_ret:
    14 00003AA9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   547                              <1> 
   548                              <1> skipDelimiters:
   549                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   550                              <1> ; command delimiters but a subset thereof. 
   551                              <1> ;These are the same across all codepages.
   552                              <1> ;Input: rsi must point to the start of the data string
   553                              <1> ;Output: rsi points to the first non-delimiter char
   554 00003AAA 50                  <1>     push rax
   555                              <1> .l1:
   556 00003AAB AC                  <1>     lodsb
   557 00003AAC E807000000          <1>     call isALdelimiter
   558 00003AB1 74F8                <1>     jz .l1
   559                              <1> .exit:
   560 00003AB3 58                  <1>     pop rax
   561 00003AB4 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   562                              <1>     return
    13                              <2> %%_ret:
    14 00003AB7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> isALdelimiter:
   565                              <1> ;Returns: ZF=NZ if al is not a command separator 
   566                              <1> ;         ZF=ZE if al is a command separator
   567 00003AB8 3C20                <1>     cmp al, " "
   568                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003ABA 74(B7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   569 00003ABC 3C3B                <1>     cmp al, ";"
   570                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003ABE 74(B7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   571 00003AC0 3C3D                <1>     cmp al, "="
   572                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003AC2 74(B7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   573 00003AC4 3C2C                <1>     cmp al, ","
   574                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003AC6 74(B7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   575 00003AC8 3C09                <1>     cmp al, TAB
   576                              <1>     return
    13                              <2> %%_ret:
    14 00003ACA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   577                              <1> 
   578                              <1> clearCommandState:
   579                              <1> ;Clears the command state
   580 00003ACB 488D3DDAC5FFFF      <1>     lea rdi, cmdStatePtr
   581 00003AD2 B907000000          <1>     mov ecx, cmdStateL
   582 00003AD7 31C0                <1>     xor eax, eax
   583 00003AD9 F3AA                <1>     rep stosb
   584                              <1>     return
    13                              <2> %%_ret:
    14 00003ADB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   585                              <1> 
   586                              <1> clearCommandLineState:
   587                              <1> ;Clears the command line state after a 0Dh encountered
   588 00003ADC 488D3DBEC5FFFF      <1>     lea rdi, cmdLineStatePtr
   589 00003AE3 B912000000          <1>     mov ecx, cmdLineStateL
   590 00003AE8 31C0                <1>     xor eax, eax
   591 00003AEA F3AA                <1>     rep stosb
   592 00003AEC C705ACC5FFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   592 00003AF5 FF                  <1>
   593 00003AF6 C705A8C5FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   593 00003AFF FF                  <1>
   594                              <1> ;Close all handles from 5->MAX
   595 00003B00 0FB70D20C5FFFF      <1>     movzx ecx, word [numHdls]
   596 00003B07 BB05000000          <1>     mov ebx, 5
   597                              <1> .lp:
   598 00003B0C B43E                <1>     mov ah, 3Eh ;File close
   599 00003B0E CD21                <1>     int 21h
   600 00003B10 FFC3                <1>     inc ebx ;Goto next file
   601 00003B12 39CB                <1>     cmp ebx, ecx
   602 00003B14 76F6                <1>     jbe .lp    ;Keep looping whilst below or equal
   603                              <1>     return
    13                              <2> %%_ret:
    14 00003B16 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   604                              <1> 
   605                              <1> asciiFilenameToFCB:
   606                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   607                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   608                              <1> ;Also doesn't check if chars are valid
   609                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   610                              <1> ;Name is space padded.
   611                              <1> ;Input: rsi = ASCII string buffer
   612                              <1> ;       rdi = FCB name buffer
   613                              <1> ;Output: al = Char that terminated the source string 
   614 00003B17 53                  <1>     push rbx    
   615 00003B18 57                  <1>     push rdi
   616 00003B19 B90B000000          <1>     mov ecx, 11
   617 00003B1E B020                <1>     mov al, " "
   618 00003B20 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   619 00003B22 5F                  <1>     pop rdi
   620 00003B23 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   621                              <1>     ;Preprocess for Dir Searches
   622 00003B26 803E2E              <1>     cmp byte [rsi], "."
   623 00003B29 7509                <1>     jne .processName
   624 00003B2B A4                  <1>     movsb   ;Store the first dot
   625 00003B2C 803E2E              <1>     cmp byte [rsi], "."
   626 00003B2F 752C                <1>     jne .exitBadChar
   627 00003B31 A4                  <1>     movsb
   628 00003B32 EB29                <1>     jmp short .exitBadChar
   629                              <1> .processName:
   630 00003B34 AC                  <1>     lodsb   ;Get the char in al
   631 00003B35 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   632 00003B37 7426                <1>     jz .exit
   633 00003B39 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   634 00003B3B 7407                <1>     je .extSpace
   635 00003B3D 3C2E                <1>     cmp al, "."
   636 00003B3F 740C                <1>     je .ext
   637 00003B41 AA                  <1>     stosb   ;Store the char
   638 00003B42 EBF0                <1>     jmp short .processName
   639                              <1> .extSpace:
   640                              <1> ;Now we scan for a period in the name
   641 00003B44 AC                  <1>     lodsb   ;Get a char and increase rsi
   642 00003B45 84C0                <1>     test al, al
   643 00003B47 7416                <1>     jz .exit
   644 00003B49 3C2E                <1>     cmp al, "."     ;If al is not a period...
   645 00003B4B 75F7                <1>     jne .extSpace   ; keep searching
   646                              <1> .ext:
   647 00003B4D 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   648                              <1> .processExt:
   649 00003B51 AC                  <1>     lodsb
   650 00003B52 84C0                <1>     test al, al
   651 00003B54 7409                <1>     jz .exit
   652 00003B56 3C20                <1>     cmp al, " "
   653 00003B58 7405                <1>     je .exit
   654 00003B5A AA                  <1>     stosb
   655 00003B5B EBF4                <1>     jmp short .processExt
   656                              <1> .exitBadChar:
   657 00003B5D 30C0                <1>     xor al, al  ;Return a null terminator
   658                              <1> .exit:
   659 00003B5F 5B                  <1>     pop rbx
   660                              <1>     return
    13                              <2> %%_ret:
    14 00003B60 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   661                              <1> 
   662                              <1> findLastPathComponant:
   663                              <1> ;Finds the last path componant of an ASCIIZ path string
   664                              <1> ;Input: rdi -> Head of the path to find last componant on
   665                              <1> ;Output: rdi -> Start of the last componant
   666 00003B61 50                  <1>     push rax
   667 00003B62 51                  <1>     push rcx
   668 00003B63 31C9                <1>     xor ecx, ecx
   669 00003B65 FFC9                <1>     dec ecx
   670 00003B67 31C0                <1>     xor eax, eax
   671 00003B69 F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   672 00003B6B F7D1                <1>     not ecx     ;This gets the count of chars  
   673 00003B6D 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   674 00003B70 8A05B3C4FFFF        <1>     mov al, byte [pathSep]
   675 00003B76 FD                  <1>     std
   676 00003B77 F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   677 00003B79 FC                  <1>     cld
   678 00003B7A 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   679 00003B7C 48FFC7              <1>     inc rdi     ;Point at pathsep
   680                              <1> .exit:
   681 00003B7F 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   682 00003B82 59                  <1>     pop rcx
   683 00003B83 58                  <1>     pop rax
   684                              <1>     return
    13                              <2> %%_ret:
    14 00003B84 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   685                              <1> 
   686                              <1> FCBToAsciiz:
   687                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   688                              <1> ;Name is space padded too
   689                              <1> ;Input: rsi = FCB name buffer
   690                              <1> ;       rdi = ASCIIZ string buffer
   691 00003B85 B908000000          <1>     mov ecx, 8
   692 00003B8A F3A4                <1>     rep movsb   ;Move the name over
   693                              <1> .scanNameSpace:
   694 00003B8C 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   695 00003B90 750D                <1>     jne .ext
   696 00003B92 48FFCF              <1>     dec rdi
   697 00003B95 FFC1                <1>     inc ecx
   698 00003B97 81F908000000        <1>     cmp ecx, 8
   699 00003B9D 72ED                <1>     jb .scanNameSpace
   700                              <1> .ext:
   701 00003B9F 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   702 00003BA4 7506                <1>     jne .validExt
   703 00003BA6 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   704 00003BAA 7415                <1>     je .exit
   705                              <1> .validExt:
   706 00003BAC B02E                <1>     mov al, "." ;We have a valid extension, store a period
   707 00003BAE AA                  <1>     stosb
   708 00003BAF B903000000          <1>     mov ecx, 3
   709 00003BB4 F3A4                <1>     rep movsb   ;Move the three extension chars over
   710                              <1> .scanExtSpace:
   711 00003BB6 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   712 00003BBA 7505                <1>     jne .exit
   713 00003BBC 48FFCF              <1>     dec rdi
   714 00003BBF EBF5                <1>     jmp short .scanExtSpace
   715                              <1> .exit:
   716 00003BC1 31C0                <1>     xor eax, eax
   717 00003BC3 AA                  <1>     stosb   ;Store a null at the end
   718                              <1>     return
    13                              <2> %%_ret:
    14 00003BC4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   719                              <1> 
   720                              <1> cpDelimOrCtrlStringToBufz:
   721                              <1> ;Copy a delimited or control char terminated string to a buffer
   722                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   723                              <1> ;       rdi -> Buffer to store null terminated string in
   724                              <1> ;Output: rsi -> First char past string end
   725                              <1> ;       rdi -> One char past null terminator on string buffer
   726 00003BC5 C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   727                              <1> .lp:
   728 00003BC8 AC                  <1>     lodsb
   729 00003BC9 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here. CR included!
   730 00003BCB 760A                <1>     jbe .exit
   731 00003BCD E8E6FEFFFF          <1>     call isALdelimiter
   732 00003BD2 7403                <1>     je .exit
   733 00003BD4 AA                  <1>     stosb
   734 00003BD5 EBF1                <1>     jmp short .lp
   735                              <1> .exit:
   736 00003BD7 31C0                <1>     xor eax, eax
   737 00003BD9 AA                  <1>     stosb   ;Store a null terminator
   738                              <1>     return
    13                              <2> %%_ret:
    14 00003BDA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   739                              <1> 
   740                              <1> 
   741                              <1> cpDelimPathToBufz:
   742                              <1> ;Copy a delimited path into buffer and null terminate.
   743                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   744                              <1> ;       rdi -> Buffer to store null terminated path in
   745                              <1> ;Output: rsi -> First char past pathname delimiter
   746                              <1> ;       rdi -> One char past null terminator on pathname buffer
   747 00003BDB 53                  <1>     push rbx
   748 00003BDC 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   749 00003BDF C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   750                              <1> .lp:
   751 00003BE2 AC                  <1>     lodsb   ;Get the char
   752 00003BE3 3C0D                <1>     cmp al, CR
   753 00003BE5 7412                <1>     je .gotRedirPath
   754 00003BE7 E8CCFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   755 00003BEC 740B                <1>     jz .gotRedirPath 
   756 00003BEE 3A0536C4FFFF        <1>     cmp al, byte [switchChar]
   757 00003BF4 7403                <1>     je .gotRedirPath
   758 00003BF6 AA                  <1>     stosb   ;Store this char and loop next char
   759 00003BF7 EBE9                <1>     jmp short .lp
   760                              <1> .gotRedirPath:
   761 00003BF9 50                  <1>     push rax    ;Save the char on stack
   762 00003BFA 30C0                <1>     xor al, al  ;Get null terminator char
   763 00003BFC 4829FB              <1>     sub rbx, rdi
   764 00003BFF 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   765 00003C06 7412                <1>     je .notColon
   766 00003C08 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   767 00003C0F 7409                <1>     je .notColon
   768 00003C11 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   769 00003C15 7503                <1>     jne .notColon
   770 00003C17 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   771                              <1> .notColon:
   772 00003C1A AA                  <1>     stosb   ;Store the null terminator for the redir path
   773 00003C1B 58                  <1>     pop rax ;Get back the char in al
   774 00003C1C 5B                  <1>     pop rbx
   775                              <1>     return
    13                              <2> %%_ret:
    14 00003C1D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   776                              <1> 
   777                              <1> buildCommandPath:
   778                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   779 00003C1E 0FB60588C4FFFF      <1>     movzx eax, byte [arg1Off]
   780 00003C25 4C8B05E3C3FFFF      <1>     mov r8, [pspPtr]
   781 00003C2C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   782 00003C33 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   783                              <1> copyArgumentToSearchSpec:
   784                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   785                              <1> ; and null terminates
   786 00003C36 488D3DA7C8FFFF      <1>     lea rdi, searchSpec
   787 00003C3D E899FFFFFF          <1>     call cpDelimPathToBufz
   788                              <1>     return
    13                              <2> %%_ret:
    14 00003C42 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   789                              <1> 
   790                              <1> scanForWildcards:
   791                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   792                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   793 00003C43 50                  <1>     push rax
   794 00003C44 56                  <1>     push rsi
   795                              <1> .lp:
   796 00003C45 AC                  <1>     lodsb
   797 00003C46 3C3F                <1>     cmp al, "?"
   798 00003C48 740A                <1>     je .exit
   799 00003C4A 3C2A                <1>     cmp al, "*"
   800 00003C4C 7406                <1>     je .exit
   801 00003C4E 84C0                <1>     test al, al
   802 00003C50 75F3                <1>     jnz .lp
   803 00003C52 FEC0                <1>     inc al  ;This will clear the ZF
   804                              <1> .exit:
   805 00003C54 5E                  <1>     pop rsi
   806 00003C55 58                  <1>     pop rax
   807                              <1>     return
    13                              <2> %%_ret:
    14 00003C56 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   808                              <1> 
   809                              <1> printDecimalWord:
   810                              <1> ;Takes qword in rax and print it's decimal representation
   811                              <1> ;Takes the qword in eax and prints its decimal representation
   812 00003C57 31C9                <1>     xor ecx, ecx
   813 00003C59 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   814 00003C5B 85C0                <1>     test eax, eax
   815 00003C5D 750C                <1>     jnz .notZero
   816 00003C5F B930000000          <1>     mov ecx, "0"
   817 00003C64 BD01000000          <1>     mov ebp, 1  ;Print one digit
   818 00003C69 EB3E                <1>     jmp short .dpfb2
   819                              <1> .notZero:
   820 00003C6B 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   821 00003C6D BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   822                              <1> .dpfb0:
   823 00003C72 FFC5                <1>     inc ebp
   824 00003C74 81FD08000000        <1>     cmp ebp, 8
   825 00003C7A 7206                <1>     jb .dpfb00
   826 00003C7C 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   827 00003C80 EB04                <1>     jmp short .dpfb01
   828                              <1> .dpfb00:
   829 00003C82 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   830                              <1> .dpfb01:
   831 00003C86 31D2                <1>     xor edx, edx
   832 00003C88 48F7F6              <1>     div rsi
   833 00003C8B 80C230              <1>     add dl, '0'
   834 00003C8E 80FA39              <1>     cmp dl, '9'
   835 00003C91 7603                <1>     jbe .dpfb1
   836 00003C93 80C207              <1>     add dl, 'A'-'0'-10
   837                              <1> .dpfb1:
   838 00003C96 81FD08000000        <1>     cmp ebp, 8
   839 00003C9C 7204                <1>     jb .dpfb10
   840 00003C9E 88D3                <1>     mov bl, dl ;Add the bottom bits
   841 00003CA0 EB02                <1>     jmp short .dpfb11
   842                              <1> .dpfb10:
   843 00003CA2 88D1                <1>     mov cl, dl    ;Save remainder byte
   844                              <1> .dpfb11:
   845 00003CA4 4885C0              <1>     test rax, rax
   846 00003CA7 75C9                <1>     jnz .dpfb0
   847                              <1> .dpfb2:
   848 00003CA9 81FD08000000        <1>     cmp ebp, 8
   849 00003CAF 7208                <1>     jb .dpfb20
   850 00003CB1 88DA                <1>     mov dl, bl
   851 00003CB3 48C1EB08            <1>     shr rbx, 8
   852 00003CB7 EB06                <1>     jmp short .dpfb21
   853                              <1> .dpfb20:
   854 00003CB9 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   855 00003CBB 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   856                              <1> .dpfb21:
   857 00003CBF B402                <1>     mov ah, 02h
   858 00003CC1 CD21                <1>     int 21h
   859 00003CC3 FFCD                <1>     dec ebp
   860 00003CC5 75E2                <1>     jnz .dpfb2
   861                              <1>     return
    13                              <2> %%_ret:
    14 00003CC7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   862                              <1> 
   863                              <1> getDecimalWord:
   864                              <1> ;Works on MAX A dword in eax
   865                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   866 00003CC8 31C9                <1>     xor ecx, ecx
   867 00003CCA 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   868 00003CCC BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   869                              <1> .dpfb0:
   870 00003CD1 FFC5                <1>     inc ebp
   871 00003CD3 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   872 00003CD7 31D2                <1>     xor edx, edx
   873 00003CD9 48F7F3              <1>     div rbx
   874 00003CDC 80C230              <1>     add dl, '0'
   875 00003CDF 80FA39              <1>     cmp dl, '9'
   876 00003CE2 7603                <1>     jbe .dpfb1
   877 00003CE4 80C207              <1>     add dl, 'A'-'0'-10
   878                              <1> .dpfb1:
   879 00003CE7 88D1                <1>     mov cl, dl    ;Save remainder byte
   880 00003CE9 4885C0              <1>     test rax, rax
   881 00003CEC 75E3                <1>     jnz .dpfb0
   882                              <1>     return
    13                              <2> %%_ret:
    14 00003CEE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   883                              <1> getByte:
   884                              <1> ;Indicates if the number obtained is larger than a byte by setting CF
   885 00003CEF E807000000          <1>     call getNum
   886 00003CF4 3D00010000          <1>     cmp eax, 100h
   887 00003CF9 F5                  <1>     cmc
   888                              <1>     return
    13                              <2> %%_ret:
    14 00003CFA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   889                              <1> getNum:
   890                              <1> ;Gets a number from a command line.
   891                              <1> ;Input: rsi -> String to get number from
   892                              <1> ;Output: rsi -> Char which terminated the accumulation
   893                              <1> ;        eax = Value of the string. May overflow if we read more than 9 chars...
   894 00003CFB 51                  <1>     push rcx
   895 00003CFC 31C9                <1>     xor ecx, ecx    ;Start with a value of zero
   896                              <1> .lp:
   897 00003CFE AC                  <1>     lodsb
   898 00003CFF 3C30                <1>     cmp al, "0"
   899 00003D01 7210                <1>     jb .exit
   900 00003D03 3C39                <1>     cmp al, "9"
   901 00003D05 770C                <1>     ja .exit
   902 00003D07 2C30                <1>     sub al, "0"                     ;Convert to binary 
   903 00003D09 678D0C89            <1>     lea ecx, qword [4*ecx + ecx]    ;5*rcx
   904 00003D0D D1E1                <1>     shl ecx, 1                      ;2*(5*rcx)
   905 00003D0F 01C1                <1>     add ecx, eax
   906 00003D11 EBEB                <1>     jmp short .lp   ;Get next digit
   907                              <1> .exit:
   908 00003D13 89C8                <1>     mov eax, ecx
   909 00003D15 59                  <1>     pop rcx
   910 00003D16 48FFCE              <1>     dec rsi
   911                              <1>     return
    13                              <2> %%_ret:
    14 00003D19 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   912                              <1> 
   913                              <1> 
   914                              <1> freezePC:
   915 00003D1A 488D15A6D1FFFF      <1>     lea rdx, memBad1
   916 00003D21 B409                <1>     mov ah, 09h
   917 00003D23 CD21                <1>     int 21h
   918                              <1> .altEP:
   919 00003D25 488D15C4D1FFFF      <1>     lea rdx, memBad3
   920 00003D2C B409                <1>     mov ah, 09h
   921 00003D2E CD21                <1>     int 21h
   922                              <1> .lp:
   923 00003D30 F390                <1>     pause
   924 00003D32 F4                  <1>     hlt
   925 00003D33 EBFB                <1>     jmp short .lp
   926                              <1> 
   927                              <1> setDTA:
   928 00003D35 50                  <1>     push rax
   929 00003D36 52                  <1>     push rdx
   930 00003D37 488D152CC4FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   931 00003D3E B8001A0000          <1>     mov eax, 1A00h
   932 00003D43 CD21                <1>     int 21h
   933 00003D45 5A                  <1>     pop rdx
   934 00003D46 58                  <1>     pop rax
   935                              <1>     return
    13                              <2> %%_ret:
    14 00003D47 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   936                              <1> 
   937                              <1> getDTA:
   938 00003D48 488D151BC4FFFF      <1>     lea rdx, cmdFFBlock
   939                              <1>     return
    13                              <2> %%_ret:
    14 00003D4F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   940                              <1> 
   941                              <1> resetIDTentries:
   942                              <1> ;Resets the IDT entries
   943 00003D50 488D1591010000      <1>     lea rdx, critErrorHandler
   944 00003D57 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
   945 00003D5B B824250000          <1>     mov eax, 2524h
   946 00003D60 CD21                <1>     int 21h
   947 00003D62 488D1527040000      <1>     lea rdx, int23h
   948 00003D69 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
   949 00003D6D B823250000          <1>     mov eax, 2523h
   950 00003D72 CD21                <1>     int 21h
   951 00003D74 488D1557D6FFFF      <1>     lea rdx, appRet
   952 00003D7B 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
   953 00003D7F B822250000          <1>     mov eax, 2522h
   954 00003D84 CD21                <1>     int 21h
   955                              <1>     return
    13                              <2> %%_ret:
    14 00003D86 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   956                              <1> 
   957                              <1> ;-------------------------------
   958                              <1> ; Environment utility functions
   959                              <1> ;-------------------------------
   960                              <1> 
   961                              <1> cmpEnvVar:
   962                              <1> ;Checks that we have found the environment variable we are looking for.
   963                              <1> ;Input: rsi -> Environment var to verify the name of
   964                              <1> ;       rdi -> Environment var name to compare against
   965                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
   966 00003D87 56                  <1>     push rsi
   967 00003D88 57                  <1>     push rdi
   968 00003D89 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs
   969                              <1> .lp:
   970 00003D8C AC                  <1>     lodsb               ;Pick up from user string
   971 00003D8D E806FDFFFF          <1>     call ucChar         ;Upper case it!
   972 00003D92 3807                <1>     cmp byte [rdi], al  
   973 00003D94 7509                <1>     jne .exit
   974 00003D96 3C3D                <1>     cmp al, "="         ;Are we at the end?
   975 00003D98 7405                <1>     je .exit
   976 00003D9A 48FFC7              <1>     inc rdi
   977 00003D9D EBED                <1>     jmp short .lp
   978                              <1> .exit:
   979 00003D9F 5F                  <1>     pop rdi
   980 00003DA0 5E                  <1>     pop rsi
   981                              <1>     return
    13                              <2> %%_ret:
    14 00003DA1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   982                              <1> 
   983                              <1> checkEnvGoodAndGet:
   984                              <1> ;Gets the env ptr and checks that it is double null terminated.
   985                              <1> ;Output:
   986                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
   987                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
   988                              <1> ;           rsi -> Environment pointer
   989 00003DA2 50                  <1>     push rax
   990 00003DA3 51                  <1>     push rcx
   991 00003DA4 57                  <1>     push rdi
   992 00003DA5 4150                <1>     push r8
   993 00003DA7 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
   994 00003DAB 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
   995 00003DAE 741A                <1>     jz .badExit
   996 00003DB0 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
   997 00003DB3 C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
   998                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
   999 00003DB6 31C0                <1>     xor eax, eax
  1000                              <1> .pathNulScan:
  1001 00003DB8 F2AE                <1>     repne scasb
  1002 00003DBA 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
  1003 00003DBC 740C                <1>     jz .badExit
  1004 00003DBE 3807                <1>     cmp byte [rdi], al  ;Is char two null?
  1005 00003DC0 75F6                <1>     jne .pathNulScan    ;If not, keep searching
  1006 00003DC2 31C0                <1>     xor eax, eax
  1007 00003DC4 FFC0                <1>     inc eax ;Clear the ZF
  1008 00003DC6 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
  1009                              <1> .badExit:
  1010 00003DCA 4158                <1>     pop r8
  1011 00003DCC 5F                  <1>     pop rdi
  1012 00003DCD 59                  <1>     pop rcx
  1013 00003DCE 58                  <1>     pop rax
  1014                              <1>     return
    13                              <2> %%_ret:
    14 00003DCF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1015                              <1> 
  1016                              <1> 
  1017                              <1> findEnvSpace:
  1018                              <1> ;Searches the environment for space, returns a pointer to the start of the 
  1019                              <1> ; free space in the pointer and a count of free space in the environment.
  1020                              <1> ;If count is zero, pointer is not to be used.
  1021                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
  1022 00003DD0 31C9                <1>     xor ecx, ecx
  1023 00003DD2 31C0                <1>     xor eax, eax    ;Clear eax too
  1024 00003DD4 51                  <1>     push rcx
  1025 00003DD5 E8C8FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
  1026 00003DDA 59                  <1>     pop rcx
  1027                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003DDB 74(CF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1028 00003DDD 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
  1029 00003DE1 FFC9                <1>     dec ecx ;Make into a large counter
  1030 00003DE3 4889F7              <1>     mov rdi, rsi    
  1031                              <1> .endsearch:
  1032 00003DE6 F2AE                <1>     repne scasb ;Scan
  1033 00003DE8 803F00              <1>     cmp byte [rdi], 0
  1034 00003DEB 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
  1035                              <1>     ;Here we are at the end of the environment
  1036 00003DED F7D9                <1>     neg ecx
  1037 00003DEF FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
  1038 00003DF1 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
  1039 00003DF4 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
  1040 00003DF7 29C8                <1>     sub eax, ecx
  1041 00003DF9 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
  1042                              <1>     return
    13                              <2> %%_ret:
    14 00003DFB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1043                              <1> 
  1044                              <1> searchForEnvVar:
  1045                              <1> ;Gets the environment, and scans it for a string with the var specified.
  1046                              <1> ;Input: rdi -> Var name to look for.
  1047                              <1> ;Returns: CF=NC: rsi -> Env var in env.
  1048 00003DFC 57                  <1>     push rdi
  1049 00003DFD 51                  <1>     push rcx
  1050 00003DFE 52                  <1>     push rdx
  1051 00003DFF 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1052 00003E03 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
  1053                              <1> .varLp:
  1054 00003E06 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
  1055 00003E09 E879FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1056 00003E0E 7416                <1>     je .varFound
  1057 00003E10 31C0                <1>     xor eax, eax        ;Search for a null
  1058 00003E12 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1059 00003E15 B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1060 00003E1A F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1061 00003E1C 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1062 00003E1E 7405                <1>     je .varNotFound     ;If second null, no more env to search!
  1063 00003E20 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1064 00003E23 EBE1                <1>     jmp short .varLp    ;And scan again!
  1065                              <1> .varNotFound:
  1066 00003E25 F9                  <1>     stc
  1067                              <1> .varFound:
  1068 00003E26 59                  <1>     pop rcx
  1069 00003E27 5A                  <1>     pop rdx
  1070 00003E28 5F                  <1>     pop rdi
  1071                              <1>     return
    13                              <2> %%_ret:
    14 00003E29 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1072                              <1> 
  1073                              <1> envFree:
  1074                              <1> ;Frees a variable from the environment, pulls the strings behind it up
  1075                              <1> ; zeros the rest of the environment, and returns a pointer to the first
  1076                              <1> ; free byte of the environment!
  1077                              <1> ;Input: rsi -> Variable to free.
  1078                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
  1079                              <1> ;        ecx = Number of free bytes in env
  1080 00003E2A 4889F7              <1>     mov rdi, rsi
  1081 00003E2D 31C0                <1>     xor eax, eax
  1082                              <1> .freeLp:
  1083 00003E2F 803F00              <1>     cmp byte [rdi], 0
  1084 00003E32 7403                <1>     je .exitLp
  1085 00003E34 AA                  <1>     stosb
  1086 00003E35 EBF8                <1>     jmp short .freeLp
  1087                              <1> .exitLp:
  1088                              <1> ;rdi points to the terminating null of the var we just deleted
  1089                              <1> ;rsi points to the start of the free space
  1090 00003E37 4887F7              <1>     xchg rsi, rdi   ;Swap em!
  1091 00003E3A 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
  1092 00003E3F 7504                <1>     jne .prepPullup
  1093 00003E41 31C0                <1>     xor eax, eax
  1094 00003E43 EB0E                <1>     jmp short .cleanEnv
  1095                              <1> .prepPullup:
  1096 00003E45 48FFC6              <1>     inc rsi         ;Go past the terminating null!
  1097                              <1> .pullUp:
  1098 00003E48 AC                  <1>     lodsb
  1099 00003E49 AA                  <1>     stosb
  1100 00003E4A 84C0                <1>     test al, al ;Did we pick up a zero
  1101 00003E4C 75FA                <1>     jne .pullUp ;If not, keep copying
  1102 00003E4E 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
  1103 00003E51 75F5                <1>     jne .pullUp
  1104                              <1> ;We are at the end of the copy!
  1105                              <1> .cleanEnv:
  1106 00003E53 AA                  <1>     stosb   ;Store the famous second null
  1107 00003E54 48FFCF              <1>     dec rdi ;without incrementing it!!
  1108 00003E57 E807000000          <1>     call getFreeSpace
  1109 00003E5C 31C0                <1>     xor eax, eax
  1110 00003E5E 51                  <1>     push rcx
  1111 00003E5F F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
  1112 00003E61 59                  <1>     pop rcx
  1113                              <1>     return
    13                              <2> %%_ret:
    14 00003E62 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1114                              <1> 
  1115                              <1> getFreeSpace:
  1116                              <1> ;Output: ecx = Number of free bytes in the environment block
  1117 00003E63 56                  <1>     push rsi
  1118 00003E64 57                  <1>     push rdi
  1119 00003E65 E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
  1120 00003E6A 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1121 00003E6E 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
  1122 00003E71 E805000000          <1>     call getEnvSize ;Get total block size
  1123 00003E76 29F9                <1>     sub ecx, edi    ;Get difference!
  1124 00003E78 5F                  <1>     pop rdi
  1125 00003E79 5E                  <1>     pop rsi
  1126                              <1>     return
    13                              <2> %%_ret:
    14 00003E7A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1127                              <1> 
  1128                              <1> getEnvSize:
  1129                              <1> ;Gets the number of bytes in the environment allocation
  1130                              <1> ;Output: ecx = Number of bytes in the environment!
  1131 00003E7B 53                  <1>     push rbx
  1132 00003E7C 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
  1133 00003E80 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
  1134 00003E83 C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
  1135 00003E86 5B                  <1>     pop rbx
  1136                              <1>     return
    13                              <2> %%_ret:
    14 00003E87 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1137                              <1> 
  1138                              <1> getPtrToEndOfEnv:
  1139                              <1> ;Gets ptr to end of the environment
  1140                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
  1141 00003E88 50                  <1>     push rax
  1142 00003E89 51                  <1>     push rcx
  1143 00003E8A 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
  1144 00003E8E 31C0                <1>     xor eax, eax
  1145 00003E90 31C9                <1>     xor ecx, ecx
  1146 00003E92 FFC9                <1>     dec ecx
  1147                              <1> .lp:
  1148 00003E94 F2AE                <1>     repne scasb
  1149 00003E96 3807                <1>     cmp byte [rdi], al
  1150 00003E98 75FA                <1>     jne .lp
  1151 00003E9A 59                  <1>     pop rcx
  1152 00003E9B 58                  <1>     pop rax
  1153                              <1>     return
    13                              <2> %%_ret:
    14 00003E9C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1154                              <1> 
  1155                              <1> growEnvBlock:
  1156                              <1> ;Attempts to grow the environment to store the new string. Will clean the
  1157                              <1> ; newly allocated 160 byte block of the environment.
  1158                              <1> ;Returns:   CF=NC - Environment grown ok!
  1159                              <1> ;           CF=CY & ZF=ZE - Environment at max size
  1160                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
  1161 00003E9D 50                  <1>     push rax
  1162 00003E9E 53                  <1>     push rbx
  1163 00003E9F 51                  <1>     push rcx
  1164 00003EA0 56                  <1>     push rsi
  1165 00003EA1 57                  <1>     push rdi
  1166 00003EA2 E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
  1167 00003EA7 E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
  1168 00003EAC 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1169 00003EB0 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
  1170 00003EB3 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
  1171 00003EB9 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
  1172 00003EBF 7321                <1>     jae .tooLarge
  1173                              <1>     ;Here ZF must be NZ.
  1174 00003EC1 4150                <1>     push r8
  1175 00003EC3 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
  1176 00003EC7 B8004A0000          <1>     mov eax, 4A00h
  1177 00003ECC CD21                <1>     int 21h
  1178 00003ECE 4158                <1>     pop r8
  1179 00003ED0 720A                <1>     jc .exit
  1180                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1181                              <1>     ; so we add 160 zeros to the count of bytes
  1182 00003ED2 81C1A0000000        <1>     add ecx, 0A0h
  1183 00003ED8 31C0                <1>     xor eax, eax
  1184 00003EDA F3AA                <1>     rep stosb
  1185                              <1> .exit:
  1186 00003EDC 5F                  <1>     pop rdi
  1187 00003EDD 5E                  <1>     pop rsi
  1188 00003EDE 59                  <1>     pop rcx
  1189 00003EDF 5B                  <1>     pop rbx
  1190 00003EE0 58                  <1>     pop rax
  1191                              <1>     return
    13                              <2> %%_ret:
    14 00003EE1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1192                              <1> .tooLarge:
  1193 00003EE2 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1194 00003EE5 F9                  <1>     stc             ;Set CF
  1195 00003EE6 EBF4                <1>     jmp short .exit
    19                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00003EE8 53                  <1>     push rbx
    25 00003EE9 51                  <1>     push rcx
    26 00003EEA 52                  <1>     push rdx
    27 00003EEB 57                  <1>     push rdi
    28 00003EEC 56                  <1>     push rsi
    29 00003EED E8D1020000          <1>     call errSwapHdls
    30 00003EF2 FC                  <1>     cld         ;Make String ops go forward
    31 00003EF3 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00003EF6 488D156DCAFFFF      <1>     lea rdx, crlf
    33 00003EFD E878F9FFFF          <1>     call printString
    34                              <1> 
    35 00003F02 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    36 00003F08 B90C000000          <1>     mov ecx, 0Ch
    37 00003F0D 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    38 00003F0F 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    39 00003F12 480FB7FF            <1>     movzx rdi, di
    40 00003F16 4889FA              <1>     mov rdx, rdi    ;Copy error code
    41 00003F19 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    42 00003F1D 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    43 00003F20 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    44 00003F23 488D1535010000      <1>     lea rdx, qword [.errorMsgTable]
    45 00003F2A 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    46 00003F2E E847F9FFFF          <1>     call printString     ;Call DOS to print first part of message
    47                              <1> 
    48 00003F33 488D1516020000      <1>     lea rdx, qword [.readmsg]
    49 00003F3A 488D3D1E020000      <1>     lea rdi, qword [.writemsg]
    50 00003F41 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    51 00003F44 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    52 00003F48 E82DF9FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
    53                              <1> 
    54 00003F4D F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    55 00003F50 0F85EF000000        <1>     jnz .charError
    56                              <1> ;Disk error continues here
    57 00003F56 488D15EC010000      <1>     lea rdx, qword [.drive] ;Drive message
    58 00003F5D E818F9FFFF          <1>     call printString
    59 00003F62 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    60 00003F64 80C241              <1>     add dl, "A" ;Add ASCII code
    61 00003F67 B402                <1>     mov ah, 02h ;Print char in dl
    62 00003F69 CD21                <1>     int 21h
    63                              <1> .userInput:
    64 00003F6B E803F9FFFF          <1>     call printCRLF  ;Print new line
    65                              <1> ;Abort, Retry, Ignore, Fail is word order
    66                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    67                              <1> .userAbort:
    68                              <1> ;Abort is always an option
    69 00003F70 488D15F7010000      <1>     lea rdx, qword [.abortmsg]
    70 00003F77 E8FEF8FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
    71                              <1> .userRetry:
    72 00003F7C F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    73 00003F7F 7418                <1>     jz .userIgnore    ;If clear, dont print message
    74 00003F81 488D15FE010000      <1>     lea rdx, qword [.betweenMsg]
    75 00003F88 E8EDF8FFFF          <1>     call printString
    76 00003F8D 488D15E7010000      <1>     lea rdx, qword [.retrymsg]
    77 00003F94 E8E1F8FFFF          <1>     call printString
    78                              <1> .userIgnore:
    79 00003F99 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    80 00003F9C 7418                <1>     jz .userFail
    81 00003F9E 488D15E1010000      <1>     lea rdx, qword [.betweenMsg]
    82 00003FA5 E8D0F8FFFF          <1>     call printString
    83 00003FAA 488D15C3010000      <1>     lea rdx, qword [.ignoremsg]
    84 00003FB1 E8C4F8FFFF          <1>     call printString
    85                              <1> .userFail:
    86 00003FB6 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    87 00003FB9 7418                <1>     jz .userMsgEnd
    88 00003FBB 488D15C4010000      <1>     lea rdx, qword [.betweenMsg]
    89 00003FC2 E8B3F8FFFF          <1>     call printString
    90 00003FC7 488D15B3010000      <1>     lea rdx, qword [.failmsg]
    91 00003FCE E8A7F8FFFF          <1>     call printString
    92                              <1> .userMsgEnd:
    93 00003FD3 488D15AF010000      <1>     lea rdx, qword [.endMsg]
    94 00003FDA E89BF8FFFF          <1>     call printString
    95                              <1> ;Get user input now 
    96 00003FDF 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
    97 00003FE1 488D3DA4010000      <1>     lea rdi, qword [.responses] ;Go to start of string
    98 00003FE8 B8010C0000          <1>     mov eax, 0C01h ;Flush and get STDIN without Console Echo
    99 00003FED CD21                <1>     int 21h ;Get char in al
   100 00003FEF 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   101 00003FF1 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   102 00003FF3 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   103                              <1> .uip1:
   104 00003FF5 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   105 00003FF6 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   106 00003FF8 FFC1                <1>     inc ecx
   107 00003FFA 81F904000000        <1>     cmp ecx, 4
   108 00004000 75F3                <1>     jne .uip1
   109 00004002 E964FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   110                              <1> .validInput:
   111 00004007 E867F8FFFF          <1>     call printCRLF   ;Note the input was accepted
   112 0000400C 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   113                              <1> ;Now check if the input is permitted
   114 0000400E 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   115 00004010 7427                <1>     je .cehExit
   116 00004012 84C0                <1>     test al, al ;Check if 0 => Ignore
   117 00004014 740F                <1>     je .viIgnore
   118 00004016 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   119 00004018 7416                <1>     je .viRetry
   120                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   121 0000401A F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   122 0000401D 0F8448FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   123 00004023 EB14                <1>     jmp short .cehExit
   124                              <1> .viIgnore:
   125 00004025 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   126 00004028 0F843DFFFFFF        <1>     jz .userInput
   127 0000402E EB09                <1>     jmp short .cehExit
   128                              <1> .viRetry:
   129 00004030 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   130 00004033 0F8432FFFFFF        <1>     jz .userInput
   131                              <1> .cehExit:
   132 00004039 E8A2010000          <1>     call errRetHdls
   133 0000403E 5E                  <1>     pop rsi
   134 0000403F 5F                  <1>     pop rdi
   135 00004040 5A                  <1>     pop rdx
   136 00004041 59                  <1>     pop rcx
   137 00004042 5B                  <1>     pop rbx
   138 00004043 48CF                <1>     iretq
   139                              <1> .charError:
   140 00004045 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   141 0000404A 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   142                              <1> .ce1:
   143 00004051 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   144 00004052 88C2                <1>     mov dl, al  ;Move char into dl
   145 00004054 B402                <1>     mov ah, 02h
   146 00004056 CD21                <1>     int 21h ;Print char
   147 00004058 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   148 0000405A E90CFFFFFF          <1>     jmp .userInput
   149                              <1> 
   150                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   151 0000405F 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   151 00004068 746563742024202020  <1>
   152 00004071 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   152 0000407A 6E6974202420202020  <1>
   153 00004083 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   153 0000408C 202420202020202020  <1>
   154 00004095 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   154 0000409E 6F6D6D616E64202420  <1>
   155 000040A7 446174612024202020- <1>             db "Data $            "       ;Error 4
   155 000040B0 202020202020202020  <1>
   156 000040B9 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   156 000040C2 737420242020202020  <1>
   157 000040CB 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   157 000040D4 202020202020202020  <1>
   158 000040DD 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   158 000040E6 656469612024202020  <1>
   159 000040EF 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   159 000040F8 7420466F756E642024  <1>
   160 00004101 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   160 0000410A 706572202420202020  <1>
   161 00004113 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   161 0000411C 6C7420242020202020  <1>
   162 00004125 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   162 0000412E 742024202020202020  <1>
   163 00004137 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   163 00004140 61696C757265202420  <1>
   164                              <1> 
   165 00004149 64726976652024      <1> .drive      db "drive $"
   166 00004150 6572726F7220726561- <1> .readmsg    db "error reading $"
   166 00004159 64696E672024        <1>
   167 0000415F 6572726F7220777269- <1> .writemsg   db "error writing $"
   167 00004168 74696E672024        <1>
   168 0000416E 41626F727424        <1> .abortmsg   db "Abort$" 
   169 00004174 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   170 0000417B 526574727924        <1> .retrymsg   db "Retry$"
   171 00004181 4661696C24          <1> .failmsg    db "Fail$"
   172 00004186 2C2024              <1> .betweenMsg db ", $"
   173 00004189 3F2024              <1> .endMsg     db "? $"
   174 0000418C 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   175                              <1> 
   176                              <1> int23h:
   177 00004190 F60594BEFFFFFF      <1>     test byte [permaSwitch], -1
   178 00004197 7516                <1>     jnz .noJug   ;If this is non-zero, just exit as normal
   179                              <1>     ;Else, we juggle parent PSP's
   180 00004199 50                  <1>     push rax
   181 0000419A 53                  <1>     push rbx
   182 0000419B 488B0575BEFFFF      <1>     mov rax, qword [realParent]
   183 000041A2 488B1D66BEFFFF      <1>     mov rbx, qword [pspPtr]
   184 000041A9 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   185 000041AD 5B                  <1>     pop rbx
   186 000041AE 58                  <1>     pop rax
   187                              <1> .noJug:
   188 000041AF 66813DE7BEFFFFFFFF  <1>     cmp word [errHdls], -1  ;If these are not -1, return to normal!
   189 000041B8 7405                <1>     je .exit
   190 000041BA E821000000          <1>     call errRetHdls 
   191                              <1> .exit:
   192 000041BF F9                  <1>     stc     ;Set CF to kill the task
   193 000041C0 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
   194                              <1> 
   195                              <1> errSwapHdls:
   196                              <1> ;Swaps STDIO to STDERR
   197                              <1> ;Start by tmporarily moving the stderr handler into stdio
   198                              <1> ;In principle dangerous, but since we cannot exit our routine, its oki.
   199 000041C3 50                  <1>     push rax
   200 000041C4 53                  <1>     push rbx
   201 000041C5 E833000000          <1>     call getJftPtr  ;Get the jft pointer into rbx. Saves rax
   202 000041CA 0FB703              <1>     movzx eax, word [rbx]       ;Get STDIO into ax
   203 000041CD 668905CBBEFFFF      <1>     mov word [errHdls], ax      ;Save em
   204 000041D4 0FB64302            <1>     movzx eax, byte [rbx + 2]   ;Now get the STDERR SFTndx in al
   205 000041D8 88C4                <1>     mov ah, al                  ;Move STDERR hdl into ah too 
   206 000041DA 668903              <1>     mov word [rbx], ax          ;And set STDIO to STDERR
   207 000041DD 5B                  <1>     pop rbx
   208 000041DE 58                  <1>     pop rax
   209                              <1>     return
    13                              <2> %%_ret:
    14 000041DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   210                              <1> 
   211                              <1> errRetHdls:
   212                              <1> ;Returns STDIO from STDERR.
   213 000041E0 50                  <1>     push rax
   214 000041E1 53                  <1>     push rbx
   215 000041E2 E816000000          <1>     call getJftPtr  ;Get ptr in rbx. Preserves rax.
   216 000041E7 0FB705B1BEFFFF      <1>     movzx eax, word [errHdls]
   217 000041EE 66C705A8BEFFFFFFFF  <1>     mov word [errHdls], -1  ;Reset values
   218 000041F7 668903              <1>     mov word [rbx], ax      ;Store the handle word back
   219 000041FA 5B                  <1>     pop rbx
   220 000041FB 58                  <1>     pop rax
   221                              <1>     return
    13                              <2> %%_ret:
    14 000041FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   222                              <1> 
   223                              <1> getJftPtr:
   224                              <1> ;Preserves all registers except rbx.
   225                              <1> ;Output: rbx -> JFT of current task
   226 000041FD 50                  <1>     push rax        ;Save rax
   227 000041FE B800510000          <1>     mov eax, 5100h  ;Get current PSP in rbx
   228 00004203 CD21                <1>     int 21h
   229 00004205 58                  <1>     pop rax
   230 00004206 66817B4E1400        <1>     cmp word [rbx + psp.jftSize], 20    ;If >20, pspjft is ptr to real jft
   231 0000420C 7605                <1>     jbe .pspJftExit
   232 0000420E 488B5B2A            <1>     mov rbx, qword [rbx + psp.externalJFTPtr]   ;Get ptr to jft from the psp
   233                              <1>     return
    13                              <2> %%_ret:
    14 00004212 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   234                              <1> .pspJftExit:
   235 00004213 488D5B2A            <1>     lea rbx, qword [rbx + psp.jobFileTbl]       ;Make into a ptr to jft in psp
   236                              <1>     return
    13                              <2> %%_ret:
    14 00004217 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                                  endOfAlloc: ;End of alloc
    21                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    22                                  Segment transient align=1 follows=.data
    23                                  ;This segment always gets ejected post load
    24                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D15D7010000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    15 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    16 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    17 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    18                              <1> ;Setup Int 22h, Int 23h and Int 24h
    19 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    20 0000002F 488905(2C000000)    <1>     mov qword [parentInt22], rax
    21 00000036 E8(503D0000)        <1>     call resetIDTentries
    22                              <1> ;Get a pointer to DOS Sysvars
    23 0000003B B452                <1>     mov ah, 52h ;Get sysvars
    24 0000003D CD21                <1>     int 21h
    25 0000003F 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    26                              <1> ;Call for simple internationalisation data
    27 00000046 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    28 0000004B CD21                <1>     int 21h
    29 0000004D 3CFF                <1>     cmp al, -1
    30 0000004F 7412                <1>     je .skipSwitch
    31 00000051 8815(2A000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    32 00000057 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    33 0000005A 7507                <1>     jne .skipSwitch
    34 0000005C C605(29000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    35                              <1> .skipSwitch:
    36 00000063 B800380000          <1>     mov eax, 3800h  ;Get current country data
    37 00000068 488D15(34000000)    <1>     lea rdx, ctryData
    38 0000006F CD21                <1>     int 21h ;Write the data to the internal country table
    39                              <1> ;Now determine if this is the master copy of COMMAND.COM
    40                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    41 00000071 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    42 00000076 CD21                <1>     int 21h
    43 00000078 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    44 0000007B B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    45 00000080 CD21                <1>     int 21h
    46 00000082 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    47 00000085 7574                <1>     jne .skipMaster
    48                              <1> ;Ok so we are master command.com
    49                              <1> ;Now make myself the real parent
    50 00000087 C605(2B000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    51 0000008E 4C8905(17000000)    <1>     mov qword [realParent], r8
    52                              <1> ;Set current Drive in COMSPEC
    53 00000095 B800190000          <1>     mov eax, 1900h ;Get current Drive
    54 0000009A CD21                <1>     int 21h
    55 0000009C 0441                <1>     add al, "A"
    56 0000009E 8805(700F0000)      <1>     mov byte [comspecEvar.cspec], al
    57                              <1> ;Set Int 2Eh up
    58 000000A4 488D15(55190000)    <1>     lea rdx, int2Eh
    59 000000AB B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    60 000000B0 CD21                <1>     int 21h
    61                              <1> ;Now, open and parse AUTOEXEC.BAT. Build new Master Environment here.
    62                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    63 000000B2 BB0A000000          <1>     mov ebx, 10 ;Allocate 160 bytes
    64 000000B7 B800480000          <1>     mov eax, 4800h
    65 000000BC CD21                <1>     int 21h
    66 000000BE 0F824FFFFFFF        <1>     jc .exitBad
    67                              <1> ;Set master environment as mine
    68 000000C4 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    69 000000C8 488D35(680F0000)    <1>     lea rsi, masterEnv
    70 000000CF 4889C7              <1>     mov rdi, rax
    71 000000D2 B91E000000          <1>     mov ecx, menv_len
    72 000000D7 F3A4                <1>     rep movsb   ;Copy the chars over!
    73                              <1> 
    74 000000D9 488D15(6A090000)    <1>     lea rdx, crlf
    75 000000E0 B409                <1>     mov ah, 09h
    76 000000E2 CD21                <1>     int 21h
    77 000000E4 E8(3E250000)        <1>     call time
    78 000000E9 E8(90230000)        <1>     call date
    79 000000EE 488D15(6A090000)    <1>     lea rdx, crlf
    80 000000F5 B409                <1>     mov ah, 09h
    81 000000F7 CD21                <1>     int 21h
    82 000000F9 EB2E                <1>     jmp short .printInit
    83                              <1> .skipMaster:    
    84                              <1> ;We now search for the master environment!!
    85                              <1>     ;Walk the parentPSP chain until we find a PSP which is its own
    86                              <1>     ; parent. This is the previous master command interpreter! This means
    87                              <1>     ; that non-master COMMAND.COM instances are not their own parents! We 
    88                              <1>     ; then set our environment ptr in the PSP to the master environment.
    89 000000FB 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
    90 00000102 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
    91 0000010A 0FB605(2A000000)    <1>     movzx eax, byte [switchChar]
    92 00000111 F2AE                <1>     repne scasb
    93 00000113 67E313              <1>     jecxz .printInit
    94 00000116 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
    95 00000119 E8(983A0000)        <1>     call ucChar
    96 0000011E 3C50                <1>     cmp al, "P" ;Is it permanent switch?
    97 00000120 7507                <1>     jne .printInit
    98 00000122 C605(2B000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    99                              <1> .printInit:
   100 00000129 488D1D(18420000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
   101                              <1> ;Finish by printing INIT string.
   102 00000130 53                  <1>     push rbx
   103 00000131 488D153A000000      <1>     lea rdx, initString
   104 00000138 B409                <1>     mov ah, 09h
   105 0000013A CD21                <1>     int 21h ;Print init string
   106 0000013C E8(7C2E0000)        <1>     call version.printVersionNumber
   107 00000141 488D1560000000      <1>     lea rdx, initString2
   108 00000148 B409                <1>     mov ah, 09h
   109 0000014A CD21                <1>     int 21h ;Print init string
   110 0000014C 5B                  <1>     pop rbx
   111                              <1>     ;Now we add the stack to the alloc and paragraph align
   112 0000014D 4881C340060000      <1>     add rbx, stackSize
   113 00000154 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   114 0000015B 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   115 0000015F 48C1E304            <1>     shl rbx, 4
   116 00000163 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   117 00000166 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   118 0000016D E9(860F0000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   119                              <1> ;Loader Data here
   120                              <1> initString: 
   121 00000172 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   121 0000017B 66696320436F6D7075- <1>
   121 00000184 746572205265736561- <1>
   121 0000018D 726368285229205343- <1>
   121 00000196 502F444F5328522920- <1>
   121 0000019F 56657273696F6E2024  <1>
   122                              <1> initString2:
   123 000001A8 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",CR,LF,"$"
   123 000001B1 202020284329436F70- <1>
   123 000001BA 797269676874205363- <1>
   123 000001C3 69656E746966696320- <1>
   123 000001CC 436F6D707574657220- <1>
   123 000001D5 526573656172636820- <1>
   123 000001DE 323032342E0D0A24    <1>
   124 000001E6 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   124 000001EF 20444F532076657273- <1>
   124 000001F8 696F6E0D0A24        <1>
    25                                  
    26                                  stackSize equ 200*8    ;200 QWORD stack
    26          ------------------       info: assembly required 1+5+2 passes

