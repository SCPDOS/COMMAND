     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (41h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> netFCBShare     equ 70h
   160                              <1> noInherit       equ 80h
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> 
   163                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 24h on disk full.
   164                              <1> ;Buffering on writes
   165                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   167                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1> readOnlyFile    equ 1h
   170                              <1> hiddenFile      equ 2h
   171                              <1> systemFile      equ 4h
   172                              <1> volumeLabel     equ 8h
   173                              <1> directoryFile   equ 10h ;Directory entry
   174                              <1> archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1> charDevFastOut  equ 10h ;If set, device supports Int 29h
   182                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   183                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   185                              <1> devCharDev      equ 80h ;If set, it is a char device!
   186                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   190                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1>  
   192                              <1> ;------------------------------------------------------------------------;
   193                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   194                              <1> ; to an internal buffer, and then copying it to the specified location
   195                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   196                              <1> ; another request for the same sector from the same device is made, so 
   197                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   198                              <1> ; size, selected according to the largest detected sector size during 
   199                              <1> ; the initial loadup.
   200                              <1> ;
   201                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   202                              <1> ;
   203                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   204                              <1> ;------------------------------------------------------------------------;
   205                              <1> 
   206                              <1> struc bufferHdr
   207 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   208 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   209 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   210 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   211 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   212 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   213 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   214 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   215 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   216                              <1>     .dataarea:             ;Points to the start of the data area
   217                              <1> endstruc
   218                              <1> ;Buffer Flag equates
   219                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   220                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   221                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   222                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   223                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   224                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   225                              <1> ;Note! A buffer is marked as referenced only when the application 
   226                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   227                              <1> ;------------------------------------------------------------------------;
   228                              <1> ; Memory control block for each memory arena
   229                              <1> ;------------------------------------------------------------------------;
   230                              <1> struc mcb
   231 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   232 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   233 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   234 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   235                              <1>     .program:
   236                              <1> endstruc
   237                              <1> ;MCB equates
   238                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   239                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   240                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   241                              <1> mcbMarkCtn      equ "M"
   242                              <1> mcbMarkEnd      equ "Z"
   243                              <1> 
   244                              <1> memFirstFit     equ 0   ;First free block goes to application
   245                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   246                              <1> memLastFit      equ 2   ;Last free block goes to application
   247                              <1> 
   248                              <1> ;Owner = Para aligned address => Owning application PSP
   249                              <1> ;...To consider...
   250                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   251                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   252                              <1> ;------------------------------------------------------------------------;
   253                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   254                              <1> ; following order, thus allowing for return values to be placed in the 
   255                              <1> ; registers by accessing the caller register stack frame.
   256                              <1> ;------------------------------------------------------------------------;
   257                              <1> struc callerFrame
   258 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   259 00000008 ????????????????    <1>     .rbx    resq 1    
   260 00000010 ????????????????    <1>     .rcx    resq 1
   261 00000018 ????????????????    <1>     .rdx    resq 1
   262 00000020 ????????????????    <1>     .rsi    resq 1
   263 00000028 ????????????????    <1>     .rdi    resq 1
   264 00000030 ????????????????    <1>     .rbp    resq 1
   265 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   266 00000040 ????????????????    <1>     .r9     resq 1
   267                              <1> ;Pushed by Processor when invoked via Interrupt
   268 00000048 ????????????????    <1>     .rip    resq 1
   269 00000050 ????????????????    <1>     .cs     resq 1
   270 00000058 ????????????????    <1>     .flags  resq 1
   271                              <1> endstruc
   272                              <1> 
   273                              <1> struc dpl
   274                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   275                              <1> ; server calls
   276 00000000 ????????????????    <1>     .rax    resq 1
   277 00000008 ????????????????    <1>     .rbx    resq 1
   278 00000010 ????????????????    <1>     .rcx    resq 1
   279 00000018 ????????????????    <1>     .rdx    resq 1
   280 00000020 ????????????????    <1>     .rsi    resq 1
   281 00000028 ????????????????    <1>     .rdi    resq 1
   282 00000030 ????????????????    <1>     .r8     resq 1
   283 00000038 ????????????????    <1>     .r9     resq 1
   284 00000040 ????????????????    <1>     .align  resq 1
   285 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   286 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   287                              <1> endstruc
   288                              <1> 
   289                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   290 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   291 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   292 00000010 ????????????????    <1>     .newSFTVal      resq 1
   293 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   294 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   295 00000028 ????????????????    <1>     .newLastdrive   resq 1
   296 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   297 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   298 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   299 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   300 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   301 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   302 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc filename
   306                              <1> ;8.3 File name struct
   307 00000000 ????????????????    <1>     .fName  resb 8
   308 00000008 ??????              <1>     .fExt   resb 3
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   312 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   313 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   314 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   315 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   316 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   317 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   318 00000016 ????                <1>     .fileTime   resw 1  ;File time
   319 00000018 ????                <1>     .fileDate   resw 1  ;File date
   320 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   321 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc psp
   325 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   326 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   327 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   328 0000000A ????????????????    <1>     .oldInt22h  resq 1  ;Int 22h pointer on overlay load
   329 00000012 ????????????????    <1>     .oldInt23h  resq 1  ;Int 23h pointer on overlay load
   330 0000001A ????????????????    <1>     .oldInt24h  resq 1  ;Int 24h pointer on overlay load
   331 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   332                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   333 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   334 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   335 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 21h
   336 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   337 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   338 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   339 0000005B ??                  <1>                 resb 1  ;Reserved byte
   340                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   341                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   342                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   343                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   344                              <1> ; always used and xtraHdlSz.
   345                              <1> ;Will need to add two SYSCALLS for future expansion:
   346                              <1> ;       1) Get Program Environment Pointer
   347                              <1> ;       2) Get Command Line arguments pointer
   348                              <1> ;The below are in the same place as in DOS.
   349                              <1>     .cmdLineArgPtr: ;Symbol for future use
   350 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   351 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   352                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   353 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   354 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   355                              <1> endstruc
   356                              <1> 
   357                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   358                              <1> 
   359                              <1> struc clkStruc
   360 00000000 ????                <1>     .dateWord   resw 1
   361 00000002 ??                  <1>     .minutes    resb 1
   362 00000003 ??                  <1>     .hours      resb 1
   363 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   364 00000005 ??                  <1>     .seconds    resb 1
   365                              <1> endstruc
   366                              <1> 
   367                              <1> struc countryStruc
   368 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   369                              <1>                         ;0 = month day year hh:mm:ss
   370                              <1>                         ;1 = day month year hh:mm:ss
   371                              <1>                         ;2 = year month day hh:mm:ss
   372 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   373 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   374 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   375 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   376 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   377 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   378                              <1>                         ;0 = Symbol leads, without space
   379                              <1>                         ;1 = Symbol follows, without space
   380                              <1>                         ;2 = Symbol leads, one space
   381                              <1>                         ;3 = Symbol follows, one space
   382                              <1>                         ;4 = Symbol replace decimal separator
   383 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   384 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   385 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   386 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   387 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   388                              <1> endstruc
   389                              <1> 
   390                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   391                              <1> ;for a space of 64Gb
   392                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   393                              <1> dosLowBase  equ 600h    ;Low load address
   394                              <1> 
   395                              <1> ;Critical Error AH bitfield equates
   396                              <1> critRead    equ 0h
   397                              <1> critWrite   equ 1h
   398                              <1> critDOS     equ 0h
   399                              <1> critFAT     equ 2h
   400                              <1> critDir     equ 4h
   401                              <1> critData    equ 6h
   402                              <1> critFailOK  equ 8h
   403                              <1> critRetryOK equ 10h
   404                              <1> critIgnorOK equ 20h
   405                              <1> critCharDev equ 80h
   406                              <1> 
   407                              <1> critIgnore  equ 0
   408                              <1> critRetry   equ 1
   409                              <1> critAbort   equ 2
   410                              <1> critFail    equ 3
   411                              <1> 
   412                              <1> ;MISC ASCII control chars
   413                              <1> NUL equ 00h ;^@         | ASCII Null
   414                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   415                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   416                              <1> BEL equ 07h ;^G         | ASCII Bell
   417                              <1> BSP equ 08h ;^H         | ASCII Backspace
   418                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   419                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   420                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   421                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   422                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   423                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   424                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   425                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   426                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   427                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   428                              <1> SPC equ 20h ;Printable  | ASCII Space
   429                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   430                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   431                              <1> 
   432                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   433                              <1> ;Extended Ascii Codes
   434                              <1> eF1     equ 3Bh ;F1 second byte
   435                              <1> eF2     equ 3Ch ;F2 second byte
   436                              <1> eF3     equ 3Dh ;F3 second byte
   437                              <1> eF4     equ 3Eh ;F4 second byte
   438                              <1> eF5     equ 3Fh ;F5 second byte
   439                              <1> eF6     equ 40h ;F6 second byte
   440                              <1> eF7     equ 41h ;F7 second byte
   441                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   442                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   443                              <1> eIns    equ 52h ;Insert second byte
   444                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   445                              <1> 
   446                              <1> ;Default Configuration for the system
   447                              <1> 
   448                              <1> buffersDefault  equ 30
   449                              <1> filesDefault    equ 20
   450                              <1> fcbsDefault     equ 4
   451                              <1> safeFcbsDeflt   equ 0
   452                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       resb 5  
    66 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   resb 1
    68 00000008 ????????????????    <1>     .filename   resb 8
    69 00000010 ??????              <1>     .fileext    resb 3
    70 00000013 ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    resb 8
    73 00000020 ??????              <1>     .newExt     resb 3
    74 00000023 ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdLineCnt  equ psp.parmList
    19                              <1> cmdLine     equ psp.progTail
    20                              <1> 
    21                              <1> 
    22                              <1> ;Struct Declarations
    23                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    24 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    25 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    26 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    27 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    28 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc execProg  ;For use with EXEC-ing a child task
    32 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    33 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    34 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    35 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    36                              <1> endstruc
    37                              <1> 
    38                              <1> ;Directory attribute equates
    39                              <1>     dirReadOnly     equ 01h
    40                              <1>     dirHidden       equ 02h
    41                              <1>     dirSystem       equ 04h
    42                              <1>     dirVolumeID     equ 08h
    43                              <1>     dirDirectory    equ 10h
    44                              <1>     dirArchive      equ 20h
    45                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    46                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    47                              <1>     ;If any of the three bits are set, then ALL three bits are set
    48                              <1>     ; in addition to whatever the user passed to search for.
    49                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    50                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    11 0000002B 5C                  <1> pathSep     db "\"  ;Default path sep
    12 0000002C 2F                  <1> switchChar  db "/"  ;Default switch char
    13 0000002D 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    14 0000002E 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    15                              <1> ;Static strings, not used in command line parsing
    16 00000036 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    16 0000003F 000000000000000000- <1>
    16 00000048 000000000000000000- <1>
    16 00000051 000000000000000000- <1>
    16 0000005A 0000                <1>
    17 0000005C 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    17 00000065 000000000000000000- <1>
    17 0000006E 000000000000000000- <1>
    17 00000077 000000000000000000- <1>
    17 00000080 000000000000000000- <1>
    17 00000089 000000000000000000- <1>
    17 00000092 000000000000000000- <1>
    17 0000009B 00000000            <1>
    18                              <1> 
    19                              <1> 
    20                              <1> cmdLineStatePtr:
    21 0000009F 0000000000000000    <1> cmdStartPtr dq 0    ;Ptr to the first char for this command (may be a space)
    22 000000A7 0000000000000000    <1> cmdEndPtr   dq 0    ;Ptr to the terminating char for this command (0Dh or |)
    23 000000AF 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    24 000000B0 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    25 000000B2 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    26                              <1> 
    27                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    28                              <1> ;These variables are valid for a SINGLE command in a command line
    29                              <1> ;Next two bytes, if set to -1, flags error
    30 000000B4 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    31 000000B5 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    32                              <1> ;                    If 2, we are redirecting output to a file, by appending
    33 000000B6 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    34 000000B8 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    35                              <1> 
    36 000000BA 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    37 000000BB 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    38 000000BC 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    39                              <1> 
    40 000000BD 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    41 000000BE 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    42 000000BF 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    43                              <1> 
    44                              <1> cmdStateL equ $ - cmdStatePtr
    45                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    46                              <1> 
    47                              <1> ;Structs and strings
    48                              <1> 
    49 000000C0 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    49 000000C9 00000000000000      <1>
    50 000000D0 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    50 000000D9 000000000000000000- <1>
    50 000000E2 000000000000000000- <1>
    50 000000EB 000000000000000000- <1>
    50 000000F4 00000000000000      <1>
    51                              <1> 
    52 000000FB 000000000000000000- <1> launchBlock db execProg_size dup (0)
    52 00000104 000000000000000000- <1>
    52 0000010D 000000000000000000- <1>
    52 00000116 0000000000          <1>
    53 0000011B 000000000000000000- <1> cmdTail     db cmdBufferL dup (0)   ;This is the tail that is passed to EXEC
    53 00000124 000000000000000000- <1>
    53 0000012D 000000000000000000- <1>
    53 00000136 000000000000000000- <1>
    53 0000013F 000000000000000000- <1>
    53 00000148 000000000000000000- <1>
    53 00000151 000000000000000000- <1>
    53 0000015A 000000000000000000- <1>
    53 00000163 000000000000000000- <1>
    53 0000016C 000000000000000000- <1>
    53 00000175 000000000000000000- <1>
    53 0000017E 000000000000000000- <1>
    53 00000187 000000000000000000- <1>
    53 00000190 000000000000000000- <1>
    53 00000199 00000000            <1>
    54                              <1> 
    55 0000019D 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    55 000001A6 000000000000000000- <1>
    55 000001AF 000000000000000000- <1>
    55 000001B8 000000000000000000- <1>
    55 000001C1 000000000000000000- <1>
    55 000001CA 000000000000000000- <1>
    55 000001D3 000000000000000000- <1>
    55 000001DC 000000000000000000- <1>
    55 000001E5 000000000000000000- <1>
    55 000001EE 000000000000000000- <1>
    55 000001F7 000000000000000000- <1>
    55 00000200 000000000000000000- <1>
    55 00000209 000000000000000000- <1>
    55 00000212 000000000000000000- <1>
    55 0000021B 00000000            <1>
    56 0000021F 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    56 00000228 000000000000000000- <1>
    56 00000231 000000000000000000- <1>
    56 0000023A 000000000000000000- <1>
    56 00000243 000000000000000000- <1>
    56 0000024C 000000000000000000- <1>
    56 00000255 000000000000000000- <1>
    56 0000025E 000000000000000000- <1>
    56 00000267 000000000000000000- <1>
    56 00000270 000000000000000000- <1>
    56 00000279 000000000000000000- <1>
    56 00000282 000000000000000000- <1>
    56 0000028B 000000000000000000- <1>
    56 00000294 000000000000000000- <1>
    56 0000029D 00000000            <1>
    57 000002A1 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    57 000002AA 000000000000000000- <1>
    57 000002B3 000000000000000000- <1>
    57 000002BC 000000000000000000- <1>
    57 000002C5 000000000000000000- <1>
    57 000002CE 000000000000000000- <1>
    57 000002D7 000000000000000000- <1>
    57 000002E0 000000000000000000- <1>
    57 000002E9 00000000000000      <1>
    58                              <1> 
    59 000002F0 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    59 000002F9 0000                <1>
    60 000002FB 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    60 00000304 00000000            <1>
    61 00000308 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    61 00000311 0000000000          <1>
    62                              <1> 
    63 00000316 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    63 0000031F 000000000000000000- <1>
    63 00000328 000000000000000000- <1>
    63 00000331 000000000000000000- <1>
    63 0000033A 000000000000000000- <1>
    63 00000343 000000000000000000- <1>
    63 0000034C 000000000000000000- <1>
    63 00000355 000000000000000000- <1>
    63 0000035E 00000000000000      <1>
    64 00000365 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    64 0000036E 000000000000000000- <1>
    64 00000377 000000000000000000- <1>
    64 00000380 000000000000000000- <1>
    64 00000389 000000000000000000- <1>
    64 00000392 000000000000000000- <1>
    64 0000039B 000000000000000000- <1>
    64 000003A4 000000000000000000- <1>
    64 000003AD 00000000000000      <1>
    65                              <1> 
    66                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    67 000003B4 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    67 000003BD 000000000000000000- <1>
    67 000003C6 000000000000000000- <1>
    67 000003CF 000000000000000000- <1>
    67 000003D8 000000000000000000- <1>
    67 000003E1 000000000000000000- <1>
    67 000003EA 000000000000000000- <1>
    67 000003F3 000000000000000000- <1>
    67 000003FC 00000000000000      <1>
    68 00000403 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    68 0000040C 000000000000000000- <1>
    68 00000415 000000000000000000- <1>
    68 0000041E 000000000000000000- <1>
    68 00000427 000000000000000000- <1>
    68 00000430 000000000000000000- <1>
    68 00000439 000000000000000000- <1>
    68 00000442 000000000000000000- <1>
    68 0000044B 00000000000000      <1>
    69                              <1> 
    70 00000452 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    71 0000045A 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    72                              <1> 
    73 00000462 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    73 0000046B 000000000000000000- <1>
    73 00000474 000000000000000000- <1>
    73 0000047D 000000000000000000- <1>
    73 00000486 000000000000000000- <1>
    73 0000048F 000000000000000000- <1>
    73 00000498 000000000000000000- <1>
    73 000004A1 000000000000000000- <1>
    73 000004AA 000000000000000000- <1>
    73 000004B3 000000000000000000- <1>
    73 000004BC 000000000000000000- <1>
    73 000004C5 000000000000000000- <1>
    73 000004CE 000000000000000000- <1>
    73 000004D7 000000000000000000- <1>
    73 000004E0 00000000            <1>
    74                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    75                              <1> ; users overtyping
    76                              <1> 
    77                              <1> ;Internal Function vars
    78                              <1> ;Dir Vars
    79 000004E4 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    80                              <1> ;                                   Bit[1] set => /P or /p specified
    81                              <1> ;                                   Bit[2] set => A file/path specified
    82 000004E5 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    83 000004E6 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    84 000004E7 00                  <1> dirDrv      db 0    ;0 based drive number to use
    85 000004E8 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
    85 000004F1 000000000000000000- <1>
    85 000004FA 000000000000000000- <1>
    85 00000503 000000000000000000- <1>
    85 0000050C 000000000000000000- <1>
    85 00000515 000000000000000000- <1>
    85 0000051E 000000000000000000- <1>
    85 00000527 000000000000000000- <1>
    85 00000530 000000000000000000- <1>
    85 00000539 000000000000000000- <1>
    85 00000542 000000000000000000- <1>
    85 0000054B 000000000000000000- <1>
    85 00000554 000000000000000000- <1>
    85 0000055D 000000000000000000- <1>
    85 00000566 00000000            <1>
    86 0000056A 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
    86 00000573 3F3F3F3F3F3F3F      <1>
    87                              <1> dirWideType equ 1
    88                              <1> dirPageType equ 2
    89                              <1> dirFileType equ 4
    90                              <1> ;Volume Vars
    91                              <1> volFcb:
    92                              <1>     istruc exFcb
    93 0000057A FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    94 0000057B 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    95 00000581 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
    96 00000582 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
    97 0000058A 3F3F3F              <1>     at exFcb.fileext,   db "???"
    98 0000058D 00000000            <1>     at exFcb.curBlock,  dd 0
    99 00000591 00<rep 15h>         <1>     iend 
   100                              <1> 
   101                              <1> ;Time/Date vars
   102 000005A6 00                  <1> td1 db 0    ;Minutes/Year
   103 000005A7 00                  <1> td2 db 0    ;Hours/Zero
   104 000005A8 00                  <1> td3 db 0    ;Hundredths/Day
   105 000005A9 00                  <1> td4 db 0    ;Seconds/Month
   106                              <1> 
   107                              <1> ;Rename/Copy Buffers
   108 000005AA 000000000000000000- <1> sourcePath  db cmdBufferL dup (0)
   108 000005B3 000000000000000000- <1>
   108 000005BC 000000000000000000- <1>
   108 000005C5 000000000000000000- <1>
   108 000005CE 000000000000000000- <1>
   108 000005D7 000000000000000000- <1>
   108 000005E0 000000000000000000- <1>
   108 000005E9 000000000000000000- <1>
   108 000005F2 000000000000000000- <1>
   108 000005FB 000000000000000000- <1>
   108 00000604 000000000000000000- <1>
   108 0000060D 000000000000000000- <1>
   108 00000616 000000000000000000- <1>
   108 0000061F 000000000000000000- <1>
   108 00000628 00000000            <1>
   109 0000062C 000000000000000000- <1> destPath    db cmdBufferL dup (0)
   109 00000635 000000000000000000- <1>
   109 0000063E 000000000000000000- <1>
   109 00000647 000000000000000000- <1>
   109 00000650 000000000000000000- <1>
   109 00000659 000000000000000000- <1>
   109 00000662 000000000000000000- <1>
   109 0000066B 000000000000000000- <1>
   109 00000674 000000000000000000- <1>
   109 0000067D 000000000000000000- <1>
   109 00000686 000000000000000000- <1>
   109 0000068F 000000000000000000- <1>
   109 00000698 000000000000000000- <1>
   109 000006A1 000000000000000000- <1>
   109 000006AA 00000000            <1>
   110                              <1> ;Copy Handles
   111 000006AE FFFF                <1> sourceHdl   dw -1
   112 000006B0 FFFF                <1> destHdl     dw -1
   113 000006B2 0000                <1> srcHdlInfo  dw 0 ;Used to save the handle device info (bit 7 Set -> Char dev)
   114                              <1> 
   115 000006B4 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   115 000006BD 000000000000000000- <1>
   115 000006C6 000000000000000000- <1>
   115 000006CF 000000000000000000- <1>
   115 000006D8 000000000000000000- <1>
   115 000006E1 000000000000000000- <1>
   115 000006EA 000000000000000000- <1>
   115 000006F3 000000000000000000- <1>
   115 000006FC 000000000000000000- <1>
   115 00000705 000000000000000000- <1>
   115 0000070E 000000000000000000- <1>
   115 00000717 000000000000000000- <1>
   115 00000720 000000000000000000- <1>
   115 00000729 000000000000000000- <1>
   115 00000732 0000                <1>
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 00000734 03444952            <1>     db 3, "DIR"
     8 00000738 E516                <1>     dw dir - startLbl
     9                              <1> 
    10 0000073A 024344              <1>     db 2, "CD"
    11 0000073D BB1B                <1>     dw chdir - startLbl
    12                              <1> 
    13 0000073F 054348444952        <1>     db 5, "CHDIR"
    14 00000745 BB1B                <1>     dw chdir - startLbl
    15                              <1> 
    16 00000747 024D44              <1>     db 2, "MD"
    17 0000074A 361C                <1>     dw mkdir - startLbl
    18                              <1> 
    19 0000074C 054D4B444952        <1>     db 5, "MKDIR"
    20 00000752 361C                <1>     dw mkdir - startLbl
    21                              <1> 
    22 00000754 025244              <1>     db 2, "RD"
    23 00000757 821C                <1>     dw rmdir - startLbl
    24                              <1> 
    25 00000759 05524D444952        <1>     db 5, "RMDIR"
    26 0000075F 821C                <1>     dw rmdir - startLbl
    27                              <1> 
    28 00000761 0344454C            <1>     db 3, "DEL"
    29 00000765 701E                <1>     dw erase - startLbl
    30                              <1> 
    31 00000767 054552415345        <1>     db 5, "ERASE"
    32 0000076D 701E                <1>     dw erase - startLbl
    33                              <1> 
    34 0000076F 0444415445          <1>     db 4, "DATE"
    35 00000774 991E                <1>     dw date - startLbl
    36                              <1> 
    37 00000776 0454494D45          <1>     db 4, "TIME"
    38 0000077B 621F                <1>     dw time - startLbl
    39                              <1> 
    40 0000077D 04434F5059          <1>     db 4, "COPY"
    41 00000782 CE1C                <1>     dw copy - startLbl
    42                              <1> 
    43 00000784 0443545459          <1>     db 4, "CTTY"
    44 00000789 FD1F                <1>     dw ctty - startLbl
    45                              <1> 
    46 0000078B 03434C53            <1>     db 3, "CLS"
    47 0000078F 9820                <1>     dw cls - startLbl
    48                              <1> 
    49 00000791 05425245414B        <1>     db 5, "BREAK"
    50 00000797 0A21                <1>     dw break - startLbl
    51                              <1> 
    52 00000799 06564552494659      <1>     db 6, "VERIFY"
    53 000007A0 8B21                <1>     dw verify - startLbl
    54                              <1> 
    55 000007A2 0652454E414D45      <1>     db 6, "RENAME"
    56 000007A9 0822                <1>     dw rename - startLbl
    57                              <1> 
    58 000007AB 044D4F5645          <1>     db 4, "MOVE"
    59 000007B0 0822                <1>     dw rename - startLbl
    60                              <1>     
    61 000007B2 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 000007BB 7B24                <1>     dw truename - startLbl
    63                              <1> 
    64 000007BD 03564552            <1>     db 3, "VER"
    65 000007C1 6126                <1>     dw version - startLbl
    66                              <1> 
    67 000007C3 03564F4C            <1>     db 3, "VOL"
    68 000007C7 A225                <1>     dw volume - startLbl
    69                              <1> 
    70 000007C9 034D454D            <1>     db 3, "MEM"
    71 000007CD A526                <1>     dw memory - startLbl
    72                              <1> 
    73 000007CF 0445584954          <1>     db 4, "EXIT"
    74 000007D4 8E28                <1>     dw exit - startLbl
    75                              <1> 
    76 000007D6 0454595045          <1>     db 4, "TYPE"
    77 000007DB EF27                <1>     dw type - startLbl
    78                              <1> 
    79 000007DD 054C4142454C        <1>     db 5, "LABEL"
    80 000007E3 CC24                <1>     dw label - startLbl
    81                              <1> 
    82                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    83 000007E5 054D4B4C424C        <1>     db 5, "MKLBL"
    84 000007EB F624                <1>     dw mklbl - startLbl
    85                              <1> 
    86 000007ED 05524D4C424C        <1>     db 5, "RMLBL"
    87 000007F3 3125                <1>     dw rmlbl - startLbl
    88                              <1> 
    89 000007F5 05524E4C424C        <1>     db 5, "RNLBL"
    90 000007FB 6C25                <1>     dw rnlbl - startLbl
    91                              <1> 
    92 000007FD 05544F554348        <1>     db 5, "TOUCH"
    93 00000803 9622                <1>     dw touch - startLbl
    94                              <1> 
    95 00000805 044A4F494E          <1>     db 4, "JOIN"
    96 0000080A D122                <1>     dw join - startLbl
    97                              <1> 
    98 0000080C 055355425354        <1>     db 5, "SUBST"
    99 00000812 9423                <1>     dw subst - startLbl
   100                              <1> 
   101                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   102 00000814 FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 00000815 0D0A24              <1> crlf    db  CR,LF,"$"
     3 00000818 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 0000081D 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 00000826 696C65206D69737369- <1>
     4 0000082F 6E670D0A24          <1>
     5 00000834 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 0000083D 6469736B2077697468- <1>
     5 00000846 206261746368206669- <1>
     5 0000084F 6C65                <1>
     6 00000851 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 0000085A 737320616E79206B65- <1>
     6 00000863 79207768656E207265- <1>
     6 0000086C 6164790D0A24        <1>
     7 00000872 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 0000087B 6E64206F722066696C- <1>
     7 00000884 65206E616D650D0A24  <1>
     8 0000088D 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 00000896 2066696C65206E616D- <1>
     8 0000089F 65206F7220          <1>
     9 000008A4 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 000008AD 666F756E640D0A24    <1>
    10 000008B5 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    10 000008BE 656E74206469736B20- <1>
    10 000008C7 73706163650D0A24    <1>
    11 000008CF 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 000008D8 7669726F6E6D656E74- <1>
    11 000008E1 2073706163650D0A24  <1>
    12 000008EA 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 000008F3 74696F6E206572726F- <1>
    12 000008FC 720D0A24            <1>
    13 00000900 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 00000909 6F7420626520636F70- <1>
    13 00000912 696564206F6E746F20- <1>
    13 0000091B 697473656C660D0A24  <1>
    14 00000924 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 0000092D 662064657374696E61- <1>
    14 00000936 74696F6E206C6F7374- <1>
    14 0000093F 206265666F72652063- <1>
    14 00000948 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 0000094E 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 00000957 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 00000960 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 00000969 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 0000096A 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 00000973 65650D0A24          <1>
    21 00000978 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 00000981 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 0000098A 726976652073706563- <1>
    23 00000993 696669636174696F6E- <1>
    23 0000099C 0D0A24              <1>
    24 0000099F 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 000009A8 6B6579207768656E20- <1>
    24 000009B1 7265616479202E202E- <1>
    24 000009BA 202E2024            <1>
    25 000009BE 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 000009C7 6172616D657465720D- <1>
    25 000009D0 0A24                <1>
    26                              <1> 
    27 000009D2 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 000009DB 576564546875467269- <1>
    27 000009E4 536174              <1>
    28 000009E7 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 000009F0 206461746524        <1>
    29 000009F6 43757272656E742064- <1> curDate db  "Current date is $"
    29 000009FF 6174652069732024    <1>
    30 00000A07 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 00000A10 657720646174652024  <1>
    31 00000A19 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 00000A22 293A2024            <1>
    32 00000A26 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 00000A2F 293A2024            <1>
    33 00000A33 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 00000A3C 293A2024            <1>
    34 00000A40 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 00000A49 2074696D6524        <1>
    35 00000A4F 43757272656E742074- <1> curTime db  "Current time is $"
    35 00000A58 696D652069732024    <1>
    36 00000A60 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 00000A69 65772074696D653A20- <1>
    36 00000A72 24                  <1>
    37                              <1> 
    38 00000A73 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000A7C 7572652028592F4E29- <1>
    38 00000A85 3F2024              <1>
    39                              <1> 
    40 00000A88 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000A91 56657273696F6E2024  <1>
    41                              <1> 
    42 00000A9A 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000AA3 6E2064726976652024  <1>
    43 00000AAC 2069732024          <1> volOk   db " is $"
    44 00000AB1 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000ABA 6162656C24          <1>
    45                              <1> 
    46 00000ABF 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000AC8 69726563746F72790D- <1>
    46 00000AD1 0A24                <1>
    47 00000AD3 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000ADC 206372656174652064- <1>
    47 00000AE5 69726563746F72790D- <1>
    47 00000AEE 0A24                <1>
    48 00000AF0 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000AF9 6174682C206E6F7420- <1>
    48 00000B02 6469726563746F7279- <1>
    48 00000B0B 2C0D0A              <1>
    49 00000B0E 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000B17 6F7279206E6F742065- <1>
    49 00000B20 6D7074790D0A24      <1>
    50 00000B27 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000B30 79206F66202024      <1>
    51 00000B37 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000B40 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    52 00000B49 7269766520696E2073- <1>
    52 00000B52 656172636820706174- <1>
    52 00000B5B 680D0A24            <1>
    53 00000B5F 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    53 00000B68 65766963650D0A24    <1>
    54 00000B70 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    54 00000B79 20666F756E640D0A24  <1>
    55 00000B82 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    55 00000B8B 726F720D0A24        <1>
    56 00000B91 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    56 00000B9A 6F74206265206E6573- <1>
    56 00000BA3 7465640D0A24        <1>
    57 00000BA9 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    57 00000BB2 6174652066696C6520- <1>
    57 00000BBB 6572726F7220647572- <1>
    57 00000BC4 696E6720706970650D- <1>
    57 00000BCD 0A24                <1>
    58 00000BCF 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    58 00000BD8 2062696E6172792072- <1>
    58 00000BE1 656164732066726F6D- <1>
    58 00000BEA 206120646576696365- <1>
    58 00000BF3 0D0A24              <1>
    59 00000BF6 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    60 00000BFC 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    61 00000C01 425245414B20697320- <1> breakIs db "BREAK is $"
    61 00000C0A 24                  <1>
    62 00000C0B 564552494659206973- <1> verifyIs    db "VERIFY is $"
    62 00000C14 2024                <1>
    63 00000C16 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    64 00000C1F 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    64 00000C28 617468206F72206669- <1>
    64 00000C31 6C65206E616D650D0A- <1>
    64 00000C3A 24                  <1>
    65 00000C3B 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    65 00000C44 756D626572206F6620- <1>
    65 00000C4D 706172616D65746572- <1>
    65 00000C56 730D0A24            <1>
    66 00000C5A 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    66 00000C63 74696E6720746F2064- <1>
    66 00000C6C 6576696365          <1>
    67 00000C71 08200800            <1> backSpace   db BSP," ",BSP,NUL
    68                              <1> 
    69 00000C75 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    69 00000C7E 20202020202020546F- <1>
    69 00000C87 74616C207379737465- <1>
    69 00000C90 6D206D656D6F72793A- <1>
    69 00000C99 2024                <1>
    70 00000C9B 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    70 00000CA4 20202020202020204D- <1>
    70 00000CAD 656D6F727920757365- <1>
    70 00000CB6 6420627920444F533A- <1>
    70 00000CBF 2024                <1>
    71 00000CC1 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    71 00000CCA 656D6F727920757365- <1>
    71 00000CD3 64206279206170706C- <1>
    71 00000CDC 69636174696F6E733A- <1>
    71 00000CE5 2024                <1>
    72 00000CE7 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    72 00000CF0 656D6F727920726573- <1>
    72 00000CF9 657276656420627920- <1>
    72 00000D02 68617264776172653A- <1>
    72 00000D0B 2024                <1>
    73 00000D0D 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    73 00000D16 202020202020202020- <1>
    73 00000D1F 2020202020204D656D- <1>
    73 00000D28 6F727920667265653A- <1>
    73 00000D31 2024                <1>
    74 00000D33 20627974657324      <1> memByte db " bytes$"
    75 00000D3A 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    75 00000D43 6F7420417373657274- <1>
    75 00000D4C 61696E20444F532045- <1>
    75 00000D55 6E74727920506F696E- <1>
    75 00000D5E 7424                <1>
    76 00000D60 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    76 00000D69 416C6C6F636174696F- <1>
    76 00000D72 6E204572726F7224    <1>
    77 00000D7A 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    77 00000D83 4572726F7224        <1>
    78 00000D89 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    78 00000D92 68616C74656424      <1>
    79                              <1> 
    80 00000D99 556E61626C6520746F- <1> touchErr db "Unable to create file",CR,LF,"$"
    80 00000DA2 206372656174652066- <1>
    80 00000DAB 696C650D0A24        <1>
    81 00000DB1 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    81 00000DBA 206372656174652070- <1>
    81 00000DC3 6970650D0A          <1>
    82                              <1> pipeErrMsgL equ $ - pipeErrMsg
    83 00000DC8 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    83 00000DD1 6F6E206572726F720D- <1>
    83 00000DDA 0A                  <1>
    84                              <1> redirErrMsgL   equ $ - redirErrMsg
    85                              <1> 
    86 00000DDB 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    87 00000DDF 2020202024          <1> fourSpc  db "    $"
    88 00000DE4 20202024            <1> threeSpc db "   $"
    89 00000DE8 202024              <1> twoSpc   db "  $"
    90                              <1> 
    91 00000DEB 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    91 00000DF4 696679204F4E206F72- <1>
    91 00000DFD 204F46460D0A24      <1>
    92 00000E04 504154483D          <1> pathEVar db "PATH="
    93 00000E09 50524F4D50543D      <1> promptEVar  db "PROMPT="
    94                              <1> 
    95                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    96                              <1> ; handles and reopen CON
    97 00000E10 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00000E14 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00000E17 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00000E1B C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 00000E1E B44A                <1>     mov ah, 4Ah ;Realloc
     9 00000E20 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00000E23 CD21                <1>     int 21h
    11 00000E25 EB6C                <1>     jmp short commandMain
    12                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    13 00000E27 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    14 00000E2C CD21                <1>     int 21h
    15 00000E2E 668905D8F1FFFF      <1>     mov word [returnCode], ax
    16                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    17 00000E35 488D155A210000      <1>     lea rdx, critErrorHandler
    18 00000E3C 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    19 00000E40 B824250000          <1>     mov eax, 2524h
    20 00000E45 CD21                <1>     int 21h
    21 00000E47 488D15D8230000      <1>     lea rdx, int23h
    22 00000E4E 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    23 00000E52 B823250000          <1>     mov eax, 2523h
    24 00000E57 CD21                <1>     int 21h
    25 00000E59 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    26 00000E60 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    27 00000E64 B822250000          <1>     mov eax, 2522h
    28 00000E69 CD21                <1>     int 21h
    29 00000E6B F6053DF2FFFFFF      <1>     test byte [pipeFlag], -1
    30 00000E72 0F858C000000        <1>     jnz commandMain.pipeProceed ;Skip the handle closing when pipe active
    31 00000E78 E8BB040000          <1>     call cleanUpRedir   ;Clean up redirection once we are done
    32                              <1> ;Close all handles from 5->MAX
    33 00000E7D 0FB70DA3F1FFFF      <1>     movzx ecx, word [numHdls]
    34 00000E84 BB05000000          <1>     mov ebx, 5
    35                              <1> .handleClose:
    36 00000E89 B43E                <1>     mov ah, 3Eh ;File close
    37 00000E8B CD21                <1>     int 21h
    38 00000E8D FFC3                <1>     inc ebx ;Goto next file
    39 00000E8F 39CB                <1>     cmp ebx, ecx
    40 00000E91 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    41                              <1> commandMain:
    42                              <1> ;Setup Commandline. First check if batch mode is active, then fall.
    43                              <1> ;=========================
    44                              <1> ;   BATCH HANDLING HERE
    45                              <1> ;=========================
    46 00000E93 488B256BF1FFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    47 00000E9A FC                  <1>     cld ;Ensure stringops are done the right way
    48 00000E9B C605FBF2FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    49                              <1> .inputMain:
    50 00000EA2 E8AB1B0000          <1>     call printCRLF
    51                              <1> .inputMain2:
    52 00000EA7 E8E21E0000          <1>     call clearCommandLineState
    53 00000EAC E8AB1E0000          <1>     call printPrompt
    54                              <1> 
    55 00000EB1 B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    56 00000EB6 CD21                <1>     int 21h
    57 00000EB8 B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    58 00000EBD BA01000000          <1>     mov edx, 1      ;Start new print job
    59 00000EC2 CD21                <1>     int 21h
    60 00000EC4 488D15D2F2FFFF      <1>     lea rdx, inBuffer
    61 00000ECB B8000A0000          <1>     mov eax, 0A00h  ;Do Buffered input
    62 00000ED0 CD21                <1>     int 21h
    63 00000ED2 E87B1B0000          <1>     call printCRLF  ;Note we have accepted input
    64                              <1> ;First check we had something typed in of length greater than 0
    65                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    66 00000ED7 803DC0F2FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    67 00000EDE 74C7                <1>     je .inputMain2
    68                              <1>     ;Copy over the input text
    69 00000EE0 488D35B6F2FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    70 00000EE7 488D3D31F3FFFF      <1>     lea rdi, cmdBuffer
    71 00000EEE B982000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    72 00000EF3 F3A4                <1>     rep movsb
    73                              <1> .pipeLoop:
    74 00000EF5 E846000000          <1>     call preProcessBuffer
    75 00000EFA E8BC000000          <1>     call analyseCmdline
    76 00000EFF E8B3010000          <1>     call doCommandLine
    77                              <1> .pipeProceed:
    78 00000F04 E82F040000          <1>     call cleanUpRedir
    79 00000F09 488B0597F1FFFF      <1>     mov rax, qword [cmdEndPtr]
    80 00000F10 48890588F1FFFF      <1>     mov qword [cmdStartPtr], rax
    81 00000F17 F60591F1FFFFFF      <1>     test byte [pipeFlag], -1  ;If we have any pipes active, we proceed here
    82 00000F1E 7482                <1>     jz .inputMain
    83 00000F20 80380D              <1>     cmp byte [rax], CR  ;Are we done?
    84 00000F23 0F8479FFFFFF        <1>     je .inputMain
    85 00000F29 E8451E0000          <1>     call clearCommandState  ;Else, clear the command state and start again
    86 00000F2E EBC5                <1>     jmp short .pipeLoop
    87                              <1> .dfltErrExit:
    88 00000F30 488D153BF9FFFF      <1>     lea rdx, badCmd
    89 00000F37 B409                <1>     mov ah, 09h
    90 00000F39 CD21                <1>     int 21h
    91 00000F3B E962FFFFFF          <1>     jmp .inputMain
    92                              <1> 
    93                              <1> preProcessBuffer:
    94                              <1> ;Start by preprocessing the path, escape quotes and handle redirections.
    95                              <1> ;Each normal char gets copied over to psp.dta + 1 except for those special chars.
    96                              <1> ;Places the count of chars save CR in byte 0 of psp.dta.
    97                              <1> ;Places the ptr to the first byte past pipe or CR in cmdEndPtr
    98                              <1> ;Throughout: CL has char count, CH has number of quotes.
    99 00000F40 31C9                <1>     xor ecx, ecx
   100 00000F42 4C8B05C6F0FFFF      <1>     mov r8, qword [pspPtr]  ;Ensure we have our pspPtr pointing to the right place
   101 00000F49 488B354FF1FFFF      <1>     mov rsi, qword [cmdStartPtr]
   102 00000F50 4885F6              <1>     test rsi, rsi
   103 00000F53 7507                <1>     jnz .notNewCmd
   104 00000F55 488D35C5F2FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto command buffer + 2
   105                              <1> .notNewCmd:
   106 00000F5C 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   107                              <1> .countQuotes:
   108 00000F5F AC                  <1>     lodsb
   109 00000F60 3C22                <1>     cmp al, '"'
   110 00000F62 7507                <1>     jne .notQuoteToCount
   111 00000F64 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   112 00000F66 E9F4FFFFFF          <1>     jmp .countQuotes
   113                              <1> .notQuoteToCount:
   114 00000F6B 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   115 00000F6D 75F0                <1>     jne .countQuotes
   116 00000F6F 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   117 00000F72 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We store this nicely formatted string in psp
   118                              <1> .getChar:
   119 00000F79 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   120 00000F7A 3C22                <1>     cmp al, '"'     ;Is char a quote?
   121 00000F7C 750E                <1>     jne .notQuote
   122 00000F7E FECD                <1>     dec ch          ;We have a quote, now decrement
   123 00000F80 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   124                              <1> .searchForClosingQuote:
   125                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   126 00000F82 AA                  <1>     stosb   ;Store char and inc rdi
   127 00000F83 FEC1                <1>     inc cl
   128 00000F85 AC                  <1>     lodsb   ;Get next char
   129 00000F86 3C22                <1>     cmp al, '"'
   130 00000F88 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   131 00000F8A FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   132                              <1> .notQuote:
   133 00000F8C 51                  <1>     push rcx    ;Save counts, if anything goes wrong, stack is jiggled properly
   134 00000F8D E816050000          <1>     call checkAndSetupRedir ;Intervene redir
   135 00000F92 59                  <1>     pop rcx
   136 00000F93 7509                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   137 00000F95 7202                <1>     jc .pipeHandle      ;Store a CR in the buffer if a pipe
   138 00000F97 EBE0                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   139                              <1> .pipeHandle:
   140 00000F99 B00D                <1>     mov al, CR  ;Now store a Carriage return 
   141 00000F9B 48FFC6              <1>     inc rsi ;Ensure we remain one char past the pipe
   142                              <1> .notRedir:
   143 00000F9E AA                  <1>     stosb       ;Store char and advance rdi
   144 00000F9F 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   145 00000FA1 7404                <1>     je .exit
   146 00000FA3 FEC1                <1>     inc cl      ;Increment char count
   147 00000FA5 EBD2                <1>     jmp short .getChar    ;If not, get next char
   148                              <1> .exit:
   149 00000FA7 48FFCE              <1>     dec rsi ;move rsi to point back to terminator or one past | 
   150 00000FAA 488935F6F0FFFF      <1>     mov qword [cmdEndPtr], rsi  ;Store rsi pointing to the first char past CR or |
   151 00000FB1 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   152 00000FB8 880F                <1>     mov byte [rdi], cl  ;Store the count of chars in the psp buffer
   153                              <1>     return
    13                              <2> %%_ret:
    14 00000FBA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   154                              <1> 
   155                              <1> analyseCmdline:
   156                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   157                              <1> ; processes the command name into the FCB.  
   158 00000FBB 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   159 00000FC2 4889F3              <1>     mov rbx, rsi            ;Save this ptr in rbx
   160 00000FC5 E8711D0000          <1>     call skipDelimiters     ;Skip any preceeding separators
   161 00000FCA 488D3DD0F2FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   162 00000FD1 E8781E0000          <1>     call cpDelimPathToBufz  ;Moves rsi to the first char past the delim char
   163 00000FD6 48FFCE              <1>     dec rsi ;Point it back to the delim char
   164 00000FD9 E8D0000000          <1>     call .skipAndCheckCR
   165 00000FDE 7439                <1>     je .exit
   166 00000FE0 C605D3F0FFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   167 00000FE7 4889F0              <1>     mov rax, rsi
   168 00000FEA 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   169 00000FED 8805C8F0FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   170                              <1> .skipArg:
   171 00000FF3 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   172 00000FF4 3C0D                <1>     cmp al, CR
   173 00000FF6 7421                <1>     je .exit
   174 00000FF8 E84C1D0000          <1>     call isALdelimiter
   175 00000FFD 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   176 00000FFF E8AA000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   177 00001004 7413                <1>     je .exit            ;If ZF set, this we encountered a CR
   178 00001006 C605B0F0FFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   179 0000100D 4889F0              <1>     mov rax, rsi            
   180 00001010 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   181 00001013 8805A5F0FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   182                              <1> .exit:
   183                              <1> ;Before returning, we copy the command name to cmdName and make it useful
   184 00001019 488D3D81F2FFFF      <1>     lea rdi, cmdPathSpec
   185 00001020 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   186 00001023 30C0                <1>     xor al, al  ;Search for the terminating null
   187 00001025 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   188 0000102A F2AE                <1>     repne scasb
   189 0000102C 48FFCF              <1>     dec rdi ;Go to the last char in the command
   190 0000102F 4889FE              <1>     mov rsi, rdi
   191 00001032 FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   192                              <1> .keepSearching:
   193 00001033 AC                  <1>     lodsb
   194 00001034 3A05F1EFFFFF        <1>     cmp al, byte [pathSep]
   195 0000103A 740B                <1>     je .cmdStartFnd
   196 0000103C 4839DE              <1>     cmp rsi, rbx
   197 0000103F 75F2                <1>     jne .keepSearching
   198 00001041 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   199 00001044 48FFCE              <1>     dec rsi
   200                              <1> .cmdStartFnd:
   201 00001047 48FFC6              <1>     inc rsi
   202 0000104A 48FFC6              <1>     inc rsi ;Go past the pathsep
   203 0000104D FC                  <1>     cld ;Go the sane way again
   204 0000104E 488D3DB4F2FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   205 00001055 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   206 00001056 B90E000000          <1>     mov ecx, cmdNameL
   207 0000105B 30C0                <1>     xor al, al
   208 0000105D F3AA                <1>     rep stosb
   209 0000105F 5F                  <1>     pop rdi
   210 00001060 31C9                <1>     xor ecx, ecx
   211 00001062 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   212                              <1> .cmdGetChar:
   213 00001063 AC                  <1>     lodsb
   214 00001064 84C0                <1>     test al, al ;Did we find the terminating null?
   215 00001066 7414                <1>     jz .nameLenFnd
   216 00001068 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   217 0000106A 7410                <1>     je .nameLenFnd
   218 0000106C E8B81C0000          <1>     call ucChar ;Else uppercase char
   219 00001071 AA                  <1>     stosb   ;and store it
   220 00001072 FFC1                <1>     inc ecx
   221 00001074 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   222 0000107A 72E7                <1>     jb .cmdGetChar
   223                              <1> .nameLenFnd:
   224 0000107C 880D86F2FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   225                              <1>     ;Now finally, create a FCB filespec
   226 00001082 488D3D67F2FFFF      <1>     lea rdi, fcbCmdSpec
   227 00001089 57                  <1>     push rdi
   228 0000108A B90B000000          <1>     mov ecx, fcbNameL
   229 0000108F B020                <1>     mov al, " " ;Fill with spaces
   230 00001091 F3AA                <1>     rep stosb
   231 00001093 5F                  <1>     pop rdi
   232 00001094 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   233 00001095 E8191D0000          <1>     call asciiToFCB
   234 0000109A 488D354FF2FFFF      <1>     lea rsi, fcbCmdSpec
   235 000010A1 488D3D53F2FFFF      <1>     lea rdi, cmdSpec
   236 000010A8 E8611D0000          <1>     call FCBToAsciiz
   237                              <1>     return
    13                              <2> %%_ret:
    14 000010AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   238                              <1> .skipAndCheckCR:
   239                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   240 000010AE E8881C0000          <1>     call skipDelimiters ;Go to the next char in the input line
   241 000010B3 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   242                              <1>     return
    13                              <2> %%_ret:
    14 000010B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   243                              <1> 
   244                              <1> doCommandLine:
   245 000010B7 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   246                              <1>     ;The following check accounts for the end of a piped command
   247 000010BE 803E0D              <1>     cmp byte [rsi], CR  ;If the first char is a CR, exit the pipe loop
   248                              <1>     rete    ;Do not attempt to execute if the first char is a CR
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000010C1 74(B6)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   249 000010C3 488D3DF6EFFFFF      <1>     lea rdi, cmdFcb
   250 000010CA B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   251 000010CF CD21                <1>     int 21h
   252 000010D1 410FB79881000000    <1>     movzx ebx, word [r8 + cmdLine]    ;Get the drive specifier
   253 000010D9 80FF3A              <1>     cmp bh, ":"
   254 000010DC 752E                <1>     jne .noDriveSpecified
   255 000010DE 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   256 000010E0 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   257 000010E3 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   258 000010E6 3CFF                <1>     cmp al, -1  ;Int 21h returns AL = -1 if bad drive specified
   259 000010E8 7415                <1>     je .badDrive
   260                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   261 000010EA 803D17F2FFFF02      <1>     cmp byte [cmdName], 2
   262 000010F1 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   263 000010F3 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   264 000010F5 CD21                <1>     int 21h 
   265 000010F7 B419                <1>     mov ah, 19h
   266 000010F9 CD21                <1>     int 21h     ;Get current drive
   267 000010FB 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   268                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000010FD 74(B6)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   269                              <1> .badDrive:
   270 000010FF 488D157BF8FFFF      <1>     lea rdx, badDrv
   271 00001106 B409                <1>     mov ah, 09h
   272 00001108 CD21                <1>     int 21h
   273 0000110A F9                  <1>     stc
   274                              <1>     return
    13                              <2> %%_ret:
    14 0000110B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   275                              <1> .noDriveSpecified:
   276                              <1> ;Now we set the two FCB's in the command line
   277 0000110C F605A7EFFFFFFF      <1>     test byte [arg1Flg], -1
   278 00001113 744D                <1>     jz .fcbArgsDone
   279 00001115 0FB6059FEFFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   280 0000111C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   281 00001123 4801C6              <1>     add rsi, rax    ;Point to first argument
   282 00001126 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   283 0000112A B801290000          <1>     mov eax, 2901h
   284 0000112F CD21                <1>     int 21h
   285 00001131 880585EFFFFF        <1>     mov byte [arg1FCBret], al
   286 00001137 F6057FEFFFFFFF      <1>     test byte [arg2Flg], -1
   287 0000113E 7422                <1>     jz .fcbArgsDone
   288 00001140 0FB60577EFFFFF      <1>     movzx eax, byte [arg2Off]
   289 00001147 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   290 0000114E 4801C6              <1>     add rsi, rax    ;Point to first argument
   291 00001151 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   292 00001155 B801290000          <1>     mov eax, 2901h
   293 0000115A CD21                <1>     int 21h
   294 0000115C 88055DEFFFFF        <1>     mov byte [arg2FCBret], al
   295                              <1> .fcbArgsDone:
   296 00001162 498D9881000000      <1>     lea rbx, [r8 + cmdLine]
   297 00001169 488D3598F1FFFF      <1>     lea rsi, cmdName
   298 00001170 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   299 00001175 BAFFFF0000          <1>     mov edx, 0FFFFh
   300 0000117A B5FF                <1>     mov ch, -1
   301 0000117C CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   302 0000117E B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   303 00001183 BAFFFF0000          <1>     mov edx, 0FFFFh
   304 00001188 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   305 0000118A CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   306                              <1>             ;        al = 0  if the command should be executed as usual
   307 0000118C 84C0                <1>     test al, al
   308 0000118E 741D                <1>     jz .executeInternal
   309                              <1>     ;Here we execute externally and return to the prompt
   310                              <1>     ; as if it was an internal execution
   311 00001190 488D3506F0FFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   312 00001197 488D1D22EFFFFF      <1>     lea rbx, cmdFcb
   313 0000119E B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   314 000011A3 BAFFFF0000          <1>     mov edx, 0FFFFh
   315 000011A8 B5FF                <1>     mov ch, -1
   316 000011AA CD2F                <1>     int 2Fh 
   317                              <1>     return
    13                              <2> %%_ret:
    14 000011AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   318                              <1> .executeInternal:
   319                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   320                              <1> ;rsi points after the command terminator in the command tail
   321 000011AD 488D1D80F5FFFF      <1>     lea rbx, functionTable
   322                              <1> .nextEntry:
   323 000011B4 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   324 000011B7 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   325 000011BA 0F8404170000        <1>     je launchChild      ;If so, check externally now
   326 000011C0 380D42F1FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   327 000011C6 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   328                              <1>     ;Here they have the same length so lets see if the name is the same
   329 000011C8 56                  <1>     push rsi
   330                              <1>     ;ecx has the length to compare
   331 000011C9 51                  <1>     push rcx
   332 000011CA 488D7301            <1>     lea rsi, qword [rbx + 1]
   333 000011CE 488D3D34F1FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   334 000011D5 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   335 000011D7 59                  <1>     pop rcx
   336 000011D8 5E                  <1>     pop rsi
   337 000011D9 7516                <1>     jne .gotoNextEntry
   338                              <1>     ;Here it was found both strings are equal
   339 000011DB 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   340 000011E0 480FB71F            <1>     movzx rbx, word [rdi]
   341 000011E4 488D3D15EEFFFF      <1>     lea rdi, startLbl
   342 000011EB 4801FB              <1>     add rbx, rdi
   343 000011EE FFD3                <1>     call rbx    ;Call this function...
   344                              <1>     return  ;... and return
    13                              <2> %%_ret:
    14 000011F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   345                              <1> .gotoNextEntry:
   346 000011F1 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   347 000011F8 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   348 000011FB EBB7                <1>     jmp short .nextEntry
   349                              <1> .dfltErrExit:
   350 000011FD 488D156EF6FFFF      <1>     lea rdx, badCmd
   351 00001204 B409                <1>     mov ah, 09h
   352 00001206 CD21                <1>     int 21h
   353                              <1>     return
    13                              <2> %%_ret:
    14 00001208 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   354                              <1> 
   355                              <1> 
   356                              <1> checkExtensionExec:
   357                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   358                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   359                              <1> ;         If ZF=ZE and CF=CY => Batch file
   360 00001209 8B05BAEEFFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   361 0000120F 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   362 00001214 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   363 00001219 25DFDFDFFF          <1>     and eax, 0FFDFDFDFh ;Uppercase the three letters
   364 0000121E 3D434F4D20          <1>     cmp eax, "COM "
   365                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001223 74(08)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   366 00001225 3D45584520          <1>     cmp eax, "EXE "
   367                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000122A 74(08)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   368 0000122C 3D42415420          <1>     cmp eax, "BAT "
   369                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001231 75(08)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   370 00001233 F9                  <1>     stc
   371                              <1>     return
    13                              <2> %%_ret:
    14 00001234 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   372                              <1> 
   373                              <1> redirFailure:
   374 00001235 488D158CFBFFFF      <1>     lea rdx, redirErrMsg
   375 0000123C B913000000          <1>     mov ecx, redirErrMsgL
   376 00001241 EB0C                <1>     jmp short redirPipeFailureCommon
   377                              <1> pipeFailure:
   378 00001243 488D1567FBFFFF      <1>     lea rdx, pipeErrMsg
   379 0000124A B917000000          <1>     mov ecx, pipeErrMsgL
   380                              <1> redirPipeFailureCommon:
   381                              <1> ;This routine is called if any problems happen during 
   382                              <1> ;This routine tries to close whatever handles are not -1 and delete
   383                              <1> ; pipe files if the pipe count is not 0
   384                              <1> ;It resets all variables and proceeds.
   385 0000124F B800400000          <1>     mov eax, 4000h  ;Write handle
   386 00001254 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   387 00001259 CD21                <1>     int 21h
   388 0000125B 31DB                <1>     xor ebx, ebx    ;Select STDIN
   389 0000125D E8C6000000          <1>     call .closeHandle
   390 00001262 FFC3                <1>     inc ebx         ;Select STDOUT
   391 00001264 E8BF000000          <1>     call .closeHandle
   392 00001269 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   393 0000126E 488D159BFBFFFF      <1>     lea rdx, conName
   394 00001275 CD21                <1>     int 21h
   395 00001277 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
   396 00001279 B800450000          <1>     mov eax, 4500h  ;DUP
   397 0000127E CD21                <1>     int 21h
   398 00001280 66C7052BEEFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   399 00001289 0FB71D26EEFFFF      <1>     movzx ebx, word [redirSTDIN]
   400 00001290 E893000000          <1>     call .closeHandle
   401                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   402 00001295 66C70518EEFFFFFFFF  <1>     mov word [redirSTDIN], -1
   403 0000129E 0FB71D13EEFFFF      <1>     movzx ebx, word [redirSTDOUT]
   404 000012A5 E87E000000          <1>     call .closeHandle
   405 000012AA 66C70505EEFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   406 000012B3 0FB71DF6EDFFFF      <1>     movzx ebx, word [pipeSTDIN]
   407 000012BA E869000000          <1>     call .closeHandle
   408 000012BF 66C705E8EDFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   409 000012C8 0FB71DE3EDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   410 000012CF E854000000          <1>     call .closeHandle
   411 000012D4 66C705D5EDFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   412 000012DD C605CBEDFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   413 000012E4 488D15C9F0FFFF      <1>     lea rdx, qword [pipe1Filespec]
   414 000012EB 803A00              <1>     cmp byte [rdx], 0
   415 000012EE 7407                <1>     jz .checkOld
   416 000012F0 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   417 000012F5 CD21                <1>     int 21h
   418                              <1> .checkOld:
   419 000012F7 488D1505F1FFFF      <1>     lea rdx, qword [pipe2Filespec]
   420 000012FE 803A00              <1>     cmp byte [rdx],0
   421 00001301 7407                <1>     jz .pipeNamesComplete
   422 00001303 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   423 00001308 CD21                <1>     int 21h
   424                              <1> .pipeNamesComplete:
   425 0000130A 31C0                <1>     xor eax, eax
   426                              <1>     ;Invalidate the pointers and the paths too
   427 0000130C 4889053FF1FFFF      <1>     mov qword [newPipe], rax
   428 00001313 48890540F1FFFF      <1>     mov qword [oldPipe], rax
   429 0000131A 890594F0FFFF        <1>     mov dword [pipe1Filespec], eax
   430 00001320 8905DDF0FFFF        <1>     mov dword [pipe2Filespec], eax
   431 00001326 F9                  <1>     stc
   432                              <1>     return
    13                              <2> %%_ret:
    14 00001327 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   433                              <1> .closeHandle:
   434 00001328 81FBFFFFFFFF        <1>     cmp ebx, -1
   435                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000132E 74(27)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   436 00001330 B8003E0000          <1>     mov eax, 3E00h
   437 00001335 CD21                <1>     int 21h
   438                              <1>     return
    13                              <2> %%_ret:
    14 00001337 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   439                              <1> 
   440                              <1> cleanUpRedir:
   441                              <1> ;Cleans up the redir stuff after we are done.
   442 00001338 0FB70571EDFFFF      <1>     movzx eax, word [pipeSTDIN]
   443 0000133F 0FB71D6CEDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   444 00001346 C1E310              <1>     shl ebx, 10h
   445 00001349 09D8                <1>     or eax, ebx
   446 0000134B 3DFFFFFFFF          <1>     cmp eax, -1
   447 00001350 750C                <1>     jne .pipe
   448 00001352 C60556EDFFFF00      <1>     mov byte [pipeFlag], 0  ;Clear the flag
   449 00001359 E9CD000000          <1>     jmp .redirInClear   ;If no piping, skip
   450                              <1> .pipe:
   451                              <1> ;Pipe processing here
   452                              <1> ;We handle stdin, closing the redir if it is and deleting
   453                              <1> ; the redir file.
   454                              <1> ;Then we handle stdout, moving the redir to stdin.
   455 0000135E 66813D49EDFFFFFFFF  <1>     cmp word [pipeSTDIN], -1
   456 00001367 7443                <1>     je .pipeNostdin
   457                              <1>     ;We close the handle first and delete the file.
   458 00001369 0FB71D40EDFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   459 00001370 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   460 00001372 B800460000          <1>     mov eax, 4600h
   461 00001377 CD21                <1>     int 21h
   462 00001379 0F82C4FEFFFF        <1>     jc pipeFailure
   463 0000137F B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   464 00001384 CD21                <1>     int 21h
   465 00001386 0F82B7FEFFFF        <1>     jc pipeFailure
   466 0000138C 488B15C7F0FFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   467 00001393 B800410000          <1>     mov eax, 4100h  ;Delete the file!
   468 00001398 CD21                <1>     int 21h
   469 0000139A 0F82A3FEFFFF        <1>     jc pipeFailure
   470 000013A0 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   471 000013A3 66C70504EDFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   472                              <1> .pipeNostdin:
   473 000013AC 66813DFDECFFFFFFFF  <1>     cmp word [pipeSTDOUT], -1   ;If no stdout redir, exit now
   474 000013B5 7474                <1>     je .redirInClear
   475                              <1> ;Duplicate STDIN to save across pipe
   476 000013B7 B800450000          <1>     mov eax, 4500h
   477 000013BC 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   478 000013BE CD21                <1>     int 21h
   479 000013C0 0F827DFEFFFF        <1>     jc pipeFailure
   480 000013C6 668905E3ECFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   481                              <1> 
   482                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   483 000013CD B800460000          <1>     mov eax, 4600h
   484 000013D2 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   485 000013D4 FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   486 000013D6 CD21                <1>     int 21h
   487 000013D8 0F8265FEFFFF        <1>     jc pipeFailure
   488                              <1> 
   489                              <1> ;Now return the original stdout to stdout
   490 000013DE 89D9                <1>     mov ecx, ebx
   491 000013E0 0FB71DCBECFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   492 000013E7 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   493 000013EC CD21                <1>     int 21h
   494 000013EE 0F824FFEFFFF        <1>     jc pipeFailure
   495                              <1> 
   496                              <1> ;Now close the DUP'ed STDOUT
   497 000013F4 B8003E0000          <1>     mov eax, 3E00h
   498 000013F9 CD21                <1>     int 21h
   499 000013FB 0F8242FEFFFF        <1>     jc pipeFailure
   500                              <1> 
   501                              <1> ;Finally unwind STDIN to the beginning of the file
   502 00001401 B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   503 00001406 31DB                <1>     xor ebx, ebx    ;STDIN handle
   504 00001408 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   505 0000140A 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   506 0000140C CD21                <1>     int 21h
   507 0000140E 0F822FFEFFFF        <1>     jc pipeFailure  ;This should never happen
   508                              <1> 
   509 00001414 488B1537F0FFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   510 0000141B 48891538F0FFFF      <1>     mov qword [oldPipe], rdx
   511 00001422 66C70587ECFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   512                              <1> .redirInClear:
   513                              <1> ;Check redir in
   514 0000142B F60582ECFFFFFF      <1>     test byte [redirIn], -1
   515 00001432 7433                <1>     jz .redirOutClear
   516                              <1> 
   517 00001434 0FB71D7BECFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   518 0000143B 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   519 0000143D B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   520 00001442 CD21                <1>     int 21h
   521 00001444 0F82EBFDFFFF        <1>     jc redirFailure
   522 0000144A B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   523 0000144F CD21                <1>     int 21h
   524 00001451 0F82DEFDFFFF        <1>     jc redirFailure
   525 00001457 66C70556ECFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   526 00001460 C6054DECFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   527                              <1> .redirOutClear:
   528                              <1> ;Now check Redir Out
   529 00001467 F60547ECFFFFFF      <1>     test byte [redirOut], -1
   530                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000146E 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001470 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   531                              <1> 
   532 00001471 0FB71D40ECFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   533 00001478 B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   534 0000147D B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   535 00001482 CD21                <1>     int 21h
   536 00001484 0F82ABFDFFFF        <1>     jc redirFailure
   537 0000148A B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   538 0000148F CD21                <1>     int 21h
   539 00001491 0F829EFDFFFF        <1>     jc redirFailure
   540 00001497 66C70518ECFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   541 000014A0 C6050EECFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   542                              <1>     return
    13                              <2> %%_ret:
    14 000014A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   543                              <1> 
   544                              <1> checkAndSetupRedir:
   545                              <1> ;Checks and sets up redir as appropriate
   546                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   547                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   548                              <1> ;Output: ZF=NZ => No redir
   549                              <1> ;        ZF=ZY => Redir
   550                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   551                              <1> ;CF=CY if pipe set or an embedded CR found. rsi points to first char past it!
   552 000014A8 57                  <1>     push rdi
   553 000014A9 3C3C                <1>     cmp al, "<"
   554 000014AB 740F                <1>     je .inputRedir
   555 000014AD 3C3E                <1>     cmp al, ">"
   556 000014AF 7473                <1>     je .outputRedir
   557 000014B1 3C7C                <1>     cmp al, "|"
   558 000014B3 0F841B010000        <1>     je .pipeSetup
   559 000014B9 F8                  <1>     clc
   560                              <1> .redirExit:
   561 000014BA 5F                  <1>     pop rdi
   562                              <1>     return
    13                              <2> %%_ret:
    14 000014BB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   563                              <1> .inputRedir:
   564 000014BC C605F1EBFFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   565 000014C3 488D3D4CEEFFFF      <1>     lea rdi, rdrInFilespec
   566 000014CA E86C180000          <1>     call skipDelimiters ;Skip spaces between < and the filespec
   567 000014CF E87A190000          <1>     call cpDelimPathToBufz
   568 000014D4 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char as 
   569                              <1>     ;Setup the redir here for STDIN
   570 000014D7 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   571 000014D9 B800450000          <1>     mov eax, 4500h
   572 000014DE CD21                <1>     int 21h
   573 000014E0 0F827A010000        <1>     jc .redirError
   574 000014E6 668905C9EBFFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   575 000014ED 488D1522EEFFFF      <1>     lea rdx, rdrInFilespec
   576 000014F4 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   577 000014F9 CD21                <1>     int 21h
   578 000014FB 0F825F010000        <1>     jc .redirError
   579 00001501 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   580 00001503 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   581 00001506 B800460000          <1>     mov eax, 4600h
   582 0000150B CD21                <1>     int 21h
   583 0000150D 0F824D010000        <1>     jc .redirError
   584 00001513 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   585 00001518 CD21                <1>     int 21h
   586 0000151A 0F8240010000        <1>     jc .redirError
   587 00001520 30C0                <1>     xor al, al
   588 00001522 EB96                <1>     jmp short .redirExit
   589                              <1> .outputRedir:
   590 00001524 C6058AEBFFFF01      <1>     mov byte [redirOut], 1
   591 0000152B 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   592 0000152E 7509                <1>     jne .notDouble
   593 00001530 FE057FEBFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   594 00001536 48FFC6              <1>     inc rsi ;Go past it too
   595                              <1> .notDouble:
   596 00001539 488D3D25EEFFFF      <1>     lea rdi, rdrOutFilespec
   597 00001540 E8F6170000          <1>     call skipDelimiters
   598 00001545 E804190000          <1>     call cpDelimPathToBufz
   599 0000154A 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char as 
   600                              <1>     ;Setup the redir here for STDOUT
   601 0000154D BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   602 00001552 B800450000          <1>     mov eax, 4500h
   603 00001557 CD21                <1>     int 21h
   604 00001559 0F8201010000        <1>     jc .redirError
   605 0000155F 66890552EBFFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   606 00001566 488D15F8EDFFFF      <1>     lea rdx, rdrOutFilespec
   607 0000156D B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   608 00001572 CD21                <1>     int 21h
   609 00001574 730F                <1>     jnc .fileExists
   610 00001576 B8003C0000          <1>     mov eax, 3C00h
   611 0000157B 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   612 0000157D CD21                <1>     int 21h
   613 0000157F 0F82DB000000        <1>     jc .redirError
   614                              <1> .fileExists:
   615 00001585 B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   616 0000158A 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   617 0000158D B800460000          <1>     mov eax, 4600h  ;DUP2
   618 00001592 CD21                <1>     int 21h
   619 00001594 0F82C6000000        <1>     jc .redirError
   620 0000159A B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   621 0000159F CD21                <1>     int 21h
   622 000015A1 0F82B9000000        <1>     jc .redirError
   623 000015A7 803D07EBFFFF01      <1>     cmp byte [redirOut], 1
   624 000015AE 7416                <1>     je .dontAppend
   625                              <1>     ;Here we move the file pointer to the end of the file
   626 000015B0 31D2                <1>     xor edx, edx    ;Low order 32 bits
   627 000015B2 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   628 000015B4 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   629 000015B9 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   630 000015BE CD21                <1>     int 21h
   631 000015C0 0F829A000000        <1>     jc .redirError
   632                              <1> .dontAppend:
   633 000015C6 C605E8EAFFFFFF      <1>     mov byte [redirOut], -1
   634 000015CD 30C0                <1>     xor al, al
   635 000015CF E9E6FEFFFF          <1>     jmp .redirExit
   636                              <1> .pipeSetup:
   637                              <1> ;We only need to setup STDOUT redirection to the pipe file
   638 000015D4 56                  <1>     push rsi    ;Save rsi pointing to char past |
   639 000015D5 E861170000          <1>     call skipDelimiters ;Check if this is a double ||
   640 000015DA 803E7C              <1>     cmp byte [rsi], "|" 
   641 000015DD 5E                  <1>     pop rsi
   642 000015DE 7475                <1>     je .pipeError
   643 000015E0 488D15CDEDFFFF      <1>     lea rdx, pipe1Filespec
   644 000015E7 803A00              <1>     cmp byte [rdx], 0
   645 000015EA 740C                <1>     jz .pathFound
   646 000015EC 488D1510EEFFFF      <1>     lea rdx, pipe2Filespec
   647 000015F3 803A00              <1>     cmp byte [rdx], 0
   648 000015F6 755D                <1>     jnz .pipeError
   649                              <1> .pathFound:
   650 000015F8 48891553EEFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   651 000015FF B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   652 00001604 BB01000000          <1>     mov ebx, 1
   653 00001609 CD21                <1>     int 21h
   654 0000160B 7248                <1>     jc .pipeError
   655 0000160D 6689059EEAFFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   656 00001614 E8F9160000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   657 00001619 0441                <1>     add al, "A"
   658 0000161B BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   659 00001620 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   660 00001622 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   661 00001624 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   662 00001626 B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   663 0000162B CD21                <1>     int 21h
   664 0000162D 7226                <1>     jc .pipeError
   665                              <1>     ;AX has the handle for this file now, this will become STDOUT
   666                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   667 0000162F 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   668 00001632 B901000000          <1>     mov ecx, 1
   669 00001637 B800460000          <1>     mov eax, 4600h
   670 0000163C CD21                <1>     int 21h
   671 0000163E 7215                <1>     jc .pipeError
   672 00001640 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   673 00001645 CD21                <1>     int 21h
   674 00001647 720C                <1>     jc .pipeError
   675 00001649 C6055FEAFFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   676 00001650 30C0                <1>     xor al, al  ;Set ZF
   677 00001652 F9                  <1>     stc         ;But also CF to indicate pipe!
   678 00001653 5F                  <1>     pop rdi
   679                              <1>     return
    13                              <2> %%_ret:
    14 00001654 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   680                              <1> .pipeError:
   681 00001655 5F                  <1>     pop rdi 
   682 00001656 E8E8FBFFFF          <1>     call pipeFailure
   683 0000165B E933F8FFFF          <1>     jmp commandMain ;Fully reset the state if a pipe failure occurs.
   684                              <1> .redirError:
   685 00001660 5F                  <1>     pop rdi 
   686 00001661 E8CFFBFFFF          <1>     call redirFailure
   687 00001666 E928F8FFFF          <1>     jmp commandMain ;Fully reset the state if a redir failure occurs.
   688                              <1> 
   689                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   690                              <1> ;Input: rsi points to the count byte of a command line
   691 0000166B 4150                <1>     push r8
   692 0000166D 4151                <1>     push r9
   693 0000166F B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   694 00001671 CD21                <1>     int 21h
   695 00001673 52                  <1>     push rdx    ;Save on the stack
   696 00001674 488D1D85E8FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   697 0000167B B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   698 0000167D CD21                <1>     int 21h
   699 0000167F 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   700 00001682 4989D9              <1>     mov r9, rbx
   701 00001685 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   702 0000168C B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   703 00001691 F348A5              <1>     rep movsq   ;Copy command line over
   704                              <1>     ;call doCommandLine
   705 00001694 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   706 00001695 B450                <1>     mov ah, 50h ;Set Current PSP
   707 00001697 CD21                <1>     int 21h
   708 00001699 4159                <1>     pop r9
   709 0000169B 4158                <1>     pop r8
   710 0000169D 48CF                <1>     iretq
    16                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> noSelfCopyError:
     7 0000169F 488D155AF2FFFF      <1>     lea rdx, noSelfCopy
     8 000016A6 EB34                <1>     jmp short badCmn
     9                              <1> badParamError:
    10 000016A8 488D150FF3FFFF      <1>     lea rdx, badParm
    11 000016AF EB2B                <1>     jmp short badCmn
    12                              <1> badDriveError:
    13 000016B1 488D15C9F2FFFF      <1>     lea rdx, badDrv
    14 000016B8 EB22                <1>     jmp short badCmn
    15                              <1> badArgError:
    16 000016BA 488D157AF5FFFF      <1>     lea rdx, badArgs
    17 000016C1 EB19                <1>     jmp short badCmn
    18                              <1> badFileError:
    19 000016C3 488D1555F5FFFF      <1>     lea rdx, badSpec
    20 000016CA EB10                <1>     jmp short badCmn
    21                              <1> badDupFnf:
    22                              <1> ;Hybrid error message
    23 000016CC 488D15BAF1FFFF      <1>     lea rdx, dupName
    24 000016D3 EB07                <1>     jmp short badCmn
    25                              <1> badDirError:
    26 000016D5 488D15E3F3FFFF      <1>     lea rdx, badDir
    27                              <1> badCmn:
    28 000016DC B800090000          <1>     mov eax, 0900h
    29 000016E1 CD21                <1>     int 21h
    30 000016E3 F9                  <1>     stc ;Return with CY => Error occured
    31                              <1>     return
    13                              <2> %%_ret:
    14 000016E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> 
    33                              <1> dir:
    34                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    35 000016E5 C605F8EDFFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    36 000016EC C605F2EDFFFF00      <1>     mov byte [dirLineCtr], 0
    37 000016F3 C605ECEDFFFF00      <1>     mov byte [dirFileCtr], 0
    38 000016FA C605E7EDFFFF00      <1>     mov byte [dirSrchDir], 0
    39 00001701 66C70558EDFFFF0000  <1>     mov word [searchSpec], 0
    40 0000170A 488D3D59EEFFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    41 00001711 C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    42 00001714 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    42 0000171D 3F                  <1>
    43 0000171E 48894701            <1>     mov qword [rdi + fcb.filename], rax
    44 00001722 C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    45                              <1>     ;Start by scanning for the switches
    46 00001729 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    47 00001730 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    48 00001733 E803160000          <1>     call skipDelimiters ;Skip leading delimiters
    49 00001738 4881C603000000      <1>     add rsi, 3  ;Go past the DIR
    50                              <1> .scanNew:
    51 0000173F E8F7150000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    52 00001744 AC                  <1>     lodsb   ;Get this char
    53 00001745 3C0D                <1>     cmp al, CR
    54 00001747 744D                <1>     je .scanDone
    55 00001749 3A05DDE8FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    56 0000174F 7524                <1>     jne .notSwitch
    57 00001751 AC                  <1>     lodsb   ;Get the next char
    58 00001752 E8D2150000          <1>     call ucChar
    59 00001757 3C57                <1>     cmp al, "W"
    60 00001759 7509                <1>     jne .notWide
    61 0000175B 800D82EDFFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    62 00001762 EBDB                <1>     jmp short .scanNew
    63                              <1> .notWide:
    64 00001764 3C50                <1>     cmp al, "P"
    65 00001766 0F853CFFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    66 0000176C 800D71EDFFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    67 00001773 EBCA                <1>     jmp short .scanNew
    68                              <1> .notSwitch:
    69 00001775 F60568EDFFFF04      <1>     test byte [dirFlags], dirFileType
    70 0000177C 0F8526FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    71                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    72 00001782 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    73 00001785 E81C170000          <1>     call copyArgumentToSearchSpec   
    74 0000178A 48FFCE              <1>     dec rsi ;Point back to the terminator char
    75 0000178D 800D50EDFFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    76 00001794 EBA9                <1>     jmp short .scanNew
    77                              <1> .scanDone:
    78 00001796 F60547EDFFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    79 0000179D 7438                <1>     jz .currentDrv
    80                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
    81 0000179F 488D35BCECFFFF      <1>     lea rsi, searchSpec
    82 000017A6 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
    83 000017AA 752B                <1>     jne .currentDrv
    84                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
    85 000017AC 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
    86 000017B1 498D785C            <1>     lea rdi, qword [r8 + fcb1]
    87 000017B5 B801290000          <1>     mov eax, 2901h   ;Parse filename
    88 000017BA CD21                <1>     int 21h
    89 000017BC 3CFF                <1>     cmp al, -1
    90 000017BE 0F84EDFEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
    91                              <1>     ;Else the drive in the fcb is valid
    92 000017C4 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
    93 000017C9 84C0                <1>     test al, al
    94 000017CB 740A                <1>     jz .currentDrv
    95 000017CD FEC8                <1>     dec al  ;Convert to 0 based drive number
    96 000017CF 880512EDFFFF        <1>     mov byte [dirDrv], al
    97 000017D5 EB0B                <1>     jmp short .dirPrintVol
    98                              <1> .currentDrv:
    99 000017D7 E836150000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   100 000017DC 880505EDFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   101                              <1> .dirPrintVol:
   102 000017E2 488D3579ECFFFF      <1>     lea rsi, searchSpec
   103                              <1> ;Now construct the path on dirSrchDir.
   104 000017E9 488D3DF8ECFFFF      <1>     lea rdi, dirSrchDir
   105 000017F0 0FB605F0ECFFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   106 000017F7 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   107 000017F9 0441                <1>     add al, "A" ;Turn into a letter
   108 000017FB B43A                <1>     mov ah, ":"
   109 000017FD 66AB                <1>     stosw   ;Store X: into the search path
   110 000017FF B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   111 00001804 CD2F                <1>     int 2fh
   112 00001806 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   113 00001808 0F84A3FEFFFF        <1>     je badDriveError
   114                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   115 0000180E 8A0517E8FFFF        <1>     mov al, byte [pathSep]
   116 00001814 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   117 00001816 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   118 00001818 AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   119 00001819 FEC2                <1>     inc dl  ;Increment by 1
   120 0000181B 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   121 0000181E B800470000          <1>     mov eax, 4700h  ;Print current working directory
   122 00001823 CD21                <1>     int 21h
   123 00001825 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   124                              <1>     ;rsi points to the first char in the provided path.
   125                              <1>     ;rdi points to the first char of the cwd.
   126 00001828 31C0                <1>     xor eax, eax
   127                              <1> .goToEndOfCwd:
   128                              <1> ;Move to the end of the string, could use repne?
   129 0000182A 3807                <1>     cmp byte [rdi], al
   130 0000182C 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   131 0000182E 48FFC7              <1>     inc rdi
   132 00001831 EBF7                <1>     jmp short .goToEndOfCwd
   133                              <1> .prepCopy:
   134 00001833 8A05F2E7FFFF        <1>     mov al, byte [pathSep]
   135 00001839 3806                <1>     cmp byte [rsi], al
   136 0000183B 7412                <1>     je .copyPathLoop
   137 0000183D B43A                <1>     mov ah, ":"
   138 0000183F 86C4                <1>     xchg al, ah
   139 00001841 663947FE            <1>     cmp word [rdi - 2], ax
   140 00001845 7408                <1>     je .copyPathLoop
   141 00001847 88E0                <1>     mov al, ah
   142 00001849 3847FF              <1>     cmp byte [rdi - 1], al
   143 0000184C 7401                <1>     je .copyPathLoop
   144 0000184E AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   145                              <1> .copyPathLoop:
   146 0000184F AC                  <1>     lodsb
   147 00001850 3A05D5E7FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   148 00001856 7509                <1>     jne .checkDot  ;If not, store it
   149                              <1> .lpPathseps:
   150 00001858 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   151 0000185A 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   152 0000185C 48FFC6              <1>     inc rsi
   153 0000185F EBF7                <1>     jmp short .lpPathseps
   154                              <1> .checkDot:
   155 00001861 3C2E                <1>     cmp al, "."
   156 00001863 7407                <1>     je .dots
   157                              <1> .store:
   158 00001865 AA                  <1>     stosb
   159 00001866 84C0                <1>     test al, al ;Was the char we just copied a null?
   160 00001868 7472                <1>     jz .exitPathCopy
   161 0000186A EBE3                <1>     jmp short .copyPathLoop
   162                              <1> .dots:
   163                              <1>     ;Here handle dot and dot dot
   164                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   165                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   166                              <1>     ; by 1. If it is null, go to top of loop.
   167                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   168 0000186C 8A25B9E7FFFF        <1>     mov ah, byte [pathSep]
   169 00001872 3867FF              <1>     cmp byte [rdi - 1], ah  
   170 00001875 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   171 00001877 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   172 00001879 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   173 0000187C 7413                <1>     je .twoDot
   174                              <1>     ;This is only a "current dir" when next char is pathsep or null
   175 0000187E 3A25A7E7FFFF        <1>     cmp ah, byte [pathSep]
   176 00001884 7406                <1>     je .skipThisPathsep
   177 00001886 84E4                <1>     test ah, ah
   178 00001888 74C5                <1>     jz .copyPathLoop
   179 0000188A EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   180                              <1> .skipThisPathsep:
   181                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   182 0000188C 48FFC6              <1>     inc rsi ;Point to the pathsep
   183 0000188F EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   184                              <1> .twoDot:
   185                              <1>     ;Woohoo, this works!
   186 00001891 48FFC6              <1>     inc rsi ;Move past the second dot
   187 00001894 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   188 00001896 3A258FE7FFFF        <1>     cmp ah, byte [pathSep]
   189 0000189C 7408                <1>     je .tdOk
   190 0000189E 84E4                <1>     test ah, ah
   191 000018A0 0F8502FEFFFF        <1>     jne badParamError
   192                              <1> .tdOk:
   193 000018A6 8A057FE7FFFF        <1>     mov al, byte byte [pathSep]
   194 000018AC 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   195 000018B0 0F84F2FDFFFF        <1>     je badParamError
   196 000018B6 4881EF02000000      <1>     sub rdi, 2
   197 000018BD 31C9                <1>     xor ecx, ecx
   198 000018BF FFC9                <1>     dec ecx
   199 000018C1 FD                  <1>     std
   200 000018C2 F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   201 000018C4 FC                  <1>     cld
   202 000018C5 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   203 000018CC 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   204 000018CE 0F847BFFFFFF        <1>     jz .copyPathLoop
   205 000018D4 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   206 000018D7 E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   207                              <1> .exitPathCopy:
   208                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   209 000018DC 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   210 000018E3 8A0542E7FFFF        <1>     mov al, byte [pathSep]
   211 000018E9 B43A                <1>     mov ah, ":"
   212 000018EB 86C4                <1>     xchg al, ah
   213 000018ED 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   214 000018F1 7409                <1>     je .skipOverwrite
   215 000018F3 88E0                <1>     mov al, ah
   216 000018F5 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   217 000018F7 7503                <1>     jne .skipOverwrite
   218 000018F9 C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   219                              <1> .skipOverwrite:
   220 000018FC 488D35E5EBFFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   221 00001903 4889F7              <1>     mov rdi, rsi
   222 00001906 B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   223 0000190B CD2F                <1>     int 2fh
   224 0000190D E8AA150000          <1>     call scanForWildcards
   225 00001912 742F                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   226 00001914 4889F2              <1>     mov rdx, rsi
   227 00001917 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   228 0000191B 7426                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   229                              <1> .notNull:
   230 0000191D E861160000          <1>     call setDTA ;Set the DTA
   231 00001922 B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   232 00001927 B44E                <1>     mov ah, 4Eh ;Find first
   233 00001929 CD21                <1>     int 21h
   234 0000192B 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   235                              <1> ;Now we have searched for the file, is a directory?
   236 0000192D F605B1E7FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   237 00001934 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   238                              <1>     ;Here we are searching IN a directory. Default search pattern!
   239 00001936 31C0                <1>     xor eax, eax
   240 00001938 31C9                <1>     xor ecx, ecx
   241 0000193A FFC9                <1>     dec ecx
   242 0000193C F2AE                <1>     repne scasb
   243 0000193E 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   244 00001941 EB40                <1>     jmp short .wcDefaultSearch
   245                              <1> .wcSearchPattern:
   246                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   247                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   248 00001943 31C0                <1>     xor eax, eax
   249 00001945 31C9                <1>     xor ecx, ecx
   250 00001947 FFC9                <1>     dec ecx
   251 00001949 F2AE                <1>     repne scasb ;Scan forwards
   252                              <1>     ;Here rdi points past the null at the end
   253 0000194B 8A05DAE6FFFF        <1>     mov al, byte [pathSep]
   254 00001951 31C9                <1>     xor ecx, ecx
   255 00001953 FFC9                <1>     dec ecx
   256 00001955 FD                  <1>     std ;Search backwards
   257 00001956 F2AE                <1>     repne scasb
   258 00001958 FC                  <1>     cld ;Search forwards again
   259 00001959 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   260 0000195C 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   261 00001960 7503                <1>     jne .wcsp1
   262 00001962 48FFC7              <1>     inc rdi ;Go one char forwards
   263                              <1> .wcsp1:
   264                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   265 00001965 57                  <1>     push rdi
   266 00001966 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   267 00001968 7503                <1>     jne .wcsp2
   268 0000196A 48FFC7              <1>     inc rdi
   269                              <1> .wcsp2:
   270 0000196D 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   271 00001970 488D3DF3EBFFFF      <1>     lea rdi, dirSrchFCB
   272 00001977 B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   273 0000197C CD21                <1>     int 21h
   274 0000197E 5F                  <1>     pop rdi
   275 0000197F 31C0                <1>     xor eax, eax
   276 00001981 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   277                              <1> .wcDefaultSearch:
   278 00001983 0FB6055DEBFFFF      <1>     movzx eax, byte [dirDrv] 
   279 0000198A E8610C0000          <1>     call volume.dirEP
   280 0000198F 488D1591F1FFFF      <1>     lea rdx, dirMain    ;Print message intro
   281 00001996 B409                <1>     mov ah, 09h
   282 00001998 CD21                <1>     int 21h
   283 0000199A C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   284 0000199D 488D1544EBFFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   285 000019A4 B409                <1>     mov ah, 09h
   286 000019A6 CD21                <1>     int 21h
   287 000019A8 C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   288 000019AB 488D1566EEFFFF      <1>     lea rdx, crlf2
   289 000019B2 B409                <1>     mov ah, 09h
   290 000019B4 CD21                <1>     int 21h
   291                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   292                              <1> ;rdi points to the terminating null
   293 000019B6 8A056FE6FFFF        <1>     mov al, byte [pathSep]
   294 000019BC 3847FF              <1>     cmp byte [rdi - 1], al
   295 000019BF 7403                <1>     je .root
   296 000019C1 48FFC7              <1>     inc rdi
   297                              <1> .root:
   298 000019C4 48FFCF              <1>     dec rdi ;Point back to the pathsep
   299 000019C7 AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   300 000019C8 488D359CEBFFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   301 000019CF E83A140000          <1>     call FCBToAsciiz    ;Terminates for free
   302 000019D4 E801000000          <1>     call .searchForFile
   303                              <1>     return
    13                              <2> %%_ret:
    14 000019D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   304                              <1> 
   305                              <1> .searchForFile:
   306 000019DA E8A4150000          <1>     call setDTA
   307 000019DF 4C8D15EAE6FFFF      <1>     lea r10, cmdFFBlock
   308 000019E6 B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   309 000019EB 488D15F6EAFFFF      <1>     lea rdx, dirSrchDir
   310 000019F2 B44E                <1>     mov ah, 4Eh ;Find first
   311 000019F4 CD21                <1>     int 21h
   312 000019F6 720B                <1>     jc .dirNoMoreFiles
   313                              <1> .findNext:
   314 000019F8 E878000000          <1>     call .dirPrintFileData  ;Print the file information
   315 000019FD B44F                <1>     mov ah, 4Fh
   316 000019FF CD21                <1>     int 21h
   317 00001A01 73F5                <1>     jnc .findNext 
   318                              <1> .dirNoMoreFiles:
   319 00001A03 F605DAEAFFFF01      <1>     test byte [dirFlags], dirWideType
   320 00001A0A 740B                <1>     jz .dirNoEndNewLine
   321 00001A0C 488D1502EEFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   322 00001A13 B409                <1>     mov ah, 09h
   323 00001A15 CD21                <1>     int 21h
   324                              <1> .dirNoEndNewLine:
   325                              <1>     ;Now we print the number of files and the number of bytes on the disk
   326 00001A17 488D15C1F3FFFF      <1>     lea rdx, fourSpc
   327 00001A1E B409                <1>     mov ah, 09h
   328 00001A20 CD21                <1>     int 21h
   329 00001A22 B409                <1>     mov ah, 09h ;Print four Spaces twice
   330 00001A24 CD21                <1>     int 21h
   331 00001A26 0FB605B9EAFFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   332 00001A2D E89E140000          <1>     call printDecimalWord
   333 00001A32 488D1527EFFFFF      <1>     lea rdx, dirOk
   334 00001A39 B409                <1>     mov ah, 09h
   335 00001A3B CD21                <1>     int 21h
   336 00001A3D 488D15A0F3FFFF      <1>     lea rdx, threeSpc
   337 00001A44 B409                <1>     mov ah, 09h
   338 00001A46 CD21                <1>     int 21h
   339 00001A48 B800360000          <1>     mov eax, 3600h ;Get disk info
   340 00001A4D 8A1594EAFFFF        <1>     mov dl, byte [dirDrv]
   341 00001A53 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   342 00001A55 CD21                <1>     int 21h ;Get disk free space info
   343 00001A57 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   344 00001A5A 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   345 00001A5D 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   346 00001A5F F7E1                <1>     mul ecx ;Get bytes per cluster
   347 00001A61 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   348                              <1>     ;rax now has the number of free bytes on the disk
   349 00001A64 E867140000          <1>     call printDecimalWord
   350 00001A69 488D15FAEEFFFF      <1>     lea rdx, bytesOk
   351 00001A70 B409                <1>     mov ah, 09h
   352 00001A72 CD21                <1>     int 21h
   353                              <1>     return
    13                              <2> %%_ret:
    14 00001A74 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   354                              <1> 
   355                              <1> .dirPrintFileData:
   356                              <1> ;Use fcbCmdSpec to build the file name with space
   357                              <1> ;Start by print the name (same for both cases)
   358                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   359 00001A75 F60569E6FFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   360                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001A7C 75(74)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   361 00001A7E 488D3569E6FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   362 00001A85 488D3D64E8FFFF      <1>     lea rdi, fcbCmdSpec
   363 00001A8C E833130000          <1>     call asciiFilenameToFCB
   364 00001A91 488D1558E8FFFF      <1>     lea rdx, fcbCmdSpec
   365 00001A98 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   366 00001A9D BB01000000          <1>     mov ebx, 1  ;STDOUT
   367 00001AA2 B440                <1>     mov ah, 40h ;Write handle
   368 00001AA4 CD21                <1>     int 21h
   369 00001AA6 52                  <1>     push rdx
   370 00001AA7 B220                <1>     mov dl, " "
   371 00001AA9 B402                <1>     mov ah, 02h ;Print char
   372 00001AAB CD21                <1>     int 21h
   373 00001AAD 5A                  <1>     pop rdx
   374 00001AAE 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   375 00001AB5 B903000000          <1>     mov ecx, 3  ;Print three chars
   376 00001ABA BB01000000          <1>     mov ebx, 1  ;STDOUT
   377 00001ABF B440                <1>     mov ah, 40h ;Write handle
   378 00001AC1 CD21                <1>     int 21h
   379 00001AC3 F6051AEAFFFF01      <1>     test byte [dirFlags], dirWideType
   380 00001ACA 0F85A8000000        <1>     jnz .widePrint
   381                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   382                              <1>     ;Now check if a DIR
   383 00001AD0 F6050EE6FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   384 00001AD7 7418                <1>     jz .dirPrintNotDir
   385 00001AD9 488D1598EEFFFF      <1>     lea rdx, dirLbl
   386 00001AE0 B409                <1>     mov ah, 09h
   387 00001AE2 CD21                <1>     int 21h
   388 00001AE4 488D15F9F2FFFF      <1>     lea rdx, threeSpc
   389 00001AEB B409                <1>     mov ah, 09h
   390 00001AED CD21                <1>     int 21h
   391 00001AEF EB4F                <1>     jmp short .dirPrintFileDT
   392                              <1> .dirPrintNotDir:
   393                              <1> ;Here we print the file size
   394 00001AF1 B220                <1>     mov dl, " "
   395 00001AF3 B402                <1>     mov ah, 02h
   396 00001AF5 CD21                <1>     int 21h
   397 00001AF7 8B05EDE5FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   398 00001AFD E83F140000          <1>     call getDecimalWord
   399 00001B02 4889CB              <1>     mov rbx, rcx
   400 00001B05 51                  <1>     push rcx
   401 00001B06 480FCB              <1>     bswap rbx
   402 00001B09 B908000000          <1>     mov ecx, 8
   403                              <1> .dirPrintFileSizePrep:
   404 00001B0E 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   405 00001B10 7514                <1>     jne .dirPrintFileSize
   406 00001B12 B402                <1>     mov ah, 02h
   407 00001B14 B220                <1>     mov dl, " "
   408 00001B16 CD21                <1>     int 21h
   409 00001B18 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   410 00001B1C FFC9                <1>     dec ecx
   411 00001B1E 81F901000000        <1>     cmp ecx, 1
   412 00001B24 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   413                              <1> .dirPrintFileSize:
   414 00001B26 5B                  <1>     pop rbx
   415                              <1> .dirPrintFileSizeLoop:
   416 00001B27 88DA                <1>     mov dl, bl
   417 00001B29 B402                <1>     mov ah, 02h
   418 00001B2B CD21                <1>     int 21h
   419 00001B2D 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   420 00001B31 FFC9                <1>     dec ecx
   421 00001B33 75F2                <1>     jnz .dirPrintFileSizeLoop
   422 00001B35 488D15ACF2FFFF      <1>     lea rdx, twoSpc
   423 00001B3C B409                <1>     mov ah, 09h
   424 00001B3E CD21                <1>     int 21h
   425                              <1> .dirPrintFileDT:
   426 00001B40 B220                <1>     mov dl, " "
   427 00001B42 B402                <1>     mov ah, 02h
   428 00001B44 CD21                <1>     int 21h
   429 00001B46 0FB7059BE5FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   430 00001B4D 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   431 00001B4F E8140F0000          <1>     call printDate
   432 00001B54 488D158DF2FFFF      <1>     lea rdx, twoSpc
   433 00001B5B B409                <1>     mov ah, 09h
   434 00001B5D CD21                <1>     int 21h
   435 00001B5F 0FB70580E5FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   436 00001B66 E81F100000          <1>     call printTime
   437 00001B6B 488D15A3ECFFFF      <1>     lea rdx, crlf
   438 00001B72 B409                <1>     mov ah, 09h
   439 00001B74 CD21                <1>     int 21h
   440 00001B76 EB0B                <1>     jmp short .dirPrintNameExit
   441                              <1> .widePrint:
   442                              <1> ;If /W, print name space ext space space space space
   443 00001B78 488D1560F2FFFF      <1>     lea rdx, fourSpc
   444 00001B7F B409                <1>     mov ah, 09h ;Print string
   445 00001B81 CD21                <1>     int 21h
   446                              <1> .dirPrintNameExit:
   447 00001B83 FE055DE9FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   448 00001B89 FE0556E9FFFF        <1>     inc byte [dirLineCtr]
   449 00001B8F 803D4FE9FFFF17      <1>     cmp byte [dirLineCtr], 23
   450                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001B96 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001B98 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   451 00001B99 488D15FFEDFFFF      <1>     lea rdx, pauseMes
   452 00001BA0 B409                <1>     mov ah, 09h
   453 00001BA2 CD21                <1>     int 21h
   454 00001BA4 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   455 00001BA6 CD21                <1>     int 21h
   456 00001BA8 C60536E9FFFF00      <1>     mov byte [dirLineCtr], 0
   457 00001BAF 488D155FECFFFF      <1>     lea rdx, crlf   ;Force new line
   458 00001BB6 B409                <1>     mov ah, 09h
   459 00001BB8 CD21                <1>     int 21h
   460                              <1>     return
    13                              <2> %%_ret:
    14 00001BBA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   461                              <1> 
   462                              <1> chdir:
   463 00001BBB F605F8E4FFFFFF      <1>     test byte [arg1Flg], -1
   464 00001BC2 754D                <1>     jnz .changeDir
   465                              <1>     ;Print CWD
   466                              <1> .printCWD:
   467 00001BC4 E8A2100000          <1>     call putCWDInPrompt ;Exactly the same procedure
   468 00001BC9 E8840E0000          <1>     call printCRLF
   469                              <1>     return
    13                              <2> %%_ret:
    14 00001BCE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   470                              <1> .printDiskCWD:
   471                              <1> ;Print CWD for a specified drive
   472 00001BCF 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   473 00001BD3 88D0                <1>     mov al, dl
   474 00001BD5 0440                <1>     add al, "@" ;Get the UC letter
   475 00001BD7 B43A                <1>     mov ah, ":"
   476 00001BD9 488D3D82E8FFFF      <1>     lea rdi, searchSpec
   477 00001BE0 66AB                <1>     stosw   ;Store X:, rdi+=2
   478 00001BE2 8A0543E4FFFF        <1>     mov al, byte [pathSep]
   479 00001BE8 AA                  <1>     stosb   ;Store pathSep, inc rdi
   480 00001BE9 B447                <1>     mov ah, 47h ;Get Current Working Directory
   481 00001BEB 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   482 00001BEE CD21                <1>     int 21h
   483 00001BF0 E822110000          <1>     call strlen
   484 00001BF5 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   485 00001BFB B440                <1>     mov ah, 40h ;Write to handle
   486 00001BFD BB01000000          <1>     mov ebx, 1  ;STDOUT
   487 00001C02 488D1559E8FFFF      <1>     lea rdx, searchSpec
   488 00001C09 CD21                <1>     int 21h
   489 00001C0B E8420E0000          <1>     call printCRLF
   490                              <1>     return
    13                              <2> %%_ret:
    14 00001C10 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   491                              <1> .changeDir:
   492 00001C11 8A05A5E4FFFF        <1>     mov al, byte [arg1FCBret]
   493 00001C17 3CFF                <1>     cmp al, -1 
   494 00001C19 0F8492FAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   495 00001C1F E86A120000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   496 00001C24 488D1537E8FFFF      <1>     lea rdx, searchSpec
   497 00001C2B B43B                <1>     mov ah, 3Bh ;CHDIR
   498 00001C2D CD21                <1>     int 21h
   499 00001C2F 0F82A0FAFFFF        <1>     jc badDirError
   500                              <1>     return
    13                              <2> %%_ret:
    14 00001C35 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   501                              <1> 
   502                              <1> mkdir:
   503 00001C36 F6057DE4FFFFFF      <1>     test byte [arg1Flg], -1
   504 00001C3D 0F8477FAFFFF        <1>     jz badArgError
   505 00001C43 F60573E4FFFFFF      <1>     test byte [arg2Flg], -1
   506 00001C4A 0F856AFAFFFF        <1>     jnz badArgError
   507                              <1>     ;We have exactly one argument
   508 00001C50 8A0566E4FFFF        <1>     mov al, byte [arg1FCBret]
   509 00001C56 3CFF                <1>     cmp al, -1 
   510 00001C58 0F8453FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   511 00001C5E E82B120000          <1>     call buildCommandPath
   512 00001C63 488D15F8E7FFFF      <1>     lea rdx, searchSpec
   513 00001C6A B800390000          <1>     mov eax, 3900h  ;MKDIR
   514 00001C6F CD21                <1>     int 21h
   515                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001C71 73(35)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   516                              <1> .badMake:   ;Else, bad make
   517 00001C73 488D1559EEFFFF      <1>     lea rdx, badMD
   518 00001C7A B800090000          <1>     mov eax, 0900h
   519 00001C7F CD21                <1>     int 21h
   520                              <1>     return
    13                              <2> %%_ret:
    14 00001C81 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   521                              <1> 
   522                              <1> rmdir:
   523 00001C82 F60531E4FFFFFF      <1>     test byte [arg1Flg], -1
   524 00001C89 0F842BFAFFFF        <1>     jz badArgError
   525 00001C8F F60527E4FFFFFF      <1>     test byte [arg2Flg], -1
   526 00001C96 0F851EFAFFFF        <1>     jnz badArgError
   527                              <1>     ;We have exactly one argument
   528 00001C9C 8A051AE4FFFF        <1>     mov al, byte [arg1FCBret]
   529 00001CA2 3CFF                <1>     cmp al, -1 
   530 00001CA4 0F8407FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   531 00001CAA E8DF110000          <1>     call buildCommandPath
   532 00001CAF 488D15ACE7FFFF      <1>     lea rdx, searchSpec
   533 00001CB6 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   534 00001CBB CD21                <1>     int 21h
   535                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001CBD 73(81)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   536                              <1> .badRemove:   ;Else, bad make
   537 00001CBF 488D152AEEFFFF      <1>     lea rdx, badRD
   538 00001CC6 B800090000          <1>     mov eax, 0900h
   539 00001CCB CD21                <1>     int 21h
   540                              <1>     return
    13                              <2> %%_ret:
    14 00001CCD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   541                              <1> 
   542                              <1> copy:
   543 00001CCE F605E5E3FFFFFF      <1>     test byte [arg1Flg], -1
   544 00001CD5 0F84DFF9FFFF        <1>     jz badArgError
   545 00001CDB F605DBE3FFFFFF      <1>     test byte [arg2Flg], -1
   546 00001CE2 0F84D2F9FFFF        <1>     jz badArgError
   547 00001CE8 0FB605CCE3FFFF      <1>     movzx eax, byte [arg1Off]
   548 00001CEF 4C8B0519E3FFFF      <1>     mov r8, [pspPtr]
   549 00001CF6 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   550 00001CFD 4889F3              <1>     mov rbx, rsi    ;Save the ptr to the start of the string in rbx
   551 00001D00 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   552 00001D03 488D3DA0E8FFFF      <1>     lea rdi, sourcePath
   553 00001D0A E83F110000          <1>     call cpDelimPathToBufz    
   554 00001D0F 0FB605A8E3FFFF      <1>     movzx eax, byte [arg2Off]
   555 00001D16 4889DE              <1>     mov rsi, rbx    ;Get back the start of the ptr
   556 00001D19 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   557 00001D1C 488D3D09E9FFFF      <1>     lea rdi, destPath
   558 00001D23 E826110000          <1>     call cpDelimPathToBufz   
   559                              <1> ;Before we open, we check if the two filenames are equal
   560                              <1> ; If so, crap out.
   561 00001D28 488D357BE8FFFF      <1>     lea rsi, sourcePath
   562 00001D2F 488D3DF6E8FFFF      <1>     lea rdi, destPath
   563 00001D36 B81E120000          <1>     mov eax, 121Eh
   564 00001D3B CD2F                <1>     int 2Fh
   565 00001D3D 0F84D3000000        <1>     jz .sameFilename
   566                              <1>     ;Open source with read permission
   567                              <1>     ;Open destination with write permission
   568 00001D43 488D1560E8FFFF      <1>     lea rdx, sourcePath
   569 00001D4A B8003D0000          <1>     mov eax, 3D00h  ;Read open
   570 00001D4F CD21                <1>     int 21h
   571 00001D51 0F8251F9FFFF        <1>     jc badParamError
   572 00001D57 66890550E9FFFF      <1>     mov word [sourceHdl], ax
   573                              <1> 
   574 00001D5E 0FB7D8              <1>     movzx ebx, ax   ;For bx
   575 00001D61 B800440000          <1>     mov eax, 4400h  ;Get device info in dx
   576 00001D66 CD21                <1>     int 21h
   577 00001D68 66891543E9FFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
   578                              <1> 
   579 00001D6F 488D15B6E8FFFF      <1>     lea rdx, destPath
   580 00001D76 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   581 00001D7B 31C9                <1>     xor ecx, ecx    ;No file attributes
   582 00001D7D CD21                <1>     int 21h
   583 00001D7F 0F82B8000000        <1>     jc .badExit
   584 00001D85 66890524E9FFFF      <1>     mov word [destHdl], ax
   585 00001D8C 31F6                <1>     xor esi, esi
   586 00001D8E 488D151FE9FFFF      <1>     lea rdx, copyBuffer
   587                              <1> .copyLoop:
   588 00001D95 B980000000          <1>     mov ecx, 128
   589 00001D9A 0FB71D0DE9FFFF      <1>     movzx ebx, word [sourceHdl]
   590 00001DA1 B43F                <1>     mov ah, 3Fh ;Read
   591 00001DA3 CD21                <1>     int 21h
   592 00001DA5 0F8292000000        <1>     jc .badExit
   593 00001DAB 85C0                <1>     test eax, eax
   594 00001DAD 743A                <1>     jz .okExit
   595 00001DAF 01C6                <1>     add esi, eax
   596 00001DB1 89C1                <1>     mov ecx, eax
   597 00001DB3 0FB71DF6E8FFFF      <1>     movzx ebx, word [destHdl]
   598 00001DBA B440                <1>     mov ah, 40h ;Write
   599 00001DBC CD21                <1>     int 21h
   600 00001DBE 727D                <1>     jc .badExit
   601 00001DC0 3D80000000          <1>     cmp eax, 128    ;Did we read 128 chars?
   602 00001DC5 74CE                <1>     je .copyLoop
   603                              <1>     ;If not char dev, exit
   604 00001DC7 66F705E2E8FFFF8000  <1>     test word [srcHdlInfo], 80h ;Char dev bit set?
   605 00001DD0 7417                <1>     jz .okExit
   606                              <1>     ;Is handle in cooked or binary mode?
   607 00001DD2 66F705D7E8FFFF2000  <1>     test word [srcHdlInfo], 20h
   608 00001DDB 750C                <1>     jnz .okExit
   609                              <1>     ;Here the char dev must be in cooked mode. Check if the last char was ^Z
   610 00001DDD 09C0                <1>     or eax, eax ;Clear upper bits in eax
   611 00001DDF 488D7C02FF          <1>     lea rdi, qword [rdx + rax - 1]  ;Point to the last char in the buffer
   612 00001DE4 803F1A              <1>     cmp byte [rdi], EOF ;Was this EOF?
   613 00001DE7 75AC                <1>     jne .copyLoop   ;Jump if not
   614                              <1> .okExit:
   615 00001DE9 E832000000          <1>     call .leaveCopyClose
   616 00001DEE 488D1520EAFFFF      <1>     lea rdx, crlf
   617 00001DF5 B409                <1>     mov ah, 09h
   618 00001DF7 CD21                <1>     int 21h
   619 00001DF9 488D15DFEFFFFF      <1>     lea rdx, fourSpc
   620 00001E00 B409                <1>     mov ah, 09h
   621 00001E02 CD21                <1>     int 21h
   622 00001E04 B402                <1>     mov ah, 02h
   623 00001E06 B231                <1>     mov dl, "1" ;1 File(s) copied
   624 00001E08 CD21                <1>     int 21h
   625 00001E0A 488D153DEBFFFF      <1>     lea rdx, copyOk
   626 00001E11 B409                <1>     mov ah, 09h
   627 00001E13 CD21                <1>     int 21h
   628                              <1>     return
    13                              <2> %%_ret:
    14 00001E15 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   629                              <1> .sameFilename:
   630 00001E16 E805000000          <1>     call .leaveCopyClose ;Close the handles
   631 00001E1B E97FF8FFFF          <1>     jmp noSelfCopyError
   632                              <1> .leaveCopyClose:
   633 00001E20 668B1D87E8FFFF      <1>     mov bx, word [sourceHdl]
   634 00001E27 B8003E0000          <1>     mov eax, 3E00h
   635 00001E2C CD21                <1>     int 21h
   636 00001E2E 668B1D7BE8FFFF      <1>     mov bx, word [destHdl]
   637 00001E35 B8003E0000          <1>     mov eax, 3E00h
   638 00001E3A CD21                <1>     int 21h
   639                              <1>     return
    13                              <2> %%_ret:
    14 00001E3C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   640                              <1> .badExit:
   641                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   642 00001E3D 668B1D6AE8FFFF      <1>     mov bx, word [sourceHdl]
   643 00001E44 6681FBFFFF          <1>     cmp bx, -1
   644 00001E49 7407                <1>     je .skipSource
   645 00001E4B B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   646 00001E50 CD21                <1>     int 21h
   647                              <1> .skipSource:
   648 00001E52 668B1D57E8FFFF      <1>     mov bx, word [destHdl]
   649 00001E59 6681FBFFFF          <1>     cmp bx, -1
   650 00001E5E 0F8444F8FFFF        <1>     je badParamError
   651 00001E64 B8003E0000          <1>     mov eax, 3E00h
   652 00001E69 CD21                <1>     int 21h
   653 00001E6B E938F8FFFF          <1>     jmp badParamError
   654                              <1> 
   655                              <1> erase:
   656 00001E70 F60543E2FFFFFF      <1>     test byte [arg1Flg], -1
   657 00001E77 0F843DF8FFFF        <1>     jz badArgError
   658 00001E7D E80C100000          <1>     call buildCommandPath
   659 00001E82 488D15D9E5FFFF      <1>     lea rdx, searchSpec
   660 00001E89 B800410000          <1>     mov eax, 4100h  ;Delete File 
   661 00001E8E 31C9                <1>     xor ecx, ecx
   662 00001E90 CD21                <1>     int 21h
   663 00001E92 0F8222F8FFFF        <1>     jc badArgError
   664                              <1>     return
    13                              <2> %%_ret:
    14 00001E98 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   665                              <1> date:
   666 00001E99 488D1556EBFFFF      <1>     lea rdx, curDate
   667 00001EA0 B409                <1>     mov ah, 09h
   668 00001EA2 CD21                <1>     int 21h
   669 00001EA4 B42A                <1>     mov ah, 2Ah ;DOS get date
   670 00001EA6 CD21                <1>     int 21h
   671                              <1> 	;AL = day of the week (0=Sunday)
   672                              <1> 	;CX = year (1980-2099)
   673                              <1> 	;DH = month (1-12)
   674                              <1> 	;DL = day (1-31)
   675 00001EA8 66890DF7E6FFFF      <1>     mov word [td1], cx
   676 00001EAF 8815F3E6FFFF        <1>     mov byte [td3], dl
   677 00001EB5 8835EEE6FFFF        <1>     mov byte [td4], dh
   678 00001EBB 0FB6C0              <1>     movzx eax, al
   679 00001EBE 89C3                <1>     mov ebx, eax
   680 00001EC0 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   681 00001EC2 01D8                <1>     add eax, ebx ;Make it 3 times 
   682 00001EC4 488D1507EBFFFF      <1>     lea rdx, dayName
   683 00001ECB 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   684 00001ECF B903000000          <1>     mov ecx, 3  ;Print three chars
   685 00001ED4 BB01000000          <1>     mov ebx, 1  ;STDOUT
   686 00001ED9 B440                <1>     mov ah, 40h ;Write to handle
   687 00001EDB CD21                <1>     int 21h
   688 00001EDD B220                <1>     mov dl, " "
   689 00001EDF B402                <1>     mov ah, 02h
   690 00001EE1 CD21                <1>     int 21h
   691                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   692                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   693                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   694 00001EE3 0FB705BCE6FFFF      <1>     movzx eax, word [td1]   ;Get this word
   695 00001EEA C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   696 00001EED 0FB61DB5E6FFFF      <1>     movzx ebx, byte [td4]
   697 00001EF4 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   698 00001EF7 09D8                <1>     or eax, ebx ;Add this date to eax
   699 00001EF9 0FB61DA8E6FFFF      <1>     movzx ebx, byte [td3]
   700 00001F00 09D8                <1>     or eax, ebx
   701 00001F02 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   702 00001F07 E85C0B0000          <1>     call printDate
   703                              <1> 
   704 00001F0C 488D15F4EAFFFF      <1>     lea rdx, newDate
   705 00001F13 B409                <1>     mov ah, 09h
   706 00001F15 CD21                <1>     int 21h
   707 00001F17 488D1508EBFFFF      <1>     lea rdx, ukDate
   708 00001F1E 488D05F4EAFFFF      <1>     lea rax, usDate
   709 00001F25 488D1D07EBFFFF      <1>     lea rbx, jpDate
   710 00001F2C 803D03E1FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   711 00001F33 480F47D3            <1>     cmova rdx, rbx
   712 00001F37 480F42D0            <1>     cmovb rdx, rax
   713 00001F3B B409                <1>     mov ah, 09h
   714 00001F3D CD21                <1>     int 21h
   715                              <1> 
   716 00001F3F 488D1557E2FFFF      <1>     lea rdx, inBuffer
   717 00001F46 C6027E              <1>     mov byte [rdx], 126 ;Enter a string of up to 126 chars in length
   718 00001F49 B40A                <1>     mov ah, 0Ah
   719 00001F4B CD21                <1>     int 21h
   720 00001F4D 52                  <1>     push rdx
   721 00001F4E 488D15C0E8FFFF      <1>     lea rdx, crlf
   722 00001F55 B409                <1>     mov ah, 09h
   723 00001F57 CD21                <1>     int 21h
   724 00001F59 5A                  <1>     pop rdx
   725 00001F5A 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   726                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001F5E 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001F60 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   727                              <1>     return
    13                              <2> %%_ret:
    14 00001F61 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   728                              <1> 
   729                              <1> time:
   730 00001F62 488D15E6EAFFFF      <1>     lea rdx, curTime
   731 00001F69 B409                <1>     mov ah, 09h
   732 00001F6B CD21                <1>     int 21h
   733 00001F6D B42C                <1>     mov ah, 2Ch ;DOS get time
   734 00001F6F CD21                <1>     int 21h
   735                              <1>     ;CH = hour (0-23)
   736                              <1> 	;CL = minutes (0-59)
   737                              <1> 	;DH = seconds (0-59)
   738                              <1> 	;DL = hundredths (0-99)
   739 00001F71 880D2FE6FFFF        <1>     mov byte [td1], cl
   740 00001F77 882D2AE6FFFF        <1>     mov byte [td2], ch
   741 00001F7D 881525E6FFFF        <1>     mov byte [td3], dl
   742 00001F83 883520E6FFFF        <1>     mov byte [td4], dh
   743 00001F89 0FB6C5              <1>     movzx eax, ch
   744 00001F8C E86B0C0000          <1>     call printTime.printHours
   745                              <1> 
   746 00001F91 8A15ACE0FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   747 00001F97 B402                <1>     mov ah, 02h
   748 00001F99 CD21                <1>     int 21h
   749                              <1> 
   750 00001F9B 0FB60504E6FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   751 00001FA2 E8450C0000          <1>     call printTime.printMinutesAlt
   752                              <1> 
   753 00001FA7 8A1596E0FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   754 00001FAD B402                <1>     mov ah, 02h
   755 00001FAF CD21                <1>     int 21h
   756                              <1> 
   757 00001FB1 0FB605F1E5FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   758 00001FB8 E82F0C0000          <1>     call printTime.printMinutesAlt
   759                              <1> 
   760 00001FBD B22E                <1>     mov dl, "."
   761 00001FBF B402                <1>     mov ah, 02h
   762 00001FC1 CD21                <1>     int 21h
   763                              <1> 
   764 00001FC3 0FB605DEE5FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   765 00001FCA E81D0C0000          <1>     call printTime.printMinutesAlt
   766                              <1> 
   767 00001FCF 488D158AEAFFFF      <1>     lea rdx, newTime
   768 00001FD6 B409                <1>     mov ah, 09h
   769 00001FD8 CD21                <1>     int 21h
   770                              <1> 
   771 00001FDA 488D15BCE1FFFF      <1>     lea rdx, inBuffer
   772 00001FE1 C6027E              <1>     mov byte [rdx], 126 ;Enter a string of up to 126 chars in length
   773 00001FE4 B40A                <1>     mov ah, 0Ah
   774 00001FE6 CD21                <1>     int 21h
   775 00001FE8 52                  <1>     push rdx
   776 00001FE9 488D1525E8FFFF      <1>     lea rdx, crlf
   777 00001FF0 B409                <1>     mov ah, 09h
   778 00001FF2 CD21                <1>     int 21h
   779 00001FF4 5A                  <1>     pop rdx
   780 00001FF5 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   781                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001FF9 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001FFB C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   782                              <1>     return
    13                              <2> %%_ret:
    14 00001FFC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   783                              <1> ctty:
   784 00001FFD F605B6E0FFFFFF      <1>     test byte [arg1Flg], -1
   785 00002004 0F84B0F6FFFF        <1>     jz badArgError
   786 0000200A F605ACE0FFFFFF      <1>     test byte [arg2Flg], -1
   787 00002011 0F85A3F6FFFF        <1>     jnz badArgError
   788 00002017 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   789 0000201E 0FB60596E0FFFF      <1>     movzx eax, byte [arg1Off]
   790 00002025 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   791 00002028 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   792 0000202C 750F                <1>     jne .noDrive
   793 0000202E 0FB60587E0FFFF      <1>     movzx eax, byte [arg1FCBret]
   794 00002035 3CFF                <1>     cmp al, -1
   795 00002037 0F8474F6FFFF        <1>     je badDriveError
   796                              <1> .noDrive:
   797                              <1>     ;Now we open the provided file
   798 0000203D E8640E0000          <1>     call copyArgumentToSearchSpec
   799 00002042 488D1519E4FFFF      <1>     lea rdx, searchSpec
   800 00002049 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   801 0000204E CD21                <1>     int 21h
   802 00002050 0F826DF6FFFF        <1>     jc badFileError
   803 00002056 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   804 00002059 B800440000          <1>     mov eax, 4400h  ;Get device word
   805 0000205E CD21                <1>     int 21h
   806 00002060 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   807 00002063 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   808                              <1>     ;Now we set this handle to be STDIO
   809 00002065 80CA03              <1>     or dl, 3    ;Set STDIO bits
   810 00002068 30F6                <1>     xor dh, dh
   811 0000206A B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   812 0000206F CD21                <1>     int 21h
   813                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   814 00002071 31C9                <1>     xor ecx, ecx    ;STDIN
   815 00002073 B446                <1>     mov ah, 46h
   816 00002075 CD21                <1>     int 21h
   817 00002077 FFC1                <1>     inc ecx         ;STDOUT
   818 00002079 B446                <1>     mov ah, 46h
   819 0000207B CD21                <1>     int 21h
   820 0000207D FFC1                <1>     inc ecx         ;STDERR
   821 0000207F B446                <1>     mov ah, 46h
   822 00002081 CD21                <1>     int 21h
   823 00002083 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   824 00002085 CD21                <1>     int 21h
   825                              <1>     return
    13                              <2> %%_ret:
    14 00002087 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   826                              <1> .badCharDev:
   827 00002088 488D15D0EAFFFF      <1>     lea rdx, badDev
   828 0000208F B409                <1>     mov ah, 09h
   829 00002091 CD21                <1>     int 21h
   830 00002093 B43E                <1>     mov ah, 3Eh ;Close opened handle
   831 00002095 CD21                <1>     int 21h
   832                              <1>     return
    13                              <2> %%_ret:
    14 00002097 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   833                              <1> 
   834                              <1> cls:  
   835 00002098 B800440000          <1>     mov eax, 4400h  ;Get device info
   836 0000209D BB01000000          <1>     mov ebx, 1      ;for handle 1
   837 000020A2 CD21                <1>     int 21h         ;in dx
   838 000020A4 F7C280000000        <1>     test edx, devCharDev
   839 000020AA 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   840 000020AC F7C210000000        <1>     test edx, charDevFastOut
   841 000020B2 743E                <1>     jz .doAnsi
   842                              <1>     ;Test if Int 29h uses Int 30h
   843                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   844                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
   845 000020B4 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
   846 000020B9 CD21                <1>     int 21h
   847                              <1> .biosCheck:
   848 000020BB 66813BCD30          <1>     cmp word [rbx], 30CDh
   849 000020C0 740C                <1>     je .biosConfirmed
   850 000020C2 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   851 000020C7 7429                <1>     je .doAnsi
   852 000020C9 48FFC3              <1>     inc rbx
   853 000020CC EBED                <1>     jmp short .biosCheck
   854                              <1> .biosConfirmed:
   855                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   856 000020CE B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   857 000020D0 31DB                <1>     xor ebx, ebx
   858 000020D2 CD30                <1>     int 30h
   859 000020D4 B40F                <1>     mov ah, 0Fh ;Get screen mode
   860 000020D6 CD30                <1>     int 30h
   861 000020D8 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   862 000020DB FECA                <1>     dec dl
   863 000020DD B619                <1>     mov dh, 25  ;Number of rows is standard
   864 000020DF 31C0                <1>     xor eax, eax
   865 000020E1 89C1                <1>     mov ecx, eax
   866 000020E3 B707                <1>     mov bh, 7   ;Screen attributes
   867 000020E5 B406                <1>     mov ah, 6   ;Scroll
   868 000020E7 CD30                <1>     int 30h
   869 000020E9 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   870 000020EB B700                <1>     mov bh, 0   ;Page 0
   871 000020ED B402                <1>     mov ah, 2
   872 000020EF CD30                <1>     int 30h
   873                              <1>     return
    13                              <2> %%_ret:
    14 000020F1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   874                              <1> .doAnsi:
   875                              <1> ;4 chars in the ansi routine
   876                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   877                              <1> ; understand ANSI codes
   878 000020F2 488D35E2ECFFFF      <1>     lea rsi, ansiCls
   879 000020F9 B904000000          <1>     mov ecx, 4
   880 000020FE B406                <1>     mov ah, 06h ;Raw char output
   881                              <1> .ansiLp:
   882 00002100 AC                  <1>     lodsb   ;Get the char in 
   883 00002101 88C2                <1>     mov dl, al
   884 00002103 CD21                <1>     int 21h
   885 00002105 FFC9                <1>     dec ecx
   886 00002107 75F7                <1>     jnz .ansiLp
   887                              <1>     return
    13                              <2> %%_ret:
    14 00002109 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   888                              <1> 
   889                              <1> break:
   890 0000210A F605A9DFFFFFFF      <1>     test byte [arg1Flg], -1
   891 00002111 752D                <1>     jnz .argumentProvided
   892                              <1>     ;Here we just get the status of break
   893 00002113 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   894 00002118 CD21                <1>     int 21h
   895 0000211A 88D3                <1>     mov bl, dl
   896 0000211C 488D15DEEAFFFF      <1>     lea rdx, breakIs
   897 00002123 B409                <1>     mov ah, 09h
   898 00002125 CD21                <1>     int 21h
   899 00002127 488D15CEEAFFFF      <1>     lea rdx, onMes
   900 0000212E 488D0DC1EAFFFF      <1>     lea rcx, offMes
   901 00002135 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   902 00002137 480F44D1            <1>     cmovz rdx, rcx
   903 0000213B B409                <1>     mov ah, 09h
   904 0000213D CD21                <1>     int 21h
   905                              <1>     return
    13                              <2> %%_ret:
    14 0000213F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   906                              <1> .argumentProvided:
   907 00002140 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   908 00002144 AD                  <1>     lodsd   ;Read the word
   909 00002145 89C3                <1>     mov ebx, eax
   910 00002147 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   911 0000214C C1EB10              <1>     shr ebx, 10h     ;Get high word low
   912 0000214F 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   913 00002154 7416                <1>     je .maybeOn
   914 00002156 663D4F46            <1>     cmp ax, "OF"
   915 0000215A 7523                <1>     jne .badOnOff
   916 0000215C 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   917 00002161 6681FB4620          <1>     cmp bx, "F "
   918 00002166 7517                <1>     jne .badOnOff
   919                              <1>     ;Set off
   920 00002168 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   921 0000216A EB0B                <1>     jmp short .setBreak
   922                              <1> .maybeOn:
   923 0000216C 663D4F4E            <1>     cmp ax, "ON"
   924 00002170 750D                <1>     jne .badOnOff
   925                              <1>     ;Set on
   926 00002172 BA01000000          <1>     mov edx, 1
   927                              <1> .setBreak:
   928 00002177 B801330000          <1>     mov eax, 3301h  ;Set break
   929 0000217C CD21                <1>     int 21h
   930                              <1>     return
    13                              <2> %%_ret:
    14 0000217E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   931                              <1> .badOnOff:
   932 0000217F 488D1565ECFFFF      <1>     lea rdx, badOnOff
   933 00002186 B409                <1>     mov ah, 09h
   934 00002188 CD21                <1>     int 21h
   935                              <1>     return
    13                              <2> %%_ret:
    14 0000218A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   936                              <1> 
   937                              <1> verify:
   938 0000218B F60528DFFFFFFF      <1>     test byte [arg1Flg], -1
   939 00002192 752D                <1>     jnz .argumentProvided
   940                              <1>     ;Here we just get the status of break
   941 00002194 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   942 00002199 CD21                <1>     int 21h
   943 0000219B 88C3                <1>     mov bl, al
   944 0000219D 488D1567EAFFFF      <1>     lea rdx, verifyIs
   945 000021A4 B409                <1>     mov ah, 09h
   946 000021A6 CD21                <1>     int 21h
   947 000021A8 488D154DEAFFFF      <1>     lea rdx, onMes
   948 000021AF 488D0D40EAFFFF      <1>     lea rcx, offMes
   949 000021B6 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   950 000021B8 480F44D1            <1>     cmovz rdx, rcx
   951 000021BC B409                <1>     mov ah, 09h
   952 000021BE CD21                <1>     int 21h
   953                              <1>     return
    13                              <2> %%_ret:
    14 000021C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   954                              <1> .argumentProvided:
   955 000021C1 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   956 000021C5 AD                  <1>     lodsd   ;Read the word
   957 000021C6 89C3                <1>     mov ebx, eax
   958 000021C8 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   959 000021CD C1EB10              <1>     shr ebx, 10h     ;Get high word low
   960 000021D0 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   961 000021D5 7416                <1>     je .maybeOn
   962 000021D7 663D4F46            <1>     cmp ax, "OF"
   963 000021DB 751F                <1>     jne .badOnOff
   964 000021DD 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   965 000021E2 6681FB4620          <1>     cmp bx, "F "
   966 000021E7 7513                <1>     jne .badOnOff
   967                              <1>     ;Set off
   968 000021E9 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   969 000021EB EB0A                <1>     jmp short .setVerify
   970                              <1> .maybeOn:
   971 000021ED 663D4F4E            <1>     cmp ax, "ON"
   972 000021F1 7509                <1>     jne .badOnOff
   973                              <1>     ;Set on
   974 000021F3 31C0                <1>     xor eax, eax
   975 000021F5 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   976                              <1> .setVerify:
   977 000021F7 B42E                <1>     mov ah, 2Eh  ;Set Verify
   978 000021F9 CD21                <1>     int 21h
   979                              <1>     return
    13                              <2> %%_ret:
    14 000021FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   980                              <1> .badOnOff:
   981 000021FC 488D15E8EBFFFF      <1>     lea rdx, badOnOff
   982 00002203 B409                <1>     mov ah, 09h
   983 00002205 CD21                <1>     int 21h
   984                              <1>     return
    13                              <2> %%_ret:
    14 00002207 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   985                              <1> 
   986                              <1> rename:
   987 00002208 F605ABDEFFFFFF      <1>     test byte [arg1Flg], -1
   988 0000220F 0F84A5F4FFFF        <1>     jz badArgError
   989 00002215 F605A1DEFFFFFF      <1>     test byte [arg2Flg], -1
   990 0000221C 0F8498F4FFFF        <1>     jz badArgError
   991 00002222 0FB60592DEFFFF      <1>     movzx eax, byte [arg1Off]
   992 00002229 4C8B05DFDDFFFF      <1>     mov r8, [pspPtr]
   993 00002230 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   994 00002237 4889F3              <1>     mov rbx, rsi    ;Save the ptr to the start of the string in rbx
   995 0000223A 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   996 0000223D 488D3D66E3FFFF      <1>     lea rdi, sourcePath
   997 00002244 E8050C0000          <1>     call cpDelimPathToBufz    
   998 00002249 0FB6056EDEFFFF      <1>     movzx eax, byte [arg2Off]
   999 00002250 4889DE              <1>     mov rsi, rbx    ;Get back the start of the ptr
  1000 00002253 4801C6              <1>     add rsi, rax    ;Go to the start of the command
  1001 00002256 488D3DCFE3FFFF      <1>     lea rdi, destPath
  1002 0000225D E8EC0B0000          <1>     call cpDelimPathToBufz   
  1003 00002262 488D1541E3FFFF      <1>     lea rdx, sourcePath
  1004 00002269 488D3DBCE3FFFF      <1>     lea rdi, destPath
  1005 00002270 B800560000          <1>     mov eax, 5600h
  1006 00002275 CD21                <1>     int 21h
  1007                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002277 73(07)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1008 00002279 3C0F                <1>     cmp al, errBadDrv
  1009 0000227B 0F8430F4FFFF        <1>     je badDriveError
  1010 00002281 3C0B                <1>     cmp al, errBadFmt
  1011 00002283 0F844CF4FFFF        <1>     je badDirError
  1012 00002289 3C11                <1>     cmp al, errDevUnk
  1013 0000228B 0F8417F4FFFF        <1>     je badParamError
  1014 00002291 E936F4FFFF          <1>     jmp badDupFnf
  1015                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1016                              <1> touch:
  1017                              <1> ;Temporarily used to create files
  1018 00002296 F6051DDEFFFFFF      <1>     test byte [arg1Flg], -1
  1019 0000229D 0F8417F4FFFF        <1>     jz badArgError
  1020 000022A3 E8E60B0000          <1>     call buildCommandPath
  1021 000022A8 488D15B3E1FFFF      <1>     lea rdx, searchSpec
  1022 000022AF B8003C0000          <1>     mov eax, 3C00h  ;Create file 
  1023 000022B4 31C9                <1>     xor ecx, ecx
  1024 000022B6 CD21                <1>     int 21h
  1025 000022B8 720B                <1>     jc .touchError
  1026 000022BA 0FB7D8              <1>     movzx ebx, ax
  1027 000022BD B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1028 000022C2 CD21                <1>     int 21h
  1029                              <1>     return
    13                              <2> %%_ret:
    14 000022C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1030                              <1> .touchError:
  1031 000022C5 488D15CDEAFFFF      <1>     lea rdx, touchErr
  1032 000022CC E90BF4FFFF          <1>     jmp badCmn
  1033                              <1> 
  1034                              <1> join:
  1035                              <1> ;Mock join command, to test join. Make an external command.
  1036                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1037 000022D1 F605AF000000FF      <1>     test byte [.joinOn], -1
  1038 000022D8 743D                <1>     jz .okJoin
  1039                              <1> .joindisable:
  1040 000022DA B800520000          <1>     mov eax, 5200h  
  1041 000022DF CD21                <1>     int 21h
  1042                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1043 000022E1 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1044 000022E6 CD2A                <1>     int 2Ah
  1045 000022E8 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1046 000022EC 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1047 000022F0 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1048 000022F6 C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1049 000022F9 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1050 000022FD FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1051 00002300 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1052 00002305 CD2A                <1>     int 2Ah
  1053 00002307 C6057900000000      <1>     mov byte [.joinOn], 0
  1054 0000230E 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1055 00002315 EB45                <1>     jmp short .joinExit
  1056                              <1> .okJoin:
  1057 00002317 C60569000000FF      <1>     mov byte [.joinOn], -1
  1058 0000231E B800520000          <1>     mov eax, 5200h  
  1059 00002323 CD21                <1>     int 21h
  1060 00002325 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1061 00002329 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1062                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1063 0000232D B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1064 00002332 CD2A                <1>     int 2Ah
  1065 00002334 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1066 0000233A 4889DF              <1>     mov rdi, rbx
  1067 0000233D 488D3544000000      <1>     lea rsi, .joinPath
  1068 00002344 B90C000000          <1>     mov ecx, .joinPathL
  1069 00002349 F3A4                <1>     rep movsb   ;Copy chars over
  1070 0000234B FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1071 0000234E B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1072 00002353 CD2A                <1>     int 2Ah
  1073 00002355 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1074                              <1> .joinExit:
  1075 0000235C B800090000          <1>     mov eax, 0900h
  1076 00002361 CD21                <1>     int 21h
  1077                              <1>     return
    13                              <2> %%_ret:
    14 00002363 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1078 00002364 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1078 0000236D 61626C65640D0A24    <1>
  1079 00002375 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1079 0000237E 7361626C65640D0A24  <1>
  1080 00002387 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1081 00002388 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1081 00002391 535400              <1>
  1082                              <1> .joinPathL  equ $ - .joinPath 
  1083                              <1> 
  1084                              <1> subst:
  1085                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1086                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1087 00002394 F605D3000000FF      <1>     test byte [.substOn], -1
  1088 0000239B 7443                <1>     jz .okSubst
  1089                              <1> .substdisable:
  1090 0000239D B800520000          <1>     mov eax, 5200h  
  1091 000023A2 CD21                <1>     int 21h
  1092                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1093 000023A4 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1094 000023A9 CD2A                <1>     int 2Ah
  1095 000023AB 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1096 000023AF 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1097 000023B6 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1098 000023BC C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1099 000023BF C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1100 000023C3 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1101 000023C9 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1102 000023CE CD2A                <1>     int 2Ah
  1103 000023D0 C6059700000000      <1>     mov byte [.substOn], 0
  1104 000023D7 488D157D000000      <1>     lea rdx, .substDisableMsg
  1105 000023DE EB61                <1>     jmp short .substExit
  1106                              <1> .okSubst:
  1107 000023E0 C60587000000FF      <1>     mov byte [.substOn], -1
  1108 000023E7 B800520000          <1>     mov eax, 5200h  
  1109 000023EC CD21                <1>     int 21h
  1110 000023EE B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1111 000023F3 CD2A                <1>     int 2Ah
  1112 000023F5 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1113 000023F9 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1114 00002400 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1115 00002404 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1116 0000240B 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1117 0000240F C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1118                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1119 00002416 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1120 0000241C 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1121 00002422 4889DF              <1>     mov rdi, rbx
  1122 00002425 488D3543000000      <1>     lea rsi, .substPath
  1123 0000242C B90C000000          <1>     mov ecx, .substPathL
  1124 00002431 F3A4                <1>     rep movsb   ;Copy chars over
  1125 00002433 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1126 00002438 CD2A                <1>     int 2Ah
  1127 0000243A 488D1508000000      <1>     lea rdx, .substEnableMsg
  1128                              <1> .substExit:
  1129 00002441 B800090000          <1>     mov eax, 0900h
  1130 00002446 CD21                <1>     int 21h
  1131                              <1>     return
    13                              <2> %%_ret:
    14 00002448 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1132 00002449 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1132 00002452 6E61626C65640D0A24  <1>
  1133 0000245B 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1133 00002464 697361626C65640D0A- <1>
  1133 0000246D 24                  <1>
  1134 0000246E 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1135 0000246F 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1135 00002478 535400              <1>
  1136                              <1> .substPathL  equ $ - .substPath 
  1137                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1138                              <1> truename:
  1139 0000247B F60538DCFFFFFF      <1>     test byte [arg1Flg], -1
  1140 00002482 0F8432F2FFFF        <1>     jz badArgError
  1141 00002488 E8010A0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1142 0000248D 488D35CEDFFFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1143 00002494 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1144 00002497 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1145 0000249C CD21                <1>     int 21h
  1146 0000249E 730D                <1>     jnc .writePath
  1147 000024A0 3C02                <1>     cmp al, errFnf
  1148 000024A2 0F841BF2FFFF        <1>     je badFileError
  1149 000024A8 E9FBF1FFFF          <1>     jmp badParamError
  1150                              <1> .writePath:
  1151 000024AD 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1152 000024B0 B9FFFFFFFF          <1>     mov ecx, -1
  1153 000024B5 30C0                <1>     xor al, al
  1154 000024B7 F2AE                <1>     repne scasb     ;Get the new len
  1155 000024B9 F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1156 000024BB FFC9                <1>     dec ecx
  1157 000024BD BB01000000          <1>     mov ebx, 01
  1158 000024C2 B440                <1>     mov ah, 40h
  1159 000024C4 CD21                <1>     int 21h
  1160 000024C6 E887050000          <1>     call printCRLF
  1161                              <1>     return
    13                              <2> %%_ret:
    14 000024CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1162                              <1> 
  1163                              <1> label:
  1164                              <1> ;Displays/Changes/Deletes the file label
  1165 000024CC 488D1508000000      <1>     lea rdx, .l1
  1166 000024D3 B800090000          <1>     mov eax, 0900h
  1167 000024D8 CD21                <1>     int 21h
  1168                              <1>     return
    13                              <2> %%_ret:
    14 000024DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1169 000024DB 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  1169 000024E4 6E20756E696D706C65- <1>
  1169 000024ED 6D656E7465640D0A24  <1>
  1170                              <1> 
  1171                              <1> mklbl:
  1172                              <1>     ;lea rdx, .l1
  1173                              <1>     ;mov cx, 08h ;Make a label
  1174                              <1>     ;mov eax, 3C00h
  1175                              <1>     ;int 21h
  1176                              <1> 
  1177                              <1>     ;mov ebx, eax
  1178                              <1>     ;mov eax, 3E00h  ;Close the handle
  1179                              <1>     ;int 21h
  1180                              <1>     ;return
  1181                              <1> 
  1182                              <1> ;.l1: db "TESTLABEL",0
  1183 000024F6 488D1508000000      <1>     lea rdx, .l1
  1184 000024FD B800160000          <1>     mov eax, 1600h  ;Create FCB
  1185 00002502 CD21                <1>     int 21h
  1186                              <1>     return
    13                              <2> %%_ret:
    14 00002504 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1187                              <1> .l1:
  1188                              <1>     istruc exFcb
  1189 00002505 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1190 00002506 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1191 0000250C 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1192 0000250D 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  1193 00002515 4C2020              <1>     at exFcb.fileext,   db "L  "
  1194 00002518 00000000            <1>     at exFcb.curBlock,  dd 0
  1195 0000251C 00<rep 15h>         <1>     iend 
  1196                              <1> rmlbl:
  1197 00002531 488D1508000000      <1>     lea rdx, .l1
  1198 00002538 B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  1199 0000253D CD21                <1>     int 21h
  1200                              <1>     return
    13                              <2> %%_ret:
    14 0000253F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1201                              <1> .l1:    ;FCB to volume label
  1202                              <1>     istruc exFcb
  1203 00002540 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1204 00002541 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1205 00002547 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1206 00002548 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  1207 00002550 3F3F3F              <1>     at exFcb.fileext,   db "???"
  1208 00002553 00000000            <1>     at exFcb.curBlock,  dd 0
  1209 00002557 00<rep 15h>         <1>     iend 
  1210                              <1> 
  1211                              <1> rnlbl:
  1212 0000256C 488D1508000000      <1>     lea rdx, .l1
  1213 00002573 B800170000          <1>     mov eax, 1700h
  1214 00002578 CD21                <1>     int 21h
  1215                              <1>     return
    13                              <2> %%_ret:
    14 0000257A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1216                              <1> .l1:
  1217                              <1>     istruc exRenFcb
  1218 0000257B FF                  <1>     at exRenFcb.extSig,     db -1
  1219 0000257C 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  1220 00002582 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  1221 00002583 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  1222 0000258B 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  1223 0000258E 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  1223 00002597 4C414245            <1>
  1224 0000259B 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  1225 0000259E 00<rep 4h>          <1>     iend
  1226                              <1> volume:
  1227                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  1228 000025A2 F60514DBFFFFFF      <1>     test byte [arg2Flg], -1
  1229 000025A9 0F850BF1FFFF        <1>     jnz badArgError
  1230 000025AF F60504DBFFFFFF      <1>     test byte [arg1Flg], -1
  1231 000025B6 7507                <1>     jnz .notCurrentDrive
  1232 000025B8 E855070000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1233 000025BD EB31                <1>     jmp short .dirEP
  1234                              <1> .notCurrentDrive:
  1235 000025BF E8CA080000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1236 000025C4 488D3597DEFFFF      <1>     lea rsi, searchSpec
  1237 000025CB E86B070000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  1238 000025D0 66AD                <1>     lodsw                   ;Get this word
  1239 000025D2 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  1240 000025D5 0F85DFF0FFFF        <1>     jne badArgError
  1241 000025DB 8A05DBDAFFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1242 000025E1 A8FF                <1>     test al, -1
  1243 000025E3 0F85C8F0FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1244 000025E9 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1245 000025EE FFC8                <1>     dec eax ;Convert to 0 based number
  1246                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  1247 000025F0 E88E090000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  1248 000025F5 488D157EDFFFFF      <1>     lea rdx, volFcb
  1249 000025FC FFC0                <1>     inc eax ;Get 1 based drive number
  1250 000025FE 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1251 00002600 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1252 00002603 B800110000          <1>     mov eax, 1100h ;Find first FCB
  1253 00002608 CD21                <1>     int 21h
  1254 0000260A 50                  <1>     push rax
  1255                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  1256 0000260B 488D1503E2FFFF      <1>     lea rdx, crlf
  1257 00002612 B409                <1>     mov ah, 09h
  1258 00002614 CD21                <1>     int 21h
  1259 00002616 488D157DE4FFFF      <1>     lea rdx, volMes
  1260 0000261D B409                <1>     mov ah, 09h
  1261 0000261F CD21                <1>     int 21h
  1262 00002621 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  1263 00002623 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  1264 00002626 B402                <1>     mov ah, 02h
  1265 00002628 CD21                <1>     int 21h
  1266 0000262A 58                  <1>     pop rax
  1267 0000262B 84C0                <1>     test al, al ;If this is zero, the call succeeded
  1268 0000262D 7409                <1>     jz .volIDOk
  1269 0000262F 488D157BE4FFFF      <1>     lea rdx, volNo
  1270 00002636 EB19                <1>     jmp short .volEndPrint
  1271                              <1> .volIDOk:
  1272 00002638 488D156DE4FFFF      <1>     lea rdx, volOk
  1273 0000263F B409                <1>     mov ah, 09h
  1274 00002641 CD21                <1>     int 21h
  1275 00002643 C60599DAFFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  1276 0000264A 488D1587DAFFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  1277                              <1> .volEndPrint:
  1278 00002651 B409                <1>     mov ah, 09h
  1279 00002653 CD21                <1>     int 21h
  1280 00002655 488D15B9E1FFFF      <1>     lea rdx, crlf
  1281 0000265C B409                <1>     mov ah, 09h
  1282 0000265E CD21                <1>     int 21h
  1283                              <1>     return
    13                              <2> %%_ret:
    14 00002660 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1284                              <1> 
  1285                              <1> version:
  1286 00002661 488D15ADE1FFFF      <1>     lea rdx, crlf
  1287 00002668 B409                <1>     mov ah, 09h
  1288 0000266A CD21                <1>     int 21h
  1289 0000266C 488D1515E4FFFF      <1>     lea rdx, dosVer
  1290 00002673 B409                <1>     mov ah, 09h
  1291 00002675 CD21                <1>     int 21h
  1292 00002677 E80C000000          <1>     call .printVersionNumber
  1293 0000267C 488D1592E1FFFF      <1>     lea rdx, crlf
  1294 00002683 B409                <1>     mov ah, 09h
  1295 00002685 CD21                <1>     int 21h
  1296                              <1>     return
    13                              <2> %%_ret:
    14 00002687 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1297                              <1> .printVersionNumber:
  1298 00002688 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1299 0000268A CD21                <1>     int 21h
  1300 0000268C 50                  <1>     push rax
  1301 0000268D 0FB6C0              <1>     movzx eax, al
  1302 00002690 E83B080000          <1>     call printDecimalWord
  1303 00002695 B22E                <1>     mov dl, "."
  1304 00002697 B402                <1>     mov ah, 02h
  1305 00002699 CD21                <1>     int 21h
  1306 0000269B 58                  <1>     pop rax
  1307 0000269C 0FB6C4              <1>     movzx eax, ah
  1308 0000269F E82C080000          <1>     call printDecimalWord
  1309                              <1>     return
    13                              <2> %%_ret:
    14 000026A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1310                              <1> 
  1311                              <1> 
  1312                              <1> memory:
  1313 000026A5 488B1D73D9FFFF      <1>     mov rbx, qword [sysVars]
  1314 000026AC 4885DB              <1>     test rbx, rbx
  1315 000026AF 7510                <1>     jnz .sysvarsOK
  1316 000026B1 488D1582E6FFFF      <1>     lea rdx, memBad0
  1317 000026B8 B409                <1>     mov ah, 09h
  1318 000026BA CD21                <1>     int 21h
  1319 000026BC E9B2080000          <1>     jmp freezePC.altEP
  1320                              <1> .sysvarsOK:
  1321                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1322                              <1>     ; and rcx to store Application memory
  1323 000026C1 31F6                <1>     xor esi, esi
  1324 000026C3 31FF                <1>     xor edi, edi
  1325 000026C5 31ED                <1>     xor ebp, ebp
  1326 000026C7 31C9                <1>     xor ecx, ecx
  1327 000026C9 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1328 000026CD 488B1B              <1>     mov rbx, qword [rbx]
  1329                              <1> .memLp:
  1330 000026D0 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1331 000026D3 7409                <1>     je .validMCB
  1332 000026D5 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1333 000026D8 0F8501010000        <1>     jne .badMCBFound
  1334                              <1> .validMCB:
  1335 000026DE 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1336 000026E1 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1337 000026E5 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1338 000026ED 7505                <1>     jne .notDOS
  1339 000026EF 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1340 000026F2 EB21                <1>     jmp short .gotoNext
  1341                              <1> .notDOS:
  1342 000026F4 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1343 000026FC 7505                <1>     jne .notFree
  1344 000026FE 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1345 00002701 EB12                <1>     jmp short .gotoNext
  1346                              <1> .notFree:
  1347 00002703 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1348 0000270B 7505                <1>     jne .notHole
  1349 0000270D 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1350 00002710 EB03                <1>     jmp short .gotoNext
  1351                              <1> .notHole:
  1352 00002712 4801C1              <1>     add rcx, rax    ;Add to Application count
  1353                              <1> .gotoNext:
  1354 00002715 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1355 00002718 7407                <1>     je .endOfWalk
  1356 0000271A 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1357 0000271F EBAF                <1>     jmp short .memLp
  1358                              <1> .endOfWalk:
  1359                              <1>     
  1360 00002721 488D1573E5FFFF      <1>     lea rdx, memDOS
  1361 00002728 B409                <1>     mov ah, 09h
  1362 0000272A CD21                <1>     int 21h
  1363 0000272C 4889F0              <1>     mov rax, rsi
  1364 0000272F E89D000000          <1>     call .mcbPrintAmount
  1365 00002734 488D15F8E5FFFF      <1>     lea rdx, memByte
  1366 0000273B B409                <1>     mov ah, 09h
  1367 0000273D CD21                <1>     int 21h
  1368                              <1> 
  1369 0000273F 4885ED              <1>     test rbp, rbp
  1370 00002742 741E                <1>     jz .skipHole
  1371 00002744 488D159CE5FFFF      <1>     lea rdx, memHole
  1372 0000274B B409                <1>     mov ah, 09h
  1373 0000274D CD21                <1>     int 21h
  1374 0000274F 4889E8              <1>     mov rax, rbp
  1375 00002752 E87A000000          <1>     call .mcbPrintAmount
  1376 00002757 488D15D5E5FFFF      <1>     lea rdx, memByte
  1377 0000275E B409                <1>     mov ah, 09h
  1378 00002760 CD21                <1>     int 21h
  1379                              <1> .skipHole:
  1380                              <1> 
  1381 00002762 488D1558E5FFFF      <1>     lea rdx, memApp
  1382 00002769 B409                <1>     mov ah, 09h
  1383 0000276B CD21                <1>     int 21h
  1384 0000276D 4889C8              <1>     mov rax, rcx
  1385 00002770 E85C000000          <1>     call .mcbPrintAmount
  1386 00002775 488D15B7E5FFFF      <1>     lea rdx, memByte
  1387 0000277C B409                <1>     mov ah, 09h
  1388 0000277E CD21                <1>     int 21h
  1389                              <1> 
  1390 00002780 488D1586E5FFFF      <1>     lea rdx, memFree
  1391 00002787 B409                <1>     mov ah, 09h
  1392 00002789 CD21                <1>     int 21h
  1393 0000278B 4889F8              <1>     mov rax, rdi
  1394 0000278E E83E000000          <1>     call .mcbPrintAmount
  1395 00002793 488D1599E5FFFF      <1>     lea rdx, memByte
  1396 0000279A B409                <1>     mov ah, 09h
  1397 0000279C CD21                <1>     int 21h
  1398                              <1> 
  1399 0000279E 488D15D0E4FFFF      <1>     lea rdx, memSys
  1400 000027A5 B409                <1>     mov ah, 09h
  1401 000027A7 CD21                <1>     int 21h
  1402 000027A9 4889F0              <1>     mov rax, rsi
  1403 000027AC 4801F8              <1>     add rax, rdi
  1404 000027AF 4801C8              <1>     add rax, rcx
  1405 000027B2 4801E8              <1>     add rax, rbp
  1406 000027B5 E817000000          <1>     call .mcbPrintAmount
  1407 000027BA 488D1572E5FFFF      <1>     lea rdx, memByte
  1408 000027C1 B409                <1>     mov ah, 09h
  1409 000027C3 CD21                <1>     int 21h
  1410                              <1> 
  1411 000027C5 488D1549E0FFFF      <1>     lea rdx, crlf
  1412 000027CC B409                <1>     mov ah, 09h
  1413 000027CE CD21                <1>     int 21h
  1414                              <1>     return
    13                              <2> %%_ret:
    14 000027D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1415                              <1> 
  1416                              <1> .mcbPrintAmount:
  1417 000027D1 51                  <1>     push rcx
  1418 000027D2 56                  <1>     push rsi
  1419 000027D3 57                  <1>     push rdi
  1420 000027D4 55                  <1>     push rbp
  1421 000027D5 E8F6060000          <1>     call printDecimalWord
  1422 000027DA 5D                  <1>     pop rbp
  1423 000027DB 5F                  <1>     pop rdi
  1424 000027DC 5E                  <1>     pop rsi
  1425 000027DD 59                  <1>     pop rcx
  1426                              <1>     return
    13                              <2> %%_ret:
    14 000027DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1427                              <1> .badMCBFound:
  1428 000027DF 488D1594E5FFFF      <1>     lea rdx, memBad2
  1429 000027E6 B409                <1>     mov ah, 09h
  1430 000027E8 CD21                <1>     int 21h
  1431 000027EA E984070000          <1>     jmp freezePC.altEP
  1432                              <1> 
  1433                              <1> type:
  1434 000027EF F605C4D8FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1435 000027F6 0F84BEEEFFFF        <1>     jz badArgError
  1436 000027FC F605BAD8FFFFFF      <1>     test byte [arg2Flg], -1
  1437 00002803 0F85B1EEFFFF        <1>     jnz badArgError         ;If this set, error
  1438 00002809 4C8B05FFD7FFFF      <1>     mov r8, [pspPtr]
  1439 00002810 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1440 00002817 0FB6059DD8FFFF      <1>     movzx eax, byte [arg1Off]
  1441 0000281E 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1442 00002821 803E0D              <1>     cmp byte [rsi], CR
  1443 00002824 0F8490EEFFFF        <1>     je badArgError
  1444 0000282A 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1445 0000282E 750F                <1>     jne .noDrive
  1446 00002830 0FB60585D8FFFF      <1>     movzx eax, byte [arg1FCBret]
  1447 00002837 3CFF                <1>     cmp al, -1
  1448 00002839 0F8472EEFFFF        <1>     je badDriveError
  1449                              <1> .noDrive:
  1450                              <1>     ;Now we open the provided file
  1451 0000283F E84A060000          <1>     call buildCommandPath
  1452 00002844 488D1517DCFFFF      <1>     lea rdx, searchSpec
  1453 0000284B B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1454 00002850 CD21                <1>     int 21h
  1455 00002852 0F826BEEFFFF        <1>     jc badFileError
  1456 00002858 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1457 0000285F 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1458                              <1> .lp:
  1459 00002862 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1460 00002867 B43F                <1>     mov ah, 3Fh ;Read handle
  1461 00002869 CD21                <1>     int 21h
  1462 0000286B 89C1                <1>     mov ecx, eax
  1463 0000286D 67E317              <1>     jecxz .exit
  1464 00002870 53                  <1>     push rbx    ;Save the original in handle
  1465 00002871 BB01000000          <1>     mov ebx, 1  ;STDOUT
  1466 00002876 B440                <1>     mov ah, 40h
  1467 00002878 CD21                <1>     int 21h
  1468 0000287A 5B                  <1>     pop rbx ;Get back the original read handle
  1469 0000287B 720F                <1>     jc .exitBad
  1470 0000287D 39C8                <1>     cmp eax, ecx
  1471 0000287F 74E1                <1>     je .lp
  1472 00002881 FFC9                <1>     dec ecx ;One less for a ^Z
  1473 00002883 39C8                <1>     cmp eax, ecx
  1474 00002885 7505                <1>     jne .exitBad
  1475                              <1> .exit:
  1476 00002887 B43E                <1>     mov ah, 3Eh ;Close handle
  1477 00002889 CD21                <1>     int 21h
  1478                              <1>     return
    13                              <2> %%_ret:
    14 0000288B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1479                              <1> .exitBad:
  1480                              <1>     ;Print a disk error message... use a table to build the message but for
  1481                              <1>     ; now, just exit
  1482                              <1>     ;If it is a char device, don't print a error
  1483 0000288C EBF9                <1>     jmp short .exit
  1484                              <1> 
  1485                              <1> exit:
  1486 0000288E F60598D7FFFFFF      <1>     test byte [permaSwitch], -1
  1487                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002895 75(8B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1488 00002897 488B0579D7FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1489 0000289E 483DFFFFFFFF        <1>     cmp rax, -1
  1490                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000028A4 74(8B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1491 000028A6 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1492                              <1> 
  1493 000028AA 488B157DD7FFFF      <1>     mov rdx, qword [parentInt22]
  1494 000028B1 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  1495 000028B5 B822250000          <1>     mov eax, 2522h
  1496 000028BA CD21                <1>     int 21h
  1497                              <1> 
  1498 000028BC B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1499 000028C1 CD21                <1>     int 21h
  1500                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 000028C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1501                              <1> 
  1502                              <1> launchChild:
  1503                              <1> ;We run EXEC on this and the child task will return via applicationReturn
  1504                              <1> ;Here we must search the CWD or all path componants before failing
  1505                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
  1506 000028C4 E8BA060000          <1>     call setDTA
  1507                              <1> 
  1508 000028C9 8B05FAD7FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
  1509 000028CF 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1510 000028D4 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1511 000028D9 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
  1512 000028DE 741D                <1>     je .noExt
  1513 000028E0 E824E9FFFF          <1>     call checkExtensionExec ;ZF=ZE => Executable
  1514 000028E5 0F855B010000        <1>     jnz .dfltErrExit
  1515                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1516 000028EB 0F8255010000        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
  1517                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1518                              <1>     ;So it is a com or exe that we are searching for for now
  1519 000028F1 488D3DA9D9FFFF      <1>     lea rdi, cmdPathSpec
  1520 000028F8 4889FA              <1>     mov rdx, rdi
  1521 000028FB EB24                <1>     jmp short .search
  1522                              <1> .noExt:
  1523                              <1>     ;If the filename has no extension, append a .*
  1524                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
  1525 000028FD 31DB                <1>     xor ebx, ebx
  1526 000028FF 488D3D9BD9FFFF      <1>     lea rdi, cmdPathSpec
  1527 00002906 4889FA              <1>     mov rdx, rdi
  1528 00002909 31C0                <1>     xor eax, eax
  1529 0000290B B9FFFFFFFF          <1>     mov ecx, -1
  1530 00002910 F2AE                <1>     repne scasb
  1531 00002912 48FFCF              <1>     dec rdi ;Point to the terminating null
  1532 00002915 4889FD              <1>     mov rbp, rdi    ;Temporarily store the ptr to the . in rbp
  1533 00002918 66B82E2A            <1>     mov ax, ".*"
  1534 0000291C 66AB                <1>     stosw
  1535 0000291E 30C0                <1>     xor al, al  ;Store terminating null
  1536 00002920 AA                  <1>     stosb
  1537                              <1> .search:
  1538 00002921 B906000000          <1>     mov ecx, dirIncFiles
  1539 00002926 B44E                <1>     mov ah, 4Eh ;Find First File
  1540 00002928 CD21                <1>     int 21h
  1541 0000292A 0F8216010000        <1>     jc .dfltErrExit
  1542 00002930 E8C4000000          <1>     call .noExtCheckExt
  1543                              <1> .moreSearch:
  1544 00002935 B44F                <1>     mov ah, 4Fh
  1545 00002937 CD21                <1>     int 21h
  1546 00002939 7207                <1>     jc .noMoreFiles
  1547 0000293B E8B9000000          <1>     call .noExtCheckExt
  1548 00002940 EBF3                <1>     jmp short .moreSearch
  1549                              <1> .noMoreFiles:
  1550 00002942 85DB                <1>     test ebx, ebx
  1551 00002944 0F84FC000000        <1>     jz .dfltErrExit
  1552                              <1> ;So we have a valid executable
  1553 0000294A 4889EF              <1>     mov rdi, rbp    ;Get back ptr to the .*,0
  1554 0000294D F7C301000000        <1>     test ebx, 1
  1555 00002953 7407                <1>     jz .launchexebat
  1556 00002955 B82E434F4D          <1>     mov eax, ".COM"
  1557 0000295A EB14                <1>     jmp short .buildTail
  1558                              <1> .launchexebat:
  1559 0000295C F7C302000000        <1>     test ebx, 2
  1560 00002962 7407                <1>     jz .launchbat
  1561 00002964 B82E455845          <1>     mov eax, ".EXE"
  1562 00002969 EB05                <1>     jmp short .buildTail
  1563                              <1> .launchbat:
  1564                              <1> ;Temporary For BAT
  1565 0000296B E9D6000000          <1>     jmp .dfltErrExit
  1566                              <1> .buildTail:
  1567 00002970 AB                  <1>     stosd
  1568 00002971 31C0                <1>     xor eax, eax
  1569 00002973 AA                  <1>     stosb   ;Store the terminating null
  1570                              <1> ;Now we build the cmdtail properly
  1571 00002974 488D3DA0D7FFFF      <1>     lea rdi, cmdTail
  1572 0000297B 4889FA              <1>     mov rdx, rdi    ;Use rdx as the anchor pointer for cmdline
  1573 0000297E B910000000          <1>     mov ecx, 128/8
  1574 00002983 F348AB              <1>     rep stosq   ;Clear the buffer with nulls
  1575 00002986 488D7A01            <1>     lea rdi, qword [rdx + 1]    ;Mov rdi to start of cmdtail (not count)
  1576 0000298A 498DB080000000      <1>     lea rsi, qword [r8 + cmdLineCnt]
  1577 00002991 AC                  <1>     lodsb   ;Get into al the number of chars and move rsi to the tail proper
  1578 00002992 88C4                <1>     mov ah, al  ;Move the number into ah
  1579 00002994 31C9                <1>     xor ecx, ecx    ;Use ch for number of chars read, cl for chars copied
  1580                              <1>     ;Skip the parsed command name
  1581                              <1> .passName:
  1582 00002996 AC                  <1>     lodsb   ;Get the char in al
  1583 00002997 FEC5                <1>     inc ch
  1584 00002999 80FD7F              <1>     cmp ch, 127     ;Exit condition (bad case)
  1585 0000299C 741D                <1>     je short .finishBuildingTailNoCR
  1586 0000299E 3C0D                <1>     cmp al, CR      ;If we get to the CR after name, no tail
  1587 000029A0 7418                <1>     je short .finishBuildingTail
  1588 000029A2 3C20                <1>     cmp al, SPC
  1589 000029A4 75F0                <1>     jne short .passName
  1590                              <1>     ;Now we copy the name 
  1591 000029A6 E890030000          <1>     call skipDelimiters ;Start by skipping spaces (there are no embedded tabs)
  1592                              <1>     ;rsi points to the first non-space char
  1593                              <1> .copyTail:
  1594 000029AB AC                  <1>     lodsb
  1595 000029AC 3C0D                <1>     cmp al, CR
  1596 000029AE 740A                <1>     je short .finishBuildingTail
  1597 000029B0 AA                  <1>     stosb
  1598 000029B1 FEC1                <1>     inc cl
  1599 000029B3 80F97F              <1>     cmp cl, 127 ;Exit condition
  1600 000029B6 75F3                <1>     jne .copyTail
  1601 000029B8 EB01                <1>     jmp short .finishBuildingTailNoCR
  1602                              <1> .finishBuildingTail:
  1603 000029BA AA                  <1>     stosb   ;Store the CR
  1604                              <1> .finishBuildingTailNoCR:
  1605 000029BB 880A                <1>     mov byte [rdx], cl  ;Finish by placing count 
  1606                              <1> .launch:
  1607 000029BD 488D1D37D7FFFF      <1>     lea rbx, launchBlock
  1608 000029C4 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  1609 000029C8 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  1610 000029CB 488D0549D7FFFF      <1>     lea rax, cmdTail
  1611 000029D2 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1612 000029D6 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1613 000029DA 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1614 000029DE 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1615 000029E2 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1616 000029E6 488D15B4D8FFFF      <1>     lea rdx, cmdPathSpec
  1617 000029ED B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1618 000029F2 CD21                <1>     int 21h
  1619 000029F4 E94D000000          <1>     jmp .dfltErrExit    ;If something goes wrong, error out
  1620                              <1> .noExtCheckExt:
  1621                              <1>     ;mov eax, dword [cmdFFBlock + ffBlock.asciizName + filename.fExt]
  1622 000029F9 488D35EED6FFFF      <1>     lea rsi, dword [cmdFFBlock + ffBlock.asciizName]
  1623 00002A00 488D3DE9D8FFFF      <1>     lea rdi, fcbCmdSpec
  1624 00002A07 E8B8030000          <1>     call asciiFilenameToFCB
  1625 00002A0C 8B05E6D8FFFF        <1>     mov eax, dword [fcbCmdSpec + filename.fExt]
  1626 00002A12 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1627 00002A17 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1628 00002A1C 3D434F4D20          <1>     cmp eax, "COM "
  1629 00002A21 7507                <1>     jne .neceexe
  1630 00002A23 81CB01000000        <1>     or ebx, 1
  1631                              <1>     return
    13                              <2> %%_ret:
    14 00002A29 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1632                              <1> .neceexe:
  1633 00002A2A 3D45584520          <1>     cmp eax, "EXE "
  1634 00002A2F 7507                <1>     jne .necebat
  1635 00002A31 81CB02000000        <1>     or ebx, 2
  1636                              <1>     return
    13                              <2> %%_ret:
    14 00002A37 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1637                              <1> .necebat:
  1638 00002A38 3D42415420          <1>     cmp eax, "BAT "
  1639                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A3D 75(37)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1640 00002A3F 81CB04000000        <1>     or ebx, 4
  1641                              <1>     return
    13                              <2> %%_ret:
    14 00002A45 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1642                              <1> 
  1643                              <1> .dfltErrExit:
  1644 00002A46 488D1525DEFFFF      <1>     lea rdx, badCmd
  1645 00002A4D B409                <1>     mov ah, 09h
  1646 00002A4F CD21                <1>     int 21h
  1647                              <1>     return
    13                              <2> %%_ret:
    14 00002A51 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printCRLF:
     4 00002A52 488D15BCDDFFFF      <1>     lea rdx, crlf
     5 00002A59 BB01000000          <1>     mov ebx, 1  ;Print on STDOUT
     6 00002A5E B440                <1>     mov ah, 40h ;Print a new line
     7 00002A60 B902000000          <1>     mov ecx, 2  ;Two chars to write
     8 00002A65 CD21                <1>     int 21h
     9                              <1>     return
    13                              <2> %%_ret:
    14 00002A67 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    10                              <1> printDate:
    11                              <1> ;Input: eax = Packed Date
    12                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    13                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    14                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    15                              <1> ;       ebx = 0 => Print two digit year
    16                              <1> ;       ebx = 1 => Print four digit year
    17 00002A68 53                  <1>     push rbx
    18 00002A69 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    19 00002A6B 803DC4D5FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    20 00002A72 7240                <1>     jb .usDate
    21 00002A74 777C                <1>     ja .jpnDate
    22                              <1> ;European: DD/MM/YY
    23 00002A76 251F000000          <1>     and eax, 1Fh    ;Save day bits
    24 00002A7B E8B0000000          <1>     call .printFirst
    25 00002A80 8A15BBD5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    26 00002A86 B402                <1>     mov ah, 02h
    27 00002A88 CD21                <1>     int 21h
    28                              <1> 
    29 00002A8A 89C8                <1>     mov eax, ecx
    30 00002A8C 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    31 00002A91 C1E805              <1>     shr eax, 5
    32 00002A94 E8B3000000          <1>     call .printSecond
    33                              <1> 
    34 00002A99 8A15A2D5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    35 00002A9F B402                <1>     mov ah, 02h
    36 00002AA1 CD21                <1>     int 21h
    37                              <1> 
    38 00002AA3 89C8                <1>     mov eax, ecx
    39 00002AA5 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    40 00002AAA C1E809              <1>     shr eax, 9
    41 00002AAD 5B                  <1>     pop rbx ;Get the year signature back
    42 00002AAE E8A9000000          <1>     call .printYear
    43                              <1>     return
    13                              <2> %%_ret:
    14 00002AB3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    44                              <1> .usDate:
    45                              <1> ;US: MM/DD/YY
    46 00002AB4 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    47 00002AB9 C1E805              <1>     shr eax, 5
    48 00002ABC E86F000000          <1>     call .printFirst
    49                              <1> 
    50 00002AC1 8A157AD5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    51 00002AC7 B402                <1>     mov ah, 02h
    52 00002AC9 CD21                <1>     int 21h
    53                              <1> 
    54 00002ACB 89C8                <1>     mov eax, ecx
    55 00002ACD 251F000000          <1>     and eax, 1Fh    ;Save day bits
    56 00002AD2 E875000000          <1>     call .printSecond
    57                              <1> 
    58 00002AD7 8A1564D5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    59 00002ADD B402                <1>     mov ah, 02h
    60 00002ADF CD21                <1>     int 21h
    61                              <1> 
    62 00002AE1 89C8                <1>     mov eax, ecx
    63 00002AE3 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 00002AE8 C1E809              <1>     shr eax, 9
    65 00002AEB 5B                  <1>     pop rbx ;Get the year signature back
    66 00002AEC E86B000000          <1>     call .printYear
    67                              <1>     return
    13                              <2> %%_ret:
    14 00002AF1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    68                              <1> .jpnDate:
    69                              <1> ;Japan: YY/MM/DD
    70 00002AF2 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    71 00002AF7 C1E809              <1>     shr eax, 9
    72 00002AFA 5B                  <1>     pop rbx ;Get the year signature back
    73 00002AFB E85C000000          <1>     call .printYear
    74                              <1> 
    75 00002B00 8A153BD5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    76 00002B06 B402                <1>     mov ah, 02h
    77 00002B08 CD21                <1>     int 21h
    78                              <1> 
    79 00002B0A 89C8                <1>     mov eax, ecx
    80 00002B0C 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    81 00002B11 C1E805              <1>     shr eax, 5
    82 00002B14 E833000000          <1>     call .printSecond
    83                              <1> 
    84 00002B19 8A1522D5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    85 00002B1F B402                <1>     mov ah, 02h
    86 00002B21 CD21                <1>     int 21h
    87                              <1> 
    88 00002B23 89C8                <1>     mov eax, ecx
    89 00002B25 251F000000          <1>     and eax, 1Fh    ;Save day bits
    90 00002B2A E81D000000          <1>     call .printSecond
    91                              <1>     return
    13                              <2> %%_ret:
    14 00002B2F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    92                              <1> 
    93                              <1> ;Each of these require eax setup correctly
    94                              <1> .printFirst:
    95 00002B30 51                  <1>     push rcx
    96 00002B31 E80B040000          <1>     call getDecimalWord
    97 00002B36 84ED                <1>     test ch, ch ;Do we have an upper digit?
    98 00002B38 7504                <1>     jnz .skipSpace
    99 00002B3A 88CD                <1>     mov ch, cl
   100 00002B3C B120                <1>     mov cl, " "
   101                              <1> .skipSpace:
   102 00002B3E 88CA                <1>     mov dl, cl
   103 00002B40 B402                <1>     mov ah, 02h
   104 00002B42 CD21                <1>     int 21h
   105 00002B44 88EA                <1>     mov dl, ch
   106 00002B46 B402                <1>     mov ah, 02h
   107 00002B48 CD21                <1>     int 21h
   108 00002B4A 59                  <1>     pop rcx
   109                              <1>     return
    13                              <2> %%_ret:
    14 00002B4B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   110                              <1> .printSecond:
   111 00002B4C 51                  <1>     push rcx
   112 00002B4D E8EF030000          <1>     call getDecimalWord
   113 00002B52 84ED                <1>     test ch, ch ;Do we have an upper digit?
   114 00002B54 75E8                <1>     jnz .skipSpace
   115 00002B56 88CD                <1>     mov ch, cl
   116 00002B58 B130                <1>     mov cl, "0"
   117 00002B5A EBE2                <1>     jmp short .skipSpace
   118                              <1> .printYear:
   119 00002B5C 05BC070000          <1>     add eax, 1980
   120 00002B61 51                  <1>     push rcx
   121 00002B62 53                  <1>     push rbx
   122 00002B63 E8D9030000          <1>     call getDecimalWord ;Get unpacked in rcx
   123 00002B68 5B                  <1>     pop rbx
   124 00002B69 84DB                <1>     test bl, bl
   125 00002B6B 740C                <1>     jz .twoDigitYear
   126 00002B6D 88CA                <1>     mov dl, cl  ;Print the first digit
   127 00002B6F B402                <1>     mov ah, 02h
   128 00002B71 CD21                <1>     int 21h
   129 00002B73 88EA                <1>     mov dl, ch  ;Print the second digit
   130 00002B75 B402                <1>     mov ah, 02h
   131 00002B77 CD21                <1>     int 21h
   132                              <1> .twoDigitYear:
   133 00002B79 C1E910              <1>     shr ecx, 10h    ;Get high word low
   134 00002B7C 88CA                <1>     mov dl, cl  ;Print the upper digit
   135 00002B7E B402                <1>     mov ah, 02h
   136 00002B80 CD21                <1>     int 21h
   137 00002B82 88EA                <1>     mov dl, ch  ;Print the lower digit
   138 00002B84 B402                <1>     mov ah, 02h
   139 00002B86 CD21                <1>     int 21h
   140 00002B88 59                  <1>     pop rcx
   141                              <1>     return
    13                              <2> %%_ret:
    14 00002B89 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   142                              <1> 
   143                              <1> 
   144                              <1> printTime:
   145                              <1> ;Input: eax = Packed Time
   146                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   147                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   148 00002B8A 89C1                <1>     mov ecx, eax
   149 00002B8C 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   150 00002B91 C1E80B              <1>     shr eax, 11
   151 00002B94 803DACD4FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   152 00002B9B 750B                <1>     jne .ampm
   153 00002B9D E85A000000          <1>     call .printHours
   154 00002BA2 E831000000          <1>     call .printMinutes
   155                              <1>     return
    13                              <2> %%_ret:
    14 00002BA7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   156                              <1> .ampm:
   157 00002BA8 3D0C000000          <1>     cmp eax, 12
   158 00002BAD 7713                <1>     ja .pm
   159 00002BAF 7416                <1>     je .pm2
   160 00002BB1 E846000000          <1>     call .printHours
   161 00002BB6 E81D000000          <1>     call .printMinutes
   162 00002BBB B261                <1>     mov dl, "a"
   163 00002BBD B402                <1>     mov ah, 02h
   164 00002BBF CD21                <1>     int 21h
   165                              <1>     return
    13                              <2> %%_ret:
    14 00002BC1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   166                              <1> .pm:
   167 00002BC2 2D0C000000          <1>     sub eax, 12
   168                              <1> .pm2:
   169 00002BC7 E830000000          <1>     call .printHours
   170 00002BCC E807000000          <1>     call .printMinutes
   171 00002BD1 B270                <1>     mov dl, "p"
   172 00002BD3 B402                <1>     mov ah, 02h
   173 00002BD5 CD21                <1>     int 21h
   174                              <1>     return
    13                              <2> %%_ret:
    14 00002BD7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   175                              <1> .printMinutes:
   176 00002BD8 8A1565D4FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   177 00002BDE B402                <1>     mov ah, 02h
   178 00002BE0 CD21                <1>     int 21h
   179                              <1> 
   180 00002BE2 89C8                <1>     mov eax, ecx
   181 00002BE4 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   182 00002BE9 C1E805              <1>     shr eax, 5
   183                              <1> .printMinutesAlt:
   184 00002BEC 51                  <1>     push rcx
   185 00002BED E84F030000          <1>     call getDecimalWord
   186 00002BF2 84ED                <1>     test ch, ch ;Do we have an upper digit?
   187 00002BF4 7514                <1>     jnz .skipSpace
   188 00002BF6 88CD                <1>     mov ch, cl
   189 00002BF8 B130                <1>     mov cl, "0"
   190 00002BFA EB0E                <1>     jmp short .skipSpace
   191                              <1> .printHours:
   192 00002BFC 51                  <1>     push rcx
   193 00002BFD E83F030000          <1>     call getDecimalWord
   194 00002C02 84ED                <1>     test ch, ch ;Do we have an upper digit?
   195 00002C04 7504                <1>     jnz .skipSpace
   196 00002C06 88CD                <1>     mov ch, cl
   197 00002C08 B120                <1>     mov cl, " "
   198                              <1> .skipSpace:
   199 00002C0A 88CA                <1>     mov dl, cl
   200 00002C0C B402                <1>     mov ah, 02h
   201 00002C0E CD21                <1>     int 21h
   202 00002C10 88EA                <1>     mov dl, ch
   203 00002C12 B402                <1>     mov ah, 02h
   204 00002C14 CD21                <1>     int 21h
   205 00002C16 59                  <1>     pop rcx
   206                              <1>     return
    13                              <2> %%_ret:
    14 00002C17 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   207                              <1> 
   208                              <1> 
   209                              <1> putVersionInPrompt:
   210 00002C18 488D1569DEFFFF      <1>     lea rdx, dosVer
   211 00002C1F B409                <1>     mov ah, 09h ;Print String
   212 00002C21 CD21                <1>     int 21h
   213 00002C23 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   214 00002C25 CD21                <1>     int 21h
   215 00002C27 50                  <1>     push rax    ;Save minor version
   216 00002C28 E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   217 00002C2D E8B4000000          <1>     call printPackedBCD ;Print al
   218 00002C32 B22E                <1>     mov dl, "."
   219 00002C34 B402                <1>     mov ah, 02h
   220 00002C36 CD21                <1>     int 21h
   221 00002C38 58                  <1>     pop rax
   222 00002C39 88E0                <1>     mov al, ah  ;Get the minor version low
   223 00002C3B E889000000          <1>     call hexToBCD
   224 00002C40 E8A1000000          <1>     call printPackedBCD
   225                              <1>     return
    13                              <2> %%_ret:
    14 00002C45 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> putEscInPrompt:
   227 00002C46 B21B                <1>     mov dl, ESC
   228 00002C48 EB1C                <1>     jmp short outChar
   229                              <1> 
   230                              <1> putMoneyInPrompt:
   231 00002C4A B224                <1>     mov dl, "$"
   232 00002C4C EB18                <1>     jmp short outChar
   233                              <1> 
   234                              <1> putEquInPrompt:
   235 00002C4E B23D                <1>     mov dl, "="
   236 00002C50 EB14                <1>     jmp short outChar
   237                              <1> 
   238                              <1> putPipeInPrompt:
   239 00002C52 B27C                <1>     mov dl, "|"
   240 00002C54 EB10                <1>     jmp short outChar
   241                              <1> 
   242                              <1> putGTinPrompt:
   243 00002C56 B23E                <1>     mov dl, ">"
   244 00002C58 EB0C                <1>     jmp short outChar
   245                              <1> 
   246                              <1> putLTinPrompt:
   247 00002C5A B23C                <1>     mov dl, "<"
   248 00002C5C EB08                <1>     jmp short outChar
   249                              <1> 
   250                              <1> putDriveInPrompt:
   251 00002C5E B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   252 00002C60 CD21                <1>     int 21h
   253 00002C62 0441                <1>     add al, "A" ;Convert to letter
   254 00002C64 88C2                <1>     mov dl, al
   255                              <1> outChar:
   256 00002C66 B402                <1>     mov ah, 02h ;Echo to STDOUT
   257 00002C68 CD21                <1>     int 21h
   258                              <1>     return
    13                              <2> %%_ret:
    14 00002C6A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   259                              <1> putCWDInPrompt:
   260 00002C6B 488D3DEAD3FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   261 00002C72 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   262 00002C74 CD21                <1>     int 21h
   263 00002C76 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   264 00002C78 FEC2                <1>     inc dl
   265 00002C7A 0441                <1>     add al, "A" ;Convert to letter
   266 00002C7C B43A                <1>     mov ah, ":"
   267 00002C7E 66AB                <1>     stosw   ;Store X:, rdi+=2
   268 00002C80 8A05A5D3FFFF        <1>     mov al, byte [pathSep]
   269 00002C86 AA                  <1>     stosb   ;Store pathSep, inc rdi
   270 00002C87 B447                <1>     mov ah, 47h ;Get Current Working Directory
   271 00002C89 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   272 00002C8C CD21                <1>     int 21h
   273 00002C8E E884000000          <1>     call strlen
   274 00002C93 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   275                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   276 00002C99 B440                <1>     mov ah, 40h ;Write to handle
   277 00002C9B BB01000000          <1>     mov ebx, 1  ;STDOUT
   278 00002CA0 488D15B5D3FFFF      <1>     lea rdx, currDirStr
   279 00002CA7 CD21                <1>     int 21h
   280                              <1>     return
    13                              <2> %%_ret:
    14 00002CA9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   281                              <1> 
   282                              <1> BCDtoHex:
   283                              <1> ;Converts a BCD value to a Hex byte
   284                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   285 00002CAA 51                  <1>     push rcx
   286 00002CAB 0FB6C0              <1>     movzx eax, al   ;Zero extend
   287 00002CAE 89C1                <1>     mov ecx, eax    ;Save al in ecx
   288 00002CB0 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   289 00002CB5 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   290 00002CBB C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   291                              <1> .bth:
   292 00002CBE 050A000000          <1>     add eax, 10
   293 00002CC3 FFC9                <1>     dec ecx
   294 00002CC5 75F7                <1>     jnz .bth
   295 00002CC7 59                  <1>     pop rcx
   296 00002CC8 C3                  <1>     ret
   297                              <1> 
   298                              <1> hexToBCD:
   299                              <1> ;Converts a Hex byte into two BCD digits
   300                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   301 00002CC9 51                  <1>     push rcx
   302 00002CCA 0FB6C0              <1>     movzx eax, al   ;Zero extend
   303 00002CCD 31C9                <1>     xor ecx, ecx
   304                              <1> .htb0:
   305 00002CCF 3D0A000000          <1>     cmp eax, 10
   306 00002CD4 7209                <1>     jb .htb1
   307 00002CD6 2D0A000000          <1>     sub eax, 10
   308 00002CDB FFC1                <1>     inc ecx
   309 00002CDD EBF0                <1>     jmp short .htb0
   310                              <1> .htb1:
   311 00002CDF C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   312 00002CE2 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   313 00002CE4 59                  <1>     pop rcx
   314 00002CE5 C3                  <1>     ret
   315                              <1> 
   316                              <1> printPackedBCD:
   317                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   318                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   319                              <1> ;Preserves all registers
   320 00002CE6 50                  <1>     push rax
   321 00002CE7 52                  <1>     push rdx
   322 00002CE8 88C4                <1>     mov ah, al
   323 00002CEA 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   324 00002CEC 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   325 00002CEF 7508                <1>     jnz .upperNybble
   326 00002CF1 B220                <1>     mov dl, " "
   327 00002CF3 B402                <1>     mov ah, 02h
   328 00002CF5 CD21                <1>     int 21h
   329 00002CF7 EB0E                <1>     jmp short .lowerNybble
   330                              <1> .upperNybble:
   331 00002CF9 50                  <1>     push rax
   332 00002CFA C0EC04              <1>     shr ah, 4
   333 00002CFD 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   334 00002D00 88E2                <1>     mov dl, ah
   335 00002D02 B402                <1>     mov ah, 02h ;Print DL
   336 00002D04 CD21                <1>     int 21h
   337 00002D06 58                  <1>     pop rax
   338                              <1> .lowerNybble:
   339 00002D07 0430                <1>     add al, "0"
   340 00002D09 88C2                <1>     mov dl, al
   341 00002D0B B402                <1>     mov ah, 02h ;Print DL
   342 00002D0D CD21                <1>     int 21h
   343 00002D0F 5A                  <1>     pop rdx
   344 00002D10 58                  <1>     pop rax
   345                              <1>     return
    13                              <2> %%_ret:
    14 00002D11 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   346                              <1> 
   347                              <1> getCurrentDrive:
   348                              <1> ;Returns the 0 based current drive in al
   349 00002D12 B419                <1>     mov ah, 19h
   350 00002D14 CD21                <1>     int 21h
   351                              <1>     return
    13                              <2> %%_ret:
    14 00002D16 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   352                              <1> 
   353                              <1> strlen:
   354                              <1> ;Gets the length of a ASCIIZ string
   355                              <1> ;Input: rdi = Source buffer
   356                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   357 00002D17 53                  <1>     push rbx
   358 00002D18 4889E3              <1>     mov rbx, rsp
   359 00002D1B 50                  <1>     push rax    
   360 00002D1C 50                  <1>     push rax
   361 00002D1D B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS
   362 00002D22 CD2F                <1>     int 2fh
   363 00002D24 4889DC              <1>     mov rsp, rbx
   364 00002D27 5B                  <1>     pop rbx
   365                              <1>     return
    13                              <2> %%_ret:
    14 00002D28 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   366                              <1> 
   367                              <1> ucChar:
   368                              <1> ;Input: al = Char to uppercase
   369                              <1> ;Output: al = Adjusted char 
   370 00002D29 53                  <1>     push rbx
   371 00002D2A 4889E3              <1>     mov rbx, rsp    ;Save the stack ptr
   372 00002D2D 50                  <1>     push rax    ;Push the char twice on the stack
   373 00002D2E 50                  <1>     push rax
   374 00002D2F B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   375 00002D34 CD2F                <1>     int 2fh         ;Returns the processed char in al
   376 00002D36 4889DC              <1>     mov rsp, rbx    ;Return the stack ptr to where it was
   377 00002D39 5B                  <1>     pop rbx
   378                              <1>     return
    13                              <2> %%_ret:
    14 00002D3A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   379                              <1> 
   380                              <1> skipDelimiters:
   381                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   382                              <1> ; command delimiters but a subset thereof. 
   383                              <1> ;These are the same across all codepages.
   384                              <1> ;Input: rsi must point to the start of the data string
   385                              <1> ;Output: rsi points to the first non-delimiter char
   386 00002D3B 50                  <1>     push rax
   387                              <1> .l1:
   388 00002D3C AC                  <1>     lodsb
   389 00002D3D E807000000          <1>     call isALdelimiter
   390 00002D42 74F8                <1>     jz .l1
   391                              <1> .exit:
   392 00002D44 58                  <1>     pop rax
   393 00002D45 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   394                              <1>     return
    13                              <2> %%_ret:
    14 00002D48 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   395                              <1> 
   396                              <1> isALdelimiter:
   397                              <1> ;Returns: ZF=NZ if al is not a command separator 
   398                              <1> ;         ZF=ZE if al is a command separator
   399 00002D49 3C20                <1>     cmp al, " "
   400                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D4B 74(48)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   401 00002D4D 3C3B                <1>     cmp al, ";"
   402                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D4F 74(48)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   403 00002D51 3C3D                <1>     cmp al, "="
   404                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D53 74(48)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   405 00002D55 3C2C                <1>     cmp al, ","
   406                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D57 74(48)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   407 00002D59 3C09                <1>     cmp al, TAB
   408                              <1>     return
    13                              <2> %%_ret:
    14 00002D5B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   409                              <1> 
   410                              <1> printPrompt:
   411 00002D5C 66813DC4D2FFFFFFFF  <1>     cmp word [promptPtr], -1
   412 00002D65 750B                <1>     jne .validPrompt
   413                              <1>     ;Here we print the default prompt
   414 00002D67 E8FFFEFFFF          <1>     call putCWDInPrompt
   415 00002D6C E8E5FEFFFF          <1>     call putGTinPrompt
   416                              <1>     return
    13                              <2> %%_ret:
    14 00002D71 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   417                              <1> .validPrompt:
   418                              <1>     return
    13                              <2> %%_ret:
    14 00002D72 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   419                              <1> 
   420                              <1> clearCommandState:
   421                              <1> ;Clears the command state
   422 00002D73 488D3D3AD3FFFF      <1>     lea rdi, cmdStatePtr
   423 00002D7A B90C000000          <1>     mov ecx, cmdStateL
   424 00002D7F 31C0                <1>     xor eax, eax
   425 00002D81 F3AA                <1>     rep stosb
   426 00002D83 C70529D3FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   426 00002D8C FF                  <1>
   427                              <1>     return
    13                              <2> %%_ret:
    14 00002D8D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   428                              <1> 
   429                              <1> clearCommandLineState:
   430                              <1> ;Clears the command line state after a 0Dh encountered
   431 00002D8E 488D3D0AD3FFFF      <1>     lea rdi, cmdLineStatePtr
   432 00002D95 B921000000          <1>     mov ecx, cmdLineStateL
   433 00002D9A 31C0                <1>     xor eax, eax
   434 00002D9C F3AA                <1>     rep stosb
   435 00002D9E C70508D3FFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   435 00002DA7 FF                  <1>
   436 00002DA8 C70504D3FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   436 00002DB1 FF                  <1>
   437                              <1>     return
    13                              <2> %%_ret:
    14 00002DB2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   438                              <1> 
   439                              <1> asciiToFCB:
   440                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   441                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   442                              <1> ;Also doesn't check if chars are valid
   443                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   444                              <1> ;Name is space padded.
   445                              <1> ;Input: rsi = ASCII string buffer
   446                              <1> ;       rdi = FCB name buffer
   447                              <1> ;Output: al = Char that terminated the source string 
   448 00002DB3 53                  <1>     push rbx    
   449 00002DB4 57                  <1>     push rdi
   450 00002DB5 B90B000000          <1>     mov ecx, 11
   451 00002DBA B020                <1>     mov al, " "
   452 00002DBC F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   453 00002DBE 5F                  <1>     pop rdi
   454 00002DBF 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   455 00002DC2 EB1D                <1>     jmp short asciiFilenameToFCB.processName
   456                              <1> asciiFilenameToFCB:
   457                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   458                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   459                              <1> ;Also doesn't check if chars are valid
   460                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   461                              <1> ;Name is space padded.
   462                              <1> ;Input: rsi = ASCII string buffer
   463                              <1> ;       rdi = FCB name buffer
   464                              <1> ;Output: al = Char that terminated the source string 
   465 00002DC4 53                  <1>     push rbx    
   466 00002DC5 57                  <1>     push rdi
   467 00002DC6 B90B000000          <1>     mov ecx, 11
   468 00002DCB B020                <1>     mov al, " "
   469 00002DCD F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   470 00002DCF 5F                  <1>     pop rdi
   471 00002DD0 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   472                              <1>     ;Preprocess for Dir Searches
   473 00002DD3 803E2E              <1>     cmp byte [rsi], "."
   474 00002DD6 7509                <1>     jne .processName
   475 00002DD8 A4                  <1>     movsb   ;Store the first dot
   476 00002DD9 803E2E              <1>     cmp byte [rsi], "."
   477 00002DDC 752C                <1>     jne .exitBadChar
   478 00002DDE A4                  <1>     movsb
   479 00002DDF EB29                <1>     jmp short .exitBadChar
   480                              <1> .processName:
   481 00002DE1 AC                  <1>     lodsb   ;Get the char in al
   482 00002DE2 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   483 00002DE4 7426                <1>     jz .exit
   484 00002DE6 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   485 00002DE8 7407                <1>     je .extSpace
   486 00002DEA 3C2E                <1>     cmp al, "."
   487 00002DEC 740C                <1>     je .ext
   488 00002DEE AA                  <1>     stosb   ;Store the char
   489 00002DEF EBF0                <1>     jmp short .processName
   490                              <1> .extSpace:
   491                              <1> ;Now we scan for a period in the name
   492 00002DF1 AC                  <1>     lodsb   ;Get a char and increase rsi
   493 00002DF2 84C0                <1>     test al, al
   494 00002DF4 7416                <1>     jz .exit
   495 00002DF6 3C2E                <1>     cmp al, "."     ;If al is not a period...
   496 00002DF8 75F7                <1>     jne .extSpace   ; keep searching
   497                              <1> .ext:
   498 00002DFA 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   499                              <1> .processExt:
   500 00002DFE AC                  <1>     lodsb
   501 00002DFF 84C0                <1>     test al, al
   502 00002E01 7409                <1>     jz .exit
   503 00002E03 3C20                <1>     cmp al, " "
   504 00002E05 7405                <1>     je .exit
   505 00002E07 AA                  <1>     stosb
   506 00002E08 EBF4                <1>     jmp short .processExt
   507                              <1> .exitBadChar:
   508 00002E0A 30C0                <1>     xor al, al  ;Return a null terminator
   509                              <1> .exit:
   510 00002E0C 5B                  <1>     pop rbx
   511                              <1>     return
    13                              <2> %%_ret:
    14 00002E0D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   512                              <1> 
   513                              <1> FCBToAsciiz:
   514                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   515                              <1> ;Name is space padded too
   516                              <1> ;Input: rsi = FCB name buffer
   517                              <1> ;       rdi = ASCIIZ string buffer
   518 00002E0E B908000000          <1>     mov ecx, 8
   519 00002E13 F3A4                <1>     rep movsb   ;Move the name over
   520                              <1> .scanNameSpace:
   521 00002E15 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   522 00002E19 750D                <1>     jne .ext
   523 00002E1B 48FFCF              <1>     dec rdi
   524 00002E1E FFC1                <1>     inc ecx
   525 00002E20 81F908000000        <1>     cmp ecx, 8
   526 00002E26 72ED                <1>     jb .scanNameSpace
   527                              <1> .ext:
   528 00002E28 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   529 00002E2D 7506                <1>     jne .validExt
   530 00002E2F 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   531 00002E33 7415                <1>     je .exit
   532                              <1> .validExt:
   533 00002E35 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   534 00002E37 AA                  <1>     stosb
   535 00002E38 B903000000          <1>     mov ecx, 3
   536 00002E3D F3A4                <1>     rep movsb   ;Move the three extension chars over
   537                              <1> .scanExtSpace:
   538 00002E3F 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   539 00002E43 7505                <1>     jne .exit
   540 00002E45 48FFCF              <1>     dec rdi
   541 00002E48 EBF5                <1>     jmp short .scanExtSpace
   542                              <1> .exit:
   543 00002E4A 31C0                <1>     xor eax, eax
   544 00002E4C AA                  <1>     stosb   ;Store a null at the end
   545                              <1>     return
    13                              <2> %%_ret:
    14 00002E4D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   546                              <1>     
   547                              <1> cpDelimPathToBufz:
   548                              <1> ;Copy a delimited path into buffer and null terminate.
   549                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   550                              <1> ;       rdi -> Buffer to store null terminated path in
   551                              <1> ;Output: rsi -> First char past pathname delimiter
   552                              <1> ;       rdi -> One char past null terminator on pathname buffer
   553 00002E4E 53                  <1>     push rbx
   554 00002E4F 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   555                              <1> .lp:
   556 00002E52 AC                  <1>     lodsb   ;Get the char
   557 00002E53 3C0D                <1>     cmp al, CR
   558 00002E55 7412                <1>     je .gotRedirPath
   559 00002E57 E8EDFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   560 00002E5C 740B                <1>     jz .gotRedirPath 
   561 00002E5E 3A05C8D1FFFF        <1>     cmp al, byte [switchChar]
   562 00002E64 7403                <1>     je .gotRedirPath
   563 00002E66 AA                  <1>     stosb   ;Store this char and loop next char
   564 00002E67 EBE9                <1>     jmp short .lp
   565                              <1> .gotRedirPath:
   566 00002E69 50                  <1>     push rax    ;Save the char on stack
   567 00002E6A 30C0                <1>     xor al, al  ;Get null terminator char
   568 00002E6C 4829FB              <1>     sub rbx, rdi
   569 00002E6F 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   570 00002E76 7412                <1>     je .notColon
   571 00002E78 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   572 00002E7F 7409                <1>     je .notColon
   573 00002E81 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   574 00002E85 7503                <1>     jne .notColon
   575 00002E87 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   576                              <1> .notColon:
   577 00002E8A AA                  <1>     stosb   ;Store the null terminator for the redir path
   578 00002E8B 58                  <1>     pop rax ;Get back the char in al
   579 00002E8C 5B                  <1>     pop rbx
   580                              <1>     return
    13                              <2> %%_ret:
    14 00002E8D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   581                              <1> 
   582                              <1> buildCommandPath:
   583                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   584 00002E8E 0FB60526D2FFFF      <1>     movzx eax, byte [arg1Off]
   585 00002E95 4C8B0573D1FFFF      <1>     mov r8, [pspPtr]
   586 00002E9C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   587 00002EA3 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   588                              <1> copyArgumentToSearchSpec:
   589                              <1> ;Copies an arbitrary delimited path pointed to by rsi into rdi and null terminates.
   590 00002EA6 66C705B3D5FFFF0000  <1>     mov word [searchSpec], 0    ;Make sure we clean up search spec first!
   591 00002EAF 488D3DACD5FFFF      <1>     lea rdi, searchSpec
   592 00002EB6 E893FFFFFF          <1>     call cpDelimPathToBufz
   593                              <1>     return
    13                              <2> %%_ret:
    14 00002EBB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   594                              <1> 
   595                              <1> scanForWildcards:
   596                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   597                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   598 00002EBC 50                  <1>     push rax
   599 00002EBD 56                  <1>     push rsi
   600                              <1> .lp:
   601 00002EBE AC                  <1>     lodsb
   602 00002EBF 3C3F                <1>     cmp al, "?"
   603 00002EC1 740A                <1>     je .exit
   604 00002EC3 3C2A                <1>     cmp al, "*"
   605 00002EC5 7406                <1>     je .exit
   606 00002EC7 84C0                <1>     test al, al
   607 00002EC9 75F3                <1>     jnz .lp
   608 00002ECB FEC0                <1>     inc al  ;This will clear the ZF
   609                              <1> .exit:
   610 00002ECD 5E                  <1>     pop rsi
   611 00002ECE 58                  <1>     pop rax
   612                              <1>     return
    13                              <2> %%_ret:
    14 00002ECF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   613                              <1> 
   614                              <1> printDecimalWord:
   615                              <1> ;Takes qword in rax and print it's decimal representation
   616                              <1> ;Takes the qword in eax and prints its decimal representation
   617 00002ED0 31C9                <1>     xor ecx, ecx
   618 00002ED2 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   619 00002ED4 85C0                <1>     test eax, eax
   620 00002ED6 750C                <1>     jnz .notZero
   621 00002ED8 B930000000          <1>     mov ecx, "0"
   622 00002EDD BD01000000          <1>     mov ebp, 1  ;Print one digit
   623 00002EE2 EB3E                <1>     jmp short .dpfb2
   624                              <1> .notZero:
   625 00002EE4 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   626 00002EE6 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   627                              <1> .dpfb0:
   628 00002EEB FFC5                <1>     inc ebp
   629 00002EED 81FD08000000        <1>     cmp ebp, 8
   630 00002EF3 7206                <1>     jb .dpfb00
   631 00002EF5 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   632 00002EF9 EB04                <1>     jmp short .dpfb01
   633                              <1> .dpfb00:
   634 00002EFB 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   635                              <1> .dpfb01:
   636 00002EFF 31D2                <1>     xor edx, edx
   637 00002F01 48F7F6              <1>     div rsi
   638 00002F04 80C230              <1>     add dl, '0'
   639 00002F07 80FA39              <1>     cmp dl, '9'
   640 00002F0A 7603                <1>     jbe .dpfb1
   641 00002F0C 80C207              <1>     add dl, 'A'-'0'-10
   642                              <1> .dpfb1:
   643 00002F0F 81FD08000000        <1>     cmp ebp, 8
   644 00002F15 7204                <1>     jb .dpfb10
   645 00002F17 88D3                <1>     mov bl, dl ;Add the bottom bits
   646 00002F19 EB02                <1>     jmp short .dpfb11
   647                              <1> .dpfb10:
   648 00002F1B 88D1                <1>     mov cl, dl    ;Save remainder byte
   649                              <1> .dpfb11:
   650 00002F1D 4885C0              <1>     test rax, rax
   651 00002F20 75C9                <1>     jnz .dpfb0
   652                              <1> .dpfb2:
   653 00002F22 81FD08000000        <1>     cmp ebp, 8
   654 00002F28 7208                <1>     jb .dpfb20
   655 00002F2A 88DA                <1>     mov dl, bl
   656 00002F2C 48C1EB08            <1>     shr rbx, 8
   657 00002F30 EB06                <1>     jmp short .dpfb21
   658                              <1> .dpfb20:
   659 00002F32 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   660 00002F34 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   661                              <1> .dpfb21:
   662 00002F38 B402                <1>     mov ah, 02h
   663 00002F3A CD21                <1>     int 21h
   664 00002F3C FFCD                <1>     dec ebp
   665 00002F3E 75E2                <1>     jnz .dpfb2
   666                              <1>     return
    13                              <2> %%_ret:
    14 00002F40 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   667                              <1> 
   668                              <1> getDecimalWord:
   669                              <1> ;Works on MAX A dword in eax
   670                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   671 00002F41 31C9                <1>     xor ecx, ecx
   672 00002F43 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   673 00002F45 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   674                              <1> .dpfb0:
   675 00002F4A FFC5                <1>     inc ebp
   676 00002F4C 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   677 00002F50 31D2                <1>     xor edx, edx
   678 00002F52 48F7F3              <1>     div rbx
   679 00002F55 80C230              <1>     add dl, '0'
   680 00002F58 80FA39              <1>     cmp dl, '9'
   681 00002F5B 7603                <1>     jbe .dpfb1
   682 00002F5D 80C207              <1>     add dl, 'A'-'0'-10
   683                              <1> .dpfb1:
   684 00002F60 88D1                <1>     mov cl, dl    ;Save remainder byte
   685 00002F62 4885C0              <1>     test rax, rax
   686 00002F65 75E3                <1>     jnz .dpfb0
   687                              <1>     return
    13                              <2> %%_ret:
    14 00002F67 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   688                              <1> 
   689                              <1> freezePC:
   690 00002F68 488D15F1DDFFFF      <1>     lea rdx, memBad1
   691 00002F6F B409                <1>     mov ah, 09h
   692 00002F71 CD21                <1>     int 21h
   693                              <1> .altEP:
   694 00002F73 488D150FDEFFFF      <1>     lea rdx, memBad3
   695 00002F7A B409                <1>     mov ah, 09h
   696 00002F7C CD21                <1>     int 21h
   697                              <1> .lp:
   698 00002F7E F390                <1>     pause
   699 00002F80 F4                  <1>     hlt
   700 00002F81 EBFB                <1>     jmp short .lp
   701                              <1> 
   702                              <1> setDTA:
   703 00002F83 50                  <1>     push rax
   704 00002F84 52                  <1>     push rdx
   705 00002F85 488D1544D1FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   706 00002F8C B8001A0000          <1>     mov eax, 1A00h
   707 00002F91 CD21                <1>     int 21h
   708 00002F93 5A                  <1>     pop rdx
   709 00002F94 58                  <1>     pop rax
   710                              <1>     return
    13                              <2> %%_ret:
    14 00002F95 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00002F96 53                  <1>     push rbx
    25 00002F97 51                  <1>     push rcx
    26 00002F98 52                  <1>     push rdx
    27 00002F99 57                  <1>     push rdi
    28 00002F9A 56                  <1>     push rsi
    29 00002F9B FC                  <1>     cld         ;Make String ops go forward
    30                              <1> 
    31 00002F9C 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00002F9F 488D156FD8FFFF      <1>     lea rdx, crlf
    33 00002FA6 B409                <1>     mov ah, 09h ;Print String
    34 00002FA8 CD21                <1>     int 21h
    35                              <1> 
    36 00002FAA 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    37 00002FB0 B90C000000          <1>     mov ecx, 0Ch
    38 00002FB5 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    39 00002FB7 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    40 00002FBA 480FB7FF            <1>     movzx rdi, di
    41 00002FBE 4889FA              <1>     mov rdx, rdi    ;Copy error code
    42 00002FC1 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    43 00002FC5 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    44 00002FC8 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    45 00002FCB 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    46 00002FD2 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    47 00002FD6 B409                <1>     mov ah, 09h ;Print String
    48 00002FD8 CD21                <1>     int 21h     ;Call DOS to print first part of message
    49                              <1> 
    50 00002FDA 488D1505020000      <1>     lea rdx, qword [.readmsg]
    51 00002FE1 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    52 00002FE8 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    53 00002FEB 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    54 00002FEF B409                <1>     mov ah, 09h ;Print String
    55 00002FF1 CD21                <1>     int 21h     ;Call DOS to print error reading/writing portion
    56                              <1> 
    57 00002FF3 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    58 00002FF6 0F85DF000000        <1>     jnz .charError
    59                              <1> ;Disk error continues here
    60 00002FFC 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    61 00003003 B409                <1>     mov ah, 09h
    62 00003005 CD21                <1>     int 21h
    63 00003007 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    64 00003009 80C241              <1>     add dl, "A" ;Add ASCII code
    65 0000300C B402                <1>     mov ah, 02h ;Print char in dl
    66 0000300E CD21                <1>     int 21h
    67                              <1> .userInput:
    68 00003010 488D15FED7FFFF      <1>     lea rdx, crlf  ;Print new line
    69 00003017 B409                <1>     mov ah, 09h
    70 00003019 CD21                <1>     int 21h
    71                              <1> ;Abort, Retry, Ignore, Fail is word order
    72                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    73                              <1> .userAbort:
    74                              <1> ;Abort is always an option
    75 0000301B 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    76 00003022 B409                <1>     mov ah, 09h
    77 00003024 CD21                <1>     int 21h ;Call DOS to prompt user for ABORT option
    78                              <1> .userRetry:
    79 00003026 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    80 00003029 7416                <1>     jz .userIgnore    ;If clear, dont print message
    81 0000302B 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
    82 00003032 B409                <1>     mov ah, 09h
    83 00003034 CD21                <1>     int 21h
    84 00003036 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
    85 0000303D B409                <1>     mov ah, 09h
    86 0000303F CD21                <1>     int 21h
    87                              <1> .userIgnore:
    88 00003041 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    89 00003044 7416                <1>     jz .userFail
    90 00003046 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
    91 0000304D B409                <1>     mov ah, 09h
    92 0000304F CD21                <1>     int 21h
    93 00003051 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
    94 00003058 B409                <1>     mov ah, 09h
    95 0000305A CD21                <1>     int 21h
    96                              <1> .userFail:
    97 0000305C F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    98 0000305F 7416                <1>     jz .userMsgEnd
    99 00003061 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   100 00003068 B409                <1>     mov ah, 09h
   101 0000306A CD21                <1>     int 21h
   102 0000306C 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   103 00003073 B409                <1>     mov ah, 09h
   104 00003075 CD21                <1>     int 21h
   105                              <1> .userMsgEnd:
   106 00003077 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   107 0000307E B409                <1>     mov ah, 09h
   108 00003080 CD21                <1>     int 21h
   109                              <1> ;Get user input now 
   110 00003082 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   111 00003084 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   112 0000308B B401                <1>     mov ah, 01h ;STDIN without Console Echo
   113 0000308D CD21                <1>     int 21h ;Get char in al
   114 0000308F 3C61                <1>     cmp al, "a" ;Chack if lowercase
   115 00003091 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   116 00003093 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   117                              <1> .uip1:
   118 00003095 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   119 00003096 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   120 00003098 FFC1                <1>     inc ecx
   121 0000309A 81F904000000        <1>     cmp ecx, 4
   122 000030A0 75F3                <1>     jne .uip1
   123 000030A2 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   124                              <1> .validInput:
   125 000030A7 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   126                              <1> ;Now check if the input is permitted
   127 000030A9 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   128 000030AB 7427                <1>     je .cehExit
   129 000030AD 84C0                <1>     test al, al ;Check if 0 => Ignore
   130 000030AF 740F                <1>     je .viIgnore
   131 000030B1 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   132 000030B3 7416                <1>     je .viRetry
   133                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   134 000030B5 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   135 000030B8 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   136 000030BE EB14                <1>     jmp short .cehExit
   137                              <1> .viIgnore:
   138 000030C0 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   139 000030C3 0F8447FFFFFF        <1>     jz .userInput
   140 000030C9 EB09                <1>     jmp short .cehExit
   141                              <1> .viRetry:
   142 000030CB F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   143 000030CE 0F843CFFFFFF        <1>     jz .userInput
   144                              <1> .cehExit:
   145 000030D4 5E                  <1>     pop rsi
   146 000030D5 5F                  <1>     pop rdi
   147 000030D6 5A                  <1>     pop rdx
   148 000030D7 59                  <1>     pop rcx
   149 000030D8 5B                  <1>     pop rbx
   150 000030D9 48CF                <1>     iretq
   151                              <1> .charError:
   152 000030DB B908000000          <1>     mov ecx, 8  ;8 chars in device name
   153 000030E0 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   154                              <1> .ce1:
   155 000030E7 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   156 000030E8 88C2                <1>     mov dl, al  ;Move char into dl
   157 000030EA B402                <1>     mov ah, 02h
   158 000030EC CD21                <1>     int 21h ;Print char
   159 000030EE E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   160 000030F0 E91BFFFFFF          <1>     jmp .userInput
   161                              <1> 
   162                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   163 000030F5 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   163 000030FE 746563742024202020  <1>
   164 00003107 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   164 00003110 6E6974202420202020  <1>
   165 00003119 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   165 00003122 202420202020202020  <1>
   166 0000312B 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   166 00003134 6F6D6D616E64202420  <1>
   167 0000313D 446174612024202020- <1>             db "Data $            "       ;Error 4
   167 00003146 202020202020202020  <1>
   168 0000314F 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   168 00003158 737420242020202020  <1>
   169 00003161 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   169 0000316A 202020202020202020  <1>
   170 00003173 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   170 0000317C 656469612024202020  <1>
   171 00003185 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   171 0000318E 7420466F756E642024  <1>
   172 00003197 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   172 000031A0 706572202420202020  <1>
   173 000031A9 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   173 000031B2 6C7420242020202020  <1>
   174 000031BB 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   174 000031C4 742024202020202020  <1>
   175 000031CD 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   175 000031D6 61696C757265202420  <1>
   176                              <1> 
   177 000031DF 64726976652024      <1> .drive      db "drive $"
   178 000031E6 6572726F7220726561- <1> .readmsg    db "error reading $"
   178 000031EF 64696E672024        <1>
   179 000031F5 6572726F7220777269- <1> .writemsg   db "error writing $"
   179 000031FE 74696E672024        <1>
   180 00003204 41626F727424        <1> .abortmsg   db "Abort$" 
   181 0000320A 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   182 00003211 526574727924        <1> .retrymsg   db "Retry$"
   183 00003217 4661696C24          <1> .failmsg    db "Fail$"
   184 0000321C 2C2024              <1> .betweenMsg db ", $"
   185 0000321F 3F2024              <1> .endMsg     db "? $"
   186 00003222 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   187                              <1> 
   188                              <1> int23h:
   189 00003226 F60500CEFFFFFF      <1>     test byte [permaSwitch], -1
   190 0000322D 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   191                              <1>     ;Else, we juggle parent PSP's
   192 0000322F 50                  <1>     push rax
   193 00003230 53                  <1>     push rbx
   194 00003231 488B05DFCDFFFF      <1>     mov rax, qword [realParent]
   195 00003238 488B1DD0CDFFFF      <1>     mov rbx, qword [pspPtr]
   196 0000323F 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   197 00003243 5B                  <1>     pop rbx
   198 00003244 58                  <1>     pop rax
   199                              <1> .exit:
   200 00003245 F9                  <1>     stc     ;Set CF to kill the task
   201 00003246 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    19                                  
    20                                  endOfAllocNoMaster: ;End of alloc if not the master cmd
    21                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:  ;Yeet this is this is a child command processor, length 168 chars!
     3                              <1> ;Note this environment DOES NOT contain the full path to the program being launched
     4 00003249 504154483D00        <1>     db "PATH=",0
     5 0000324F 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 00003257 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0
     7 00003260 442E434F4D00        <1>
     8 00003266 202020202020202020- <1>     db (165 - ($ - masterEnv)) dup (" ")    ;Pad the environment with spaces
     8 0000326F 202020202020202020- <1>
     8 00003278 202020202020202020- <1>
     8 00003281 202020202020202020- <1>
     8 0000328A 202020202020202020- <1>
     8 00003293 202020202020202020- <1>
     8 0000329C 202020202020202020- <1>
     8 000032A5 202020202020202020- <1>
     8 000032AE 202020202020202020- <1>
     8 000032B7 202020202020202020- <1>
     8 000032C0 202020202020202020- <1>
     8 000032C9 202020202020202020- <1>
     8 000032D2 202020202020202020- <1>
     8 000032DB 202020202020202020- <1>
     8 000032E4 202020202020202020- <1>
     8 000032ED 20                  <1>
     9 000032EE 0000                <1>     dw 0    ;End of environment marker
    22                                  endOfAlloc: ;End of alloc if the master cmd
    23                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    24                                  Segment transient align=1 follows=.data
    25                                  ;This segment always gets ejected post load
    26                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D15ED010000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    11                              <1> .okVersion:
    12                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    13 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    14 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    15 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    16 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    17                              <1> ;Setup Int 22h, Int 23h and Int 24h
    18 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    19 0000002F 488905(2E000000)    <1>     mov qword [parentInt22], rax
    20                              <1> 
    21 00000036 488D15(962F0000)    <1>     lea rdx, critErrorHandler
    22 0000003D 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    23 00000041 B824250000          <1>     mov eax, 2524h
    24 00000046 CD21                <1>     int 21h
    25 00000048 488D15(26320000)    <1>     lea rdx, int23h
    26 0000004F 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    27 00000053 B823250000          <1>     mov eax, 2523h
    28 00000058 CD21                <1>     int 21h
    29 0000005A 488D15(270E0000)    <1>     lea rdx, applicationReturn
    30 00000061 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    31 00000065 B822250000          <1>     mov eax, 2522h
    32 0000006A CD21                <1>     int 21h
    33                              <1> ;Get a pointer to DOS Sysvars
    34 0000006C B452                <1>     mov ah, 52h ;Get sysvars
    35 0000006E CD21                <1>     int 21h
    36 00000070 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    37                              <1> ;Call for simple internationalisation data
    38 00000077 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    39 0000007C CD21                <1>     int 21h
    40 0000007E 3CFF                <1>     cmp al, -1
    41 00000080 7412                <1>     je .skipSwitch
    42 00000082 8815(2C000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    43 00000088 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    44 0000008B 7507                <1>     jne .skipSwitch
    45 0000008D C605(2B000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    46                              <1> .skipSwitch:
    47 00000094 B800380000          <1>     mov eax, 3800h  ;Get current country data
    48 00000099 488D15(36000000)    <1>     lea rdx, ctryData
    49 000000A0 CD21                <1>     int 21h ;Write the data to the internal country table
    50                              <1> ;Now determine if this is the master copy of COMMAND.COM
    51                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    52 000000A2 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    53 000000A7 CD21                <1>     int 21h
    54 000000A9 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    55 000000AC B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    56 000000B1 CD21                <1>     int 21h
    57 000000B3 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    58 000000B6 755C                <1>     jne .skipMaster
    59                              <1> ;Ok so we are master command.com
    60                              <1> ;Now make myself the real parent
    61 000000B8 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    62 000000BF 4C8905(17000000)    <1>     mov qword [realParent], r8
    63                              <1> ;Set master environment as mine
    64 000000C6 488D05(49320000)    <1>     lea rax, masterEnv
    65 000000CD 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    66                              <1> ;Set current Drive in COMSPEC
    67 000000D1 B019                <1>     mov al, 19h ;Get current Drive
    68 000000D3 CD21                <1>     int 21h
    69 000000D5 0441                <1>     add al, "A"
    70 000000D7 8805(57320000)      <1>     mov byte [masterEnv.cspec], al
    71                              <1> ;Set Int 2Eh up
    72 000000DD 488D15(6B160000)    <1>     lea rdx, int2Eh
    73 000000E4 B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    74 000000E9 CD21                <1>     int 21h
    75                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    76                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    77 000000EB 488D15(15080000)    <1>     lea rdx, crlf
    78 000000F2 B409                <1>     mov ah, 09h
    79 000000F4 CD21                <1>     int 21h
    80 000000F6 E8(621F0000)        <1>     call time
    81 000000FB E8(991E0000)        <1>     call date
    82 00000100 488D15(15080000)    <1>     lea rdx, crlf
    83 00000107 B409                <1>     mov ah, 09h
    84 00000109 CD21                <1>     int 21h
    85 0000010B 488D1D(F0320000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
    86 00000112 EB32                <1>     jmp short .printInit
    87                              <1> .skipMaster:
    88 00000114 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
    89 0000011B 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
    90 00000123 0FB605(2C000000)    <1>     movzx eax, byte [switchChar]
    91 0000012A F2AE                <1>     repne scasb
    92 0000012C 67E310              <1>     jecxz .noSwitches
    93 0000012F 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
    94 00000132 24DF                <1>     and al, 0DFh    ;Convert to UC
    95 00000134 3C50                <1>     cmp al, "P" ;Is it permanent switch?
    96 00000136 7507                <1>     jne .noSwitches
    97 00000138 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    98                              <1> .noSwitches:
    99 0000013F 488D1D(49320000)    <1>     lea rbx, endOfAllocNoMaster  ;This is the base address to jettison
   100                              <1> .printInit:
   101                              <1> ;Finish by printing INIT string.
   102 00000146 53                  <1>     push rbx
   103 00000147 488D153A000000      <1>     lea rdx, initString
   104 0000014E B409                <1>     mov ah, 09h
   105 00000150 CD21                <1>     int 21h ;Print init string
   106 00000152 E8(88260000)        <1>     call version.printVersionNumber
   107 00000157 488D1560000000      <1>     lea rdx, initString2
   108 0000015E B409                <1>     mov ah, 09h
   109 00000160 CD21                <1>     int 21h ;Print init string
   110 00000162 5B                  <1>     pop rbx
   111                              <1>     ;Now we add the stack to the alloc and paragraph align
   112 00000163 4881C340060000      <1>     add rbx, stackSize
   113 0000016A 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   114 00000171 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   115 00000175 48C1E304            <1>     shl rbx, 4
   116 00000179 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   117 0000017C 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   118 00000183 E9(140E0000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   119                              <1> ;Loader Data here
   120                              <1> initString: 
   121 00000188 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   121 00000191 66696320436F6D7075- <1>
   121 0000019A 746572205265736561- <1>
   121 000001A3 726368285229205343- <1>
   121 000001AC 502F444F5328522920- <1>
   121 000001B5 56657273696F6E2024  <1>
   122                              <1> initString2:
   123 000001BE 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",CR,LF,"$"
   123 000001C7 202020284329436F70- <1>
   123 000001D0 797269676874205363- <1>
   123 000001D9 69656E746966696320- <1>
   123 000001E2 436F6D707574657220- <1>
   123 000001EB 526573656172636820- <1>
   123 000001F4 323032342E0D0A24    <1>
   124 000001FC 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   124 00000205 20444F532076657273- <1>
   124 0000020E 696F6E0D0A24        <1>
    27                                  
    28                                  stackSize equ 200*8    ;200 QWORD stack
    28          ------------------       info: assembly required 1+3+2 passes

