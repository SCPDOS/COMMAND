     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber             db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector         dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster     db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSectorsPerClusterShift db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset              dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs           db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries   dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset      dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dClusterCount           dd ?  ;Total number of clusters in data area
    27 00000013 ????????            <1>     .dFATlength              dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor        db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag             db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr             dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?  ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?  ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?  ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?  ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?  ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?  ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?  ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?  ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?  ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?  ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> struc psp
   344 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   345 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   346 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   347 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   348 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   349 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   350 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   351                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   352                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   353                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   354                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   355                              <1> ; always used and jftSize.
   356                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   357 0000002A <res 14h>           <1>     .jobFileTbl resb dfltJFTsize ;Main File handle array, JFT
   358 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   359 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   360 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   361 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   362 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   363 0000005B ??                  <1>                 db ?  ;Reserved byte
   364                              <1> ;The below are in the same place as in DOS.
   365                              <1>     .cmdLineArgPtr: ;Symbol for future use
   366 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   367 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   368                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   369 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   370 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   371                              <1> endstruc
   372                              <1> 
   373                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   374                              <1> 
   375                              <1> struc clkStruc
   376 00000000 ????                <1>     .dateWord   dw ?
   377 00000002 ??                  <1>     .minutes    db ?
   378 00000003 ??                  <1>     .hours      db ?
   379 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   380 00000005 ??                  <1>     .seconds    db ?
   381                              <1> endstruc
   382                              <1> 
   383                              <1> 
   384                              <1> struc extCtryStruc
   385 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   386 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   387 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   388 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   389 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   390                              <1>                         ;0 = month day year hh:mm:ss
   391                              <1>                         ;1 = day month year hh:mm:ss
   392                              <1>                         ;2 = year month day hh:mm:ss
   393 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   394 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   395 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   396 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   397 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   398 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   399                              <1>                         ;0 = Symbol leads, without space
   400                              <1>                         ;1 = Symbol follows, without space
   401                              <1>                         ;2 = Symbol leads, one space
   402                              <1>                         ;3 = Symbol follows, one space
   403                              <1>                         ;4 = Symbol replace decimal separator
   404 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   405 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   406 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   407 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   408 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   409                              <1> endstruc
   410                              <1> 
   411                              <1> struc countryStruc
   412 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   413                              <1>                         ;0 = month day year hh:mm:ss
   414                              <1>                         ;1 = day month year hh:mm:ss
   415                              <1>                         ;2 = year month day hh:mm:ss
   416 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   417 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   418 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   419 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   420 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   421 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   422                              <1>                         ;0 = Symbol leads, without space
   423                              <1>                         ;1 = Symbol follows, without space
   424                              <1>                         ;2 = Symbol leads, one space
   425                              <1>                         ;3 = Symbol follows, one space
   426                              <1>                         ;4 = Symbol replace decimal separator
   427 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   428 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   429 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   430 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   431 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   432                              <1> endstruc
   433                              <1> 
   434                              <1> ;Critical Error AH bitfield equates
   435                              <1> critRead    equ 0h
   436                              <1> critWrite   equ 1h
   437                              <1> critDOS     equ 0h
   438                              <1> critFAT     equ 2h
   439                              <1> critDir     equ 4h
   440                              <1> critData    equ 6h
   441                              <1> critFailOK  equ 8h
   442                              <1> critRetryOK equ 10h
   443                              <1> critIgnorOK equ 20h
   444                              <1> critCharDev equ 80h
   445                              <1> 
   446                              <1> critIgnore  equ 0
   447                              <1> critRetry   equ 1
   448                              <1> critAbort   equ 2
   449                              <1> critFail    equ 3
   450                              <1> 
   451                              <1> ;MISC ASCII control chars
   452                              <1> NUL equ 00h ;^@         | ASCII Null
   453                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   454                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   455                              <1> BEL equ 07h ;^G         | ASCII Bell
   456                              <1> BSP equ 08h ;^H         | ASCII Backspace
   457                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   458                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   459                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   460                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   461                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   462                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   463                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   464                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   465                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   466                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   467                              <1> SPC equ 20h ;Printable  | ASCII Space
   468                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   469                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   470                              <1> 
   471                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   472                              <1> ;Extended Ascii Codes
   473                              <1> eF1     equ 3Bh ;F1 second byte
   474                              <1> eF2     equ 3Ch ;F2 second byte
   475                              <1> eF3     equ 3Dh ;F3 second byte
   476                              <1> eF4     equ 3Eh ;F4 second byte
   477                              <1> eF5     equ 3Fh ;F5 second byte
   478                              <1> eF6     equ 40h ;F6 second byte
   479                              <1> eF7     equ 41h ;F7 second byte
   480                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   481                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   482                              <1> eIns    equ 52h ;Insert second byte
   483                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   484                              <1> 
   485                              <1> ;Default Configuration for the system
   486                              <1> 
   487                              <1> buffersDefault  equ 30
   488                              <1> filesDefault    equ 20
   489                              <1> fcbsDefault     equ 4
   490                              <1> safeFcbsDeflt   equ 0
   491                              <1> lastDriveDeflt  equ 5   
   492                              <1> 
   493                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   494                              <1> ; then the char has this property.
   495                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   496                              <1> termChar    equ 2   ;Terminator char type
   497                              <1> sepChar     equ 4   ;Separator char type
   498                              <1> badFCBChar  equ 8   ;FCB filename char
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       resb 5  
    66 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   resb 1
    68 00000008 ????????????????    <1>     .filename   resb 8
    69 00000010 ??????              <1>     .fileext    resb 3
    70 00000013 ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    resb 8
    73 00000020 ??????              <1>     .newExt     resb 3
    74 00000023 ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI24     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> ;In batch, for pointers, 0 means NULL.
    25                              <1> ;FOR/CALL not priorities for implementation right now.
    26                              <1> struc batBlockHdr
    27 00000000 ??                  <1>     .zero       db ?    ;Always null
    28 00000001 ??                  <1>     .bEchoFlg   db ?    ;Echo flag on entry to batch. 1 if echo on!
    29 00000002 ????????????????    <1>     .pCallBlk   dq ?    ;Pointer to the previous batch block when CALLed
    30 0000000A ????????????????    <1>     .pForBlk    dq ?    ;Pointer to the active FOR block
    31 00000012 ??                  <1>     .bBatFlg    db ?    ;Indicates type of command currently active
    32 00000013 ????????            <1>     .dBatOffLo  dd ?    ;LSEEK Low dword of the batch offset
    33 00000017 ????????            <1>     .dBatOffHi  dd ?    ;LSEEK High dword of the batch offset (0 unless net FS)
    34 0000001B <res 14h>           <1>     .wArgs      dw 10 dup (?) ;Offsets of parameters %0-%9. -1 means no param
    35                              <1>     .cmdLine:   ;0 terminated path (%0) followed by cmd line params.
    36                              <1>     ;We include terminating CR. Add null at the end to mean end of params.
    37                              <1> endstruc
    38                              <1> bbNoParam   equ -1
    39                              <1> bbNull      equ 0
    40                              <1> bbEchoOn    equ 1
    41                              <1> bbEchoOff   equ 0
    42                              <1> bbMaxAlloc  equ batBlockHdr_size + cmdBufferL + 1 ;Add 1 for good measure :)
    43                              <1> batNoEchoChar   equ "@" ;If a line starts with this, no echo!
    44                              <1> 
    45                              <1> 
    46                              <1> 
    47                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    48 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    49 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    50 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    51 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    52 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    53                              <1> endstruc
    54                              <1> 
    55                              <1> struc execProg  ;For use with EXEC-ing a child task
    56 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    57 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    58 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    59 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    60                              <1> endstruc
    61                              <1> 
    62                              <1> ;Directory attribute equates
    63                              <1>     dirReadOnly     equ 01h
    64                              <1>     dirHidden       equ 02h
    65                              <1>     dirSystem       equ 04h
    66                              <1>     dirVolumeID     equ 08h
    67                              <1>     dirDirectory    equ 10h
    68                              <1>     dirArchive      equ 20h
    69                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    70                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    71                              <1>     ;If any of the three bits are set, then ALL three bits are set
    72                              <1>     ; in addition to whatever the user passed to search for.
    73                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    74                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 5C                  <1> pathSep     db "\"  ;Default path sep
    11 0000002A 2F                  <1> switchChar  db "/"  ;Default switch char
    12 0000002B 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT kills
    13 0000002C 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    14                              <1> ;Static strings, not used in command line parsing
    15 00000034 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    15 0000003D 000000000000000000- <1>
    15 00000046 000000000000000000- <1>
    15 0000004F 000000000000000000- <1>
    15 00000058 0000                <1>
    16 0000005A 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    16 00000063 000000000000000000- <1>
    16 0000006C 000000000000000000- <1>
    16 00000075 000000000000000000- <1>
    16 0000007E 000000000000000000- <1>
    16 00000087 000000000000000000- <1>
    16 00000090 000000000000000000- <1>
    16 00000099 00000000            <1>
    17 0000009D 00                  <1> statFlg1    db 0    ;Flags 1 for the command interpreter
    18                              <1> inCritical  equ 1   ;Up if processing a command
    19                              <1> inCtrlC     equ 2   ;Up if we are processing int 23h
    20                              <1> inSingle    equ 4   ;Up if processing a single command (\C mode)
    21                              <1> inBatch     equ 8   ;Up if processing a batch file
    22                              <1> inLdrDT     equ 40h ;Up if in the Date / Time part of Loader
    23                              <1> inLdr       equ 80h ;Up if in loader
    24 0000009E 01                  <1> echoFlg     db 1    ;Global Echo flag, starts up! 1 means on
    25 0000009F FFFF                <1> errHdls     dw -1   ;Set to the STDIO handles. Non -1 => Handles swapped
    26                              <1> 
    27                              <1> cmdLineStatePtr:
    28 000000A1 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    29 000000A2 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    30 000000A4 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    31                              <1> ;These variables are valid for a SINGLE command in a command line
    32                              <1> ;Next two bytes, if set to -1, flags error
    33 000000A6 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    34 000000A7 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    35                              <1> ;                    If 2, we are redirecting output to a file, by appending
    36 000000A8 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    37 000000AA FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    38                              <1> 
    39                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    40 000000AC 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    41 000000AD 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    42 000000AE 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    43                              <1> 
    44 000000AF 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    45 000000B0 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    46 000000B1 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    47                              <1> 
    48 000000B2 00                  <1> switchFnd   db 0    ;Set if a switch char is found
    49                              <1> cmdStateL equ $ - cmdStatePtr
    50                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    51                              <1> 
    52                              <1> ;Batch state variables. Batch changes current dir to dir of batch file!
    53 000000B3 0000000000000000    <1> bbPtr       dq 0    ;Ptr to the batch block
    54 000000BB 000000000000000000- <1> batFile     db fileSpecZL dup (0)   ;Path to bat to execute. Qual with path!
    54 000000C4 000000000000000000- <1>
    54 000000CD 000000000000000000- <1>
    54 000000D6 000000000000000000- <1>
    54 000000DF 000000000000000000- <1>
    54 000000E8 000000000000000000- <1>
    54 000000F1 000000000000000000- <1>
    54 000000FA 000000000000000000- <1>
    54 00000103 00000000000000      <1>
    55 0000010A 000000000000000000- <1> batCurDir   db fileSpecZL dup (0)   ;Get dir on bat drive and save here.
    55 00000113 000000000000000000- <1>
    55 0000011C 000000000000000000- <1>
    55 00000125 000000000000000000- <1>
    55 0000012E 000000000000000000- <1>
    55 00000137 000000000000000000- <1>
    55 00000140 000000000000000000- <1>
    55 00000149 000000000000000000- <1>
    55 00000152 00000000000000      <1>
    56 00000159 04014E0D            <1> batYNstr    db 4,1,"N",CR           ;String for buffered Y/N input
    57                              <1> ;batCallPtr  dq 0    ;Ptr to the call state block
    58                              <1> 
    59                              <1> ;Structs and strings
    60                              <1> 
    61 0000015D 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    61 00000166 00000000000000      <1>
    62 0000016D 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    62 00000176 000000000000000000- <1>
    62 0000017F 000000000000000000- <1>
    62 00000188 000000000000000000- <1>
    62 00000191 00000000000000      <1>
    63                              <1> 
    64 00000198 000000000000000000- <1> launchBlock db execProg_size dup (0)
    64 000001A1 000000000000000000- <1>
    64 000001AA 000000000000000000- <1>
    64 000001B3 0000000000          <1>
    65                              <1> 
    66 000001B8 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Original input from user! 128 chars max! 
    66 000001C1 000000000000000000- <1>
    66 000001CA 000000000000000000- <1>
    66 000001D3 000000000000000000- <1>
    66 000001DC 000000000000000000- <1>
    66 000001E5 000000000000000000- <1>
    66 000001EE 000000000000000000- <1>
    66 000001F7 000000000000000000- <1>
    66 00000200 000000000000000000- <1>
    66 00000209 000000000000000000- <1>
    66 00000212 000000000000000000- <1>
    66 0000021B 000000000000000000- <1>
    66 00000224 000000000000000000- <1>
    66 0000022D 000000000000000000- <1>
    66 00000236 00000000            <1>
    67                              <1> inBufferL   equ 128 ;Will be enuf space for PSP copy to have terminating CR
    68 0000023A 000000000000000000- <1> cpyBuffer   db cmdBufferL dup (0)   ;Copied input for processing
    68 00000243 000000000000000000- <1>
    68 0000024C 000000000000000000- <1>
    68 00000255 000000000000000000- <1>
    68 0000025E 000000000000000000- <1>
    68 00000267 000000000000000000- <1>
    68 00000270 000000000000000000- <1>
    68 00000279 000000000000000000- <1>
    68 00000282 000000000000000000- <1>
    68 0000028B 000000000000000000- <1>
    68 00000294 000000000000000000- <1>
    68 0000029D 000000000000000000- <1>
    68 000002A6 000000000000000000- <1>
    68 000002AF 000000000000000000- <1>
    68 000002B8 00000000            <1>
    69 000002BC 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)   ;Buffer with the command pipeline
    69 000002C5 000000000000000000- <1>
    69 000002CE 000000000000000000- <1>
    69 000002D7 000000000000000000- <1>
    69 000002E0 000000000000000000- <1>
    69 000002E9 000000000000000000- <1>
    69 000002F2 000000000000000000- <1>
    69 000002FB 000000000000000000- <1>
    69 00000304 000000000000000000- <1>
    69 0000030D 000000000000000000- <1>
    69 00000316 000000000000000000- <1>
    69 0000031F 000000000000000000- <1>
    69 00000328 000000000000000000- <1>
    69 00000331 000000000000000000- <1>
    69 0000033A 00000000            <1>
    70 0000033E 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)   ;Space for full path to a ext cmd
    70 00000347 000000000000000000- <1>
    70 00000350 000000000000000000- <1>
    70 00000359 000000000000000000- <1>
    70 00000362 000000000000000000- <1>
    70 0000036B 000000000000000000- <1>
    70 00000374 000000000000000000- <1>
    70 0000037D 000000000000000000- <1>
    70 00000386 00000000000000      <1>
    71 0000038D 000000000000000000- <1> cmdName     db cmdNameL dup (0)     ;Cmd name prefixed by length 
    71 00000396 0000000000          <1>
    72                              <1> 
    73 0000039B 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    73 000003A4 000000000000000000- <1>
    73 000003AD 000000000000000000- <1>
    73 000003B6 000000000000000000- <1>
    73 000003BF 000000000000000000- <1>
    73 000003C8 000000000000000000- <1>
    73 000003D1 000000000000000000- <1>
    73 000003DA 000000000000000000- <1>
    73 000003E3 00000000000000      <1>
    74 000003EA 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    74 000003F3 000000000000000000- <1>
    74 000003FC 000000000000000000- <1>
    74 00000405 000000000000000000- <1>
    74 0000040E 000000000000000000- <1>
    74 00000417 000000000000000000- <1>
    74 00000420 000000000000000000- <1>
    74 00000429 000000000000000000- <1>
    74 00000432 00000000000000      <1>
    75                              <1> 
    76                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    77 00000439 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    77 00000442 000000000000000000- <1>
    77 0000044B 000000000000000000- <1>
    77 00000454 000000000000000000- <1>
    77 0000045D 000000000000000000- <1>
    77 00000466 000000000000000000- <1>
    77 0000046F 000000000000000000- <1>
    77 00000478 000000000000000000- <1>
    77 00000481 00000000000000      <1>
    78 00000488 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    78 00000491 000000000000000000- <1>
    78 0000049A 000000000000000000- <1>
    78 000004A3 000000000000000000- <1>
    78 000004AC 000000000000000000- <1>
    78 000004B5 000000000000000000- <1>
    78 000004BE 000000000000000000- <1>
    78 000004C7 000000000000000000- <1>
    78 000004D0 00000000000000      <1>
    79                              <1> 
    80 000004D7 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    81 000004DF 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    82                              <1> 
    83                              <1> ;Main scratch buffer for forming paths! Needs to be large enough to splice
    84                              <1> ; a really long invalid DOS path for PATH to work properly.
    85 000004E7 000000000000000000- <1> searchSpec  db 2*cmdBufferL dup (0)   
    85 000004F0 000000000000000000- <1>
    85 000004F9 000000000000000000- <1>
    85 00000502 000000000000000000- <1>
    85 0000050B 000000000000000000- <1>
    85 00000514 000000000000000000- <1>
    85 0000051D 000000000000000000- <1>
    85 00000526 000000000000000000- <1>
    85 0000052F 000000000000000000- <1>
    85 00000538 000000000000000000- <1>
    85 00000541 000000000000000000- <1>
    85 0000054A 000000000000000000- <1>
    85 00000553 000000000000000000- <1>
    85 0000055C 000000000000000000- <1>
    85 00000565 000000000000000000- <1>
    85 0000056E 000000000000000000- <1>
    85 00000577 000000000000000000- <1>
    85 00000580 000000000000000000- <1>
    85 00000589 000000000000000000- <1>
    85 00000592 000000000000000000- <1>
    85 0000059B 000000000000000000- <1>
    85 000005A4 000000000000000000- <1>
    85 000005AD 000000000000000000- <1>
    85 000005B6 000000000000000000- <1>
    85 000005BF 000000000000000000- <1>
    85 000005C8 000000000000000000- <1>
    85 000005D1 000000000000000000- <1>
    85 000005DA 000000000000000000- <1>
    85 000005E3 0000000000000000    <1>
    86                              <1> 
    87                              <1> ;Internal Function vars
    88                              <1> ;Dir Vars
    89 000005EB 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    90                              <1> ;                                   Bit[1] set => /P or /p specified
    91                              <1> ;                                   Bit[2] set => A file/path specified
    92 000005EC 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    93 000005ED 00000000            <1> dirFileCtr  dd 0    ;Used in /W mode, rollover after 5
    94 000005F1 00                  <1> dirDrv      db 0    ;0 based drive number to use
    95 000005F2 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
    95 000005FB 000000000000000000- <1>
    95 00000604 000000000000000000- <1>
    95 0000060D 000000000000000000- <1>
    95 00000616 000000000000000000- <1>
    95 0000061F 000000000000000000- <1>
    95 00000628 000000000000000000- <1>
    95 00000631 000000000000000000- <1>
    95 0000063A 000000000000000000- <1>
    95 00000643 000000000000000000- <1>
    95 0000064C 000000000000000000- <1>
    95 00000655 000000000000000000- <1>
    95 0000065E 000000000000000000- <1>
    95 00000667 000000000000000000- <1>
    95 00000670 00000000            <1>
    96 00000674 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
    96 0000067D 3F3F3F3F3F3F3F      <1>
    97                              <1> dirWideType equ 1
    98                              <1> dirPageType equ 2
    99                              <1> dirFileType equ 4
   100                              <1> ;Volume Vars
   101                              <1> volFcb:
   102                              <1>     istruc exFcb
   103 00000684 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
   104 00000685 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
   105 0000068B 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
   106 0000068C 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
   107 00000694 3F3F3F              <1>     at exFcb.fileext,   db "???"
   108 00000697 00000000            <1>     at exFcb.curBlock,  dd 0
   109 0000069B 00<rep 15h>         <1>     iend 
   110                              <1> 
   111                              <1> ;Time/Date vars
   112 000006B0 00                  <1> td1 db 0    ;Minutes/Year
   113 000006B1 00                  <1> td2 db 0    ;Hours/Zero
   114 000006B2 00                  <1> td3 db 0    ;Hundredths/Day
   115 000006B3 00                  <1> td4 db 0    ;Seconds/Month
   116                              <1> 
   117                              <1> ;Rename/Copy/Delete Buffers
   118                              <1> delPath:
   119 000006B4 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   119 000006BD 000000000000000000- <1>
   119 000006C6 000000000000000000- <1>
   119 000006CF 000000000000000000- <1>
   119 000006D8 000000000000000000- <1>
   119 000006E1 000000000000000000- <1>
   119 000006EA 000000000000000000- <1>
   119 000006F3 000000000000000000- <1>
   119 000006FC 000000000000000000- <1>
   119 00000705 000000000000000000- <1>
   119 0000070E 000000000000000000- <1>
   119 00000717 000000000000000000- <1>
   119 00000720 000000000000000000- <1>
   119 00000729 000000000000000000- <1>
   119 00000732 00000000            <1>
   120 00000736 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   120 0000073F 000000000000000000- <1>
   120 00000748 000000000000000000- <1>
   120 00000751 000000000000000000- <1>
   120 0000075A 000000000000000000- <1>
   120 00000763 000000000000000000- <1>
   120 0000076C 000000000000000000- <1>
   120 00000775 000000000000000000- <1>
   120 0000077E 000000000000000000- <1>
   120 00000787 000000000000000000- <1>
   120 00000790 000000000000000000- <1>
   120 00000799 000000000000000000- <1>
   120 000007A2 000000000000000000- <1>
   120 000007AB 000000000000000000- <1>
   120 000007B4 00000000            <1>
   121 000007B8 0000000000000000    <1> srcPtr      dq 0    ;Where to copy pattern to in src path
   122 000007C0 0000000000000000    <1> destPtr     dq 0    ;Where to copy pattern to in dest path
   123 000007C8 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   123 000007D1 2020                <1>
   124                              <1> ;Copy vars
   125 000007D3 00                  <1> verifyFlg   db 0    ;Set if verify on before copy
   126 000007D4 FFFF                <1> sourceHdl   dw -1
   127 000007D6 FFFF                <1> destHdl     dw -1
   128 000007D8 0000                <1> srcHdlInfo  dw 0    ;Save the hdl device info (bit 7 Set -> Char dev)
   129 000007DA 0000000000000000    <1> cpBufPtr    dq 0    ;Ptr to the xfr arena
   130 000007E2 0000                <1> wCpBufSz    dw 0    ;Copy Buffer size, max 4096 bytes
   131 000007E4 00000000            <1> dCpCnt      dd 0    ;Number of files we have copied
   132 000007E8 00                  <1> bCpFlg      db 0    ;Copy state flag
   133                              <1> 
   134                              <1> ascSrc      equ 1   ;Set if ascii copy for this source file.
   135                              <1> binSrc      equ 2   ;Set if last encountered src file flag was binary
   136                              <1> ascDes      equ 4   ;Set if add ^Z at end of file. Clear if not!
   137                              <1> wcSrc       equ 8   ;Set if wc's in source pattern. Display source file names.
   138                              <1> oneDest     equ 10h ;Single destination, not dir 
   139                              <1> mod1Cpy     equ 20h ;Set if copying files to new dir with same names
   140                              <1> mod2Cpy     equ 40h ;Set if copying files with new names
   141                              <1> mod3Cpy     equ 80h ;Set if dflt cat ASCII files to a single destination
   142                              <1> 
   143                              <1> ;Environment manipulation vars
   144 000007E9 0000                <1> envVarSz        dw 0    ;Env var size
   145 000007EB 0000                <1> envVarNamSz     dw 0    ;Env var "name="" length
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 000007ED 03444952            <1>     db 3, "DIR"
     8 000007F1 A31C                <1>     dw dir - startLbl
     9                              <1> 
    10 000007F3 024344              <1>     db 2, "CD"
    11 000007F6 9321                <1>     dw chdir - startLbl
    12                              <1> 
    13 000007F8 054348444952        <1>     db 5, "CHDIR"
    14 000007FE 9321                <1>     dw chdir - startLbl
    15                              <1> 
    16 00000800 024D44              <1>     db 2, "MD"
    17 00000803 0E22                <1>     dw mkdir - startLbl
    18                              <1> 
    19 00000805 054D4B444952        <1>     db 5, "MKDIR"
    20 0000080B 0E22                <1>     dw mkdir - startLbl
    21                              <1> 
    22 0000080D 025244              <1>     db 2, "RD"
    23 00000810 5722                <1>     dw rmdir - startLbl
    24                              <1> 
    25 00000812 05524D444952        <1>     db 5, "RMDIR"
    26 00000818 5722                <1>     dw rmdir - startLbl
    27                              <1> 
    28 0000081A 0344454C            <1>     db 3, "DEL"
    29 0000081E 1A2A                <1>     dw erase - startLbl
    30                              <1> 
    31 00000820 054552415345        <1>     db 5, "ERASE"
    32 00000826 1A2A                <1>     dw erase - startLbl
    33                              <1> 
    34 00000828 0444415445          <1>     db 4, "DATE"
    35 0000082D 5D2B                <1>     dw date - startLbl
    36                              <1> 
    37 0000082F 0454494D45          <1>     db 4, "TIME"
    38 00000834 0B2D                <1>     dw time - startLbl
    39                              <1> 
    40 00000836 04434F5059          <1>     db 4, "COPY"
    41 0000083B A122                <1>     dw copy - startLbl
    42                              <1> 
    43 0000083D 0443545459          <1>     db 4, "CTTY"
    44 00000842 342E                <1>     dw ctty - startLbl
    45                              <1> 
    46 00000844 03434C53            <1>     db 3, "CLS"
    47 00000848 CF2E                <1>     dw cls - startLbl
    48                              <1> 
    49 0000084A 05425245414B        <1>     db 5, "BREAK"
    50 00000850 412F                <1>     dw break - startLbl
    51                              <1> 
    52 00000852 06564552494659      <1>     db 6, "VERIFY"
    53 00000859 C22F                <1>     dw verify - startLbl
    54                              <1> 
    55 0000085B 0652454E414D45      <1>     db 6, "RENAME"
    56 00000862 3F30                <1>     dw rename - startLbl
    57                              <1> 
    58 00000864 0352454E            <1>     db 3, "REN"
    59 00000868 3F30                <1>     dw rename - startLbl
    60                              <1>     
    61 0000086A 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 00000873 3C34                <1>     dw truename - startLbl
    63                              <1> 
    64 00000875 03564552            <1>     db 3, "VER"
    65 00000879 2236                <1>     dw version - startLbl
    66                              <1> 
    67 0000087B 03564F4C            <1>     db 3, "VOL"
    68 0000087F 6335                <1>     dw volume - startLbl
    69                              <1> 
    70 00000881 034D454D            <1>     db 3, "MEM"
    71 00000885 6636                <1>     dw memory - startLbl
    72                              <1> 
    73 00000887 0445584954          <1>     db 4, "EXIT"
    74 0000088C 6338                <1>     dw exit - startLbl
    75                              <1> 
    76 0000088E 0454595045          <1>     db 4, "TYPE"
    77 00000893 B037                <1>     dw type - startLbl
    78                              <1> 
    79 00000895 054C4142454C        <1>     db 5, "LABEL"
    80 0000089B 8D34                <1>     dw label - startLbl
    81                              <1> 
    82 0000089D 0450415448          <1>     db 4, "PATH"
    83 000008A2 BA3B                <1>     dw pathEdit - startLbl
    84                              <1> 
    85 000008A4 03534554            <1>     db 3, "SET"
    86 000008A8 9B3A                <1>     dw set - startLbl
    87                              <1> 
    88 000008AA 0650524F4D5054      <1>     db 6, "PROMPT"
    89 000008B1 993C                <1>     dw prompt - startLbl
    90                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    91 000008B3 054D4B4C424C        <1>     db 5, "MKLBL"
    92 000008B9 B734                <1>     dw mklbl - startLbl
    93                              <1> 
    94 000008BB 05524D4C424C        <1>     db 5, "RMLBL"
    95 000008C1 F234                <1>     dw rmlbl - startLbl
    96                              <1> 
    97 000008C3 05524E4C424C        <1>     db 5, "RNLBL"
    98 000008C9 2D35                <1>     dw rnlbl - startLbl
    99                              <1> 
   100 000008CB 05544F554348        <1>     db 5, "TOUCH"
   101 000008D1 2F32                <1>     dw touch - startLbl
   102                              <1> 
   103 000008D3 044A4F494E          <1>     db 4, "JOIN"
   104 000008D8 9232                <1>     dw join - startLbl
   105                              <1> 
   106 000008DA 055355425354        <1>     db 5, "SUBST"
   107 000008E0 5533                <1>     dw subst - startLbl
   108                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   109                              <1> 
   110 000008E2 044543484F          <1>     db 4, "ECHO"
   111 000008E7 093D                <1>     dw echo - startLbl
   112 000008E9 FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 000008EA 0D0A24              <1> crlf    db  CR,LF,"$"
     3 000008ED 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 000008F2 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 000008FB 696C65206D69737369- <1>
     4 00000904 6E670D0A24          <1>
     5 00000909 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 00000912 6469736B2077697468- <1>
     5 0000091B 206261746368206669- <1>
     5 00000924 6C65                <1>
     6 00000926 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 0000092F 737320616E79206B65- <1>
     6 00000938 79207768656E207265- <1>
     6 00000941 6164790D0A24        <1>
     7 00000947 0D0A5465726D696E61- <1> batFail db  CR,LF,"Terminate batch job (Y/N)? $"
     7 00000950 746520626174636820- <1>
     7 00000959 6A6F622028592F4E29- <1>
     7 00000962 3F2024              <1>
     8 00000965 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     8 0000096E 6E64206F722066696C- <1>
     8 00000977 65206E616D650D0A24  <1>
     9 00000980 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     9 00000989 2066696C65206E616D- <1>
     9 00000992 65206F7220          <1>
    10 00000997 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    10 000009A0 666F756E640D0A24    <1>
    11 000009A8 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full.
    11 000009B1 656E74206469736B20- <1>
    11 000009BA 73706163650D0A24    <1>
    12 000009C2 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    12 000009CB 7669726F6E6D656E74- <1>
    12 000009D4 2073706163650D0A24  <1>
    13 000009DD 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    13 000009E6 74696F6E206572726F- <1>
    13 000009EF 720D0A24            <1>
    14 000009F3 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    14 000009FC 6F7420626520636F70- <1>
    14 00000A05 696564206F6E746F20- <1>
    14 00000A0E 697473656C660D0A24  <1>
    15 00000A17 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    15 00000A20 662064657374696E61- <1>
    15 00000A29 74696F6E206C6F7374- <1>
    15 00000A32 206265666F72652063- <1>
    15 00000A3B 6F70790D0A24        <1>
    16                              <1> ;Copy end message. First write # files copied then this message 
    17 00000A41 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    17 00000A4A 636F706965640D0A24  <1>
    18 00000A53 4E6F7420656E6F7567- <1> cpNoMem db  "Not enough memory for COPY",CR,LF,"$"      ;Never should happen
    18 00000A5C 68206D656D6F727920- <1>
    18 00000A65 666F7220434F50590D- <1>
    18 00000A6E 0A24                <1>
    19                              <1> ;Dir end1 msg. First write # files in dir then this
    20 00000A70 2046696C6528732920- <1> dirOk   db  " File(s) $"
    20 00000A79 24                  <1>
    21                              <1> ;Dir end2 msg. First write # bytes free then this message
    22 00000A7A 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    22 00000A83 65650D0A24          <1>
    23 00000A88 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    24                              <1> 
    25 00000A91 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    25 00000A9A 726976652073706563- <1>
    25 00000AA3 696669636174696F6E- <1>
    25 00000AAC 0D0A24              <1>
    26 00000AAF 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    26 00000AB8 6B6579207768656E20- <1>
    26 00000AC1 7265616479202E202E- <1>
    26 00000ACA 202E2024            <1>
    27 00000ACE 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    27 00000AD7 6172616D657465720D- <1>
    27 00000AE0 0A24                <1>
    28                              <1> 
    29 00000AE2 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    29 00000AEB 576564546875467269- <1>
    29 00000AF4 536174              <1>
    30 00000AF7 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    30 00000B00 206461746524        <1>
    31 00000B06 43757272656E742064- <1> curDate db  "Current date is $"
    31 00000B0F 6174652069732024    <1>
    32 00000B17 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    32 00000B20 657720646174652024  <1>
    33 00000B29 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    33 00000B32 293A2024            <1>
    34 00000B36 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    34 00000B3F 293A2024            <1>
    35 00000B43 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    35 00000B4C 293A2024            <1>
    36 00000B50 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    36 00000B59 2074696D6524        <1>
    37 00000B5F 43757272656E742074- <1> curTime db  "Current time is $"
    37 00000B68 696D652069732024    <1>
    38 00000B70 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    38 00000B79 65772074696D653A20- <1>
    38 00000B82 24                  <1>
    39                              <1> 
    40 00000B83 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    40 00000B8C 7572652028592F4E29- <1>
    40 00000B95 3F2024              <1>
    41                              <1> 
    42 00000B98 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    42 00000BA1 56657273696F6E2024  <1>
    43                              <1> 
    44 00000BAA 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    44 00000BB3 6E2064726976652024  <1>
    45 00000BBC 2069732024          <1> volOk   db " is $"
    46 00000BC1 20686173206E6F206C- <1> volNo   db " has no label$"
    46 00000BCA 6162656C24          <1>
    47                              <1> 
    48 00000BCF 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    48 00000BD8 69726563746F72790D- <1>
    48 00000BE1 0A24                <1>
    49 00000BE3 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    49 00000BEC 206372656174652064- <1>
    49 00000BF5 69726563746F72790D- <1>
    49 00000BFE 0A24                <1>
    50 00000C00 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    50 00000C09 6174682C206E6F7420- <1>
    50 00000C12 6469726563746F7279- <1>
    50 00000C1B 2C0D0A              <1>
    51 00000C1E 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    51 00000C27 6F7279206E6F742065- <1>
    51 00000C30 6D7074790D0A24      <1>
    52 00000C37 204469726563746F72- <1> dirMain db " Directory of  $"
    52 00000C40 79206F66202024      <1>
    53 00000C47 4E6F20506174682024  <1> noPath  db "No Path $"
    54 00000C50 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    54 00000C59 6E6965640D0A24      <1>
    55 00000C60 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    55 00000C69 72697665206973206E- <1>
    55 00000C72 6F206C6F6E67657220- <1>
    55 00000C7B 76616C696424        <1>
    56                              <1> ;badDrvSrch  db "Invalid drive in search path",CR,LF,"$"        ;MAY REMOVE
    57 00000C81 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    57 00000C8A 65766963650D0A24    <1>
    58 00000C92 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    58 00000C9B 20666F756E640D0A24  <1>
    59 00000CA4 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    59 00000CAD 726F720D0A24        <1>
    60 00000CB3 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    60 00000CBC 6F74206265206E6573- <1>
    60 00000CC5 7465640D0A24        <1>
    61 00000CCB 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    61 00000CD4 6174652066696C6520- <1>
    61 00000CDD 6572726F7220647572- <1>
    61 00000CE6 696E6720706970650D- <1>
    61 00000CEF 0A24                <1>
    62 00000CF1 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    62 00000CFA 2062696E6172792072- <1>
    62 00000D03 656164732066726F6D- <1>
    62 00000D0C 206120646576696365- <1>
    62 00000D15 0D0A24              <1>
    63 00000D18 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    64 00000D1E 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    65 00000D23 425245414B20697320- <1> breakIs db "BREAK is $"
    65 00000D2C 24                  <1>
    66 00000D2D 564552494659206973- <1> verifyIs    db "VERIFY is $"
    66 00000D36 2024                <1>
    67 00000D38 4543484F2069732024  <1> echoIs  db "ECHO is $"  
    68 00000D41 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    68 00000D4A 617468206F72206669- <1>
    68 00000D53 6C65206E616D650D0A- <1>
    68 00000D5C 24                  <1>
    69 00000D5D 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    69 00000D66 756D626572206F6620- <1>
    69 00000D6F 706172616D65746572- <1>
    69 00000D78 730D0A24            <1>
    70 00000D7C 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    70 00000D85 74696E6720746F2064- <1>
    70 00000D8E 6576696365          <1>
    71 00000D93 08200800            <1> backSpace   db BSP," ",BSP,NUL
    72 00000D97 50726F6772616D2074- <1> noMemMsg  db "Program too big to fit in memory",CR,LF,"$"
    72 00000DA0 6F6F2062696720746F- <1>
    72 00000DA9 2066697420696E206D- <1>
    72 00000DB2 656D6F72790D0A24    <1>
    73                              <1> 
    74                              <1> 
    75 00000DBA 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    75 00000DC3 20202020202020546F- <1>
    75 00000DCC 74616C207379737465- <1>
    75 00000DD5 6D206D656D6F72793A- <1>
    75 00000DDE 2024                <1>
    76 00000DE0 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    76 00000DE9 20202020202020204D- <1>
    76 00000DF2 656D6F727920757365- <1>
    76 00000DFB 6420627920444F533A- <1>
    76 00000E04 2024                <1>
    77 00000E06 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    77 00000E0F 656D6F727920757365- <1>
    77 00000E18 64206279206170706C- <1>
    77 00000E21 69636174696F6E733A- <1>
    77 00000E2A 2024                <1>
    78 00000E2C 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    78 00000E35 656D6F727920726573- <1>
    78 00000E3E 657276656420627920- <1>
    78 00000E47 68617264776172653A- <1>
    78 00000E50 2024                <1>
    79 00000E52 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    79 00000E5B 202020202020202020- <1>
    79 00000E64 2020202020204D656D- <1>
    79 00000E6D 6F727920667265653A- <1>
    79 00000E76 2024                <1>
    80 00000E78 20627974657324      <1> memByte db " bytes$"
    81 00000E7F 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    81 00000E88 6F7420417373657274- <1>
    81 00000E91 61696E20444F532045- <1>
    81 00000E9A 6E74727920506F696E- <1>
    81 00000EA3 7424                <1>
    82 00000EA5 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    82 00000EAE 416C6C6F636174696F- <1>
    82 00000EB7 6E204572726F7224    <1>
    83 00000EBF 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    83 00000EC8 4572726F7224        <1>
    84 00000ECE 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    84 00000ED7 68616C74656424      <1>
    85                              <1> 
    86 00000EDE 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    86 00000EE7 206372656174652070- <1>
    86 00000EF0 6970650D0A          <1>
    87                              <1> pipeErrMsgL equ $ - pipeErrMsg
    88 00000EF5 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    88 00000EFE 6F6E206572726F720D- <1>
    88 00000F07 0A                  <1>
    89                              <1> redirErrMsgL   equ $ - redirErrMsg
    90                              <1> 
    91 00000F08 1B5B324A            <1> ansiCls  db ESC,"[2J" ;ANSI CLS sequence, 4 chars long
    92 00000F0C 2020202024          <1> fourSpc  db "    $"
    93 00000F11 20202024            <1> threeSpc db "   $"
    94 00000F15 202024              <1> twoSpc   db "  $"
    95                              <1> 
    96 00000F18 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    96 00000F21 696679204F4E206F72- <1>
    96 00000F2A 204F46460D0A24      <1>
    97                              <1> 
    98 00000F31 50524F4D50543D0D    <1> promptEVar  db "PROMPT=",CR     ;Must be CR terminated!
    99 00000F39 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
   100                              <1> ;If anything goes wrong with piping or redirecting just close first two 
   101                              <1> ; handles and reopen CON
   102 00000F42 434F4E00            <1> conName db "CON",0    
   103                              <1>   
   104                              <1> ;Int 24h strings
   105                              <1> errorMsgTable: ;Each table entry is 18 chars long
   106 00000F46 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   106 00000F4F 746563742024202020  <1>
   107 00000F58 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   107 00000F61 6E6974202420202020  <1>
   108 00000F6A 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   108 00000F73 202420202020202020  <1>
   109 00000F7C 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   109 00000F85 6F6D6D616E64202420  <1>
   110 00000F8E 446174612024202020- <1>             db "Data $            "       ;Error 4
   110 00000F97 202020202020202020  <1>
   111 00000FA0 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   111 00000FA9 737420242020202020  <1>
   112 00000FB2 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   112 00000FBB 202020202020202020  <1>
   113 00000FC4 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   113 00000FCD 656469612024202020  <1>
   114 00000FD6 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   114 00000FDF 7420466F756E642024  <1>
   115 00000FE8 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   115 00000FF1 706572202420202020  <1>
   116 00000FFA 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   116 00001003 6C7420242020202020  <1>
   117 0000100C 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   117 00001015 742024202020202020  <1>
   118 0000101E 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   118 00001027 61696C757265202420  <1>
   119                              <1> 
   120 00001030 506C6561736520496E- <1> errMsg0Fh   db "Please Insert disk "      ;Error F
   120 00001039 73657274206469736B- <1>
   120 00001042 20                  <1>
   121 00001043 202020202020202020- <1> vol0Fh      db 11 dup (" ")
   121 0000104C 2020                <1>
   122 0000104E 0D0A24              <1>             db CR,LF,"$"
   123                              <1> 
   124 00001051 64726976652024      <1> drvMsg     db "drive $"
   125 00001058 6572726F7220726561- <1> readMsg    db "error reading $"
   125 00001061 64696E672024        <1>
   126 00001067 6572726F7220777269- <1> writeMsg   db "error writing $"
   126 00001070 74696E672024        <1>
   127 00001076 41626F727424        <1> abortMsg   db "Abort$" 
   128 0000107C 49676E6F726524      <1> ignoreMsg  db "Ignore$"
   129 00001083 526574727924        <1> retryMsg   db "Retry$"
   130 00001089 4661696C24          <1> failMsg    db "Fail$"
   131 0000108E 2C2024              <1> betweenMsg db ", $"
   132 00001091 3F2024              <1> endMsg     db "? $"
   133 00001094 49524146            <1> i24Resp    db "IRAF"   ;Abort Retry Ignore Fail
    15                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:
     3                              <1> ;This is copied into an MCB to be used as the environment!
     4                              <1> comspecEvar:
     5 00001098 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 000010A0 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0  ;Part of the comspec!
     7 000010A9 442E434F4D00        <1>
     8                              <1> pathEVar:
     9 000010AF 504154483D0000      <1>     db "PATH=",0,0  ;End of default environment strings
    10                              <1> menv_len equ $ - masterEnv
    11                              <1> ;Master environment doesnt contain the "program name string"
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 000010B6 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 000010B9 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 000010BD C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 000010C0 B44A                <1>     mov ah, 4Ah ;Realloc
     9 000010C2 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 000010C5 CD21                <1>     int 21h
    11                              <1> commandMain:
    12 000010C7 488B2537EFFFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    13 000010CE FC                  <1>     cld ;Ensure stringops are done the right way
    14 000010CF C605E2F0FFFF80      <1>     mov byte [inBuffer], inBufferL      ;Reset the buffer length
    15 000010D6 C6055DF1FFFF80      <1>     mov byte [cpyBuffer], inBufferL     ;Reset the buffer length
    16 000010DD C605D8F1FFFF80      <1>     mov byte [cmdBuffer], inBufferL     ;Reset the buffer length
    17                              <1> .inputMain:         ;Only reset once per line!
    18 000010E4 E8262F0000          <1>     call printCRLF  ;Command complete, indicate with new line!
    19 000010E9 B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    20 000010EE CD21                <1>     int 21h
    21 000010F0 B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    22 000010F5 BA01000000          <1>     mov edx, 1      ;Start new print job
    23 000010FA CD21                <1>     int 21h
    24                              <1> .inputGetAgain:
    25 000010FC E880310000          <1>     call clearCommandLineState      ;Cleans all handles 5->MAX
    26 00001101 F60595EFFFFF08      <1>     test byte [statFlg1], inBatch   ;If batch on, get the next line to execute
    27 00001108 0F85810A0000        <1>     jnz batNextLine
    28                              <1> .inputGetCmdlineAgain:
    29 0000110E E8632E0000          <1>     call printPrompt    ;Ok we are gonna get more input, output prompt
    30 00001113 488D159EF0FFFF      <1>     lea rdx, inBuffer
    31 0000111A B8000A0000          <1>     mov eax, 0A00h      ;Do Buffered input
    32 0000111F CD21                <1>     int 21h
    33 00001121 E8E92E0000          <1>     call printCRLF  ;Note we have accepted input
    34                              <1> ;First check we had something typed in of length greater than 0
    35 00001126 803D8CF0FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    36 0000112D 74DF                <1>     je .inputGetCmdlineAgain  ;If not, keep looping input
    37                              <1>     ;Copy over the input text
    38 0000112F 488D3582F0FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    39                              <1> .batCopy:               ;Jump here to copy the batch input line 
    40 00001136 488D3DFDF0FFFF      <1>     lea rdi, cpyBuffer
    41 0000113D B982000000          <1>     mov ecx, cmdBufferL     ;Copy the buffer over to manipulate
    42 00001142 F3A4                <1>     rep movsb
    43 00001144 E870000000          <1>     call makeCmdBuffer      ;Preprocess the redir, make cmd buffer
    44                              <1>     ;Now check we aren't starting with a pipe or <CR> and treat differently
    45 00001149 488D356EF1FFFF      <1>     lea rsi, cmdBuffer + 2
    46 00001150 E8FA300000          <1>     call skipDelimiters
    47 00001155 803E0D              <1>     cmp byte [rsi], CR      ;If the first non-delim is a CR, reject input!
    48 00001158 74A2                <1>     je .inputGetAgain       ;Wipe redir flags and reobtain input!
    49 0000115A 803E7C              <1>     cmp byte [rsi], "|"     ;If the first non-delim is a pipe, syntax error!
    50 0000115D 0F84D4030000        <1>     je hardSynErr
    51                              <1> .pipeLoop:
    52 00001163 4C8B05A5EEFFFF      <1>     mov r8, qword [pspPtr]  ;Point back to home segment
    53 0000116A E8A4000000          <1>     call makeCmdString      ;Makes the CR delimited command in psp
    54                              <1>     ;ZF here indicates if we are at the end of the command or nots
    55 0000116F E85B070000          <1>     call setupRedirandPipes ;Setup/advance pipes and redir as appropriate
    56 00001174 E8F3000000          <1>     call analyseCmdline     ;Setup cmdName and fcb for cmdBuffer portion
    57 00001179 E845020000          <1>     call doCommandLine      ;This preps and executes the command portion.
    58                              <1> .okRet:                     ;Normal return point for processing
    59 0000117E E851050000          <1>     call advanceRedir       ;Now advance and end redir if needed
    60 00001183 F60517EFFFFFFF      <1>     test byte [pipeFlag], -1    ;If no pipes, reset state, accept new input
    61 0000118A 0F8454FFFFFF        <1>     jz .inputMain
    62                              <1>     ;Now we pull the commandline forwards. 
    63 00001190 E87E000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    64 00001195 488D3D22F1FFFF      <1>     lea rdi, cmdBuffer + 2
    65 0000119C 4889F1              <1>     mov rcx, rsi
    66 0000119F 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    67 000011A2 280D15F1FFFF        <1>     sub byte [cmdBuffer + 1], cl    ;And erase from the count
    68 000011A8 8A0D0FF1FFFF        <1>     mov cl, byte [cmdBuffer + 1]
    69 000011AE FFC1                <1>     inc ecx     ;One more for the terminating char
    70 000011B0 F3A4                <1>     rep movsb   ;Move the chars over    
    71 000011B2 E8B9300000          <1>     call clearCommandState  ;Else, clear the command state and start again
    72 000011B7 EBAA                <1>     jmp short .pipeLoop     ;Doesn't close handles above 5 until end of pipe!
    73                              <1> 
    74                              <1> makeCmdBuffer:
    75                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    76                              <1> ; copy buffer. Called only once in a cycle.
    77                              <1> ;Throughout: CL has char count, CH has quote count
    78 000011B9 488D357CF0FFFF      <1>     lea rsi, [cpyBuffer + 2]    ;Goto copy buffer + 2
    79 000011C0 31C9                <1>     xor ecx, ecx
    80 000011C2 4889F7              <1>     mov rdi, rsi    ;Save the pointer
    81                              <1> .countQuotes:
    82 000011C5 AC                  <1>     lodsb
    83 000011C6 3C22                <1>     cmp al, '"'
    84 000011C8 7507                <1>     jne .notQuoteToCount
    85 000011CA FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
    86 000011CC E9F4FFFFFF          <1>     jmp .countQuotes
    87                              <1> .notQuoteToCount:
    88 000011D1 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
    89 000011D3 75F0                <1>     jne .countQuotes
    90 000011D5 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
    91 000011D8 488D3DDFF0FFFF      <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
    92                              <1> .getChar:
    93 000011DF AC                  <1>     lodsb           ;Get char in buffer, advance rsi
    94 000011E0 3C22                <1>     cmp al, '"'     ;Is char a quote?
    95 000011E2 750E                <1>     jne .notQuote
    96 000011E4 FECD                <1>     dec ch          ;We have a quote, now decrement
    97 000011E6 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
    98                              <1> .searchForClosingQuote:
    99                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   100 000011E8 AA                  <1>     stosb   ;Store char and inc rdi
   101 000011E9 FEC1                <1>     inc cl
   102 000011EB AC                  <1>     lodsb   ;Get next char
   103 000011EC 3C22                <1>     cmp al, '"'
   104 000011EE 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   105 000011F0 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   106                              <1> .notQuote:
   107 000011F2 E877060000          <1>     call peelRedir      ;Intervene redir if needed
   108 000011F7 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   109 000011F9 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   110 000011FB EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   111                              <1> .pipeHandle:
   112                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   113 000011FD 0F8434030000        <1>     jz hardSynErr ;We had double pipe symbol, syntax error and reset!
   114                              <1> .notRedir:
   115 00001203 AA                  <1>     stosb       ;Store char and advance rdi
   116 00001204 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   117 00001206 7404                <1>     je .exit
   118 00001208 FEC1                <1>     inc cl      ;Increment char count
   119 0000120A EBD3                <1>     jmp short .getChar    ;If not, get next char
   120                              <1> .exit:
   121 0000120C 880DABF0FFFF        <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   122                              <1>     return
    13                              <2> %%_ret:
    14 00001212 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   123                              <1> 
   124                              <1> makeCmdString:
   125                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   126                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   127                              <1> ; Copies into the psp.
   128                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   129 00001213 488D35A4F0FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   130 0000121A 31C9                <1>     xor ecx, ecx
   131 0000121C 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   132                              <1> .countQuotes:
   133 0000121F AC                  <1>     lodsb
   134 00001220 3C22                <1>     cmp al, '"'
   135 00001222 7507                <1>     jne .notQuoteToCount
   136 00001224 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   137 00001226 E9F4FFFFFF          <1>     jmp .countQuotes
   138                              <1> .notQuoteToCount:
   139 0000122B 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   140 0000122D 75F0                <1>     jne .countQuotes
   141 0000122F 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   142 00001232 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   143                              <1> .getChar:
   144 00001239 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   145 0000123A 3C22                <1>     cmp al, '"'     ;Is char a quote?
   146 0000123C 750E                <1>     jne .notQuote
   147 0000123E FECD                <1>     dec ch          ;We have a quote, now decrement
   148 00001240 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   149                              <1> .searchForClosingQuote:
   150                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   151 00001242 AA                  <1>     stosb   ;Store char and inc rdi
   152 00001243 FEC1                <1>     inc cl
   153 00001245 AC                  <1>     lodsb   ;Get next char
   154 00001246 3C22                <1>     cmp al, '"'
   155 00001248 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   156 0000124A FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   157                              <1> .notQuote:
   158 0000124C 3C7C                <1>     cmp al, "|"
   159 0000124E 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   160 00001250 B00D                <1>     mov al, CR          ;Store the pipe char
   161 00001252 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   162                              <1> .notPipe:
   163 00001255 AA                  <1>     stosb       ;Store char and advance rdi
   164 00001256 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   165 00001258 7404                <1>     je .exit
   166 0000125A FEC1                <1>     inc cl      ;Increment char count
   167 0000125C EBDB                <1>     jmp short .getChar    ;If not, get next char
   168                              <1> .exit:
   169 0000125E 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   170 00001261 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   171 00001268 803E0D              <1>     cmp byte [rsi], CR  
   172                              <1>     return
    13                              <2> %%_ret:
    14 0000126B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   173                              <1> 
   174                              <1> analyseCmdline:
   175                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   176                              <1> ; processes the command name into the FCB.  
   177 0000126C C6051AF1FFFF00      <1>     mov byte [cmdName], 0   ;Init this field to indicate no cmd
   178                              <1> ;Start by searching for any switch chars! Set byte if switch chars fnd!!
   179 00001273 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   180 0000127A 4889FE              <1>     mov rsi, rdi                    ;Prep rsi here too
   181 0000127D 0FB64FFF            <1>     movzx ecx, byte [rdi - 1]       ;Get the count byte
   182 00001281 8A05A3EDFFFF        <1>     mov al, byte [switchChar]
   183 00001287 F2AE                <1>     repne scasb                     ;Scan for the switch char
   184 00001289 7506                <1>     jne .noSwitchFnd
   185 0000128B F61521EEFFFF        <1>     not byte [switchFnd]            ;Set switch char fnd on!
   186                              <1> .noSwitchFnd:
   187 00001291 E8B92F0000          <1>     call skipDelimiters     ;Skip any preceeding separators from rsi
   188 00001296 803E0D              <1>     cmp byte [rsi], CR      ;We have no command? Return!
   189                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001299 74(6B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   190 0000129B 4889F3              <1>     mov rbx, rsi            ;Save the start of the text in rbx
   191                              <1> .plp:
   192 0000129E 488D3DB8EEFFFF      <1>     lea rdi, cmdFcb         ;Loop on the commandFCB
   193 000012A5 B801290000          <1>     mov eax, 2901h
   194 000012AA CD21                <1>     int 21h
   195 000012AC 3CFF                <1>     cmp al, -1  ;If DOS returns -1, we have a bad drive specified, fail!
   196 000012AE 0F8402010000        <1>     je .exitBadDrv
   197                              <1> .trailingDotLp:
   198                              <1> ;Reverse along trailing dots!
   199 000012B4 807EFF2E            <1>     cmp byte [rsi - 1], "." ;Is this a dot?
   200 000012B8 7505                <1>     jne .noTrailingDots
   201 000012BA 48FFCE              <1>     dec rsi
   202 000012BD EBF5                <1>     jmp short .trailingDotLp
   203                              <1> .noTrailingDots:
   204 000012BF 8A0564EDFFFF        <1>     mov al, byte [pathSep]  
   205 000012C5 3806                <1>     cmp byte [rsi], al      ;Is the terminator a pathsep?
   206 000012C7 7525                <1>     jne .notPs
   207 000012C9 48FFC6              <1>     inc rsi ;Go to the char after the pathsep
   208 000012CC AC                  <1>     lodsb   ;Get this char
   209 000012CD 48FFCE              <1>     dec rsi ;And move rsi back to where we were
   210 000012D0 3C20                <1>     cmp al, 20h     ;Is this char below 32?
   211 000012D2 7217                <1>     jb .delimfnd    ;Also a delimiter
   212 000012D4 3C5C                <1>     cmp al, "\"     ;If this is a second pathsep, we are done
   213 000012D6 7413                <1>     je .delimfnd
   214 000012D8 3C2F                <1>     cmp al, "/"     ;Or an alt pathsep?
   215 000012DA 740F                <1>     je .delimfnd
   216 000012DC 3C2E                <1>     cmp al, byte "."
   217 000012DE 740B                <1>     je .delimfnd
   218 000012E0 3C22                <1>     cmp al, byte '"'
   219 000012E2 7407                <1>     je .delimfnd
   220 000012E4 E8742F0000          <1>     call isALdelimiter  ;Is this a delim char?
   221 000012E9 75B3                <1>     jne .plp            ;If not, we loop again
   222                              <1> .delimfnd:
   223 000012EB 48FFCE              <1>     dec rsi             ;Point rsi to end of the command
   224                              <1> .notPs:
   225                              <1> ;Now we have reached the end of the command, rsi points to the first char
   226                              <1> ; after the command, whether a delimiter or not.
   227 000012EE 4889F1              <1>     mov rcx, rsi
   228 000012F1 4829D9              <1>     sub rcx, rbx    ;Get the number of chars in the command ONLY
   229 000012F4 4887DE              <1>     xchg rbx, rsi   ;Swap the start and end of the commands!!!
   230 000012F7 488D3D40F0FFFF      <1>     lea rdi, cmdPathSpec
   231 000012FE F3A4                <1>     rep movsb
   232 00001300 30C0                <1>     xor al, al
   233 00001302 AA                  <1>     stosb   ;Store a terminating null
   234 00001303 4887DE              <1>     xchg rbx, rsi
   235                              <1> ;Now we build FCBs for the arguments!
   236 00001306 498D9881000000      <1>     lea rbx, qword [r8 + cmdLine]   ;Now we measure from the start of the buf!
   237 0000130D E893000000          <1>     call .skipAndCheckCR
   238 00001312 745B                <1>     je .setupCmdVars
   239 00001314 C60591EDFFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   240 0000131B 4889F0              <1>     mov rax, rsi
   241 0000131E 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   242 00001321 880586EDFFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   243 00001327 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   244 0000132B B801290000          <1>     mov eax, 2901h
   245 00001330 CD21                <1>     int 21h
   246 00001332 880576EDFFFF        <1>     mov byte [arg1FCBret], al
   247                              <1> .skipArg:
   248 00001338 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   249 00001339 3C0D                <1>     cmp al, CR
   250 0000133B 7432                <1>     je .setupCmdVars
   251 0000133D E81B2F0000          <1>     call isALdelimiter
   252 00001342 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   253 00001344 E85C000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   254 00001349 7424                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   255 0000134B C6055DEDFFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   256 00001352 4889F0              <1>     mov rax, rsi            
   257 00001355 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   258 00001358 880552EDFFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   259 0000135E 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   260 00001362 B801290000          <1>     mov eax, 2901h
   261 00001367 CD21                <1>     int 21h
   262 00001369 880542EDFFFF        <1>     mov byte [arg2FCBret], al
   263                              <1> .setupCmdVars:
   264                              <1> ;Before returning, we copy the command name to cmdName 
   265 0000136F 488D3DC8EFFFFF      <1>     lea rdi, cmdPathSpec
   266 00001376 E88B2F0000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   267 0000137B E8AA2E0000          <1>     call strlen ;Get the length of the final path componant
   268 00001380 81F90C000000        <1>     cmp ecx, 11 + 1 ;Extra char for the ext separator (dot)
   269 00001386 7726                <1>     ja .exitBad     ;Return error
   270 00001388 4889FE              <1>     mov rsi, rdi
   271 0000138B 488D3DFBEFFFFF      <1>     lea rdi, cmdName
   272 00001392 FFC9                <1>     dec ecx ;Minus the terminating null
   273 00001394 880F                <1>     mov byte [rdi], cl ;Store the length here
   274 00001396 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   275                              <1> .cpCmdName:
   276 00001399 AC                  <1>     lodsb
   277 0000139A E8952E0000          <1>     call ucChar ;Uppercase the char
   278 0000139F AA                  <1>     stosb
   279 000013A0 FFC9                <1>     dec ecx
   280 000013A2 75F5                <1>     jnz .cpCmdName
   281                              <1>     return
    13                              <2> %%_ret:
    14 000013A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> .skipAndCheckCR:
   283                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   284 000013A5 E8A52E0000          <1>     call skipDelimiters ;Go to the next char in the input line
   285 000013AA 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   286                              <1>     return
    13                              <2> %%_ret:
    14 000013AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   287                              <1> .exitBad:
   288 000013AE C605D8EFFFFFFF      <1>     mov byte [cmdName], -1  ;Store -1 to indicate error
   289                              <1>     return
    13                              <2> %%_ret:
    14 000013B5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   290                              <1> .exitBadDrv:
   291 000013B6 C605D0EFFFFFFE      <1>     mov byte [cmdName], -2  ;Indicate a bad drive specified
   292 000013BD E89F080000          <1>     call badDriveError
   293                              <1>     return
    13                              <2> %%_ret:
    14 000013C2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   294                              <1> 
   295                              <1> doCommandLine:
   296                              <1>     ;The following check accounts for the end of a piped command
   297 000013C3 803DC3EFFFFF00      <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, syntax error!
   298 000013CA 0F8467010000        <1>     je hardSynErr   ;This now should never be hit, earmark for removal!
   299 000013D0 803DB6EFFFFFFF      <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   300 000013D7 0F84BD080000        <1>     je badCmdError
   301 000013DD 803DA9EFFFFFFE      <1>     cmp byte [cmdName], -2  ;Bad drive specified, nop
   302                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000013E4 74(C2)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   303 000013E6 488D3551EFFFFF      <1>     lea rsi, cmdPathSpec
   304 000013ED 0FB71D4AEFFFFF      <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   305 000013F4 80FF3A              <1>     cmp bh, ":"
   306 000013F7 7520                <1>     jne .noDriveSpecified
   307 000013F9 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   308 000013FB E8342E0000          <1>     call ucChar     ;Uppercase al
   309 00001400 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   310                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   311 00001402 803D84EFFFFF02      <1>     cmp byte [cmdName], 2
   312 00001409 750E                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   313 0000140B 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   314 0000140D E8EE2D0000          <1>     call setDrive
   315                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001412 74(C2)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   316 00001414 E948080000          <1>     jmp badDriveError
   317                              <1> .noDriveSpecified:
   318                              <1> ;rbx is writable UP TO THE FIRST PIPE OR CR (non-inclusive)
   319 00001419 488D1D9CEEFFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer
   320 00001420 488D3566EFFFFF      <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   321 00001427 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   322 0000142C BAFFFF0000          <1>     mov edx, 0FFFFh
   323 00001431 B5FF                <1>     mov ch, -1
   324 00001433 CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   325 00001435 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   326 0000143A BAFFFF0000          <1>     mov edx, 0FFFFh
   327 0000143F 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   328 00001441 CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   329                              <1>             ;        al = 0  if the command should be executed as usual
   330 00001443 84C0                <1>     test al, al
   331 00001445 7444                <1>     jz .executeInternal
   332                              <1>     ;Here we execute externally and return to the prompt
   333                              <1>     ; as if it was an internal execution. rbx is not to be relied on here!
   334 00001447 498D9880000000      <1>     lea rbx, qword [r8 + cmdTail]
   335 0000144E 488D3538EFFFFF      <1>     lea rsi, cmdName        
   336 00001455 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   337 0000145A BAFFFF0000          <1>     mov edx, 0FFFFh
   338 0000145F B5FF                <1>     mov ch, -1
   339 00001461 CD2F                <1>     int 2Fh
   340 00001463 803D23EFFFFF00      <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   341                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000146A 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000146C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   342                              <1>     ;We need to copy over to cmdPathSpec in the event this command
   343                              <1>     ; is an external command that is in the CD or in the PATH.
   344                              <1>     ;Should not be used for this purpose but it is here...
   345 0000146D E8C6050000          <1>     call pullCommandline    ;Pull the tail down with the original name
   346 00001472 488D3514EFFFFF      <1>     lea rsi, cmdName        ;Now make the new cmd the new cmdspec!
   347 00001479 AC                  <1>     lodsb                   ;Get the name length
   348 0000147A 0FB6C8              <1>     movzx ecx, al
   349 0000147D 488D3DBAEEFFFF      <1>     lea rdi, cmdPathSpec    ;Overwrite the original specified command
   350 00001484 F3A4                <1>     rep movsb   
   351 00001486 31C0                <1>     xor eax, eax
   352 00001488 AA                  <1>     stosb   ;Store null terminator
   353 00001489 EB1F                <1>     jmp short .executeInternal2 ;Skip the equivalent for non-ae cases
   354                              <1> .executeInternal:
   355 0000148B E8A8050000          <1>     call pullCommandline    ;Now pull the tail down
   356 00001490 488D3DA7EEFFFF      <1>     lea rdi, cmdPathSpec
   357 00001497 E88E2D0000          <1>     call strlen ;Get the length of the input command
   358 0000149C FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   359 0000149E 380DE9EEFFFF        <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   360 000014A4 0F85EF230000        <1>     jne launchChild     ;If not, a path was specified, exit!
   361                              <1> .executeInternal2:
   362                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   363 000014AA 488D1D3CF3FFFF      <1>     lea rbx, functionTable
   364                              <1> .nextEntry:
   365 000014B1 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   366 000014B4 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   367 000014B7 0F84DC230000        <1>     je launchChild      ;If so, check externally now
   368 000014BD 380DCAEEFFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   369 000014C3 7531                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   370                              <1>     ;Here they have the same length so lets see if the name is the same
   371 000014C5 56                  <1>     push rsi
   372                              <1>     ;ecx has the length to compare
   373 000014C6 51                  <1>     push rcx
   374 000014C7 488D7301            <1>     lea rsi, qword [rbx + 1]
   375 000014CB 488D3DBCEEFFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   376 000014D2 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   377 000014D4 59                  <1>     pop rcx
   378 000014D5 5E                  <1>     pop rsi
   379 000014D6 751E                <1>     jne .gotoNextEntry
   380                              <1>     ;Here it was found both strings are equal
   381 000014D8 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   382 000014DD 480FB71F            <1>     movzx rbx, word [rdi]
   383 000014E1 488D3D18EBFFFF      <1>     lea rdi, startLbl
   384 000014E8 4801FB              <1>     add rbx, rdi
   385 000014EB C6051BEBFFFF00      <1>     mov byte [returnCode], 0 ;Reset the retcode before executing function!
   386 000014F2 FFD3                <1>     call rbx        ;Call the internal function!
   387 000014F4 EB0C                <1>     jmp short appRet    ;Now once we are done, goto appRet!
   388                              <1> .gotoNextEntry:
   389 000014F6 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   390 000014FD 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   391 00001500 EBAF                <1>     jmp short .nextEntry
   392                              <1> 
   393                              <1> appRet:  ;Return point from a task, jumped to from internal functions
   394                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled.
   395                              <1> ;Can depend on RSP here because I fixed DOS.
   396 00001502 488B25FCEAFFFF      <1>     mov rsp, qword [stackTop]   ;Reset stack ptr
   397 00001509 E8E72F0000          <1>     call resetIDTentries
   398 0000150E B8004D0000          <1>     mov eax, 4D00h              ;Get retcode, will be 0 for internal commands
   399 00001513 CD21                <1>     int 21h
   400 00001515 668905F1EAFFFF      <1>     mov word [returnCode], ax
   401 0000151C 84E4                <1>     test ah, ah     ;Regular exit
   402 0000151E 0F845AFCFFFF        <1>     jz commandMain.okRet
   403 00001524 80FC03              <1>     cmp ah, 3       ;TSR exit
   404 00001527 0F8451FCFFFF        <1>     je commandMain.okRet
   405                              <1>     ;Here we ask if we want to stop any batch processing, ret to 2Eh etc.
   406                              <1>     ;For now, just clean redirs and fully reset!
   407 0000152D E83F000000          <1>     call cleanupRedirs
   408 00001532 E990FBFFFF          <1>     jmp commandMain
   409                              <1>     ;cmp ah, 1       ;Was this Ctrl^C?
   410                              <1>     ;je commandMain
   411                              <1>     ;jmp commandMain  ;If we aborted, fully reset!
   412                              <1> 
   413                              <1> hardSynErr:
   414                              <1> ;Hard syntax error in cmd line. Delete pipe files and reset completely!
   415 00001537 E801070000          <1>     call badSyntaxError         ;Output bad syntax if empty command found
   416 0000153C E926000000          <1>     jmp redirPipeFailureCommon.noPrint  ;This closes pipes and resets stack
   417                              <1> redirFailure:
   418 00001541 488D15ADF9FFFF      <1>     lea rdx, redirErrMsg
   419 00001548 B913000000          <1>     mov ecx, redirErrMsgL
   420 0000154D EB0C                <1>     jmp short redirPipeFailureCommon
   421                              <1> pipeFailure:
   422 0000154F 488D1588F9FFFF      <1>     lea rdx, pipeErrMsg
   423 00001556 B917000000          <1>     mov ecx, pipeErrMsgL
   424                              <1> redirPipeFailureCommon:
   425                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   426                              <1> ;This routine tries to close whatever handles are not -1 and delete
   427                              <1> ; pipe files if the pipe count is not 0.
   428                              <1> ;It resets all variables and jumps to reset the stack!
   429 0000155B B800400000          <1>     mov eax, 4000h  ;Write handle
   430 00001560 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   431 00001565 CD21                <1>     int 21h
   432                              <1> .noPrint:
   433 00001567 E805000000          <1>     call cleanupRedirs  ;Cleans the redirections 
   434 0000156C E956FBFFFF          <1>     jmp commandMain ;Retake input from the command line
   435                              <1> 
   436                              <1> cleanupRedirs:
   437                              <1> ;Cleans all active redirections, returning to the saved state.
   438                              <1> ;Deletes any pipe files, leaves any redir out files.
   439                              <1> ;Resets the internal vars
   440 00001571 0FB70530EBFFFF      <1>     movzx eax, word [redirSTDIN]
   441 00001578 0FB71523EBFFFF      <1>     movzx edx, word [pipeSTDIN]
   442 0000157F 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   443 00001581 E8CC000000          <1>     call .closeAndReplace
   444 00001586 0FB7051DEBFFFF      <1>     movzx eax, word [redirSTDOUT]
   445 0000158D 0FB71510EBFFFF      <1>     movzx edx, word [pipeSTDOUT]
   446 00001594 FFC3                <1>     inc ebx         ;Select STDOUT for closing
   447 00001596 E8B7000000          <1>     call .closeAndReplace
   448 0000159B 66C70502EBFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   449 000015A4 0FB71DFDEAFFFF      <1>     movzx ebx, word [redirSTDIN]
   450 000015AB E892000000          <1>     call .closeHandle
   451                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   452 000015B0 66C705EFEAFFFFFFFF  <1>     mov word [redirSTDIN], -1
   453 000015B9 0FB71DEAEAFFFF      <1>     movzx ebx, word [redirSTDOUT]
   454 000015C0 E87D000000          <1>     call .closeHandle
   455 000015C5 66C705DCEAFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   456 000015CE 0FB71DCDEAFFFF      <1>     movzx ebx, word [pipeSTDIN]
   457 000015D5 E868000000          <1>     call .closeHandle
   458 000015DA 66C705BFEAFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   459 000015E3 0FB71DBAEAFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   460 000015EA E853000000          <1>     call .closeHandle
   461 000015EF 66C705ACEAFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   462 000015F8 C605A2EAFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   463 000015FF 488D1533EEFFFF      <1>     lea rdx, qword [pipe1Filespec]
   464 00001606 803A00              <1>     cmp byte [rdx], 0
   465 00001609 7407                <1>     jz .checkOld
   466 0000160B B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   467 00001610 CD21                <1>     int 21h
   468                              <1> .checkOld:
   469 00001612 488D156FEEFFFF      <1>     lea rdx, qword [pipe2Filespec]
   470 00001619 803A00              <1>     cmp byte [rdx],0
   471 0000161C 7407                <1>     jz .pipeNamesComplete
   472 0000161E B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   473 00001623 CD21                <1>     int 21h
   474                              <1> .pipeNamesComplete:
   475 00001625 31C0                <1>     xor eax, eax
   476                              <1>     ;Invalidate the pointers and the paths too
   477 00001627 488905A9EEFFFF      <1>     mov qword [newPipe], rax
   478 0000162E 488905AAEEFFFF      <1>     mov qword [oldPipe], rax
   479 00001635 8905FEEDFFFF        <1>     mov dword [pipe1Filespec], eax
   480 0000163B 890547EEFFFF        <1>     mov dword [pipe2Filespec], eax
   481                              <1>     return
    13                              <2> %%_ret:
    14 00001641 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   482                              <1> 
   483                              <1> .closeHandle:
   484 00001642 81FBFFFFFFFF        <1>     cmp ebx, -1
   485                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001648 74(41)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   486 0000164A B8003E0000          <1>     mov eax, 3E00h
   487 0000164F CD21                <1>     int 21h
   488                              <1>     return
    13                              <2> %%_ret:
    14 00001651 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   489                              <1> .closeAndReplace:
   490                              <1> ;Input: ax = one possible handle, dx = second possible handle
   491                              <1> ;       bx = handle to close and copy ax/dx into
   492                              <1> ;Output: Handle intervened on. bx preserved
   493 00001652 C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   494 00001655 09D0                <1>     or eax, edx     ;Form packed
   495 00001657 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   496                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000165C 74(51)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   497 0000165E E8DFFFFFFF          <1>     call .closeHandle
   498 00001663 663DFFFF            <1>     cmp ax, -1      
   499 00001667 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   500 0000166B 53                  <1>     push rbx
   501 0000166C 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   502 0000166F B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   503 00001674 CD21                <1>     int 21h
   504 00001676 5B                  <1>     pop rbx
   505                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001677 73(51)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   506                              <1>     ;Else we now try to force con to open!
   507 00001679 E8C4FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   508 0000167E B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   509 00001683 488D15B8F8FFFF      <1>     lea rdx, conName
   510 0000168A CD21                <1>     int 21h
   511                              <1>     return
    13                              <2> %%_ret:
    14 0000168C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   512                              <1> 
   513                              <1> cleanRedirOut:
   514                              <1> ;Used to oust any stdout redir if necessary. This is different to the above in 
   515                              <1> ; that it deletes the redir out file. Therefore, this is only called in 
   516                              <1> ; particular cases like launching bat files which needs special handling in 
   517                              <1> ; that all redirs need to be completely removed.
   518 0000168D 66813D14EAFFFFFFFF  <1>     cmp word [redirSTDOUT], -1  ;Do we have > xyzzy.fil?
   519                              <1>     rete  ;Return if no stdout redir! We are ok!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001696 74(8C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   520 00001698 0FB71D0BEAFFFF      <1>     movzx ebx, word [redirSTDOUT]
   521 0000169F B901000000          <1>     mov ecx, 1      ;STDOUT
   522 000016A4 B800460000          <1>     mov eax, 4600h  ;DUP this into STDOUT closing redirout
   523 000016A9 CD21                <1>     int 21h
   524 000016AB 0FB71DF8E9FFFF      <1>     movzx ebx, word [redirSTDOUT]   ;Kill the duplicate now
   525 000016B2 B8003E0000          <1>     mov eax, 3E00h  
   526 000016B7 CD21                <1>     int 21h
   527 000016B9 66C705E8E9FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Set default value back
   528 000016C2 488D1521EDFFFF      <1>     lea rdx, rdrOutFilespec
   529 000016C9 B800410000          <1>     mov eax, 4100h      ;Del stdout file
   530 000016CE CD21                <1>     int 21h
   531 000016D0 C60200              <1>     mov byte [rdx], 0   ;Ensure this is a clear path (not necessary)
   532                              <1>     ;Ignore any errors in this procedures. Errors mean either sharing problems
   533                              <1>     ; or the file doesnt exist, which in either case, is fine to leave it be!
   534                              <1>     return
    13                              <2> %%_ret:
    14 000016D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   535                              <1> 
   536                              <1> advanceRedir:
   537                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   538                              <1> ;Close stdin redir then stdout redir. 
   539 000016D4 F605CBE9FFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   540 000016DB 0F8585000000        <1>     jnz .redirIn
   541 000016E1 F605B9E9FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   542 000016E8 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   543 000016EE 0FBF05ADE9FFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   544 000016F5 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   545 000016FA 0F84EB000000        <1>     je .pipeOut              
   546                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   547 00001700 0FB71D9BE9FFFF      <1>     movzx ebx, word [pipeSTDIN] 
   548 00001707 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   549 00001709 B800460000          <1>     mov eax, 4600h
   550 0000170E CD21                <1>     int 21h
   551 00001710 0F8239FEFFFF        <1>     jc pipeFailure
   552 00001716 B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   553 0000171B CD21                <1>     int 21h
   554 0000171D 0F822CFEFFFF        <1>     jc pipeFailure
   555 00001723 488B15B5EDFFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   556 0000172A B800410000          <1>     mov eax, 4100h  ;Delete the file!
   557 0000172F CD21                <1>     int 21h
   558 00001731 0F8218FEFFFF        <1>     jc pipeFailure
   559 00001737 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   560 0000173A 66C7055FE9FFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   561                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   562                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   563                              <1>     ;Else exit!
   564 00001743 0FBF055AE9FFFF      <1>     movsx eax, word [pipeSTDOUT]
   565 0000174A 3DFFFFFFFF          <1>     cmp eax, -1
   566 0000174F 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   567 00001755 C60545E9FFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   568 0000175C F60544E9FFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   569 00001763 753D                <1>     jnz .redirOut               ;Go for it if so!
   570                              <1>     return
    13                              <2> %%_ret:
    14 00001765 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   571                              <1> .redirIn:
   572                              <1> ;Here we clean redirIn
   573 00001766 0FB71D3BE9FFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   574 0000176D 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   575 0000176F B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   576 00001774 CD21                <1>     int 21h
   577 00001776 0F82C5FDFFFF        <1>     jc redirFailure
   578 0000177C B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   579 00001781 CD21                <1>     int 21h
   580 00001783 0F82B8FDFFFF        <1>     jc redirFailure
   581 00001789 66C70516E9FFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   582 00001792 C6050DE9FFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   583 00001799 F60501E9FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   584 000017A0 7549                <1>     jnz .pipeOut
   585                              <1> .redirOut:
   586 000017A2 F605FEE8FFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   587                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000017A9 74(65)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   588                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   589 000017AB F605EFE8FFFFFF      <1>     test byte [pipeFlag], -1
   590 000017B2 7537                <1>     jnz short .pipeOut
   591 000017B4 0FB71DEFE8FFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   592 000017BB B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   593 000017C0 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   594 000017C5 CD21                <1>     int 21h
   595 000017C7 0F8274FDFFFF        <1>     jc redirFailure
   596 000017CD B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   597 000017D2 CD21                <1>     int 21h
   598 000017D4 0F8267FDFFFF        <1>     jc redirFailure
   599 000017DA 66C705C7E8FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   600 000017E3 C605BDE8FFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   601                              <1>     return
    13                              <2> %%_ret:
    14 000017EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   602                              <1> .pipeOut:
   603                              <1> ;Duplicate STDIN to save across pipe
   604 000017EB 0FBF05B2E8FFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   605 000017F2 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   606                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000017F7 74(EA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   607 000017F9 B800450000          <1>     mov eax, 4500h
   608 000017FE 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   609 00001800 CD21                <1>     int 21h
   610 00001802 0F8247FDFFFF        <1>     jc pipeFailure
   611 00001808 66890593E8FFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   612                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   613 0000180F B800460000          <1>     mov eax, 4600h
   614 00001814 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   615 00001816 FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   616 00001818 CD21                <1>     int 21h
   617 0000181A 0F822FFDFFFF        <1>     jc pipeFailure
   618                              <1> ;Now return the original stdout to stdout
   619 00001820 89D9                <1>     mov ecx, ebx
   620 00001822 0FB71D7BE8FFFF      <1>     movzx ebx, word [pipeSTDOUT]
   621 00001829 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   622 0000182E CD21                <1>     int 21h
   623 00001830 0F8219FDFFFF        <1>     jc pipeFailure
   624                              <1> ;Now close the DUP'ed STDOUT
   625 00001836 B8003E0000          <1>     mov eax, 3E00h
   626 0000183B CD21                <1>     int 21h
   627 0000183D 0F820CFDFFFF        <1>     jc pipeFailure
   628                              <1> ;Finally unwind STDIN to the beginning of the file
   629 00001843 B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   630 00001848 31DB                <1>     xor ebx, ebx    ;STDIN handle
   631 0000184A 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   632 0000184C 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   633 0000184E CD21                <1>     int 21h
   634 00001850 0F82F9FCFFFF        <1>     jc pipeFailure  ;This should never happen
   635 00001856 488B157AECFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   636 0000185D 4889157BECFFFF      <1>     mov qword [oldPipe], rdx
   637 00001864 66C70537E8FFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   638                              <1>     return
    13                              <2> %%_ret:
    14 0000186D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   639                              <1> 
   640                              <1> 
   641                              <1> peelRedir:
   642                              <1> ;Checks and sets up redir as appropriate
   643                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   644                              <1> ;       rsi points to the first char after the char in al in cpyBuffer
   645                              <1> ;Output: ZF=NZ => No redir
   646                              <1> ;        ZF=ZY => Redir
   647                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   648                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   649 0000186E 51                  <1>     push rcx
   650 0000186F 57                  <1>     push rdi
   651 00001870 3C3C                <1>     cmp al, "<"
   652 00001872 740C                <1>     je .inputRedir
   653 00001874 3C3E                <1>     cmp al, ">"
   654 00001876 7427                <1>     je .outputRedir
   655 00001878 3C7C                <1>     cmp al, "|"
   656 0000187A 7441                <1>     je .pipeSetup
   657 0000187C F8                  <1>     clc
   658                              <1> .redirExit:
   659 0000187D 5F                  <1>     pop rdi
   660 0000187E 59                  <1>     pop rcx
   661                              <1>     return
    13                              <2> %%_ret:
    14 0000187F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   662                              <1> .inputRedir:
   663 00001880 C6051FE8FFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   664 00001887 488D3D0DEBFFFF      <1>     lea rdi, rdrInFilespec
   665                              <1> .redirCommon:
   666 0000188E E8BC290000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   667 00001893 E8E82A0000          <1>     call cpDelimPathToBufz
   668 00001898 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   669 0000189B 30C0                <1>     xor al, al  ;Clear the ZF flag
   670 0000189D EBDE                <1>     jmp short .redirExit
   671                              <1> .outputRedir:
   672 0000189F C60501E8FFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   673 000018A6 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   674 000018A9 7509                <1>     jne .notDouble
   675 000018AB FE05F6E7FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   676 000018B1 48FFC6              <1>     inc rsi ;Go past it too
   677                              <1> .notDouble:
   678 000018B4 488D3D2FEBFFFF      <1>     lea rdi, rdrOutFilespec
   679 000018BB EBD1                <1>     jmp short .redirCommon
   680                              <1> .pipeSetup:
   681 000018BD 56                  <1>     push rsi    ;Save rsi pointing to char past |
   682 000018BE E88C290000          <1>     call skipDelimiters ;Check if this is effectively a double || or |<CR>
   683 000018C3 803E7C              <1>     cmp byte [rsi], "|" 
   684 000018C6 7403                <1>     je .badFnd
   685 000018C8 803E0D              <1>     cmp byte [rsi], CR
   686                              <1> .badFnd:
   687 000018CB 5E                  <1>     pop rsi
   688 000018CC F9                  <1>     stc
   689 000018CD EBAE                <1>     jmp short .redirExit
   690                              <1> 
   691                              <1> setupRedirandPipes:
   692                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   693                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   694 000018CF 0F8484000000        <1>     jz .redirIn
   695 000018D5 488D155DEBFFFF      <1>     lea rdx, pipe1Filespec
   696 000018DC 803A00              <1>     cmp byte [rdx], 0
   697 000018DF 7410                <1>     jz .pathFound
   698 000018E1 488D15A0EBFFFF      <1>     lea rdx, pipe2Filespec
   699 000018E8 803A00              <1>     cmp byte [rdx], 0
   700 000018EB 0F855EFCFFFF        <1>     jnz pipeFailure
   701                              <1> .pathFound:
   702 000018F1 488915DFEBFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   703 000018F8 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   704 000018FD BB01000000          <1>     mov ebx, 1
   705 00001902 CD21                <1>     int 21h
   706 00001904 0F8245FCFFFF        <1>     jc pipeFailure
   707 0000190A 66890593E7FFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   708 00001911 E8F6280000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   709 00001916 0441                <1>     add al, "A"
   710 00001918 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   711 0000191D 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   712 0000191F 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   713 00001921 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   714 00001923 B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   715 00001928 CD21                <1>     int 21h
   716 0000192A 0F821FFCFFFF        <1>     jc pipeFailure
   717                              <1>     ;AX has the handle for this file now, this will become STDOUT
   718                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   719 00001930 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   720 00001933 B901000000          <1>     mov ecx, 1
   721 00001938 B800460000          <1>     mov eax, 4600h
   722 0000193D CD21                <1>     int 21h
   723 0000193F 0F820AFCFFFF        <1>     jc pipeFailure
   724 00001945 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   725 0000194A CD21                <1>     int 21h
   726 0000194C 0F82FDFBFFFF        <1>     jc pipeFailure
   727 00001952 C60548E7FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   728                              <1> .redirIn:
   729                              <1> ;Now check if any other redir needs to be setup
   730                              <1> ;Checks and sets up redir as appropriate.
   731                              <1>     ;Setup the redir here for STDIN
   732 00001959 F60546E7FFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   733 00001960 7449                <1>     jz .redirOut
   734 00001962 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   735 00001964 B800450000          <1>     mov eax, 4500h
   736 00001969 CD21                <1>     int 21h
   737 0000196B 0F82D0FBFFFF        <1>     jc redirFailure
   738 00001971 66890530E7FFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   739 00001978 488D151CEAFFFF      <1>     lea rdx, rdrInFilespec
   740 0000197F B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   741 00001984 CD21                <1>     int 21h
   742 00001986 0F82B5FBFFFF        <1>     jc redirFailure
   743 0000198C 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   744 0000198E 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   745 00001991 B800460000          <1>     mov eax, 4600h
   746 00001996 CD21                <1>     int 21h
   747 00001998 0F82A3FBFFFF        <1>     jc redirFailure
   748 0000199E B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   749 000019A3 CD21                <1>     int 21h
   750 000019A5 0F8296FBFFFF        <1>     jc redirFailure
   751                              <1> .redirOut:
   752 000019AB F605F5E6FFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   753                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000019B2 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000019B4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   754 000019B5 803DE8E6FFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   755                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000019BC 75(B4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   756                              <1>     ;Else setup the redir here for STDOUT
   757 000019BE BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   758 000019C3 B800450000          <1>     mov eax, 4500h
   759 000019C8 CD21                <1>     int 21h
   760 000019CA 0F8271FBFFFF        <1>     jc redirFailure
   761 000019D0 668905D3E6FFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   762 000019D7 488D150CEAFFFF      <1>     lea rdx, rdrOutFilespec
   763 000019DE B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   764 000019E3 CD21                <1>     int 21h
   765 000019E5 730F                <1>     jnc .fileExists
   766 000019E7 B8003C0000          <1>     mov eax, 3C00h
   767 000019EC 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   768 000019EE CD21                <1>     int 21h
   769 000019F0 0F824BFBFFFF        <1>     jc redirFailure
   770                              <1> .fileExists:
   771 000019F6 B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   772 000019FB 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   773 000019FE B800460000          <1>     mov eax, 4600h  ;DUP2
   774 00001A03 CD21                <1>     int 21h
   775 00001A05 0F8236FBFFFF        <1>     jc redirFailure
   776 00001A0B B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   777 00001A10 CD21                <1>     int 21h
   778 00001A12 0F8229FBFFFF        <1>     jc redirFailure
   779 00001A18 803D88E6FFFF01      <1>     cmp byte [redirOut], 1
   780                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001A1F 74(B4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   781                              <1>     ;Here we move the file pointer to the end of the file
   782 00001A21 31D2                <1>     xor edx, edx    ;Low order 32 bits
   783 00001A23 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   784 00001A25 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   785 00001A2A B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   786 00001A2F CD21                <1>     int 21h
   787 00001A31 0F820AFBFFFF        <1>     jc redirFailure
   788                              <1>     return
    13                              <2> %%_ret:
    14 00001A37 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   789                              <1> 
   790                              <1> 
   791                              <1> pullCommandline:
   792                              <1> ;This command pulls the command tail down, removing the whole launch command
   793 00001A38 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   794                              <1> ;Skip leading separators
   795                              <1> .pctSkipLeading:
   796 00001A3F AC                  <1>     lodsb   ;Get first char
   797 00001A40 E818280000          <1>     call isALdelimiter
   798 00001A45 74F8                <1>     je .pctSkipLeading
   799 00001A47 48FFCE              <1>     dec rsi
   800                              <1>     ;rsi points to the start of the command
   801 00001A4A 488D3DEDE8FFFF      <1>     lea rdi, cmdPathSpec
   802 00001A51 E8D4270000          <1>     call strlen ;Get the length of the command
   803 00001A56 FFC9                <1>     dec ecx ;Minus the terminating null
   804 00001A58 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   805 00001A5B 280D4CE6FFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   806 00001A61 280D49E6FFFF        <1>     sub byte [arg2Off], cl
   807 00001A67 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   808 00001A69 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   809                              <1> .pctPullChars:
   810 00001A70 AC                  <1>     lodsb
   811 00001A71 AA                  <1>     stosb
   812 00001A72 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   813 00001A74 7404                <1>     je .pctExit
   814 00001A76 FFC1                <1>     inc ecx     ;Increment count
   815 00001A78 EBF6                <1>     jmp short .pctPullChars 
   816                              <1> .pctExit:
   817 00001A7A 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   818                              <1>     return
    13                              <2> %%_ret:
    14 00001A81 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   819                              <1> 
   820                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   821                              <1> ;Input: rsi points to the count byte of a command line
   822 00001A82 4150                <1>     push r8
   823 00001A84 4151                <1>     push r9
   824 00001A86 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   825 00001A88 CD21                <1>     int 21h
   826 00001A8A 52                  <1>     push rdx    ;Save on the stack
   827 00001A8B 488D1D6EE4FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   828 00001A92 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   829 00001A94 CD21                <1>     int 21h
   830 00001A96 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   831 00001A99 4989D9              <1>     mov r9, rbx
   832 00001A9C 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   833 00001AA3 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   834 00001AA8 F348A5              <1>     rep movsq   ;Copy command line over
   835                              <1>     ;call doCommandLine
   836 00001AAB 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   837 00001AAC B450                <1>     mov ah, 50h ;Set Current PSP
   838 00001AAE CD21                <1>     int 21h
   839 00001AB0 4159                <1>     pop r9
   840 00001AB2 4158                <1>     pop r8
   841 00001AB4 48CF                <1>     iretq
    17                                  %include "./Source/cmdBat.asm"
     1                              <1> ;Main Batch processing routines go here!
     2                              <1> 
     3                              <1> batLaunch:
     4                              <1> ;Preps and launches a batch file!
     5 00001AB6 BB200B0000          <1>     mov ebx, bbMaxAlloc << 4    ;Convert to paragraphs
     6 00001ABB B800480000          <1>     mov eax, 4800h
     7 00001AC0 CD21                <1>     int 21h
     8 00001AC2 730A                <1>     jnc .bbAlloced
     9 00001AC4 E86B010000          <1>     call badNoMemError  ;Print not enough mem error
    10 00001AC9 E999FAFFFF          <1>     jmp  redirPipeFailureCommon.noPrint ;Clean up all redir and ret to cmdline
    11                              <1> .bbAlloced:
    12 00001ACE 488905DEE5FFFF      <1>     mov qword [bbPtr], rax  ;Save the ptr here!
    13 00001AD5 4889C3              <1>     mov rbx, rax
    14 00001AD8 4889DF              <1>     mov rdi, rbx
    15 00001ADB B9B2000000          <1>     mov ecx, bbMaxAlloc     
    16 00001AE0 F3AA                <1>     rep stosb               ;Clean the arena
    17 00001AE2 4889DF              <1>     mov rdi, rbx            ;Point back to the head
    18 00001AE5 8A05B3E5FFFF        <1>     mov al, byte [echoFlg]
    19 00001AEB 884301              <1>     mov byte [rbx + batBlockHdr.bEchoFlg], al
    20 00001AEE B8FFFFFFFF          <1>     mov eax, -1
    21 00001AF3 B905000000          <1>     mov ecx, 5
    22 00001AF8 488D7B1B            <1>     lea rdi, qword [rbx + batBlockHdr.wArgs]    ;Init the wArgs to no params!
    23 00001AFC F3AB                <1>     rep stosd   ;Store in dwords for speed. Leave rdi pointing at .cmdLine
    24 00001AFE 66C7431B0000        <1>     mov word [rbx + batBlockHdr.wArgs], 0   ;Arg %0 starts at offset 0!
    25 00001B04 488D3533E8FFFF      <1>     lea rsi, cmdPathSpec
    26 00001B0B E801270000          <1>     call strcpy     ;Leave rdi past the terminating null
    27 00001B10 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get char cnt for copy
    28 00001B18 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get copy source
    29 00001B1F 57                  <1>     push rdi    ;Save the ptr to the start of cmd tail in batblock
    30 00001B20 F3A4                <1>     rep movsb   ;Copy the command tail over
    31                              <1>     ;Since this copy is shorter than the space we have, we already have a free
    32                              <1>     ; terminating null. All good!
    33 00001B22 5E                  <1>     pop rsi 
    34                              <1>     ;Now analyse the command line to get the word offsets. Get at most 10
    35 00001B23 B901000000          <1>     mov ecx, 1  ;Start with argument 1
    36                              <1> .bbFndLp:
    37 00001B28 E822270000          <1>     call skipDelimiters ;Skip leading delimiters, leave rsi at char1
    38 00001B2D E853000000          <1>     call .bbCheckEndOfCmdLine   ;Is this the end of the command?
    39 00001B32 7428                <1>     je .bbArgsDone      ;Yes
    40                              <1>     ;Add the entry to the table!
    41 00001B34 4889F0              <1>     mov rax, rsi
    42 00001B37 488D532F            <1>     lea rdx, qword [rbx + batBlockHdr.cmdLine]  ;Get addr of start of cmdline
    43 00001B3B 4829D0              <1>     sub rax, rdx    ;Now get the difference in ax
    44 00001B3E 6689440B1B          <1>     mov word [rbx + batBlockHdr.wArgs + rcx], ax    ;Store this offset here
    45                              <1>     
    46 00001B43 FFC1                <1>     inc ecx
    47 00001B45 81F90A000000        <1>     cmp ecx, 10         ;Did we just process %9?
    48 00001B4B 740F                <1>     je .bbArgsDone
    49                              <1> .bbFndLp2:
    50 00001B4D AC                  <1>     lodsb   ;Getch
    51 00001B4E E80A270000          <1>     call isALdelimiter  ;If this is a delimiter, we are at the end of the command
    52 00001B53 74D3                <1>     je .bbFndLp
    53 00001B55 E82B000000          <1>     call .bbCheckEndOfCmdLine
    54 00001B5A 75F1                <1>     jne .bbFndLp2   ;If not end of cmdline, see if next char delim
    55                              <1> .bbArgsDone:
    56                              <1>     ;Now copy the batch name
    57 00001B5C 488D35DBE7FFFF      <1>     lea rsi, cmdPathSpec
    58 00001B63 488D3D51E5FFFF      <1>     lea rdi, batFile
    59 00001B6A E8A2260000          <1>     call strcpy             ;Copy the batch file name over
    60                              <1> ;Now deactivate any redirs. Do redir out as cleanupRedirs somewhat ignores it.
    61                              <1> ;Do the handle close as deleting the file without closing the handle is asking 
    62                              <1> ; for SHARING trouble...
    63 00001B6F E819FBFFFF          <1>     call cleanRedirOut      ;Liquidates redirout if needed
    64 00001B74 E8F8F9FFFF          <1>     call cleanupRedirs      ;Now liquidate remaining redirs and pipes
    65 00001B79 800D1DE5FFFF08      <1>     or byte [statFlg1], inBatch ;Fire up the batch processor!
    66 00001B80 E90A000000          <1>     jmp batNextLine         ;Now we start reading the batch file!
    67                              <1> 
    68                              <1> .bbCheckEndOfCmdLine:
    69                              <1> ;Input: rsi -> Char to check 
    70                              <1> ;Output: ZF=ZE if we hit a CR or a <NUL>
    71 00001B85 803E00              <1>     cmp byte [rsi], 0
    72                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001B88 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001B8A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    73 00001B8B 803E0D              <1>     cmp byte [rsi], CR
    74                              <1>     return
    13                              <2> %%_ret:
    14 00001B8E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    75                              <1> 
    76                              <1> batNextLine:
    77                              <1> ;This will:
    78                              <1> ;1) Open the batch file. If we are at the end of the file, exit batch mode!
    79                              <1> ;2) Read a line from the batch file one char at a time. File is open/closed
    80                              <1> ;       after each char. If file not found during read, print needBat error.
    81                              <1> ;       If file not found before read, print badBat error.
    82                              <1> ;       Do any %ENVVAR% or %ARGUMENT replacements
    83                              <1> ;       MAX LEN OF BATCH FILE LINE: 127 + CR or 128 chars raw
    84                              <1> ;3) Close the batch file
    85                              <1> ;4) Check if we are at the end of the file. If so, turn off bat flag.
    86 00001B8F 488D1511000000      <1>     lea rdx, .l1
    87 00001B96 B800090000          <1>     mov eax, 0900h
    88 00001B9B CD21                <1>     int 21h
    89 00001B9D E837000000          <1>     call batCleanup
    90 00001BA2 E920F5FFFF          <1>     jmp commandMain
    91 00001BA7 4261746368206D6F64- <1> .l1 db "Batch mode... wait, what? How did you do that?",CR,LF,"$"
    91 00001BB0 652E2E2E2077616974- <1>
    91 00001BB9 2C20776861743F2048- <1>
    91 00001BC2 6F772064696420796F- <1>
    91 00001BCB 7520646F2074686174- <1>
    91 00001BD4 3F0D0A24            <1>
    92                              <1> 
    93                              <1> batExpandVar:
    94                              <1> ;Input: rsi -> Char after the % sign that triggered this call.
    95                              <1> ;       rdi -> Position to place the substitution string
    96                              <1> ;Output: CF=NC: Substitution string is placed in buffer
    97                              <1> ;        CF=CY: No substitution string found
    98                              <1>     return
    13                              <2> %%_ret:
    14 00001BD8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    99                              <1>     ;cmp byte [rsi], "%"
   100                              <1> 
   101                              <1> batCleanup:
   102                              <1> ;This function is called after the last line has been processed by the 
   103                              <1> ; batch interpreter! Cleans up all the batch resources. Also called if 
   104                              <1> ; CTRLC called during a batch job and the user wants to kill the batch.
   105 00001BD9 488B1DD3E4FFFF      <1>     mov rbx, qword [bbPtr]
   106 00001BE0 8A4301              <1>     mov al, byte [rbx + batBlockHdr.bEchoFlg]   ;Reset the echo flag
   107 00001BE3 8805B5E4FFFF        <1>     mov byte [echoFlg], al
   108                              <1> ;-----------------------------------------------------------------------
   109                              <1> ;===Now free the FOR and CALL blocks... oops havent implemented yet!!===
   110                              <1> ;-----------------------------------------------------------------------
   111                              <1> ;Finally free this batch header
   112 00001BE9 4150                <1>     push r8
   113 00001BEB 4989D8              <1>     mov r8, rbx
   114 00001BEE B800490000          <1>     mov eax, 4900h
   115 00001BF3 CD21                <1>     int 21h
   116 00001BF5 4158                <1>     pop r8
   117 00001BF7 E875F9FFFF          <1>     call cleanupRedirs  ;Clean up all redirections, close files etc
   118 00001BFC 48C705ACE4FFFF0000- <1>     mov qword [bbPtr], 0    
   118 00001C05 0000                <1>
   119 00001C07 80258FE4FFFFF7      <1>     and byte [statFlg1], ~inBatch   ;Oh bye bye batch mode!
   120                              <1>     return
    13                              <2> %%_ret:
    14 00001C0E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   121                              <1>     
    18                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badDiskFull:
     7                              <1> ;This is a different error return, as this closes handles and prints
     8                              <1> ; disk full error and resets the command line!
     9 00001C0F 488D1592EDFFFF      <1>     lea rdx, noSpace
    10 00001C16 488D0DAEF0FFFF      <1>     lea rcx, pipeErr
    11 00001C1D F6057DE4FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the flag set
    12 00001C24 746F                <1>     jz short badCmn ;If its just disk full, dont go through pipe clean
    13 00001C26 480F45D1            <1>     cmovnz rdx, rcx ;Swap error messages if pipe flag is on
    14 00001C2A E866000000          <1>     call badCmn     ;Print the string
    15 00001C2F E933F9FFFF          <1>     jmp redirPipeFailureCommon.noPrint  ;Now close pipes and fully reset!
    16                              <1> badNoMemError:
    17 00001C34 488D155CF1FFFF      <1>     lea rdx, noMemMsg
    18 00001C3B EB58                <1>     jmp short badCmn
    19                              <1> badSyntaxError:
    20 00001C3D 488D1560F0FFFF      <1>     lea rdx, syntaxErr
    21 00001C44 EB4F                <1>     jmp short badCmn
    22                              <1> badEnvSpaceError:
    23 00001C46 488D1575EDFFFF      <1>     lea rdx, noEnvSpace
    24 00001C4D EB46                <1>     jmp short badCmn
    25                              <1> badAccError:
    26 00001C4F 488D15FAEFFFFF      <1>     lea rdx, accDenMsg
    27 00001C56 EB3D                <1>     jmp short badCmn
    28                              <1> badParamError:
    29 00001C58 488D156FEEFFFF      <1>     lea rdx, badParm
    30 00001C5F EB34                <1>     jmp short badCmn
    31                              <1> badDriveError:
    32 00001C61 488D1529EEFFFF      <1>     lea rdx, badDrv
    33 00001C68 EB2B                <1>     jmp short badCmn
    34                              <1> badArgError:
    35 00001C6A 488D15ECF0FFFF      <1>     lea rdx, badArgs
    36 00001C71 EB22                <1>     jmp short badCmn
    37                              <1> badFileError:
    38 00001C73 488D15C7F0FFFF      <1>     lea rdx, badSpec
    39 00001C7A EB19                <1>     jmp short badCmn
    40                              <1> badDupFnf:
    41                              <1> ;Hybrid error message
    42 00001C7C 488D15FDECFFFF      <1>     lea rdx, dupName
    43 00001C83 EB10                <1>     jmp short badCmn
    44                              <1> badFnf:
    45 00001C85 488D150BEDFFFF      <1>     lea rdx, fnfMsg
    46 00001C8C EB07                <1>     jmp short badCmn
    47                              <1> badDirError:
    48 00001C8E 488D153AEFFFFF      <1>     lea rdx, badDir
    49                              <1> badCmn:
    50 00001C95 E97C230000          <1>     jmp printString     ;This will be made nuanced later, to agree with DOS
    51                              <1> badCmdError:
    52 00001C9A 488D15C4ECFFFF      <1>     lea rdx, badCmd
    53 00001CA1 EBF2                <1>     jmp short badCmn
    54                              <1> dir:
    55                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    56 00001CA3 C60541E9FFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    57 00001CAA C6053BE9FFFF00      <1>     mov byte [dirLineCtr], 0
    58 00001CB1 C70532E9FFFF000000- <1>     mov dword [dirFileCtr], 0
    58 00001CBA 00                  <1>
    59 00001CBB C60530E9FFFF00      <1>     mov byte [dirSrchDir], 0
    60 00001CC2 66C7051CE8FFFF0000  <1>     mov word [searchSpec], 0
    61 00001CCB 488D3DA2E9FFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    62 00001CD2 C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    63 00001CD5 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    63 00001CDE 3F                  <1>
    64 00001CDF 48894701            <1>     mov qword [rdi + fcb.filename], rax
    65 00001CE3 C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    66                              <1>     ;Start by scanning for the switches
    67 00001CEA 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    68 00001CF1 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    69                              <1> .scanNew:
    70 00001CF4 E856250000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    71 00001CF9 AC                  <1>     lodsb   ;Get this char
    72 00001CFA 3C0D                <1>     cmp al, CR
    73 00001CFC 744D                <1>     je .scanDone
    74 00001CFE 3A0526E3FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    75 00001D04 7524                <1>     jne .notSwitch
    76 00001D06 AC                  <1>     lodsb   ;Get the next char
    77 00001D07 E828250000          <1>     call ucChar
    78 00001D0C 3C57                <1>     cmp al, "W"
    79 00001D0E 7509                <1>     jne .notWide
    80 00001D10 800DD4E8FFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    81 00001D17 EBDB                <1>     jmp short .scanNew
    82                              <1> .notWide:
    83 00001D19 3C50                <1>     cmp al, "P"
    84 00001D1B 0F8537FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    85 00001D21 800DC3E8FFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    86 00001D28 EBCA                <1>     jmp short .scanNew
    87                              <1> .notSwitch:
    88 00001D2A F605BAE8FFFF04      <1>     test byte [dirFlags], dirFileType
    89 00001D31 0F8521FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    90                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    91 00001D37 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    92 00001D3A E89C260000          <1>     call copyArgumentToSearchSpec   
    93 00001D3F 48FFCE              <1>     dec rsi ;Point back to the terminator char
    94 00001D42 800DA2E8FFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    95 00001D49 EBA9                <1>     jmp short .scanNew
    96                              <1> .scanDone:
    97 00001D4B F60599E8FFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    98 00001D52 7438                <1>     jz .currentDrv
    99                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   100 00001D54 488D358CE7FFFF      <1>     lea rsi, searchSpec
   101 00001D5B 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   102 00001D5F 752B                <1>     jne .currentDrv
   103                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   104 00001D61 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   105 00001D66 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   106 00001D6A B801290000          <1>     mov eax, 2901h   ;Parse filename
   107 00001D6F CD21                <1>     int 21h
   108 00001D71 3CFF                <1>     cmp al, -1
   109 00001D73 0F84E8FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   110                              <1>     ;Else the drive in the fcb is valid
   111 00001D79 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   112 00001D7E 84C0                <1>     test al, al
   113 00001D80 740A                <1>     jz .currentDrv
   114 00001D82 FEC8                <1>     dec al  ;Convert to 0 based drive number
   115 00001D84 880567E8FFFF        <1>     mov byte [dirDrv], al
   116 00001D8A EB0B                <1>     jmp short .dirPrintVol
   117                              <1> .currentDrv:
   118 00001D8C E87B240000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   119 00001D91 88055AE8FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   120                              <1> .dirPrintVol:
   121 00001D97 488D3549E7FFFF      <1>     lea rsi, searchSpec
   122                              <1> ;Now construct the path on dirSrchDir.
   123 00001D9E 488D3D4DE8FFFF      <1>     lea rdi, dirSrchDir
   124 00001DA5 0FB60545E8FFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   125 00001DAC 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   126 00001DAE 0441                <1>     add al, "A" ;Turn into a letter
   127 00001DB0 B43A                <1>     mov ah, ":"
   128 00001DB2 66AB                <1>     stosw   ;Store X: into the search path
   129 00001DB4 B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   130 00001DB9 CD2F                <1>     int 2fh
   131 00001DBB 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   132 00001DBD 0F849EFEFFFF        <1>     je badDriveError
   133                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   134 00001DC3 8A0560E2FFFF        <1>     mov al, byte [pathSep]
   135 00001DC9 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   136 00001DCB 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   137 00001DCD AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   138 00001DCE FEC2                <1>     inc dl  ;Increment by 1
   139 00001DD0 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   140 00001DD3 B800470000          <1>     mov eax, 4700h  ;Print current working directory
   141 00001DD8 CD21                <1>     int 21h
   142 00001DDA 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   143                              <1>     ;rsi points to the first char in the provided path.
   144                              <1>     ;rdi points to the first char of the cwd.
   145 00001DDD 31C0                <1>     xor eax, eax
   146                              <1> .goToEndOfCwd:
   147                              <1> ;Move to the end of the string, could use repne?
   148 00001DDF 3807                <1>     cmp byte [rdi], al
   149 00001DE1 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   150 00001DE3 48FFC7              <1>     inc rdi
   151 00001DE6 EBF7                <1>     jmp short .goToEndOfCwd
   152                              <1> .prepCopy:
   153 00001DE8 8A053BE2FFFF        <1>     mov al, byte [pathSep]
   154 00001DEE 3806                <1>     cmp byte [rsi], al
   155 00001DF0 7412                <1>     je .copyPathLoop
   156 00001DF2 B43A                <1>     mov ah, ":"
   157 00001DF4 86C4                <1>     xchg al, ah
   158 00001DF6 663947FE            <1>     cmp word [rdi - 2], ax
   159 00001DFA 7408                <1>     je .copyPathLoop
   160 00001DFC 88E0                <1>     mov al, ah
   161 00001DFE 3847FF              <1>     cmp byte [rdi - 1], al
   162 00001E01 7401                <1>     je .copyPathLoop
   163 00001E03 AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   164                              <1> .copyPathLoop:
   165 00001E04 AC                  <1>     lodsb
   166 00001E05 3A051EE2FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   167 00001E0B 7509                <1>     jne .checkDot  ;If not, store it
   168                              <1> .lpPathseps:
   169 00001E0D 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   170 00001E0F 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   171 00001E11 48FFC6              <1>     inc rsi
   172 00001E14 EBF7                <1>     jmp short .lpPathseps
   173                              <1> .checkDot:
   174 00001E16 3C2E                <1>     cmp al, "."
   175 00001E18 7407                <1>     je .dots
   176                              <1> .store:
   177 00001E1A AA                  <1>     stosb
   178 00001E1B 84C0                <1>     test al, al ;Was the char we just copied a null?
   179 00001E1D 7472                <1>     jz .exitPathCopy
   180 00001E1F EBE3                <1>     jmp short .copyPathLoop
   181                              <1> .dots:
   182                              <1>     ;Here handle dot and dot dot
   183                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   184                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   185                              <1>     ; by 1. If it is null, go to top of loop.
   186                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   187 00001E21 8A2502E2FFFF        <1>     mov ah, byte [pathSep]
   188 00001E27 3867FF              <1>     cmp byte [rdi - 1], ah  
   189 00001E2A 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   190 00001E2C 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   191 00001E2E 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   192 00001E31 7413                <1>     je .twoDot
   193                              <1>     ;This is only a "current dir" when next char is pathsep or null
   194 00001E33 3A25F0E1FFFF        <1>     cmp ah, byte [pathSep]
   195 00001E39 7406                <1>     je .skipThisPathsep
   196 00001E3B 84E4                <1>     test ah, ah
   197 00001E3D 74C5                <1>     jz .copyPathLoop
   198 00001E3F EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   199                              <1> .skipThisPathsep:
   200                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   201 00001E41 48FFC6              <1>     inc rsi ;Point to the pathsep
   202 00001E44 EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   203                              <1> .twoDot:
   204                              <1>     ;Woohoo, this works!
   205 00001E46 48FFC6              <1>     inc rsi ;Move past the second dot
   206 00001E49 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   207 00001E4B 3A25D8E1FFFF        <1>     cmp ah, byte [pathSep]
   208 00001E51 7408                <1>     je .tdOk
   209 00001E53 84E4                <1>     test ah, ah
   210 00001E55 0F85FDFDFFFF        <1>     jne badParamError
   211                              <1> .tdOk:
   212 00001E5B 8A05C8E1FFFF        <1>     mov al, byte byte [pathSep]
   213 00001E61 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   214 00001E65 0F84EDFDFFFF        <1>     je badParamError
   215 00001E6B 4881EF02000000      <1>     sub rdi, 2
   216 00001E72 31C9                <1>     xor ecx, ecx
   217 00001E74 FFC9                <1>     dec ecx
   218 00001E76 FD                  <1>     std
   219 00001E77 F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   220 00001E79 FC                  <1>     cld
   221 00001E7A 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   222 00001E81 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   223 00001E83 0F847BFFFFFF        <1>     jz .copyPathLoop
   224 00001E89 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   225 00001E8C E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   226                              <1> .exitPathCopy:
   227                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   228 00001E91 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   229 00001E98 8A058BE1FFFF        <1>     mov al, byte [pathSep]
   230 00001E9E B43A                <1>     mov ah, ":"
   231 00001EA0 86C4                <1>     xchg al, ah
   232 00001EA2 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   233 00001EA6 7409                <1>     je .skipOverwrite
   234 00001EA8 88E0                <1>     mov al, ah
   235 00001EAA 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   236 00001EAC 7503                <1>     jne .skipOverwrite
   237 00001EAE C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   238                              <1> .skipOverwrite:
   239 00001EB1 488D353AE7FFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   240 00001EB8 4889F7              <1>     mov rdi, rsi
   241 00001EBB B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   242 00001EC0 CD2F                <1>     int 2fh
   243 00001EC2 E821250000          <1>     call scanForWildcards
   244 00001EC7 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   245 00001EC9 4889F2              <1>     mov rdx, rsi
   246 00001ECC 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   247 00001ED0 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   248                              <1> .notNull:
   249 00001ED2 E803260000          <1>     call setDTA ;Set the DTA
   250 00001ED7 B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   251 00001EDC B8004E0000          <1>     mov eax, 4E00h ;Find first
   252 00001EE1 CD21                <1>     int 21h
   253 00001EE3 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   254                              <1> ;Now we have searched for the file, is a directory?
   255 00001EE5 F60596E2FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   256 00001EEC 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   257                              <1>     ;Here we are searching IN a directory. Default search pattern!
   258 00001EEE 31C0                <1>     xor eax, eax
   259 00001EF0 31C9                <1>     xor ecx, ecx
   260 00001EF2 FFC9                <1>     dec ecx
   261 00001EF4 F2AE                <1>     repne scasb
   262 00001EF6 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   263 00001EF9 EB40                <1>     jmp short .wcDefaultSearch
   264                              <1> .wcSearchPattern:
   265                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   266                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   267 00001EFB 31C0                <1>     xor eax, eax
   268 00001EFD 31C9                <1>     xor ecx, ecx
   269 00001EFF FFC9                <1>     dec ecx
   270 00001F01 F2AE                <1>     repne scasb ;Scan forwards
   271                              <1>     ;Here rdi points past the null at the end
   272 00001F03 8A0520E1FFFF        <1>     mov al, byte [pathSep]
   273 00001F09 31C9                <1>     xor ecx, ecx
   274 00001F0B FFC9                <1>     dec ecx
   275 00001F0D FD                  <1>     std ;Search backwards
   276 00001F0E F2AE                <1>     repne scasb
   277 00001F10 FC                  <1>     cld ;Search forwards again
   278 00001F11 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   279 00001F14 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   280 00001F18 7503                <1>     jne .wcsp1
   281 00001F1A 48FFC7              <1>     inc rdi ;Go one char forwards
   282                              <1> .wcsp1:
   283                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   284 00001F1D 57                  <1>     push rdi
   285 00001F1E 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   286 00001F20 7503                <1>     jne .wcsp2
   287 00001F22 48FFC7              <1>     inc rdi
   288                              <1> .wcsp2:
   289 00001F25 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   290 00001F28 488D3D45E7FFFF      <1>     lea rdi, dirSrchFCB
   291 00001F2F B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   292 00001F34 CD21                <1>     int 21h
   293 00001F36 5F                  <1>     pop rdi
   294 00001F37 31C0                <1>     xor eax, eax
   295 00001F39 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   296                              <1> .wcDefaultSearch:
   297 00001F3B 0FB605AFE6FFFF      <1>     movzx eax, byte [dirDrv] 
   298 00001F42 E86A160000          <1>     call volume.dirEP
   299 00001F47 488D15E9ECFFFF      <1>     lea rdx, dirMain    ;Print message intro
   300 00001F4E B409                <1>     mov ah, 09h
   301 00001F50 CD21                <1>     int 21h
   302 00001F52 C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   303 00001F55 488D1596E6FFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   304 00001F5C B409                <1>     mov ah, 09h
   305 00001F5E CD21                <1>     int 21h
   306 00001F60 C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   307 00001F63 488D1583E9FFFF      <1>     lea rdx, crlf2
   308 00001F6A B409                <1>     mov ah, 09h
   309 00001F6C CD21                <1>     int 21h
   310                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   311                              <1> ;rdi points to the terminating null
   312 00001F6E 8A05B5E0FFFF        <1>     mov al, byte [pathSep]
   313 00001F74 3847FF              <1>     cmp byte [rdi - 1], al
   314 00001F77 7403                <1>     je .root
   315 00001F79 48FFC7              <1>     inc rdi
   316                              <1> .root:
   317 00001F7C 48FFCF              <1>     dec rdi ;Point back to the pathsep
   318 00001F7F AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   319 00001F80 488D35EEE6FFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   320 00001F87 E89E230000          <1>     call FCBToAsciiz    ;Terminates for free
   321 00001F8C E801000000          <1>     call .searchForFile
   322                              <1>     return
    13                              <2> %%_ret:
    14 00001F91 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   323                              <1> 
   324                              <1> .searchForFile:
   325 00001F92 E843250000          <1>     call setDTA
   326 00001F97 B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   327 00001F9C 488D154FE6FFFF      <1>     lea rdx, dirSrchDir
   328 00001FA3 B8004E0000          <1>     mov eax, 4E00h ;Find first
   329 00001FA8 CD21                <1>     int 21h
   330 00001FAA 720B                <1>     jc .dirNoMoreFiles
   331                              <1> .findNext:
   332 00001FAC E890000000          <1>     call .dirPrintFileData  ;Print the file information
   333 00001FB1 B44F                <1>     mov ah, 4Fh
   334 00001FB3 CD21                <1>     int 21h
   335 00001FB5 73F5                <1>     jnc .findNext 
   336                              <1> .dirNoMoreFiles:
   337 00001FB7 F6052DE6FFFF01      <1>     test byte [dirFlags], dirWideType
   338 00001FBE 740B                <1>     jz .dirNoEndNewLine
   339 00001FC0 488D1523E9FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   340 00001FC7 B409                <1>     mov ah, 09h
   341 00001FC9 CD21                <1>     int 21h
   342                              <1> .dirNoEndNewLine:
   343                              <1>     ;Now we print the number of files and the number of bytes on the disk
   344 00001FCB F70518E6FFFFFFFFFF- <1>     test dword [dirFileCtr], -1
   344 00001FD4 FF                  <1>
   345 00001FD5 750D                <1>     jnz .filesFound
   346                              <1>     ;Else print File not found and exit!
   347 00001FD7 488D15B9E9FFFF      <1>     lea rdx, fnfMsg
   348 00001FDE E833200000          <1>     call printString
   349                              <1>     return
    13                              <2> %%_ret:
    14 00001FE3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   350                              <1> .filesFound:
   351 00001FE4 488D1521EFFFFF      <1>     lea rdx, fourSpc
   352 00001FEB B409                <1>     mov ah, 09h
   353 00001FED CD21                <1>     int 21h
   354 00001FEF B409                <1>     mov ah, 09h ;Print four Spaces twice
   355 00001FF1 CD21                <1>     int 21h
   356 00001FF3 8B05F4E5FFFF        <1>     mov eax, dword [dirFileCtr]   ;Get number of files
   357 00001FF9 E8FE230000          <1>     call printDecimalWord
   358 00001FFE 488D156BEAFFFF      <1>     lea rdx, dirOk
   359 00002005 B409                <1>     mov ah, 09h
   360 00002007 CD21                <1>     int 21h
   361 00002009 488D1501EFFFFF      <1>     lea rdx, threeSpc
   362 00002010 B409                <1>     mov ah, 09h
   363 00002012 CD21                <1>     int 21h
   364 00002014 B800360000          <1>     mov eax, 3600h ;Get disk info
   365 00002019 8A15D2E5FFFF        <1>     mov dl, byte [dirDrv]
   366 0000201F FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   367 00002021 CD21                <1>     int 21h ;Get disk free space info
   368 00002023 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   369 00002026 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   370 00002029 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   371 0000202B F7E1                <1>     mul ecx ;Get bytes per cluster
   372 0000202D 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   373                              <1>     ;rax now has the number of free bytes on the disk
   374 00002030 E8C7230000          <1>     call printDecimalWord
   375 00002035 488D153EEAFFFF      <1>     lea rdx, bytesOk
   376 0000203C B409                <1>     mov ah, 09h
   377 0000203E CD21                <1>     int 21h
   378                              <1>     return
    13                              <2> %%_ret:
    14 00002040 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   379                              <1> 
   380                              <1> .dirPrintFileData:
   381                              <1> ;Use cmdFcb to build the file name with space
   382                              <1> ;Start by print the name (same for both cases)
   383                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   384 00002041 F6053AE1FFFF46      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles | dirCharDev
   385                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002048 75(40)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   386 0000204A 488D353AE1FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   387 00002051 488D3D05E1FFFF      <1>     lea rdi, cmdFcb
   388 00002058 E85F220000          <1>     call asciiFilenameToFCB
   389 0000205D 488D15F9E0FFFF      <1>     lea rdx, cmdFcb
   390 00002064 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   391 00002069 BB01000000          <1>     mov ebx, 1  ;STDOUT
   392 0000206E B440                <1>     mov ah, 40h ;Write handle
   393 00002070 CD21                <1>     int 21h
   394 00002072 52                  <1>     push rdx
   395 00002073 B220                <1>     mov dl, " "
   396 00002075 B402                <1>     mov ah, 02h ;Print char
   397 00002077 CD21                <1>     int 21h
   398 00002079 5A                  <1>     pop rdx
   399 0000207A 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   400 00002081 B903000000          <1>     mov ecx, 3  ;Print three chars
   401 00002086 BB01000000          <1>     mov ebx, 1  ;STDOUT
   402 0000208B B440                <1>     mov ah, 40h ;Write handle
   403 0000208D CD21                <1>     int 21h
   404 0000208F F60555E5FFFF01      <1>     test byte [dirFlags], dirWideType
   405 00002096 0F85AA000000        <1>     jnz .widePrint
   406                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   407                              <1>     ;Now check if a DIR
   408 0000209C F605DFE0FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   409 000020A3 7418                <1>     jz .dirPrintNotDir
   410 000020A5 488D15DCE9FFFF      <1>     lea rdx, dirLbl
   411 000020AC B409                <1>     mov ah, 09h
   412 000020AE CD21                <1>     int 21h
   413 000020B0 488D155AEEFFFF      <1>     lea rdx, threeSpc
   414 000020B7 B409                <1>     mov ah, 09h
   415 000020B9 CD21                <1>     int 21h
   416 000020BB EB4F                <1>     jmp short .dirPrintFileDT
   417                              <1> .dirPrintNotDir:
   418                              <1> ;Here we print the file size
   419 000020BD B220                <1>     mov dl, " "
   420 000020BF B402                <1>     mov ah, 02h
   421 000020C1 CD21                <1>     int 21h
   422 000020C3 8B05BEE0FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   423 000020C9 E89F230000          <1>     call getDecimalWord
   424 000020CE 4889CB              <1>     mov rbx, rcx
   425 000020D1 51                  <1>     push rcx
   426 000020D2 480FCB              <1>     bswap rbx
   427 000020D5 B908000000          <1>     mov ecx, 8
   428                              <1> .dirPrintFileSizePrep:
   429 000020DA 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   430 000020DC 7514                <1>     jne .dirPrintFileSize
   431 000020DE B402                <1>     mov ah, 02h
   432 000020E0 B220                <1>     mov dl, " "
   433 000020E2 CD21                <1>     int 21h
   434 000020E4 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   435 000020E8 FFC9                <1>     dec ecx
   436 000020EA 81F901000000        <1>     cmp ecx, 1
   437 000020F0 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   438                              <1> .dirPrintFileSize:
   439 000020F2 5B                  <1>     pop rbx
   440                              <1> .dirPrintFileSizeLoop:
   441 000020F3 88DA                <1>     mov dl, bl
   442 000020F5 B402                <1>     mov ah, 02h
   443 000020F7 CD21                <1>     int 21h
   444 000020F9 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   445 000020FD FFC9                <1>     dec ecx
   446 000020FF 75F2                <1>     jnz .dirPrintFileSizeLoop
   447 00002101 488D150DEEFFFF      <1>     lea rdx, twoSpc
   448 00002108 B409                <1>     mov ah, 09h
   449 0000210A CD21                <1>     int 21h
   450                              <1> .dirPrintFileDT:
   451 0000210C B220                <1>     mov dl, " "
   452 0000210E B402                <1>     mov ah, 02h
   453 00002110 CD21                <1>     int 21h
   454 00002112 0FB7056CE0FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   455 00002119 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   456 0000211B E8A61C0000          <1>     call printDate
   457 00002120 488D15EEEDFFFF      <1>     lea rdx, twoSpc
   458 00002127 B409                <1>     mov ah, 09h
   459 00002129 CD21                <1>     int 21h
   460 0000212B 0FB70551E0FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   461 00002132 E8B11D0000          <1>     call printTime
   462 00002137 488D15ACE7FFFF      <1>     lea rdx, crlf
   463 0000213E B409                <1>     mov ah, 09h
   464 00002140 CD21                <1>     int 21h
   465 00002142 B017                <1>     mov al, 23  ;23 lines... for the next bit
   466 00002144 EB0D                <1>     jmp short .dirPrintNameExit
   467                              <1> .widePrint:
   468                              <1> ;If /W, print name space ext space space space space
   469 00002146 488D15BFEDFFFF      <1>     lea rdx, fourSpc
   470 0000214D B409                <1>     mov ah, 09h ;Print string
   471 0000214F CD21                <1>     int 21h
   472 00002151 B073                <1>     mov al, 5*23    ;5 entries per line...
   473                              <1> .dirPrintNameExit:
   474 00002153 FF0594E4FFFF        <1>     inc dword [dirFileCtr]   ;Increment file counter
   475 00002159 FE058DE4FFFF        <1>     inc byte [dirLineCtr]
   476 0000215F 380587E4FFFF        <1>     cmp byte [dirLineCtr], al
   477                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002165 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002167 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   478 00002168 F6057CE4FFFF02      <1>     test byte [dirFlags], dirPageType
   479 0000216F 741A                <1>     jz .dirPrnNoPag
   480 00002171 488D1537E9FFFF      <1>     lea rdx, pauseMes
   481 00002178 B409                <1>     mov ah, 09h
   482 0000217A CD21                <1>     int 21h
   483 0000217C B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   484 0000217E CD21                <1>     int 21h
   485 00002180 488D1563E7FFFF      <1>     lea rdx, crlf   ;Force new line
   486 00002187 B409                <1>     mov ah, 09h
   487 00002189 CD21                <1>     int 21h
   488                              <1> .dirPrnNoPag:
   489 0000218B C6055AE4FFFF00      <1>     mov byte [dirLineCtr], 0
   490                              <1>     return
    13                              <2> %%_ret:
    14 00002192 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   491                              <1> 
   492                              <1> chdir:
   493 00002193 F60512DFFFFFFF      <1>     test byte [arg1Flg], -1
   494 0000219A 754D                <1>     jnz .changeDir
   495                              <1>     ;Print CWD
   496                              <1> .printCWD:
   497 0000219C E8EA1E0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   498 000021A1 E8691E0000          <1>     call printCRLF
   499                              <1>     return
    13                              <2> %%_ret:
    14 000021A6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> .printDiskCWD:
   501                              <1> ;Print CWD for a specified drive
   502 000021A7 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   503 000021AB 88D0                <1>     mov al, dl
   504 000021AD 0440                <1>     add al, "@" ;Get the UC letter
   505 000021AF B43A                <1>     mov ah, ":"
   506 000021B1 488D3D2FE3FFFF      <1>     lea rdi, searchSpec
   507 000021B8 66AB                <1>     stosw   ;Store X:, rdi+=2
   508 000021BA 8A0569DEFFFF        <1>     mov al, byte [pathSep]
   509 000021C0 AA                  <1>     stosb   ;Store pathSep, inc rdi
   510 000021C1 B447                <1>     mov ah, 47h ;Get Current Working Directory
   511 000021C3 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   512 000021C6 CD21                <1>     int 21h
   513 000021C8 E85D200000          <1>     call strlen
   514 000021CD 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   515 000021D3 B440                <1>     mov ah, 40h ;Write to handle
   516 000021D5 BB01000000          <1>     mov ebx, 1  ;STDOUT
   517 000021DA 488D1506E3FFFF      <1>     lea rdx, searchSpec
   518 000021E1 CD21                <1>     int 21h
   519 000021E3 E8271E0000          <1>     call printCRLF
   520                              <1>     return
    13                              <2> %%_ret:
    14 000021E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   521                              <1> .changeDir:
   522 000021E9 8A05BFDEFFFF        <1>     mov al, byte [arg1FCBret]
   523 000021EF 3CFF                <1>     cmp al, -1 
   524 000021F1 0F846AFAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   525 000021F7 E8C7210000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   526 000021FC 488D15E4E2FFFF      <1>     lea rdx, searchSpec
   527 00002203 B43B                <1>     mov ah, 3Bh ;CHDIR
   528 00002205 CD21                <1>     int 21h
   529 00002207 0F8281FAFFFF        <1>     jc badDirError
   530                              <1>     return
    13                              <2> %%_ret:
    14 0000220D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   531                              <1> 
   532                              <1> mkdir:
   533 0000220E F60597DEFFFFFF      <1>     test byte [arg1Flg], -1
   534 00002215 0F844FFAFFFF        <1>     jz badArgError
   535 0000221B F6058DDEFFFFFF      <1>     test byte [arg2Flg], -1
   536 00002222 0F8542FAFFFF        <1>     jnz badArgError
   537                              <1>     ;We have exactly one argument
   538 00002228 8A0580DEFFFF        <1>     mov al, byte [arg1FCBret]
   539 0000222E 3CFF                <1>     cmp al, -1 
   540 00002230 0F842BFAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   541 00002236 E888210000          <1>     call buildCommandPath
   542 0000223B 488D15A5E2FFFF      <1>     lea rdx, searchSpec
   543 00002242 B800390000          <1>     mov eax, 3900h  ;MKDIR
   544 00002247 CD21                <1>     int 21h
   545                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002249 73(0D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   546                              <1> .badMake:   ;Else, bad make
   547 0000224B 488D1591E9FFFF      <1>     lea rdx, badMD
   548 00002252 E9BF1D0000          <1>     jmp printString
   549                              <1> 
   550                              <1> rmdir:
   551 00002257 F6054EDEFFFFFF      <1>     test byte [arg1Flg], -1
   552 0000225E 0F8406FAFFFF        <1>     jz badArgError
   553 00002264 F60544DEFFFFFF      <1>     test byte [arg2Flg], -1
   554 0000226B 0F85F9F9FFFF        <1>     jnz badArgError
   555                              <1>     ;We have exactly one argument
   556 00002271 8A0537DEFFFF        <1>     mov al, byte [arg1FCBret]
   557 00002277 3CFF                <1>     cmp al, -1 
   558 00002279 0F84E2F9FFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   559 0000227F E83F210000          <1>     call buildCommandPath
   560 00002284 488D155CE2FFFF      <1>     lea rdx, searchSpec
   561 0000228B B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   562 00002290 CD21                <1>     int 21h
   563                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002292 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002294 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   564                              <1> .badRemove:   ;Else, bad make
   565 00002295 488D1564E9FFFF      <1>     lea rdx, badRD
   566 0000229C E9751D0000          <1>     jmp printString
   567                              <1> 
   568                              <1> copy:
   569 000022A1 66C7052AE5FFFFFFFF  <1>     mov word [sourceHdl], -1
   570 000022AA 66C70523E5FFFFFFFF  <1>     mov word [destHdl], -1
   571 000022B3 66C7051CE5FFFFFFFF  <1>     mov word [srcHdlInfo], -1
   572 000022BC C60525E5FFFF00      <1>     mov byte [bCpFlg], 0    ;State flag!
   573 000022C3 48C7050CE5FFFF0000- <1>     mov qword [cpBufPtr], 0 ;Init to null ptr!
   573 000022CC 0000                <1>
   574 000022CE 66C7050BE5FFFF0000  <1>     mov word [wCpBufSz], 0  ;Clear buffer count        
   575 000022D7 C70503E5FFFF000000- <1>     mov dword [dCpCnt], 0   ;Clear file count
   575 000022E0 00                  <1>
   576 000022E1 C605CCE3FFFF00      <1>     mov byte [srcSpec], 0   ;Clear first bytes of the buffers
   577 000022E8 C60547E4FFFF00      <1>     mov byte [destSpec], 0
   578 000022EF 48C705BEE4FFFF0000- <1>     mov qword [srcPtr], 0
   578 000022F8 0000                <1>
   579 000022FA 48C705BBE4FFFF0000- <1>     mov qword [destPtr], 0
   579 00002303 0000                <1>
   580 00002305 E8D0210000          <1>     call setDTA
   581 0000230A B800540000          <1>     mov eax, 5400h  ;Get verify flag
   582 0000230F CD21                <1>     int 21h
   583 00002311 8805BCE4FFFF        <1>     mov byte [verifyFlg], al    ;Save verify flag!
   584                              <1> ;Start with getting a disk buffer, of the size of the internal disk buffers. 
   585                              <1> ;If we cant allocate full diskbuffer, get as much as we can
   586                              <1> ;Diskbuffer as thats the best optimisation for IO buffers
   587 00002317 B800520000          <1>     mov eax, 5200h
   588 0000231C CD21                <1>     int 21h ;Get in rbx ptr to sysvars
   589 0000231E 0FB74B20            <1>     movzx ecx, word [rbx + 20h] ;Get the internal buffer size in ecx!
   590 00002322 89CB                <1>     mov ebx, ecx
   591 00002324 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs, save bytes in ecx
   592 00002327 B800480000          <1>     mov eax, 4800h
   593 0000232C CD21                <1>     int 21h
   594 0000232E 731E                <1>     jnc .bufOk
   595 00002330 85DB                <1>     test ebx, ebx       ;Cannot allocate? Yikes...
   596 00002332 750C                <1>     jnz .okSize
   597                              <1> .badAlloc:
   598                              <1> ;Not enough memory error!
   599 00002334 488D1518E7FFFF      <1>     lea rdx, cpNoMem
   600 0000233B E955F9FFFF          <1>     jmp badCmn  ;Print the string and return!
   601                              <1> .okSize:
   602 00002340 89D9                <1>     mov ecx, ebx    
   603 00002342 C1E104              <1>     shl ecx, 4  ;Convert into bytes from paragraphs
   604 00002345 B800480000          <1>     mov eax, 4800h
   605 0000234A CD21                <1>     int 21h
   606 0000234C 72E6                <1>     jc .badAlloc
   607                              <1> .bufOk:
   608 0000234E 48890585E4FFFF      <1>     mov qword [cpBufPtr], rax   ;Save ptr to xfr area
   609 00002355 66890D86E4FFFF      <1>     mov word [wCpBufSz], cx     ;Save buffer size
   610                              <1> ;Go to the end of the cmd line and search backwards for the destination first
   611 0000235C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   612 00002363 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]
   613 0000236B FFC9                <1>     dec ecx ;Turn into offset
   614 0000236D 4801CE              <1>     add rsi, rcx
   615 00002370 31D2                <1>     xor edx, edx    ;Use edx as a counter for number of destination switches
   616 00002372 FD                  <1>     std ;Go in reverse
   617                              <1> .sd:    ;At this point, any switch chars affect destination!
   618 00002373 E8D71E0000          <1>     call skipDelimiters ;SkipDelimiters in reverse!
   619 00002378 8A05ACDCFFFF        <1>     mov al, byte [switchChar]
   620 0000237E 384601              <1>     cmp byte [rsi + 1], al  ;Did we hit a switch?
   621 00002381 7509                <1>     jne .noSwitch
   622                              <1>     ;Here we hit a switchchar! Process it! rsi points to char before switchchar
   623 00002383 0FB64602            <1>     movzx eax, byte [rsi + 2]   ;Get the char
   624 00002387 50                  <1>     push rax        ;Push the switchchar
   625 00002388 FFC2                <1>     inc edx         ;Inc the counter
   626 0000238A EBE7                <1>     jmp short .sd   ;Now go back to skipping delimiters again!
   627                              <1> .noSwitch:
   628                              <1> ;Ok so we hit a path. Now set the flags based on the stack!
   629 0000238C 85D2                <1>     test edx, edx
   630 0000238E 7412                <1>     jz .noDestSwitch
   631                              <1> .ns1:
   632 00002390 58                  <1>     pop rax ;Pop the switch char
   633 00002391 B304                <1>     mov bl, ascDes
   634 00002393 E809040000          <1>     call .doSwitchRev
   635 00002398 0F8574040000        <1>     jnz .badExit    ;Invalid switch, abort procedure!    
   636 0000239E FFCA                <1>     dec edx
   637 000023A0 75EE                <1>     jnz .ns1
   638                              <1> .noDestSwitch:
   639                              <1> ;Now search for the starting delimiter or start of line
   640 000023A2 48FFC6              <1>     inc rsi ;Go to the last char in the path
   641                              <1> .noSwitchLp:
   642 000023A5 AC                  <1>     lodsb   ;Get char at rsi, go back a char
   643 000023A6 E8B21E0000          <1>     call isALdelimiter
   644 000023AB 7412                <1>     je .destFnd
   645 000023AD 8A0577DCFFFF        <1>     mov al, byte [switchChar]
   646 000023B3 3846FF              <1>     cmp byte [rsi - 1], al  ;Peek if an embedded switch?
   647 000023B6 7404                <1>     je .se  ;Jump if so!
   648 000023B8 FFC9                <1>     dec ecx ;One less char left to search
   649 000023BA EBE9                <1>     jmp short .noSwitchLp
   650                              <1> .se:
   651 000023BC 48FFCE              <1>     dec rsi     ;Dec to make the below work!
   652                              <1> .destFnd:
   653 000023BF 4881C602000000      <1>     add rsi, 2  ;Go back to the first char past the delimiter
   654 000023C6 FC                  <1>     cld 
   655 000023C7 4889F5              <1>     mov rbp, rsi    ;Save this ptr in rbp temporarily
   656 000023CA 488D3D65E3FFFF      <1>     lea rdi, destSpec
   657 000023D1 57                  <1>     push rdi
   658 000023D2 E8A91F0000          <1>     call cpDelimPathToBufz ;Copy this over!   
   659 000023D7 5F                  <1>     pop rdi
   660 000023D8 E8291F0000          <1>     call findLastPathComponant  ;Get last path componant in rdi
   661 000023DD 48893DDCE3FFFF      <1>     mov qword [destPtr], rdi
   662 000023E4 807F013A            <1>     cmp byte [rdi + 1], ":" ;Is this a colon?
   663 000023E8 7517                <1>     jne .destEnd    ;Dont worry
   664 000023EA 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   665 000023EC E8431E0000          <1>     call ucChar             ;Make sure we UC the drive letter
   666 000023F1 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   667 000023F3 4881C702000000      <1>     add rdi, 2              ;Point to this null
   668 000023FA 48893DBFE3FFFF      <1>     mov qword [destPtr], rdi    ;Store chars over the null
   669                              <1> .destEnd:
   670                              <1> ;Now start with source processing!! Clear the binSrc bit in bCpFlg
   671 00002401 8025E0E3FFFFFD      <1>     and byte [bCpFlg], ~binSrc  ;Mightve been accidentally set by dest flags
   672 00002408 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   673                              <1> .srcLp:
   674 0000240F E83B1E0000          <1>     call skipDelimiters 
   675 00002414 8A0510DCFFFF        <1>     mov al, byte [switchChar]
   676 0000241A 3806                <1>     cmp byte [rsi], al
   677 0000241C 7516                <1>     jne .noSrcSw    ;Not switch! Must be filename start!
   678                              <1>     ;rsi points to switch after switchchar
   679 0000241E B301                <1>     mov bl, ascSrc
   680 00002420 E876030000          <1>     call .doSwitch
   681 00002425 0F85E7030000        <1>     jnz .badExit
   682 0000242B 4881C602000000      <1>     add rsi, 2
   683 00002432 EBDB                <1>     jmp short .srcLp    ;Now keep searching for start of filename
   684                              <1> .noSrcSw:
   685 00002434 4839F5              <1>     cmp rbp, rsi
   686 00002437 7527                <1>     jne .noSameSrcDest
   687                              <1>     ;Here if the destination we specified earlier is the same as the source
   688                              <1>     ;This means, the actual destination is the current default drive
   689                              <1>     ; on the current directory. Pass to DOS X:FILENAME.EXT<NUL> string.
   690 00002439 E8CE1D0000          <1>     call getCurrentDrive    ;Get current drive
   691 0000243E 0441                <1>     add al, "A"             ;Turn into a drive letter
   692 00002440 B43A                <1>     mov ah, ":"
   693 00002442 0FB7C0              <1>     movzx eax, ax
   694 00002445 8905EBE2FFFF        <1>     mov dword [destSpec], eax   ;Add a default null terminator
   695 0000244B 488D3DE6E2FFFF      <1>     lea rdi, destSpec+2         ;Point to the null after the colon
   696 00002452 48893D67E3FFFF      <1>     mov qword [destPtr], rdi    ;Copy the filenames here
   697 00002459 800D88E3FFFF20      <1>     or byte [bCpFlg], mod1Cpy   ;Copy to curdir in cur drive
   698                              <1> .noSameSrcDest:
   699 00002460 488D3D4DE2FFFF      <1>     lea rdi, srcSpec            ;rsi now goes into the source spec!
   700 00002467 57                  <1>     push rdi
   701 00002468 E8131F0000          <1>     call cpDelimPathToBufz      ;Copy this over! rsi points past delimiter
   702 0000246D 5F                  <1>     pop rdi
   703                              <1>     ;Now go forwards and pick up any more switches.
   704                              <1>     ;Also any "+" signs here!!
   705 0000246E 48FFCE              <1>     dec rsi ;Point back to the first delimiter
   706                              <1> .swSrcSwPost:
   707 00002471 E8D91D0000          <1>     call skipDelimiters ;Skips trailing delimiters
   708 00002476 8A05AEDBFFFF        <1>     mov al, byte [switchChar]
   709 0000247C 3806                <1>     cmp byte [rsi], al
   710 0000247E 7516                <1>     jne .swSrcSwPostExit
   711                              <1>     ;rsi points to switch after switchchar
   712 00002480 B301                <1>     mov bl, ascSrc
   713 00002482 E814030000          <1>     call .doSwitch  ;Puts us at the char past the switch itself
   714 00002487 0F8585030000        <1>     jnz .badExit
   715 0000248D 4881C602000000      <1>     add rsi, 2      ;Go past the switch
   716 00002494 EBDB                <1>     jmp short .swSrcSwPost
   717                              <1> .swSrcSwPostExit:
   718 00002496 4889FE              <1>     mov rsi, rdi
   719 00002499 E84A1F0000          <1>     call scanForWildcards   ;Find if we have a WC in this source!
   720 0000249E 7507                <1>     jnz .oneCp
   721 000024A0 800D41E3FFFF08      <1>     or byte [bCpFlg], wcSrc ;We are copying many files. Disp names
   722                              <1> .oneCp:
   723 000024A7 E85A1E0000          <1>     call findLastPathComponant  ;Get last componant of src in rdi
   724 000024AC 48893D05E3FFFF      <1>     mov qword [srcPtr], rdi     ;Now save the last componant
   725 000024B3 807F013A            <1>     cmp byte [rdi + 1], ":"     ;Is this a colon?
   726 000024B7 7517                <1>     jne .srcEnd             ;Dont worry
   727 000024B9 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   728 000024BB E8741D0000          <1>     call ucChar             ;Make sure we UC the drive letter
   729 000024C0 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   730 000024C2 4881C702000000      <1>     add rdi, 2              ;Point after the colon
   731 000024C9 48893DE8E2FFFF      <1>     mov qword [srcPtr], rdi ;Store chars past the colon
   732                              <1> .srcEnd:
   733                              <1> ;Now uppercase both paths
   734 000024D0 488D35DDE1FFFF      <1>     lea rsi, srcSpec
   735 000024D7 E8641D0000          <1>     call normalisePath
   736 000024DC 488D3D53E2FFFF      <1>     lea rdi, destSpec
   737 000024E3 E8581D0000          <1>     call normalisePath
   738                              <1> ;Now establish if the source is a directory or not!
   739 000024E8 F605F9E2FFFF08      <1>     test byte [bCpFlg], wcSrc
   740 000024EF 7577                <1>     jnz .checkDestDir   ;Skip check if source has wildcards
   741 000024F1 488D15BCE1FFFF      <1>     lea rdx, srcSpec
   742 000024F8 4889D6              <1>     mov rsi, rdx
   743 000024FB 66AD                <1>     lodsw   ;Get the first two chars, is it "X:" style
   744 000024FD 80FC3A              <1>     cmp ah, ":"
   745 00002500 7522                <1>     jne .isSrcDir   ;If not, check explicitly
   746 00002502 AC                  <1>     lodsb           ;Get char past :
   747 00002503 84C0                <1>     test al, al     ;Is byte three nul?
   748 00002505 740D                <1>     jz .srcStorWc   ;If so, we have "X:<NUL>"
   749 00002507 3A051CDBFFFF        <1>     cmp al, byte [pathSep]  ;If char past : isnt pathsep, check manually
   750 0000250D 7515                <1>     jne .isSrcDir
   751 0000250F AC                  <1>     lodsb           ;Get char past char past "X:\"
   752 00002510 84C0                <1>     test al, al     
   753 00002512 7510                <1>     jnz .isSrcDir   ;Fall thru is "X:\<NUL>"
   754                              <1> .srcStorWc:
   755                              <1> ;rsi points past the char to store the WC at
   756 00002514 C746FF2A2E2A00      <1>     mov dword [rsi - 1], "*.*"  ;Store with terminating null!
   757 0000251B 800DC6E2FFFF08      <1>     or byte [bCpFlg], wcSrc     ;We're adding the wildcard to the source!
   758 00002522 EB44                <1>     jmp short .checkDestDir
   759                              <1> .isSrcDir:
   760 00002524 B910000000          <1>     mov ecx, dirDirectory
   761 00002529 B8004E0000          <1>     mov eax, 4E00h
   762 0000252E CD21                <1>     int 21h
   763 00002530 7236                <1>     jc .checkDestDir    ;Wasn't a dir!
   764                              <1>     ;Was the file we found actually a directory?
   765 00002532 803D49DCFFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   766 00002539 752D                <1>     jne .checkDestDir   ;Wasn't a dir
   767 0000253B 4889D7              <1>     mov rdi, rdx
   768 0000253E E8E71C0000          <1>     call strlen
   769 00002543 FFC9                <1>     dec ecx
   770 00002545 4801CF              <1>     add rdi, rcx    ;Move rdi to the terminating null
   771 00002548 8A05DBDAFFFF        <1>     mov al, byte [pathSep]
   772 0000254E 3847FF              <1>     cmp byte [rdi - 1], al  ;Do we have a trailing pathsep?
   773 00002551 7401                <1>     je .srctpsp
   774 00002553 AA                  <1>     stosb   ;Store the pathsep over the null, inc rdi
   775                              <1> .srctpsp:
   776 00002554 48893D5DE2FFFF      <1>     mov qword [srcPtr], rdi ;Update the srcPtr
   777 0000255B B82A2E2A00          <1>     mov eax, "*.*"
   778 00002560 AB                  <1>     stosd   ;Store the WC with terminating nul!
   779 00002561 800D80E2FFFF08      <1>     or byte [bCpFlg], wcSrc ;We're adding the wildcard to the source!
   780                              <1> .checkDestDir:
   781                              <1> ;Now establish if destination is a directory or not!
   782 00002568 F60579E2FFFF20      <1>     test byte [bCpFlg], mod1Cpy ;If we already know its mod1, skip
   783 0000256F 0F855E010000        <1>     jnz .mod1
   784 00002575 488D35BAE1FFFF      <1>     lea rsi, destSpec
   785 0000257C 66AD                <1>     lodsw   ;Get the first word, i.e. candidate "X:"
   786 0000257E 80FC3A              <1>     cmp ah, ":"
   787 00002581 751A                <1>     jne .isDestDir
   788 00002583 66AD                <1>     lodsw   ;Get second word, i.e. candidate "\<NUL>" or "<NUL>"
   789 00002585 84C0                <1>     test al, al ;Is byte three nul?
   790 00002587 0F8446010000        <1>     jz .mod1    ;If so, it was a X:<NUL>
   791 0000258D 84E4                <1>     test ah, ah ;Is byte four nul?
   792 0000258F 750C                <1>     jnz .isDestDir  ;If not, check if destination is a directory
   793 00002591 3A0592DAFFFF        <1>     cmp al, byte [pathSep]  ;Else, check if byte 3 was a pathsep!
   794 00002597 0F8436010000        <1>     je .mod1    ;If it is, then it was a X:\<NUL>
   795                              <1> .isDestDir:
   796                              <1> ;Only here if we suspect the destination pathspec is a path, not file!
   797 0000259D 488D1592E1FFFF      <1>     lea rdx, destSpec
   798 000025A4 B910000000          <1>     mov ecx, dirDirectory
   799 000025A9 B8004E0000          <1>     mov eax, 4E00h
   800 000025AE CD21                <1>     int 21h
   801 000025B0 7237                <1>     jc .mod2
   802                              <1>     ;Was the file we found actually a directory?
   803 000025B2 803DC9DBFFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   804 000025B9 752E                <1>     jne .mod2
   805                              <1>     ;Here we just check if we have a terminating slash on the destination path.
   806                              <1>     ;If not, we need to place one there!
   807 000025BB 4889D7              <1>     mov rdi, rdx    ;Move destSpec
   808 000025BE E8671C0000          <1>     call strlen
   809 000025C3 FFC9                <1>     dec ecx         ;Lose the null terminator, zero upper bits
   810 000025C5 4801CF              <1>     add rdi, rcx    ;Go to null terminator
   811 000025C8 0FB6055ADAFFFF      <1>     movzx eax, byte [pathSep]
   812 000025CF 3847FF              <1>     cmp byte [rdi - 1], al  ;Is the char before the null a pathsep?
   813 000025D2 0F84FB000000        <1>     je .mod1        ;If so, skip adding another one!
   814 000025D8 66AB                <1>     stosw           ;Else, store the pathsep and null!
   815 000025DA 48FFCF              <1>     dec rdi         ;Point back to null
   816 000025DD 48893DDCE1FFFF      <1>     mov qword [destPtr], rdi    ;Save this pointer
   817 000025E4 E9EA000000          <1>     jmp .mod1
   818                              <1> .mod2:
   819                              <1> ;Here we are copying files(s) to file(s)! Filenames are copied according 
   820                              <1> ; to rename wildcard semantics. Always run through this as the destination
   821                              <1> ; name may have wildcards in it! But we don't add any.
   822 000025E9 800DF8E1FFFF40      <1>     or byte [bCpFlg], mod2Cpy   ;Set to remind us what we are doing!
   823 000025F0 488D353FE1FFFF      <1>     lea rsi, destSpec
   824 000025F7 E8EC1D0000          <1>     call scanForWildcards   ;ZF=ZE if WC cound
   825 000025FC 7407                <1>     jz .m2Wc
   826 000025FE 800DE3E1FFFF10      <1>     or byte [bCpFlg], oneDest   ;The destination is a single file!
   827                              <1> .m2Wc:
   828                              <1> ;Search for the source file
   829 00002605 488D15A8E0FFFF      <1>     lea rdx, srcSpec
   830 0000260C 31C9                <1>     xor ecx, ecx    ;Normal and RO files pls
   831 0000260E B8004E0000          <1>     mov eax, 4E00h
   832 00002613 CD21                <1>     int 21h
   833 00002615 0F82ED010000        <1>     jc .badSrcFile
   834 0000261B 488B359EE1FFFF      <1>     mov rsi, qword [destPtr]
   835 00002622 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Create the permanent destination pattern
   836 00002626 B801290000          <1>     mov eax, 2901h
   837 0000262B CD21                <1>     int 21h
   838                              <1> .md2Lp:
   839 0000262D 488D3557DBFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   840 00002634 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Create the source pattern
   841 00002638 B801290000          <1>     mov eax, 2901h
   842 0000263D CD21                <1>     int 21h  
   843                              <1> ;Now depending on source and dest patterns, build a filename in renName
   844 0000263F 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
   845 00002643 488D3D7EE1FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
   846 0000264A 57                  <1>     push rdi
   847 0000264B 48A5                <1>     movsq
   848 0000264D 66A5                <1>     movsw
   849 0000264F A4                  <1>     movsb
   850 00002650 5F                  <1>     pop rdi
   851 00002651 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
   852 00002655 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
   853                              <1> .md2NameMake:
   854 0000265A AC                  <1>     lodsb   ;Get the char from the source string
   855 0000265B 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
   856 0000265E 7502                <1>     jne .noStore    ;Dont store the char there
   857 00002660 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
   858                              <1> .noStore:
   859 00002662 48FFC7              <1>     inc rdi ;Goto next char position
   860 00002665 FFC9                <1>     dec ecx
   861 00002667 75F1                <1>     jnz .md2NameMake
   862 00002669 488D351BDBFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   863 00002670 488B3D41E1FFFF      <1>     mov rdi, qword [srcPtr]
   864 00002677 E8951B0000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
   865 0000267C 488D3545E1FFFF      <1>     lea rsi, renName
   866 00002683 488B3D36E1FFFF      <1>     mov rdi, qword [destPtr]
   867 0000268A E89B1C0000          <1>     call FCBToAsciiz
   868 0000268F E8DB000000          <1>     call .prntFilespec  ;Prints the source filename
   869 00002694 E8AE010000          <1>     call copyMain       ;And copy it!
   870 00002699 731D                <1>     jnc .md2Ok
   871                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   872                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   873 0000269B 3CFD                <1>     cmp al, -3
   874 0000269D 0F8442010000        <1>     je .badBinCdevErr
   875 000026A3 3CFE                <1>     cmp al, -2
   876 000026A5 0F8443010000        <1>     je .rootDirFull
   877 000026AB 3CFF                <1>     cmp al, -1      ;Source and destination same?
   878 000026AD 0F8444010000        <1>     je .badSameFile 
   879 000026B3 E95A010000          <1>     jmp .badExit    ;Else generic error message
   880                              <1> .md2Ok:
   881 000026B8 F60529E1FFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   882 000026BF 0F8485000000        <1>     jz .copyDone        ;Copy complete!
   883 000026C5 B8004F0000          <1>     mov eax, 4F00h      ;Else, find Next File
   884 000026CA CD21                <1>     int 21h
   885 000026CC 727C                <1>     jc .copyDone        ;If no more files, we are done!
   886 000026CE E95AFFFFFF          <1>     jmp .md2Lp    ;Else, now build a new source and destination!
   887                              <1> .mod1:
   888                              <1> ;Here we are copying file(s) into a directory. Filenames are copied verbatum.
   889 000026D3 800D0EE1FFFF20      <1>     or byte [bCpFlg], mod1Cpy   ;Ensure this bit is set!
   890 000026DA 488D15D3DFFFFF      <1>     lea rdx, srcSpec
   891 000026E1 31C9                <1>     xor ecx, ecx    ;Normal and read only files pls!!
   892 000026E3 B8004E0000          <1>     mov eax, 4E00h
   893 000026E8 CD21                <1>     int 21h
   894 000026EA 0F8218010000        <1>     jc .badSrcFile  ;File not found error!!
   895                              <1> .mod1Lp:
   896 000026F0 488D3594DAFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   897 000026F7 488B3DBAE0FFFF      <1>     mov rdi, qword [srcPtr]
   898 000026FE E81D1B0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   899 00002703 488B3DB6E0FFFF      <1>     mov rdi, qword [destPtr]
   900 0000270A E8111B0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   901 0000270F E85B000000          <1>     call .prntFilespec
   902 00002714 E82E010000          <1>     call copyMain   ;And copy it!
   903 00002719 731D                <1>     jnc .mod1Ok
   904                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   905                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   906 0000271B 3CFD                <1>     cmp al, -3
   907 0000271D 0F84C2000000        <1>     je .badBinCdevErr
   908 00002723 3CFE                <1>     cmp al, -2
   909 00002725 0F84C3000000        <1>     je .rootDirFull
   910 0000272B 3CFF                <1>     cmp al, -1      ;Source and destination same?
   911 0000272D 0F84C4000000        <1>     je .badSameFile 
   912 00002733 E9DA000000          <1>     jmp .badExit    ;Else generic error message
   913                              <1> .mod1Ok:
   914 00002738 F605A9E0FFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   915 0000273F 7409                <1>     jz .copyDone
   916 00002741 B8004F0000          <1>     mov eax, 4F00h      ;Find Next File
   917 00002746 CD21                <1>     int 21h
   918 00002748 73A6                <1>     jnc .mod1Lp         ;If no more files, we are done! Fall thru!
   919                              <1> 
   920                              <1> .copyDone:
   921 0000274A E8CD000000          <1>     call .copyCleanup   ;Clean up resources!
   922 0000274F B800020000          <1>     mov eax, 0200h      ;Beep a TAB out :)
   923 00002754 B209                <1>     mov dl, TAB
   924 00002756 CD21                <1>     int 21h
   925 00002758 8B0586E0FFFF        <1>     mov eax, dword [dCpCnt] ;Get number of files copied
   926 0000275E E8991C0000          <1>     call printDecimalWord   ;n File(s) copied
   927 00002763 488D15D7E2FFFF      <1>     lea rdx, copyOk
   928 0000276A B409                <1>     mov ah, 09h
   929 0000276C CD21                <1>     int 21h    
   930                              <1>     return
    13                              <2> %%_ret:
    14 0000276E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   931                              <1> 
   932                              <1> .prntFilespec:
   933                              <1> ;Prints the filespec to STDOUT. If the path is 
   934 0000276F F60572E0FFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no wildcard, then don't print name
   935                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002776 74(6E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   936 00002778 488D1535DFFFFF      <1>     lea rdx, srcSpec
   937 0000277F 4889D7              <1>     mov rdi, rdx
   938 00002782 E8A31A0000          <1>     call strlen
   939 00002787 FFC9                <1>     dec ecx     ;Drop terminating null
   940 00002789 BB01000000          <1>     mov ebx, 1  ;STDOUT
   941 0000278E B800400000          <1>     mov eax, 4000h  ;Write
   942 00002793 CD21                <1>     int 21h
   943 00002795 E875180000          <1>     call printCRLF
   944                              <1>     return
    13                              <2> %%_ret:
    14 0000279A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   945                              <1> .doSwitch:
   946                              <1> ;Since switches can come before or after a name, handle them here!
   947                              <1> ;If invalid switch char, returns ZF=NZ.
   948                              <1> ;Input: bl = ASCII bit to set (either 1 or 2) 
   949                              <1> ;       rsi -> Switchchar
   950 0000279B 56                  <1>     push rsi
   951 0000279C 48FFC6              <1>     inc rsi ;Point to char past switchchar
   952 0000279F AC                  <1>     lodsb   ;Get this char, goto next char
   953 000027A0 5E                  <1>     pop rsi
   954                              <1> .doSwitchRev:
   955 000027A1 E88E1A0000          <1>     call ucChar
   956 000027A6 3C41                <1>     cmp al, "A"
   957 000027A8 7510                <1>     jne .cB
   958 000027AA 081D38E0FFFF        <1>     or byte [bCpFlg], bl    ;Set the ASCII bit
   959 000027B0 802531E0FFFFFD      <1>     and byte [bCpFlg], ~binSrc  ;ASCII flag clears this
   960                              <1> .cExit:
   961 000027B7 31DB                <1>     xor ebx, ebx    ;Clear ZF 
   962                              <1>     return
    13                              <2> %%_ret:
    14 000027B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   963                              <1> .cB:
   964 000027BA 3C42                <1>     cmp al, "B"
   965 000027BC 7511                <1>     jne .cV
   966 000027BE F6D3                <1>     not bl  ;Reverse bits
   967 000027C0 201D22E0FFFF        <1>     and byte [bCpFlg], bl   ;Clear the ASCII bit.
   968 000027C6 800D1BE0FFFF02      <1>     or byte [bCpFlg], binSrc    ;This was explicitly set
   969 000027CD EBE8                <1>     jmp short .cExit
   970                              <1> .cV:
   971 000027CF 3C56                <1>     cmp al, "V"
   972                              <1>     retne   ;Exit w/o clearing ZF
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000027D1 75(B9)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   973 000027D3 F605F9DFFFFFFF      <1>     test byte [verifyFlg], -1   ;If verify flag set, do nothing
   974 000027DA 75DB                <1>     jnz .cExit                  ;If not zero, flag already set!
   975                              <1>     ;Else, set it. We return it at the end!
   976 000027DC B8012E0000          <1>     mov eax, 2E01h  ;Set Verify Flag
   977 000027E1 CD21                <1>     int 21h
   978 000027E3 EBD2                <1>     jmp short .cExit
   979                              <1> 
   980                              <1> ;COPY Bad Exits!!
   981                              <1> .badBinCdevErr:
   982 000027E5 488D1505E5FFFF      <1>     lea rdx, binDevErr
   983 000027EC EB10                <1>     jmp short .badExitCmn
   984                              <1> .rootDirFull:
   985 000027EE 488D15E8E1FFFF      <1>     lea rdx, fulRootDir
   986 000027F5 EB07                <1>     jmp short .badExitCmn
   987                              <1> .badSameFile:
   988 000027F7 488D15F5E1FFFF      <1>     lea rdx, noSelfCopy
   989                              <1> .badExitCmn:
   990 000027FE E892F4FFFF          <1>     call badCmn     ;Print error message
   991 00002803 E942FFFFFF          <1>     jmp .copyDone   ;Clean resources
   992                              <1> .badSrcFile:
   993 00002808 E878F4FFFF          <1>     call badFnf  ;File not found!!
   994 0000280D E938FFFFFF          <1>     jmp .copyDone
   995                              <1> .badExit:
   996 00002812 E841F4FFFF          <1>     call badParamError
   997 00002817 E92EFFFFFF          <1>     jmp .copyDone
   998                              <1> 
   999                              <1> .copyCleanup:
  1000                              <1> ;Clean all resources!! Reset verify and free copy buffer. 
  1001                              <1> ;Handles are never open in this process!
  1002 0000281C B8002E0000          <1>     mov eax, 2E00h
  1003 00002821 8A05ACDFFFFF        <1>     mov al, byte [verifyFlg]
  1004 00002827 CD21                <1>     int 21h
  1005 00002829 4150                <1>     push r8
  1006 0000282B 4C8B05A8DFFFFF      <1>     mov r8, qword [cpBufPtr]
  1007 00002832 4D85C0              <1>     test r8, r8 ;Check zero, clear CF
  1008 00002835 7407                <1>     jz .skipFree
  1009 00002837 B800490000          <1>     mov eax, 4900h
  1010 0000283C CD21                <1>     int 21h
  1011                              <1> .skipFree:
  1012 0000283E 4158                <1>     pop r8
  1013 00002840 0F82791C0000        <1>     jc freezePC ;If free fails, man....
  1014                              <1>     return
    13                              <2> %%_ret:
    14 00002846 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1015                              <1> 
  1016                              <1> copyMain:
  1017                              <1> ;This is the main copying procedure! 
  1018                              <1> ;Start by checking the two files are not the same. If so, complain!
  1019                              <1> ;If returns CF=CY, error code in al. 
  1020                              <1> ;   If al = -1, same filename error!
  1021                              <1> ;   If al = -2, Root Dir full (couldn't create file)
  1022                              <1> ;   If al = -3, attempted binary read from a device
  1023                              <1> ;If returns CF=NC, file copied successfully.
  1024                              <1> ;Check the two files are not the same using truename in searchspec
  1025 00002847 488D3566DEFFFF      <1>     lea rsi, srcSpec
  1026 0000284E 488D3D92DCFFFF      <1>     lea rdi, searchSpec
  1027 00002855 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1028 0000285A CD21                <1>     int 21h 
  1029 0000285C 57                  <1>     push rdi    ;Save this searchSpec
  1030 0000285D 488D35D2DEFFFF      <1>     lea rsi, destSpec
  1031 00002864 488D3DFEDCFFFF      <1>     lea rdi, searchSpec + cmdBufferL ;Use the latter half to store this bit
  1032 0000286B B800600000          <1>     mov eax, 6000h
  1033 00002870 CD21                <1>     int 21h
  1034 00002872 5E                  <1>     pop rsi     ;Get this ptr back
  1035 00002873 B81E120000          <1>     mov eax, 121Eh  ;Cmpr ASCII strings
  1036 00002878 CD2F                <1>     int 2Fh
  1037 0000287A 750F                <1>     jnz .notSameFile
  1038 0000287C B0FF                <1>     mov al, -1  ;Same filename error!
  1039                              <1> .badExit:
  1040 0000287E 50                  <1>     push rax
  1041 0000287F E8B0000000          <1>     call .exitCleanup
  1042 00002884 58                  <1>     pop rax
  1043 00002885 F9                  <1>     stc
  1044                              <1>     return
    13                              <2> %%_ret:
    14 00002886 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1045                              <1> .badExitNoSpace:
  1046 00002887 B0FE                <1>     mov al, -2  ;Access denied from Create happens if Root Dir full!
  1047 00002889 EBF3                <1>     jmp short .badExit
  1048                              <1> .notSameFile:
  1049                              <1> ;Open source with read permission
  1050                              <1> ;Open destination with write permission
  1051 0000288B 488D1522DEFFFF      <1>     lea rdx, srcSpec
  1052 00002892 B8003D0000          <1>     mov eax, 3D00h  ;Read open
  1053 00002897 CD21                <1>     int 21h
  1054 00002899 72E3                <1>     jc .badExit
  1055 0000289B 66890532DFFFFF      <1>     mov word [sourceHdl], ax
  1056 000028A2 0FB7D8              <1>     movzx ebx, ax   ;For bx
  1057                              <1> 
  1058 000028A5 B800440000          <1>     mov eax, 4400h  ;Get device info for file in bx in dx
  1059 000028AA CD21                <1>     int 21h
  1060 000028AC 66891525DFFFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
  1061 000028B3 F6C280              <1>     test dl, 80h    ;Is this a chardev?
  1062 000028B6 7412                <1>     jz .prepCopy
  1063                              <1> ;Check the binary flag was not set on this source filespec
  1064 000028B8 B0FD                <1>     mov al, -3  ;Prep the error code
  1065 000028BA F60527DFFFFF02      <1>     test byte [bCpFlg], binSrc
  1066 000028C1 75BB                <1>     jnz .badExit    ;Return with the error code in al
  1067 000028C3 800D1EDFFFFF01      <1>     or byte [bCpFlg], ascSrc    ;Set the ascii read bit for later!
  1068                              <1> .prepCopy:
  1069 000028CA 31F6                <1>     xor esi, esi                ;Flag if ASCII copy done after write!
  1070 000028CC 488B1507DFFFFF      <1>     mov rdx, qword [cpBufPtr]   ;Get the buffer pointer
  1071                              <1> .copyLoop:
  1072 000028D3 0FB70D08DFFFFF      <1>     movzx ecx, word [wCpBufSz]
  1073 000028DA 0FB71DF3DEFFFF      <1>     movzx ebx, word [sourceHdl]
  1074 000028E1 B8003F0000          <1>     mov eax, 3F00h ;Read
  1075 000028E6 CD21                <1>     int 21h
  1076 000028E8 7294                <1>     jc .badExit
  1077 000028EA 89C1                <1>     mov ecx, eax    ;Save the binary # of bytes read
  1078 000028EC F605F5DEFFFF01      <1>     test byte [bCpFlg], ascSrc  ;Are we copying in ascii mode
  1079 000028F3 7413                <1>     jz .notAscii
  1080                              <1> ;Now scan the buffer for a EOF. If we find, we stop the copy at that char
  1081 000028F5 50                  <1>     push rax        ;Save the original char count
  1082 000028F6 4889D7              <1>     mov rdi, rdx    ;rdx keeps the buffer ptr
  1083 000028F9 B01A                <1>     mov al, EOF
  1084 000028FB F2AE                <1>     repne scasb     ;Loop thru now!
  1085 000028FD 89C8                <1>     mov eax, ecx    ;Move the offset into the buffer in eax
  1086 000028FF 59                  <1>     pop rcx         ;Get the original read count into ecx
  1087 00002900 7506                <1>     jne .notAscii   ;If EOF not found, ecx has the full buffer size to write
  1088                              <1> ;Here if EOF found.
  1089 00002902 FFC0                <1>     inc eax         ;Drop one for the EOF char itself
  1090 00002904 29C1                <1>     sub ecx, eax    ;Get difference for # of chars to write
  1091 00002906 FFCE                <1>     dec esi         ;Set to -1 to indicate we are done with ASCII copy!
  1092                              <1> .notAscii:
  1093 00002908 85C9                <1>     test ecx, ecx   ;If no bytes were read, exit!
  1094 0000290A 7428                <1>     jz .exitCleanup
  1095 0000290C 51                  <1>     push rcx    ;Save the number of bytes to write
  1096 0000290D 52                  <1>     push rdx    ;Save the buffer ptr
  1097 0000290E E88D000000          <1>     call .getWriteHandle    ;Gets hdl in bx. Inc file ctr on create/open
  1098 00002913 5A                  <1>     pop rdx
  1099 00002914 59                  <1>     pop rcx
  1100 00002915 0F826CFFFFFF        <1>     jc .badExitNoSpace
  1101 0000291B B800400000          <1>     mov eax, 4000h ;Write to handle in bx, to buffer in rdx
  1102 00002920 CD21                <1>     int 21h
  1103 00002922 0F8256FFFFFF        <1>     jc .badExit
  1104 00002928 39C1                <1>     cmp ecx, eax            ;ecx=bytes to write, eax=bytes written
  1105 0000292A 0F8557FFFFFF        <1>     jne .badExitNoSpace     ;Disk must be full!!
  1106 00002930 85F6                <1>     test esi, esi           ;Always clear in Binary mode
  1107 00002932 749F                <1>     jz .copyLoop            ;Set possible in ASCII mode
  1108                              <1> .exitCleanup:
  1109                              <1> ;Add a terminating EOF if we have been asked to. Else, skip!
  1110 00002934 F605ADDEFFFF04      <1>     test byte [bCpFlg], ascDes
  1111 0000293B 7425                <1>     jz .ecNoEOF
  1112 0000293D 0FBF1D92DEFFFF      <1>     movsx ebx, word [destHdl]
  1113 00002944 81FBFFFFFFFF        <1>     cmp ebx, -1 ;If this hdl is closed, skip this!
  1114 0000294A 7416                <1>     je .ecNoEOF
  1115 0000294C 488B1587DEFFFF      <1>     mov rdx, qword [cpBufPtr]
  1116 00002953 C6021A              <1>     mov byte [rdx], EOF
  1117 00002956 B901000000          <1>     mov ecx, 1
  1118 0000295B B800400000          <1>     mov eax, 4000h  ;Write and ignore any errors that come from this!
  1119 00002960 CD21                <1>     int 21h
  1120                              <1> .ecNoEOF:
  1121                              <1> ;Now close copy handles!
  1122 00002962 668B1D6BDEFFFF      <1>     mov bx, word [sourceHdl]
  1123 00002969 6681FBFFFF          <1>     cmp bx, -1
  1124 0000296E 7410                <1>     je .beSkipSource
  1125 00002970 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
  1126 00002975 CD21                <1>     int 21h
  1127 00002977 66C70554DEFFFFFFFF  <1>     mov word [sourceHdl], -1    ;Reset the var
  1128                              <1> .beSkipSource:
  1129 00002980 668B1D4FDEFFFF      <1>     mov bx, word [destHdl]
  1130 00002987 6681FBFFFF          <1>     cmp bx, -1
  1131                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000298C 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000298E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1132 0000298F B8003E0000          <1>     mov eax, 3E00h  ;Close this one too!
  1133 00002994 CD21                <1>     int 21h
  1134 00002996 66C70537DEFFFFFFFF  <1>     mov word [destHdl], -1  ;Reset the var
  1135                              <1>     return
    13                              <2> %%_ret:
    14 0000299F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1136                              <1> 
  1137                              <1> .getWriteHandle:
  1138                              <1> ;Returns in bx the handle to the destination file. If the file has not 
  1139                              <1> ; yet been opened, creates/opens the destination file as appropriate.
  1140                              <1> ;Input: Nothing
  1141                              <1> ;Output: CF=NC: bx = Handle to the file
  1142                              <1> ;        CF=CY: File failed to open/create. 
  1143 000029A0 0FB71D2FDEFFFF      <1>     movzx ebx, word [destHdl]
  1144 000029A7 6681FBFFFF          <1>     cmp bx, -1
  1145 000029AC 7402                <1>     je .gwHProceed
  1146 000029AE F8                  <1>     clc     ;Clear the CF
  1147                              <1>     return
    13                              <2> %%_ret:
    14 000029AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1148                              <1> .gwHProceed:
  1149                              <1> ;Here if the destination has not been opened yet!
  1150 000029B0 488D157FDDFFFF      <1>     lea rdx, destSpec   ;Prepare rdx to the destination
  1151                              <1> ;Now we create/reopen the file here!
  1152 000029B7 F6052ADEFFFF10      <1>     test byte [bCpFlg], oneDest ;If single destination, concatenate
  1153 000029BE 743E                <1>     jz .createFile
  1154                              <1> ;Now we first try to open this file. If this is file 0, we create.
  1155                              <1> ;If this is more than file 0, we open
  1156 000029C0 813D1ADEFFFF000000- <1>     cmp dword [dCpCnt], 0
  1156 000029C9 00                  <1>
  1157 000029CA 7432                <1>     je .createFile
  1158                              <1>     ;Now we open the file instead and append to the end
  1159 000029CC B8023D0000          <1>     mov eax, 3D02h  ;Open the file in exclusive read/write mode
  1160 000029D1 CD21                <1>     int 21h
  1161                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000029D3 72(AF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1162 000029D5 FF0509DEFFFF        <1>     inc dword [dCpCnt]  ;We've opened the file for writing!
  1163 000029DB 668905F4DDFFFF      <1>     mov word [destHdl], ax
  1164 000029E2 0FB7D8              <1>     movzx ebx, ax
  1165 000029E5 31C9                <1>     xor ecx, ecx
  1166 000029E7 31D2                <1>     xor edx, edx
  1167 000029E9 F605F8DDFFFF04      <1>     test byte [bCpFlg], ascDes  ;Did we write a terminating ^Z before?
  1168 000029F0 7404                <1>     jz .gwHNoAscii
  1169 000029F2 FFCA                <1>     dec edx                     ;Overwrite the ^Z
  1170 000029F4 FFC9                <1>     dec ecx                     ;PASS A SIGNED -1 !!!!
  1171                              <1> .gwHNoAscii:
  1172 000029F6 B802420000          <1>     mov eax, 4202h  ;LSEEK from the end
  1173 000029FB CD21                <1>     int 21h
  1174                              <1>     return
    13                              <2> %%_ret:
    14 000029FD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1175                              <1> .createFile:
  1176 000029FE B8003C0000          <1>     mov eax, 3C00h  ;Create the file
  1177 00002A03 31C9                <1>     xor ecx, ecx    ;No file attributes
  1178 00002A05 CD21                <1>     int 21h
  1179                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A07 72(FD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1180 00002A09 FF05D5DDFFFF        <1>     inc dword [dCpCnt]  ;File created for writing!
  1181 00002A0F 668905C0DDFFFF      <1>     mov word [destHdl], ax
  1182 00002A16 0FB7D8              <1>     movzx ebx, ax
  1183                              <1>     return
    13                              <2> %%_ret:
    14 00002A19 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1184                              <1> 
  1185                              <1> erase:
  1186 00002A1A F6058BD6FFFFFF      <1>     test byte [arg1Flg], -1
  1187 00002A21 0F8443F2FFFF        <1>     jz badArgError
  1188 00002A27 E8AE1A0000          <1>     call setDTA     ;Start by resetting the DTA
  1189 00002A2C E892190000          <1>     call buildCommandPath   ;Get the relative path to the file
  1190                              <1> .dirLp:
  1191 00002A31 488D3DAFDAFFFF      <1>     lea rdi, searchSpec
  1192 00002A38 E8C9180000          <1>     call findLastPathComponant
  1193 00002A3D 4889FE              <1>     mov rsi, rdi    ;Save this as the source
  1194 00002A40 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1195 00002A44 B03F                <1>     mov al, "?"
  1196                              <1>     ;Store question marks in the name field
  1197 00002A46 57                  <1>     push rdi
  1198 00002A47 48FFC7              <1>     inc rdi ;Goto the first char
  1199 00002A4A B90B000000          <1>     mov ecx, 11
  1200 00002A4F F3AA                <1>     rep stosb
  1201 00002A51 5F                  <1>     pop rdi
  1202 00002A52 4889F2              <1>     mov rdx, rsi    ;Save the ptr
  1203 00002A55 B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
  1204 00002A5A CD21                <1>     int 21h
  1205 00002A5C 3C01                <1>     cmp al, 1
  1206 00002A5E 0F85A1000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
  1207                              <1>     ;Else, we now copy back the search pattern over the last componant!
  1208                              <1>     ;No dirs to handle in here
  1209 00002A64 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
  1210 00002A68 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
  1211 00002A6B E8BA180000          <1>     call FCBToAsciiz    ;Null terminates for free
  1212                              <1>     ;Count the number of ?'s, if 11, we print the message
  1213 00002A70 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
  1214 00002A74 31C9                <1>     xor ecx, ecx
  1215                              <1> .wcScan:
  1216 00002A76 AC                  <1>     lodsb
  1217 00002A77 3C3F                <1>     cmp al, "?"
  1218 00002A79 7534                <1>     jne .endCount
  1219 00002A7B FFC1                <1>     inc ecx
  1220 00002A7D 81F90B000000        <1>     cmp ecx, 11
  1221 00002A83 75F1                <1>     jne .wcScan
  1222                              <1> .ynmsg:
  1223 00002A85 488D15F7E0FFFF      <1>     lea rdx, ynMes
  1224 00002A8C E885150000          <1>     call printString
  1225 00002A91 B401                <1>     mov ah, 01h ;STDIN without Console Echo
  1226 00002A93 CD21                <1>     int 21h ;Get char in al
  1227 00002A95 E89A170000          <1>     call ucChar ;Uppercase the char
  1228 00002A9A 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
  1229 00002A9C 740C                <1>     je .endCount1
  1230 00002A9E 3C4E                <1>     cmp al, "N"
  1231                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002AA0 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002AA2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1232 00002AA3 E867150000          <1>     call printCRLF      ;Else, tell me what you want!!!
  1233 00002AA8 EBDB                <1>     jmp short .ynmsg    
  1234                              <1> .endCount1:
  1235 00002AAA E860150000          <1>     call printCRLF
  1236                              <1> .endCount:
  1237                              <1>     ;Now we copy our search template pathstring to delPath
  1238 00002AAF 488D3DFEDBFFFF      <1>     lea rdi, delPath
  1239 00002AB6 488D352ADAFFFF      <1>     lea rsi, searchSpec ;Source the chars from here
  1240 00002ABD E85E170000          <1>     call strcpy2         ;Copy the string over to delPath
  1241                              <1> .findFile:
  1242                              <1>     ;Now we find first/find next our way through the files
  1243 00002AC2 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
  1244 00002AC5 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
  1245 00002AC7 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1246 00002ACC CD21                <1>     int 21h
  1247 00002ACE 0F82B1F1FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1248                              <1>     ;Now the file was found, we copy the name over, delete and keep going
  1249 00002AD4 E82D180000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
  1250 00002AD9 488D35ABD6FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1251                              <1> .delNextFile:
  1252                              <1> ;rsi and rdi dont move here
  1253 00002AE0 E83B170000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
  1254 00002AE5 488D15C8DBFFFF      <1>     lea rdx, delPath
  1255 00002AEC B800410000          <1>     mov eax, 4100h  ;Delete File 
  1256 00002AF1 CD21                <1>     int 21h         ;If this fails to delete it, fail silently
  1257 00002AF3 488D15EDD9FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
  1258 00002AFA B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
  1259 00002AFF CD21                <1>     int 21h
  1260 00002B01 73DD                <1>     jnc .delNextFile    
  1261 00002B03 F8                  <1>     clc ;Clear carry to indicate success
  1262                              <1>     return
    13                              <2> %%_ret:
    14 00002B04 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1263                              <1> .noWildcard:
  1264                              <1>     ;Here we just check that the file was not a directory. If it was, we add
  1265                              <1>     ; a \*.*<NUL> over the null terminator
  1266 00002B05 488D15DBD9FFFF      <1>     lea rdx, searchSpec
  1267 00002B0C B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
  1268 00002B11 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1269 00002B16 CD21                <1>     int 21h
  1270 00002B18 0F8267F1FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1271 00002B1E F6055DD6FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
  1272 00002B25 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
  1273                              <1>     ;Else, we are dealing with a dir
  1274 00002B27 4889D7              <1>     mov rdi, rdx
  1275 00002B2A 31C9                <1>     xor ecx, ecx
  1276 00002B2C FFC9                <1>     dec ecx
  1277 00002B2E F2AE                <1>     repne scasb ;Go to the end of the line!
  1278 00002B30 48FFCF              <1>     dec rdi
  1279 00002B33 0FB605EFD4FFFF      <1>     movzx eax, byte [pathSep]
  1280 00002B3A AA                  <1>     stosb
  1281 00002B3B B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
  1282 00002B40 AB                  <1>     stosd
  1283 00002B41 E9EBFEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
  1284                              <1> .delMain:   ;Call with rdx -> buffer!
  1285 00002B46 B800410000          <1>     mov eax, 4100h  ;Delete File 
  1286 00002B4B CD21                <1>     int 21h
  1287                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002B4D 73(04)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1288 00002B4F 3C05                <1>     cmp al, errAccDen
  1289 00002B51 0F84F8F0FFFF        <1>     je badAccError ;If the file is RO, fail!
  1290 00002B57 E917F1FFFF          <1>     jmp badFileError
  1291                              <1>     return
    13                              <2> %%_ret:
    14 00002B5C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1292                              <1> 
  1293                              <1> date:
  1294 00002B5D 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1295 00002B64 E8E6160000          <1>     call skipDelimiters
  1296 00002B69 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1297 00002B6C 7562                <1>     jne .goDate  ;Else rsi is pointing to something possibly a date. Try it!
  1298                              <1>     ;Else, we do interactive mode!
  1299 00002B6E 488D1591DFFFFF      <1>     lea rdx, curDate
  1300 00002B75 B409                <1>     mov ah, 09h
  1301 00002B77 CD21                <1>     int 21h
  1302 00002B79 E8C7150000          <1>     call printFmtDate
  1303                              <1> .noCur:
  1304 00002B7E 488D1592DFFFFF      <1>     lea rdx, newDate
  1305 00002B85 B409                <1>     mov ah, 09h
  1306 00002B87 CD21                <1>     int 21h
  1307 00002B89 488D15A6DFFFFF      <1>     lea rdx, ukDate
  1308 00002B90 488D0592DFFFFF      <1>     lea rax, usDate
  1309 00002B97 488D1DA5DFFFFF      <1>     lea rbx, jpDate
  1310 00002B9E 803D8FD4FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1311 00002BA5 480F47D3            <1>     cmova rdx, rbx
  1312 00002BA9 480F42D0            <1>     cmovb rdx, rax
  1313 00002BAD B409                <1>     mov ah, 09h
  1314 00002BAF CD21                <1>     int 21h
  1315                              <1> 
  1316 00002BB1 488D1582D6FFFF      <1>     lea rdx, cpyBuffer
  1317 00002BB8 C60280              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
  1318 00002BBB B40A                <1>     mov ah, 0Ah
  1319 00002BBD CD21                <1>     int 21h
  1320 00002BBF 52                  <1>     push rdx
  1321 00002BC0 E84A140000          <1>     call printCRLF
  1322 00002BC5 5A                  <1>     pop rdx
  1323 00002BC6 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1324                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002BCA 74(5C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1325                              <1>     ;No spaces anywhere, separator chars allowed are / . - only
  1326 00002BCC 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1327                              <1> .goDate:
  1328 00002BD0 31C0                <1>     xor eax, eax    
  1329 00002BD2 803D5BD4FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1330 00002BD9 727B                <1>     jb .us
  1331 00002BDB 0F87B7000000        <1>     ja .jpn
  1332                              <1>     ;Here for UK style dates
  1333 00002BE1 E8AE180000          <1>     call getByte
  1334 00002BE6 725D                <1>     jc .badDate
  1335 00002BE8 8805C4DAFFFF        <1>     mov byte [td3], al  ;Store the day
  1336 00002BEE E80C010000          <1>     call .validSep
  1337 00002BF3 7550                <1>     jne .badDate
  1338 00002BF5 E89A180000          <1>     call getByte
  1339 00002BFA 7249                <1>     jc .badDate
  1340 00002BFC 8805B1DAFFFF        <1>     mov byte [td4], al  ;Store month
  1341 00002C02 E8F8000000          <1>     call .validSep
  1342 00002C07 753C                <1>     jne .badDate
  1343 00002C09 E892180000          <1>     call getNum
  1344 00002C0E E8CF000000          <1>     call .doYear    ;Adjusts the year if necessary
  1345 00002C13 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1346 00002C18 732B                <1>     jae .badDate
  1347 00002C1A 6689058FDAFFFF      <1>     mov word [td1], ax  ;Store the word directly
  1348                              <1> .writeDate:
  1349 00002C21 E829160000          <1>     call skipDelimiters
  1350 00002C26 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1351 00002C29 751A                <1>     jne .badDate
  1352 00002C2B 0FB70D7EDAFFFF      <1>     movzx ecx, word [td1]   ;Get the year
  1353 00002C32 668B1579DAFFFF      <1>     mov dx, word [td3]      ;Read time and date together!
  1354 00002C39 B8002B0000          <1>     mov eax, 2B00h
  1355 00002C3E CD21                <1>     int 21h
  1356 00002C40 84C0                <1>     test al, al
  1357                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002C42 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002C44 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1358                              <1> .badDate:
  1359 00002C45 488D15ABDEFFFF      <1>     lea rdx, badDate
  1360 00002C4C E8C5130000          <1>     call printString
  1361 00002C51 E928FFFFFF          <1>     jmp date.noCur
  1362                              <1> .us:
  1363 00002C56 E839180000          <1>     call getByte
  1364 00002C5B 72E8                <1>     jc .badDate
  1365 00002C5D 880550DAFFFF        <1>     mov byte [td4], al  ;Store the month
  1366 00002C63 E897000000          <1>     call .validSep
  1367 00002C68 75DB                <1>     jne .badDate
  1368 00002C6A E825180000          <1>     call getByte
  1369 00002C6F 72D4                <1>     jc .badDate
  1370 00002C71 88053BDAFFFF        <1>     mov byte [td3], al  ;Store day
  1371 00002C77 E883000000          <1>     call .validSep
  1372 00002C7C 75C7                <1>     jne .badDate
  1373 00002C7E E81D180000          <1>     call getNum
  1374 00002C83 E85A000000          <1>     call .doYear    ;Adjusts the year if necessary
  1375 00002C88 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1376 00002C8D 73B6                <1>     jae .badDate
  1377 00002C8F 6689051ADAFFFF      <1>     mov word [td1], ax  ;Store the word directly
  1378                              <1> .writeHop:
  1379 00002C96 EB89                <1>     jmp short .writeDate
  1380                              <1> .jpn:
  1381 00002C98 E803180000          <1>     call getNum
  1382 00002C9D E840000000          <1>     call .doYear    ;Adjusts the year if necessary
  1383 00002CA2 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1384 00002CA7 739C                <1>     jae .badDate
  1385 00002CA9 66890500DAFFFF      <1>     mov word [td1], ax  ;Store the word directly
  1386 00002CB0 E84A000000          <1>     call .validSep
  1387 00002CB5 758E                <1>     jne .badDate
  1388 00002CB7 E8D8170000          <1>     call getByte
  1389 00002CBC 7287                <1>     jc .badDate
  1390 00002CBE 8805EED9FFFF        <1>     mov byte [td3], al  ;Store the day
  1391 00002CC4 E836000000          <1>     call .validSep
  1392 00002CC9 0F8576FFFFFF        <1>     jne .badDate
  1393 00002CCF E8C0170000          <1>     call getByte
  1394 00002CD4 0F826BFFFFFF        <1>     jc .badDate
  1395 00002CDA 8805D3D9FFFF        <1>     mov byte [td4], al  ;Store month
  1396 00002CE0 EBB4                <1>     jmp short .writeHop
  1397                              <1> .doYear:
  1398 00002CE2 3D77000000          <1>     cmp eax, 119    ;If this is larger than 119, return assuming valid
  1399                              <1>     reta
    73                              <2> cret a
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002CE7 7601                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002CE9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1400                              <1> ;If the user specifies 80-99 it means 1980-1999
  1401                              <1> ;If the user specifies 00-79 it means 2000-2079
  1402 00002CEA BBD0070000          <1>     mov ebx, 2000
  1403 00002CEF B96C070000          <1>     mov ecx, 1900
  1404 00002CF4 3D50000000          <1>     cmp eax, 80     
  1405 00002CF9 0F42CB              <1>     cmovb ecx, ebx
  1406 00002CFC 01C8                <1>     add eax, ecx
  1407                              <1>     return
    13                              <2> %%_ret:
    14 00002CFE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1408                              <1> .validSep:
  1409 00002CFF AC                  <1>     lodsb           ;Get the char and return
  1410 00002D00 3C2E                <1>     cmp al, "."
  1411                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D02 74(FE)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1412 00002D04 3C2F                <1>     cmp al, "/"
  1413                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D06 74(FE)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1414 00002D08 3C2D                <1>     cmp al, "-"
  1415                              <1>     return
    13                              <2> %%_ret:
    14 00002D0A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1416                              <1> 
  1417                              <1> time:
  1418 00002D0B 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1419 00002D12 E838150000          <1>     call skipDelimiters
  1420 00002D17 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1421 00002D1A 7540                <1>     jne .goTime  ;Else rsi is pointing to something possibly a time. Try it!
  1422 00002D1C 488D153CDEFFFF      <1>     lea rdx, curTime
  1423 00002D23 B409                <1>     mov ah, 09h
  1424 00002D25 CD21                <1>     int 21h
  1425 00002D27 E8B0130000          <1>     call printFmtTime
  1426                              <1> .noCur:
  1427 00002D2C 488D153DDEFFFF      <1>     lea rdx, newTime
  1428 00002D33 B409                <1>     mov ah, 09h
  1429 00002D35 CD21                <1>     int 21h
  1430                              <1> 
  1431 00002D37 488D157AD4FFFF      <1>     lea rdx, inBuffer
  1432 00002D3E C60280              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
  1433 00002D41 B40A                <1>     mov ah, 0Ah
  1434 00002D43 CD21                <1>     int 21h
  1435 00002D45 52                  <1>     push rdx
  1436 00002D46 488D159DDBFFFF      <1>     lea rdx, crlf
  1437 00002D4D B409                <1>     mov ah, 09h
  1438 00002D4F CD21                <1>     int 21h
  1439 00002D51 5A                  <1>     pop rdx
  1440 00002D52 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1441                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D56 74(0A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1442 00002D58 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1443                              <1> .goTime:
  1444 00002D5C C7054AD9FFFF000000- <1>     mov dword [td1], 0          ;Set all fields to 0
  1444 00002D65 00                  <1>
  1445 00002D66 31C0                <1>     xor eax, eax   
  1446 00002D68 E827170000          <1>     call getByte
  1447 00002D6D 0F8294000000        <1>     jc .badTime         ;Get the number in eax
  1448 00002D73 880538D9FFFF        <1>     mov byte [td2], al  ;Save hours
  1449 00002D79 E89A000000          <1>     call .validsep
  1450 00002D7E 0F8583000000        <1>     jne .badTime
  1451 00002D84 E80B170000          <1>     call getByte
  1452 00002D89 727C                <1>     jc .badTime
  1453 00002D8B 88051FD9FFFF        <1>     mov byte [td1], al  ;Save minutes
  1454 00002D91 E882000000          <1>     call .validsep
  1455 00002D96 740F                <1>     je .goSec
  1456 00002D98 48FFCE              <1>     dec rsi ;Go back a char
  1457 00002D9B E8AF140000          <1>     call skipDelimiters ;Skip any delimiters
  1458 00002DA0 803E0D              <1>     cmp byte [rsi], CR
  1459 00002DA3 743E                <1>     je .setTime
  1460 00002DA5 EB60                <1>     jmp short .badTime
  1461                              <1> .goSec:
  1462 00002DA7 E878000000          <1>     call .checkNum
  1463 00002DAC 7259                <1>     jc .badTime
  1464 00002DAE E8E1160000          <1>     call getByte
  1465 00002DB3 7252                <1>     jc .badTime
  1466 00002DB5 8805F8D8FFFF        <1>     mov byte [td4], al  ;Save seconds
  1467 00002DBB AC                  <1>     lodsb       ;Move rsi forwards
  1468 00002DBC 3C2E                <1>     cmp al, "." ;Now we dont allow for colon now, only dot!
  1469 00002DBE 740F                <1>     je .goMsec
  1470 00002DC0 48FFCE              <1>     dec rsi ;Go back a char
  1471 00002DC3 E887140000          <1>     call skipDelimiters ;Skip any delimiters
  1472 00002DC8 803E0D              <1>     cmp byte [rsi], CR
  1473 00002DCB 7416                <1>     je .setTime
  1474 00002DCD EB38                <1>     jmp short .badTime
  1475                              <1> .goMsec:
  1476 00002DCF E850000000          <1>     call .checkNum
  1477 00002DD4 7231                <1>     jc .badTime
  1478 00002DD6 E8B9160000          <1>     call getByte
  1479 00002DDB 722A                <1>     jc .badTime
  1480 00002DDD 8805CFD8FFFF        <1>     mov byte [td3], al  ;Save miliseconds
  1481                              <1> .setTime:
  1482 00002DE3 E867140000          <1>     call skipDelimiters
  1483 00002DE8 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1484 00002DEB 751A                <1>     jne .badTime
  1485 00002DED 0FB70DBCD8FFFF      <1>     movzx ecx, word [td1]   ;Get hour/minutes
  1486 00002DF4 0FB715B7D8FFFF      <1>     movzx edx, word [td3]   ;Get seconds/miliseconds
  1487 00002DFB B8002D0000          <1>     mov eax, 2D00h      ;Set time
  1488 00002E00 CD21                <1>     int 21h
  1489 00002E02 A8FF                <1>     test al, -1
  1490                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002E04 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002E06 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1491                              <1> .badTime:
  1492 00002E07 488D1542DDFFFF      <1>     lea rdx, badTime
  1493 00002E0E E803120000          <1>     call printString
  1494 00002E13 E914FFFFFF          <1>     jmp time.noCur
  1495                              <1> .validsep:
  1496 00002E18 AC                  <1>     lodsb
  1497 00002E19 3A0522D2FFFF        <1>     cmp al, byte [ctryData + countryStruc.timeSep]  ;Usually a colon
  1498                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002E1F 74(06)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1499 00002E21 3C2E                <1>     cmp al, "."
  1500                              <1>     return
    13                              <2> %%_ret:
    14 00002E23 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1501                              <1> .checkNum:
  1502 00002E24 AC                  <1>     lodsb   ;Now ensure the first char past the delim is a number
  1503 00002E25 48FFCE              <1>     dec rsi
  1504 00002E28 3C30                <1>     cmp al, "0"
  1505 00002E2A 7206                <1>     jb .cnbad
  1506 00002E2C 3C39                <1>     cmp al, "9"
  1507 00002E2E 7702                <1>     ja .cnbad
  1508 00002E30 F8                  <1>     clc
  1509                              <1>     return
    13                              <2> %%_ret:
    14 00002E31 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1510                              <1> .cnbad:
  1511 00002E32 F9                  <1>     stc
  1512                              <1>     return
    13                              <2> %%_ret:
    14 00002E33 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1513                              <1> ctty:
  1514 00002E34 F60571D2FFFFFF      <1>     test byte [arg1Flg], -1
  1515 00002E3B 0F8429EEFFFF        <1>     jz badArgError
  1516 00002E41 F60567D2FFFFFF      <1>     test byte [arg2Flg], -1
  1517 00002E48 0F851CEEFFFF        <1>     jnz badArgError
  1518 00002E4E 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1519 00002E55 0FB60551D2FFFF      <1>     movzx eax, byte [arg1Off]
  1520 00002E5C 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
  1521 00002E5F 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1522 00002E63 750F                <1>     jne .noDrive
  1523 00002E65 0FB60542D2FFFF      <1>     movzx eax, byte [arg1FCBret]
  1524 00002E6C 3CFF                <1>     cmp al, -1
  1525 00002E6E 0F84EDEDFFFF        <1>     je badDriveError
  1526                              <1> .noDrive:
  1527                              <1>     ;Now we open the provided file
  1528 00002E74 E862150000          <1>     call copyArgumentToSearchSpec
  1529 00002E79 488D1567D6FFFF      <1>     lea rdx, searchSpec
  1530 00002E80 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
  1531 00002E85 CD21                <1>     int 21h
  1532 00002E87 0F82E6EDFFFF        <1>     jc badFileError
  1533 00002E8D 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
  1534 00002E90 B800440000          <1>     mov eax, 4400h  ;Get device word
  1535 00002E95 CD21                <1>     int 21h
  1536 00002E97 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
  1537 00002E9A 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
  1538                              <1>     ;Now we set this handle to be STDIO
  1539 00002E9C 80CA03              <1>     or dl, 3    ;Set STDIO bits
  1540 00002E9F 30F6                <1>     xor dh, dh
  1541 00002EA1 B801440000          <1>     mov eax, 4401h  ;Now we set the device word
  1542 00002EA6 CD21                <1>     int 21h
  1543                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
  1544 00002EA8 31C9                <1>     xor ecx, ecx    ;STDIN
  1545 00002EAA B446                <1>     mov ah, 46h
  1546 00002EAC CD21                <1>     int 21h
  1547 00002EAE FFC1                <1>     inc ecx         ;STDOUT
  1548 00002EB0 B446                <1>     mov ah, 46h
  1549 00002EB2 CD21                <1>     int 21h
  1550 00002EB4 FFC1                <1>     inc ecx         ;STDERR
  1551 00002EB6 B446                <1>     mov ah, 46h
  1552 00002EB8 CD21                <1>     int 21h
  1553 00002EBA B43E                <1>     mov ah, 3Eh ;Now we close the original handle
  1554 00002EBC CD21                <1>     int 21h
  1555                              <1>     return
    13                              <2> %%_ret:
    14 00002EBE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1556                              <1> .badCharDev:
  1557 00002EBF 488D15BBDDFFFF      <1>     lea rdx, badDev
  1558 00002EC6 B409                <1>     mov ah, 09h
  1559 00002EC8 CD21                <1>     int 21h
  1560 00002ECA B43E                <1>     mov ah, 3Eh ;Close opened handle
  1561 00002ECC CD21                <1>     int 21h
  1562                              <1>     return
    13                              <2> %%_ret:
    14 00002ECE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1563                              <1> 
  1564                              <1> cls:  
  1565 00002ECF B800440000          <1>     mov eax, 4400h  ;Get device info
  1566 00002ED4 BB01000000          <1>     mov ebx, 1      ;for handle 1
  1567 00002ED9 CD21                <1>     int 21h         ;in dx
  1568 00002EDB F7C280000000        <1>     test edx, devCharDev
  1569 00002EE1 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
  1570 00002EE3 F7C210000000        <1>     test edx, charDevFastOut
  1571 00002EE9 743E                <1>     jz .doAnsi
  1572                              <1>     ;Test if Int 29h uses Int 30h
  1573                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
  1574                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
  1575 00002EEB B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
  1576 00002EF0 CD21                <1>     int 21h
  1577                              <1> .biosCheck:
  1578 00002EF2 66813BCD30          <1>     cmp word [rbx], 30CDh
  1579 00002EF7 740C                <1>     je .biosConfirmed
  1580 00002EF9 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
  1581 00002EFE 7429                <1>     je .doAnsi
  1582 00002F00 48FFC3              <1>     inc rbx
  1583 00002F03 EBED                <1>     jmp short .biosCheck
  1584                              <1> .biosConfirmed:
  1585                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
  1586 00002F05 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
  1587 00002F07 31DB                <1>     xor ebx, ebx
  1588 00002F09 CD30                <1>     int 30h
  1589 00002F0B B40F                <1>     mov ah, 0Fh ;Get screen mode
  1590 00002F0D CD30                <1>     int 30h
  1591 00002F0F 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
  1592 00002F12 FECA                <1>     dec dl
  1593 00002F14 B619                <1>     mov dh, 25  ;Number of rows is standard
  1594 00002F16 31C0                <1>     xor eax, eax
  1595 00002F18 89C1                <1>     mov ecx, eax
  1596 00002F1A B707                <1>     mov bh, 7   ;Screen attributes
  1597 00002F1C B406                <1>     mov ah, 6   ;Scroll
  1598 00002F1E CD30                <1>     int 30h
  1599 00002F20 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
  1600 00002F22 B700                <1>     mov bh, 0   ;Page 0
  1601 00002F24 B402                <1>     mov ah, 2
  1602 00002F26 CD30                <1>     int 30h
  1603                              <1>     return
    13                              <2> %%_ret:
    14 00002F28 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1604                              <1> .doAnsi:
  1605                              <1> ;4 chars in the ansi routine
  1606                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
  1607                              <1> ; understand ANSI codes
  1608 00002F29 488D35D8DFFFFF      <1>     lea rsi, ansiCls
  1609 00002F30 B904000000          <1>     mov ecx, 4
  1610 00002F35 B406                <1>     mov ah, 06h ;Raw char output
  1611                              <1> .ansiLp:
  1612 00002F37 AC                  <1>     lodsb   ;Get the char in 
  1613 00002F38 88C2                <1>     mov dl, al
  1614 00002F3A CD21                <1>     int 21h
  1615 00002F3C FFC9                <1>     dec ecx
  1616 00002F3E 75F7                <1>     jnz .ansiLp
  1617                              <1>     return
    13                              <2> %%_ret:
    14 00002F40 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1618                              <1> 
  1619                              <1> break:
  1620 00002F41 F60564D1FFFFFF      <1>     test byte [arg1Flg], -1
  1621 00002F48 752D                <1>     jnz .argumentProvided
  1622                              <1>     ;Here we just get the status of break
  1623 00002F4A B800330000          <1>     mov eax, 3300h  ;Get break status in dl
  1624 00002F4F CD21                <1>     int 21h
  1625 00002F51 88D3                <1>     mov bl, dl
  1626 00002F53 488D15C9DDFFFF      <1>     lea rdx, breakIs
  1627 00002F5A B409                <1>     mov ah, 09h
  1628 00002F5C CD21                <1>     int 21h
  1629 00002F5E 488D15B9DDFFFF      <1>     lea rdx, onMes
  1630 00002F65 488D0DACDDFFFF      <1>     lea rcx, offMes
  1631 00002F6C 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1632 00002F6E 480F44D1            <1>     cmovz rdx, rcx
  1633 00002F72 B409                <1>     mov ah, 09h
  1634 00002F74 CD21                <1>     int 21h
  1635                              <1>     return
    13                              <2> %%_ret:
    14 00002F76 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1636                              <1> .argumentProvided:
  1637 00002F77 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1638 00002F7B AD                  <1>     lodsd   ;Read the word
  1639 00002F7C 89C3                <1>     mov ebx, eax
  1640 00002F7E 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1641 00002F83 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1642 00002F86 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1643 00002F8B 7416                <1>     je .maybeOn
  1644 00002F8D 663D4F46            <1>     cmp ax, "OF"
  1645 00002F91 7523                <1>     jne .badOnOff
  1646 00002F93 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1647 00002F98 6681FB4620          <1>     cmp bx, "F "
  1648 00002F9D 7517                <1>     jne .badOnOff
  1649                              <1>     ;Set off
  1650 00002F9F 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1651 00002FA1 EB0B                <1>     jmp short .setBreak
  1652                              <1> .maybeOn:
  1653 00002FA3 663D4F4E            <1>     cmp ax, "ON"
  1654 00002FA7 750D                <1>     jne .badOnOff
  1655                              <1>     ;Set on
  1656 00002FA9 BA01000000          <1>     mov edx, 1
  1657                              <1> .setBreak:
  1658 00002FAE B801330000          <1>     mov eax, 3301h  ;Set break
  1659 00002FB3 CD21                <1>     int 21h
  1660                              <1>     return
    13                              <2> %%_ret:
    14 00002FB5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1661                              <1> .badOnOff:
  1662 00002FB6 488D155BDFFFFF      <1>     lea rdx, badOnOff
  1663 00002FBD B409                <1>     mov ah, 09h
  1664 00002FBF CD21                <1>     int 21h
  1665                              <1>     return
    13                              <2> %%_ret:
    14 00002FC1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1666                              <1> 
  1667                              <1> verify:
  1668 00002FC2 F605E3D0FFFFFF      <1>     test byte [arg1Flg], -1
  1669 00002FC9 752D                <1>     jnz .argumentProvided
  1670                              <1>     ;Here we just get the status of break
  1671 00002FCB B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1672 00002FD0 CD21                <1>     int 21h
  1673 00002FD2 88C3                <1>     mov bl, al
  1674 00002FD4 488D1552DDFFFF      <1>     lea rdx, verifyIs
  1675 00002FDB B409                <1>     mov ah, 09h
  1676 00002FDD CD21                <1>     int 21h
  1677 00002FDF 488D1538DDFFFF      <1>     lea rdx, onMes
  1678 00002FE6 488D0D2BDDFFFF      <1>     lea rcx, offMes
  1679 00002FED 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1680 00002FEF 480F44D1            <1>     cmovz rdx, rcx
  1681 00002FF3 B409                <1>     mov ah, 09h
  1682 00002FF5 CD21                <1>     int 21h
  1683                              <1>     return
    13                              <2> %%_ret:
    14 00002FF7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1684                              <1> .argumentProvided:
  1685 00002FF8 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1686 00002FFC AD                  <1>     lodsd   ;Read the word
  1687 00002FFD 89C3                <1>     mov ebx, eax
  1688 00002FFF 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1689 00003004 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1690 00003007 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1691 0000300C 7416                <1>     je .maybeOn
  1692 0000300E 663D4F46            <1>     cmp ax, "OF"
  1693 00003012 751F                <1>     jne .badOnOff
  1694 00003014 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1695 00003019 6681FB4620          <1>     cmp bx, "F "
  1696 0000301E 7513                <1>     jne .badOnOff
  1697                              <1>     ;Set off
  1698 00003020 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1699 00003022 EB0A                <1>     jmp short .setVerify
  1700                              <1> .maybeOn:
  1701 00003024 663D4F4E            <1>     cmp ax, "ON"
  1702 00003028 7509                <1>     jne .badOnOff
  1703                              <1>     ;Set on
  1704 0000302A 31C0                <1>     xor eax, eax
  1705 0000302C FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1706                              <1> .setVerify:
  1707 0000302E B42E                <1>     mov ah, 2Eh  ;Set Verify
  1708 00003030 CD21                <1>     int 21h
  1709                              <1>     return
    13                              <2> %%_ret:
    14 00003032 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1710                              <1> .badOnOff:
  1711 00003033 488D15DEDEFFFF      <1>     lea rdx, badOnOff
  1712 0000303A B409                <1>     mov ah, 09h
  1713 0000303C CD21                <1>     int 21h
  1714                              <1>     return
    13                              <2> %%_ret:
    14 0000303E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1715                              <1> 
  1716                              <1> rename:
  1717 0000303F F60566D0FFFFFF      <1>     test byte [arg1Flg], -1
  1718 00003046 0F841EECFFFF        <1>     jz badArgError
  1719 0000304C F6055CD0FFFFFF      <1>     test byte [arg2Flg], -1
  1720 00003053 0F8411ECFFFF        <1>     jz badArgError    
  1721                              <1>     ;Initialise the variables!
  1722 00003059 488D3554D6FFFF      <1>     lea rsi, srcSpec
  1723 00003060 48893551D7FFFF      <1>     mov qword [srcPtr], rsi
  1724 00003067 488D35C8D6FFFF      <1>     lea rsi, destSpec
  1725 0000306E 4889354BD7FFFF      <1>     mov qword [destPtr], rsi
  1726                              <1>     ;Check the second path is just a filename!
  1727 00003075 0FB60534D0FFFF      <1>     movzx eax, byte [arg2Off]
  1728 0000307C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1729 00003083 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1730 00003086 488D3D5AD4FFFF      <1>     lea rdi, searchSpec
  1731 0000308D 57                  <1>     push rdi
  1732 0000308E E8ED120000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1733 00003093 5F                  <1>     pop rdi
  1734 00003094 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1735 00003098 0F84CCEBFFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1736 0000309E 4889FE              <1>     mov rsi, rdi
  1737                              <1> .destScan:
  1738 000030A1 AC                  <1>     lodsb   ;Get the char
  1739 000030A2 3A0581CFFFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1740 000030A8 0F84BCEBFFFF        <1>     je badArgError
  1741 000030AE 84C0                <1>     test al, al
  1742 000030B0 75EF                <1>     jnz .destScan
  1743                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1744 000030B2 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1745 000030B6 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1745 000030BF 3F                  <1>
  1746 000030C0 B903000000          <1>     mov ecx, 3  ;24 bytes
  1747 000030C5 F348AB              <1>     rep stosq
  1748 000030C8 AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1749 000030C9 488D3517D4FFFF      <1>     lea rsi, searchSpec
  1750 000030D0 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1751 000030D4 B80D290000          <1>     mov eax, 290Dh
  1752 000030D9 CD21                <1>     int 21h     
  1753 000030DB 50                  <1>     push rax    ;Save the WC signature
  1754 000030DC E8E2120000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1755 000030E1 488D3DFFD3FFFF      <1>     lea rdi, searchSpec
  1756 000030E8 E819120000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1757 000030ED 4889FE              <1>     mov rsi, rdi
  1758 000030F0 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1759 000030F3 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1760 000030F7 B80D290000          <1>     mov eax, 290Dh
  1761 000030FC CD21                <1>     int 21h
  1762 000030FE 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1763 000030FF 88CC                <1>     mov ah, cl
  1764 00003101 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1765 00003104 0F84EC000000        <1>     jz .noWC
  1766 0000310A 488D35D6D3FFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1767                              <1>     ;Now we check if we have a path to actually handle
  1768 00003111 4839F3              <1>     cmp rbx, rsi
  1769 00003114 7444                <1>     je .noPath
  1770 00003116 C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1771 0000311A 488D35C6D3FFFF      <1>     lea rsi, searchSpec
  1772 00003121 488D3D8CD5FFFF      <1>     lea rdi, srcSpec
  1773 00003128 56                  <1>     push rsi
  1774 00003129 E8E3100000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1775 0000312E 5E                  <1>     pop rsi
  1776 0000312F 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1777 00003132 8A05F1CEFFFF        <1>     mov al, byte [pathSep]
  1778 00003138 AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1779 00003139 48893D78D6FFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1780 00003140 488D3DEFD5FFFF      <1>     lea rdi, destSpec
  1781 00003147 E8C5100000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1782 0000314C 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1783 0000314F AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1784 00003150 48893D69D6FFFF      <1>     mov qword [destPtr], rdi
  1785 00003157 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1786                              <1> .noPath:
  1787                              <1>     ;Now we have where to copy the files to, we can start our work!
  1788 0000315A E87B130000          <1>     call setDTA
  1789 0000315F 488D1581D3FFFF      <1>     lea rdx, searchSpec
  1790 00003166 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1791 00003168 B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1792 0000316D CD21                <1>     int 21h
  1793 0000316F 0F8207EBFFFF        <1>     jc badDupFnf    ;If no file was found!
  1794                              <1> .wcLoop:
  1795                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1796 00003175 488D350FD0FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1797 0000317C 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1798 00003180 B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1799 00003185 CD21                <1>     int 21h 
  1800                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1801 00003187 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1802 0000318B 488D3D36D6FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1803 00003192 57                  <1>     push rdi
  1804 00003193 48A5                <1>     movsq
  1805 00003195 66A5                <1>     movsw
  1806 00003197 A4                  <1>     movsb
  1807 00003198 5F                  <1>     pop rdi
  1808 00003199 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1809 0000319D B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1810                              <1> .wcNameMake:
  1811 000031A2 AC                  <1>     lodsb   ;Get the char from the source string
  1812 000031A3 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1813 000031A6 7502                <1>     jne .noStore    ;Dont store the char there
  1814 000031A8 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1815                              <1> .noStore:
  1816 000031AA 48FFC7              <1>     inc rdi ;Goto next char position
  1817 000031AD FFC9                <1>     dec ecx
  1818 000031AF 75F1                <1>     jnz .wcNameMake
  1819                              <1> ;renName now has the FCB name for the file we wish to make!
  1820                              <1> ;Now make the two paths!
  1821 000031B1 488D35D3CFFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1822 000031B8 488B3DF9D5FFFF      <1>     mov rdi, qword [srcPtr]
  1823 000031BF E84D100000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1824 000031C4 488D35FDD5FFFF      <1>     lea rsi, renName
  1825 000031CB 488B3DEED5FFFF      <1>     mov rdi, qword [destPtr]
  1826 000031D2 E853110000          <1>     call FCBToAsciiz
  1827 000031D7 488D15D6D4FFFF      <1>     lea rdx, srcSpec
  1828 000031DE 488D3D51D5FFFF      <1>     lea rdi, destSpec
  1829 000031E5 B800560000          <1>     mov eax, 5600h
  1830 000031EA CD21                <1>     int 21h     ;Fail silently on wildcard rename
  1831 000031EC B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1832 000031F1 CD21                <1>     int 21h
  1833 000031F3 7380                <1>     jnc .wcLoop     ;And process it too!
  1834                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 000031F5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1835                              <1> .noWC:
  1836 000031F6 E8C8110000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1837 000031FB 0FB605AECEFFFF      <1>     movzx eax, byte [arg2Off]
  1838 00003202 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1839 00003209 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1840 0000320C 488D3D23D5FFFF      <1>     lea rdi, destSpec
  1841 00003213 57                  <1>     push rdi
  1842 00003214 E867110000          <1>     call cpDelimPathToBufz
  1843 00003219 5F                  <1>     pop rdi
  1844 0000321A 488D15C6D2FFFF      <1>     lea rdx, searchSpec
  1845 00003221 B800560000          <1>     mov eax, 5600h
  1846 00003226 CD21                <1>     int 21h
  1847                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003228 73(F5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1848 0000322A E94DEAFFFF          <1>     jmp badDupFnf   ;Always just return this
  1849                              <1> 
  1850                              <1> 
  1851                              <1> touch:
  1852                              <1> ;Temporarily used to create files
  1853 0000322F F60576CEFFFFFF      <1>     test byte [arg1Flg], -1
  1854 00003236 0F842EEAFFFF        <1>     jz badArgError
  1855 0000323C E882110000          <1>     call buildCommandPath
  1856 00003241 488D159FD2FFFF      <1>     lea rdx, searchSpec
  1857 00003248 B8005B0000          <1>     mov eax, 5B00h  ;Create unique file 
  1858 0000324D 31C9                <1>     xor ecx, ecx
  1859 0000324F CD21                <1>     int 21h
  1860 00003251 721D                <1>     jc .touch1
  1861                              <1> .touchClose:
  1862 00003253 0FB7D8              <1>     movzx ebx, ax   ;Save the handle here
  1863 00003256 B80D120000          <1>     mov eax, 120Dh  ;Get date/time words from the DOS
  1864 0000325B CD2F                <1>     int 2fh
  1865 0000325D 89C1                <1>     mov ecx, eax    ;Move the time here
  1866 0000325F 87D1                <1>     xchg edx, ecx   ;Get them in the right place
  1867 00003261 B801570000          <1>     mov eax, 5701h  ;Set the date/time for bx
  1868 00003266 CD21                <1>     int 21h
  1869 00003268 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1870 0000326D CD21                <1>     int 21h
  1871                              <1>     return
    13                              <2> %%_ret:
    14 0000326F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1872                              <1> .touch1:
  1873 00003270 3C50                <1>     cmp al, errFilExist ;Does the file exist?
  1874 00003272 7509                <1>     jne .touchError ;If not, this is a proper error!
  1875 00003274 B8003D0000          <1>     mov eax, 3D00h  ;R/O open instead to update the access time!!
  1876 00003279 CD21                <1>     int 21h
  1877 0000327B 73D6                <1>     jnc .touchClose ;If this worked, close the handle immediately
  1878                              <1> .touchError:
  1879 0000327D 3C03                <1>     cmp al, errPnf
  1880 0000327F 0F84E5E9FFFF        <1>     je badArgError
  1881 00003285 3C02                <1>     cmp al, errFnf
  1882 00003287 0F84F8E9FFFF        <1>     je badFnf
  1883 0000328D E9BDE9FFFF          <1>     jmp badAccError
  1884                              <1>     
  1885                              <1> 
  1886                              <1> join:
  1887                              <1> ;Mock join command, to test join. Make an external command.
  1888                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1889 00003292 F605AF000000FF      <1>     test byte [.joinOn], -1
  1890 00003299 743D                <1>     jz .okJoin
  1891                              <1> .joindisable:
  1892 0000329B B800520000          <1>     mov eax, 5200h  
  1893 000032A0 CD21                <1>     int 21h
  1894                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1895 000032A2 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1896 000032A7 CD2A                <1>     int 2Ah
  1897 000032A9 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1898 000032AD 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1899 000032B1 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1900 000032B7 C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1901 000032BA C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1902 000032BE FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1903 000032C1 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1904 000032C6 CD2A                <1>     int 2Ah
  1905 000032C8 C6057900000000      <1>     mov byte [.joinOn], 0
  1906 000032CF 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1907 000032D6 EB45                <1>     jmp short .joinExit
  1908                              <1> .okJoin:
  1909 000032D8 C60569000000FF      <1>     mov byte [.joinOn], -1
  1910 000032DF B800520000          <1>     mov eax, 5200h  
  1911 000032E4 CD21                <1>     int 21h
  1912 000032E6 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1913 000032EA 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1914                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1915 000032EE B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1916 000032F3 CD2A                <1>     int 2Ah
  1917 000032F5 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1918 000032FB 4889DF              <1>     mov rdi, rbx
  1919 000032FE 488D3544000000      <1>     lea rsi, .joinPath
  1920 00003305 B90C000000          <1>     mov ecx, .joinPathL
  1921 0000330A F3A4                <1>     rep movsb   ;Copy chars over
  1922 0000330C FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1923 0000330F B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1924 00003314 CD2A                <1>     int 2Ah
  1925 00003316 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1926                              <1> .joinExit:
  1927 0000331D B800090000          <1>     mov eax, 0900h
  1928 00003322 CD21                <1>     int 21h
  1929                              <1>     return
    13                              <2> %%_ret:
    14 00003324 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1930 00003325 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1930 0000332E 61626C65640D0A24    <1>
  1931 00003336 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1931 0000333F 7361626C65640D0A24  <1>
  1932 00003348 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1933 00003349 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1933 00003352 535400              <1>
  1934                              <1> .joinPathL  equ $ - .joinPath 
  1935                              <1> 
  1936                              <1> subst:
  1937                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1938                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1939 00003355 F605D3000000FF      <1>     test byte [.substOn], -1
  1940 0000335C 7443                <1>     jz .okSubst
  1941                              <1> .substdisable:
  1942 0000335E B800520000          <1>     mov eax, 5200h  
  1943 00003363 CD21                <1>     int 21h
  1944                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1945 00003365 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1946 0000336A CD2A                <1>     int 2Ah
  1947 0000336C 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1948 00003370 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1949 00003377 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1950 0000337D C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1951 00003380 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1952 00003384 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1953 0000338A B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1954 0000338F CD2A                <1>     int 2Ah
  1955 00003391 C6059700000000      <1>     mov byte [.substOn], 0
  1956 00003398 488D157D000000      <1>     lea rdx, .substDisableMsg
  1957 0000339F EB61                <1>     jmp short .substExit
  1958                              <1> .okSubst:
  1959 000033A1 C60587000000FF      <1>     mov byte [.substOn], -1
  1960 000033A8 B800520000          <1>     mov eax, 5200h  
  1961 000033AD CD21                <1>     int 21h
  1962 000033AF B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1963 000033B4 CD2A                <1>     int 2Ah
  1964 000033B6 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1965 000033BA 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1966 000033C1 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1967 000033C5 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1968 000033CC 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1969 000033D0 C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1970                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1971 000033D7 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1972 000033DD 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1973 000033E3 4889DF              <1>     mov rdi, rbx
  1974 000033E6 488D3543000000      <1>     lea rsi, .substPath
  1975 000033ED B90C000000          <1>     mov ecx, .substPathL
  1976 000033F2 F3A4                <1>     rep movsb   ;Copy chars over
  1977 000033F4 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1978 000033F9 CD2A                <1>     int 2Ah
  1979 000033FB 488D1508000000      <1>     lea rdx, .substEnableMsg
  1980                              <1> .substExit:
  1981 00003402 B800090000          <1>     mov eax, 0900h
  1982 00003407 CD21                <1>     int 21h
  1983                              <1>     return
    13                              <2> %%_ret:
    14 00003409 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1984 0000340A 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1984 00003413 6E61626C65640D0A24  <1>
  1985 0000341C 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1985 00003425 697361626C65640D0A- <1>
  1985 0000342E 24                  <1>
  1986 0000342F 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1987 00003430 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1987 00003439 535400              <1>
  1988                              <1> .substPathL  equ $ - .substPath 
  1989                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1990                              <1> truename:
  1991 0000343C F60569CCFFFFFF      <1>     test byte [arg1Flg], -1
  1992 00003443 0F8421E8FFFF        <1>     jz badArgError
  1993 00003449 E8750F0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1994 0000344E 488D3592D0FFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1995 00003455 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1996 00003458 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1997 0000345D CD21                <1>     int 21h
  1998 0000345F 730D                <1>     jnc .writePath
  1999 00003461 3C02                <1>     cmp al, errFnf
  2000 00003463 0F840AE8FFFF        <1>     je badFileError
  2001 00003469 E9EAE7FFFF          <1>     jmp badParamError
  2002                              <1> .writePath:
  2003 0000346E 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  2004 00003471 B9FFFFFFFF          <1>     mov ecx, -1
  2005 00003476 30C0                <1>     xor al, al
  2006 00003478 F2AE                <1>     repne scasb     ;Get the new len
  2007 0000347A F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  2008 0000347C FFC9                <1>     dec ecx
  2009 0000347E BB01000000          <1>     mov ebx, 01
  2010 00003483 B440                <1>     mov ah, 40h
  2011 00003485 CD21                <1>     int 21h
  2012 00003487 E8830B0000          <1>     call printCRLF
  2013                              <1>     return
    13                              <2> %%_ret:
    14 0000348C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2014                              <1> 
  2015                              <1> label:
  2016                              <1> ;Displays/Changes/Deletes the file label
  2017 0000348D 488D1508000000      <1>     lea rdx, .l1
  2018 00003494 B800090000          <1>     mov eax, 0900h
  2019 00003499 CD21                <1>     int 21h
  2020                              <1>     return
    13                              <2> %%_ret:
    14 0000349B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2021 0000349C 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  2021 000034A5 6E20756E696D706C65- <1>
  2021 000034AE 6D656E7465640D0A24  <1>
  2022                              <1> 
  2023                              <1> mklbl:
  2024                              <1>     ;lea rdx, .l1
  2025                              <1>     ;mov cx, 08h ;Make a label
  2026                              <1>     ;mov eax, 3C00h
  2027                              <1>     ;int 21h
  2028                              <1> 
  2029                              <1>     ;mov ebx, eax
  2030                              <1>     ;mov eax, 3E00h  ;Close the handle
  2031                              <1>     ;int 21h
  2032                              <1>     ;return
  2033                              <1> 
  2034                              <1> ;.l1: db "TESTLABEL",0
  2035 000034B7 488D1508000000      <1>     lea rdx, .l1
  2036 000034BE B800160000          <1>     mov eax, 1600h  ;Create FCB
  2037 000034C3 CD21                <1>     int 21h
  2038                              <1>     return
    13                              <2> %%_ret:
    14 000034C5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2039                              <1> .l1:
  2040                              <1>     istruc exFcb
  2041 000034C6 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  2042 000034C7 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  2043 000034CD 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  2044 000034CE 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  2045 000034D6 4C2020              <1>     at exFcb.fileext,   db "L  "
  2046 000034D9 00000000            <1>     at exFcb.curBlock,  dd 0
  2047 000034DD 00<rep 15h>         <1>     iend 
  2048                              <1> rmlbl:
  2049 000034F2 488D1508000000      <1>     lea rdx, .l1
  2050 000034F9 B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  2051 000034FE CD21                <1>     int 21h
  2052                              <1>     return
    13                              <2> %%_ret:
    14 00003500 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2053                              <1> .l1:    ;FCB to volume label
  2054                              <1>     istruc exFcb
  2055 00003501 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  2056 00003502 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  2057 00003508 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  2058 00003509 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  2059 00003511 3F3F3F              <1>     at exFcb.fileext,   db "???"
  2060 00003514 00000000            <1>     at exFcb.curBlock,  dd 0
  2061 00003518 00<rep 15h>         <1>     iend 
  2062                              <1> 
  2063                              <1> rnlbl:
  2064 0000352D 488D1508000000      <1>     lea rdx, .l1
  2065 00003534 B800170000          <1>     mov eax, 1700h
  2066 00003539 CD21                <1>     int 21h
  2067                              <1>     return
    13                              <2> %%_ret:
    14 0000353B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2068                              <1> .l1:
  2069                              <1>     istruc exRenFcb
  2070 0000353C FF                  <1>     at exRenFcb.extSig,     db -1
  2071 0000353D 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  2072 00003543 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  2073 00003544 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  2074 0000354C 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  2075 0000354F 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  2075 00003558 4C414245            <1>
  2076 0000355C 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  2077 0000355F 00<rep 4h>          <1>     iend
  2078                              <1> volume:
  2079                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  2080 00003563 F60545CBFFFFFF      <1>     test byte [arg2Flg], -1
  2081 0000356A 0F85FAE6FFFF        <1>     jnz badArgError
  2082 00003570 F60535CBFFFFFF      <1>     test byte [arg1Flg], -1
  2083 00003577 7507                <1>     jnz .notCurrentDrive
  2084 00003579 E88E0C0000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  2085 0000357E EB31                <1>     jmp short .dirEP
  2086                              <1> .notCurrentDrive:
  2087 00003580 E83E0E0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  2088 00003585 488D355BCFFFFF      <1>     lea rsi, searchSpec
  2089 0000358C E8BE0C0000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  2090 00003591 66AD                <1>     lodsw                   ;Get this word
  2091 00003593 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  2092 00003596 0F85CEE6FFFF        <1>     jne badArgError
  2093 0000359C 8A050CCBFFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  2094 000035A2 A8FF                <1>     test al, -1
  2095 000035A4 0F85B7E6FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  2096 000035AA 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  2097 000035AF FFC8                <1>     dec eax ;Convert to 0 based number
  2098                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  2099 000035B1 E8240F0000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  2100 000035B6 488D15C7D0FFFF      <1>     lea rdx, volFcb
  2101 000035BD FFC0                <1>     inc eax ;Get 1 based drive number
  2102 000035BF 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  2103 000035C1 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  2104 000035C4 B800110000          <1>     mov eax, 1100h ;Find first FCB
  2105 000035C9 CD21                <1>     int 21h
  2106 000035CB 50                  <1>     push rax
  2107                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  2108 000035CC 488D1517D3FFFF      <1>     lea rdx, crlf
  2109 000035D3 B409                <1>     mov ah, 09h
  2110 000035D5 CD21                <1>     int 21h
  2111 000035D7 488D15CCD5FFFF      <1>     lea rdx, volMes
  2112 000035DE B409                <1>     mov ah, 09h
  2113 000035E0 CD21                <1>     int 21h
  2114 000035E2 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  2115 000035E4 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  2116 000035E7 B402                <1>     mov ah, 02h
  2117 000035E9 CD21                <1>     int 21h
  2118 000035EB 58                  <1>     pop rax
  2119 000035EC 84C0                <1>     test al, al ;If this is zero, the call succeeded
  2120 000035EE 7409                <1>     jz .volIDOk
  2121 000035F0 488D15CAD5FFFF      <1>     lea rdx, volNo
  2122 000035F7 EB19                <1>     jmp short .volEndPrint
  2123                              <1> .volIDOk:
  2124 000035F9 488D15BCD5FFFF      <1>     lea rdx, volOk
  2125 00003600 B409                <1>     mov ah, 09h
  2126 00003602 CD21                <1>     int 21h
  2127 00003604 C60575CBFFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  2128 0000360B 488D1563CBFFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  2129                              <1> .volEndPrint:
  2130 00003612 B409                <1>     mov ah, 09h
  2131 00003614 CD21                <1>     int 21h
  2132 00003616 488D15CDD2FFFF      <1>     lea rdx, crlf
  2133 0000361D B409                <1>     mov ah, 09h
  2134 0000361F CD21                <1>     int 21h
  2135                              <1>     return
    13                              <2> %%_ret:
    14 00003621 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2136                              <1> 
  2137                              <1> version:
  2138 00003622 488D15C1D2FFFF      <1>     lea rdx, crlf
  2139 00003629 B409                <1>     mov ah, 09h
  2140 0000362B CD21                <1>     int 21h
  2141 0000362D 488D1564D5FFFF      <1>     lea rdx, dosVer
  2142 00003634 B409                <1>     mov ah, 09h
  2143 00003636 CD21                <1>     int 21h
  2144 00003638 E80C000000          <1>     call .printVersionNumber
  2145 0000363D 488D15A6D2FFFF      <1>     lea rdx, crlf
  2146 00003644 B409                <1>     mov ah, 09h
  2147 00003646 CD21                <1>     int 21h
  2148                              <1>     return
    13                              <2> %%_ret:
    14 00003648 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2149                              <1> .printVersionNumber:
  2150 00003649 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  2151 0000364B CD21                <1>     int 21h
  2152 0000364D 50                  <1>     push rax
  2153 0000364E 0FB6C0              <1>     movzx eax, al
  2154 00003651 E8A60D0000          <1>     call printDecimalWord
  2155 00003656 B22E                <1>     mov dl, "."
  2156 00003658 B402                <1>     mov ah, 02h
  2157 0000365A CD21                <1>     int 21h
  2158 0000365C 58                  <1>     pop rax
  2159 0000365D 0FB6C4              <1>     movzx eax, ah
  2160 00003660 E8970D0000          <1>     call printDecimalWord
  2161                              <1>     return
    13                              <2> %%_ret:
    14 00003665 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2162                              <1> 
  2163                              <1> 
  2164                              <1> memory:
  2165 00003666 488B1DB2C9FFFF      <1>     mov rbx, qword [sysVars]
  2166 0000366D 4885DB              <1>     test rbx, rbx
  2167 00003670 7510                <1>     jnz .sysvarsOK
  2168 00003672 488D1506D8FFFF      <1>     lea rdx, memBad0
  2169 00003679 B409                <1>     mov ah, 09h
  2170 0000367B CD21                <1>     int 21h
  2171 0000367D E9480E0000          <1>     jmp freezePC.altEP
  2172                              <1> .sysvarsOK:
  2173                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  2174                              <1>     ; and rcx to store Application memory
  2175 00003682 31F6                <1>     xor esi, esi
  2176 00003684 31FF                <1>     xor edi, edi
  2177 00003686 31ED                <1>     xor ebp, ebp
  2178 00003688 31C9                <1>     xor ecx, ecx
  2179 0000368A 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  2180 0000368E 488B1B              <1>     mov rbx, qword [rbx]
  2181                              <1> .memLp:
  2182 00003691 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  2183 00003694 7409                <1>     je .validMCB
  2184 00003696 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2185 00003699 0F8501010000        <1>     jne .badMCBFound
  2186                              <1> .validMCB:
  2187 0000369F 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  2188 000036A2 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  2189 000036A6 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  2190 000036AE 7505                <1>     jne .notDOS
  2191 000036B0 4801C6              <1>     add rsi, rax    ;Add to DOS count
  2192 000036B3 EB21                <1>     jmp short .gotoNext
  2193                              <1> .notDOS:
  2194 000036B5 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  2195 000036BD 7505                <1>     jne .notFree
  2196 000036BF 4801C7              <1>     add rdi, rax    ;Add to Free space count
  2197 000036C2 EB12                <1>     jmp short .gotoNext
  2198                              <1> .notFree:
  2199 000036C4 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  2200 000036CC 7505                <1>     jne .notHole
  2201 000036CE 4801C5              <1>     add rbp, rax    ;Add to Hole count
  2202 000036D1 EB03                <1>     jmp short .gotoNext
  2203                              <1> .notHole:
  2204 000036D3 4801C1              <1>     add rcx, rax    ;Add to Application count
  2205                              <1> .gotoNext:
  2206 000036D6 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2207 000036D9 7407                <1>     je .endOfWalk
  2208 000036DB 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  2209 000036E0 EBAF                <1>     jmp short .memLp
  2210                              <1> .endOfWalk:
  2211                              <1>     
  2212 000036E2 488D15F7D6FFFF      <1>     lea rdx, memDOS
  2213 000036E9 B409                <1>     mov ah, 09h
  2214 000036EB CD21                <1>     int 21h
  2215 000036ED 4889F0              <1>     mov rax, rsi
  2216 000036F0 E89D000000          <1>     call .mcbPrintAmount
  2217 000036F5 488D157CD7FFFF      <1>     lea rdx, memByte
  2218 000036FC B409                <1>     mov ah, 09h
  2219 000036FE CD21                <1>     int 21h
  2220                              <1> 
  2221 00003700 4885ED              <1>     test rbp, rbp
  2222 00003703 741E                <1>     jz .skipHole
  2223 00003705 488D1520D7FFFF      <1>     lea rdx, memHole
  2224 0000370C B409                <1>     mov ah, 09h
  2225 0000370E CD21                <1>     int 21h
  2226 00003710 4889E8              <1>     mov rax, rbp
  2227 00003713 E87A000000          <1>     call .mcbPrintAmount
  2228 00003718 488D1559D7FFFF      <1>     lea rdx, memByte
  2229 0000371F B409                <1>     mov ah, 09h
  2230 00003721 CD21                <1>     int 21h
  2231                              <1> .skipHole:
  2232                              <1> 
  2233 00003723 488D15DCD6FFFF      <1>     lea rdx, memApp
  2234 0000372A B409                <1>     mov ah, 09h
  2235 0000372C CD21                <1>     int 21h
  2236 0000372E 4889C8              <1>     mov rax, rcx
  2237 00003731 E85C000000          <1>     call .mcbPrintAmount
  2238 00003736 488D153BD7FFFF      <1>     lea rdx, memByte
  2239 0000373D B409                <1>     mov ah, 09h
  2240 0000373F CD21                <1>     int 21h
  2241                              <1> 
  2242 00003741 488D150AD7FFFF      <1>     lea rdx, memFree
  2243 00003748 B409                <1>     mov ah, 09h
  2244 0000374A CD21                <1>     int 21h
  2245 0000374C 4889F8              <1>     mov rax, rdi
  2246 0000374F E83E000000          <1>     call .mcbPrintAmount
  2247 00003754 488D151DD7FFFF      <1>     lea rdx, memByte
  2248 0000375B B409                <1>     mov ah, 09h
  2249 0000375D CD21                <1>     int 21h
  2250                              <1> 
  2251 0000375F 488D1554D6FFFF      <1>     lea rdx, memSys
  2252 00003766 B409                <1>     mov ah, 09h
  2253 00003768 CD21                <1>     int 21h
  2254 0000376A 4889F0              <1>     mov rax, rsi
  2255 0000376D 4801F8              <1>     add rax, rdi
  2256 00003770 4801C8              <1>     add rax, rcx
  2257 00003773 4801E8              <1>     add rax, rbp
  2258 00003776 E817000000          <1>     call .mcbPrintAmount
  2259 0000377B 488D15F6D6FFFF      <1>     lea rdx, memByte
  2260 00003782 B409                <1>     mov ah, 09h
  2261 00003784 CD21                <1>     int 21h
  2262                              <1> 
  2263 00003786 488D155DD1FFFF      <1>     lea rdx, crlf
  2264 0000378D B409                <1>     mov ah, 09h
  2265 0000378F CD21                <1>     int 21h
  2266                              <1>     return
    13                              <2> %%_ret:
    14 00003791 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2267                              <1> 
  2268                              <1> .mcbPrintAmount:
  2269 00003792 51                  <1>     push rcx
  2270 00003793 56                  <1>     push rsi
  2271 00003794 57                  <1>     push rdi
  2272 00003795 55                  <1>     push rbp
  2273 00003796 E8610C0000          <1>     call printDecimalWord
  2274 0000379B 5D                  <1>     pop rbp
  2275 0000379C 5F                  <1>     pop rdi
  2276 0000379D 5E                  <1>     pop rsi
  2277 0000379E 59                  <1>     pop rcx
  2278                              <1>     return
    13                              <2> %%_ret:
    14 0000379F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2279                              <1> .badMCBFound:
  2280 000037A0 488D1518D7FFFF      <1>     lea rdx, memBad2
  2281 000037A7 B409                <1>     mov ah, 09h
  2282 000037A9 CD21                <1>     int 21h
  2283 000037AB E91A0D0000          <1>     jmp freezePC.altEP
  2284                              <1> 
  2285                              <1> type:
  2286 000037B0 F605F5C8FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  2287 000037B7 0F84ADE4FFFF        <1>     jz badArgError
  2288 000037BD F605EBC8FFFFFF      <1>     test byte [arg2Flg], -1
  2289 000037C4 0F85A0E4FFFF        <1>     jnz badArgError         ;If this set, error
  2290 000037CA 4C8B053EC8FFFF      <1>     mov r8, [pspPtr]
  2291 000037D1 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2292 000037D8 0FB605CEC8FFFF      <1>     movzx eax, byte [arg1Off]
  2293 000037DF 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  2294 000037E2 803E0D              <1>     cmp byte [rsi], CR
  2295 000037E5 0F847FE4FFFF        <1>     je badArgError
  2296 000037EB 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  2297 000037EF 750F                <1>     jne .noDrive
  2298 000037F1 0FB605B6C8FFFF      <1>     movzx eax, byte [arg1FCBret]
  2299 000037F8 3CFF                <1>     cmp al, -1
  2300 000037FA 0F8461E4FFFF        <1>     je badDriveError
  2301                              <1> .noDrive:
  2302                              <1>     ;Now we open the provided file
  2303 00003800 E8BE0B0000          <1>     call buildCommandPath
  2304 00003805 488D15DBCCFFFF      <1>     lea rdx, searchSpec
  2305 0000380C B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  2306 00003811 CD21                <1>     int 21h
  2307 00003813 0F825AE4FFFF        <1>     jc badFileError
  2308 00003819 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  2309 00003820 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  2310                              <1> .lp:
  2311 00003823 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  2312 00003828 B43F                <1>     mov ah, 3Fh ;Read handle
  2313 0000382A CD21                <1>     int 21h
  2314 0000382C 89C1                <1>     mov ecx, eax
  2315 0000382E 67E317              <1>     jecxz .exit
  2316 00003831 53                  <1>     push rbx    ;Save the original in handle
  2317 00003832 BB01000000          <1>     mov ebx, 1  ;STDOUT
  2318 00003837 B440                <1>     mov ah, 40h
  2319 00003839 CD21                <1>     int 21h
  2320 0000383B 5B                  <1>     pop rbx ;Get back the original read handle
  2321 0000383C 720F                <1>     jc .exitBad
  2322 0000383E 39C8                <1>     cmp eax, ecx
  2323 00003840 74E1                <1>     je .lp
  2324 00003842 FFC9                <1>     dec ecx ;One less for a ^Z
  2325 00003844 39C8                <1>     cmp eax, ecx
  2326 00003846 7505                <1>     jne .exitBad
  2327                              <1> .exit:
  2328 00003848 B43E                <1>     mov ah, 3Eh ;Close handle
  2329 0000384A CD21                <1>     int 21h
  2330                              <1>     return
    13                              <2> %%_ret:
    14 0000384C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2331                              <1> .exitBad:
  2332                              <1>     ;If it is a char device, don't print an error
  2333 0000384D B800440000          <1>     mov eax, 4400h  ;Get IOCTL mode 
  2334 00003852 BB01000000          <1>     mov ebx, 1
  2335 00003857 CD21                <1>     int 21h
  2336 00003859 F6C280              <1>     test dl, devCharDev
  2337                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000385C 75(4C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2338 0000385E E9ACE3FFFF          <1>     jmp badDiskFull
  2339                              <1> 
  2340                              <1> exit:
  2341 00003863 F605C1C7FFFFFF      <1>     test byte [permaSwitch], -1
  2342                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000386A 75(4C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2343 0000386C 488B05A4C7FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  2344 00003873 483DFFFFFFFF        <1>     cmp rax, -1
  2345                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003879 74(4C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2346 0000387B 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  2347                              <1> 
  2348 0000387F 488B15A6C7FFFF      <1>     mov rdx, qword [parentInt22]
  2349 00003886 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  2350 0000388A B822250000          <1>     mov eax, 2522h
  2351 0000388F CD21                <1>     int 21h
  2352                              <1> 
  2353 00003891 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  2354 00003896 CD21                <1>     int 21h
  2355                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00003898 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2356                              <1> 
  2357                              <1> launchChild:
  2358                              <1>     ;We execute an external command here.
  2359                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  2360                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  2361                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  2362                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  2363                              <1>     ;We know the drive we are on is valid so no need to double check that!
  2364 00003899 E83C0C0000          <1>     call setDTA         
  2365                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
  2366 0000389E 488D3D99CAFFFF      <1>     lea rdi, cmdPathSpec
  2367 000038A5 4889FE              <1>     mov rsi, rdi
  2368 000038A8 B811120000          <1>     mov eax, 1211h  ;Normalise this path first
  2369 000038AD CD2F                <1>     int 2fh
  2370 000038AF E8520A0000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  2371 000038B4 4889FE              <1>     mov rsi, rdi    ;Source here
  2372 000038B7 488D3D9FC8FFFF      <1>     lea rdi, cmdFcb
  2373 000038BE B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  2374 000038C3 CD21                <1>     int 21h
  2375 000038C5 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  2376 000038C7 0F85CDE3FFFF        <1>     jnz badCmdError
  2377 000038CD 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  2378                              <1> .pathLoop:
  2379 000038D0 488D358FC8FFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  2380 000038D7 488D3D5BD6FFFF      <1>     lea rdi, extStr
  2381 000038DE BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  2382                              <1> .extLp:
  2383 000038E3 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  2384 000038E4 B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  2385 000038E9 F3A6                <1>     rep cmpsb   ;Compare the two strings
  2386 000038EB 5E                  <1>     pop rsi
  2387 000038EC 85C9                <1>     test ecx, ecx
  2388 000038EE 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  2389 000038F0 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  2390 000038F3 FFCA                <1>     dec edx         ;Else one less extension type to check
  2391 000038F5 75EC                <1>     jnz .extLp
  2392                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  2393                              <1>     ;If not, error.
  2394 000038F7 B903000000          <1>     mov ecx, 3
  2395 000038FC 4889F7              <1>     mov rdi, rsi
  2396 000038FF B020                <1>     mov al, SPC
  2397 00003901 F3AE                <1>     rep scasb   
  2398 00003903 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  2399 00003905 0F858FE3FFFF        <1>     jnz badCmdError    ;If not, error!
  2400                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  2401 0000390B 488D3527D6FFFF      <1>     lea rsi, extStr
  2402 00003912 BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  2403                              <1> .extSrchLp:
  2404 00003917 488D3D48C8FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2405 0000391E B903000000          <1>     mov ecx, 3
  2406 00003923 F3A4                <1>     rep movsb   ;Copy the extension over!
  2407 00003925 E846010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  2408 0000392A 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  2409 0000392C FFCB                <1>     dec ebx                 ;Decrement extension counter
  2410 0000392E 75E7                <1>     jnz .extSrchLp
  2411                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  2412                              <1> ; we start prepending path componants and trying again. To do this, we reset
  2413                              <1> ; by setting the fcb extension back to all spaces.
  2414 00003930 488D3D2FC8FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2415 00003937 B903000000          <1>     mov ecx, 3
  2416 0000393C B020                <1>     mov al, SPC
  2417 0000393E F3AA                <1>     rep stosb   ;Store back the empty extension!
  2418 00003940 EB70                <1>     jmp short .pathHandle
  2419                              <1> .extFnd:
  2420                              <1> ;Here if the file had the right extension.
  2421 00003942 E829010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  2422 00003947 7269                <1>     jc .pathHandle
  2423                              <1> .extSrchFnd:
  2424                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  2425                              <1> ; a BAT. If it is, separate handling!
  2426 00003949 803D16C8FFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  2427 00003950 0F8460E1FFFF        <1>     je batLaunch
  2428 00003956 488D1D3BC8FFFF      <1>     lea rbx, launchBlock
  2429 0000395D 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  2430 00003961 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  2431 00003964 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  2432 0000396B 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  2433 0000396F 498D405C            <1>     lea rax, qword [r8 + fcb1]
  2434 00003973 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  2435 00003977 498D406C            <1>     lea rax, qword [r8 + fcb2]
  2436 0000397B 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  2437 0000397F 488D15B8C9FFFF      <1>     lea rdx, cmdPathSpec
  2438 00003986 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  2439 0000398B CD21                <1>     int 21h
  2440                              <1> ;If the program failed to start, verify why!
  2441 0000398D B800590000          <1>     mov eax, 5900h      ;Get extended error
  2442 00003992 31DB                <1>     xor ebx, ebx
  2443 00003994 CD21                <1>     int 21h
  2444 00003996 66890570C6FFFF      <1>     mov word [returnCode], ax   ;Error code from EXEC
  2445 0000399D 3C05                <1>     cmp al, errAccDen   ;Access denied?
  2446 0000399F 0F84AAE2FFFF        <1>     je badAccError
  2447 000039A5 3C07                <1>     cmp al, errMCBbad   ;If MCB bad error, freeze PC
  2448 000039A7 0F84120B0000        <1>     je freezePC
  2449 000039AD E9E8E2FFFF          <1>     jmp badCmdError     ;If something goes wrong, error out
  2450                              <1> .pathHandle:        
  2451                              <1> ;First check if rbp is null. If it is, its a first time entry. 
  2452                              <1> ;al has error code!
  2453 000039B2 4885ED              <1>     test rbp, rbp
  2454 000039B5 0F85A3000000        <1>     jnz .pathReentry
  2455                              <1> ;Now check if the command we recieved included an absolute path.
  2456                              <1> ;If so, we don't do path substitution and just fail at this point
  2457 000039BB 488D357CC9FFFF      <1>     lea rsi, cmdPathSpec
  2458 000039C2 66AD                <1>     lodsw   ;Get the first two chars
  2459 000039C4 3A055FC6FFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  2460 000039CA 0F84CAE2FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2461 000039D0 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  2462 000039D2 7412                <1>     je .pathGetEnv
  2463 000039D4 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  2464 000039D7 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  2465 000039D9 AC                  <1>     lodsb   ;Get the third char
  2466 000039DA 3A0549C6FFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  2467 000039E0 0F84B4E2FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2468                              <1> .pathGetEnv:
  2469                              <1> ;Now get a pointer to the environment and search for PATH=
  2470                              <1> ;We only take the final portion of the path and add it to each path componant
  2471                              <1> ;This agrees with DOS 3.3
  2472 000039E6 E85C0B0000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  2473 000039EB 0F84A9E2FFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  2474                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  2475                              <1>     ;Now we know we dont have to keep track of chars!!
  2476 000039F1 488D3DB7D6FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  2477 000039F8 E8A40B0000          <1>     call searchForEnvVar
  2478 000039FD 0F8297E2FFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
  2479 00003A03 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
  2480 00003A06 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
  2481                              <1> .pathRejoin:
  2482 00003A0D 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  2483 00003A10 0F8484E2FFFF        <1>     je badCmdError      ;Empty or no more path? Error!
  2484 00003A16 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
  2485 00003A19 488D3DC7CAFFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  2486                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
  2487                              <1>     ;SHOULD CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
  2488                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
  2489                              <1>     ;This is impossible to do if env edited by COMMAND.COM
  2490 00003A20 E845090000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
  2491 00003A25 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  2492 00003A28 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  2493 00003A2B 48FFCF              <1>     dec rdi ;Point to the null terminator
  2494 00003A2E 8A05F5C5FFFF        <1>     mov al, byte [pathSep]
  2495 00003A34 3847FF              <1>     cmp byte [rdi - 1], al
  2496 00003A37 7401                <1>     je .skipPathsep ;Need for rootdir as a double slash start is a netpath
  2497 00003A39 AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  2498                              <1> .skipPathsep: ;Affects double slashes in path (but thats ok)
  2499 00003A3A 488D351DC7FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2500 00003A41 E8E4080000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  2501 00003A46 488D359ACAFFFF      <1>     lea rsi, searchSpec 
  2502 00003A4D 488D3DEAC8FFFF      <1>     lea rdi, cmdPathSpec
  2503 00003A54 E8B8070000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  2504 00003A59 E972FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  2505                              <1> .pathReentry:
  2506 00003A5E 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  2507 00003A62 0F8432E2FFFF        <1>     je badCmdError
  2508                              <1> ;Currently, because we dont swap drives, we wont print this message.
  2509                              <1> ;Not really a big deal...
  2510                              <1>     ;cmp al, errBadDrv
  2511                              <1>     ;jne .pathDrvOk
  2512                              <1>     ;lea rdx, badDrvSrch ;Print the drive was invalid!
  2513                              <1>     ;mov eax, 0900h
  2514                              <1>     ;int 21h
  2515                              <1> ;.pathDrvOk:
  2516 00003A68 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  2517 00003A6B 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  2518 00003A6E EB9D                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  2519                              <1> 
  2520                              <1> .prepAndSearch:
  2521                              <1> ;Copies over the name and extension in UC to the last componant of the 
  2522                              <1> ;cmdPathSpec and null terminates. 
  2523                              <1> ;Input: cmdFcb name + ext setup. 
  2524                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  2525                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
  2526 00003A70 51                  <1>     push rcx
  2527 00003A71 56                  <1>     push rsi
  2528 00003A72 57                  <1>     push rdi
  2529 00003A73 488D3DC4C8FFFF      <1>     lea rdi, cmdPathSpec 
  2530 00003A7A 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  2531 00003A7D E884080000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  2532 00003A82 488D35D5C6FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2533 00003A89 E89C080000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  2534 00003A8E B8004E0000          <1>     mov eax, 4E00h  ;Find first
  2535 00003A93 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  2536 00003A95 CD21                <1>     int 21h
  2537 00003A97 5F                  <1>     pop rdi
  2538 00003A98 5E                  <1>     pop rsi
  2539 00003A99 59                  <1>     pop rcx
  2540                              <1>     return
    13                              <2> %%_ret:
    14 00003A9A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2541                              <1> 
  2542                              <1> set:
  2543 00003A9B F6050AC6FFFFFF      <1>     test byte [arg1Flg], -1
  2544 00003AA2 7539                <1>     jnz .editEnv
  2545                              <1>     ;Here we just print the environment.
  2546 00003AA4 E89E0A0000          <1>     call checkEnvGoodAndGet 
  2547 00003AA9 0F8497E1FFFF        <1>     jz badEnvSpaceError
  2548                              <1>     ;We know this is a good env so keep going! env ptr in rsi
  2549 00003AAF 4889F7              <1>     mov rdi, rsi
  2550 00003AB2 4889F2              <1>     mov rdx, rsi
  2551                              <1> .findLp:
  2552 00003AB5 B9FFFFFFFF          <1>     mov ecx, -1
  2553 00003ABA 31C0                <1>     xor eax, eax
  2554                              <1> .scanLp:
  2555 00003ABC F2AE                <1>     repne scasb
  2556 00003ABE 75FC                <1>     jne .scanLp
  2557 00003AC0 F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
  2558                              <1>     ;Else, we now print this environment variable and CRLF it
  2559                              <1>     ;rdx points to the start of the string aleady
  2560                              <1>     ;ecx has the bytes to print
  2561 00003AC2 BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
  2562 00003AC7 B800400000          <1>     mov eax, 4000h  ;Print to handle
  2563 00003ACC CD21                <1>     int 21h
  2564 00003ACE E83C050000          <1>     call printCRLF
  2565 00003AD3 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
  2566                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003AD6 74(9A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2567 00003AD8 4889FA              <1>     mov rdx, rdi   
  2568 00003ADB EBD8                <1>     jmp short .findLp
  2569                              <1> .editEnv:
  2570 00003ADD E8650A0000          <1>     call checkEnvGoodAndGet
  2571 00003AE2 0F845EE1FFFF        <1>     jz badEnvSpaceError
  2572 00003AE8 0FB605BEC5FFFF      <1>     movzx eax, byte [arg1Off]
  2573 00003AEF 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2574 00003AF6 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
  2575                              <1> .altEp:
  2576 00003AF9 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
  2577 00003AFC B00D                <1>     mov al, CR              ;Search for the CR
  2578 00003AFE 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
  2579 00003B06 89CB                <1>     mov ebx, ecx            ;Save this count 
  2580 00003B08 53                  <1>     push rbx                ;Save this count on the stack too!
  2581 00003B09 F2AE                <1>     repne scasb             ;Now get the length of this env string
  2582 00003B0B 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
  2583 00003B0D 66891DD5CCFFFF      <1>     mov word [envVarSz], bx ;Store the count
  2584 00003B14 59                  <1>     pop rcx                 ;Get the char count back!
  2585 00003B15 89CB                <1>     mov ebx, ecx            
  2586 00003B17 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
  2587 00003B1A B03D                <1>     mov al, "="             ;Scan for an equals sign
  2588 00003B1C F2AE                <1>     repne scasb
  2589 00003B1E 0F8519E1FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
  2590 00003B24 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
  2591 00003B26 66891DBECCFFFF      <1>     mov word [envVarNamSz], bx
  2592 00003B2D 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
  2593 00003B30 7477                <1>     je .delEnvVar           ;Free the envvar and return
  2594 00003B32 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
  2595 00003B33 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2596 00003B36 E8660A0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2597 00003B3B 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
  2598 00003B3D E88D0A0000          <1>     call envFree            ;Free the var in rsi
  2599                              <1> .editNewEnv:
  2600 00003B42 E8C10A0000          <1>     call getFreeSpace       ;Get the free space in env in ecx
  2601 00003B47 E8E10A0000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
  2602 00003B4C 5E                  <1>     pop rsi                 ;Get back the ptr to the string
  2603 00003B4D 31C0                <1>     xor eax, eax            ;Prepare null length!
  2604 00003B4F 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
  2605 00003B55 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
  2606 00003B58 720B                <1>     jb .reallocTry          ;Try to reallocate!
  2607 00003B5A FFC9                <1>     dec ecx                 ;Save a byte for end magic null
  2608 00003B5C 663B0D86CCFFFF      <1>     cmp cx, word [envVarSz] ;Do we have enough space?
  2609 00003B63 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
  2610                              <1> .reallocTry:
  2611                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
  2612                              <1>     ; we proceed with the environment size.
  2613 00003B65 E8D80A0000          <1>     call growEnvBlock   ;Attempt to grow the environment
  2614 00003B6A 7319                <1>     jnc .reallocOk
  2615 00003B6C 0F84D4E0FFFF        <1>     jz badEnvSpaceError    ;Max environment space
  2616                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
  2617                              <1>     ; partially the variable into the env. If so we do that. If the name
  2618                              <1>     ; cannot fit, we don't bother
  2619                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
  2620 00003B72 663B0D72CCFFFF      <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
  2621                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00003B79 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00003B7B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2622 00003B7C E8C5E0FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
  2623 00003B81 FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
  2624 00003B83 EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
  2625                              <1> .reallocOk:
  2626                              <1>     ;Here we have all the space to just copy the full path
  2627 00003B85 0FB70D5DCCFFFF      <1>     movzx ecx, word [envVarSz]
  2628                              <1> .nameCp:
  2629                              <1> ;Now copy over the env var, ecx = #ofchars to copy
  2630                              <1> ;Always enough memory for name= here
  2631 00003B8C AC                  <1>     lodsb
  2632 00003B8D E8A2060000          <1>     call ucChar
  2633 00003B92 AA                  <1>     stosb
  2634 00003B93 66FFC9              <1>     dec cx      ;Always decrement this count
  2635 00003B96 3C3D                <1>     cmp al, "="
  2636 00003B98 75F2                <1>     jne .nameCp
  2637                              <1> .exitNameCp:
  2638 00003B9A AC                  <1>     lodsb
  2639 00003B9B 3C0D                <1>     cmp al, CR
  2640 00003B9D 7405                <1>     je .exitCp
  2641 00003B9F AA                  <1>     stosb
  2642 00003BA0 FFC9                <1>     dec ecx
  2643 00003BA2 75F6                <1>     jnz .exitNameCp
  2644                              <1> .exitCp:
  2645 00003BA4 31C0                <1>     xor eax, eax
  2646 00003BA6 66AB                <1>     stosw   ;Store the final null word
  2647                              <1>     return
    13                              <2> %%_ret:
    14 00003BA8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2648                              <1> .delEnvVar:
  2649                              <1>     ;rsi -> Start of the envvar name in user buffer
  2650 00003BA9 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2651 00003BAC E8F0090000          <1>     call searchForEnvVar    ;Look for the environment variable
  2652 00003BB1 7205                <1>     jc .delEnvVarSkip
  2653 00003BB3 E8170A0000          <1>     call envFree    ;Free the env var at rsi
  2654                              <1> .delEnvVarSkip:
  2655 00003BB8 F8                  <1>     clc             ;Clear CF if the var doesnt exist
  2656                              <1>     return
    13                              <2> %%_ret:
    14 00003BB9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2657                              <1> 
  2658                              <1> pathEdit:
  2659                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
  2660                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
  2661                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
  2662                              <1> ; end there. Error with too many arguments error!
  2663                              <1> ;If after the equals sign there is nothing, we just print the path!
  2664                              <1> ;Gotta process the command line ourselves first
  2665 00003BBA E888090000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2666 00003BBF 0F8481E0FFFF        <1>     jz badEnvSpaceError
  2667                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2668 00003BC5 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2669 00003BCC E8AD000000          <1>     call .skipPathDelimiters
  2670 00003BD1 3C0D                <1>     cmp al, CR
  2671 00003BD3 7466                <1>     je .printPath
  2672                              <1> ;Else use the set command to setup the path in the searchSpec.
  2673 00003BD5 56                  <1>     push rsi    ;Save the first char of the command line string
  2674 00003BD6 488D35D2D4FFFF      <1>     lea rsi, pathEVar
  2675 00003BDD 488D3D03C9FFFF      <1>     lea rdi, searchSpec
  2676 00003BE4 E828060000          <1>     call strcpy
  2677 00003BE9 48FFCF              <1>     dec rdi     ;Point to the terminating null
  2678 00003BEC 5E                  <1>     pop rsi     ;Get back the first char of the pathstring
  2679 00003BED 31C9                <1>     xor ecx, ecx    ;Make a count of chars
  2680                              <1> .cpLp:
  2681 00003BEF AC                  <1>     lodsb
  2682 00003BF0 3C0D                <1>     cmp al, CR
  2683 00003BF2 7411                <1>     je .cpLpExit
  2684 00003BF4 E891000000          <1>     call .isALPathDelimiter ;Any path delims now are exit conditions!
  2685 00003BF9 740A                <1>     je .cpLpExit
  2686 00003BFB E834060000          <1>     call ucChar ;Uppercase the char
  2687 00003C00 AA                  <1>     stosb       ;Store it
  2688 00003C01 FFC1                <1>     inc ecx     ;Inc the count, CR not inclusive!
  2689 00003C03 EBEA                <1>     jmp short .cpLp
  2690                              <1> .cpLpExit:
  2691                              <1>     ;Remove trailing semicolons
  2692 00003C05 807FFF3B            <1>     cmp byte [rdi - 1], ";" ;Check back a char
  2693 00003C09 7507                <1>     jne .cpLpNoIntervene
  2694 00003C0B FFC9                <1>     dec ecx     ;Reduce the count by one
  2695 00003C0D 48FFCF              <1>     dec rdi     ;Go back a char
  2696 00003C10 EBF3                <1>     jmp short .cpLpExit ;Keep removing
  2697                              <1> .cpLpNoIntervene:
  2698 00003C12 B00D                <1>     mov al, CR  ;Now we store the terminator!
  2699 00003C14 AA                  <1>     stosb       ;Store it!
  2700 00003C15 81C105000000        <1>     add ecx, 5  ;PATH= is 5 chars
  2701 00003C1B 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count
  2702 00003C22 FFC1                <1>     inc ecx     ;Add the CR for copying over
  2703 00003C24 488D35BCC8FFFF      <1>     lea rsi, searchSpec
  2704 00003C2B 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2705 00003C32 57                  <1>     push rdi
  2706 00003C33 F3A4                <1>     rep movsb
  2707 00003C35 5E                  <1>     pop rsi         ;Get the ptr to the cmdline in rsi
  2708 00003C36 E9BEFEFFFF          <1>     jmp set.altEp   ;We've now set the string up, lets go!
  2709                              <1> .printPath:
  2710 00003C3B 488D3D6DD4FFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
  2711 00003C42 E85A090000          <1>     call searchForEnvVar    ;Returns ptr to env var in rsi
  2712 00003C47 7221                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
  2713 00003C49 4889F7              <1>     mov rdi, rsi        
  2714 00003C4C E8D9050000          <1>     call strlen         ;Get the length of the path in rdi
  2715 00003C51 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
  2716 00003C57 7411                <1>     je .noPathPrnt      ;Print no path!
  2717 00003C59 FFC9                <1>     dec ecx             ;Drop the terminating null from the count
  2718 00003C5B 4889FA              <1>     mov rdx, rdi        ;Set path ptr for printing
  2719 00003C5E BB01000000          <1>     mov ebx, 1          ;STDOUT
  2720 00003C63 B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
  2721 00003C68 EB0C                <1>     jmp short .pathExit
  2722                              <1> .noPathPrnt:
  2723 00003C6A 488D15D6CFFFFF      <1>     lea rdx, noPath
  2724 00003C71 B800090000          <1>     mov eax, 0900h
  2725                              <1> .pathExit:
  2726 00003C76 CD21                <1>     int 21h
  2727 00003C78 E892030000          <1>     call printCRLF      ;Print a crlf at the end
  2728                              <1>     return
    13                              <2> %%_ret:
    14 00003C7D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2729                              <1> .skipPathDelimiters:
  2730                              <1> ;Input: rsi -> Start of string to parse
  2731                              <1> ;Output: rsi -> First non-delimiter char of string
  2732                              <1> ;        al = First non delim char
  2733 00003C7E AC                  <1>     lodsb
  2734 00003C7F E806000000          <1>     call .isALPathDelimiter
  2735 00003C84 74F8                <1>     je .skipPathDelimiters
  2736 00003C86 48FFCE              <1>     dec rsi
  2737                              <1>     return
    13                              <2> %%_ret:
    14 00003C89 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2738                              <1> .isALPathDelimiter:
  2739                              <1> ;Same as before without semicolon
  2740 00003C8A 3C20                <1>     cmp al, SPC
  2741                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003C8C 74(89)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2742 00003C8E 3C09                <1>     cmp al, TAB
  2743                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003C90 74(89)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2744 00003C92 3C2C                <1>     cmp al, ","
  2745                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003C94 74(89)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2746 00003C96 3C3D                <1>     cmp al, "="
  2747                              <1>     return
    13                              <2> %%_ret:
    14 00003C98 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2748                              <1> 
  2749                              <1> prompt:
  2750 00003C99 E8A9080000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2751 00003C9E 0F84A2DFFFFF        <1>     jz badEnvSpaceError
  2752                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2753 00003CA4 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2754 00003CAB E89F050000          <1>     call skipDelimiters ;Points rsi to the first non-delimiter char
  2755 00003CB0 803E0D              <1>     cmp byte [rsi], CR  ;Is the first non-delim a CR?
  2756 00003CB3 742C                <1>     je .reset   ;Reset if so
  2757 00003CB5 56                  <1>     push rsi    ;Save ptr to the start of the user typed line
  2758 00003CB6 488D3574D2FFFF      <1>     lea rsi, promptEVar ;Copy the PROMPT= prefix to searchspec
  2759 00003CBD 488D3D23C8FFFF      <1>     lea rdi, searchSpec
  2760 00003CC4 B907000000          <1>     mov ecx, 7  ;Copy without <CR>
  2761 00003CC9 F3A4                <1>     rep movsb
  2762 00003CCB 5E                  <1>     pop rsi ;Get back ptr to the user typed line
  2763 00003CCC 31C9                <1>     xor ecx, ecx    ;Get char count
  2764                              <1> .cp:    ;Now copy the user string over
  2765 00003CCE AC                  <1>     lodsb
  2766 00003CCF AA                  <1>     stosb 
  2767 00003CD0 3C0D                <1>     cmp al, CR
  2768 00003CD2 7404                <1>     je .cpOk
  2769 00003CD4 FFC1                <1>     inc ecx ;Increment count if non CR char copied over
  2770 00003CD6 EBF6                <1>     jmp short .cp
  2771                              <1> .cpOk:
  2772 00003CD8 488D3508C8FFFF      <1>     lea rsi, searchSpec ;Source the string from here
  2773 00003CDF EB09                <1>     jmp short .goSet    ;Got the CR-less count
  2774                              <1> .reset:
  2775                              <1> ;Delete the environment variable!
  2776 00003CE1 488D3549D2FFFF      <1>     lea rsi, promptEVar 
  2777 00003CE8 31C9                <1>     xor ecx, ecx    ;No chars to write to the envstring
  2778                              <1> .goSet:
  2779 00003CEA 81C107000000        <1>     add ecx, 7  ;Add the chars for the prompt= string too
  2780 00003CF0 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl 
  2781 00003CF7 FFC1                <1>     inc ecx     ;Include CR in copy
  2782 00003CF9 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2783 00003D00 57                  <1>     push rdi
  2784 00003D01 F3A4                <1>     rep movsb
  2785 00003D03 5E                  <1>     pop rsi
  2786 00003D04 E9F0FDFFFF          <1>     jmp set.altEp
  2787                              <1> 
  2788                              <1> echo:
  2789 00003D09 F6059CC3FFFFFF      <1>     test byte [arg1Flg], -1 ;If no argument, display if on or off
  2790 00003D10 752A                <1>     jnz .argGiven
  2791 00003D12 488D151FD0FFFF      <1>     lea rdx, echoIs
  2792 00003D19 E8F8020000          <1>     call printString
  2793 00003D1E 488D15F9CFFFFF      <1>     lea rdx, onMes
  2794 00003D25 488D0DECCFFFFF      <1>     lea rcx, offMes
  2795 00003D2C F6056BC3FFFFFF      <1>     test byte [echoFlg], -1
  2796 00003D33 480F44D1            <1>     cmovz rdx, rcx
  2797 00003D37 E9DA020000          <1>     jmp printString
  2798                              <1> .argGiven:
  2799 00003D3C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2800 00003D43 0FB60563C3FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the offset
  2801 00003D4A 4801C6              <1>     add rsi, rax
  2802 00003D4D AC                  <1>     lodsb   ;Get this char
  2803 00003D4E 48FFCE              <1>     dec rsi ;And go back to the start of the string
  2804 00003D51 E8DE040000          <1>     call ucChar
  2805 00003D56 3C4F                <1>     cmp al, "O" ;Was it an O? If not, direct copy
  2806 00003D58 755A                <1>     jne .directEcho
  2807 00003D5A 8A4601              <1>     mov al, byte [rsi + 1]  ;Get the next char
  2808 00003D5D E8D2040000          <1>     call ucChar
  2809 00003D62 3C4E                <1>     cmp al, "N" ;If its N, check its the last char on the string
  2810 00003D64 751B                <1>     jne .checkOff
  2811 00003D66 56                  <1>     push rsi
  2812 00003D67 4881C602000000      <1>     add rsi, 2  ;Go past on string
  2813 00003D6E E8DC040000          <1>     call skipDelimiters
  2814 00003D73 803E0D              <1>     cmp byte [rsi], CR
  2815 00003D76 5E                  <1>     pop rsi
  2816 00003D77 753B                <1>     jne .directEcho ;If its not, just echo the string
  2817 00003D79 C6051EC3FFFF01      <1>     mov byte [echoFlg], 1   ;Set to 1 if on
  2818                              <1>     return
    13                              <2> %%_ret:
    14 00003D80 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2819                              <1> .checkOff:
  2820 00003D81 8A4601              <1>     mov al, byte [rsi + 1]  ;Get first char past O
  2821 00003D84 E8AB040000          <1>     call ucChar
  2822 00003D89 3C46                <1>     cmp al, "F" ;Is it an F?
  2823 00003D8B 7527                <1>     jne .directEcho ;No, just direct echo
  2824 00003D8D 8A4602              <1>     mov al, byte [rsi + 2]
  2825 00003D90 E89F040000          <1>     call ucChar
  2826 00003D95 3C46                <1>     cmp al, "F"
  2827 00003D97 751B                <1>     jne .directEcho
  2828 00003D99 56                  <1>     push rsi
  2829 00003D9A 4881C603000000      <1>     add rsi, 3
  2830 00003DA1 E8A9040000          <1>     call skipDelimiters
  2831 00003DA6 803E0D              <1>     cmp byte [rsi], CR
  2832 00003DA9 5E                  <1>     pop rsi
  2833 00003DAA 7508                <1>     jne .directEcho
  2834 00003DAC C605EBC2FFFF00      <1>     mov byte [echoFlg], 0
  2835                              <1>     return
    13                              <2> %%_ret:
    14 00003DB3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2836                              <1> .directEcho: 
  2837 00003DB4 AC                  <1>     lodsb
  2838 00003DB5 3C0D                <1>     cmp al, CR
  2839 00003DB7 0F8452020000        <1>     je printCRLF    ;Prints a crlf and returns
  2840 00003DBD 88C2                <1>     mov dl, al
  2841 00003DBF E8C2020000          <1>     call outChar
  2842 00003DC4 EBEE                <1>     jmp short .directEcho
    19                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printDate:
     4                              <1> ;Input: eax = Packed Date
     5                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
     6                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
     7                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
     8                              <1> ;       ebx = 0 => Print two digit year
     9                              <1> ;       ebx = 1 => Print four digit year
    10 00003DC6 53                  <1>     push rbx
    11 00003DC7 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    12 00003DC9 803D64C2FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    13 00003DD0 7240                <1>     jb .usDate
    14 00003DD2 777C                <1>     ja .jpnDate
    15                              <1> ;European: DD/MM/YY
    16 00003DD4 251F000000          <1>     and eax, 1Fh    ;Save day bits
    17 00003DD9 E8B0000000          <1>     call .printFirst
    18 00003DDE 8A155BC2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    19 00003DE4 B402                <1>     mov ah, 02h
    20 00003DE6 CD21                <1>     int 21h
    21                              <1> 
    22 00003DE8 89C8                <1>     mov eax, ecx
    23 00003DEA 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    24 00003DEF C1E805              <1>     shr eax, 5
    25 00003DF2 E8B3000000          <1>     call .printSecond
    26                              <1> 
    27 00003DF7 8A1542C2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    28 00003DFD B402                <1>     mov ah, 02h
    29 00003DFF CD21                <1>     int 21h
    30                              <1> 
    31 00003E01 89C8                <1>     mov eax, ecx
    32 00003E03 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    33 00003E08 C1E809              <1>     shr eax, 9
    34 00003E0B 5B                  <1>     pop rbx ;Get the year signature back
    35 00003E0C E8A9000000          <1>     call .printYear
    36                              <1>     return
    13                              <2> %%_ret:
    14 00003E11 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                              <1> .usDate:
    38                              <1> ;US: MM/DD/YY
    39 00003E12 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    40 00003E17 C1E805              <1>     shr eax, 5
    41 00003E1A E86F000000          <1>     call .printFirst
    42                              <1> 
    43 00003E1F 8A151AC2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    44 00003E25 B402                <1>     mov ah, 02h
    45 00003E27 CD21                <1>     int 21h
    46                              <1> 
    47 00003E29 89C8                <1>     mov eax, ecx
    48 00003E2B 251F000000          <1>     and eax, 1Fh    ;Save day bits
    49 00003E30 E875000000          <1>     call .printSecond
    50                              <1> 
    51 00003E35 8A1504C2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 00003E3B B402                <1>     mov ah, 02h
    53 00003E3D CD21                <1>     int 21h
    54                              <1> 
    55 00003E3F 89C8                <1>     mov eax, ecx
    56 00003E41 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 00003E46 C1E809              <1>     shr eax, 9
    58 00003E49 5B                  <1>     pop rbx ;Get the year signature back
    59 00003E4A E86B000000          <1>     call .printYear
    60                              <1>     return
    13                              <2> %%_ret:
    14 00003E4F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> .jpnDate:
    62                              <1> ;Japan: YY/MM/DD
    63 00003E50 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 00003E55 C1E809              <1>     shr eax, 9
    65 00003E58 5B                  <1>     pop rbx ;Get the year signature back
    66 00003E59 E85C000000          <1>     call .printYear
    67                              <1> 
    68 00003E5E 8A15DBC1FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    69 00003E64 B402                <1>     mov ah, 02h
    70 00003E66 CD21                <1>     int 21h
    71                              <1> 
    72 00003E68 89C8                <1>     mov eax, ecx
    73 00003E6A 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    74 00003E6F C1E805              <1>     shr eax, 5
    75 00003E72 E833000000          <1>     call .printSecond
    76                              <1> 
    77 00003E77 8A15C2C1FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    78 00003E7D B402                <1>     mov ah, 02h
    79 00003E7F CD21                <1>     int 21h
    80                              <1> 
    81 00003E81 89C8                <1>     mov eax, ecx
    82 00003E83 251F000000          <1>     and eax, 1Fh    ;Save day bits
    83 00003E88 E81D000000          <1>     call .printSecond
    84                              <1>     return
    13                              <2> %%_ret:
    14 00003E8D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> ;Each of these require eax setup correctly
    87                              <1> .printFirst:
    88 00003E8E 51                  <1>     push rcx
    89 00003E8F E8D9050000          <1>     call getDecimalWord
    90 00003E94 84ED                <1>     test ch, ch ;Do we have an upper digit?
    91 00003E96 7504                <1>     jnz .skipSpace
    92 00003E98 88CD                <1>     mov ch, cl
    93 00003E9A B120                <1>     mov cl, " "
    94                              <1> .skipSpace:
    95 00003E9C 88CA                <1>     mov dl, cl
    96 00003E9E B402                <1>     mov ah, 02h
    97 00003EA0 CD21                <1>     int 21h
    98 00003EA2 88EA                <1>     mov dl, ch
    99 00003EA4 B402                <1>     mov ah, 02h
   100 00003EA6 CD21                <1>     int 21h
   101 00003EA8 59                  <1>     pop rcx
   102                              <1>     return
    13                              <2> %%_ret:
    14 00003EA9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .printSecond:
   104 00003EAA 51                  <1>     push rcx
   105 00003EAB E8BD050000          <1>     call getDecimalWord
   106 00003EB0 84ED                <1>     test ch, ch ;Do we have an upper digit?
   107 00003EB2 75E8                <1>     jnz .skipSpace
   108 00003EB4 88CD                <1>     mov ch, cl
   109 00003EB6 B130                <1>     mov cl, "0"
   110 00003EB8 EBE2                <1>     jmp short .skipSpace
   111                              <1> .printYear:
   112 00003EBA 05BC070000          <1>     add eax, 1980
   113 00003EBF 51                  <1>     push rcx
   114 00003EC0 53                  <1>     push rbx
   115 00003EC1 E8A7050000          <1>     call getDecimalWord ;Get unpacked in rcx
   116 00003EC6 5B                  <1>     pop rbx
   117 00003EC7 84DB                <1>     test bl, bl
   118 00003EC9 740C                <1>     jz .twoDigitYear
   119 00003ECB 88CA                <1>     mov dl, cl  ;Print the first digit
   120 00003ECD B402                <1>     mov ah, 02h
   121 00003ECF CD21                <1>     int 21h
   122 00003ED1 88EA                <1>     mov dl, ch  ;Print the second digit
   123 00003ED3 B402                <1>     mov ah, 02h
   124 00003ED5 CD21                <1>     int 21h
   125                              <1> .twoDigitYear:
   126 00003ED7 C1E910              <1>     shr ecx, 10h    ;Get high word low
   127 00003EDA 88CA                <1>     mov dl, cl  ;Print the upper digit
   128 00003EDC B402                <1>     mov ah, 02h
   129 00003EDE CD21                <1>     int 21h
   130 00003EE0 88EA                <1>     mov dl, ch  ;Print the lower digit
   131 00003EE2 B402                <1>     mov ah, 02h
   132 00003EE4 CD21                <1>     int 21h
   133 00003EE6 59                  <1>     pop rcx
   134                              <1>     return
    13                              <2> %%_ret:
    14 00003EE7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> 
   137                              <1> printTime:
   138                              <1> ;Input: eax = Packed Time
   139                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   140                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   141 00003EE8 89C1                <1>     mov ecx, eax
   142 00003EEA 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   143 00003EEF C1E80B              <1>     shr eax, 11
   144 00003EF2 803D4CC1FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   145 00003EF9 750B                <1>     jne .ampm
   146 00003EFB E85A000000          <1>     call .printHours
   147 00003F00 E831000000          <1>     call .printMinutes
   148                              <1>     return
    13                              <2> %%_ret:
    14 00003F05 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> .ampm:
   150 00003F06 3D0C000000          <1>     cmp eax, 12
   151 00003F0B 7713                <1>     ja .pm
   152 00003F0D 7416                <1>     je .pm2
   153 00003F0F E846000000          <1>     call .printHours
   154 00003F14 E81D000000          <1>     call .printMinutes
   155 00003F19 B261                <1>     mov dl, "a"
   156 00003F1B B402                <1>     mov ah, 02h
   157 00003F1D CD21                <1>     int 21h
   158                              <1>     return
    13                              <2> %%_ret:
    14 00003F1F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> .pm:
   160 00003F20 2D0C000000          <1>     sub eax, 12
   161                              <1> .pm2:
   162 00003F25 E830000000          <1>     call .printHours
   163 00003F2A E807000000          <1>     call .printMinutes
   164 00003F2F B270                <1>     mov dl, "p"
   165 00003F31 B402                <1>     mov ah, 02h
   166 00003F33 CD21                <1>     int 21h
   167                              <1>     return
    13                              <2> %%_ret:
    14 00003F35 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   168                              <1> .printMinutes:
   169 00003F36 8A1505C1FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   170 00003F3C B402                <1>     mov ah, 02h
   171 00003F3E CD21                <1>     int 21h
   172                              <1> 
   173 00003F40 89C8                <1>     mov eax, ecx
   174 00003F42 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   175 00003F47 C1E805              <1>     shr eax, 5
   176                              <1> .printMinutesAlt:
   177 00003F4A 51                  <1>     push rcx
   178 00003F4B E81D050000          <1>     call getDecimalWord
   179 00003F50 84ED                <1>     test ch, ch ;Do we have an upper digit?
   180 00003F52 7514                <1>     jnz .skipSpace
   181 00003F54 88CD                <1>     mov ch, cl
   182 00003F56 B130                <1>     mov cl, "0"
   183 00003F58 EB0E                <1>     jmp short .skipSpace
   184                              <1> .printHours:
   185 00003F5A 51                  <1>     push rcx
   186 00003F5B E80D050000          <1>     call getDecimalWord
   187 00003F60 84ED                <1>     test ch, ch ;Do we have an upper digit?
   188 00003F62 7504                <1>     jnz .skipSpace
   189 00003F64 88CD                <1>     mov ch, cl
   190 00003F66 B120                <1>     mov cl, " "
   191                              <1> .skipSpace:
   192 00003F68 88CA                <1>     mov dl, cl
   193 00003F6A B402                <1>     mov ah, 02h
   194 00003F6C CD21                <1>     int 21h
   195 00003F6E 88EA                <1>     mov dl, ch
   196 00003F70 B402                <1>     mov ah, 02h
   197 00003F72 CD21                <1>     int 21h
   198 00003F74 59                  <1>     pop rcx
   199                              <1>     return
    13                              <2> %%_ret:
    14 00003F75 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printPrompt:
   202 00003F76 F60521C1FFFFFF      <1>     test byte [echoFlg], -1 ;If echo off, no prompt!
   203                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003F7D 74(75)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 00003F7F 488D3DABCFFFFF      <1>     lea rdi, promptEVar   ;Find the prompt var
   205 00003F86 E816060000          <1>     call searchForEnvVar
   206 00003F8B 730B                <1>     jnc .validPrompt
   207                              <1>     ;Here we print the default prompt
   208 00003F8D E8F9000000          <1>     call putCWDInPrompt
   209 00003F92 E8C5000000          <1>     call putGTinPrompt
   210                              <1>     return
    13                              <2> %%_ret:
    14 00003F97 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> .validPrompt:
   212                              <1> ;rsi points to the prompt
   213 00003F98 4881C607000000      <1>     add rsi, 7  ;Go past the prompt= string
   214                              <1> .promptLp:
   215 00003F9F AC                  <1>     lodsb   ;Get the char
   216 00003FA0 84C0                <1>     test al, al
   217                              <1>     retz    ;Return when al is 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003FA2 74(97)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   218 00003FA4 3C24                <1>     cmp al, "$"
   219 00003FA6 7409                <1>     je .escapeChar
   220 00003FA8 88C2                <1>     mov dl, al
   221 00003FAA E8D7000000          <1>     call outChar    ;Prints the char in dl
   222 00003FAF EBEE                <1>     jmp short .promptLp
   223                              <1> .escapeChar:
   224 00003FB1 AC                  <1>     lodsb       ;Get the next char now that we are escaping
   225 00003FB2 E87D020000          <1>     call ucChar ;Uppercase this char in al
   226 00003FB7 488D1D2A000000      <1>     lea rbx, .pTbl
   227 00003FBE B90D000000          <1>     mov ecx, pTblL / 3  ;3 bytes per entry
   228                              <1> .escapeLp:
   229 00003FC3 3803                <1>     cmp byte [rbx], al  ;Are we at the right entry?
   230 00003FC5 740D                <1>     je .escapeFnd
   231 00003FC7 4881C303000000      <1>     add rbx, 3  ;Go to next entry
   232 00003FCE FFC9                <1>     dec ecx
   233 00003FD0 75F1                <1>     jnz .escapeLp
   234 00003FD2 EBCB                <1>     jmp short .promptLp  ;Output nothing if invalid
   235                              <1> .escapeFnd:
   236 00003FD4 488D050D000000      <1>     lea rax, .pTbl              ;Get the table addr
   237 00003FDB 0FB75B01            <1>     movzx ebx, word [rbx + 1]   ;Get the word offset from the table
   238 00003FDF 4801D8              <1>     add rax, rbx                ;Add these
   239 00003FE2 56                  <1>     push rsi    ;Ensure rsi remains unchanged
   240 00003FE3 FFD0                <1>     call rax    ;Call indirectly the function to output the chars
   241 00003FE5 5E                  <1>     pop rsi
   242 00003FE6 EBB7                <1>     jmp short .promptLp
   243                              <1> 
   244                              <1> ;Easy table to use, 13 entries, 3 bytes per entry
   245                              <1> .pTbl:
   246 00003FE8 42                  <1>     db "B", 
   247 00003FE9 7000                <1>     dw putPipeInPrompt - .pTbl     ;Pipe char
   248 00003FEB 44                  <1>     db "D", 
   249 00003FEC 5D01                <1>     dw printFmtDate - .pTbl        ;Current date
   250 00003FEE 45                  <1>     db "E", 
   251 00003FEF 6400                <1>     dw putEscInPrompt - .pTbl      ;ANSI Escape char
   252 00003FF1 47                  <1>     db "G", 
   253 00003FF2 7400                <1>     dw putGTinPrompt - .pTbl       ;Greater than char
   254 00003FF4 48                  <1>     db "H", 
   255 00003FF5 7C00                <1>     dw putBSPinPrompt - .pTbl      ;Backspace
   256 00003FF7 4C                  <1>     db "L", 
   257 00003FF8 7800                <1>     dw putLTinPrompt - .pTbl       ;Less than char
   258 00003FFA 4E                  <1>     db "N", 
   259 00003FFB 9500                <1>     dw putDriveInPrompt - .pTbl    ;Current drive letter
   260 00003FFD 50                  <1>     db "P", 
   261 00003FFE A300                <1>     dw putCWDInPrompt - .pTbl      ;Current drive and path
   262 00004000 51                  <1>     db "Q", 
   263 00004001 6C00                <1>     dw putEquInPrompt - .pTbl      ;Equals char
   264 00004003 54                  <1>     db "T", 
   265 00004004 F400                <1>     dw printFmtTime - .pTbl        ;Current time in hh:mm:ss.hh fmt
   266 00004006 56                  <1>     db "V", 
   267 00004007 3600                <1>     dw putVersionInPrompt - .pTbl  ;DOS version number
   268 00004009 5F                  <1>     db "_", 
   269 0000400A 2700                <1>     dw printCRLF - .pTbl           ;CRLF pair
   270 0000400C 24                  <1>     db "$", 
   271 0000400D 6800                <1>     dw putMoneyInPrompt - .pTbl    ;Dollar sign
   272                              <1> pTblL equ $ - .pTbl
   273                              <1> 
   274                              <1> printCRLF:
   275 0000400F 488D15D4C8FFFF      <1>     lea rdx, crlf
   276                              <1> printString:
   277 00004016 B800090000          <1>     mov eax, 0900h  ;Print string
   278 0000401B CD21                <1>     int 21h
   279                              <1>     return
    13                              <2> %%_ret:
    14 0000401D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   280                              <1> 
   281                              <1> putVersionInPrompt:
   282 0000401E 488D1573CBFFFF      <1>     lea rdx, dosVer
   283 00004025 B409                <1>     mov ah, 09h ;Print String
   284 00004027 CD21                <1>     int 21h
   285 00004029 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   286 0000402B CD21                <1>     int 21h
   287 0000402D 50                  <1>     push rax    ;Save minor version
   288 0000402E E884010000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   289 00004033 E89C010000          <1>     call printPackedBCD ;Print al
   290 00004038 B22E                <1>     mov dl, "."
   291 0000403A B402                <1>     mov ah, 02h
   292 0000403C CD21                <1>     int 21h
   293 0000403E 58                  <1>     pop rax
   294 0000403F 88E0                <1>     mov al, ah  ;Get the minor version low
   295 00004041 E871010000          <1>     call hexToBCD
   296 00004046 E889010000          <1>     call printPackedBCD
   297                              <1>     return
    13                              <2> %%_ret:
    14 0000404B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   298                              <1> putEscInPrompt:
   299 0000404C B21B                <1>     mov dl, ESC
   300 0000404E EB36                <1>     jmp short outChar
   301                              <1> 
   302                              <1> putMoneyInPrompt:
   303 00004050 B224                <1>     mov dl, "$"
   304 00004052 EB32                <1>     jmp short outChar
   305                              <1> 
   306                              <1> putEquInPrompt:
   307 00004054 B23D                <1>     mov dl, "="
   308 00004056 EB2E                <1>     jmp short outChar
   309                              <1> 
   310                              <1> putPipeInPrompt:
   311 00004058 B27C                <1>     mov dl, "|"
   312 0000405A EB2A                <1>     jmp short outChar
   313                              <1> 
   314                              <1> putGTinPrompt:
   315 0000405C B23E                <1>     mov dl, ">"
   316 0000405E EB26                <1>     jmp short outChar
   317                              <1> 
   318                              <1> putLTinPrompt:
   319 00004060 B23C                <1>     mov dl, "<"
   320 00004062 EB22                <1>     jmp short outChar
   321                              <1> 
   322                              <1> putBSPinPrompt:
   323 00004064 488D1528CDFFFF      <1>     lea rdx, backSpace
   324 0000406B B903000000          <1>     mov ecx, 3
   325 00004070 BB01000000          <1>     mov ebx, 1
   326 00004075 B800400000          <1>     mov eax, 4000h  ;Output the backspace!
   327 0000407A CD21                <1>     int 21h
   328                              <1>     return
    13                              <2> %%_ret:
    14 0000407C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   329                              <1> 
   330                              <1> putDriveInPrompt:
   331 0000407D E88A010000          <1>     call getCurrentDrive
   332 00004082 0441                <1>     add al, "A" ;Convert to letter
   333 00004084 88C2                <1>     mov dl, al
   334                              <1> outChar:
   335 00004086 B402                <1>     mov ah, 02h ;Echo to STDOUT
   336 00004088 CD21                <1>     int 21h
   337                              <1>     return
    13                              <2> %%_ret:
    14 0000408A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   338                              <1> putCWDInPrompt:
   339 0000408B E87C010000          <1>     call getCurrentDrive
   340 00004090 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   341 00004092 FEC2                <1>     inc dl
   342 00004094 0441                <1>     add al, "A" ;Convert to letter
   343 00004096 B43A                <1>     mov ah, ":"
   344 00004098 488D3DBBBFFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   345 0000409F 66AB                <1>     stosw   ;Store X:, rdi+=2
   346 000040A1 8A0582BFFFFF        <1>     mov al, byte [pathSep]
   347 000040A7 AA                  <1>     stosb   ;Store pathSep, inc rdi
   348 000040A8 B447                <1>     mov ah, 47h ;Get Current Working Directory
   349 000040AA 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   350 000040AD CD21                <1>     int 21h
   351 000040AF 721F                <1>     jc .badDrive
   352 000040B1 E874010000          <1>     call strlen
   353 000040B6 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   354                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   355 000040BC B800400000          <1>     mov eax, 4000h ;Write to handle
   356 000040C1 BB01000000          <1>     mov ebx, 1  ;STDOUT
   357 000040C6 488D158DBFFFFF      <1>     lea rdx, currDirStr
   358 000040CD CD21                <1>     int 21h
   359                              <1>     return
    13                              <2> %%_ret:
    14 000040CF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> .badDrive:
   361                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   362 000040D0 488D1589CBFFFF      <1>     lea rdx, badDrvMsg
   363 000040D7 E93AFFFFFF          <1>     jmp printString
   364                              <1> printFmtTime:
   365                              <1> ;Outputs the formatted time
   366 000040DC E847000000          <1>     call getTime
   367 000040E1 0FB6C5              <1>     movzx eax, ch
   368 000040E4 E871FEFFFF          <1>     call printTime.printHours
   369 000040E9 8A1552BFFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   370 000040EF B402                <1>     mov ah, 02h
   371 000040F1 CD21                <1>     int 21h
   372 000040F3 0FB605B6C5FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   373 000040FA E84BFEFFFF          <1>     call printTime.printMinutesAlt
   374 000040FF 8A153CBFFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   375 00004105 B402                <1>     mov ah, 02h
   376 00004107 CD21                <1>     int 21h
   377 00004109 0FB605A3C5FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   378 00004110 E835FEFFFF          <1>     call printTime.printMinutesAlt
   379 00004115 B22E                <1>     mov dl, "."
   380 00004117 B402                <1>     mov ah, 02h
   381 00004119 CD21                <1>     int 21h
   382 0000411B 0FB60590C5FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   383 00004122 E823FEFFFF          <1>     call printTime.printMinutesAlt
   384                              <1>     return
    13                              <2> %%_ret:
    14 00004127 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   385                              <1> getTime:
   386 00004128 B42C                <1>     mov ah, 2Ch ;DOS get time
   387 0000412A CD21                <1>     int 21h
   388                              <1>     ;CH = hour (0-23)
   389                              <1> 	;CL = minutes (0-59)
   390                              <1> 	;DH = seconds (0-59)
   391                              <1> 	;DL = hundredths (0-99)
   392 0000412C 880D7EC5FFFF        <1>     mov byte [td1], cl
   393 00004132 882D79C5FFFF        <1>     mov byte [td2], ch
   394 00004138 881574C5FFFF        <1>     mov byte [td3], dl
   395 0000413E 88356FC5FFFF        <1>     mov byte [td4], dh
   396                              <1>     return
    13                              <2> %%_ret:
    14 00004144 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   397                              <1> 
   398                              <1> printFmtDate:
   399                              <1> ;Outputs the formatted date
   400 00004145 B8002A0000          <1>     mov eax, 2A00h ;DOS get date
   401 0000414A CD21                <1>     int 21h
   402                              <1> 	;AL = day of the week (0=Sunday)
   403                              <1> 	;CX = year (1980-2099)
   404                              <1> 	;DH = month (1-12)
   405                              <1> 	;DL = day (1-31)
   406 0000414C 6681E9BC07          <1>     sub cx, 1980    ;Subtract 1980 from cx
   407 00004151 66890D58C5FFFF      <1>     mov word [td1], cx
   408 00004158 881554C5FFFF        <1>     mov byte [td3], dl
   409 0000415E 88354FC5FFFF        <1>     mov byte [td4], dh
   410 00004164 0FB6C0              <1>     movzx eax, al
   411 00004167 89C3                <1>     mov ebx, eax
   412 00004169 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   413 0000416B 01D8                <1>     add eax, ebx ;Make it 3 times 
   414 0000416D 488D156EC9FFFF      <1>     lea rdx, dayName
   415 00004174 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   416 00004178 B903000000          <1>     mov ecx, 3  ;Print three chars
   417 0000417D BB01000000          <1>     mov ebx, 1  ;STDOUT
   418 00004182 B440                <1>     mov ah, 40h ;Write to handle
   419 00004184 CD21                <1>     int 21h
   420 00004186 B220                <1>     mov dl, " "
   421 00004188 E8F9FEFFFF          <1>     call outChar
   422                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   423                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   424                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   425 0000418D 0FB7051CC5FFFF      <1>     movzx eax, word [td1]   ;Get this word
   426 00004194 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   427 00004197 0FB61D15C5FFFF      <1>     movzx ebx, byte [td4]
   428 0000419E C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   429 000041A1 09D8                <1>     or eax, ebx ;Add this date to eax
   430 000041A3 0FB61D08C5FFFF      <1>     movzx ebx, byte [td3]
   431 000041AA 09D8                <1>     or eax, ebx
   432 000041AC BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   433 000041B1 E810FCFFFF          <1>     call printDate
   434                              <1>     return
    13                              <2> %%_ret:
    14 000041B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   435                              <1> 
   436                              <1> 
   437                              <1> hexToBCD:
   438                              <1> ;Converts a Hex byte into two BCD digits
   439                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   440 000041B7 51                  <1>     push rcx
   441 000041B8 0FB6C0              <1>     movzx eax, al   ;Zero extend
   442 000041BB 31C9                <1>     xor ecx, ecx
   443                              <1> .htb0:
   444 000041BD 3D0A000000          <1>     cmp eax, 10
   445 000041C2 7209                <1>     jb .htb1
   446 000041C4 2D0A000000          <1>     sub eax, 10
   447 000041C9 FFC1                <1>     inc ecx
   448 000041CB EBF0                <1>     jmp short .htb0
   449                              <1> .htb1:
   450 000041CD C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   451 000041D0 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   452 000041D2 59                  <1>     pop rcx
   453 000041D3 C3                  <1>     ret
   454                              <1> 
   455                              <1> printPackedBCD:
   456                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   457                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   458                              <1> ;Preserves all registers
   459 000041D4 50                  <1>     push rax
   460 000041D5 52                  <1>     push rdx
   461 000041D6 88C4                <1>     mov ah, al
   462 000041D8 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   463 000041DA 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   464 000041DD 7508                <1>     jnz .upperNybble
   465 000041DF B220                <1>     mov dl, " "
   466 000041E1 B402                <1>     mov ah, 02h
   467 000041E3 CD21                <1>     int 21h
   468 000041E5 EB0E                <1>     jmp short .lowerNybble
   469                              <1> .upperNybble:
   470 000041E7 50                  <1>     push rax
   471 000041E8 C0EC04              <1>     shr ah, 4
   472 000041EB 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   473 000041EE 88E2                <1>     mov dl, ah
   474 000041F0 B402                <1>     mov ah, 02h ;Print DL
   475 000041F2 CD21                <1>     int 21h
   476 000041F4 58                  <1>     pop rax
   477                              <1> .lowerNybble:
   478 000041F5 0430                <1>     add al, "0"
   479 000041F7 88C2                <1>     mov dl, al
   480 000041F9 B402                <1>     mov ah, 02h ;Print DL
   481 000041FB CD21                <1>     int 21h
   482 000041FD 5A                  <1>     pop rdx
   483 000041FE 58                  <1>     pop rax
   484                              <1>     return
    13                              <2> %%_ret:
    14 000041FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   485                              <1> 
   486                              <1> setDrive:
   487                              <1> ;Input: dl = 0 based Drive number to set to
   488                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   489                              <1> ;AX trashed.
   490 00004200 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   491 00004202 CD21                <1>     int 21h 
   492 00004204 E803000000          <1>     call getCurrentDrive
   493 00004209 38D0                <1>     cmp al, dl  ;Is this the same drive?
   494                              <1>     return
    13                              <2> %%_ret:
    14 0000420B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   495                              <1> getCurrentDrive:
   496                              <1> ;Returns the 0 based current drive in al
   497 0000420C B419                <1>     mov ah, 19h
   498 0000420E CD21                <1>     int 21h
   499                              <1>     return
    13                              <2> %%_ret:
    14 00004210 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> 
   501                              <1> strcpy:
   502                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   503                              <1> ;rsi -> Source
   504                              <1> ;rdi -> Destination
   505 00004211 51                  <1>     push rcx
   506 00004212 57                  <1>     push rdi
   507 00004213 4889F7              <1>     mov rdi, rsi
   508 00004216 E80F000000          <1>     call strlen ;Get the length of the string in rsi
   509 0000421B 5F                  <1>     pop rdi
   510 0000421C F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   511 0000421E 59                  <1>     pop rcx
   512                              <1>     return
    13                              <2> %%_ret:
    14 0000421F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   513                              <1> 
   514                              <1> strcpy2:
   515                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   516                              <1> ;rsi -> Source
   517                              <1> ;rdi -> Destination
   518 00004220 56                  <1>     push rsi
   519 00004221 57                  <1>     push rdi
   520 00004222 E8EAFFFFFF          <1>     call strcpy 
   521 00004227 5F                  <1>     pop rdi
   522 00004228 5E                  <1>     pop rsi
   523                              <1>     return
    13                              <2> %%_ret:
    14 00004229 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> strlen:
   526                              <1> ;Gets the length of a ASCIIZ string
   527                              <1> ;Input: rdi = Source buffer
   528                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   529 0000422A 50                  <1>     push rax
   530 0000422B B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   531 00004230 CD2F                <1>     int 2fh
   532 00004232 58                  <1>     pop rax
   533                              <1>     return
    13                              <2> %%_ret:
    14 00004233 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   534                              <1> 
   535                              <1> ucChar:
   536                              <1> ;Input: al = Char to uppercase
   537                              <1> ;Output: al = Adjusted char 
   538 00004234 53                  <1>     push rbx
   539 00004235 50                  <1>     push rax    ;Push the char twice on the stack
   540 00004236 B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   541 0000423B CD2F                <1>     int 2fh         ;Returns the processed char in al
   542 0000423D 5B                  <1>     pop rbx         ;Pop the old word off the stack
   543 0000423E 5B                  <1>     pop rbx
   544                              <1>     return
    13                              <2> %%_ret:
    14 0000423F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   545                              <1> 
   546                              <1> normalisePath:
   547                              <1> ;Uppercases chars and flips pathseps
   548                              <1> ;Input: rsi -> Path to normalise
   549 00004240 50                  <1>     push rax
   550 00004241 57                  <1>     push rdi
   551 00004242 4889F7              <1>     mov rdi, rsi
   552 00004245 B811120000          <1>     mov eax, 1211h
   553 0000424A CD2F                <1>     int 2fh
   554 0000424C 5F                  <1>     pop rdi
   555 0000424D 58                  <1>     pop rax
   556                              <1>     return
    13                              <2> %%_ret:
    14 0000424E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   557                              <1> 
   558                              <1> skipDelimiters:
   559                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   560                              <1> ; command delimiters but a subset thereof. 
   561                              <1> ;These are the same across all codepages.
   562                              <1> ;Input: rsi must point to the start of the data string
   563                              <1> ;Output: rsi points to the first non-delimiter char
   564 0000424F 50                  <1>     push rax
   565                              <1> .l1:
   566 00004250 AC                  <1>     lodsb
   567 00004251 E807000000          <1>     call isALdelimiter
   568 00004256 74F8                <1>     jz .l1
   569                              <1> .exit:
   570 00004258 58                  <1>     pop rax
   571 00004259 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   572                              <1>     return
    13                              <2> %%_ret:
    14 0000425C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   573                              <1> 
   574                              <1> isALdelimiter:
   575                              <1> ;Returns: ZF=NZ if al is not a command separator 
   576                              <1> ;         ZF=ZE if al is a command separator
   577 0000425D 3C20                <1>     cmp al, " "
   578                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000425F 74(5C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   579 00004261 3C3B                <1>     cmp al, ";"
   580                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004263 74(5C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   581 00004265 3C3D                <1>     cmp al, "="
   582                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004267 74(5C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   583 00004269 3C2C                <1>     cmp al, ","
   584                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000426B 74(5C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   585 0000426D 3C09                <1>     cmp al, TAB
   586                              <1>     return
    13                              <2> %%_ret:
    14 0000426F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   587                              <1> 
   588                              <1> clearCommandState:
   589                              <1> ;Clears the command state
   590 00004270 488D3D35BEFFFF      <1>     lea rdi, cmdStatePtr
   591 00004277 B907000000          <1>     mov ecx, cmdStateL
   592 0000427C 31C0                <1>     xor eax, eax
   593 0000427E F3AA                <1>     rep stosb
   594                              <1>     return
    13                              <2> %%_ret:
    14 00004280 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   595                              <1> 
   596                              <1> clearCommandLineState:
   597                              <1> ;Clears the command line state after a 0Dh encountered
   598 00004281 488D3D19BEFFFF      <1>     lea rdi, cmdLineStatePtr
   599 00004288 B912000000          <1>     mov ecx, cmdLineStateL
   600 0000428D 31C0                <1>     xor eax, eax
   601 0000428F F3AA                <1>     rep stosb
   602 00004291 C70507BEFFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   602 0000429A FF                  <1>
   603 0000429B C70503BEFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   603 000042A4 FF                  <1>
   604                              <1> ;Close all handles from 5->MAX
   605 000042A5 0FB70D7BBDFFFF      <1>     movzx ecx, word [numHdls]
   606 000042AC BB05000000          <1>     mov ebx, 5
   607                              <1> .lp:
   608 000042B1 B43E                <1>     mov ah, 3Eh ;File close
   609 000042B3 CD21                <1>     int 21h
   610 000042B5 FFC3                <1>     inc ebx ;Goto next file
   611 000042B7 39CB                <1>     cmp ebx, ecx
   612 000042B9 76F6                <1>     jbe .lp    ;Keep looping whilst below or equal
   613                              <1>     return
    13                              <2> %%_ret:
    14 000042BB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   614                              <1> 
   615                              <1> asciiFilenameToFCB:
   616                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   617                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   618                              <1> ;Also doesn't check if chars are valid
   619                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   620                              <1> ;Name is space padded.
   621                              <1> ;Input: rsi = ASCII string buffer
   622                              <1> ;       rdi = FCB name buffer
   623                              <1> ;Output: al = Char that terminated the source string 
   624 000042BC 53                  <1>     push rbx    
   625 000042BD 57                  <1>     push rdi
   626 000042BE B90B000000          <1>     mov ecx, 11
   627 000042C3 B020                <1>     mov al, " "
   628 000042C5 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   629 000042C7 5F                  <1>     pop rdi
   630 000042C8 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   631                              <1>     ;Preprocess for Dir Searches
   632 000042CB 803E2E              <1>     cmp byte [rsi], "."
   633 000042CE 7509                <1>     jne .processName
   634 000042D0 A4                  <1>     movsb   ;Store the first dot
   635 000042D1 803E2E              <1>     cmp byte [rsi], "."
   636 000042D4 752C                <1>     jne .exitBadChar
   637 000042D6 A4                  <1>     movsb
   638 000042D7 EB29                <1>     jmp short .exitBadChar
   639                              <1> .processName:
   640 000042D9 AC                  <1>     lodsb   ;Get the char in al
   641 000042DA 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   642 000042DC 7426                <1>     jz .exit
   643 000042DE 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   644 000042E0 7407                <1>     je .extSpace
   645 000042E2 3C2E                <1>     cmp al, "."
   646 000042E4 740C                <1>     je .ext
   647 000042E6 AA                  <1>     stosb   ;Store the char
   648 000042E7 EBF0                <1>     jmp short .processName
   649                              <1> .extSpace:
   650                              <1> ;Now we scan for a period in the name
   651 000042E9 AC                  <1>     lodsb   ;Get a char and increase rsi
   652 000042EA 84C0                <1>     test al, al
   653 000042EC 7416                <1>     jz .exit
   654 000042EE 3C2E                <1>     cmp al, "."     ;If al is not a period...
   655 000042F0 75F7                <1>     jne .extSpace   ; keep searching
   656                              <1> .ext:
   657 000042F2 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   658                              <1> .processExt:
   659 000042F6 AC                  <1>     lodsb
   660 000042F7 84C0                <1>     test al, al
   661 000042F9 7409                <1>     jz .exit
   662 000042FB 3C20                <1>     cmp al, " "
   663 000042FD 7405                <1>     je .exit
   664 000042FF AA                  <1>     stosb
   665 00004300 EBF4                <1>     jmp short .processExt
   666                              <1> .exitBadChar:
   667 00004302 30C0                <1>     xor al, al  ;Return a null terminator
   668                              <1> .exit:
   669 00004304 5B                  <1>     pop rbx
   670                              <1>     return
    13                              <2> %%_ret:
    14 00004305 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   671                              <1> 
   672                              <1> findLastPathComponant:
   673                              <1> ;Finds the last path componant of an ASCIIZ path string
   674                              <1> ;Input: rdi -> Head of the path to find last componant on
   675                              <1> ;Output: rdi -> Start of the last componant
   676 00004306 50                  <1>     push rax
   677 00004307 51                  <1>     push rcx
   678 00004308 31C9                <1>     xor ecx, ecx
   679 0000430A FFC9                <1>     dec ecx
   680 0000430C 31C0                <1>     xor eax, eax
   681 0000430E F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   682 00004310 F7D1                <1>     not ecx     ;This gets the count of chars  
   683 00004312 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   684 00004315 8A050EBDFFFF        <1>     mov al, byte [pathSep]
   685 0000431B FD                  <1>     std
   686 0000431C F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   687 0000431E FC                  <1>     cld
   688 0000431F 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   689 00004321 48FFC7              <1>     inc rdi     ;Point at pathsep
   690                              <1> .exit:
   691 00004324 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   692 00004327 59                  <1>     pop rcx
   693 00004328 58                  <1>     pop rax
   694                              <1>     return
    13                              <2> %%_ret:
    14 00004329 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   695                              <1> 
   696                              <1> FCBToAsciiz:
   697                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   698                              <1> ;Name is space padded too
   699                              <1> ;Input: rsi = FCB name buffer
   700                              <1> ;       rdi = ASCIIZ string buffer
   701 0000432A B908000000          <1>     mov ecx, 8
   702 0000432F F3A4                <1>     rep movsb   ;Move the name over
   703                              <1> .scanNameSpace:
   704 00004331 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   705 00004335 750D                <1>     jne .ext
   706 00004337 48FFCF              <1>     dec rdi
   707 0000433A FFC1                <1>     inc ecx
   708 0000433C 81F908000000        <1>     cmp ecx, 8
   709 00004342 72ED                <1>     jb .scanNameSpace
   710                              <1> .ext:
   711 00004344 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   712 00004349 7506                <1>     jne .validExt
   713 0000434B 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   714 0000434F 7415                <1>     je .exit
   715                              <1> .validExt:
   716 00004351 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   717 00004353 AA                  <1>     stosb
   718 00004354 B903000000          <1>     mov ecx, 3
   719 00004359 F3A4                <1>     rep movsb   ;Move the three extension chars over
   720                              <1> .scanExtSpace:
   721 0000435B 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   722 0000435F 7505                <1>     jne .exit
   723 00004361 48FFCF              <1>     dec rdi
   724 00004364 EBF5                <1>     jmp short .scanExtSpace
   725                              <1> .exit:
   726 00004366 31C0                <1>     xor eax, eax
   727 00004368 AA                  <1>     stosb   ;Store a null at the end
   728                              <1>     return
    13                              <2> %%_ret:
    14 00004369 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   729                              <1> 
   730                              <1> cpDelimOrCtrlStringToBufz:
   731                              <1> ;Copy a delimited or control char terminated string to a buffer
   732                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   733                              <1> ;       rdi -> Buffer to store null terminated string in
   734                              <1> ;Output: rsi -> First char past string end
   735                              <1> ;       rdi -> One char past null terminator on string buffer
   736 0000436A C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   737                              <1> .lp:
   738 0000436D AC                  <1>     lodsb
   739 0000436E 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here. CR included!
   740 00004370 760A                <1>     jbe .exit
   741 00004372 E8E6FEFFFF          <1>     call isALdelimiter
   742 00004377 7403                <1>     je .exit
   743 00004379 AA                  <1>     stosb
   744 0000437A EBF1                <1>     jmp short .lp
   745                              <1> .exit:
   746 0000437C 31C0                <1>     xor eax, eax
   747 0000437E AA                  <1>     stosb   ;Store a null terminator
   748                              <1>     return
    13                              <2> %%_ret:
    14 0000437F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   749                              <1> 
   750                              <1> 
   751                              <1> cpDelimPathToBufz:
   752                              <1> ;Copy a delimited path into buffer and null terminate.
   753                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   754                              <1> ;       rdi -> Buffer to store null terminated path in
   755                              <1> ;Output: rsi -> First char past pathname delimiter
   756                              <1> ;       rdi -> One char past null terminator on pathname buffer
   757 00004380 53                  <1>     push rbx
   758 00004381 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   759 00004384 C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   760                              <1> .lp:
   761 00004387 AC                  <1>     lodsb   ;Get the char
   762 00004388 3C0D                <1>     cmp al, CR
   763 0000438A 7412                <1>     je .gotRedirPath
   764 0000438C E8CCFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   765 00004391 740B                <1>     jz .gotRedirPath 
   766 00004393 3A0591BCFFFF        <1>     cmp al, byte [switchChar]
   767 00004399 7403                <1>     je .gotRedirPath
   768 0000439B AA                  <1>     stosb   ;Store this char and loop next char
   769 0000439C EBE9                <1>     jmp short .lp
   770                              <1> .gotRedirPath:
   771 0000439E 50                  <1>     push rax    ;Save the char on stack
   772 0000439F 30C0                <1>     xor al, al  ;Get null terminator char
   773 000043A1 4829FB              <1>     sub rbx, rdi
   774 000043A4 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   775 000043AB 7412                <1>     je .notColon
   776 000043AD 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   777 000043B4 7409                <1>     je .notColon
   778 000043B6 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   779 000043BA 7503                <1>     jne .notColon
   780 000043BC 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   781                              <1> .notColon:
   782 000043BF AA                  <1>     stosb   ;Store the null terminator for the redir path
   783 000043C0 58                  <1>     pop rax ;Get back the char in al
   784 000043C1 5B                  <1>     pop rbx
   785                              <1>     return
    13                              <2> %%_ret:
    14 000043C2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   786                              <1> 
   787                              <1> buildCommandPath:
   788                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   789 000043C3 0FB605E3BCFFFF      <1>     movzx eax, byte [arg1Off]
   790 000043CA 4C8B053EBCFFFF      <1>     mov r8, [pspPtr]
   791 000043D1 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   792 000043D8 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   793                              <1> copyArgumentToSearchSpec:
   794                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   795                              <1> ; and null terminates
   796 000043DB 488D3D05C1FFFF      <1>     lea rdi, searchSpec
   797 000043E2 E899FFFFFF          <1>     call cpDelimPathToBufz
   798                              <1>     return
    13                              <2> %%_ret:
    14 000043E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   799                              <1> 
   800                              <1> scanForWildcards:
   801                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   802                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   803 000043E8 50                  <1>     push rax
   804 000043E9 56                  <1>     push rsi
   805                              <1> .lp:
   806 000043EA AC                  <1>     lodsb
   807 000043EB 3C3F                <1>     cmp al, "?"
   808 000043ED 740A                <1>     je .exit
   809 000043EF 3C2A                <1>     cmp al, "*"
   810 000043F1 7406                <1>     je .exit
   811 000043F3 84C0                <1>     test al, al
   812 000043F5 75F3                <1>     jnz .lp
   813 000043F7 FEC0                <1>     inc al  ;This will clear the ZF
   814                              <1> .exit:
   815 000043F9 5E                  <1>     pop rsi
   816 000043FA 58                  <1>     pop rax
   817                              <1>     return
    13                              <2> %%_ret:
    14 000043FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   818                              <1> 
   819                              <1> printDecimalWord:
   820                              <1> ;Takes qword in rax and print it's decimal representation
   821                              <1> ;Takes the qword in eax and prints its decimal representation
   822 000043FC 31C9                <1>     xor ecx, ecx
   823 000043FE 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   824 00004400 85C0                <1>     test eax, eax
   825 00004402 750C                <1>     jnz .notZero
   826 00004404 B930000000          <1>     mov ecx, "0"
   827 00004409 BD01000000          <1>     mov ebp, 1  ;Print one digit
   828 0000440E EB3E                <1>     jmp short .dpfb2
   829                              <1> .notZero:
   830 00004410 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   831 00004412 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   832                              <1> .dpfb0:
   833 00004417 FFC5                <1>     inc ebp
   834 00004419 81FD08000000        <1>     cmp ebp, 8
   835 0000441F 7206                <1>     jb .dpfb00
   836 00004421 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   837 00004425 EB04                <1>     jmp short .dpfb01
   838                              <1> .dpfb00:
   839 00004427 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   840                              <1> .dpfb01:
   841 0000442B 31D2                <1>     xor edx, edx
   842 0000442D 48F7F6              <1>     div rsi
   843 00004430 80C230              <1>     add dl, '0'
   844 00004433 80FA39              <1>     cmp dl, '9'
   845 00004436 7603                <1>     jbe .dpfb1
   846 00004438 80C207              <1>     add dl, 'A'-'0'-10
   847                              <1> .dpfb1:
   848 0000443B 81FD08000000        <1>     cmp ebp, 8
   849 00004441 7204                <1>     jb .dpfb10
   850 00004443 88D3                <1>     mov bl, dl ;Add the bottom bits
   851 00004445 EB02                <1>     jmp short .dpfb11
   852                              <1> .dpfb10:
   853 00004447 88D1                <1>     mov cl, dl    ;Save remainder byte
   854                              <1> .dpfb11:
   855 00004449 4885C0              <1>     test rax, rax
   856 0000444C 75C9                <1>     jnz .dpfb0
   857                              <1> .dpfb2:
   858 0000444E 81FD08000000        <1>     cmp ebp, 8
   859 00004454 7208                <1>     jb .dpfb20
   860 00004456 88DA                <1>     mov dl, bl
   861 00004458 48C1EB08            <1>     shr rbx, 8
   862 0000445C EB06                <1>     jmp short .dpfb21
   863                              <1> .dpfb20:
   864 0000445E 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   865 00004460 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   866                              <1> .dpfb21:
   867 00004464 B402                <1>     mov ah, 02h
   868 00004466 CD21                <1>     int 21h
   869 00004468 FFCD                <1>     dec ebp
   870 0000446A 75E2                <1>     jnz .dpfb2
   871                              <1>     return
    13                              <2> %%_ret:
    14 0000446C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   872                              <1> 
   873                              <1> getDecimalWord:
   874                              <1> ;Works on MAX A dword in eax
   875                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   876 0000446D 31C9                <1>     xor ecx, ecx
   877 0000446F 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   878 00004471 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   879                              <1> .dpfb0:
   880 00004476 FFC5                <1>     inc ebp
   881 00004478 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   882 0000447C 31D2                <1>     xor edx, edx
   883 0000447E 48F7F3              <1>     div rbx
   884 00004481 80C230              <1>     add dl, '0'
   885 00004484 80FA39              <1>     cmp dl, '9'
   886 00004487 7603                <1>     jbe .dpfb1
   887 00004489 80C207              <1>     add dl, 'A'-'0'-10
   888                              <1> .dpfb1:
   889 0000448C 88D1                <1>     mov cl, dl    ;Save remainder byte
   890 0000448E 4885C0              <1>     test rax, rax
   891 00004491 75E3                <1>     jnz .dpfb0
   892                              <1>     return
    13                              <2> %%_ret:
    14 00004493 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   893                              <1> getByte:
   894                              <1> ;Indicates if the number obtained is larger than a byte by setting CF
   895 00004494 E807000000          <1>     call getNum
   896 00004499 3D00010000          <1>     cmp eax, 100h
   897 0000449E F5                  <1>     cmc
   898                              <1>     return
    13                              <2> %%_ret:
    14 0000449F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   899                              <1> getNum:
   900                              <1> ;Gets a number from a command line.
   901                              <1> ;Input: rsi -> String to get number from
   902                              <1> ;Output: rsi -> Char which terminated the accumulation
   903                              <1> ;        eax = Value of the string. May overflow if we read more than 9 chars...
   904 000044A0 51                  <1>     push rcx
   905 000044A1 31C9                <1>     xor ecx, ecx    ;Start with a value of zero
   906                              <1> .lp:
   907 000044A3 AC                  <1>     lodsb
   908 000044A4 3C30                <1>     cmp al, "0"
   909 000044A6 7210                <1>     jb .exit
   910 000044A8 3C39                <1>     cmp al, "9"
   911 000044AA 770C                <1>     ja .exit
   912 000044AC 2C30                <1>     sub al, "0"                     ;Convert to binary 
   913 000044AE 678D0C89            <1>     lea ecx, qword [4*ecx + ecx]    ;5*rcx
   914 000044B2 D1E1                <1>     shl ecx, 1                      ;2*(5*rcx)
   915 000044B4 01C1                <1>     add ecx, eax
   916 000044B6 EBEB                <1>     jmp short .lp   ;Get next digit
   917                              <1> .exit:
   918 000044B8 89C8                <1>     mov eax, ecx
   919 000044BA 59                  <1>     pop rcx
   920 000044BB 48FFCE              <1>     dec rsi
   921                              <1>     return
    13                              <2> %%_ret:
    14 000044BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   922                              <1> 
   923                              <1> 
   924                              <1> freezePC:
   925 000044BF 488D15DFC9FFFF      <1>     lea rdx, memBad1
   926 000044C6 B409                <1>     mov ah, 09h
   927 000044C8 CD21                <1>     int 21h
   928                              <1> .altEP:
   929 000044CA 488D15FDC9FFFF      <1>     lea rdx, memBad3
   930 000044D1 B409                <1>     mov ah, 09h
   931 000044D3 CD21                <1>     int 21h
   932                              <1> .lp:
   933 000044D5 F390                <1>     pause
   934 000044D7 F4                  <1>     hlt
   935 000044D8 EBFB                <1>     jmp short .lp
   936                              <1> 
   937                              <1> setDTA:
   938 000044DA 50                  <1>     push rax
   939 000044DB 52                  <1>     push rdx
   940 000044DC 488D158ABCFFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   941 000044E3 B8001A0000          <1>     mov eax, 1A00h
   942 000044E8 CD21                <1>     int 21h
   943 000044EA 5A                  <1>     pop rdx
   944 000044EB 58                  <1>     pop rax
   945                              <1>     return
    13                              <2> %%_ret:
    14 000044EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   946                              <1> 
   947                              <1> getDTA:
   948 000044ED 488D1579BCFFFF      <1>     lea rdx, cmdFFBlock
   949                              <1>     return
    13                              <2> %%_ret:
    14 000044F4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   950                              <1> 
   951                              <1> resetIDTentries:
   952                              <1> ;Resets the IDT entries
   953 000044F5 488D159C020000      <1>     lea rdx, critErrorHandler
   954 000044FC 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
   955 00004500 B824250000          <1>     mov eax, 2524h
   956 00004505 CD21                <1>     int 21h
   957 00004507 488D157F010000      <1>     lea rdx, int23h
   958 0000450E 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
   959 00004512 B823250000          <1>     mov eax, 2523h
   960 00004517 CD21                <1>     int 21h
   961 00004519 488D15E2CFFFFF      <1>     lea rdx, appRet
   962 00004520 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
   963 00004524 B822250000          <1>     mov eax, 2522h
   964 00004529 CD21                <1>     int 21h
   965                              <1>     return
    13                              <2> %%_ret:
    14 0000452B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   966                              <1> 
   967                              <1> ;-------------------------------
   968                              <1> ; Environment utility functions
   969                              <1> ;-------------------------------
   970                              <1> 
   971                              <1> cmpEnvVar:
   972                              <1> ;Checks that we have found the environment variable we are looking for.
   973                              <1> ;Input: rsi -> Environment var to verify the name of
   974                              <1> ;       rdi -> Environment var name to compare against
   975                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
   976 0000452C 56                  <1>     push rsi
   977 0000452D 57                  <1>     push rdi
   978 0000452E 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs
   979                              <1> .lp:
   980 00004531 AC                  <1>     lodsb               ;Pick up from user string
   981 00004532 E8FDFCFFFF          <1>     call ucChar         ;Upper case it!
   982 00004537 3807                <1>     cmp byte [rdi], al  
   983 00004539 7509                <1>     jne .exit
   984 0000453B 3C3D                <1>     cmp al, "="         ;Are we at the end?
   985 0000453D 7405                <1>     je .exit
   986 0000453F 48FFC7              <1>     inc rdi
   987 00004542 EBED                <1>     jmp short .lp
   988                              <1> .exit:
   989 00004544 5F                  <1>     pop rdi
   990 00004545 5E                  <1>     pop rsi
   991                              <1>     return
    13                              <2> %%_ret:
    14 00004546 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   992                              <1> 
   993                              <1> checkEnvGoodAndGet:
   994                              <1> ;Gets the env ptr and checks that it is double null terminated.
   995                              <1> ;Output:
   996                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
   997                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
   998                              <1> ;           rsi -> Environment pointer
   999 00004547 50                  <1>     push rax
  1000 00004548 51                  <1>     push rcx
  1001 00004549 57                  <1>     push rdi
  1002 0000454A 4150                <1>     push r8
  1003 0000454C 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
  1004 00004550 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
  1005 00004553 741A                <1>     jz .badExit
  1006 00004555 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
  1007 00004558 C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
  1008                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
  1009 0000455B 31C0                <1>     xor eax, eax
  1010                              <1> .pathNulScan:
  1011 0000455D F2AE                <1>     repne scasb
  1012 0000455F 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
  1013 00004561 740C                <1>     jz .badExit
  1014 00004563 3807                <1>     cmp byte [rdi], al  ;Is char two null?
  1015 00004565 75F6                <1>     jne .pathNulScan    ;If not, keep searching
  1016 00004567 31C0                <1>     xor eax, eax
  1017 00004569 FFC0                <1>     inc eax ;Clear the ZF
  1018 0000456B 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
  1019                              <1> .badExit:
  1020 0000456F 4158                <1>     pop r8
  1021 00004571 5F                  <1>     pop rdi
  1022 00004572 59                  <1>     pop rcx
  1023 00004573 58                  <1>     pop rax
  1024                              <1>     return
    13                              <2> %%_ret:
    14 00004574 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1025                              <1> 
  1026                              <1> 
  1027                              <1> findEnvSpace:
  1028                              <1> ;Searches the environment for space, returns a pointer to the start of the 
  1029                              <1> ; free space in the pointer and a count of free space in the environment.
  1030                              <1> ;If count is zero, pointer is not to be used.
  1031                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
  1032 00004575 31C9                <1>     xor ecx, ecx
  1033 00004577 31C0                <1>     xor eax, eax    ;Clear eax too
  1034 00004579 51                  <1>     push rcx
  1035 0000457A E8C8FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
  1036 0000457F 59                  <1>     pop rcx
  1037                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004580 74(74)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1038 00004582 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
  1039 00004586 FFC9                <1>     dec ecx ;Make into a large counter
  1040 00004588 4889F7              <1>     mov rdi, rsi    
  1041                              <1> .endsearch:
  1042 0000458B F2AE                <1>     repne scasb ;Scan
  1043 0000458D 803F00              <1>     cmp byte [rdi], 0
  1044 00004590 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
  1045                              <1>     ;Here we are at the end of the environment
  1046 00004592 F7D9                <1>     neg ecx
  1047 00004594 FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
  1048 00004596 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
  1049 00004599 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
  1050 0000459C 29C8                <1>     sub eax, ecx
  1051 0000459E 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
  1052                              <1>     return
    13                              <2> %%_ret:
    14 000045A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1053                              <1> 
  1054                              <1> searchForEnvVar:
  1055                              <1> ;Gets the environment, and scans it for a string with the var specified.
  1056                              <1> ;Input: rdi -> Var name to look for.
  1057                              <1> ;Returns: CF=NC: rsi -> Env var in env.
  1058 000045A1 57                  <1>     push rdi
  1059 000045A2 51                  <1>     push rcx
  1060 000045A3 52                  <1>     push rdx
  1061 000045A4 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1062 000045A8 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
  1063                              <1> .varLp:
  1064 000045AB 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
  1065 000045AE E879FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1066 000045B3 7416                <1>     je .varFound
  1067 000045B5 31C0                <1>     xor eax, eax        ;Search for a null
  1068 000045B7 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1069 000045BA B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1070 000045BF F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1071 000045C1 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1072 000045C3 7405                <1>     je .varNotFound     ;If second null, no more env to search!
  1073 000045C5 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1074 000045C8 EBE1                <1>     jmp short .varLp    ;And scan again!
  1075                              <1> .varNotFound:
  1076 000045CA F9                  <1>     stc
  1077                              <1> .varFound:
  1078 000045CB 59                  <1>     pop rcx
  1079 000045CC 5A                  <1>     pop rdx
  1080 000045CD 5F                  <1>     pop rdi
  1081                              <1>     return
    13                              <2> %%_ret:
    14 000045CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1082                              <1> 
  1083                              <1> envFree:
  1084                              <1> ;Frees a variable from the environment, pulls the strings behind it up
  1085                              <1> ; zeros the rest of the environment, and returns a pointer to the first
  1086                              <1> ; free byte of the environment!
  1087                              <1> ;Input: rsi -> Variable to free.
  1088                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
  1089                              <1> ;        ecx = Number of free bytes in env
  1090 000045CF 4889F7              <1>     mov rdi, rsi
  1091 000045D2 31C0                <1>     xor eax, eax
  1092                              <1> .freeLp:
  1093 000045D4 803F00              <1>     cmp byte [rdi], 0
  1094 000045D7 7403                <1>     je .exitLp
  1095 000045D9 AA                  <1>     stosb
  1096 000045DA EBF8                <1>     jmp short .freeLp
  1097                              <1> .exitLp:
  1098                              <1> ;rdi points to the terminating null of the var we just deleted
  1099                              <1> ;rsi points to the start of the free space
  1100 000045DC 4887F7              <1>     xchg rsi, rdi   ;Swap em!
  1101 000045DF 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
  1102 000045E4 7504                <1>     jne .prepPullup
  1103 000045E6 31C0                <1>     xor eax, eax
  1104 000045E8 EB0E                <1>     jmp short .cleanEnv
  1105                              <1> .prepPullup:
  1106 000045EA 48FFC6              <1>     inc rsi         ;Go past the terminating null!
  1107                              <1> .pullUp:
  1108 000045ED AC                  <1>     lodsb
  1109 000045EE AA                  <1>     stosb
  1110 000045EF 84C0                <1>     test al, al ;Did we pick up a zero
  1111 000045F1 75FA                <1>     jne .pullUp ;If not, keep copying
  1112 000045F3 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
  1113 000045F6 75F5                <1>     jne .pullUp
  1114                              <1> ;We are at the end of the copy!
  1115                              <1> .cleanEnv:
  1116 000045F8 AA                  <1>     stosb   ;Store the famous second null
  1117 000045F9 48FFCF              <1>     dec rdi ;without incrementing it!!
  1118 000045FC E807000000          <1>     call getFreeSpace
  1119 00004601 31C0                <1>     xor eax, eax
  1120 00004603 51                  <1>     push rcx
  1121 00004604 F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
  1122 00004606 59                  <1>     pop rcx
  1123                              <1>     return
    13                              <2> %%_ret:
    14 00004607 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1124                              <1> 
  1125                              <1> getFreeSpace:
  1126                              <1> ;Output: ecx = Number of free bytes in the environment block
  1127 00004608 56                  <1>     push rsi
  1128 00004609 57                  <1>     push rdi
  1129 0000460A E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
  1130 0000460F 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1131 00004613 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
  1132 00004616 E805000000          <1>     call getEnvSize ;Get total block size
  1133 0000461B 29F9                <1>     sub ecx, edi    ;Get difference!
  1134 0000461D 5F                  <1>     pop rdi
  1135 0000461E 5E                  <1>     pop rsi
  1136                              <1>     return
    13                              <2> %%_ret:
    14 0000461F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1137                              <1> 
  1138                              <1> getEnvSize:
  1139                              <1> ;Gets the number of bytes in the environment allocation
  1140                              <1> ;Output: ecx = Number of bytes in the environment!
  1141 00004620 53                  <1>     push rbx
  1142 00004621 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
  1143 00004625 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
  1144 00004628 C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
  1145 0000462B 5B                  <1>     pop rbx
  1146                              <1>     return
    13                              <2> %%_ret:
    14 0000462C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1147                              <1> 
  1148                              <1> getPtrToEndOfEnv:
  1149                              <1> ;Gets ptr to end of the environment
  1150                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
  1151 0000462D 50                  <1>     push rax
  1152 0000462E 51                  <1>     push rcx
  1153 0000462F 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
  1154 00004633 31C0                <1>     xor eax, eax
  1155 00004635 31C9                <1>     xor ecx, ecx
  1156 00004637 FFC9                <1>     dec ecx
  1157                              <1> .lp:
  1158 00004639 F2AE                <1>     repne scasb
  1159 0000463B 3807                <1>     cmp byte [rdi], al
  1160 0000463D 75FA                <1>     jne .lp
  1161 0000463F 59                  <1>     pop rcx
  1162 00004640 58                  <1>     pop rax
  1163                              <1>     return
    13                              <2> %%_ret:
    14 00004641 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1164                              <1> 
  1165                              <1> growEnvBlock:
  1166                              <1> ;Attempts to grow the environment to store the new string. Will clean the
  1167                              <1> ; newly allocated 160 byte block of the environment.
  1168                              <1> ;Returns:   CF=NC - Environment grown ok!
  1169                              <1> ;           CF=CY & ZF=ZE - Environment at max size
  1170                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
  1171 00004642 50                  <1>     push rax
  1172 00004643 53                  <1>     push rbx
  1173 00004644 51                  <1>     push rcx
  1174 00004645 56                  <1>     push rsi
  1175 00004646 57                  <1>     push rdi
  1176 00004647 E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
  1177 0000464C E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
  1178 00004651 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1179 00004655 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
  1180 00004658 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
  1181 0000465E 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
  1182 00004664 7321                <1>     jae .tooLarge
  1183                              <1>     ;Here ZF must be NZ.
  1184 00004666 4150                <1>     push r8
  1185 00004668 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
  1186 0000466C B8004A0000          <1>     mov eax, 4A00h
  1187 00004671 CD21                <1>     int 21h
  1188 00004673 4158                <1>     pop r8
  1189 00004675 720A                <1>     jc .exit
  1190                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1191                              <1>     ; so we add 160 zeros to the count of bytes
  1192 00004677 81C1A0000000        <1>     add ecx, 0A0h
  1193 0000467D 31C0                <1>     xor eax, eax
  1194 0000467F F3AA                <1>     rep stosb
  1195                              <1> .exit:
  1196 00004681 5F                  <1>     pop rdi
  1197 00004682 5E                  <1>     pop rsi
  1198 00004683 59                  <1>     pop rcx
  1199 00004684 5B                  <1>     pop rbx
  1200 00004685 58                  <1>     pop rax
  1201                              <1>     return
    13                              <2> %%_ret:
    14 00004686 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1202                              <1> .tooLarge:
  1203 00004687 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1204 0000468A F9                  <1>     stc             ;Set CF
  1205 0000468B EBF4                <1>     jmp short .exit
    20                                  %include "./Source/int23h.asm"
     1                              <1> int23h:
     2 0000468D F60509BAFFFF80      <1>     test byte [statFlg1], inLdr     ;Are we loading?
     3 00004694 7411                <1>     jz .notLoading
     4 00004696 F60500BAFFFF40      <1>     test byte [statFlg1], inLdrDT   ;Are we in date/time?
     5 0000469D 7439                <1>     jz  .inInt23                    ;IRETQ if not.
     6                              <1>     ;Else, we pretend nothing was typed in and proceed.
     7 0000469F 66C74201000D        <1>     mov word [rdx + 1], 0D00h       ;Place a 0 chars cnt and CR in the buffer
     8 000046A5 EB12                <1>     jmp short .retFromDosCall       ;And return directly to DOS
     9                              <1> .notLoading:
    10 000046A7 F605EFB9FFFF02      <1>     test byte [statFlg1], inCtrlC   ;In this handler already?
    11 000046AE 742A                <1>     jz .notNested                   ;If not, handle!
    12                              <1> ;We are in this CTRL+C, check the system call that we are interrupting...
    13                              <1> ;If a CON call, we are in Terminate Batch Job msg. Set CF to indicate
    14                              <1> ; to US that the user CTRL+C'd the Terminate Batch Job message! Return
    15                              <1> ; from DOS directly, do not reenter CON call.
    16 000046B0 84E4                <1>     test ah, ah
    17 000046B2 7424                <1>     jz .inInt23 
    18 000046B4 80FC0C              <1>     cmp ah, 0Ch
    19 000046B7 771F                <1>     ja .inInt23
    20                              <1> .retFromDosCall:
    21                              <1> ;Go past the Int 23h stack frame to the entry to Int 21h stack frame
    22 000046B9 50                  <1>     push rax
    23 000046BA 488D0512000000      <1>     lea rax, .i23Bounce
    24 000046C1 4889442408          <1>     mov qword [rsp + 8], rax        ;Store as ret add
    25 000046C6 31C0                <1>     xor eax, eax
    26 000046C8 668CC8              <1>     mov ax, cs
    27 000046CB 4889442410          <1>     mov qword [rsp + 2*8], rax      ;Store the segment too
    28 000046D0 58                  <1>     pop rax
    29 000046D1 48CF                <1>     iretq   ;Iretq to the next instruction instead of DOS :)
    30                              <1> .i23Bounce:
    31 000046D3 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on stack frame flags!
    32                              <1> .inInt23:
    33 000046D8 48CF                <1>     iretq
    34                              <1> .notNested:
    35                              <1> ;Main body of the CRTL+C handler! 
    36 000046DA 800DBCB9FFFF02      <1>     or byte [statFlg1], inCtrlC     ;Set that we are in CTRL+C
    37 000046E1 F605B5B9FFFF04      <1>     test byte [statFlg1], inSingle  ;Are we in single command mode?
    38 000046E8 7509                <1>     jnz .skipReset                  
    39                              <1>     ;Now reset the disk subsystem to flush buffers appropriately,
    40                              <1>     ; in case of open files and/or we are hooked by someone who doesn't
    41                              <1>     ; want to return thru dos.
    42 000046EA 50                  <1>     push rax
    43 000046EB B8000D0000          <1>     mov eax, 0D00h  ;Reset Disk system!
    44 000046F0 CD21                <1>     int 21h
    45 000046F2 58                  <1>     pop rax
    46                              <1> .skipReset:
    47 000046F3 F605A3B9FFFF08      <1>     test byte [statFlg1], inBatch   ;Are we processing a batch file?
    48 000046FA 744E                <1>     jz .notBat
    49 000046FC F6059AB9FFFF04      <1>     test byte [statFlg1], inSingle  ;Batch in a single command?
    50 00004703 7545                <1>     jnz .notBat                     ;No batch cleanup, kill ourselves!
    51                              <1> ;CTRLC in a batch file will always abort the current command being 
    52                              <1> ; executed. CTRLC in a batch file is only for checking if we want to 
    53                              <1> ; terminate the whole batch procedure or not!
    54 00004705 E805020000          <1>     call errSwapHdls    ;Swap STDIO back ONLY ON BATCH Error
    55                              <1> .ynLp:
    56 0000470A 488D1536C2FFFF      <1>     lea rdx, batFail
    57 00004711 E800F9FFFF          <1>     call printString
    58 00004716 488D153CBAFFFF      <1>     lea rdx, batYNstr
    59 0000471D B80A0C0000          <1>     mov eax, 0C0Ah      ;Get clean buffered input!
    60 00004722 CD21                <1>     int 21h
    61 00004724 721D                <1>     jc .killBat         ;If we CTRL+C during this call, kill batch!
    62 00004726 8A0530BAFFFF        <1>     mov al, byte [batYNstr + 3]
    63 0000472C E803FBFFFF          <1>     call ucChar         ;UC using DOS
    64 00004731 3C59                <1>     cmp al, "Y"
    65 00004733 740E                <1>     je .killBat
    66 00004735 3C4E                <1>     cmp al, "N"
    67 00004737 75D1                <1>     jne .ynLp
    68                              <1> .endBat:
    69                              <1> ;Tries to abort the Command interpreter, fails and 
    70                              <1> ; our internal state will proceed with batch processing. Doing this 
    71                              <1> ; ensures the command being interrupted is cancelled.
    72 00004739 E8D1F8FFFF          <1>     call printCRLF
    73 0000473E E945000000          <1>     jmp .exitBat    ;Clears errRetHdls and in ctrlc flag and exits!
    74                              <1> .killBat:   ;Now we need to terminate the batch file too.
    75 00004743 E891D4FFFF          <1>     call batCleanup
    76 00004748 EBEF                <1>     jmp short .endBat   ;Now CRLF and exit!
    77                              <1> .notBat:
    78 0000474A 50                  <1>     push rax        ;Save rax, ah contains call we are in that ^C'ed
    79 0000474B 53                  <1>     push rbx
    80 0000474C B800510000          <1>     mov eax, 5100h  ;Get current PSP in rbx
    81 00004751 CD21                <1>     int 21h
    82 00004753 58                  <1>     pop rax
    83 00004754 483B1DB4B8FFFF      <1>     cmp rbx, qword [pspPtr] ;Was the task us?
    84 0000475B 5B                  <1>     pop rbx
    85 0000475C 752F                <1>     jne .exit       ;If not, then immediately abort it!
    86 0000475E F605C6B8FFFFFF      <1>     test byte [permaSwitch], -1 ;If not permanent, skip parent PSP swap
    87 00004765 7516                <1>     jnz .noJuggle   ;Avoid setting "real parent"
    88                              <1>     ;Else, we juggle parent PSP's. This is done when /P is not specified
    89 00004767 50                  <1>     push rax
    90 00004768 53                  <1>     push rbx
    91 00004769 488B05A7B8FFFF      <1>     mov rax, qword [realParent]
    92 00004770 488B1D98B8FFFF      <1>     mov rbx, qword [pspPtr]
    93 00004777 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
    94 0000477B 5B                  <1>     pop rbx
    95 0000477C 58                  <1>     pop rax
    96                              <1> .noJuggle:
    97 0000477D 66813D19B9FFFFFFFF  <1>     cmp word [errHdls], -1  ;If these are not -1, return to normal!
    98 00004786 7405                <1>     je .exit
    99                              <1> .exitBat:
   100 00004788 E89F010000          <1>     call errRetHdls 
   101                              <1> .exit:
   102 0000478D 802509B9FFFFFD      <1>     and byte [statFlg1], ~inCtrlC
   103                              <1> .exitIn:
   104 00004794 F9                  <1>     stc     ;Set CF to kill the task
   105 00004795 C20800              <1>     ret 8   ;Return and adjust rsp stack to indicate we wanna kill task
   106                              <1> ;All we need is that the stack pointer is not at the address we had it
   107                              <1> ; at when we entered DOS to trigger a CF check! So anything from ret 8 to
   108                              <1> ; ret 4*8 to remove CS, RFLAGS, SS, RSP is acceptable and safe!
    21                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00004798 53                  <1>     push rbx
    25 00004799 51                  <1>     push rcx
    26 0000479A 52                  <1>     push rdx
    27 0000479B 57                  <1>     push rdi
    28 0000479C 56                  <1>     push rsi
    29 0000479D E86D010000          <1>     call errSwapHdls
    30 000047A2 FC                  <1>     cld         ;Make String ops go forward
    31 000047A3 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 000047A6 488D153DC1FFFF      <1>     lea rdx, crlf
    33 000047AD E864F8FFFF          <1>     call printString
    34                              <1> 
    35 000047B2 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    36                              <1> ;    cmp edi, 0Fh     ;Is this special case error 15h?
    37                              <1> ;    jne .notError15
    38                              <1> ; Need to do Extended Error call to get the ptr to the volume label.
    39                              <1> ; Disk driver doesnt currently update the volume label in the BPB and doesn't
    40                              <1> ; place the volume label in the field in the driver block, but DOS assumes it 
    41                              <1> ; does. Once that is implemented, I will activate this section of code!
    42                              <1> .notError15:
    43 000047B8 B90C000000          <1>     mov ecx, 0Ch
    44 000047BD 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    45 000047BF 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    46 000047C2 480FB7FF            <1>     movzx rdi, di
    47 000047C6 4889FA              <1>     mov rdx, rdi    ;Copy error code
    48 000047C9 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    49 000047CD 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    50 000047D0 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    51 000047D3 488D156CC7FFFF      <1>     lea rdx, errorMsgTable
    52 000047DA 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    53 000047DE E833F8FFFF          <1>     call printString     ;Call DOS to print first part of message
    54                              <1> 
    55 000047E3 488D156EC8FFFF      <1>     lea rdx, readMsg
    56 000047EA 488D3D76C8FFFF      <1>     lea rdi, writeMsg
    57 000047F1 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    58 000047F4 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    59 000047F8 E819F8FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
    60                              <1> 
    61 000047FD F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    62 00004800 0F85EF000000        <1>     jnz .charError
    63                              <1> ;Disk error continues here
    64 00004806 488D1544C8FFFF      <1>     lea rdx, drvMsg ;Drive message
    65 0000480D E804F8FFFF          <1>     call printString
    66 00004812 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    67 00004814 80C241              <1>     add dl, "A" ;Add ASCII code
    68 00004817 B402                <1>     mov ah, 02h ;Print char in dl
    69 00004819 CD21                <1>     int 21h
    70                              <1> .userInput:
    71 0000481B E8EFF7FFFF          <1>     call printCRLF  ;Print new line
    72                              <1> ;Abort, Retry, Ignore, Fail is word order
    73                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    74                              <1> .userAbort:
    75                              <1> ;Abort is always an option
    76 00004820 488D154FC8FFFF      <1>     lea rdx, abortMsg
    77 00004827 E8EAF7FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
    78                              <1> .userRetry:
    79 0000482C F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    80 0000482F 7418                <1>     jz .userIgnore    ;If clear, dont print message
    81 00004831 488D1556C8FFFF      <1>     lea rdx, betweenMsg
    82 00004838 E8D9F7FFFF          <1>     call printString
    83 0000483D 488D153FC8FFFF      <1>     lea rdx, retryMsg
    84 00004844 E8CDF7FFFF          <1>     call printString
    85                              <1> .userIgnore:
    86 00004849 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    87 0000484C 7418                <1>     jz .userFail
    88 0000484E 488D1539C8FFFF      <1>     lea rdx, betweenMsg
    89 00004855 E8BCF7FFFF          <1>     call printString
    90 0000485A 488D151BC8FFFF      <1>     lea rdx, ignoreMsg
    91 00004861 E8B0F7FFFF          <1>     call printString
    92                              <1> .userFail:
    93 00004866 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    94 00004869 7418                <1>     jz .userMsgEnd
    95 0000486B 488D151CC8FFFF      <1>     lea rdx, betweenMsg
    96 00004872 E89FF7FFFF          <1>     call printString
    97 00004877 488D150BC8FFFF      <1>     lea rdx, failMsg
    98 0000487E E893F7FFFF          <1>     call printString
    99                              <1> .userMsgEnd:
   100 00004883 488D1507C8FFFF      <1>     lea rdx, endMsg
   101 0000488A E887F7FFFF          <1>     call printString
   102                              <1> ;Get user input now 
   103 0000488F 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   104 00004891 488D3DFCC7FFFF      <1>     lea rdi, i24Resp ;Go to start of string
   105 00004898 B8010C0000          <1>     mov eax, 0C01h ;Flush and get STDIN without Console Echo
   106 0000489D CD21                <1>     int 21h ;Get char in al
   107 0000489F 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   108 000048A1 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   109 000048A3 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   110                              <1> .uip1:
   111 000048A5 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   112 000048A6 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   113 000048A8 FFC1                <1>     inc ecx
   114 000048AA 81F904000000        <1>     cmp ecx, 4
   115 000048B0 75F3                <1>     jne .uip1
   116 000048B2 E964FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   117                              <1> .validInput:
   118 000048B7 E853F7FFFF          <1>     call printCRLF   ;Note the input was accepted
   119 000048BC 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   120                              <1> ;Now check if the input is permitted
   121 000048BE 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   122 000048C0 7427                <1>     je .cehExit
   123 000048C2 84C0                <1>     test al, al ;Check if 0 => Ignore
   124 000048C4 740F                <1>     je .viIgnore
   125 000048C6 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   126 000048C8 7416                <1>     je .viRetry
   127                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   128 000048CA F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   129 000048CD 0F8448FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   130 000048D3 EB14                <1>     jmp short .cehExit
   131                              <1> .viIgnore:
   132 000048D5 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   133 000048D8 0F843DFFFFFF        <1>     jz .userInput
   134 000048DE EB09                <1>     jmp short .cehExit
   135                              <1> .viRetry:
   136 000048E0 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   137 000048E3 0F8432FFFFFF        <1>     jz .userInput
   138                              <1> .cehExit:
   139 000048E9 E83E000000          <1>     call errRetHdls
   140 000048EE 5E                  <1>     pop rsi
   141 000048EF 5F                  <1>     pop rdi
   142 000048F0 5A                  <1>     pop rdx
   143 000048F1 59                  <1>     pop rcx
   144 000048F2 5B                  <1>     pop rbx
   145 000048F3 48CF                <1>     iretq
   146                              <1> .charError:
   147 000048F5 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   148 000048FA 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   149                              <1> .ce1:
   150 00004901 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   151 00004902 88C2                <1>     mov dl, al  ;Move char into dl
   152 00004904 B402                <1>     mov ah, 02h
   153 00004906 CD21                <1>     int 21h ;Print char
   154 00004908 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   155 0000490A E90CFFFFFF          <1>     jmp .userInput
   156                              <1> 
   157                              <1> 
   158                              <1> errSwapHdls:
   159                              <1> ;Swaps STDIO to STDERR
   160                              <1> ;Start by tmporarily moving the stderr handler into stdio
   161                              <1> ;In principle dangerous, but since we cannot exit our routine, its oki.
   162 0000490F 50                  <1>     push rax
   163 00004910 53                  <1>     push rbx
   164 00004911 E833000000          <1>     call getJftPtr  ;Get the jft pointer into rbx. Saves rax
   165 00004916 0FB703              <1>     movzx eax, word [rbx]       ;Get STDIO into ax
   166 00004919 6689057FB7FFFF      <1>     mov word [errHdls], ax      ;Save em
   167 00004920 0FB64302            <1>     movzx eax, byte [rbx + 2]   ;Now get the STDERR SFTndx in al
   168 00004924 88C4                <1>     mov ah, al                  ;Move STDERR hdl into ah too 
   169 00004926 668903              <1>     mov word [rbx], ax          ;And set STDIO to STDERR
   170 00004929 5B                  <1>     pop rbx
   171 0000492A 58                  <1>     pop rax
   172                              <1>     return
    13                              <2> %%_ret:
    14 0000492B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   173                              <1> 
   174                              <1> errRetHdls:
   175                              <1> ;Returns STDIO from STDERR.
   176 0000492C 50                  <1>     push rax
   177 0000492D 53                  <1>     push rbx
   178 0000492E E816000000          <1>     call getJftPtr  ;Get ptr in rbx. Preserves rax.
   179 00004933 0FB70565B7FFFF      <1>     movzx eax, word [errHdls]
   180 0000493A 66C7055CB7FFFFFFFF  <1>     mov word [errHdls], -1  ;Reset values
   181 00004943 668903              <1>     mov word [rbx], ax      ;Store the handle word back
   182 00004946 5B                  <1>     pop rbx
   183 00004947 58                  <1>     pop rax
   184                              <1>     return
    13                              <2> %%_ret:
    14 00004948 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   185                              <1> 
   186                              <1> getJftPtr:
   187                              <1> ;Preserves all registers except rbx.
   188                              <1> ;Output: rbx -> JFT of current task
   189 00004949 50                  <1>     push rax        ;Save rax
   190 0000494A B800510000          <1>     mov eax, 5100h  ;Get current PSP in rbx
   191 0000494F CD21                <1>     int 21h
   192 00004951 58                  <1>     pop rax
   193 00004952 66817B4E1400        <1>     cmp word [rbx + psp.jftSize], 20    ;If >20, pspjft is ptr to real jft
   194 00004958 7605                <1>     jbe .pspJftExit
   195 0000495A 488B5B2A            <1>     mov rbx, qword [rbx + psp.externalJFTPtr]   ;Get ptr to jft from the psp
   196                              <1>     return
    13                              <2> %%_ret:
    14 0000495E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   197                              <1> .pspJftExit:
   198 0000495F 488D5B2A            <1>     lea rbx, qword [rbx + psp.jobFileTbl]       ;Make into a ptr to jft in psp
   199                              <1>     return
    13                              <2> %%_ret:
    14 00004963 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                                  endOfAlloc: ;End of alloc
    23                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    24                                  Segment transient align=1 follows=.data
    25                                  ;This segment always gets ejected post load
    26                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D15F7010000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00000015 800D(9D000000)80    <1>     or byte [statFlg1], inLdr  ;Ok now we start our special work
    15 0000001C 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    16 00000023 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    17 00000027 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    18 0000002B 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    19                              <1> ;Setup Int 22h, Int 23h and Int 24h
    20 00000032 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    21 00000036 488905(2C000000)    <1>     mov qword [parentInt22], rax
    22 0000003D E8(F5440000)        <1>     call resetIDTentries
    23                              <1> ;Get a pointer to DOS Sysvars
    24 00000042 B452                <1>     mov ah, 52h ;Get sysvars
    25 00000044 CD21                <1>     int 21h
    26 00000046 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    27                              <1> ;Call for simple internationalisation data
    28 0000004D B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    29 00000052 CD21                <1>     int 21h
    30 00000054 3CFF                <1>     cmp al, -1
    31 00000056 7412                <1>     je .skipSwitch
    32 00000058 8815(2A000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    33 0000005E 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    34 00000061 7507                <1>     jne .skipSwitch
    35 00000063 C605(29000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    36                              <1> .skipSwitch:
    37 0000006A B800380000          <1>     mov eax, 3800h  ;Get current country data
    38 0000006F 488D15(34000000)    <1>     lea rdx, ctryData
    39 00000076 CD21                <1>     int 21h ;Write the data to the internal country table
    40                              <1> ;Now determine if this is the master copy of COMMAND.COM
    41                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    42 00000078 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    43 0000007D CD21                <1>     int 21h
    44 0000007F 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    45 00000082 B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    46 00000087 CD21                <1>     int 21h
    47 00000089 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    48 0000008C 0F8582000000        <1>     jne .skipMaster
    49                              <1> ;Ok so we are master command.com
    50                              <1> ;Now make myself the real parent
    51 00000092 C605(2B000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    52 00000099 4C8905(17000000)    <1>     mov qword [realParent], r8
    53                              <1> ;Set current Drive in COMSPEC
    54 000000A0 B800190000          <1>     mov eax, 1900h ;Get current Drive
    55 000000A5 CD21                <1>     int 21h
    56 000000A7 0441                <1>     add al, "A"
    57 000000A9 8805(A0100000)      <1>     mov byte [comspecEvar.cspec], al
    58                              <1> ;Set Int 2Eh up
    59 000000AF 488D15(821A0000)    <1>     lea rdx, int2Eh
    60 000000B6 B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    61 000000BB CD21                <1>     int 21h
    62                              <1> ;Now, open and parse AUTOEXEC.BAT. Build new Master Environment here.
    63                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    64 000000BD BB0A000000          <1>     mov ebx, 10 ;Allocate 160 bytes
    65 000000C2 B800480000          <1>     mov eax, 4800h
    66 000000C7 CD21                <1>     int 21h
    67 000000C9 0F8244FFFFFF        <1>     jc .exitBad
    68                              <1> ;Set master environment as mine
    69 000000CF 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    70 000000D3 488D35(98100000)    <1>     lea rsi, masterEnv
    71 000000DA 4889C7              <1>     mov rdi, rax
    72 000000DD B91E000000          <1>     mov ecx, menv_len
    73 000000E2 F3A4                <1>     rep movsb   ;Copy the chars over!
    74                              <1> 
    75 000000E4 488D15(EA080000)    <1>     lea rdx, crlf
    76 000000EB B409                <1>     mov ah, 09h
    77 000000ED CD21                <1>     int 21h
    78 000000EF 800D(9D000000)40    <1>     or byte [statFlg1], inLdrDT
    79 000000F6 E8(0B2D0000)        <1>     call time
    80 000000FB E8(5D2B0000)        <1>     call date
    81 00000100 8025(9D000000)BF    <1>     and byte [statFlg1], ~inLdrDT
    82 00000107 488D15(EA080000)    <1>     lea rdx, crlf
    83 0000010E B409                <1>     mov ah, 09h
    84 00000110 CD21                <1>     int 21h
    85 00000112 EB2E                <1>     jmp short .printInit
    86                              <1> .skipMaster:    
    87                              <1> ;We now search for the master environment!!
    88                              <1>     ;Walk the parentPSP chain until we find a PSP which is its own
    89                              <1>     ; parent. This is the previous master command interpreter! This means
    90                              <1>     ; that non-master COMMAND.COM instances are not their own parents! We 
    91                              <1>     ; then set our environment ptr in the PSP to the master environment.
    92 00000114 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
    93 0000011B 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
    94 00000123 0FB605(2A000000)    <1>     movzx eax, byte [switchChar]
    95 0000012A F2AE                <1>     repne scasb
    96 0000012C 67E313              <1>     jecxz .printInit
    97 0000012F 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
    98 00000132 E8(34420000)        <1>     call ucChar
    99 00000137 3C50                <1>     cmp al, "P" ;Is it permanent switch?
   100 00000139 7507                <1>     jne .printInit
   101 0000013B C605(2B000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
   102                              <1> .printInit:
   103 00000142 488D1D(64490000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
   104                              <1> ;Finish by printing INIT string.
   105 00000149 53                  <1>     push rbx
   106 0000014A 488D1541000000      <1>     lea rdx, initString
   107 00000151 B409                <1>     mov ah, 09h
   108 00000153 CD21                <1>     int 21h ;Print init string
   109 00000155 E8(49360000)        <1>     call version.printVersionNumber
   110 0000015A 488D1567000000      <1>     lea rdx, initString2
   111 00000161 B409                <1>     mov ah, 09h
   112 00000163 CD21                <1>     int 21h ;Print init string
   113 00000165 5B                  <1>     pop rbx
   114                              <1>     ;Now we add the stack to the alloc and paragraph align
   115 00000166 4881C340060000      <1>     add rbx, stackSize
   116 0000016D 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   117 00000174 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   118 00000178 48C1E304            <1>     shl rbx, 4
   119 0000017C 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   120 0000017F 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   121 00000186 8025(9D000000)7F    <1>     and byte [statFlg1], ~inLdr    ;Special work complete :-)
   122 0000018D E9(B6100000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   123                              <1> ;Loader Data here
   124                              <1> initString: 
   125 00000192 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   125 0000019B 66696320436F6D7075- <1>
   125 000001A4 746572205265736561- <1>
   125 000001AD 726368285229205343- <1>
   125 000001B6 502F444F5328522920- <1>
   125 000001BF 56657273696F6E2024  <1>
   126                              <1> initString2:
   127 000001C8 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",CR,LF,"$"
   127 000001D1 202020284329436F70- <1>
   127 000001DA 797269676874205363- <1>
   127 000001E3 69656E746966696320- <1>
   127 000001EC 436F6D707574657220- <1>
   127 000001F5 526573656172636820- <1>
   127 000001FE 323032342E0D0A24    <1>
   128 00000206 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   128 0000020F 20444F532076657273- <1>
   128 00000218 696F6E0D0A24        <1>
    27                                  
    28                                  stackSize equ 200*8    ;200 QWORD stack
    28          ------------------       info: assembly required 1+6+2 passes

