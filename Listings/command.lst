     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    57 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    58                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    59                              <1> ; another, we save the number of chars to skip to that deep level).
    60                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    61                              <1> ; Only affects for SUBST drives, not JOIN
    62                              <1> ; Flags: Bit 15 set = Network drive
    63                              <1> ;        Bit 14 set = Physical drive
    64                              <1> ;        Bit 13 set = JOIN'ed drive
    65                              <1> ;        Bit 12 set = SUBST'ed drive
    66                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    67                              <1> endstruc
    68                              <1> ;CDS equates
    69                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    70                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    71                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    72                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    73                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    74                              <1> ;------------------------------------------------------------------------;
    75                              <1> ; The SFT is a way to allow applications to open file handles to files 
    76                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    77                              <1> ; under the first header, and then a second header will be linked to the 
    78                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    79                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    80                              <1> ; using the FCBS= command. Default FCBS=5.
    81                              <1> ;
    82                              <1> ; A file handle describes the file, and the location within the file that
    83                              <1> ; we are reading. The file handle can be manipulated without the file
    84                              <1> ; being in memory, thus allowing the user to access data without needing 
    85                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    86                              <1> ; accessing devices, by treating them as files with their drivers 
    87                              <1> ; responding and translating the manipulations of the file handle itself.
    88                              <1> ; Neither the driver nor the application should see or use the SFT for
    89                              <1> ; the handle, as it is subject to change (and will change when file 
    90                              <1> ; sharing provisions are included). The DOS will make requests to the 
    91                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    92                              <1> ; track of the information in the SFT entry for that handle. 
    93                              <1> ;
    94                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    95                              <1> ; can point to the same file. It all depends on what the applications 
    96                              <1> ; want to do with the File.
    97                              <1> ;
    98                              <1> ; !!!!IMPORTANT!!!!
    99                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   100                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   101                              <1> ;
   102                              <1> ;Each SFT may look like this:
   103                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   104                              <1> ;            |                |
   105                              <1> ;       wNumFiles*sft    wNumFiles*sft
   106                              <1> ;
   107                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   108                              <1> ; System FCBs.
   109                              <1> ;
   110                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   111                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   112                              <1> ;
   113                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   114                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   115                              <1> ;------------------------------------------------------------------------;
   116                              <1> struc sfth   ;System file table header
   117                              <1> ; This is the SFT header.
   118                              <1> ; This structure comes before the start of the first file in the array/table.
   119 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   120 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   121                              <1> endstruc
   122                              <1> 
   123                              <1> struc sft
   124                              <1> ;This is the file struc itself
   125 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   126 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   127 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   128 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   129 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   130 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   131 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   132 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   133 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   134 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   135 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   136 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   137 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   138 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   139 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   140 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   141 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   142 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   143 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   144                              <1> ;                           0 means no record
   145                              <1> endstruc
   146                              <1> ;Open Mode equates
   147                              <1> ;Access modes   Bits[2:0]
   148                              <1> ReadAccess      equ 0h
   149                              <1> WriteAccess     equ 1h
   150                              <1> RWAccess        equ 2h
   151                              <1> ;Bit 3 reserved 0
   152                              <1> ;Sharing modes  Bits[6:4]
   153                              <1> CompatShare     equ 0h
   154                              <1> denyRWShare     equ 10h
   155                              <1> denyWriteShare  equ 20h
   156                              <1> denyReadShare   equ 30h
   157                              <1> denyNoneShare   equ 40h
   158                              <1> netFCBShare     equ 70h
   159                              <1> noInherit       equ 80h
   160                              <1> ;Bits 8-12 reserved 0
   161                              <1> 
   162                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   163                              <1> ;Buffering on writes
   164                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   165                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   166                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   167                              <1> ;Attribute Byte
   168                              <1> readOnlyFile    equ 1h
   169                              <1> hiddenFile      equ 2h
   170                              <1> systemFile      equ 4h
   171                              <1> volumeLabel     equ 8h
   172                              <1> directoryFile   equ 10h ;Directory entry
   173                              <1> archiveFile     equ 20h
   174                              <1> ;Device Info equates
   175                              <1> ;For a block device, bits [5:0] contain the drive number
   176                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   177                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   178                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   179                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   180                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   181                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   182                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   183                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   184                              <1> devCharDev      equ 80h ;If set, it is a char device!
   185                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   186                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   187                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   188                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   189                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   190                              <1>  
   191                              <1> ;------------------------------------------------------------------------;
   192                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   193                              <1> ; to an internal buffer, and then copying it to the specified location
   194                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   195                              <1> ; another request for the same sector from the same device is made, so 
   196                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   197                              <1> ; size, selected according to the largest detected sector size during 
   198                              <1> ; the initial loadup.
   199                              <1> ;
   200                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   201                              <1> ;
   202                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   203                              <1> ;------------------------------------------------------------------------;
   204                              <1> 
   205                              <1> struc bufferHdr
   206 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   207 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   208 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   209 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   210 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   211 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   212 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   213 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   214 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   215                              <1>     .dataarea:             ;Points to the start of the data area
   216                              <1> endstruc
   217                              <1> ;Buffer Flag equates
   218                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   219                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   220                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   221                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   222                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   223                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   224                              <1> ;Note! A buffer is marked as referenced only when the application 
   225                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   226                              <1> ;------------------------------------------------------------------------;
   227                              <1> ; Memory control block for each memory arena
   228                              <1> ;------------------------------------------------------------------------;
   229                              <1> struc mcb
   230 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   231 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   232 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   233 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   234                              <1>     .program:
   235                              <1> endstruc
   236                              <1> ;MCB equates
   237                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   238                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   239                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   240                              <1> mcbMarkCtn      equ "M"
   241                              <1> mcbMarkEnd      equ "Z"
   242                              <1> 
   243                              <1> memFirstFit     equ 0   ;First free block goes to application
   244                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   245                              <1> memLastFit      equ 2   ;Last free block goes to application
   246                              <1> 
   247                              <1> ;Owner = Para aligned address => Owning application PSP
   248                              <1> ;...To consider...
   249                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   250                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   251                              <1> ;------------------------------------------------------------------------;
   252                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   253                              <1> ; following order, thus allowing for return values to be placed in the 
   254                              <1> ; registers by accessing the caller register stack frame.
   255                              <1> ;------------------------------------------------------------------------;
   256                              <1> struc callerFrame
   257 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   258 00000008 ????????????????    <1>     .rbx    resq 1    
   259 00000010 ????????????????    <1>     .rcx    resq 1
   260 00000018 ????????????????    <1>     .rdx    resq 1
   261 00000020 ????????????????    <1>     .rsi    resq 1
   262 00000028 ????????????????    <1>     .rdi    resq 1
   263 00000030 ????????????????    <1>     .rbp    resq 1
   264 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   265 00000040 ????????????????    <1>     .r9     resq 1
   266                              <1> ;Pushed by Processor when invoked via Interrupt
   267 00000048 ????????????????    <1>     .rip    resq 1
   268 00000050 ????????????????    <1>     .cs     resq 1
   269 00000058 ????????????????    <1>     .flags  resq 1
   270                              <1> endstruc
   271                              <1> 
   272                              <1> struc dpl
   273                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   274                              <1> ; server calls
   275 00000000 ????????????????    <1>     .rax    resq 1
   276 00000008 ????????????????    <1>     .rbx    resq 1
   277 00000010 ????????????????    <1>     .rcx    resq 1
   278 00000018 ????????????????    <1>     .rdx    resq 1
   279 00000020 ????????????????    <1>     .rsi    resq 1
   280 00000028 ????????????????    <1>     .rdi    resq 1
   281 00000030 ????????????????    <1>     .r8     resq 1
   282 00000038 ????????????????    <1>     .r9     resq 1
   283 00000040 ????????????????    <1>     .align  resq 1
   284 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   285 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   286                              <1> endstruc
   287                              <1> 
   288                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   289 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   290 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   291 00000010 ????????????????    <1>     .newSFTVal      resq 1
   292 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   293 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   294 00000028 ????????????????    <1>     .newLastdrive   resq 1
   295 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   296 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   297 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   298 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   299 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   300 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   301 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   302                              <1> endstruc
   303                              <1> 
   304                              <1> struc filename
   305                              <1> ;8.3 File name struct
   306 00000000 ????????????????    <1>     .fName  resb 8
   307 00000008 ??????              <1>     .fExt   resb 3
   308                              <1> endstruc
   309                              <1> 
   310                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   311 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   312 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   313 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   314 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   315 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   316 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   317 00000016 ????                <1>     .fileTime   resw 1  ;File time
   318 00000018 ????                <1>     .fileDate   resw 1  ;File date
   319 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   320 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   321                              <1> endstruc
   322                              <1> 
   323                              <1> struc psp
   324 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   325 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   326 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   327 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   328 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   329 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   330 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   331                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   332 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   333 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   334 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   335 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   336 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   337 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   338 0000005B ??                  <1>                 resb 1  ;Reserved byte
   339                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   340                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   341                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   342                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   343                              <1> ; always used and xtraHdlSz.
   344                              <1> ;Will need to add two SYSCALLS for future expansion:
   345                              <1> ;       1) Get Program Environment Pointer
   346                              <1> ;       2) Get Command Line arguments pointer
   347                              <1> ;The below are in the same place as in DOS.
   348                              <1>     .cmdLineArgPtr: ;Symbol for future use
   349 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   350 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   351                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   352 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   353 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   354                              <1> endstruc
   355                              <1> 
   356                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   357                              <1> 
   358                              <1> struc clkStruc
   359 00000000 ????                <1>     .dateWord   resw 1
   360 00000002 ??                  <1>     .minutes    resb 1
   361 00000003 ??                  <1>     .hours      resb 1
   362 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   363 00000005 ??                  <1>     .seconds    resb 1
   364                              <1> endstruc
   365                              <1> 
   366                              <1> struc countryStruc
   367 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   368                              <1>                         ;0 = month day year hh:mm:ss
   369                              <1>                         ;1 = day month year hh:mm:ss
   370                              <1>                         ;2 = year month day hh:mm:ss
   371 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   372 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   373 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   374 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   375 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   376 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   377                              <1>                         ;0 = Symbol leads, without space
   378                              <1>                         ;1 = Symbol follows, without space
   379                              <1>                         ;2 = Symbol leads, one space
   380                              <1>                         ;3 = Symbol follows, one space
   381                              <1>                         ;4 = Symbol replace decimal separator
   382 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   383 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   384 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   385 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   386 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   387                              <1> endstruc
   388                              <1> 
   389                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   390                              <1> ;for a space of 64Gb
   391                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   392                              <1> dosLowBase  equ 600h    ;Low load address
   393                              <1> 
   394                              <1> ;Critical Error AH bitfield equates
   395                              <1> critRead    equ 0h
   396                              <1> critWrite   equ 1h
   397                              <1> critDOS     equ 0h
   398                              <1> critFAT     equ 2h
   399                              <1> critDir     equ 4h
   400                              <1> critData    equ 6h
   401                              <1> critFailOK  equ 8h
   402                              <1> critRetryOK equ 10h
   403                              <1> critIgnorOK equ 20h
   404                              <1> critCharDev equ 80h
   405                              <1> 
   406                              <1> critIgnore  equ 0
   407                              <1> critRetry   equ 1
   408                              <1> critAbort   equ 2
   409                              <1> critFail    equ 3
   410                              <1> 
   411                              <1> ;MISC ASCII control chars
   412                              <1> NUL equ 00h ;^@         | ASCII Null
   413                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   414                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   415                              <1> BEL equ 07h ;^G         | ASCII Bell
   416                              <1> BSP equ 08h ;^H         | ASCII Backspace
   417                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   418                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   419                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   420                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   421                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   422                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   423                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   424                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   425                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   426                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   427                              <1> SPC equ 20h ;Printable  | ASCII Space
   428                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   429                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   430                              <1> 
   431                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   432                              <1> ;Extended Ascii Codes
   433                              <1> eF1     equ 3Bh ;F1 second byte
   434                              <1> eF2     equ 3Ch ;F2 second byte
   435                              <1> eF3     equ 3Dh ;F3 second byte
   436                              <1> eF4     equ 3Eh ;F4 second byte
   437                              <1> eF5     equ 3Fh ;F5 second byte
   438                              <1> eF6     equ 40h ;F6 second byte
   439                              <1> eF7     equ 41h ;F7 second byte
   440                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   441                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   442                              <1> eIns    equ 52h ;Insert second byte
   443                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   444                              <1> 
   445                              <1> ;Default Configuration for the system
   446                              <1> 
   447                              <1> buffersDefault  equ 30
   448                              <1> filesDefault    equ 20
   449                              <1> fcbsDefault     equ 4
   450                              <1> safeFcbsDeflt   equ 0
   451                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on INT 44h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdLineCnt  equ psp.parmList
    19                              <1> cmdLine     equ psp.progTail
    20                              <1> 
    21                              <1> 
    22                              <1> ;Struct Declarations
    23                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    24 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    25 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    26 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    27 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    28 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc execProg  ;For use with EXEC-ing a child task
    32 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    33 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    34 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    35 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    36                              <1> endstruc
    37                              <1> 
    38                              <1> ;Directory attribute equates
    39                              <1>     dirReadOnly     equ 01h
    40                              <1>     dirHidden       equ 02h
    41                              <1>     dirSystem       equ 04h
    42                              <1>     dirVolumeID     equ 08h
    43                              <1>     dirDirectory    equ 10h
    44                              <1>     dirArchive      equ 20h
    45                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    46                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    47                              <1>     ;If any of the three bits are set, then ALL three bits are set
    48                              <1>     ; in addition to whatever the user passed to search for.
    49                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    50                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    11 0000002B 5C                  <1> pathSep     db "\"  ;Default path sep
    12 0000002C 2F                  <1> switchChar  db "/"  ;Default switch char
    13 0000002D 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    14 0000002E 0000000000000000    <1> parentInt42 dq 0    ;Stores the parent values to restore upon exiting if it can
    15                              <1> ;Static strings, not used in command line parsing
    16 00000036 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    16 0000003F 000000000000000000- <1>
    16 00000048 000000000000000000- <1>
    16 00000051 000000000000000000- <1>
    16 0000005A 0000                <1>
    17 0000005C 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    17 00000065 000000000000000000- <1>
    17 0000006E 000000000000000000- <1>
    17 00000077 000000000000000000- <1>
    17 00000080 000000000000000000- <1>
    17 00000089 000000000000000000- <1>
    17 00000092 000000000000000000- <1>
    17 0000009B 00000000            <1>
    18                              <1> 
    19                              <1> 
    20                              <1> cmdLineStatePtr:
    21 0000009F 0000000000000000    <1> cmdStartPtr dq 0    ;Ptr to the first char for this command (may be a space)
    22 000000A7 0000000000000000    <1> cmdEndPtr   dq 0    ;Ptr to the terminating char for this command (0Dh or |)
    23 000000AF 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    24 000000B0 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    25 000000B2 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    26                              <1> 
    27                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    28                              <1> ;These variables are valid for a SINGLE command in a command line
    29 000000B4 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    30 000000B6 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    31 000000B7 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    32                              <1> ;                    If 2, we are redirecting output to a file, by appending
    33 000000B8 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    34 000000BA FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    35                              <1> 
    36 000000BC 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    37 000000BD 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    38 000000BE 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    39                              <1> 
    40 000000BF 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    41 000000C0 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    42 000000C1 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    43                              <1> 
    44                              <1> cmdStateL equ $ - cmdStatePtr
    45                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    46                              <1> 
    47                              <1> ;Structs and strings
    48                              <1> 
    49 000000C2 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    49 000000CB 00000000000000      <1>
    50 000000D2 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    50 000000DB 000000000000000000- <1>
    50 000000E4 000000000000000000- <1>
    50 000000ED 000000000000000000- <1>
    50 000000F6 00000000000000      <1>
    51                              <1> 
    52 000000FD 000000000000000000- <1> launchBlock db execProg_size dup (0)
    52 00000106 000000000000000000- <1>
    52 0000010F 000000000000000000- <1>
    52 00000118 0000000000          <1>
    53 0000011D 000000000000000000- <1> cmdTail     db cmdBufferL dup (0)   ;This is the tail that is passed to EXEC
    53 00000126 000000000000000000- <1>
    53 0000012F 000000000000000000- <1>
    53 00000138 000000000000000000- <1>
    53 00000141 000000000000000000- <1>
    53 0000014A 000000000000000000- <1>
    53 00000153 000000000000000000- <1>
    53 0000015C 000000000000000000- <1>
    53 00000165 000000000000000000- <1>
    53 0000016E 000000000000000000- <1>
    53 00000177 000000000000000000- <1>
    53 00000180 000000000000000000- <1>
    53 00000189 000000000000000000- <1>
    53 00000192 000000000000000000- <1>
    53 0000019B 0000                <1>
    54                              <1> 
    55 0000019D 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    55 000001A6 000000000000000000- <1>
    55 000001AF 000000000000000000- <1>
    55 000001B8 000000000000000000- <1>
    55 000001C1 000000000000000000- <1>
    55 000001CA 000000000000000000- <1>
    55 000001D3 000000000000000000- <1>
    55 000001DC 000000000000000000- <1>
    55 000001E5 000000000000000000- <1>
    55 000001EE 000000000000000000- <1>
    55 000001F7 000000000000000000- <1>
    55 00000200 000000000000000000- <1>
    55 00000209 000000000000000000- <1>
    55 00000212 000000000000000000- <1>
    55 0000021B 0000                <1>
    56 0000021D 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    56 00000226 000000000000000000- <1>
    56 0000022F 000000000000000000- <1>
    56 00000238 000000000000000000- <1>
    56 00000241 000000000000000000- <1>
    56 0000024A 000000000000000000- <1>
    56 00000253 000000000000000000- <1>
    56 0000025C 000000000000000000- <1>
    56 00000265 000000000000000000- <1>
    56 0000026E 000000000000000000- <1>
    56 00000277 000000000000000000- <1>
    56 00000280 000000000000000000- <1>
    56 00000289 000000000000000000- <1>
    56 00000292 000000000000000000- <1>
    56 0000029B 0000                <1>
    57 0000029D 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    57 000002A6 000000000000000000- <1>
    57 000002AF 000000000000000000- <1>
    57 000002B8 000000000000000000- <1>
    57 000002C1 000000000000000000- <1>
    57 000002CA 000000000000000000- <1>
    57 000002D3 000000000000000000- <1>
    57 000002DC 000000000000000000- <1>
    57 000002E5 00000000000000      <1>
    58                              <1> 
    59 000002EC 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    59 000002F5 0000                <1>
    60 000002F7 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    60 00000300 00000000            <1>
    61 00000304 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    61 0000030D 0000000000          <1>
    62                              <1> 
    63 00000312 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    63 0000031B 000000000000000000- <1>
    63 00000324 000000000000000000- <1>
    63 0000032D 000000000000000000- <1>
    63 00000336 000000000000000000- <1>
    63 0000033F 000000000000000000- <1>
    63 00000348 000000000000000000- <1>
    63 00000351 000000000000000000- <1>
    63 0000035A 00000000000000      <1>
    64 00000361 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    64 0000036A 000000000000000000- <1>
    64 00000373 000000000000000000- <1>
    64 0000037C 000000000000000000- <1>
    64 00000385 000000000000000000- <1>
    64 0000038E 000000000000000000- <1>
    64 00000397 000000000000000000- <1>
    64 000003A0 000000000000000000- <1>
    64 000003A9 00000000000000      <1>
    65                              <1> 
    66                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    67 000003B0 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    67 000003B9 000000000000000000- <1>
    67 000003C2 000000000000000000- <1>
    67 000003CB 000000000000000000- <1>
    67 000003D4 000000000000000000- <1>
    67 000003DD 000000000000000000- <1>
    67 000003E6 000000000000000000- <1>
    67 000003EF 000000000000000000- <1>
    67 000003F8 00000000000000      <1>
    68 000003FF 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    68 00000408 000000000000000000- <1>
    68 00000411 000000000000000000- <1>
    68 0000041A 000000000000000000- <1>
    68 00000423 000000000000000000- <1>
    68 0000042C 000000000000000000- <1>
    68 00000435 000000000000000000- <1>
    68 0000043E 000000000000000000- <1>
    68 00000447 00000000000000      <1>
    69                              <1> 
    70 0000044E 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    71 00000456 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    72                              <1> 
    73 0000045E 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    73 00000467 000000000000000000- <1>
    73 00000470 000000000000000000- <1>
    73 00000479 000000000000000000- <1>
    73 00000482 000000000000000000- <1>
    73 0000048B 000000000000000000- <1>
    73 00000494 000000000000000000- <1>
    73 0000049D 000000000000000000- <1>
    73 000004A6 000000000000000000- <1>
    73 000004AF 000000000000000000- <1>
    73 000004B8 000000000000000000- <1>
    73 000004C1 000000000000000000- <1>
    73 000004CA 000000000000000000- <1>
    73 000004D3 000000000000000000- <1>
    73 000004DC 0000                <1>
    74                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    75                              <1> ; users overtyping
    76                              <1> 
    77                              <1> ;Internal Function vars
    78                              <1> ;Dir Vars
    79 000004DE 00                  <1> dirPrnType  db 0    ;Print type.    Bit[0] set => /W or /w specified
    80                              <1> ;                                   Bit[1] set => /P or /p specified
    81 000004DF 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    82 000004E0 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    83 000004E1 00                  <1> dirDrv      db 0    ;0 based drive number to use
    84 000004E2 000000000000000000- <1> dirOldCWD   db cmdBufferL dup (0)   ;Space for CWD and any overspill 
    84 000004EB 000000000000000000- <1>
    84 000004F4 000000000000000000- <1>
    84 000004FD 000000000000000000- <1>
    84 00000506 000000000000000000- <1>
    84 0000050F 000000000000000000- <1>
    84 00000518 000000000000000000- <1>
    84 00000521 000000000000000000- <1>
    84 0000052A 000000000000000000- <1>
    84 00000533 000000000000000000- <1>
    84 0000053C 000000000000000000- <1>
    84 00000545 000000000000000000- <1>
    84 0000054E 000000000000000000- <1>
    84 00000557 000000000000000000- <1>
    84 00000560 0000                <1>
    85 00000562 000000000000000000- <1> dirPathArg  db cmdBufferL dup (0)   ;Copy the pathspec argument here if any
    85 0000056B 000000000000000000- <1>
    85 00000574 000000000000000000- <1>
    85 0000057D 000000000000000000- <1>
    85 00000586 000000000000000000- <1>
    85 0000058F 000000000000000000- <1>
    85 00000598 000000000000000000- <1>
    85 000005A1 000000000000000000- <1>
    85 000005AA 000000000000000000- <1>
    85 000005B3 000000000000000000- <1>
    85 000005BC 000000000000000000- <1>
    85 000005C5 000000000000000000- <1>
    85 000005CE 000000000000000000- <1>
    85 000005D7 000000000000000000- <1>
    85 000005E0 0000                <1>
    86 000005E2 3F3F3F3F3F3F3F3F    <1> dirSrchPat  db 8 dup ("?")    ;We copy the search pattern here
    87 000005EA 2E                  <1> dirSPExt    db "."
    88 000005EB 3F3F3F              <1>             db 3 dup ("?")
    89                              <1> 
    90                              <1> ;Volume Vars
    91 000005EE 000000000000000000- <1> volLblSpc   db 13 dup (0)
    91 000005F7 00000000            <1>
    92 000005FB 00                  <1> volPathBuf  db 0 ;Drive LETTER goes here
    93 000005FC 3A5C2A2E2A00        <1>             db ":\*.*",0  ;This remains to build X:\*.*,0 for vol label search
    94                              <1> 
    95                              <1> ;Time/Date vars
    96 00000602 00                  <1> td1 db 0    ;Minutes/Year
    97 00000603 00                  <1> td2 db 0    ;Hours/Zero
    98 00000604 00                  <1> td3 db 0    ;Hundredths/Day
    99 00000605 00                  <1> td4 db 0    ;Seconds/Month
   100                              <1> 
   101                              <1> ;Rename/Copy Buffers
   102 00000606 000000000000000000- <1> sourcePath  db cmdBufferL dup (0)
   102 0000060F 000000000000000000- <1>
   102 00000618 000000000000000000- <1>
   102 00000621 000000000000000000- <1>
   102 0000062A 000000000000000000- <1>
   102 00000633 000000000000000000- <1>
   102 0000063C 000000000000000000- <1>
   102 00000645 000000000000000000- <1>
   102 0000064E 000000000000000000- <1>
   102 00000657 000000000000000000- <1>
   102 00000660 000000000000000000- <1>
   102 00000669 000000000000000000- <1>
   102 00000672 000000000000000000- <1>
   102 0000067B 000000000000000000- <1>
   102 00000684 0000                <1>
   103 00000686 000000000000000000- <1> destPath    db cmdBufferL dup (0)
   103 0000068F 000000000000000000- <1>
   103 00000698 000000000000000000- <1>
   103 000006A1 000000000000000000- <1>
   103 000006AA 000000000000000000- <1>
   103 000006B3 000000000000000000- <1>
   103 000006BC 000000000000000000- <1>
   103 000006C5 000000000000000000- <1>
   103 000006CE 000000000000000000- <1>
   103 000006D7 000000000000000000- <1>
   103 000006E0 000000000000000000- <1>
   103 000006E9 000000000000000000- <1>
   103 000006F2 000000000000000000- <1>
   103 000006FB 000000000000000000- <1>
   103 00000704 0000                <1>
   104                              <1> ;Copy Handles
   105 00000706 FFFF                <1> sourceHdl   dw -1
   106 00000708 FFFF                <1> destHdl     dw -1
   107 0000070A 0000                <1> srcHdlInfo  dw 0 ;Used to save the handle device info (bit 7 Set -> Char dev)
   108                              <1> 
   109 0000070C 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   109 00000715 000000000000000000- <1>
   109 0000071E 000000000000000000- <1>
   109 00000727 000000000000000000- <1>
   109 00000730 000000000000000000- <1>
   109 00000739 000000000000000000- <1>
   109 00000742 000000000000000000- <1>
   109 0000074B 000000000000000000- <1>
   109 00000754 000000000000000000- <1>
   109 0000075D 000000000000000000- <1>
   109 00000766 000000000000000000- <1>
   109 0000076F 000000000000000000- <1>
   109 00000778 000000000000000000- <1>
   109 00000781 000000000000000000- <1>
   109 0000078A 0000                <1>
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 0000078C 03444952            <1>     db 3, "DIR"
     8 00000790 8517                <1>     dw dir - startLbl
     9                              <1> 
    10 00000792 024344              <1>     db 2, "CD"
    11 00000795 231B                <1>     dw chdir - startLbl
    12                              <1> 
    13 00000797 054348444952        <1>     db 5, "CHDIR"
    14 0000079D 231B                <1>     dw chdir - startLbl
    15                              <1> 
    16 0000079F 024D44              <1>     db 2, "MD"
    17 000007A2 CB1B                <1>     dw mkdir - startLbl
    18                              <1> 
    19 000007A4 054D4B444952        <1>     db 5, "MKDIR"
    20 000007AA CB1B                <1>     dw mkdir - startLbl
    21                              <1> 
    22 000007AC 025244              <1>     db 2, "RD"
    23 000007AF 171C                <1>     dw rmdir - startLbl
    24                              <1> 
    25 000007B1 05524D444952        <1>     db 5, "RMDIR"
    26 000007B7 171C                <1>     dw rmdir - startLbl
    27                              <1> 
    28 000007B9 0344454C            <1>     db 3, "DEL"
    29 000007BD 411E                <1>     dw erase - startLbl
    30                              <1> 
    31 000007BF 054552415345        <1>     db 5, "ERASE"
    32 000007C5 411E                <1>     dw erase - startLbl
    33                              <1> 
    34 000007C7 0444415445          <1>     db 4, "DATE"
    35 000007CC 6A1E                <1>     dw date - startLbl
    36                              <1> 
<<<<<<< HEAD
    37 000007CE 0454494D45          <1>     db 4, "TIME"
    38 000007D3 301F                <1>     dw time - startLbl
=======
    37 0000074E 0454494D45          <1>     db 4, "TIME"
    38 00000753 B51E                <1>     dw time - startLbl
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    39                              <1> 
    40 000007D5 04434F5059          <1>     db 4, "COPY"
    41 000007DA 631C                <1>     dw copy - startLbl
    42                              <1> 
<<<<<<< HEAD
    43 000007DC 0443545459          <1>     db 4, "CTTY"
    44 000007E1 C81F                <1>     dw ctty - startLbl
    45                              <1> 
    46 000007E3 03434C53            <1>     db 3, "CLS"
    47 000007E7 6320                <1>     dw cls - startLbl
    48                              <1> 
    49 000007E9 05425245414B        <1>     db 5, "BREAK"
    50 000007EF D520                <1>     dw break - startLbl
    51                              <1> 
    52 000007F1 06564552494659      <1>     db 6, "VERIFY"
    53 000007F8 5621                <1>     dw verify - startLbl
    54                              <1> 
    55 000007FA 0652454E414D45      <1>     db 6, "RENAME"
    56 00000801 D321                <1>     dw rename - startLbl
    57                              <1> 
    58 00000803 044D4F5645          <1>     db 4, "MOVE"
    59 00000808 D321                <1>     dw rename - startLbl
    60                              <1>     
    61 0000080A 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 00000813 DB22                <1>     dw truename - startLbl
    63                              <1> 
    64 00000815 03564552            <1>     db 3, "VER"
    65 00000819 2424                <1>     dw version - startLbl
    66                              <1> 
    67 0000081B 03564F4C            <1>     db 3, "VOL"
    68 0000081F 1123                <1>     dw volume - startLbl
    69                              <1> 
    70 00000821 034D454D            <1>     db 3, "MEM"
    71 00000825 6824                <1>     dw memory - startLbl
    72                              <1> 
    73 00000827 0445584954          <1>     db 4, "EXIT"
    74 0000082C 4A26                <1>     dw exit - startLbl
    75                              <1> 
    76 0000082E 0454595045          <1>     db 4, "TYPE"
    77 00000833 B225                <1>     dw type - startLbl
    78                              <1> 
    79 00000835 05544F554348        <1>     db 5, "TOUCH"
    80 0000083B A022                <1>     dw touch - startLbl
=======
    43 0000075C 0443545459          <1>     db 4, "CTTY"
    44 00000761 501F                <1>     dw ctty - startLbl
    45                              <1> 
    46 00000763 03434C53            <1>     db 3, "CLS"
    47 00000767 EB1F                <1>     dw cls - startLbl
    48                              <1> 
    49 00000769 05425245414B        <1>     db 5, "BREAK"
    50 0000076F 5D20                <1>     dw break - startLbl
    51                              <1> 
    52 00000771 06564552494659      <1>     db 6, "VERIFY"
    53 00000778 DE20                <1>     dw verify - startLbl
    54                              <1> 
    55 0000077A 0652454E414D45      <1>     db 6, "RENAME"
    56 00000781 5B21                <1>     dw rename - startLbl
    57                              <1> 
    58 00000783 044D4F5645          <1>     db 4, "MOVE"
    59 00000788 5B21                <1>     dw rename - startLbl
    60                              <1>     
    61 0000078A 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 00000793 6322                <1>     dw truename - startLbl
    63                              <1> 
    64 00000795 03564552            <1>     db 3, "VER"
    65 00000799 AC23                <1>     dw version - startLbl
    66                              <1> 
    67 0000079B 03564F4C            <1>     db 3, "VOL"
    68 0000079F 9922                <1>     dw volume - startLbl
    69                              <1> 
    70 000007A1 034D454D            <1>     db 3, "MEM"
    71 000007A5 F023                <1>     dw memory - startLbl
    72                              <1> 
    73 000007A7 0445584954          <1>     db 4, "EXIT"
    74 000007AC D225                <1>     dw exit - startLbl
    75                              <1> 
    76 000007AE 0454595045          <1>     db 4, "TYPE"
    77 000007B3 3A25                <1>     dw type - startLbl
    78                              <1> 
    79 000007B5 05544F554348        <1>     db 5, "TOUCH"
    80 000007BB 2822                <1>     dw touch - startLbl
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    81                              <1> 
    82 0000083D FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 0000083E 0D0A24              <1> crlf    db  CR,LF,"$"
     3 00000841 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 00000846 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 0000084F 696C65206D69737369- <1>
     4 00000858 6E670D0A24          <1>
     5 0000085D 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 00000866 6469736B2077697468- <1>
     5 0000086F 206261746368206669- <1>
     5 00000878 6C65                <1>
     6 0000087A 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 00000883 737320616E79206B65- <1>
     6 0000088C 79207768656E207265- <1>
     6 00000895 6164790D0A24        <1>
     7 0000089B 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 000008A4 6E64206F722066696C- <1>
     7 000008AD 65206E616D650D0A24  <1>
     8 000008B6 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 000008BF 2066696C65206E616D- <1>
     8 000008C8 65206F7220          <1>
     9 000008CD 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 000008D6 666F756E640D0A24    <1>
    10 000008DE 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    10 000008E7 656E74206469736B20- <1>
    10 000008F0 73706163650D0A24    <1>
    11 000008F8 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 00000901 7669726F6E6D656E74- <1>
    11 0000090A 2073706163650D0A24  <1>
    12 00000913 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 0000091C 74696F6E206572726F- <1>
    12 00000925 720D0A24            <1>
    13 00000929 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 00000932 6F7420626520636F70- <1>
    13 0000093B 696564206F6E746F20- <1>
    13 00000944 697473656C660D0A24  <1>
    14 0000094D 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 00000956 662064657374696E61- <1>
    14 0000095F 74696F6E206C6F7374- <1>
    14 00000968 206265666F72652063- <1>
    14 00000971 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 00000977 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 00000980 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 00000989 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 00000992 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 00000993 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 0000099C 65650D0A24          <1>
    21 000009A1 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 000009AA 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 000009B3 726976652073706563- <1>
    23 000009BC 696669636174696F6E- <1>
    23 000009C5 0D0A24              <1>
    24 000009C8 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 000009D1 6B6579207768656E20- <1>
    24 000009DA 7265616479202E202E- <1>
    24 000009E3 202E2024            <1>
    25 000009E7 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 000009F0 6172616D657465720D- <1>
    25 000009F9 0A24                <1>
    26                              <1> 
    27 000009FB 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 00000A04 576564546875467269- <1>
    27 00000A0D 536174              <1>
    28 00000A10 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 00000A19 206461746524        <1>
    29 00000A1F 43757272656E742064- <1> curDate db  "Current date is $"
    29 00000A28 6174652069732024    <1>
    30 00000A30 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 00000A39 657720646174652024  <1>
    31 00000A42 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 00000A4B 293A2024            <1>
    32 00000A4F 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 00000A58 293A2024            <1>
    33 00000A5C 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 00000A65 293A2024            <1>
    34 00000A69 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 00000A72 2074696D6524        <1>
    35 00000A78 43757272656E742074- <1> curTime db  "Current time is $"
    35 00000A81 696D652069732024    <1>
    36 00000A89 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 00000A92 65772074696D653A20- <1>
    36 00000A9B 24                  <1>
    37                              <1> 
    38 00000A9C 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000AA5 7572652028592F4E29- <1>
    38 00000AAE 3F2024              <1>
    39                              <1> 
    40 00000AB1 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000ABA 56657273696F6E2024  <1>
    41                              <1> 
    42 00000AC3 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000ACC 6E2064726976652024  <1>
    43 00000AD5 2069732024          <1> volOk   db " is $"
    44 00000ADA 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000AE3 6162656C24          <1>
    45                              <1> 
    46 00000AE8 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000AF1 69726563746F72790D- <1>
    46 00000AFA 0A24                <1>
    47 00000AFC 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000B05 206372656174652064- <1>
    47 00000B0E 69726563746F72790D- <1>
    47 00000B17 0A24                <1>
    48 00000B19 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000B22 6174682C206E6F7420- <1>
    48 00000B2B 6469726563746F7279- <1>
    48 00000B34 2C0D0A              <1>
    49 00000B37 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000B40 6F7279206E6F742065- <1>
    49 00000B49 6D7074790D0A24      <1>
    50 00000B50 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000B59 79206F66202024      <1>
    51 00000B60 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000B69 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    52 00000B72 7269766520696E2073- <1>
    52 00000B7B 656172636820706174- <1>
    52 00000B84 680D0A24            <1>
    53 00000B88 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    53 00000B91 65766963650D0A24    <1>
    54 00000B99 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    54 00000BA2 20666F756E640D0A24  <1>
    55 00000BAB 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    55 00000BB4 726F720D0A24        <1>
    56 00000BBA 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    56 00000BC3 6F74206265206E6573- <1>
    56 00000BCC 7465640D0A24        <1>
    57 00000BD2 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    57 00000BDB 6174652066696C6520- <1>
    57 00000BE4 6572726F7220647572- <1>
    57 00000BED 696E6720706970650D- <1>
    57 00000BF6 0A24                <1>
    58 00000BF8 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    58 00000C01 2062696E6172792072- <1>
    58 00000C0A 656164732066726F6D- <1>
    58 00000C13 206120646576696365- <1>
    58 00000C1C 0D0A24              <1>
    59 00000C1F 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    60 00000C25 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    61 00000C2A 425245414B20697320- <1> breakIs db "BREAK is $"
    61 00000C33 24                  <1>
    62 00000C34 564552494659206973- <1> verifyIs    db "VERIFY is $"
    62 00000C3D 2024                <1>
    63 00000C3F 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    64 00000C48 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    64 00000C51 617468206F72206669- <1>
    64 00000C5A 6C65206E616D650D0A- <1>
    64 00000C63 24                  <1>
    65 00000C64 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    65 00000C6D 756D626572206F6620- <1>
    65 00000C76 706172616D65746572- <1>
    65 00000C7F 730D0A24            <1>
    66 00000C83 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    66 00000C8C 74696E6720746F2064- <1>
    66 00000C95 6576696365          <1>
    67 00000C9A 08200800            <1> backSpace   db BSP," ",BSP,NUL
    68                              <1> 
    69 00000C9E 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    69 00000CA7 20202020202020546F- <1>
    69 00000CB0 74616C207379737465- <1>
    69 00000CB9 6D206D656D6F72793A- <1>
    69 00000CC2 2024                <1>
    70 00000CC4 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    70 00000CCD 20202020202020204D- <1>
    70 00000CD6 656D6F727920757365- <1>
    70 00000CDF 6420627920444F533A- <1>
    70 00000CE8 2024                <1>
    71 00000CEA 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    71 00000CF3 656D6F727920757365- <1>
    71 00000CFC 64206279206170706C- <1>
    71 00000D05 69636174696F6E733A- <1>
    71 00000D0E 2024                <1>
    72 00000D10 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    72 00000D19 656D6F727920726573- <1>
    72 00000D22 657276656420627920- <1>
    72 00000D2B 68617264776172653A- <1>
    72 00000D34 2024                <1>
    73 00000D36 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    73 00000D3F 202020202020202020- <1>
    73 00000D48 2020202020204D656D- <1>
    73 00000D51 6F727920667265653A- <1>
    73 00000D5A 2024                <1>
    74 00000D5C 20627974657324      <1> memByte db " bytes$"
    75 00000D63 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    75 00000D6C 6F7420417373657274- <1>
    75 00000D75 61696E20444F532045- <1>
    75 00000D7E 6E74727920506F696E- <1>
    75 00000D87 7424                <1>
    76 00000D89 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    76 00000D92 416C6C6F636174696F- <1>
    76 00000D9B 6E204572726F7224    <1>
    77 00000DA3 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    77 00000DAC 4572726F7224        <1>
    78 00000DB2 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    78 00000DBB 68616C74656424      <1>
    79                              <1> 
    80 00000DC2 556E61626C6520746F- <1> touchErr db "Unable to create file",CR,LF,"$"
    80 00000DCB 206372656174652066- <1>
    80 00000DD4 696C650D0A24        <1>
    81 00000DDA 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    81 00000DE3 206372656174652070- <1>
    81 00000DEC 6970650D0A          <1>
    82                              <1> pipeErrMsgL equ $ - pipeErrMsg
    83 00000DF1 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    83 00000DFA 6F6E206572726F720D- <1>
    83 00000E03 0A                  <1>
    84                              <1> redirErrMsgL   equ $ - redirErrMsg
    85                              <1> 
    86 00000E04 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    87 00000E08 2020202024          <1> fourSpc  db "    $"
    88 00000E0D 20202024            <1> threeSpc db "   $"
    89 00000E11 202024              <1> twoSpc   db "  $"
    90                              <1> 
    91 00000E14 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    91 00000E1D 696679204F4E206F72- <1>
    91 00000E26 204F46460D0A24      <1>
    92 00000E2D 504154483D          <1> pathEVar db "PATH="
    93 00000E32 50524F4D50543D      <1> promptEVar  db "PROMPT="
    94                              <1> 
    95                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    96                              <1> ; handles and reopen CON
    97 00000E39 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00000E3D 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00000E40 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00000E44 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 00000E47 B44A                <1>     mov ah, 4Ah ;Realloc
     9 00000E49 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00000E4C CD41                <1>     int 41h
    11 00000E4E EB68                <1>     jmp short commandMain
    12                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    13 00000E50 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    14 00000E55 CD41                <1>     int 41h
    15 00000E57 668905AFF1FFFF      <1>     mov word [returnCode], ax
    16                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
<<<<<<< HEAD
    17 00000E5E 488D158C1F0000      <1>     lea rdx, critErrorHandler
    18 00000E65 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    19 00000E69 B844250000          <1>     mov eax, 2544h
    20 00000E6E CD41                <1>     int 41h
    21 00000E70 488D150A220000      <1>     lea rdx, int43h
    22 00000E77 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    23 00000E7B B843250000          <1>     mov eax, 2543h
    24 00000E80 CD41                <1>     int 41h
    25 00000E82 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    26 00000E89 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    27 00000E8D B842250000          <1>     mov eax, 2542h
    28 00000E92 CD41                <1>     int 41h
    29 00000E94 F60514F2FFFFFF      <1>     test byte [pipeFlag], -1
    30 00000E9B 7574                <1>     jnz commandMain.pipeProceed ;Skip the handle closing when pipe active
    31 00000E9D E8B8040000          <1>     call cleanUpRedir   ;Clean up redirection once we are done
=======
    17 00000DDE 488D15401F0000      <1>     lea rdx, critErrorHandler
    18 00000DE5 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    19 00000DE9 B844250000          <1>     mov eax, 2544h
    20 00000DEE CD41                <1>     int 41h
    21 00000DF0 488D15BE210000      <1>     lea rdx, int43h
    22 00000DF7 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    23 00000DFB B843250000          <1>     mov eax, 2543h
    24 00000E00 CD41                <1>     int 41h
    25 00000E02 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    26 00000E09 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    27 00000E0D B842250000          <1>     mov eax, 2542h
    28 00000E12 CD41                <1>     int 41h
    29 00000E14 F60594F2FFFFFF      <1>     test byte [pipeFlag], -1
    30 00000E1B 7576                <1>     jnz commandMain.pipeProceed ;Skip the handle closing when pipe active
    31 00000E1D E8BA040000          <1>     call cleanUpRedir   ;Clean up redirection once we are done
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    32                              <1> ;Close all handles from 5->MAX
    33 00000EA2 0FB70D7EF1FFFF      <1>     movzx ecx, word [numHdls]
    34 00000EA9 BB05000000          <1>     mov ebx, 5
    35                              <1> .handleClose:
    36 00000EAE B43E                <1>     mov ah, 3Eh ;File close
    37 00000EB0 CD41                <1>     int 41h
    38 00000EB2 FFC3                <1>     inc ebx ;Goto next file
    39 00000EB4 39CB                <1>     cmp ebx, ecx
    40 00000EB6 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    41                              <1> commandMain:
    42                              <1> ;Setup Commandline
    43 00000EB8 488B2546F1FFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    44 00000EBF FC                  <1>     cld ;Ensure stringops are done the right way
    45 00000EC0 C605D6F2FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    46                              <1> .inputMain:
<<<<<<< HEAD
    47 00000EC7 E8C51C0000          <1>     call clearCommandLineState
    48 00000ECC E84C190000          <1>     call printCRLF
    49 00000ED1 E8891C0000          <1>     call printPrompt
    50                              <1> 
    51 00000ED6 488D15C0F2FFFF      <1>     lea rdx, inBuffer
    52 00000EDD B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    53 00000EE2 CD41                <1>     int 41h
    54 00000EE4 E834190000          <1>     call printCRLF  ;Note we have accepted input
    55                              <1> 
    56                              <1> ;First check we had something typed in of length greater than 0
    57                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    58 00000EE9 803DAEF2FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    59 00000EF0 74D5                <1>     je .inputMain
    60                              <1>     ;Copy over the input text
    61 00000EF2 488D35A4F2FFFF      <1>     lea rsi, inBuffer
    62 00000EF9 488D3D1DF3FFFF      <1>     lea rdi, cmdBuffer
    63 00000F00 B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    64 00000F05 F3A4                <1>     rep movsb
    65                              <1> .pipeLoop:
    66 00000F07 E838000000          <1>     call parseInput
    67 00000F0C E8CB010000          <1>     call doCommandLine
    68                              <1> .pipeProceed:
    69 00000F11 E844040000          <1>     call cleanUpRedir
    70 00000F16 488B058AF1FFFF      <1>     mov rax, qword [cmdEndPtr]
    71 00000F1D 4889057BF1FFFF      <1>     mov qword [cmdStartPtr], rax
    72 00000F24 F60584F1FFFFFF      <1>     test byte [pipeFlag], -1  ;If we have any pipes active, we proceed here
    73 00000F2B 749A                <1>     jz .inputMain
    74 00000F2D E8441C0000          <1>     call clearCommandState  ;Else, clear the command state and start again
    75 00000F32 EBD3                <1>     jmp short .pipeLoop
    76                              <1> .dfltErrExit:
    77 00000F34 488D1560F9FFFF      <1>     lea rdx, badCmd
    78 00000F3B B409                <1>     mov ah, 09h
    79 00000F3D CD41                <1>     int 41h
    80 00000F3F E983FFFFFF          <1>     jmp .inputMain
    81                              <1> 
    82                              <1> parseInput:
    83                              <1> ;EndOff is set up before entering this part
    84                              <1> ;Copies a nicely formatted version of the input command line
    85                              <1> ; without any redirections to psp.dta
    86                              <1>     ;lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
    87 00000F44 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    88 00000F4B 488B354DF1FFFF      <1>     mov rsi, qword [cmdStartPtr]
    89 00000F52 4885F6              <1>     test rsi, rsi
    90 00000F55 7507                <1>     jnz .notNewCmd
    91 00000F57 488D35C0F2FFFF      <1>     lea rsi, [cmdBuffer + 1]    ;Goto command buffer - 1
    92                              <1> .notNewCmd:
    93 00000F5E 48FFC6              <1>     inc rsi ;Goto first char in new buffer since rsi points to terminating char
    94 00000F61 E8EA1B0000          <1>     call skipSpaces ;Skip any preceeding spaces
    95 00000F66 66AD                <1>     lodsw   ;Get the first two chars into ax
    96 00000F68 66890545F1FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
    97 00000F6F 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
    98 00000F76 56                  <1>     push rsi
    99 00000F77 57                  <1>     push rdi
   100 00000F78 488D3D1EF3FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   101 00000F7F 57                  <1>     push rdi
   102 00000F80 E802070000          <1>     call copyCommandTailItemProgram
   103 00000F85 5F                  <1>     pop rdi
   104 00000F86 9C                  <1>     pushfq  ;Save the CF state
   105 00000F87 E8561B0000          <1>     call strlen
   106 00000F8C FFC9                <1>     dec ecx ;Drop the terminating char from the count
   107 00000F8E 58                  <1>     pop rax ;Get the CF state in al
   108 00000F8F 5F                  <1>     pop rdi
   109 00000F90 5E                  <1>     pop rsi
   110 00000F91 F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   111 00000F93 A801                <1>     test al, 1  ;Was CF set?
   112 00000F95 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   113                              <1> .cmdLineProcess:
   114 00000F9B E8B01B0000          <1>     call skipSpaces ;Go to the next char in the input line
   115                              <1> .redirFound:
   116 00000FA0 AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   117 00000FA1 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   118 00000FA3 747C                <1>     je .exit
   119 00000FA5 E820050000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   120 00000FAA 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   121 00000FAC 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   122 00000FAE B020                <1>     mov al, " "
   123 00000FB0 AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   124 00000FB1 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   125 00000FB4 F60501F1FFFFFF      <1>     test byte [arg1Flg], -1
   126 00000FBB 7521                <1>     jnz .arg2
   127                              <1> .arg1:
   128 00000FBD C605F8F0FFFFFF      <1>     mov byte [arg1Flg], -1
   129 00000FC4 E8871B0000          <1>     call skipSpaces
   130 00000FC9 4889F0              <1>     mov rax, rsi
   131 00000FCC 488D1D4AF2FFFF      <1>     lea rbx, cmdBuffer
   132 00000FD3 4829D8              <1>     sub rax, rbx
   133 00000FD6 8805E1F0FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   134 00000FDC EB2A                <1>     jmp short .argCommon
   135                              <1> .arg2:
   136 00000FDE F605DAF0FFFFFF      <1>     test byte [arg2Flg], -1
   137 00000FE5 7521                <1>     jnz .argCommon
   138 00000FE7 C605D1F0FFFFFF      <1>     mov byte [arg2Flg], -1
   139 00000FEE E85D1B0000          <1>     call skipSpaces
   140 00000FF3 4889F0              <1>     mov rax, rsi
   141 00000FF6 488D1D20F2FFFF      <1>     lea rbx, cmdBuffer
   142 00000FFD 4829D8              <1>     sub rax, rbx
   143 00001000 8805BAF0FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   144 00001006 EB00                <1>     jmp short .argCommon
   145                              <1> .argCommon:
   146                              <1>     ;More than two arguments? Do nothing more than just copy it
   147                              <1>     ; over. If we encounter an embedded CR, exit there too
   148 00001008 E8431B0000          <1>     call skipSpaces
   149 0000100D 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   150 00001010 740F                <1>     je .exit
   151                              <1>     ;If not, we copy it over
   152 00001012 E89E060000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   153 00001017 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   154 0000101B 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   155                              <1> .exit:
   156 00001021 48FFCE              <1>     dec rsi
   157 00001024 4889357CF0FFFF      <1>     mov qword [cmdEndPtr], rsi
   158 0000102B B00D                <1>     mov al, CR
   159 0000102D AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   160                              <1>     ;Now compute the command line length 
   161 0000102E 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   162 00001035 B00D                <1>     mov al, CR
   163 00001037 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   164 00001039 FFC9                <1>     dec ecx ;rcx = -1
   165 0000103B F2AE                <1>     repne scasb
   166 0000103D F7D1                <1>     not ecx
   167 0000103F FEC9                <1>     dec cl  ;Dont include terminating CR
   168 00001041 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   169 00001048 880F                <1>     mov byte [rdi], cl
   170                              <1>     ;Before returning, we copy the command name to cmdName
   171 0000104A 488D3D4CF2FFFF      <1>     lea rdi, cmdPathSpec
   172 00001051 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   173 00001054 30C0                <1>     xor al, al  ;Search for the terminating null
   174 00001056 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   175 0000105B F2AE                <1>     repne scasb
   176 0000105D 48FFCF              <1>     dec rdi ;Go to the last char in the command
   177 00001060 4889FE              <1>     mov rsi, rdi
   178 00001063 FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   179                              <1> .keepSearching:
   180 00001064 AC                  <1>     lodsb
   181 00001065 3A05C0EFFFFF        <1>     cmp al, byte [pathSep]
   182 0000106B 740B                <1>     je .cmdStartFnd
   183 0000106D 4839DE              <1>     cmp rsi, rbx
   184 00001070 75F2                <1>     jne .keepSearching
   185 00001072 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   186 00001075 48FFCE              <1>     dec rsi
   187                              <1> .cmdStartFnd:
   188 00001078 48FFC6              <1>     inc rsi
   189 0000107B 48FFC6              <1>     inc rsi ;Go past the pathsep
   190 0000107E FC                  <1>     cld ;Go the sane way again
   191 0000107F 488D3D7FF2FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   192 00001086 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   193 00001087 B90E000000          <1>     mov ecx, cmdNameL
   194 0000108C 30C0                <1>     xor al, al
   195 0000108E F3AA                <1>     rep stosb
   196 00001090 5F                  <1>     pop rdi
   197 00001091 31C9                <1>     xor ecx, ecx
   198 00001093 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   199                              <1> .cmdGetChar:
   200 00001094 AC                  <1>     lodsb
   201 00001095 84C0                <1>     test al, al ;Did we find the terminating null?
   202 00001097 7411                <1>     jz .nameLenFnd
   203 00001099 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   204 0000109B 740D                <1>     je .nameLenFnd
   205 0000109D 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   206 0000109F AA                  <1>     stosb   ;and store it
   207 000010A0 FFC1                <1>     inc ecx
   208 000010A2 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   209 000010A8 72EA                <1>     jb .cmdGetChar
   210                              <1> .nameLenFnd:
   211 000010AA 880D54F2FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   212                              <1>     ;Now finally, create a FCB filespec
   213 000010B0 488D3D35F2FFFF      <1>     lea rdi, fcbCmdSpec
   214 000010B7 57                  <1>     push rdi
   215 000010B8 B90B000000          <1>     mov ecx, fcbNameL
   216 000010BD B020                <1>     mov al, " " ;Fill with spaces
   217 000010BF F3AA                <1>     rep stosb
   218 000010C1 5F                  <1>     pop rdi
   219 000010C2 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   220 000010C3 E8EE1A0000          <1>     call asciiToFCB
   221 000010C8 488D351DF2FFFF      <1>     lea rsi, fcbCmdSpec
   222 000010CF 488D3D21F2FFFF      <1>     lea rdi, cmdSpec
   223 000010D6 E8361B0000          <1>     call FCBToAsciiz
   224                              <1>     return
=======
    47 00000E47 E8791C0000          <1>     call clearCommandLineState
    48 00000E4C E800190000          <1>     call printCRLF
    49 00000E51 E83D1C0000          <1>     call printPrompt
    50                              <1> 
    51 00000E56 488D15C0F2FFFF      <1>     lea rdx, inBuffer
    52 00000E5D B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    53 00000E62 CD41                <1>     int 41h
    54 00000E64 E8E8180000          <1>     call printCRLF  ;Note we have accepted input
    55                              <1> 
    56                              <1> ;First check we had something typed in of length greater than 0
    57                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    58 00000E69 803DAEF2FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    59 00000E70 7444                <1>     je .dfltErrExit
    60 00000E72 72D3                <1>     jb .inputMain
    61                              <1>     ;Copy over the input text
    62 00000E74 488D35A2F2FFFF      <1>     lea rsi, inBuffer
    63 00000E7B 488D3D1BF3FFFF      <1>     lea rdi, cmdBuffer
    64 00000E82 B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    65 00000E87 F3A4                <1>     rep movsb
    66                              <1> .pipeLoop:
    67 00000E89 E838000000          <1>     call parseInput
    68 00000E8E E8CB010000          <1>     call doCommandLine
    69                              <1> .pipeProceed:
    70 00000E93 E844040000          <1>     call cleanUpRedir
    71 00000E98 488B0508F2FFFF      <1>     mov rax, qword [cmdEndPtr]
    72 00000E9F 488905F9F1FFFF      <1>     mov qword [cmdStartPtr], rax
    73 00000EA6 F60502F2FFFFFF      <1>     test byte [pipeFlag], -1  ;If we have any pipes active, we proceed here
    74 00000EAD 7498                <1>     jz .inputMain
    75 00000EAF E8F61B0000          <1>     call clearCommandState  ;Else, clear the command state and start again
    76 00000EB4 EBD3                <1>     jmp short .pipeLoop
    77                              <1> .dfltErrExit:
    78 00000EB6 488D155EF9FFFF      <1>     lea rdx, badCmd
    79 00000EBD B409                <1>     mov ah, 09h
    80 00000EBF CD41                <1>     int 41h
    81 00000EC1 E981FFFFFF          <1>     jmp .inputMain
    82                              <1> 
    83                              <1> parseInput:
    84                              <1> ;EndOff is set up before entering this part
    85                              <1> ;Copies a nicely formatted version of the input command line
    86                              <1> ; without any redirections to psp.dta
    87                              <1>     ;lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
    88 00000EC6 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    89 00000ECD 488B35CBF1FFFF      <1>     mov rsi, qword [cmdStartPtr]
    90 00000ED4 4885F6              <1>     test rsi, rsi
    91 00000ED7 7507                <1>     jnz .notNewCmd
    92 00000ED9 488D35BEF2FFFF      <1>     lea rsi, [cmdBuffer + 1]    ;Goto command buffer - 1
    93                              <1> .notNewCmd:
    94 00000EE0 48FFC6              <1>     inc rsi ;Goto first char in new buffer since rsi points to terminating char
    95 00000EE3 E89C1B0000          <1>     call skipSpaces ;Skip any preceeding spaces
    96 00000EE8 66AD                <1>     lodsw   ;Get the first two chars into ax
    97 00000EEA 668905C3F1FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
    98 00000EF1 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
    99 00000EF8 56                  <1>     push rsi
   100 00000EF9 57                  <1>     push rdi
   101 00000EFA 488D3D1CF3FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   102 00000F01 57                  <1>     push rdi
   103 00000F02 E802070000          <1>     call copyCommandTailItemProgram
   104 00000F07 5F                  <1>     pop rdi
   105 00000F08 9C                  <1>     pushfq  ;Save the CF state
   106 00000F09 E8081B0000          <1>     call strlen
   107 00000F0E FFC9                <1>     dec ecx ;Drop the terminating char from the count
   108 00000F10 58                  <1>     pop rax ;Get the CF state in al
   109 00000F11 5F                  <1>     pop rdi
   110 00000F12 5E                  <1>     pop rsi
   111 00000F13 F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   112 00000F15 A801                <1>     test al, 1  ;Was CF set?
   113 00000F17 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   114                              <1> .cmdLineProcess:
   115 00000F1D E8621B0000          <1>     call skipSpaces ;Go to the next char in the input line
   116                              <1> .redirFound:
   117 00000F22 AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   118 00000F23 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   119 00000F25 747C                <1>     je .exit
   120 00000F27 E820050000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   121 00000F2C 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   122 00000F2E 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   123 00000F30 B020                <1>     mov al, " "
   124 00000F32 AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   125 00000F33 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   126 00000F36 F6057FF1FFFFFF      <1>     test byte [arg1Flg], -1
   127 00000F3D 7521                <1>     jnz .arg2
   128                              <1> .arg1:
   129 00000F3F C60576F1FFFFFF      <1>     mov byte [arg1Flg], -1
   130 00000F46 E8391B0000          <1>     call skipSpaces
   131 00000F4B 4889F0              <1>     mov rax, rsi
   132 00000F4E 488D1D48F2FFFF      <1>     lea rbx, cmdBuffer
   133 00000F55 4829D8              <1>     sub rax, rbx
   134 00000F58 88055FF1FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   135 00000F5E EB2A                <1>     jmp short .argCommon
   136                              <1> .arg2:
   137 00000F60 F60558F1FFFFFF      <1>     test byte [arg2Flg], -1
   138 00000F67 7521                <1>     jnz .argCommon
   139 00000F69 C6054FF1FFFFFF      <1>     mov byte [arg2Flg], -1
   140 00000F70 E80F1B0000          <1>     call skipSpaces
   141 00000F75 4889F0              <1>     mov rax, rsi
   142 00000F78 488D1D1EF2FFFF      <1>     lea rbx, cmdBuffer
   143 00000F7F 4829D8              <1>     sub rax, rbx
   144 00000F82 880538F1FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   145 00000F88 EB00                <1>     jmp short .argCommon
   146                              <1> .argCommon:
   147                              <1>     ;More than two arguments? Do nothing more than just copy it
   148                              <1>     ; over. If we encounter an embedded CR, exit there too
   149 00000F8A E8F51A0000          <1>     call skipSpaces
   150 00000F8F 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   151 00000F92 740F                <1>     je .exit
   152                              <1>     ;If not, we copy it over
   153 00000F94 E89E060000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   154 00000F99 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   155 00000F9D 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   156                              <1> .exit:
   157 00000FA3 48FFCE              <1>     dec rsi
   158 00000FA6 488935FAF0FFFF      <1>     mov qword [cmdEndPtr], rsi
   159 00000FAD B00D                <1>     mov al, CR
   160 00000FAF AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   161                              <1>     ;Now compute the command line length 
   162 00000FB0 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   163 00000FB7 B00D                <1>     mov al, CR
   164 00000FB9 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   165 00000FBB FFC9                <1>     dec ecx ;rcx = -1
   166 00000FBD F2AE                <1>     repne scasb
   167 00000FBF F7D1                <1>     not ecx
   168 00000FC1 FEC9                <1>     dec cl  ;Dont include terminating CR
   169 00000FC3 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   170 00000FCA 880F                <1>     mov byte [rdi], cl
   171                              <1>     ;Before returning, we copy the command name to cmdName
   172 00000FCC 488D3D4AF2FFFF      <1>     lea rdi, cmdPathSpec
   173 00000FD3 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   174 00000FD6 30C0                <1>     xor al, al  ;Search for the terminating null
   175 00000FD8 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   176 00000FDD F2AE                <1>     repne scasb
   177 00000FDF 48FFCF              <1>     dec rdi ;Go to the last char in the command
   178 00000FE2 4889FE              <1>     mov rsi, rdi
   179 00000FE5 FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   180                              <1> .keepSearching:
   181 00000FE6 AC                  <1>     lodsb
   182 00000FE7 3A053EF0FFFF        <1>     cmp al, byte [pathSep]
   183 00000FED 740B                <1>     je .cmdStartFnd
   184 00000FEF 4839DE              <1>     cmp rsi, rbx
   185 00000FF2 75F2                <1>     jne .keepSearching
   186 00000FF4 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   187 00000FF7 48FFCE              <1>     dec rsi
   188                              <1> .cmdStartFnd:
   189 00000FFA 48FFC6              <1>     inc rsi
   190 00000FFD 48FFC6              <1>     inc rsi ;Go past the pathsep
   191 00001000 FC                  <1>     cld ;Go the sane way again
   192 00001001 488D3D7DF2FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   193 00001008 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   194 00001009 B90E000000          <1>     mov ecx, cmdNameL
   195 0000100E 30C0                <1>     xor al, al
   196 00001010 F3AA                <1>     rep stosb
   197 00001012 5F                  <1>     pop rdi
   198 00001013 31C9                <1>     xor ecx, ecx
   199 00001015 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   200                              <1> .cmdGetChar:
   201 00001016 AC                  <1>     lodsb
   202 00001017 84C0                <1>     test al, al ;Did we find the terminating null?
   203 00001019 7411                <1>     jz .nameLenFnd
   204 0000101B 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   205 0000101D 740D                <1>     je .nameLenFnd
   206 0000101F 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   207 00001021 AA                  <1>     stosb   ;and store it
   208 00001022 FFC1                <1>     inc ecx
   209 00001024 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   210 0000102A 72EA                <1>     jb .cmdGetChar
   211                              <1> .nameLenFnd:
   212 0000102C 880D52F2FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   213                              <1>     ;Now finally, create a FCB filespec
   214 00001032 488D3D33F2FFFF      <1>     lea rdi, fcbCmdSpec
   215 00001039 57                  <1>     push rdi
   216 0000103A B90B000000          <1>     mov ecx, fcbNameL
   217 0000103F B020                <1>     mov al, " " ;Fill with spaces
   218 00001041 F3AA                <1>     rep stosb
   219 00001043 5F                  <1>     pop rdi
   220 00001044 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   221 00001045 E8A01A0000          <1>     call asciiToFCB
   222 0000104A 488D351BF2FFFF      <1>     lea rsi, fcbCmdSpec
   223 00001051 488D3D1FF2FFFF      <1>     lea rdi, cmdSpec
   224 00001058 E8E81A0000          <1>     call FCBToAsciiz
   225                              <1>     return
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    13                              <2> %%_ret:
    14 000010DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   225                              <1> 
   226                              <1> doCommandLine:
   227 000010DC 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   228                              <1>     ;The following check accounts for the end of a piped command
   229 000010E3 803E0D              <1>     cmp byte [rsi], CR  ;If the first char is a CR, exit the pipe loop
   230                              <1>     rete    ;Do not attempt to execute if the first char is a CR
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000010E6 74(DB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   231 000010E8 488D3DD3EFFFFF      <1>     lea rdi, cmdFcb
   232 000010EF B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   233 000010F4 CD41                <1>     int 41h
   234 000010F6 0FB71DB7EFFFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   235 000010FD 80FF3A              <1>     cmp bh, ":"
   236 00001100 752E                <1>     jne .noDriveSpecified
   237 00001102 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   238 00001104 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   239 00001107 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   240 0000110A 3CFF                <1>     cmp al, -1  ;Int 41h returns AL = -1 if bad drive specified
   241 0000110C 7415                <1>     je .badDrive
   242                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   243 0000110E 803DEFF1FFFF02      <1>     cmp byte [cmdName], 2
   244 00001115 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   245 00001117 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   246 00001119 CD41                <1>     int 41h 
   247 0000111B B419                <1>     mov ah, 19h
   248 0000111D CD41                <1>     int 41h     ;Get current drive
   249 0000111F 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   250                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001121 74(DB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   251                              <1> .badDrive:
   252 00001123 488D1580F8FFFF      <1>     lea rdx, badDrv
   253 0000112A B409                <1>     mov ah, 09h
   254 0000112C CD41                <1>     int 41h
   255 0000112E F9                  <1>     stc
   256                              <1>     return
    13                              <2> %%_ret:
    14 0000112F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   257                              <1> .noDriveSpecified:
   258                              <1> ;Now we set the two FCB's in the command line
   259 00001130 F60585EFFFFFFF      <1>     test byte [arg1Flg], -1
   260 00001137 744D                <1>     jz .fcbArgsDone
   261 00001139 0FB6057DEFFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   262 00001140 488D35D6F0FFFF      <1>     lea rsi, cmdBuffer
   263 00001147 4801C6              <1>     add rsi, rax    ;Point to first argument
   264 0000114A 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   265 0000114E B801290000          <1>     mov eax, 2901h
   266 00001153 CD41                <1>     int 41h
   267 00001155 880563EFFFFF        <1>     mov byte [arg1FCBret], al
   268 0000115B F6055DEFFFFFFF      <1>     test byte [arg2Flg], -1
   269 00001162 7422                <1>     jz .fcbArgsDone
   270 00001164 0FB60555EFFFFF      <1>     movzx eax, byte [arg2Off]
   271 0000116B 488D35ABF0FFFF      <1>     lea rsi, cmdBuffer
   272 00001172 4801C6              <1>     add rsi, rax    ;Point to first argument
   273 00001175 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   274 00001179 B801290000          <1>     mov eax, 2901h
   275 0000117E CD41                <1>     int 41h
   276 00001180 88053BEFFFFF        <1>     mov byte [arg2FCBret], al
   277                              <1> .fcbArgsDone:
   278 00001186 488D3590F0FFFF      <1>     lea rsi, cmdBuffer
   279 0000118D 488D1D70F1FFFF      <1>     lea rbx, cmdName
   280 00001194 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   281 00001199 BAFFFF0000          <1>     mov edx, 0FFFFh
   282 0000119E B5FF                <1>     mov ch, -1
   283 000011A0 CD4F                <1>     int 4Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   284                              <1>             ;        al = 0  if the command should be executed as usual
   285 000011A2 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   286 000011A7 BAFFFF0000          <1>     mov edx, 0FFFFh
   287 000011AC 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   288 000011AE CD4F                <1>     int 4Fh
   289 000011B0 741D                <1>     jz .executeInternal
   290                              <1>     ;Here we execute externally and return to the prompt
   291                              <1>     ; as if it was an internal execution
   292 000011B2 488D35E4EFFFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   293 000011B9 488D1D02EFFFFF      <1>     lea rbx, cmdFcb
   294 000011C0 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   295 000011C5 BAFFFF0000          <1>     mov edx, 0FFFFh
   296 000011CA B5FF                <1>     mov ch, -1
   297 000011CC CD4F                <1>     int 4Fh 
   298                              <1>     return
    13                              <2> %%_ret:
    14 000011CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
<<<<<<< HEAD
   299                              <1> .executeInternal:
   300                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   301                              <1> ;rsi points after the command terminator in the command tail
   302 000011CF 488D1DB6F5FFFF      <1>     lea rbx, functionTable
   303                              <1> .nextEntry:
   304 000011D6 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   305 000011D9 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   306 000011DC 0F849E140000        <1>     je launchChild      ;If so, check externally now
   307 000011E2 380D1CF1FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   308 000011E8 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   309                              <1>     ;Here they have the same length so lets see if the name is the same
   310 000011EA 56                  <1>     push rsi
   311                              <1>     ;ecx has the length to compare
   312 000011EB 51                  <1>     push rcx
   313 000011EC 488D7301            <1>     lea rsi, qword [rbx + 1]
   314 000011F0 488D3D0EF1FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   315 000011F7 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   316 000011F9 59                  <1>     pop rcx
   317 000011FA 5E                  <1>     pop rsi
   318 000011FB 7516                <1>     jne .gotoNextEntry
   319                              <1>     ;Here it was found both strings are equal
   320 000011FD 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   321 00001202 480FB71F            <1>     movzx rbx, word [rdi]
   322 00001206 488D3DF3EDFFFF      <1>     lea rdi, startLbl
   323 0000120D 4801FB              <1>     add rbx, rdi
   324 00001210 FFD3                <1>     call rbx    ;Call this function...
   325                              <1>     return  ;... and return
=======
   300                              <1> .executeInternal:
   301                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   302                              <1> ;rsi points after the command terminator in the command tail
   303 00001151 488D1DB4F5FFFF      <1>     lea rbx, functionTable
   304                              <1> .nextEntry:
   305 00001158 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   306 0000115B 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   307 0000115E 0F84A4140000        <1>     je launchChild      ;If so, check externally now
   308 00001164 380D1AF1FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   309 0000116A 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   310                              <1>     ;Here they have the same length so lets see if the name is the same
   311 0000116C 56                  <1>     push rsi
   312                              <1>     ;ecx has the length to compare
   313 0000116D 51                  <1>     push rcx
   314 0000116E 488D7301            <1>     lea rsi, qword [rbx + 1]
   315 00001172 488D3D0CF1FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   316 00001179 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   317 0000117B 59                  <1>     pop rcx
   318 0000117C 5E                  <1>     pop rsi
   319 0000117D 7516                <1>     jne .gotoNextEntry
   320                              <1>     ;Here it was found both strings are equal
   321 0000117F 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   322 00001184 480FB71F            <1>     movzx rbx, word [rdi]
   323 00001188 488D3D71EEFFFF      <1>     lea rdi, startLbl
   324 0000118F 4801FB              <1>     add rbx, rdi
   325 00001192 FFD3                <1>     call rbx    ;Call this function...
   326                              <1>     return  ;... and return
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    13                              <2> %%_ret:
    14 00001212 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   326                              <1> .gotoNextEntry:
   327 00001213 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   328 0000121A 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   329 0000121D EBB7                <1>     jmp short .nextEntry
   330                              <1> .dfltErrExit:
   331 0000121F 488D1575F6FFFF      <1>     lea rdx, badCmd
   332 00001226 B409                <1>     mov ah, 09h
   333 00001228 CD41                <1>     int 41h
   334                              <1>     return
    13                              <2> %%_ret:
    14 0000122A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   335                              <1> 
   336                              <1> 
   337                              <1> checkExtensionExec:
   338                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   339                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   340                              <1> ;         If ZF=ZE and CF=CY => Batch file
   341 0000122B 8B059AEEFFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   342 00001231 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   343 00001236 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   344 0000123B 25DFDFDFFF          <1>     and eax, 0FFDFDFDFh ;Uppercase the three letters
   345 00001240 3D434F4D20          <1>     cmp eax, "COM "
   346                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001245 74(2A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   347 00001247 3D45584520          <1>     cmp eax, "EXE "
   348                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000124C 74(2A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   349 0000124E 3D42415420          <1>     cmp eax, "BAT "
   350                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001253 75(2A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   351 00001255 F9                  <1>     stc
   352                              <1>     return
    13                              <2> %%_ret:
    14 00001256 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   353                              <1> 
   354                              <1> redirFailure:
   355 00001257 488D1593FBFFFF      <1>     lea rdx, redirErrMsg
   356 0000125E B913000000          <1>     mov ecx, redirErrMsgL
   357 00001263 EB0C                <1>     jmp short redirPipeFailureCommon
   358                              <1> pipeFailure:
   359 00001265 488D156EFBFFFF      <1>     lea rdx, pipeErrMsg
   360 0000126C B917000000          <1>     mov ecx, pipeErrMsgL
   361                              <1> redirPipeFailureCommon:
   362                              <1> ;This routine is called if any problems happen during 
   363                              <1> ;This routine tries to close whatever handles are not -1 and delete
   364                              <1> ; pipe files if the pipe count is not 0
   365                              <1> ;It resets all variables and proceeds.
   366 00001271 B800400000          <1>     mov eax, 4000h  ;Write handle
   367 00001276 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   368 0000127B CD41                <1>     int 41h
   369 0000127D 31DB                <1>     xor ebx, ebx    ;Select STDIN
   370 0000127F E8C6000000          <1>     call .closeHandle
   371 00001284 FFC3                <1>     inc ebx         ;Select STDOUT
   372 00001286 E8BF000000          <1>     call .closeHandle
   373 0000128B B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   374 00001290 488D15A2FBFFFF      <1>     lea rdx, conName
   375 00001297 CD41                <1>     int 41h
   376 00001299 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
   377 0000129B B800450000          <1>     mov eax, 4500h  ;DUP
   378 000012A0 CD41                <1>     int 41h
   379 000012A2 66C7050BEEFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   380 000012AB 0FB71D06EEFFFF      <1>     movzx ebx, word [redirSTDIN]
   381 000012B2 E893000000          <1>     call .closeHandle
   382                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   383 000012B7 66C705F8EDFFFFFFFF  <1>     mov word [redirSTDIN], -1
   384 000012C0 0FB71DF3EDFFFF      <1>     movzx ebx, word [redirSTDOUT]
   385 000012C7 E87E000000          <1>     call .closeHandle
   386 000012CC 66C705E5EDFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   387 000012D5 0FB71DD4EDFFFF      <1>     movzx ebx, word [pipeSTDIN]
   388 000012DC E869000000          <1>     call .closeHandle
   389 000012E1 66C705C6EDFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   390 000012EA 0FB71DC1EDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   391 000012F1 E854000000          <1>     call .closeHandle
   392 000012F6 66C705B3EDFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   393 000012FF C605A9EDFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   394 00001306 488D15A3F0FFFF      <1>     lea rdx, qword [pipe1Filespec]
   395 0000130D 803A00              <1>     cmp byte [rdx], 0
   396 00001310 7407                <1>     jz .checkOld
   397 00001312 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   398 00001317 CD41                <1>     int 41h
   399                              <1> .checkOld:
   400 00001319 488D15DFF0FFFF      <1>     lea rdx, qword [pipe2Filespec]
   401 00001320 803A00              <1>     cmp byte [rdx],0
   402 00001323 7407                <1>     jz .pipeNamesComplete
   403 00001325 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   404 0000132A CD41                <1>     int 41h
   405                              <1> .pipeNamesComplete:
   406 0000132C 31C0                <1>     xor eax, eax
   407                              <1>     ;Invalidate the pointers and the paths too
   408 0000132E 48890519F1FFFF      <1>     mov qword [newPipe], rax
   409 00001335 4889051AF1FFFF      <1>     mov qword [oldPipe], rax
   410 0000133C 89056EF0FFFF        <1>     mov dword [pipe1Filespec], eax
   411 00001342 8905B7F0FFFF        <1>     mov dword [pipe2Filespec], eax
   412 00001348 F9                  <1>     stc
   413                              <1>     return
    13                              <2> %%_ret:
    14 00001349 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   414                              <1> .closeHandle:
   415 0000134A 81FBFFFFFFFF        <1>     cmp ebx, -1
   416                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001350 74(49)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   417 00001352 B8003E0000          <1>     mov eax, 3E00h
   418 00001357 CD41                <1>     int 41h
   419                              <1>     return
    13                              <2> %%_ret:
    14 00001359 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   420                              <1> 
   421                              <1> cleanUpRedir:
   422                              <1> ;Cleans up the redir stuff after we are done.
   423 0000135A 0FB7054FEDFFFF      <1>     movzx eax, word [pipeSTDIN]
   424 00001361 0FB71D4AEDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   425 00001368 C1E310              <1>     shl ebx, 10h
   426 0000136B 09D8                <1>     or eax, ebx
   427 0000136D 3DFFFFFFFF          <1>     cmp eax, -1
   428 00001372 750C                <1>     jne .pipe
   429 00001374 C60534EDFFFF00      <1>     mov byte [pipeFlag], 0  ;Clear the flag
   430 0000137B E9CD000000          <1>     jmp .redirInClear   ;If no piping, skip
   431                              <1> .pipe:
   432                              <1> ;Pipe processing here
   433                              <1> ;We handle stdin, closing the redir if it is and deleting
   434                              <1> ; the redir file.
   435                              <1> ;Then we handle stdout, moving the redir to stdin.
   436 00001380 66813D27EDFFFFFFFF  <1>     cmp word [pipeSTDIN], -1
   437 00001389 7443                <1>     je .pipeNostdin
   438                              <1>     ;We close the handle first and delete the file.
   439 0000138B 0FB71D1EEDFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   440 00001392 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   441 00001394 B800460000          <1>     mov eax, 4600h
   442 00001399 CD41                <1>     int 41h
   443 0000139B 0F82C4FEFFFF        <1>     jc pipeFailure
   444 000013A1 B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   445 000013A6 CD41                <1>     int 41h
   446 000013A8 0F82B7FEFFFF        <1>     jc pipeFailure
   447 000013AE 488B15A1F0FFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   448 000013B5 B800410000          <1>     mov eax, 4100h  ;Delete the file!
   449 000013BA CD41                <1>     int 41h
   450 000013BC 0F82A3FEFFFF        <1>     jc pipeFailure
   451 000013C2 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   452 000013C5 66C705E2ECFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   453                              <1> .pipeNostdin:
   454 000013CE 66813DDBECFFFFFFFF  <1>     cmp word [pipeSTDOUT], -1   ;If no stdout redir, exit now
   455 000013D7 7474                <1>     je .redirInClear
   456                              <1> ;Duplicate STDIN to save across pipe
   457 000013D9 B800450000          <1>     mov eax, 4500h
   458 000013DE 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   459 000013E0 CD41                <1>     int 41h
   460 000013E2 0F827DFEFFFF        <1>     jc pipeFailure
   461 000013E8 668905C1ECFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   462                              <1> 
   463                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   464 000013EF B800460000          <1>     mov eax, 4600h
   465 000013F4 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   466 000013F6 FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   467 000013F8 CD41                <1>     int 41h
   468 000013FA 0F8265FEFFFF        <1>     jc pipeFailure
   469                              <1> 
   470                              <1> ;Now return the original stdout to stdout
   471 00001400 89D9                <1>     mov ecx, ebx
   472 00001402 0FB71DA9ECFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   473 00001409 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   474 0000140E CD41                <1>     int 41h
   475 00001410 0F824FFEFFFF        <1>     jc pipeFailure
   476                              <1> 
   477                              <1> ;Now close the DUP'ed STDOUT
   478 00001416 B8003E0000          <1>     mov eax, 3E00h
   479 0000141B CD41                <1>     int 41h
   480 0000141D 0F8242FEFFFF        <1>     jc pipeFailure
   481                              <1> 
   482                              <1> ;Finally unwind STDIN to the beginning of the file
   483 00001423 B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   484 00001428 31DB                <1>     xor ebx, ebx    ;STDIN handle
   485 0000142A 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   486 0000142C 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   487 0000142E CD41                <1>     int 41h
   488 00001430 0F822FFEFFFF        <1>     jc pipeFailure  ;This should never happen
   489                              <1> 
   490 00001436 488B1511F0FFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   491 0000143D 48891512F0FFFF      <1>     mov qword [oldPipe], rdx
   492 00001444 66C70565ECFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   493                              <1> 
   494                              <1> .redirInClear:
   495                              <1> ;Check redir in
   496 0000144D F60562ECFFFFFF      <1>     test byte [redirIn], -1
   497 00001454 7433                <1>     jz .redirOutClear
   498                              <1> 
   499 00001456 0FB71D5BECFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   500 0000145D 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   501 0000145F B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   502 00001464 CD41                <1>     int 41h
   503 00001466 0F82EBFDFFFF        <1>     jc redirFailure
   504 0000146C B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   505 00001471 CD41                <1>     int 41h
   506 00001473 0F82DEFDFFFF        <1>     jc redirFailure
   507 00001479 66C70536ECFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   508 00001482 C6052DECFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   509                              <1> .redirOutClear:
   510                              <1> ;Now check Redir Out
   511 00001489 F60527ECFFFFFF      <1>     test byte [redirOut], -1
   512                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001490 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001492 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   513                              <1> 
   514 00001493 0FB71D20ECFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   515 0000149A B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   516 0000149F B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   517 000014A4 CD41                <1>     int 41h
   518 000014A6 0F82ABFDFFFF        <1>     jc redirFailure
   519 000014AC B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   520 000014B1 CD41                <1>     int 41h
   521 000014B3 0F829EFDFFFF        <1>     jc redirFailure
   522 000014B9 66C705F8EBFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   523 000014C2 C605EEEBFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   524                              <1>     return
    13                              <2> %%_ret:
    14 000014C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   525                              <1> 
   526                              <1> checkAndSetupRedir:
   527                              <1> ;Checks and sets up redir as appropriate
   528                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   529                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   530                              <1> ;Output: ZF=NZ => No redir
   531                              <1> ;        ZF=ZY => Redir
   532                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   533                              <1> ;CF=CY if pipe set or an embedded CR found
   534 000014CA 57                  <1>     push rdi
   535 000014CB 3C3C                <1>     cmp al, "<"
   536 000014CD 740F                <1>     je .inputRedir
   537 000014CF 3C3E                <1>     cmp al, ">"
   538 000014D1 7478                <1>     je .outputRedir
   539 000014D3 3C7C                <1>     cmp al, "|"
   540 000014D5 0F8428010000        <1>     je .pipeSetup
   541 000014DB F8                  <1>     clc
   542                              <1> .redirExit:
   543 000014DC 5F                  <1>     pop rdi
   544                              <1>     return
    13                              <2> %%_ret:
    14 000014DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
<<<<<<< HEAD
   545                              <1> .inputRedir:
   546 000014DE C605D1EBFFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   547 000014E5 488D3D26EEFFFF      <1>     lea rdi, rdrInFilespec
   548 000014EC E85F160000          <1>     call skipSpaces ;Skip spaces between < and the filespec
   549 000014F1 E8BF010000          <1>     call copyCommandTailItem
   550                              <1>     ;jc .redirExit
   551 000014F6 48FFCE              <1>     dec rsi ;Ensure rsi points to the terminating char
   552 000014F9 E852160000          <1>     call skipSpaces
   553                              <1>     ;Setup the redir here for STDIN
   554 000014FE 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   555 00001500 B800450000          <1>     mov eax, 4500h
   556 00001505 CD41                <1>     int 41h
   557 00001507 0F8274010000        <1>     jc .redirError
   558 0000150D 668905A4EBFFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   559 00001514 488D15F7EDFFFF      <1>     lea rdx, rdrInFilespec
   560 0000151B B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   561 00001520 CD41                <1>     int 41h
   562 00001522 0F8259010000        <1>     jc .redirError
   563 00001528 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   564 0000152A 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   565 0000152D B800460000          <1>     mov eax, 4600h
   566 00001532 CD41                <1>     int 41h
   567 00001534 0F8247010000        <1>     jc .redirError
   568 0000153A B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   569 0000153F CD41                <1>     int 41h
   570 00001541 0F823A010000        <1>     jc .redirError
   571 00001547 30C0                <1>     xor al, al
   572 00001549 EB91                <1>     jmp short .redirExit
   573                              <1> .outputRedir:
   574 0000154B C60565EBFFFF01      <1>     mov byte [redirOut], 1
   575 00001552 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   576 00001555 7509                <1>     jne .notDouble
   577 00001557 FE055AEBFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   578 0000155D 48FFC6              <1>     inc rsi ;Go past it too
   579                              <1> .notDouble:
   580 00001560 488D3DFAEDFFFF      <1>     lea rdi, rdrOutFilespec
   581 00001567 E8E4150000          <1>     call skipSpaces
   582 0000156C E844010000          <1>     call copyCommandTailItem
   583                              <1>     ;jc .redirExit
   584 00001571 48FFCE              <1>     dec rsi ;Ensure rsi points to the terminating char
   585 00001574 E8D7150000          <1>     call skipSpaces
   586                              <1>     ;Setup the redir here for STDOUT
   587 00001579 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   588 0000157E B800450000          <1>     mov eax, 4500h
   589 00001583 CD41                <1>     int 41h
   590 00001585 0F82F6000000        <1>     jc .redirError
   591 0000158B 66890528EBFFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   592 00001592 488D15C8EDFFFF      <1>     lea rdx, rdrOutFilespec
   593 00001599 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   594 0000159E CD41                <1>     int 41h
   595 000015A0 7312                <1>     jnc .fileExists
   596 000015A2 B8003C0000          <1>     mov eax, 3C00h
   597 000015A7 B900000000          <1>     mov ecx, 0  ;Make the file with no attributes
   598 000015AC CD41                <1>     int 41h
   599 000015AE 0F82CD000000        <1>     jc .redirError
   600                              <1> .fileExists:
   601 000015B4 B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   602 000015B9 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   603 000015BC B800460000          <1>     mov eax, 4600h  ;DUP2
   604 000015C1 CD41                <1>     int 41h
   605 000015C3 0F82B8000000        <1>     jc .redirError
   606 000015C9 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   607 000015CE CD41                <1>     int 41h
   608 000015D0 0F82AB000000        <1>     jc .redirError
   609 000015D6 803DDAEAFFFF01      <1>     cmp byte [redirOut], 1
   610 000015DD 7416                <1>     je .dontAppend
   611                              <1>     ;Here we move the file pointer to the end of the file
   612 000015DF 31D2                <1>     xor edx, edx    ;Low order 32 bits
   613 000015E1 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   614 000015E3 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   615 000015E8 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   616 000015ED CD41                <1>     int 41h
   617 000015EF 0F828C000000        <1>     jc .redirError
   618                              <1> .dontAppend:
   619 000015F5 C605BBEAFFFFFF      <1>     mov byte [redirOut], -1
   620 000015FC 30C0                <1>     xor al, al
   621 000015FE E9D9FEFFFF          <1>     jmp .redirExit
   622                              <1> .pipeSetup:
   623                              <1> ;We only need to setup STDOUT redirection to the pipe file
   624 00001603 488D15A6EDFFFF      <1>     lea rdx, pipe1Filespec
   625 0000160A 803A00              <1>     cmp byte [rdx], 0
   626 0000160D 740C                <1>     jz .pathFound
   627 0000160F 488D15E9EDFFFF      <1>     lea rdx, pipe2Filespec
   628 00001616 803A00              <1>     cmp byte [rdx], 0
   629 00001619 7560                <1>     jnz .pipeError
   630                              <1> .pathFound:
   631 0000161B 4889152CEEFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   632 00001622 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   633 00001627 BB01000000          <1>     mov ebx, 1
   634 0000162C CD41                <1>     int 41h
   635 0000162E 724B                <1>     jc .pipeError
   636 00001630 6689057BEAFFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   637 00001637 E8A1140000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   638 0000163C 0441                <1>     add al, "A"
   639 0000163E BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   640 00001643 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   641 00001645 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   642 00001647 B900000000          <1>     mov ecx, 0;dirHidden  ;Hidden attributes
   643 0000164C B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   644 00001651 CD41                <1>     int 41h
   645 00001653 7226                <1>     jc .pipeError
   646                              <1>     ;AX has the handle for this file now, this will become STDOUT
   647                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   648 00001655 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   649 00001658 B901000000          <1>     mov ecx, 1
   650 0000165D B800460000          <1>     mov eax, 4600h
   651 00001662 CD41                <1>     int 41h
   652 00001664 7215                <1>     jc .pipeError
   653 00001666 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   654 0000166B CD41                <1>     int 41h
   655 0000166D 720C                <1>     jc .pipeError
   656 0000166F C60539EAFFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   657 00001676 30C0                <1>     xor al, al
   658 00001678 F9                  <1>     stc
   659 00001679 5F                  <1>     pop rdi
   660                              <1>     return
=======
   546                              <1> .inputRedir:
   547 00001460 C6054FECFFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   548 00001467 488D3D24EEFFFF      <1>     lea rdi, rdrInFilespec
   549 0000146E E811160000          <1>     call skipSpaces ;Skip spaces between < and the filespec
   550 00001473 E8BF010000          <1>     call copyCommandTailItem
   551                              <1>     ;jc .redirExit
   552 00001478 48FFCE              <1>     dec rsi ;Ensure rsi points to the terminating char
   553 0000147B E804160000          <1>     call skipSpaces
   554                              <1>     ;Setup the redir here for STDIN
   555 00001480 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   556 00001482 B800450000          <1>     mov eax, 4500h
   557 00001487 CD41                <1>     int 41h
   558 00001489 0F8274010000        <1>     jc .redirError
   559 0000148F 66890522ECFFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   560 00001496 488D15F5EDFFFF      <1>     lea rdx, rdrInFilespec
   561 0000149D B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   562 000014A2 CD41                <1>     int 41h
   563 000014A4 0F8259010000        <1>     jc .redirError
   564 000014AA 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   565 000014AC 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   566 000014AF B800460000          <1>     mov eax, 4600h
   567 000014B4 CD41                <1>     int 41h
   568 000014B6 0F8247010000        <1>     jc .redirError
   569 000014BC B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   570 000014C1 CD41                <1>     int 41h
   571 000014C3 0F823A010000        <1>     jc .redirError
   572 000014C9 30C0                <1>     xor al, al
   573 000014CB EB91                <1>     jmp short .redirExit
   574                              <1> .outputRedir:
   575 000014CD C605E3EBFFFF01      <1>     mov byte [redirOut], 1
   576 000014D4 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   577 000014D7 7509                <1>     jne .notDouble
   578 000014D9 FE05D8EBFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   579 000014DF 48FFC6              <1>     inc rsi ;Go past it too
   580                              <1> .notDouble:
   581 000014E2 488D3DF8EDFFFF      <1>     lea rdi, rdrOutFilespec
   582 000014E9 E896150000          <1>     call skipSpaces
   583 000014EE E844010000          <1>     call copyCommandTailItem
   584                              <1>     ;jc .redirExit
   585 000014F3 48FFCE              <1>     dec rsi ;Ensure rsi points to the terminating char
   586 000014F6 E889150000          <1>     call skipSpaces
   587                              <1>     ;Setup the redir here for STDOUT
   588 000014FB BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   589 00001500 B800450000          <1>     mov eax, 4500h
   590 00001505 CD41                <1>     int 41h
   591 00001507 0F82F6000000        <1>     jc .redirError
   592 0000150D 668905A6EBFFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   593 00001514 488D15C6EDFFFF      <1>     lea rdx, rdrOutFilespec
   594 0000151B B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   595 00001520 CD41                <1>     int 41h
   596 00001522 7312                <1>     jnc .fileExists
   597 00001524 B8003C0000          <1>     mov eax, 3C00h
   598 00001529 B900000000          <1>     mov ecx, 0  ;Make the file with no attributes
   599 0000152E CD41                <1>     int 41h
   600 00001530 0F82CD000000        <1>     jc .redirError
   601                              <1> .fileExists:
   602 00001536 B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   603 0000153B 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   604 0000153E B800460000          <1>     mov eax, 4600h  ;DUP2
   605 00001543 CD41                <1>     int 41h
   606 00001545 0F82B8000000        <1>     jc .redirError
   607 0000154B B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   608 00001550 CD41                <1>     int 41h
   609 00001552 0F82AB000000        <1>     jc .redirError
   610 00001558 803D58EBFFFF01      <1>     cmp byte [redirOut], 1
   611 0000155F 7416                <1>     je .dontAppend
   612                              <1>     ;Here we move the file pointer to the end of the file
   613 00001561 31D2                <1>     xor edx, edx    ;Low order 32 bits
   614 00001563 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   615 00001565 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   616 0000156A B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   617 0000156F CD41                <1>     int 41h
   618 00001571 0F828C000000        <1>     jc .redirError
   619                              <1> .dontAppend:
   620 00001577 C60539EBFFFFFF      <1>     mov byte [redirOut], -1
   621 0000157E 30C0                <1>     xor al, al
   622 00001580 E9D9FEFFFF          <1>     jmp .redirExit
   623                              <1> .pipeSetup:
   624                              <1> ;We only need to setup STDOUT redirection to the pipe file
   625 00001585 488D15A4EDFFFF      <1>     lea rdx, pipe1Filespec
   626 0000158C 803A00              <1>     cmp byte [rdx], 0
   627 0000158F 740C                <1>     jz .pathFound
   628 00001591 488D15E7EDFFFF      <1>     lea rdx, pipe2Filespec
   629 00001598 803A00              <1>     cmp byte [rdx], 0
   630 0000159B 7560                <1>     jnz .pipeError
   631                              <1> .pathFound:
   632 0000159D 4889152AEEFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   633 000015A4 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   634 000015A9 BB01000000          <1>     mov ebx, 1
   635 000015AE CD41                <1>     int 41h
   636 000015B0 724B                <1>     jc .pipeError
   637 000015B2 668905F9EAFFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   638 000015B9 E853140000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   639 000015BE 0441                <1>     add al, "A"
   640 000015C0 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   641 000015C5 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   642 000015C7 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   643 000015C9 B900000000          <1>     mov ecx, 0;dirHidden  ;Hidden attributes
   644 000015CE B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   645 000015D3 CD41                <1>     int 41h
   646 000015D5 7226                <1>     jc .pipeError
   647                              <1>     ;AX has the handle for this file now, this will become STDOUT
   648                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   649 000015D7 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   650 000015DA B901000000          <1>     mov ecx, 1
   651 000015DF B800460000          <1>     mov eax, 4600h
   652 000015E4 CD41                <1>     int 41h
   653 000015E6 7215                <1>     jc .pipeError
   654 000015E8 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   655 000015ED CD41                <1>     int 41h
   656 000015EF 720C                <1>     jc .pipeError
   657 000015F1 C605B7EAFFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   658 000015F8 30C0                <1>     xor al, al
   659 000015FA F9                  <1>     stc
   660 000015FB 5F                  <1>     pop rdi
   661                              <1>     return
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    13                              <2> %%_ret:
    14 0000167A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
<<<<<<< HEAD
   661                              <1> .pipeError:
   662 0000167B 5F                  <1>     pop rdi 
   663 0000167C E9E4FBFFFF          <1>     jmp pipeFailure
   664                              <1> .redirError:
   665 00001681 5F                  <1>     pop rdi 
   666 00001682 E9D0FBFFFF          <1>     jmp redirFailure
   667                              <1> 
   668                              <1> copyCommandTailItemProgram:
   669                              <1> ;Copies a program name from the command tail until a terminator is found.
   670                              <1> ;Stores a terminating null in the destination
   671                              <1> ;Input: rsi = Start of the item to copy
   672                              <1> ;       rdi = Location for copy
   673                              <1> ;Output: Sentence copied with a null terminator inserted.
   674                              <1> ; If CF=CY, embedded CR encountered
   675 00001687 AC                  <1>     lodsb
   676 00001688 3C0D                <1>     cmp al, CR
   677 0000168A 741E                <1>     je .endOfInput
   678 0000168C 3C7C                <1>     cmp al, "|"
   679 0000168E 741A                <1>     je .endOfInput
   680 00001690 E891140000          <1>     call isALterminator
   681 00001695 741A                <1>     jz .exit
   682 00001697 3A058EE9FFFF        <1>     cmp al, byte [pathSep]
   683 0000169D 7412                <1>     je .exit
   684 0000169F 3A0587E9FFFF        <1>     cmp al, byte [switchChar]
   685 000016A5 740A                <1>     je .exit
   686 000016A7 AA                  <1>     stosb
   687 000016A8 EBDD                <1>     jmp short copyCommandTailItemProgram
   688                              <1> .endOfInput:
   689 000016AA E802000000          <1>     call .exit
   690 000016AF F9                  <1>     stc 
   691                              <1>     return
=======
   662                              <1> .pipeError:
   663 000015FD 5F                  <1>     pop rdi 
   664 000015FE E9E4FBFFFF          <1>     jmp pipeFailure
   665                              <1> .redirError:
   666 00001603 5F                  <1>     pop rdi 
   667 00001604 E9D0FBFFFF          <1>     jmp redirFailure
   668                              <1> 
   669                              <1> copyCommandTailItemProgram:
   670                              <1> ;Copies a program name from the command tail until a terminator is found.
   671                              <1> ;Stores a terminating null in the destination
   672                              <1> ;Input: rsi = Start of the item to copy
   673                              <1> ;       rdi = Location for copy
   674                              <1> ;Output: Sentence copied with a null terminator inserted.
   675                              <1> ; If CF=CY, embedded CR encountered
   676 00001609 AC                  <1>     lodsb
   677 0000160A 3C0D                <1>     cmp al, CR
   678 0000160C 741E                <1>     je .endOfInput
   679 0000160E 3C7C                <1>     cmp al, "|"
   680 00001610 741A                <1>     je .endOfInput
   681 00001612 E843140000          <1>     call isALterminator
   682 00001617 741A                <1>     jz .exit
   683 00001619 3A050CEAFFFF        <1>     cmp al, byte [pathSep]
   684 0000161F 7412                <1>     je .exit
   685 00001621 3A0505EAFFFF        <1>     cmp al, byte [switchChar]
   686 00001627 740A                <1>     je .exit
   687 00001629 AA                  <1>     stosb
   688 0000162A EBDD                <1>     jmp short copyCommandTailItemProgram
   689                              <1> .endOfInput:
   690 0000162C E802000000          <1>     call .exit
   691 00001631 F9                  <1>     stc 
   692                              <1>     return
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    13                              <2> %%_ret:
    14 000016B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   692                              <1> .exit:
   693 000016B1 30C0                <1>     xor al, al
   694 000016B3 AA                  <1>     stosb
   695                              <1>     return
    13                              <2> %%_ret:
    14 000016B4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
<<<<<<< HEAD
   696                              <1> 
   697                              <1> copyCommandTailItem:
   698                              <1> ;Copies a sentence from the command tail until a terminator is found.
   699                              <1> ;Stores a terminating null in the destination
   700                              <1> ;Input: rsi = Start of the item to copy
   701                              <1> ;       rdi = Location for copy
   702                              <1> ;Output: Sentence copied with a null terminator inserted.
   703                              <1> ; If CF=CY, embedded CR or Pipe encountered
   704 000016B5 AC                  <1>     lodsb
   705 000016B6 3C0D                <1>     cmp al, CR
   706 000016B8 7446                <1>     je .endOfInput
   707 000016BA 3C7C                <1>     cmp al, "|"
   708 000016BC 7442                <1>     je .endOfInput
   709 000016BE E863140000          <1>     call isALterminator
   710 000016C3 7442                <1>     jz .exit
   711 000016C5 3C3C                <1>     cmp al, "<"
   712 000016C7 743E                <1>     jz .exit
   713 000016C9 3C3E                <1>     cmp al, ">"
   714 000016CB 743A                <1>     jz .exit
   715 000016CD 3A0558E9FFFF        <1>     cmp al, byte [pathSep]
   716 000016D3 740B                <1>     je .pathSep
   717 000016D5 3A0551E9FFFF        <1>     cmp al, byte [switchChar]
   718 000016DB 742A                <1>     je .exit
   719 000016DD AA                  <1>     stosb
   720 000016DE EBD5                <1>     jmp short copyCommandTailItem
   721                              <1> .pathSep:
   722                              <1> ;We look ahead, if the last char is a pathsep, we ignore it
   723 000016E0 AC                  <1>     lodsb   ;Get the next char, increment rsi by one
   724 000016E1 E840140000          <1>     call isALterminator
   725 000016E6 741F                <1>     jz .exit
   726 000016E8 3C0D                <1>     cmp al, CR
   727 000016EA 7414                <1>     je .endOfInput
   728 000016EC 3A053AE9FFFF        <1>     cmp al, byte [switchChar]
   729 000016F2 7413                <1>     je .exit
   730 000016F4 8A0531E9FFFF        <1>     mov al, byte [pathSep]
   731 000016FA AA                  <1>     stosb   ;Else store the pathsep
   732 000016FB 48FFCE              <1>     dec rsi ;Move rsi back a piece
   733 000016FE EBB5                <1>     jmp short copyCommandTailItem
   734                              <1> .endOfInput:
   735 00001700 E802000000          <1>     call .exit
   736 00001705 F9                  <1>     stc 
   737                              <1>     return
=======
   697                              <1> 
   698                              <1> copyCommandTailItem:
   699                              <1> ;Copies a sentence from the command tail until a terminator is found.
   700                              <1> ;Stores a terminating null in the destination
   701                              <1> ;Input: rsi = Start of the item to copy
   702                              <1> ;       rdi = Location for copy
   703                              <1> ;Output: Sentence copied with a null terminator inserted.
   704                              <1> ; If CF=CY, embedded CR or Pipe encountered
   705 00001637 AC                  <1>     lodsb
   706 00001638 3C0D                <1>     cmp al, CR
   707 0000163A 7446                <1>     je .endOfInput
   708 0000163C 3C7C                <1>     cmp al, "|"
   709 0000163E 7442                <1>     je .endOfInput
   710 00001640 E815140000          <1>     call isALterminator
   711 00001645 7442                <1>     jz .exit
   712 00001647 3C3C                <1>     cmp al, "<"
   713 00001649 743E                <1>     jz .exit
   714 0000164B 3C3E                <1>     cmp al, ">"
   715 0000164D 743A                <1>     jz .exit
   716 0000164F 3A05D6E9FFFF        <1>     cmp al, byte [pathSep]
   717 00001655 740B                <1>     je .pathSep
   718 00001657 3A05CFE9FFFF        <1>     cmp al, byte [switchChar]
   719 0000165D 742A                <1>     je .exit
   720 0000165F AA                  <1>     stosb
   721 00001660 EBD5                <1>     jmp short copyCommandTailItem
   722                              <1> .pathSep:
   723                              <1> ;We look ahead, if the last char is a pathsep, we ignore it
   724 00001662 AC                  <1>     lodsb   ;Get the next char, increment rsi by one
   725 00001663 E8F2130000          <1>     call isALterminator
   726 00001668 741F                <1>     jz .exit
   727 0000166A 3C0D                <1>     cmp al, CR
   728 0000166C 7414                <1>     je .endOfInput
   729 0000166E 3A05B8E9FFFF        <1>     cmp al, byte [switchChar]
   730 00001674 7413                <1>     je .exit
   731 00001676 8A05AFE9FFFF        <1>     mov al, byte [pathSep]
   732 0000167C AA                  <1>     stosb   ;Else store the pathsep
   733 0000167D 48FFCE              <1>     dec rsi ;Move rsi back a piece
   734 00001680 EBB5                <1>     jmp short copyCommandTailItem
   735                              <1> .endOfInput:
   736 00001682 E802000000          <1>     call .exit
   737 00001687 F9                  <1>     stc 
   738                              <1>     return
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    13                              <2> %%_ret:
    14 00001706 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   738                              <1> .exit:
   739 00001707 30C0                <1>     xor al, al
   740 00001709 AA                  <1>     stosb
   741                              <1>     return
    13                              <2> %%_ret:
    14 0000170A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   742                              <1> 
   743                              <1> 
   744                              <1> int4Eh:   ;Interrupt interface for parsing and executing command lines
   745                              <1> ;Input: rsi points to the count byte of a command line
   746 0000170B 4150                <1>     push r8
   747 0000170D 4151                <1>     push r9
   748 0000170F B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   749 00001711 CD41                <1>     int 41h
   750 00001713 52                  <1>     push rdx    ;Save on the stack
   751 00001714 488D1DE5E7FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   752 0000171B B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   753 0000171D CD41                <1>     int 41h
   754 0000171F 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   755 00001722 4989D9              <1>     mov r9, rbx
   756 00001725 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   757 0000172C B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   758 00001731 F348A5              <1>     rep movsq   ;Copy command line over
   759                              <1>     ;call doCommandLine
   760 00001734 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   761 00001735 B450                <1>     mov ah, 50h ;Set Current PSP
   762 00001737 CD41                <1>     int 41h
   763 00001739 4159                <1>     pop r9
   764 0000173B 4158                <1>     pop r8
   765 0000173D 48CF                <1>     iretq
    16                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 4Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> noSelfCopyError:
     7 0000173F 488D15E3F1FFFF      <1>     lea rdx, noSelfCopy
     8 00001746 EB34                <1>     jmp short badCmn
     9                              <1> badParamError:
    10 00001748 488D1598F2FFFF      <1>     lea rdx, badParm
    11 0000174F EB2B                <1>     jmp short badCmn
    12                              <1> badDriveError:
    13 00001751 488D1552F2FFFF      <1>     lea rdx, badDrv
    14 00001758 EB22                <1>     jmp short badCmn
    15                              <1> badArgError:
    16 0000175A 488D1503F5FFFF      <1>     lea rdx, badArgs
    17 00001761 EB19                <1>     jmp short badCmn
    18                              <1> badFileError:
    19 00001763 488D15DEF4FFFF      <1>     lea rdx, badSpec
    20 0000176A EB10                <1>     jmp short badCmn
    21                              <1> badDupFnf:
    22                              <1> ;Hybrid error message
    23 0000176C 488D1543F1FFFF      <1>     lea rdx, dupName
    24 00001773 EB07                <1>     jmp short badCmn
    25                              <1> badDirError:
    26 00001775 488D156CF3FFFF      <1>     lea rdx, badDir
    27                              <1> badCmn:
    28 0000177C B800090000          <1>     mov eax, 0900h
    29 00001781 CD41                <1>     int 41h
    30 00001783 F9                  <1>     stc ;Return with CY => Error occured
    31                              <1>     return
    13                              <2> %%_ret:
    14 00001784 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> 
    33                              <1> dir:
    34                              <1>     ;breakpoint
    35 00001785 C60552EDFFFF00      <1>     mov byte [dirPrnType], 0    ;Clear DIR flags
    36 0000178C C6054CEDFFFF00      <1>     mov byte [dirLineCtr], 0
    37 00001793 C60546EDFFFF00      <1>     mov byte [dirFileCtr], 0
    38 0000179A C605C1EDFFFF00      <1>     mov byte [dirPathArg], 0    ;Null terminate the start of the buffer
    39 000017A1 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    39 000017AA 3F                  <1>
    40 000017AB 488D3D30EEFFFF      <1>     lea rdi, dirSrchPat ;Start also by initialising the search pattern
    41 000017B2 48AB                <1>     stosq
    42 000017B4 48FFC7              <1>     inc rdi ;Go past dot
    43 000017B7 668907              <1>     mov word [rdi], ax
    44 000017BA 884702              <1>     mov byte [rdi + 2], al
    45                              <1>     ;Start by scanning for the switches
    46 000017BD 488D3D5AEAFFFF      <1>     lea rdi, cmdBuffer + 1  ;Goto command line input chars count
    47 000017C4 0FB60F              <1>     movzx ecx, byte [rdi]   ;Get number of chars typed
    48 000017C7 48FFC7              <1>     inc rdi ;Goto first char typed in
    49 000017CA 4889FE              <1>     mov rsi, rdi    ;Use rsi as start of buffer counter
    50 000017CD 8A0559E8FFFF        <1>     mov al, byte [switchChar]   ;Scan for switchchars
    51                              <1> .switchScan:
    52 000017D3 F2AE                <1>     repne scasb ;Scan for a switchchar
    53 000017D5 67E320              <1>     jecxz .switchScanDone
    54 000017D8 24DF                <1>     and al, 0DFh    ;UC it
    55 000017DA 3C57                <1>     cmp al, "W" ;Wide print mode?
    56 000017DC 7509                <1>     jne .notWideSw
    57 000017DE 800DF9ECFFFF01      <1>     or byte [dirPrnType], 1 ;Set the correct bit
    58 000017E5 EBEC                <1>     jmp short .switchScan
    59                              <1> .notWideSw:
    60 000017E7 3C50                <1>     cmp al, "P" ;Pause mode?
    61 000017E9 0F8559FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    62 000017EF 800DE8ECFFFF02      <1>     or byte [dirPrnType], 2 ;Set correct bit
    63 000017F6 EBDB                <1>     jmp short .switchScan
    64                              <1> .switchScanDone:
    65                              <1> ;If no args, only switches, we search CWD
    66                              <1> ;If one arg, search that 
    67                              <1> ;If more than one, fail
<<<<<<< HEAD
    68 000017F8 488D3520EAFFFF      <1>     lea rsi, cmdBuffer + 2
    69 000017FF E84C130000          <1>     call skipSpaces ;Skip leading spaces
    70 00001804 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    71                              <1> .lp:
    72 0000180B E840130000          <1>     call skipSpaces ;Skip spaces after
    73 00001810 AC                  <1>     lodsb   ;Get first non space char
    74 00001811 E833130000          <1>     call isALEndOfCommand   ;If this is the end char CR or "|", exit
    75 00001816 744A                <1>     jz .eocNoNull
    76 00001818 3C3E                <1>     cmp al, ">"
    77 0000181A 7446                <1>     je .eocNoNull
    78 0000181C 3C3C                <1>     cmp al, "<"
    79 0000181E 7442                <1>     je .eocNoNull
    80 00001820 3A0506E8FFFF        <1>     cmp al, byte [switchChar]  ;Is al a switch char?
    81 00001826 7509                <1>     jne .notSwitch
    82                              <1>     ;Now we skip the switch if it was a switch
    83 00001828 E8C4120000          <1>     call findTerminatorOrEOC    ;Go past the switch
    84 0000182D 7233                <1>     jc .eocNoNull  ;If we reach the EOC, exit,
    85 0000182F EBDA                <1>     jmp short .lp
=======
    68 0000177A 488D351EEAFFFF      <1>     lea rsi, cmdBuffer + 2
    69 00001781 E8FE120000          <1>     call skipSpaces ;Skip leading spaces
    70 00001786 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    71                              <1> .lp:
    72 0000178D E8F2120000          <1>     call skipSpaces ;Skip spaces after
    73 00001792 AC                  <1>     lodsb   ;Get first non space char
    74 00001793 E8E5120000          <1>     call isALEndOfCommand   ;If this is the end char CR or "|", exit
    75 00001798 744A                <1>     jz .eocNoNull
    76 0000179A 3C3E                <1>     cmp al, ">"
    77 0000179C 7446                <1>     je .eocNoNull
    78 0000179E 3C3C                <1>     cmp al, "<"
    79 000017A0 7442                <1>     je .eocNoNull
    80 000017A2 3A0584E8FFFF        <1>     cmp al, byte [switchChar]  ;Is al a switch char?
    81 000017A8 7509                <1>     jne .notSwitch
    82                              <1>     ;Now we skip the switch if it was a switch
    83 000017AA E876120000          <1>     call findTerminatorOrEOC    ;Go past the switch
    84 000017AF 7233                <1>     jc .eocNoNull  ;If we reach the EOC, exit,
    85 000017B1 EBDA                <1>     jmp short .lp
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    86                              <1> .notSwitch:
    87                              <1>     ;If not a switch, should be a path. Copy to buffer and keep searching
    88 00001831 803D2AEDFFFF00      <1>     cmp byte [dirPathArg], 0    ;If a second path provided, error
    89 00001838 0F851CFFFFFF        <1>     jne badArgError
    90 0000183E 488D3D1DEDFFFF      <1>     lea rdi, dirPathArg ;Store the path to search here AS WRITTEN BY USER
    91 00001845 48FFCE              <1>     dec rsi ;Go back to the start of the string
    92                              <1> .nameCopy:
<<<<<<< HEAD
    93 00001848 AC                  <1>     lodsb
    94 00001849 E8FB120000          <1>     call isALEndOfCommand
    95 0000184E 740F                <1>     jz .eocReached
    96 00001850 E8D1120000          <1>     call isALterminator
    97 00001855 7403                <1>     jz .terminateCopy
    98 00001857 AA                  <1>     stosb
    99 00001858 EBEE                <1>     jmp short .nameCopy
=======
    93 000017CA AC                  <1>     lodsb
    94 000017CB E8AD120000          <1>     call isALEndOfCommand
    95 000017D0 740F                <1>     jz .eocReached
    96 000017D2 E883120000          <1>     call isALterminator
    97 000017D7 7403                <1>     jz .terminateCopy
    98 000017D9 AA                  <1>     stosb
    99 000017DA EBEE                <1>     jmp short .nameCopy
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   100                              <1> .terminateCopy:
   101 0000185A 31C0                <1>     xor eax, eax
   102 0000185C AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   103 0000185D EBAC                <1>     jmp short .lp ;Now search if another 
   104                              <1> .eocReached:
   105 0000185F 31C0                <1>     xor eax, eax
   106 00001861 AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   107                              <1> .eocNoNull:
   108 00001862 803DF9ECFFFF00      <1>     cmp byte [dirPathArg], 0    ;If no path provided, use CWD for current drive
   109 00001869 7434                <1>     je .currentDrv
   110                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   111 0000186B 488D35F0ECFFFF      <1>     lea rsi, dirPathArg
   112 00001872 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   113 00001876 7527                <1>     jne .currentDrv
   114                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   115 00001878 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   116 0000187D 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   117 00001881 B801290000          <1>     mov eax, 2901h   ;Parse filename
   118 00001886 CD41                <1>     int 41h
   119 00001888 3CFF                <1>     cmp al, -1
   120 0000188A 0F84C1FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   121                              <1>     ;Else the drive in the fcb is valid
   122 00001890 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   123 00001895 FEC8                <1>     dec al  ;Convert to 0 based drive number
   124 00001897 880544ECFFFF        <1>     mov byte [dirDrv], al
   125 0000189D EB0B                <1>     jmp short .dirPrintVol
   126                              <1> .currentDrv:
<<<<<<< HEAD
   127 0000189F E839120000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   128 000018A4 880537ECFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   129                              <1> .dirPrintVol:
   130 000018AA 0FB60530ECFFFF      <1>     movzx eax, byte [dirDrv] 
   131 000018B1 E8B70A0000          <1>     call volume.dirEP
   132 000018B6 803DA5ECFFFF00      <1>     cmp byte [dirPathArg], 0    ;Null path here, 
   133 000018BD 7409                <1>     je .printCWD
   134 000018BF 803D9FECFFFF00      <1>     cmp byte [dirPathArg + 3], 0    ;Was this X:,0?
   135 000018C6 7400                <1>     je .printCWD
   136                              <1>     ;Here we have a path
   137                              <1>     ;Temp measure, we just fall through ignoring the path provided
   138                              <1> .printCWD:
   139 000018C8 8A1513ECFFFF        <1>     mov dl, byte [dirDrv]
   140 000018CE 88D0                <1>     mov al, dl
   141 000018D0 0441                <1>     add al, "A"
   142 000018D2 B43A                <1>     mov ah, ":"
   143 000018D4 66890583EBFFFF      <1>     mov word [searchSpec], ax
   144 000018DB 8A054AE7FFFF        <1>     mov al, byte [pathSep]
   145 000018E1 880579EBFFFF        <1>     mov byte [searchSpec + 2], al
   146 000018E7 488D3573EBFFFF      <1>     lea rsi, searchSpec + 3  ;Make space for a X:"\"
   147 000018EE B447                <1>     mov ah, 47h ;Get Current Working Directory
   148 000018F0 FEC2                <1>     inc dl  ;Convert to 1 based number
   149 000018F2 CD41                <1>     int 41h
   150 000018F4 488D3D63EBFFFF      <1>     lea rdi, searchSpec
   151 000018FB E8E2110000          <1>     call strlen
   152 00001900 FFC9                <1>     dec ecx
   153 00001902 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   154 00001906 488D1543F2FFFF      <1>     lea rdx, dirMain
   155 0000190D B409                <1>     mov ah, 09h
   156 0000190F CD41                <1>     int 41h
   157 00001911 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   158 00001914 B409                <1>     mov ah, 09h
   159 00001916 CD41                <1>     int 41h
   160 00001918 488D1522EFFFFF      <1>     lea rdx, crlf2
   161 0000191F B409                <1>     mov ah, 09h
   162 00001921 CD41                <1>     int 41h
   163 00001923 E801000000          <1>     call .searchForFile
=======
   127 00001821 E8EB110000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   128 00001826 880535ECFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   129                              <1> .dirPrintVol:
   130 0000182C 0FB6052EECFFFF      <1>     movzx eax, byte [dirDrv] 
   131 00001833 E8BD0A0000          <1>     call volume.dirEP
   132 00001838 803DA3ECFFFF00      <1>     cmp byte [dirPathArg], 0    ;Null path here, 
   133 0000183F 7409                <1>     je .printCWD
   134 00001841 803D9DECFFFF00      <1>     cmp byte [dirPathArg + 3], 0    ;Was this X:,0?
   135 00001848 7400                <1>     je .printCWD
   136                              <1>     ;Here we have a path
   137                              <1>     ;Temp measure, we just fall through ignoring the path provided
   138                              <1> .printCWD:
   139 0000184A 8A1511ECFFFF        <1>     mov dl, byte [dirDrv]
   140 00001850 88D0                <1>     mov al, dl
   141 00001852 0441                <1>     add al, "A"
   142 00001854 B43A                <1>     mov ah, ":"
   143 00001856 66890581EBFFFF      <1>     mov word [searchSpec], ax
   144 0000185D 8A05C8E7FFFF        <1>     mov al, byte [pathSep]
   145 00001863 880577EBFFFF        <1>     mov byte [searchSpec + 2], al
   146 00001869 488D3571EBFFFF      <1>     lea rsi, searchSpec + 3  ;Make space for a X:"\"
   147 00001870 B447                <1>     mov ah, 47h ;Get Current Working Directory
   148 00001872 FEC2                <1>     inc dl  ;Convert to 1 based number
   149 00001874 CD41                <1>     int 41h
   150 00001876 488D3D61EBFFFF      <1>     lea rdi, searchSpec
   151 0000187D E894110000          <1>     call strlen
   152 00001882 FFC9                <1>     dec ecx
   153 00001884 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   154 00001888 488D1541F2FFFF      <1>     lea rdx, dirMain
   155 0000188F B409                <1>     mov ah, 09h
   156 00001891 CD41                <1>     int 41h
   157 00001893 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   158 00001896 B409                <1>     mov ah, 09h
   159 00001898 CD41                <1>     int 41h
   160 0000189A 488D1520EFFFFF      <1>     lea rdx, crlf2
   161 000018A1 B409                <1>     mov ah, 09h
   162 000018A3 CD41                <1>     int 41h
   163 000018A5 E801000000          <1>     call .searchForFile
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   164                              <1>     return
    13                              <2> %%_ret:
    14 00001928 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1>     ;If we get no path spec or just a X: path spec then we 
   166                              <1>     ; search the current working directory for that pathspec
   167                              <1>     ;If we get an actual pathspec, we first save the CWD for that drive
   168                              <1>     ; and then we try to make the pathspec the CWD. 
   169                              <1>     ;   If it works, we then search *.* in that folder and return the og CWD.
   170                              <1>     ;   If it fails, we then search one level up, for the search pattern
   171                              <1>     ;    that we compute.
   172                              <1> 
   173                              <1>     
   174                              <1>     ;Now we need to print the path to the folder we will be searching in
   175                              <1> .searchForFile:
   176                              <1>     ;Now we search for the files
   177                              <1>     ;RCX must have the number of chars to the end of the pathspec
   178 00001929 488D3D2EEBFFFF      <1>     lea rdi, searchSpec
   179 00001930 8A05F5E6FFFF        <1>     mov al, byte [pathSep]
   180 00001936 38440FFF            <1>     cmp byte [rdi + rcx - 1], al
   181 0000193A 7405                <1>     je .noAddSlash  ;Deals with special case of root dir
   182 0000193C 88040F              <1>     mov byte [rdi + rcx], al
   183 0000193F FFC1                <1>     inc ecx
   184                              <1> .noAddSlash:
   185 00001941 488D3C0F            <1>     lea rdi, qword [rdi + rcx]
   186 00001945 488D3596ECFFFF      <1>     lea rsi, dirSrchPat
   187 0000194C 4889FA              <1>     mov rdx, rdi    ;Ptr to search for in rdx
   188 0000194F 48A5                <1>     movsq
   189 00001951 A5                  <1>     movsd
   190 00001952 30C0                <1>     xor al, al
   191 00001954 AA                  <1>     stosb   ;Store the terminating null
   192 00001955 B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   193 0000195A B44E                <1>     mov ah, 4Eh ;Find first
   194 0000195C CD41                <1>     int 41h
   195 0000195E 720B                <1>     jc .dirNoMoreFiles
   196                              <1> .findNext:
   197 00001960 E878000000          <1>     call .dirPrintFileData  ;Print the file information
   198 00001965 B44F                <1>     mov ah, 4Fh
   199 00001967 CD41                <1>     int 41h
   200 00001969 73F5                <1>     jnc .findNext 
   201                              <1> .dirNoMoreFiles:
   202 0000196B F6056CEBFFFF01      <1>     test byte [dirPrnType], 1
   203 00001972 740B                <1>     jz .dirNoEndNewLine
   204 00001974 488D15C3EEFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   205 0000197B B409                <1>     mov ah, 09h
   206 0000197D CD41                <1>     int 41h
   207                              <1> .dirNoEndNewLine:
   208                              <1>     ;Now we print the number of files and the number of bytes on the disk
<<<<<<< HEAD
   209 0000197F 488D1582F4FFFF      <1>     lea rdx, fourSpc
   210 00001986 B409                <1>     mov ah, 09h
   211 00001988 CD41                <1>     int 41h
   212 0000198A B409                <1>     mov ah, 09h ;Print four Spaces twice
   213 0000198C CD41                <1>     int 41h
   214 0000198E 0FB6054BEBFFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   215 00001995 E855130000          <1>     call printDecimalWord
   216 0000199A 488D15E8EFFFFF      <1>     lea rdx, dirOk
   217 000019A1 B409                <1>     mov ah, 09h
   218 000019A3 CD41                <1>     int 41h
   219 000019A5 488D1561F4FFFF      <1>     lea rdx, threeSpc
   220 000019AC B409                <1>     mov ah, 09h
   221 000019AE CD41                <1>     int 41h
   222 000019B0 B800360000          <1>     mov eax, 3600h ;Get disk info
   223 000019B5 8A1526EBFFFF        <1>     mov dl, byte [dirDrv]
   224 000019BB FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   225 000019BD CD41                <1>     int 41h ;Get disk free space info
   226 000019BF 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   227 000019C2 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   228 000019C5 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   229 000019C7 F7E1                <1>     mul ecx ;Get bytes per cluster
   230 000019C9 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   231                              <1>     ;rax now has the number of free bytes on the disk
   232 000019CC E81E130000          <1>     call printDecimalWord
   233 000019D1 488D15BBEFFFFF      <1>     lea rdx, bytesOk
   234 000019D8 B409                <1>     mov ah, 09h
   235 000019DA CD41                <1>     int 41h
=======
   209 00001901 488D1580F4FFFF      <1>     lea rdx, fourSpc
   210 00001908 B409                <1>     mov ah, 09h
   211 0000190A CD41                <1>     int 41h
   212 0000190C B409                <1>     mov ah, 09h ;Print four Spaces twice
   213 0000190E CD41                <1>     int 41h
   214 00001910 0FB60549EBFFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   215 00001917 E807130000          <1>     call printDecimalWord
   216 0000191C 488D15E6EFFFFF      <1>     lea rdx, dirOk
   217 00001923 B409                <1>     mov ah, 09h
   218 00001925 CD41                <1>     int 41h
   219 00001927 488D155FF4FFFF      <1>     lea rdx, threeSpc
   220 0000192E B409                <1>     mov ah, 09h
   221 00001930 CD41                <1>     int 41h
   222 00001932 B800360000          <1>     mov eax, 3600h ;Get disk info
   223 00001937 8A1524EBFFFF        <1>     mov dl, byte [dirDrv]
   224 0000193D FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   225 0000193F CD41                <1>     int 41h ;Get disk free space info
   226 00001941 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   227 00001944 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   228 00001947 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   229 00001949 F7E1                <1>     mul ecx ;Get bytes per cluster
   230 0000194B 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   231                              <1>     ;rax now has the number of free bytes on the disk
   232 0000194E E8D0120000          <1>     call printDecimalWord
   233 00001953 488D15B9EFFFFF      <1>     lea rdx, bytesOk
   234 0000195A B409                <1>     mov ah, 09h
   235 0000195C CD41                <1>     int 41h
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   236                              <1>     return
    13                              <2> %%_ret:
    14 000019DC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   237                              <1> 
   238                              <1> .dirPrintFileData:
   239                              <1> ;Use fcbCmdSpec to build the file name with space
   240                              <1> ;Start by print the name (same for both cases)
   241                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   242 000019DD F60503E7FFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   243                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000019E4 75(DC)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
<<<<<<< HEAD
   244 000019E6 488D3503E7FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   245 000019ED 488D3DF8E8FFFF      <1>     lea rdi, fcbCmdSpec
   246 000019F4 E8CE110000          <1>     call asciiFilenameToFCB
   247 000019F9 488D15ECE8FFFF      <1>     lea rdx, fcbCmdSpec
   248 00001A00 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   249 00001A05 BB01000000          <1>     mov ebx, 1  ;STDOUT
   250 00001A0A B440                <1>     mov ah, 40h ;Write handle
   251 00001A0C CD41                <1>     int 41h
   252 00001A0E 52                  <1>     push rdx
   253 00001A0F B220                <1>     mov dl, " "
   254 00001A11 B402                <1>     mov ah, 02h ;Print char
   255 00001A13 CD41                <1>     int 41h
   256 00001A15 5A                  <1>     pop rdx
   257 00001A16 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   258 00001A1D B903000000          <1>     mov ecx, 3  ;Print three chars
   259 00001A22 BB01000000          <1>     mov ebx, 1  ;STDOUT
   260 00001A27 B440                <1>     mov ah, 40h ;Write handle
   261 00001A29 CD41                <1>     int 41h
   262 00001A2B F605ACEAFFFF01      <1>     test byte [dirPrnType], 1
   263 00001A32 0F85A8000000        <1>     jnz .widePrint
=======
   244 00001968 488D3581E7FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   245 0000196F 488D3DF6E8FFFF      <1>     lea rdi, fcbCmdSpec
   246 00001976 E880110000          <1>     call asciiFilenameToFCB
   247 0000197B 488D15EAE8FFFF      <1>     lea rdx, fcbCmdSpec
   248 00001982 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   249 00001987 BB01000000          <1>     mov ebx, 1  ;STDOUT
   250 0000198C B440                <1>     mov ah, 40h ;Write handle
   251 0000198E CD41                <1>     int 41h
   252 00001990 52                  <1>     push rdx
   253 00001991 B220                <1>     mov dl, " "
   254 00001993 B402                <1>     mov ah, 02h ;Print char
   255 00001995 CD41                <1>     int 41h
   256 00001997 5A                  <1>     pop rdx
   257 00001998 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   258 0000199F B903000000          <1>     mov ecx, 3  ;Print three chars
   259 000019A4 BB01000000          <1>     mov ebx, 1  ;STDOUT
   260 000019A9 B440                <1>     mov ah, 40h ;Write handle
   261 000019AB CD41                <1>     int 41h
   262 000019AD F605AAEAFFFF01      <1>     test byte [dirPrnType], 1
   263 000019B4 0F85A8000000        <1>     jnz .widePrint
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   264                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   265                              <1>     ;Now check if a DIR
   266 00001A38 F605A8E6FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   267 00001A3F 7418                <1>     jz .dirPrintNotDir
   268 00001A41 488D1559EFFFFF      <1>     lea rdx, dirLbl
   269 00001A48 B409                <1>     mov ah, 09h
   270 00001A4A CD41                <1>     int 41h
   271 00001A4C 488D15BAF3FFFF      <1>     lea rdx, threeSpc
   272 00001A53 B409                <1>     mov ah, 09h
   273 00001A55 CD41                <1>     int 41h
   274 00001A57 EB4F                <1>     jmp short .dirPrintFileDT
   275                              <1> .dirPrintNotDir:
   276                              <1> ;Here we print the file size
<<<<<<< HEAD
   277 00001A59 B220                <1>     mov dl, " "
   278 00001A5B B402                <1>     mov ah, 02h
   279 00001A5D CD41                <1>     int 41h
   280 00001A5F 8B0587E6FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   281 00001A65 E8F6120000          <1>     call getDecimalWord
   282 00001A6A 4889CB              <1>     mov rbx, rcx
   283 00001A6D 51                  <1>     push rcx
   284 00001A6E 480FCB              <1>     bswap rbx
   285 00001A71 B908000000          <1>     mov ecx, 8
=======
   277 000019DB B220                <1>     mov dl, " "
   278 000019DD B402                <1>     mov ah, 02h
   279 000019DF CD41                <1>     int 41h
   280 000019E1 8B0505E7FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   281 000019E7 E8A8120000          <1>     call getDecimalWord
   282 000019EC 4889CB              <1>     mov rbx, rcx
   283 000019EF 51                  <1>     push rcx
   284 000019F0 480FCB              <1>     bswap rbx
   285 000019F3 B908000000          <1>     mov ecx, 8
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   286                              <1> .dirPrintFileSizePrep:
   287 00001A76 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   288 00001A78 7514                <1>     jne .dirPrintFileSize
   289 00001A7A B402                <1>     mov ah, 02h
   290 00001A7C B220                <1>     mov dl, " "
   291 00001A7E CD41                <1>     int 41h
   292 00001A80 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   293 00001A84 FFC9                <1>     dec ecx
   294 00001A86 81F901000000        <1>     cmp ecx, 1
   295 00001A8C 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   296                              <1> .dirPrintFileSize:
   297 00001A8E 5B                  <1>     pop rbx
   298                              <1> .dirPrintFileSizeLoop:
   299 00001A8F 88DA                <1>     mov dl, bl
   300 00001A91 B402                <1>     mov ah, 02h
   301 00001A93 CD41                <1>     int 41h
   302 00001A95 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   303 00001A99 FFC9                <1>     dec ecx
   304 00001A9B 75F2                <1>     jnz .dirPrintFileSizeLoop
   305 00001A9D 488D156DF3FFFF      <1>     lea rdx, twoSpc
   306 00001AA4 B409                <1>     mov ah, 09h
   307 00001AA6 CD41                <1>     int 41h
   308                              <1> .dirPrintFileDT:
<<<<<<< HEAD
   309 00001AA8 B220                <1>     mov dl, " "
   310 00001AAA B402                <1>     mov ah, 02h
   311 00001AAC CD41                <1>     int 41h
   312 00001AAE 0FB70535E6FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   313 00001AB5 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   314 00001AB7 E8770D0000          <1>     call printDate
   315 00001ABC 488D154EF3FFFF      <1>     lea rdx, twoSpc
   316 00001AC3 B409                <1>     mov ah, 09h
   317 00001AC5 CD41                <1>     int 41h
   318 00001AC7 0FB7051AE6FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   319 00001ACE E8820E0000          <1>     call printTime
   320 00001AD3 488D1564EDFFFF      <1>     lea rdx, crlf
   321 00001ADA B409                <1>     mov ah, 09h
   322 00001ADC CD41                <1>     int 41h
   323 00001ADE EB0B                <1>     jmp short .dirPrintNameExit
=======
   309 00001A2A B220                <1>     mov dl, " "
   310 00001A2C B402                <1>     mov ah, 02h
   311 00001A2E CD41                <1>     int 41h
   312 00001A30 0FB705B3E6FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   313 00001A37 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   314 00001A39 E8290D0000          <1>     call printDate
   315 00001A3E 488D154CF3FFFF      <1>     lea rdx, twoSpc
   316 00001A45 B409                <1>     mov ah, 09h
   317 00001A47 CD41                <1>     int 41h
   318 00001A49 0FB70598E6FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   319 00001A50 E8340E0000          <1>     call printTime
   320 00001A55 488D1562EDFFFF      <1>     lea rdx, crlf
   321 00001A5C B409                <1>     mov ah, 09h
   322 00001A5E CD41                <1>     int 41h
   323 00001A60 EB0B                <1>     jmp short .dirPrintNameExit
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   324                              <1> .widePrint:
   325                              <1> ;If /W, print name space ext space space space space
   326 00001AE0 488D1521F3FFFF      <1>     lea rdx, fourSpc
   327 00001AE7 B409                <1>     mov ah, 09h ;Print string
   328 00001AE9 CD41                <1>     int 41h
   329                              <1> .dirPrintNameExit:
   330 00001AEB FE05EFE9FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   331 00001AF1 FE05E8E9FFFF        <1>     inc byte [dirLineCtr]
   332 00001AF7 803DE1E9FFFF17      <1>     cmp byte [dirLineCtr], 23
   333                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001AFE 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001B00 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   334 00001B01 488D15C0EEFFFF      <1>     lea rdx, pauseMes
   335 00001B08 B409                <1>     mov ah, 09h
   336 00001B0A CD41                <1>     int 41h
   337 00001B0C B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   338 00001B0E CD41                <1>     int 41h
   339 00001B10 C605C8E9FFFF00      <1>     mov byte [dirLineCtr], 0
   340 00001B17 488D1520EDFFFF      <1>     lea rdx, crlf   ;Force new line
   341 00001B1E B409                <1>     mov ah, 09h
   342 00001B20 CD41                <1>     int 41h
   343                              <1>     return
    13                              <2> %%_ret:
    14 00001B22 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   344                              <1> 
   345                              <1> chdir:
   346 00001B23 F60592E5FFFFFF      <1>     test byte [arg1Flg], -1
   347 00001B2A 754D                <1>     jnz .changeDir
   348                              <1>     ;Print CWD
   349                              <1> .printCWD:
<<<<<<< HEAD
   350 00001B2C E8050F0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   351 00001B31 E8E70C0000          <1>     call printCRLF
=======
   350 00001AAE E8B70E0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   351 00001AB3 E8990C0000          <1>     call printCRLF
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   352                              <1>     return
    13                              <2> %%_ret:
    14 00001B36 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   353                              <1> .printDiskCWD:
   354                              <1> ;Print CWD for a specified drive
<<<<<<< HEAD
   355 00001B37 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   356 00001B3B 88D0                <1>     mov al, dl
   357 00001B3D 0440                <1>     add al, "@" ;Get the UC letter
   358 00001B3F B43A                <1>     mov ah, ":"
   359 00001B41 488D3D16E9FFFF      <1>     lea rdi, searchSpec
   360 00001B48 66AB                <1>     stosw   ;Store X:, rdi+=2
   361 00001B4A 8A05DBE4FFFF        <1>     mov al, byte [pathSep]
   362 00001B50 AA                  <1>     stosb   ;Store pathSep, inc rdi
   363 00001B51 B447                <1>     mov ah, 47h ;Get Current Working Directory
   364 00001B53 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   365 00001B56 CD41                <1>     int 41h
   366 00001B58 E8850F0000          <1>     call strlen
   367 00001B5D 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   368 00001B63 B440                <1>     mov ah, 40h ;Write to handle
   369 00001B65 BB01000000          <1>     mov ebx, 1  ;STDOUT
   370 00001B6A 488D15EDE8FFFF      <1>     lea rdx, searchSpec
   371 00001B71 CD41                <1>     int 41h
   372 00001B73 E8A50C0000          <1>     call printCRLF
=======
   355 00001AB9 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   356 00001ABD 88D0                <1>     mov al, dl
   357 00001ABF 0440                <1>     add al, "@" ;Get the UC letter
   358 00001AC1 B43A                <1>     mov ah, ":"
   359 00001AC3 488D3D14E9FFFF      <1>     lea rdi, searchSpec
   360 00001ACA 66AB                <1>     stosw   ;Store X:, rdi+=2
   361 00001ACC 8A0559E5FFFF        <1>     mov al, byte [pathSep]
   362 00001AD2 AA                  <1>     stosb   ;Store pathSep, inc rdi
   363 00001AD3 B447                <1>     mov ah, 47h ;Get Current Working Directory
   364 00001AD5 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   365 00001AD8 CD41                <1>     int 41h
   366 00001ADA E8370F0000          <1>     call strlen
   367 00001ADF 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   368 00001AE5 B440                <1>     mov ah, 40h ;Write to handle
   369 00001AE7 BB01000000          <1>     mov ebx, 1  ;STDOUT
   370 00001AEC 488D15EBE8FFFF      <1>     lea rdx, searchSpec
   371 00001AF3 CD41                <1>     int 41h
   372 00001AF5 E8570C0000          <1>     call printCRLF
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   373                              <1>     return
    13                              <2> %%_ret:
    14 00001B78 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   374                              <1> .changeDir:
   375 00001B79 8A053FE5FFFF        <1>     mov al, byte [arg1FCBret]
   376 00001B7F 3CFF                <1>     cmp al, -1 
   377 00001B81 0F84CAFBFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   378 00001B87 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
   379 00001B8C 7520                <1>     jne .getFQPath
   380                              <1>     ;Now we double check that on the command line we have . or ..
   381 00001B8E 0FB60528E5FFFF      <1>     movzx eax, byte [arg1Off]
   382 00001B95 488D3581E6FFFF      <1>     lea rsi, cmdBuffer
   383 00001B9C 4801C6              <1>     add rsi, rax
   384 00001B9F 8A0586E4FFFF        <1>     mov al, byte [pathSep]
   385 00001BA5 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
   386 00001BA7 7405                <1>     je .getFQPath
   387 00001BA9 803E2E              <1>     cmp byte [rsi], "."
   388 00001BAC 7589                <1>     jne .printDiskCWD
   389                              <1>     ;If the path is . or .., its acceptable, else fail
   390                              <1> .getFQPath:
<<<<<<< HEAD
   391 00001BAE E89E100000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   392 00001BB3 0F82BCFBFFFF        <1>     jc badDirError  ;If this returns CF=CY, its a badDir
   393 00001BB9 488D159EE8FFFF      <1>     lea rdx, searchSpec
   394 00001BC0 B43B                <1>     mov ah, 3Bh ;CHDIR
   395 00001BC2 CD41                <1>     int 41h
   396 00001BC4 0F82ABFBFFFF        <1>     jc badDirError
=======
   391 00001B30 E850100000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   392 00001B35 0F82BCFBFFFF        <1>     jc badDirError  ;If this returns CF=CY, its a badDir
   393 00001B3B 488D159CE8FFFF      <1>     lea rdx, searchSpec
   394 00001B42 B43B                <1>     mov ah, 3Bh ;CHDIR
   395 00001B44 CD41                <1>     int 41h
   396 00001B46 0F82ABFBFFFF        <1>     jc badDirError
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   397                              <1>     return
    13                              <2> %%_ret:
    14 00001BCA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> mkdir:
   400 00001BCB F605EAE4FFFFFF      <1>     test byte [arg1Flg], -1
   401 00001BD2 0F8482FBFFFF        <1>     jz badArgError
   402 00001BD8 F605E0E4FFFFFF      <1>     test byte [arg2Flg], -1
   403 00001BDF 0F8575FBFFFF        <1>     jnz badArgError
   404                              <1>     ;We have exactly one argument
<<<<<<< HEAD
   405 00001BE5 8A05D3E4FFFF        <1>     mov al, byte [arg1FCBret]
   406 00001BEB 3CFF                <1>     cmp al, -1 
   407 00001BED 0F845EFBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   408 00001BF3 E859100000          <1>     call buildCommandPath
   409 00001BF8 488D155FE8FFFF      <1>     lea rdx, searchSpec
   410 00001BFF B800390000          <1>     mov eax, 3900h  ;MKDIR
   411 00001C04 CD41                <1>     int 41h
=======
   405 00001B67 8A0551E5FFFF        <1>     mov al, byte [arg1FCBret]
   406 00001B6D 3CFF                <1>     cmp al, -1 
   407 00001B6F 0F845EFBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   408 00001B75 E80B100000          <1>     call buildCommandPath
   409 00001B7A 488D155DE8FFFF      <1>     lea rdx, searchSpec
   410 00001B81 B800390000          <1>     mov eax, 3900h  ;MKDIR
   411 00001B86 CD41                <1>     int 41h
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   412                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001C06 73(CA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   413                              <1> .badMake:   ;Else, bad make
   414 00001C08 488D15EDEEFFFF      <1>     lea rdx, badMD
   415 00001C0F B800090000          <1>     mov eax, 0900h
   416 00001C14 CD41                <1>     int 41h
   417                              <1>     return
    13                              <2> %%_ret:
    14 00001C16 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   418                              <1> 
   419                              <1> rmdir:
   420 00001C17 F6059EE4FFFFFF      <1>     test byte [arg1Flg], -1
   421 00001C1E 0F8436FBFFFF        <1>     jz badArgError
   422 00001C24 F60594E4FFFFFF      <1>     test byte [arg2Flg], -1
   423 00001C2B 0F8529FBFFFF        <1>     jnz badArgError
   424                              <1>     ;We have exactly one argument
<<<<<<< HEAD
   425 00001C31 8A0587E4FFFF        <1>     mov al, byte [arg1FCBret]
   426 00001C37 3CFF                <1>     cmp al, -1 
   427 00001C39 0F8412FBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   428 00001C3F E80D100000          <1>     call buildCommandPath
   429 00001C44 488D1513E8FFFF      <1>     lea rdx, searchSpec
   430 00001C4B B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   431 00001C50 CD41                <1>     int 41h
=======
   425 00001BB3 8A0505E5FFFF        <1>     mov al, byte [arg1FCBret]
   426 00001BB9 3CFF                <1>     cmp al, -1 
   427 00001BBB 0F8412FBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   428 00001BC1 E8BF0F0000          <1>     call buildCommandPath
   429 00001BC6 488D1511E8FFFF      <1>     lea rdx, searchSpec
   430 00001BCD B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   431 00001BD2 CD41                <1>     int 41h
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   432                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001C52 73(16)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   433                              <1> .badRemove:   ;Else, bad make
   434 00001C54 488D15BEEEFFFF      <1>     lea rdx, badRD
   435 00001C5B B800090000          <1>     mov eax, 0900h
   436 00001C60 CD41                <1>     int 41h
   437                              <1>     return
    13                              <2> %%_ret:
    14 00001C62 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   438                              <1> 
   439                              <1> copy:
   440 00001C63 F60552E4FFFFFF      <1>     test byte [arg1Flg], -1
   441 00001C6A 0F84EAFAFFFF        <1>     jz badArgError
   442 00001C70 F60548E4FFFFFF      <1>     test byte [arg2Flg], -1
   443 00001C77 0F84DDFAFFFF        <1>     jz badArgError
   444 00001C7D 488D3599E5FFFF      <1>     lea rsi, cmdBuffer
   445 00001C84 0FB60532E4FFFF      <1>     movzx eax, byte [arg1Off]
   446 00001C8B 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   447                              <1>     ;rsi points to terminating char
<<<<<<< HEAD
   448 00001C8E AC                  <1>     lodsb   ;Get first char in AL
   449 00001C8F 48FFCE              <1>     dec rsi ;Go back to this char
   450 00001C92 E8B20E0000          <1>     call isALEndOfCommand
   451 00001C97 0F82ABFAFFFF        <1>     jc badParamError
   452 00001C9D 488D3D62E9FFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   453                              <1> .copyName1:
   454 00001CA4 AC                  <1>     lodsb
   455 00001CA5 E89F0E0000          <1>     call isALEndOfCommand
   456 00001CAA 0F8498FAFFFF        <1>     je badParamError
   457 00001CB0 E8710E0000          <1>     call isALterminator
   458 00001CB5 7403                <1>     jz .endOfName1
   459 00001CB7 AA                  <1>     stosb
   460 00001CB8 EBEA                <1>     jmp short .copyName1
   461                              <1> .endOfName1:
   462 00001CBA 31C0                <1>     xor eax, eax
   463 00001CBC AA                  <1>     stosb   ;Store this 0 at rdi
   464 00001CBD 488D3559E5FFFF      <1>     lea rsi, cmdBuffer
   465 00001CC4 0FB605F5E3FFFF      <1>     movzx eax, byte [arg2Off]
   466 00001CCB 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   467 00001CCE AC                  <1>     lodsb   ;Get first char in AL
   468 00001CCF 48FFCE              <1>     dec rsi ;Go back to this char
   469 00001CD2 E8720E0000          <1>     call isALEndOfCommand
   470 00001CD7 0F826BFAFFFF        <1>     jc badParamError
   471 00001CDD 488D3DA2E9FFFF      <1>     lea rdi, destPath
   472                              <1> .copyName2:
   473 00001CE4 AC                  <1>     lodsb
   474 00001CE5 E85F0E0000          <1>     call isALEndOfCommand
   475 00001CEA 740A                <1>     je .endOfName2
   476 00001CEC E8350E0000          <1>     call isALterminator
   477 00001CF1 7403                <1>     jz .endOfName2
   478 00001CF3 AA                  <1>     stosb
   479 00001CF4 EBEE                <1>     jmp short .copyName2
=======
   448 00001C10 AC                  <1>     lodsb   ;Get first char in AL
   449 00001C11 48FFCE              <1>     dec rsi ;Go back to this char
   450 00001C14 E8640E0000          <1>     call isALEndOfCommand
   451 00001C19 0F82ABFAFFFF        <1>     jc badParamError
   452 00001C1F 488D3D60E9FFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   453                              <1> .copyName1:
   454 00001C26 AC                  <1>     lodsb
   455 00001C27 E8510E0000          <1>     call isALEndOfCommand
   456 00001C2C 0F8498FAFFFF        <1>     je badParamError
   457 00001C32 E8230E0000          <1>     call isALterminator
   458 00001C37 7403                <1>     jz .endOfName1
   459 00001C39 AA                  <1>     stosb
   460 00001C3A EBEA                <1>     jmp short .copyName1
   461                              <1> .endOfName1:
   462 00001C3C 31C0                <1>     xor eax, eax
   463 00001C3E AA                  <1>     stosb   ;Store this 0 at rdi
   464 00001C3F 488D3557E5FFFF      <1>     lea rsi, cmdBuffer
   465 00001C46 0FB60573E4FFFF      <1>     movzx eax, byte [arg2Off]
   466 00001C4D 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   467 00001C50 AC                  <1>     lodsb   ;Get first char in AL
   468 00001C51 48FFCE              <1>     dec rsi ;Go back to this char
   469 00001C54 E8240E0000          <1>     call isALEndOfCommand
   470 00001C59 0F826BFAFFFF        <1>     jc badParamError
   471 00001C5F 488D3DA0E9FFFF      <1>     lea rdi, destPath
   472                              <1> .copyName2:
   473 00001C66 AC                  <1>     lodsb
   474 00001C67 E8110E0000          <1>     call isALEndOfCommand
   475 00001C6C 740A                <1>     je .endOfName2
   476 00001C6E E8E70D0000          <1>     call isALterminator
   477 00001C73 7403                <1>     jz .endOfName2
   478 00001C75 AA                  <1>     stosb
   479 00001C76 EBEE                <1>     jmp short .copyName2
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   480                              <1> .endOfName2:
   481 00001CF6 31C0                <1>     xor eax, eax
   482 00001CF8 AA                  <1>     stosb   ;Store this 0 at rdi
   483                              <1> ;Before we open, we check if the two filenames are equal
   484                              <1> ; If so, crap out.
   485 00001CF9 488D3506E9FFFF      <1>     lea rsi, sourcePath
   486 00001D00 488D3D7FE9FFFF      <1>     lea rdi, destPath
   487 00001D07 B81E120000          <1>     mov eax, 121Eh
   488 00001D0C CD4F                <1>     int 4Fh
   489 00001D0E 0F84D3000000        <1>     jz .sameFilename
   490                              <1>     ;Open source with read permission
   491                              <1>     ;Open destination with write permission
   492 00001D14 488D15EBE8FFFF      <1>     lea rdx, sourcePath
   493 00001D1B B8003D0000          <1>     mov eax, 3D00h  ;Read open
   494 00001D20 CD41                <1>     int 41h
   495 00001D22 0F8220FAFFFF        <1>     jc badParamError
   496 00001D28 668905D7E9FFFF      <1>     mov word [sourceHdl], ax
   497                              <1> 
   498 00001D2F 0FB7D8              <1>     movzx ebx, ax   ;For bx
   499 00001D32 B800440000          <1>     mov eax, 4400h  ;Get device info in dx
   500 00001D37 CD41                <1>     int 41h
   501 00001D39 668915CAE9FFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
   502                              <1> 
   503 00001D40 488D153FE9FFFF      <1>     lea rdx, destPath
   504 00001D47 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   505 00001D4C 31C9                <1>     xor ecx, ecx    ;No file attributes
   506 00001D4E CD41                <1>     int 41h
   507 00001D50 0F82B8000000        <1>     jc .badExit
   508 00001D56 668905ABE9FFFF      <1>     mov word [destHdl], ax
   509 00001D5D 31F6                <1>     xor esi, esi
   510 00001D5F 488D15A6E9FFFF      <1>     lea rdx, copyBuffer
   511                              <1> .copyLoop:
   512 00001D66 B980000000          <1>     mov ecx, 128
   513 00001D6B 0FB71D94E9FFFF      <1>     movzx ebx, word [sourceHdl]
   514 00001D72 B43F                <1>     mov ah, 3Fh ;Read
   515 00001D74 CD41                <1>     int 41h
   516 00001D76 0F8292000000        <1>     jc .badExit
   517 00001D7C 85C0                <1>     test eax, eax
   518 00001D7E 743A                <1>     jz .okExit
   519 00001D80 01C6                <1>     add esi, eax
   520 00001D82 89C1                <1>     mov ecx, eax
   521 00001D84 0FB71D7DE9FFFF      <1>     movzx ebx, word [destHdl]
   522 00001D8B B440                <1>     mov ah, 40h ;Write
   523 00001D8D CD41                <1>     int 41h
   524 00001D8F 727D                <1>     jc .badExit
   525 00001D91 3D80000000          <1>     cmp eax, 128    ;Did we read 128 chars?
   526 00001D96 74CE                <1>     je .copyLoop
   527                              <1>     ;If not char dev, exit
   528 00001D98 66F70569E9FFFF8000  <1>     test word [srcHdlInfo], 80h ;Char dev bit set?
   529 00001DA1 7417                <1>     jz .okExit
   530                              <1>     ;Is handle in cooked or binary mode?
   531 00001DA3 66F7055EE9FFFF2000  <1>     test word [srcHdlInfo], 20h
   532 00001DAC 750C                <1>     jnz .okExit
   533                              <1>     ;Here the char dev must be in cooked mode. Check if the last char was ^Z
   534 00001DAE 09C0                <1>     or eax, eax ;Clear upper bits in eax
   535 00001DB0 488D7C02FF          <1>     lea rdi, qword [rdx + rax - 1]  ;Point to the last char in the buffer
   536 00001DB5 803F1A              <1>     cmp byte [rdi], EOF ;Was this EOF?
   537 00001DB8 75AC                <1>     jne .copyLoop   ;Jump if not
   538                              <1> .okExit:
   539 00001DBA E832000000          <1>     call .leaveCopyClose
   540 00001DBF 488D1578EAFFFF      <1>     lea rdx, crlf
   541 00001DC6 B409                <1>     mov ah, 09h
   542 00001DC8 CD41                <1>     int 41h
   543 00001DCA 488D1537F0FFFF      <1>     lea rdx, fourSpc
   544 00001DD1 B409                <1>     mov ah, 09h
   545 00001DD3 CD41                <1>     int 41h
   546 00001DD5 B402                <1>     mov ah, 02h
   547 00001DD7 B231                <1>     mov dl, "1" ;1 File(s) copied
   548 00001DD9 CD41                <1>     int 41h
   549 00001DDB 488D1595EBFFFF      <1>     lea rdx, copyOk
   550 00001DE2 B409                <1>     mov ah, 09h
   551 00001DE4 CD41                <1>     int 41h
   552                              <1>     return
    13                              <2> %%_ret:
    14 00001DE6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   553                              <1> .sameFilename:
   554 00001DE7 E805000000          <1>     call .leaveCopyClose ;Close the handles
   555 00001DEC E94EF9FFFF          <1>     jmp noSelfCopyError
   556                              <1> .leaveCopyClose:
   557 00001DF1 668B1D0EE9FFFF      <1>     mov bx, word [sourceHdl]
   558 00001DF8 B8003E0000          <1>     mov eax, 3E00h
   559 00001DFD CD41                <1>     int 41h
   560 00001DFF 668B1D02E9FFFF      <1>     mov bx, word [destHdl]
   561 00001E06 B8003E0000          <1>     mov eax, 3E00h
   562 00001E0B CD41                <1>     int 41h
   563                              <1>     return
    13                              <2> %%_ret:
    14 00001E0D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   564                              <1> .badExit:
   565                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   566 00001E0E 668B1DF1E8FFFF      <1>     mov bx, word [sourceHdl]
   567 00001E15 6681FBFFFF          <1>     cmp bx, -1
   568 00001E1A 7407                <1>     je .skipSource
   569 00001E1C B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   570 00001E21 CD41                <1>     int 41h
   571                              <1> .skipSource:
   572 00001E23 668B1DDEE8FFFF      <1>     mov bx, word [destHdl]
   573 00001E2A 6681FBFFFF          <1>     cmp bx, -1
   574 00001E2F 0F8413F9FFFF        <1>     je badParamError
   575 00001E35 B8003E0000          <1>     mov eax, 3E00h
   576 00001E3A CD41                <1>     int 41h
   577 00001E3C E907F9FFFF          <1>     jmp badParamError
   578                              <1> 
   579                              <1> erase:
<<<<<<< HEAD
   580 00001E41 F60574E2FFFFFF      <1>     test byte [arg1Flg], -1
   581 00001E48 0F840CF9FFFF        <1>     jz badArgError
   582 00001E4E E8FE0D0000          <1>     call buildCommandPath
   583 00001E53 488D1504E6FFFF      <1>     lea rdx, searchSpec
   584 00001E5A B800410000          <1>     mov eax, 4100h  ;Delete File 
   585 00001E5F 31C9                <1>     xor ecx, ecx
   586 00001E61 CD41                <1>     int 41h
   587 00001E63 0F82F1F8FFFF        <1>     jc badArgError
=======
   580 00001DC3 F605F2E2FFFFFF      <1>     test byte [arg1Flg], -1
   581 00001DCA 0F840CF9FFFF        <1>     jz badArgError
   582 00001DD0 E8B00D0000          <1>     call buildCommandPath
   583 00001DD5 488D1502E6FFFF      <1>     lea rdx, searchSpec
   584 00001DDC B800410000          <1>     mov eax, 4100h  ;Delete File 
   585 00001DE1 31C9                <1>     xor ecx, ecx
   586 00001DE3 CD41                <1>     int 41h
   587 00001DE5 0F82F1F8FFFF        <1>     jc badArgError
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   588                              <1>     return
    13                              <2> %%_ret:
    14 00001E69 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   589                              <1> date:
   590 00001E6A 488D15AEEBFFFF      <1>     lea rdx, curDate
   591 00001E71 B409                <1>     mov ah, 09h
   592 00001E73 CD41                <1>     int 41h
   593 00001E75 B42A                <1>     mov ah, 2Ah ;DOS get date
   594 00001E77 CD41                <1>     int 41h
   595                              <1> 	;AL = day of the week (0=Sunday)
   596                              <1> 	;CX = year (1980-2099)
   597                              <1> 	;DH = month (1-12)
   598                              <1> 	;DL = day (1-31)
   599 00001E79 66890D82E7FFFF      <1>     mov word [td1], cx
   600 00001E80 88157EE7FFFF        <1>     mov byte [td3], dl
   601 00001E86 883579E7FFFF        <1>     mov byte [td4], dh
   602 00001E8C 0FB6C0              <1>     movzx eax, al
   603 00001E8F 89C3                <1>     mov ebx, eax
   604 00001E91 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   605 00001E93 01D8                <1>     add eax, ebx ;Make it 3 times 
   606 00001E95 488D155FEBFFFF      <1>     lea rdx, dayName
   607 00001E9C 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   608 00001EA0 B903000000          <1>     mov ecx, 3  ;Print three chars
   609 00001EA5 BB01000000          <1>     mov ebx, 1  ;STDOUT
   610 00001EAA B440                <1>     mov ah, 40h ;Write to handle
   611 00001EAC CD41                <1>     int 41h
   612 00001EAE B220                <1>     mov dl, " "
   613 00001EB0 B402                <1>     mov ah, 02h
   614 00001EB2 CD41                <1>     int 41h
   615                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   616                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   617                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
<<<<<<< HEAD
   618 00001EB4 0FB70547E7FFFF      <1>     movzx eax, word [td1]   ;Get this word
   619 00001EBB C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   620 00001EBE 0FB61D40E7FFFF      <1>     movzx ebx, byte [td4]
   621 00001EC5 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   622 00001EC8 09D8                <1>     or eax, ebx ;Add this date to eax
   623 00001ECA 0FB61D33E7FFFF      <1>     movzx ebx, byte [td3]
   624 00001ED1 09D8                <1>     or eax, ebx
   625 00001ED3 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   626 00001ED8 E856090000          <1>     call printDate
=======
   618 00001E36 0FB70545E7FFFF      <1>     movzx eax, word [td1]   ;Get this word
   619 00001E3D C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   620 00001E40 0FB61D3EE7FFFF      <1>     movzx ebx, byte [td4]
   621 00001E47 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   622 00001E4A 09D8                <1>     or eax, ebx ;Add this date to eax
   623 00001E4C 0FB61D31E7FFFF      <1>     movzx ebx, byte [td3]
   624 00001E53 09D8                <1>     or eax, ebx
   625 00001E55 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   626 00001E5A E808090000          <1>     call printDate
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   627                              <1> 
   628 00001EDD 488D154CEBFFFF      <1>     lea rdx, newDate
   629 00001EE4 B409                <1>     mov ah, 09h
   630 00001EE6 CD41                <1>     int 41h
   631 00001EE8 488D1560EBFFFF      <1>     lea rdx, ukDate
   632 00001EEF 488D054CEBFFFF      <1>     lea rax, usDate
   633 00001EF6 488D1D5FEBFFFF      <1>     lea rbx, jpDate
   634 00001EFD 803D32E1FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   635 00001F04 480F47D3            <1>     cmova rdx, rbx
   636 00001F08 480F42D0            <1>     cmovb rdx, rax
   637 00001F0C B409                <1>     mov ah, 09h
   638 00001F0E CD41                <1>     int 41h
   639                              <1> 
<<<<<<< HEAD
   640 00001F10 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   641 00001F17 B40A                <1>     mov ah, 0Ah
   642 00001F19 CD41                <1>     int 41h
   643 00001F1B 52                  <1>     push rdx
   644 00001F1C 488D151BE9FFFF      <1>     lea rdx, crlf
   645 00001F23 B409                <1>     mov ah, 09h
   646 00001F25 CD41                <1>     int 41h
   647 00001F27 5A                  <1>     pop rdx
   648 00001F28 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   649                              <1>     rete    ;Exit!
=======
   640 00001E92 488D1584E2FFFF      <1>     lea rdx, inBuffer
   641 00001E99 C6027E              <1>     mov byte [rdx], 126 ;Enter a string of up to 126 chars in length
   642 00001E9C B40A                <1>     mov ah, 0Ah
   643 00001E9E CD41                <1>     int 41h
   644 00001EA0 52                  <1>     push rdx
   645 00001EA1 488D1516E9FFFF      <1>     lea rdx, crlf
   646 00001EA8 B409                <1>     mov ah, 09h
   647 00001EAA CD41                <1>     int 41h
   648 00001EAC 5A                  <1>     pop rdx
   649 00001EAD 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   650                              <1>     rete    ;Exit!
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
<<<<<<< HEAD
    29 00001F2C 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001F2E C3                  <4>  ret
=======
    29 00001EB1 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001EB3 C3                  <4>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   651                              <1>     return
    13                              <2> %%_ret:
<<<<<<< HEAD
    14 00001F2F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   651                              <1> 
   652                              <1> time:
   653 00001F30 488D1541EBFFFF      <1>     lea rdx, curTime
   654 00001F37 B409                <1>     mov ah, 09h
   655 00001F39 CD41                <1>     int 41h
   656 00001F3B B42C                <1>     mov ah, 2Ch ;DOS get time
   657 00001F3D CD41                <1>     int 41h
   658                              <1>     ;CH = hour (0-23)
   659                              <1> 	;CL = minutes (0-59)
   660                              <1> 	;DH = seconds (0-59)
   661                              <1> 	;DL = hundredths (0-99)
   662 00001F3F 880DBDE6FFFF        <1>     mov byte [td1], cl
   663 00001F45 882DB8E6FFFF        <1>     mov byte [td2], ch
   664 00001F4B 8815B3E6FFFF        <1>     mov byte [td3], dl
   665 00001F51 8835AEE6FFFF        <1>     mov byte [td4], dh
   666 00001F57 0FB6C5              <1>     movzx eax, ch
   667 00001F5A E8680A0000          <1>     call printTime.printHours
   668                              <1> 
   669 00001F5F 8A15DEE0FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   670 00001F65 B402                <1>     mov ah, 02h
   671 00001F67 CD41                <1>     int 41h
   672                              <1> 
   673 00001F69 0FB60592E6FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   674 00001F70 E8420A0000          <1>     call printTime.printMinutesAlt
   675                              <1> 
   676 00001F75 8A15C8E0FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   677 00001F7B B402                <1>     mov ah, 02h
   678 00001F7D CD41                <1>     int 41h
   679                              <1> 
   680 00001F7F 0FB6057FE6FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   681 00001F86 E82C0A0000          <1>     call printTime.printMinutesAlt
   682                              <1> 
   683 00001F8B B22E                <1>     mov dl, "."
   684 00001F8D B402                <1>     mov ah, 02h
   685 00001F8F CD41                <1>     int 41h
   686                              <1> 
   687 00001F91 0FB6056CE6FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   688 00001F98 E81A0A0000          <1>     call printTime.printMinutesAlt
   689                              <1> 
   690 00001F9D 488D15E5EAFFFF      <1>     lea rdx, newTime
   691 00001FA4 B409                <1>     mov ah, 09h
   692 00001FA6 CD41                <1>     int 41h
   693                              <1> 
   694 00001FA8 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   695 00001FAF B40A                <1>     mov ah, 0Ah
   696 00001FB1 CD41                <1>     int 41h
   697 00001FB3 52                  <1>     push rdx
   698 00001FB4 488D1583E8FFFF      <1>     lea rdx, crlf
   699 00001FBB B409                <1>     mov ah, 09h
   700 00001FBD CD41                <1>     int 41h
   701 00001FBF 5A                  <1>     pop rdx
   702 00001FC0 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   703                              <1>     rete    ;Exit!
=======
    14 00001EB4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   652                              <1> 
   653                              <1> time:
   654 00001EB5 488D153CEBFFFF      <1>     lea rdx, curTime
   655 00001EBC B409                <1>     mov ah, 09h
   656 00001EBE CD41                <1>     int 41h
   657 00001EC0 B42C                <1>     mov ah, 2Ch ;DOS get time
   658 00001EC2 CD41                <1>     int 41h
   659                              <1>     ;CH = hour (0-23)
   660                              <1> 	;CL = minutes (0-59)
   661                              <1> 	;DH = seconds (0-59)
   662                              <1> 	;DL = hundredths (0-99)
   663 00001EC4 880DB8E6FFFF        <1>     mov byte [td1], cl
   664 00001ECA 882DB3E6FFFF        <1>     mov byte [td2], ch
   665 00001ED0 8815AEE6FFFF        <1>     mov byte [td3], dl
   666 00001ED6 8835A9E6FFFF        <1>     mov byte [td4], dh
   667 00001EDC 0FB6C5              <1>     movzx eax, ch
   668 00001EDF E8170A0000          <1>     call printTime.printHours
   669                              <1> 
   670 00001EE4 8A1559E1FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   671 00001EEA B402                <1>     mov ah, 02h
   672 00001EEC CD41                <1>     int 41h
   673                              <1> 
   674 00001EEE 0FB6058DE6FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   675 00001EF5 E8F1090000          <1>     call printTime.printMinutesAlt
   676                              <1> 
   677 00001EFA 8A1543E1FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   678 00001F00 B402                <1>     mov ah, 02h
   679 00001F02 CD41                <1>     int 41h
   680                              <1> 
   681 00001F04 0FB6057AE6FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   682 00001F0B E8DB090000          <1>     call printTime.printMinutesAlt
   683                              <1> 
   684 00001F10 B22E                <1>     mov dl, "."
   685 00001F12 B402                <1>     mov ah, 02h
   686 00001F14 CD41                <1>     int 41h
   687                              <1> 
   688 00001F16 0FB60567E6FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   689 00001F1D E8C9090000          <1>     call printTime.printMinutesAlt
   690                              <1> 
   691 00001F22 488D15E0EAFFFF      <1>     lea rdx, newTime
   692 00001F29 B409                <1>     mov ah, 09h
   693 00001F2B CD41                <1>     int 41h
   694                              <1> 
   695 00001F2D 488D15E9E1FFFF      <1>     lea rdx, inBuffer
   696 00001F34 C6027E              <1>     mov byte [rdx], 126 ;Enter a string of up to 126 chars in length
   697 00001F37 B40A                <1>     mov ah, 0Ah
   698 00001F39 CD41                <1>     int 41h
   699 00001F3B 52                  <1>     push rdx
   700 00001F3C 488D157BE8FFFF      <1>     lea rdx, crlf
   701 00001F43 B409                <1>     mov ah, 09h
   702 00001F45 CD41                <1>     int 41h
   703 00001F47 5A                  <1>     pop rdx
   704 00001F48 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   705                              <1>     rete    ;Exit!
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
<<<<<<< HEAD
    29 00001FC4 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001FC6 C3                  <4>  ret
=======
    29 00001F4C 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001F4E C3                  <4>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   706                              <1>     return
    13                              <2> %%_ret:
<<<<<<< HEAD
    14 00001FC7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   705                              <1> ctty:
   706 00001FC8 F605EDE0FFFFFF      <1>     test byte [arg1Flg], -1
   707 00001FCF 0F8485F7FFFF        <1>     jz badArgError
   708 00001FD5 F605E3E0FFFFFF      <1>     test byte [arg2Flg], -1
   709 00001FDC 0F8578F7FFFF        <1>     jnz badArgError
   710 00001FE2 488D3534E2FFFF      <1>     lea rsi, cmdBuffer
   711 00001FE9 0FB605CDE0FFFF      <1>     movzx eax, byte [arg1Off]
   712 00001FF0 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   713 00001FF3 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   714 00001FF7 750F                <1>     jne .noDrive
   715 00001FF9 0FB605BEE0FFFF      <1>     movzx eax, byte [arg1FCBret]
   716 00002000 3CFF                <1>     cmp al, -1
   717 00002002 0F8449F7FFFF        <1>     je badDriveError
   718                              <1> .noDrive:
   719                              <1>     ;Now we open the provided file
   720 00002008 E8C70D0000          <1>     call copyArgumentToSearchSpec
   721 0000200D 488D154AE4FFFF      <1>     lea rdx, searchSpec
   722 00002014 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   723 00002019 CD41                <1>     int 41h
   724 0000201B 0F8242F7FFFF        <1>     jc badFileError
   725 00002021 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   726 00002024 B800440000          <1>     mov eax, 4400h  ;Get device word
   727 00002029 CD41                <1>     int 41h
   728 0000202B F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   729 0000202E 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   730                              <1>     ;Now we set this handle to be STDIO
   731 00002030 80CA03              <1>     or dl, 3    ;Set STDIO bits
   732 00002033 30F6                <1>     xor dh, dh
   733 00002035 B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   734 0000203A CD41                <1>     int 41h
   735                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   736 0000203C 31C9                <1>     xor ecx, ecx    ;STDIN
   737 0000203E B446                <1>     mov ah, 46h
   738 00002040 CD41                <1>     int 41h
   739 00002042 FFC1                <1>     inc ecx         ;STDOUT
   740 00002044 B446                <1>     mov ah, 46h
   741 00002046 CD41                <1>     int 41h
   742 00002048 FFC1                <1>     inc ecx         ;STDERR
   743 0000204A B446                <1>     mov ah, 46h
   744 0000204C CD41                <1>     int 41h
   745 0000204E B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   746 00002050 CD41                <1>     int 41h
   747                              <1>     return
    13                              <2> %%_ret:
    14 00002052 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   748                              <1> .badCharDev:
   749 00002053 488D152EEBFFFF      <1>     lea rdx, badDev
   750 0000205A B409                <1>     mov ah, 09h
   751 0000205C CD41                <1>     int 41h
   752 0000205E B43E                <1>     mov ah, 3Eh ;Close opened handle
   753 00002060 CD41                <1>     int 41h
   754                              <1>     return
    13                              <2> %%_ret:
    14 00002062 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   755                              <1> 
   756                              <1> cls:  
   757 00002063 B800440000          <1>     mov eax, 4400h  ;Get device info
   758 00002068 BB01000000          <1>     mov ebx, 1      ;for handle 1
   759 0000206D CD41                <1>     int 41h         ;in dx
   760 0000206F F7C280000000        <1>     test edx, devCharDev
   761 00002075 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   762 00002077 F7C210000000        <1>     test edx, charDevFastOut
   763 0000207D 743E                <1>     jz .doAnsi
   764                              <1>     ;Test if Int 49h uses Int 30h
   765                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   766                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
   767 0000207F B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
   768 00002084 CD41                <1>     int 41h
   769                              <1> .biosCheck:
   770 00002086 66813BCD30          <1>     cmp word [rbx], 30CDh
   771 0000208B 740C                <1>     je .biosConfirmed
   772 0000208D 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   773 00002092 7429                <1>     je .doAnsi
   774 00002094 48FFC3              <1>     inc rbx
   775 00002097 EBED                <1>     jmp short .biosCheck
   776                              <1> .biosConfirmed:
   777                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   778 00002099 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   779 0000209B 31DB                <1>     xor ebx, ebx
   780 0000209D CD30                <1>     int 30h
   781 0000209F B40F                <1>     mov ah, 0Fh ;Get screen mode
   782 000020A1 CD30                <1>     int 30h
   783 000020A3 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   784 000020A6 FECA                <1>     dec dl
   785 000020A8 B619                <1>     mov dh, 25  ;Number of rows is standard
   786 000020AA 31C0                <1>     xor eax, eax
   787 000020AC 89C1                <1>     mov ecx, eax
   788 000020AE B707                <1>     mov bh, 7   ;Screen attributes
   789 000020B0 B406                <1>     mov ah, 6   ;Scroll
   790 000020B2 CD30                <1>     int 30h
   791 000020B4 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   792 000020B6 B700                <1>     mov bh, 0   ;Page 0
   793 000020B8 B402                <1>     mov ah, 2
   794 000020BA CD30                <1>     int 30h
   795                              <1>     return
    13                              <2> %%_ret:
    14 000020BC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   796                              <1> .doAnsi:
   797                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   798                              <1> ;4 chars in the ansi routine
   799                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   800                              <1> ; understand ANSI codes
   801 000020BD 488D3540EDFFFF      <1>     lea rsi, ansiCls
   802 000020C4 B904000000          <1>     mov ecx, 4
   803 000020C9 B406                <1>     mov ah, 06h ;Raw char output
   804                              <1> .ansiLp:
   805 000020CB AC                  <1>     lodsb   ;Get the char in 
   806 000020CC 88C2                <1>     mov dl, al
   807 000020CE CD41                <1>     int 41h
   808 000020D0 FFC9                <1>     dec ecx
   809 000020D2 75F7                <1>     jnz .ansiLp
   810                              <1>     return
    13                              <2> %%_ret:
    14 000020D4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   811                              <1> 
   812                              <1> break:
   813 000020D5 F605E0DFFFFFFF      <1>     test byte [arg1Flg], -1
   814 000020DC 752D                <1>     jnz .argumentProvided
   815                              <1>     ;Here we just get the status of break
   816 000020DE B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   817 000020E3 CD41                <1>     int 41h
   818 000020E5 88D3                <1>     mov bl, dl
   819 000020E7 488D153CEBFFFF      <1>     lea rdx, breakIs
   820 000020EE B409                <1>     mov ah, 09h
   821 000020F0 CD41                <1>     int 41h
   822 000020F2 488D152CEBFFFF      <1>     lea rdx, onMes
   823 000020F9 488D0D1FEBFFFF      <1>     lea rcx, offMes
   824 00002100 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   825 00002102 480F44D1            <1>     cmovz rdx, rcx
   826 00002106 B409                <1>     mov ah, 09h
   827 00002108 CD41                <1>     int 41h
   828                              <1>     return
    13                              <2> %%_ret:
    14 0000210A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   829                              <1> .argumentProvided:
   830 0000210B 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   831 0000210F AD                  <1>     lodsd   ;Read the word
   832 00002110 89C3                <1>     mov ebx, eax
   833 00002112 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   834 00002117 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   835 0000211A 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   836 0000211F 7416                <1>     je .maybeOn
   837 00002121 663D4F46            <1>     cmp ax, "OF"
   838 00002125 7523                <1>     jne .badOnOff
   839 00002127 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   840 0000212C 6681FB4620          <1>     cmp bx, "F "
   841 00002131 7517                <1>     jne .badOnOff
   842                              <1>     ;Set off
   843 00002133 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   844 00002135 EB0B                <1>     jmp short .setBreak
   845                              <1> .maybeOn:
   846 00002137 663D4F4E            <1>     cmp ax, "ON"
   847 0000213B 750D                <1>     jne .badOnOff
   848                              <1>     ;Set on
   849 0000213D BA01000000          <1>     mov edx, 1
   850                              <1> .setBreak:
   851 00002142 B801330000          <1>     mov eax, 3301h  ;Set break
   852 00002147 CD41                <1>     int 41h
   853                              <1>     return
    13                              <2> %%_ret:
    14 00002149 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   854                              <1> .badOnOff:
   855 0000214A 488D15C3ECFFFF      <1>     lea rdx, badOnOff
   856 00002151 B409                <1>     mov ah, 09h
   857 00002153 CD41                <1>     int 41h
   858                              <1>     return
    13                              <2> %%_ret:
    14 00002155 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   859                              <1> 
   860                              <1> verify:
   861 00002156 F6055FDFFFFFFF      <1>     test byte [arg1Flg], -1
   862 0000215D 752D                <1>     jnz .argumentProvided
   863                              <1>     ;Here we just get the status of break
   864 0000215F B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   865 00002164 CD41                <1>     int 41h
   866 00002166 88C3                <1>     mov bl, al
   867 00002168 488D15C5EAFFFF      <1>     lea rdx, verifyIs
   868 0000216F B409                <1>     mov ah, 09h
   869 00002171 CD41                <1>     int 41h
   870 00002173 488D15ABEAFFFF      <1>     lea rdx, onMes
   871 0000217A 488D0D9EEAFFFF      <1>     lea rcx, offMes
   872 00002181 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   873 00002183 480F44D1            <1>     cmovz rdx, rcx
   874 00002187 B409                <1>     mov ah, 09h
   875 00002189 CD41                <1>     int 41h
   876                              <1>     return
    13                              <2> %%_ret:
    14 0000218B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   877                              <1> .argumentProvided:
   878 0000218C 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   879 00002190 AD                  <1>     lodsd   ;Read the word
   880 00002191 89C3                <1>     mov ebx, eax
   881 00002193 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   882 00002198 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   883 0000219B 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   884 000021A0 7416                <1>     je .maybeOn
   885 000021A2 663D4F46            <1>     cmp ax, "OF"
   886 000021A6 751F                <1>     jne .badOnOff
   887 000021A8 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   888 000021AD 6681FB4620          <1>     cmp bx, "F "
   889 000021B2 7513                <1>     jne .badOnOff
   890                              <1>     ;Set off
   891 000021B4 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   892 000021B6 EB0A                <1>     jmp short .setVerify
   893                              <1> .maybeOn:
   894 000021B8 663D4F4E            <1>     cmp ax, "ON"
   895 000021BC 7509                <1>     jne .badOnOff
   896                              <1>     ;Set on
   897 000021BE 31C0                <1>     xor eax, eax
   898 000021C0 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   899                              <1> .setVerify:
   900 000021C2 B42E                <1>     mov ah, 2Eh  ;Set Verify
   901 000021C4 CD41                <1>     int 41h
   902                              <1>     return
    13                              <2> %%_ret:
    14 000021C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   903                              <1> .badOnOff:
   904 000021C7 488D1546ECFFFF      <1>     lea rdx, badOnOff
   905 000021CE B409                <1>     mov ah, 09h
   906 000021D0 CD41                <1>     int 41h
   907                              <1>     return
    13                              <2> %%_ret:
    14 000021D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   908                              <1> 
   909                              <1> rename:
   910 000021D3 F605E2DEFFFFFF      <1>     test byte [arg1Flg], -1
   911 000021DA 0F847AF5FFFF        <1>     jz badArgError
   912 000021E0 F605D8DEFFFFFF      <1>     test byte [arg2Flg], -1
   913 000021E7 0F846DF5FFFF        <1>     jz badArgError
   914 000021ED 488D3529E0FFFF      <1>     lea rsi, cmdBuffer
   915 000021F4 0FB605C2DEFFFF      <1>     movzx eax, byte [arg1Off]
   916 000021FB 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   917                              <1>     ;rsi points to terminating char
   918 000021FE AC                  <1>     lodsb   ;Get first char in AL
   919 000021FF 48FFCE              <1>     dec rsi ;Go back to this char
   920 00002202 E842090000          <1>     call isALEndOfCommand
   921 00002207 0F823BF5FFFF        <1>     jc badParamError
   922 0000220D 488D3DF2E3FFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   923                              <1> .copyName1:
   924 00002214 AC                  <1>     lodsb
   925 00002215 E82F090000          <1>     call isALEndOfCommand
   926 0000221A 0F8428F5FFFF        <1>     je badParamError
   927 00002220 E801090000          <1>     call isALterminator
   928 00002225 7403                <1>     jz .endOfName1
   929 00002227 AA                  <1>     stosb
   930 00002228 EBEA                <1>     jmp short .copyName1
   931                              <1> .endOfName1:
   932 0000222A 31C0                <1>     xor eax, eax
   933 0000222C AA                  <1>     stosb   ;Store this 0 at rdi
   934 0000222D 488D35E9DFFFFF      <1>     lea rsi, cmdBuffer
   935 00002234 0FB60585DEFFFF      <1>     movzx eax, byte [arg2Off]
   936 0000223B 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   937 0000223E 807E013A            <1>     cmp byte [rsi + 1], ":" ;If dest path char 2 is :, must be X:, not allowed
   938 00002242 0F8400F5FFFF        <1>     je badParamError
   939 00002248 AC                  <1>     lodsb   ;Get first char in AL
   940 00002249 48FFCE              <1>     dec rsi ;Go back to this char
   941 0000224C E8F8080000          <1>     call isALEndOfCommand
   942 00002251 0F82F1F4FFFF        <1>     jc badParamError
   943 00002257 488D3D28E4FFFF      <1>     lea rdi, destPath
   944                              <1> .copyName2:
   945 0000225E AC                  <1>     lodsb
   946 0000225F E8E5080000          <1>     call isALEndOfCommand
   947 00002264 740A                <1>     je .endOfName2
   948 00002266 E8BB080000          <1>     call isALterminator
   949 0000226B 7403                <1>     jz .endOfName2
   950 0000226D AA                  <1>     stosb
   951 0000226E EBEE                <1>     jmp short .copyName2
   952                              <1> .endOfName2:
   953 00002270 31C0                <1>     xor eax, eax
   954 00002272 AA                  <1>     stosb   ;Store this 0 at rdi
   955 00002273 488D158CE3FFFF      <1>     lea rdx, sourcePath
   956 0000227A 488D3D05E4FFFF      <1>     lea rdi, destPath
   957 00002281 B800560000          <1>     mov eax, 5600h
   958 00002286 CD41                <1>     int 41h
   959                              <1>     retnc   ;Return if all oki!
=======
    14 00001F4F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   707                              <1> ctty:
   708 00001F50 F60565E1FFFFFF      <1>     test byte [arg1Flg], -1
   709 00001F57 0F847FF7FFFF        <1>     jz badArgError
   710 00001F5D F6055BE1FFFFFF      <1>     test byte [arg2Flg], -1
   711 00001F64 0F8572F7FFFF        <1>     jnz badArgError
   712 00001F6A 488D352CE2FFFF      <1>     lea rsi, cmdBuffer
   713 00001F71 0FB60545E1FFFF      <1>     movzx eax, byte [arg1Off]
   714 00001F78 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   715 00001F7B 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   716 00001F7F 750F                <1>     jne .noDrive
   717 00001F81 0FB60536E1FFFF      <1>     movzx eax, byte [arg1FCBret]
   718 00001F88 3CFF                <1>     cmp al, -1
   719 00001F8A 0F8443F7FFFF        <1>     je badDriveError
   720                              <1> .noDrive:
   721                              <1>     ;Now we open the provided file
   722 00001F90 E8730D0000          <1>     call copyArgumentToSearchSpec
   723 00001F95 488D1542E4FFFF      <1>     lea rdx, searchSpec
   724 00001F9C B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   725 00001FA1 CD41                <1>     int 41h
   726 00001FA3 0F823CF7FFFF        <1>     jc badFileError
   727 00001FA9 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   728 00001FAC B800440000          <1>     mov eax, 4400h  ;Get device word
   729 00001FB1 CD41                <1>     int 41h
   730 00001FB3 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   731 00001FB6 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   732                              <1>     ;Now we set this handle to be STDIO
   733 00001FB8 80CA03              <1>     or dl, 3    ;Set STDIO bits
   734 00001FBB 30F6                <1>     xor dh, dh
   735 00001FBD B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   736 00001FC2 CD41                <1>     int 41h
   737                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   738 00001FC4 31C9                <1>     xor ecx, ecx    ;STDIN
   739 00001FC6 B446                <1>     mov ah, 46h
   740 00001FC8 CD41                <1>     int 41h
   741 00001FCA FFC1                <1>     inc ecx         ;STDOUT
   742 00001FCC B446                <1>     mov ah, 46h
   743 00001FCE CD41                <1>     int 41h
   744 00001FD0 FFC1                <1>     inc ecx         ;STDERR
   745 00001FD2 B446                <1>     mov ah, 46h
   746 00001FD4 CD41                <1>     int 41h
   747 00001FD6 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   748 00001FD8 CD41                <1>     int 41h
   749                              <1>     return
    13                              <2> %%_ret:
    14 00001FDA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   750                              <1> .badCharDev:
   751 00001FDB 488D1526EBFFFF      <1>     lea rdx, badDev
   752 00001FE2 B409                <1>     mov ah, 09h
   753 00001FE4 CD41                <1>     int 41h
   754 00001FE6 B43E                <1>     mov ah, 3Eh ;Close opened handle
   755 00001FE8 CD41                <1>     int 41h
   756                              <1>     return
    13                              <2> %%_ret:
    14 00001FEA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   757                              <1> 
   758                              <1> cls:  
   759 00001FEB B800440000          <1>     mov eax, 4400h  ;Get device info
   760 00001FF0 BB01000000          <1>     mov ebx, 1      ;for handle 1
   761 00001FF5 CD41                <1>     int 41h         ;in dx
   762 00001FF7 F7C280000000        <1>     test edx, devCharDev
   763 00001FFD 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   764 00001FFF F7C210000000        <1>     test edx, charDevFastOut
   765 00002005 743E                <1>     jz .doAnsi
   766                              <1>     ;Test if Int 49h uses Int 30h
   767                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   768                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
   769 00002007 B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
   770 0000200C CD41                <1>     int 41h
   771                              <1> .biosCheck:
   772 0000200E 66813BCD30          <1>     cmp word [rbx], 30CDh
   773 00002013 740C                <1>     je .biosConfirmed
   774 00002015 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   775 0000201A 7429                <1>     je .doAnsi
   776 0000201C 48FFC3              <1>     inc rbx
   777 0000201F EBED                <1>     jmp short .biosCheck
   778                              <1> .biosConfirmed:
   779                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   780 00002021 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   781 00002023 31DB                <1>     xor ebx, ebx
   782 00002025 CD30                <1>     int 30h
   783 00002027 B40F                <1>     mov ah, 0Fh ;Get screen mode
   784 00002029 CD30                <1>     int 30h
   785 0000202B 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   786 0000202E FECA                <1>     dec dl
   787 00002030 B619                <1>     mov dh, 25  ;Number of rows is standard
   788 00002032 31C0                <1>     xor eax, eax
   789 00002034 89C1                <1>     mov ecx, eax
   790 00002036 B707                <1>     mov bh, 7   ;Screen attributes
   791 00002038 B406                <1>     mov ah, 6   ;Scroll
   792 0000203A CD30                <1>     int 30h
   793 0000203C 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   794 0000203E B700                <1>     mov bh, 0   ;Page 0
   795 00002040 B402                <1>     mov ah, 2
   796 00002042 CD30                <1>     int 30h
   797                              <1>     return
    13                              <2> %%_ret:
    14 00002044 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   798                              <1> .doAnsi:
   799                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   800                              <1> ;4 chars in the ansi routine
   801                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   802                              <1> ; understand ANSI codes
   803 00002045 488D3538EDFFFF      <1>     lea rsi, ansiCls
   804 0000204C B904000000          <1>     mov ecx, 4
   805 00002051 B406                <1>     mov ah, 06h ;Raw char output
   806                              <1> .ansiLp:
   807 00002053 AC                  <1>     lodsb   ;Get the char in 
   808 00002054 88C2                <1>     mov dl, al
   809 00002056 CD41                <1>     int 41h
   810 00002058 FFC9                <1>     dec ecx
   811 0000205A 75F7                <1>     jnz .ansiLp
   812                              <1>     return
    13                              <2> %%_ret:
    14 0000205C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   813                              <1> 
   814                              <1> break:
   815 0000205D F60558E0FFFFFF      <1>     test byte [arg1Flg], -1
   816 00002064 752D                <1>     jnz .argumentProvided
   817                              <1>     ;Here we just get the status of break
   818 00002066 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   819 0000206B CD41                <1>     int 41h
   820 0000206D 88D3                <1>     mov bl, dl
   821 0000206F 488D1534EBFFFF      <1>     lea rdx, breakIs
   822 00002076 B409                <1>     mov ah, 09h
   823 00002078 CD41                <1>     int 41h
   824 0000207A 488D1524EBFFFF      <1>     lea rdx, onMes
   825 00002081 488D0D17EBFFFF      <1>     lea rcx, offMes
   826 00002088 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   827 0000208A 480F44D1            <1>     cmovz rdx, rcx
   828 0000208E B409                <1>     mov ah, 09h
   829 00002090 CD41                <1>     int 41h
   830                              <1>     return
    13                              <2> %%_ret:
    14 00002092 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   831                              <1> .argumentProvided:
   832 00002093 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   833 00002097 AD                  <1>     lodsd   ;Read the word
   834 00002098 89C3                <1>     mov ebx, eax
   835 0000209A 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   836 0000209F C1EB10              <1>     shr ebx, 10h     ;Get high word low
   837 000020A2 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   838 000020A7 7416                <1>     je .maybeOn
   839 000020A9 663D4F46            <1>     cmp ax, "OF"
   840 000020AD 7523                <1>     jne .badOnOff
   841 000020AF 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   842 000020B4 6681FB4620          <1>     cmp bx, "F "
   843 000020B9 7517                <1>     jne .badOnOff
   844                              <1>     ;Set off
   845 000020BB 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   846 000020BD EB0B                <1>     jmp short .setBreak
   847                              <1> .maybeOn:
   848 000020BF 663D4F4E            <1>     cmp ax, "ON"
   849 000020C3 750D                <1>     jne .badOnOff
   850                              <1>     ;Set on
   851 000020C5 BA01000000          <1>     mov edx, 1
   852                              <1> .setBreak:
   853 000020CA B801330000          <1>     mov eax, 3301h  ;Set break
   854 000020CF CD41                <1>     int 41h
   855                              <1>     return
    13                              <2> %%_ret:
    14 000020D1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   856                              <1> .badOnOff:
   857 000020D2 488D15BBECFFFF      <1>     lea rdx, badOnOff
   858 000020D9 B409                <1>     mov ah, 09h
   859 000020DB CD41                <1>     int 41h
   860                              <1>     return
    13                              <2> %%_ret:
    14 000020DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   861                              <1> 
   862                              <1> verify:
   863 000020DE F605D7DFFFFFFF      <1>     test byte [arg1Flg], -1
   864 000020E5 752D                <1>     jnz .argumentProvided
   865                              <1>     ;Here we just get the status of break
   866 000020E7 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   867 000020EC CD41                <1>     int 41h
   868 000020EE 88C3                <1>     mov bl, al
   869 000020F0 488D15BDEAFFFF      <1>     lea rdx, verifyIs
   870 000020F7 B409                <1>     mov ah, 09h
   871 000020F9 CD41                <1>     int 41h
   872 000020FB 488D15A3EAFFFF      <1>     lea rdx, onMes
   873 00002102 488D0D96EAFFFF      <1>     lea rcx, offMes
   874 00002109 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   875 0000210B 480F44D1            <1>     cmovz rdx, rcx
   876 0000210F B409                <1>     mov ah, 09h
   877 00002111 CD41                <1>     int 41h
   878                              <1>     return
    13                              <2> %%_ret:
    14 00002113 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   879                              <1> .argumentProvided:
   880 00002114 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   881 00002118 AD                  <1>     lodsd   ;Read the word
   882 00002119 89C3                <1>     mov ebx, eax
   883 0000211B 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   884 00002120 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   885 00002123 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   886 00002128 7416                <1>     je .maybeOn
   887 0000212A 663D4F46            <1>     cmp ax, "OF"
   888 0000212E 751F                <1>     jne .badOnOff
   889 00002130 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   890 00002135 6681FB4620          <1>     cmp bx, "F "
   891 0000213A 7513                <1>     jne .badOnOff
   892                              <1>     ;Set off
   893 0000213C 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   894 0000213E EB0A                <1>     jmp short .setVerify
   895                              <1> .maybeOn:
   896 00002140 663D4F4E            <1>     cmp ax, "ON"
   897 00002144 7509                <1>     jne .badOnOff
   898                              <1>     ;Set on
   899 00002146 31C0                <1>     xor eax, eax
   900 00002148 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   901                              <1> .setVerify:
   902 0000214A B42E                <1>     mov ah, 2Eh  ;Set Verify
   903 0000214C CD41                <1>     int 41h
   904                              <1>     return
    13                              <2> %%_ret:
    14 0000214E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   905                              <1> .badOnOff:
   906 0000214F 488D153EECFFFF      <1>     lea rdx, badOnOff
   907 00002156 B409                <1>     mov ah, 09h
   908 00002158 CD41                <1>     int 41h
   909                              <1>     return
    13                              <2> %%_ret:
    14 0000215A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   910                              <1> 
   911                              <1> rename:
   912 0000215B F6055ADFFFFFFF      <1>     test byte [arg1Flg], -1
   913 00002162 0F8474F5FFFF        <1>     jz badArgError
   914 00002168 F60550DFFFFFFF      <1>     test byte [arg2Flg], -1
   915 0000216F 0F8467F5FFFF        <1>     jz badArgError
   916 00002175 488D3521E0FFFF      <1>     lea rsi, cmdBuffer
   917 0000217C 0FB6053ADFFFFF      <1>     movzx eax, byte [arg1Off]
   918 00002183 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   919                              <1>     ;rsi points to terminating char
   920 00002186 AC                  <1>     lodsb   ;Get first char in AL
   921 00002187 48FFCE              <1>     dec rsi ;Go back to this char
   922 0000218A E8EE080000          <1>     call isALEndOfCommand
   923 0000218F 0F8235F5FFFF        <1>     jc badParamError
   924 00002195 488D3DEAE3FFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   925                              <1> .copyName1:
   926 0000219C AC                  <1>     lodsb
   927 0000219D E8DB080000          <1>     call isALEndOfCommand
   928 000021A2 0F8422F5FFFF        <1>     je badParamError
   929 000021A8 E8AD080000          <1>     call isALterminator
   930 000021AD 7403                <1>     jz .endOfName1
   931 000021AF AA                  <1>     stosb
   932 000021B0 EBEA                <1>     jmp short .copyName1
   933                              <1> .endOfName1:
   934 000021B2 31C0                <1>     xor eax, eax
   935 000021B4 AA                  <1>     stosb   ;Store this 0 at rdi
   936 000021B5 488D35E1DFFFFF      <1>     lea rsi, cmdBuffer
   937 000021BC 0FB605FDDEFFFF      <1>     movzx eax, byte [arg2Off]
   938 000021C3 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   939 000021C6 807E013A            <1>     cmp byte [rsi + 1], ":" ;If dest path char 2 is :, must be X:, not allowed
   940 000021CA 0F84FAF4FFFF        <1>     je badParamError
   941 000021D0 AC                  <1>     lodsb   ;Get first char in AL
   942 000021D1 48FFCE              <1>     dec rsi ;Go back to this char
   943 000021D4 E8A4080000          <1>     call isALEndOfCommand
   944 000021D9 0F82EBF4FFFF        <1>     jc badParamError
   945 000021DF 488D3D20E4FFFF      <1>     lea rdi, destPath
   946                              <1> .copyName2:
   947 000021E6 AC                  <1>     lodsb
   948 000021E7 E891080000          <1>     call isALEndOfCommand
   949 000021EC 740A                <1>     je .endOfName2
   950 000021EE E867080000          <1>     call isALterminator
   951 000021F3 7403                <1>     jz .endOfName2
   952 000021F5 AA                  <1>     stosb
   953 000021F6 EBEE                <1>     jmp short .copyName2
   954                              <1> .endOfName2:
   955 000021F8 31C0                <1>     xor eax, eax
   956 000021FA AA                  <1>     stosb   ;Store this 0 at rdi
   957 000021FB 488D1584E3FFFF      <1>     lea rdx, sourcePath
   958 00002202 488D3DFDE3FFFF      <1>     lea rdi, destPath
   959 00002209 B800560000          <1>     mov eax, 5600h
   960 0000220E CD41                <1>     int 41h
   961                              <1>     retnc   ;Return if all oki!
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
<<<<<<< HEAD
    29 00002288 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000228A C3                  <4>  ret
=======
    29 00002210 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002212 C3                  <4>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
<<<<<<< HEAD
   960 0000228B 3C0F                <1>     cmp al, errBadDrv
   961 0000228D 0F84BEF4FFFF        <1>     je badDriveError
   962 00002293 3C0B                <1>     cmp al, errBadFmt
   963 00002295 0F84DAF4FFFF        <1>     je badDirError
   964 0000229B E9CCF4FFFF          <1>     jmp badDupFnf
   965                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   966                              <1> touch:
   967                              <1> ;Temporarily used to create files
   968 000022A0 F60515DEFFFFFF      <1>     test byte [arg1Flg], -1
   969 000022A7 0F84ADF4FFFF        <1>     jz badArgError
   970 000022AD E89F090000          <1>     call buildCommandPath
   971 000022B2 488D15A5E1FFFF      <1>     lea rdx, searchSpec
   972 000022B9 B8003C0000          <1>     mov eax, 3C00h  ;Create file 
   973 000022BE 31C9                <1>     xor ecx, ecx
   974 000022C0 CD41                <1>     int 41h
   975 000022C2 720B                <1>     jc .touchError
   976 000022C4 0FB7D8              <1>     movzx ebx, ax
   977 000022C7 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
   978 000022CC CD41                <1>     int 41h
   979                              <1>     return
    13                              <2> %%_ret:
    14 000022CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   980                              <1> .touchError:
   981 000022CF 488D15ECEAFFFF      <1>     lea rdx, touchErr
   982 000022D6 E9A1F4FFFF          <1>     jmp badCmn
   983                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   984                              <1> truename:
   985 000022DB F605DADDFFFFFF      <1>     test byte [arg1Flg], -1
   986 000022E2 0F8472F4FFFF        <1>     jz badArgError
   987 000022E8 E864090000          <1>     call buildCommandPath
   988                              <1>     ;Explicitly call Truename if we remove truename from this function
   989 000022ED 488D3D6AE1FFFF      <1>     lea rdi, searchSpec
   990 000022F4 E8E9070000          <1>     call strlen
   991 000022F9 FFC9                <1>     dec ecx ;Don't print terminating null
   992 000022FB 488D155CE1FFFF      <1>     lea rdx, searchSpec
   993 00002302 BB01000000          <1>     mov ebx, 01
   994 00002307 B440                <1>     mov ah, 40h
   995 00002309 CD41                <1>     int 41h
   996 0000230B E80D050000          <1>     call printCRLF
   997                              <1>     return
    13                              <2> %%_ret:
    14 00002310 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   998                              <1> 
   999                              <1> volume:
  1000 00002311 488D3507DFFFFF      <1>     lea rsi, cmdBuffer + 2  ;Get the command buffer
  1001 00002318 E833080000          <1>     call skipSpaces
  1002 0000231D 4881C603000000      <1>     add rsi, 3  ;Go past the VOL command
  1003 00002324 E827080000          <1>     call skipSpaces
  1004 00002329 AC                  <1>     lodsb   ;Get the first char, and point rsi to next char
  1005 0000232A E81A080000          <1>     call isALEndOfCommand   ;If this char is end of command, use current drive
  1006 0000232F 7507                <1>     jnz .checkDriveLetter
  1007 00002331 E8A7070000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1008 00002336 EB35                <1>     jmp short .dirEP
  1009                              <1> .checkDriveLetter:
  1010 00002338 803E3A              <1>     cmp byte [rsi], ":" ;If this is not a :, fail
  1011 0000233B 0F8510F4FFFF        <1>     jne badDriveError
  1012 00002341 4889F7              <1>     mov rdi, rsi    ;Save start of drive spec in rsi
  1013 00002344 48FFC6              <1>     inc rsi  ;Go past the X: spec
  1014 00002347 E804080000          <1>     call skipSpaces
  1015 0000234C AC                  <1>     lodsb   ;Get the non-space char in al
  1016 0000234D E8F7070000          <1>     call isALEndOfCommand   ;The next non-space char must be terminator
  1017 00002352 0F85F9F3FFFF        <1>     jne badDriveError
  1018                              <1> ;This argument should've been parsed into FCB1 so use that result
  1019 00002358 8A0560DDFFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1020 0000235E A8FF                <1>     test al, -1
  1021 00002360 0F85EBF3FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1022 00002366 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1023 0000236B FFC8                <1>     dec eax ;Convert to 0 based number
  1024                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al
  1025 0000236D 0541000000          <1>     add eax, "A" ;Get ASCII representation of 0 based number
  1026 00002372 880583E2FFFF        <1>     mov byte [volPathBuf], al   ;Store ASCII letter here
  1027 00002378 488D1553DDFFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
  1028 0000237F B41A                <1>     mov ah, 1Ah
  1029 00002381 CD41                <1>     int 41h
  1030 00002383 488D1571E2FFFF      <1>     lea rdx, volPathBuf
  1031 0000238A 66B90800            <1>     mov cx, dirVolumeID
  1032 0000238E B44E                <1>     mov ah, 4Eh ;Find first
  1033 00002390 CD41                <1>     int 41h
  1034 00002392 7221                <1>     jc .skipVolLbl
  1035 00002394 488D3555DDFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1036 0000239B 488D3D4CE2FFFF      <1>     lea rdi, volLblSpc
  1037 000023A2 B90B000000          <1>     mov ecx, 11 ;Get the 11 chars of the volume label
  1038                              <1> .dirLblCopy:
  1039 000023A7 AC                  <1>     lodsb   ;Get the first char
  1040 000023A8 3C00                <1>     cmp al, 0
  1041 000023AA 7409                <1>     je .skipVolLbl  ;Jump with CF=NC
  1042 000023AC 3C2E                <1>     cmp al, "."
  1043 000023AE 7401                <1>     je .dirLblSkipStore
  1044 000023B0 AA                  <1>     stosb
  1045                              <1> .dirLblSkipStore:
  1046 000023B1 FFC9                <1>     dec ecx
  1047 000023B3 75F2                <1>     jnz .dirLblCopy
  1048                              <1>     ;Fallthru with CF=NC
  1049                              <1> .skipVolLbl:
  1050                              <1> ;Print volume label information now
  1051                              <1> ;Propagates the CF if CF was set    
  1052 000023B5 9C                  <1>     pushfq
  1053 000023B6 488D1581E4FFFF      <1>     lea rdx, crlf
  1054 000023BD B409                <1>     mov ah, 09h
  1055 000023BF CD41                <1>     int 41h
  1056 000023C1 488D15FBE6FFFF      <1>     lea rdx, volMes
  1057 000023C8 B409                <1>     mov ah, 09h
  1058 000023CA CD41                <1>     int 41h
  1059 000023CC 8A1529E2FFFF        <1>     mov dl, byte [volPathBuf]   ;Print the drive letter out
  1060 000023D2 B402                <1>     mov ah, 02h
  1061 000023D4 CD41                <1>     int 41h
  1062 000023D6 9D                  <1>     popfq
  1063 000023D7 7317                <1>     jnc .volIDOk
  1064 000023D9 488D15FAE6FFFF      <1>     lea rdx, volNo
  1065 000023E0 B409                <1>     mov ah, 09h
  1066 000023E2 CD41                <1>     int 41h
  1067 000023E4 488D1553E4FFFF      <1>     lea rdx, crlf
  1068 000023EB B409                <1>     mov ah, 09h
  1069 000023ED CD41                <1>     int 41h
  1070                              <1>     return
    13                              <2> %%_ret:
    14 000023EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1071                              <1> .volIDOk:
  1072 000023F0 488D15DEE6FFFF      <1>     lea rdx, volOk
  1073 000023F7 B409                <1>     mov ah, 09h
  1074 000023F9 CD41                <1>     int 41h
  1075 000023FB 488D3DECE1FFFF      <1>     lea rdi, volLblSpc
  1076 00002402 E8DB060000          <1>     call strlen
  1077 00002407 FFC9                <1>     dec ecx
  1078 00002409 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
  1079 0000240D 488D15DAE1FFFF      <1>     lea rdx, volLblSpc
  1080 00002414 B409                <1>     mov ah, 09h
  1081 00002416 CD41                <1>     int 41h
  1082 00002418 488D151FE4FFFF      <1>     lea rdx, crlf
  1083 0000241F B409                <1>     mov ah, 09h
  1084 00002421 CD41                <1>     int 41h
  1085                              <1>     return
    13                              <2> %%_ret:
    14 00002423 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1086                              <1> 
  1087                              <1> version:
  1088 00002424 488D1513E4FFFF      <1>     lea rdx, crlf
  1089 0000242B B409                <1>     mov ah, 09h
  1090 0000242D CD41                <1>     int 41h
  1091 0000242F 488D157BE6FFFF      <1>     lea rdx, dosVer
  1092 00002436 B409                <1>     mov ah, 09h
  1093 00002438 CD41                <1>     int 41h
  1094 0000243A E80C000000          <1>     call .printVersionNumber
  1095 0000243F 488D15F8E3FFFF      <1>     lea rdx, crlf
  1096 00002446 B409                <1>     mov ah, 09h
  1097 00002448 CD41                <1>     int 41h
  1098                              <1>     return
    13                              <2> %%_ret:
    14 0000244A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1099                              <1> .printVersionNumber:
  1100 0000244B B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1101 0000244D CD41                <1>     int 41h
  1102 0000244F 50                  <1>     push rax
  1103 00002450 0FB6C0              <1>     movzx eax, al
  1104 00002453 E897080000          <1>     call printDecimalWord
  1105 00002458 B22E                <1>     mov dl, "."
  1106 0000245A B402                <1>     mov ah, 02h
  1107 0000245C CD41                <1>     int 41h
  1108 0000245E 58                  <1>     pop rax
  1109 0000245F 0FB6C4              <1>     movzx eax, ah
  1110 00002462 E888080000          <1>     call printDecimalWord
  1111                              <1>     return
    13                              <2> %%_ret:
    14 00002467 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1112                              <1> 
  1113                              <1> 
  1114                              <1> memory:
  1115 00002468 488B1DB0DBFFFF      <1>     mov rbx, qword [sysVars]
  1116 0000246F 4885DB              <1>     test rbx, rbx
  1117 00002472 7510                <1>     jnz .sysvarsOK
  1118 00002474 488D15E8E8FFFF      <1>     lea rdx, memBad0
  1119 0000247B B409                <1>     mov ah, 09h
  1120 0000247D CD41                <1>     int 41h
  1121 0000247F E90E090000          <1>     jmp freezePC.altEP
  1122                              <1> .sysvarsOK:
  1123                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1124                              <1>     ; and rcx to store Application memory
  1125 00002484 31F6                <1>     xor esi, esi
  1126 00002486 31FF                <1>     xor edi, edi
  1127 00002488 31ED                <1>     xor ebp, ebp
  1128 0000248A 31C9                <1>     xor ecx, ecx
  1129 0000248C 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1130 00002490 488B1B              <1>     mov rbx, qword [rbx]
  1131                              <1> .memLp:
  1132 00002493 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1133 00002496 7409                <1>     je .validMCB
  1134 00002498 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1135 0000249B 0F8501010000        <1>     jne .badMCBFound
  1136                              <1> .validMCB:
  1137 000024A1 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1138 000024A4 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1139 000024A8 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1140 000024B0 7505                <1>     jne .notDOS
  1141 000024B2 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1142 000024B5 EB21                <1>     jmp short .gotoNext
  1143                              <1> .notDOS:
  1144 000024B7 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1145 000024BF 7505                <1>     jne .notFree
  1146 000024C1 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1147 000024C4 EB12                <1>     jmp short .gotoNext
  1148                              <1> .notFree:
  1149 000024C6 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1150 000024CE 7505                <1>     jne .notHole
  1151 000024D0 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1152 000024D3 EB03                <1>     jmp short .gotoNext
  1153                              <1> .notHole:
  1154 000024D5 4801C1              <1>     add rcx, rax    ;Add to Application count
  1155                              <1> .gotoNext:
  1156 000024D8 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1157 000024DB 7407                <1>     je .endOfWalk
  1158 000024DD 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1159 000024E2 EBAF                <1>     jmp short .memLp
  1160                              <1> .endOfWalk:
  1161                              <1>     
  1162 000024E4 488D15D9E7FFFF      <1>     lea rdx, memDOS
  1163 000024EB B409                <1>     mov ah, 09h
  1164 000024ED CD41                <1>     int 41h
  1165 000024EF 4889F0              <1>     mov rax, rsi
  1166 000024F2 E89D000000          <1>     call .mcbPrintAmount
  1167 000024F7 488D155EE8FFFF      <1>     lea rdx, memByte
  1168 000024FE B409                <1>     mov ah, 09h
  1169 00002500 CD41                <1>     int 41h
  1170                              <1> 
  1171 00002502 4885ED              <1>     test rbp, rbp
  1172 00002505 741E                <1>     jz .skipHole
  1173 00002507 488D1502E8FFFF      <1>     lea rdx, memHole
  1174 0000250E B409                <1>     mov ah, 09h
  1175 00002510 CD41                <1>     int 41h
  1176 00002512 4889E8              <1>     mov rax, rbp
  1177 00002515 E87A000000          <1>     call .mcbPrintAmount
  1178 0000251A 488D153BE8FFFF      <1>     lea rdx, memByte
  1179 00002521 B409                <1>     mov ah, 09h
  1180 00002523 CD41                <1>     int 41h
  1181                              <1> .skipHole:
  1182                              <1> 
  1183 00002525 488D15BEE7FFFF      <1>     lea rdx, memApp
  1184 0000252C B409                <1>     mov ah, 09h
  1185 0000252E CD41                <1>     int 41h
  1186 00002530 4889C8              <1>     mov rax, rcx
  1187 00002533 E85C000000          <1>     call .mcbPrintAmount
  1188 00002538 488D151DE8FFFF      <1>     lea rdx, memByte
  1189 0000253F B409                <1>     mov ah, 09h
  1190 00002541 CD41                <1>     int 41h
  1191                              <1> 
  1192 00002543 488D15ECE7FFFF      <1>     lea rdx, memFree
  1193 0000254A B409                <1>     mov ah, 09h
  1194 0000254C CD41                <1>     int 41h
  1195 0000254E 4889F8              <1>     mov rax, rdi
  1196 00002551 E83E000000          <1>     call .mcbPrintAmount
  1197 00002556 488D15FFE7FFFF      <1>     lea rdx, memByte
  1198 0000255D B409                <1>     mov ah, 09h
  1199 0000255F CD41                <1>     int 41h
  1200                              <1> 
  1201 00002561 488D1536E7FFFF      <1>     lea rdx, memSys
  1202 00002568 B409                <1>     mov ah, 09h
  1203 0000256A CD41                <1>     int 41h
  1204 0000256C 4889F0              <1>     mov rax, rsi
  1205 0000256F 4801F8              <1>     add rax, rdi
  1206 00002572 4801C8              <1>     add rax, rcx
  1207 00002575 4801E8              <1>     add rax, rbp
  1208 00002578 E817000000          <1>     call .mcbPrintAmount
  1209 0000257D 488D15D8E7FFFF      <1>     lea rdx, memByte
  1210 00002584 B409                <1>     mov ah, 09h
  1211 00002586 CD41                <1>     int 41h
  1212                              <1> 
  1213 00002588 488D15AFE2FFFF      <1>     lea rdx, crlf
  1214 0000258F B409                <1>     mov ah, 09h
  1215 00002591 CD41                <1>     int 41h
  1216                              <1>     return
    13                              <2> %%_ret:
    14 00002593 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1217                              <1> 
  1218                              <1> .mcbPrintAmount:
  1219 00002594 51                  <1>     push rcx
  1220 00002595 56                  <1>     push rsi
  1221 00002596 57                  <1>     push rdi
  1222 00002597 55                  <1>     push rbp
  1223 00002598 E852070000          <1>     call printDecimalWord
  1224 0000259D 5D                  <1>     pop rbp
  1225 0000259E 5F                  <1>     pop rdi
  1226 0000259F 5E                  <1>     pop rsi
  1227 000025A0 59                  <1>     pop rcx
  1228                              <1>     return
    13                              <2> %%_ret:
    14 000025A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1229                              <1> .badMCBFound:
  1230 000025A2 488D15FAE7FFFF      <1>     lea rdx, memBad2
  1231 000025A9 B409                <1>     mov ah, 09h
  1232 000025AB CD41                <1>     int 41h
  1233 000025AD E9E0070000          <1>     jmp freezePC.altEP
  1234                              <1> 
  1235                              <1> type:
  1236 000025B2 F60503DBFFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1237 000025B9 0F849BF1FFFF        <1>     jz badArgError
  1238 000025BF F605F9DAFFFFFF      <1>     test byte [arg2Flg], -1
  1239 000025C6 0F858EF1FFFF        <1>     jnz badArgError         ;If this set, error
  1240 000025CC 488D354ADCFFFF      <1>     lea rsi, cmdBuffer
  1241 000025D3 0FB605E3DAFFFF      <1>     movzx eax, byte [arg1Off]
  1242 000025DA 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1243 000025DD 803E0D              <1>     cmp byte [rsi], CR
  1244 000025E0 0F8474F1FFFF        <1>     je badArgError
  1245 000025E6 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1246 000025EA 750F                <1>     jne .noDrive
  1247 000025EC 0FB605CBDAFFFF      <1>     movzx eax, byte [arg1FCBret]
  1248 000025F3 3CFF                <1>     cmp al, -1
  1249 000025F5 0F8456F1FFFF        <1>     je badDriveError
  1250                              <1> .noDrive:
  1251                              <1>     ;Now we open the provided file
  1252 000025FB E8D4070000          <1>     call copyArgumentToSearchSpec
  1253 00002600 488D1557DEFFFF      <1>     lea rdx, searchSpec
  1254 00002607 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1255 0000260C CD41                <1>     int 41h
  1256 0000260E 0F824FF1FFFF        <1>     jc badFileError
  1257 00002614 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1258 0000261B 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1259                              <1> .lp:
  1260 0000261E B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1261 00002623 B43F                <1>     mov ah, 3Fh ;Read handle
  1262 00002625 CD41                <1>     int 41h
  1263 00002627 89C1                <1>     mov ecx, eax
  1264 00002629 67E317              <1>     jecxz .exit
  1265 0000262C 53                  <1>     push rbx    ;Save the original in handle
  1266 0000262D BB01000000          <1>     mov ebx, 1  ;STDOUT
  1267 00002632 B440                <1>     mov ah, 40h
  1268 00002634 CD41                <1>     int 41h
  1269 00002636 5B                  <1>     pop rbx ;Get back the original read handle
  1270 00002637 720F                <1>     jc .exitBad
  1271 00002639 39C8                <1>     cmp eax, ecx
  1272 0000263B 74E1                <1>     je .lp
  1273 0000263D FFC9                <1>     dec ecx ;One less for a ^Z
  1274 0000263F 39C8                <1>     cmp eax, ecx
  1275 00002641 7505                <1>     jne .exitBad
  1276                              <1> .exit:
  1277 00002643 B43E                <1>     mov ah, 3Eh ;Close handle
  1278 00002645 CD41                <1>     int 41h
  1279                              <1>     return
    13                              <2> %%_ret:
    14 00002647 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1280                              <1> .exitBad:
  1281                              <1>     ;Print a disk error message... use a table to build the message but for
  1282                              <1>     ; now, just exit
  1283                              <1>     ;If it is a char device, don't print a error
  1284 00002648 EBF9                <1>     jmp short .exit
  1285                              <1> 
  1286                              <1> exit:
  1287 0000264A F605DCD9FFFFFF      <1>     test byte [permaSwitch], -1
  1288                              <1>     retnz   ;Return if the flag is set
=======
   962 00002213 3C0F                <1>     cmp al, errBadDrv
   963 00002215 0F84B8F4FFFF        <1>     je badDriveError
   964 0000221B 3C0B                <1>     cmp al, errBadFmt
   965 0000221D 0F84D4F4FFFF        <1>     je badDirError
   966 00002223 E9C6F4FFFF          <1>     jmp badDupFnf
   967                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   968                              <1> touch:
   969                              <1> ;Temporarily used to create files
   970 00002228 F6058DDEFFFFFF      <1>     test byte [arg1Flg], -1
   971 0000222F 0F84A7F4FFFF        <1>     jz badArgError
   972 00002235 E84B090000          <1>     call buildCommandPath
   973 0000223A 488D159DE1FFFF      <1>     lea rdx, searchSpec
   974 00002241 B8003C0000          <1>     mov eax, 3C00h  ;Create file 
   975 00002246 31C9                <1>     xor ecx, ecx
   976 00002248 CD41                <1>     int 41h
   977 0000224A 720B                <1>     jc .touchError
   978 0000224C 0FB7D8              <1>     movzx ebx, ax
   979 0000224F B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
   980 00002254 CD41                <1>     int 41h
   981                              <1>     return
    13                              <2> %%_ret:
    14 00002256 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   982                              <1> .touchError:
   983 00002257 488D15E4EAFFFF      <1>     lea rdx, touchErr
   984 0000225E E99BF4FFFF          <1>     jmp badCmn
   985                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   986                              <1> truename:
   987 00002263 F60552DEFFFFFF      <1>     test byte [arg1Flg], -1
   988 0000226A 0F846CF4FFFF        <1>     jz badArgError
   989 00002270 E810090000          <1>     call buildCommandPath
   990                              <1>     ;Explicitly call Truename if we remove truename from this function
   991 00002275 488D3D62E1FFFF      <1>     lea rdi, searchSpec
   992 0000227C E895070000          <1>     call strlen
   993 00002281 FFC9                <1>     dec ecx ;Don't print terminating null
   994 00002283 488D1554E1FFFF      <1>     lea rdx, searchSpec
   995 0000228A BB01000000          <1>     mov ebx, 01
   996 0000228F B440                <1>     mov ah, 40h
   997 00002291 CD41                <1>     int 41h
   998 00002293 E8B9040000          <1>     call printCRLF
   999                              <1>     return
    13                              <2> %%_ret:
    14 00002298 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1000                              <1> 
  1001                              <1> volume:
  1002 00002299 488D35FFDEFFFF      <1>     lea rsi, cmdBuffer + 2  ;Get the command buffer
  1003 000022A0 E8DF070000          <1>     call skipSpaces
  1004 000022A5 4881C603000000      <1>     add rsi, 3  ;Go past the VOL command
  1005 000022AC E8D3070000          <1>     call skipSpaces
  1006 000022B1 AC                  <1>     lodsb   ;Get the first char, and point rsi to next char
  1007 000022B2 E8C6070000          <1>     call isALEndOfCommand   ;If this char is end of command, use current drive
  1008 000022B7 7507                <1>     jnz .checkDriveLetter
  1009 000022B9 E853070000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1010 000022BE EB35                <1>     jmp short .dirEP
  1011                              <1> .checkDriveLetter:
  1012 000022C0 803E3A              <1>     cmp byte [rsi], ":" ;If this is not a :, fail
  1013 000022C3 0F850AF4FFFF        <1>     jne badDriveError
  1014 000022C9 4889F7              <1>     mov rdi, rsi    ;Save start of drive spec in rsi
  1015 000022CC 48FFC6              <1>     inc rsi  ;Go past the X: spec
  1016 000022CF E8B0070000          <1>     call skipSpaces
  1017 000022D4 AC                  <1>     lodsb   ;Get the non-space char in al
  1018 000022D5 E8A3070000          <1>     call isALEndOfCommand   ;The next non-space char must be terminator
  1019 000022DA 0F85F3F3FFFF        <1>     jne badDriveError
  1020                              <1> ;This argument should've been parsed into FCB1 so use that result
  1021 000022E0 8A05D8DDFFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1022 000022E6 A8FF                <1>     test al, -1
  1023 000022E8 0F85E5F3FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1024 000022EE 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1025 000022F3 FFC8                <1>     dec eax ;Convert to 0 based number
  1026                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al
  1027 000022F5 0541000000          <1>     add eax, "A" ;Get ASCII representation of 0 based number
  1028 000022FA 88057BE2FFFF        <1>     mov byte [volPathBuf], al   ;Store ASCII letter here
  1029 00002300 488D15CBDDFFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
  1030 00002307 B41A                <1>     mov ah, 1Ah
  1031 00002309 CD41                <1>     int 41h
  1032 0000230B 488D1569E2FFFF      <1>     lea rdx, volPathBuf
  1033 00002312 66B90800            <1>     mov cx, dirVolumeID
  1034 00002316 B44E                <1>     mov ah, 4Eh ;Find first
  1035 00002318 CD41                <1>     int 41h
  1036 0000231A 7221                <1>     jc .skipVolLbl
  1037 0000231C 488D35CDDDFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1038 00002323 488D3D44E2FFFF      <1>     lea rdi, volLblSpc
  1039 0000232A B90B000000          <1>     mov ecx, 11 ;Get the 11 chars of the volume label
  1040                              <1> .dirLblCopy:
  1041 0000232F AC                  <1>     lodsb   ;Get the first char
  1042 00002330 3C00                <1>     cmp al, 0
  1043 00002332 7409                <1>     je .skipVolLbl  ;Jump with CF=NC
  1044 00002334 3C2E                <1>     cmp al, "."
  1045 00002336 7401                <1>     je .dirLblSkipStore
  1046 00002338 AA                  <1>     stosb
  1047                              <1> .dirLblSkipStore:
  1048 00002339 FFC9                <1>     dec ecx
  1049 0000233B 75F2                <1>     jnz .dirLblCopy
  1050                              <1>     ;Fallthru with CF=NC
  1051                              <1> .skipVolLbl:
  1052                              <1> ;Print volume label information now
  1053                              <1> ;Propagates the CF if CF was set    
  1054 0000233D 9C                  <1>     pushfq
  1055 0000233E 488D1579E4FFFF      <1>     lea rdx, crlf
  1056 00002345 B409                <1>     mov ah, 09h
  1057 00002347 CD41                <1>     int 41h
  1058 00002349 488D15F3E6FFFF      <1>     lea rdx, volMes
  1059 00002350 B409                <1>     mov ah, 09h
  1060 00002352 CD41                <1>     int 41h
  1061 00002354 8A1521E2FFFF        <1>     mov dl, byte [volPathBuf]   ;Print the drive letter out
  1062 0000235A B402                <1>     mov ah, 02h
  1063 0000235C CD41                <1>     int 41h
  1064 0000235E 9D                  <1>     popfq
  1065 0000235F 7317                <1>     jnc .volIDOk
  1066 00002361 488D15F2E6FFFF      <1>     lea rdx, volNo
  1067 00002368 B409                <1>     mov ah, 09h
  1068 0000236A CD41                <1>     int 41h
  1069 0000236C 488D154BE4FFFF      <1>     lea rdx, crlf
  1070 00002373 B409                <1>     mov ah, 09h
  1071 00002375 CD41                <1>     int 41h
  1072                              <1>     return
    13                              <2> %%_ret:
    14 00002377 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1073                              <1> .volIDOk:
  1074 00002378 488D15D6E6FFFF      <1>     lea rdx, volOk
  1075 0000237F B409                <1>     mov ah, 09h
  1076 00002381 CD41                <1>     int 41h
  1077 00002383 488D3DE4E1FFFF      <1>     lea rdi, volLblSpc
  1078 0000238A E887060000          <1>     call strlen
  1079 0000238F FFC9                <1>     dec ecx
  1080 00002391 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
  1081 00002395 488D15D2E1FFFF      <1>     lea rdx, volLblSpc
  1082 0000239C B409                <1>     mov ah, 09h
  1083 0000239E CD41                <1>     int 41h
  1084 000023A0 488D1517E4FFFF      <1>     lea rdx, crlf
  1085 000023A7 B409                <1>     mov ah, 09h
  1086 000023A9 CD41                <1>     int 41h
  1087                              <1>     return
    13                              <2> %%_ret:
    14 000023AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1088                              <1> 
  1089                              <1> version:
  1090 000023AC 488D150BE4FFFF      <1>     lea rdx, crlf
  1091 000023B3 B409                <1>     mov ah, 09h
  1092 000023B5 CD41                <1>     int 41h
  1093 000023B7 488D1573E6FFFF      <1>     lea rdx, dosVer
  1094 000023BE B409                <1>     mov ah, 09h
  1095 000023C0 CD41                <1>     int 41h
  1096 000023C2 E80C000000          <1>     call .printVersionNumber
  1097 000023C7 488D15F0E3FFFF      <1>     lea rdx, crlf
  1098 000023CE B409                <1>     mov ah, 09h
  1099 000023D0 CD41                <1>     int 41h
  1100                              <1>     return
    13                              <2> %%_ret:
    14 000023D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1101                              <1> .printVersionNumber:
  1102 000023D3 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1103 000023D5 CD41                <1>     int 41h
  1104 000023D7 50                  <1>     push rax
  1105 000023D8 0FB6C0              <1>     movzx eax, al
  1106 000023DB E843080000          <1>     call printDecimalWord
  1107 000023E0 B22E                <1>     mov dl, "."
  1108 000023E2 B402                <1>     mov ah, 02h
  1109 000023E4 CD41                <1>     int 41h
  1110 000023E6 58                  <1>     pop rax
  1111 000023E7 0FB6C4              <1>     movzx eax, ah
  1112 000023EA E834080000          <1>     call printDecimalWord
  1113                              <1>     return
    13                              <2> %%_ret:
    14 000023EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1114                              <1> 
  1115                              <1> 
  1116                              <1> memory:
  1117 000023F0 488B1D28DCFFFF      <1>     mov rbx, qword [sysVars]
  1118 000023F7 4885DB              <1>     test rbx, rbx
  1119 000023FA 7510                <1>     jnz .sysvarsOK
  1120 000023FC 488D15E0E8FFFF      <1>     lea rdx, memBad0
  1121 00002403 B409                <1>     mov ah, 09h
  1122 00002405 CD41                <1>     int 41h
  1123 00002407 E9BA080000          <1>     jmp freezePC.altEP
  1124                              <1> .sysvarsOK:
  1125                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1126                              <1>     ; and rcx to store Application memory
  1127 0000240C 31F6                <1>     xor esi, esi
  1128 0000240E 31FF                <1>     xor edi, edi
  1129 00002410 31ED                <1>     xor ebp, ebp
  1130 00002412 31C9                <1>     xor ecx, ecx
  1131 00002414 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1132 00002418 488B1B              <1>     mov rbx, qword [rbx]
  1133                              <1> .memLp:
  1134 0000241B 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1135 0000241E 7409                <1>     je .validMCB
  1136 00002420 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1137 00002423 0F8501010000        <1>     jne .badMCBFound
  1138                              <1> .validMCB:
  1139 00002429 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1140 0000242C 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1141 00002430 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1142 00002438 7505                <1>     jne .notDOS
  1143 0000243A 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1144 0000243D EB21                <1>     jmp short .gotoNext
  1145                              <1> .notDOS:
  1146 0000243F 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1147 00002447 7505                <1>     jne .notFree
  1148 00002449 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1149 0000244C EB12                <1>     jmp short .gotoNext
  1150                              <1> .notFree:
  1151 0000244E 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1152 00002456 7505                <1>     jne .notHole
  1153 00002458 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1154 0000245B EB03                <1>     jmp short .gotoNext
  1155                              <1> .notHole:
  1156 0000245D 4801C1              <1>     add rcx, rax    ;Add to Application count
  1157                              <1> .gotoNext:
  1158 00002460 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1159 00002463 7407                <1>     je .endOfWalk
  1160 00002465 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1161 0000246A EBAF                <1>     jmp short .memLp
  1162                              <1> .endOfWalk:
  1163                              <1>     
  1164 0000246C 488D15D1E7FFFF      <1>     lea rdx, memDOS
  1165 00002473 B409                <1>     mov ah, 09h
  1166 00002475 CD41                <1>     int 41h
  1167 00002477 4889F0              <1>     mov rax, rsi
  1168 0000247A E89D000000          <1>     call .mcbPrintAmount
  1169 0000247F 488D1556E8FFFF      <1>     lea rdx, memByte
  1170 00002486 B409                <1>     mov ah, 09h
  1171 00002488 CD41                <1>     int 41h
  1172                              <1> 
  1173 0000248A 4885ED              <1>     test rbp, rbp
  1174 0000248D 741E                <1>     jz .skipHole
  1175 0000248F 488D15FAE7FFFF      <1>     lea rdx, memHole
  1176 00002496 B409                <1>     mov ah, 09h
  1177 00002498 CD41                <1>     int 41h
  1178 0000249A 4889E8              <1>     mov rax, rbp
  1179 0000249D E87A000000          <1>     call .mcbPrintAmount
  1180 000024A2 488D1533E8FFFF      <1>     lea rdx, memByte
  1181 000024A9 B409                <1>     mov ah, 09h
  1182 000024AB CD41                <1>     int 41h
  1183                              <1> .skipHole:
  1184                              <1> 
  1185 000024AD 488D15B6E7FFFF      <1>     lea rdx, memApp
  1186 000024B4 B409                <1>     mov ah, 09h
  1187 000024B6 CD41                <1>     int 41h
  1188 000024B8 4889C8              <1>     mov rax, rcx
  1189 000024BB E85C000000          <1>     call .mcbPrintAmount
  1190 000024C0 488D1515E8FFFF      <1>     lea rdx, memByte
  1191 000024C7 B409                <1>     mov ah, 09h
  1192 000024C9 CD41                <1>     int 41h
  1193                              <1> 
  1194 000024CB 488D15E4E7FFFF      <1>     lea rdx, memFree
  1195 000024D2 B409                <1>     mov ah, 09h
  1196 000024D4 CD41                <1>     int 41h
  1197 000024D6 4889F8              <1>     mov rax, rdi
  1198 000024D9 E83E000000          <1>     call .mcbPrintAmount
  1199 000024DE 488D15F7E7FFFF      <1>     lea rdx, memByte
  1200 000024E5 B409                <1>     mov ah, 09h
  1201 000024E7 CD41                <1>     int 41h
  1202                              <1> 
  1203 000024E9 488D152EE7FFFF      <1>     lea rdx, memSys
  1204 000024F0 B409                <1>     mov ah, 09h
  1205 000024F2 CD41                <1>     int 41h
  1206 000024F4 4889F0              <1>     mov rax, rsi
  1207 000024F7 4801F8              <1>     add rax, rdi
  1208 000024FA 4801C8              <1>     add rax, rcx
  1209 000024FD 4801E8              <1>     add rax, rbp
  1210 00002500 E817000000          <1>     call .mcbPrintAmount
  1211 00002505 488D15D0E7FFFF      <1>     lea rdx, memByte
  1212 0000250C B409                <1>     mov ah, 09h
  1213 0000250E CD41                <1>     int 41h
  1214                              <1> 
  1215 00002510 488D15A7E2FFFF      <1>     lea rdx, crlf
  1216 00002517 B409                <1>     mov ah, 09h
  1217 00002519 CD41                <1>     int 41h
  1218                              <1>     return
    13                              <2> %%_ret:
    14 0000251B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1219                              <1> 
  1220                              <1> .mcbPrintAmount:
  1221 0000251C 51                  <1>     push rcx
  1222 0000251D 56                  <1>     push rsi
  1223 0000251E 57                  <1>     push rdi
  1224 0000251F 55                  <1>     push rbp
  1225 00002520 E8FE060000          <1>     call printDecimalWord
  1226 00002525 5D                  <1>     pop rbp
  1227 00002526 5F                  <1>     pop rdi
  1228 00002527 5E                  <1>     pop rsi
  1229 00002528 59                  <1>     pop rcx
  1230                              <1>     return
    13                              <2> %%_ret:
    14 00002529 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1231                              <1> .badMCBFound:
  1232 0000252A 488D15F2E7FFFF      <1>     lea rdx, memBad2
  1233 00002531 B409                <1>     mov ah, 09h
  1234 00002533 CD41                <1>     int 41h
  1235 00002535 E98C070000          <1>     jmp freezePC.altEP
  1236                              <1> 
  1237                              <1> type:
  1238 0000253A F6057BDBFFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1239 00002541 0F8495F1FFFF        <1>     jz badArgError
  1240 00002547 F60571DBFFFFFF      <1>     test byte [arg2Flg], -1
  1241 0000254E 0F8588F1FFFF        <1>     jnz badArgError         ;If this set, error
  1242 00002554 488D3542DCFFFF      <1>     lea rsi, cmdBuffer
  1243 0000255B 0FB6055BDBFFFF      <1>     movzx eax, byte [arg1Off]
  1244 00002562 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1245 00002565 803E0D              <1>     cmp byte [rsi], CR
  1246 00002568 0F846EF1FFFF        <1>     je badArgError
  1247 0000256E 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1248 00002572 750F                <1>     jne .noDrive
  1249 00002574 0FB60543DBFFFF      <1>     movzx eax, byte [arg1FCBret]
  1250 0000257B 3CFF                <1>     cmp al, -1
  1251 0000257D 0F8450F1FFFF        <1>     je badDriveError
  1252                              <1> .noDrive:
  1253                              <1>     ;Now we open the provided file
  1254 00002583 E880070000          <1>     call copyArgumentToSearchSpec
  1255 00002588 488D154FDEFFFF      <1>     lea rdx, searchSpec
  1256 0000258F B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1257 00002594 CD41                <1>     int 41h
  1258 00002596 0F8249F1FFFF        <1>     jc badFileError
  1259 0000259C 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1260 000025A3 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1261                              <1> .lp:
  1262 000025A6 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1263 000025AB B43F                <1>     mov ah, 3Fh ;Read handle
  1264 000025AD CD41                <1>     int 41h
  1265 000025AF 89C1                <1>     mov ecx, eax
  1266 000025B1 67E317              <1>     jecxz .exit
  1267 000025B4 53                  <1>     push rbx    ;Save the original in handle
  1268 000025B5 BB01000000          <1>     mov ebx, 1  ;STDOUT
  1269 000025BA B440                <1>     mov ah, 40h
  1270 000025BC CD41                <1>     int 41h
  1271 000025BE 5B                  <1>     pop rbx ;Get back the original read handle
  1272 000025BF 720F                <1>     jc .exitBad
  1273 000025C1 39C8                <1>     cmp eax, ecx
  1274 000025C3 74E1                <1>     je .lp
  1275 000025C5 FFC9                <1>     dec ecx ;One less for a ^Z
  1276 000025C7 39C8                <1>     cmp eax, ecx
  1277 000025C9 7505                <1>     jne .exitBad
  1278                              <1> .exit:
  1279 000025CB B43E                <1>     mov ah, 3Eh ;Close handle
  1280 000025CD CD41                <1>     int 41h
  1281                              <1>     return
    13                              <2> %%_ret:
    14 000025CF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1282                              <1> .exitBad:
  1283                              <1>     ;Print a disk error message... use a table to build the message but for
  1284                              <1>     ; now, just exit
  1285                              <1>     ;If it is a char device, don't print a error
  1286 000025D0 EBF9                <1>     jmp short .exit
  1287                              <1> 
  1288                              <1> exit:
  1289 000025D2 F60554DAFFFFFF      <1>     test byte [permaSwitch], -1
  1290                              <1>     retnz   ;Return if the flag is set
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
<<<<<<< HEAD
    26 00002651 75(47)              <3>  j%+1 short retOff
=======
    26 000025D9 75(CF)              <3>  j%+1 short retOff
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
<<<<<<< HEAD
  1289 00002653 488B05BDD9FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1290 0000265A 483DFFFFFFFF        <1>     cmp rax, -1
  1291                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
=======
  1291 000025DB 488B0535DAFFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1292 000025E2 483DFFFFFFFF        <1>     cmp rax, -1
  1293                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
<<<<<<< HEAD
    26 00002660 74(47)              <3>  j%+1 short retOff
=======
    26 000025E8 74(CF)              <3>  j%+1 short retOff
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
<<<<<<< HEAD
  1292 00002662 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1293                              <1> 
  1294 00002666 488B15C1D9FFFF      <1>     mov rdx, qword [parentInt42]
  1295 0000266D 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
  1296 00002671 B842250000          <1>     mov eax, 2542h
  1297 00002676 CD41                <1>     int 41h
  1298                              <1> 
  1299 00002678 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1300 0000267D CD41                <1>     int 41h
  1301                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 0000267F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1302                              <1> 
  1303                              <1> launchChild:
  1304                              <1> ;We run EXEC on this and the child task will return via applicationReturn
  1305                              <1> ;Here we must search the CWD or all path componants before failing
  1306                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
  1307 00002680 488D154BDAFFFF      <1>     lea rdx, cmdFFBlock
  1308 00002687 B41A                <1>     mov ah, 1Ah     ;Set DTA for task
  1309 00002689 CD41                <1>     int 41h
  1310                              <1> 
  1311 0000268B 8B053ADAFFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
  1312 00002691 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1313 00002696 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1314 0000269B 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
  1315 000026A0 741D                <1>     je .noExt
  1316 000026A2 E884EBFFFF          <1>     call checkExtensionExec ;ZF=ZE => Executable
  1317 000026A7 0F8559010000        <1>     jnz .dfltErrExit
  1318                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1319 000026AD 0F8253010000        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
  1320                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1321                              <1>     ;So it is a com or exe that we are searching for for now
  1322 000026B3 488D3DE3DBFFFF      <1>     lea rdi, cmdPathSpec
  1323 000026BA 4889FA              <1>     mov rdx, rdi
  1324 000026BD EB24                <1>     jmp short .search
  1325                              <1> .noExt:
  1326                              <1>     ;If the filename has no extension, append a .*
  1327                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
  1328 000026BF 31DB                <1>     xor ebx, ebx
  1329 000026C1 488D3DD5DBFFFF      <1>     lea rdi, cmdPathSpec
  1330 000026C8 4889FA              <1>     mov rdx, rdi
  1331 000026CB 31C0                <1>     xor eax, eax
  1332 000026CD B9FFFFFFFF          <1>     mov ecx, -1
  1333 000026D2 F2AE                <1>     repne scasb
  1334 000026D4 48FFCF              <1>     dec rdi ;Point to the terminating null
  1335 000026D7 4889FD              <1>     mov rbp, rdi    ;Temporarily store the ptr to the . in rbp
  1336 000026DA 66B82E2A            <1>     mov ax, ".*"
  1337 000026DE 66AB                <1>     stosw
  1338 000026E0 30C0                <1>     xor al, al  ;Store terminating null
  1339 000026E2 AA                  <1>     stosb
  1340                              <1> .search:
  1341 000026E3 B906000000          <1>     mov ecx, dirIncFiles
  1342 000026E8 B44E                <1>     mov ah, 4Eh ;Find First File
  1343 000026EA CD41                <1>     int 41h
  1344 000026EC 0F8214010000        <1>     jc .dfltErrExit
  1345 000026F2 E8C2000000          <1>     call .noExtCheckExt
  1346                              <1> .moreSearch:
  1347 000026F7 B44F                <1>     mov ah, 4Fh
  1348 000026F9 CD41                <1>     int 41h
  1349 000026FB 7207                <1>     jc .noMoreFiles
  1350 000026FD E8B7000000          <1>     call .noExtCheckExt
  1351 00002702 EBF3                <1>     jmp short .moreSearch
  1352                              <1> .noMoreFiles:
  1353 00002704 85DB                <1>     test ebx, ebx
  1354 00002706 0F84FA000000        <1>     jz .dfltErrExit
  1355                              <1> ;So we have a valid executable
  1356 0000270C 4889EF              <1>     mov rdi, rbp    ;Get back ptr to the .*,0
  1357 0000270F F7C301000000        <1>     test ebx, 1
  1358 00002715 7407                <1>     jz .launchexebat
  1359 00002717 B82E434F4D          <1>     mov eax, ".COM"
  1360 0000271C EB14                <1>     jmp short .buildTail
  1361                              <1> .launchexebat:
  1362 0000271E F7C302000000        <1>     test ebx, 2
  1363 00002724 7407                <1>     jz .launchbat
  1364 00002726 B82E455845          <1>     mov eax, ".EXE"
  1365 0000272B EB05                <1>     jmp short .buildTail
  1366                              <1> .launchbat:
  1367                              <1> ;Temporary For BAT
  1368 0000272D E9D4000000          <1>     jmp .dfltErrExit
  1369                              <1> .buildTail:
  1370 00002732 AB                  <1>     stosd
  1371 00002733 31C0                <1>     xor eax, eax
  1372 00002735 AA                  <1>     stosb   ;Store the terminating null
  1373                              <1> ;Now we build the cmdtail properly
  1374 00002736 488D3DE0D9FFFF      <1>     lea rdi, cmdTail
  1375 0000273D 4889FA              <1>     mov rdx, rdi    ;Use rdx as the anchor pointer for cmdline
  1376 00002740 B910000000          <1>     mov ecx, 128/8
  1377 00002745 F348AB              <1>     rep stosq   ;Clear the buffer with nulls
  1378 00002748 488D7A01            <1>     lea rdi, qword [rdx + 1]    ;Mov rdi to start of cmdtail (not count)
  1379 0000274C 498DB080000000      <1>     lea rsi, qword [r8 + cmdLineCnt]
  1380 00002753 AC                  <1>     lodsb   ;Get into al the number of chars and move rsi to the tail proper
  1381 00002754 88C4                <1>     mov ah, al  ;Move the number into ah
  1382 00002756 31C9                <1>     xor ecx, ecx    ;Use ch for number of chars read, cl for chars copied
  1383                              <1>     ;Skip the parsed command name
  1384                              <1> .passName:
  1385 00002758 AC                  <1>     lodsb   ;Get the char in al
  1386 00002759 FEC5                <1>     inc ch
  1387 0000275B 80FD7F              <1>     cmp ch, 127     ;Exit condition (bad case)
  1388 0000275E 741D                <1>     je short .finishBuildingTailNoCR
  1389 00002760 3C0D                <1>     cmp al, CR      ;If we get to the CR after name, no tail
  1390 00002762 7418                <1>     je short .finishBuildingTail
  1391 00002764 3C20                <1>     cmp al, SPC
  1392 00002766 75F0                <1>     jne short .passName
  1393                              <1>     ;Now we copy the name 
  1394 00002768 E8E3030000          <1>     call skipSpaces ;Start by skipping spaces (there are no embedded tabs)
  1395                              <1>     ;rsi points to the first non-space char
  1396                              <1> .copyTail:
  1397 0000276D AC                  <1>     lodsb
  1398 0000276E 3C0D                <1>     cmp al, CR
  1399 00002770 740A                <1>     je short .finishBuildingTail
  1400 00002772 AA                  <1>     stosb
  1401 00002773 FEC1                <1>     inc cl
  1402 00002775 80F97F              <1>     cmp cl, 127 ;Exit condition
  1403 00002778 75F3                <1>     jne .copyTail
  1404 0000277A EB01                <1>     jmp short .finishBuildingTailNoCR
  1405                              <1> .finishBuildingTail:
  1406 0000277C AA                  <1>     stosb   ;Store the CR
  1407                              <1> .finishBuildingTailNoCR:
  1408 0000277D 880A                <1>     mov byte [rdx], cl  ;Finish by placing count 
  1409                              <1> .launch:
  1410 0000277F 488D1D77D9FFFF      <1>     lea rbx, launchBlock
  1411 00002786 31C0                <1>     xor eax, eax
  1412 00002788 488903              <1>     mov qword [rbx + execProg.pEnv], rax    ;Tell DOS to copy my current Env
  1413 0000278B 488D058BD9FFFF      <1>     lea rax, cmdTail
  1414 00002792 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1415 00002796 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1416 0000279A 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1417 0000279E 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1418 000027A2 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1419 000027A6 488D15F0DAFFFF      <1>     lea rdx, cmdPathSpec
  1420 000027AD B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1421 000027B2 CD41                <1>     int 41h
  1422 000027B4 E94D000000          <1>     jmp .dfltErrExit    ;If something goes wrong, error out
  1423                              <1> .noExtCheckExt:
  1424                              <1>     ;mov eax, dword [cmdFFBlock + ffBlock.asciizName + filename.fExt]
  1425 000027B9 488D3530D9FFFF      <1>     lea rsi, dword [cmdFFBlock + ffBlock.asciizName]
  1426 000027C0 488D3D25DBFFFF      <1>     lea rdi, fcbCmdSpec
  1427 000027C7 E8FB030000          <1>     call asciiFilenameToFCB
  1428 000027CC 8B0522DBFFFF        <1>     mov eax, dword [fcbCmdSpec + filename.fExt]
  1429 000027D2 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1430 000027D7 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1431 000027DC 3D434F4D20          <1>     cmp eax, "COM "
  1432 000027E1 7507                <1>     jne .neceexe
  1433 000027E3 81CB01000000        <1>     or ebx, 1
  1434                              <1>     return
    13                              <2> %%_ret:
    14 000027E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1435                              <1> .neceexe:
  1436 000027EA 3D45584520          <1>     cmp eax, "EXE "
  1437 000027EF 7507                <1>     jne .necebat
  1438 000027F1 81CB02000000        <1>     or ebx, 2
  1439                              <1>     return
    13                              <2> %%_ret:
    14 000027F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1440                              <1> .necebat:
  1441 000027F8 3D42415420          <1>     cmp eax, "BAT "
  1442                              <1>     retne
=======
  1294 000025EA 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1295                              <1> 
  1296 000025EE 488B1539DAFFFF      <1>     mov rdx, qword [parentInt42]
  1297 000025F5 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
  1298 000025F9 B842250000          <1>     mov eax, 2542h
  1299 000025FE CD41                <1>     int 41h
  1300                              <1> 
  1301 00002600 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1302 00002605 CD41                <1>     int 41h
  1303                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00002607 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1304                              <1> 
  1305                              <1> launchChild:
  1306                              <1> ;We run EXEC on this and the child task will return via applicationReturn
  1307                              <1> ;Here we must search the CWD or all path componants before failing
  1308                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
  1309 00002608 488D15C3DAFFFF      <1>     lea rdx, cmdFFBlock
  1310 0000260F B41A                <1>     mov ah, 1Ah     ;Set DTA for task
  1311 00002611 CD41                <1>     int 41h
  1312                              <1> 
  1313 00002613 8B05B2DAFFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
  1314 00002619 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1315 0000261E 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1316 00002623 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
  1317 00002628 741D                <1>     je .noExt
  1318 0000262A E87EEBFFFF          <1>     call checkExtensionExec ;ZF=ZE => Executable
  1319 0000262F 0F8510010000        <1>     jnz .dfltErrExit
  1320                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1321 00002635 0F820A010000        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
  1322                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1323                              <1>     ;So it is a com or exe that we are searching for for now
  1324 0000263B 488D3DDBDBFFFF      <1>     lea rdi, cmdPathSpec
  1325 00002642 4889FA              <1>     mov rdx, rdi
  1326 00002645 EB24                <1>     jmp short .search
  1327                              <1> .noExt:
  1328                              <1>     ;If the filename has no extension, append a .*
  1329                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
  1330 00002647 31DB                <1>     xor ebx, ebx
  1331 00002649 488D3DCDDBFFFF      <1>     lea rdi, cmdPathSpec
  1332 00002650 4889FA              <1>     mov rdx, rdi
  1333 00002653 31C0                <1>     xor eax, eax
  1334 00002655 B9FFFFFFFF          <1>     mov ecx, -1
  1335 0000265A F2AE                <1>     repne scasb
  1336 0000265C 48FFCF              <1>     dec rdi ;Point to the terminating null
  1337 0000265F 4889FD              <1>     mov rbp, rdi    ;Temporarily store the ptr to the . in rbp
  1338 00002662 66B82E2A            <1>     mov ax, ".*"
  1339 00002666 66AB                <1>     stosw
  1340 00002668 30C0                <1>     xor al, al  ;Store terminating null
  1341 0000266A AA                  <1>     stosb
  1342                              <1> .search:
  1343 0000266B B906000000          <1>     mov ecx, dirIncFiles
  1344 00002670 B44E                <1>     mov ah, 4Eh ;Find First File
  1345 00002672 CD41                <1>     int 41h
  1346 00002674 0F82CB000000        <1>     jc .dfltErrExit
  1347 0000267A E879000000          <1>     call .noExtCheckExt
  1348                              <1> .moreSearch:
  1349 0000267F B44F                <1>     mov ah, 4Fh
  1350 00002681 CD41                <1>     int 41h
  1351 00002683 7207                <1>     jc .noMoreFiles
  1352 00002685 E86E000000          <1>     call .noExtCheckExt
  1353 0000268A EBF3                <1>     jmp short .moreSearch
  1354                              <1> .noMoreFiles:
  1355 0000268C 85DB                <1>     test ebx, ebx
  1356 0000268E 0F84B1000000        <1>     jz .dfltErrExit
  1357                              <1> ;So we have a valid executable
  1358 00002694 4889EF              <1>     mov rdi, rbp    ;Get back ptr to the .*,0
  1359 00002697 F7C301000000        <1>     test ebx, 1
  1360 0000269D 7407                <1>     jz .launchexebat
  1361 0000269F B82E434F4D          <1>     mov eax, ".COM"
  1362 000026A4 EB14                <1>     jmp short .launch
  1363                              <1> .launchexebat:
  1364 000026A6 F7C302000000        <1>     test ebx, 2
  1365 000026AC 7407                <1>     jz .launchbat
  1366 000026AE B82E455845          <1>     mov eax, ".EXE"
  1367 000026B3 EB05                <1>     jmp short .launch
  1368                              <1> .launchbat:
  1369                              <1> ;Temporary For BAT
  1370 000026B5 E98B000000          <1>     jmp .dfltErrExit
  1371                              <1> .launch:
  1372 000026BA AB                  <1>     stosd
  1373 000026BB 30C0                <1>     xor al, al
  1374 000026BD AA                  <1>     stosb   ;Store the terminating null
  1375 000026BE 488D1D38DAFFFF      <1>     lea rbx, launchBlock
  1376 000026C5 31C0                <1>     xor eax, eax
  1377 000026C7 488903              <1>     mov qword [rbx + execProg.pEnv], rax    ;Tell DOS to copy my current Env
  1378 000026CA 498D8080000000      <1>     lea rax, qword [r8 + cmdLineCnt]
  1379 000026D1 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1380 000026D5 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1381 000026D9 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1382 000026DD 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1383 000026E1 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1384 000026E5 488D1531DBFFFF      <1>     lea rdx, cmdPathSpec
  1385 000026EC B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1386 000026F1 CD41                <1>     int 41h
  1387 000026F3 E94D000000          <1>     jmp .dfltErrExit    ;If something goes wrong, error out
  1388                              <1> .noExtCheckExt:
  1389                              <1>     ;mov eax, dword [cmdFFBlock + ffBlock.asciizName + filename.fExt]
  1390 000026F8 488D35F1D9FFFF      <1>     lea rsi, dword [cmdFFBlock + ffBlock.asciizName]
  1391 000026FF 488D3D66DBFFFF      <1>     lea rdi, fcbCmdSpec
  1392 00002706 E8F0030000          <1>     call asciiFilenameToFCB
  1393 0000270B 8B0563DBFFFF        <1>     mov eax, dword [fcbCmdSpec + filename.fExt]
  1394 00002711 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1395 00002716 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1396 0000271B 3D434F4D20          <1>     cmp eax, "COM "
  1397 00002720 7507                <1>     jne .neceexe
  1398 00002722 81CB01000000        <1>     or ebx, 1
  1399                              <1>     return
    13                              <2> %%_ret:
    14 00002728 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1400                              <1> .neceexe:
  1401 00002729 3D45584520          <1>     cmp eax, "EXE "
  1402 0000272E 7507                <1>     jne .necebat
  1403 00002730 81CB02000000        <1>     or ebx, 2
  1404                              <1>     return
    13                              <2> %%_ret:
    14 00002736 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1405                              <1> .necebat:
  1406 00002737 3D42415420          <1>     cmp eax, "BAT "
  1407                              <1>     retne
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
<<<<<<< HEAD
    26 000027FD 75(F7)              <3>  j%+1 short retOff
=======
    26 0000273C 75(36)              <3>  j%+1 short retOff
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
<<<<<<< HEAD
  1443 000027FF 81CB04000000        <1>     or ebx, 4
  1444                              <1>     return
    13                              <2> %%_ret:
    14 00002805 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1445                              <1> 
  1446                              <1> .dfltErrExit:
  1447 00002806 488D158EE0FFFF      <1>     lea rdx, badCmd
  1448 0000280D B409                <1>     mov ah, 09h
  1449 0000280F CD41                <1>     int 41h
  1450                              <1>     return
    13                              <2> %%_ret:
    14 00002811 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1451                              <1> 
  1452                              <1> .cmdTailTerminatorCheck:
  1453                              <1> ;Input: al = Char to check
  1454                              <1> ;ZF=NZ -> Not a terminator
  1455                              <1> ;ZF=ZE and CF=NC -> SPC detected
  1456                              <1> ;ZF=ZE and CF=CY -> CR detected
  1457 00002812 F8                  <1>     clc     ;Clear CF 
  1458 00002813 3C20                <1>     cmp al, SPC
  1459                              <1>     rete    ;ZF Set
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002815 74(11)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1460 00002817 3C0D                <1>     cmp al, CR
  1461                              <1>     retne   ;CF and ZF clear
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002819 75(11)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1462 0000281B F9                  <1>     stc     ;Set CF since ZF is already set
  1463                              <1>     return
    13                              <2> %%_ret:
    14 0000281C C3                  <2>  ret
=======
  1408 0000273E 81CB04000000        <1>     or ebx, 4
  1409                              <1>     return
    13                              <2> %%_ret:
    14 00002744 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1410                              <1> 
  1411                              <1> .dfltErrExit:
  1412 00002745 488D15CFE0FFFF      <1>     lea rdx, badCmd
  1413 0000274C B409                <1>     mov ah, 09h
  1414 0000274E CD41                <1>     int 41h
  1415                              <1>     return
    13                              <2> %%_ret:
    14 00002750 C3                  <2>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printCRLF:
<<<<<<< HEAD
     4 0000281D 488D151AE0FFFF      <1>     lea rdx, crlf
     5 00002824 BB02000000          <1>     mov ebx, 2
     6 00002829 B440                <1>     mov ah, 40h ;Print a new line
     7 0000282B B902000000          <1>     mov ecx, 2  ;Two chars to write
     8 00002830 CD41                <1>     int 41h
     9                              <1>     return
    13                              <2> %%_ret:
    14 00002832 C3                  <2>  ret
=======
     4 00002751 488D1566E0FFFF      <1>     lea rdx, crlf
     5 00002758 BB02000000          <1>     mov ebx, 2
     6 0000275D B440                <1>     mov ah, 40h ;Print a new line
     7 0000275F B902000000          <1>     mov ecx, 2  ;Two chars to write
     8 00002764 CD41                <1>     int 41h
     9                              <1>     return
    13                              <2> %%_ret:
    14 00002766 C3                  <2>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <2> %assign retOff %%_ret-$$
    10                              <1> printDate:
    11                              <1> ;Input: eax = Packed Date
    12                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    13                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    14                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    15                              <1> ;       ebx = 0 => Print two digit year
    16                              <1> ;       ebx = 1 => Print four digit year
<<<<<<< HEAD
    17 00002833 53                  <1>     push rbx
    18 00002834 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    19 00002836 803DF9D7FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    20 0000283D 7240                <1>     jb .usDate
    21 0000283F 777C                <1>     ja .jpnDate
    22                              <1> ;European: DD/MM/YY
    23 00002841 251F000000          <1>     and eax, 1Fh    ;Save day bits
    24 00002846 E8B0000000          <1>     call .printFirst
    25 0000284B 8A15F0D7FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    26 00002851 B402                <1>     mov ah, 02h
    27 00002853 CD41                <1>     int 41h
    28                              <1> 
    29 00002855 89C8                <1>     mov eax, ecx
    30 00002857 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    31 0000285C C1E805              <1>     shr eax, 5
    32 0000285F E8B3000000          <1>     call .printSecond
    33                              <1> 
    34 00002864 8A15D7D7FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    35 0000286A B402                <1>     mov ah, 02h
    36 0000286C CD41                <1>     int 41h
    37                              <1> 
    38 0000286E 89C8                <1>     mov eax, ecx
    39 00002870 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    40 00002875 C1E809              <1>     shr eax, 9
    41 00002878 5B                  <1>     pop rbx ;Get the year signature back
    42 00002879 E8A9000000          <1>     call .printYear
    43                              <1>     return
    13                              <2> %%_ret:
    14 0000287E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    44                              <1> .usDate:
    45                              <1> ;US: MM/DD/YY
    46 0000287F 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    47 00002884 C1E805              <1>     shr eax, 5
    48 00002887 E86F000000          <1>     call .printFirst
    49                              <1> 
    50 0000288C 8A15AFD7FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    51 00002892 B402                <1>     mov ah, 02h
    52 00002894 CD41                <1>     int 41h
    53                              <1> 
    54 00002896 89C8                <1>     mov eax, ecx
    55 00002898 251F000000          <1>     and eax, 1Fh    ;Save day bits
    56 0000289D E875000000          <1>     call .printSecond
    57                              <1> 
    58 000028A2 8A1599D7FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    59 000028A8 B402                <1>     mov ah, 02h
    60 000028AA CD41                <1>     int 41h
    61                              <1> 
    62 000028AC 89C8                <1>     mov eax, ecx
    63 000028AE 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 000028B3 C1E809              <1>     shr eax, 9
    65 000028B6 5B                  <1>     pop rbx ;Get the year signature back
    66 000028B7 E86B000000          <1>     call .printYear
    67                              <1>     return
    13                              <2> %%_ret:
    14 000028BC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    68                              <1> .jpnDate:
    69                              <1> ;Japan: YY/MM/DD
    70 000028BD 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    71 000028C2 C1E809              <1>     shr eax, 9
    72 000028C5 5B                  <1>     pop rbx ;Get the year signature back
    73 000028C6 E85C000000          <1>     call .printYear
    74                              <1> 
    75 000028CB 8A1570D7FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    76 000028D1 B402                <1>     mov ah, 02h
    77 000028D3 CD41                <1>     int 41h
    78                              <1> 
    79 000028D5 89C8                <1>     mov eax, ecx
    80 000028D7 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    81 000028DC C1E805              <1>     shr eax, 5
    82 000028DF E833000000          <1>     call .printSecond
    83                              <1> 
    84 000028E4 8A1557D7FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    85 000028EA B402                <1>     mov ah, 02h
    86 000028EC CD41                <1>     int 41h
    87                              <1> 
    88 000028EE 89C8                <1>     mov eax, ecx
    89 000028F0 251F000000          <1>     and eax, 1Fh    ;Save day bits
    90 000028F5 E81D000000          <1>     call .printSecond
    91                              <1>     return
    13                              <2> %%_ret:
    14 000028FA C3                  <2>  ret
=======
    17 00002767 53                  <1>     push rbx
    18 00002768 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    19 0000276A 803DC5D8FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    20 00002771 7240                <1>     jb .usDate
    21 00002773 777C                <1>     ja .jpnDate
    22                              <1> ;European: DD/MM/YY
    23 00002775 251F000000          <1>     and eax, 1Fh    ;Save day bits
    24 0000277A E8B0000000          <1>     call .printFirst
    25 0000277F 8A15BCD8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    26 00002785 B402                <1>     mov ah, 02h
    27 00002787 CD41                <1>     int 41h
    28                              <1> 
    29 00002789 89C8                <1>     mov eax, ecx
    30 0000278B 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    31 00002790 C1E805              <1>     shr eax, 5
    32 00002793 E8B3000000          <1>     call .printSecond
    33                              <1> 
    34 00002798 8A15A3D8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    35 0000279E B402                <1>     mov ah, 02h
    36 000027A0 CD41                <1>     int 41h
    37                              <1> 
    38 000027A2 89C8                <1>     mov eax, ecx
    39 000027A4 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    40 000027A9 C1E809              <1>     shr eax, 9
    41 000027AC 5B                  <1>     pop rbx ;Get the year signature back
    42 000027AD E8A9000000          <1>     call .printYear
    43                              <1>     return
    13                              <2> %%_ret:
    14 000027B2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    44                              <1> .usDate:
    45                              <1> ;US: MM/DD/YY
    46 000027B3 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    47 000027B8 C1E805              <1>     shr eax, 5
    48 000027BB E86F000000          <1>     call .printFirst
    49                              <1> 
    50 000027C0 8A157BD8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    51 000027C6 B402                <1>     mov ah, 02h
    52 000027C8 CD41                <1>     int 41h
    53                              <1> 
    54 000027CA 89C8                <1>     mov eax, ecx
    55 000027CC 251F000000          <1>     and eax, 1Fh    ;Save day bits
    56 000027D1 E875000000          <1>     call .printSecond
    57                              <1> 
    58 000027D6 8A1565D8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    59 000027DC B402                <1>     mov ah, 02h
    60 000027DE CD41                <1>     int 41h
    61                              <1> 
    62 000027E0 89C8                <1>     mov eax, ecx
    63 000027E2 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 000027E7 C1E809              <1>     shr eax, 9
    65 000027EA 5B                  <1>     pop rbx ;Get the year signature back
    66 000027EB E86B000000          <1>     call .printYear
    67                              <1>     return
    13                              <2> %%_ret:
    14 000027F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    68                              <1> .jpnDate:
    69                              <1> ;Japan: YY/MM/DD
    70 000027F1 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    71 000027F6 C1E809              <1>     shr eax, 9
    72 000027F9 5B                  <1>     pop rbx ;Get the year signature back
    73 000027FA E85C000000          <1>     call .printYear
    74                              <1> 
    75 000027FF 8A153CD8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    76 00002805 B402                <1>     mov ah, 02h
    77 00002807 CD41                <1>     int 41h
    78                              <1> 
    79 00002809 89C8                <1>     mov eax, ecx
    80 0000280B 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    81 00002810 C1E805              <1>     shr eax, 5
    82 00002813 E833000000          <1>     call .printSecond
    83                              <1> 
    84 00002818 8A1523D8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    85 0000281E B402                <1>     mov ah, 02h
    86 00002820 CD41                <1>     int 41h
    87                              <1> 
    88 00002822 89C8                <1>     mov eax, ecx
    89 00002824 251F000000          <1>     and eax, 1Fh    ;Save day bits
    90 00002829 E81D000000          <1>     call .printSecond
    91                              <1>     return
    13                              <2> %%_ret:
    14 0000282E C3                  <2>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <2> %assign retOff %%_ret-$$
    92                              <1> 
    93                              <1> ;Each of these require eax setup correctly
    94                              <1> .printFirst:
<<<<<<< HEAD
    95 000028FB 51                  <1>     push rcx
    96 000028FC E85F040000          <1>     call getDecimalWord
    97 00002901 84ED                <1>     test ch, ch ;Do we have an upper digit?
    98 00002903 7504                <1>     jnz .skipSpace
    99 00002905 88CD                <1>     mov ch, cl
   100 00002907 B120                <1>     mov cl, " "
   101                              <1> .skipSpace:
   102 00002909 88CA                <1>     mov dl, cl
   103 0000290B B402                <1>     mov ah, 02h
   104 0000290D CD41                <1>     int 41h
   105 0000290F 88EA                <1>     mov dl, ch
   106 00002911 B402                <1>     mov ah, 02h
   107 00002913 CD41                <1>     int 41h
   108 00002915 59                  <1>     pop rcx
   109                              <1>     return
    13                              <2> %%_ret:
    14 00002916 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   110                              <1> .printSecond:
   111 00002917 51                  <1>     push rcx
   112 00002918 E843040000          <1>     call getDecimalWord
   113 0000291D 84ED                <1>     test ch, ch ;Do we have an upper digit?
   114 0000291F 75E8                <1>     jnz .skipSpace
   115 00002921 88CD                <1>     mov ch, cl
   116 00002923 B130                <1>     mov cl, "0"
   117 00002925 EBE2                <1>     jmp short .skipSpace
   118                              <1> .printYear:
   119 00002927 05BC070000          <1>     add eax, 1980
   120 0000292C 51                  <1>     push rcx
   121 0000292D 53                  <1>     push rbx
   122 0000292E E82D040000          <1>     call getDecimalWord ;Get unpacked in rcx
   123 00002933 5B                  <1>     pop rbx
   124 00002934 84DB                <1>     test bl, bl
   125 00002936 740C                <1>     jz .twoDigitYear
   126 00002938 88CA                <1>     mov dl, cl  ;Print the first digit
   127 0000293A B402                <1>     mov ah, 02h
   128 0000293C CD41                <1>     int 41h
   129 0000293E 88EA                <1>     mov dl, ch  ;Print the second digit
   130 00002940 B402                <1>     mov ah, 02h
   131 00002942 CD41                <1>     int 41h
   132                              <1> .twoDigitYear:
   133 00002944 C1E910              <1>     shr ecx, 10h    ;Get high word low
   134 00002947 88CA                <1>     mov dl, cl  ;Print the upper digit
   135 00002949 B402                <1>     mov ah, 02h
   136 0000294B CD41                <1>     int 41h
   137 0000294D 88EA                <1>     mov dl, ch  ;Print the lower digit
   138 0000294F B402                <1>     mov ah, 02h
   139 00002951 CD41                <1>     int 41h
   140 00002953 59                  <1>     pop rcx
   141                              <1>     return
    13                              <2> %%_ret:
    14 00002954 C3                  <2>  ret
=======
    95 0000282F 51                  <1>     push rcx
    96 00002830 E85F040000          <1>     call getDecimalWord
    97 00002835 84ED                <1>     test ch, ch ;Do we have an upper digit?
    98 00002837 7504                <1>     jnz .skipSpace
    99 00002839 88CD                <1>     mov ch, cl
   100 0000283B B120                <1>     mov cl, " "
   101                              <1> .skipSpace:
   102 0000283D 88CA                <1>     mov dl, cl
   103 0000283F B402                <1>     mov ah, 02h
   104 00002841 CD41                <1>     int 41h
   105 00002843 88EA                <1>     mov dl, ch
   106 00002845 B402                <1>     mov ah, 02h
   107 00002847 CD41                <1>     int 41h
   108 00002849 59                  <1>     pop rcx
   109                              <1>     return
    13                              <2> %%_ret:
    14 0000284A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   110                              <1> .printSecond:
   111 0000284B 51                  <1>     push rcx
   112 0000284C E843040000          <1>     call getDecimalWord
   113 00002851 84ED                <1>     test ch, ch ;Do we have an upper digit?
   114 00002853 75E8                <1>     jnz .skipSpace
   115 00002855 88CD                <1>     mov ch, cl
   116 00002857 B130                <1>     mov cl, "0"
   117 00002859 EBE2                <1>     jmp short .skipSpace
   118                              <1> .printYear:
   119 0000285B 05BC070000          <1>     add eax, 1980
   120 00002860 51                  <1>     push rcx
   121 00002861 53                  <1>     push rbx
   122 00002862 E82D040000          <1>     call getDecimalWord ;Get unpacked in rcx
   123 00002867 5B                  <1>     pop rbx
   124 00002868 84DB                <1>     test bl, bl
   125 0000286A 740C                <1>     jz .twoDigitYear
   126 0000286C 88CA                <1>     mov dl, cl  ;Print the first digit
   127 0000286E B402                <1>     mov ah, 02h
   128 00002870 CD41                <1>     int 41h
   129 00002872 88EA                <1>     mov dl, ch  ;Print the second digit
   130 00002874 B402                <1>     mov ah, 02h
   131 00002876 CD41                <1>     int 41h
   132                              <1> .twoDigitYear:
   133 00002878 C1E910              <1>     shr ecx, 10h    ;Get high word low
   134 0000287B 88CA                <1>     mov dl, cl  ;Print the upper digit
   135 0000287D B402                <1>     mov ah, 02h
   136 0000287F CD41                <1>     int 41h
   137 00002881 88EA                <1>     mov dl, ch  ;Print the lower digit
   138 00002883 B402                <1>     mov ah, 02h
   139 00002885 CD41                <1>     int 41h
   140 00002887 59                  <1>     pop rcx
   141                              <1>     return
    13                              <2> %%_ret:
    14 00002888 C3                  <2>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <2> %assign retOff %%_ret-$$
   142                              <1> 
   143                              <1> 
   144                              <1> printTime:
   145                              <1> ;Input: eax = Packed Time
   146                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   147                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
<<<<<<< HEAD
   148 00002955 89C1                <1>     mov ecx, eax
   149 00002957 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   150 0000295C C1E80B              <1>     shr eax, 11
   151 0000295F 803DE1D6FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   152 00002966 750B                <1>     jne .ampm
   153 00002968 E85A000000          <1>     call .printHours
   154 0000296D E831000000          <1>     call .printMinutes
   155                              <1>     return
    13                              <2> %%_ret:
    14 00002972 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   156                              <1> .ampm:
   157 00002973 3D0C000000          <1>     cmp eax, 12
   158 00002978 7713                <1>     ja .pm
   159 0000297A 7416                <1>     je .pm2
   160 0000297C E846000000          <1>     call .printHours
   161 00002981 E81D000000          <1>     call .printMinutes
   162 00002986 B261                <1>     mov dl, "a"
   163 00002988 B402                <1>     mov ah, 02h
   164 0000298A CD41                <1>     int 41h
   165                              <1>     return
    13                              <2> %%_ret:
    14 0000298C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   166                              <1> .pm:
   167 0000298D 2D0C000000          <1>     sub eax, 12
   168                              <1> .pm2:
   169 00002992 E830000000          <1>     call .printHours
   170 00002997 E807000000          <1>     call .printMinutes
   171 0000299C B270                <1>     mov dl, "p"
   172 0000299E B402                <1>     mov ah, 02h
   173 000029A0 CD41                <1>     int 41h
   174                              <1>     return
    13                              <2> %%_ret:
    14 000029A2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   175                              <1> .printMinutes:
   176 000029A3 8A159AD6FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   177 000029A9 B402                <1>     mov ah, 02h
   178 000029AB CD41                <1>     int 41h
   179                              <1> 
   180 000029AD 89C8                <1>     mov eax, ecx
   181 000029AF 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   182 000029B4 C1E805              <1>     shr eax, 5
   183                              <1> .printMinutesAlt:
   184 000029B7 51                  <1>     push rcx
   185 000029B8 E8A3030000          <1>     call getDecimalWord
   186 000029BD 84ED                <1>     test ch, ch ;Do we have an upper digit?
   187 000029BF 7514                <1>     jnz .skipSpace
   188 000029C1 88CD                <1>     mov ch, cl
   189 000029C3 B130                <1>     mov cl, "0"
   190 000029C5 EB0E                <1>     jmp short .skipSpace
   191                              <1> .printHours:
   192 000029C7 51                  <1>     push rcx
   193 000029C8 E893030000          <1>     call getDecimalWord
   194 000029CD 84ED                <1>     test ch, ch ;Do we have an upper digit?
   195 000029CF 7504                <1>     jnz .skipSpace
   196 000029D1 88CD                <1>     mov ch, cl
   197 000029D3 B120                <1>     mov cl, " "
   198                              <1> .skipSpace:
   199 000029D5 88CA                <1>     mov dl, cl
   200 000029D7 B402                <1>     mov ah, 02h
   201 000029D9 CD41                <1>     int 41h
   202 000029DB 88EA                <1>     mov dl, ch
   203 000029DD B402                <1>     mov ah, 02h
   204 000029DF CD41                <1>     int 41h
   205 000029E1 59                  <1>     pop rcx
   206                              <1>     return
    13                              <2> %%_ret:
    14 000029E2 C3                  <2>  ret
=======
   148 00002889 89C1                <1>     mov ecx, eax
   149 0000288B 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   150 00002890 C1E80B              <1>     shr eax, 11
   151 00002893 803DADD7FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   152 0000289A 750B                <1>     jne .ampm
   153 0000289C E85A000000          <1>     call .printHours
   154 000028A1 E831000000          <1>     call .printMinutes
   155                              <1>     return
    13                              <2> %%_ret:
    14 000028A6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   156                              <1> .ampm:
   157 000028A7 3D0C000000          <1>     cmp eax, 12
   158 000028AC 7713                <1>     ja .pm
   159 000028AE 7416                <1>     je .pm2
   160 000028B0 E846000000          <1>     call .printHours
   161 000028B5 E81D000000          <1>     call .printMinutes
   162 000028BA B261                <1>     mov dl, "a"
   163 000028BC B402                <1>     mov ah, 02h
   164 000028BE CD41                <1>     int 41h
   165                              <1>     return
    13                              <2> %%_ret:
    14 000028C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   166                              <1> .pm:
   167 000028C1 2D0C000000          <1>     sub eax, 12
   168                              <1> .pm2:
   169 000028C6 E830000000          <1>     call .printHours
   170 000028CB E807000000          <1>     call .printMinutes
   171 000028D0 B270                <1>     mov dl, "p"
   172 000028D2 B402                <1>     mov ah, 02h
   173 000028D4 CD41                <1>     int 41h
   174                              <1>     return
    13                              <2> %%_ret:
    14 000028D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   175                              <1> .printMinutes:
   176 000028D7 8A1566D7FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   177 000028DD B402                <1>     mov ah, 02h
   178 000028DF CD41                <1>     int 41h
   179                              <1> 
   180 000028E1 89C8                <1>     mov eax, ecx
   181 000028E3 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   182 000028E8 C1E805              <1>     shr eax, 5
   183                              <1> .printMinutesAlt:
   184 000028EB 51                  <1>     push rcx
   185 000028EC E8A3030000          <1>     call getDecimalWord
   186 000028F1 84ED                <1>     test ch, ch ;Do we have an upper digit?
   187 000028F3 7514                <1>     jnz .skipSpace
   188 000028F5 88CD                <1>     mov ch, cl
   189 000028F7 B130                <1>     mov cl, "0"
   190 000028F9 EB0E                <1>     jmp short .skipSpace
   191                              <1> .printHours:
   192 000028FB 51                  <1>     push rcx
   193 000028FC E893030000          <1>     call getDecimalWord
   194 00002901 84ED                <1>     test ch, ch ;Do we have an upper digit?
   195 00002903 7504                <1>     jnz .skipSpace
   196 00002905 88CD                <1>     mov ch, cl
   197 00002907 B120                <1>     mov cl, " "
   198                              <1> .skipSpace:
   199 00002909 88CA                <1>     mov dl, cl
   200 0000290B B402                <1>     mov ah, 02h
   201 0000290D CD41                <1>     int 41h
   202 0000290F 88EA                <1>     mov dl, ch
   203 00002911 B402                <1>     mov ah, 02h
   204 00002913 CD41                <1>     int 41h
   205 00002915 59                  <1>     pop rcx
   206                              <1>     return
    13                              <2> %%_ret:
    14 00002916 C3                  <2>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <2> %assign retOff %%_ret-$$
   207                              <1> 
   208                              <1> 
   209                              <1> putVersionInPrompt:
<<<<<<< HEAD
   210 000029E3 488D15C7E0FFFF      <1>     lea rdx, dosVer
   211 000029EA B409                <1>     mov ah, 09h ;Print String
   212 000029EC CD41                <1>     int 41h
   213 000029EE B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   214 000029F0 CD41                <1>     int 41h
   215 000029F2 50                  <1>     push rax    ;Save minor version
   216 000029F3 E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   217 000029F8 E8B4000000          <1>     call printPackedBCD ;Print al
   218 000029FD B22E                <1>     mov dl, "."
   219 000029FF B402                <1>     mov ah, 02h
   220 00002A01 CD41                <1>     int 41h
   221 00002A03 58                  <1>     pop rax
   222 00002A04 88E0                <1>     mov al, ah  ;Get the minor version low
   223 00002A06 E889000000          <1>     call hexToBCD
   224 00002A0B E8A1000000          <1>     call printPackedBCD
   225                              <1>     return
    13                              <2> %%_ret:
    14 00002A10 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> putEscInPrompt:
   227 00002A11 B21B                <1>     mov dl, ESC
   228 00002A13 EB1C                <1>     jmp short outChar
   229                              <1> 
   230                              <1> putMoneyInPrompt:
   231 00002A15 B224                <1>     mov dl, "$"
   232 00002A17 EB18                <1>     jmp short outChar
   233                              <1> 
   234                              <1> putEquInPrompt:
   235 00002A19 B23D                <1>     mov dl, "="
   236 00002A1B EB14                <1>     jmp short outChar
   237                              <1> 
   238                              <1> putPipeInPrompt:
   239 00002A1D B27C                <1>     mov dl, "|"
   240 00002A1F EB10                <1>     jmp short outChar
   241                              <1> 
   242                              <1> putGTinPrompt:
   243 00002A21 B23E                <1>     mov dl, ">"
   244 00002A23 EB0C                <1>     jmp short outChar
   245                              <1> 
   246                              <1> putLTinPrompt:
   247 00002A25 B23C                <1>     mov dl, "<"
   248 00002A27 EB08                <1>     jmp short outChar
   249                              <1> 
   250                              <1> putDriveInPrompt:
   251 00002A29 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   252 00002A2B CD41                <1>     int 41h
   253 00002A2D 0441                <1>     add al, "A" ;Convert to letter
   254 00002A2F 88C2                <1>     mov dl, al
   255                              <1> outChar:
   256 00002A31 B402                <1>     mov ah, 02h ;Echo to STDOUT
   257 00002A33 CD41                <1>     int 41h
   258                              <1>     return
    13                              <2> %%_ret:
    14 00002A35 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   259                              <1> putCWDInPrompt:
   260 00002A36 488D3D1FD6FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   261 00002A3D B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   262 00002A3F CD41                <1>     int 41h
   263 00002A41 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   264 00002A43 FEC2                <1>     inc dl
   265 00002A45 0441                <1>     add al, "A" ;Convert to letter
   266 00002A47 B43A                <1>     mov ah, ":"
   267 00002A49 66AB                <1>     stosw   ;Store X:, rdi+=2
   268 00002A4B 8A05DAD5FFFF        <1>     mov al, byte [pathSep]
   269 00002A51 AA                  <1>     stosb   ;Store pathSep, inc rdi
   270 00002A52 B447                <1>     mov ah, 47h ;Get Current Working Directory
   271 00002A54 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   272 00002A57 CD41                <1>     int 41h
   273 00002A59 E884000000          <1>     call strlen
   274 00002A5E 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   275                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   276 00002A64 B440                <1>     mov ah, 40h ;Write to handle
   277 00002A66 BB01000000          <1>     mov ebx, 1  ;STDOUT
   278 00002A6B 488D15EAD5FFFF      <1>     lea rdx, currDirStr
   279 00002A72 CD41                <1>     int 41h
   280                              <1>     return
    13                              <2> %%_ret:
    14 00002A74 C3                  <2>  ret
=======
   210 00002917 488D1513E1FFFF      <1>     lea rdx, dosVer
   211 0000291E B409                <1>     mov ah, 09h ;Print String
   212 00002920 CD41                <1>     int 41h
   213 00002922 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   214 00002924 CD41                <1>     int 41h
   215 00002926 50                  <1>     push rax    ;Save minor version
   216 00002927 E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   217 0000292C E8B4000000          <1>     call printPackedBCD ;Print al
   218 00002931 B22E                <1>     mov dl, "."
   219 00002933 B402                <1>     mov ah, 02h
   220 00002935 CD41                <1>     int 41h
   221 00002937 58                  <1>     pop rax
   222 00002938 88E0                <1>     mov al, ah  ;Get the minor version low
   223 0000293A E889000000          <1>     call hexToBCD
   224 0000293F E8A1000000          <1>     call printPackedBCD
   225                              <1>     return
    13                              <2> %%_ret:
    14 00002944 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> putEscInPrompt:
   227 00002945 B21B                <1>     mov dl, ESC
   228 00002947 EB1C                <1>     jmp short outChar
   229                              <1> 
   230                              <1> putMoneyInPrompt:
   231 00002949 B224                <1>     mov dl, "$"
   232 0000294B EB18                <1>     jmp short outChar
   233                              <1> 
   234                              <1> putEquInPrompt:
   235 0000294D B23D                <1>     mov dl, "="
   236 0000294F EB14                <1>     jmp short outChar
   237                              <1> 
   238                              <1> putPipeInPrompt:
   239 00002951 B27C                <1>     mov dl, "|"
   240 00002953 EB10                <1>     jmp short outChar
   241                              <1> 
   242                              <1> putGTinPrompt:
   243 00002955 B23E                <1>     mov dl, ">"
   244 00002957 EB0C                <1>     jmp short outChar
   245                              <1> 
   246                              <1> putLTinPrompt:
   247 00002959 B23C                <1>     mov dl, "<"
   248 0000295B EB08                <1>     jmp short outChar
   249                              <1> 
   250                              <1> putDriveInPrompt:
   251 0000295D B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   252 0000295F CD41                <1>     int 41h
   253 00002961 0441                <1>     add al, "A" ;Convert to letter
   254 00002963 88C2                <1>     mov dl, al
   255                              <1> outChar:
   256 00002965 B402                <1>     mov ah, 02h ;Echo to STDOUT
   257 00002967 CD41                <1>     int 41h
   258                              <1>     return
    13                              <2> %%_ret:
    14 00002969 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   259                              <1> putCWDInPrompt:
   260 0000296A 488D3DEBD6FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   261 00002971 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   262 00002973 CD41                <1>     int 41h
   263 00002975 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   264 00002977 FEC2                <1>     inc dl
   265 00002979 0441                <1>     add al, "A" ;Convert to letter
   266 0000297B B43A                <1>     mov ah, ":"
   267 0000297D 66AB                <1>     stosw   ;Store X:, rdi+=2
   268 0000297F 8A05A6D6FFFF        <1>     mov al, byte [pathSep]
   269 00002985 AA                  <1>     stosb   ;Store pathSep, inc rdi
   270 00002986 B447                <1>     mov ah, 47h ;Get Current Working Directory
   271 00002988 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   272 0000298B CD41                <1>     int 41h
   273 0000298D E884000000          <1>     call strlen
   274 00002992 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   275                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   276 00002998 B440                <1>     mov ah, 40h ;Write to handle
   277 0000299A BB01000000          <1>     mov ebx, 1  ;STDOUT
   278 0000299F 488D15B6D6FFFF      <1>     lea rdx, currDirStr
   279 000029A6 CD41                <1>     int 41h
   280                              <1>     return
    13                              <2> %%_ret:
    14 000029A8 C3                  <2>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <2> %assign retOff %%_ret-$$
   281                              <1> 
   282                              <1> BCDtoHex:
   283                              <1> ;Converts a BCD value to a Hex byte
   284                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
<<<<<<< HEAD
   285 00002A75 51                  <1>     push rcx
   286 00002A76 0FB6C0              <1>     movzx eax, al   ;Zero extend
   287 00002A79 89C1                <1>     mov ecx, eax    ;Save al in ecx
   288 00002A7B 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   289 00002A80 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   290 00002A86 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   291                              <1> .bth:
   292 00002A89 050A000000          <1>     add eax, 10
   293 00002A8E FFC9                <1>     dec ecx
   294 00002A90 75F7                <1>     jnz .bth
   295 00002A92 59                  <1>     pop rcx
   296 00002A93 C3                  <1>     ret
=======
   285 000029A9 51                  <1>     push rcx
   286 000029AA 0FB6C0              <1>     movzx eax, al   ;Zero extend
   287 000029AD 89C1                <1>     mov ecx, eax    ;Save al in ecx
   288 000029AF 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   289 000029B4 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   290 000029BA C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   291                              <1> .bth:
   292 000029BD 050A000000          <1>     add eax, 10
   293 000029C2 FFC9                <1>     dec ecx
   294 000029C4 75F7                <1>     jnz .bth
   295 000029C6 59                  <1>     pop rcx
   296 000029C7 C3                  <1>     ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   297                              <1> 
   298                              <1> hexToBCD:
   299                              <1> ;Converts a Hex byte into two BCD digits
   300                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
<<<<<<< HEAD
   301 00002A94 51                  <1>     push rcx
   302 00002A95 0FB6C0              <1>     movzx eax, al   ;Zero extend
   303 00002A98 31C9                <1>     xor ecx, ecx
   304                              <1> .htb0:
   305 00002A9A 3D0A000000          <1>     cmp eax, 10
   306 00002A9F 7209                <1>     jb .htb1
   307 00002AA1 2D0A000000          <1>     sub eax, 10
   308 00002AA6 FFC1                <1>     inc ecx
   309 00002AA8 EBF0                <1>     jmp short .htb0
   310                              <1> .htb1:
   311 00002AAA C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   312 00002AAD 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   313 00002AAF 59                  <1>     pop rcx
   314 00002AB0 C3                  <1>     ret
=======
   301 000029C8 51                  <1>     push rcx
   302 000029C9 0FB6C0              <1>     movzx eax, al   ;Zero extend
   303 000029CC 31C9                <1>     xor ecx, ecx
   304                              <1> .htb0:
   305 000029CE 3D0A000000          <1>     cmp eax, 10
   306 000029D3 7209                <1>     jb .htb1
   307 000029D5 2D0A000000          <1>     sub eax, 10
   308 000029DA FFC1                <1>     inc ecx
   309 000029DC EBF0                <1>     jmp short .htb0
   310                              <1> .htb1:
   311 000029DE C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   312 000029E1 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   313 000029E3 59                  <1>     pop rcx
   314 000029E4 C3                  <1>     ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   315                              <1> 
   316                              <1> printPackedBCD:
   317                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   318                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   319                              <1> ;Preserves all registers
<<<<<<< HEAD
   320 00002AB1 50                  <1>     push rax
   321 00002AB2 52                  <1>     push rdx
   322 00002AB3 88C4                <1>     mov ah, al
   323 00002AB5 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   324 00002AB7 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   325 00002ABA 7508                <1>     jnz .upperNybble
   326 00002ABC B220                <1>     mov dl, " "
   327 00002ABE B402                <1>     mov ah, 02h
   328 00002AC0 CD41                <1>     int 41h
   329 00002AC2 EB0E                <1>     jmp short .lowerNybble
   330                              <1> .upperNybble:
   331 00002AC4 50                  <1>     push rax
   332 00002AC5 C0EC04              <1>     shr ah, 4
   333 00002AC8 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   334 00002ACB 88E2                <1>     mov dl, ah
   335 00002ACD B402                <1>     mov ah, 02h ;Print DL
   336 00002ACF CD41                <1>     int 41h
   337 00002AD1 58                  <1>     pop rax
   338                              <1> .lowerNybble:
   339 00002AD2 0430                <1>     add al, "0"
   340 00002AD4 88C2                <1>     mov dl, al
   341 00002AD6 B402                <1>     mov ah, 02h ;Print DL
   342 00002AD8 CD41                <1>     int 41h
   343 00002ADA 5A                  <1>     pop rdx
   344 00002ADB 58                  <1>     pop rax
   345                              <1>     return
    13                              <2> %%_ret:
    14 00002ADC C3                  <2>  ret
=======
   320 000029E5 50                  <1>     push rax
   321 000029E6 52                  <1>     push rdx
   322 000029E7 88C4                <1>     mov ah, al
   323 000029E9 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   324 000029EB 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   325 000029EE 7508                <1>     jnz .upperNybble
   326 000029F0 B220                <1>     mov dl, " "
   327 000029F2 B402                <1>     mov ah, 02h
   328 000029F4 CD41                <1>     int 41h
   329 000029F6 EB0E                <1>     jmp short .lowerNybble
   330                              <1> .upperNybble:
   331 000029F8 50                  <1>     push rax
   332 000029F9 C0EC04              <1>     shr ah, 4
   333 000029FC 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   334 000029FF 88E2                <1>     mov dl, ah
   335 00002A01 B402                <1>     mov ah, 02h ;Print DL
   336 00002A03 CD41                <1>     int 41h
   337 00002A05 58                  <1>     pop rax
   338                              <1> .lowerNybble:
   339 00002A06 0430                <1>     add al, "0"
   340 00002A08 88C2                <1>     mov dl, al
   341 00002A0A B402                <1>     mov ah, 02h ;Print DL
   342 00002A0C CD41                <1>     int 41h
   343 00002A0E 5A                  <1>     pop rdx
   344 00002A0F 58                  <1>     pop rax
   345                              <1>     return
    13                              <2> %%_ret:
    14 00002A10 C3                  <2>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <2> %assign retOff %%_ret-$$
   346                              <1> 
   347                              <1> getCurrentDrive:
   348                              <1> ;Returns the 0 based current drive in al
<<<<<<< HEAD
   349 00002ADD B419                <1>     mov ah, 19h
   350 00002ADF CD41                <1>     int 41h
   351                              <1>     return
    13                              <2> %%_ret:
    14 00002AE1 C3                  <2>  ret
=======
   349 00002A11 B419                <1>     mov ah, 19h
   350 00002A13 CD41                <1>     int 41h
   351                              <1>     return
    13                              <2> %%_ret:
    14 00002A15 C3                  <2>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <2> %assign retOff %%_ret-$$
   352                              <1> 
   353                              <1> strlen:
   354                              <1> ;Gets the length of a ASCIIZ string
   355                              <1> ;Input: rdi = Source buffer
   356                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
<<<<<<< HEAD
   357 00002AE2 50                  <1>     push rax
   358 00002AE3 57                  <1>     push rdi
   359 00002AE4 30C0                <1>     xor al, al
   360 00002AE6 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   361 00002AE8 FFC9                <1>     dec ecx ;rcx = -1
   362 00002AEA F2AE                <1>     repne scasb
   363 00002AEC F7D1                <1>     not ecx
   364 00002AEE 5F                  <1>     pop rdi
   365 00002AEF 58                  <1>     pop rax
   366                              <1>     return
    13                              <2> %%_ret:
    14 00002AF0 C3                  <2>  ret
=======
   357 00002A16 50                  <1>     push rax
   358 00002A17 57                  <1>     push rdi
   359 00002A18 30C0                <1>     xor al, al
   360 00002A1A 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   361 00002A1C FFC9                <1>     dec ecx ;rcx = -1
   362 00002A1E F2AE                <1>     repne scasb
   363 00002A20 F7D1                <1>     not ecx
   364 00002A22 5F                  <1>     pop rdi
   365 00002A23 58                  <1>     pop rax
   366                              <1>     return
    13                              <2> %%_ret:
    14 00002A24 C3                  <2>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <2> %assign retOff %%_ret-$$
   367                              <1> 
   368                              <1> findTerminatorOrEOC:
   369                              <1> ;Advances rsi to the next string terminator char or the next End of command
   370                              <1> ; char
   371                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   372                              <1> ;If a end of command char found, also sets CF
<<<<<<< HEAD
   373 00002AF1 AC                  <1>     lodsb
   374 00002AF2 3C0D                <1>     cmp al, CR
   375 00002AF4 7419                <1>     je .endOfInput
   376 00002AF6 E82B000000          <1>     call isALterminator
   377 00002AFB 7419                <1>     jz .exit
   378 00002AFD 3A0528D5FFFF        <1>     cmp al, byte [pathSep]
   379 00002B03 7411                <1>     je .exit
   380 00002B05 3A0521D5FFFF        <1>     cmp al, byte [switchChar]
   381 00002B0B 7409                <1>     je .exit
   382 00002B0D EBE2                <1>     jmp short findTerminatorOrEOC
   383                              <1> .endOfInput:
   384 00002B0F E802000000          <1>     call .exit
   385 00002B14 F9                  <1>     stc 
   386                              <1>     return
    13                              <2> %%_ret:
    14 00002B15 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .exit:
   388 00002B16 48FFCE              <1>     dec rsi ;Point to the terminating char
   389                              <1>     return
    13                              <2> %%_ret:
    14 00002B19 C3                  <2>  ret
=======
   373 00002A25 AC                  <1>     lodsb
   374 00002A26 3C0D                <1>     cmp al, CR
   375 00002A28 7419                <1>     je .endOfInput
   376 00002A2A E82B000000          <1>     call isALterminator
   377 00002A2F 7419                <1>     jz .exit
   378 00002A31 3A05F4D5FFFF        <1>     cmp al, byte [pathSep]
   379 00002A37 7411                <1>     je .exit
   380 00002A39 3A05EDD5FFFF        <1>     cmp al, byte [switchChar]
   381 00002A3F 7409                <1>     je .exit
   382 00002A41 EBE2                <1>     jmp short findTerminatorOrEOC
   383                              <1> .endOfInput:
   384 00002A43 E802000000          <1>     call .exit
   385 00002A48 F9                  <1>     stc 
   386                              <1>     return
    13                              <2> %%_ret:
    14 00002A49 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .exit:
   388 00002A4A 48FFCE              <1>     dec rsi ;Point to the terminating char
   389                              <1>     return
    13                              <2> %%_ret:
    14 00002A4D C3                  <2>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <2> %assign retOff %%_ret-$$
   390                              <1> 
   391                              <1> findTerminator:
   392                              <1> ;Advances rsi to the next string terminator char
   393                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
<<<<<<< HEAD
   394 00002B1A AC                  <1>     lodsb
   395 00002B1B E806000000          <1>     call isALterminator
   396 00002B20 75F8                <1>     jnz findTerminator
   397 00002B22 48FFCE              <1>     dec rsi
   398                              <1>     return
    13                              <2> %%_ret:
    14 00002B25 C3                  <2>  ret
=======
   394 00002A4E AC                  <1>     lodsb
   395 00002A4F E806000000          <1>     call isALterminator
   396 00002A54 75F8                <1>     jnz findTerminator
   397 00002A56 48FFCE              <1>     dec rsi
   398                              <1>     return
    13                              <2> %%_ret:
    14 00002A59 C3                  <2>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <2> %assign retOff %%_ret-$$
   399                              <1> isALterminator:
   400                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   401                              <1> ;         ZF=ZY if al is a terminator
<<<<<<< HEAD
   402 00002B26 3C20                <1>     cmp al, " "
=======
   402 00002A5A 3C20                <1>     cmp al, " "
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   403                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
<<<<<<< HEAD
    26 00002B28 74(25)              <3>  j%+1 short retOff
=======
    26 00002A5C 74(59)              <3>  j%+1 short retOff
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
<<<<<<< HEAD
   404 00002B2A 3C3B                <1>     cmp al, ";"
=======
   404 00002A5E 3C3B                <1>     cmp al, ";"
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   405                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
<<<<<<< HEAD
    26 00002B2C 74(25)              <3>  j%+1 short retOff
=======
    26 00002A60 74(59)              <3>  j%+1 short retOff
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
<<<<<<< HEAD
   406 00002B2E 3C3D                <1>     cmp al, "="
=======
   406 00002A62 3C3D                <1>     cmp al, "="
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   407                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
<<<<<<< HEAD
    26 00002B30 74(25)              <3>  j%+1 short retOff
=======
    26 00002A64 74(59)              <3>  j%+1 short retOff
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
<<<<<<< HEAD
   408 00002B32 3C2C                <1>     cmp al, ","
=======
   408 00002A66 3C2C                <1>     cmp al, ","
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   409                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
<<<<<<< HEAD
    26 00002B34 74(25)              <3>  j%+1 short retOff
=======
    26 00002A68 74(59)              <3>  j%+1 short retOff
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
<<<<<<< HEAD
   410 00002B36 3C09                <1>     cmp al, TAB
=======
   410 00002A6A 3C09                <1>     cmp al, TAB
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   411                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
<<<<<<< HEAD
    26 00002B38 74(25)              <3>  j%+1 short retOff
=======
    26 00002A6C 74(59)              <3>  j%+1 short retOff
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
<<<<<<< HEAD
   412 00002B3A 3C0A                <1>     cmp al, LF
   413                              <1>     return
    13                              <2> %%_ret:
    14 00002B3C C3                  <2>  ret
=======
   412 00002A6E 3C0A                <1>     cmp al, LF
   413                              <1>     return
    13                              <2> %%_ret:
    14 00002A70 C3                  <2>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <2> %assign retOff %%_ret-$$
   414                              <1> 
   415                              <1> findEndOfCommand:
   416                              <1> ;Moves rsi to the | or CR that terminates this command
<<<<<<< HEAD
   417 00002B3D AC                  <1>     lodsb
   418 00002B3E E806000000          <1>     call isALEndOfCommand
   419 00002B43 75F8                <1>     jnz findEndOfCommand
   420 00002B45 48FFCE              <1>     dec rsi
   421                              <1>     return
    13                              <2> %%_ret:
    14 00002B48 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   422                              <1> isALEndOfCommand:
   423 00002B49 3C7C                <1>     cmp al, "|"
=======
   417 00002A71 AC                  <1>     lodsb
   418 00002A72 E806000000          <1>     call isALEndOfCommand
   419 00002A77 75F8                <1>     jnz findEndOfCommand
   420 00002A79 48FFCE              <1>     dec rsi
   421                              <1>     return
    13                              <2> %%_ret:
    14 00002A7C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   422                              <1> isALEndOfCommand:
   423 00002A7D 3C7C                <1>     cmp al, "|"
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   424                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
<<<<<<< HEAD
    26 00002B4B 74(48)              <3>  j%+1 short retOff
=======
    26 00002A7F 74(7C)              <3>  j%+1 short retOff
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
<<<<<<< HEAD
   425 00002B4D 3C0D                <1>     cmp al, CR
   426                              <1>     return
    13                              <2> %%_ret:
    14 00002B4F C3                  <2>  ret
=======
   425 00002A81 3C0D                <1>     cmp al, CR
   426                              <1>     return
    13                              <2> %%_ret:
    14 00002A83 C3                  <2>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <2> %assign retOff %%_ret-$$
   427                              <1> 
   428                              <1> skipSpaces:
   429                              <1> ;Also skips tabs
   430                              <1> ;Input: rsi must point to the start of the data string
   431                              <1> ;Output: rsi points to the first non-space char
<<<<<<< HEAD
   432 00002B50 803E20              <1>     cmp byte [rsi], " "
   433 00002B53 7405                <1>     je .skip    ;If equal to a space, skip it
   434 00002B55 803E09              <1>     cmp byte [rsi], TAB
=======
   432 00002A84 803E20              <1>     cmp byte [rsi], " "
   433 00002A87 7405                <1>     je .skip    ;If equal to a space, skip it
   434 00002A89 803E09              <1>     cmp byte [rsi], TAB
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   435                              <1>     retne   ;If not equal to a tab or space, return
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
<<<<<<< HEAD
    26 00002B58 75(4F)              <3>  j%+1 short retOff
=======
    26 00002A8C 75(83)              <3>  j%+1 short retOff
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   436                              <1> .skip:
<<<<<<< HEAD
   437 00002B5A 48FFC6              <1>     inc rsi
   438 00002B5D EBF1                <1>     jmp short skipSpaces
   439                              <1> 
   440                              <1> printPrompt:
   441 00002B5F 66813DC1D4FFFFFFFF  <1>     cmp word [promptPtr], -1
   442 00002B68 750B                <1>     jne .validPrompt
   443                              <1>     ;Here we print the default prompt
   444 00002B6A E8C7FEFFFF          <1>     call putCWDInPrompt
   445 00002B6F E8ADFEFFFF          <1>     call putGTinPrompt
   446                              <1>     return
    13                              <2> %%_ret:
    14 00002B74 C3                  <2>  ret
=======
   437 00002A8E 48FFC6              <1>     inc rsi
   438 00002A91 EBF1                <1>     jmp short skipSpaces
   439                              <1> 
   440                              <1> printPrompt:
   441 00002A93 66813D8DD5FFFFFFFF  <1>     cmp word [promptPtr], -1
   442 00002A9C 750B                <1>     jne .validPrompt
   443                              <1>     ;Here we print the default prompt
   444 00002A9E E8C7FEFFFF          <1>     call putCWDInPrompt
   445 00002AA3 E8ADFEFFFF          <1>     call putGTinPrompt
   446                              <1>     return
    13                              <2> %%_ret:
    14 00002AA8 C3                  <2>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <2> %assign retOff %%_ret-$$
   447                              <1> .validPrompt:
   448                              <1>     return
    13                              <2> %%_ret:
<<<<<<< HEAD
    14 00002B75 C3                  <2>  ret
=======
    14 00002AA9 C3                  <2>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <2> %assign retOff %%_ret-$$
   449                              <1> 
   450                              <1> clearCommandState:
   451                              <1> ;Clears the command state
<<<<<<< HEAD
   452 00002B76 488D3D37D5FFFF      <1>     lea rdi, cmdStatePtr
   453 00002B7D B90E000000          <1>     mov ecx, cmdStateL
   454 00002B82 31C0                <1>     xor eax, eax
   455 00002B84 F3AA                <1>     rep stosb
   456 00002B86 C70528D5FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   456 00002B8F FF                  <1>
   457                              <1>     return
    13                              <2> %%_ret:
    14 00002B90 C3                  <2>  ret
=======
   452 00002AAA 488D3D03D6FFFF      <1>     lea rdi, cmdStatePtr
   453 00002AB1 B90E000000          <1>     mov ecx, cmdStateL
   454 00002AB6 31C0                <1>     xor eax, eax
   455 00002AB8 F3AA                <1>     rep stosb
   456 00002ABA C705F4D5FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   456 00002AC3 FF                  <1>
   457                              <1>     return
    13                              <2> %%_ret:
    14 00002AC4 C3                  <2>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <2> %assign retOff %%_ret-$$
   458                              <1> 
   459                              <1> clearCommandLineState:
   460                              <1> ;Clears the command line state after a 0Dh encountered
<<<<<<< HEAD
   461 00002B91 488D3D07D5FFFF      <1>     lea rdi, cmdLineStatePtr
   462 00002B98 B923000000          <1>     mov ecx, cmdLineStateL
   463 00002B9D 31C0                <1>     xor eax, eax
   464 00002B9F F3AA                <1>     rep stosb
   465 00002BA1 C70505D5FFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   465 00002BAA FF                  <1>
   466 00002BAB C70503D5FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   466 00002BB4 FF                  <1>
   467                              <1>     return
    13                              <2> %%_ret:
    14 00002BB5 C3                  <2>  ret
=======
   461 00002AC5 488D3DD3D5FFFF      <1>     lea rdi, cmdLineStatePtr
   462 00002ACC B923000000          <1>     mov ecx, cmdLineStateL
   463 00002AD1 31C0                <1>     xor eax, eax
   464 00002AD3 F3AA                <1>     rep stosb
   465 00002AD5 C705D1D5FFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   465 00002ADE FF                  <1>
   466 00002ADF C705CFD5FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   466 00002AE8 FF                  <1>
   467                              <1>     return
    13                              <2> %%_ret:
    14 00002AE9 C3                  <2>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <2> %assign retOff %%_ret-$$
   468                              <1> 
   469                              <1> asciiToFCB:
   470                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   471                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   472                              <1> ;Also doesn't check if chars are valid
   473                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   474                              <1> ;Name is space padded.
   475                              <1> ;Input: rsi = ASCII string buffer
   476                              <1> ;       rdi = FCB name buffer
   477                              <1> ;Output: al = Char that terminated the source string 
<<<<<<< HEAD
   478 00002BB6 53                  <1>     push rbx    
   479 00002BB7 57                  <1>     push rdi
   480 00002BB8 B90B000000          <1>     mov ecx, 11
   481 00002BBD B020                <1>     mov al, " "
   482 00002BBF F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   483 00002BC1 5F                  <1>     pop rdi
   484 00002BC2 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   485 00002BC5 EB1D                <1>     jmp short asciiFilenameToFCB.processName
=======
   478 00002AEA 53                  <1>     push rbx    
   479 00002AEB 57                  <1>     push rdi
   480 00002AEC B90B000000          <1>     mov ecx, 11
   481 00002AF1 B020                <1>     mov al, " "
   482 00002AF3 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   483 00002AF5 5F                  <1>     pop rdi
   484 00002AF6 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   485 00002AF9 EB1D                <1>     jmp short asciiFilenameToFCB.processName
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   486                              <1> asciiFilenameToFCB:
   487                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   488                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   489                              <1> ;Also doesn't check if chars are valid
   490                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   491                              <1> ;Name is space padded.
   492                              <1> ;Input: rsi = ASCII string buffer
   493                              <1> ;       rdi = FCB name buffer
   494                              <1> ;Output: al = Char that terminated the source string 
<<<<<<< HEAD
   495 00002BC7 53                  <1>     push rbx    
   496 00002BC8 57                  <1>     push rdi
   497 00002BC9 B90B000000          <1>     mov ecx, 11
   498 00002BCE B020                <1>     mov al, " "
   499 00002BD0 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   500 00002BD2 5F                  <1>     pop rdi
   501 00002BD3 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   502                              <1>     ;Preprocess for Dir Searches
   503 00002BD6 803E2E              <1>     cmp byte [rsi], "."
   504 00002BD9 7509                <1>     jne .processName
   505 00002BDB A4                  <1>     movsb   ;Store the first dot
   506 00002BDC 803E2E              <1>     cmp byte [rsi], "."
   507 00002BDF 752C                <1>     jne .exitBadChar
   508 00002BE1 A4                  <1>     movsb
   509 00002BE2 EB29                <1>     jmp short .exitBadChar
   510                              <1> .processName:
   511 00002BE4 AC                  <1>     lodsb   ;Get the char in al
   512 00002BE5 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   513 00002BE7 7426                <1>     jz .exit
   514 00002BE9 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   515 00002BEB 7407                <1>     je .extSpace
   516 00002BED 3C2E                <1>     cmp al, "."
   517 00002BEF 740C                <1>     je .ext
   518 00002BF1 AA                  <1>     stosb   ;Store the char
   519 00002BF2 EBF0                <1>     jmp short .processName
   520                              <1> .extSpace:
   521                              <1> ;Now we scan for a period in the name
   522 00002BF4 AC                  <1>     lodsb   ;Get a char and increase rsi
   523 00002BF5 84C0                <1>     test al, al
   524 00002BF7 7416                <1>     jz .exit
   525 00002BF9 3C2E                <1>     cmp al, "."     ;If al is not a period...
   526 00002BFB 75F7                <1>     jne .extSpace   ; keep searching
   527                              <1> .ext:
   528 00002BFD 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   529                              <1> .processExt:
   530 00002C01 AC                  <1>     lodsb
   531 00002C02 84C0                <1>     test al, al
   532 00002C04 7409                <1>     jz .exit
   533 00002C06 3C20                <1>     cmp al, " "
   534 00002C08 7405                <1>     je .exit
   535 00002C0A AA                  <1>     stosb
   536 00002C0B EBF4                <1>     jmp short .processExt
   537                              <1> .exitBadChar:
   538 00002C0D 30C0                <1>     xor al, al  ;Return a null terminator
   539                              <1> .exit:
   540 00002C0F 5B                  <1>     pop rbx
   541                              <1>     return
    13                              <2> %%_ret:
    14 00002C10 C3                  <2>  ret
=======
   495 00002AFB 53                  <1>     push rbx    
   496 00002AFC 57                  <1>     push rdi
   497 00002AFD B90B000000          <1>     mov ecx, 11
   498 00002B02 B020                <1>     mov al, " "
   499 00002B04 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   500 00002B06 5F                  <1>     pop rdi
   501 00002B07 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   502                              <1>     ;Preprocess for Dir Searches
   503 00002B0A 803E2E              <1>     cmp byte [rsi], "."
   504 00002B0D 7509                <1>     jne .processName
   505 00002B0F A4                  <1>     movsb   ;Store the first dot
   506 00002B10 803E2E              <1>     cmp byte [rsi], "."
   507 00002B13 752C                <1>     jne .exitBadChar
   508 00002B15 A4                  <1>     movsb
   509 00002B16 EB29                <1>     jmp short .exitBadChar
   510                              <1> .processName:
   511 00002B18 AC                  <1>     lodsb   ;Get the char in al
   512 00002B19 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   513 00002B1B 7426                <1>     jz .exit
   514 00002B1D 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   515 00002B1F 7407                <1>     je .extSpace
   516 00002B21 3C2E                <1>     cmp al, "."
   517 00002B23 740C                <1>     je .ext
   518 00002B25 AA                  <1>     stosb   ;Store the char
   519 00002B26 EBF0                <1>     jmp short .processName
   520                              <1> .extSpace:
   521                              <1> ;Now we scan for a period in the name
   522 00002B28 AC                  <1>     lodsb   ;Get a char and increase rsi
   523 00002B29 84C0                <1>     test al, al
   524 00002B2B 7416                <1>     jz .exit
   525 00002B2D 3C2E                <1>     cmp al, "."     ;If al is not a period...
   526 00002B2F 75F7                <1>     jne .extSpace   ; keep searching
   527                              <1> .ext:
   528 00002B31 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   529                              <1> .processExt:
   530 00002B35 AC                  <1>     lodsb
   531 00002B36 84C0                <1>     test al, al
   532 00002B38 7409                <1>     jz .exit
   533 00002B3A 3C20                <1>     cmp al, " "
   534 00002B3C 7405                <1>     je .exit
   535 00002B3E AA                  <1>     stosb
   536 00002B3F EBF4                <1>     jmp short .processExt
   537                              <1> .exitBadChar:
   538 00002B41 30C0                <1>     xor al, al  ;Return a null terminator
   539                              <1> .exit:
   540 00002B43 5B                  <1>     pop rbx
   541                              <1>     return
    13                              <2> %%_ret:
    14 00002B44 C3                  <2>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <2> %assign retOff %%_ret-$$
   542                              <1> 
   543                              <1> FCBToAsciiz:
   544                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   545                              <1> ;Name is space padded too
   546                              <1> ;Input: rsi = FCB name buffer
   547                              <1> ;       rdi = ASCIIZ string buffer
<<<<<<< HEAD
   548 00002C11 B908000000          <1>     mov ecx, 8
   549 00002C16 F3A4                <1>     rep movsb   ;Move the name over
   550                              <1> .scanNameSpace:
   551 00002C18 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   552 00002C1C 750D                <1>     jne .ext
   553 00002C1E 48FFCF              <1>     dec rdi
   554 00002C21 FFC1                <1>     inc ecx
   555 00002C23 81F908000000        <1>     cmp ecx, 8
   556 00002C29 72ED                <1>     jb .scanNameSpace
   557                              <1> .ext:
   558 00002C2B 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   559 00002C30 7506                <1>     jne .validExt
   560 00002C32 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   561 00002C36 7415                <1>     je .exit
   562                              <1> .validExt:
   563 00002C38 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   564 00002C3A AA                  <1>     stosb
   565 00002C3B B903000000          <1>     mov ecx, 3
   566 00002C40 F3A4                <1>     rep movsb   ;Move the three extension chars over
   567                              <1> .scanExtSpace:
   568 00002C42 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   569 00002C46 7505                <1>     jne .exit
   570 00002C48 48FFCF              <1>     dec rdi
   571 00002C4B EBF5                <1>     jmp short .scanExtSpace
   572                              <1> .exit:
   573 00002C4D 31C0                <1>     xor eax, eax
   574 00002C4F AA                  <1>     stosb   ;Store a null at the end
   575                              <1>     return
    13                              <2> %%_ret:
    14 00002C50 C3                  <2>  ret
=======
   548 00002B45 B908000000          <1>     mov ecx, 8
   549 00002B4A F3A4                <1>     rep movsb   ;Move the name over
   550                              <1> .scanNameSpace:
   551 00002B4C 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   552 00002B50 750D                <1>     jne .ext
   553 00002B52 48FFCF              <1>     dec rdi
   554 00002B55 FFC1                <1>     inc ecx
   555 00002B57 81F908000000        <1>     cmp ecx, 8
   556 00002B5D 72ED                <1>     jb .scanNameSpace
   557                              <1> .ext:
   558 00002B5F 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   559 00002B64 7506                <1>     jne .validExt
   560 00002B66 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   561 00002B6A 7415                <1>     je .exit
   562                              <1> .validExt:
   563 00002B6C B02E                <1>     mov al, "." ;We have a valid extension, store a period
   564 00002B6E AA                  <1>     stosb
   565 00002B6F B903000000          <1>     mov ecx, 3
   566 00002B74 F3A4                <1>     rep movsb   ;Move the three extension chars over
   567                              <1> .scanExtSpace:
   568 00002B76 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   569 00002B7A 7505                <1>     jne .exit
   570 00002B7C 48FFCF              <1>     dec rdi
   571 00002B7F EBF5                <1>     jmp short .scanExtSpace
   572                              <1> .exit:
   573 00002B81 31C0                <1>     xor eax, eax
   574 00002B83 AA                  <1>     stosb   ;Store a null at the end
   575                              <1>     return
    13                              <2> %%_ret:
    14 00002B84 C3                  <2>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <2> %assign retOff %%_ret-$$
   576                              <1> 
   577                              <1> buildCommandPath:
   578                              <1> ;Based on the first argument on the command line
   579                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   580                              <1>     ;If this is a relative path, will handle correctly (tho unnecessary)
<<<<<<< HEAD
   581 00002C51 0FB60565D4FFFF      <1>     movzx eax, byte [arg1Off]
   582 00002C58 488D35BED5FFFF      <1>     lea rsi, cmdBuffer
   583 00002C5F 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   584 00002C62 8A3DC3D3FFFF        <1>     mov bh, byte [pathSep]
   585 00002C68 B33A                <1>     mov bl, ":"
   586 00002C6A 383E                <1>     cmp byte [rsi], bh  ;Is the first char relative to root?
   587 00002C6C 7458                <1>     je .absoluteCurrent
   588 00002C6E 66395E01            <1>     cmp word [rsi + 1], bx    ;This checks if absolute or relative
   589 00002C72 746D                <1>     je .absolutePath
   590 00002C74 385E01              <1>     cmp byte [rsi + 1], bl  ;Check if a drive separator
   591 00002C77 7409                <1>     je .relativeGiven
   592                              <1> ;No drive letter given, must get Current Drive
   593 00002C79 E85FFEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   594 00002C7E 0441                <1>     add al, "A"
   595 00002C80 EB0B                <1>     jmp short .relativeCommon
   596                              <1> .relativeGiven:
   597                              <1> ;Drive letter pointed to by AL
   598 00002C82 8A06                <1>     mov al, byte [rsi]  ;Get drive letter in al
   599 00002C84 24DF                <1>     and al, 0DFh    ;Convert to UC
   600 00002C86 4881C602000000      <1>     add rsi, 2  ;Skip the given drive letter and the colon
   601                              <1> .relativeCommon:
   602                              <1>     ;al has drive letter
   603 00002C8D 88C2                <1>     mov dl, al  ;Save drive letter in dl
   604 00002C8F 80EA40              <1>     sub dl, "@" ;Get 1 based drive number in dl
   605 00002C92 B43A                <1>     mov ah, ":" ;Get the colon in too
   606 00002C94 488D3DC3D7FFFF      <1>     lea rdi, searchSpec ;Start building our search path here
   607 00002C9B 66AB                <1>     stosw   ;Store X:
   608 00002C9D 8A0588D3FFFF        <1>     mov al, byte [pathSep]
   609 00002CA3 AA                  <1>     stosb   ;Store pathSep
   610 00002CA4 56                  <1>     push rsi    ;Save user input string
   611 00002CA5 4889FE              <1>     mov rsi, rdi    ;Put the current directory here for this drive
   612 00002CA8 B447                <1>     mov ah, 47h ;Get Current Working Directory, dl has drive number
   613 00002CAA CD41                <1>     int 41h ;Won't fail as drive letter in dl confirmed ok
   614 00002CAC 5E                  <1>     pop rsi
   615                              <1>     ;Now want to find terminating null
   616 00002CAD 30C0                <1>     xor al, al
   617 00002CAF 31C9                <1>     xor ecx, ecx
   618 00002CB1 FFC9                <1>     dec ecx
   619 00002CB3 F2AE                <1>     repne scasb ;Search for the terminating null
   620 00002CB5 48FFCF              <1>     dec rdi ;Go back one once found
   621 00002CB8 8A056DD3FFFF        <1>     mov al, byte [pathSep]
   622 00002CBE 3847FF              <1>     cmp byte [rdi - 1], al
   623 00002CC1 7425                <1>     je .buildPath ;If the previous char is a pathsep, skip storing another
   624 00002CC3 AA                  <1>     stosb   ;Store the pathsep
   625 00002CC4 EB22                <1>     jmp short .buildPath  ;Now we copy the user string over and good to go
   626                              <1> .absoluteCurrent:
   627 00002CC6 E812FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   628 00002CCB 0441                <1>     add al, "A"
   629 00002CCD B43A                <1>     mov ah, ":" ;ax has X: now to store 
   630 00002CCF 488D3D88D7FFFF      <1>     lea rdi, searchSpec
   631 00002CD6 66AB                <1>     stosw
   632 00002CD8 8A054DD3FFFF        <1>     mov al, byte [pathSep]
   633 00002CDE AA                  <1>     stosb
   634 00002CDF EB07                <1>     jmp short .buildPath
   635                              <1> .absolutePath:
   636 00002CE1 488D3D76D7FFFF      <1>     lea rdi, searchSpec
   637                              <1> .buildPath:
   638 00002CE8 E8C8E9FFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   639 00002CED F8                  <1>     clc ;I dont care if i encounter an embedded CR rn
   640                              <1>     return
    13                              <2> %%_ret:
    14 00002CEE C3                  <2>  ret
=======
   581 00002B85 0FB60531D5FFFF      <1>     movzx eax, byte [arg1Off]
   582 00002B8C 488D350AD6FFFF      <1>     lea rsi, cmdBuffer
   583 00002B93 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   584 00002B96 8A3D8FD4FFFF        <1>     mov bh, byte [pathSep]
   585 00002B9C B33A                <1>     mov bl, ":"
   586 00002B9E 383E                <1>     cmp byte [rsi], bh  ;Is the first char relative to root?
   587 00002BA0 7458                <1>     je .absoluteCurrent
   588 00002BA2 66395E01            <1>     cmp word [rsi + 1], bx    ;This checks if absolute or relative
   589 00002BA6 746D                <1>     je .absolutePath
   590 00002BA8 385E01              <1>     cmp byte [rsi + 1], bl  ;Check if a drive separator
   591 00002BAB 7409                <1>     je .relativeGiven
   592                              <1> ;No drive letter given, must get Current Drive
   593 00002BAD E85FFEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   594 00002BB2 0441                <1>     add al, "A"
   595 00002BB4 EB0B                <1>     jmp short .relativeCommon
   596                              <1> .relativeGiven:
   597                              <1> ;Drive letter pointed to by AL
   598 00002BB6 8A06                <1>     mov al, byte [rsi]  ;Get drive letter in al
   599 00002BB8 24DF                <1>     and al, 0DFh    ;Convert to UC
   600 00002BBA 4881C602000000      <1>     add rsi, 2  ;Skip the given drive letter and the colon
   601                              <1> .relativeCommon:
   602                              <1>     ;al has drive letter
   603 00002BC1 88C2                <1>     mov dl, al  ;Save drive letter in dl
   604 00002BC3 80EA40              <1>     sub dl, "@" ;Get 1 based drive number in dl
   605 00002BC6 B43A                <1>     mov ah, ":" ;Get the colon in too
   606 00002BC8 488D3D0FD8FFFF      <1>     lea rdi, searchSpec ;Start building our search path here
   607 00002BCF 66AB                <1>     stosw   ;Store X:
   608 00002BD1 8A0554D4FFFF        <1>     mov al, byte [pathSep]
   609 00002BD7 AA                  <1>     stosb   ;Store pathSep
   610 00002BD8 56                  <1>     push rsi    ;Save user input string
   611 00002BD9 4889FE              <1>     mov rsi, rdi    ;Put the current directory here for this drive
   612 00002BDC B447                <1>     mov ah, 47h ;Get Current Working Directory, dl has drive number
   613 00002BDE CD41                <1>     int 41h ;Won't fail as drive letter in dl confirmed ok
   614 00002BE0 5E                  <1>     pop rsi
   615                              <1>     ;Now want to find terminating null
   616 00002BE1 30C0                <1>     xor al, al
   617 00002BE3 31C9                <1>     xor ecx, ecx
   618 00002BE5 FFC9                <1>     dec ecx
   619 00002BE7 F2AE                <1>     repne scasb ;Search for the terminating null
   620 00002BE9 48FFCF              <1>     dec rdi ;Go back one once found
   621 00002BEC 8A0539D4FFFF        <1>     mov al, byte [pathSep]
   622 00002BF2 3847FF              <1>     cmp byte [rdi - 1], al
   623 00002BF5 7425                <1>     je .buildPath ;If the previous char is a pathsep, skip storing another
   624 00002BF7 AA                  <1>     stosb   ;Store the pathsep
   625 00002BF8 EB22                <1>     jmp short .buildPath  ;Now we copy the user string over and good to go
   626                              <1> .absoluteCurrent:
   627 00002BFA E812FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   628 00002BFF 0441                <1>     add al, "A"
   629 00002C01 B43A                <1>     mov ah, ":" ;ax has X: now to store 
   630 00002C03 488D3DD4D7FFFF      <1>     lea rdi, searchSpec
   631 00002C0A 66AB                <1>     stosw
   632 00002C0C 8A0519D4FFFF        <1>     mov al, byte [pathSep]
   633 00002C12 AA                  <1>     stosb
   634 00002C13 EB07                <1>     jmp short .buildPath
   635                              <1> .absolutePath:
   636 00002C15 488D3DC2D7FFFF      <1>     lea rdi, searchSpec
   637                              <1> .buildPath:
   638 00002C1C E816EAFFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   639 00002C21 F8                  <1>     clc ;I dont care if i encounter an embedded CR rn
   640                              <1>     return
    13                              <2> %%_ret:
    14 00002C22 C3                  <2>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <2> %assign retOff %%_ret-$$
   641                              <1>     
   642                              <1> printDecimalWord:
   643                              <1> ;Takes qword in rax and print it's decimal representation
   644                              <1> ;Takes the qword in eax and prints its decimal representation
<<<<<<< HEAD
   645 00002CEF 31C9                <1>     xor ecx, ecx
   646 00002CF1 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   647 00002CF3 85C0                <1>     test eax, eax
   648 00002CF5 750C                <1>     jnz .notZero
   649 00002CF7 B930000000          <1>     mov ecx, "0"
   650 00002CFC BD01000000          <1>     mov ebp, 1  ;Print one digit
   651 00002D01 EB3E                <1>     jmp short .dpfb2
   652                              <1> .notZero:
   653 00002D03 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   654 00002D05 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   655                              <1> .dpfb0:
   656 00002D0A FFC5                <1>     inc ebp
   657 00002D0C 81FD08000000        <1>     cmp ebp, 8
   658 00002D12 7206                <1>     jb .dpfb00
   659 00002D14 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   660 00002D18 EB04                <1>     jmp short .dpfb01
   661                              <1> .dpfb00:
   662 00002D1A 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   663                              <1> .dpfb01:
   664 00002D1E 31D2                <1>     xor edx, edx
   665 00002D20 48F7F6              <1>     div rsi
   666 00002D23 80C230              <1>     add dl, '0'
   667 00002D26 80FA39              <1>     cmp dl, '9'
   668 00002D29 7603                <1>     jbe .dpfb1
   669 00002D2B 80C207              <1>     add dl, 'A'-'0'-10
   670                              <1> .dpfb1:
   671 00002D2E 81FD08000000        <1>     cmp ebp, 8
   672 00002D34 7204                <1>     jb .dpfb10
   673 00002D36 88D3                <1>     mov bl, dl ;Add the bottom bits
   674 00002D38 EB02                <1>     jmp short .dpfb11
   675                              <1> .dpfb10:
   676 00002D3A 88D1                <1>     mov cl, dl    ;Save remainder byte
   677                              <1> .dpfb11:
   678 00002D3C 4885C0              <1>     test rax, rax
   679 00002D3F 75C9                <1>     jnz .dpfb0
   680                              <1> .dpfb2:
   681 00002D41 81FD08000000        <1>     cmp ebp, 8
   682 00002D47 7208                <1>     jb .dpfb20
   683 00002D49 88DA                <1>     mov dl, bl
   684 00002D4B 48C1EB08            <1>     shr rbx, 8
   685 00002D4F EB06                <1>     jmp short .dpfb21
   686                              <1> .dpfb20:
   687 00002D51 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   688 00002D53 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   689                              <1> .dpfb21:
   690 00002D57 B402                <1>     mov ah, 02h
   691 00002D59 CD41                <1>     int 41h
   692 00002D5B FFCD                <1>     dec ebp
   693 00002D5D 75E2                <1>     jnz .dpfb2
   694                              <1>     return
    13                              <2> %%_ret:
    14 00002D5F C3                  <2>  ret
=======
   645 00002C23 31C9                <1>     xor ecx, ecx
   646 00002C25 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   647 00002C27 85C0                <1>     test eax, eax
   648 00002C29 750C                <1>     jnz .notZero
   649 00002C2B B930000000          <1>     mov ecx, "0"
   650 00002C30 BD01000000          <1>     mov ebp, 1  ;Print one digit
   651 00002C35 EB3E                <1>     jmp short .dpfb2
   652                              <1> .notZero:
   653 00002C37 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   654 00002C39 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   655                              <1> .dpfb0:
   656 00002C3E FFC5                <1>     inc ebp
   657 00002C40 81FD08000000        <1>     cmp ebp, 8
   658 00002C46 7206                <1>     jb .dpfb00
   659 00002C48 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   660 00002C4C EB04                <1>     jmp short .dpfb01
   661                              <1> .dpfb00:
   662 00002C4E 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   663                              <1> .dpfb01:
   664 00002C52 31D2                <1>     xor edx, edx
   665 00002C54 48F7F6              <1>     div rsi
   666 00002C57 80C230              <1>     add dl, '0'
   667 00002C5A 80FA39              <1>     cmp dl, '9'
   668 00002C5D 7603                <1>     jbe .dpfb1
   669 00002C5F 80C207              <1>     add dl, 'A'-'0'-10
   670                              <1> .dpfb1:
   671 00002C62 81FD08000000        <1>     cmp ebp, 8
   672 00002C68 7204                <1>     jb .dpfb10
   673 00002C6A 88D3                <1>     mov bl, dl ;Add the bottom bits
   674 00002C6C EB02                <1>     jmp short .dpfb11
   675                              <1> .dpfb10:
   676 00002C6E 88D1                <1>     mov cl, dl    ;Save remainder byte
   677                              <1> .dpfb11:
   678 00002C70 4885C0              <1>     test rax, rax
   679 00002C73 75C9                <1>     jnz .dpfb0
   680                              <1> .dpfb2:
   681 00002C75 81FD08000000        <1>     cmp ebp, 8
   682 00002C7B 7208                <1>     jb .dpfb20
   683 00002C7D 88DA                <1>     mov dl, bl
   684 00002C7F 48C1EB08            <1>     shr rbx, 8
   685 00002C83 EB06                <1>     jmp short .dpfb21
   686                              <1> .dpfb20:
   687 00002C85 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   688 00002C87 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   689                              <1> .dpfb21:
   690 00002C8B B402                <1>     mov ah, 02h
   691 00002C8D CD41                <1>     int 41h
   692 00002C8F FFCD                <1>     dec ebp
   693 00002C91 75E2                <1>     jnz .dpfb2
   694                              <1>     return
    13                              <2> %%_ret:
    14 00002C93 C3                  <2>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <2> %assign retOff %%_ret-$$
   695                              <1> 
   696                              <1> getDecimalWord:
   697                              <1> ;Works on MAX A dword in eax
   698                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
<<<<<<< HEAD
   699 00002D60 31C9                <1>     xor ecx, ecx
   700 00002D62 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   701 00002D64 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   702                              <1> .dpfb0:
   703 00002D69 FFC5                <1>     inc ebp
   704 00002D6B 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   705 00002D6F 31D2                <1>     xor edx, edx
   706 00002D71 48F7F3              <1>     div rbx
   707 00002D74 80C230              <1>     add dl, '0'
   708 00002D77 80FA39              <1>     cmp dl, '9'
   709 00002D7A 7603                <1>     jbe .dpfb1
   710 00002D7C 80C207              <1>     add dl, 'A'-'0'-10
   711                              <1> .dpfb1:
   712 00002D7F 88D1                <1>     mov cl, dl    ;Save remainder byte
   713 00002D81 4885C0              <1>     test rax, rax
   714 00002D84 75E3                <1>     jnz .dpfb0
   715                              <1>     return
    13                              <2> %%_ret:
    14 00002D86 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   716                              <1> 
   717                              <1> freezePC:
   718 00002D87 488D15FBDFFFFF      <1>     lea rdx, memBad1
   719 00002D8E B409                <1>     mov ah, 09h
   720 00002D90 CD41                <1>     int 41h
   721                              <1> .altEP:
   722 00002D92 488D1519E0FFFF      <1>     lea rdx, memBad3
   723 00002D99 B409                <1>     mov ah, 09h
   724 00002D9B CD41                <1>     int 41h
   725                              <1> .lp:
   726 00002D9D F390                <1>     pause
   727 00002D9F F4                  <1>     hlt
   728 00002DA0 EBFB                <1>     jmp short .lp
=======
   699 00002C94 31C9                <1>     xor ecx, ecx
   700 00002C96 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   701 00002C98 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   702                              <1> .dpfb0:
   703 00002C9D FFC5                <1>     inc ebp
   704 00002C9F 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   705 00002CA3 31D2                <1>     xor edx, edx
   706 00002CA5 48F7F3              <1>     div rbx
   707 00002CA8 80C230              <1>     add dl, '0'
   708 00002CAB 80FA39              <1>     cmp dl, '9'
   709 00002CAE 7603                <1>     jbe .dpfb1
   710 00002CB0 80C207              <1>     add dl, 'A'-'0'-10
   711                              <1> .dpfb1:
   712 00002CB3 88D1                <1>     mov cl, dl    ;Save remainder byte
   713 00002CB5 4885C0              <1>     test rax, rax
   714 00002CB8 75E3                <1>     jnz .dpfb0
   715                              <1>     return
    13                              <2> %%_ret:
    14 00002CBA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   716                              <1> 
   717                              <1> freezePC:
   718 00002CBB 488D1547E0FFFF      <1>     lea rdx, memBad1
   719 00002CC2 B409                <1>     mov ah, 09h
   720 00002CC4 CD41                <1>     int 41h
   721                              <1> .altEP:
   722 00002CC6 488D1565E0FFFF      <1>     lea rdx, memBad3
   723 00002CCD B409                <1>     mov ah, 09h
   724 00002CCF CD41                <1>     int 41h
   725                              <1> .lp:
   726 00002CD1 F390                <1>     pause
   727 00002CD3 F4                  <1>     hlt
   728 00002CD4 EBFB                <1>     jmp short .lp
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   729                              <1> 
   730                              <1> getFilenamePtrFromFilespec:
   731                              <1> ;Gets a pointer to the first char of a filename from a asciiz pathspec
   732                              <1> ;Input: rsi = Pathspec to search
   733                              <1> ;Output: rsi = Points to the first char of the filename
<<<<<<< HEAD
   734 00002DA2 4889F3              <1>     mov rbx, rsi
   735 00002DA5 31C0                <1>     xor eax, eax
   736 00002DA7 4889F7              <1>     mov rdi, rsi    ;Go to the source string 
   737 00002DAA E833FDFFFF          <1>     call strlen     ;Get it's length
   738 00002DAF FFC9                <1>     dec ecx ;Dont include terminating null
   739 00002DB1 741F                <1>     jz .exitBad ;Was the string of length zero? Exit bad if so
   740 00002DB3 4801CE              <1>     add rsi, rcx    ;Goto last char in path (not null)
   741                              <1> .lp:
   742 00002DB6 4839F3              <1>     cmp rbx, rsi    ;Is rdi pointing to the start of the string?
=======
   734 00002CD6 4889F3              <1>     mov rbx, rsi
   735 00002CD9 31C0                <1>     xor eax, eax
   736 00002CDB 4889F7              <1>     mov rdi, rsi    ;Go to the source string 
   737 00002CDE E833FDFFFF          <1>     call strlen     ;Get it's length
   738 00002CE3 FFC9                <1>     dec ecx ;Dont include terminating null
   739 00002CE5 741F                <1>     jz .exitBad ;Was the string of length zero? Exit bad if so
   740 00002CE7 4801CE              <1>     add rsi, rcx    ;Goto last char in path (not null)
   741                              <1> .lp:
   742 00002CEA 4839F3              <1>     cmp rbx, rsi    ;Is rdi pointing to the start of the string?
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   743                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
<<<<<<< HEAD
    26 00002DB9 74(86)              <3>  j%+1 short retOff
=======
    26 00002CED 74(BA)              <3>  j%+1 short retOff
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
<<<<<<< HEAD
   744 00002DBB 8A06                <1>     mov al, byte [rsi]  ;Get the char we currently are at
   745 00002DBD 3C3A                <1>     cmp al, ":" ;X: ?
   746 00002DBF 740D                <1>     je .pointFilename
   747 00002DC1 3A0564D2FFFF        <1>     cmp al, byte [pathSep]  ;Is al pathSep?
   748 00002DC7 7405                <1>     je .pointFilename
   749 00002DC9 48FFCE              <1>     dec rsi ;Not a terminator, go back a char
   750 00002DCC EBE8                <1>     jmp short .lp
   751                              <1> .pointFilename:
   752 00002DCE 48FFC6              <1>     inc rsi ;Now point to the first char of the pathname
   753                              <1>     return
    13                              <2> %%_ret:
    14 00002DD1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   754                              <1> .exitBad:
   755 00002DD2 F9                  <1>     stc
   756                              <1> .exit:
   757                              <1>     return
    13                              <2> %%_ret:
    14 00002DD3 C3                  <2>  ret
=======
   744 00002CEF 8A06                <1>     mov al, byte [rsi]  ;Get the char we currently are at
   745 00002CF1 3C3A                <1>     cmp al, ":" ;X: ?
   746 00002CF3 740D                <1>     je .pointFilename
   747 00002CF5 3A0530D3FFFF        <1>     cmp al, byte [pathSep]  ;Is al pathSep?
   748 00002CFB 7405                <1>     je .pointFilename
   749 00002CFD 48FFCE              <1>     dec rsi ;Not a terminator, go back a char
   750 00002D00 EBE8                <1>     jmp short .lp
   751                              <1> .pointFilename:
   752 00002D02 48FFC6              <1>     inc rsi ;Now point to the first char of the pathname
   753                              <1>     return
    13                              <2> %%_ret:
    14 00002D05 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   754                              <1> .exitBad:
   755 00002D06 F9                  <1>     stc
   756                              <1> .exit:
   757                              <1>     return
    13                              <2> %%_ret:
    14 00002D07 C3                  <2>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <2> %assign retOff %%_ret-$$
   758                              <1> 
   759                              <1> 
   760                              <1> copyArgumentToSearchSpec:
   761                              <1> ;Works similarly to the build searchpath but is simpler
   762                              <1> ;Null terminates
<<<<<<< HEAD
   763 00002DD4 488D3D83D6FFFF      <1>     lea rdi, searchSpec
   764                              <1> .copyPath:
   765 00002DDB AC                  <1>     lodsb
   766 00002DDC E868FDFFFF          <1>     call isALEndOfCommand
   767 00002DE1 740A                <1>     jz .finishCopy
   768 00002DE3 E83EFDFFFF          <1>     call isALterminator
   769 00002DE8 7403                <1>     jz .finishCopy
   770 00002DEA AA                  <1>     stosb
   771 00002DEB EBEE                <1>     jmp short .copyPath
   772                              <1> .finishCopy:
   773 00002DED 31C0                <1>     xor eax, eax
   774 00002DEF AA                  <1>     stosb
   775                              <1>     return
    13                              <2> %%_ret:
    14 00002DF0 C3                  <2>  ret
=======
   763 00002D08 488D3DCFD6FFFF      <1>     lea rdi, searchSpec
   764                              <1> .copyPath:
   765 00002D0F AC                  <1>     lodsb
   766 00002D10 E868FDFFFF          <1>     call isALEndOfCommand
   767 00002D15 740A                <1>     jz .finishCopy
   768 00002D17 E83EFDFFFF          <1>     call isALterminator
   769 00002D1C 7403                <1>     jz .finishCopy
   770 00002D1E AA                  <1>     stosb
   771 00002D1F EBEE                <1>     jmp short .copyPath
   772                              <1> .finishCopy:
   773 00002D21 31C0                <1>     xor eax, eax
   774 00002D23 AA                  <1>     stosb
   775                              <1>     return
    13                              <2> %%_ret:
    14 00002D24 C3                  <2>  ret
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/int44h.asm"
     1                              <1> critErrorHandler:   ;Int 44h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
<<<<<<< HEAD
    24 00002DF1 53                  <1>     push rbx
    25 00002DF2 51                  <1>     push rcx
    26 00002DF3 52                  <1>     push rdx
    27 00002DF4 57                  <1>     push rdi
    28 00002DF5 56                  <1>     push rsi
    29 00002DF6 FC                  <1>     cld         ;Make String ops go forward
    30                              <1> 
    31 00002DF7 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00002DFA 488D153DDAFFFF      <1>     lea rdx, crlf
    33 00002E01 B409                <1>     mov ah, 09h ;Print String
    34 00002E03 CD41                <1>     int 41h
    35                              <1> 
    36 00002E05 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    37 00002E0B B90C000000          <1>     mov ecx, 0Ch
    38 00002E10 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    39 00002E12 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    40 00002E15 480FB7FF            <1>     movzx rdi, di
    41 00002E19 4889FA              <1>     mov rdx, rdi    ;Copy error code
    42 00002E1C 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    43 00002E20 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    44 00002E23 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    45 00002E26 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    46 00002E2D 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    47 00002E31 B409                <1>     mov ah, 09h ;Print String
    48 00002E33 CD41                <1>     int 41h     ;Call DOS to print first part of message
    49                              <1> 
    50 00002E35 488D1505020000      <1>     lea rdx, qword [.readmsg]
    51 00002E3C 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    52 00002E43 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    53 00002E46 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    54 00002E4A B409                <1>     mov ah, 09h ;Print String
    55 00002E4C CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    56                              <1> 
    57 00002E4E F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    58 00002E51 0F85DF000000        <1>     jnz .charError
    59                              <1> ;Disk error continues here
    60 00002E57 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    61 00002E5E B409                <1>     mov ah, 09h
    62 00002E60 CD41                <1>     int 41h
    63 00002E62 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    64 00002E64 80C241              <1>     add dl, "A" ;Add ASCII code
    65 00002E67 B402                <1>     mov ah, 02h ;Print char in dl
    66 00002E69 CD41                <1>     int 41h
    67                              <1> .userInput:
    68 00002E6B 488D15CCD9FFFF      <1>     lea rdx, crlf  ;Print new line
    69 00002E72 B409                <1>     mov ah, 09h
    70 00002E74 CD41                <1>     int 41h
=======
    24 00002D25 53                  <1>     push rbx
    25 00002D26 51                  <1>     push rcx
    26 00002D27 52                  <1>     push rdx
    27 00002D28 57                  <1>     push rdi
    28 00002D29 56                  <1>     push rsi
    29 00002D2A FC                  <1>     cld         ;Make String ops go forward
    30                              <1> 
    31 00002D2B 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00002D2E 488D1589DAFFFF      <1>     lea rdx, crlf
    33 00002D35 B409                <1>     mov ah, 09h ;Print String
    34 00002D37 CD41                <1>     int 41h
    35                              <1> 
    36 00002D39 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    37 00002D3F B90C000000          <1>     mov ecx, 0Ch
    38 00002D44 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    39 00002D46 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    40 00002D49 480FB7FF            <1>     movzx rdi, di
    41 00002D4D 4889FA              <1>     mov rdx, rdi    ;Copy error code
    42 00002D50 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    43 00002D54 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    44 00002D57 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    45 00002D5A 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    46 00002D61 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    47 00002D65 B409                <1>     mov ah, 09h ;Print String
    48 00002D67 CD41                <1>     int 41h     ;Call DOS to print first part of message
    49                              <1> 
    50 00002D69 488D1505020000      <1>     lea rdx, qword [.readmsg]
    51 00002D70 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    52 00002D77 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    53 00002D7A 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    54 00002D7E B409                <1>     mov ah, 09h ;Print String
    55 00002D80 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    56                              <1> 
    57 00002D82 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    58 00002D85 0F85DF000000        <1>     jnz .charError
    59                              <1> ;Disk error continues here
    60 00002D8B 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    61 00002D92 B409                <1>     mov ah, 09h
    62 00002D94 CD41                <1>     int 41h
    63 00002D96 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    64 00002D98 80C241              <1>     add dl, "A" ;Add ASCII code
    65 00002D9B B402                <1>     mov ah, 02h ;Print char in dl
    66 00002D9D CD41                <1>     int 41h
    67                              <1> .userInput:
    68 00002D9F 488D1518DAFFFF      <1>     lea rdx, crlf  ;Print new line
    69 00002DA6 B409                <1>     mov ah, 09h
    70 00002DA8 CD41                <1>     int 41h
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    71                              <1> ;Abort, Retry, Ignore, Fail is word order
    72                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    73                              <1> .userAbort:
    74                              <1> ;Abort is always an option
<<<<<<< HEAD
    75 00002E76 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    76 00002E7D B409                <1>     mov ah, 09h
    77 00002E7F CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    78                              <1> .userRetry:
    79 00002E81 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    80 00002E84 7416                <1>     jz .userIgnore    ;If clear, dont print message
    81 00002E86 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
    82 00002E8D B409                <1>     mov ah, 09h
    83 00002E8F CD41                <1>     int 41h
    84 00002E91 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
    85 00002E98 B409                <1>     mov ah, 09h
    86 00002E9A CD41                <1>     int 41h
    87                              <1> .userIgnore:
    88 00002E9C F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    89 00002E9F 7416                <1>     jz .userFail
    90 00002EA1 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
    91 00002EA8 B409                <1>     mov ah, 09h
    92 00002EAA CD41                <1>     int 41h
    93 00002EAC 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
    94 00002EB3 B409                <1>     mov ah, 09h
    95 00002EB5 CD41                <1>     int 41h
    96                              <1> .userFail:
    97 00002EB7 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    98 00002EBA 7416                <1>     jz .userMsgEnd
    99 00002EBC 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   100 00002EC3 B409                <1>     mov ah, 09h
   101 00002EC5 CD41                <1>     int 41h
   102 00002EC7 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   103 00002ECE B409                <1>     mov ah, 09h
   104 00002ED0 CD41                <1>     int 41h
   105                              <1> .userMsgEnd:
   106 00002ED2 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   107 00002ED9 B409                <1>     mov ah, 09h
   108 00002EDB CD41                <1>     int 41h
   109                              <1> ;Get user input now 
   110 00002EDD 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   111 00002EDF 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   112 00002EE6 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   113 00002EE8 CD41                <1>     int 41h ;Get char in al
   114 00002EEA 3C61                <1>     cmp al, "a" ;Chack if lowercase
   115 00002EEC 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   116 00002EEE 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   117                              <1> .uip1:
   118 00002EF0 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   119 00002EF1 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   120 00002EF3 FFC1                <1>     inc ecx
   121 00002EF5 81F904000000        <1>     cmp ecx, 4
   122 00002EFB 75F3                <1>     jne .uip1
   123 00002EFD E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   124                              <1> .validInput:
   125 00002F02 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   126                              <1> ;Now check if the input is permitted
   127 00002F04 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   128 00002F06 7427                <1>     je .cehExit
   129 00002F08 84C0                <1>     test al, al ;Check if 0 => Ignore
   130 00002F0A 740F                <1>     je .viIgnore
   131 00002F0C 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   132 00002F0E 7416                <1>     je .viRetry
   133                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   134 00002F10 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   135 00002F13 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   136 00002F19 EB14                <1>     jmp short .cehExit
   137                              <1> .viIgnore:
   138 00002F1B F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   139 00002F1E 0F8447FFFFFF        <1>     jz .userInput
   140 00002F24 EB09                <1>     jmp short .cehExit
   141                              <1> .viRetry:
   142 00002F26 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   143 00002F29 0F843CFFFFFF        <1>     jz .userInput
   144                              <1> .cehExit:
   145 00002F2F 5E                  <1>     pop rsi
   146 00002F30 5F                  <1>     pop rdi
   147 00002F31 5A                  <1>     pop rdx
   148 00002F32 59                  <1>     pop rcx
   149 00002F33 5B                  <1>     pop rbx
   150 00002F34 48CF                <1>     iretq
   151                              <1> .charError:
   152 00002F36 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   153 00002F3B 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   154                              <1> .ce1:
   155 00002F42 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   156 00002F43 88C2                <1>     mov dl, al  ;Move char into dl
   157 00002F45 B402                <1>     mov ah, 02h
   158 00002F47 CD41                <1>     int 41h ;Print char
   159 00002F49 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   160 00002F4B E91BFFFFFF          <1>     jmp .userInput
   161                              <1> 
   162                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   163 00002F50 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   163 00002F59 746563742024202020  <1>
   164 00002F62 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   164 00002F6B 6E6974202420202020  <1>
   165 00002F74 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   165 00002F7D 202420202020202020  <1>
   166 00002F86 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   166 00002F8F 6F6D6D616E64202420  <1>
   167 00002F98 446174612024202020- <1>             db "Data $            "       ;Error 4
   167 00002FA1 202020202020202020  <1>
   168 00002FAA 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   168 00002FB3 737420242020202020  <1>
   169 00002FBC 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   169 00002FC5 202020202020202020  <1>
   170 00002FCE 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   170 00002FD7 656469612024202020  <1>
   171 00002FE0 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   171 00002FE9 7420466F756E642024  <1>
   172 00002FF2 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   172 00002FFB 706572202420202020  <1>
   173 00003004 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   173 0000300D 6C7420242020202020  <1>
   174 00003016 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   174 0000301F 742024202020202020  <1>
   175 00003028 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   175 00003031 61696C757265202420  <1>
   176                              <1> 
   177 0000303A 64726976652024      <1> .drive      db "drive $"
   178 00003041 6572726F7220726561- <1> .readmsg    db "error reading $"
   178 0000304A 64696E672024        <1>
   179 00003050 6572726F7220777269- <1> .writemsg   db "error writing $"
   179 00003059 74696E672024        <1>
   180 0000305F 41626F727424        <1> .abortmsg   db "Abort$" 
   181 00003065 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   182 0000306C 526574727924        <1> .retrymsg   db "Retry$"
   183 00003072 4661696C24          <1> .failmsg    db "Fail$"
   184 00003077 2C2024              <1> .betweenMsg db ", $"
   185 0000307A 3F2024              <1> .endMsg     db "? $"
   186 0000307D 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   187                              <1> 
   188                              <1> int43h:
   189 00003081 F605A5CFFFFFFF      <1>     test byte [permaSwitch], -1
   190 00003088 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   191                              <1>     ;Else, we juggle parent PSP's
   192 0000308A 50                  <1>     push rax
   193 0000308B 53                  <1>     push rbx
   194 0000308C 488B0584CFFFFF      <1>     mov rax, qword [realParent]
   195 00003093 488B1D75CFFFFF      <1>     mov rbx, qword [pspPtr]
   196 0000309A 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   197 0000309E 5B                  <1>     pop rbx
   198 0000309F 58                  <1>     pop rax
   199                              <1> .exit:
   200 000030A0 F9                  <1>     stc     ;Set CF to kill the task
   201 000030A1 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
=======
    75 00002DAA 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    76 00002DB1 B409                <1>     mov ah, 09h
    77 00002DB3 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    78                              <1> .userRetry:
    79 00002DB5 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    80 00002DB8 7416                <1>     jz .userIgnore    ;If clear, dont print message
    81 00002DBA 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
    82 00002DC1 B409                <1>     mov ah, 09h
    83 00002DC3 CD41                <1>     int 41h
    84 00002DC5 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
    85 00002DCC B409                <1>     mov ah, 09h
    86 00002DCE CD41                <1>     int 41h
    87                              <1> .userIgnore:
    88 00002DD0 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    89 00002DD3 7416                <1>     jz .userFail
    90 00002DD5 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
    91 00002DDC B409                <1>     mov ah, 09h
    92 00002DDE CD41                <1>     int 41h
    93 00002DE0 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
    94 00002DE7 B409                <1>     mov ah, 09h
    95 00002DE9 CD41                <1>     int 41h
    96                              <1> .userFail:
    97 00002DEB F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    98 00002DEE 7416                <1>     jz .userMsgEnd
    99 00002DF0 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   100 00002DF7 B409                <1>     mov ah, 09h
   101 00002DF9 CD41                <1>     int 41h
   102 00002DFB 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   103 00002E02 B409                <1>     mov ah, 09h
   104 00002E04 CD41                <1>     int 41h
   105                              <1> .userMsgEnd:
   106 00002E06 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   107 00002E0D B409                <1>     mov ah, 09h
   108 00002E0F CD41                <1>     int 41h
   109                              <1> ;Get user input now 
   110 00002E11 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   111 00002E13 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   112 00002E1A B401                <1>     mov ah, 01h ;STDIN without Console Echo
   113 00002E1C CD41                <1>     int 41h ;Get char in al
   114 00002E1E 3C61                <1>     cmp al, "a" ;Chack if lowercase
   115 00002E20 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   116 00002E22 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   117                              <1> .uip1:
   118 00002E24 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   119 00002E25 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   120 00002E27 FFC1                <1>     inc ecx
   121 00002E29 81F904000000        <1>     cmp ecx, 4
   122 00002E2F 75F3                <1>     jne .uip1
   123 00002E31 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   124                              <1> .validInput:
   125 00002E36 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   126                              <1> ;Now check if the input is permitted
   127 00002E38 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   128 00002E3A 7427                <1>     je .cehExit
   129 00002E3C 84C0                <1>     test al, al ;Check if 0 => Ignore
   130 00002E3E 740F                <1>     je .viIgnore
   131 00002E40 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   132 00002E42 7416                <1>     je .viRetry
   133                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   134 00002E44 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   135 00002E47 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   136 00002E4D EB14                <1>     jmp short .cehExit
   137                              <1> .viIgnore:
   138 00002E4F F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   139 00002E52 0F8447FFFFFF        <1>     jz .userInput
   140 00002E58 EB09                <1>     jmp short .cehExit
   141                              <1> .viRetry:
   142 00002E5A F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   143 00002E5D 0F843CFFFFFF        <1>     jz .userInput
   144                              <1> .cehExit:
   145 00002E63 5E                  <1>     pop rsi
   146 00002E64 5F                  <1>     pop rdi
   147 00002E65 5A                  <1>     pop rdx
   148 00002E66 59                  <1>     pop rcx
   149 00002E67 5B                  <1>     pop rbx
   150 00002E68 48CF                <1>     iretq
   151                              <1> .charError:
   152 00002E6A B908000000          <1>     mov ecx, 8  ;8 chars in device name
   153 00002E6F 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   154                              <1> .ce1:
   155 00002E76 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   156 00002E77 88C2                <1>     mov dl, al  ;Move char into dl
   157 00002E79 B402                <1>     mov ah, 02h
   158 00002E7B CD41                <1>     int 41h ;Print char
   159 00002E7D E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   160 00002E7F E91BFFFFFF          <1>     jmp .userInput
   161                              <1> 
   162                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   163 00002E84 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   163 00002E8D 746563742024202020  <1>
   164 00002E96 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   164 00002E9F 6E6974202420202020  <1>
   165 00002EA8 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   165 00002EB1 202420202020202020  <1>
   166 00002EBA 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   166 00002EC3 6F6D6D616E64202420  <1>
   167 00002ECC 446174612024202020- <1>             db "Data $            "       ;Error 4
   167 00002ED5 202020202020202020  <1>
   168 00002EDE 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   168 00002EE7 737420242020202020  <1>
   169 00002EF0 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   169 00002EF9 202020202020202020  <1>
   170 00002F02 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   170 00002F0B 656469612024202020  <1>
   171 00002F14 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   171 00002F1D 7420466F756E642024  <1>
   172 00002F26 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   172 00002F2F 706572202420202020  <1>
   173 00002F38 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   173 00002F41 6C7420242020202020  <1>
   174 00002F4A 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   174 00002F53 742024202020202020  <1>
   175 00002F5C 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   175 00002F65 61696C757265202420  <1>
   176                              <1> 
   177 00002F6E 64726976652024      <1> .drive      db "drive $"
   178 00002F75 6572726F7220726561- <1> .readmsg    db "error reading $"
   178 00002F7E 64696E672024        <1>
   179 00002F84 6572726F7220777269- <1> .writemsg   db "error writing $"
   179 00002F8D 74696E672024        <1>
   180 00002F93 41626F727424        <1> .abortmsg   db "Abort$" 
   181 00002F99 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   182 00002FA0 526574727924        <1> .retrymsg   db "Retry$"
   183 00002FA6 4661696C24          <1> .failmsg    db "Fail$"
   184 00002FAB 2C2024              <1> .betweenMsg db ", $"
   185 00002FAE 3F2024              <1> .endMsg     db "? $"
   186 00002FB1 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   187                              <1> 
   188                              <1> int43h:
   189 00002FB5 F60571D0FFFFFF      <1>     test byte [permaSwitch], -1
   190 00002FBC 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   191                              <1>     ;Else, we juggle parent PSP's
   192 00002FBE 50                  <1>     push rax
   193 00002FBF 53                  <1>     push rbx
   194 00002FC0 488B0550D0FFFF      <1>     mov rax, qword [realParent]
   195 00002FC7 488B1D41D0FFFF      <1>     mov rbx, qword [pspPtr]
   196 00002FCE 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   197 00002FD2 5B                  <1>     pop rbx
   198 00002FD3 58                  <1>     pop rax
   199                              <1> .exit:
   200 00002FD4 F9                  <1>     stc     ;Set CF to kill the task
   201 00002FD5 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    19                                  
    20                                  endOfAllocNoMaster: ;End of alloc if not the master cmd
    21                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
<<<<<<< HEAD
     2                              <1> masterEnv:  ;Yeet this is this is a child command processor
     3 000030A4 5F3A434F4D4D414E44- <1>     db "_:COMMAND.COM",0
     3 000030AD 2E434F4D00          <1>
     4 000030B2 504154483D0000      <1>     db "PATH=",0,0  ;Terminate with two null bytes
     5 000030B9 202020202020202020- <1>     db ($ - masterEnv) dup (" ")    ;Pad the environment with spaces
     5 000030C2 202020202020202020- <1>
     5 000030CB 202020              <1>
=======
     2                              <1> masterEnv:  ;Yeet this is this is a child command processor, length 168 chars!
     3                              <1> ;Note this environment DOES NOT contain the full path to the program being launched
     4 00002FD8 504154483D00        <1>     db "PATH=",0
     5 00002FDE 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 00002FE6 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0
     7 00002FEF 442E434F4D00        <1>
     8 00002FF5 202020202020202020- <1>     db (165 - ($ - masterEnv)) dup (" ")    ;Pad the environment with spaces
     8 00002FFE 202020202020202020- <1>
     8 00003007 202020202020202020- <1>
     8 00003010 202020202020202020- <1>
     8 00003019 202020202020202020- <1>
     8 00003022 202020202020202020- <1>
     8 0000302B 202020202020202020- <1>
     8 00003034 202020202020202020- <1>
     8 0000303D 202020202020202020- <1>
     8 00003046 202020202020202020- <1>
     8 0000304F 202020202020202020- <1>
     8 00003058 202020202020202020- <1>
     8 00003061 202020202020202020- <1>
     8 0000306A 202020202020202020- <1>
     8 00003073 202020202020202020- <1>
     8 0000307C 20                  <1>
     9 0000307D 0000                <1>     dw 0    ;End of environment marker
    10 0000307F 00                  <1>     db 0    ;End of "program path section"
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    22                                  endOfAlloc: ;End of alloc if the master cmd
    23                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    24                                  Segment transient align=1 follows=.data
    25                                  ;This segment always gets ejected post load
    26                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD41                <1>     int 41h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D15ED010000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD41                <1>     int 41h
    10 00000013 CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    11                              <1> .okVersion:
    12                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    13 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    14 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    15 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    16 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    17                              <1> ;Setup Int 42h, Int 43h and Int 44h
    18 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt42h] ;Preserve the original addresses
    19 0000002F 488905(2E000000)    <1>     mov qword [parentInt42], rax
    20                              <1> 
<<<<<<< HEAD
    21 00000036 488D15(F12D0000)    <1>     lea rdx, critErrorHandler
    22 0000003D 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    23 00000041 B844250000          <1>     mov eax, 2544h
    24 00000046 CD41                <1>     int 41h
    25 00000048 488D15(81300000)    <1>     lea rdx, int43h
=======
    21 00000036 488D15(252D0000)    <1>     lea rdx, critErrorHandler
    22 0000003D 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    23 00000041 B844250000          <1>     mov eax, 2544h
    24 00000046 CD41                <1>     int 41h
    25 00000048 488D15(B52F0000)    <1>     lea rdx, int43h
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    26 0000004F 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    27 00000053 B843250000          <1>     mov eax, 2543h
    28 00000058 CD41                <1>     int 41h
    29 0000005A 488D15(500E0000)    <1>     lea rdx, applicationReturn
    30 00000061 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    31 00000065 B842250000          <1>     mov eax, 2542h
    32 0000006A CD41                <1>     int 41h
    33                              <1> ;Get a pointer to DOS Sysvars
    34 0000006C B452                <1>     mov ah, 52h ;Get sysvars
    35 0000006E CD41                <1>     int 41h
    36 00000070 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    37                              <1> ;Call for simple internationalisation data
    38 00000077 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    39 0000007C CD41                <1>     int 41h
    40 0000007E 3CFF                <1>     cmp al, -1
    41 00000080 7412                <1>     je .skipSwitch
    42 00000082 8815(2C000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    43 00000088 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    44 0000008B 7507                <1>     jne .skipSwitch
    45 0000008D C605(2B000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    46                              <1> .skipSwitch:
    47 00000094 B800380000          <1>     mov eax, 3800h  ;Get current country data
    48 00000099 488D15(36000000)    <1>     lea rdx, ctryData
    49 000000A0 CD41                <1>     int 41h ;Write the data to the internal country table
    50                              <1> ;Now determine if this is the master copy of COMMAND.COM
    51                              <1> ;Check if Int 4Eh has the same address as Int 4Dh. If so, we are master.
    52 000000A2 B84E350000          <1>     mov eax, 354Eh  ;Get int 4Eh address
    53 000000A7 CD41                <1>     int 41h
    54 000000A9 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    55 000000AC B84D350000          <1>     mov eax, 354Dh  ;Get int 4Dh address
    56 000000B1 CD41                <1>     int 41h
    57 000000B3 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    58 000000B6 755C                <1>     jne .skipMaster
    59                              <1> ;Ok so we are master command.com
    60                              <1> ;Now make myself the real parent
    61 000000B8 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    62 000000BF 4C8905(17000000)    <1>     mov qword [realParent], r8
    63                              <1> ;Set master environment as mine
<<<<<<< HEAD
    64 000000C6 488D05(A4300000)    <1>     lea rax, masterEnv
=======
    64 000000C6 488D05(D82F0000)    <1>     lea rax, masterEnv
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    65 000000CD 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    66                              <1> ;Set current Drive in COMSPEC
    67 000000D1 B019                <1>     mov al, 19h ;Get current Drive
    68 000000D3 CD41                <1>     int 41h
    69 000000D5 0441                <1>     add al, "A"
<<<<<<< HEAD
    70 000000D7 8805(A4300000)      <1>     mov byte [masterEnv], al
=======
    70 000000D7 8805(E62F0000)      <1>     mov byte [masterEnv.cspec], al
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    71                              <1> ;Set Int 4Eh up
    72 000000DD 488D15(0B170000)    <1>     lea rdx, int4Eh
    73 000000E4 B84E250000          <1>     mov eax, 254Eh ;Set this as Int 4Eh
    74 000000E9 CD41                <1>     int 41h
    75                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    76                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    77 000000EB 488D15(3E080000)    <1>     lea rdx, crlf
    78 000000F2 B409                <1>     mov ah, 09h
    79 000000F4 CD41                <1>     int 41h
<<<<<<< HEAD
    80 000000F6 E8(301F0000)        <1>     call time
    81 000000FB E8(6A1E0000)        <1>     call date
    82 00000100 488D15(3E080000)    <1>     lea rdx, crlf
    83 00000107 B409                <1>     mov ah, 09h
    84 00000109 CD41                <1>     int 41h
    85 0000010B 488D1D(CE300000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
=======
    80 000000F6 E8(B51E0000)        <1>     call time
    81 000000FB E8(EC1D0000)        <1>     call date
    82 00000100 488D15(BE070000)    <1>     lea rdx, crlf
    83 00000107 B409                <1>     mov ah, 09h
    84 00000109 CD41                <1>     int 41h
    85 0000010B 488D1D(80300000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
    86 00000112 EB32                <1>     jmp short .printInit
    87                              <1> .skipMaster:
    88 00000114 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
    89 0000011B 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
    90 00000123 0FB605(2C000000)    <1>     movzx eax, byte [switchChar]
    91 0000012A F2AE                <1>     repne scasb
    92 0000012C 67E310              <1>     jecxz .noSwitches
    93 0000012F 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
    94 00000132 24DF                <1>     and al, 0DFh    ;Convert to UC
    95 00000134 3C50                <1>     cmp al, "P" ;Is it permanent switch?
    96 00000136 7507                <1>     jne .noSwitches
    97 00000138 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    98                              <1> .noSwitches:
<<<<<<< HEAD
    99 0000013F 488D1D(A4300000)    <1>     lea rbx, endOfAllocNoMaster  ;This is the base address to jettison
=======
    99 0000013F 488D1D(D82F0000)    <1>     lea rbx, endOfAllocNoMaster  ;This is the base address to jettison
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   100                              <1> .printInit:
   101                              <1> ;Finish by printing INIT string.
   102 00000146 53                  <1>     push rbx
   103 00000147 488D153A000000      <1>     lea rdx, initString
   104 0000014E B409                <1>     mov ah, 09h
   105 00000150 CD41                <1>     int 41h ;Print init string
<<<<<<< HEAD
   106 00000152 E8(4B240000)        <1>     call version.printVersionNumber
=======
   106 00000152 E8(D3230000)        <1>     call version.printVersionNumber
>>>>>>> 840a70bb66f25aa62d68a4f2f9c7198a337409ff
   107 00000157 488D1560000000      <1>     lea rdx, initString2
   108 0000015E B409                <1>     mov ah, 09h
   109 00000160 CD41                <1>     int 41h ;Print init string
   110 00000162 5B                  <1>     pop rbx
   111                              <1>     ;Now we add the stack to the alloc and paragraph align
   112 00000163 4881C340060000      <1>     add rbx, stackSize
   113 0000016A 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   114 00000171 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   115 00000175 48C1E304            <1>     shl rbx, 4
   116 00000179 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   117 0000017C 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   118 00000183 E9(3D0E0000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   119                              <1> ;Loader Data here
   120                              <1> initString: 
   121 00000188 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   121 00000191 66696320436F6D7075- <1>
   121 0000019A 746572205265736561- <1>
   121 000001A3 726368285229205343- <1>
   121 000001AC 502F444F5328522920- <1>
   121 000001B5 56657273696F6E2024  <1>
   122                              <1> initString2:
   123 000001BE 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   123 000001C7 202020284329436F70- <1>
   123 000001D0 797269676874205363- <1>
   123 000001D9 69656E746966696320- <1>
   123 000001E2 436F6D707574657220- <1>
   123 000001EB 526573657261636820- <1>
   123 000001F4 323032322E0D0A24    <1>
   124 000001FC 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   124 00000205 20444F532076657273- <1>
   124 0000020E 696F6E0D0A24        <1>
    27                                  
    28                                  stackSize equ 200*8    ;200 QWORD stack
    28          ------------------       info: assembly required 1+3+2 passes

